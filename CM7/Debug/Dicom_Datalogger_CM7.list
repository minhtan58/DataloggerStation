
Dicom_Datalogger_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002a0e0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005554  0802a380  0802a380  0003a380  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802f8d4  0802f8d4  000402ec  2**0
                  CONTENTS
  4 .ARM          00000008  0802f8d4  0802f8d4  0003f8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802f8dc  0802f8dc  000402ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802f8dc  0802f8dc  0003f8dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802f8e0  0802f8e0  0003f8e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ec  24000000  0802f8e4  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a1d4  240002f0  0802fbd0  000402f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2400a4c4  0802fbd0  0004a4c4  2**0
                  ALLOC
 11 .lwip_sec     00001a00  30000000  0802fbd0  00050000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000402ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00081eb4  00000000  00000000  0004031a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000d0c5  00000000  00000000  000c21ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003398  00000000  00000000  000cf298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000031a8  00000000  00000000  000d2630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0005b7e0  00000000  00000000  000d57d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00058ace  00000000  00000000  00130fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001dcd47  00000000  00000000  00189a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  003667cd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000eba8  00000000  00000000  00366820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002f0 	.word	0x240002f0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802a368 	.word	0x0802a368

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002f4 	.word	0x240002f4
 80002dc:	0802a368 	.word	0x0802a368

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_ldivmod>:
 80003b0:	b97b      	cbnz	r3, 80003d2 <__aeabi_ldivmod+0x22>
 80003b2:	b972      	cbnz	r2, 80003d2 <__aeabi_ldivmod+0x22>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bfbe      	ittt	lt
 80003b8:	2000      	movlt	r0, #0
 80003ba:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80003be:	e006      	blt.n	80003ce <__aeabi_ldivmod+0x1e>
 80003c0:	bf08      	it	eq
 80003c2:	2800      	cmpeq	r0, #0
 80003c4:	bf1c      	itt	ne
 80003c6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80003ca:	f04f 30ff 	movne.w	r0, #4294967295
 80003ce:	f000 b9b9 	b.w	8000744 <__aeabi_idiv0>
 80003d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003da:	2900      	cmp	r1, #0
 80003dc:	db09      	blt.n	80003f2 <__aeabi_ldivmod+0x42>
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db1a      	blt.n	8000418 <__aeabi_ldivmod+0x68>
 80003e2:	f000 f84d 	bl	8000480 <__udivmoddi4>
 80003e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ee:	b004      	add	sp, #16
 80003f0:	4770      	bx	lr
 80003f2:	4240      	negs	r0, r0
 80003f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db1b      	blt.n	8000434 <__aeabi_ldivmod+0x84>
 80003fc:	f000 f840 	bl	8000480 <__udivmoddi4>
 8000400:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000408:	b004      	add	sp, #16
 800040a:	4240      	negs	r0, r0
 800040c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000410:	4252      	negs	r2, r2
 8000412:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000416:	4770      	bx	lr
 8000418:	4252      	negs	r2, r2
 800041a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800041e:	f000 f82f 	bl	8000480 <__udivmoddi4>
 8000422:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042a:	b004      	add	sp, #16
 800042c:	4240      	negs	r0, r0
 800042e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000432:	4770      	bx	lr
 8000434:	4252      	negs	r2, r2
 8000436:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800043a:	f000 f821 	bl	8000480 <__udivmoddi4>
 800043e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000446:	b004      	add	sp, #16
 8000448:	4252      	negs	r2, r2
 800044a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044e:	4770      	bx	lr

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295
 8000460:	f04f 30ff 	movne.w	r0, #4294967295
 8000464:	f000 b96e 	b.w	8000744 <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9d08      	ldr	r5, [sp, #32]
 8000486:	4604      	mov	r4, r0
 8000488:	468c      	mov	ip, r1
 800048a:	2b00      	cmp	r3, #0
 800048c:	f040 8083 	bne.w	8000596 <__udivmoddi4+0x116>
 8000490:	428a      	cmp	r2, r1
 8000492:	4617      	mov	r7, r2
 8000494:	d947      	bls.n	8000526 <__udivmoddi4+0xa6>
 8000496:	fab2 f282 	clz	r2, r2
 800049a:	b142      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049c:	f1c2 0020 	rsb	r0, r2, #32
 80004a0:	fa24 f000 	lsr.w	r0, r4, r0
 80004a4:	4091      	lsls	r1, r2
 80004a6:	4097      	lsls	r7, r2
 80004a8:	ea40 0c01 	orr.w	ip, r0, r1
 80004ac:	4094      	lsls	r4, r2
 80004ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fbbc f6f8 	udiv	r6, ip, r8
 80004b8:	fa1f fe87 	uxth.w	lr, r7
 80004bc:	fb08 c116 	mls	r1, r8, r6, ip
 80004c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c4:	fb06 f10e 	mul.w	r1, r6, lr
 80004c8:	4299      	cmp	r1, r3
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x60>
 80004cc:	18fb      	adds	r3, r7, r3
 80004ce:	f106 30ff 	add.w	r0, r6, #4294967295
 80004d2:	f080 8119 	bcs.w	8000708 <__udivmoddi4+0x288>
 80004d6:	4299      	cmp	r1, r3
 80004d8:	f240 8116 	bls.w	8000708 <__udivmoddi4+0x288>
 80004dc:	3e02      	subs	r6, #2
 80004de:	443b      	add	r3, r7
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004f4:	45a6      	cmp	lr, r4
 80004f6:	d909      	bls.n	800050c <__udivmoddi4+0x8c>
 80004f8:	193c      	adds	r4, r7, r4
 80004fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80004fe:	f080 8105 	bcs.w	800070c <__udivmoddi4+0x28c>
 8000502:	45a6      	cmp	lr, r4
 8000504:	f240 8102 	bls.w	800070c <__udivmoddi4+0x28c>
 8000508:	3802      	subs	r0, #2
 800050a:	443c      	add	r4, r7
 800050c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000510:	eba4 040e 	sub.w	r4, r4, lr
 8000514:	2600      	movs	r6, #0
 8000516:	b11d      	cbz	r5, 8000520 <__udivmoddi4+0xa0>
 8000518:	40d4      	lsrs	r4, r2
 800051a:	2300      	movs	r3, #0
 800051c:	e9c5 4300 	strd	r4, r3, [r5]
 8000520:	4631      	mov	r1, r6
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	b902      	cbnz	r2, 800052a <__udivmoddi4+0xaa>
 8000528:	deff      	udf	#255	; 0xff
 800052a:	fab2 f282 	clz	r2, r2
 800052e:	2a00      	cmp	r2, #0
 8000530:	d150      	bne.n	80005d4 <__udivmoddi4+0x154>
 8000532:	1bcb      	subs	r3, r1, r7
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	fa1f f887 	uxth.w	r8, r7
 800053c:	2601      	movs	r6, #1
 800053e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000542:	0c21      	lsrs	r1, r4, #16
 8000544:	fb0e 331c 	mls	r3, lr, ip, r3
 8000548:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054c:	fb08 f30c 	mul.w	r3, r8, ip
 8000550:	428b      	cmp	r3, r1
 8000552:	d907      	bls.n	8000564 <__udivmoddi4+0xe4>
 8000554:	1879      	adds	r1, r7, r1
 8000556:	f10c 30ff 	add.w	r0, ip, #4294967295
 800055a:	d202      	bcs.n	8000562 <__udivmoddi4+0xe2>
 800055c:	428b      	cmp	r3, r1
 800055e:	f200 80e9 	bhi.w	8000734 <__udivmoddi4+0x2b4>
 8000562:	4684      	mov	ip, r0
 8000564:	1ac9      	subs	r1, r1, r3
 8000566:	b2a3      	uxth	r3, r4
 8000568:	fbb1 f0fe 	udiv	r0, r1, lr
 800056c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000570:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000574:	fb08 f800 	mul.w	r8, r8, r0
 8000578:	45a0      	cmp	r8, r4
 800057a:	d907      	bls.n	800058c <__udivmoddi4+0x10c>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000582:	d202      	bcs.n	800058a <__udivmoddi4+0x10a>
 8000584:	45a0      	cmp	r8, r4
 8000586:	f200 80d9 	bhi.w	800073c <__udivmoddi4+0x2bc>
 800058a:	4618      	mov	r0, r3
 800058c:	eba4 0408 	sub.w	r4, r4, r8
 8000590:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000594:	e7bf      	b.n	8000516 <__udivmoddi4+0x96>
 8000596:	428b      	cmp	r3, r1
 8000598:	d909      	bls.n	80005ae <__udivmoddi4+0x12e>
 800059a:	2d00      	cmp	r5, #0
 800059c:	f000 80b1 	beq.w	8000702 <__udivmoddi4+0x282>
 80005a0:	2600      	movs	r6, #0
 80005a2:	e9c5 0100 	strd	r0, r1, [r5]
 80005a6:	4630      	mov	r0, r6
 80005a8:	4631      	mov	r1, r6
 80005aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ae:	fab3 f683 	clz	r6, r3
 80005b2:	2e00      	cmp	r6, #0
 80005b4:	d14a      	bne.n	800064c <__udivmoddi4+0x1cc>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d302      	bcc.n	80005c0 <__udivmoddi4+0x140>
 80005ba:	4282      	cmp	r2, r0
 80005bc:	f200 80b8 	bhi.w	8000730 <__udivmoddi4+0x2b0>
 80005c0:	1a84      	subs	r4, r0, r2
 80005c2:	eb61 0103 	sbc.w	r1, r1, r3
 80005c6:	2001      	movs	r0, #1
 80005c8:	468c      	mov	ip, r1
 80005ca:	2d00      	cmp	r5, #0
 80005cc:	d0a8      	beq.n	8000520 <__udivmoddi4+0xa0>
 80005ce:	e9c5 4c00 	strd	r4, ip, [r5]
 80005d2:	e7a5      	b.n	8000520 <__udivmoddi4+0xa0>
 80005d4:	f1c2 0320 	rsb	r3, r2, #32
 80005d8:	fa20 f603 	lsr.w	r6, r0, r3
 80005dc:	4097      	lsls	r7, r2
 80005de:	fa01 f002 	lsl.w	r0, r1, r2
 80005e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005e6:	40d9      	lsrs	r1, r3
 80005e8:	4330      	orrs	r0, r6
 80005ea:	0c03      	lsrs	r3, r0, #16
 80005ec:	fbb1 f6fe 	udiv	r6, r1, lr
 80005f0:	fa1f f887 	uxth.w	r8, r7
 80005f4:	fb0e 1116 	mls	r1, lr, r6, r1
 80005f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005fc:	fb06 f108 	mul.w	r1, r6, r8
 8000600:	4299      	cmp	r1, r3
 8000602:	fa04 f402 	lsl.w	r4, r4, r2
 8000606:	d909      	bls.n	800061c <__udivmoddi4+0x19c>
 8000608:	18fb      	adds	r3, r7, r3
 800060a:	f106 3cff 	add.w	ip, r6, #4294967295
 800060e:	f080 808d 	bcs.w	800072c <__udivmoddi4+0x2ac>
 8000612:	4299      	cmp	r1, r3
 8000614:	f240 808a 	bls.w	800072c <__udivmoddi4+0x2ac>
 8000618:	3e02      	subs	r6, #2
 800061a:	443b      	add	r3, r7
 800061c:	1a5b      	subs	r3, r3, r1
 800061e:	b281      	uxth	r1, r0
 8000620:	fbb3 f0fe 	udiv	r0, r3, lr
 8000624:	fb0e 3310 	mls	r3, lr, r0, r3
 8000628:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800062c:	fb00 f308 	mul.w	r3, r0, r8
 8000630:	428b      	cmp	r3, r1
 8000632:	d907      	bls.n	8000644 <__udivmoddi4+0x1c4>
 8000634:	1879      	adds	r1, r7, r1
 8000636:	f100 3cff 	add.w	ip, r0, #4294967295
 800063a:	d273      	bcs.n	8000724 <__udivmoddi4+0x2a4>
 800063c:	428b      	cmp	r3, r1
 800063e:	d971      	bls.n	8000724 <__udivmoddi4+0x2a4>
 8000640:	3802      	subs	r0, #2
 8000642:	4439      	add	r1, r7
 8000644:	1acb      	subs	r3, r1, r3
 8000646:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800064a:	e778      	b.n	800053e <__udivmoddi4+0xbe>
 800064c:	f1c6 0c20 	rsb	ip, r6, #32
 8000650:	fa03 f406 	lsl.w	r4, r3, r6
 8000654:	fa22 f30c 	lsr.w	r3, r2, ip
 8000658:	431c      	orrs	r4, r3
 800065a:	fa20 f70c 	lsr.w	r7, r0, ip
 800065e:	fa01 f306 	lsl.w	r3, r1, r6
 8000662:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000666:	fa21 f10c 	lsr.w	r1, r1, ip
 800066a:	431f      	orrs	r7, r3
 800066c:	0c3b      	lsrs	r3, r7, #16
 800066e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000672:	fa1f f884 	uxth.w	r8, r4
 8000676:	fb0e 1119 	mls	r1, lr, r9, r1
 800067a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800067e:	fb09 fa08 	mul.w	sl, r9, r8
 8000682:	458a      	cmp	sl, r1
 8000684:	fa02 f206 	lsl.w	r2, r2, r6
 8000688:	fa00 f306 	lsl.w	r3, r0, r6
 800068c:	d908      	bls.n	80006a0 <__udivmoddi4+0x220>
 800068e:	1861      	adds	r1, r4, r1
 8000690:	f109 30ff 	add.w	r0, r9, #4294967295
 8000694:	d248      	bcs.n	8000728 <__udivmoddi4+0x2a8>
 8000696:	458a      	cmp	sl, r1
 8000698:	d946      	bls.n	8000728 <__udivmoddi4+0x2a8>
 800069a:	f1a9 0902 	sub.w	r9, r9, #2
 800069e:	4421      	add	r1, r4
 80006a0:	eba1 010a 	sub.w	r1, r1, sl
 80006a4:	b2bf      	uxth	r7, r7
 80006a6:	fbb1 f0fe 	udiv	r0, r1, lr
 80006aa:	fb0e 1110 	mls	r1, lr, r0, r1
 80006ae:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80006b2:	fb00 f808 	mul.w	r8, r0, r8
 80006b6:	45b8      	cmp	r8, r7
 80006b8:	d907      	bls.n	80006ca <__udivmoddi4+0x24a>
 80006ba:	19e7      	adds	r7, r4, r7
 80006bc:	f100 31ff 	add.w	r1, r0, #4294967295
 80006c0:	d22e      	bcs.n	8000720 <__udivmoddi4+0x2a0>
 80006c2:	45b8      	cmp	r8, r7
 80006c4:	d92c      	bls.n	8000720 <__udivmoddi4+0x2a0>
 80006c6:	3802      	subs	r0, #2
 80006c8:	4427      	add	r7, r4
 80006ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80006ce:	eba7 0708 	sub.w	r7, r7, r8
 80006d2:	fba0 8902 	umull	r8, r9, r0, r2
 80006d6:	454f      	cmp	r7, r9
 80006d8:	46c6      	mov	lr, r8
 80006da:	4649      	mov	r1, r9
 80006dc:	d31a      	bcc.n	8000714 <__udivmoddi4+0x294>
 80006de:	d017      	beq.n	8000710 <__udivmoddi4+0x290>
 80006e0:	b15d      	cbz	r5, 80006fa <__udivmoddi4+0x27a>
 80006e2:	ebb3 020e 	subs.w	r2, r3, lr
 80006e6:	eb67 0701 	sbc.w	r7, r7, r1
 80006ea:	fa07 fc0c 	lsl.w	ip, r7, ip
 80006ee:	40f2      	lsrs	r2, r6
 80006f0:	ea4c 0202 	orr.w	r2, ip, r2
 80006f4:	40f7      	lsrs	r7, r6
 80006f6:	e9c5 2700 	strd	r2, r7, [r5]
 80006fa:	2600      	movs	r6, #0
 80006fc:	4631      	mov	r1, r6
 80006fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000702:	462e      	mov	r6, r5
 8000704:	4628      	mov	r0, r5
 8000706:	e70b      	b.n	8000520 <__udivmoddi4+0xa0>
 8000708:	4606      	mov	r6, r0
 800070a:	e6e9      	b.n	80004e0 <__udivmoddi4+0x60>
 800070c:	4618      	mov	r0, r3
 800070e:	e6fd      	b.n	800050c <__udivmoddi4+0x8c>
 8000710:	4543      	cmp	r3, r8
 8000712:	d2e5      	bcs.n	80006e0 <__udivmoddi4+0x260>
 8000714:	ebb8 0e02 	subs.w	lr, r8, r2
 8000718:	eb69 0104 	sbc.w	r1, r9, r4
 800071c:	3801      	subs	r0, #1
 800071e:	e7df      	b.n	80006e0 <__udivmoddi4+0x260>
 8000720:	4608      	mov	r0, r1
 8000722:	e7d2      	b.n	80006ca <__udivmoddi4+0x24a>
 8000724:	4660      	mov	r0, ip
 8000726:	e78d      	b.n	8000644 <__udivmoddi4+0x1c4>
 8000728:	4681      	mov	r9, r0
 800072a:	e7b9      	b.n	80006a0 <__udivmoddi4+0x220>
 800072c:	4666      	mov	r6, ip
 800072e:	e775      	b.n	800061c <__udivmoddi4+0x19c>
 8000730:	4630      	mov	r0, r6
 8000732:	e74a      	b.n	80005ca <__udivmoddi4+0x14a>
 8000734:	f1ac 0c02 	sub.w	ip, ip, #2
 8000738:	4439      	add	r1, r7
 800073a:	e713      	b.n	8000564 <__udivmoddi4+0xe4>
 800073c:	3802      	subs	r0, #2
 800073e:	443c      	add	r4, r7
 8000740:	e724      	b.n	800058c <__udivmoddi4+0x10c>
 8000742:	bf00      	nop

08000744 <__aeabi_idiv0>:
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop

08000748 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800074c:	4b3f      	ldr	r3, [pc, #252]	; (800084c <SystemInit+0x104>)
 800074e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000752:	4a3e      	ldr	r2, [pc, #248]	; (800084c <SystemInit+0x104>)
 8000754:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000758:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800075c:	4b3b      	ldr	r3, [pc, #236]	; (800084c <SystemInit+0x104>)
 800075e:	691b      	ldr	r3, [r3, #16]
 8000760:	4a3a      	ldr	r2, [pc, #232]	; (800084c <SystemInit+0x104>)
 8000762:	f043 0310 	orr.w	r3, r3, #16
 8000766:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000768:	4b39      	ldr	r3, [pc, #228]	; (8000850 <SystemInit+0x108>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f003 030f 	and.w	r3, r3, #15
 8000770:	2b06      	cmp	r3, #6
 8000772:	d807      	bhi.n	8000784 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000774:	4b36      	ldr	r3, [pc, #216]	; (8000850 <SystemInit+0x108>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f023 030f 	bic.w	r3, r3, #15
 800077c:	4a34      	ldr	r2, [pc, #208]	; (8000850 <SystemInit+0x108>)
 800077e:	f043 0307 	orr.w	r3, r3, #7
 8000782:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000784:	4b33      	ldr	r3, [pc, #204]	; (8000854 <SystemInit+0x10c>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a32      	ldr	r2, [pc, #200]	; (8000854 <SystemInit+0x10c>)
 800078a:	f043 0301 	orr.w	r3, r3, #1
 800078e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000790:	4b30      	ldr	r3, [pc, #192]	; (8000854 <SystemInit+0x10c>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000796:	4b2f      	ldr	r3, [pc, #188]	; (8000854 <SystemInit+0x10c>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	492e      	ldr	r1, [pc, #184]	; (8000854 <SystemInit+0x10c>)
 800079c:	4b2e      	ldr	r3, [pc, #184]	; (8000858 <SystemInit+0x110>)
 800079e:	4013      	ands	r3, r2
 80007a0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007a2:	4b2b      	ldr	r3, [pc, #172]	; (8000850 <SystemInit+0x108>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f003 0308 	and.w	r3, r3, #8
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d007      	beq.n	80007be <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007ae:	4b28      	ldr	r3, [pc, #160]	; (8000850 <SystemInit+0x108>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f023 030f 	bic.w	r3, r3, #15
 80007b6:	4a26      	ldr	r2, [pc, #152]	; (8000850 <SystemInit+0x108>)
 80007b8:	f043 0307 	orr.w	r3, r3, #7
 80007bc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80007be:	4b25      	ldr	r3, [pc, #148]	; (8000854 <SystemInit+0x10c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <SystemInit+0x10c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80007ca:	4b22      	ldr	r3, [pc, #136]	; (8000854 <SystemInit+0x10c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80007d0:	4b20      	ldr	r3, [pc, #128]	; (8000854 <SystemInit+0x10c>)
 80007d2:	4a22      	ldr	r2, [pc, #136]	; (800085c <SystemInit+0x114>)
 80007d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80007d6:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <SystemInit+0x10c>)
 80007d8:	4a21      	ldr	r2, [pc, #132]	; (8000860 <SystemInit+0x118>)
 80007da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80007dc:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <SystemInit+0x10c>)
 80007de:	4a21      	ldr	r2, [pc, #132]	; (8000864 <SystemInit+0x11c>)
 80007e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80007e2:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <SystemInit+0x10c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80007e8:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <SystemInit+0x10c>)
 80007ea:	4a1e      	ldr	r2, [pc, #120]	; (8000864 <SystemInit+0x11c>)
 80007ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80007ee:	4b19      	ldr	r3, [pc, #100]	; (8000854 <SystemInit+0x10c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80007f4:	4b17      	ldr	r3, [pc, #92]	; (8000854 <SystemInit+0x10c>)
 80007f6:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <SystemInit+0x11c>)
 80007f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80007fa:	4b16      	ldr	r3, [pc, #88]	; (8000854 <SystemInit+0x10c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <SystemInit+0x10c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a13      	ldr	r2, [pc, #76]	; (8000854 <SystemInit+0x10c>)
 8000806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800080a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <SystemInit+0x10c>)
 800080e:	2200      	movs	r2, #0
 8000810:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <SystemInit+0x120>)
 8000814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000816:	4a14      	ldr	r2, [pc, #80]	; (8000868 <SystemInit+0x120>)
 8000818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800081c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800081e:	4b13      	ldr	r3, [pc, #76]	; (800086c <SystemInit+0x124>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <SystemInit+0x128>)
 8000824:	4013      	ands	r3, r2
 8000826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800082a:	d202      	bcs.n	8000832 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <SystemInit+0x12c>)
 800082e:	2201      	movs	r2, #1
 8000830:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <SystemInit+0x130>)
 8000834:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000838:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800083a:	4b04      	ldr	r3, [pc, #16]	; (800084c <SystemInit+0x104>)
 800083c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000840:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	e000ed00 	.word	0xe000ed00
 8000850:	52002000 	.word	0x52002000
 8000854:	58024400 	.word	0x58024400
 8000858:	eaf6ed7f 	.word	0xeaf6ed7f
 800085c:	02020200 	.word	0x02020200
 8000860:	01ff0000 	.word	0x01ff0000
 8000864:	01010280 	.word	0x01010280
 8000868:	580000c0 	.word	0x580000c0
 800086c:	5c001000 	.word	0x5c001000
 8000870:	ffff0000 	.word	0xffff0000
 8000874:	51008108 	.word	0x51008108
 8000878:	52004000 	.word	0x52004000

0800087c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	4a07      	ldr	r2, [pc, #28]	; (80008a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800088c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	4a06      	ldr	r2, [pc, #24]	; (80008ac <vApplicationGetIdleTaskMemory+0x30>)
 8000892:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	f44f 7200 	mov.w	r2, #512	; 0x200
 800089a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800089c:	bf00      	nop
 800089e:	3714      	adds	r7, #20
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	2400030c 	.word	0x2400030c
 80008ac:	240003c0 	.word	0x240003c0

080008b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b0:	b5b0      	push	{r4, r5, r7, lr}
 80008b2:	b094      	sub	sp, #80	; 0x50
 80008b4:	af00      	add	r7, sp, #0
	int32_t timeout;

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 80008b6:	f000 f9e1 	bl	8000c7c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008ba:	4b6c      	ldr	r3, [pc, #432]	; (8000a6c <main+0x1bc>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d11b      	bne.n	80008fe <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008c6:	f3bf 8f4f 	dsb	sy
}
 80008ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008cc:	f3bf 8f6f 	isb	sy
}
 80008d0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80008d2:	4b66      	ldr	r3, [pc, #408]	; (8000a6c <main+0x1bc>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80008da:	f3bf 8f4f 	dsb	sy
}
 80008de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008e0:	f3bf 8f6f 	isb	sy
}
 80008e4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008e6:	4b61      	ldr	r3, [pc, #388]	; (8000a6c <main+0x1bc>)
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	4a60      	ldr	r2, [pc, #384]	; (8000a6c <main+0x1bc>)
 80008ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008f2:	f3bf 8f4f 	dsb	sy
}
 80008f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008f8:	f3bf 8f6f 	isb	sy
}
 80008fc:	e000      	b.n	8000900 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008fe:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000900:	4b5a      	ldr	r3, [pc, #360]	; (8000a6c <main+0x1bc>)
 8000902:	695b      	ldr	r3, [r3, #20]
 8000904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000908:	2b00      	cmp	r3, #0
 800090a:	d138      	bne.n	800097e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800090c:	4b57      	ldr	r3, [pc, #348]	; (8000a6c <main+0x1bc>)
 800090e:	2200      	movs	r2, #0
 8000910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000914:	f3bf 8f4f 	dsb	sy
}
 8000918:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800091a:	4b54      	ldr	r3, [pc, #336]	; (8000a6c <main+0x1bc>)
 800091c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000920:	64bb      	str	r3, [r7, #72]	; 0x48

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000924:	0b5b      	lsrs	r3, r3, #13
 8000926:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800092a:	647b      	str	r3, [r7, #68]	; 0x44
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800092c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800092e:	08db      	lsrs	r3, r3, #3
 8000930:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000934:	643b      	str	r3, [r7, #64]	; 0x40
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000938:	015a      	lsls	r2, r3, #5
 800093a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800093e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000940:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000942:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000944:	4949      	ldr	r1, [pc, #292]	; (8000a6c <main+0x1bc>)
 8000946:	4313      	orrs	r3, r2
 8000948:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800094c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800094e:	1e5a      	subs	r2, r3, #1
 8000950:	643a      	str	r2, [r7, #64]	; 0x40
 8000952:	2b00      	cmp	r3, #0
 8000954:	d1ef      	bne.n	8000936 <main+0x86>
    } while(sets-- != 0U);
 8000956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000958:	1e5a      	subs	r2, r3, #1
 800095a:	647a      	str	r2, [r7, #68]	; 0x44
 800095c:	2b00      	cmp	r3, #0
 800095e:	d1e5      	bne.n	800092c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000960:	f3bf 8f4f 	dsb	sy
}
 8000964:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000966:	4b41      	ldr	r3, [pc, #260]	; (8000a6c <main+0x1bc>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	4a40      	ldr	r2, [pc, #256]	; (8000a6c <main+0x1bc>)
 800096c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000970:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000972:	f3bf 8f4f 	dsb	sy
}
 8000976:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000978:	f3bf 8f6f 	isb	sy
}
 800097c:	e000      	b.n	8000980 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800097e:	bf00      	nop

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();

	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000980:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000984:	64fb      	str	r3, [r7, #76]	; 0x4c
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000986:	bf00      	nop
 8000988:	4b39      	ldr	r3, [pc, #228]	; (8000a70 <main+0x1c0>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000990:	2b00      	cmp	r3, #0
 8000992:	d004      	beq.n	800099e <main+0xee>
 8000994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000996:	1e5a      	subs	r2, r3, #1
 8000998:	64fa      	str	r2, [r7, #76]	; 0x4c
 800099a:	2b00      	cmp	r3, #0
 800099c:	dcf4      	bgt.n	8000988 <main+0xd8>
	if ( timeout < 0 )
 800099e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	da01      	bge.n	80009a8 <main+0xf8>
	{
		Error_Handler();
 80009a4:	f000 f9ce 	bl	8000d44 <Error_Handler>
	}
	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80009a8:	f000 fcf8 	bl	800139c <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80009ac:	f000 f86a 	bl	8000a84 <SystemClock_Config>

	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 80009b0:	4b2f      	ldr	r3, [pc, #188]	; (8000a70 <main+0x1c0>)
 80009b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b6:	4a2e      	ldr	r2, [pc, #184]	; (8000a70 <main+0x1c0>)
 80009b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c0:	4b2b      	ldr	r3, [pc, #172]	; (8000a70 <main+0x1c0>)
 80009c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 80009ce:	2000      	movs	r0, #0
 80009d0:	f003 fcd6 	bl	8004380 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 80009d4:	2100      	movs	r1, #0
 80009d6:	2000      	movs	r0, #0
 80009d8:	f003 fcec 	bl	80043b4 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 80009dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009e0:	64fb      	str	r3, [r7, #76]	; 0x4c
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80009e2:	bf00      	nop
 80009e4:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <main+0x1c0>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d104      	bne.n	80009fa <main+0x14a>
 80009f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009f2:	1e5a      	subs	r2, r3, #1
 80009f4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	dcf4      	bgt.n	80009e4 <main+0x134>
	if ( timeout < 0 )
 80009fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	da01      	bge.n	8000a04 <main+0x154>
	{
		Error_Handler();
 8000a00:	f000 f9a0 	bl	8000d44 <Error_Handler>
	}

	MX_GPIO_Init();
 8000a04:	f000 f8b8 	bl	8000b78 <MX_GPIO_Init>
	MX_UART8_Init();
 8000a08:	f021 fbae 	bl	8022168 <MX_UART8_Init>
	MX_USART1_UART_Init();
 8000a0c:	f021 fbf8 	bl	8022200 <MX_USART1_UART_Init>
	MX_RTC_Init();
 8000a10:	f021 fa98 	bl	8021f44 <MX_RTC_Init>
	MX_TIM2_Init();
 8000a14:	f021 fb16 	bl	8022044 <MX_TIM2_Init>

	osThreadDef(defaultTask, Network_Task, osPriorityNormal, 0, 1024);
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <main+0x1c4>)
 8000a1a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000a1e:	461d      	mov	r5, r3
 8000a20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	NetWorkTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f00a fb57 	bl	800b0e6 <osThreadCreate>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	4a0f      	ldr	r2, [pc, #60]	; (8000a78 <main+0x1c8>)
 8000a3c:	6013      	str	r3, [r2, #0]

	osThreadDef(SerialPortComTask, SerialPortCom_Task, osPriorityBelowNormal, 0, 512);
 8000a3e:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <main+0x1cc>)
 8000a40:	f107 0408 	add.w	r4, r7, #8
 8000a44:	461d      	mov	r5, r3
 8000a46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	SerialPortComTaskHandle = osThreadCreate(osThread(SerialPortComTask), NULL);
 8000a52:	f107 0308 	add.w	r3, r7, #8
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f00a fb44 	bl	800b0e6 <osThreadCreate>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	4a07      	ldr	r2, [pc, #28]	; (8000a80 <main+0x1d0>)
 8000a62:	6013      	str	r3, [r2, #0]

	osKernelStart();
 8000a64:	f00a fb28 	bl	800b0b8 <osKernelStart>

	while(1){}
 8000a68:	e7fe      	b.n	8000a68 <main+0x1b8>
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00
 8000a70:	58024400 	.word	0x58024400
 8000a74:	0802a3a0 	.word	0x0802a3a0
 8000a78:	24005178 	.word	0x24005178
 8000a7c:	0802a3bc 	.word	0x0802a3bc
 8000a80:	24005174 	.word	0x24005174

08000a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b09c      	sub	sp, #112	; 0x70
 8000a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	224c      	movs	r2, #76	; 0x4c
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f025 fbc0 	bl	8026218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	2220      	movs	r2, #32
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f025 fbba 	bl	8026218 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000aa4:	2004      	movs	r0, #4
 8000aa6:	f003 fcc1 	bl	800442c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b30      	ldr	r3, [pc, #192]	; (8000b70 <SystemClock_Config+0xec>)
 8000ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ab2:	4a2f      	ldr	r2, [pc, #188]	; (8000b70 <SystemClock_Config+0xec>)
 8000ab4:	f023 0301 	bic.w	r3, r3, #1
 8000ab8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000aba:	4b2d      	ldr	r3, [pc, #180]	; (8000b70 <SystemClock_Config+0xec>)
 8000abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	4b2b      	ldr	r3, [pc, #172]	; (8000b74 <SystemClock_Config+0xf0>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	4a2a      	ldr	r2, [pc, #168]	; (8000b74 <SystemClock_Config+0xf0>)
 8000aca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ace:	6193      	str	r3, [r2, #24]
 8000ad0:	4b28      	ldr	r3, [pc, #160]	; (8000b74 <SystemClock_Config+0xf0>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000adc:	bf00      	nop
 8000ade:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <SystemClock_Config+0xf0>)
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aea:	d1f8      	bne.n	8000ade <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aec:	2301      	movs	r3, #1
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000af0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af6:	2302      	movs	r3, #2
 8000af8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000afa:	2302      	movs	r3, #2
 8000afc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000afe:	2305      	movs	r3, #5
 8000b00:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000b02:	23a0      	movs	r3, #160	; 0xa0
 8000b04:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b06:	2302      	movs	r3, #2
 8000b08:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000b12:	2308      	movs	r3, #8
 8000b14:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b22:	4618      	mov	r0, r3
 8000b24:	f003 fef2 	bl	800490c <HAL_RCC_OscConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b2e:	f000 f909 	bl	8000d44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b32:	233f      	movs	r3, #63	; 0x3f
 8000b34:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b36:	2303      	movs	r3, #3
 8000b38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b3e:	2308      	movs	r3, #8
 8000b40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b42:	2340      	movs	r3, #64	; 0x40
 8000b44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b46:	2340      	movs	r3, #64	; 0x40
 8000b48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b4e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b50:	2340      	movs	r3, #64	; 0x40
 8000b52:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2102      	movs	r1, #2
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f004 fb03 	bl	8005164 <HAL_RCC_ClockConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000b64:	f000 f8ee 	bl	8000d44 <Error_Handler>
  }
}
 8000b68:	bf00      	nop
 8000b6a:	3770      	adds	r7, #112	; 0x70
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	58000400 	.word	0x58000400
 8000b74:	58024800 	.word	0x58024800

08000b78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08c      	sub	sp, #48	; 0x30
 8000b7c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7e:	f107 031c 	add.w	r3, r7, #28
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b8e:	4b39      	ldr	r3, [pc, #228]	; (8000c74 <MX_GPIO_Init+0xfc>)
 8000b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b94:	4a37      	ldr	r2, [pc, #220]	; (8000c74 <MX_GPIO_Init+0xfc>)
 8000b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b9e:	4b35      	ldr	r3, [pc, #212]	; (8000c74 <MX_GPIO_Init+0xfc>)
 8000ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ba8:	61bb      	str	r3, [r7, #24]
 8000baa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bac:	4b31      	ldr	r3, [pc, #196]	; (8000c74 <MX_GPIO_Init+0xfc>)
 8000bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb2:	4a30      	ldr	r2, [pc, #192]	; (8000c74 <MX_GPIO_Init+0xfc>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bbc:	4b2d      	ldr	r3, [pc, #180]	; (8000c74 <MX_GPIO_Init+0xfc>)
 8000bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bca:	4b2a      	ldr	r3, [pc, #168]	; (8000c74 <MX_GPIO_Init+0xfc>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd0:	4a28      	ldr	r2, [pc, #160]	; (8000c74 <MX_GPIO_Init+0xfc>)
 8000bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bda:	4b26      	ldr	r3, [pc, #152]	; (8000c74 <MX_GPIO_Init+0xfc>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be8:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <MX_GPIO_Init+0xfc>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bee:	4a21      	ldr	r2, [pc, #132]	; (8000c74 <MX_GPIO_Init+0xfc>)
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf8:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <MX_GPIO_Init+0xfc>)
 8000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfe:	f003 0304 	and.w	r3, r3, #4
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c06:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <MX_GPIO_Init+0xfc>)
 8000c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0c:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <MX_GPIO_Init+0xfc>)
 8000c0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <MX_GPIO_Init+0xfc>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c24:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <MX_GPIO_Init+0xfc>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a12      	ldr	r2, [pc, #72]	; (8000c74 <MX_GPIO_Init+0xfc>)
 8000c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MX_GPIO_Init+0xfc>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000c48:	480b      	ldr	r0, [pc, #44]	; (8000c78 <MX_GPIO_Init+0x100>)
 8000c4a:	f003 fb65 	bl	8004318 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PI12 PI13 PI14 PI15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c4e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000c52:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	4804      	ldr	r0, [pc, #16]	; (8000c78 <MX_GPIO_Init+0x100>)
 8000c68:	f003 f9a6 	bl	8003fb8 <HAL_GPIO_Init>
}
 8000c6c:	bf00      	nop
 8000c6e:	3730      	adds	r7, #48	; 0x30
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	58024400 	.word	0x58024400
 8000c78:	58022000 	.word	0x58022000

08000c7c <MPU_Config>:

/* MPU Configuration */

void MPU_Config(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c82:	463b      	mov	r3, r7
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c8e:	f000 fce1 	bl	8001654 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c92:	2301      	movs	r3, #1
 8000c94:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x00;
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000c9a:	231f      	movs	r3, #31
 8000c9c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000caa:	2301      	movs	r3, #1
 8000cac:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000cb6:	2387      	movs	r3, #135	; 0x87
 8000cb8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f000 fcff 	bl	80016c4 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Device not cacheable
     for ETH DMA descriptors */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000cca:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000cce:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000cd0:	2307      	movs	r3, #7
 8000cd2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8000cec:	2300      	movs	r3, #0
 8000cee:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000cf4:	463b      	mov	r3, r7
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 fce4 	bl	80016c4 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Normal Non Cacheable
     for LwIP RAM heap which contains the Tx buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30004000;
 8000d00:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <MPU_Config+0xc4>)
 8000d02:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000d04:	230d      	movs	r3, #13
 8000d06:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d14:	2301      	movs	r3, #1
 8000d16:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8000d20:	2300      	movs	r3, #0
 8000d22:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d28:	463b      	mov	r3, r7
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 fcca 	bl	80016c4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d30:	2004      	movs	r0, #4
 8000d32:	f000 fca7 	bl	8001684 <HAL_MPU_Enable>

}
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	30004000 	.word	0x30004000

08000d44 <Error_Handler>:

void Error_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d48:	b672      	cpsid	i
}
 8000d4a:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1){}
 8000d4c:	e7fe      	b.n	8000d4c <Error_Handler+0x8>
	...

08000d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <HAL_MspInit+0x38>)
 8000d58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d5c:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <HAL_MspInit+0x38>)
 8000d5e:	f043 0302 	orr.w	r3, r3, #2
 8000d62:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <HAL_MspInit+0x38>)
 8000d68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d74:	2200      	movs	r2, #0
 8000d76:	210f      	movs	r1, #15
 8000d78:	f06f 0001 	mvn.w	r0, #1
 8000d7c:	f000 fc42 	bl	8001604 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	58024400 	.word	0x58024400

08000d8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b090      	sub	sp, #64	; 0x40
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b0f      	cmp	r3, #15
 8000d98:	d827      	bhi.n	8000dea <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	6879      	ldr	r1, [r7, #4]
 8000d9e:	2036      	movs	r0, #54	; 0x36
 8000da0:	f000 fc30 	bl	8001604 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000da4:	2036      	movs	r0, #54	; 0x36
 8000da6:	f000 fc47 	bl	8001638 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000daa:	4a29      	ldr	r2, [pc, #164]	; (8000e50 <HAL_InitTick+0xc4>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000db0:	4b28      	ldr	r3, [pc, #160]	; (8000e54 <HAL_InitTick+0xc8>)
 8000db2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000db6:	4a27      	ldr	r2, [pc, #156]	; (8000e54 <HAL_InitTick+0xc8>)
 8000db8:	f043 0310 	orr.w	r3, r3, #16
 8000dbc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000dc0:	4b24      	ldr	r3, [pc, #144]	; (8000e54 <HAL_InitTick+0xc8>)
 8000dc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dc6:	f003 0310 	and.w	r3, r3, #16
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dce:	f107 0210 	add.w	r2, r7, #16
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f004 fd4f 	bl	800587c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000de0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d106      	bne.n	8000df6 <HAL_InitTick+0x6a>
 8000de8:	e001      	b.n	8000dee <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e02b      	b.n	8000e46 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dee:	f004 fd19 	bl	8005824 <HAL_RCC_GetPCLK1Freq>
 8000df2:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000df4:	e004      	b.n	8000e00 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000df6:	f004 fd15 	bl	8005824 <HAL_RCC_GetPCLK1Freq>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e02:	4a15      	ldr	r2, [pc, #84]	; (8000e58 <HAL_InitTick+0xcc>)
 8000e04:	fba2 2303 	umull	r2, r3, r2, r3
 8000e08:	0c9b      	lsrs	r3, r3, #18
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e0e:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <HAL_InitTick+0xd0>)
 8000e10:	4a13      	ldr	r2, [pc, #76]	; (8000e60 <HAL_InitTick+0xd4>)
 8000e12:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <HAL_InitTick+0xd0>)
 8000e16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e1a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e1c:	4a0f      	ldr	r2, [pc, #60]	; (8000e5c <HAL_InitTick+0xd0>)
 8000e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e20:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <HAL_InitTick+0xd0>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <HAL_InitTick+0xd0>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e2e:	480b      	ldr	r0, [pc, #44]	; (8000e5c <HAL_InitTick+0xd0>)
 8000e30:	f006 fc12 	bl	8007658 <HAL_TIM_Base_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d104      	bne.n	8000e44 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e3a:	4808      	ldr	r0, [pc, #32]	; (8000e5c <HAL_InitTick+0xd0>)
 8000e3c:	f006 fc64 	bl	8007708 <HAL_TIM_Base_Start_IT>
 8000e40:	4603      	mov	r3, r0
 8000e42:	e000      	b.n	8000e46 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3740      	adds	r7, #64	; 0x40
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	2400000c 	.word	0x2400000c
 8000e54:	58024400 	.word	0x58024400
 8000e58:	431bde83 	.word	0x431bde83
 8000e5c:	2400517c 	.word	0x2400517c
 8000e60:	40001000 	.word	0x40001000

08000e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <NMI_Handler+0x4>

08000e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <HardFault_Handler+0x4>

08000e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <MemManage_Handler+0x4>

08000e76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <BusFault_Handler+0x4>

08000e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <UsageFault_Handler+0x4>

08000e82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <USART1_IRQHandler+0x10>)
 8000e96:	f007 fa0f 	bl	80082b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	24008780 	.word	0x24008780

08000ea4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ea8:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <TIM6_DAC_IRQHandler+0x10>)
 8000eaa:	f006 fca5 	bl	80077f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	2400517c 	.word	0x2400517c

08000eb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <TIM2_IRQHandler+0x10>)
 8000ebe:	f006 fc9b 	bl	80077f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	24008734 	.word	0x24008734

08000ecc <ETH_IRQHandler>:
/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <ETH_IRQHandler+0x10>)
 8000ed2:	f001 fe8b 	bl	8002bec <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	240052fc 	.word	0x240052fc

08000ee0 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8000ee4:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <UART8_IRQHandler+0x10>)
 8000ee6:	f007 f9e7 	bl	80082b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	24008810 	.word	0x24008810

08000ef4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
	return 1;
 8000ef8:	2301      	movs	r3, #1
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <_kill>:

int _kill(int pid, int sig)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f0e:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <_kill+0x20>)
 8000f10:	2216      	movs	r2, #22
 8000f12:	601a      	str	r2, [r3, #0]
	return -1;
 8000f14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	240086b8 	.word	0x240086b8

08000f28 <_exit>:

void _exit (int status)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f30:	f04f 31ff 	mov.w	r1, #4294967295
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ffe5 	bl	8000f04 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f3a:	e7fe      	b.n	8000f3a <_exit+0x12>

08000f3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	e00a      	b.n	8000f64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f4e:	f3af 8000 	nop.w
 8000f52:	4601      	mov	r1, r0
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	1c5a      	adds	r2, r3, #1
 8000f58:	60ba      	str	r2, [r7, #8]
 8000f5a:	b2ca      	uxtb	r2, r1
 8000f5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	3301      	adds	r3, #1
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	697a      	ldr	r2, [r7, #20]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	dbf0      	blt.n	8000f4e <_read+0x12>
	}

return len;
 8000f6c:	687b      	ldr	r3, [r7, #4]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b086      	sub	sp, #24
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	60f8      	str	r0, [r7, #12]
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	e009      	b.n	8000f9c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	1c5a      	adds	r2, r3, #1
 8000f8c:	60ba      	str	r2, [r7, #8]
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f021 f8cd 	bl	8022130 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	dbf1      	blt.n	8000f88 <_write+0x12>
	}
	return len;
 8000fa4:	687b      	ldr	r3, [r7, #4]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <_close>:

int _close(int file)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
	return -1;
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fd6:	605a      	str	r2, [r3, #4]
	return 0;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <_isatty>:

int _isatty(int file)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
	return 1;
 8000fee:	2301      	movs	r3, #1
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
	return 0;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001018:	b480      	push	{r7}
 800101a:	b087      	sub	sp, #28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001020:	4a14      	ldr	r2, [pc, #80]	; (8001074 <_sbrk+0x5c>)
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <_sbrk+0x60>)
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <_sbrk+0x64>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d102      	bne.n	800103a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <_sbrk+0x64>)
 8001036:	4a12      	ldr	r2, [pc, #72]	; (8001080 <_sbrk+0x68>)
 8001038:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <_sbrk+0x64>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	429a      	cmp	r2, r3
 8001046:	d205      	bcs.n	8001054 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001048:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <_sbrk+0x6c>)
 800104a:	220c      	movs	r2, #12
 800104c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800104e:	f04f 33ff 	mov.w	r3, #4294967295
 8001052:	e009      	b.n	8001068 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800105a:	4b08      	ldr	r3, [pc, #32]	; (800107c <_sbrk+0x64>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4413      	add	r3, r2
 8001062:	4a06      	ldr	r2, [pc, #24]	; (800107c <_sbrk+0x64>)
 8001064:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001066:	68fb      	ldr	r3, [r7, #12]
}
 8001068:	4618      	mov	r0, r3
 800106a:	371c      	adds	r7, #28
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	24080000 	.word	0x24080000
 8001078:	00000400 	.word	0x00000400
 800107c:	24000bc4 	.word	0x24000bc4
 8001080:	2400a4c8 	.word	0x2400a4c8
 8001084:	240086b8 	.word	0x240086b8

08001088 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001088:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800108c:	f7ff fb5c 	bl	8000748 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001090:	480c      	ldr	r0, [pc, #48]	; (80010c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001092:	490d      	ldr	r1, [pc, #52]	; (80010c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001094:	4a0d      	ldr	r2, [pc, #52]	; (80010cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001098:	e002      	b.n	80010a0 <LoopCopyDataInit>

0800109a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800109c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109e:	3304      	adds	r3, #4

080010a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a4:	d3f9      	bcc.n	800109a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a6:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010a8:	4c0a      	ldr	r4, [pc, #40]	; (80010d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ac:	e001      	b.n	80010b2 <LoopFillZerobss>

080010ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b0:	3204      	adds	r2, #4

080010b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b4:	d3fb      	bcc.n	80010ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010b6:	f024 ff2b 	bl	8025f10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ba:	f7ff fbf9 	bl	80008b0 <main>
  bx  lr
 80010be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010c0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80010c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010c8:	240002ec 	.word	0x240002ec
  ldr r2, =_sidata
 80010cc:	0802f8e4 	.word	0x0802f8e4
  ldr r2, =_sbss
 80010d0:	240002f0 	.word	0x240002f0
  ldr r4, =_ebss
 80010d4:	2400a4c4 	.word	0x2400a4c4

080010d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d8:	e7fe      	b.n	80010d8 <ADC3_IRQHandler>

080010da <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d00b      	beq.n	8001102 <LAN8742_RegisterBusIO+0x28>
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d007      	beq.n	8001102 <LAN8742_RegisterBusIO+0x28>
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <LAN8742_RegisterBusIO+0x28>
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d102      	bne.n	8001108 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	e014      	b.n	8001132 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	68da      	ldr	r2, [r3, #12]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	691a      	ldr	r2, [r3, #16]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800113e:	b580      	push	{r7, lr}
 8001140:	b086      	sub	sp, #24
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d17c      	bne.n	8001258 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d002      	beq.n	800116c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2220      	movs	r2, #32
 8001170:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	e01c      	b.n	80011b2 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	f107 0208 	add.w	r2, r7, #8
 8001180:	2112      	movs	r1, #18
 8001182:	6978      	ldr	r0, [r7, #20]
 8001184:	4798      	blx	r3
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	da03      	bge.n	8001194 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 800118c:	f06f 0304 	mvn.w	r3, #4
 8001190:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001192:	e00b      	b.n	80011ac <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	f003 031f 	and.w	r3, r3, #31
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	429a      	cmp	r2, r3
 800119e:	d105      	bne.n	80011ac <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
         break;
 80011aa:	e005      	b.n	80011b8 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	3301      	adds	r3, #1
 80011b0:	617b      	str	r3, [r7, #20]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	2b1f      	cmp	r3, #31
 80011b6:	d9df      	bls.n	8001178 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b1f      	cmp	r3, #31
 80011be:	d902      	bls.n	80011c6 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80011c0:	f06f 0302 	mvn.w	r3, #2
 80011c4:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d145      	bne.n	8001258 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6810      	ldr	r0, [r2, #0]
 80011d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011d8:	2100      	movs	r1, #0
 80011da:	4798      	blx	r3
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	db37      	blt.n	8001252 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	6810      	ldr	r0, [r2, #0]
 80011ea:	f107 0208 	add.w	r2, r7, #8
 80011ee:	2100      	movs	r1, #0
 80011f0:	4798      	blx	r3
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db28      	blt.n	800124a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	4798      	blx	r3
 80011fe:	4603      	mov	r3, r0
 8001200:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001202:	e01c      	b.n	800123e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	4798      	blx	r3
 800120a:	4603      	mov	r3, r0
 800120c:	461a      	mov	r2, r3
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001216:	d80e      	bhi.n	8001236 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	6810      	ldr	r0, [r2, #0]
 8001220:	f107 0208 	add.w	r2, r7, #8
 8001224:	2100      	movs	r1, #0
 8001226:	4798      	blx	r3
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	da07      	bge.n	800123e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800122e:	f06f 0304 	mvn.w	r3, #4
 8001232:	613b      	str	r3, [r7, #16]
                 break;
 8001234:	e010      	b.n	8001258 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001236:	f06f 0301 	mvn.w	r3, #1
 800123a:	613b      	str	r3, [r7, #16]
               break;
 800123c:	e00c      	b.n	8001258 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1dd      	bne.n	8001204 <LAN8742_Init+0xc6>
 8001248:	e006      	b.n	8001258 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800124a:	f06f 0304 	mvn.w	r3, #4
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	e002      	b.n	8001258 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001252:	f06f 0303 	mvn.w	r3, #3
 8001256:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d112      	bne.n	8001284 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	4798      	blx	r3
 8001264:	4603      	mov	r3, r0
 8001266:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001268:	bf00      	nop
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	4798      	blx	r3
 8001270:	4603      	mov	r3, r0
 8001272:	461a      	mov	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800127c:	d9f5      	bls.n	800126a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2201      	movs	r2, #1
 8001282:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001284:	693b      	ldr	r3, [r7, #16]
 }
 8001286:	4618      	mov	r0, r3
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b084      	sub	sp, #16
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	6810      	ldr	r0, [r2, #0]
 80012a2:	f107 020c 	add.w	r2, r7, #12
 80012a6:	2101      	movs	r1, #1
 80012a8:	4798      	blx	r3
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	da02      	bge.n	80012b6 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012b0:	f06f 0304 	mvn.w	r3, #4
 80012b4:	e06e      	b.n	8001394 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	6810      	ldr	r0, [r2, #0]
 80012be:	f107 020c 	add.w	r2, r7, #12
 80012c2:	2101      	movs	r1, #1
 80012c4:	4798      	blx	r3
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	da02      	bge.n	80012d2 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012cc:	f06f 0304 	mvn.w	r3, #4
 80012d0:	e060      	b.n	8001394 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d101      	bne.n	80012e0 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80012dc:	2301      	movs	r3, #1
 80012de:	e059      	b.n	8001394 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	6810      	ldr	r0, [r2, #0]
 80012e8:	f107 020c 	add.w	r2, r7, #12
 80012ec:	2100      	movs	r1, #0
 80012ee:	4798      	blx	r3
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	da02      	bge.n	80012fc <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012f6:	f06f 0304 	mvn.w	r3, #4
 80012fa:	e04b      	b.n	8001394 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d11b      	bne.n	800133e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d006      	beq.n	800131e <LAN8742_GetLinkState+0x90>
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800131a:	2302      	movs	r3, #2
 800131c:	e03a      	b.n	8001394 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001328:	2303      	movs	r3, #3
 800132a:	e033      	b.n	8001394 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001336:	2304      	movs	r3, #4
 8001338:	e02c      	b.n	8001394 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800133a:	2305      	movs	r3, #5
 800133c:	e02a      	b.n	8001394 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6810      	ldr	r0, [r2, #0]
 8001346:	f107 020c 	add.w	r2, r7, #12
 800134a:	211f      	movs	r1, #31
 800134c:	4798      	blx	r3
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	da02      	bge.n	800135a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001354:	f06f 0304 	mvn.w	r3, #4
 8001358:	e01c      	b.n	8001394 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001364:	2306      	movs	r3, #6
 8001366:	e015      	b.n	8001394 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f003 031c 	and.w	r3, r3, #28
 800136e:	2b18      	cmp	r3, #24
 8001370:	d101      	bne.n	8001376 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001372:	2302      	movs	r3, #2
 8001374:	e00e      	b.n	8001394 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f003 031c 	and.w	r3, r3, #28
 800137c:	2b08      	cmp	r3, #8
 800137e:	d101      	bne.n	8001384 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001380:	2303      	movs	r3, #3
 8001382:	e007      	b.n	8001394 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f003 031c 	and.w	r3, r3, #28
 800138a:	2b14      	cmp	r3, #20
 800138c:	d101      	bne.n	8001392 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800138e:	2304      	movs	r3, #4
 8001390:	e000      	b.n	8001394 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001392:	2305      	movs	r3, #5
    }				
  }
}
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a2:	2003      	movs	r0, #3
 80013a4:	f000 f923 	bl	80015ee <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013a8:	f004 f892 	bl	80054d0 <HAL_RCC_GetSysClockFreq>
 80013ac:	4602      	mov	r2, r0
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <HAL_Init+0x68>)
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	0a1b      	lsrs	r3, r3, #8
 80013b4:	f003 030f 	and.w	r3, r3, #15
 80013b8:	4913      	ldr	r1, [pc, #76]	; (8001408 <HAL_Init+0x6c>)
 80013ba:	5ccb      	ldrb	r3, [r1, r3]
 80013bc:	f003 031f 	and.w	r3, r3, #31
 80013c0:	fa22 f303 	lsr.w	r3, r2, r3
 80013c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <HAL_Init+0x68>)
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	4a0e      	ldr	r2, [pc, #56]	; (8001408 <HAL_Init+0x6c>)
 80013d0:	5cd3      	ldrb	r3, [r2, r3]
 80013d2:	f003 031f 	and.w	r3, r3, #31
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	fa22 f303 	lsr.w	r3, r2, r3
 80013dc:	4a0b      	ldr	r2, [pc, #44]	; (800140c <HAL_Init+0x70>)
 80013de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013e0:	4a0b      	ldr	r2, [pc, #44]	; (8001410 <HAL_Init+0x74>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013e6:	200f      	movs	r0, #15
 80013e8:	f7ff fcd0 	bl	8000d8c <HAL_InitTick>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e002      	b.n	80013fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013f6:	f7ff fcab 	bl	8000d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	58024400 	.word	0x58024400
 8001408:	0802ea9c 	.word	0x0802ea9c
 800140c:	24000004 	.word	0x24000004
 8001410:	24000000 	.word	0x24000000

08001414 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_IncTick+0x20>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_IncTick+0x24>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4413      	add	r3, r2
 8001424:	4a04      	ldr	r2, [pc, #16]	; (8001438 <HAL_IncTick+0x24>)
 8001426:	6013      	str	r3, [r2, #0]
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	24000010 	.word	0x24000010
 8001438:	240051c8 	.word	0x240051c8

0800143c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return uwTick;
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <HAL_GetTick+0x14>)
 8001442:	681b      	ldr	r3, [r3, #0]
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	240051c8 	.word	0x240051c8

08001454 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001458:	4b03      	ldr	r3, [pc, #12]	; (8001468 <HAL_GetREVID+0x14>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	0c1b      	lsrs	r3, r3, #16
}
 800145e:	4618      	mov	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	5c001000 	.word	0x5c001000

0800146c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800147c:	4904      	ldr	r1, [pc, #16]	; (8001490 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4313      	orrs	r3, r2
 8001482:	604b      	str	r3, [r1, #4]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	58000400 	.word	0x58000400

08001494 <__NVIC_SetPriorityGrouping>:
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a4:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <__NVIC_SetPriorityGrouping+0x40>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b0:	4013      	ands	r3, r2
 80014b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <__NVIC_SetPriorityGrouping+0x44>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014c2:	4a04      	ldr	r2, [pc, #16]	; (80014d4 <__NVIC_SetPriorityGrouping+0x40>)
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	60d3      	str	r3, [r2, #12]
}
 80014c8:	bf00      	nop
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000ed00 	.word	0xe000ed00
 80014d8:	05fa0000 	.word	0x05fa0000

080014dc <__NVIC_GetPriorityGrouping>:
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <__NVIC_GetPriorityGrouping+0x18>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	0a1b      	lsrs	r3, r3, #8
 80014e6:	f003 0307 	and.w	r3, r3, #7
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_EnableIRQ>:
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001502:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001506:	2b00      	cmp	r3, #0
 8001508:	db0b      	blt.n	8001522 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800150a:	88fb      	ldrh	r3, [r7, #6]
 800150c:	f003 021f 	and.w	r2, r3, #31
 8001510:	4907      	ldr	r1, [pc, #28]	; (8001530 <__NVIC_EnableIRQ+0x38>)
 8001512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001516:	095b      	lsrs	r3, r3, #5
 8001518:	2001      	movs	r0, #1
 800151a:	fa00 f202 	lsl.w	r2, r0, r2
 800151e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000e100 	.word	0xe000e100

08001534 <__NVIC_SetPriority>:
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	6039      	str	r1, [r7, #0]
 800153e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001540:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001544:	2b00      	cmp	r3, #0
 8001546:	db0a      	blt.n	800155e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	490c      	ldr	r1, [pc, #48]	; (8001580 <__NVIC_SetPriority+0x4c>)
 800154e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001552:	0112      	lsls	r2, r2, #4
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	440b      	add	r3, r1
 8001558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800155c:	e00a      	b.n	8001574 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4908      	ldr	r1, [pc, #32]	; (8001584 <__NVIC_SetPriority+0x50>)
 8001564:	88fb      	ldrh	r3, [r7, #6]
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	3b04      	subs	r3, #4
 800156c:	0112      	lsls	r2, r2, #4
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	440b      	add	r3, r1
 8001572:	761a      	strb	r2, [r3, #24]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000e100 	.word	0xe000e100
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <NVIC_EncodePriority>:
{
 8001588:	b480      	push	{r7}
 800158a:	b089      	sub	sp, #36	; 0x24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f1c3 0307 	rsb	r3, r3, #7
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	bf28      	it	cs
 80015a6:	2304      	movcs	r3, #4
 80015a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3304      	adds	r3, #4
 80015ae:	2b06      	cmp	r3, #6
 80015b0:	d902      	bls.n	80015b8 <NVIC_EncodePriority+0x30>
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3b03      	subs	r3, #3
 80015b6:	e000      	b.n	80015ba <NVIC_EncodePriority+0x32>
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	f04f 32ff 	mov.w	r2, #4294967295
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43da      	mvns	r2, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	401a      	ands	r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d0:	f04f 31ff 	mov.w	r1, #4294967295
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	fa01 f303 	lsl.w	r3, r1, r3
 80015da:	43d9      	mvns	r1, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	4313      	orrs	r3, r2
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3724      	adds	r7, #36	; 0x24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ff4c 	bl	8001494 <__NVIC_SetPriorityGrouping>
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
 8001610:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001612:	f7ff ff63 	bl	80014dc <__NVIC_GetPriorityGrouping>
 8001616:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	68b9      	ldr	r1, [r7, #8]
 800161c:	6978      	ldr	r0, [r7, #20]
 800161e:	f7ff ffb3 	bl	8001588 <NVIC_EncodePriority>
 8001622:	4602      	mov	r2, r0
 8001624:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001628:	4611      	mov	r1, r2
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff ff82 	bl	8001534 <__NVIC_SetPriority>
}
 8001630:	bf00      	nop
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001642:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff ff56 	bl	80014f8 <__NVIC_EnableIRQ>
}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001658:	f3bf 8f5f 	dmb	sy
}
 800165c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800165e:	4b07      	ldr	r3, [pc, #28]	; (800167c <HAL_MPU_Disable+0x28>)
 8001660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001662:	4a06      	ldr	r2, [pc, #24]	; (800167c <HAL_MPU_Disable+0x28>)
 8001664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001668:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800166a:	4b05      	ldr	r3, [pc, #20]	; (8001680 <HAL_MPU_Disable+0x2c>)
 800166c:	2200      	movs	r2, #0
 800166e:	605a      	str	r2, [r3, #4]
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000ed00 	.word	0xe000ed00
 8001680:	e000ed90 	.word	0xe000ed90

08001684 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800168c:	4a0b      	ldr	r2, [pc, #44]	; (80016bc <HAL_MPU_Enable+0x38>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001696:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <HAL_MPU_Enable+0x3c>)
 8001698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169a:	4a09      	ldr	r2, [pc, #36]	; (80016c0 <HAL_MPU_Enable+0x3c>)
 800169c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80016a2:	f3bf 8f4f 	dsb	sy
}
 80016a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016a8:	f3bf 8f6f 	isb	sy
}
 80016ac:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000ed90 	.word	0xe000ed90
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	785a      	ldrb	r2, [r3, #1]
 80016d0:	4b1d      	ldr	r3, [pc, #116]	; (8001748 <HAL_MPU_ConfigRegion+0x84>)
 80016d2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d029      	beq.n	8001730 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80016dc:	4a1a      	ldr	r2, [pc, #104]	; (8001748 <HAL_MPU_ConfigRegion+0x84>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	7b1b      	ldrb	r3, [r3, #12]
 80016e8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	7adb      	ldrb	r3, [r3, #11]
 80016ee:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016f0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	7a9b      	ldrb	r3, [r3, #10]
 80016f6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80016f8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	7b5b      	ldrb	r3, [r3, #13]
 80016fe:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001700:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	7b9b      	ldrb	r3, [r3, #14]
 8001706:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001708:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	7bdb      	ldrb	r3, [r3, #15]
 800170e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001710:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	7a5b      	ldrb	r3, [r3, #9]
 8001716:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001718:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	7a1b      	ldrb	r3, [r3, #8]
 800171e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001720:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	7812      	ldrb	r2, [r2, #0]
 8001726:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001728:	4a07      	ldr	r2, [pc, #28]	; (8001748 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800172a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800172c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800172e:	e005      	b.n	800173c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <HAL_MPU_ConfigRegion+0x84>)
 8001732:	2200      	movs	r2, #0
 8001734:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001736:	4b04      	ldr	r3, [pc, #16]	; (8001748 <HAL_MPU_ConfigRegion+0x84>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000ed90 	.word	0xe000ed90

0800174c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001750:	4b07      	ldr	r3, [pc, #28]	; (8001770 <HAL_GetCurrentCPUID+0x24>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	091b      	lsrs	r3, r3, #4
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	2b07      	cmp	r3, #7
 800175c:	d101      	bne.n	8001762 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 800175e:	2303      	movs	r3, #3
 8001760:	e000      	b.n	8001764 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8001762:	2301      	movs	r3, #1
  }
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800177c:	f7ff fe5e 	bl	800143c <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e2dc      	b.n	8001d46 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d008      	beq.n	80017aa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2280      	movs	r2, #128	; 0x80
 800179c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e2cd      	b.n	8001d46 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a76      	ldr	r2, [pc, #472]	; (8001988 <HAL_DMA_Abort+0x214>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d04a      	beq.n	800184a <HAL_DMA_Abort+0xd6>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a74      	ldr	r2, [pc, #464]	; (800198c <HAL_DMA_Abort+0x218>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d045      	beq.n	800184a <HAL_DMA_Abort+0xd6>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a73      	ldr	r2, [pc, #460]	; (8001990 <HAL_DMA_Abort+0x21c>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d040      	beq.n	800184a <HAL_DMA_Abort+0xd6>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a71      	ldr	r2, [pc, #452]	; (8001994 <HAL_DMA_Abort+0x220>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d03b      	beq.n	800184a <HAL_DMA_Abort+0xd6>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a70      	ldr	r2, [pc, #448]	; (8001998 <HAL_DMA_Abort+0x224>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d036      	beq.n	800184a <HAL_DMA_Abort+0xd6>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a6e      	ldr	r2, [pc, #440]	; (800199c <HAL_DMA_Abort+0x228>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d031      	beq.n	800184a <HAL_DMA_Abort+0xd6>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a6d      	ldr	r2, [pc, #436]	; (80019a0 <HAL_DMA_Abort+0x22c>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d02c      	beq.n	800184a <HAL_DMA_Abort+0xd6>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a6b      	ldr	r2, [pc, #428]	; (80019a4 <HAL_DMA_Abort+0x230>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d027      	beq.n	800184a <HAL_DMA_Abort+0xd6>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a6a      	ldr	r2, [pc, #424]	; (80019a8 <HAL_DMA_Abort+0x234>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d022      	beq.n	800184a <HAL_DMA_Abort+0xd6>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a68      	ldr	r2, [pc, #416]	; (80019ac <HAL_DMA_Abort+0x238>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d01d      	beq.n	800184a <HAL_DMA_Abort+0xd6>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a67      	ldr	r2, [pc, #412]	; (80019b0 <HAL_DMA_Abort+0x23c>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d018      	beq.n	800184a <HAL_DMA_Abort+0xd6>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a65      	ldr	r2, [pc, #404]	; (80019b4 <HAL_DMA_Abort+0x240>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d013      	beq.n	800184a <HAL_DMA_Abort+0xd6>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a64      	ldr	r2, [pc, #400]	; (80019b8 <HAL_DMA_Abort+0x244>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d00e      	beq.n	800184a <HAL_DMA_Abort+0xd6>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a62      	ldr	r2, [pc, #392]	; (80019bc <HAL_DMA_Abort+0x248>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d009      	beq.n	800184a <HAL_DMA_Abort+0xd6>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a61      	ldr	r2, [pc, #388]	; (80019c0 <HAL_DMA_Abort+0x24c>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d004      	beq.n	800184a <HAL_DMA_Abort+0xd6>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a5f      	ldr	r2, [pc, #380]	; (80019c4 <HAL_DMA_Abort+0x250>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d101      	bne.n	800184e <HAL_DMA_Abort+0xda>
 800184a:	2301      	movs	r3, #1
 800184c:	e000      	b.n	8001850 <HAL_DMA_Abort+0xdc>
 800184e:	2300      	movs	r3, #0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d013      	beq.n	800187c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 021e 	bic.w	r2, r2, #30
 8001862:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	695a      	ldr	r2, [r3, #20]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001872:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	e00a      	b.n	8001892 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f022 020e 	bic.w	r2, r2, #14
 800188a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a3c      	ldr	r2, [pc, #240]	; (8001988 <HAL_DMA_Abort+0x214>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d072      	beq.n	8001982 <HAL_DMA_Abort+0x20e>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a3a      	ldr	r2, [pc, #232]	; (800198c <HAL_DMA_Abort+0x218>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d06d      	beq.n	8001982 <HAL_DMA_Abort+0x20e>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a39      	ldr	r2, [pc, #228]	; (8001990 <HAL_DMA_Abort+0x21c>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d068      	beq.n	8001982 <HAL_DMA_Abort+0x20e>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a37      	ldr	r2, [pc, #220]	; (8001994 <HAL_DMA_Abort+0x220>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d063      	beq.n	8001982 <HAL_DMA_Abort+0x20e>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a36      	ldr	r2, [pc, #216]	; (8001998 <HAL_DMA_Abort+0x224>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d05e      	beq.n	8001982 <HAL_DMA_Abort+0x20e>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a34      	ldr	r2, [pc, #208]	; (800199c <HAL_DMA_Abort+0x228>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d059      	beq.n	8001982 <HAL_DMA_Abort+0x20e>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a33      	ldr	r2, [pc, #204]	; (80019a0 <HAL_DMA_Abort+0x22c>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d054      	beq.n	8001982 <HAL_DMA_Abort+0x20e>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a31      	ldr	r2, [pc, #196]	; (80019a4 <HAL_DMA_Abort+0x230>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d04f      	beq.n	8001982 <HAL_DMA_Abort+0x20e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a30      	ldr	r2, [pc, #192]	; (80019a8 <HAL_DMA_Abort+0x234>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d04a      	beq.n	8001982 <HAL_DMA_Abort+0x20e>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a2e      	ldr	r2, [pc, #184]	; (80019ac <HAL_DMA_Abort+0x238>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d045      	beq.n	8001982 <HAL_DMA_Abort+0x20e>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a2d      	ldr	r2, [pc, #180]	; (80019b0 <HAL_DMA_Abort+0x23c>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d040      	beq.n	8001982 <HAL_DMA_Abort+0x20e>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a2b      	ldr	r2, [pc, #172]	; (80019b4 <HAL_DMA_Abort+0x240>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d03b      	beq.n	8001982 <HAL_DMA_Abort+0x20e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a2a      	ldr	r2, [pc, #168]	; (80019b8 <HAL_DMA_Abort+0x244>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d036      	beq.n	8001982 <HAL_DMA_Abort+0x20e>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a28      	ldr	r2, [pc, #160]	; (80019bc <HAL_DMA_Abort+0x248>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d031      	beq.n	8001982 <HAL_DMA_Abort+0x20e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a27      	ldr	r2, [pc, #156]	; (80019c0 <HAL_DMA_Abort+0x24c>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d02c      	beq.n	8001982 <HAL_DMA_Abort+0x20e>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a25      	ldr	r2, [pc, #148]	; (80019c4 <HAL_DMA_Abort+0x250>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d027      	beq.n	8001982 <HAL_DMA_Abort+0x20e>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a24      	ldr	r2, [pc, #144]	; (80019c8 <HAL_DMA_Abort+0x254>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d022      	beq.n	8001982 <HAL_DMA_Abort+0x20e>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a22      	ldr	r2, [pc, #136]	; (80019cc <HAL_DMA_Abort+0x258>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d01d      	beq.n	8001982 <HAL_DMA_Abort+0x20e>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a21      	ldr	r2, [pc, #132]	; (80019d0 <HAL_DMA_Abort+0x25c>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d018      	beq.n	8001982 <HAL_DMA_Abort+0x20e>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a1f      	ldr	r2, [pc, #124]	; (80019d4 <HAL_DMA_Abort+0x260>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d013      	beq.n	8001982 <HAL_DMA_Abort+0x20e>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a1e      	ldr	r2, [pc, #120]	; (80019d8 <HAL_DMA_Abort+0x264>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d00e      	beq.n	8001982 <HAL_DMA_Abort+0x20e>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a1c      	ldr	r2, [pc, #112]	; (80019dc <HAL_DMA_Abort+0x268>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d009      	beq.n	8001982 <HAL_DMA_Abort+0x20e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a1b      	ldr	r2, [pc, #108]	; (80019e0 <HAL_DMA_Abort+0x26c>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d004      	beq.n	8001982 <HAL_DMA_Abort+0x20e>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a19      	ldr	r2, [pc, #100]	; (80019e4 <HAL_DMA_Abort+0x270>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d132      	bne.n	80019e8 <HAL_DMA_Abort+0x274>
 8001982:	2301      	movs	r3, #1
 8001984:	e031      	b.n	80019ea <HAL_DMA_Abort+0x276>
 8001986:	bf00      	nop
 8001988:	40020010 	.word	0x40020010
 800198c:	40020028 	.word	0x40020028
 8001990:	40020040 	.word	0x40020040
 8001994:	40020058 	.word	0x40020058
 8001998:	40020070 	.word	0x40020070
 800199c:	40020088 	.word	0x40020088
 80019a0:	400200a0 	.word	0x400200a0
 80019a4:	400200b8 	.word	0x400200b8
 80019a8:	40020410 	.word	0x40020410
 80019ac:	40020428 	.word	0x40020428
 80019b0:	40020440 	.word	0x40020440
 80019b4:	40020458 	.word	0x40020458
 80019b8:	40020470 	.word	0x40020470
 80019bc:	40020488 	.word	0x40020488
 80019c0:	400204a0 	.word	0x400204a0
 80019c4:	400204b8 	.word	0x400204b8
 80019c8:	58025408 	.word	0x58025408
 80019cc:	5802541c 	.word	0x5802541c
 80019d0:	58025430 	.word	0x58025430
 80019d4:	58025444 	.word	0x58025444
 80019d8:	58025458 	.word	0x58025458
 80019dc:	5802546c 	.word	0x5802546c
 80019e0:	58025480 	.word	0x58025480
 80019e4:	58025494 	.word	0x58025494
 80019e8:	2300      	movs	r3, #0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d007      	beq.n	80019fe <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a6d      	ldr	r2, [pc, #436]	; (8001bb8 <HAL_DMA_Abort+0x444>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d04a      	beq.n	8001a9e <HAL_DMA_Abort+0x32a>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a6b      	ldr	r2, [pc, #428]	; (8001bbc <HAL_DMA_Abort+0x448>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d045      	beq.n	8001a9e <HAL_DMA_Abort+0x32a>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a6a      	ldr	r2, [pc, #424]	; (8001bc0 <HAL_DMA_Abort+0x44c>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d040      	beq.n	8001a9e <HAL_DMA_Abort+0x32a>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a68      	ldr	r2, [pc, #416]	; (8001bc4 <HAL_DMA_Abort+0x450>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d03b      	beq.n	8001a9e <HAL_DMA_Abort+0x32a>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a67      	ldr	r2, [pc, #412]	; (8001bc8 <HAL_DMA_Abort+0x454>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d036      	beq.n	8001a9e <HAL_DMA_Abort+0x32a>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a65      	ldr	r2, [pc, #404]	; (8001bcc <HAL_DMA_Abort+0x458>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d031      	beq.n	8001a9e <HAL_DMA_Abort+0x32a>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a64      	ldr	r2, [pc, #400]	; (8001bd0 <HAL_DMA_Abort+0x45c>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d02c      	beq.n	8001a9e <HAL_DMA_Abort+0x32a>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a62      	ldr	r2, [pc, #392]	; (8001bd4 <HAL_DMA_Abort+0x460>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d027      	beq.n	8001a9e <HAL_DMA_Abort+0x32a>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a61      	ldr	r2, [pc, #388]	; (8001bd8 <HAL_DMA_Abort+0x464>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d022      	beq.n	8001a9e <HAL_DMA_Abort+0x32a>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a5f      	ldr	r2, [pc, #380]	; (8001bdc <HAL_DMA_Abort+0x468>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d01d      	beq.n	8001a9e <HAL_DMA_Abort+0x32a>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a5e      	ldr	r2, [pc, #376]	; (8001be0 <HAL_DMA_Abort+0x46c>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d018      	beq.n	8001a9e <HAL_DMA_Abort+0x32a>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a5c      	ldr	r2, [pc, #368]	; (8001be4 <HAL_DMA_Abort+0x470>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d013      	beq.n	8001a9e <HAL_DMA_Abort+0x32a>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a5b      	ldr	r2, [pc, #364]	; (8001be8 <HAL_DMA_Abort+0x474>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d00e      	beq.n	8001a9e <HAL_DMA_Abort+0x32a>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a59      	ldr	r2, [pc, #356]	; (8001bec <HAL_DMA_Abort+0x478>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d009      	beq.n	8001a9e <HAL_DMA_Abort+0x32a>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a58      	ldr	r2, [pc, #352]	; (8001bf0 <HAL_DMA_Abort+0x47c>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d004      	beq.n	8001a9e <HAL_DMA_Abort+0x32a>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a56      	ldr	r2, [pc, #344]	; (8001bf4 <HAL_DMA_Abort+0x480>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d108      	bne.n	8001ab0 <HAL_DMA_Abort+0x33c>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0201 	bic.w	r2, r2, #1
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	e007      	b.n	8001ac0 <HAL_DMA_Abort+0x34c>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0201 	bic.w	r2, r2, #1
 8001abe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001ac0:	e013      	b.n	8001aea <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ac2:	f7ff fcbb 	bl	800143c <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b05      	cmp	r3, #5
 8001ace:	d90c      	bls.n	8001aea <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2203      	movs	r2, #3
 8001ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e12d      	b.n	8001d46 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1e5      	bne.n	8001ac2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a2f      	ldr	r2, [pc, #188]	; (8001bb8 <HAL_DMA_Abort+0x444>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d04a      	beq.n	8001b96 <HAL_DMA_Abort+0x422>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a2d      	ldr	r2, [pc, #180]	; (8001bbc <HAL_DMA_Abort+0x448>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d045      	beq.n	8001b96 <HAL_DMA_Abort+0x422>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a2c      	ldr	r2, [pc, #176]	; (8001bc0 <HAL_DMA_Abort+0x44c>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d040      	beq.n	8001b96 <HAL_DMA_Abort+0x422>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a2a      	ldr	r2, [pc, #168]	; (8001bc4 <HAL_DMA_Abort+0x450>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d03b      	beq.n	8001b96 <HAL_DMA_Abort+0x422>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a29      	ldr	r2, [pc, #164]	; (8001bc8 <HAL_DMA_Abort+0x454>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d036      	beq.n	8001b96 <HAL_DMA_Abort+0x422>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a27      	ldr	r2, [pc, #156]	; (8001bcc <HAL_DMA_Abort+0x458>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d031      	beq.n	8001b96 <HAL_DMA_Abort+0x422>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a26      	ldr	r2, [pc, #152]	; (8001bd0 <HAL_DMA_Abort+0x45c>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d02c      	beq.n	8001b96 <HAL_DMA_Abort+0x422>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a24      	ldr	r2, [pc, #144]	; (8001bd4 <HAL_DMA_Abort+0x460>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d027      	beq.n	8001b96 <HAL_DMA_Abort+0x422>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a23      	ldr	r2, [pc, #140]	; (8001bd8 <HAL_DMA_Abort+0x464>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d022      	beq.n	8001b96 <HAL_DMA_Abort+0x422>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a21      	ldr	r2, [pc, #132]	; (8001bdc <HAL_DMA_Abort+0x468>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d01d      	beq.n	8001b96 <HAL_DMA_Abort+0x422>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a20      	ldr	r2, [pc, #128]	; (8001be0 <HAL_DMA_Abort+0x46c>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d018      	beq.n	8001b96 <HAL_DMA_Abort+0x422>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a1e      	ldr	r2, [pc, #120]	; (8001be4 <HAL_DMA_Abort+0x470>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d013      	beq.n	8001b96 <HAL_DMA_Abort+0x422>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a1d      	ldr	r2, [pc, #116]	; (8001be8 <HAL_DMA_Abort+0x474>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d00e      	beq.n	8001b96 <HAL_DMA_Abort+0x422>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a1b      	ldr	r2, [pc, #108]	; (8001bec <HAL_DMA_Abort+0x478>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d009      	beq.n	8001b96 <HAL_DMA_Abort+0x422>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a1a      	ldr	r2, [pc, #104]	; (8001bf0 <HAL_DMA_Abort+0x47c>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d004      	beq.n	8001b96 <HAL_DMA_Abort+0x422>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a18      	ldr	r2, [pc, #96]	; (8001bf4 <HAL_DMA_Abort+0x480>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d101      	bne.n	8001b9a <HAL_DMA_Abort+0x426>
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <HAL_DMA_Abort+0x428>
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d02b      	beq.n	8001bf8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001baa:	f003 031f 	and.w	r3, r3, #31
 8001bae:	223f      	movs	r2, #63	; 0x3f
 8001bb0:	409a      	lsls	r2, r3
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	e02a      	b.n	8001c0e <HAL_DMA_Abort+0x49a>
 8001bb8:	40020010 	.word	0x40020010
 8001bbc:	40020028 	.word	0x40020028
 8001bc0:	40020040 	.word	0x40020040
 8001bc4:	40020058 	.word	0x40020058
 8001bc8:	40020070 	.word	0x40020070
 8001bcc:	40020088 	.word	0x40020088
 8001bd0:	400200a0 	.word	0x400200a0
 8001bd4:	400200b8 	.word	0x400200b8
 8001bd8:	40020410 	.word	0x40020410
 8001bdc:	40020428 	.word	0x40020428
 8001be0:	40020440 	.word	0x40020440
 8001be4:	40020458 	.word	0x40020458
 8001be8:	40020470 	.word	0x40020470
 8001bec:	40020488 	.word	0x40020488
 8001bf0:	400204a0 	.word	0x400204a0
 8001bf4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c02:	f003 031f 	and.w	r3, r3, #31
 8001c06:	2201      	movs	r2, #1
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a4f      	ldr	r2, [pc, #316]	; (8001d50 <HAL_DMA_Abort+0x5dc>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d072      	beq.n	8001cfe <HAL_DMA_Abort+0x58a>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a4d      	ldr	r2, [pc, #308]	; (8001d54 <HAL_DMA_Abort+0x5e0>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d06d      	beq.n	8001cfe <HAL_DMA_Abort+0x58a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a4c      	ldr	r2, [pc, #304]	; (8001d58 <HAL_DMA_Abort+0x5e4>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d068      	beq.n	8001cfe <HAL_DMA_Abort+0x58a>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a4a      	ldr	r2, [pc, #296]	; (8001d5c <HAL_DMA_Abort+0x5e8>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d063      	beq.n	8001cfe <HAL_DMA_Abort+0x58a>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a49      	ldr	r2, [pc, #292]	; (8001d60 <HAL_DMA_Abort+0x5ec>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d05e      	beq.n	8001cfe <HAL_DMA_Abort+0x58a>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a47      	ldr	r2, [pc, #284]	; (8001d64 <HAL_DMA_Abort+0x5f0>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d059      	beq.n	8001cfe <HAL_DMA_Abort+0x58a>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a46      	ldr	r2, [pc, #280]	; (8001d68 <HAL_DMA_Abort+0x5f4>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d054      	beq.n	8001cfe <HAL_DMA_Abort+0x58a>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a44      	ldr	r2, [pc, #272]	; (8001d6c <HAL_DMA_Abort+0x5f8>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d04f      	beq.n	8001cfe <HAL_DMA_Abort+0x58a>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a43      	ldr	r2, [pc, #268]	; (8001d70 <HAL_DMA_Abort+0x5fc>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d04a      	beq.n	8001cfe <HAL_DMA_Abort+0x58a>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a41      	ldr	r2, [pc, #260]	; (8001d74 <HAL_DMA_Abort+0x600>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d045      	beq.n	8001cfe <HAL_DMA_Abort+0x58a>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a40      	ldr	r2, [pc, #256]	; (8001d78 <HAL_DMA_Abort+0x604>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d040      	beq.n	8001cfe <HAL_DMA_Abort+0x58a>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a3e      	ldr	r2, [pc, #248]	; (8001d7c <HAL_DMA_Abort+0x608>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d03b      	beq.n	8001cfe <HAL_DMA_Abort+0x58a>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a3d      	ldr	r2, [pc, #244]	; (8001d80 <HAL_DMA_Abort+0x60c>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d036      	beq.n	8001cfe <HAL_DMA_Abort+0x58a>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a3b      	ldr	r2, [pc, #236]	; (8001d84 <HAL_DMA_Abort+0x610>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d031      	beq.n	8001cfe <HAL_DMA_Abort+0x58a>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a3a      	ldr	r2, [pc, #232]	; (8001d88 <HAL_DMA_Abort+0x614>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d02c      	beq.n	8001cfe <HAL_DMA_Abort+0x58a>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a38      	ldr	r2, [pc, #224]	; (8001d8c <HAL_DMA_Abort+0x618>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d027      	beq.n	8001cfe <HAL_DMA_Abort+0x58a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a37      	ldr	r2, [pc, #220]	; (8001d90 <HAL_DMA_Abort+0x61c>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d022      	beq.n	8001cfe <HAL_DMA_Abort+0x58a>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a35      	ldr	r2, [pc, #212]	; (8001d94 <HAL_DMA_Abort+0x620>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d01d      	beq.n	8001cfe <HAL_DMA_Abort+0x58a>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a34      	ldr	r2, [pc, #208]	; (8001d98 <HAL_DMA_Abort+0x624>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d018      	beq.n	8001cfe <HAL_DMA_Abort+0x58a>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a32      	ldr	r2, [pc, #200]	; (8001d9c <HAL_DMA_Abort+0x628>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d013      	beq.n	8001cfe <HAL_DMA_Abort+0x58a>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a31      	ldr	r2, [pc, #196]	; (8001da0 <HAL_DMA_Abort+0x62c>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d00e      	beq.n	8001cfe <HAL_DMA_Abort+0x58a>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a2f      	ldr	r2, [pc, #188]	; (8001da4 <HAL_DMA_Abort+0x630>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d009      	beq.n	8001cfe <HAL_DMA_Abort+0x58a>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a2e      	ldr	r2, [pc, #184]	; (8001da8 <HAL_DMA_Abort+0x634>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d004      	beq.n	8001cfe <HAL_DMA_Abort+0x58a>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a2c      	ldr	r2, [pc, #176]	; (8001dac <HAL_DMA_Abort+0x638>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d101      	bne.n	8001d02 <HAL_DMA_Abort+0x58e>
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <HAL_DMA_Abort+0x590>
 8001d02:	2300      	movs	r3, #0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d015      	beq.n	8001d34 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001d10:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00c      	beq.n	8001d34 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d28:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001d32:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3718      	adds	r7, #24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40020010 	.word	0x40020010
 8001d54:	40020028 	.word	0x40020028
 8001d58:	40020040 	.word	0x40020040
 8001d5c:	40020058 	.word	0x40020058
 8001d60:	40020070 	.word	0x40020070
 8001d64:	40020088 	.word	0x40020088
 8001d68:	400200a0 	.word	0x400200a0
 8001d6c:	400200b8 	.word	0x400200b8
 8001d70:	40020410 	.word	0x40020410
 8001d74:	40020428 	.word	0x40020428
 8001d78:	40020440 	.word	0x40020440
 8001d7c:	40020458 	.word	0x40020458
 8001d80:	40020470 	.word	0x40020470
 8001d84:	40020488 	.word	0x40020488
 8001d88:	400204a0 	.word	0x400204a0
 8001d8c:	400204b8 	.word	0x400204b8
 8001d90:	58025408 	.word	0x58025408
 8001d94:	5802541c 	.word	0x5802541c
 8001d98:	58025430 	.word	0x58025430
 8001d9c:	58025444 	.word	0x58025444
 8001da0:	58025458 	.word	0x58025458
 8001da4:	5802546c 	.word	0x5802546c
 8001da8:	58025480 	.word	0x58025480
 8001dac:	58025494 	.word	0x58025494

08001db0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e205      	b.n	80021ce <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d004      	beq.n	8001dd8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2280      	movs	r2, #128	; 0x80
 8001dd2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e1fa      	b.n	80021ce <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a8c      	ldr	r2, [pc, #560]	; (8002010 <HAL_DMA_Abort_IT+0x260>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d04a      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a8b      	ldr	r2, [pc, #556]	; (8002014 <HAL_DMA_Abort_IT+0x264>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d045      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a89      	ldr	r2, [pc, #548]	; (8002018 <HAL_DMA_Abort_IT+0x268>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d040      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a88      	ldr	r2, [pc, #544]	; (800201c <HAL_DMA_Abort_IT+0x26c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d03b      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a86      	ldr	r2, [pc, #536]	; (8002020 <HAL_DMA_Abort_IT+0x270>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d036      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a85      	ldr	r2, [pc, #532]	; (8002024 <HAL_DMA_Abort_IT+0x274>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d031      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a83      	ldr	r2, [pc, #524]	; (8002028 <HAL_DMA_Abort_IT+0x278>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d02c      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a82      	ldr	r2, [pc, #520]	; (800202c <HAL_DMA_Abort_IT+0x27c>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d027      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a80      	ldr	r2, [pc, #512]	; (8002030 <HAL_DMA_Abort_IT+0x280>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d022      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a7f      	ldr	r2, [pc, #508]	; (8002034 <HAL_DMA_Abort_IT+0x284>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d01d      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a7d      	ldr	r2, [pc, #500]	; (8002038 <HAL_DMA_Abort_IT+0x288>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d018      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a7c      	ldr	r2, [pc, #496]	; (800203c <HAL_DMA_Abort_IT+0x28c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d013      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a7a      	ldr	r2, [pc, #488]	; (8002040 <HAL_DMA_Abort_IT+0x290>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d00e      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a79      	ldr	r2, [pc, #484]	; (8002044 <HAL_DMA_Abort_IT+0x294>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d009      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a77      	ldr	r2, [pc, #476]	; (8002048 <HAL_DMA_Abort_IT+0x298>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d004      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a76      	ldr	r2, [pc, #472]	; (800204c <HAL_DMA_Abort_IT+0x29c>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d101      	bne.n	8001e7c <HAL_DMA_Abort_IT+0xcc>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e000      	b.n	8001e7e <HAL_DMA_Abort_IT+0xce>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d065      	beq.n	8001f4e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2204      	movs	r2, #4
 8001e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a60      	ldr	r2, [pc, #384]	; (8002010 <HAL_DMA_Abort_IT+0x260>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d04a      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x17a>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a5e      	ldr	r2, [pc, #376]	; (8002014 <HAL_DMA_Abort_IT+0x264>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d045      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x17a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a5d      	ldr	r2, [pc, #372]	; (8002018 <HAL_DMA_Abort_IT+0x268>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d040      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x17a>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a5b      	ldr	r2, [pc, #364]	; (800201c <HAL_DMA_Abort_IT+0x26c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d03b      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x17a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a5a      	ldr	r2, [pc, #360]	; (8002020 <HAL_DMA_Abort_IT+0x270>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d036      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x17a>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a58      	ldr	r2, [pc, #352]	; (8002024 <HAL_DMA_Abort_IT+0x274>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d031      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x17a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a57      	ldr	r2, [pc, #348]	; (8002028 <HAL_DMA_Abort_IT+0x278>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d02c      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x17a>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a55      	ldr	r2, [pc, #340]	; (800202c <HAL_DMA_Abort_IT+0x27c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d027      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x17a>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a54      	ldr	r2, [pc, #336]	; (8002030 <HAL_DMA_Abort_IT+0x280>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d022      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x17a>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a52      	ldr	r2, [pc, #328]	; (8002034 <HAL_DMA_Abort_IT+0x284>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d01d      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x17a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a51      	ldr	r2, [pc, #324]	; (8002038 <HAL_DMA_Abort_IT+0x288>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d018      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x17a>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a4f      	ldr	r2, [pc, #316]	; (800203c <HAL_DMA_Abort_IT+0x28c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d013      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x17a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a4e      	ldr	r2, [pc, #312]	; (8002040 <HAL_DMA_Abort_IT+0x290>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d00e      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x17a>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a4c      	ldr	r2, [pc, #304]	; (8002044 <HAL_DMA_Abort_IT+0x294>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d009      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x17a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a4b      	ldr	r2, [pc, #300]	; (8002048 <HAL_DMA_Abort_IT+0x298>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d004      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x17a>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a49      	ldr	r2, [pc, #292]	; (800204c <HAL_DMA_Abort_IT+0x29c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d108      	bne.n	8001f3c <HAL_DMA_Abort_IT+0x18c>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 0201 	bic.w	r2, r2, #1
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	e147      	b.n	80021cc <HAL_DMA_Abort_IT+0x41c>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0201 	bic.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	e13e      	b.n	80021cc <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 020e 	bic.w	r2, r2, #14
 8001f5c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a2b      	ldr	r2, [pc, #172]	; (8002010 <HAL_DMA_Abort_IT+0x260>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d04a      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x24e>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a29      	ldr	r2, [pc, #164]	; (8002014 <HAL_DMA_Abort_IT+0x264>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d045      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x24e>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a28      	ldr	r2, [pc, #160]	; (8002018 <HAL_DMA_Abort_IT+0x268>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d040      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x24e>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a26      	ldr	r2, [pc, #152]	; (800201c <HAL_DMA_Abort_IT+0x26c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d03b      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x24e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a25      	ldr	r2, [pc, #148]	; (8002020 <HAL_DMA_Abort_IT+0x270>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d036      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x24e>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a23      	ldr	r2, [pc, #140]	; (8002024 <HAL_DMA_Abort_IT+0x274>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d031      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x24e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a22      	ldr	r2, [pc, #136]	; (8002028 <HAL_DMA_Abort_IT+0x278>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d02c      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x24e>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a20      	ldr	r2, [pc, #128]	; (800202c <HAL_DMA_Abort_IT+0x27c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d027      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x24e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a1f      	ldr	r2, [pc, #124]	; (8002030 <HAL_DMA_Abort_IT+0x280>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d022      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x24e>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a1d      	ldr	r2, [pc, #116]	; (8002034 <HAL_DMA_Abort_IT+0x284>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d01d      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x24e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a1c      	ldr	r2, [pc, #112]	; (8002038 <HAL_DMA_Abort_IT+0x288>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d018      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x24e>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a1a      	ldr	r2, [pc, #104]	; (800203c <HAL_DMA_Abort_IT+0x28c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d013      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x24e>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a19      	ldr	r2, [pc, #100]	; (8002040 <HAL_DMA_Abort_IT+0x290>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d00e      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x24e>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a17      	ldr	r2, [pc, #92]	; (8002044 <HAL_DMA_Abort_IT+0x294>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d009      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x24e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a16      	ldr	r2, [pc, #88]	; (8002048 <HAL_DMA_Abort_IT+0x298>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d004      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x24e>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a14      	ldr	r2, [pc, #80]	; (800204c <HAL_DMA_Abort_IT+0x29c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d128      	bne.n	8002050 <HAL_DMA_Abort_IT+0x2a0>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0201 	bic.w	r2, r2, #1
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	e027      	b.n	8002060 <HAL_DMA_Abort_IT+0x2b0>
 8002010:	40020010 	.word	0x40020010
 8002014:	40020028 	.word	0x40020028
 8002018:	40020040 	.word	0x40020040
 800201c:	40020058 	.word	0x40020058
 8002020:	40020070 	.word	0x40020070
 8002024:	40020088 	.word	0x40020088
 8002028:	400200a0 	.word	0x400200a0
 800202c:	400200b8 	.word	0x400200b8
 8002030:	40020410 	.word	0x40020410
 8002034:	40020428 	.word	0x40020428
 8002038:	40020440 	.word	0x40020440
 800203c:	40020458 	.word	0x40020458
 8002040:	40020470 	.word	0x40020470
 8002044:	40020488 	.word	0x40020488
 8002048:	400204a0 	.word	0x400204a0
 800204c:	400204b8 	.word	0x400204b8
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0201 	bic.w	r2, r2, #1
 800205e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a5c      	ldr	r2, [pc, #368]	; (80021d8 <HAL_DMA_Abort_IT+0x428>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d072      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a5b      	ldr	r2, [pc, #364]	; (80021dc <HAL_DMA_Abort_IT+0x42c>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d06d      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a59      	ldr	r2, [pc, #356]	; (80021e0 <HAL_DMA_Abort_IT+0x430>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d068      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a58      	ldr	r2, [pc, #352]	; (80021e4 <HAL_DMA_Abort_IT+0x434>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d063      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a56      	ldr	r2, [pc, #344]	; (80021e8 <HAL_DMA_Abort_IT+0x438>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d05e      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a55      	ldr	r2, [pc, #340]	; (80021ec <HAL_DMA_Abort_IT+0x43c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d059      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a53      	ldr	r2, [pc, #332]	; (80021f0 <HAL_DMA_Abort_IT+0x440>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d054      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a52      	ldr	r2, [pc, #328]	; (80021f4 <HAL_DMA_Abort_IT+0x444>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d04f      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a50      	ldr	r2, [pc, #320]	; (80021f8 <HAL_DMA_Abort_IT+0x448>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d04a      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a4f      	ldr	r2, [pc, #316]	; (80021fc <HAL_DMA_Abort_IT+0x44c>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d045      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a4d      	ldr	r2, [pc, #308]	; (8002200 <HAL_DMA_Abort_IT+0x450>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d040      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a4c      	ldr	r2, [pc, #304]	; (8002204 <HAL_DMA_Abort_IT+0x454>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d03b      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a4a      	ldr	r2, [pc, #296]	; (8002208 <HAL_DMA_Abort_IT+0x458>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d036      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a49      	ldr	r2, [pc, #292]	; (800220c <HAL_DMA_Abort_IT+0x45c>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d031      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a47      	ldr	r2, [pc, #284]	; (8002210 <HAL_DMA_Abort_IT+0x460>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d02c      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a46      	ldr	r2, [pc, #280]	; (8002214 <HAL_DMA_Abort_IT+0x464>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d027      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a44      	ldr	r2, [pc, #272]	; (8002218 <HAL_DMA_Abort_IT+0x468>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d022      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a43      	ldr	r2, [pc, #268]	; (800221c <HAL_DMA_Abort_IT+0x46c>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d01d      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a41      	ldr	r2, [pc, #260]	; (8002220 <HAL_DMA_Abort_IT+0x470>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d018      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a40      	ldr	r2, [pc, #256]	; (8002224 <HAL_DMA_Abort_IT+0x474>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d013      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a3e      	ldr	r2, [pc, #248]	; (8002228 <HAL_DMA_Abort_IT+0x478>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d00e      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a3d      	ldr	r2, [pc, #244]	; (800222c <HAL_DMA_Abort_IT+0x47c>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d009      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a3b      	ldr	r2, [pc, #236]	; (8002230 <HAL_DMA_Abort_IT+0x480>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d004      	beq.n	8002150 <HAL_DMA_Abort_IT+0x3a0>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a3a      	ldr	r2, [pc, #232]	; (8002234 <HAL_DMA_Abort_IT+0x484>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d101      	bne.n	8002154 <HAL_DMA_Abort_IT+0x3a4>
 8002150:	2301      	movs	r3, #1
 8002152:	e000      	b.n	8002156 <HAL_DMA_Abort_IT+0x3a6>
 8002154:	2300      	movs	r3, #0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d028      	beq.n	80021ac <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002164:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002168:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002174:	f003 031f 	and.w	r3, r3, #31
 8002178:	2201      	movs	r2, #1
 800217a:	409a      	lsls	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002188:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00c      	beq.n	80021ac <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800219c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021a0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80021aa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40020010 	.word	0x40020010
 80021dc:	40020028 	.word	0x40020028
 80021e0:	40020040 	.word	0x40020040
 80021e4:	40020058 	.word	0x40020058
 80021e8:	40020070 	.word	0x40020070
 80021ec:	40020088 	.word	0x40020088
 80021f0:	400200a0 	.word	0x400200a0
 80021f4:	400200b8 	.word	0x400200b8
 80021f8:	40020410 	.word	0x40020410
 80021fc:	40020428 	.word	0x40020428
 8002200:	40020440 	.word	0x40020440
 8002204:	40020458 	.word	0x40020458
 8002208:	40020470 	.word	0x40020470
 800220c:	40020488 	.word	0x40020488
 8002210:	400204a0 	.word	0x400204a0
 8002214:	400204b8 	.word	0x400204b8
 8002218:	58025408 	.word	0x58025408
 800221c:	5802541c 	.word	0x5802541c
 8002220:	58025430 	.word	0x58025430
 8002224:	58025444 	.word	0x58025444
 8002228:	58025458 	.word	0x58025458
 800222c:	5802546c 	.word	0x5802546c
 8002230:	58025480 	.word	0x58025480
 8002234:	58025494 	.word	0x58025494

08002238 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e0c6      	b.n	80023d8 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800224e:	2b00      	cmp	r3, #0
 8002250:	d102      	bne.n	8002258 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f008 fab6 	bl	800a7c4 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2223      	movs	r2, #35	; 0x23
 800225c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225e:	4b60      	ldr	r3, [pc, #384]	; (80023e0 <HAL_ETH_Init+0x1a8>)
 8002260:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002264:	4a5e      	ldr	r2, [pc, #376]	; (80023e0 <HAL_ETH_Init+0x1a8>)
 8002266:	f043 0302 	orr.w	r3, r3, #2
 800226a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800226e:	4b5c      	ldr	r3, [pc, #368]	; (80023e0 <HAL_ETH_Init+0x1a8>)
 8002270:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	7a1b      	ldrb	r3, [r3, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d103      	bne.n	800228c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002284:	2000      	movs	r0, #0
 8002286:	f7ff f8f1 	bl	800146c <HAL_SYSCFG_ETHInterfaceSelect>
 800228a:	e003      	b.n	8002294 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800228c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002290:	f7ff f8ec 	bl	800146c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0201 	orr.w	r2, r2, #1
 80022a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022ac:	f7ff f8c6 	bl	800143c <HAL_GetTick>
 80022b0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80022b2:	e00f      	b.n	80022d4 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80022b4:	f7ff f8c2 	bl	800143c <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80022c2:	d907      	bls.n	80022d4 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2204      	movs	r2, #4
 80022c8:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	22e0      	movs	r2, #224	; 0xe0
 80022ce:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e081      	b.n	80023d8 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1e6      	bne.n	80022b4 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f001 faec 	bl	80038c4 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80022ec:	f003 fa6a 	bl	80057c4 <HAL_RCC_GetHCLKFreq>
 80022f0:	4603      	mov	r3, r0
 80022f2:	4a3c      	ldr	r2, [pc, #240]	; (80023e4 <HAL_ETH_Init+0x1ac>)
 80022f4:	fba2 2303 	umull	r2, r3, r2, r3
 80022f8:	0c9a      	lsrs	r2, r3, #18
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	3a01      	subs	r2, #1
 8002300:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f001 fa3f 	bl	8003788 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002320:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002324:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d007      	beq.n	8002342 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	22e0      	movs	r2, #224	; 0xe0
 800233c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e04a      	b.n	80023d8 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	f241 1308 	movw	r3, #4360	; 0x1108
 800234a:	4413      	add	r3, r2
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <HAL_ETH_Init+0x1b0>)
 8002350:	4013      	ands	r3, r2
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6952      	ldr	r2, [r2, #20]
 8002356:	0052      	lsls	r2, r2, #1
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	6809      	ldr	r1, [r1, #0]
 800235c:	431a      	orrs	r2, r3
 800235e:	f241 1308 	movw	r3, #4360	; 0x1108
 8002362:	440b      	add	r3, r1
 8002364:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f001 fb04 	bl	8003974 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f001 fb48 	bl	8003a02 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	3305      	adds	r3, #5
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	021a      	lsls	r2, r3, #8
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	3304      	adds	r3, #4
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	4619      	mov	r1, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	3303      	adds	r3, #3
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	061a      	lsls	r2, r3, #24
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	3302      	adds	r3, #2
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	041b      	lsls	r3, r3, #16
 80023a4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	3301      	adds	r3, #1
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80023b0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80023be:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80023c0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2210      	movs	r2, #16
 80023ce:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2210      	movs	r2, #16
 80023d4:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	58024400 	.word	0x58024400
 80023e4:	431bde83 	.word	0x431bde83
 80023e8:	ffff8001 	.word	0xffff8001

080023ec <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b087      	sub	sp, #28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
 80023f8:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	3310      	adds	r3, #16
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <HAL_ETH_DescAssignMemory+0x28>
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b03      	cmp	r3, #3
 8002412:	d904      	bls.n	800241e <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2201      	movs	r2, #1
 8002418:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e021      	b.n	8002462 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00b      	beq.n	8002454 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	371c      	adds	r7, #28
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800246e:	b480      	push	{r7}
 8002470:	b085      	sub	sp, #20
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800247a:	2b10      	cmp	r3, #16
 800247c:	d174      	bne.n	8002568 <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2223      	movs	r2, #35	; 0x23
 8002482:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	e00f      	b.n	80024aa <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	3310      	adds	r3, #16
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	3301      	adds	r3, #1
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d9ec      	bls.n	800248a <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	665a      	str	r2, [r3, #100]	; 0x64

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 0202 	orr.w	r2, r2, #2
 80024c4:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f042 0201 	orr.w	r2, r2, #1
 80024d4:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	f241 1304 	movw	r3, #4356	; 0x1104
 80024f2:	4413      	add	r3, r2
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6811      	ldr	r1, [r2, #0]
 80024fa:	f043 0201 	orr.w	r2, r3, #1
 80024fe:	f241 1304 	movw	r3, #4356	; 0x1104
 8002502:	440b      	add	r3, r1
 8002504:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	f241 1308 	movw	r3, #4360	; 0x1108
 800250e:	4413      	add	r3, r2
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6811      	ldr	r1, [r2, #0]
 8002516:	f043 0201 	orr.w	r2, r3, #1
 800251a:	f241 1308 	movw	r3, #4360	; 0x1108
 800251e:	440b      	add	r3, r1
 8002520:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8002534:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002538:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	f241 1334 	movw	r3, #4404	; 0x1134
 8002542:	4413      	add	r3, r2
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6811      	ldr	r1, [r2, #0]
 800254a:	f24d 0241 	movw	r2, #53313	; 0xd041
 800254e:	431a      	orrs	r2, r3
 8002550:	f241 1334 	movw	r3, #4404	; 0x1134
 8002554:	440b      	add	r3, r1
 8002556:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2210      	movs	r2, #16
 800255c:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2222      	movs	r2, #34	; 0x22
 8002562:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002564:	2300      	movs	r3, #0
 8002566:	e000      	b.n	800256a <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
  }
}
 800256a:	4618      	mov	r0, r3
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
	...

08002578 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002584:	2b00      	cmp	r3, #0
 8002586:	d067      	beq.n	8002658 <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2223      	movs	r2, #35	; 0x23
 800258c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	f241 1334 	movw	r3, #4404	; 0x1134
 8002596:	4413      	add	r3, r2
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6811      	ldr	r1, [r2, #0]
 800259e:	4a32      	ldr	r2, [pc, #200]	; (8002668 <HAL_ETH_Stop_IT+0xf0>)
 80025a0:	401a      	ands	r2, r3
 80025a2:	f241 1334 	movw	r3, #4404	; 0x1134
 80025a6:	440b      	add	r3, r1
 80025a8:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	f241 1304 	movw	r3, #4356	; 0x1104
 80025b2:	4413      	add	r3, r2
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6811      	ldr	r1, [r2, #0]
 80025ba:	f023 0201 	bic.w	r2, r3, #1
 80025be:	f241 1304 	movw	r3, #4356	; 0x1104
 80025c2:	440b      	add	r3, r1
 80025c4:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	f241 1308 	movw	r3, #4360	; 0x1108
 80025ce:	4413      	add	r3, r2
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6811      	ldr	r1, [r2, #0]
 80025d6:	f023 0201 	bic.w	r2, r3, #1
 80025da:	f241 1308 	movw	r3, #4360	; 0x1108
 80025de:	440b      	add	r3, r1
 80025e0:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0201 	bic.w	r2, r2, #1
 80025f0:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0201 	orr.w	r2, r2, #1
 8002602:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0202 	bic.w	r2, r2, #2
 8002614:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	e00f      	b.n	800263c <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	3310      	adds	r3, #16
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	3301      	adds	r3, #1
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2b03      	cmp	r3, #3
 8002640:	d9ec      	bls.n	800261c <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2210      	movs	r2, #16
 800264c:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2210      	movs	r2, #16
 8002652:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	e000      	b.n	800265a <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
  }
}
 800265a:	4618      	mov	r0, r3
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	ffff2fbe 	.word	0xffff2fbe

0800266c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d107      	bne.n	800268e <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002682:	f043 0201 	orr.w	r2, r3, #1
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e073      	b.n	8002776 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002692:	2b10      	cmp	r3, #16
 8002694:	d16e      	bne.n	8002774 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002696:	2200      	movs	r2, #0
 8002698:	68b9      	ldr	r1, [r7, #8]
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f001 fa0e 	bl	8003abc <ETH_Prepare_Tx_Descriptors>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d007      	beq.n	80026b6 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026aa:	f043 0202 	orr.w	r2, r3, #2
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e05f      	b.n	8002776 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	3206      	adds	r2, #6
 80026be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c2:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	629a      	str	r2, [r3, #40]	; 0x28
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d904      	bls.n	80026e0 <HAL_ETH_Transmit+0x74>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026da:	1f1a      	subs	r2, r3, #4
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	3106      	adds	r1, #6
 80026ec:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80026f0:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80026f4:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 80026f6:	f7fe fea1 	bl	800143c <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80026fc:	e034      	b.n	8002768 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d011      	beq.n	8002734 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002714:	f043 0208 	orr.w	r2, r3, #8
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	22e0      	movs	r2, #224	; 0xe0
 800272e:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e020      	b.n	8002776 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273a:	d015      	beq.n	8002768 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 800273c:	f7fe fe7e 	bl	800143c <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	429a      	cmp	r2, r3
 800274a:	d302      	bcc.n	8002752 <HAL_ETH_Transmit+0xe6>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10a      	bne.n	8002768 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002756:	f043 0204 	orr.w	r2, r3, #4
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	22e0      	movs	r2, #224	; 0xe0
 8002762:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e006      	b.n	8002776 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	2b00      	cmp	r3, #0
 800276e:	dbc6      	blt.n	80026fe <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002770:	2300      	movs	r3, #0
 8002772:	e000      	b.n	8002776 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
  }
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 800277e:	b480      	push	{r7}
 8002780:	b089      	sub	sp, #36	; 0x24
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3344      	adds	r3, #68	; 0x44
 800278a:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	69fa      	ldr	r2, [r7, #28]
 8002796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800279a:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	613b      	str	r3, [r7, #16]
 80027a4:	2300      	movs	r3, #0
 80027a6:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d06b      	beq.n	8002888 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 80027b0:	2300      	movs	r3, #0
 80027b2:	e0ce      	b.n	8002952 <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	3301      	adds	r3, #1
 80027b8:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d036      	beq.n	8002834 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	3301      	adds	r3, #1
 80027ca:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d101      	bne.n	80027d6 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	3301      	adds	r3, #1
 80027da:	61fb      	str	r3, [r7, #28]
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	2b03      	cmp	r3, #3
 80027e0:	d902      	bls.n	80027e8 <HAL_ETH_IsRxDataAvailable+0x6a>
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	3b04      	subs	r3, #4
 80027e6:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	69fa      	ldr	r2, [r7, #28]
 80027ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027f0:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	db11      	blt.n	800281e <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00b      	beq.n	800281e <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2201      	movs	r2, #1
 800280a:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	3301      	adds	r3, #1
 8002810:	61fb      	str	r3, [r7, #28]
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	2b03      	cmp	r3, #3
 8002816:	d902      	bls.n	800281e <HAL_ETH_IsRxDataAvailable+0xa0>
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	3b04      	subs	r3, #4
 800281c:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	69fa      	ldr	r2, [r7, #28]
 8002822:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8002830:	2301      	movs	r3, #1
 8002832:	e08e      	b.n	8002952 <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d012      	beq.n	8002866 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8002844:	2301      	movs	r3, #1
 8002846:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	3301      	adds	r3, #1
 800284c:	61fb      	str	r3, [r7, #28]
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	2b03      	cmp	r3, #3
 8002852:	d902      	bls.n	800285a <HAL_ETH_IsRxDataAvailable+0xdc>
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	3b04      	subs	r3, #4
 8002858:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	69fa      	ldr	r2, [r7, #28]
 800285e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002862:	61bb      	str	r3, [r7, #24]
 8002864:	e010      	b.n	8002888 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	3301      	adds	r3, #1
 800286a:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	3301      	adds	r3, #1
 8002870:	61fb      	str	r3, [r7, #28]
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	2b03      	cmp	r3, #3
 8002876:	d902      	bls.n	800287e <HAL_ETH_IsRxDataAvailable+0x100>
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	3b04      	subs	r3, #4
 800287c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	69fa      	ldr	r2, [r7, #28]
 8002882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002886:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	2b00      	cmp	r3, #0
 800288e:	db02      	blt.n	8002896 <HAL_ETH_IsRxDataAvailable+0x118>
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2b03      	cmp	r3, #3
 8002894:	d98e      	bls.n	80027b4 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d056      	beq.n	800294a <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	69fa      	ldr	r2, [r7, #28]
 80028a0:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	69fa      	ldr	r2, [r7, #28]
 80028b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b4:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
 80028ba:	e03b      	b.n	8002934 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028ca:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d009      	beq.n	80028e8 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	695a      	ldr	r2, [r3, #20]
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d005      	beq.n	8002908 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	3b01      	subs	r3, #1
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	429a      	cmp	r2, r3
 8002910:	d20d      	bcs.n	800292e <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	3301      	adds	r3, #1
 8002916:	61fb      	str	r3, [r7, #28]
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	2b03      	cmp	r3, #3
 800291c:	d902      	bls.n	8002924 <HAL_ETH_IsRxDataAvailable+0x1a6>
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3b04      	subs	r3, #4
 8002922:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	69fa      	ldr	r2, [r7, #28]
 8002928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800292c:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	3301      	adds	r3, #1
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	429a      	cmp	r2, r3
 800293a:	d3bf      	bcc.n	80028bc <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6819      	ldr	r1, [r3, #0]
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	f241 1328 	movw	r3, #4392	; 0x1128
 8002946:	440b      	add	r3, r1
 8002948:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2200      	movs	r2, #0
 800294e:	619a      	str	r2, [r3, #24]

  return 0;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3724      	adds	r7, #36	; 0x24
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b08a      	sub	sp, #40	; 0x28
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
 8002966:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3344      	adds	r3, #68	; 0x44
 800296c:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8002974:	2300      	movs	r3, #0
 8002976:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800297c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002980:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d104      	bne.n	8002996 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e07d      	b.n	8002a92 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10f      	bne.n	80029be <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7ff feed 	bl	800277e <HAL_ETH_IsRxDataAvailable>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e071      	b.n	8002a92 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80029be:	2300      	movs	r3, #0
 80029c0:	623b      	str	r3, [r7, #32]
 80029c2:	e031      	b.n	8002a28 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	461a      	mov	r2, r3
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695a      	ldr	r2, [r3, #20]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00b      	beq.n	80029f6 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	461a      	mov	r2, r3
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695a      	ldr	r2, [r3, #20]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80029fe:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	3301      	adds	r3, #1
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d902      	bls.n	8002a12 <HAL_ETH_GetRxDataBuffer+0xb4>
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	3b04      	subs	r3, #4
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a1a:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	3301      	adds	r3, #1
 8002a26:	623b      	str	r3, [r7, #32]
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	6a3a      	ldr	r2, [r7, #32]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d3c7      	bcc.n	80029c4 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	461a      	mov	r2, r3
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d803      	bhi.n	8002a5e <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	605a      	str	r2, [r3, #4]
 8002a5c:	e018      	b.n	8002a90 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d012      	beq.n	8002a8c <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	695a      	ldr	r2, [r3, #20]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	1ad2      	subs	r2, r2, r3
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	e001      	b.n	8002a90 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e000      	b.n	8002a92 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3728      	adds	r7, #40	; 0x28
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b086      	sub	sp, #24
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3344      	adds	r3, #68	; 0x44
 8002aa8:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d107      	bne.n	8002ac8 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7ff fe60 	bl	800277e <HAL_ETH_IsRxDataAvailable>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e017      	b.n	8002af8 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	699a      	ldr	r2, [r3, #24]
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	4413      	add	r3, r2
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	2b03      	cmp	r3, #3
 8002ad8:	d902      	bls.n	8002ae0 <HAL_ETH_GetRxDataLength+0x46>
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	3b04      	subs	r3, #4
 8002ade:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ae8:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b089      	sub	sp, #36	; 0x24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3344      	adds	r3, #68	; 0x44
 8002b0c:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	69fa      	ldr	r2, [r7, #28]
 8002b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b1c:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e057      	b.n	8002be0 <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d002      	beq.n	8002b3e <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8002b3e:	2300      	movs	r3, #0
 8002b40:	613b      	str	r3, [r7, #16]
 8002b42:	e03b      	b.n	8002bbc <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	691a      	ldr	r2, [r3, #16]
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b52:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d009      	beq.n	8002b70 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	695a      	ldr	r2, [r3, #20]
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d20d      	bcs.n	8002bb6 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	61fb      	str	r3, [r7, #28]
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d902      	bls.n	8002bac <HAL_ETH_BuildRxDescriptors+0xac>
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	3b04      	subs	r3, #4
 8002baa:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	69fa      	ldr	r2, [r7, #28]
 8002bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb4:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	613b      	str	r3, [r7, #16]
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d3bf      	bcc.n	8002b44 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6819      	ldr	r1, [r3, #0]
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	f241 1328 	movw	r3, #4392	; 0x1128
 8002bce:	440b      	add	r3, r1
 8002bd0:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3724      	adds	r7, #36	; 0x24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c02:	2b40      	cmp	r3, #64	; 0x40
 8002c04:	d113      	bne.n	8002c2e <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	f241 1334 	movw	r3, #4404	; 0x1134
 8002c0e:	4413      	add	r3, r2
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c16:	2b40      	cmp	r3, #64	; 0x40
 8002c18:	d109      	bne.n	8002c2e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f007 fe86 	bl	800a92c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002c28:	f248 0240 	movw	r2, #32832	; 0x8040
 8002c2c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d113      	bne.n	8002c68 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	f241 1334 	movw	r3, #4404	; 0x1134
 8002c48:	4413      	add	r3, r2
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d109      	bne.n	8002c68 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 f8cb 	bl	8002df0 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002c62:	f248 0201 	movw	r2, #32769	; 0x8001
 8002c66:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c7a:	d149      	bne.n	8002d10 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	f241 1334 	movw	r3, #4404	; 0x1134
 8002c84:	4413      	add	r3, r2
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c90:	d13e      	bne.n	8002d10 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c96:	f043 0208 	orr.w	r2, r3, #8
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb0:	d11b      	bne.n	8002cea <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	f241 1302 	movw	r3, #4354	; 0x1102
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	f241 1334 	movw	r3, #4404	; 0x1134
 8002cce:	4413      	add	r3, r2
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6811      	ldr	r1, [r2, #0]
 8002cd6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cda:	f241 1334 	movw	r3, #4404	; 0x1134
 8002cde:	440b      	add	r3, r1
 8002ce0:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	22e0      	movs	r2, #224	; 0xe0
 8002ce6:	66da      	str	r2, [r3, #108]	; 0x6c
 8002ce8:	e00f      	b.n	8002d0a <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002d04:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8002d08:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f87a 	bl	8002e04 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d18:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8002d1c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002d20:	d10e      	bne.n	8002d40 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	22e0      	movs	r2, #224	; 0xe0
 8002d32:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->MACErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f86f 	bl	8002e18 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d48:	f003 0310 	and.w	r3, r3, #16
 8002d4c:	2b10      	cmp	r3, #16
 8002d4e:	d10f      	bne.n	8002d70 <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002d58:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f862 	bl	8002e2c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d78:	f003 0320 	and.w	r3, r3, #32
 8002d7c:	2b20      	cmp	r3, #32
 8002d7e:	d10f      	bne.n	8002da0 <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002d88:	f003 020f 	and.w	r2, r3, #15
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f854 	bl	8002e40 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8002da0:	f7fe fcd4 	bl	800174c <HAL_GetCurrentCPUID>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b03      	cmp	r3, #3
 8002da8:	d10d      	bne.n	8002dc6 <HAL_ETH_IRQHandler+0x1da>
  {
    /* check ETH WAKEUP exti flag */
    if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002daa:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <HAL_ETH_IRQHandler+0x1fc>)
 8002dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d014      	beq.n	8002de0 <HAL_ETH_IRQHandler+0x1f4>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002db6:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <HAL_ETH_IRQHandler+0x1fc>)
 8002db8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002dbc:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f848 	bl	8002e54 <HAL_ETH_WakeUpCallback>
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
#endif
  }
#endif
}
 8002dc4:	e00c      	b.n	8002de0 <HAL_ETH_IRQHandler+0x1f4>
    if(__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002dc6:	4b09      	ldr	r3, [pc, #36]	; (8002dec <HAL_ETH_IRQHandler+0x200>)
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d006      	beq.n	8002de0 <HAL_ETH_IRQHandler+0x1f4>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002dd2:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_ETH_IRQHandler+0x200>)
 8002dd4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002dd8:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f83a 	bl	8002e54 <HAL_ETH_WakeUpCallback>
}
 8002de0:	bf00      	nop
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	58000080 	.word	0x58000080
 8002dec:	580000c0 	.word	0x580000c0

08002df0 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
 8002e74:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e03e      	b.n	8002f08 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e92:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	055b      	lsls	r3, r3, #21
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	041b      	lsls	r3, r3, #16
 8002eac:	4313      	orrs	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f043 030c 	orr.w	r3, r3, #12
 8002eb6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002eca:	f7fe fab7 	bl	800143c <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002ed0:	e009      	b.n	8002ee6 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8002ed2:	f7fe fab3 	bl	800143c <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ee0:	d901      	bls.n	8002ee6 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e010      	b.n	8002f08 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1ed      	bne.n	8002ed2 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
 8002f1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e03c      	b.n	8002fac <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f3a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	055b      	lsls	r3, r3, #21
 8002f46:	4313      	orrs	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	041b      	lsls	r3, r3, #16
 8002f54:	4313      	orrs	r3, r2
 8002f56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f023 030c 	bic.w	r3, r3, #12
 8002f5e:	f043 0304 	orr.w	r3, r3, #4
 8002f62:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	4b10      	ldr	r3, [pc, #64]	; (8002fb4 <HAL_ETH_WritePHYRegister+0xa4>)
 8002f72:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002f76:	4a0f      	ldr	r2, [pc, #60]	; (8002fb4 <HAL_ETH_WritePHYRegister+0xa4>)
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002f7e:	f7fe fa5d 	bl	800143c <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002f84:	e009      	b.n	8002f9a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8002f86:	f7fe fa59 	bl	800143c <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f94:	d901      	bls.n	8002f9a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e008      	b.n	8002fac <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1ed      	bne.n	8002f86 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40028000 	.word	0x40028000

08002fb8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e1c3      	b.n	8003354 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 020c 	and.w	r2, r3, #12
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0310 	and.w	r3, r3, #16
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bf14      	ite	ne
 8002fe8:	2301      	movne	r3, #1
 8002fea:	2300      	moveq	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	461a      	mov	r2, r3
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300e:	2b00      	cmp	r3, #0
 8003010:	bf0c      	ite	eq
 8003012:	2301      	moveq	r3, #1
 8003014:	2300      	movne	r3, #0
 8003016:	b2db      	uxtb	r3, r3
 8003018:	461a      	mov	r2, r3
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800302a:	2b00      	cmp	r3, #0
 800302c:	bf14      	ite	ne
 800302e:	2301      	movne	r3, #1
 8003030:	2300      	moveq	r3, #0
 8003032:	b2db      	uxtb	r3, r3
 8003034:	461a      	mov	r2, r3
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003044:	2b00      	cmp	r3, #0
 8003046:	bf0c      	ite	eq
 8003048:	2301      	moveq	r3, #1
 800304a:	2300      	movne	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	461a      	mov	r2, r3
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800305e:	2b00      	cmp	r3, #0
 8003060:	bf14      	ite	ne
 8003062:	2301      	movne	r3, #1
 8003064:	2300      	moveq	r3, #0
 8003066:	b2db      	uxtb	r3, r3
 8003068:	461a      	mov	r2, r3
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003078:	2b00      	cmp	r3, #0
 800307a:	bf14      	ite	ne
 800307c:	2301      	movne	r3, #1
 800307e:	2300      	moveq	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	461a      	mov	r2, r3
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	bf14      	ite	ne
 80030b2:	2301      	movne	r3, #1
 80030b4:	2300      	moveq	r3, #0
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	461a      	mov	r2, r3
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	bf0c      	ite	eq
 80030cc:	2301      	moveq	r3, #1
 80030ce:	2300      	movne	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	461a      	mov	r2, r3
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	bf0c      	ite	eq
 80030e6:	2301      	moveq	r3, #1
 80030e8:	2300      	movne	r3, #0
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	461a      	mov	r2, r3
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	bf14      	ite	ne
 8003100:	2301      	movne	r3, #1
 8003102:	2300      	moveq	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	461a      	mov	r2, r3
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003116:	2b00      	cmp	r3, #0
 8003118:	bf14      	ite	ne
 800311a:	2301      	movne	r3, #1
 800311c:	2300      	moveq	r3, #0
 800311e:	b2db      	uxtb	r3, r3
 8003120:	461a      	mov	r2, r3
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003130:	2b00      	cmp	r3, #0
 8003132:	bf14      	ite	ne
 8003134:	2301      	movne	r3, #1
 8003136:	2300      	moveq	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	461a      	mov	r2, r3
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800314a:	2b00      	cmp	r3, #0
 800314c:	bf14      	ite	ne
 800314e:	2301      	movne	r3, #1
 8003150:	2300      	moveq	r3, #0
 8003152:	b2db      	uxtb	r3, r3
 8003154:	461a      	mov	r2, r3
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	bf14      	ite	ne
 8003176:	2301      	movne	r3, #1
 8003178:	2300      	moveq	r3, #0
 800317a:	b2db      	uxtb	r3, r3
 800317c:	461a      	mov	r2, r3
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	bf0c      	ite	eq
 80031ac:	2301      	moveq	r3, #1
 80031ae:	2300      	movne	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	461a      	mov	r2, r3
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bf14      	ite	ne
 80031c8:	2301      	movne	r3, #1
 80031ca:	2300      	moveq	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	461a      	mov	r2, r3
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	bf14      	ite	ne
 80031e4:	2301      	movne	r3, #1
 80031e6:	2300      	moveq	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	461a      	mov	r2, r3
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	bf14      	ite	ne
 8003200:	2301      	movne	r3, #1
 8003202:	2300      	moveq	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	461a      	mov	r2, r3
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	0e5b      	lsrs	r3, r3, #25
 8003216:	f003 021f 	and.w	r2, r3, #31
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003228:	2b00      	cmp	r3, #0
 800322a:	bf14      	ite	ne
 800322c:	2301      	movne	r3, #1
 800322e:	2300      	moveq	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	461a      	mov	r2, r3
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f003 020f 	and.w	r2, r3, #15
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	bf14      	ite	ne
 8003256:	2301      	movne	r3, #1
 8003258:	2300      	moveq	r3, #0
 800325a:	b2db      	uxtb	r3, r3
 800325c:	461a      	mov	r2, r3
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326e:	2b00      	cmp	r3, #0
 8003270:	bf0c      	ite	eq
 8003272:	2301      	moveq	r3, #1
 8003274:	2300      	movne	r3, #0
 8003276:	b2db      	uxtb	r3, r3
 8003278:	461a      	mov	r2, r3
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003286:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003294:	0c1b      	lsrs	r3, r3, #16
 8003296:	b29a      	uxth	r2, r3
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	bf14      	ite	ne
 80032ac:	2301      	movne	r3, #1
 80032ae:	2300      	moveq	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	461a      	mov	r2, r3
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	bf14      	ite	ne
 80032ca:	2301      	movne	r3, #1
 80032cc:	2300      	moveq	r3, #0
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	461a      	mov	r2, r3
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80032e0:	f003 0272 	and.w	r2, r3, #114	; 0x72
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80032f0:	f003 0223 	and.w	r2, r3, #35	; 0x23
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b00      	cmp	r3, #0
 8003306:	bf14      	ite	ne
 8003308:	2301      	movne	r3, #1
 800330a:	2300      	moveq	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	461a      	mov	r2, r3
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800331e:	f003 0310 	and.w	r3, r3, #16
 8003322:	2b00      	cmp	r3, #0
 8003324:	bf14      	ite	ne
 8003326:	2301      	movne	r3, #1
 8003328:	2300      	moveq	r3, #0
 800332a:	b2db      	uxtb	r3, r3
 800332c:	461a      	mov	r2, r3
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800333c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003340:	2b00      	cmp	r3, #0
 8003342:	bf0c      	ite	eq
 8003344:	2301      	moveq	r3, #1
 8003346:	2300      	movne	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	461a      	mov	r2, r3
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e00a      	b.n	800338a <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003378:	2b10      	cmp	r3, #16
 800337a:	d105      	bne.n	8003388 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 800337c:	6839      	ldr	r1, [r7, #0]
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f860 	bl	8003444 <ETH_SetMACConfig>

    return HAL_OK;
 8003384:	2300      	movs	r3, #0
 8003386:	e000      	b.n	800338a <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
  }
}
 800338a:	4618      	mov	r0, r3
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
	...

08003394 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80033a4:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80033ac:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80033ae:	f002 fa09 	bl	80057c4 <HAL_RCC_GetHCLKFreq>
 80033b2:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	4a1e      	ldr	r2, [pc, #120]	; (8003430 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d908      	bls.n	80033ce <HAL_ETH_SetMDIOClockRange+0x3a>
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	4a1d      	ldr	r2, [pc, #116]	; (8003434 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d804      	bhi.n	80033ce <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	e027      	b.n	800341e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	4a18      	ldr	r2, [pc, #96]	; (8003434 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d908      	bls.n	80033e8 <HAL_ETH_SetMDIOClockRange+0x54>
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	4a17      	ldr	r2, [pc, #92]	; (8003438 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d204      	bcs.n	80033e8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	e01a      	b.n	800341e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	4a13      	ldr	r2, [pc, #76]	; (8003438 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d303      	bcc.n	80033f8 <HAL_ETH_SetMDIOClockRange+0x64>
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	4a12      	ldr	r2, [pc, #72]	; (800343c <HAL_ETH_SetMDIOClockRange+0xa8>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d911      	bls.n	800341c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	4a10      	ldr	r2, [pc, #64]	; (800343c <HAL_ETH_SetMDIOClockRange+0xa8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d908      	bls.n	8003412 <HAL_ETH_SetMDIOClockRange+0x7e>
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	4a0f      	ldr	r2, [pc, #60]	; (8003440 <HAL_ETH_SetMDIOClockRange+0xac>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d804      	bhi.n	8003412 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	e005      	b.n	800341e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003418:	60fb      	str	r3, [r7, #12]
 800341a:	e000      	b.n	800341e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800341c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003428:	bf00      	nop
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	01312cff 	.word	0x01312cff
 8003434:	02160ebf 	.word	0x02160ebf
 8003438:	03938700 	.word	0x03938700
 800343c:	05f5e0ff 	.word	0x05f5e0ff
 8003440:	08f0d17f 	.word	0x08f0d17f

08003444 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8003456:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	791b      	ldrb	r3, [r3, #4]
 800345c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800345e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	7b1b      	ldrb	r3, [r3, #12]
 8003464:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003466:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	7b5b      	ldrb	r3, [r3, #13]
 800346c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800346e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	7b9b      	ldrb	r3, [r3, #14]
 8003474:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003476:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	7bdb      	ldrb	r3, [r3, #15]
 800347c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800347e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	7c12      	ldrb	r2, [r2, #16]
 8003484:	2a00      	cmp	r2, #0
 8003486:	d102      	bne.n	800348e <ETH_SetMACConfig+0x4a>
 8003488:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800348c:	e000      	b.n	8003490 <ETH_SetMACConfig+0x4c>
 800348e:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003490:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	7c52      	ldrb	r2, [r2, #17]
 8003496:	2a00      	cmp	r2, #0
 8003498:	d102      	bne.n	80034a0 <ETH_SetMACConfig+0x5c>
 800349a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800349e:	e000      	b.n	80034a2 <ETH_SetMACConfig+0x5e>
 80034a0:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80034a2:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	7c9b      	ldrb	r3, [r3, #18]
 80034a8:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80034aa:	431a      	orrs	r2, r3
                                macconf->Speed |
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80034b0:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80034b6:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	7f1b      	ldrb	r3, [r3, #28]
 80034bc:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80034be:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	7f5b      	ldrb	r3, [r3, #29]
 80034c4:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80034c6:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	7f92      	ldrb	r2, [r2, #30]
 80034cc:	2a00      	cmp	r2, #0
 80034ce:	d102      	bne.n	80034d6 <ETH_SetMACConfig+0x92>
 80034d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034d4:	e000      	b.n	80034d8 <ETH_SetMACConfig+0x94>
 80034d6:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80034d8:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	7fdb      	ldrb	r3, [r3, #31]
 80034de:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80034e0:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80034e8:	2a00      	cmp	r2, #0
 80034ea:	d102      	bne.n	80034f2 <ETH_SetMACConfig+0xae>
 80034ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034f0:	e000      	b.n	80034f4 <ETH_SetMACConfig+0xb0>
 80034f2:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80034f4:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80034fa:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003502:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8003504:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800350a:	4313      	orrs	r3, r2
 800350c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	4b56      	ldr	r3, [pc, #344]	; (8003670 <ETH_SetMACConfig+0x22c>)
 8003516:	4013      	ands	r3, r2
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6812      	ldr	r2, [r2, #0]
 800351c:	68f9      	ldr	r1, [r7, #12]
 800351e:	430b      	orrs	r3, r1
 8003520:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003526:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800352e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003530:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003538:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800353a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003542:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8003544:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800354c:	2a00      	cmp	r2, #0
 800354e:	d102      	bne.n	8003556 <ETH_SetMACConfig+0x112>
 8003550:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003554:	e000      	b.n	8003558 <ETH_SetMACConfig+0x114>
 8003556:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003558:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800355e:	4313      	orrs	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	4b42      	ldr	r3, [pc, #264]	; (8003674 <ETH_SetMACConfig+0x230>)
 800356a:	4013      	ands	r3, r2
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6812      	ldr	r2, [r2, #0]
 8003570:	68f9      	ldr	r1, [r7, #12]
 8003572:	430b      	orrs	r3, r1
 8003574:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800357c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003582:	4313      	orrs	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	4b3a      	ldr	r3, [pc, #232]	; (8003678 <ETH_SetMACConfig+0x234>)
 800358e:	4013      	ands	r3, r2
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6812      	ldr	r2, [r2, #0]
 8003594:	68f9      	ldr	r1, [r7, #12]
 8003596:	430b      	orrs	r3, r1
 8003598:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80035a0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80035a6:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80035ae:	2a00      	cmp	r2, #0
 80035b0:	d101      	bne.n	80035b6 <ETH_SetMACConfig+0x172>
 80035b2:	2280      	movs	r2, #128	; 0x80
 80035b4:	e000      	b.n	80035b8 <ETH_SetMACConfig+0x174>
 80035b6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80035b8:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035be:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80035c0:	4313      	orrs	r3, r2
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035ca:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80035ce:	4013      	ands	r3, r2
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6812      	ldr	r2, [r2, #0]
 80035d4:	68f9      	ldr	r1, [r7, #12]
 80035d6:	430b      	orrs	r3, r1
 80035d8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80035e0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80035e8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80035ea:	4313      	orrs	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f6:	f023 0103 	bic.w	r1, r3, #3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	430a      	orrs	r2, r1
 8003602:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800360e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800362a:	2a00      	cmp	r2, #0
 800362c:	d101      	bne.n	8003632 <ETH_SetMACConfig+0x1ee>
 800362e:	2240      	movs	r2, #64	; 0x40
 8003630:	e000      	b.n	8003634 <ETH_SetMACConfig+0x1f0>
 8003632:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003634:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800363c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800363e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003646:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003648:	4313      	orrs	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003654:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	430a      	orrs	r2, r1
 8003660:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003664:	bf00      	nop
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	00048083 	.word	0x00048083
 8003674:	c0f88000 	.word	0xc0f88000
 8003678:	fffffef0 	.word	0xfffffef0

0800367c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	4b38      	ldr	r3, [pc, #224]	; (8003774 <ETH_SetDMAConfig+0xf8>)
 8003692:	4013      	ands	r3, r2
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	6812      	ldr	r2, [r2, #0]
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	6809      	ldr	r1, [r1, #0]
 800369c:	431a      	orrs	r2, r3
 800369e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80036a2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	791b      	ldrb	r3, [r3, #4]
 80036a8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80036ae:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	7b1b      	ldrb	r3, [r3, #12]
 80036b4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	f241 0304 	movw	r3, #4100	; 0x1004
 80036c2:	4413      	add	r3, r2
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	4b2c      	ldr	r3, [pc, #176]	; (8003778 <ETH_SetDMAConfig+0xfc>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6811      	ldr	r1, [r2, #0]
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	431a      	orrs	r2, r3
 80036d2:	f241 0304 	movw	r3, #4100	; 0x1004
 80036d6:	440b      	add	r3, r1
 80036d8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	7b5b      	ldrb	r3, [r3, #13]
 80036de:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80036e4:	4313      	orrs	r3, r2
 80036e6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	4b22      	ldr	r3, [pc, #136]	; (800377c <ETH_SetDMAConfig+0x100>)
 80036f4:	4013      	ands	r3, r2
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6811      	ldr	r1, [r2, #0]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	431a      	orrs	r2, r3
 80036fe:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8003702:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	7d1b      	ldrb	r3, [r3, #20]
 800370c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800370e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	7f5b      	ldrb	r3, [r3, #29]
 8003714:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003716:	4313      	orrs	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	f241 1304 	movw	r3, #4356	; 0x1104
 8003722:	4413      	add	r3, r2
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	4b16      	ldr	r3, [pc, #88]	; (8003780 <ETH_SetDMAConfig+0x104>)
 8003728:	4013      	ands	r3, r2
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6811      	ldr	r1, [r2, #0]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	431a      	orrs	r2, r3
 8003732:	f241 1304 	movw	r3, #4356	; 0x1104
 8003736:	440b      	add	r3, r1
 8003738:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	7f1b      	ldrb	r3, [r3, #28]
 800373e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003744:	4313      	orrs	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	f241 1308 	movw	r3, #4360	; 0x1108
 8003750:	4413      	add	r3, r2
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <ETH_SetDMAConfig+0x108>)
 8003756:	4013      	ands	r3, r2
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6811      	ldr	r1, [r2, #0]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	431a      	orrs	r2, r3
 8003760:	f241 1308 	movw	r3, #4360	; 0x1108
 8003764:	440b      	add	r3, r1
 8003766:	601a      	str	r2, [r3, #0]
}
 8003768:	bf00      	nop
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	ffff87fd 	.word	0xffff87fd
 8003778:	ffff2ffe 	.word	0xffff2ffe
 800377c:	fffec000 	.word	0xfffec000
 8003780:	ffc0efef 	.word	0xffc0efef
 8003784:	7fc0ffff 	.word	0x7fc0ffff

08003788 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b0a4      	sub	sp, #144	; 0x90
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003790:	2301      	movs	r3, #1
 8003792:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003796:	2300      	movs	r3, #0
 8003798:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800379a:	2300      	movs	r3, #0
 800379c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80037a0:	2300      	movs	r3, #0
 80037a2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80037a6:	2301      	movs	r3, #1
 80037a8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80037ac:	2301      	movs	r3, #1
 80037ae:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80037b2:	2301      	movs	r3, #1
 80037b4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80037b8:	2300      	movs	r3, #0
 80037ba:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80037be:	2301      	movs	r3, #1
 80037c0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80037c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037c8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80037ca:	2300      	movs	r3, #0
 80037cc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80037d0:	2300      	movs	r3, #0
 80037d2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80037d4:	2300      	movs	r3, #0
 80037d6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80037da:	2300      	movs	r3, #0
 80037dc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80037e0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80037e4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80037e6:	2300      	movs	r3, #0
 80037e8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80037ec:	2300      	movs	r3, #0
 80037ee:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80037f0:	2301      	movs	r3, #1
 80037f2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80037f6:	2300      	movs	r3, #0
 80037f8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80037fc:	2300      	movs	r3, #0
 80037fe:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003802:	2300      	movs	r3, #0
 8003804:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003806:	2300      	movs	r3, #0
 8003808:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800380a:	2300      	movs	r3, #0
 800380c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800380e:	2300      	movs	r3, #0
 8003810:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003814:	2300      	movs	r3, #0
 8003816:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800381a:	2301      	movs	r3, #1
 800381c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003820:	2320      	movs	r3, #32
 8003822:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003826:	2301      	movs	r3, #1
 8003828:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800382c:	2300      	movs	r3, #0
 800382e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003832:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003836:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003838:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800383c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800383e:	2300      	movs	r3, #0
 8003840:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003844:	2302      	movs	r3, #2
 8003846:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800384a:	2300      	movs	r3, #0
 800384c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003850:	2300      	movs	r3, #0
 8003852:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003856:	2300      	movs	r3, #0
 8003858:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800385c:	2301      	movs	r3, #1
 800385e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003862:	2300      	movs	r3, #0
 8003864:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003866:	2301      	movs	r3, #1
 8003868:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800386c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003870:	4619      	mov	r1, r3
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff fde6 	bl	8003444 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003878:	2301      	movs	r3, #1
 800387a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800387c:	2301      	movs	r3, #1
 800387e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003880:	2300      	movs	r3, #0
 8003882:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003884:	2300      	movs	r3, #0
 8003886:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800388a:	2300      	movs	r3, #0
 800388c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800388e:	2300      	movs	r3, #0
 8003890:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003892:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003896:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003898:	2300      	movs	r3, #0
 800389a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800389c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80038a0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80038a2:	2300      	movs	r3, #0
 80038a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80038a8:	f44f 7306 	mov.w	r3, #536	; 0x218
 80038ac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80038ae:	f107 0308 	add.w	r3, r7, #8
 80038b2:	4619      	mov	r1, r3
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7ff fee1 	bl	800367c <ETH_SetDMAConfig>
}
 80038ba:	bf00      	nop
 80038bc:	3790      	adds	r7, #144	; 0x90
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
	...

080038c4 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80038d4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038dc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80038de:	f001 ff71 	bl	80057c4 <HAL_RCC_GetHCLKFreq>
 80038e2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	4a1e      	ldr	r2, [pc, #120]	; (8003960 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d908      	bls.n	80038fe <ETH_MAC_MDIO_ClkConfig+0x3a>
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	4a1d      	ldr	r2, [pc, #116]	; (8003964 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d804      	bhi.n	80038fe <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	e027      	b.n	800394e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	4a18      	ldr	r2, [pc, #96]	; (8003964 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d908      	bls.n	8003918 <ETH_MAC_MDIO_ClkConfig+0x54>
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	4a17      	ldr	r2, [pc, #92]	; (8003968 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d204      	bcs.n	8003918 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003914:	60fb      	str	r3, [r7, #12]
 8003916:	e01a      	b.n	800394e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	4a13      	ldr	r2, [pc, #76]	; (8003968 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d303      	bcc.n	8003928 <ETH_MAC_MDIO_ClkConfig+0x64>
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	4a12      	ldr	r2, [pc, #72]	; (800396c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d911      	bls.n	800394c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	4a10      	ldr	r2, [pc, #64]	; (800396c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d908      	bls.n	8003942 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	4a0f      	ldr	r2, [pc, #60]	; (8003970 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d804      	bhi.n	8003942 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	e005      	b.n	800394e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	e000      	b.n	800394e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800394c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003958:	bf00      	nop
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	01312cff 	.word	0x01312cff
 8003964:	02160ebf 	.word	0x02160ebf
 8003968:	03938700 	.word	0x03938700
 800396c:	05f5e0ff 	.word	0x05f5e0ff
 8003970:	08f0d17f 	.word	0x08f0d17f

08003974 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800397c:	2300      	movs	r3, #0
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	e01d      	b.n	80039be <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68d9      	ldr	r1, [r3, #12]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	4613      	mov	r3, r2
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	4413      	add	r3, r2
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	440b      	add	r3, r1
 8003992:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2200      	movs	r2, #0
 8003998:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2200      	movs	r2, #0
 800399e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2200      	movs	r2, #0
 80039a4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2200      	movs	r2, #0
 80039aa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80039ac:	68b9      	ldr	r1, [r7, #8]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	3206      	adds	r2, #6
 80039b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	3301      	adds	r3, #1
 80039bc:	60fb      	str	r3, [r7, #12]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2b03      	cmp	r3, #3
 80039c2:	d9de      	bls.n	8003982 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	f241 132c 	movw	r3, #4396	; 0x112c
 80039d2:	4413      	add	r3, r2
 80039d4:	2203      	movs	r2, #3
 80039d6:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68d9      	ldr	r1, [r3, #12]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	f241 1314 	movw	r3, #4372	; 0x1114
 80039e4:	4413      	add	r3, r2
 80039e6:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80039f4:	601a      	str	r2, [r3, #0]
}
 80039f6:	bf00      	nop
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b085      	sub	sp, #20
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	e024      	b.n	8003a5a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6919      	ldr	r1, [r3, #16]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	4613      	mov	r3, r2
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	4413      	add	r3, r2
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	440b      	add	r3, r1
 8003a20:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	2200      	movs	r2, #0
 8003a32:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2200      	movs	r2, #0
 8003a38:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2200      	movs	r2, #0
 8003a44:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	3310      	adds	r3, #16
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	440b      	add	r3, r1
 8003a52:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	3301      	adds	r3, #1
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b03      	cmp	r3, #3
 8003a5e:	d9d7      	bls.n	8003a10 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	f241 1330 	movw	r3, #4400	; 0x1130
 8003a86:	4413      	add	r3, r2
 8003a88:	2203      	movs	r2, #3
 8003a8a:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6919      	ldr	r1, [r3, #16]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	f241 131c 	movw	r3, #4380	; 0x111c
 8003a98:	4413      	add	r3, r2
 8003a9a:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	f241 1328 	movw	r3, #4392	; 0x1128
 8003aac:	4413      	add	r3, r2
 8003aae:	6019      	str	r1, [r3, #0]
}
 8003ab0:	bf00      	nop
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b08d      	sub	sp, #52	; 0x34
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	3318      	adds	r3, #24
 8003acc:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 8003ada:	2300      	movs	r3, #0
 8003adc:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ae6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003aee:	2300      	movs	r3, #0
 8003af0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003afa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003afe:	d007      	beq.n	8003b10 <ETH_Prepare_Tx_Descriptors+0x54>
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b04:	3304      	adds	r3, #4
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4413      	add	r3, r2
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003b10:	2302      	movs	r3, #2
 8003b12:	e24a      	b.n	8003faa <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d044      	beq.n	8003baa <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	68da      	ldr	r2, [r3, #12]
 8003b24:	4b72      	ldr	r3, [pc, #456]	; (8003cf0 <ETH_Prepare_Tx_Descriptors+0x234>)
 8003b26:	4013      	ands	r3, r2
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003b4c:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d027      	beq.n	8003baa <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b64:	041b      	lsls	r3, r3, #16
 8003b66:	431a      	orrs	r2, r3
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003b78:	6a3b      	ldr	r3, [r7, #32]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b84:	431a      	orrs	r2, r3
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003b98:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003ba8:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0310 	and.w	r3, r3, #16
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00e      	beq.n	8003bd4 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	4b4e      	ldr	r3, [pc, #312]	; (8003cf4 <ETH_Prepare_Tx_Descriptors+0x238>)
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	6992      	ldr	r2, [r2, #24]
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d105      	bne.n	8003bec <ETH_Prepare_Tx_Descriptors+0x130>
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0310 	and.w	r3, r3, #16
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d030      	beq.n	8003c4e <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c06:	3301      	adds	r3, #1
 8003c08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d902      	bls.n	8003c16 <ETH_Prepare_Tx_Descriptors+0x15a>
 8003c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c12:	3b04      	subs	r3, #4
 8003c14:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c1e:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8003c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c22:	3301      	adds	r3, #1
 8003c24:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c32:	d10c      	bne.n	8003c4e <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c3c:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	e1ad      	b.n	8003faa <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8003c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c50:	3301      	adds	r3, #1
 8003c52:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	461a      	mov	r2, r3
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	689a      	ldr	r2, [r3, #8]
 8003c62:	4b24      	ldr	r3, [pc, #144]	; (8003cf4 <ETH_Prepare_Tx_Descriptors+0x238>)
 8003c64:	4013      	ands	r3, r2
 8003c66:	69fa      	ldr	r2, [r7, #28]
 8003c68:	6852      	ldr	r2, [r2, #4]
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d012      	beq.n	8003c9e <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	4b1a      	ldr	r3, [pc, #104]	; (8003cf8 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	6852      	ldr	r2, [r2, #4]
 8003c94:	0412      	lsls	r2, r2, #16
 8003c96:	431a      	orrs	r2, r3
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	609a      	str	r2, [r3, #8]
 8003c9c:	e008      	b.n	8003cb0 <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	4b13      	ldr	r3, [pc, #76]	; (8003cf8 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8003caa:	4013      	ands	r3, r2
 8003cac:	6a3a      	ldr	r2, [r7, #32]
 8003cae:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0310 	and.w	r3, r3, #16
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d021      	beq.n	8003d00 <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	04db      	lsls	r3, r3, #19
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	6a3b      	ldr	r3, [r7, #32]
 8003cce:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	4b09      	ldr	r3, [pc, #36]	; (8003cfc <ETH_Prepare_Tx_Descriptors+0x240>)
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	69d2      	ldr	r2, [r2, #28]
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	60da      	str	r2, [r3, #12]
 8003cee:	e02e      	b.n	8003d4e <ETH_Prepare_Tx_Descriptors+0x292>
 8003cf0:	ffff0000 	.word	0xffff0000
 8003cf4:	ffffc000 	.word	0xffffc000
 8003cf8:	c000ffff 	.word	0xc000ffff
 8003cfc:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	4b93      	ldr	r3, [pc, #588]	; (8003f54 <ETH_Prepare_Tx_Descriptors+0x498>)
 8003d06:	4013      	ands	r3, r2
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	6852      	ldr	r2, [r2, #4]
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d008      	beq.n	8003d30 <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0320 	and.w	r3, r3, #32
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d008      	beq.n	8003d4e <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0304 	and.w	r3, r3, #4
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d008      	beq.n	8003d6c <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d66:	431a      	orrs	r2, r3
 8003d68:	6a3b      	ldr	r3, [r7, #32]
 8003d6a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 80cb 	beq.w	8003f34 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	431a      	orrs	r2, r3
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003db0:	e0c0      	b.n	8003f34 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003db2:	6a3b      	ldr	r3, [r7, #32]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc6:	2b03      	cmp	r3, #3
 8003dc8:	d902      	bls.n	8003dd0 <ETH_Prepare_Tx_Descriptors+0x314>
 8003dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dcc:	3b04      	subs	r3, #4
 8003dce:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dd8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003de2:	6a3b      	ldr	r3, [r7, #32]
 8003de4:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003df2:	d007      	beq.n	8003e04 <ETH_Prepare_Tx_Descriptors+0x348>
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df8:	3304      	adds	r3, #4
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d026      	beq.n	8003e52 <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e10:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8003e12:	2300      	movs	r3, #0
 8003e14:	627b      	str	r3, [r7, #36]	; 0x24
 8003e16:	e016      	b.n	8003e46 <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e26:	3301      	adds	r3, #1
 8003e28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2c:	2b03      	cmp	r3, #3
 8003e2e:	d902      	bls.n	8003e36 <ETH_Prepare_Tx_Descriptors+0x37a>
 8003e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e32:	3b04      	subs	r3, #4
 8003e34:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e3e:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	3301      	adds	r3, #1
 8003e44:	627b      	str	r3, [r7, #36]	; 0x24
 8003e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d3e4      	bcc.n	8003e18 <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 8003e4e:	2302      	movs	r3, #2
 8003e50:	e0ab      	b.n	8003faa <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 8003e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e54:	3301      	adds	r3, #1
 8003e56:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	461a      	mov	r2, r3
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	689a      	ldr	r2, [r3, #8]
 8003e6c:	4b3a      	ldr	r3, [pc, #232]	; (8003f58 <ETH_Prepare_Tx_Descriptors+0x49c>)
 8003e6e:	4013      	ands	r3, r2
 8003e70:	69fa      	ldr	r2, [r7, #28]
 8003e72:	6852      	ldr	r2, [r2, #4]
 8003e74:	431a      	orrs	r2, r3
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d012      	beq.n	8003ea8 <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	689a      	ldr	r2, [r3, #8]
 8003e96:	4b31      	ldr	r3, [pc, #196]	; (8003f5c <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8003e98:	4013      	ands	r3, r2
 8003e9a:	69fa      	ldr	r2, [r7, #28]
 8003e9c:	6852      	ldr	r2, [r2, #4]
 8003e9e:	0412      	lsls	r2, r2, #16
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	609a      	str	r2, [r3, #8]
 8003ea6:	e008      	b.n	8003eba <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003eae:	6a3b      	ldr	r3, [r7, #32]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	4b2a      	ldr	r3, [pc, #168]	; (8003f5c <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	6a3a      	ldr	r2, [r7, #32]
 8003eb8:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0310 	and.w	r3, r3, #16
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00f      	beq.n	8003ee6 <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	4b25      	ldr	r3, [pc, #148]	; (8003f60 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8003ecc:	4013      	ands	r3, r2
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	69d2      	ldr	r2, [r2, #28]
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003ed8:	6a3b      	ldr	r3, [r7, #32]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	60da      	str	r2, [r3, #12]
 8003ee4:	e017      	b.n	8003f16 <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003ee6:	6a3b      	ldr	r3, [r7, #32]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	4b1a      	ldr	r3, [pc, #104]	; (8003f54 <ETH_Prepare_Tx_Descriptors+0x498>)
 8003eec:	4013      	ands	r3, r2
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	6852      	ldr	r2, [r2, #4]
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d008      	beq.n	8003f16 <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003f04:	6a3b      	ldr	r3, [r7, #32]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	431a      	orrs	r2, r3
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f47f af3a 	bne.w	8003db2 <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00f      	beq.n	8003f64 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003f44:	6a3b      	ldr	r3, [r7, #32]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	609a      	str	r2, [r3, #8]
 8003f50:	e00e      	b.n	8003f70 <ETH_Prepare_Tx_Descriptors+0x4b4>
 8003f52:	bf00      	nop
 8003f54:	ffff8000 	.word	0xffff8000
 8003f58:	ffffc000 	.word	0xffffc000
 8003f5c:	c000ffff 	.word	0xc000ffff
 8003f60:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003f78:	6a3b      	ldr	r3, [r7, #32]
 8003f7a:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f80:	6979      	ldr	r1, [r7, #20]
 8003f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f84:	3304      	adds	r3, #4
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	440b      	add	r3, r1
 8003f8a:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f90:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f92:	b672      	cpsid	i
}
 8003f94:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	1c5a      	adds	r2, r3, #1
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003fa4:	b662      	cpsie	i
}
 8003fa6:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3734      	adds	r7, #52	; 0x34
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop

08003fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b089      	sub	sp, #36	; 0x24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003fc6:	4b89      	ldr	r3, [pc, #548]	; (80041ec <HAL_GPIO_Init+0x234>)
 8003fc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003fca:	e194      	b.n	80042f6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd8:	4013      	ands	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 8186 	beq.w	80042f0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f003 0303 	and.w	r3, r3, #3
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d005      	beq.n	8003ffc <HAL_GPIO_Init+0x44>
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f003 0303 	and.w	r3, r3, #3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d130      	bne.n	800405e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	2203      	movs	r2, #3
 8004008:	fa02 f303 	lsl.w	r3, r2, r3
 800400c:	43db      	mvns	r3, r3
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	4013      	ands	r3, r2
 8004012:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	4313      	orrs	r3, r2
 8004024:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004032:	2201      	movs	r2, #1
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	43db      	mvns	r3, r3
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	4013      	ands	r3, r2
 8004040:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	091b      	lsrs	r3, r3, #4
 8004048:	f003 0201 	and.w	r2, r3, #1
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	4313      	orrs	r3, r2
 8004056:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	2b03      	cmp	r3, #3
 8004068:	d017      	beq.n	800409a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	2203      	movs	r2, #3
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	43db      	mvns	r3, r3
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	4013      	ands	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	689a      	ldr	r2, [r3, #8]
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	4313      	orrs	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d123      	bne.n	80040ee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	08da      	lsrs	r2, r3, #3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	3208      	adds	r2, #8
 80040ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	220f      	movs	r2, #15
 80040be:	fa02 f303 	lsl.w	r3, r2, r3
 80040c2:	43db      	mvns	r3, r3
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	4013      	ands	r3, r2
 80040c8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	691a      	ldr	r2, [r3, #16]
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	fa02 f303 	lsl.w	r3, r2, r3
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	4313      	orrs	r3, r2
 80040de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	08da      	lsrs	r2, r3, #3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3208      	adds	r2, #8
 80040e8:	69b9      	ldr	r1, [r7, #24]
 80040ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	2203      	movs	r2, #3
 80040fa:	fa02 f303 	lsl.w	r3, r2, r3
 80040fe:	43db      	mvns	r3, r3
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	4013      	ands	r3, r2
 8004104:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f003 0203 	and.w	r2, r3, #3
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	fa02 f303 	lsl.w	r3, r2, r3
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	4313      	orrs	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800412a:	2b00      	cmp	r3, #0
 800412c:	f000 80e0 	beq.w	80042f0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004130:	4b2f      	ldr	r3, [pc, #188]	; (80041f0 <HAL_GPIO_Init+0x238>)
 8004132:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004136:	4a2e      	ldr	r2, [pc, #184]	; (80041f0 <HAL_GPIO_Init+0x238>)
 8004138:	f043 0302 	orr.w	r3, r3, #2
 800413c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004140:	4b2b      	ldr	r3, [pc, #172]	; (80041f0 <HAL_GPIO_Init+0x238>)
 8004142:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800414e:	4a29      	ldr	r2, [pc, #164]	; (80041f4 <HAL_GPIO_Init+0x23c>)
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	089b      	lsrs	r3, r3, #2
 8004154:	3302      	adds	r3, #2
 8004156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800415a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	220f      	movs	r2, #15
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	43db      	mvns	r3, r3
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	4013      	ands	r3, r2
 8004170:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a20      	ldr	r2, [pc, #128]	; (80041f8 <HAL_GPIO_Init+0x240>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d052      	beq.n	8004220 <HAL_GPIO_Init+0x268>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a1f      	ldr	r2, [pc, #124]	; (80041fc <HAL_GPIO_Init+0x244>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d031      	beq.n	80041e6 <HAL_GPIO_Init+0x22e>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a1e      	ldr	r2, [pc, #120]	; (8004200 <HAL_GPIO_Init+0x248>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d02b      	beq.n	80041e2 <HAL_GPIO_Init+0x22a>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a1d      	ldr	r2, [pc, #116]	; (8004204 <HAL_GPIO_Init+0x24c>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d025      	beq.n	80041de <HAL_GPIO_Init+0x226>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a1c      	ldr	r2, [pc, #112]	; (8004208 <HAL_GPIO_Init+0x250>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d01f      	beq.n	80041da <HAL_GPIO_Init+0x222>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a1b      	ldr	r2, [pc, #108]	; (800420c <HAL_GPIO_Init+0x254>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d019      	beq.n	80041d6 <HAL_GPIO_Init+0x21e>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a1a      	ldr	r2, [pc, #104]	; (8004210 <HAL_GPIO_Init+0x258>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d013      	beq.n	80041d2 <HAL_GPIO_Init+0x21a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a19      	ldr	r2, [pc, #100]	; (8004214 <HAL_GPIO_Init+0x25c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d00d      	beq.n	80041ce <HAL_GPIO_Init+0x216>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a18      	ldr	r2, [pc, #96]	; (8004218 <HAL_GPIO_Init+0x260>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d007      	beq.n	80041ca <HAL_GPIO_Init+0x212>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a17      	ldr	r2, [pc, #92]	; (800421c <HAL_GPIO_Init+0x264>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d101      	bne.n	80041c6 <HAL_GPIO_Init+0x20e>
 80041c2:	2309      	movs	r3, #9
 80041c4:	e02d      	b.n	8004222 <HAL_GPIO_Init+0x26a>
 80041c6:	230a      	movs	r3, #10
 80041c8:	e02b      	b.n	8004222 <HAL_GPIO_Init+0x26a>
 80041ca:	2308      	movs	r3, #8
 80041cc:	e029      	b.n	8004222 <HAL_GPIO_Init+0x26a>
 80041ce:	2307      	movs	r3, #7
 80041d0:	e027      	b.n	8004222 <HAL_GPIO_Init+0x26a>
 80041d2:	2306      	movs	r3, #6
 80041d4:	e025      	b.n	8004222 <HAL_GPIO_Init+0x26a>
 80041d6:	2305      	movs	r3, #5
 80041d8:	e023      	b.n	8004222 <HAL_GPIO_Init+0x26a>
 80041da:	2304      	movs	r3, #4
 80041dc:	e021      	b.n	8004222 <HAL_GPIO_Init+0x26a>
 80041de:	2303      	movs	r3, #3
 80041e0:	e01f      	b.n	8004222 <HAL_GPIO_Init+0x26a>
 80041e2:	2302      	movs	r3, #2
 80041e4:	e01d      	b.n	8004222 <HAL_GPIO_Init+0x26a>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e01b      	b.n	8004222 <HAL_GPIO_Init+0x26a>
 80041ea:	bf00      	nop
 80041ec:	58000080 	.word	0x58000080
 80041f0:	58024400 	.word	0x58024400
 80041f4:	58000400 	.word	0x58000400
 80041f8:	58020000 	.word	0x58020000
 80041fc:	58020400 	.word	0x58020400
 8004200:	58020800 	.word	0x58020800
 8004204:	58020c00 	.word	0x58020c00
 8004208:	58021000 	.word	0x58021000
 800420c:	58021400 	.word	0x58021400
 8004210:	58021800 	.word	0x58021800
 8004214:	58021c00 	.word	0x58021c00
 8004218:	58022000 	.word	0x58022000
 800421c:	58022400 	.word	0x58022400
 8004220:	2300      	movs	r3, #0
 8004222:	69fa      	ldr	r2, [r7, #28]
 8004224:	f002 0203 	and.w	r2, r2, #3
 8004228:	0092      	lsls	r2, r2, #2
 800422a:	4093      	lsls	r3, r2
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	4313      	orrs	r3, r2
 8004230:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004232:	4938      	ldr	r1, [pc, #224]	; (8004314 <HAL_GPIO_Init+0x35c>)
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	089b      	lsrs	r3, r3, #2
 8004238:	3302      	adds	r3, #2
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	43db      	mvns	r3, r3
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	4013      	ands	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	4313      	orrs	r3, r2
 8004264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004266:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800426e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	43db      	mvns	r3, r3
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	4013      	ands	r3, r2
 800427e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	4313      	orrs	r3, r2
 8004292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004294:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	43db      	mvns	r3, r3
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	4013      	ands	r3, r2
 80042aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	4313      	orrs	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	43db      	mvns	r3, r3
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	4013      	ands	r3, r2
 80042d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	3301      	adds	r3, #1
 80042f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	f47f ae63 	bne.w	8003fcc <HAL_GPIO_Init+0x14>
  }
}
 8004306:	bf00      	nop
 8004308:	bf00      	nop
 800430a:	3724      	adds	r7, #36	; 0x24
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	58000400 	.word	0x58000400

08004318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	807b      	strh	r3, [r7, #2]
 8004324:	4613      	mov	r3, r2
 8004326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004328:	787b      	ldrb	r3, [r7, #1]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800432e:	887a      	ldrh	r2, [r7, #2]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004334:	e003      	b.n	800433e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004336:	887b      	ldrh	r3, [r7, #2]
 8004338:	041a      	lsls	r2, r3, #16
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	619a      	str	r2, [r3, #24]
}
 800433e:	bf00      	nop
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800434a:	b480      	push	{r7}
 800434c:	b085      	sub	sp, #20
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
 8004352:	460b      	mov	r3, r1
 8004354:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800435c:	887a      	ldrh	r2, [r7, #2]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	4013      	ands	r3, r2
 8004362:	041a      	lsls	r2, r3, #16
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	43d9      	mvns	r1, r3
 8004368:	887b      	ldrh	r3, [r7, #2]
 800436a:	400b      	ands	r3, r1
 800436c:	431a      	orrs	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	619a      	str	r2, [r3, #24]
}
 8004372:	bf00      	nop
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
	...

08004380 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004388:	4a08      	ldr	r2, [pc, #32]	; (80043ac <HAL_HSEM_FastTake+0x2c>)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	3320      	adds	r3, #32
 800438e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004392:	4a07      	ldr	r2, [pc, #28]	; (80043b0 <HAL_HSEM_FastTake+0x30>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d101      	bne.n	800439c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004398:	2300      	movs	r3, #0
 800439a:	e000      	b.n	800439e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
}
 800439e:	4618      	mov	r0, r3
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	58026400 	.word	0x58026400
 80043b0:	80000300 	.word	0x80000300

080043b4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80043be:	4906      	ldr	r1, [pc, #24]	; (80043d8 <HAL_HSEM_Release+0x24>)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	58026400 	.word	0x58026400

080043dc <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e017      	b.n	800441e <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d004      	beq.n	8004404 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2280      	movs	r2, #128	; 0x80
 80043fe:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e00c      	b.n	800441e <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2204      	movs	r2, #4
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68da      	ldr	r2, [r3, #12]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0201 	bic.w	r2, r2, #1
 800441a:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
	...

0800442c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004434:	4b29      	ldr	r3, [pc, #164]	; (80044dc <HAL_PWREx_ConfigSupply+0xb0>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	2b06      	cmp	r3, #6
 800443e:	d00a      	beq.n	8004456 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004440:	4b26      	ldr	r3, [pc, #152]	; (80044dc <HAL_PWREx_ConfigSupply+0xb0>)
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	429a      	cmp	r2, r3
 800444c:	d001      	beq.n	8004452 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e040      	b.n	80044d4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	e03e      	b.n	80044d4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004456:	4b21      	ldr	r3, [pc, #132]	; (80044dc <HAL_PWREx_ConfigSupply+0xb0>)
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800445e:	491f      	ldr	r1, [pc, #124]	; (80044dc <HAL_PWREx_ConfigSupply+0xb0>)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4313      	orrs	r3, r2
 8004464:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004466:	f7fc ffe9 	bl	800143c <HAL_GetTick>
 800446a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800446c:	e009      	b.n	8004482 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800446e:	f7fc ffe5 	bl	800143c <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800447c:	d901      	bls.n	8004482 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e028      	b.n	80044d4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004482:	4b16      	ldr	r3, [pc, #88]	; (80044dc <HAL_PWREx_ConfigSupply+0xb0>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800448a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800448e:	d1ee      	bne.n	800446e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b1e      	cmp	r3, #30
 8004494:	d008      	beq.n	80044a8 <HAL_PWREx_ConfigSupply+0x7c>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b2e      	cmp	r3, #46	; 0x2e
 800449a:	d005      	beq.n	80044a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b1d      	cmp	r3, #29
 80044a0:	d002      	beq.n	80044a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b2d      	cmp	r3, #45	; 0x2d
 80044a6:	d114      	bne.n	80044d2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80044a8:	f7fc ffc8 	bl	800143c <HAL_GetTick>
 80044ac:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80044ae:	e009      	b.n	80044c4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80044b0:	f7fc ffc4 	bl	800143c <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044be:	d901      	bls.n	80044c4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e007      	b.n	80044d4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80044c4:	4b05      	ldr	r3, [pc, #20]	; (80044dc <HAL_PWREx_ConfigSupply+0xb0>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d0:	d1ee      	bne.n	80044b0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	58024800 	.word	0x58024800

080044e0 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f003 0304 	and.w	r3, r3, #4
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d064      	beq.n	80045cc <HAL_QSPI_IRQHandler+0xec>
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d05f      	beq.n	80045cc <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	3320      	adds	r3, #32
 8004512:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b12      	cmp	r3, #18
 800451e:	d125      	bne.n	800456c <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8004520:	e01c      	b.n	800455c <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00f      	beq.n	800454a <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452e:	781a      	ldrb	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	1c5a      	adds	r2, r3, #1
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004542:	1e5a      	subs	r2, r3, #1
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	62da      	str	r2, [r3, #44]	; 0x2c
 8004548:	e008      	b.n	800455c <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004558:	601a      	str	r2, [r3, #0]
          break;
 800455a:	e033      	b.n	80045c4 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 0304 	and.w	r3, r3, #4
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1db      	bne.n	8004522 <HAL_QSPI_IRQHandler+0x42>
 800456a:	e02b      	b.n	80045c4 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b22      	cmp	r3, #34	; 0x22
 8004576:	d125      	bne.n	80045c4 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8004578:	e01d      	b.n	80045b6 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457e:	2b00      	cmp	r3, #0
 8004580:	d010      	beq.n	80045a4 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	7812      	ldrb	r2, [r2, #0]
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004592:	1c5a      	adds	r2, r3, #1
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459c:	1e5a      	subs	r2, r3, #1
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	639a      	str	r2, [r3, #56]	; 0x38
 80045a2:	e008      	b.n	80045b6 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80045b2:	601a      	str	r2, [r3, #0]
          break;
 80045b4:	e006      	b.n	80045c4 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1da      	bne.n	800457a <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f959 	bl	800487c <HAL_QSPI_FifoThresholdCallback>
 80045ca:	e13c      	b.n	8004846 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 80b0 	beq.w	8004738 <HAL_QSPI_IRQHandler+0x258>
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 80aa 	beq.w	8004738 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2202      	movs	r2, #2
 80045ea:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80045fa:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b12      	cmp	r3, #18
 8004606:	d120      	bne.n	800464a <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0304 	and.w	r3, r3, #4
 8004612:	2b00      	cmp	r3, #0
 8004614:	d011      	beq.n	800463a <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0204 	bic.w	r2, r2, #4
 8004624:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 0201 	bic.w	r2, r2, #1
 8004638:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f01d fc3e 	bl	8021ec4 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004648:	e0fa      	b.n	8004840 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b22      	cmp	r3, #34	; 0x22
 8004654:	d143      	bne.n	80046de <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b00      	cmp	r3, #0
 8004662:	d012      	beq.n	800468a <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0204 	bic.w	r2, r2, #4
 8004672:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0201 	bic.w	r2, r2, #1
 8004686:	60da      	str	r2, [r3, #12]
 8004688:	e021      	b.n	80046ce <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	3320      	adds	r3, #32
 8004690:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8004692:	e013      	b.n	80046bc <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004698:	2b00      	cmp	r3, #0
 800469a:	d017      	beq.n	80046cc <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	7812      	ldrb	r2, [r2, #0]
 80046a4:	b2d2      	uxtb	r2, r2
 80046a6:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b6:	1e5a      	subs	r2, r3, #1
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1e4      	bne.n	8004694 <HAL_QSPI_IRQHandler+0x1b4>
 80046ca:	e000      	b.n	80046ce <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 80046cc:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f01d fbe4 	bl	8021ea4 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80046dc:	e0b0      	b.n	8004840 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d107      	bne.n	80046fa <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f01d fc06 	bl	8021f04 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80046f8:	e0a2      	b.n	8004840 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b08      	cmp	r3, #8
 8004704:	f040 809c 	bne.w	8004840 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	695a      	ldr	r2, [r3, #20]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004716:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004724:	2b00      	cmp	r3, #0
 8004726:	d103      	bne.n	8004730 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f89d 	bl	8004868 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800472e:	e087      	b.n	8004840 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f88f 	bl	8004854 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004736:	e083      	b.n	8004840 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f003 0308 	and.w	r3, r3, #8
 800473e:	2b00      	cmp	r3, #0
 8004740:	d01f      	beq.n	8004782 <HAL_QSPI_IRQHandler+0x2a2>
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d01a      	beq.n	8004782 <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2208      	movs	r2, #8
 8004752:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00b      	beq.n	800477a <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8004770:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f01d fbb2 	bl	8021ee4 <HAL_QSPI_StatusMatchCallback>
 8004780:	e061      	b.n	8004846 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	d047      	beq.n	800481c <HAL_QSPI_IRQHandler+0x33c>
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d042      	beq.n	800481c <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2201      	movs	r2, #1
 800479c:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80047ac:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b2:	f043 0202 	orr.w	r2, r3, #2
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d021      	beq.n	800480c <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0204 	bic.w	r2, r2, #4
 80047d6:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047dc:	4a1c      	ldr	r2, [pc, #112]	; (8004850 <HAL_QSPI_IRQHandler+0x370>)
 80047de:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7ff fdf9 	bl	80043dc <HAL_MDMA_Abort_IT>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d029      	beq.n	8004844 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f4:	f043 0204 	orr.w	r2, r3, #4
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f825 	bl	8004854 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800480a:	e01b      	b.n	8004844 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f81d 	bl	8004854 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800481a:	e013      	b.n	8004844 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f003 0310 	and.w	r3, r3, #16
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00f      	beq.n	8004846 <HAL_QSPI_IRQHandler+0x366>
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00a      	beq.n	8004846 <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2210      	movs	r2, #16
 8004836:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 f829 	bl	8004890 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800483e:	e002      	b.n	8004846 <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004840:	bf00      	nop
 8004842:	e000      	b.n	8004846 <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8004844:	bf00      	nop
}
 8004846:	bf00      	nop
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	080048a5 	.word	0x080048a5

08004854 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma : MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b0:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b08      	cmp	r3, #8
 80048c8:	d114      	bne.n	80048f4 <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2202      	movs	r2, #2
 80048d0:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80048e0:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f042 0202 	orr.w	r2, r2, #2
 80048f0:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 80048f2:	e006      	b.n	8004902 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f7ff ffa9 	bl	8004854 <HAL_QSPI_ErrorCallback>
}
 8004902:	bf00      	nop
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
	...

0800490c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b08c      	sub	sp, #48	; 0x30
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d102      	bne.n	8004920 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	f000 bc1c 	b.w	8005158 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 8087 	beq.w	8004a3c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800492e:	4b9e      	ldr	r3, [pc, #632]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004936:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004938:	4b9b      	ldr	r3, [pc, #620]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 800493a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800493e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004940:	2b10      	cmp	r3, #16
 8004942:	d007      	beq.n	8004954 <HAL_RCC_OscConfig+0x48>
 8004944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004946:	2b18      	cmp	r3, #24
 8004948:	d110      	bne.n	800496c <HAL_RCC_OscConfig+0x60>
 800494a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494c:	f003 0303 	and.w	r3, r3, #3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d10b      	bne.n	800496c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004954:	4b94      	ldr	r3, [pc, #592]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d06c      	beq.n	8004a3a <HAL_RCC_OscConfig+0x12e>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d168      	bne.n	8004a3a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e3f5      	b.n	8005158 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004974:	d106      	bne.n	8004984 <HAL_RCC_OscConfig+0x78>
 8004976:	4b8c      	ldr	r3, [pc, #560]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a8b      	ldr	r2, [pc, #556]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 800497c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004980:	6013      	str	r3, [r2, #0]
 8004982:	e02e      	b.n	80049e2 <HAL_RCC_OscConfig+0xd6>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10c      	bne.n	80049a6 <HAL_RCC_OscConfig+0x9a>
 800498c:	4b86      	ldr	r3, [pc, #536]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a85      	ldr	r2, [pc, #532]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 8004992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004996:	6013      	str	r3, [r2, #0]
 8004998:	4b83      	ldr	r3, [pc, #524]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a82      	ldr	r2, [pc, #520]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 800499e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049a2:	6013      	str	r3, [r2, #0]
 80049a4:	e01d      	b.n	80049e2 <HAL_RCC_OscConfig+0xd6>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049ae:	d10c      	bne.n	80049ca <HAL_RCC_OscConfig+0xbe>
 80049b0:	4b7d      	ldr	r3, [pc, #500]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a7c      	ldr	r2, [pc, #496]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 80049b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	4b7a      	ldr	r3, [pc, #488]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a79      	ldr	r2, [pc, #484]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 80049c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c6:	6013      	str	r3, [r2, #0]
 80049c8:	e00b      	b.n	80049e2 <HAL_RCC_OscConfig+0xd6>
 80049ca:	4b77      	ldr	r3, [pc, #476]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a76      	ldr	r2, [pc, #472]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 80049d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049d4:	6013      	str	r3, [r2, #0]
 80049d6:	4b74      	ldr	r3, [pc, #464]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a73      	ldr	r2, [pc, #460]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 80049dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049e0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d013      	beq.n	8004a12 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ea:	f7fc fd27 	bl	800143c <HAL_GetTick>
 80049ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049f0:	e008      	b.n	8004a04 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049f2:	f7fc fd23 	bl	800143c <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b64      	cmp	r3, #100	; 0x64
 80049fe:	d901      	bls.n	8004a04 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e3a9      	b.n	8005158 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a04:	4b68      	ldr	r3, [pc, #416]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d0f0      	beq.n	80049f2 <HAL_RCC_OscConfig+0xe6>
 8004a10:	e014      	b.n	8004a3c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a12:	f7fc fd13 	bl	800143c <HAL_GetTick>
 8004a16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a18:	e008      	b.n	8004a2c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a1a:	f7fc fd0f 	bl	800143c <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b64      	cmp	r3, #100	; 0x64
 8004a26:	d901      	bls.n	8004a2c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e395      	b.n	8005158 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a2c:	4b5e      	ldr	r3, [pc, #376]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1f0      	bne.n	8004a1a <HAL_RCC_OscConfig+0x10e>
 8004a38:	e000      	b.n	8004a3c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a3a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 80ca 	beq.w	8004bde <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a4a:	4b57      	ldr	r3, [pc, #348]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a52:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a54:	4b54      	ldr	r3, [pc, #336]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 8004a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a58:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004a5a:	6a3b      	ldr	r3, [r7, #32]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d007      	beq.n	8004a70 <HAL_RCC_OscConfig+0x164>
 8004a60:	6a3b      	ldr	r3, [r7, #32]
 8004a62:	2b18      	cmp	r3, #24
 8004a64:	d156      	bne.n	8004b14 <HAL_RCC_OscConfig+0x208>
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	f003 0303 	and.w	r3, r3, #3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d151      	bne.n	8004b14 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a70:	4b4d      	ldr	r3, [pc, #308]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d005      	beq.n	8004a88 <HAL_RCC_OscConfig+0x17c>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e367      	b.n	8005158 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a88:	4b47      	ldr	r3, [pc, #284]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f023 0219 	bic.w	r2, r3, #25
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	4944      	ldr	r1, [pc, #272]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a9a:	f7fc fccf 	bl	800143c <HAL_GetTick>
 8004a9e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004aa2:	f7fc fccb 	bl	800143c <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e351      	b.n	8005158 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ab4:	4b3c      	ldr	r3, [pc, #240]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0f0      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac0:	f7fc fcc8 	bl	8001454 <HAL_GetREVID>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	f241 0203 	movw	r2, #4099	; 0x1003
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d817      	bhi.n	8004afe <HAL_RCC_OscConfig+0x1f2>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	2b40      	cmp	r3, #64	; 0x40
 8004ad4:	d108      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x1dc>
 8004ad6:	4b34      	ldr	r3, [pc, #208]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004ade:	4a32      	ldr	r2, [pc, #200]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 8004ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ae4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ae6:	e07a      	b.n	8004bde <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae8:	4b2f      	ldr	r3, [pc, #188]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	031b      	lsls	r3, r3, #12
 8004af6:	492c      	ldr	r1, [pc, #176]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004afc:	e06f      	b.n	8004bde <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004afe:	4b2a      	ldr	r3, [pc, #168]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	061b      	lsls	r3, r3, #24
 8004b0c:	4926      	ldr	r1, [pc, #152]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b12:	e064      	b.n	8004bde <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d047      	beq.n	8004bac <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b1c:	4b22      	ldr	r3, [pc, #136]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f023 0219 	bic.w	r2, r3, #25
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	491f      	ldr	r1, [pc, #124]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2e:	f7fc fc85 	bl	800143c <HAL_GetTick>
 8004b32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b34:	e008      	b.n	8004b48 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b36:	f7fc fc81 	bl	800143c <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e307      	b.n	8005158 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b48:	4b17      	ldr	r3, [pc, #92]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d0f0      	beq.n	8004b36 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b54:	f7fc fc7e 	bl	8001454 <HAL_GetREVID>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d817      	bhi.n	8004b92 <HAL_RCC_OscConfig+0x286>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	2b40      	cmp	r3, #64	; 0x40
 8004b68:	d108      	bne.n	8004b7c <HAL_RCC_OscConfig+0x270>
 8004b6a:	4b0f      	ldr	r3, [pc, #60]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004b72:	4a0d      	ldr	r2, [pc, #52]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 8004b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b78:	6053      	str	r3, [r2, #4]
 8004b7a:	e030      	b.n	8004bde <HAL_RCC_OscConfig+0x2d2>
 8004b7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	031b      	lsls	r3, r3, #12
 8004b8a:	4907      	ldr	r1, [pc, #28]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	604b      	str	r3, [r1, #4]
 8004b90:	e025      	b.n	8004bde <HAL_RCC_OscConfig+0x2d2>
 8004b92:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	061b      	lsls	r3, r3, #24
 8004ba0:	4901      	ldr	r1, [pc, #4]	; (8004ba8 <HAL_RCC_OscConfig+0x29c>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	604b      	str	r3, [r1, #4]
 8004ba6:	e01a      	b.n	8004bde <HAL_RCC_OscConfig+0x2d2>
 8004ba8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bac:	4b9e      	ldr	r3, [pc, #632]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a9d      	ldr	r2, [pc, #628]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004bb2:	f023 0301 	bic.w	r3, r3, #1
 8004bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb8:	f7fc fc40 	bl	800143c <HAL_GetTick>
 8004bbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bc0:	f7fc fc3c 	bl	800143c <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e2c2      	b.n	8005158 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004bd2:	4b95      	ldr	r3, [pc, #596]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0304 	and.w	r3, r3, #4
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1f0      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0310 	and.w	r3, r3, #16
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f000 80a9 	beq.w	8004d3e <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bec:	4b8e      	ldr	r3, [pc, #568]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bf4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004bf6:	4b8c      	ldr	r3, [pc, #560]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfa:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	2b08      	cmp	r3, #8
 8004c00:	d007      	beq.n	8004c12 <HAL_RCC_OscConfig+0x306>
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	2b18      	cmp	r3, #24
 8004c06:	d13a      	bne.n	8004c7e <HAL_RCC_OscConfig+0x372>
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d135      	bne.n	8004c7e <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c12:	4b85      	ldr	r3, [pc, #532]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d005      	beq.n	8004c2a <HAL_RCC_OscConfig+0x31e>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	2b80      	cmp	r3, #128	; 0x80
 8004c24:	d001      	beq.n	8004c2a <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e296      	b.n	8005158 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c2a:	f7fc fc13 	bl	8001454 <HAL_GetREVID>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d817      	bhi.n	8004c68 <HAL_RCC_OscConfig+0x35c>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	2b20      	cmp	r3, #32
 8004c3e:	d108      	bne.n	8004c52 <HAL_RCC_OscConfig+0x346>
 8004c40:	4b79      	ldr	r3, [pc, #484]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004c48:	4a77      	ldr	r2, [pc, #476]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004c4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c4e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c50:	e075      	b.n	8004d3e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c52:	4b75      	ldr	r3, [pc, #468]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	069b      	lsls	r3, r3, #26
 8004c60:	4971      	ldr	r1, [pc, #452]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c66:	e06a      	b.n	8004d3e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c68:	4b6f      	ldr	r3, [pc, #444]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	061b      	lsls	r3, r3, #24
 8004c76:	496c      	ldr	r1, [pc, #432]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c7c:	e05f      	b.n	8004d3e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d042      	beq.n	8004d0c <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004c86:	4b68      	ldr	r3, [pc, #416]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a67      	ldr	r2, [pc, #412]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c92:	f7fc fbd3 	bl	800143c <HAL_GetTick>
 8004c96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c98:	e008      	b.n	8004cac <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004c9a:	f7fc fbcf 	bl	800143c <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e255      	b.n	8005158 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004cac:	4b5e      	ldr	r3, [pc, #376]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0f0      	beq.n	8004c9a <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cb8:	f7fc fbcc 	bl	8001454 <HAL_GetREVID>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	f241 0203 	movw	r2, #4099	; 0x1003
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d817      	bhi.n	8004cf6 <HAL_RCC_OscConfig+0x3ea>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	2b20      	cmp	r3, #32
 8004ccc:	d108      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x3d4>
 8004cce:	4b56      	ldr	r3, [pc, #344]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004cd6:	4a54      	ldr	r2, [pc, #336]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004cd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cdc:	6053      	str	r3, [r2, #4]
 8004cde:	e02e      	b.n	8004d3e <HAL_RCC_OscConfig+0x432>
 8004ce0:	4b51      	ldr	r3, [pc, #324]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	069b      	lsls	r3, r3, #26
 8004cee:	494e      	ldr	r1, [pc, #312]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	604b      	str	r3, [r1, #4]
 8004cf4:	e023      	b.n	8004d3e <HAL_RCC_OscConfig+0x432>
 8004cf6:	4b4c      	ldr	r3, [pc, #304]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	061b      	lsls	r3, r3, #24
 8004d04:	4948      	ldr	r1, [pc, #288]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	60cb      	str	r3, [r1, #12]
 8004d0a:	e018      	b.n	8004d3e <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004d0c:	4b46      	ldr	r3, [pc, #280]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a45      	ldr	r2, [pc, #276]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004d12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d18:	f7fc fb90 	bl	800143c <HAL_GetTick>
 8004d1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004d20:	f7fc fb8c 	bl	800143c <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e212      	b.n	8005158 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d32:	4b3d      	ldr	r3, [pc, #244]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1f0      	bne.n	8004d20 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0308 	and.w	r3, r3, #8
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d036      	beq.n	8004db8 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d019      	beq.n	8004d86 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d52:	4b35      	ldr	r3, [pc, #212]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d56:	4a34      	ldr	r2, [pc, #208]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004d58:	f043 0301 	orr.w	r3, r3, #1
 8004d5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d5e:	f7fc fb6d 	bl	800143c <HAL_GetTick>
 8004d62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d64:	e008      	b.n	8004d78 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d66:	f7fc fb69 	bl	800143c <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e1ef      	b.n	8005158 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d78:	4b2b      	ldr	r3, [pc, #172]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0f0      	beq.n	8004d66 <HAL_RCC_OscConfig+0x45a>
 8004d84:	e018      	b.n	8004db8 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d86:	4b28      	ldr	r3, [pc, #160]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d8a:	4a27      	ldr	r2, [pc, #156]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004d8c:	f023 0301 	bic.w	r3, r3, #1
 8004d90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d92:	f7fc fb53 	bl	800143c <HAL_GetTick>
 8004d96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d98:	e008      	b.n	8004dac <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d9a:	f7fc fb4f 	bl	800143c <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e1d5      	b.n	8005158 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004dac:	4b1e      	ldr	r3, [pc, #120]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1f0      	bne.n	8004d9a <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0320 	and.w	r3, r3, #32
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d039      	beq.n	8004e38 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d019      	beq.n	8004e00 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004dcc:	4b16      	ldr	r3, [pc, #88]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a15      	ldr	r2, [pc, #84]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004dd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004dd6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004dd8:	f7fc fb30 	bl	800143c <HAL_GetTick>
 8004ddc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004de0:	f7fc fb2c 	bl	800143c <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e1b2      	b.n	8005158 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004df2:	4b0d      	ldr	r3, [pc, #52]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d0f0      	beq.n	8004de0 <HAL_RCC_OscConfig+0x4d4>
 8004dfe:	e01b      	b.n	8004e38 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e00:	4b09      	ldr	r3, [pc, #36]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a08      	ldr	r2, [pc, #32]	; (8004e28 <HAL_RCC_OscConfig+0x51c>)
 8004e06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e0a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e0c:	f7fc fb16 	bl	800143c <HAL_GetTick>
 8004e10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e12:	e00b      	b.n	8004e2c <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004e14:	f7fc fb12 	bl	800143c <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d904      	bls.n	8004e2c <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e198      	b.n	8005158 <HAL_RCC_OscConfig+0x84c>
 8004e26:	bf00      	nop
 8004e28:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e2c:	4ba3      	ldr	r3, [pc, #652]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1ed      	bne.n	8004e14 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0304 	and.w	r3, r3, #4
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 8081 	beq.w	8004f48 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e46:	4b9e      	ldr	r3, [pc, #632]	; (80050c0 <HAL_RCC_OscConfig+0x7b4>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a9d      	ldr	r2, [pc, #628]	; (80050c0 <HAL_RCC_OscConfig+0x7b4>)
 8004e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e52:	f7fc faf3 	bl	800143c <HAL_GetTick>
 8004e56:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e58:	e008      	b.n	8004e6c <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004e5a:	f7fc faef 	bl	800143c <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b64      	cmp	r3, #100	; 0x64
 8004e66:	d901      	bls.n	8004e6c <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e175      	b.n	8005158 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e6c:	4b94      	ldr	r3, [pc, #592]	; (80050c0 <HAL_RCC_OscConfig+0x7b4>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0f0      	beq.n	8004e5a <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d106      	bne.n	8004e8e <HAL_RCC_OscConfig+0x582>
 8004e80:	4b8e      	ldr	r3, [pc, #568]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8004e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e84:	4a8d      	ldr	r2, [pc, #564]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8004e86:	f043 0301 	orr.w	r3, r3, #1
 8004e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e8c:	e02d      	b.n	8004eea <HAL_RCC_OscConfig+0x5de>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10c      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x5a4>
 8004e96:	4b89      	ldr	r3, [pc, #548]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8004e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9a:	4a88      	ldr	r2, [pc, #544]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8004e9c:	f023 0301 	bic.w	r3, r3, #1
 8004ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ea2:	4b86      	ldr	r3, [pc, #536]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8004ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea6:	4a85      	ldr	r2, [pc, #532]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8004ea8:	f023 0304 	bic.w	r3, r3, #4
 8004eac:	6713      	str	r3, [r2, #112]	; 0x70
 8004eae:	e01c      	b.n	8004eea <HAL_RCC_OscConfig+0x5de>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	2b05      	cmp	r3, #5
 8004eb6:	d10c      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x5c6>
 8004eb8:	4b80      	ldr	r3, [pc, #512]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8004eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ebc:	4a7f      	ldr	r2, [pc, #508]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8004ebe:	f043 0304 	orr.w	r3, r3, #4
 8004ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ec4:	4b7d      	ldr	r3, [pc, #500]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8004ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec8:	4a7c      	ldr	r2, [pc, #496]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8004eca:	f043 0301 	orr.w	r3, r3, #1
 8004ece:	6713      	str	r3, [r2, #112]	; 0x70
 8004ed0:	e00b      	b.n	8004eea <HAL_RCC_OscConfig+0x5de>
 8004ed2:	4b7a      	ldr	r3, [pc, #488]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8004ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed6:	4a79      	ldr	r2, [pc, #484]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8004ed8:	f023 0301 	bic.w	r3, r3, #1
 8004edc:	6713      	str	r3, [r2, #112]	; 0x70
 8004ede:	4b77      	ldr	r3, [pc, #476]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8004ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee2:	4a76      	ldr	r2, [pc, #472]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8004ee4:	f023 0304 	bic.w	r3, r3, #4
 8004ee8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d015      	beq.n	8004f1e <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef2:	f7fc faa3 	bl	800143c <HAL_GetTick>
 8004ef6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ef8:	e00a      	b.n	8004f10 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004efa:	f7fc fa9f 	bl	800143c <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d901      	bls.n	8004f10 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e123      	b.n	8005158 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f10:	4b6a      	ldr	r3, [pc, #424]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8004f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0ee      	beq.n	8004efa <HAL_RCC_OscConfig+0x5ee>
 8004f1c:	e014      	b.n	8004f48 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f1e:	f7fc fa8d 	bl	800143c <HAL_GetTick>
 8004f22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f24:	e00a      	b.n	8004f3c <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f26:	f7fc fa89 	bl	800143c <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d901      	bls.n	8004f3c <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e10d      	b.n	8005158 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f3c:	4b5f      	ldr	r3, [pc, #380]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8004f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1ee      	bne.n	8004f26 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f000 8102 	beq.w	8005156 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004f52:	4b5a      	ldr	r3, [pc, #360]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f5a:	2b18      	cmp	r3, #24
 8004f5c:	f000 80bd 	beq.w	80050da <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	f040 8095 	bne.w	8005094 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f6a:	4b54      	ldr	r3, [pc, #336]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a53      	ldr	r2, [pc, #332]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8004f70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f76:	f7fc fa61 	bl	800143c <HAL_GetTick>
 8004f7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f7c:	e008      	b.n	8004f90 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f7e:	f7fc fa5d 	bl	800143c <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d901      	bls.n	8004f90 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e0e3      	b.n	8005158 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f90:	4b4a      	ldr	r3, [pc, #296]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1f0      	bne.n	8004f7e <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f9c:	4b47      	ldr	r3, [pc, #284]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8004f9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fa0:	4b48      	ldr	r3, [pc, #288]	; (80050c4 <HAL_RCC_OscConfig+0x7b8>)
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004fac:	0112      	lsls	r2, r2, #4
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	4942      	ldr	r1, [pc, #264]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	628b      	str	r3, [r1, #40]	; 0x28
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	025b      	lsls	r3, r3, #9
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	041b      	lsls	r3, r3, #16
 8004fd4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	061b      	lsls	r3, r3, #24
 8004fe2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004fe6:	4935      	ldr	r1, [pc, #212]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004fec:	4b33      	ldr	r3, [pc, #204]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8004fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff0:	4a32      	ldr	r2, [pc, #200]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8004ff2:	f023 0301 	bic.w	r3, r3, #1
 8004ff6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ff8:	4b30      	ldr	r3, [pc, #192]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8004ffa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ffc:	4b32      	ldr	r3, [pc, #200]	; (80050c8 <HAL_RCC_OscConfig+0x7bc>)
 8004ffe:	4013      	ands	r3, r2
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005004:	00d2      	lsls	r2, r2, #3
 8005006:	492d      	ldr	r1, [pc, #180]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8005008:	4313      	orrs	r3, r2
 800500a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800500c:	4b2b      	ldr	r3, [pc, #172]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 800500e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005010:	f023 020c 	bic.w	r2, r3, #12
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005018:	4928      	ldr	r1, [pc, #160]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 800501a:	4313      	orrs	r3, r2
 800501c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800501e:	4b27      	ldr	r3, [pc, #156]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8005020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005022:	f023 0202 	bic.w	r2, r3, #2
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502a:	4924      	ldr	r1, [pc, #144]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 800502c:	4313      	orrs	r3, r2
 800502e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005030:	4b22      	ldr	r3, [pc, #136]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8005032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005034:	4a21      	ldr	r2, [pc, #132]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8005036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800503a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800503c:	4b1f      	ldr	r3, [pc, #124]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 800503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005040:	4a1e      	ldr	r2, [pc, #120]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8005042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005046:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005048:	4b1c      	ldr	r3, [pc, #112]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 800504a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504c:	4a1b      	ldr	r2, [pc, #108]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 800504e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005052:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005054:	4b19      	ldr	r3, [pc, #100]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8005056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005058:	4a18      	ldr	r2, [pc, #96]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 800505a:	f043 0301 	orr.w	r3, r3, #1
 800505e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005060:	4b16      	ldr	r3, [pc, #88]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a15      	ldr	r2, [pc, #84]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8005066:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800506a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800506c:	f7fc f9e6 	bl	800143c <HAL_GetTick>
 8005070:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005072:	e008      	b.n	8005086 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005074:	f7fc f9e2 	bl	800143c <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b02      	cmp	r3, #2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e068      	b.n	8005158 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005086:	4b0d      	ldr	r3, [pc, #52]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d0f0      	beq.n	8005074 <HAL_RCC_OscConfig+0x768>
 8005092:	e060      	b.n	8005156 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005094:	4b09      	ldr	r3, [pc, #36]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a08      	ldr	r2, [pc, #32]	; (80050bc <HAL_RCC_OscConfig+0x7b0>)
 800509a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800509e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a0:	f7fc f9cc 	bl	800143c <HAL_GetTick>
 80050a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050a6:	e011      	b.n	80050cc <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050a8:	f7fc f9c8 	bl	800143c <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d90a      	bls.n	80050cc <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e04e      	b.n	8005158 <HAL_RCC_OscConfig+0x84c>
 80050ba:	bf00      	nop
 80050bc:	58024400 	.word	0x58024400
 80050c0:	58024800 	.word	0x58024800
 80050c4:	fffffc0c 	.word	0xfffffc0c
 80050c8:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050cc:	4b24      	ldr	r3, [pc, #144]	; (8005160 <HAL_RCC_OscConfig+0x854>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1e7      	bne.n	80050a8 <HAL_RCC_OscConfig+0x79c>
 80050d8:	e03d      	b.n	8005156 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80050da:	4b21      	ldr	r3, [pc, #132]	; (8005160 <HAL_RCC_OscConfig+0x854>)
 80050dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050de:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80050e0:	4b1f      	ldr	r3, [pc, #124]	; (8005160 <HAL_RCC_OscConfig+0x854>)
 80050e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e4:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d031      	beq.n	8005152 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f003 0203 	and.w	r2, r3, #3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d12a      	bne.n	8005152 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	091b      	lsrs	r3, r3, #4
 8005100:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005108:	429a      	cmp	r2, r3
 800510a:	d122      	bne.n	8005152 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005116:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005118:	429a      	cmp	r2, r3
 800511a:	d11a      	bne.n	8005152 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	0a5b      	lsrs	r3, r3, #9
 8005120:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005128:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800512a:	429a      	cmp	r2, r3
 800512c:	d111      	bne.n	8005152 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	0c1b      	lsrs	r3, r3, #16
 8005132:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800513c:	429a      	cmp	r2, r3
 800513e:	d108      	bne.n	8005152 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	0e1b      	lsrs	r3, r3, #24
 8005144:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800514e:	429a      	cmp	r2, r3
 8005150:	d001      	beq.n	8005156 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e000      	b.n	8005158 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3730      	adds	r7, #48	; 0x30
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	58024400 	.word	0x58024400

08005164 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e19c      	b.n	80054b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005178:	4b8a      	ldr	r3, [pc, #552]	; (80053a4 <HAL_RCC_ClockConfig+0x240>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 030f 	and.w	r3, r3, #15
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	429a      	cmp	r2, r3
 8005184:	d910      	bls.n	80051a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005186:	4b87      	ldr	r3, [pc, #540]	; (80053a4 <HAL_RCC_ClockConfig+0x240>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f023 020f 	bic.w	r2, r3, #15
 800518e:	4985      	ldr	r1, [pc, #532]	; (80053a4 <HAL_RCC_ClockConfig+0x240>)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	4313      	orrs	r3, r2
 8005194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005196:	4b83      	ldr	r3, [pc, #524]	; (80053a4 <HAL_RCC_ClockConfig+0x240>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d001      	beq.n	80051a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e184      	b.n	80054b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d010      	beq.n	80051d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	691a      	ldr	r2, [r3, #16]
 80051b8:	4b7b      	ldr	r3, [pc, #492]	; (80053a8 <HAL_RCC_ClockConfig+0x244>)
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d908      	bls.n	80051d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80051c4:	4b78      	ldr	r3, [pc, #480]	; (80053a8 <HAL_RCC_ClockConfig+0x244>)
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	4975      	ldr	r1, [pc, #468]	; (80053a8 <HAL_RCC_ClockConfig+0x244>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0308 	and.w	r3, r3, #8
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d010      	beq.n	8005204 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	695a      	ldr	r2, [r3, #20]
 80051e6:	4b70      	ldr	r3, [pc, #448]	; (80053a8 <HAL_RCC_ClockConfig+0x244>)
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d908      	bls.n	8005204 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80051f2:	4b6d      	ldr	r3, [pc, #436]	; (80053a8 <HAL_RCC_ClockConfig+0x244>)
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	496a      	ldr	r1, [pc, #424]	; (80053a8 <HAL_RCC_ClockConfig+0x244>)
 8005200:	4313      	orrs	r3, r2
 8005202:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0310 	and.w	r3, r3, #16
 800520c:	2b00      	cmp	r3, #0
 800520e:	d010      	beq.n	8005232 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	699a      	ldr	r2, [r3, #24]
 8005214:	4b64      	ldr	r3, [pc, #400]	; (80053a8 <HAL_RCC_ClockConfig+0x244>)
 8005216:	69db      	ldr	r3, [r3, #28]
 8005218:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800521c:	429a      	cmp	r2, r3
 800521e:	d908      	bls.n	8005232 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005220:	4b61      	ldr	r3, [pc, #388]	; (80053a8 <HAL_RCC_ClockConfig+0x244>)
 8005222:	69db      	ldr	r3, [r3, #28]
 8005224:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	495e      	ldr	r1, [pc, #376]	; (80053a8 <HAL_RCC_ClockConfig+0x244>)
 800522e:	4313      	orrs	r3, r2
 8005230:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0320 	and.w	r3, r3, #32
 800523a:	2b00      	cmp	r3, #0
 800523c:	d010      	beq.n	8005260 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	69da      	ldr	r2, [r3, #28]
 8005242:	4b59      	ldr	r3, [pc, #356]	; (80053a8 <HAL_RCC_ClockConfig+0x244>)
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800524a:	429a      	cmp	r2, r3
 800524c:	d908      	bls.n	8005260 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800524e:	4b56      	ldr	r3, [pc, #344]	; (80053a8 <HAL_RCC_ClockConfig+0x244>)
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	4953      	ldr	r1, [pc, #332]	; (80053a8 <HAL_RCC_ClockConfig+0x244>)
 800525c:	4313      	orrs	r3, r2
 800525e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d010      	beq.n	800528e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68da      	ldr	r2, [r3, #12]
 8005270:	4b4d      	ldr	r3, [pc, #308]	; (80053a8 <HAL_RCC_ClockConfig+0x244>)
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	f003 030f 	and.w	r3, r3, #15
 8005278:	429a      	cmp	r2, r3
 800527a:	d908      	bls.n	800528e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800527c:	4b4a      	ldr	r3, [pc, #296]	; (80053a8 <HAL_RCC_ClockConfig+0x244>)
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	f023 020f 	bic.w	r2, r3, #15
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	4947      	ldr	r1, [pc, #284]	; (80053a8 <HAL_RCC_ClockConfig+0x244>)
 800528a:	4313      	orrs	r3, r2
 800528c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b00      	cmp	r3, #0
 8005298:	d055      	beq.n	8005346 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800529a:	4b43      	ldr	r3, [pc, #268]	; (80053a8 <HAL_RCC_ClockConfig+0x244>)
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	4940      	ldr	r1, [pc, #256]	; (80053a8 <HAL_RCC_ClockConfig+0x244>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d107      	bne.n	80052c4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052b4:	4b3c      	ldr	r3, [pc, #240]	; (80053a8 <HAL_RCC_ClockConfig+0x244>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d121      	bne.n	8005304 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e0f6      	b.n	80054b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	2b03      	cmp	r3, #3
 80052ca:	d107      	bne.n	80052dc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052cc:	4b36      	ldr	r3, [pc, #216]	; (80053a8 <HAL_RCC_ClockConfig+0x244>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d115      	bne.n	8005304 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e0ea      	b.n	80054b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d107      	bne.n	80052f4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052e4:	4b30      	ldr	r3, [pc, #192]	; (80053a8 <HAL_RCC_ClockConfig+0x244>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d109      	bne.n	8005304 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e0de      	b.n	80054b2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052f4:	4b2c      	ldr	r3, [pc, #176]	; (80053a8 <HAL_RCC_ClockConfig+0x244>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0304 	and.w	r3, r3, #4
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d101      	bne.n	8005304 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e0d6      	b.n	80054b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005304:	4b28      	ldr	r3, [pc, #160]	; (80053a8 <HAL_RCC_ClockConfig+0x244>)
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	f023 0207 	bic.w	r2, r3, #7
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	4925      	ldr	r1, [pc, #148]	; (80053a8 <HAL_RCC_ClockConfig+0x244>)
 8005312:	4313      	orrs	r3, r2
 8005314:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005316:	f7fc f891 	bl	800143c <HAL_GetTick>
 800531a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800531c:	e00a      	b.n	8005334 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800531e:	f7fc f88d 	bl	800143c <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	f241 3288 	movw	r2, #5000	; 0x1388
 800532c:	4293      	cmp	r3, r2
 800532e:	d901      	bls.n	8005334 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e0be      	b.n	80054b2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005334:	4b1c      	ldr	r3, [pc, #112]	; (80053a8 <HAL_RCC_ClockConfig+0x244>)
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	00db      	lsls	r3, r3, #3
 8005342:	429a      	cmp	r2, r3
 8005344:	d1eb      	bne.n	800531e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d010      	beq.n	8005374 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68da      	ldr	r2, [r3, #12]
 8005356:	4b14      	ldr	r3, [pc, #80]	; (80053a8 <HAL_RCC_ClockConfig+0x244>)
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	f003 030f 	and.w	r3, r3, #15
 800535e:	429a      	cmp	r2, r3
 8005360:	d208      	bcs.n	8005374 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005362:	4b11      	ldr	r3, [pc, #68]	; (80053a8 <HAL_RCC_ClockConfig+0x244>)
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	f023 020f 	bic.w	r2, r3, #15
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	490e      	ldr	r1, [pc, #56]	; (80053a8 <HAL_RCC_ClockConfig+0x244>)
 8005370:	4313      	orrs	r3, r2
 8005372:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005374:	4b0b      	ldr	r3, [pc, #44]	; (80053a4 <HAL_RCC_ClockConfig+0x240>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 030f 	and.w	r3, r3, #15
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	429a      	cmp	r2, r3
 8005380:	d214      	bcs.n	80053ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005382:	4b08      	ldr	r3, [pc, #32]	; (80053a4 <HAL_RCC_ClockConfig+0x240>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f023 020f 	bic.w	r2, r3, #15
 800538a:	4906      	ldr	r1, [pc, #24]	; (80053a4 <HAL_RCC_ClockConfig+0x240>)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	4313      	orrs	r3, r2
 8005390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005392:	4b04      	ldr	r3, [pc, #16]	; (80053a4 <HAL_RCC_ClockConfig+0x240>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 030f 	and.w	r3, r3, #15
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	429a      	cmp	r2, r3
 800539e:	d005      	beq.n	80053ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e086      	b.n	80054b2 <HAL_RCC_ClockConfig+0x34e>
 80053a4:	52002000 	.word	0x52002000
 80053a8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d010      	beq.n	80053da <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	691a      	ldr	r2, [r3, #16]
 80053bc:	4b3f      	ldr	r3, [pc, #252]	; (80054bc <HAL_RCC_ClockConfig+0x358>)
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d208      	bcs.n	80053da <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80053c8:	4b3c      	ldr	r3, [pc, #240]	; (80054bc <HAL_RCC_ClockConfig+0x358>)
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	4939      	ldr	r1, [pc, #228]	; (80054bc <HAL_RCC_ClockConfig+0x358>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0308 	and.w	r3, r3, #8
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d010      	beq.n	8005408 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	695a      	ldr	r2, [r3, #20]
 80053ea:	4b34      	ldr	r3, [pc, #208]	; (80054bc <HAL_RCC_ClockConfig+0x358>)
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d208      	bcs.n	8005408 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053f6:	4b31      	ldr	r3, [pc, #196]	; (80054bc <HAL_RCC_ClockConfig+0x358>)
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	492e      	ldr	r1, [pc, #184]	; (80054bc <HAL_RCC_ClockConfig+0x358>)
 8005404:	4313      	orrs	r3, r2
 8005406:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0310 	and.w	r3, r3, #16
 8005410:	2b00      	cmp	r3, #0
 8005412:	d010      	beq.n	8005436 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	699a      	ldr	r2, [r3, #24]
 8005418:	4b28      	ldr	r3, [pc, #160]	; (80054bc <HAL_RCC_ClockConfig+0x358>)
 800541a:	69db      	ldr	r3, [r3, #28]
 800541c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005420:	429a      	cmp	r2, r3
 8005422:	d208      	bcs.n	8005436 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005424:	4b25      	ldr	r3, [pc, #148]	; (80054bc <HAL_RCC_ClockConfig+0x358>)
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	4922      	ldr	r1, [pc, #136]	; (80054bc <HAL_RCC_ClockConfig+0x358>)
 8005432:	4313      	orrs	r3, r2
 8005434:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0320 	and.w	r3, r3, #32
 800543e:	2b00      	cmp	r3, #0
 8005440:	d010      	beq.n	8005464 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	69da      	ldr	r2, [r3, #28]
 8005446:	4b1d      	ldr	r3, [pc, #116]	; (80054bc <HAL_RCC_ClockConfig+0x358>)
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800544e:	429a      	cmp	r2, r3
 8005450:	d208      	bcs.n	8005464 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005452:	4b1a      	ldr	r3, [pc, #104]	; (80054bc <HAL_RCC_ClockConfig+0x358>)
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	4917      	ldr	r1, [pc, #92]	; (80054bc <HAL_RCC_ClockConfig+0x358>)
 8005460:	4313      	orrs	r3, r2
 8005462:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005464:	f000 f834 	bl	80054d0 <HAL_RCC_GetSysClockFreq>
 8005468:	4602      	mov	r2, r0
 800546a:	4b14      	ldr	r3, [pc, #80]	; (80054bc <HAL_RCC_ClockConfig+0x358>)
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	0a1b      	lsrs	r3, r3, #8
 8005470:	f003 030f 	and.w	r3, r3, #15
 8005474:	4912      	ldr	r1, [pc, #72]	; (80054c0 <HAL_RCC_ClockConfig+0x35c>)
 8005476:	5ccb      	ldrb	r3, [r1, r3]
 8005478:	f003 031f 	and.w	r3, r3, #31
 800547c:	fa22 f303 	lsr.w	r3, r2, r3
 8005480:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005482:	4b0e      	ldr	r3, [pc, #56]	; (80054bc <HAL_RCC_ClockConfig+0x358>)
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	f003 030f 	and.w	r3, r3, #15
 800548a:	4a0d      	ldr	r2, [pc, #52]	; (80054c0 <HAL_RCC_ClockConfig+0x35c>)
 800548c:	5cd3      	ldrb	r3, [r2, r3]
 800548e:	f003 031f 	and.w	r3, r3, #31
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	fa22 f303 	lsr.w	r3, r2, r3
 8005498:	4a0a      	ldr	r2, [pc, #40]	; (80054c4 <HAL_RCC_ClockConfig+0x360>)
 800549a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800549c:	4a0a      	ldr	r2, [pc, #40]	; (80054c8 <HAL_RCC_ClockConfig+0x364>)
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80054a2:	4b0a      	ldr	r3, [pc, #40]	; (80054cc <HAL_RCC_ClockConfig+0x368>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fb fc70 	bl	8000d8c <HAL_InitTick>
 80054ac:	4603      	mov	r3, r0
 80054ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80054b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3718      	adds	r7, #24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	58024400 	.word	0x58024400
 80054c0:	0802ea9c 	.word	0x0802ea9c
 80054c4:	24000004 	.word	0x24000004
 80054c8:	24000000 	.word	0x24000000
 80054cc:	2400000c 	.word	0x2400000c

080054d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b089      	sub	sp, #36	; 0x24
 80054d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054d6:	4bb3      	ldr	r3, [pc, #716]	; (80057a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054de:	2b18      	cmp	r3, #24
 80054e0:	f200 8155 	bhi.w	800578e <HAL_RCC_GetSysClockFreq+0x2be>
 80054e4:	a201      	add	r2, pc, #4	; (adr r2, 80054ec <HAL_RCC_GetSysClockFreq+0x1c>)
 80054e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ea:	bf00      	nop
 80054ec:	08005551 	.word	0x08005551
 80054f0:	0800578f 	.word	0x0800578f
 80054f4:	0800578f 	.word	0x0800578f
 80054f8:	0800578f 	.word	0x0800578f
 80054fc:	0800578f 	.word	0x0800578f
 8005500:	0800578f 	.word	0x0800578f
 8005504:	0800578f 	.word	0x0800578f
 8005508:	0800578f 	.word	0x0800578f
 800550c:	08005577 	.word	0x08005577
 8005510:	0800578f 	.word	0x0800578f
 8005514:	0800578f 	.word	0x0800578f
 8005518:	0800578f 	.word	0x0800578f
 800551c:	0800578f 	.word	0x0800578f
 8005520:	0800578f 	.word	0x0800578f
 8005524:	0800578f 	.word	0x0800578f
 8005528:	0800578f 	.word	0x0800578f
 800552c:	0800557d 	.word	0x0800557d
 8005530:	0800578f 	.word	0x0800578f
 8005534:	0800578f 	.word	0x0800578f
 8005538:	0800578f 	.word	0x0800578f
 800553c:	0800578f 	.word	0x0800578f
 8005540:	0800578f 	.word	0x0800578f
 8005544:	0800578f 	.word	0x0800578f
 8005548:	0800578f 	.word	0x0800578f
 800554c:	08005583 	.word	0x08005583
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005550:	4b94      	ldr	r3, [pc, #592]	; (80057a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0320 	and.w	r3, r3, #32
 8005558:	2b00      	cmp	r3, #0
 800555a:	d009      	beq.n	8005570 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800555c:	4b91      	ldr	r3, [pc, #580]	; (80057a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	08db      	lsrs	r3, r3, #3
 8005562:	f003 0303 	and.w	r3, r3, #3
 8005566:	4a90      	ldr	r2, [pc, #576]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005568:	fa22 f303 	lsr.w	r3, r2, r3
 800556c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800556e:	e111      	b.n	8005794 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005570:	4b8d      	ldr	r3, [pc, #564]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005572:	61bb      	str	r3, [r7, #24]
    break;
 8005574:	e10e      	b.n	8005794 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005576:	4b8d      	ldr	r3, [pc, #564]	; (80057ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005578:	61bb      	str	r3, [r7, #24]
    break;
 800557a:	e10b      	b.n	8005794 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800557c:	4b8c      	ldr	r3, [pc, #560]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800557e:	61bb      	str	r3, [r7, #24]
    break;
 8005580:	e108      	b.n	8005794 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005582:	4b88      	ldr	r3, [pc, #544]	; (80057a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005586:	f003 0303 	and.w	r3, r3, #3
 800558a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800558c:	4b85      	ldr	r3, [pc, #532]	; (80057a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800558e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005590:	091b      	lsrs	r3, r3, #4
 8005592:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005596:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005598:	4b82      	ldr	r3, [pc, #520]	; (80057a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800559a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80055a2:	4b80      	ldr	r3, [pc, #512]	; (80057a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a6:	08db      	lsrs	r3, r3, #3
 80055a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	fb02 f303 	mul.w	r3, r2, r3
 80055b2:	ee07 3a90 	vmov	s15, r3
 80055b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ba:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f000 80e1 	beq.w	8005788 <HAL_RCC_GetSysClockFreq+0x2b8>
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	f000 8083 	beq.w	80056d4 <HAL_RCC_GetSysClockFreq+0x204>
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	f200 80a1 	bhi.w	8005718 <HAL_RCC_GetSysClockFreq+0x248>
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d003      	beq.n	80055e4 <HAL_RCC_GetSysClockFreq+0x114>
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d056      	beq.n	8005690 <HAL_RCC_GetSysClockFreq+0x1c0>
 80055e2:	e099      	b.n	8005718 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055e4:	4b6f      	ldr	r3, [pc, #444]	; (80057a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0320 	and.w	r3, r3, #32
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d02d      	beq.n	800564c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055f0:	4b6c      	ldr	r3, [pc, #432]	; (80057a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	08db      	lsrs	r3, r3, #3
 80055f6:	f003 0303 	and.w	r3, r3, #3
 80055fa:	4a6b      	ldr	r2, [pc, #428]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80055fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005600:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	ee07 3a90 	vmov	s15, r3
 8005608:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	ee07 3a90 	vmov	s15, r3
 8005612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800561a:	4b62      	ldr	r3, [pc, #392]	; (80057a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800561c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005622:	ee07 3a90 	vmov	s15, r3
 8005626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800562a:	ed97 6a02 	vldr	s12, [r7, #8]
 800562e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80057b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800563a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800563e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005646:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800564a:	e087      	b.n	800575c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	ee07 3a90 	vmov	s15, r3
 8005652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005656:	eddf 6a58 	vldr	s13, [pc, #352]	; 80057b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800565a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800565e:	4b51      	ldr	r3, [pc, #324]	; (80057a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005666:	ee07 3a90 	vmov	s15, r3
 800566a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800566e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005672:	eddf 5a50 	vldr	s11, [pc, #320]	; 80057b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800567a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800567e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800568a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800568e:	e065      	b.n	800575c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	ee07 3a90 	vmov	s15, r3
 8005696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800569a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80057bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800569e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056a2:	4b40      	ldr	r3, [pc, #256]	; (80057a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056aa:	ee07 3a90 	vmov	s15, r3
 80056ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80056b6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80057b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056d2:	e043      	b.n	800575c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	ee07 3a90 	vmov	s15, r3
 80056da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056de:	eddf 6a38 	vldr	s13, [pc, #224]	; 80057c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80056e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056e6:	4b2f      	ldr	r3, [pc, #188]	; (80057a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ee:	ee07 3a90 	vmov	s15, r3
 80056f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80056fa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80057b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005706:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800570a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800570e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005712:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005716:	e021      	b.n	800575c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	ee07 3a90 	vmov	s15, r3
 800571e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005722:	eddf 6a26 	vldr	s13, [pc, #152]	; 80057bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8005726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800572a:	4b1e      	ldr	r3, [pc, #120]	; (80057a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800572c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005732:	ee07 3a90 	vmov	s15, r3
 8005736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800573a:	ed97 6a02 	vldr	s12, [r7, #8]
 800573e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80057b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800574a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800574e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005756:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800575a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800575c:	4b11      	ldr	r3, [pc, #68]	; (80057a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800575e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005760:	0a5b      	lsrs	r3, r3, #9
 8005762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005766:	3301      	adds	r3, #1
 8005768:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	ee07 3a90 	vmov	s15, r3
 8005770:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005774:	edd7 6a07 	vldr	s13, [r7, #28]
 8005778:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800577c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005780:	ee17 3a90 	vmov	r3, s15
 8005784:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005786:	e005      	b.n	8005794 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005788:	2300      	movs	r3, #0
 800578a:	61bb      	str	r3, [r7, #24]
    break;
 800578c:	e002      	b.n	8005794 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800578e:	4b07      	ldr	r3, [pc, #28]	; (80057ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005790:	61bb      	str	r3, [r7, #24]
    break;
 8005792:	bf00      	nop
  }

  return sysclockfreq;
 8005794:	69bb      	ldr	r3, [r7, #24]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3724      	adds	r7, #36	; 0x24
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	58024400 	.word	0x58024400
 80057a8:	03d09000 	.word	0x03d09000
 80057ac:	003d0900 	.word	0x003d0900
 80057b0:	017d7840 	.word	0x017d7840
 80057b4:	46000000 	.word	0x46000000
 80057b8:	4c742400 	.word	0x4c742400
 80057bc:	4a742400 	.word	0x4a742400
 80057c0:	4bbebc20 	.word	0x4bbebc20

080057c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80057ca:	f7ff fe81 	bl	80054d0 <HAL_RCC_GetSysClockFreq>
 80057ce:	4602      	mov	r2, r0
 80057d0:	4b10      	ldr	r3, [pc, #64]	; (8005814 <HAL_RCC_GetHCLKFreq+0x50>)
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	0a1b      	lsrs	r3, r3, #8
 80057d6:	f003 030f 	and.w	r3, r3, #15
 80057da:	490f      	ldr	r1, [pc, #60]	; (8005818 <HAL_RCC_GetHCLKFreq+0x54>)
 80057dc:	5ccb      	ldrb	r3, [r1, r3]
 80057de:	f003 031f 	and.w	r3, r3, #31
 80057e2:	fa22 f303 	lsr.w	r3, r2, r3
 80057e6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80057e8:	4b0a      	ldr	r3, [pc, #40]	; (8005814 <HAL_RCC_GetHCLKFreq+0x50>)
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	f003 030f 	and.w	r3, r3, #15
 80057f0:	4a09      	ldr	r2, [pc, #36]	; (8005818 <HAL_RCC_GetHCLKFreq+0x54>)
 80057f2:	5cd3      	ldrb	r3, [r2, r3]
 80057f4:	f003 031f 	and.w	r3, r3, #31
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	fa22 f303 	lsr.w	r3, r2, r3
 80057fe:	4a07      	ldr	r2, [pc, #28]	; (800581c <HAL_RCC_GetHCLKFreq+0x58>)
 8005800:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005802:	4a07      	ldr	r2, [pc, #28]	; (8005820 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005808:	4b04      	ldr	r3, [pc, #16]	; (800581c <HAL_RCC_GetHCLKFreq+0x58>)
 800580a:	681b      	ldr	r3, [r3, #0]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3708      	adds	r7, #8
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	58024400 	.word	0x58024400
 8005818:	0802ea9c 	.word	0x0802ea9c
 800581c:	24000004 	.word	0x24000004
 8005820:	24000000 	.word	0x24000000

08005824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005828:	f7ff ffcc 	bl	80057c4 <HAL_RCC_GetHCLKFreq>
 800582c:	4602      	mov	r2, r0
 800582e:	4b06      	ldr	r3, [pc, #24]	; (8005848 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005830:	69db      	ldr	r3, [r3, #28]
 8005832:	091b      	lsrs	r3, r3, #4
 8005834:	f003 0307 	and.w	r3, r3, #7
 8005838:	4904      	ldr	r1, [pc, #16]	; (800584c <HAL_RCC_GetPCLK1Freq+0x28>)
 800583a:	5ccb      	ldrb	r3, [r1, r3]
 800583c:	f003 031f 	and.w	r3, r3, #31
 8005840:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005844:	4618      	mov	r0, r3
 8005846:	bd80      	pop	{r7, pc}
 8005848:	58024400 	.word	0x58024400
 800584c:	0802ea9c 	.word	0x0802ea9c

08005850 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005854:	f7ff ffb6 	bl	80057c4 <HAL_RCC_GetHCLKFreq>
 8005858:	4602      	mov	r2, r0
 800585a:	4b06      	ldr	r3, [pc, #24]	; (8005874 <HAL_RCC_GetPCLK2Freq+0x24>)
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	0a1b      	lsrs	r3, r3, #8
 8005860:	f003 0307 	and.w	r3, r3, #7
 8005864:	4904      	ldr	r1, [pc, #16]	; (8005878 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005866:	5ccb      	ldrb	r3, [r1, r3]
 8005868:	f003 031f 	and.w	r3, r3, #31
 800586c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005870:	4618      	mov	r0, r3
 8005872:	bd80      	pop	{r7, pc}
 8005874:	58024400 	.word	0x58024400
 8005878:	0802ea9c 	.word	0x0802ea9c

0800587c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	223f      	movs	r2, #63	; 0x3f
 800588a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800588c:	4b1a      	ldr	r3, [pc, #104]	; (80058f8 <HAL_RCC_GetClockConfig+0x7c>)
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	f003 0207 	and.w	r2, r3, #7
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005898:	4b17      	ldr	r3, [pc, #92]	; (80058f8 <HAL_RCC_GetClockConfig+0x7c>)
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80058a4:	4b14      	ldr	r3, [pc, #80]	; (80058f8 <HAL_RCC_GetClockConfig+0x7c>)
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	f003 020f 	and.w	r2, r3, #15
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80058b0:	4b11      	ldr	r3, [pc, #68]	; (80058f8 <HAL_RCC_GetClockConfig+0x7c>)
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80058bc:	4b0e      	ldr	r3, [pc, #56]	; (80058f8 <HAL_RCC_GetClockConfig+0x7c>)
 80058be:	69db      	ldr	r3, [r3, #28]
 80058c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80058c8:	4b0b      	ldr	r3, [pc, #44]	; (80058f8 <HAL_RCC_GetClockConfig+0x7c>)
 80058ca:	69db      	ldr	r3, [r3, #28]
 80058cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80058d4:	4b08      	ldr	r3, [pc, #32]	; (80058f8 <HAL_RCC_GetClockConfig+0x7c>)
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80058e0:	4b06      	ldr	r3, [pc, #24]	; (80058fc <HAL_RCC_GetClockConfig+0x80>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 020f 	and.w	r2, r3, #15
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	601a      	str	r2, [r3, #0]
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	58024400 	.word	0x58024400
 80058fc:	52002000 	.word	0x52002000

08005900 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005908:	2300      	movs	r3, #0
 800590a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800590c:	2300      	movs	r3, #0
 800590e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d03f      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005920:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005924:	d02a      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005926:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800592a:	d824      	bhi.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800592c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005930:	d018      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005932:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005936:	d81e      	bhi.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005938:	2b00      	cmp	r3, #0
 800593a:	d003      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800593c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005940:	d007      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005942:	e018      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005944:	4bab      	ldr	r3, [pc, #684]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005948:	4aaa      	ldr	r2, [pc, #680]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800594a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800594e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005950:	e015      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	3304      	adds	r3, #4
 8005956:	2102      	movs	r1, #2
 8005958:	4618      	mov	r0, r3
 800595a:	f001 f9ff 	bl	8006d5c <RCCEx_PLL2_Config>
 800595e:	4603      	mov	r3, r0
 8005960:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005962:	e00c      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	3324      	adds	r3, #36	; 0x24
 8005968:	2102      	movs	r1, #2
 800596a:	4618      	mov	r0, r3
 800596c:	f001 faa8 	bl	8006ec0 <RCCEx_PLL3_Config>
 8005970:	4603      	mov	r3, r0
 8005972:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005974:	e003      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	75fb      	strb	r3, [r7, #23]
      break;
 800597a:	e000      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800597c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800597e:	7dfb      	ldrb	r3, [r7, #23]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d109      	bne.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005984:	4b9b      	ldr	r3, [pc, #620]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005988:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005990:	4998      	ldr	r1, [pc, #608]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005992:	4313      	orrs	r3, r2
 8005994:	650b      	str	r3, [r1, #80]	; 0x50
 8005996:	e001      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005998:	7dfb      	ldrb	r3, [r7, #23]
 800599a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d03d      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ac:	2b04      	cmp	r3, #4
 80059ae:	d826      	bhi.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80059b0:	a201      	add	r2, pc, #4	; (adr r2, 80059b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80059b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b6:	bf00      	nop
 80059b8:	080059cd 	.word	0x080059cd
 80059bc:	080059db 	.word	0x080059db
 80059c0:	080059ed 	.word	0x080059ed
 80059c4:	08005a05 	.word	0x08005a05
 80059c8:	08005a05 	.word	0x08005a05
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059cc:	4b89      	ldr	r3, [pc, #548]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d0:	4a88      	ldr	r2, [pc, #544]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059d8:	e015      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	3304      	adds	r3, #4
 80059de:	2100      	movs	r1, #0
 80059e0:	4618      	mov	r0, r3
 80059e2:	f001 f9bb 	bl	8006d5c <RCCEx_PLL2_Config>
 80059e6:	4603      	mov	r3, r0
 80059e8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059ea:	e00c      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	3324      	adds	r3, #36	; 0x24
 80059f0:	2100      	movs	r1, #0
 80059f2:	4618      	mov	r0, r3
 80059f4:	f001 fa64 	bl	8006ec0 <RCCEx_PLL3_Config>
 80059f8:	4603      	mov	r3, r0
 80059fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059fc:	e003      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	75fb      	strb	r3, [r7, #23]
      break;
 8005a02:	e000      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005a04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a06:	7dfb      	ldrb	r3, [r7, #23]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d109      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a0c:	4b79      	ldr	r3, [pc, #484]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a10:	f023 0207 	bic.w	r2, r3, #7
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a18:	4976      	ldr	r1, [pc, #472]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	650b      	str	r3, [r1, #80]	; 0x50
 8005a1e:	e001      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a20:	7dfb      	ldrb	r3, [r7, #23]
 8005a22:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d042      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a38:	d02b      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a3e:	d825      	bhi.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005a40:	2bc0      	cmp	r3, #192	; 0xc0
 8005a42:	d028      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005a44:	2bc0      	cmp	r3, #192	; 0xc0
 8005a46:	d821      	bhi.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005a48:	2b80      	cmp	r3, #128	; 0x80
 8005a4a:	d016      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005a4c:	2b80      	cmp	r3, #128	; 0x80
 8005a4e:	d81d      	bhi.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d002      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005a54:	2b40      	cmp	r3, #64	; 0x40
 8005a56:	d007      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005a58:	e018      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a5a:	4b66      	ldr	r3, [pc, #408]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5e:	4a65      	ldr	r2, [pc, #404]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005a66:	e017      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	3304      	adds	r3, #4
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f001 f974 	bl	8006d5c <RCCEx_PLL2_Config>
 8005a74:	4603      	mov	r3, r0
 8005a76:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005a78:	e00e      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	3324      	adds	r3, #36	; 0x24
 8005a7e:	2100      	movs	r1, #0
 8005a80:	4618      	mov	r0, r3
 8005a82:	f001 fa1d 	bl	8006ec0 <RCCEx_PLL3_Config>
 8005a86:	4603      	mov	r3, r0
 8005a88:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005a8a:	e005      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8005a90:	e002      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005a92:	bf00      	nop
 8005a94:	e000      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005a96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a98:	7dfb      	ldrb	r3, [r7, #23]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d109      	bne.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005a9e:	4b55      	ldr	r3, [pc, #340]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aaa:	4952      	ldr	r1, [pc, #328]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	650b      	str	r3, [r1, #80]	; 0x50
 8005ab0:	e001      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab2:	7dfb      	ldrb	r3, [r7, #23]
 8005ab4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d049      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005ac8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005acc:	d030      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005ace:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ad2:	d82a      	bhi.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005ad4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005ad8:	d02c      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005ada:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005ade:	d824      	bhi.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005ae0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ae4:	d018      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005ae6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005aea:	d81e      	bhi.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d003      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005af0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005af4:	d007      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005af6:	e018      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005af8:	4b3e      	ldr	r3, [pc, #248]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afc:	4a3d      	ldr	r2, [pc, #244]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b04:	e017      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	3304      	adds	r3, #4
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f001 f925 	bl	8006d5c <RCCEx_PLL2_Config>
 8005b12:	4603      	mov	r3, r0
 8005b14:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005b16:	e00e      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	3324      	adds	r3, #36	; 0x24
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f001 f9ce 	bl	8006ec0 <RCCEx_PLL3_Config>
 8005b24:	4603      	mov	r3, r0
 8005b26:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b28:	e005      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	75fb      	strb	r3, [r7, #23]
      break;
 8005b2e:	e002      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005b30:	bf00      	nop
 8005b32:	e000      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005b34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b36:	7dfb      	ldrb	r3, [r7, #23]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d10a      	bne.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005b3c:	4b2d      	ldr	r3, [pc, #180]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b40:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005b4a:	492a      	ldr	r1, [pc, #168]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	658b      	str	r3, [r1, #88]	; 0x58
 8005b50:	e001      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b52:	7dfb      	ldrb	r3, [r7, #23]
 8005b54:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d04c      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b6c:	d030      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005b6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b72:	d82a      	bhi.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005b74:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b78:	d02c      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005b7a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b7e:	d824      	bhi.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005b80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b84:	d018      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005b86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b8a:	d81e      	bhi.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d003      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005b90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b94:	d007      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005b96:	e018      	b.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b98:	4b16      	ldr	r3, [pc, #88]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9c:	4a15      	ldr	r2, [pc, #84]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ba2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ba4:	e017      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	3304      	adds	r3, #4
 8005baa:	2100      	movs	r1, #0
 8005bac:	4618      	mov	r0, r3
 8005bae:	f001 f8d5 	bl	8006d5c <RCCEx_PLL2_Config>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005bb6:	e00e      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	3324      	adds	r3, #36	; 0x24
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f001 f97e 	bl	8006ec0 <RCCEx_PLL3_Config>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005bc8:	e005      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	75fb      	strb	r3, [r7, #23]
      break;
 8005bce:	e002      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005bd0:	bf00      	nop
 8005bd2:	e000      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005bd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bd6:	7dfb      	ldrb	r3, [r7, #23]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10d      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005bdc:	4b05      	ldr	r3, [pc, #20]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005bea:	4902      	ldr	r1, [pc, #8]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	658b      	str	r3, [r1, #88]	; 0x58
 8005bf0:	e004      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005bf2:	bf00      	nop
 8005bf4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf8:	7dfb      	ldrb	r3, [r7, #23]
 8005bfa:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d032      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c0c:	2b30      	cmp	r3, #48	; 0x30
 8005c0e:	d01c      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005c10:	2b30      	cmp	r3, #48	; 0x30
 8005c12:	d817      	bhi.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005c14:	2b20      	cmp	r3, #32
 8005c16:	d00c      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005c18:	2b20      	cmp	r3, #32
 8005c1a:	d813      	bhi.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d016      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005c20:	2b10      	cmp	r3, #16
 8005c22:	d10f      	bne.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c24:	4bb1      	ldr	r3, [pc, #708]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c28:	4ab0      	ldr	r2, [pc, #704]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005c2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005c30:	e00e      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	3304      	adds	r3, #4
 8005c36:	2102      	movs	r1, #2
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f001 f88f 	bl	8006d5c <RCCEx_PLL2_Config>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005c42:	e005      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	75fb      	strb	r3, [r7, #23]
      break;
 8005c48:	e002      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005c4a:	bf00      	nop
 8005c4c:	e000      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005c4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c50:	7dfb      	ldrb	r3, [r7, #23]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d109      	bne.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005c56:	4ba5      	ldr	r3, [pc, #660]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c5a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c62:	49a2      	ldr	r1, [pc, #648]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005c68:	e001      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c6a:	7dfb      	ldrb	r3, [r7, #23]
 8005c6c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d047      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c82:	d030      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005c84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c88:	d82a      	bhi.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005c8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c8e:	d02c      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005c90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c94:	d824      	bhi.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c9a:	d018      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005c9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ca0:	d81e      	bhi.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d003      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8005ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005caa:	d007      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005cac:	e018      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cae:	4b8f      	ldr	r3, [pc, #572]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb2:	4a8e      	ldr	r2, [pc, #568]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005cba:	e017      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	3304      	adds	r3, #4
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f001 f84a 	bl	8006d5c <RCCEx_PLL2_Config>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005ccc:	e00e      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	3324      	adds	r3, #36	; 0x24
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f001 f8f3 	bl	8006ec0 <RCCEx_PLL3_Config>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005cde:	e005      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ce4:	e002      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005ce6:	bf00      	nop
 8005ce8:	e000      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005cea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cec:	7dfb      	ldrb	r3, [r7, #23]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d109      	bne.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005cf2:	4b7e      	ldr	r3, [pc, #504]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cf6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cfe:	497b      	ldr	r1, [pc, #492]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	650b      	str	r3, [r1, #80]	; 0x50
 8005d04:	e001      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d06:	7dfb      	ldrb	r3, [r7, #23]
 8005d08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d049      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d1e:	d02e      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005d20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d24:	d828      	bhi.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005d26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d2a:	d02a      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005d2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d30:	d822      	bhi.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005d32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d36:	d026      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005d38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d3c:	d81c      	bhi.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005d3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d42:	d010      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8005d44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d48:	d816      	bhi.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d01d      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d52:	d111      	bne.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	3304      	adds	r3, #4
 8005d58:	2101      	movs	r1, #1
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 fffe 	bl	8006d5c <RCCEx_PLL2_Config>
 8005d60:	4603      	mov	r3, r0
 8005d62:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005d64:	e012      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	3324      	adds	r3, #36	; 0x24
 8005d6a:	2101      	movs	r1, #1
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f001 f8a7 	bl	8006ec0 <RCCEx_PLL3_Config>
 8005d72:	4603      	mov	r3, r0
 8005d74:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005d76:	e009      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d7c:	e006      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005d7e:	bf00      	nop
 8005d80:	e004      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005d82:	bf00      	nop
 8005d84:	e002      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005d86:	bf00      	nop
 8005d88:	e000      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005d8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d8c:	7dfb      	ldrb	r3, [r7, #23]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d109      	bne.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005d92:	4b56      	ldr	r3, [pc, #344]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d96:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d9e:	4953      	ldr	r1, [pc, #332]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	650b      	str	r3, [r1, #80]	; 0x50
 8005da4:	e001      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005da6:	7dfb      	ldrb	r3, [r7, #23]
 8005da8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d04b      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005dbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005dc0:	d02e      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8005dc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005dc6:	d828      	bhi.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dcc:	d02a      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd2:	d822      	bhi.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005dd4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005dd8:	d026      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005dda:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005dde:	d81c      	bhi.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005de0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005de4:	d010      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005de6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dea:	d816      	bhi.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d01d      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005df0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005df4:	d111      	bne.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	3304      	adds	r3, #4
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f000 ffad 	bl	8006d5c <RCCEx_PLL2_Config>
 8005e02:	4603      	mov	r3, r0
 8005e04:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005e06:	e012      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	3324      	adds	r3, #36	; 0x24
 8005e0c:	2101      	movs	r1, #1
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f001 f856 	bl	8006ec0 <RCCEx_PLL3_Config>
 8005e14:	4603      	mov	r3, r0
 8005e16:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005e18:	e009      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	75fb      	strb	r3, [r7, #23]
      break;
 8005e1e:	e006      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005e20:	bf00      	nop
 8005e22:	e004      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005e24:	bf00      	nop
 8005e26:	e002      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005e28:	bf00      	nop
 8005e2a:	e000      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005e2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e2e:	7dfb      	ldrb	r3, [r7, #23]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10a      	bne.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005e34:	4b2d      	ldr	r3, [pc, #180]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e38:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e42:	492a      	ldr	r1, [pc, #168]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	658b      	str	r3, [r1, #88]	; 0x58
 8005e48:	e001      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e4a:	7dfb      	ldrb	r3, [r7, #23]
 8005e4c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d022      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00e      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8005e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e66:	d108      	bne.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	2101      	movs	r1, #1
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f000 ff74 	bl	8006d5c <RCCEx_PLL2_Config>
 8005e74:	4603      	mov	r3, r0
 8005e76:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8005e78:	e003      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x582>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	75fb      	strb	r3, [r7, #23]
      break;
 8005e7e:	e000      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x582>
      break;
 8005e80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e82:	7dfb      	ldrb	r3, [r7, #23]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d109      	bne.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005e88:	4b18      	ldr	r3, [pc, #96]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e94:	4915      	ldr	r1, [pc, #84]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005e9a:	e001      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e9c:	7dfb      	ldrb	r3, [r7, #23]
 8005e9e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d031      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eb4:	d00e      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005eb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eba:	d814      	bhi.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d017      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8005ec0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ec4:	d10f      	bne.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ec6:	4b09      	ldr	r3, [pc, #36]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eca:	4a08      	ldr	r2, [pc, #32]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005ed2:	e00e      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	3304      	adds	r3, #4
 8005ed8:	2101      	movs	r1, #1
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 ff3e 	bl	8006d5c <RCCEx_PLL2_Config>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005ee4:	e005      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	75fb      	strb	r3, [r7, #23]
      break;
 8005eea:	e002      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8005eec:	58024400 	.word	0x58024400
      break;
 8005ef0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ef2:	7dfb      	ldrb	r3, [r7, #23]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d109      	bne.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ef8:	4bbc      	ldr	r3, [pc, #752]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005efc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f04:	49b9      	ldr	r1, [pc, #740]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	650b      	str	r3, [r1, #80]	; 0x50
 8005f0a:	e001      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f0c:	7dfb      	ldrb	r3, [r7, #23]
 8005f0e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d032      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	d81b      	bhi.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8005f24:	a201      	add	r2, pc, #4	; (adr r2, 8005f2c <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8005f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2a:	bf00      	nop
 8005f2c:	08005f63 	.word	0x08005f63
 8005f30:	08005f3d 	.word	0x08005f3d
 8005f34:	08005f4b 	.word	0x08005f4b
 8005f38:	08005f63 	.word	0x08005f63
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f3c:	4bab      	ldr	r3, [pc, #684]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f40:	4aaa      	ldr	r2, [pc, #680]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005f48:	e00c      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x664>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	3304      	adds	r3, #4
 8005f4e:	2102      	movs	r1, #2
 8005f50:	4618      	mov	r0, r3
 8005f52:	f000 ff03 	bl	8006d5c <RCCEx_PLL2_Config>
 8005f56:	4603      	mov	r3, r0
 8005f58:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005f5a:	e003      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x664>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f60:	e000      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x664>
      break;
 8005f62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f64:	7dfb      	ldrb	r3, [r7, #23]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d109      	bne.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005f6a:	4ba0      	ldr	r3, [pc, #640]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f6e:	f023 0203 	bic.w	r2, r3, #3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f76:	499d      	ldr	r1, [pc, #628]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005f7c:	e001      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x682>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f7e:	7dfb      	ldrb	r3, [r7, #23]
 8005f80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f000 8086 	beq.w	800609c <HAL_RCCEx_PeriphCLKConfig+0x79c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f90:	4b97      	ldr	r3, [pc, #604]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a96      	ldr	r2, [pc, #600]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f9c:	f7fb fa4e 	bl	800143c <HAL_GetTick>
 8005fa0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fa2:	e009      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fa4:	f7fb fa4a 	bl	800143c <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	2b64      	cmp	r3, #100	; 0x64
 8005fb0:	d902      	bls.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      {
        ret = HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	75fb      	strb	r3, [r7, #23]
        break;
 8005fb6:	e005      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fb8:	4b8d      	ldr	r3, [pc, #564]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d0ef      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      }
    }

    if(ret == HAL_OK)
 8005fc4:	7dfb      	ldrb	r3, [r7, #23]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d166      	bne.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005fca:	4b88      	ldr	r3, [pc, #544]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005fcc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005fd4:	4053      	eors	r3, r2
 8005fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d013      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x706>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fde:	4b83      	ldr	r3, [pc, #524]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fe6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005fe8:	4b80      	ldr	r3, [pc, #512]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fec:	4a7f      	ldr	r2, [pc, #508]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ff2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ff4:	4b7d      	ldr	r3, [pc, #500]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff8:	4a7c      	ldr	r2, [pc, #496]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ffe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006000:	4a7a      	ldr	r2, [pc, #488]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800600c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006010:	d115      	bne.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006012:	f7fb fa13 	bl	800143c <HAL_GetTick>
 8006016:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006018:	e00b      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x732>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800601a:	f7fb fa0f 	bl	800143c <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	f241 3288 	movw	r2, #5000	; 0x1388
 8006028:	4293      	cmp	r3, r2
 800602a:	d902      	bls.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x732>
          {
            ret = HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	75fb      	strb	r3, [r7, #23]
            break;
 8006030:	e005      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006032:	4b6e      	ldr	r3, [pc, #440]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d0ed      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x71a>
          }
        }
      }

      if(ret == HAL_OK)
 800603e:	7dfb      	ldrb	r3, [r7, #23]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d126      	bne.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800604a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800604e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006052:	d10d      	bne.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8006054:	4b65      	ldr	r3, [pc, #404]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006062:	0919      	lsrs	r1, r3, #4
 8006064:	4b63      	ldr	r3, [pc, #396]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>)
 8006066:	400b      	ands	r3, r1
 8006068:	4960      	ldr	r1, [pc, #384]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800606a:	4313      	orrs	r3, r2
 800606c:	610b      	str	r3, [r1, #16]
 800606e:	e005      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8006070:	4b5e      	ldr	r3, [pc, #376]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	4a5d      	ldr	r2, [pc, #372]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006076:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800607a:	6113      	str	r3, [r2, #16]
 800607c:	4b5b      	ldr	r3, [pc, #364]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800607e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006086:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800608a:	4958      	ldr	r1, [pc, #352]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800608c:	4313      	orrs	r3, r2
 800608e:	670b      	str	r3, [r1, #112]	; 0x70
 8006090:	e004      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006092:	7dfb      	ldrb	r3, [r7, #23]
 8006094:	75bb      	strb	r3, [r7, #22]
 8006096:	e001      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006098:	7dfb      	ldrb	r3, [r7, #23]
 800609a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d07e      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060ac:	2b28      	cmp	r3, #40	; 0x28
 80060ae:	d867      	bhi.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x880>
 80060b0:	a201      	add	r2, pc, #4	; (adr r2, 80060b8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>)
 80060b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b6:	bf00      	nop
 80060b8:	08006187 	.word	0x08006187
 80060bc:	08006181 	.word	0x08006181
 80060c0:	08006181 	.word	0x08006181
 80060c4:	08006181 	.word	0x08006181
 80060c8:	08006181 	.word	0x08006181
 80060cc:	08006181 	.word	0x08006181
 80060d0:	08006181 	.word	0x08006181
 80060d4:	08006181 	.word	0x08006181
 80060d8:	0800615d 	.word	0x0800615d
 80060dc:	08006181 	.word	0x08006181
 80060e0:	08006181 	.word	0x08006181
 80060e4:	08006181 	.word	0x08006181
 80060e8:	08006181 	.word	0x08006181
 80060ec:	08006181 	.word	0x08006181
 80060f0:	08006181 	.word	0x08006181
 80060f4:	08006181 	.word	0x08006181
 80060f8:	0800616f 	.word	0x0800616f
 80060fc:	08006181 	.word	0x08006181
 8006100:	08006181 	.word	0x08006181
 8006104:	08006181 	.word	0x08006181
 8006108:	08006181 	.word	0x08006181
 800610c:	08006181 	.word	0x08006181
 8006110:	08006181 	.word	0x08006181
 8006114:	08006181 	.word	0x08006181
 8006118:	08006187 	.word	0x08006187
 800611c:	08006181 	.word	0x08006181
 8006120:	08006181 	.word	0x08006181
 8006124:	08006181 	.word	0x08006181
 8006128:	08006181 	.word	0x08006181
 800612c:	08006181 	.word	0x08006181
 8006130:	08006181 	.word	0x08006181
 8006134:	08006181 	.word	0x08006181
 8006138:	08006187 	.word	0x08006187
 800613c:	08006181 	.word	0x08006181
 8006140:	08006181 	.word	0x08006181
 8006144:	08006181 	.word	0x08006181
 8006148:	08006181 	.word	0x08006181
 800614c:	08006181 	.word	0x08006181
 8006150:	08006181 	.word	0x08006181
 8006154:	08006181 	.word	0x08006181
 8006158:	08006187 	.word	0x08006187
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	3304      	adds	r3, #4
 8006160:	2101      	movs	r1, #1
 8006162:	4618      	mov	r0, r3
 8006164:	f000 fdfa 	bl	8006d5c <RCCEx_PLL2_Config>
 8006168:	4603      	mov	r3, r0
 800616a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800616c:	e00c      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x888>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	3324      	adds	r3, #36	; 0x24
 8006172:	2101      	movs	r1, #1
 8006174:	4618      	mov	r0, r3
 8006176:	f000 fea3 	bl	8006ec0 <RCCEx_PLL3_Config>
 800617a:	4603      	mov	r3, r0
 800617c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800617e:	e003      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x888>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	75fb      	strb	r3, [r7, #23]
      break;
 8006184:	e000      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x888>
      break;
 8006186:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006188:	7dfb      	ldrb	r3, [r7, #23]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d109      	bne.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800618e:	4b17      	ldr	r3, [pc, #92]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006192:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800619a:	4914      	ldr	r1, [pc, #80]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800619c:	4313      	orrs	r3, r2
 800619e:	654b      	str	r3, [r1, #84]	; 0x54
 80061a0:	e001      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a2:	7dfb      	ldrb	r3, [r7, #23]
 80061a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d03e      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061b6:	2b05      	cmp	r3, #5
 80061b8:	d827      	bhi.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80061ba:	a201      	add	r2, pc, #4	; (adr r2, 80061c0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80061bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c0:	08006211 	.word	0x08006211
 80061c4:	080061d9 	.word	0x080061d9
 80061c8:	080061f9 	.word	0x080061f9
 80061cc:	08006211 	.word	0x08006211
 80061d0:	08006211 	.word	0x08006211
 80061d4:	08006211 	.word	0x08006211
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	3304      	adds	r3, #4
 80061dc:	2101      	movs	r1, #1
 80061de:	4618      	mov	r0, r3
 80061e0:	f000 fdbc 	bl	8006d5c <RCCEx_PLL2_Config>
 80061e4:	4603      	mov	r3, r0
 80061e6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80061e8:	e013      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x912>
 80061ea:	bf00      	nop
 80061ec:	58024400 	.word	0x58024400
 80061f0:	58024800 	.word	0x58024800
 80061f4:	00ffffcf 	.word	0x00ffffcf

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	3324      	adds	r3, #36	; 0x24
 80061fc:	2101      	movs	r1, #1
 80061fe:	4618      	mov	r0, r3
 8006200:	f000 fe5e 	bl	8006ec0 <RCCEx_PLL3_Config>
 8006204:	4603      	mov	r3, r0
 8006206:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006208:	e003      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	75fb      	strb	r3, [r7, #23]
      break;
 800620e:	e000      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8006210:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006212:	7dfb      	ldrb	r3, [r7, #23]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d109      	bne.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x92c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006218:	4b9f      	ldr	r3, [pc, #636]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800621a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800621c:	f023 0207 	bic.w	r2, r3, #7
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006224:	499c      	ldr	r1, [pc, #624]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8006226:	4313      	orrs	r3, r2
 8006228:	654b      	str	r3, [r1, #84]	; 0x54
 800622a:	e001      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800622c:	7dfb      	ldrb	r3, [r7, #23]
 800622e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0304 	and.w	r3, r3, #4
 8006238:	2b00      	cmp	r3, #0
 800623a:	d039      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006242:	2b05      	cmp	r3, #5
 8006244:	d820      	bhi.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006246:	a201      	add	r2, pc, #4	; (adr r2, 800624c <HAL_RCCEx_PeriphCLKConfig+0x94c>)
 8006248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624c:	0800628f 	.word	0x0800628f
 8006250:	08006265 	.word	0x08006265
 8006254:	08006277 	.word	0x08006277
 8006258:	0800628f 	.word	0x0800628f
 800625c:	0800628f 	.word	0x0800628f
 8006260:	0800628f 	.word	0x0800628f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	3304      	adds	r3, #4
 8006268:	2101      	movs	r1, #1
 800626a:	4618      	mov	r0, r3
 800626c:	f000 fd76 	bl	8006d5c <RCCEx_PLL2_Config>
 8006270:	4603      	mov	r3, r0
 8006272:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006274:	e00c      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x990>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	3324      	adds	r3, #36	; 0x24
 800627a:	2101      	movs	r1, #1
 800627c:	4618      	mov	r0, r3
 800627e:	f000 fe1f 	bl	8006ec0 <RCCEx_PLL3_Config>
 8006282:	4603      	mov	r3, r0
 8006284:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006286:	e003      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x990>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	75fb      	strb	r3, [r7, #23]
      break;
 800628c:	e000      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x990>
      break;
 800628e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006290:	7dfb      	ldrb	r3, [r7, #23]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10a      	bne.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006296:	4b80      	ldr	r3, [pc, #512]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8006298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800629a:	f023 0207 	bic.w	r2, r3, #7
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062a4:	497c      	ldr	r1, [pc, #496]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	658b      	str	r3, [r1, #88]	; 0x58
 80062aa:	e001      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ac:	7dfb      	ldrb	r3, [r7, #23]
 80062ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0320 	and.w	r3, r3, #32
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d04b      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062c6:	d02e      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0xa26>
 80062c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062cc:	d828      	bhi.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 80062ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062d2:	d02a      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 80062d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062d8:	d822      	bhi.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 80062da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80062de:	d026      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 80062e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80062e4:	d81c      	bhi.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 80062e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062ea:	d010      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80062ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062f0:	d816      	bhi.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d01d      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80062f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062fa:	d111      	bne.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	3304      	adds	r3, #4
 8006300:	2100      	movs	r1, #0
 8006302:	4618      	mov	r0, r3
 8006304:	f000 fd2a 	bl	8006d5c <RCCEx_PLL2_Config>
 8006308:	4603      	mov	r3, r0
 800630a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800630c:	e012      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0xa34>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	3324      	adds	r3, #36	; 0x24
 8006312:	2102      	movs	r1, #2
 8006314:	4618      	mov	r0, r3
 8006316:	f000 fdd3 	bl	8006ec0 <RCCEx_PLL3_Config>
 800631a:	4603      	mov	r3, r0
 800631c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800631e:	e009      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	75fb      	strb	r3, [r7, #23]
      break;
 8006324:	e006      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8006326:	bf00      	nop
 8006328:	e004      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 800632a:	bf00      	nop
 800632c:	e002      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 800632e:	bf00      	nop
 8006330:	e000      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8006332:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006334:	7dfb      	ldrb	r3, [r7, #23]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10a      	bne.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800633a:	4b57      	ldr	r3, [pc, #348]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800633c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800633e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006348:	4953      	ldr	r1, [pc, #332]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800634a:	4313      	orrs	r3, r2
 800634c:	654b      	str	r3, [r1, #84]	; 0x54
 800634e:	e001      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006350:	7dfb      	ldrb	r3, [r7, #23]
 8006352:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635c:	2b00      	cmp	r3, #0
 800635e:	d04b      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006366:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800636a:	d02e      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0xaca>
 800636c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006370:	d828      	bhi.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8006372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006376:	d02a      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0xace>
 8006378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800637c:	d822      	bhi.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 800637e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006382:	d026      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8006384:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006388:	d81c      	bhi.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 800638a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800638e:	d010      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8006390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006394:	d816      	bhi.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8006396:	2b00      	cmp	r3, #0
 8006398:	d01d      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
 800639a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800639e:	d111      	bne.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xac4>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	3304      	adds	r3, #4
 80063a4:	2100      	movs	r1, #0
 80063a6:	4618      	mov	r0, r3
 80063a8:	f000 fcd8 	bl	8006d5c <RCCEx_PLL2_Config>
 80063ac:	4603      	mov	r3, r0
 80063ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80063b0:	e012      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xad8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	3324      	adds	r3, #36	; 0x24
 80063b6:	2102      	movs	r1, #2
 80063b8:	4618      	mov	r0, r3
 80063ba:	f000 fd81 	bl	8006ec0 <RCCEx_PLL3_Config>
 80063be:	4603      	mov	r3, r0
 80063c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80063c2:	e009      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	75fb      	strb	r3, [r7, #23]
      break;
 80063c8:	e006      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 80063ca:	bf00      	nop
 80063cc:	e004      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 80063ce:	bf00      	nop
 80063d0:	e002      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 80063d2:	bf00      	nop
 80063d4:	e000      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 80063d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063d8:	7dfb      	ldrb	r3, [r7, #23]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10a      	bne.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063de:	4b2e      	ldr	r3, [pc, #184]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80063e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063ec:	492a      	ldr	r1, [pc, #168]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	658b      	str	r3, [r1, #88]	; 0x58
 80063f2:	e001      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f4:	7dfb      	ldrb	r3, [r7, #23]
 80063f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006400:	2b00      	cmp	r3, #0
 8006402:	d04d      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800640a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800640e:	d02e      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 8006410:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006414:	d828      	bhi.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8006416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800641a:	d02a      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xb72>
 800641c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006420:	d822      	bhi.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8006422:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006426:	d026      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8006428:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800642c:	d81c      	bhi.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800642e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006432:	d010      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8006434:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006438:	d816      	bhi.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800643a:	2b00      	cmp	r3, #0
 800643c:	d01d      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 800643e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006442:	d111      	bne.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	3304      	adds	r3, #4
 8006448:	2100      	movs	r1, #0
 800644a:	4618      	mov	r0, r3
 800644c:	f000 fc86 	bl	8006d5c <RCCEx_PLL2_Config>
 8006450:	4603      	mov	r3, r0
 8006452:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006454:	e012      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	3324      	adds	r3, #36	; 0x24
 800645a:	2102      	movs	r1, #2
 800645c:	4618      	mov	r0, r3
 800645e:	f000 fd2f 	bl	8006ec0 <RCCEx_PLL3_Config>
 8006462:	4603      	mov	r3, r0
 8006464:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006466:	e009      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	75fb      	strb	r3, [r7, #23]
      break;
 800646c:	e006      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 800646e:	bf00      	nop
 8006470:	e004      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8006472:	bf00      	nop
 8006474:	e002      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8006476:	bf00      	nop
 8006478:	e000      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 800647a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800647c:	7dfb      	ldrb	r3, [r7, #23]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10c      	bne.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006482:	4b05      	ldr	r3, [pc, #20]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8006484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006486:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006490:	4901      	ldr	r1, [pc, #4]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8006492:	4313      	orrs	r3, r2
 8006494:	658b      	str	r3, [r1, #88]	; 0x58
 8006496:	e003      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006498:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800649c:	7dfb      	ldrb	r3, [r7, #23]
 800649e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0308 	and.w	r3, r3, #8
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d01a      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064b6:	d10a      	bne.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	3324      	adds	r3, #36	; 0x24
 80064bc:	2102      	movs	r1, #2
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 fcfe 	bl	8006ec0 <RCCEx_PLL3_Config>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xbce>
        {
          status = HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80064ce:	4b8c      	ldr	r3, [pc, #560]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80064d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064dc:	4988      	ldr	r1, [pc, #544]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0310 	and.w	r3, r3, #16
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d01a      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0xc24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064f8:	d10a      	bne.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	3324      	adds	r3, #36	; 0x24
 80064fe:	2102      	movs	r1, #2
 8006500:	4618      	mov	r0, r3
 8006502:	f000 fcdd 	bl	8006ec0 <RCCEx_PLL3_Config>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d001      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0xc10>
      {
        status = HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006510:	4b7b      	ldr	r3, [pc, #492]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006514:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800651e:	4978      	ldr	r1, [pc, #480]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006520:	4313      	orrs	r3, r2
 8006522:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d034      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006536:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800653a:	d01d      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800653c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006540:	d817      	bhi.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800654a:	d009      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0xc60>
 800654c:	e011      	b.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	3304      	adds	r3, #4
 8006552:	2100      	movs	r1, #0
 8006554:	4618      	mov	r0, r3
 8006556:	f000 fc01 	bl	8006d5c <RCCEx_PLL2_Config>
 800655a:	4603      	mov	r3, r0
 800655c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800655e:	e00c      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	3324      	adds	r3, #36	; 0x24
 8006564:	2102      	movs	r1, #2
 8006566:	4618      	mov	r0, r3
 8006568:	f000 fcaa 	bl	8006ec0 <RCCEx_PLL3_Config>
 800656c:	4603      	mov	r3, r0
 800656e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006570:	e003      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	75fb      	strb	r3, [r7, #23]
      break;
 8006576:	e000      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      break;
 8006578:	bf00      	nop
    }

    if(ret == HAL_OK)
 800657a:	7dfb      	ldrb	r3, [r7, #23]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d10a      	bne.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006580:	4b5f      	ldr	r3, [pc, #380]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006584:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800658e:	495c      	ldr	r1, [pc, #368]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006590:	4313      	orrs	r3, r2
 8006592:	658b      	str	r3, [r1, #88]	; 0x58
 8006594:	e001      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006596:	7dfb      	ldrb	r3, [r7, #23]
 8006598:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d033      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065b0:	d01c      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0xcec>
 80065b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065b6:	d816      	bhi.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0xce6>
 80065b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065bc:	d003      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 80065be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065c2:	d007      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 80065c4:	e00f      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065c6:	4b4e      	ldr	r3, [pc, #312]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80065c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ca:	4a4d      	ldr	r2, [pc, #308]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80065cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80065d2:	e00c      	b.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0xcee>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	3324      	adds	r3, #36	; 0x24
 80065d8:	2101      	movs	r1, #1
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 fc70 	bl	8006ec0 <RCCEx_PLL3_Config>
 80065e0:	4603      	mov	r3, r0
 80065e2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80065e4:	e003      	b.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0xcee>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	75fb      	strb	r3, [r7, #23]
      break;
 80065ea:	e000      	b.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0xcee>
      break;
 80065ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065ee:	7dfb      	ldrb	r3, [r7, #23]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10a      	bne.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065f4:	4b42      	ldr	r3, [pc, #264]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80065f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006602:	493f      	ldr	r1, [pc, #252]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006604:	4313      	orrs	r3, r2
 8006606:	654b      	str	r3, [r1, #84]	; 0x54
 8006608:	e001      	b.n	800660e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800660a:	7dfb      	ldrb	r3, [r7, #23]
 800660c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d029      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800661e:	2b00      	cmp	r3, #0
 8006620:	d003      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xd2a>
 8006622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006626:	d007      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 8006628:	e00f      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800662a:	4b35      	ldr	r3, [pc, #212]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800662c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662e:	4a34      	ldr	r2, [pc, #208]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006634:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006636:	e00b      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	3304      	adds	r3, #4
 800663c:	2102      	movs	r1, #2
 800663e:	4618      	mov	r0, r3
 8006640:	f000 fb8c 	bl	8006d5c <RCCEx_PLL2_Config>
 8006644:	4603      	mov	r3, r0
 8006646:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006648:	e002      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    default:
      ret = HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	75fb      	strb	r3, [r7, #23]
      break;
 800664e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006650:	7dfb      	ldrb	r3, [r7, #23]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d109      	bne.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006656:	4b2a      	ldr	r3, [pc, #168]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800665a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006662:	4927      	ldr	r1, [pc, #156]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006664:	4313      	orrs	r3, r2
 8006666:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006668:	e001      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800666a:	7dfb      	ldrb	r3, [r7, #23]
 800666c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00a      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0xd90>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	3324      	adds	r3, #36	; 0x24
 800667e:	2102      	movs	r1, #2
 8006680:	4618      	mov	r0, r3
 8006682:	f000 fc1d 	bl	8006ec0 <RCCEx_PLL3_Config>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d001      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0xd90>
    {
      status=HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d035      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  {

    switch(PeriphClkInit->RngClockSelection)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066a6:	d017      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 80066a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066ac:	d811      	bhi.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80066ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066b2:	d013      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0xddc>
 80066b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066b8:	d80b      	bhi.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d010      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xde0>
 80066be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066c2:	d106      	bne.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066c4:	4b0e      	ldr	r3, [pc, #56]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80066c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c8:	4a0d      	ldr	r2, [pc, #52]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80066ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80066d0:	e007      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	75fb      	strb	r3, [r7, #23]
      break;
 80066d6:	e004      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 80066d8:	bf00      	nop
 80066da:	e002      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 80066dc:	bf00      	nop
 80066de:	e000      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 80066e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066e2:	7dfb      	ldrb	r3, [r7, #23]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10d      	bne.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0xe04>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066e8:	4b05      	ldr	r3, [pc, #20]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80066ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066f6:	4902      	ldr	r1, [pc, #8]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80066f8:	4313      	orrs	r3, r2
 80066fa:	654b      	str	r3, [r1, #84]	; 0x54
 80066fc:	e004      	b.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 80066fe:	bf00      	nop
 8006700:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006704:	7dfb      	ldrb	r3, [r7, #23]
 8006706:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d008      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006714:	4b31      	ldr	r3, [pc, #196]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8006716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006718:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006720:	492e      	ldr	r1, [pc, #184]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8006722:	4313      	orrs	r3, r2
 8006724:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d009      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0xe46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006732:	4b2a      	ldr	r3, [pc, #168]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006740:	4926      	ldr	r1, [pc, #152]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8006742:	4313      	orrs	r3, r2
 8006744:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d008      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006752:	4b22      	ldr	r3, [pc, #136]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8006754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006756:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800675e:	491f      	ldr	r1, [pc, #124]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8006760:	4313      	orrs	r3, r2
 8006762:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00d      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0xe8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006770:	4b1a      	ldr	r3, [pc, #104]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	4a19      	ldr	r2, [pc, #100]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8006776:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800677a:	6113      	str	r3, [r2, #16]
 800677c:	4b17      	ldr	r3, [pc, #92]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800677e:	691a      	ldr	r2, [r3, #16]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006786:	4915      	ldr	r1, [pc, #84]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8006788:	4313      	orrs	r3, r2
 800678a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	da08      	bge.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0xea6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006794:	4b11      	ldr	r3, [pc, #68]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8006796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006798:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a0:	490e      	ldr	r1, [pc, #56]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80067a2:	4313      	orrs	r3, r2
 80067a4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d009      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xec6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80067b2:	4b0a      	ldr	r3, [pc, #40]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80067b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067c0:	4906      	ldr	r1, [pc, #24]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80067c6:	7dbb      	ldrb	r3, [r7, #22]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d101      	bne.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>
  {
    return HAL_OK;
 80067cc:	2300      	movs	r3, #0
 80067ce:	e000      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  }
  return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3718      	adds	r7, #24
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	58024400 	.word	0x58024400

080067e0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80067e4:	f7fe ffee 	bl	80057c4 <HAL_RCC_GetHCLKFreq>
 80067e8:	4602      	mov	r2, r0
 80067ea:	4b06      	ldr	r3, [pc, #24]	; (8006804 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	091b      	lsrs	r3, r3, #4
 80067f0:	f003 0307 	and.w	r3, r3, #7
 80067f4:	4904      	ldr	r1, [pc, #16]	; (8006808 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80067f6:	5ccb      	ldrb	r3, [r1, r3]
 80067f8:	f003 031f 	and.w	r3, r3, #31
 80067fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006800:	4618      	mov	r0, r3
 8006802:	bd80      	pop	{r7, pc}
 8006804:	58024400 	.word	0x58024400
 8006808:	0802ea9c 	.word	0x0802ea9c

0800680c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800680c:	b480      	push	{r7}
 800680e:	b089      	sub	sp, #36	; 0x24
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006814:	4ba1      	ldr	r3, [pc, #644]	; (8006a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006818:	f003 0303 	and.w	r3, r3, #3
 800681c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800681e:	4b9f      	ldr	r3, [pc, #636]	; (8006a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006822:	0b1b      	lsrs	r3, r3, #12
 8006824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006828:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800682a:	4b9c      	ldr	r3, [pc, #624]	; (8006a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800682c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682e:	091b      	lsrs	r3, r3, #4
 8006830:	f003 0301 	and.w	r3, r3, #1
 8006834:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006836:	4b99      	ldr	r3, [pc, #612]	; (8006a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800683a:	08db      	lsrs	r3, r3, #3
 800683c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	fb02 f303 	mul.w	r3, r2, r3
 8006846:	ee07 3a90 	vmov	s15, r3
 800684a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800684e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	2b00      	cmp	r3, #0
 8006856:	f000 8111 	beq.w	8006a7c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	2b02      	cmp	r3, #2
 800685e:	f000 8083 	beq.w	8006968 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	2b02      	cmp	r3, #2
 8006866:	f200 80a1 	bhi.w	80069ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d003      	beq.n	8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d056      	beq.n	8006924 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006876:	e099      	b.n	80069ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006878:	4b88      	ldr	r3, [pc, #544]	; (8006a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0320 	and.w	r3, r3, #32
 8006880:	2b00      	cmp	r3, #0
 8006882:	d02d      	beq.n	80068e0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006884:	4b85      	ldr	r3, [pc, #532]	; (8006a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	08db      	lsrs	r3, r3, #3
 800688a:	f003 0303 	and.w	r3, r3, #3
 800688e:	4a84      	ldr	r2, [pc, #528]	; (8006aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006890:	fa22 f303 	lsr.w	r3, r2, r3
 8006894:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	ee07 3a90 	vmov	s15, r3
 800689c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	ee07 3a90 	vmov	s15, r3
 80068a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ae:	4b7b      	ldr	r3, [pc, #492]	; (8006a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068b6:	ee07 3a90 	vmov	s15, r3
 80068ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068be:	ed97 6a03 	vldr	s12, [r7, #12]
 80068c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068da:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80068de:	e087      	b.n	80069f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	ee07 3a90 	vmov	s15, r3
 80068e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80068ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068f2:	4b6a      	ldr	r3, [pc, #424]	; (8006a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068fa:	ee07 3a90 	vmov	s15, r3
 80068fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006902:	ed97 6a03 	vldr	s12, [r7, #12]
 8006906:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800690a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800690e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006912:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800691a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800691e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006922:	e065      	b.n	80069f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	ee07 3a90 	vmov	s15, r3
 800692a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800692e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006aac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006936:	4b59      	ldr	r3, [pc, #356]	; (8006a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800693e:	ee07 3a90 	vmov	s15, r3
 8006942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006946:	ed97 6a03 	vldr	s12, [r7, #12]
 800694a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800694e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006956:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800695a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800695e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006962:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006966:	e043      	b.n	80069f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	ee07 3a90 	vmov	s15, r3
 800696e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006972:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800697a:	4b48      	ldr	r3, [pc, #288]	; (8006a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800697c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006982:	ee07 3a90 	vmov	s15, r3
 8006986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800698a:	ed97 6a03 	vldr	s12, [r7, #12]
 800698e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800699a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800699e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069aa:	e021      	b.n	80069f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	ee07 3a90 	vmov	s15, r3
 80069b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006aac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80069ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069be:	4b37      	ldr	r3, [pc, #220]	; (8006a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069c6:	ee07 3a90 	vmov	s15, r3
 80069ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80069d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80069f0:	4b2a      	ldr	r3, [pc, #168]	; (8006a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f4:	0a5b      	lsrs	r3, r3, #9
 80069f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069fa:	ee07 3a90 	vmov	s15, r3
 80069fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a16:	ee17 2a90 	vmov	r2, s15
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006a1e:	4b1f      	ldr	r3, [pc, #124]	; (8006a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a22:	0c1b      	lsrs	r3, r3, #16
 8006a24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a28:	ee07 3a90 	vmov	s15, r3
 8006a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a38:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a44:	ee17 2a90 	vmov	r2, s15
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006a4c:	4b13      	ldr	r3, [pc, #76]	; (8006a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a50:	0e1b      	lsrs	r3, r3, #24
 8006a52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a56:	ee07 3a90 	vmov	s15, r3
 8006a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a66:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a72:	ee17 2a90 	vmov	r2, s15
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006a7a:	e008      	b.n	8006a8e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	609a      	str	r2, [r3, #8]
}
 8006a8e:	bf00      	nop
 8006a90:	3724      	adds	r7, #36	; 0x24
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	58024400 	.word	0x58024400
 8006aa0:	03d09000 	.word	0x03d09000
 8006aa4:	46000000 	.word	0x46000000
 8006aa8:	4c742400 	.word	0x4c742400
 8006aac:	4a742400 	.word	0x4a742400
 8006ab0:	4bbebc20 	.word	0x4bbebc20

08006ab4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b089      	sub	sp, #36	; 0x24
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006abc:	4ba1      	ldr	r3, [pc, #644]	; (8006d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac0:	f003 0303 	and.w	r3, r3, #3
 8006ac4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006ac6:	4b9f      	ldr	r3, [pc, #636]	; (8006d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aca:	0d1b      	lsrs	r3, r3, #20
 8006acc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ad0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006ad2:	4b9c      	ldr	r3, [pc, #624]	; (8006d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad6:	0a1b      	lsrs	r3, r3, #8
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006ade:	4b99      	ldr	r3, [pc, #612]	; (8006d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae2:	08db      	lsrs	r3, r3, #3
 8006ae4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	fb02 f303 	mul.w	r3, r2, r3
 8006aee:	ee07 3a90 	vmov	s15, r3
 8006af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006af6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f000 8111 	beq.w	8006d24 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	f000 8083 	beq.w	8006c10 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	f200 80a1 	bhi.w	8006c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d003      	beq.n	8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d056      	beq.n	8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006b1e:	e099      	b.n	8006c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b20:	4b88      	ldr	r3, [pc, #544]	; (8006d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0320 	and.w	r3, r3, #32
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d02d      	beq.n	8006b88 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b2c:	4b85      	ldr	r3, [pc, #532]	; (8006d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	08db      	lsrs	r3, r3, #3
 8006b32:	f003 0303 	and.w	r3, r3, #3
 8006b36:	4a84      	ldr	r2, [pc, #528]	; (8006d48 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006b38:	fa22 f303 	lsr.w	r3, r2, r3
 8006b3c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	ee07 3a90 	vmov	s15, r3
 8006b44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	ee07 3a90 	vmov	s15, r3
 8006b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b56:	4b7b      	ldr	r3, [pc, #492]	; (8006d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b5e:	ee07 3a90 	vmov	s15, r3
 8006b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b6a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006d4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b82:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006b86:	e087      	b.n	8006c98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	ee07 3a90 	vmov	s15, r3
 8006b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b92:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006d50 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b9a:	4b6a      	ldr	r3, [pc, #424]	; (8006d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ba2:	ee07 3a90 	vmov	s15, r3
 8006ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006baa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bae:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006d4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bca:	e065      	b.n	8006c98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	ee07 3a90 	vmov	s15, r3
 8006bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006d54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bde:	4b59      	ldr	r3, [pc, #356]	; (8006d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be6:	ee07 3a90 	vmov	s15, r3
 8006bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bee:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bf2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006d4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c0e:	e043      	b.n	8006c98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	ee07 3a90 	vmov	s15, r3
 8006c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c1a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006d58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c22:	4b48      	ldr	r3, [pc, #288]	; (8006d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c2a:	ee07 3a90 	vmov	s15, r3
 8006c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c32:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c36:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006d4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c52:	e021      	b.n	8006c98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	ee07 3a90 	vmov	s15, r3
 8006c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c5e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006d54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c66:	4b37      	ldr	r3, [pc, #220]	; (8006d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c6e:	ee07 3a90 	vmov	s15, r3
 8006c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c76:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c7a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006d4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c96:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006c98:	4b2a      	ldr	r3, [pc, #168]	; (8006d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9c:	0a5b      	lsrs	r3, r3, #9
 8006c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ca2:	ee07 3a90 	vmov	s15, r3
 8006ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006caa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cbe:	ee17 2a90 	vmov	r2, s15
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006cc6:	4b1f      	ldr	r3, [pc, #124]	; (8006d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cca:	0c1b      	lsrs	r3, r3, #16
 8006ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cd0:	ee07 3a90 	vmov	s15, r3
 8006cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ce0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ce4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ce8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cec:	ee17 2a90 	vmov	r2, s15
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006cf4:	4b13      	ldr	r3, [pc, #76]	; (8006d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf8:	0e1b      	lsrs	r3, r3, #24
 8006cfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cfe:	ee07 3a90 	vmov	s15, r3
 8006d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d1a:	ee17 2a90 	vmov	r2, s15
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006d22:	e008      	b.n	8006d36 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	609a      	str	r2, [r3, #8]
}
 8006d36:	bf00      	nop
 8006d38:	3724      	adds	r7, #36	; 0x24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	58024400 	.word	0x58024400
 8006d48:	03d09000 	.word	0x03d09000
 8006d4c:	46000000 	.word	0x46000000
 8006d50:	4c742400 	.word	0x4c742400
 8006d54:	4a742400 	.word	0x4a742400
 8006d58:	4bbebc20 	.word	0x4bbebc20

08006d5c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d66:	2300      	movs	r3, #0
 8006d68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d6a:	4b53      	ldr	r3, [pc, #332]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d6e:	f003 0303 	and.w	r3, r3, #3
 8006d72:	2b03      	cmp	r3, #3
 8006d74:	d101      	bne.n	8006d7a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e099      	b.n	8006eae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006d7a:	4b4f      	ldr	r3, [pc, #316]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a4e      	ldr	r2, [pc, #312]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006d80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d86:	f7fa fb59 	bl	800143c <HAL_GetTick>
 8006d8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d8c:	e008      	b.n	8006da0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006d8e:	f7fa fb55 	bl	800143c <HAL_GetTick>
 8006d92:	4602      	mov	r2, r0
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d901      	bls.n	8006da0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e086      	b.n	8006eae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006da0:	4b45      	ldr	r3, [pc, #276]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1f0      	bne.n	8006d8e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006dac:	4b42      	ldr	r3, [pc, #264]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	031b      	lsls	r3, r3, #12
 8006dba:	493f      	ldr	r1, [pc, #252]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	628b      	str	r3, [r1, #40]	; 0x28
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	025b      	lsls	r3, r3, #9
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	041b      	lsls	r3, r3, #16
 8006dde:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006de2:	431a      	orrs	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	3b01      	subs	r3, #1
 8006dea:	061b      	lsls	r3, r3, #24
 8006dec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006df0:	4931      	ldr	r1, [pc, #196]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006df6:	4b30      	ldr	r3, [pc, #192]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	492d      	ldr	r1, [pc, #180]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006e04:	4313      	orrs	r3, r2
 8006e06:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006e08:	4b2b      	ldr	r3, [pc, #172]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0c:	f023 0220 	bic.w	r2, r3, #32
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	4928      	ldr	r1, [pc, #160]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006e1a:	4b27      	ldr	r3, [pc, #156]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1e:	4a26      	ldr	r2, [pc, #152]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006e20:	f023 0310 	bic.w	r3, r3, #16
 8006e24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006e26:	4b24      	ldr	r3, [pc, #144]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006e28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e2a:	4b24      	ldr	r3, [pc, #144]	; (8006ebc <RCCEx_PLL2_Config+0x160>)
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	69d2      	ldr	r2, [r2, #28]
 8006e32:	00d2      	lsls	r2, r2, #3
 8006e34:	4920      	ldr	r1, [pc, #128]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006e3a:	4b1f      	ldr	r3, [pc, #124]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3e:	4a1e      	ldr	r2, [pc, #120]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006e40:	f043 0310 	orr.w	r3, r3, #16
 8006e44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d106      	bne.n	8006e5a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006e4c:	4b1a      	ldr	r3, [pc, #104]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e50:	4a19      	ldr	r2, [pc, #100]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006e52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e58:	e00f      	b.n	8006e7a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d106      	bne.n	8006e6e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006e60:	4b15      	ldr	r3, [pc, #84]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e64:	4a14      	ldr	r2, [pc, #80]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006e66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e6c:	e005      	b.n	8006e7a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006e6e:	4b12      	ldr	r3, [pc, #72]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e72:	4a11      	ldr	r2, [pc, #68]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006e74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e78:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006e7a:	4b0f      	ldr	r3, [pc, #60]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a0e      	ldr	r2, [pc, #56]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006e80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e86:	f7fa fad9 	bl	800143c <HAL_GetTick>
 8006e8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e8c:	e008      	b.n	8006ea0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006e8e:	f7fa fad5 	bl	800143c <HAL_GetTick>
 8006e92:	4602      	mov	r2, r0
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	1ad3      	subs	r3, r2, r3
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d901      	bls.n	8006ea0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e006      	b.n	8006eae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ea0:	4b05      	ldr	r3, [pc, #20]	; (8006eb8 <RCCEx_PLL2_Config+0x15c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d0f0      	beq.n	8006e8e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	58024400 	.word	0x58024400
 8006ebc:	ffff0007 	.word	0xffff0007

08006ec0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ece:	4b53      	ldr	r3, [pc, #332]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed2:	f003 0303 	and.w	r3, r3, #3
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	d101      	bne.n	8006ede <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e099      	b.n	8007012 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006ede:	4b4f      	ldr	r3, [pc, #316]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a4e      	ldr	r2, [pc, #312]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ee8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eea:	f7fa faa7 	bl	800143c <HAL_GetTick>
 8006eee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ef0:	e008      	b.n	8006f04 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006ef2:	f7fa faa3 	bl	800143c <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d901      	bls.n	8006f04 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e086      	b.n	8007012 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f04:	4b45      	ldr	r3, [pc, #276]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1f0      	bne.n	8006ef2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006f10:	4b42      	ldr	r3, [pc, #264]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f14:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	051b      	lsls	r3, r3, #20
 8006f1e:	493f      	ldr	r1, [pc, #252]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006f20:	4313      	orrs	r3, r2
 8006f22:	628b      	str	r3, [r1, #40]	; 0x28
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	3b01      	subs	r3, #1
 8006f34:	025b      	lsls	r3, r3, #9
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	431a      	orrs	r2, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	041b      	lsls	r3, r3, #16
 8006f42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006f46:	431a      	orrs	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	061b      	lsls	r3, r3, #24
 8006f50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006f54:	4931      	ldr	r1, [pc, #196]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006f56:	4313      	orrs	r3, r2
 8006f58:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006f5a:	4b30      	ldr	r3, [pc, #192]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	695b      	ldr	r3, [r3, #20]
 8006f66:	492d      	ldr	r1, [pc, #180]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006f6c:	4b2b      	ldr	r3, [pc, #172]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f70:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	699b      	ldr	r3, [r3, #24]
 8006f78:	4928      	ldr	r1, [pc, #160]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006f7e:	4b27      	ldr	r3, [pc, #156]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f82:	4a26      	ldr	r2, [pc, #152]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006f84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006f8a:	4b24      	ldr	r3, [pc, #144]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f8e:	4b24      	ldr	r3, [pc, #144]	; (8007020 <RCCEx_PLL3_Config+0x160>)
 8006f90:	4013      	ands	r3, r2
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	69d2      	ldr	r2, [r2, #28]
 8006f96:	00d2      	lsls	r2, r2, #3
 8006f98:	4920      	ldr	r1, [pc, #128]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006f9e:	4b1f      	ldr	r3, [pc, #124]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa2:	4a1e      	ldr	r2, [pc, #120]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d106      	bne.n	8006fbe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006fb0:	4b1a      	ldr	r3, [pc, #104]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb4:	4a19      	ldr	r2, [pc, #100]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006fb6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006fba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006fbc:	e00f      	b.n	8006fde <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d106      	bne.n	8006fd2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006fc4:	4b15      	ldr	r3, [pc, #84]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc8:	4a14      	ldr	r2, [pc, #80]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006fca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006fce:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006fd0:	e005      	b.n	8006fde <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006fd2:	4b12      	ldr	r3, [pc, #72]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd6:	4a11      	ldr	r2, [pc, #68]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006fd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006fdc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006fde:	4b0f      	ldr	r3, [pc, #60]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a0e      	ldr	r2, [pc, #56]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8006fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fe8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fea:	f7fa fa27 	bl	800143c <HAL_GetTick>
 8006fee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006ff0:	e008      	b.n	8007004 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006ff2:	f7fa fa23 	bl	800143c <HAL_GetTick>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d901      	bls.n	8007004 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	e006      	b.n	8007012 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007004:	4b05      	ldr	r3, [pc, #20]	; (800701c <RCCEx_PLL3_Config+0x15c>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d0f0      	beq.n	8006ff2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007010:	7bfb      	ldrb	r3, [r7, #15]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	58024400 	.word	0x58024400
 8007020:	ffff0007 	.word	0xffff0007

08007024 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d067      	beq.n	8007106 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800703c:	b2db      	uxtb	r3, r3
 800703e:	2b00      	cmp	r3, #0
 8007040:	d106      	bne.n	8007050 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f01a ffa2 	bl	8021f94 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2202      	movs	r2, #2
 8007054:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	22ca      	movs	r2, #202	; 0xca
 800705e:	625a      	str	r2, [r3, #36]	; 0x24
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2253      	movs	r2, #83	; 0x53
 8007066:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fa49 	bl	8007500 <RTC_EnterInitMode>
 800706e:	4603      	mov	r3, r0
 8007070:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8007072:	7bfb      	ldrb	r3, [r7, #15]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d13b      	bne.n	80070f0 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	6899      	ldr	r1, [r3, #8]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	4b23      	ldr	r3, [pc, #140]	; (8007110 <HAL_RTC_Init+0xec>)
 8007084:	400b      	ands	r3, r1
 8007086:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	6899      	ldr	r1, [r3, #8]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	685a      	ldr	r2, [r3, #4]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	431a      	orrs	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	431a      	orrs	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	0419      	lsls	r1, r3, #16
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	68da      	ldr	r2, [r3, #12]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	430a      	orrs	r2, r1
 80070b6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fa55 	bl	8007568 <RTC_ExitInitMode>
 80070be:	4603      	mov	r3, r0
 80070c0:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 80070c2:	7bfb      	ldrb	r3, [r7, #15]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d113      	bne.n	80070f0 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f022 0203 	bic.w	r2, r2, #3
 80070d6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	69da      	ldr	r2, [r3, #28]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	431a      	orrs	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	430a      	orrs	r2, r1
 80070ee:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	22ff      	movs	r2, #255	; 0xff
 80070f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d103      	bne.n	8007106 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8007106:	7bfb      	ldrb	r3, [r7, #15]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3710      	adds	r7, #16
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	ff8fffbf 	.word	0xff8fffbf

08007114 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007114:	b590      	push	{r4, r7, lr}
 8007116:	b087      	sub	sp, #28
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d101      	bne.n	800712e <HAL_RTC_SetTime+0x1a>
 800712a:	2302      	movs	r3, #2
 800712c:	e089      	b.n	8007242 <HAL_RTC_SetTime+0x12e>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2201      	movs	r2, #1
 8007132:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2202      	movs	r2, #2
 800713a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	22ca      	movs	r2, #202	; 0xca
 8007144:	625a      	str	r2, [r3, #36]	; 0x24
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2253      	movs	r2, #83	; 0x53
 800714c:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f000 f9d6 	bl	8007500 <RTC_EnterInitMode>
 8007154:	4603      	mov	r3, r0
 8007156:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007158:	7cfb      	ldrb	r3, [r7, #19]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d161      	bne.n	8007222 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d126      	bne.n	80071b2 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800716e:	2b00      	cmp	r3, #0
 8007170:	d102      	bne.n	8007178 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	2200      	movs	r2, #0
 8007176:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	4618      	mov	r0, r3
 800717e:	f000 fa31 	bl	80075e4 <RTC_ByteToBcd2>
 8007182:	4603      	mov	r3, r0
 8007184:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	785b      	ldrb	r3, [r3, #1]
 800718a:	4618      	mov	r0, r3
 800718c:	f000 fa2a 	bl	80075e4 <RTC_ByteToBcd2>
 8007190:	4603      	mov	r3, r0
 8007192:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007194:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	789b      	ldrb	r3, [r3, #2]
 800719a:	4618      	mov	r0, r3
 800719c:	f000 fa22 	bl	80075e4 <RTC_ByteToBcd2>
 80071a0:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80071a2:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	78db      	ldrb	r3, [r3, #3]
 80071aa:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80071ac:	4313      	orrs	r3, r2
 80071ae:	617b      	str	r3, [r7, #20]
 80071b0:	e018      	b.n	80071e4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d102      	bne.n	80071c6 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	2200      	movs	r2, #0
 80071c4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	785b      	ldrb	r3, [r3, #1]
 80071d0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80071d2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80071d8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	78db      	ldrb	r3, [r3, #3]
 80071de:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80071e0:	4313      	orrs	r3, r2
 80071e2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	6979      	ldr	r1, [r7, #20]
 80071ea:	4b18      	ldr	r3, [pc, #96]	; (800724c <HAL_RTC_SetTime+0x138>)
 80071ec:	400b      	ands	r3, r1
 80071ee:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	689a      	ldr	r2, [r3, #8]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80071fe:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6899      	ldr	r1, [r3, #8]
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	68da      	ldr	r2, [r3, #12]
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	431a      	orrs	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	430a      	orrs	r2, r1
 8007216:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f000 f9a5 	bl	8007568 <RTC_ExitInitMode>
 800721e:	4603      	mov	r3, r0
 8007220:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	22ff      	movs	r2, #255	; 0xff
 8007228:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800722a:	7cfb      	ldrb	r3, [r7, #19]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d103      	bne.n	8007238 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007240:	7cfb      	ldrb	r3, [r7, #19]
}
 8007242:	4618      	mov	r0, r3
 8007244:	371c      	adds	r7, #28
 8007246:	46bd      	mov	sp, r7
 8007248:	bd90      	pop	{r4, r7, pc}
 800724a:	bf00      	nop
 800724c:	007f7f7f 	.word	0x007f7f7f

08007250 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b086      	sub	sp, #24
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	4b22      	ldr	r3, [pc, #136]	; (8007304 <HAL_RTC_GetTime+0xb4>)
 800727c:	4013      	ands	r3, r2
 800727e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	0c1b      	lsrs	r3, r3, #16
 8007284:	b2db      	uxtb	r3, r3
 8007286:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800728a:	b2da      	uxtb	r2, r3
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	0a1b      	lsrs	r3, r3, #8
 8007294:	b2db      	uxtb	r3, r3
 8007296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800729a:	b2da      	uxtb	r2, r3
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	0d9b      	lsrs	r3, r3, #22
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	f003 0301 	and.w	r3, r3, #1
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d11a      	bne.n	80072fa <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	4618      	mov	r0, r3
 80072ca:	f000 f9ab 	bl	8007624 <RTC_Bcd2ToByte>
 80072ce:	4603      	mov	r3, r0
 80072d0:	461a      	mov	r2, r3
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	785b      	ldrb	r3, [r3, #1]
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 f9a2 	bl	8007624 <RTC_Bcd2ToByte>
 80072e0:	4603      	mov	r3, r0
 80072e2:	461a      	mov	r2, r3
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	789b      	ldrb	r3, [r3, #2]
 80072ec:	4618      	mov	r0, r3
 80072ee:	f000 f999 	bl	8007624 <RTC_Bcd2ToByte>
 80072f2:	4603      	mov	r3, r0
 80072f4:	461a      	mov	r2, r3
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3718      	adds	r7, #24
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	007f7f7f 	.word	0x007f7f7f

08007308 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007308:	b590      	push	{r4, r7, lr}
 800730a:	b087      	sub	sp, #28
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f893 3020 	ldrb.w	r3, [r3, #32]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d101      	bne.n	8007322 <HAL_RTC_SetDate+0x1a>
 800731e:	2302      	movs	r3, #2
 8007320:	e073      	b.n	800740a <HAL_RTC_SetDate+0x102>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2201      	movs	r2, #1
 8007326:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2202      	movs	r2, #2
 800732e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d10e      	bne.n	8007356 <HAL_RTC_SetDate+0x4e>
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	785b      	ldrb	r3, [r3, #1]
 800733c:	f003 0310 	and.w	r3, r3, #16
 8007340:	2b00      	cmp	r3, #0
 8007342:	d008      	beq.n	8007356 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	785b      	ldrb	r3, [r3, #1]
 8007348:	f023 0310 	bic.w	r3, r3, #16
 800734c:	b2db      	uxtb	r3, r3
 800734e:	330a      	adds	r3, #10
 8007350:	b2da      	uxtb	r2, r3
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d11c      	bne.n	8007396 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	78db      	ldrb	r3, [r3, #3]
 8007360:	4618      	mov	r0, r3
 8007362:	f000 f93f 	bl	80075e4 <RTC_ByteToBcd2>
 8007366:	4603      	mov	r3, r0
 8007368:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	785b      	ldrb	r3, [r3, #1]
 800736e:	4618      	mov	r0, r3
 8007370:	f000 f938 	bl	80075e4 <RTC_ByteToBcd2>
 8007374:	4603      	mov	r3, r0
 8007376:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007378:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	789b      	ldrb	r3, [r3, #2]
 800737e:	4618      	mov	r0, r3
 8007380:	f000 f930 	bl	80075e4 <RTC_ByteToBcd2>
 8007384:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007386:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007390:	4313      	orrs	r3, r2
 8007392:	617b      	str	r3, [r7, #20]
 8007394:	e00e      	b.n	80073b4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	78db      	ldrb	r3, [r3, #3]
 800739a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	785b      	ldrb	r3, [r3, #1]
 80073a0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80073a2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80073a8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80073b0:	4313      	orrs	r3, r2
 80073b2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	22ca      	movs	r2, #202	; 0xca
 80073ba:	625a      	str	r2, [r3, #36]	; 0x24
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2253      	movs	r2, #83	; 0x53
 80073c2:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f000 f89b 	bl	8007500 <RTC_EnterInitMode>
 80073ca:	4603      	mov	r3, r0
 80073cc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80073ce:	7cfb      	ldrb	r3, [r7, #19]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d10a      	bne.n	80073ea <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	6979      	ldr	r1, [r7, #20]
 80073da:	4b0e      	ldr	r3, [pc, #56]	; (8007414 <HAL_RTC_SetDate+0x10c>)
 80073dc:	400b      	ands	r3, r1
 80073de:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f000 f8c1 	bl	8007568 <RTC_ExitInitMode>
 80073e6:	4603      	mov	r3, r0
 80073e8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	22ff      	movs	r2, #255	; 0xff
 80073f0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80073f2:	7cfb      	ldrb	r3, [r7, #19]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d103      	bne.n	8007400 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007408:	7cfb      	ldrb	r3, [r7, #19]


}
 800740a:	4618      	mov	r0, r3
 800740c:	371c      	adds	r7, #28
 800740e:	46bd      	mov	sp, r7
 8007410:	bd90      	pop	{r4, r7, pc}
 8007412:	bf00      	nop
 8007414:	00ffff3f 	.word	0x00ffff3f

08007418 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	685a      	ldr	r2, [r3, #4]
 800742a:	4b21      	ldr	r3, [pc, #132]	; (80074b0 <HAL_RTC_GetDate+0x98>)
 800742c:	4013      	ands	r3, r2
 800742e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	0c1b      	lsrs	r3, r3, #16
 8007434:	b2da      	uxtb	r2, r3
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	0a1b      	lsrs	r3, r3, #8
 800743e:	b2db      	uxtb	r3, r3
 8007440:	f003 031f 	and.w	r3, r3, #31
 8007444:	b2da      	uxtb	r2, r3
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	b2db      	uxtb	r3, r3
 800744e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007452:	b2da      	uxtb	r2, r3
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	0b5b      	lsrs	r3, r3, #13
 800745c:	b2db      	uxtb	r3, r3
 800745e:	f003 0307 	and.w	r3, r3, #7
 8007462:	b2da      	uxtb	r2, r3
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d11a      	bne.n	80074a4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	78db      	ldrb	r3, [r3, #3]
 8007472:	4618      	mov	r0, r3
 8007474:	f000 f8d6 	bl	8007624 <RTC_Bcd2ToByte>
 8007478:	4603      	mov	r3, r0
 800747a:	461a      	mov	r2, r3
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	785b      	ldrb	r3, [r3, #1]
 8007484:	4618      	mov	r0, r3
 8007486:	f000 f8cd 	bl	8007624 <RTC_Bcd2ToByte>
 800748a:	4603      	mov	r3, r0
 800748c:	461a      	mov	r2, r3
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	789b      	ldrb	r3, [r3, #2]
 8007496:	4618      	mov	r0, r3
 8007498:	f000 f8c4 	bl	8007624 <RTC_Bcd2ToByte>
 800749c:	4603      	mov	r3, r0
 800749e:	461a      	mov	r2, r3
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3718      	adds	r7, #24
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	00ffff3f 	.word	0x00ffff3f

080074b4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68da      	ldr	r2, [r3, #12]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80074ca:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 80074cc:	f7f9 ffb6 	bl	800143c <HAL_GetTick>
 80074d0:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80074d2:	e009      	b.n	80074e8 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80074d4:	f7f9 ffb2 	bl	800143c <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074e2:	d901      	bls.n	80074e8 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e007      	b.n	80074f8 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	f003 0320 	and.w	r3, r3, #32
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d0ee      	beq.n	80074d4 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007508:	2300      	movs	r3, #0
 800750a:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007516:	2b00      	cmp	r3, #0
 8007518:	d120      	bne.n	800755c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f04f 32ff 	mov.w	r2, #4294967295
 8007522:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007524:	f7f9 ff8a 	bl	800143c <HAL_GetTick>
 8007528:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800752a:	e00d      	b.n	8007548 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800752c:	f7f9 ff86 	bl	800143c <HAL_GetTick>
 8007530:	4602      	mov	r2, r0
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800753a:	d905      	bls.n	8007548 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800753c:	2303      	movs	r3, #3
 800753e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2203      	movs	r2, #3
 8007544:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007552:	2b00      	cmp	r3, #0
 8007554:	d102      	bne.n	800755c <RTC_EnterInitMode+0x5c>
 8007556:	7bfb      	ldrb	r3, [r7, #15]
 8007558:	2b03      	cmp	r3, #3
 800755a:	d1e7      	bne.n	800752c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800755c:	7bfb      	ldrb	r3, [r7, #15]
}
 800755e:	4618      	mov	r0, r3
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
	...

08007568 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007570:	2300      	movs	r3, #0
 8007572:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8007574:	4b1a      	ldr	r3, [pc, #104]	; (80075e0 <RTC_ExitInitMode+0x78>)
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	4a19      	ldr	r2, [pc, #100]	; (80075e0 <RTC_ExitInitMode+0x78>)
 800757a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800757e:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007580:	4b17      	ldr	r3, [pc, #92]	; (80075e0 <RTC_ExitInitMode+0x78>)
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	f003 0320 	and.w	r3, r3, #32
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10c      	bne.n	80075a6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f7ff ff91 	bl	80074b4 <HAL_RTC_WaitForSynchro>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d01e      	beq.n	80075d6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2203      	movs	r2, #3
 800759c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80075a0:	2303      	movs	r3, #3
 80075a2:	73fb      	strb	r3, [r7, #15]
 80075a4:	e017      	b.n	80075d6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80075a6:	4b0e      	ldr	r3, [pc, #56]	; (80075e0 <RTC_ExitInitMode+0x78>)
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	4a0d      	ldr	r2, [pc, #52]	; (80075e0 <RTC_ExitInitMode+0x78>)
 80075ac:	f023 0320 	bic.w	r3, r3, #32
 80075b0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7ff ff7e 	bl	80074b4 <HAL_RTC_WaitForSynchro>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d005      	beq.n	80075ca <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2203      	movs	r2, #3
 80075c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80075ca:	4b05      	ldr	r3, [pc, #20]	; (80075e0 <RTC_ExitInitMode+0x78>)
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	4a04      	ldr	r2, [pc, #16]	; (80075e0 <RTC_ExitInitMode+0x78>)
 80075d0:	f043 0320 	orr.w	r3, r3, #32
 80075d4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80075d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	58004000 	.word	0x58004000

080075e4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	4603      	mov	r3, r0
 80075ec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80075ee:	2300      	movs	r3, #0
 80075f0:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 80075f2:	79fb      	ldrb	r3, [r7, #7]
 80075f4:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 80075f6:	e005      	b.n	8007604 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	3301      	adds	r3, #1
 80075fc:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 80075fe:	7afb      	ldrb	r3, [r7, #11]
 8007600:	3b0a      	subs	r3, #10
 8007602:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8007604:	7afb      	ldrb	r3, [r7, #11]
 8007606:	2b09      	cmp	r3, #9
 8007608:	d8f6      	bhi.n	80075f8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	b2db      	uxtb	r3, r3
 800760e:	011b      	lsls	r3, r3, #4
 8007610:	b2da      	uxtb	r2, r3
 8007612:	7afb      	ldrb	r3, [r7, #11]
 8007614:	4313      	orrs	r3, r2
 8007616:	b2db      	uxtb	r3, r3
}
 8007618:	4618      	mov	r0, r3
 800761a:	3714      	adds	r7, #20
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	4603      	mov	r3, r0
 800762c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800762e:	79fb      	ldrb	r3, [r7, #7]
 8007630:	091b      	lsrs	r3, r3, #4
 8007632:	b2db      	uxtb	r3, r3
 8007634:	461a      	mov	r2, r3
 8007636:	0092      	lsls	r2, r2, #2
 8007638:	4413      	add	r3, r2
 800763a:	005b      	lsls	r3, r3, #1
 800763c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800763e:	79fb      	ldrb	r3, [r7, #7]
 8007640:	f003 030f 	and.w	r3, r3, #15
 8007644:	b2da      	uxtb	r2, r3
 8007646:	7bfb      	ldrb	r3, [r7, #15]
 8007648:	4413      	add	r3, r2
 800764a:	b2db      	uxtb	r3, r3
}
 800764c:	4618      	mov	r0, r3
 800764e:	3714      	adds	r7, #20
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d101      	bne.n	800766a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e049      	b.n	80076fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	d106      	bne.n	8007684 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f01a fd30 	bl	80220e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2202      	movs	r2, #2
 8007688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	3304      	adds	r3, #4
 8007694:	4619      	mov	r1, r3
 8007696:	4610      	mov	r0, r2
 8007698:	f000 faee 	bl	8007c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
	...

08007708 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007716:	b2db      	uxtb	r3, r3
 8007718:	2b01      	cmp	r3, #1
 800771a:	d001      	beq.n	8007720 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	e054      	b.n	80077ca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2202      	movs	r2, #2
 8007724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68da      	ldr	r2, [r3, #12]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f042 0201 	orr.w	r2, r2, #1
 8007736:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a26      	ldr	r2, [pc, #152]	; (80077d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d022      	beq.n	8007788 <HAL_TIM_Base_Start_IT+0x80>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800774a:	d01d      	beq.n	8007788 <HAL_TIM_Base_Start_IT+0x80>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a22      	ldr	r2, [pc, #136]	; (80077dc <HAL_TIM_Base_Start_IT+0xd4>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d018      	beq.n	8007788 <HAL_TIM_Base_Start_IT+0x80>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a21      	ldr	r2, [pc, #132]	; (80077e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d013      	beq.n	8007788 <HAL_TIM_Base_Start_IT+0x80>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a1f      	ldr	r2, [pc, #124]	; (80077e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d00e      	beq.n	8007788 <HAL_TIM_Base_Start_IT+0x80>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a1e      	ldr	r2, [pc, #120]	; (80077e8 <HAL_TIM_Base_Start_IT+0xe0>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d009      	beq.n	8007788 <HAL_TIM_Base_Start_IT+0x80>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a1c      	ldr	r2, [pc, #112]	; (80077ec <HAL_TIM_Base_Start_IT+0xe4>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d004      	beq.n	8007788 <HAL_TIM_Base_Start_IT+0x80>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a1b      	ldr	r2, [pc, #108]	; (80077f0 <HAL_TIM_Base_Start_IT+0xe8>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d115      	bne.n	80077b4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689a      	ldr	r2, [r3, #8]
 800778e:	4b19      	ldr	r3, [pc, #100]	; (80077f4 <HAL_TIM_Base_Start_IT+0xec>)
 8007790:	4013      	ands	r3, r2
 8007792:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2b06      	cmp	r3, #6
 8007798:	d015      	beq.n	80077c6 <HAL_TIM_Base_Start_IT+0xbe>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077a0:	d011      	beq.n	80077c6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f042 0201 	orr.w	r2, r2, #1
 80077b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077b2:	e008      	b.n	80077c6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f042 0201 	orr.w	r2, r2, #1
 80077c2:	601a      	str	r2, [r3, #0]
 80077c4:	e000      	b.n	80077c8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	40010000 	.word	0x40010000
 80077dc:	40000400 	.word	0x40000400
 80077e0:	40000800 	.word	0x40000800
 80077e4:	40000c00 	.word	0x40000c00
 80077e8:	40010400 	.word	0x40010400
 80077ec:	40001800 	.word	0x40001800
 80077f0:	40014000 	.word	0x40014000
 80077f4:	00010007 	.word	0x00010007

080077f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	f003 0302 	and.w	r3, r3, #2
 800780a:	2b02      	cmp	r3, #2
 800780c:	d122      	bne.n	8007854 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	f003 0302 	and.w	r3, r3, #2
 8007818:	2b02      	cmp	r3, #2
 800781a:	d11b      	bne.n	8007854 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f06f 0202 	mvn.w	r2, #2
 8007824:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	699b      	ldr	r3, [r3, #24]
 8007832:	f003 0303 	and.w	r3, r3, #3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d003      	beq.n	8007842 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 f9fe 	bl	8007c3c <HAL_TIM_IC_CaptureCallback>
 8007840:	e005      	b.n	800784e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f9f0 	bl	8007c28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fa01 	bl	8007c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	f003 0304 	and.w	r3, r3, #4
 800785e:	2b04      	cmp	r3, #4
 8007860:	d122      	bne.n	80078a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	f003 0304 	and.w	r3, r3, #4
 800786c:	2b04      	cmp	r3, #4
 800786e:	d11b      	bne.n	80078a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f06f 0204 	mvn.w	r2, #4
 8007878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2202      	movs	r2, #2
 800787e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800788a:	2b00      	cmp	r3, #0
 800788c:	d003      	beq.n	8007896 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 f9d4 	bl	8007c3c <HAL_TIM_IC_CaptureCallback>
 8007894:	e005      	b.n	80078a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f9c6 	bl	8007c28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 f9d7 	bl	8007c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	f003 0308 	and.w	r3, r3, #8
 80078b2:	2b08      	cmp	r3, #8
 80078b4:	d122      	bne.n	80078fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	f003 0308 	and.w	r3, r3, #8
 80078c0:	2b08      	cmp	r3, #8
 80078c2:	d11b      	bne.n	80078fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f06f 0208 	mvn.w	r2, #8
 80078cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2204      	movs	r2, #4
 80078d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	69db      	ldr	r3, [r3, #28]
 80078da:	f003 0303 	and.w	r3, r3, #3
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d003      	beq.n	80078ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f9aa 	bl	8007c3c <HAL_TIM_IC_CaptureCallback>
 80078e8:	e005      	b.n	80078f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f99c 	bl	8007c28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 f9ad 	bl	8007c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	f003 0310 	and.w	r3, r3, #16
 8007906:	2b10      	cmp	r3, #16
 8007908:	d122      	bne.n	8007950 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	f003 0310 	and.w	r3, r3, #16
 8007914:	2b10      	cmp	r3, #16
 8007916:	d11b      	bne.n	8007950 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f06f 0210 	mvn.w	r2, #16
 8007920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2208      	movs	r2, #8
 8007926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	69db      	ldr	r3, [r3, #28]
 800792e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007932:	2b00      	cmp	r3, #0
 8007934:	d003      	beq.n	800793e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f980 	bl	8007c3c <HAL_TIM_IC_CaptureCallback>
 800793c:	e005      	b.n	800794a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f972 	bl	8007c28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 f983 	bl	8007c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	f003 0301 	and.w	r3, r3, #1
 800795a:	2b01      	cmp	r3, #1
 800795c:	d10e      	bne.n	800797c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	f003 0301 	and.w	r3, r3, #1
 8007968:	2b01      	cmp	r3, #1
 800796a:	d107      	bne.n	800797c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f06f 0201 	mvn.w	r2, #1
 8007974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f01a fb42 	bl	8022000 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007986:	2b80      	cmp	r3, #128	; 0x80
 8007988:	d10e      	bne.n	80079a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007994:	2b80      	cmp	r3, #128	; 0x80
 8007996:	d107      	bne.n	80079a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80079a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fb38 	bl	8008018 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079b6:	d10e      	bne.n	80079d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c2:	2b80      	cmp	r3, #128	; 0x80
 80079c4:	d107      	bne.n	80079d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80079ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fb2b 	bl	800802c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e0:	2b40      	cmp	r3, #64	; 0x40
 80079e2:	d10e      	bne.n	8007a02 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ee:	2b40      	cmp	r3, #64	; 0x40
 80079f0:	d107      	bne.n	8007a02 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80079fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f931 	bl	8007c64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	f003 0320 	and.w	r3, r3, #32
 8007a0c:	2b20      	cmp	r3, #32
 8007a0e:	d10e      	bne.n	8007a2e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	f003 0320 	and.w	r3, r3, #32
 8007a1a:	2b20      	cmp	r3, #32
 8007a1c:	d107      	bne.n	8007a2e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f06f 0220 	mvn.w	r2, #32
 8007a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 faeb 	bl	8008004 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a2e:	bf00      	nop
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
	...

08007a38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a42:	2300      	movs	r3, #0
 8007a44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d101      	bne.n	8007a54 <HAL_TIM_ConfigClockSource+0x1c>
 8007a50:	2302      	movs	r3, #2
 8007a52:	e0dc      	b.n	8007c0e <HAL_TIM_ConfigClockSource+0x1d6>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2202      	movs	r2, #2
 8007a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a6c:	68ba      	ldr	r2, [r7, #8]
 8007a6e:	4b6a      	ldr	r3, [pc, #424]	; (8007c18 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007a70:	4013      	ands	r3, r2
 8007a72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	68ba      	ldr	r2, [r7, #8]
 8007a82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a64      	ldr	r2, [pc, #400]	; (8007c1c <HAL_TIM_ConfigClockSource+0x1e4>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	f000 80a9 	beq.w	8007be2 <HAL_TIM_ConfigClockSource+0x1aa>
 8007a90:	4a62      	ldr	r2, [pc, #392]	; (8007c1c <HAL_TIM_ConfigClockSource+0x1e4>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	f200 80ae 	bhi.w	8007bf4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007a98:	4a61      	ldr	r2, [pc, #388]	; (8007c20 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	f000 80a1 	beq.w	8007be2 <HAL_TIM_ConfigClockSource+0x1aa>
 8007aa0:	4a5f      	ldr	r2, [pc, #380]	; (8007c20 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	f200 80a6 	bhi.w	8007bf4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007aa8:	4a5e      	ldr	r2, [pc, #376]	; (8007c24 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	f000 8099 	beq.w	8007be2 <HAL_TIM_ConfigClockSource+0x1aa>
 8007ab0:	4a5c      	ldr	r2, [pc, #368]	; (8007c24 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	f200 809e 	bhi.w	8007bf4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ab8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007abc:	f000 8091 	beq.w	8007be2 <HAL_TIM_ConfigClockSource+0x1aa>
 8007ac0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007ac4:	f200 8096 	bhi.w	8007bf4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ac8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007acc:	f000 8089 	beq.w	8007be2 <HAL_TIM_ConfigClockSource+0x1aa>
 8007ad0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ad4:	f200 808e 	bhi.w	8007bf4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007adc:	d03e      	beq.n	8007b5c <HAL_TIM_ConfigClockSource+0x124>
 8007ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ae2:	f200 8087 	bhi.w	8007bf4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aea:	f000 8086 	beq.w	8007bfa <HAL_TIM_ConfigClockSource+0x1c2>
 8007aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007af2:	d87f      	bhi.n	8007bf4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007af4:	2b70      	cmp	r3, #112	; 0x70
 8007af6:	d01a      	beq.n	8007b2e <HAL_TIM_ConfigClockSource+0xf6>
 8007af8:	2b70      	cmp	r3, #112	; 0x70
 8007afa:	d87b      	bhi.n	8007bf4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007afc:	2b60      	cmp	r3, #96	; 0x60
 8007afe:	d050      	beq.n	8007ba2 <HAL_TIM_ConfigClockSource+0x16a>
 8007b00:	2b60      	cmp	r3, #96	; 0x60
 8007b02:	d877      	bhi.n	8007bf4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b04:	2b50      	cmp	r3, #80	; 0x50
 8007b06:	d03c      	beq.n	8007b82 <HAL_TIM_ConfigClockSource+0x14a>
 8007b08:	2b50      	cmp	r3, #80	; 0x50
 8007b0a:	d873      	bhi.n	8007bf4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b0c:	2b40      	cmp	r3, #64	; 0x40
 8007b0e:	d058      	beq.n	8007bc2 <HAL_TIM_ConfigClockSource+0x18a>
 8007b10:	2b40      	cmp	r3, #64	; 0x40
 8007b12:	d86f      	bhi.n	8007bf4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b14:	2b30      	cmp	r3, #48	; 0x30
 8007b16:	d064      	beq.n	8007be2 <HAL_TIM_ConfigClockSource+0x1aa>
 8007b18:	2b30      	cmp	r3, #48	; 0x30
 8007b1a:	d86b      	bhi.n	8007bf4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b1c:	2b20      	cmp	r3, #32
 8007b1e:	d060      	beq.n	8007be2 <HAL_TIM_ConfigClockSource+0x1aa>
 8007b20:	2b20      	cmp	r3, #32
 8007b22:	d867      	bhi.n	8007bf4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d05c      	beq.n	8007be2 <HAL_TIM_ConfigClockSource+0x1aa>
 8007b28:	2b10      	cmp	r3, #16
 8007b2a:	d05a      	beq.n	8007be2 <HAL_TIM_ConfigClockSource+0x1aa>
 8007b2c:	e062      	b.n	8007bf4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6818      	ldr	r0, [r3, #0]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	6899      	ldr	r1, [r3, #8]
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	685a      	ldr	r2, [r3, #4]
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	f000 f9b3 	bl	8007ea8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007b50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68ba      	ldr	r2, [r7, #8]
 8007b58:	609a      	str	r2, [r3, #8]
      break;
 8007b5a:	e04f      	b.n	8007bfc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6818      	ldr	r0, [r3, #0]
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	6899      	ldr	r1, [r3, #8]
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	685a      	ldr	r2, [r3, #4]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	f000 f99c 	bl	8007ea8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	689a      	ldr	r2, [r3, #8]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b7e:	609a      	str	r2, [r3, #8]
      break;
 8007b80:	e03c      	b.n	8007bfc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6818      	ldr	r0, [r3, #0]
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	6859      	ldr	r1, [r3, #4]
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	461a      	mov	r2, r3
 8007b90:	f000 f90c 	bl	8007dac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2150      	movs	r1, #80	; 0x50
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f000 f966 	bl	8007e6c <TIM_ITRx_SetConfig>
      break;
 8007ba0:	e02c      	b.n	8007bfc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6818      	ldr	r0, [r3, #0]
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	6859      	ldr	r1, [r3, #4]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	461a      	mov	r2, r3
 8007bb0:	f000 f92b 	bl	8007e0a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2160      	movs	r1, #96	; 0x60
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f000 f956 	bl	8007e6c <TIM_ITRx_SetConfig>
      break;
 8007bc0:	e01c      	b.n	8007bfc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6818      	ldr	r0, [r3, #0]
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	6859      	ldr	r1, [r3, #4]
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	461a      	mov	r2, r3
 8007bd0:	f000 f8ec 	bl	8007dac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2140      	movs	r1, #64	; 0x40
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f000 f946 	bl	8007e6c <TIM_ITRx_SetConfig>
      break;
 8007be0:	e00c      	b.n	8007bfc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4619      	mov	r1, r3
 8007bec:	4610      	mov	r0, r2
 8007bee:	f000 f93d 	bl	8007e6c <TIM_ITRx_SetConfig>
      break;
 8007bf2:	e003      	b.n	8007bfc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8007bf8:	e000      	b.n	8007bfc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007bfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	ffceff88 	.word	0xffceff88
 8007c1c:	00100040 	.word	0x00100040
 8007c20:	00100030 	.word	0x00100030
 8007c24:	00100020 	.word	0x00100020

08007c28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c30:	bf00      	nop
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c58:	bf00      	nop
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a40      	ldr	r2, [pc, #256]	; (8007d8c <TIM_Base_SetConfig+0x114>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d013      	beq.n	8007cb8 <TIM_Base_SetConfig+0x40>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c96:	d00f      	beq.n	8007cb8 <TIM_Base_SetConfig+0x40>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a3d      	ldr	r2, [pc, #244]	; (8007d90 <TIM_Base_SetConfig+0x118>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d00b      	beq.n	8007cb8 <TIM_Base_SetConfig+0x40>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a3c      	ldr	r2, [pc, #240]	; (8007d94 <TIM_Base_SetConfig+0x11c>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d007      	beq.n	8007cb8 <TIM_Base_SetConfig+0x40>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4a3b      	ldr	r2, [pc, #236]	; (8007d98 <TIM_Base_SetConfig+0x120>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d003      	beq.n	8007cb8 <TIM_Base_SetConfig+0x40>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a3a      	ldr	r2, [pc, #232]	; (8007d9c <TIM_Base_SetConfig+0x124>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d108      	bne.n	8007cca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a2f      	ldr	r2, [pc, #188]	; (8007d8c <TIM_Base_SetConfig+0x114>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d01f      	beq.n	8007d12 <TIM_Base_SetConfig+0x9a>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cd8:	d01b      	beq.n	8007d12 <TIM_Base_SetConfig+0x9a>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a2c      	ldr	r2, [pc, #176]	; (8007d90 <TIM_Base_SetConfig+0x118>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d017      	beq.n	8007d12 <TIM_Base_SetConfig+0x9a>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a2b      	ldr	r2, [pc, #172]	; (8007d94 <TIM_Base_SetConfig+0x11c>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d013      	beq.n	8007d12 <TIM_Base_SetConfig+0x9a>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a2a      	ldr	r2, [pc, #168]	; (8007d98 <TIM_Base_SetConfig+0x120>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d00f      	beq.n	8007d12 <TIM_Base_SetConfig+0x9a>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a29      	ldr	r2, [pc, #164]	; (8007d9c <TIM_Base_SetConfig+0x124>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d00b      	beq.n	8007d12 <TIM_Base_SetConfig+0x9a>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a28      	ldr	r2, [pc, #160]	; (8007da0 <TIM_Base_SetConfig+0x128>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d007      	beq.n	8007d12 <TIM_Base_SetConfig+0x9a>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a27      	ldr	r2, [pc, #156]	; (8007da4 <TIM_Base_SetConfig+0x12c>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d003      	beq.n	8007d12 <TIM_Base_SetConfig+0x9a>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a26      	ldr	r2, [pc, #152]	; (8007da8 <TIM_Base_SetConfig+0x130>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d108      	bne.n	8007d24 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	695b      	ldr	r3, [r3, #20]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	689a      	ldr	r2, [r3, #8]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a10      	ldr	r2, [pc, #64]	; (8007d8c <TIM_Base_SetConfig+0x114>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d00f      	beq.n	8007d70 <TIM_Base_SetConfig+0xf8>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a12      	ldr	r2, [pc, #72]	; (8007d9c <TIM_Base_SetConfig+0x124>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d00b      	beq.n	8007d70 <TIM_Base_SetConfig+0xf8>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a11      	ldr	r2, [pc, #68]	; (8007da0 <TIM_Base_SetConfig+0x128>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d007      	beq.n	8007d70 <TIM_Base_SetConfig+0xf8>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a10      	ldr	r2, [pc, #64]	; (8007da4 <TIM_Base_SetConfig+0x12c>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d003      	beq.n	8007d70 <TIM_Base_SetConfig+0xf8>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a0f      	ldr	r2, [pc, #60]	; (8007da8 <TIM_Base_SetConfig+0x130>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d103      	bne.n	8007d78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	691a      	ldr	r2, [r3, #16]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	615a      	str	r2, [r3, #20]
}
 8007d7e:	bf00      	nop
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	40010000 	.word	0x40010000
 8007d90:	40000400 	.word	0x40000400
 8007d94:	40000800 	.word	0x40000800
 8007d98:	40000c00 	.word	0x40000c00
 8007d9c:	40010400 	.word	0x40010400
 8007da0:	40014000 	.word	0x40014000
 8007da4:	40014400 	.word	0x40014400
 8007da8:	40014800 	.word	0x40014800

08007dac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b087      	sub	sp, #28
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6a1b      	ldr	r3, [r3, #32]
 8007dbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6a1b      	ldr	r3, [r3, #32]
 8007dc2:	f023 0201 	bic.w	r2, r3, #1
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	699b      	ldr	r3, [r3, #24]
 8007dce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	011b      	lsls	r3, r3, #4
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	f023 030a 	bic.w	r3, r3, #10
 8007de8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007dea:	697a      	ldr	r2, [r7, #20]
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	693a      	ldr	r2, [r7, #16]
 8007df6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	697a      	ldr	r2, [r7, #20]
 8007dfc:	621a      	str	r2, [r3, #32]
}
 8007dfe:	bf00      	nop
 8007e00:	371c      	adds	r7, #28
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b087      	sub	sp, #28
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	60f8      	str	r0, [r7, #12]
 8007e12:	60b9      	str	r1, [r7, #8]
 8007e14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6a1b      	ldr	r3, [r3, #32]
 8007e1a:	f023 0210 	bic.w	r2, r3, #16
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	699b      	ldr	r3, [r3, #24]
 8007e26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6a1b      	ldr	r3, [r3, #32]
 8007e2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	031b      	lsls	r3, r3, #12
 8007e3a:	697a      	ldr	r2, [r7, #20]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	011b      	lsls	r3, r3, #4
 8007e4c:	693a      	ldr	r2, [r7, #16]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	621a      	str	r2, [r3, #32]
}
 8007e5e:	bf00      	nop
 8007e60:	371c      	adds	r7, #28
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
	...

08007e6c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	4b09      	ldr	r3, [pc, #36]	; (8007ea4 <TIM_ITRx_SetConfig+0x38>)
 8007e80:	4013      	ands	r3, r2
 8007e82:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e84:	683a      	ldr	r2, [r7, #0]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	f043 0307 	orr.w	r3, r3, #7
 8007e8e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	609a      	str	r2, [r3, #8]
}
 8007e96:	bf00      	nop
 8007e98:	3714      	adds	r7, #20
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	ffcfff8f 	.word	0xffcfff8f

08007ea8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b087      	sub	sp, #28
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
 8007eb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ec2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	021a      	lsls	r2, r3, #8
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	431a      	orrs	r2, r3
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	697a      	ldr	r2, [r7, #20]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	697a      	ldr	r2, [r7, #20]
 8007eda:	609a      	str	r2, [r3, #8]
}
 8007edc:	bf00      	nop
 8007ede:	371c      	adds	r7, #28
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d101      	bne.n	8007f00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007efc:	2302      	movs	r3, #2
 8007efe:	e06d      	b.n	8007fdc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a30      	ldr	r2, [pc, #192]	; (8007fe8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d004      	beq.n	8007f34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a2f      	ldr	r2, [pc, #188]	; (8007fec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d108      	bne.n	8007f46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68fa      	ldr	r2, [r7, #12]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a20      	ldr	r2, [pc, #128]	; (8007fe8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d022      	beq.n	8007fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f72:	d01d      	beq.n	8007fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a1d      	ldr	r2, [pc, #116]	; (8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d018      	beq.n	8007fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a1c      	ldr	r2, [pc, #112]	; (8007ff4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d013      	beq.n	8007fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a1a      	ldr	r2, [pc, #104]	; (8007ff8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d00e      	beq.n	8007fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a15      	ldr	r2, [pc, #84]	; (8007fec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d009      	beq.n	8007fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a16      	ldr	r2, [pc, #88]	; (8007ffc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d004      	beq.n	8007fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a15      	ldr	r2, [pc, #84]	; (8008000 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d10c      	bne.n	8007fca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fb6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	68ba      	ldr	r2, [r7, #8]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3714      	adds	r7, #20
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr
 8007fe8:	40010000 	.word	0x40010000
 8007fec:	40010400 	.word	0x40010400
 8007ff0:	40000400 	.word	0x40000400
 8007ff4:	40000800 	.word	0x40000800
 8007ff8:	40000c00 	.word	0x40000c00
 8007ffc:	40001800 	.word	0x40001800
 8008000:	40014000 	.word	0x40014000

08008004 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800800c:	bf00      	nop
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008020:	bf00      	nop
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008034:	bf00      	nop
 8008036:	370c      	adds	r7, #12
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d101      	bne.n	8008052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	e042      	b.n	80080d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008058:	2b00      	cmp	r3, #0
 800805a:	d106      	bne.n	800806a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f01a f917 	bl	8022298 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2224      	movs	r2, #36	; 0x24
 800806e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f022 0201 	bic.w	r2, r2, #1
 8008080:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 fcd6 	bl	8008a34 <UART_SetConfig>
 8008088:	4603      	mov	r3, r0
 800808a:	2b01      	cmp	r3, #1
 800808c:	d101      	bne.n	8008092 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e022      	b.n	80080d8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008096:	2b00      	cmp	r3, #0
 8008098:	d002      	beq.n	80080a0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f001 fa2a 	bl	80094f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	685a      	ldr	r2, [r3, #4]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	689a      	ldr	r2, [r3, #8]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f042 0201 	orr.w	r2, r2, #1
 80080ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f001 fab1 	bl	8009638 <UART_CheckIdleState>
 80080d6:	4603      	mov	r3, r0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3708      	adds	r7, #8
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b08a      	sub	sp, #40	; 0x28
 80080e4:	af02      	add	r7, sp, #8
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	603b      	str	r3, [r7, #0]
 80080ec:	4613      	mov	r3, r2
 80080ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080f6:	2b20      	cmp	r3, #32
 80080f8:	f040 8083 	bne.w	8008202 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d002      	beq.n	8008108 <HAL_UART_Transmit+0x28>
 8008102:	88fb      	ldrh	r3, [r7, #6]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d101      	bne.n	800810c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e07b      	b.n	8008204 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008112:	2b01      	cmp	r3, #1
 8008114:	d101      	bne.n	800811a <HAL_UART_Transmit+0x3a>
 8008116:	2302      	movs	r3, #2
 8008118:	e074      	b.n	8008204 <HAL_UART_Transmit+0x124>
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2201      	movs	r2, #1
 800811e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2221      	movs	r2, #33	; 0x21
 800812e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008132:	f7f9 f983 	bl	800143c <HAL_GetTick>
 8008136:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	88fa      	ldrh	r2, [r7, #6]
 800813c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	88fa      	ldrh	r2, [r7, #6]
 8008144:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008150:	d108      	bne.n	8008164 <HAL_UART_Transmit+0x84>
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d104      	bne.n	8008164 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800815a:	2300      	movs	r3, #0
 800815c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	61bb      	str	r3, [r7, #24]
 8008162:	e003      	b.n	800816c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008168:	2300      	movs	r3, #0
 800816a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2200      	movs	r2, #0
 8008170:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008174:	e02c      	b.n	80081d0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	9300      	str	r3, [sp, #0]
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	2200      	movs	r2, #0
 800817e:	2180      	movs	r1, #128	; 0x80
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f001 faa4 	bl	80096ce <UART_WaitOnFlagUntilTimeout>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d001      	beq.n	8008190 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800818c:	2303      	movs	r3, #3
 800818e:	e039      	b.n	8008204 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008190:	69fb      	ldr	r3, [r7, #28]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d10b      	bne.n	80081ae <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	881b      	ldrh	r3, [r3, #0]
 800819a:	461a      	mov	r2, r3
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	3302      	adds	r3, #2
 80081aa:	61bb      	str	r3, [r7, #24]
 80081ac:	e007      	b.n	80081be <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	781a      	ldrb	r2, [r3, #0]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	3301      	adds	r3, #1
 80081bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	3b01      	subs	r3, #1
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d1cc      	bne.n	8008176 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	9300      	str	r3, [sp, #0]
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	2200      	movs	r2, #0
 80081e4:	2140      	movs	r1, #64	; 0x40
 80081e6:	68f8      	ldr	r0, [r7, #12]
 80081e8:	f001 fa71 	bl	80096ce <UART_WaitOnFlagUntilTimeout>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d001      	beq.n	80081f6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80081f2:	2303      	movs	r3, #3
 80081f4:	e006      	b.n	8008204 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2220      	movs	r2, #32
 80081fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80081fe:	2300      	movs	r3, #0
 8008200:	e000      	b.n	8008204 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008202:	2302      	movs	r3, #2
  }
}
 8008204:	4618      	mov	r0, r3
 8008206:	3720      	adds	r7, #32
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b08a      	sub	sp, #40	; 0x28
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	4613      	mov	r3, r2
 8008218:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008220:	2b20      	cmp	r3, #32
 8008222:	d142      	bne.n	80082aa <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d002      	beq.n	8008230 <HAL_UART_Receive_IT+0x24>
 800822a:	88fb      	ldrh	r3, [r7, #6]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d101      	bne.n	8008234 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	e03b      	b.n	80082ac <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800823a:	2b01      	cmp	r3, #1
 800823c:	d101      	bne.n	8008242 <HAL_UART_Receive_IT+0x36>
 800823e:	2302      	movs	r3, #2
 8008240:	e034      	b.n	80082ac <HAL_UART_Receive_IT+0xa0>
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2201      	movs	r2, #1
 8008246:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2200      	movs	r2, #0
 800824e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a17      	ldr	r2, [pc, #92]	; (80082b4 <HAL_UART_Receive_IT+0xa8>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d01f      	beq.n	800829a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008264:	2b00      	cmp	r3, #0
 8008266:	d018      	beq.n	800829a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	e853 3f00 	ldrex	r3, [r3]
 8008274:	613b      	str	r3, [r7, #16]
   return(result);
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800827c:	627b      	str	r3, [r7, #36]	; 0x24
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	461a      	mov	r2, r3
 8008284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008286:	623b      	str	r3, [r7, #32]
 8008288:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828a:	69f9      	ldr	r1, [r7, #28]
 800828c:	6a3a      	ldr	r2, [r7, #32]
 800828e:	e841 2300 	strex	r3, r2, [r1]
 8008292:	61bb      	str	r3, [r7, #24]
   return(result);
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1e6      	bne.n	8008268 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800829a:	88fb      	ldrh	r3, [r7, #6]
 800829c:	461a      	mov	r2, r3
 800829e:	68b9      	ldr	r1, [r7, #8]
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f001 fadd 	bl	8009860 <UART_Start_Receive_IT>
 80082a6:	4603      	mov	r3, r0
 80082a8:	e000      	b.n	80082ac <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80082aa:	2302      	movs	r3, #2
  }
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3728      	adds	r7, #40	; 0x28
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	58000c00 	.word	0x58000c00

080082b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b0ba      	sub	sp, #232	; 0xe8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	69db      	ldr	r3, [r3, #28]
 80082c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80082de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80082e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80082e6:	4013      	ands	r3, r2
 80082e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80082ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d11b      	bne.n	800832c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80082f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082f8:	f003 0320 	and.w	r3, r3, #32
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d015      	beq.n	800832c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008304:	f003 0320 	and.w	r3, r3, #32
 8008308:	2b00      	cmp	r3, #0
 800830a:	d105      	bne.n	8008318 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800830c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008314:	2b00      	cmp	r3, #0
 8008316:	d009      	beq.n	800832c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800831c:	2b00      	cmp	r3, #0
 800831e:	f000 835a 	beq.w	80089d6 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	4798      	blx	r3
      }
      return;
 800832a:	e354      	b.n	80089d6 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800832c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008330:	2b00      	cmp	r3, #0
 8008332:	f000 811f 	beq.w	8008574 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008336:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800833a:	4b8b      	ldr	r3, [pc, #556]	; (8008568 <HAL_UART_IRQHandler+0x2b0>)
 800833c:	4013      	ands	r3, r2
 800833e:	2b00      	cmp	r3, #0
 8008340:	d106      	bne.n	8008350 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008342:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008346:	4b89      	ldr	r3, [pc, #548]	; (800856c <HAL_UART_IRQHandler+0x2b4>)
 8008348:	4013      	ands	r3, r2
 800834a:	2b00      	cmp	r3, #0
 800834c:	f000 8112 	beq.w	8008574 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008354:	f003 0301 	and.w	r3, r3, #1
 8008358:	2b00      	cmp	r3, #0
 800835a:	d011      	beq.n	8008380 <HAL_UART_IRQHandler+0xc8>
 800835c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00b      	beq.n	8008380 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2201      	movs	r2, #1
 800836e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008376:	f043 0201 	orr.w	r2, r3, #1
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008384:	f003 0302 	and.w	r3, r3, #2
 8008388:	2b00      	cmp	r3, #0
 800838a:	d011      	beq.n	80083b0 <HAL_UART_IRQHandler+0xf8>
 800838c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008390:	f003 0301 	and.w	r3, r3, #1
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00b      	beq.n	80083b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2202      	movs	r2, #2
 800839e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083a6:	f043 0204 	orr.w	r2, r3, #4
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083b4:	f003 0304 	and.w	r3, r3, #4
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d011      	beq.n	80083e0 <HAL_UART_IRQHandler+0x128>
 80083bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083c0:	f003 0301 	and.w	r3, r3, #1
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00b      	beq.n	80083e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2204      	movs	r2, #4
 80083ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083d6:	f043 0202 	orr.w	r2, r3, #2
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80083e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083e4:	f003 0308 	and.w	r3, r3, #8
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d017      	beq.n	800841c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80083ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083f0:	f003 0320 	and.w	r3, r3, #32
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d105      	bne.n	8008404 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80083f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80083fc:	4b5a      	ldr	r3, [pc, #360]	; (8008568 <HAL_UART_IRQHandler+0x2b0>)
 80083fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008400:	2b00      	cmp	r3, #0
 8008402:	d00b      	beq.n	800841c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2208      	movs	r2, #8
 800840a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008412:	f043 0208 	orr.w	r2, r3, #8
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800841c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008424:	2b00      	cmp	r3, #0
 8008426:	d012      	beq.n	800844e <HAL_UART_IRQHandler+0x196>
 8008428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800842c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008430:	2b00      	cmp	r3, #0
 8008432:	d00c      	beq.n	800844e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800843c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008444:	f043 0220 	orr.w	r2, r3, #32
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008454:	2b00      	cmp	r3, #0
 8008456:	f000 82c0 	beq.w	80089da <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800845a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800845e:	f003 0320 	and.w	r3, r3, #32
 8008462:	2b00      	cmp	r3, #0
 8008464:	d013      	beq.n	800848e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800846a:	f003 0320 	and.w	r3, r3, #32
 800846e:	2b00      	cmp	r3, #0
 8008470:	d105      	bne.n	800847e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800847a:	2b00      	cmp	r3, #0
 800847c:	d007      	beq.n	800848e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008482:	2b00      	cmp	r3, #0
 8008484:	d003      	beq.n	800848e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008494:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084a2:	2b40      	cmp	r3, #64	; 0x40
 80084a4:	d005      	beq.n	80084b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80084a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d04f      	beq.n	8008552 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f001 fafe 	bl	8009ab4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c2:	2b40      	cmp	r3, #64	; 0x40
 80084c4:	d141      	bne.n	800854a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	3308      	adds	r3, #8
 80084cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80084d4:	e853 3f00 	ldrex	r3, [r3]
 80084d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80084dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80084e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	3308      	adds	r3, #8
 80084ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80084f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80084f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80084fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008502:	e841 2300 	strex	r3, r2, [r1]
 8008506:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800850a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d1d9      	bne.n	80084c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008516:	2b00      	cmp	r3, #0
 8008518:	d013      	beq.n	8008542 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800851e:	4a14      	ldr	r2, [pc, #80]	; (8008570 <HAL_UART_IRQHandler+0x2b8>)
 8008520:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008526:	4618      	mov	r0, r3
 8008528:	f7f9 fc42 	bl	8001db0 <HAL_DMA_Abort_IT>
 800852c:	4603      	mov	r3, r0
 800852e:	2b00      	cmp	r3, #0
 8008530:	d017      	beq.n	8008562 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800853c:	4610      	mov	r0, r2
 800853e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008540:	e00f      	b.n	8008562 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 fa60 	bl	8008a08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008548:	e00b      	b.n	8008562 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fa5c 	bl	8008a08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008550:	e007      	b.n	8008562 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fa58 	bl	8008a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008560:	e23b      	b.n	80089da <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008562:	bf00      	nop
    return;
 8008564:	e239      	b.n	80089da <HAL_UART_IRQHandler+0x722>
 8008566:	bf00      	nop
 8008568:	10000001 	.word	0x10000001
 800856c:	04000120 	.word	0x04000120
 8008570:	08009b81 	.word	0x08009b81

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008578:	2b01      	cmp	r3, #1
 800857a:	f040 81ce 	bne.w	800891a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800857e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008582:	f003 0310 	and.w	r3, r3, #16
 8008586:	2b00      	cmp	r3, #0
 8008588:	f000 81c7 	beq.w	800891a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800858c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008590:	f003 0310 	and.w	r3, r3, #16
 8008594:	2b00      	cmp	r3, #0
 8008596:	f000 81c0 	beq.w	800891a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2210      	movs	r2, #16
 80085a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ac:	2b40      	cmp	r3, #64	; 0x40
 80085ae:	f040 813b 	bne.w	8008828 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a8b      	ldr	r2, [pc, #556]	; (80087e8 <HAL_UART_IRQHandler+0x530>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d059      	beq.n	8008672 <HAL_UART_IRQHandler+0x3ba>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a89      	ldr	r2, [pc, #548]	; (80087ec <HAL_UART_IRQHandler+0x534>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d053      	beq.n	8008672 <HAL_UART_IRQHandler+0x3ba>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a87      	ldr	r2, [pc, #540]	; (80087f0 <HAL_UART_IRQHandler+0x538>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d04d      	beq.n	8008672 <HAL_UART_IRQHandler+0x3ba>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a85      	ldr	r2, [pc, #532]	; (80087f4 <HAL_UART_IRQHandler+0x53c>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d047      	beq.n	8008672 <HAL_UART_IRQHandler+0x3ba>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a83      	ldr	r2, [pc, #524]	; (80087f8 <HAL_UART_IRQHandler+0x540>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d041      	beq.n	8008672 <HAL_UART_IRQHandler+0x3ba>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a81      	ldr	r2, [pc, #516]	; (80087fc <HAL_UART_IRQHandler+0x544>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d03b      	beq.n	8008672 <HAL_UART_IRQHandler+0x3ba>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a7f      	ldr	r2, [pc, #508]	; (8008800 <HAL_UART_IRQHandler+0x548>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d035      	beq.n	8008672 <HAL_UART_IRQHandler+0x3ba>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a7d      	ldr	r2, [pc, #500]	; (8008804 <HAL_UART_IRQHandler+0x54c>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d02f      	beq.n	8008672 <HAL_UART_IRQHandler+0x3ba>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a7b      	ldr	r2, [pc, #492]	; (8008808 <HAL_UART_IRQHandler+0x550>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d029      	beq.n	8008672 <HAL_UART_IRQHandler+0x3ba>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a79      	ldr	r2, [pc, #484]	; (800880c <HAL_UART_IRQHandler+0x554>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d023      	beq.n	8008672 <HAL_UART_IRQHandler+0x3ba>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a77      	ldr	r2, [pc, #476]	; (8008810 <HAL_UART_IRQHandler+0x558>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d01d      	beq.n	8008672 <HAL_UART_IRQHandler+0x3ba>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a75      	ldr	r2, [pc, #468]	; (8008814 <HAL_UART_IRQHandler+0x55c>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d017      	beq.n	8008672 <HAL_UART_IRQHandler+0x3ba>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a73      	ldr	r2, [pc, #460]	; (8008818 <HAL_UART_IRQHandler+0x560>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d011      	beq.n	8008672 <HAL_UART_IRQHandler+0x3ba>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a71      	ldr	r2, [pc, #452]	; (800881c <HAL_UART_IRQHandler+0x564>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d00b      	beq.n	8008672 <HAL_UART_IRQHandler+0x3ba>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a6f      	ldr	r2, [pc, #444]	; (8008820 <HAL_UART_IRQHandler+0x568>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d005      	beq.n	8008672 <HAL_UART_IRQHandler+0x3ba>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a6d      	ldr	r2, [pc, #436]	; (8008824 <HAL_UART_IRQHandler+0x56c>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d105      	bne.n	800867e <HAL_UART_IRQHandler+0x3c6>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	b29b      	uxth	r3, r3
 800867c:	e004      	b.n	8008688 <HAL_UART_IRQHandler+0x3d0>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	b29b      	uxth	r3, r3
 8008688:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800868c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008690:	2b00      	cmp	r3, #0
 8008692:	f000 81a4 	beq.w	80089de <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800869c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80086a0:	429a      	cmp	r2, r3
 80086a2:	f080 819c 	bcs.w	80089de <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80086ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086b4:	69db      	ldr	r3, [r3, #28]
 80086b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086ba:	f000 8086 	beq.w	80087ca <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80086ca:	e853 3f00 	ldrex	r3, [r3]
 80086ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80086d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80086d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	461a      	mov	r2, r3
 80086e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80086ec:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80086f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80086f8:	e841 2300 	strex	r3, r2, [r1]
 80086fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008700:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008704:	2b00      	cmp	r3, #0
 8008706:	d1da      	bne.n	80086be <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	3308      	adds	r3, #8
 800870e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008710:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008712:	e853 3f00 	ldrex	r3, [r3]
 8008716:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008718:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800871a:	f023 0301 	bic.w	r3, r3, #1
 800871e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	3308      	adds	r3, #8
 8008728:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800872c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008730:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008732:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008734:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008738:	e841 2300 	strex	r3, r2, [r1]
 800873c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800873e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008740:	2b00      	cmp	r3, #0
 8008742:	d1e1      	bne.n	8008708 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	3308      	adds	r3, #8
 800874a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800874e:	e853 3f00 	ldrex	r3, [r3]
 8008752:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008756:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800875a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	3308      	adds	r3, #8
 8008764:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008768:	66fa      	str	r2, [r7, #108]	; 0x6c
 800876a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800876e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008770:	e841 2300 	strex	r3, r2, [r1]
 8008774:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008776:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008778:	2b00      	cmp	r3, #0
 800877a:	d1e3      	bne.n	8008744 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2220      	movs	r2, #32
 8008780:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008792:	e853 3f00 	ldrex	r3, [r3]
 8008796:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800879a:	f023 0310 	bic.w	r3, r3, #16
 800879e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	461a      	mov	r2, r3
 80087a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80087ae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80087b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087b4:	e841 2300 	strex	r3, r2, [r1]
 80087b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80087ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d1e4      	bne.n	800878a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7f8 ffd5 	bl	8001774 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	b29b      	uxth	r3, r3
 80087dc:	4619      	mov	r1, r3
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 f91c 	bl	8008a1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80087e4:	e0fb      	b.n	80089de <HAL_UART_IRQHandler+0x726>
 80087e6:	bf00      	nop
 80087e8:	40020010 	.word	0x40020010
 80087ec:	40020028 	.word	0x40020028
 80087f0:	40020040 	.word	0x40020040
 80087f4:	40020058 	.word	0x40020058
 80087f8:	40020070 	.word	0x40020070
 80087fc:	40020088 	.word	0x40020088
 8008800:	400200a0 	.word	0x400200a0
 8008804:	400200b8 	.word	0x400200b8
 8008808:	40020410 	.word	0x40020410
 800880c:	40020428 	.word	0x40020428
 8008810:	40020440 	.word	0x40020440
 8008814:	40020458 	.word	0x40020458
 8008818:	40020470 	.word	0x40020470
 800881c:	40020488 	.word	0x40020488
 8008820:	400204a0 	.word	0x400204a0
 8008824:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008834:	b29b      	uxth	r3, r3
 8008836:	1ad3      	subs	r3, r2, r3
 8008838:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008842:	b29b      	uxth	r3, r3
 8008844:	2b00      	cmp	r3, #0
 8008846:	f000 80cc 	beq.w	80089e2 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800884a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800884e:	2b00      	cmp	r3, #0
 8008850:	f000 80c7 	beq.w	80089e2 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800885a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800885c:	e853 3f00 	ldrex	r3, [r3]
 8008860:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008864:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008868:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	461a      	mov	r2, r3
 8008872:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008876:	647b      	str	r3, [r7, #68]	; 0x44
 8008878:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800887c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800887e:	e841 2300 	strex	r3, r2, [r1]
 8008882:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1e4      	bne.n	8008854 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	3308      	adds	r3, #8
 8008890:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008894:	e853 3f00 	ldrex	r3, [r3]
 8008898:	623b      	str	r3, [r7, #32]
   return(result);
 800889a:	6a3a      	ldr	r2, [r7, #32]
 800889c:	4b54      	ldr	r3, [pc, #336]	; (80089f0 <HAL_UART_IRQHandler+0x738>)
 800889e:	4013      	ands	r3, r2
 80088a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	3308      	adds	r3, #8
 80088aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80088ae:	633a      	str	r2, [r7, #48]	; 0x30
 80088b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088b6:	e841 2300 	strex	r3, r2, [r1]
 80088ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80088bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1e3      	bne.n	800888a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2220      	movs	r2, #32
 80088c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	e853 3f00 	ldrex	r3, [r3]
 80088e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f023 0310 	bic.w	r3, r3, #16
 80088ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	461a      	mov	r2, r3
 80088f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80088f8:	61fb      	str	r3, [r7, #28]
 80088fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fc:	69b9      	ldr	r1, [r7, #24]
 80088fe:	69fa      	ldr	r2, [r7, #28]
 8008900:	e841 2300 	strex	r3, r2, [r1]
 8008904:	617b      	str	r3, [r7, #20]
   return(result);
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d1e4      	bne.n	80088d6 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800890c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008910:	4619      	mov	r1, r3
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f882 	bl	8008a1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008918:	e063      	b.n	80089e2 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800891a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800891e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008922:	2b00      	cmp	r3, #0
 8008924:	d00e      	beq.n	8008944 <HAL_UART_IRQHandler+0x68c>
 8008926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800892a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800892e:	2b00      	cmp	r3, #0
 8008930:	d008      	beq.n	8008944 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800893a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f001 fdbd 	bl	800a4bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008942:	e051      	b.n	80089e8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800894c:	2b00      	cmp	r3, #0
 800894e:	d014      	beq.n	800897a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008958:	2b00      	cmp	r3, #0
 800895a:	d105      	bne.n	8008968 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800895c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008960:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008964:	2b00      	cmp	r3, #0
 8008966:	d008      	beq.n	800897a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800896c:	2b00      	cmp	r3, #0
 800896e:	d03a      	beq.n	80089e6 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	4798      	blx	r3
    }
    return;
 8008978:	e035      	b.n	80089e6 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800897a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800897e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008982:	2b00      	cmp	r3, #0
 8008984:	d009      	beq.n	800899a <HAL_UART_IRQHandler+0x6e2>
 8008986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800898a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800898e:	2b00      	cmp	r3, #0
 8008990:	d003      	beq.n	800899a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f001 f90a 	bl	8009bac <UART_EndTransmit_IT>
    return;
 8008998:	e026      	b.n	80089e8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800899a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800899e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d009      	beq.n	80089ba <HAL_UART_IRQHandler+0x702>
 80089a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d003      	beq.n	80089ba <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f001 fd96 	bl	800a4e4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089b8:	e016      	b.n	80089e8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80089ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d010      	beq.n	80089e8 <HAL_UART_IRQHandler+0x730>
 80089c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	da0c      	bge.n	80089e8 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f001 fd7e 	bl	800a4d0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089d4:	e008      	b.n	80089e8 <HAL_UART_IRQHandler+0x730>
      return;
 80089d6:	bf00      	nop
 80089d8:	e006      	b.n	80089e8 <HAL_UART_IRQHandler+0x730>
    return;
 80089da:	bf00      	nop
 80089dc:	e004      	b.n	80089e8 <HAL_UART_IRQHandler+0x730>
      return;
 80089de:	bf00      	nop
 80089e0:	e002      	b.n	80089e8 <HAL_UART_IRQHandler+0x730>
      return;
 80089e2:	bf00      	nop
 80089e4:	e000      	b.n	80089e8 <HAL_UART_IRQHandler+0x730>
    return;
 80089e6:	bf00      	nop
  }
}
 80089e8:	37e8      	adds	r7, #232	; 0xe8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	effffffe 	.word	0xeffffffe

080089f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80089fc:	bf00      	nop
 80089fe:	370c      	adds	r7, #12
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008a10:	bf00      	nop
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	460b      	mov	r3, r1
 8008a26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a28:	bf00      	nop
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a34:	b5b0      	push	{r4, r5, r7, lr}
 8008a36:	b08e      	sub	sp, #56	; 0x38
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	689a      	ldr	r2, [r3, #8]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	431a      	orrs	r2, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	695b      	ldr	r3, [r3, #20]
 8008a50:	431a      	orrs	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	69db      	ldr	r3, [r3, #28]
 8008a56:	4313      	orrs	r3, r2
 8008a58:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	4bbf      	ldr	r3, [pc, #764]	; (8008d60 <UART_SetConfig+0x32c>)
 8008a62:	4013      	ands	r3, r2
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	6812      	ldr	r2, [r2, #0]
 8008a68:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008a6a:	430b      	orrs	r3, r1
 8008a6c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	68da      	ldr	r2, [r3, #12]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	430a      	orrs	r2, r1
 8008a82:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	699b      	ldr	r3, [r3, #24]
 8008a88:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4ab5      	ldr	r2, [pc, #724]	; (8008d64 <UART_SetConfig+0x330>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d004      	beq.n	8008a9e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6a1b      	ldr	r3, [r3, #32]
 8008a98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	689a      	ldr	r2, [r3, #8]
 8008aa4:	4bb0      	ldr	r3, [pc, #704]	; (8008d68 <UART_SetConfig+0x334>)
 8008aa6:	4013      	ands	r3, r2
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	6812      	ldr	r2, [r2, #0]
 8008aac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008aae:	430b      	orrs	r3, r1
 8008ab0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab8:	f023 010f 	bic.w	r1, r3, #15
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	430a      	orrs	r2, r1
 8008ac6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4aa7      	ldr	r2, [pc, #668]	; (8008d6c <UART_SetConfig+0x338>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d176      	bne.n	8008bc0 <UART_SetConfig+0x18c>
 8008ad2:	4ba7      	ldr	r3, [pc, #668]	; (8008d70 <UART_SetConfig+0x33c>)
 8008ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ad6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ada:	2b28      	cmp	r3, #40	; 0x28
 8008adc:	d86c      	bhi.n	8008bb8 <UART_SetConfig+0x184>
 8008ade:	a201      	add	r2, pc, #4	; (adr r2, 8008ae4 <UART_SetConfig+0xb0>)
 8008ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae4:	08008b89 	.word	0x08008b89
 8008ae8:	08008bb9 	.word	0x08008bb9
 8008aec:	08008bb9 	.word	0x08008bb9
 8008af0:	08008bb9 	.word	0x08008bb9
 8008af4:	08008bb9 	.word	0x08008bb9
 8008af8:	08008bb9 	.word	0x08008bb9
 8008afc:	08008bb9 	.word	0x08008bb9
 8008b00:	08008bb9 	.word	0x08008bb9
 8008b04:	08008b91 	.word	0x08008b91
 8008b08:	08008bb9 	.word	0x08008bb9
 8008b0c:	08008bb9 	.word	0x08008bb9
 8008b10:	08008bb9 	.word	0x08008bb9
 8008b14:	08008bb9 	.word	0x08008bb9
 8008b18:	08008bb9 	.word	0x08008bb9
 8008b1c:	08008bb9 	.word	0x08008bb9
 8008b20:	08008bb9 	.word	0x08008bb9
 8008b24:	08008b99 	.word	0x08008b99
 8008b28:	08008bb9 	.word	0x08008bb9
 8008b2c:	08008bb9 	.word	0x08008bb9
 8008b30:	08008bb9 	.word	0x08008bb9
 8008b34:	08008bb9 	.word	0x08008bb9
 8008b38:	08008bb9 	.word	0x08008bb9
 8008b3c:	08008bb9 	.word	0x08008bb9
 8008b40:	08008bb9 	.word	0x08008bb9
 8008b44:	08008ba1 	.word	0x08008ba1
 8008b48:	08008bb9 	.word	0x08008bb9
 8008b4c:	08008bb9 	.word	0x08008bb9
 8008b50:	08008bb9 	.word	0x08008bb9
 8008b54:	08008bb9 	.word	0x08008bb9
 8008b58:	08008bb9 	.word	0x08008bb9
 8008b5c:	08008bb9 	.word	0x08008bb9
 8008b60:	08008bb9 	.word	0x08008bb9
 8008b64:	08008ba9 	.word	0x08008ba9
 8008b68:	08008bb9 	.word	0x08008bb9
 8008b6c:	08008bb9 	.word	0x08008bb9
 8008b70:	08008bb9 	.word	0x08008bb9
 8008b74:	08008bb9 	.word	0x08008bb9
 8008b78:	08008bb9 	.word	0x08008bb9
 8008b7c:	08008bb9 	.word	0x08008bb9
 8008b80:	08008bb9 	.word	0x08008bb9
 8008b84:	08008bb1 	.word	0x08008bb1
 8008b88:	2301      	movs	r3, #1
 8008b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b8e:	e222      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008b90:	2304      	movs	r3, #4
 8008b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b96:	e21e      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008b98:	2308      	movs	r3, #8
 8008b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b9e:	e21a      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008ba0:	2310      	movs	r3, #16
 8008ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ba6:	e216      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008ba8:	2320      	movs	r3, #32
 8008baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bae:	e212      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008bb0:	2340      	movs	r3, #64	; 0x40
 8008bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bb6:	e20e      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008bb8:	2380      	movs	r3, #128	; 0x80
 8008bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bbe:	e20a      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a6b      	ldr	r2, [pc, #428]	; (8008d74 <UART_SetConfig+0x340>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d130      	bne.n	8008c2c <UART_SetConfig+0x1f8>
 8008bca:	4b69      	ldr	r3, [pc, #420]	; (8008d70 <UART_SetConfig+0x33c>)
 8008bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bce:	f003 0307 	and.w	r3, r3, #7
 8008bd2:	2b05      	cmp	r3, #5
 8008bd4:	d826      	bhi.n	8008c24 <UART_SetConfig+0x1f0>
 8008bd6:	a201      	add	r2, pc, #4	; (adr r2, 8008bdc <UART_SetConfig+0x1a8>)
 8008bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bdc:	08008bf5 	.word	0x08008bf5
 8008be0:	08008bfd 	.word	0x08008bfd
 8008be4:	08008c05 	.word	0x08008c05
 8008be8:	08008c0d 	.word	0x08008c0d
 8008bec:	08008c15 	.word	0x08008c15
 8008bf0:	08008c1d 	.word	0x08008c1d
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bfa:	e1ec      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008bfc:	2304      	movs	r3, #4
 8008bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c02:	e1e8      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008c04:	2308      	movs	r3, #8
 8008c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c0a:	e1e4      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008c0c:	2310      	movs	r3, #16
 8008c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c12:	e1e0      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008c14:	2320      	movs	r3, #32
 8008c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c1a:	e1dc      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008c1c:	2340      	movs	r3, #64	; 0x40
 8008c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c22:	e1d8      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008c24:	2380      	movs	r3, #128	; 0x80
 8008c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c2a:	e1d4      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a51      	ldr	r2, [pc, #324]	; (8008d78 <UART_SetConfig+0x344>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d130      	bne.n	8008c98 <UART_SetConfig+0x264>
 8008c36:	4b4e      	ldr	r3, [pc, #312]	; (8008d70 <UART_SetConfig+0x33c>)
 8008c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c3a:	f003 0307 	and.w	r3, r3, #7
 8008c3e:	2b05      	cmp	r3, #5
 8008c40:	d826      	bhi.n	8008c90 <UART_SetConfig+0x25c>
 8008c42:	a201      	add	r2, pc, #4	; (adr r2, 8008c48 <UART_SetConfig+0x214>)
 8008c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c48:	08008c61 	.word	0x08008c61
 8008c4c:	08008c69 	.word	0x08008c69
 8008c50:	08008c71 	.word	0x08008c71
 8008c54:	08008c79 	.word	0x08008c79
 8008c58:	08008c81 	.word	0x08008c81
 8008c5c:	08008c89 	.word	0x08008c89
 8008c60:	2300      	movs	r3, #0
 8008c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c66:	e1b6      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008c68:	2304      	movs	r3, #4
 8008c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c6e:	e1b2      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008c70:	2308      	movs	r3, #8
 8008c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c76:	e1ae      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008c78:	2310      	movs	r3, #16
 8008c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c7e:	e1aa      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008c80:	2320      	movs	r3, #32
 8008c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c86:	e1a6      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008c88:	2340      	movs	r3, #64	; 0x40
 8008c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c8e:	e1a2      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008c90:	2380      	movs	r3, #128	; 0x80
 8008c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c96:	e19e      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a37      	ldr	r2, [pc, #220]	; (8008d7c <UART_SetConfig+0x348>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d130      	bne.n	8008d04 <UART_SetConfig+0x2d0>
 8008ca2:	4b33      	ldr	r3, [pc, #204]	; (8008d70 <UART_SetConfig+0x33c>)
 8008ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ca6:	f003 0307 	and.w	r3, r3, #7
 8008caa:	2b05      	cmp	r3, #5
 8008cac:	d826      	bhi.n	8008cfc <UART_SetConfig+0x2c8>
 8008cae:	a201      	add	r2, pc, #4	; (adr r2, 8008cb4 <UART_SetConfig+0x280>)
 8008cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb4:	08008ccd 	.word	0x08008ccd
 8008cb8:	08008cd5 	.word	0x08008cd5
 8008cbc:	08008cdd 	.word	0x08008cdd
 8008cc0:	08008ce5 	.word	0x08008ce5
 8008cc4:	08008ced 	.word	0x08008ced
 8008cc8:	08008cf5 	.word	0x08008cf5
 8008ccc:	2300      	movs	r3, #0
 8008cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cd2:	e180      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008cd4:	2304      	movs	r3, #4
 8008cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cda:	e17c      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008cdc:	2308      	movs	r3, #8
 8008cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ce2:	e178      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008ce4:	2310      	movs	r3, #16
 8008ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cea:	e174      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008cec:	2320      	movs	r3, #32
 8008cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cf2:	e170      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008cf4:	2340      	movs	r3, #64	; 0x40
 8008cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cfa:	e16c      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008cfc:	2380      	movs	r3, #128	; 0x80
 8008cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d02:	e168      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a1d      	ldr	r2, [pc, #116]	; (8008d80 <UART_SetConfig+0x34c>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d142      	bne.n	8008d94 <UART_SetConfig+0x360>
 8008d0e:	4b18      	ldr	r3, [pc, #96]	; (8008d70 <UART_SetConfig+0x33c>)
 8008d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d12:	f003 0307 	and.w	r3, r3, #7
 8008d16:	2b05      	cmp	r3, #5
 8008d18:	d838      	bhi.n	8008d8c <UART_SetConfig+0x358>
 8008d1a:	a201      	add	r2, pc, #4	; (adr r2, 8008d20 <UART_SetConfig+0x2ec>)
 8008d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d20:	08008d39 	.word	0x08008d39
 8008d24:	08008d41 	.word	0x08008d41
 8008d28:	08008d49 	.word	0x08008d49
 8008d2c:	08008d51 	.word	0x08008d51
 8008d30:	08008d59 	.word	0x08008d59
 8008d34:	08008d85 	.word	0x08008d85
 8008d38:	2300      	movs	r3, #0
 8008d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d3e:	e14a      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008d40:	2304      	movs	r3, #4
 8008d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d46:	e146      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008d48:	2308      	movs	r3, #8
 8008d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d4e:	e142      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008d50:	2310      	movs	r3, #16
 8008d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d56:	e13e      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008d58:	2320      	movs	r3, #32
 8008d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d5e:	e13a      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008d60:	cfff69f3 	.word	0xcfff69f3
 8008d64:	58000c00 	.word	0x58000c00
 8008d68:	11fff4ff 	.word	0x11fff4ff
 8008d6c:	40011000 	.word	0x40011000
 8008d70:	58024400 	.word	0x58024400
 8008d74:	40004400 	.word	0x40004400
 8008d78:	40004800 	.word	0x40004800
 8008d7c:	40004c00 	.word	0x40004c00
 8008d80:	40005000 	.word	0x40005000
 8008d84:	2340      	movs	r3, #64	; 0x40
 8008d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d8a:	e124      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008d8c:	2380      	movs	r3, #128	; 0x80
 8008d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d92:	e120      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4acc      	ldr	r2, [pc, #816]	; (80090cc <UART_SetConfig+0x698>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d176      	bne.n	8008e8c <UART_SetConfig+0x458>
 8008d9e:	4bcc      	ldr	r3, [pc, #816]	; (80090d0 <UART_SetConfig+0x69c>)
 8008da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008da2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008da6:	2b28      	cmp	r3, #40	; 0x28
 8008da8:	d86c      	bhi.n	8008e84 <UART_SetConfig+0x450>
 8008daa:	a201      	add	r2, pc, #4	; (adr r2, 8008db0 <UART_SetConfig+0x37c>)
 8008dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db0:	08008e55 	.word	0x08008e55
 8008db4:	08008e85 	.word	0x08008e85
 8008db8:	08008e85 	.word	0x08008e85
 8008dbc:	08008e85 	.word	0x08008e85
 8008dc0:	08008e85 	.word	0x08008e85
 8008dc4:	08008e85 	.word	0x08008e85
 8008dc8:	08008e85 	.word	0x08008e85
 8008dcc:	08008e85 	.word	0x08008e85
 8008dd0:	08008e5d 	.word	0x08008e5d
 8008dd4:	08008e85 	.word	0x08008e85
 8008dd8:	08008e85 	.word	0x08008e85
 8008ddc:	08008e85 	.word	0x08008e85
 8008de0:	08008e85 	.word	0x08008e85
 8008de4:	08008e85 	.word	0x08008e85
 8008de8:	08008e85 	.word	0x08008e85
 8008dec:	08008e85 	.word	0x08008e85
 8008df0:	08008e65 	.word	0x08008e65
 8008df4:	08008e85 	.word	0x08008e85
 8008df8:	08008e85 	.word	0x08008e85
 8008dfc:	08008e85 	.word	0x08008e85
 8008e00:	08008e85 	.word	0x08008e85
 8008e04:	08008e85 	.word	0x08008e85
 8008e08:	08008e85 	.word	0x08008e85
 8008e0c:	08008e85 	.word	0x08008e85
 8008e10:	08008e6d 	.word	0x08008e6d
 8008e14:	08008e85 	.word	0x08008e85
 8008e18:	08008e85 	.word	0x08008e85
 8008e1c:	08008e85 	.word	0x08008e85
 8008e20:	08008e85 	.word	0x08008e85
 8008e24:	08008e85 	.word	0x08008e85
 8008e28:	08008e85 	.word	0x08008e85
 8008e2c:	08008e85 	.word	0x08008e85
 8008e30:	08008e75 	.word	0x08008e75
 8008e34:	08008e85 	.word	0x08008e85
 8008e38:	08008e85 	.word	0x08008e85
 8008e3c:	08008e85 	.word	0x08008e85
 8008e40:	08008e85 	.word	0x08008e85
 8008e44:	08008e85 	.word	0x08008e85
 8008e48:	08008e85 	.word	0x08008e85
 8008e4c:	08008e85 	.word	0x08008e85
 8008e50:	08008e7d 	.word	0x08008e7d
 8008e54:	2301      	movs	r3, #1
 8008e56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e5a:	e0bc      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008e5c:	2304      	movs	r3, #4
 8008e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e62:	e0b8      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008e64:	2308      	movs	r3, #8
 8008e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e6a:	e0b4      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008e6c:	2310      	movs	r3, #16
 8008e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e72:	e0b0      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008e74:	2320      	movs	r3, #32
 8008e76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e7a:	e0ac      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008e7c:	2340      	movs	r3, #64	; 0x40
 8008e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e82:	e0a8      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008e84:	2380      	movs	r3, #128	; 0x80
 8008e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e8a:	e0a4      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a90      	ldr	r2, [pc, #576]	; (80090d4 <UART_SetConfig+0x6a0>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d130      	bne.n	8008ef8 <UART_SetConfig+0x4c4>
 8008e96:	4b8e      	ldr	r3, [pc, #568]	; (80090d0 <UART_SetConfig+0x69c>)
 8008e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e9a:	f003 0307 	and.w	r3, r3, #7
 8008e9e:	2b05      	cmp	r3, #5
 8008ea0:	d826      	bhi.n	8008ef0 <UART_SetConfig+0x4bc>
 8008ea2:	a201      	add	r2, pc, #4	; (adr r2, 8008ea8 <UART_SetConfig+0x474>)
 8008ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea8:	08008ec1 	.word	0x08008ec1
 8008eac:	08008ec9 	.word	0x08008ec9
 8008eb0:	08008ed1 	.word	0x08008ed1
 8008eb4:	08008ed9 	.word	0x08008ed9
 8008eb8:	08008ee1 	.word	0x08008ee1
 8008ebc:	08008ee9 	.word	0x08008ee9
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ec6:	e086      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008ec8:	2304      	movs	r3, #4
 8008eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ece:	e082      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008ed0:	2308      	movs	r3, #8
 8008ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ed6:	e07e      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008ed8:	2310      	movs	r3, #16
 8008eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ede:	e07a      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008ee0:	2320      	movs	r3, #32
 8008ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ee6:	e076      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008ee8:	2340      	movs	r3, #64	; 0x40
 8008eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eee:	e072      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008ef0:	2380      	movs	r3, #128	; 0x80
 8008ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ef6:	e06e      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a76      	ldr	r2, [pc, #472]	; (80090d8 <UART_SetConfig+0x6a4>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d130      	bne.n	8008f64 <UART_SetConfig+0x530>
 8008f02:	4b73      	ldr	r3, [pc, #460]	; (80090d0 <UART_SetConfig+0x69c>)
 8008f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f06:	f003 0307 	and.w	r3, r3, #7
 8008f0a:	2b05      	cmp	r3, #5
 8008f0c:	d826      	bhi.n	8008f5c <UART_SetConfig+0x528>
 8008f0e:	a201      	add	r2, pc, #4	; (adr r2, 8008f14 <UART_SetConfig+0x4e0>)
 8008f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f14:	08008f2d 	.word	0x08008f2d
 8008f18:	08008f35 	.word	0x08008f35
 8008f1c:	08008f3d 	.word	0x08008f3d
 8008f20:	08008f45 	.word	0x08008f45
 8008f24:	08008f4d 	.word	0x08008f4d
 8008f28:	08008f55 	.word	0x08008f55
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f32:	e050      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008f34:	2304      	movs	r3, #4
 8008f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f3a:	e04c      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008f3c:	2308      	movs	r3, #8
 8008f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f42:	e048      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008f44:	2310      	movs	r3, #16
 8008f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f4a:	e044      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008f4c:	2320      	movs	r3, #32
 8008f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f52:	e040      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008f54:	2340      	movs	r3, #64	; 0x40
 8008f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f5a:	e03c      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008f5c:	2380      	movs	r3, #128	; 0x80
 8008f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f62:	e038      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a5c      	ldr	r2, [pc, #368]	; (80090dc <UART_SetConfig+0x6a8>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d130      	bne.n	8008fd0 <UART_SetConfig+0x59c>
 8008f6e:	4b58      	ldr	r3, [pc, #352]	; (80090d0 <UART_SetConfig+0x69c>)
 8008f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f72:	f003 0307 	and.w	r3, r3, #7
 8008f76:	2b05      	cmp	r3, #5
 8008f78:	d826      	bhi.n	8008fc8 <UART_SetConfig+0x594>
 8008f7a:	a201      	add	r2, pc, #4	; (adr r2, 8008f80 <UART_SetConfig+0x54c>)
 8008f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f80:	08008f99 	.word	0x08008f99
 8008f84:	08008fa1 	.word	0x08008fa1
 8008f88:	08008fa9 	.word	0x08008fa9
 8008f8c:	08008fb1 	.word	0x08008fb1
 8008f90:	08008fb9 	.word	0x08008fb9
 8008f94:	08008fc1 	.word	0x08008fc1
 8008f98:	2302      	movs	r3, #2
 8008f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f9e:	e01a      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008fa0:	2304      	movs	r3, #4
 8008fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fa6:	e016      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008fa8:	2308      	movs	r3, #8
 8008faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fae:	e012      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008fb0:	2310      	movs	r3, #16
 8008fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fb6:	e00e      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008fb8:	2320      	movs	r3, #32
 8008fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fbe:	e00a      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008fc0:	2340      	movs	r3, #64	; 0x40
 8008fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fc6:	e006      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008fc8:	2380      	movs	r3, #128	; 0x80
 8008fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fce:	e002      	b.n	8008fd6 <UART_SetConfig+0x5a2>
 8008fd0:	2380      	movs	r3, #128	; 0x80
 8008fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a40      	ldr	r2, [pc, #256]	; (80090dc <UART_SetConfig+0x6a8>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	f040 80ef 	bne.w	80091c0 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008fe2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008fe6:	2b20      	cmp	r3, #32
 8008fe8:	dc46      	bgt.n	8009078 <UART_SetConfig+0x644>
 8008fea:	2b02      	cmp	r3, #2
 8008fec:	f2c0 8081 	blt.w	80090f2 <UART_SetConfig+0x6be>
 8008ff0:	3b02      	subs	r3, #2
 8008ff2:	2b1e      	cmp	r3, #30
 8008ff4:	d87d      	bhi.n	80090f2 <UART_SetConfig+0x6be>
 8008ff6:	a201      	add	r2, pc, #4	; (adr r2, 8008ffc <UART_SetConfig+0x5c8>)
 8008ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ffc:	0800907f 	.word	0x0800907f
 8009000:	080090f3 	.word	0x080090f3
 8009004:	08009087 	.word	0x08009087
 8009008:	080090f3 	.word	0x080090f3
 800900c:	080090f3 	.word	0x080090f3
 8009010:	080090f3 	.word	0x080090f3
 8009014:	08009097 	.word	0x08009097
 8009018:	080090f3 	.word	0x080090f3
 800901c:	080090f3 	.word	0x080090f3
 8009020:	080090f3 	.word	0x080090f3
 8009024:	080090f3 	.word	0x080090f3
 8009028:	080090f3 	.word	0x080090f3
 800902c:	080090f3 	.word	0x080090f3
 8009030:	080090f3 	.word	0x080090f3
 8009034:	080090a7 	.word	0x080090a7
 8009038:	080090f3 	.word	0x080090f3
 800903c:	080090f3 	.word	0x080090f3
 8009040:	080090f3 	.word	0x080090f3
 8009044:	080090f3 	.word	0x080090f3
 8009048:	080090f3 	.word	0x080090f3
 800904c:	080090f3 	.word	0x080090f3
 8009050:	080090f3 	.word	0x080090f3
 8009054:	080090f3 	.word	0x080090f3
 8009058:	080090f3 	.word	0x080090f3
 800905c:	080090f3 	.word	0x080090f3
 8009060:	080090f3 	.word	0x080090f3
 8009064:	080090f3 	.word	0x080090f3
 8009068:	080090f3 	.word	0x080090f3
 800906c:	080090f3 	.word	0x080090f3
 8009070:	080090f3 	.word	0x080090f3
 8009074:	080090e5 	.word	0x080090e5
 8009078:	2b40      	cmp	r3, #64	; 0x40
 800907a:	d036      	beq.n	80090ea <UART_SetConfig+0x6b6>
 800907c:	e039      	b.n	80090f2 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800907e:	f7fd fbaf 	bl	80067e0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009082:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009084:	e03b      	b.n	80090fe <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009086:	f107 0314 	add.w	r3, r7, #20
 800908a:	4618      	mov	r0, r3
 800908c:	f7fd fbbe 	bl	800680c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009090:	69bb      	ldr	r3, [r7, #24]
 8009092:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009094:	e033      	b.n	80090fe <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009096:	f107 0308 	add.w	r3, r7, #8
 800909a:	4618      	mov	r0, r3
 800909c:	f7fd fd0a 	bl	8006ab4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80090a4:	e02b      	b.n	80090fe <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090a6:	4b0a      	ldr	r3, [pc, #40]	; (80090d0 <UART_SetConfig+0x69c>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f003 0320 	and.w	r3, r3, #32
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d009      	beq.n	80090c6 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80090b2:	4b07      	ldr	r3, [pc, #28]	; (80090d0 <UART_SetConfig+0x69c>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	08db      	lsrs	r3, r3, #3
 80090b8:	f003 0303 	and.w	r3, r3, #3
 80090bc:	4a08      	ldr	r2, [pc, #32]	; (80090e0 <UART_SetConfig+0x6ac>)
 80090be:	fa22 f303 	lsr.w	r3, r2, r3
 80090c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80090c4:	e01b      	b.n	80090fe <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80090c6:	4b06      	ldr	r3, [pc, #24]	; (80090e0 <UART_SetConfig+0x6ac>)
 80090c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80090ca:	e018      	b.n	80090fe <UART_SetConfig+0x6ca>
 80090cc:	40011400 	.word	0x40011400
 80090d0:	58024400 	.word	0x58024400
 80090d4:	40007800 	.word	0x40007800
 80090d8:	40007c00 	.word	0x40007c00
 80090dc:	58000c00 	.word	0x58000c00
 80090e0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80090e4:	4bc4      	ldr	r3, [pc, #784]	; (80093f8 <UART_SetConfig+0x9c4>)
 80090e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80090e8:	e009      	b.n	80090fe <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80090f0:	e005      	b.n	80090fe <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80090f2:	2300      	movs	r3, #0
 80090f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80090fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80090fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009100:	2b00      	cmp	r3, #0
 8009102:	f000 81da 	beq.w	80094ba <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910a:	4abc      	ldr	r2, [pc, #752]	; (80093fc <UART_SetConfig+0x9c8>)
 800910c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009110:	461a      	mov	r2, r3
 8009112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009114:	fbb3 f3f2 	udiv	r3, r3, r2
 8009118:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	685a      	ldr	r2, [r3, #4]
 800911e:	4613      	mov	r3, r2
 8009120:	005b      	lsls	r3, r3, #1
 8009122:	4413      	add	r3, r2
 8009124:	6a3a      	ldr	r2, [r7, #32]
 8009126:	429a      	cmp	r2, r3
 8009128:	d305      	bcc.n	8009136 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009130:	6a3a      	ldr	r2, [r7, #32]
 8009132:	429a      	cmp	r2, r3
 8009134:	d903      	bls.n	800913e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8009136:	2301      	movs	r3, #1
 8009138:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800913c:	e1bd      	b.n	80094ba <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800913e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009140:	4618      	mov	r0, r3
 8009142:	f04f 0100 	mov.w	r1, #0
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914a:	4aac      	ldr	r2, [pc, #688]	; (80093fc <UART_SetConfig+0x9c8>)
 800914c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009150:	b29a      	uxth	r2, r3
 8009152:	f04f 0300 	mov.w	r3, #0
 8009156:	f7f7 f97b 	bl	8000450 <__aeabi_uldivmod>
 800915a:	4602      	mov	r2, r0
 800915c:	460b      	mov	r3, r1
 800915e:	4610      	mov	r0, r2
 8009160:	4619      	mov	r1, r3
 8009162:	f04f 0200 	mov.w	r2, #0
 8009166:	f04f 0300 	mov.w	r3, #0
 800916a:	020b      	lsls	r3, r1, #8
 800916c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009170:	0202      	lsls	r2, r0, #8
 8009172:	6879      	ldr	r1, [r7, #4]
 8009174:	6849      	ldr	r1, [r1, #4]
 8009176:	0849      	lsrs	r1, r1, #1
 8009178:	4608      	mov	r0, r1
 800917a:	f04f 0100 	mov.w	r1, #0
 800917e:	1814      	adds	r4, r2, r0
 8009180:	eb43 0501 	adc.w	r5, r3, r1
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	461a      	mov	r2, r3
 800918a:	f04f 0300 	mov.w	r3, #0
 800918e:	4620      	mov	r0, r4
 8009190:	4629      	mov	r1, r5
 8009192:	f7f7 f95d 	bl	8000450 <__aeabi_uldivmod>
 8009196:	4602      	mov	r2, r0
 8009198:	460b      	mov	r3, r1
 800919a:	4613      	mov	r3, r2
 800919c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800919e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091a4:	d308      	bcc.n	80091b8 <UART_SetConfig+0x784>
 80091a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091ac:	d204      	bcs.n	80091b8 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091b4:	60da      	str	r2, [r3, #12]
 80091b6:	e180      	b.n	80094ba <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80091b8:	2301      	movs	r3, #1
 80091ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80091be:	e17c      	b.n	80094ba <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	69db      	ldr	r3, [r3, #28]
 80091c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091c8:	f040 80be 	bne.w	8009348 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 80091cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80091d0:	2b20      	cmp	r3, #32
 80091d2:	dc49      	bgt.n	8009268 <UART_SetConfig+0x834>
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	db7c      	blt.n	80092d2 <UART_SetConfig+0x89e>
 80091d8:	2b20      	cmp	r3, #32
 80091da:	d87a      	bhi.n	80092d2 <UART_SetConfig+0x89e>
 80091dc:	a201      	add	r2, pc, #4	; (adr r2, 80091e4 <UART_SetConfig+0x7b0>)
 80091de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e2:	bf00      	nop
 80091e4:	0800926f 	.word	0x0800926f
 80091e8:	08009277 	.word	0x08009277
 80091ec:	080092d3 	.word	0x080092d3
 80091f0:	080092d3 	.word	0x080092d3
 80091f4:	0800927f 	.word	0x0800927f
 80091f8:	080092d3 	.word	0x080092d3
 80091fc:	080092d3 	.word	0x080092d3
 8009200:	080092d3 	.word	0x080092d3
 8009204:	0800928f 	.word	0x0800928f
 8009208:	080092d3 	.word	0x080092d3
 800920c:	080092d3 	.word	0x080092d3
 8009210:	080092d3 	.word	0x080092d3
 8009214:	080092d3 	.word	0x080092d3
 8009218:	080092d3 	.word	0x080092d3
 800921c:	080092d3 	.word	0x080092d3
 8009220:	080092d3 	.word	0x080092d3
 8009224:	0800929f 	.word	0x0800929f
 8009228:	080092d3 	.word	0x080092d3
 800922c:	080092d3 	.word	0x080092d3
 8009230:	080092d3 	.word	0x080092d3
 8009234:	080092d3 	.word	0x080092d3
 8009238:	080092d3 	.word	0x080092d3
 800923c:	080092d3 	.word	0x080092d3
 8009240:	080092d3 	.word	0x080092d3
 8009244:	080092d3 	.word	0x080092d3
 8009248:	080092d3 	.word	0x080092d3
 800924c:	080092d3 	.word	0x080092d3
 8009250:	080092d3 	.word	0x080092d3
 8009254:	080092d3 	.word	0x080092d3
 8009258:	080092d3 	.word	0x080092d3
 800925c:	080092d3 	.word	0x080092d3
 8009260:	080092d3 	.word	0x080092d3
 8009264:	080092c5 	.word	0x080092c5
 8009268:	2b40      	cmp	r3, #64	; 0x40
 800926a:	d02e      	beq.n	80092ca <UART_SetConfig+0x896>
 800926c:	e031      	b.n	80092d2 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800926e:	f7fc fad9 	bl	8005824 <HAL_RCC_GetPCLK1Freq>
 8009272:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009274:	e033      	b.n	80092de <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009276:	f7fc faeb 	bl	8005850 <HAL_RCC_GetPCLK2Freq>
 800927a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800927c:	e02f      	b.n	80092de <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800927e:	f107 0314 	add.w	r3, r7, #20
 8009282:	4618      	mov	r0, r3
 8009284:	f7fd fac2 	bl	800680c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009288:	69bb      	ldr	r3, [r7, #24]
 800928a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800928c:	e027      	b.n	80092de <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800928e:	f107 0308 	add.w	r3, r7, #8
 8009292:	4618      	mov	r0, r3
 8009294:	f7fd fc0e 	bl	8006ab4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800929c:	e01f      	b.n	80092de <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800929e:	4b58      	ldr	r3, [pc, #352]	; (8009400 <UART_SetConfig+0x9cc>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f003 0320 	and.w	r3, r3, #32
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d009      	beq.n	80092be <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80092aa:	4b55      	ldr	r3, [pc, #340]	; (8009400 <UART_SetConfig+0x9cc>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	08db      	lsrs	r3, r3, #3
 80092b0:	f003 0303 	and.w	r3, r3, #3
 80092b4:	4a53      	ldr	r2, [pc, #332]	; (8009404 <UART_SetConfig+0x9d0>)
 80092b6:	fa22 f303 	lsr.w	r3, r2, r3
 80092ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80092bc:	e00f      	b.n	80092de <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80092be:	4b51      	ldr	r3, [pc, #324]	; (8009404 <UART_SetConfig+0x9d0>)
 80092c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80092c2:	e00c      	b.n	80092de <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80092c4:	4b4c      	ldr	r3, [pc, #304]	; (80093f8 <UART_SetConfig+0x9c4>)
 80092c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80092c8:	e009      	b.n	80092de <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80092d0:	e005      	b.n	80092de <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80092d2:	2300      	movs	r3, #0
 80092d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80092dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80092de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	f000 80ea 	beq.w	80094ba <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ea:	4a44      	ldr	r2, [pc, #272]	; (80093fc <UART_SetConfig+0x9c8>)
 80092ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092f0:	461a      	mov	r2, r3
 80092f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80092f8:	005a      	lsls	r2, r3, #1
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	085b      	lsrs	r3, r3, #1
 8009300:	441a      	add	r2, r3
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	fbb2 f3f3 	udiv	r3, r2, r3
 800930a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800930c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930e:	2b0f      	cmp	r3, #15
 8009310:	d916      	bls.n	8009340 <UART_SetConfig+0x90c>
 8009312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009318:	d212      	bcs.n	8009340 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800931a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931c:	b29b      	uxth	r3, r3
 800931e:	f023 030f 	bic.w	r3, r3, #15
 8009322:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009326:	085b      	lsrs	r3, r3, #1
 8009328:	b29b      	uxth	r3, r3
 800932a:	f003 0307 	and.w	r3, r3, #7
 800932e:	b29a      	uxth	r2, r3
 8009330:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009332:	4313      	orrs	r3, r2
 8009334:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800933c:	60da      	str	r2, [r3, #12]
 800933e:	e0bc      	b.n	80094ba <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009340:	2301      	movs	r3, #1
 8009342:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009346:	e0b8      	b.n	80094ba <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009348:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800934c:	2b20      	cmp	r3, #32
 800934e:	dc4b      	bgt.n	80093e8 <UART_SetConfig+0x9b4>
 8009350:	2b00      	cmp	r3, #0
 8009352:	f2c0 8087 	blt.w	8009464 <UART_SetConfig+0xa30>
 8009356:	2b20      	cmp	r3, #32
 8009358:	f200 8084 	bhi.w	8009464 <UART_SetConfig+0xa30>
 800935c:	a201      	add	r2, pc, #4	; (adr r2, 8009364 <UART_SetConfig+0x930>)
 800935e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009362:	bf00      	nop
 8009364:	080093ef 	.word	0x080093ef
 8009368:	08009409 	.word	0x08009409
 800936c:	08009465 	.word	0x08009465
 8009370:	08009465 	.word	0x08009465
 8009374:	08009411 	.word	0x08009411
 8009378:	08009465 	.word	0x08009465
 800937c:	08009465 	.word	0x08009465
 8009380:	08009465 	.word	0x08009465
 8009384:	08009421 	.word	0x08009421
 8009388:	08009465 	.word	0x08009465
 800938c:	08009465 	.word	0x08009465
 8009390:	08009465 	.word	0x08009465
 8009394:	08009465 	.word	0x08009465
 8009398:	08009465 	.word	0x08009465
 800939c:	08009465 	.word	0x08009465
 80093a0:	08009465 	.word	0x08009465
 80093a4:	08009431 	.word	0x08009431
 80093a8:	08009465 	.word	0x08009465
 80093ac:	08009465 	.word	0x08009465
 80093b0:	08009465 	.word	0x08009465
 80093b4:	08009465 	.word	0x08009465
 80093b8:	08009465 	.word	0x08009465
 80093bc:	08009465 	.word	0x08009465
 80093c0:	08009465 	.word	0x08009465
 80093c4:	08009465 	.word	0x08009465
 80093c8:	08009465 	.word	0x08009465
 80093cc:	08009465 	.word	0x08009465
 80093d0:	08009465 	.word	0x08009465
 80093d4:	08009465 	.word	0x08009465
 80093d8:	08009465 	.word	0x08009465
 80093dc:	08009465 	.word	0x08009465
 80093e0:	08009465 	.word	0x08009465
 80093e4:	08009457 	.word	0x08009457
 80093e8:	2b40      	cmp	r3, #64	; 0x40
 80093ea:	d037      	beq.n	800945c <UART_SetConfig+0xa28>
 80093ec:	e03a      	b.n	8009464 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093ee:	f7fc fa19 	bl	8005824 <HAL_RCC_GetPCLK1Freq>
 80093f2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80093f4:	e03c      	b.n	8009470 <UART_SetConfig+0xa3c>
 80093f6:	bf00      	nop
 80093f8:	003d0900 	.word	0x003d0900
 80093fc:	0802eaac 	.word	0x0802eaac
 8009400:	58024400 	.word	0x58024400
 8009404:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009408:	f7fc fa22 	bl	8005850 <HAL_RCC_GetPCLK2Freq>
 800940c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800940e:	e02f      	b.n	8009470 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009410:	f107 0314 	add.w	r3, r7, #20
 8009414:	4618      	mov	r0, r3
 8009416:	f7fd f9f9 	bl	800680c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800941a:	69bb      	ldr	r3, [r7, #24]
 800941c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800941e:	e027      	b.n	8009470 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009420:	f107 0308 	add.w	r3, r7, #8
 8009424:	4618      	mov	r0, r3
 8009426:	f7fd fb45 	bl	8006ab4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800942e:	e01f      	b.n	8009470 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009430:	4b2c      	ldr	r3, [pc, #176]	; (80094e4 <UART_SetConfig+0xab0>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f003 0320 	and.w	r3, r3, #32
 8009438:	2b00      	cmp	r3, #0
 800943a:	d009      	beq.n	8009450 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800943c:	4b29      	ldr	r3, [pc, #164]	; (80094e4 <UART_SetConfig+0xab0>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	08db      	lsrs	r3, r3, #3
 8009442:	f003 0303 	and.w	r3, r3, #3
 8009446:	4a28      	ldr	r2, [pc, #160]	; (80094e8 <UART_SetConfig+0xab4>)
 8009448:	fa22 f303 	lsr.w	r3, r2, r3
 800944c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800944e:	e00f      	b.n	8009470 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8009450:	4b25      	ldr	r3, [pc, #148]	; (80094e8 <UART_SetConfig+0xab4>)
 8009452:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009454:	e00c      	b.n	8009470 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009456:	4b25      	ldr	r3, [pc, #148]	; (80094ec <UART_SetConfig+0xab8>)
 8009458:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800945a:	e009      	b.n	8009470 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800945c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009460:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009462:	e005      	b.n	8009470 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8009464:	2300      	movs	r3, #0
 8009466:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800946e:	bf00      	nop
    }

    if (pclk != 0U)
 8009470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009472:	2b00      	cmp	r3, #0
 8009474:	d021      	beq.n	80094ba <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947a:	4a1d      	ldr	r2, [pc, #116]	; (80094f0 <UART_SetConfig+0xabc>)
 800947c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009480:	461a      	mov	r2, r3
 8009482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009484:	fbb3 f2f2 	udiv	r2, r3, r2
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	085b      	lsrs	r3, r3, #1
 800948e:	441a      	add	r2, r3
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	fbb2 f3f3 	udiv	r3, r2, r3
 8009498:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800949a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800949c:	2b0f      	cmp	r3, #15
 800949e:	d909      	bls.n	80094b4 <UART_SetConfig+0xa80>
 80094a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094a6:	d205      	bcs.n	80094b4 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80094a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094aa:	b29a      	uxth	r2, r3
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	60da      	str	r2, [r3, #12]
 80094b2:	e002      	b.n	80094ba <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80094b4:	2301      	movs	r3, #1
 80094b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2201      	movs	r2, #1
 80094be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2201      	movs	r2, #1
 80094c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80094d6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3738      	adds	r7, #56	; 0x38
 80094de:	46bd      	mov	sp, r7
 80094e0:	bdb0      	pop	{r4, r5, r7, pc}
 80094e2:	bf00      	nop
 80094e4:	58024400 	.word	0x58024400
 80094e8:	03d09000 	.word	0x03d09000
 80094ec:	003d0900 	.word	0x003d0900
 80094f0:	0802eaac 	.word	0x0802eaac

080094f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009500:	f003 0301 	and.w	r3, r3, #1
 8009504:	2b00      	cmp	r3, #0
 8009506:	d00a      	beq.n	800951e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	430a      	orrs	r2, r1
 800951c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009522:	f003 0302 	and.w	r3, r3, #2
 8009526:	2b00      	cmp	r3, #0
 8009528:	d00a      	beq.n	8009540 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	430a      	orrs	r2, r1
 800953e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009544:	f003 0304 	and.w	r3, r3, #4
 8009548:	2b00      	cmp	r3, #0
 800954a:	d00a      	beq.n	8009562 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	430a      	orrs	r2, r1
 8009560:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009566:	f003 0308 	and.w	r3, r3, #8
 800956a:	2b00      	cmp	r3, #0
 800956c:	d00a      	beq.n	8009584 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	430a      	orrs	r2, r1
 8009582:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009588:	f003 0310 	and.w	r3, r3, #16
 800958c:	2b00      	cmp	r3, #0
 800958e:	d00a      	beq.n	80095a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	430a      	orrs	r2, r1
 80095a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095aa:	f003 0320 	and.w	r3, r3, #32
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d00a      	beq.n	80095c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	430a      	orrs	r2, r1
 80095c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d01a      	beq.n	800960a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	430a      	orrs	r2, r1
 80095e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095f2:	d10a      	bne.n	800960a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	430a      	orrs	r2, r1
 8009608:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800960e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00a      	beq.n	800962c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	430a      	orrs	r2, r1
 800962a:	605a      	str	r2, [r3, #4]
  }
}
 800962c:	bf00      	nop
 800962e:	370c      	adds	r7, #12
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b086      	sub	sp, #24
 800963c:	af02      	add	r7, sp, #8
 800963e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009648:	f7f7 fef8 	bl	800143c <HAL_GetTick>
 800964c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f003 0308 	and.w	r3, r3, #8
 8009658:	2b08      	cmp	r3, #8
 800965a:	d10e      	bne.n	800967a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800965c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009660:	9300      	str	r3, [sp, #0]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2200      	movs	r2, #0
 8009666:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 f82f 	bl	80096ce <UART_WaitOnFlagUntilTimeout>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d001      	beq.n	800967a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009676:	2303      	movs	r3, #3
 8009678:	e025      	b.n	80096c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f003 0304 	and.w	r3, r3, #4
 8009684:	2b04      	cmp	r3, #4
 8009686:	d10e      	bne.n	80096a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009688:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800968c:	9300      	str	r3, [sp, #0]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2200      	movs	r2, #0
 8009692:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 f819 	bl	80096ce <UART_WaitOnFlagUntilTimeout>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d001      	beq.n	80096a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096a2:	2303      	movs	r3, #3
 80096a4:	e00f      	b.n	80096c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2220      	movs	r2, #32
 80096aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2220      	movs	r2, #32
 80096b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3710      	adds	r7, #16
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b09c      	sub	sp, #112	; 0x70
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	60f8      	str	r0, [r7, #12]
 80096d6:	60b9      	str	r1, [r7, #8]
 80096d8:	603b      	str	r3, [r7, #0]
 80096da:	4613      	mov	r3, r2
 80096dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096de:	e0a9      	b.n	8009834 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096e6:	f000 80a5 	beq.w	8009834 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096ea:	f7f7 fea7 	bl	800143c <HAL_GetTick>
 80096ee:	4602      	mov	r2, r0
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	1ad3      	subs	r3, r2, r3
 80096f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d302      	bcc.n	8009700 <UART_WaitOnFlagUntilTimeout+0x32>
 80096fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d140      	bne.n	8009782 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009708:	e853 3f00 	ldrex	r3, [r3]
 800970c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800970e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009710:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009714:	667b      	str	r3, [r7, #100]	; 0x64
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	461a      	mov	r2, r3
 800971c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800971e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009720:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009722:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009724:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009726:	e841 2300 	strex	r3, r2, [r1]
 800972a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800972c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800972e:	2b00      	cmp	r3, #0
 8009730:	d1e6      	bne.n	8009700 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	3308      	adds	r3, #8
 8009738:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800973a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800973c:	e853 3f00 	ldrex	r3, [r3]
 8009740:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009744:	f023 0301 	bic.w	r3, r3, #1
 8009748:	663b      	str	r3, [r7, #96]	; 0x60
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	3308      	adds	r3, #8
 8009750:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009752:	64ba      	str	r2, [r7, #72]	; 0x48
 8009754:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009756:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009758:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800975a:	e841 2300 	strex	r3, r2, [r1]
 800975e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009762:	2b00      	cmp	r3, #0
 8009764:	d1e5      	bne.n	8009732 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2220      	movs	r2, #32
 800976a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2220      	movs	r2, #32
 8009772:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2200      	movs	r2, #0
 800977a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800977e:	2303      	movs	r3, #3
 8009780:	e069      	b.n	8009856 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 0304 	and.w	r3, r3, #4
 800978c:	2b00      	cmp	r3, #0
 800978e:	d051      	beq.n	8009834 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	69db      	ldr	r3, [r3, #28]
 8009796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800979a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800979e:	d149      	bne.n	8009834 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80097a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b2:	e853 3f00 	ldrex	r3, [r3]
 80097b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80097be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	461a      	mov	r2, r3
 80097c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097c8:	637b      	str	r3, [r7, #52]	; 0x34
 80097ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80097ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097d0:	e841 2300 	strex	r3, r2, [r1]
 80097d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80097d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d1e6      	bne.n	80097aa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	3308      	adds	r3, #8
 80097e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	e853 3f00 	ldrex	r3, [r3]
 80097ea:	613b      	str	r3, [r7, #16]
   return(result);
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	f023 0301 	bic.w	r3, r3, #1
 80097f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	3308      	adds	r3, #8
 80097fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80097fc:	623a      	str	r2, [r7, #32]
 80097fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009800:	69f9      	ldr	r1, [r7, #28]
 8009802:	6a3a      	ldr	r2, [r7, #32]
 8009804:	e841 2300 	strex	r3, r2, [r1]
 8009808:	61bb      	str	r3, [r7, #24]
   return(result);
 800980a:	69bb      	ldr	r3, [r7, #24]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d1e5      	bne.n	80097dc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2220      	movs	r2, #32
 8009814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2220      	movs	r2, #32
 800981c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2220      	movs	r2, #32
 8009824:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2200      	movs	r2, #0
 800982c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009830:	2303      	movs	r3, #3
 8009832:	e010      	b.n	8009856 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	69da      	ldr	r2, [r3, #28]
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	4013      	ands	r3, r2
 800983e:	68ba      	ldr	r2, [r7, #8]
 8009840:	429a      	cmp	r2, r3
 8009842:	bf0c      	ite	eq
 8009844:	2301      	moveq	r3, #1
 8009846:	2300      	movne	r3, #0
 8009848:	b2db      	uxtb	r3, r3
 800984a:	461a      	mov	r2, r3
 800984c:	79fb      	ldrb	r3, [r7, #7]
 800984e:	429a      	cmp	r2, r3
 8009850:	f43f af46 	beq.w	80096e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009854:	2300      	movs	r3, #0
}
 8009856:	4618      	mov	r0, r3
 8009858:	3770      	adds	r7, #112	; 0x70
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
	...

08009860 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009860:	b480      	push	{r7}
 8009862:	b0a3      	sub	sp, #140	; 0x8c
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	4613      	mov	r3, r2
 800986c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	68ba      	ldr	r2, [r7, #8]
 8009872:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	88fa      	ldrh	r2, [r7, #6]
 8009878:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	88fa      	ldrh	r2, [r7, #6]
 8009880:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2200      	movs	r2, #0
 8009888:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009892:	d10e      	bne.n	80098b2 <UART_Start_Receive_IT+0x52>
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	691b      	ldr	r3, [r3, #16]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d105      	bne.n	80098a8 <UART_Start_Receive_IT+0x48>
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80098a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80098a6:	e02d      	b.n	8009904 <UART_Start_Receive_IT+0xa4>
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	22ff      	movs	r2, #255	; 0xff
 80098ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80098b0:	e028      	b.n	8009904 <UART_Start_Receive_IT+0xa4>
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d10d      	bne.n	80098d6 <UART_Start_Receive_IT+0x76>
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	691b      	ldr	r3, [r3, #16]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d104      	bne.n	80098cc <UART_Start_Receive_IT+0x6c>
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	22ff      	movs	r2, #255	; 0xff
 80098c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80098ca:	e01b      	b.n	8009904 <UART_Start_Receive_IT+0xa4>
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	227f      	movs	r2, #127	; 0x7f
 80098d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80098d4:	e016      	b.n	8009904 <UART_Start_Receive_IT+0xa4>
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098de:	d10d      	bne.n	80098fc <UART_Start_Receive_IT+0x9c>
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d104      	bne.n	80098f2 <UART_Start_Receive_IT+0x92>
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	227f      	movs	r2, #127	; 0x7f
 80098ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80098f0:	e008      	b.n	8009904 <UART_Start_Receive_IT+0xa4>
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	223f      	movs	r2, #63	; 0x3f
 80098f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80098fa:	e003      	b.n	8009904 <UART_Start_Receive_IT+0xa4>
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2200      	movs	r2, #0
 8009900:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2200      	movs	r2, #0
 8009908:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2222      	movs	r2, #34	; 0x22
 8009910:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	3308      	adds	r3, #8
 800991a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800991c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800991e:	e853 3f00 	ldrex	r3, [r3]
 8009922:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009924:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009926:	f043 0301 	orr.w	r3, r3, #1
 800992a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	3308      	adds	r3, #8
 8009934:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009938:	673a      	str	r2, [r7, #112]	; 0x70
 800993a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800993c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800993e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009940:	e841 2300 	strex	r3, r2, [r1]
 8009944:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8009946:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009948:	2b00      	cmp	r3, #0
 800994a:	d1e3      	bne.n	8009914 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009954:	d153      	bne.n	80099fe <UART_Start_Receive_IT+0x19e>
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800995c:	88fa      	ldrh	r2, [r7, #6]
 800995e:	429a      	cmp	r2, r3
 8009960:	d34d      	bcc.n	80099fe <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	689b      	ldr	r3, [r3, #8]
 8009966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800996a:	d107      	bne.n	800997c <UART_Start_Receive_IT+0x11c>
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	691b      	ldr	r3, [r3, #16]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d103      	bne.n	800997c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	4a4b      	ldr	r2, [pc, #300]	; (8009aa4 <UART_Start_Receive_IT+0x244>)
 8009978:	671a      	str	r2, [r3, #112]	; 0x70
 800997a:	e002      	b.n	8009982 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	4a4a      	ldr	r2, [pc, #296]	; (8009aa8 <UART_Start_Receive_IT+0x248>)
 8009980:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2200      	movs	r2, #0
 8009986:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	691b      	ldr	r3, [r3, #16]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d01a      	beq.n	80099c8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800999a:	e853 3f00 	ldrex	r3, [r3]
 800999e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80099a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	461a      	mov	r2, r3
 80099b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80099b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099b6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80099ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80099bc:	e841 2300 	strex	r3, r2, [r1]
 80099c0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80099c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d1e4      	bne.n	8009992 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	3308      	adds	r3, #8
 80099ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099d2:	e853 3f00 	ldrex	r3, [r3]
 80099d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80099d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	3308      	adds	r3, #8
 80099e6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80099e8:	64ba      	str	r2, [r7, #72]	; 0x48
 80099ea:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80099ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099f0:	e841 2300 	strex	r3, r2, [r1]
 80099f4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80099f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d1e5      	bne.n	80099c8 <UART_Start_Receive_IT+0x168>
 80099fc:	e04a      	b.n	8009a94 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a06:	d107      	bne.n	8009a18 <UART_Start_Receive_IT+0x1b8>
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	691b      	ldr	r3, [r3, #16]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d103      	bne.n	8009a18 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	4a26      	ldr	r2, [pc, #152]	; (8009aac <UART_Start_Receive_IT+0x24c>)
 8009a14:	671a      	str	r2, [r3, #112]	; 0x70
 8009a16:	e002      	b.n	8009a1e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	4a25      	ldr	r2, [pc, #148]	; (8009ab0 <UART_Start_Receive_IT+0x250>)
 8009a1c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2200      	movs	r2, #0
 8009a22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	691b      	ldr	r3, [r3, #16]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d019      	beq.n	8009a62 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a36:	e853 3f00 	ldrex	r3, [r3]
 8009a3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009a42:	677b      	str	r3, [r7, #116]	; 0x74
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	461a      	mov	r2, r3
 8009a4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8009a4e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009a52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a54:	e841 2300 	strex	r3, r2, [r1]
 8009a58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d1e6      	bne.n	8009a2e <UART_Start_Receive_IT+0x1ce>
 8009a60:	e018      	b.n	8009a94 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	e853 3f00 	ldrex	r3, [r3]
 8009a6e:	613b      	str	r3, [r7, #16]
   return(result);
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	f043 0320 	orr.w	r3, r3, #32
 8009a76:	67bb      	str	r3, [r7, #120]	; 0x78
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a80:	623b      	str	r3, [r7, #32]
 8009a82:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a84:	69f9      	ldr	r1, [r7, #28]
 8009a86:	6a3a      	ldr	r2, [r7, #32]
 8009a88:	e841 2300 	strex	r3, r2, [r1]
 8009a8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a8e:	69bb      	ldr	r3, [r7, #24]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d1e6      	bne.n	8009a62 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	378c      	adds	r7, #140	; 0x8c
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	0800a1bd 	.word	0x0800a1bd
 8009aa8:	08009ec5 	.word	0x08009ec5
 8009aac:	08009d63 	.word	0x08009d63
 8009ab0:	08009c03 	.word	0x08009c03

08009ab4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b095      	sub	sp, #84	; 0x54
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ac4:	e853 3f00 	ldrex	r3, [r3]
 8009ac8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009acc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ada:	643b      	str	r3, [r7, #64]	; 0x40
 8009adc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ade:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009ae0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ae2:	e841 2300 	strex	r3, r2, [r1]
 8009ae6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d1e6      	bne.n	8009abc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	3308      	adds	r3, #8
 8009af4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af6:	6a3b      	ldr	r3, [r7, #32]
 8009af8:	e853 3f00 	ldrex	r3, [r3]
 8009afc:	61fb      	str	r3, [r7, #28]
   return(result);
 8009afe:	69fa      	ldr	r2, [r7, #28]
 8009b00:	4b1e      	ldr	r3, [pc, #120]	; (8009b7c <UART_EndRxTransfer+0xc8>)
 8009b02:	4013      	ands	r3, r2
 8009b04:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	3308      	adds	r3, #8
 8009b0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b16:	e841 2300 	strex	r3, r2, [r1]
 8009b1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d1e5      	bne.n	8009aee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d118      	bne.n	8009b5c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	e853 3f00 	ldrex	r3, [r3]
 8009b36:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	f023 0310 	bic.w	r3, r3, #16
 8009b3e:	647b      	str	r3, [r7, #68]	; 0x44
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	461a      	mov	r2, r3
 8009b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b48:	61bb      	str	r3, [r7, #24]
 8009b4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b4c:	6979      	ldr	r1, [r7, #20]
 8009b4e:	69ba      	ldr	r2, [r7, #24]
 8009b50:	e841 2300 	strex	r3, r2, [r1]
 8009b54:	613b      	str	r3, [r7, #16]
   return(result);
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d1e6      	bne.n	8009b2a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2220      	movs	r2, #32
 8009b60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009b70:	bf00      	nop
 8009b72:	3754      	adds	r7, #84	; 0x54
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr
 8009b7c:	effffffe 	.word	0xeffffffe

08009b80 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2200      	movs	r2, #0
 8009b92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b9e:	68f8      	ldr	r0, [r7, #12]
 8009ba0:	f7fe ff32 	bl	8008a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ba4:	bf00      	nop
 8009ba6:	3710      	adds	r7, #16
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b088      	sub	sp, #32
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	e853 3f00 	ldrex	r3, [r3]
 8009bc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bc8:	61fb      	str	r3, [r7, #28]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	461a      	mov	r2, r3
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	61bb      	str	r3, [r7, #24]
 8009bd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd6:	6979      	ldr	r1, [r7, #20]
 8009bd8:	69ba      	ldr	r2, [r7, #24]
 8009bda:	e841 2300 	strex	r3, r2, [r1]
 8009bde:	613b      	str	r3, [r7, #16]
   return(result);
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d1e6      	bne.n	8009bb4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2220      	movs	r2, #32
 8009bea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f7fe fefd 	bl	80089f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bfa:	bf00      	nop
 8009bfc:	3720      	adds	r7, #32
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b096      	sub	sp, #88	; 0x58
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009c10:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c1a:	2b22      	cmp	r3, #34	; 0x22
 8009c1c:	f040 8095 	bne.w	8009d4a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c26:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009c2a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009c2e:	b2d9      	uxtb	r1, r3
 8009c30:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009c34:	b2da      	uxtb	r2, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c3a:	400a      	ands	r2, r1
 8009c3c:	b2d2      	uxtb	r2, r2
 8009c3e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c44:	1c5a      	adds	r2, r3, #1
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	3b01      	subs	r3, #1
 8009c54:	b29a      	uxth	r2, r3
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d178      	bne.n	8009d5a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c70:	e853 3f00 	ldrex	r3, [r3]
 8009c74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c7c:	653b      	str	r3, [r7, #80]	; 0x50
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	461a      	mov	r2, r3
 8009c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c86:	647b      	str	r3, [r7, #68]	; 0x44
 8009c88:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009c8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c8e:	e841 2300 	strex	r3, r2, [r1]
 8009c92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d1e6      	bne.n	8009c68 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	3308      	adds	r3, #8
 8009ca0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca4:	e853 3f00 	ldrex	r3, [r3]
 8009ca8:	623b      	str	r3, [r7, #32]
   return(result);
 8009caa:	6a3b      	ldr	r3, [r7, #32]
 8009cac:	f023 0301 	bic.w	r3, r3, #1
 8009cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	3308      	adds	r3, #8
 8009cb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009cba:	633a      	str	r2, [r7, #48]	; 0x30
 8009cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cc2:	e841 2300 	strex	r3, r2, [r1]
 8009cc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d1e5      	bne.n	8009c9a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2220      	movs	r2, #32
 8009cd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d12e      	bne.n	8009d42 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	e853 3f00 	ldrex	r3, [r3]
 8009cf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f023 0310 	bic.w	r3, r3, #16
 8009cfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	461a      	mov	r2, r3
 8009d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d08:	61fb      	str	r3, [r7, #28]
 8009d0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d0c:	69b9      	ldr	r1, [r7, #24]
 8009d0e:	69fa      	ldr	r2, [r7, #28]
 8009d10:	e841 2300 	strex	r3, r2, [r1]
 8009d14:	617b      	str	r3, [r7, #20]
   return(result);
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d1e6      	bne.n	8009cea <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	69db      	ldr	r3, [r3, #28]
 8009d22:	f003 0310 	and.w	r3, r3, #16
 8009d26:	2b10      	cmp	r3, #16
 8009d28:	d103      	bne.n	8009d32 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2210      	movs	r2, #16
 8009d30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d38:	4619      	mov	r1, r3
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f7fe fe6e 	bl	8008a1c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d40:	e00b      	b.n	8009d5a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f01b ff30 	bl	8025ba8 <HAL_UART_RxCpltCallback>
}
 8009d48:	e007      	b.n	8009d5a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	699a      	ldr	r2, [r3, #24]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f042 0208 	orr.w	r2, r2, #8
 8009d58:	619a      	str	r2, [r3, #24]
}
 8009d5a:	bf00      	nop
 8009d5c:	3758      	adds	r7, #88	; 0x58
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b096      	sub	sp, #88	; 0x58
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009d70:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d7a:	2b22      	cmp	r3, #34	; 0x22
 8009d7c:	f040 8095 	bne.w	8009eaa <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d86:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d8e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009d90:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009d94:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009d98:	4013      	ands	r3, r2
 8009d9a:	b29a      	uxth	r2, r3
 8009d9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d9e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009da4:	1c9a      	adds	r2, r3, #2
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	3b01      	subs	r3, #1
 8009db4:	b29a      	uxth	r2, r3
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d178      	bne.n	8009eba <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dd0:	e853 3f00 	ldrex	r3, [r3]
 8009dd4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ddc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	461a      	mov	r2, r3
 8009de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009de6:	643b      	str	r3, [r7, #64]	; 0x40
 8009de8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009dec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009dee:	e841 2300 	strex	r3, r2, [r1]
 8009df2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d1e6      	bne.n	8009dc8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	3308      	adds	r3, #8
 8009e00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e02:	6a3b      	ldr	r3, [r7, #32]
 8009e04:	e853 3f00 	ldrex	r3, [r3]
 8009e08:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e0a:	69fb      	ldr	r3, [r7, #28]
 8009e0c:	f023 0301 	bic.w	r3, r3, #1
 8009e10:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	3308      	adds	r3, #8
 8009e18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009e1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e22:	e841 2300 	strex	r3, r2, [r1]
 8009e26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d1e5      	bne.n	8009dfa <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2220      	movs	r2, #32
 8009e32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d12e      	bne.n	8009ea2 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	e853 3f00 	ldrex	r3, [r3]
 8009e56:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	f023 0310 	bic.w	r3, r3, #16
 8009e5e:	647b      	str	r3, [r7, #68]	; 0x44
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	461a      	mov	r2, r3
 8009e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e68:	61bb      	str	r3, [r7, #24]
 8009e6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e6c:	6979      	ldr	r1, [r7, #20]
 8009e6e:	69ba      	ldr	r2, [r7, #24]
 8009e70:	e841 2300 	strex	r3, r2, [r1]
 8009e74:	613b      	str	r3, [r7, #16]
   return(result);
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d1e6      	bne.n	8009e4a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	69db      	ldr	r3, [r3, #28]
 8009e82:	f003 0310 	and.w	r3, r3, #16
 8009e86:	2b10      	cmp	r3, #16
 8009e88:	d103      	bne.n	8009e92 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2210      	movs	r2, #16
 8009e90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009e98:	4619      	mov	r1, r3
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f7fe fdbe 	bl	8008a1c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ea0:	e00b      	b.n	8009eba <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f01b fe80 	bl	8025ba8 <HAL_UART_RxCpltCallback>
}
 8009ea8:	e007      	b.n	8009eba <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	699a      	ldr	r2, [r3, #24]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f042 0208 	orr.w	r2, r2, #8
 8009eb8:	619a      	str	r2, [r3, #24]
}
 8009eba:	bf00      	nop
 8009ebc:	3758      	adds	r7, #88	; 0x58
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
	...

08009ec4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b0a6      	sub	sp, #152	; 0x98
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009ed2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	69db      	ldr	r3, [r3, #28]
 8009edc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	689b      	ldr	r3, [r3, #8]
 8009ef0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009efa:	2b22      	cmp	r3, #34	; 0x22
 8009efc:	f040 814d 	bne.w	800a19a <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009f06:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f0a:	e0f4      	b.n	800a0f6 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f12:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009f16:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009f1a:	b2d9      	uxtb	r1, r3
 8009f1c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009f20:	b2da      	uxtb	r2, r3
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f26:	400a      	ands	r2, r1
 8009f28:	b2d2      	uxtb	r2, r2
 8009f2a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f30:	1c5a      	adds	r2, r3, #1
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	3b01      	subs	r3, #1
 8009f40:	b29a      	uxth	r2, r3
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	69db      	ldr	r3, [r3, #28]
 8009f4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009f52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009f56:	f003 0307 	and.w	r3, r3, #7
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d053      	beq.n	800a006 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009f5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009f62:	f003 0301 	and.w	r3, r3, #1
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d011      	beq.n	8009f8e <UART_RxISR_8BIT_FIFOEN+0xca>
 8009f6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d00b      	beq.n	8009f8e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f84:	f043 0201 	orr.w	r2, r3, #1
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009f92:	f003 0302 	and.w	r3, r3, #2
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d011      	beq.n	8009fbe <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009f9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009f9e:	f003 0301 	and.w	r3, r3, #1
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d00b      	beq.n	8009fbe <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	2202      	movs	r2, #2
 8009fac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fb4:	f043 0204 	orr.w	r2, r3, #4
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009fc2:	f003 0304 	and.w	r3, r3, #4
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d011      	beq.n	8009fee <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009fca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009fce:	f003 0301 	and.w	r3, r3, #1
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d00b      	beq.n	8009fee <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2204      	movs	r2, #4
 8009fdc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fe4:	f043 0202 	orr.w	r2, r3, #2
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d006      	beq.n	800a006 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f7fe fd05 	bl	8008a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2200      	movs	r2, #0
 800a002:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d171      	bne.n	800a0f6 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a018:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a01a:	e853 3f00 	ldrex	r3, [r3]
 800a01e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800a020:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a022:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a026:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	461a      	mov	r2, r3
 800a030:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a034:	66bb      	str	r3, [r7, #104]	; 0x68
 800a036:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a038:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a03a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a03c:	e841 2300 	strex	r3, r2, [r1]
 800a040:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a042:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a044:	2b00      	cmp	r3, #0
 800a046:	d1e4      	bne.n	800a012 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	3308      	adds	r3, #8
 800a04e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a052:	e853 3f00 	ldrex	r3, [r3]
 800a056:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a058:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a05a:	4b56      	ldr	r3, [pc, #344]	; (800a1b4 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800a05c:	4013      	ands	r3, r2
 800a05e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	3308      	adds	r3, #8
 800a066:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a068:	657a      	str	r2, [r7, #84]	; 0x54
 800a06a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a06c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a06e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a070:	e841 2300 	strex	r3, r2, [r1]
 800a074:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d1e5      	bne.n	800a048 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2220      	movs	r2, #32
 800a080:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2200      	movs	r2, #0
 800a088:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d12e      	bne.n	800a0f0 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a09e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0a0:	e853 3f00 	ldrex	r3, [r3]
 800a0a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a8:	f023 0310 	bic.w	r3, r3, #16
 800a0ac:	67bb      	str	r3, [r7, #120]	; 0x78
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0b6:	643b      	str	r3, [r7, #64]	; 0x40
 800a0b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a0bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a0be:	e841 2300 	strex	r3, r2, [r1]
 800a0c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d1e6      	bne.n	800a098 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	69db      	ldr	r3, [r3, #28]
 800a0d0:	f003 0310 	and.w	r3, r3, #16
 800a0d4:	2b10      	cmp	r3, #16
 800a0d6:	d103      	bne.n	800a0e0 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	2210      	movs	r2, #16
 800a0de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f7fe fc97 	bl	8008a1c <HAL_UARTEx_RxEventCallback>
 800a0ee:	e002      	b.n	800a0f6 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f01b fd59 	bl	8025ba8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a0f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d006      	beq.n	800a10c <UART_RxISR_8BIT_FIFOEN+0x248>
 800a0fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a102:	f003 0320 	and.w	r3, r3, #32
 800a106:	2b00      	cmp	r3, #0
 800a108:	f47f af00 	bne.w	8009f0c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a112:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a116:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d045      	beq.n	800a1aa <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a124:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a128:	429a      	cmp	r2, r3
 800a12a:	d23e      	bcs.n	800a1aa <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	3308      	adds	r3, #8
 800a132:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a134:	6a3b      	ldr	r3, [r7, #32]
 800a136:	e853 3f00 	ldrex	r3, [r3]
 800a13a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a13c:	69fb      	ldr	r3, [r7, #28]
 800a13e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a142:	673b      	str	r3, [r7, #112]	; 0x70
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	3308      	adds	r3, #8
 800a14a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a14c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a14e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a150:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a152:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a154:	e841 2300 	strex	r3, r2, [r1]
 800a158:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d1e5      	bne.n	800a12c <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	4a15      	ldr	r2, [pc, #84]	; (800a1b8 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800a164:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	e853 3f00 	ldrex	r3, [r3]
 800a172:	60bb      	str	r3, [r7, #8]
   return(result);
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	f043 0320 	orr.w	r3, r3, #32
 800a17a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	461a      	mov	r2, r3
 800a182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a184:	61bb      	str	r3, [r7, #24]
 800a186:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a188:	6979      	ldr	r1, [r7, #20]
 800a18a:	69ba      	ldr	r2, [r7, #24]
 800a18c:	e841 2300 	strex	r3, r2, [r1]
 800a190:	613b      	str	r3, [r7, #16]
   return(result);
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d1e6      	bne.n	800a166 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a198:	e007      	b.n	800a1aa <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	699a      	ldr	r2, [r3, #24]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f042 0208 	orr.w	r2, r2, #8
 800a1a8:	619a      	str	r2, [r3, #24]
}
 800a1aa:	bf00      	nop
 800a1ac:	3798      	adds	r7, #152	; 0x98
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	effffffe 	.word	0xeffffffe
 800a1b8:	08009c03 	.word	0x08009c03

0800a1bc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b0a8      	sub	sp, #160	; 0xa0
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a1ca:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	69db      	ldr	r3, [r3, #28]
 800a1d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1f2:	2b22      	cmp	r3, #34	; 0x22
 800a1f4:	f040 8151 	bne.w	800a49a <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a1fe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a202:	e0f8      	b.n	800a3f6 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a20a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a212:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800a216:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800a21a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a21e:	4013      	ands	r3, r2
 800a220:	b29a      	uxth	r2, r3
 800a222:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a226:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a22c:	1c9a      	adds	r2, r3, #2
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a238:	b29b      	uxth	r3, r3
 800a23a:	3b01      	subs	r3, #1
 800a23c:	b29a      	uxth	r2, r3
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	69db      	ldr	r3, [r3, #28]
 800a24a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a24e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a252:	f003 0307 	and.w	r3, r3, #7
 800a256:	2b00      	cmp	r3, #0
 800a258:	d053      	beq.n	800a302 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a25a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a25e:	f003 0301 	and.w	r3, r3, #1
 800a262:	2b00      	cmp	r3, #0
 800a264:	d011      	beq.n	800a28a <UART_RxISR_16BIT_FIFOEN+0xce>
 800a266:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a26a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d00b      	beq.n	800a28a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	2201      	movs	r2, #1
 800a278:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a280:	f043 0201 	orr.w	r2, r3, #1
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a28a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a28e:	f003 0302 	and.w	r3, r3, #2
 800a292:	2b00      	cmp	r3, #0
 800a294:	d011      	beq.n	800a2ba <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a296:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a29a:	f003 0301 	and.w	r3, r3, #1
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00b      	beq.n	800a2ba <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	2202      	movs	r2, #2
 800a2a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2b0:	f043 0204 	orr.w	r2, r3, #4
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a2ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2be:	f003 0304 	and.w	r3, r3, #4
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d011      	beq.n	800a2ea <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a2c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a2ca:	f003 0301 	and.w	r3, r3, #1
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d00b      	beq.n	800a2ea <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	2204      	movs	r2, #4
 800a2d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2e0:	f043 0202 	orr.w	r2, r3, #2
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d006      	beq.n	800a302 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f7fe fb87 	bl	8008a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a308:	b29b      	uxth	r3, r3
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d173      	bne.n	800a3f6 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a314:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a316:	e853 3f00 	ldrex	r3, [r3]
 800a31a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a31c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a31e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a322:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	461a      	mov	r2, r3
 800a32c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a330:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a332:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a334:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a336:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a338:	e841 2300 	strex	r3, r2, [r1]
 800a33c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a33e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a340:	2b00      	cmp	r3, #0
 800a342:	d1e4      	bne.n	800a30e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	3308      	adds	r3, #8
 800a34a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a34c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a34e:	e853 3f00 	ldrex	r3, [r3]
 800a352:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a354:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a356:	4b57      	ldr	r3, [pc, #348]	; (800a4b4 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800a358:	4013      	ands	r3, r2
 800a35a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	3308      	adds	r3, #8
 800a364:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a368:	65ba      	str	r2, [r7, #88]	; 0x58
 800a36a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a36c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a36e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a370:	e841 2300 	strex	r3, r2, [r1]
 800a374:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d1e3      	bne.n	800a344 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2220      	movs	r2, #32
 800a380:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d12e      	bne.n	800a3f0 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a0:	e853 3f00 	ldrex	r3, [r3]
 800a3a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a3a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3a8:	f023 0310 	bic.w	r3, r3, #16
 800a3ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a3b6:	647b      	str	r3, [r7, #68]	; 0x44
 800a3b8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a3bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3be:	e841 2300 	strex	r3, r2, [r1]
 800a3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a3c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d1e6      	bne.n	800a398 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	69db      	ldr	r3, [r3, #28]
 800a3d0:	f003 0310 	and.w	r3, r3, #16
 800a3d4:	2b10      	cmp	r3, #16
 800a3d6:	d103      	bne.n	800a3e0 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	2210      	movs	r2, #16
 800a3de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f7fe fb17 	bl	8008a1c <HAL_UARTEx_RxEventCallback>
 800a3ee:	e002      	b.n	800a3f6 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f01b fbd9 	bl	8025ba8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a3f6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d006      	beq.n	800a40c <UART_RxISR_16BIT_FIFOEN+0x250>
 800a3fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a402:	f003 0320 	and.w	r3, r3, #32
 800a406:	2b00      	cmp	r3, #0
 800a408:	f47f aefc 	bne.w	800a204 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a412:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a416:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d045      	beq.n	800a4aa <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a424:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800a428:	429a      	cmp	r2, r3
 800a42a:	d23e      	bcs.n	800a4aa <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	3308      	adds	r3, #8
 800a432:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a436:	e853 3f00 	ldrex	r3, [r3]
 800a43a:	623b      	str	r3, [r7, #32]
   return(result);
 800a43c:	6a3b      	ldr	r3, [r7, #32]
 800a43e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a442:	677b      	str	r3, [r7, #116]	; 0x74
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	3308      	adds	r3, #8
 800a44a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a44c:	633a      	str	r2, [r7, #48]	; 0x30
 800a44e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a450:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a452:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a454:	e841 2300 	strex	r3, r2, [r1]
 800a458:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d1e5      	bne.n	800a42c <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	4a15      	ldr	r2, [pc, #84]	; (800a4b8 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800a464:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	e853 3f00 	ldrex	r3, [r3]
 800a472:	60fb      	str	r3, [r7, #12]
   return(result);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f043 0320 	orr.w	r3, r3, #32
 800a47a:	673b      	str	r3, [r7, #112]	; 0x70
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	461a      	mov	r2, r3
 800a482:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a484:	61fb      	str	r3, [r7, #28]
 800a486:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a488:	69b9      	ldr	r1, [r7, #24]
 800a48a:	69fa      	ldr	r2, [r7, #28]
 800a48c:	e841 2300 	strex	r3, r2, [r1]
 800a490:	617b      	str	r3, [r7, #20]
   return(result);
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d1e6      	bne.n	800a466 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a498:	e007      	b.n	800a4aa <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	699a      	ldr	r2, [r3, #24]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f042 0208 	orr.w	r2, r2, #8
 800a4a8:	619a      	str	r2, [r3, #24]
}
 800a4aa:	bf00      	nop
 800a4ac:	37a0      	adds	r7, #160	; 0xa0
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	effffffe 	.word	0xeffffffe
 800a4b8:	08009d63 	.word	0x08009d63

0800a4bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a4c4:	bf00      	nop
 800a4c6:	370c      	adds	r7, #12
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr

0800a4d0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a4d8:	bf00      	nop
 800a4da:	370c      	adds	r7, #12
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr

0800a4e4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a4ec:	bf00      	nop
 800a4ee:	370c      	adds	r7, #12
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b085      	sub	sp, #20
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a506:	2b01      	cmp	r3, #1
 800a508:	d101      	bne.n	800a50e <HAL_UARTEx_DisableFifoMode+0x16>
 800a50a:	2302      	movs	r3, #2
 800a50c:	e027      	b.n	800a55e <HAL_UARTEx_DisableFifoMode+0x66>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2201      	movs	r2, #1
 800a512:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2224      	movs	r2, #36	; 0x24
 800a51a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f022 0201 	bic.w	r2, r2, #1
 800a534:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a53c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2200      	movs	r2, #0
 800a542:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	68fa      	ldr	r2, [r7, #12]
 800a54a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2220      	movs	r2, #32
 800a550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a55c:	2300      	movs	r3, #0
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3714      	adds	r7, #20
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr

0800a56a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b084      	sub	sp, #16
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
 800a572:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d101      	bne.n	800a582 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a57e:	2302      	movs	r3, #2
 800a580:	e02d      	b.n	800a5de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2201      	movs	r2, #1
 800a586:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2224      	movs	r2, #36	; 0x24
 800a58e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f022 0201 	bic.w	r2, r2, #1
 800a5a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	683a      	ldr	r2, [r7, #0]
 800a5ba:	430a      	orrs	r2, r1
 800a5bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 f850 	bl	800a664 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	68fa      	ldr	r2, [r7, #12]
 800a5ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2220      	movs	r2, #32
 800a5d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a5dc:	2300      	movs	r3, #0
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3710      	adds	r7, #16
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}

0800a5e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5e6:	b580      	push	{r7, lr}
 800a5e8:	b084      	sub	sp, #16
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
 800a5ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d101      	bne.n	800a5fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a5fa:	2302      	movs	r3, #2
 800a5fc:	e02d      	b.n	800a65a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2201      	movs	r2, #1
 800a602:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2224      	movs	r2, #36	; 0x24
 800a60a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f022 0201 	bic.w	r2, r2, #1
 800a624:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	689b      	ldr	r3, [r3, #8]
 800a62c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	683a      	ldr	r2, [r7, #0]
 800a636:	430a      	orrs	r2, r1
 800a638:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 f812 	bl	800a664 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	68fa      	ldr	r2, [r7, #12]
 800a646:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2220      	movs	r2, #32
 800a64c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2200      	movs	r2, #0
 800a654:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a658:	2300      	movs	r3, #0
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
	...

0800a664 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a664:	b480      	push	{r7}
 800a666:	b085      	sub	sp, #20
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a670:	2b00      	cmp	r3, #0
 800a672:	d108      	bne.n	800a686 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2201      	movs	r2, #1
 800a678:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2201      	movs	r2, #1
 800a680:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a684:	e031      	b.n	800a6ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a686:	2310      	movs	r3, #16
 800a688:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a68a:	2310      	movs	r3, #16
 800a68c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	689b      	ldr	r3, [r3, #8]
 800a694:	0e5b      	lsrs	r3, r3, #25
 800a696:	b2db      	uxtb	r3, r3
 800a698:	f003 0307 	and.w	r3, r3, #7
 800a69c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	0f5b      	lsrs	r3, r3, #29
 800a6a6:	b2db      	uxtb	r3, r3
 800a6a8:	f003 0307 	and.w	r3, r3, #7
 800a6ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6ae:	7bbb      	ldrb	r3, [r7, #14]
 800a6b0:	7b3a      	ldrb	r2, [r7, #12]
 800a6b2:	4911      	ldr	r1, [pc, #68]	; (800a6f8 <UARTEx_SetNbDataToProcess+0x94>)
 800a6b4:	5c8a      	ldrb	r2, [r1, r2]
 800a6b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a6ba:	7b3a      	ldrb	r2, [r7, #12]
 800a6bc:	490f      	ldr	r1, [pc, #60]	; (800a6fc <UARTEx_SetNbDataToProcess+0x98>)
 800a6be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6c4:	b29a      	uxth	r2, r3
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6cc:	7bfb      	ldrb	r3, [r7, #15]
 800a6ce:	7b7a      	ldrb	r2, [r7, #13]
 800a6d0:	4909      	ldr	r1, [pc, #36]	; (800a6f8 <UARTEx_SetNbDataToProcess+0x94>)
 800a6d2:	5c8a      	ldrb	r2, [r1, r2]
 800a6d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a6d8:	7b7a      	ldrb	r2, [r7, #13]
 800a6da:	4908      	ldr	r1, [pc, #32]	; (800a6fc <UARTEx_SetNbDataToProcess+0x98>)
 800a6dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6de:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6e2:	b29a      	uxth	r2, r3
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a6ea:	bf00      	nop
 800a6ec:	3714      	adds	r7, #20
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f4:	4770      	bx	lr
 800a6f6:	bf00      	nop
 800a6f8:	0802eac4 	.word	0x0802eac4
 800a6fc:	0802eacc 	.word	0x0802eacc

0800a700 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800a700:	b5b0      	push	{r4, r5, r7, lr}
 800a702:	b08c      	sub	sp, #48	; 0x30
 800a704:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800a706:	2100      	movs	r1, #0
 800a708:	2000      	movs	r0, #0
 800a70a:	f008 fa63 	bl	8012bd4 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800a70e:	4b20      	ldr	r3, [pc, #128]	; (800a790 <MX_LWIP_Init+0x90>)
 800a710:	2200      	movs	r2, #0
 800a712:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800a714:	4b1f      	ldr	r3, [pc, #124]	; (800a794 <MX_LWIP_Init+0x94>)
 800a716:	2200      	movs	r2, #0
 800a718:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800a71a:	4b1f      	ldr	r3, [pc, #124]	; (800a798 <MX_LWIP_Init+0x98>)
 800a71c:	2200      	movs	r2, #0
 800a71e:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800a720:	4b1e      	ldr	r3, [pc, #120]	; (800a79c <MX_LWIP_Init+0x9c>)
 800a722:	9302      	str	r3, [sp, #8]
 800a724:	4b1e      	ldr	r3, [pc, #120]	; (800a7a0 <MX_LWIP_Init+0xa0>)
 800a726:	9301      	str	r3, [sp, #4]
 800a728:	2300      	movs	r3, #0
 800a72a:	9300      	str	r3, [sp, #0]
 800a72c:	4b1a      	ldr	r3, [pc, #104]	; (800a798 <MX_LWIP_Init+0x98>)
 800a72e:	4a19      	ldr	r2, [pc, #100]	; (800a794 <MX_LWIP_Init+0x94>)
 800a730:	4917      	ldr	r1, [pc, #92]	; (800a790 <MX_LWIP_Init+0x90>)
 800a732:	481c      	ldr	r0, [pc, #112]	; (800a7a4 <MX_LWIP_Init+0xa4>)
 800a734:	f00a faee 	bl	8014d14 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a738:	481a      	ldr	r0, [pc, #104]	; (800a7a4 <MX_LWIP_Init+0xa4>)
 800a73a:	f00a fca5 	bl	8015088 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800a73e:	4b19      	ldr	r3, [pc, #100]	; (800a7a4 <MX_LWIP_Init+0xa4>)
 800a740:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a744:	089b      	lsrs	r3, r3, #2
 800a746:	f003 0301 	and.w	r3, r3, #1
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d003      	beq.n	800a758 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800a750:	4814      	ldr	r0, [pc, #80]	; (800a7a4 <MX_LWIP_Init+0xa4>)
 800a752:	f00a fca9 	bl	80150a8 <netif_set_up>
 800a756:	e002      	b.n	800a75e <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800a758:	4812      	ldr	r0, [pc, #72]	; (800a7a4 <MX_LWIP_Init+0xa4>)
 800a75a:	f00a fd11 	bl	8015180 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800a75e:	4912      	ldr	r1, [pc, #72]	; (800a7a8 <MX_LWIP_Init+0xa8>)
 800a760:	4810      	ldr	r0, [pc, #64]	; (800a7a4 <MX_LWIP_Init+0xa4>)
 800a762:	f00a fda7 	bl	80152b4 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800a766:	4b11      	ldr	r3, [pc, #68]	; (800a7ac <MX_LWIP_Init+0xac>)
 800a768:	1d3c      	adds	r4, r7, #4
 800a76a:	461d      	mov	r5, r3
 800a76c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a76e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a770:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a774:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800a778:	1d3b      	adds	r3, r7, #4
 800a77a:	490a      	ldr	r1, [pc, #40]	; (800a7a4 <MX_LWIP_Init+0xa4>)
 800a77c:	4618      	mov	r0, r3
 800a77e:	f000 fcb2 	bl	800b0e6 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800a782:	4808      	ldr	r0, [pc, #32]	; (800a7a4 <MX_LWIP_Init+0xa4>)
 800a784:	f013 fa20 	bl	801dbc8 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800a788:	bf00      	nop
 800a78a:	3720      	adds	r7, #32
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bdb0      	pop	{r4, r5, r7, pc}
 800a790:	24005204 	.word	0x24005204
 800a794:	24005208 	.word	0x24005208
 800a798:	2400520c 	.word	0x2400520c
 800a79c:	08012ae5 	.word	0x08012ae5
 800a7a0:	0800ae31 	.word	0x0800ae31
 800a7a4:	240051cc 	.word	0x240051cc
 800a7a8:	0800a7b1 	.word	0x0800a7b1
 800a7ac:	0802a3e0 	.word	0x0802a3e0

0800a7b0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b083      	sub	sp, #12
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800a7b8:	bf00      	nop
 800a7ba:	370c      	adds	r7, #12
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr

0800a7c4 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b08e      	sub	sp, #56	; 0x38
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	601a      	str	r2, [r3, #0]
 800a7d4:	605a      	str	r2, [r3, #4]
 800a7d6:	609a      	str	r2, [r3, #8]
 800a7d8:	60da      	str	r2, [r3, #12]
 800a7da:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a4d      	ldr	r2, [pc, #308]	; (800a918 <HAL_ETH_MspInit+0x154>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	f040 8093 	bne.w	800a90e <HAL_ETH_MspInit+0x14a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800a7e8:	4b4c      	ldr	r3, [pc, #304]	; (800a91c <HAL_ETH_MspInit+0x158>)
 800a7ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a7ee:	4a4b      	ldr	r2, [pc, #300]	; (800a91c <HAL_ETH_MspInit+0x158>)
 800a7f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7f4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a7f8:	4b48      	ldr	r3, [pc, #288]	; (800a91c <HAL_ETH_MspInit+0x158>)
 800a7fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a7fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a802:	623b      	str	r3, [r7, #32]
 800a804:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800a806:	4b45      	ldr	r3, [pc, #276]	; (800a91c <HAL_ETH_MspInit+0x158>)
 800a808:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a80c:	4a43      	ldr	r2, [pc, #268]	; (800a91c <HAL_ETH_MspInit+0x158>)
 800a80e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a812:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a816:	4b41      	ldr	r3, [pc, #260]	; (800a91c <HAL_ETH_MspInit+0x158>)
 800a818:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a81c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a820:	61fb      	str	r3, [r7, #28]
 800a822:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800a824:	4b3d      	ldr	r3, [pc, #244]	; (800a91c <HAL_ETH_MspInit+0x158>)
 800a826:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a82a:	4a3c      	ldr	r2, [pc, #240]	; (800a91c <HAL_ETH_MspInit+0x158>)
 800a82c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a830:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a834:	4b39      	ldr	r3, [pc, #228]	; (800a91c <HAL_ETH_MspInit+0x158>)
 800a836:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a83a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a83e:	61bb      	str	r3, [r7, #24]
 800a840:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a842:	4b36      	ldr	r3, [pc, #216]	; (800a91c <HAL_ETH_MspInit+0x158>)
 800a844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a848:	4a34      	ldr	r2, [pc, #208]	; (800a91c <HAL_ETH_MspInit+0x158>)
 800a84a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a84e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a852:	4b32      	ldr	r3, [pc, #200]	; (800a91c <HAL_ETH_MspInit+0x158>)
 800a854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a85c:	617b      	str	r3, [r7, #20]
 800a85e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a860:	4b2e      	ldr	r3, [pc, #184]	; (800a91c <HAL_ETH_MspInit+0x158>)
 800a862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a866:	4a2d      	ldr	r2, [pc, #180]	; (800a91c <HAL_ETH_MspInit+0x158>)
 800a868:	f043 0304 	orr.w	r3, r3, #4
 800a86c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a870:	4b2a      	ldr	r3, [pc, #168]	; (800a91c <HAL_ETH_MspInit+0x158>)
 800a872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a876:	f003 0304 	and.w	r3, r3, #4
 800a87a:	613b      	str	r3, [r7, #16]
 800a87c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a87e:	4b27      	ldr	r3, [pc, #156]	; (800a91c <HAL_ETH_MspInit+0x158>)
 800a880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a884:	4a25      	ldr	r2, [pc, #148]	; (800a91c <HAL_ETH_MspInit+0x158>)
 800a886:	f043 0301 	orr.w	r3, r3, #1
 800a88a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a88e:	4b23      	ldr	r3, [pc, #140]	; (800a91c <HAL_ETH_MspInit+0x158>)
 800a890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a894:	f003 0301 	and.w	r3, r3, #1
 800a898:	60fb      	str	r3, [r7, #12]
 800a89a:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PA7     ------> ETH_CRS_DV
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800a89c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a8a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8a2:	2302      	movs	r3, #2
 800a8a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8aa:	2303      	movs	r3, #3
 800a8ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a8ae:	230b      	movs	r3, #11
 800a8b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a8b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	4819      	ldr	r0, [pc, #100]	; (800a920 <HAL_ETH_MspInit+0x15c>)
 800a8ba:	f7f9 fb7d 	bl	8003fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800a8be:	2332      	movs	r3, #50	; 0x32
 800a8c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8c2:	2302      	movs	r3, #2
 800a8c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8ca:	2303      	movs	r3, #3
 800a8cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a8ce:	230b      	movs	r3, #11
 800a8d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a8d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	4812      	ldr	r0, [pc, #72]	; (800a924 <HAL_ETH_MspInit+0x160>)
 800a8da:	f7f9 fb6d 	bl	8003fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_7;
 800a8de:	2386      	movs	r3, #134	; 0x86
 800a8e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8e2:	2302      	movs	r3, #2
 800a8e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8ea:	2303      	movs	r3, #3
 800a8ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a8ee:	230b      	movs	r3, #11
 800a8f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a8f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	480b      	ldr	r0, [pc, #44]	; (800a928 <HAL_ETH_MspInit+0x164>)
 800a8fa:	f7f9 fb5d 	bl	8003fb8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800a8fe:	2200      	movs	r2, #0
 800a900:	2105      	movs	r1, #5
 800a902:	203d      	movs	r0, #61	; 0x3d
 800a904:	f7f6 fe7e 	bl	8001604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800a908:	203d      	movs	r0, #61	; 0x3d
 800a90a:	f7f6 fe95 	bl	8001638 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a90e:	bf00      	nop
 800a910:	3738      	adds	r7, #56	; 0x38
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	40028000 	.word	0x40028000
 800a91c:	58024400 	.word	0x58024400
 800a920:	58021800 	.word	0x58021800
 800a924:	58020800 	.word	0x58020800
 800a928:	58020000 	.word	0x58020000

0800a92c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800a934:	4b04      	ldr	r3, [pc, #16]	; (800a948 <HAL_ETH_RxCpltCallback+0x1c>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4618      	mov	r0, r3
 800a93a:	f000 fd51 	bl	800b3e0 <osSemaphoreRelease>
}
 800a93e:	bf00      	nop
 800a940:	3708      	adds	r7, #8
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}
 800a946:	bf00      	nop
 800a948:	24000bc8 	.word	0x24000bc8

0800a94c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a94c:	b5b0      	push	{r4, r5, r7, lr}
 800a94e:	b0ac      	sub	sp, #176	; 0xb0
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800a954:	2300      	movs	r3, #0
 800a956:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  uint32_t idx = 0;
 800a95a:	2300      	movs	r3, #0
 800a95c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 800a960:	2300      	movs	r3, #0
 800a962:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a966:	4b91      	ldr	r3, [pc, #580]	; (800abac <low_level_init+0x260>)
 800a968:	4a91      	ldr	r2, [pc, #580]	; (800abb0 <low_level_init+0x264>)
 800a96a:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800a96c:	2300      	movs	r3, #0
 800a96e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800a972:	2380      	movs	r3, #128	; 0x80
 800a974:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800a978:	23e1      	movs	r3, #225	; 0xe1
 800a97a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800a97e:	2300      	movs	r3, #0
 800a980:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800a984:	2300      	movs	r3, #0
 800a986:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800a98a:	2300      	movs	r3, #0
 800a98c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800a990:	4a86      	ldr	r2, [pc, #536]	; (800abac <low_level_init+0x260>)
 800a992:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a996:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800a998:	4b84      	ldr	r3, [pc, #528]	; (800abac <low_level_init+0x260>)
 800a99a:	2201      	movs	r2, #1
 800a99c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800a99e:	4b83      	ldr	r3, [pc, #524]	; (800abac <low_level_init+0x260>)
 800a9a0:	4a84      	ldr	r2, [pc, #528]	; (800abb4 <low_level_init+0x268>)
 800a9a2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800a9a4:	4b81      	ldr	r3, [pc, #516]	; (800abac <low_level_init+0x260>)
 800a9a6:	4a84      	ldr	r2, [pc, #528]	; (800abb8 <low_level_init+0x26c>)
 800a9a8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800a9aa:	4b80      	ldr	r3, [pc, #512]	; (800abac <low_level_init+0x260>)
 800a9ac:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800a9b0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a9b2:	487e      	ldr	r0, [pc, #504]	; (800abac <low_level_init+0x260>)
 800a9b4:	f7f7 fc40 	bl	8002238 <HAL_ETH_Init>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800a9be:	2234      	movs	r2, #52	; 0x34
 800a9c0:	2100      	movs	r1, #0
 800a9c2:	487e      	ldr	r0, [pc, #504]	; (800abbc <low_level_init+0x270>)
 800a9c4:	f01b fc28 	bl	8026218 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800a9c8:	4b7c      	ldr	r3, [pc, #496]	; (800abbc <low_level_init+0x270>)
 800a9ca:	2221      	movs	r2, #33	; 0x21
 800a9cc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800a9ce:	4b7b      	ldr	r3, [pc, #492]	; (800abbc <low_level_init+0x270>)
 800a9d0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a9d4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800a9d6:	4b79      	ldr	r3, [pc, #484]	; (800abbc <low_level_init+0x270>)
 800a9d8:	2200      	movs	r2, #0
 800a9da:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800a9dc:	4878      	ldr	r0, [pc, #480]	; (800abc0 <low_level_init+0x274>)
 800a9de:	f00a f853 	bl	8014a88 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2206      	movs	r2, #6
 800a9e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a9ea:	4b70      	ldr	r3, [pc, #448]	; (800abac <low_level_init+0x260>)
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	781a      	ldrb	r2, [r3, #0]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a9f6:	4b6d      	ldr	r3, [pc, #436]	; (800abac <low_level_init+0x260>)
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	785a      	ldrb	r2, [r3, #1]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800aa02:	4b6a      	ldr	r3, [pc, #424]	; (800abac <low_level_init+0x260>)
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	789a      	ldrb	r2, [r3, #2]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800aa0e:	4b67      	ldr	r3, [pc, #412]	; (800abac <low_level_init+0x260>)
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	78da      	ldrb	r2, [r3, #3]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800aa1a:	4b64      	ldr	r3, [pc, #400]	; (800abac <low_level_init+0x260>)
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	791a      	ldrb	r2, [r3, #4]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800aa26:	4b61      	ldr	r3, [pc, #388]	; (800abac <low_level_init+0x260>)
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	795a      	ldrb	r2, [r3, #5]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800aa38:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800aa40:	f043 030a 	orr.w	r3, r3, #10
 800aa44:	b2da      	uxtb	r2, r3
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aa52:	e012      	b.n	800aa7a <low_level_init+0x12e>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800aa54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800aa58:	4613      	mov	r3, r2
 800aa5a:	005b      	lsls	r3, r3, #1
 800aa5c:	4413      	add	r3, r2
 800aa5e:	025b      	lsls	r3, r3, #9
 800aa60:	4a58      	ldr	r2, [pc, #352]	; (800abc4 <low_level_init+0x278>)
 800aa62:	441a      	add	r2, r3
 800aa64:	2300      	movs	r3, #0
 800aa66:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800aa6a:	4850      	ldr	r0, [pc, #320]	; (800abac <low_level_init+0x260>)
 800aa6c:	f7f7 fcbe 	bl	80023ec <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800aa70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa74:	3301      	adds	r3, #1
 800aa76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aa7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa7e:	2b03      	cmp	r3, #3
 800aa80:	d9e8      	bls.n	800aa54 <low_level_init+0x108>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800aa82:	2300      	movs	r3, #0
 800aa84:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa86:	2300      	movs	r3, #0
 800aa88:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800aa8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aa8e:	2101      	movs	r1, #1
 800aa90:	4618      	mov	r0, r3
 800aa92:	f000 fc25 	bl	800b2e0 <osSemaphoreCreate>
 800aa96:	4603      	mov	r3, r0
 800aa98:	4a4b      	ldr	r2, [pc, #300]	; (800abc8 <low_level_init+0x27c>)
 800aa9a:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800aa9c:	4b4b      	ldr	r3, [pc, #300]	; (800abcc <low_level_init+0x280>)
 800aa9e:	f107 040c 	add.w	r4, r7, #12
 800aaa2:	461d      	mov	r5, r3
 800aaa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aaa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aaa8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800aaac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800aab0:	f107 030c 	add.w	r3, r7, #12
 800aab4:	6879      	ldr	r1, [r7, #4]
 800aab6:	4618      	mov	r0, r3
 800aab8:	f000 fb15 	bl	800b0e6 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800aabc:	4944      	ldr	r1, [pc, #272]	; (800abd0 <low_level_init+0x284>)
 800aabe:	4845      	ldr	r0, [pc, #276]	; (800abd4 <low_level_init+0x288>)
 800aac0:	f7f6 fb0b 	bl	80010da <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800aac4:	4843      	ldr	r0, [pc, #268]	; (800abd4 <low_level_init+0x288>)
 800aac6:	f7f6 fb3a 	bl	800113e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800aaca:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d165      	bne.n	800ab9e <low_level_init+0x252>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800aad2:	4840      	ldr	r0, [pc, #256]	; (800abd4 <low_level_init+0x288>)
 800aad4:	f7f6 fbdb 	bl	800128e <LAN8742_GetLinkState>
 800aad8:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800aadc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	dc06      	bgt.n	800aaf2 <low_level_init+0x1a6>
    {
      netif_set_link_down(netif);
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f00a fbb5 	bl	8015254 <netif_set_link_down>
      netif_set_down(netif);
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f00a fb48 	bl	8015180 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800aaf0:	e057      	b.n	800aba2 <low_level_init+0x256>
 800aaf2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aaf6:	3b02      	subs	r3, #2
 800aaf8:	2b03      	cmp	r3, #3
 800aafa:	d82b      	bhi.n	800ab54 <low_level_init+0x208>
 800aafc:	a201      	add	r2, pc, #4	; (adr r2, 800ab04 <low_level_init+0x1b8>)
 800aafe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab02:	bf00      	nop
 800ab04:	0800ab15 	.word	0x0800ab15
 800ab08:	0800ab27 	.word	0x0800ab27
 800ab0c:	0800ab37 	.word	0x0800ab37
 800ab10:	0800ab47 	.word	0x0800ab47
        duplex = ETH_FULLDUPLEX_MODE;
 800ab14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ab18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800ab1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ab20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800ab24:	e01f      	b.n	800ab66 <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 800ab26:	2300      	movs	r3, #0
 800ab28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800ab2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ab30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800ab34:	e017      	b.n	800ab66 <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 800ab36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ab3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800ab44:	e00f      	b.n	800ab66 <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 800ab46:	2300      	movs	r3, #0
 800ab48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800ab52:	e008      	b.n	800ab66 <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 800ab54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ab58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800ab5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ab60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800ab64:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800ab66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	480f      	ldr	r0, [pc, #60]	; (800abac <low_level_init+0x260>)
 800ab6e:	f7f8 fa23 	bl	8002fb8 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800ab72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ab76:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 800ab78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ab7c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800ab7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ab82:	4619      	mov	r1, r3
 800ab84:	4809      	ldr	r0, [pc, #36]	; (800abac <low_level_init+0x260>)
 800ab86:	f7f8 fbeb 	bl	8003360 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800ab8a:	4808      	ldr	r0, [pc, #32]	; (800abac <low_level_init+0x260>)
 800ab8c:	f7f7 fc6f 	bl	800246e <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f00a fa89 	bl	80150a8 <netif_set_up>
    netif_set_link_up(netif);
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f00a fb24 	bl	80151e4 <netif_set_link_up>
}
 800ab9c:	e001      	b.n	800aba2 <low_level_init+0x256>
    Error_Handler();
 800ab9e:	f7f6 f8d1 	bl	8000d44 <Error_Handler>
}
 800aba2:	bf00      	nop
 800aba4:	37b0      	adds	r7, #176	; 0xb0
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bdb0      	pop	{r4, r5, r7, pc}
 800abaa:	bf00      	nop
 800abac:	240052fc 	.word	0x240052fc
 800abb0:	40028000 	.word	0x40028000
 800abb4:	30000060 	.word	0x30000060
 800abb8:	30000000 	.word	0x30000000
 800abbc:	24005384 	.word	0x24005384
 800abc0:	0802ead4 	.word	0x0802ead4
 800abc4:	30000200 	.word	0x30000200
 800abc8:	24000bc8 	.word	0x24000bc8
 800abcc:	0802a404 	.word	0x0802a404
 800abd0:	24000014 	.word	0x24000014
 800abd4:	240052dc 	.word	0x240052dc

0800abd8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b092      	sub	sp, #72	; 0x48
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 800abe2:	2300      	movs	r3, #0
 800abe4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 800abe6:	2300      	movs	r3, #0
 800abe8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800abec:	f107 030c 	add.w	r3, r7, #12
 800abf0:	2230      	movs	r2, #48	; 0x30
 800abf2:	2100      	movs	r1, #0
 800abf4:	4618      	mov	r0, r3
 800abf6:	f01b fb0f 	bl	8026218 <memset>

  for(q = p; q != NULL; q = q->next)
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	643b      	str	r3, [r7, #64]	; 0x40
 800abfe:	e049      	b.n	800ac94 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 800ac00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac02:	2b03      	cmp	r3, #3
 800ac04:	d902      	bls.n	800ac0c <low_level_output+0x34>
      return ERR_IF;
 800ac06:	f06f 030b 	mvn.w	r3, #11
 800ac0a:	e056      	b.n	800acba <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 800ac0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac0e:	6859      	ldr	r1, [r3, #4]
 800ac10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac12:	4613      	mov	r3, r2
 800ac14:	005b      	lsls	r3, r3, #1
 800ac16:	4413      	add	r3, r2
 800ac18:	009b      	lsls	r3, r3, #2
 800ac1a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ac1e:	4413      	add	r3, r2
 800ac20:	3b3c      	subs	r3, #60	; 0x3c
 800ac22:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800ac24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac26:	895b      	ldrh	r3, [r3, #10]
 800ac28:	4619      	mov	r1, r3
 800ac2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac2c:	4613      	mov	r3, r2
 800ac2e:	005b      	lsls	r3, r3, #1
 800ac30:	4413      	add	r3, r2
 800ac32:	009b      	lsls	r3, r3, #2
 800ac34:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ac38:	4413      	add	r3, r2
 800ac3a:	3b38      	subs	r3, #56	; 0x38
 800ac3c:	6019      	str	r1, [r3, #0]

    if(i>0)
 800ac3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d012      	beq.n	800ac6a <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800ac44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac46:	1e5a      	subs	r2, r3, #1
 800ac48:	f107 000c 	add.w	r0, r7, #12
 800ac4c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ac4e:	460b      	mov	r3, r1
 800ac50:	005b      	lsls	r3, r3, #1
 800ac52:	440b      	add	r3, r1
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	18c1      	adds	r1, r0, r3
 800ac58:	4613      	mov	r3, r2
 800ac5a:	005b      	lsls	r3, r3, #1
 800ac5c:	4413      	add	r3, r2
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ac64:	4413      	add	r3, r2
 800ac66:	3b34      	subs	r3, #52	; 0x34
 800ac68:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800ac6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d10a      	bne.n	800ac88 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 800ac72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac74:	4613      	mov	r3, r2
 800ac76:	005b      	lsls	r3, r3, #1
 800ac78:	4413      	add	r3, r2
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ac80:	4413      	add	r3, r2
 800ac82:	3b34      	subs	r3, #52	; 0x34
 800ac84:	2200      	movs	r2, #0
 800ac86:	601a      	str	r2, [r3, #0]
    }

    i++;
 800ac88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800ac8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	643b      	str	r3, [r7, #64]	; 0x40
 800ac94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d1b2      	bne.n	800ac00 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	891b      	ldrh	r3, [r3, #8]
 800ac9e:	461a      	mov	r2, r3
 800aca0:	4b08      	ldr	r3, [pc, #32]	; (800acc4 <low_level_output+0xec>)
 800aca2:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800aca4:	4a07      	ldr	r2, [pc, #28]	; (800acc4 <low_level_output+0xec>)
 800aca6:	f107 030c 	add.w	r3, r7, #12
 800acaa:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800acac:	2214      	movs	r2, #20
 800acae:	4905      	ldr	r1, [pc, #20]	; (800acc4 <low_level_output+0xec>)
 800acb0:	4805      	ldr	r0, [pc, #20]	; (800acc8 <low_level_output+0xf0>)
 800acb2:	f7f7 fcdb 	bl	800266c <HAL_ETH_Transmit>

  return errval;
 800acb6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3748      	adds	r7, #72	; 0x48
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
 800acc2:	bf00      	nop
 800acc4:	24005384 	.word	0x24005384
 800acc8:	240052fc 	.word	0x240052fc

0800accc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b098      	sub	sp, #96	; 0x60
 800acd0:	af02      	add	r7, sp, #8
 800acd2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800acd4:	2300      	movs	r3, #0
 800acd6:	657b      	str	r3, [r7, #84]	; 0x54
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 800acd8:	2300      	movs	r3, #0
 800acda:	60bb      	str	r3, [r7, #8]
 800acdc:	2300      	movs	r3, #0
 800acde:	653b      	str	r3, [r7, #80]	; 0x50
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800ace0:	f107 030c 	add.w	r3, r7, #12
 800ace4:	2230      	movs	r2, #48	; 0x30
 800ace6:	2100      	movs	r1, #0
 800ace8:	4618      	mov	r0, r3
 800acea:	f01b fa95 	bl	8026218 <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800acee:	2300      	movs	r3, #0
 800acf0:	653b      	str	r3, [r7, #80]	; 0x50
 800acf2:	e015      	b.n	800ad20 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 800acf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acf6:	1c5a      	adds	r2, r3, #1
 800acf8:	f107 010c 	add.w	r1, r7, #12
 800acfc:	4613      	mov	r3, r2
 800acfe:	005b      	lsls	r3, r3, #1
 800ad00:	4413      	add	r3, r2
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	4419      	add	r1, r3
 800ad06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ad08:	4613      	mov	r3, r2
 800ad0a:	005b      	lsls	r3, r3, #1
 800ad0c:	4413      	add	r3, r2
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ad14:	4413      	add	r3, r2
 800ad16:	3b44      	subs	r3, #68	; 0x44
 800ad18:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800ad1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad1c:	3301      	adds	r3, #1
 800ad1e:	653b      	str	r3, [r7, #80]	; 0x50
 800ad20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad22:	2b02      	cmp	r3, #2
 800ad24:	d9e6      	bls.n	800acf4 <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 800ad26:	f107 030c 	add.w	r3, r7, #12
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	4828      	ldr	r0, [pc, #160]	; (800add0 <low_level_input+0x104>)
 800ad2e:	f7f7 fe16 	bl	800295e <HAL_ETH_GetRxDataBuffer>
 800ad32:	4603      	mov	r3, r0
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d145      	bne.n	800adc4 <low_level_input+0xf8>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800ad38:	f107 0308 	add.w	r3, r7, #8
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	4824      	ldr	r0, [pc, #144]	; (800add0 <low_level_input+0x104>)
 800ad40:	f7f7 feab 	bl	8002a9a <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 800ad44:	4822      	ldr	r0, [pc, #136]	; (800add0 <low_level_input+0x104>)
 800ad46:	f7f7 fedb 	bl	8002b00 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	68ba      	ldr	r2, [r7, #8]
 800ad4e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad50:	647a      	str	r2, [r7, #68]	; 0x44
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800ad52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	dd1d      	ble.n	800ad94 <low_level_input+0xc8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800ad58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad5a:	f003 021f 	and.w	r2, r3, #31
 800ad5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad60:	4413      	add	r3, r2
 800ad62:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800ad64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad66:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 800ad68:	f3bf 8f4f 	dsb	sy
}
 800ad6c:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800ad6e:	4a19      	ldr	r2, [pc, #100]	; (800add4 <low_level_input+0x108>)
 800ad70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad72:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800ad76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad78:	3320      	adds	r3, #32
 800ad7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800ad7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad7e:	3b20      	subs	r3, #32
 800ad80:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 800ad82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	dcf2      	bgt.n	800ad6e <low_level_input+0xa2>
  __ASM volatile ("dsb 0xF":::"memory");
 800ad88:	f3bf 8f4f 	dsb	sy
}
 800ad8c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ad8e:	f3bf 8f6f 	isb	sy
}
 800ad92:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800ad94:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800ad96:	4810      	ldr	r0, [pc, #64]	; (800add8 <low_level_input+0x10c>)
 800ad98:	f009 fef2 	bl	8014b80 <memp_malloc_pool>
 800ad9c:	64f8      	str	r0, [r7, #76]	; 0x4c
    if(custom_pbuf != NULL)
 800ad9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d00f      	beq.n	800adc4 <low_level_input+0xf8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 800ada4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ada6:	4a0d      	ldr	r2, [pc, #52]	; (800addc <low_level_input+0x110>)
 800ada8:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	b299      	uxth	r1, r3
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	68ba      	ldr	r2, [r7, #8]
 800adb2:	b292      	uxth	r2, r2
 800adb4:	9201      	str	r2, [sp, #4]
 800adb6:	9300      	str	r3, [sp, #0]
 800adb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adba:	2241      	movs	r2, #65	; 0x41
 800adbc:	2000      	movs	r0, #0
 800adbe:	f00a fc6d 	bl	801569c <pbuf_alloced_custom>
 800adc2:	6578      	str	r0, [r7, #84]	; 0x54
    }
  }

  return p;
 800adc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3758      	adds	r7, #88	; 0x58
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	240052fc 	.word	0x240052fc
 800add4:	e000ed00 	.word	0xe000ed00
 800add8:	0802ead4 	.word	0x0802ead4
 800addc:	0800ae8d 	.word	0x0800ae8d

0800ade0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b084      	sub	sp, #16
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800adec:	4b0f      	ldr	r3, [pc, #60]	; (800ae2c <ethernetif_input+0x4c>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f04f 31ff 	mov.w	r1, #4294967295
 800adf4:	4618      	mov	r0, r3
 800adf6:	f000 faa5 	bl	800b344 <osSemaphoreWait>
 800adfa:	4603      	mov	r3, r0
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d1f5      	bne.n	800adec <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 800ae00:	68f8      	ldr	r0, [r7, #12]
 800ae02:	f7ff ff63 	bl	800accc <low_level_input>
 800ae06:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d00a      	beq.n	800ae24 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	691b      	ldr	r3, [r3, #16]
 800ae12:	68f9      	ldr	r1, [r7, #12]
 800ae14:	68b8      	ldr	r0, [r7, #8]
 800ae16:	4798      	blx	r3
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d002      	beq.n	800ae24 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 800ae1e:	68b8      	ldr	r0, [r7, #8]
 800ae20:	f00a fe28 	bl	8015a74 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d1ea      	bne.n	800ae00 <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800ae2a:	e7df      	b.n	800adec <ethernetif_input+0xc>
 800ae2c:	24000bc8 	.word	0x24000bc8

0800ae30 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b082      	sub	sp, #8
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d106      	bne.n	800ae4c <ethernetif_init+0x1c>
 800ae3e:	4b0e      	ldr	r3, [pc, #56]	; (800ae78 <ethernetif_init+0x48>)
 800ae40:	f240 223f 	movw	r2, #575	; 0x23f
 800ae44:	490d      	ldr	r1, [pc, #52]	; (800ae7c <ethernetif_init+0x4c>)
 800ae46:	480e      	ldr	r0, [pc, #56]	; (800ae80 <ethernetif_init+0x50>)
 800ae48:	f01c f844 	bl	8026ed4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2273      	movs	r2, #115	; 0x73
 800ae50:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2274      	movs	r2, #116	; 0x74
 800ae58:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	4a09      	ldr	r2, [pc, #36]	; (800ae84 <ethernetif_init+0x54>)
 800ae60:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	4a08      	ldr	r2, [pc, #32]	; (800ae88 <ethernetif_init+0x58>)
 800ae66:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f7ff fd6f 	bl	800a94c <low_level_init>

  return ERR_OK;
 800ae6e:	2300      	movs	r3, #0
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3708      	adds	r7, #8
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	0802a420 	.word	0x0802a420
 800ae7c:	0802a43c 	.word	0x0802a43c
 800ae80:	0802a44c 	.word	0x0802a44c
 800ae84:	0801faf5 	.word	0x0801faf5
 800ae88:	0800abd9 	.word	0x0800abd9

0800ae8c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800ae98:	68f9      	ldr	r1, [r7, #12]
 800ae9a:	4803      	ldr	r0, [pc, #12]	; (800aea8 <pbuf_free_custom+0x1c>)
 800ae9c:	f009 fee4 	bl	8014c68 <memp_free_pool>
}
 800aea0:	bf00      	nop
 800aea2:	3710      	adds	r7, #16
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}
 800aea8:	0802ead4 	.word	0x0802ead4

0800aeac <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800aeb0:	f7f6 fac4 	bl	800143c <HAL_GetTick>
 800aeb4:	4603      	mov	r3, r0
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	bd80      	pop	{r7, pc}
	...

0800aebc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800aec0:	4802      	ldr	r0, [pc, #8]	; (800aecc <ETH_PHY_IO_Init+0x10>)
 800aec2:	f7f8 fa67 	bl	8003394 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800aec6:	2300      	movs	r3, #0
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	bd80      	pop	{r7, pc}
 800aecc:	240052fc 	.word	0x240052fc

0800aed0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800aed0:	b480      	push	{r7}
 800aed2:	af00      	add	r7, sp, #0
  return 0;
 800aed4:	2300      	movs	r3, #0
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr

0800aee0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b084      	sub	sp, #16
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	60f8      	str	r0, [r7, #12]
 800aee8:	60b9      	str	r1, [r7, #8]
 800aeea:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	68ba      	ldr	r2, [r7, #8]
 800aef0:	68f9      	ldr	r1, [r7, #12]
 800aef2:	4807      	ldr	r0, [pc, #28]	; (800af10 <ETH_PHY_IO_ReadReg+0x30>)
 800aef4:	f7f7 ffb8 	bl	8002e68 <HAL_ETH_ReadPHYRegister>
 800aef8:	4603      	mov	r3, r0
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d002      	beq.n	800af04 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800aefe:	f04f 33ff 	mov.w	r3, #4294967295
 800af02:	e000      	b.n	800af06 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800af04:	2300      	movs	r3, #0
}
 800af06:	4618      	mov	r0, r3
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	240052fc 	.word	0x240052fc

0800af14 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	60b9      	str	r1, [r7, #8]
 800af1e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	68ba      	ldr	r2, [r7, #8]
 800af24:	68f9      	ldr	r1, [r7, #12]
 800af26:	4807      	ldr	r0, [pc, #28]	; (800af44 <ETH_PHY_IO_WriteReg+0x30>)
 800af28:	f7f7 fff2 	bl	8002f10 <HAL_ETH_WritePHYRegister>
 800af2c:	4603      	mov	r3, r0
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d002      	beq.n	800af38 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800af32:	f04f 33ff 	mov.w	r3, #4294967295
 800af36:	e000      	b.n	800af3a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800af38:	2300      	movs	r3, #0
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3710      	adds	r7, #16
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}
 800af42:	bf00      	nop
 800af44:	240052fc 	.word	0x240052fc

0800af48 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800af4c:	f7f6 fa76 	bl	800143c <HAL_GetTick>
 800af50:	4603      	mov	r3, r0
}
 800af52:	4618      	mov	r0, r3
 800af54:	bd80      	pop	{r7, pc}
	...

0800af58 <ethernet_link_thread>:
  * @param  argument: netif
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b0a0      	sub	sp, #128	; 0x80
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800af60:	2300      	movs	r3, #0
 800af62:	67fb      	str	r3, [r7, #124]	; 0x7c
 800af64:	2300      	movs	r3, #0
 800af66:	67bb      	str	r3, [r7, #120]	; 0x78
 800af68:	2300      	movs	r3, #0
 800af6a:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800af70:	483a      	ldr	r0, [pc, #232]	; (800b05c <ethernet_link_thread+0x104>)
 800af72:	f7f6 f98c 	bl	800128e <LAN8742_GetLinkState>
 800af76:	66f8      	str	r0, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800af78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af7a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800af7e:	089b      	lsrs	r3, r3, #2
 800af80:	f003 0301 	and.w	r3, r3, #1
 800af84:	b2db      	uxtb	r3, r3
 800af86:	2b00      	cmp	r3, #0
 800af88:	d00c      	beq.n	800afa4 <ethernet_link_thread+0x4c>
 800af8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	dc09      	bgt.n	800afa4 <ethernet_link_thread+0x4c>
  {
    HAL_ETH_Stop_IT(&heth);
 800af90:	4833      	ldr	r0, [pc, #204]	; (800b060 <ethernet_link_thread+0x108>)
 800af92:	f7f7 faf1 	bl	8002578 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800af96:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800af98:	f00a f8f2 	bl	8015180 <netif_set_down>
    netif_set_link_down(netif);
 800af9c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800af9e:	f00a f959 	bl	8015254 <netif_set_link_down>
 800afa2:	e056      	b.n	800b052 <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800afa4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800afa6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800afaa:	f003 0304 	and.w	r3, r3, #4
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d14f      	bne.n	800b052 <ethernet_link_thread+0xfa>
 800afb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	dd4c      	ble.n	800b052 <ethernet_link_thread+0xfa>
 800afb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afba:	3b02      	subs	r3, #2
 800afbc:	2b03      	cmp	r3, #3
 800afbe:	d82b      	bhi.n	800b018 <ethernet_link_thread+0xc0>
 800afc0:	a201      	add	r2, pc, #4	; (adr r2, 800afc8 <ethernet_link_thread+0x70>)
 800afc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afc6:	bf00      	nop
 800afc8:	0800afd9 	.word	0x0800afd9
 800afcc:	0800afeb 	.word	0x0800afeb
 800afd0:	0800affb 	.word	0x0800affb
 800afd4:	0800b00b 	.word	0x0800b00b
  {
    switch (PHYLinkState)
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800afd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800afdc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800afde:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800afe2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800afe4:	2301      	movs	r3, #1
 800afe6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800afe8:	e017      	b.n	800b01a <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800afea:	2300      	movs	r3, #0
 800afec:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800afee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aff2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800aff4:	2301      	movs	r3, #1
 800aff6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800aff8:	e00f      	b.n	800b01a <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800affa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800affe:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800b000:	2300      	movs	r3, #0
 800b002:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b004:	2301      	movs	r3, #1
 800b006:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b008:	e007      	b.n	800b01a <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800b00a:	2300      	movs	r3, #0
 800b00c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800b00e:	2300      	movs	r3, #0
 800b010:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b012:	2301      	movs	r3, #1
 800b014:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b016:	e000      	b.n	800b01a <ethernet_link_thread+0xc2>
    default:
      break;
 800b018:	bf00      	nop
    }

    if(linkchanged)
 800b01a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d018      	beq.n	800b052 <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b020:	f107 0308 	add.w	r3, r7, #8
 800b024:	4619      	mov	r1, r3
 800b026:	480e      	ldr	r0, [pc, #56]	; (800b060 <ethernet_link_thread+0x108>)
 800b028:	f7f7 ffc6 	bl	8002fb8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800b02c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b02e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800b030:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b032:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b034:	f107 0308 	add.w	r3, r7, #8
 800b038:	4619      	mov	r1, r3
 800b03a:	4809      	ldr	r0, [pc, #36]	; (800b060 <ethernet_link_thread+0x108>)
 800b03c:	f7f8 f990 	bl	8003360 <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 800b040:	4807      	ldr	r0, [pc, #28]	; (800b060 <ethernet_link_thread+0x108>)
 800b042:	f7f7 fa14 	bl	800246e <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800b046:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b048:	f00a f82e 	bl	80150a8 <netif_set_up>
      netif_set_link_up(netif);
 800b04c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b04e:	f00a f8c9 	bl	80151e4 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800b052:	2064      	movs	r0, #100	; 0x64
 800b054:	f000 f893 	bl	800b17e <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b058:	e78a      	b.n	800af70 <ethernet_link_thread+0x18>
 800b05a:	bf00      	nop
 800b05c:	240052dc 	.word	0x240052dc
 800b060:	240052fc 	.word	0x240052fc

0800b064 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b064:	b480      	push	{r7}
 800b066:	b085      	sub	sp, #20
 800b068:	af00      	add	r7, sp, #0
 800b06a:	4603      	mov	r3, r0
 800b06c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b06e:	2300      	movs	r3, #0
 800b070:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b072:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b076:	2b84      	cmp	r3, #132	; 0x84
 800b078:	d005      	beq.n	800b086 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b07a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	4413      	add	r3, r2
 800b082:	3303      	adds	r3, #3
 800b084:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b086:	68fb      	ldr	r3, [r7, #12]
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3714      	adds	r7, #20
 800b08c:	46bd      	mov	sp, r7
 800b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b092:	4770      	bx	lr

0800b094 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b094:	b480      	push	{r7}
 800b096:	b083      	sub	sp, #12
 800b098:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b09a:	f3ef 8305 	mrs	r3, IPSR
 800b09e:	607b      	str	r3, [r7, #4]
  return(result);
 800b0a0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	bf14      	ite	ne
 800b0a6:	2301      	movne	r3, #1
 800b0a8:	2300      	moveq	r3, #0
 800b0aa:	b2db      	uxtb	r3, r3
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	370c      	adds	r7, #12
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b6:	4770      	bx	lr

0800b0b8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b0bc:	f001 fd3c 	bl	800cb38 <vTaskStartScheduler>
  
  return osOK;
 800b0c0:	2300      	movs	r3, #0
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800b0ca:	f7ff ffe3 	bl	800b094 <inHandlerMode>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d003      	beq.n	800b0dc <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800b0d4:	f001 fe54 	bl	800cd80 <xTaskGetTickCountFromISR>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	e002      	b.n	800b0e2 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800b0dc:	f001 fe40 	bl	800cd60 <xTaskGetTickCount>
 800b0e0:	4603      	mov	r3, r0
  }
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b0e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0e8:	b089      	sub	sp, #36	; 0x24
 800b0ea:	af04      	add	r7, sp, #16
 800b0ec:	6078      	str	r0, [r7, #4]
 800b0ee:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	695b      	ldr	r3, [r3, #20]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d020      	beq.n	800b13a <osThreadCreate+0x54>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	699b      	ldr	r3, [r3, #24]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d01c      	beq.n	800b13a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	685c      	ldr	r4, [r3, #4]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681d      	ldr	r5, [r3, #0]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	691e      	ldr	r6, [r3, #16]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b112:	4618      	mov	r0, r3
 800b114:	f7ff ffa6 	bl	800b064 <makeFreeRtosPriority>
 800b118:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	695b      	ldr	r3, [r3, #20]
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b122:	9202      	str	r2, [sp, #8]
 800b124:	9301      	str	r3, [sp, #4]
 800b126:	9100      	str	r1, [sp, #0]
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	4632      	mov	r2, r6
 800b12c:	4629      	mov	r1, r5
 800b12e:	4620      	mov	r0, r4
 800b130:	f001 fb24 	bl	800c77c <xTaskCreateStatic>
 800b134:	4603      	mov	r3, r0
 800b136:	60fb      	str	r3, [r7, #12]
 800b138:	e01c      	b.n	800b174 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	685c      	ldr	r4, [r3, #4]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b146:	b29e      	uxth	r6, r3
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b14e:	4618      	mov	r0, r3
 800b150:	f7ff ff88 	bl	800b064 <makeFreeRtosPriority>
 800b154:	4602      	mov	r2, r0
 800b156:	f107 030c 	add.w	r3, r7, #12
 800b15a:	9301      	str	r3, [sp, #4]
 800b15c:	9200      	str	r2, [sp, #0]
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	4632      	mov	r2, r6
 800b162:	4629      	mov	r1, r5
 800b164:	4620      	mov	r0, r4
 800b166:	f001 fb66 	bl	800c836 <xTaskCreate>
 800b16a:	4603      	mov	r3, r0
 800b16c:	2b01      	cmp	r3, #1
 800b16e:	d001      	beq.n	800b174 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b170:	2300      	movs	r3, #0
 800b172:	e000      	b.n	800b176 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b174:	68fb      	ldr	r3, [r7, #12]
}
 800b176:	4618      	mov	r0, r3
 800b178:	3714      	adds	r7, #20
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b17e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b084      	sub	sp, #16
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d001      	beq.n	800b194 <osDelay+0x16>
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	e000      	b.n	800b196 <osDelay+0x18>
 800b194:	2301      	movs	r3, #1
 800b196:	4618      	mov	r0, r3
 800b198:	f001 fc9a 	bl	800cad0 <vTaskDelay>
  
  return osOK;
 800b19c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3710      	adds	r7, #16
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b082      	sub	sp, #8
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d007      	beq.n	800b1c6 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	4619      	mov	r1, r3
 800b1bc:	2001      	movs	r0, #1
 800b1be:	f000 fc7e 	bl	800babe <xQueueCreateMutexStatic>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	e003      	b.n	800b1ce <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b1c6:	2001      	movs	r0, #1
 800b1c8:	f000 fc61 	bl	800ba8e <xQueueCreateMutex>
 800b1cc:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3708      	adds	r7, #8
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}
	...

0800b1d8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d101      	bne.n	800b1f0 <osMutexWait+0x18>
    return osErrorParameter;
 800b1ec:	2380      	movs	r3, #128	; 0x80
 800b1ee:	e03a      	b.n	800b266 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1fa:	d103      	bne.n	800b204 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800b1fc:	f04f 33ff 	mov.w	r3, #4294967295
 800b200:	60fb      	str	r3, [r7, #12]
 800b202:	e009      	b.n	800b218 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d006      	beq.n	800b218 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d101      	bne.n	800b218 <osMutexWait+0x40>
      ticks = 1;
 800b214:	2301      	movs	r3, #1
 800b216:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b218:	f7ff ff3c 	bl	800b094 <inHandlerMode>
 800b21c:	4603      	mov	r3, r0
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d017      	beq.n	800b252 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800b222:	f107 0308 	add.w	r3, r7, #8
 800b226:	461a      	mov	r2, r3
 800b228:	2100      	movs	r1, #0
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f001 f874 	bl	800c318 <xQueueReceiveFromISR>
 800b230:	4603      	mov	r3, r0
 800b232:	2b01      	cmp	r3, #1
 800b234:	d001      	beq.n	800b23a <osMutexWait+0x62>
      return osErrorOS;
 800b236:	23ff      	movs	r3, #255	; 0xff
 800b238:	e015      	b.n	800b266 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d011      	beq.n	800b264 <osMutexWait+0x8c>
 800b240:	4b0b      	ldr	r3, [pc, #44]	; (800b270 <osMutexWait+0x98>)
 800b242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b246:	601a      	str	r2, [r3, #0]
 800b248:	f3bf 8f4f 	dsb	sy
 800b24c:	f3bf 8f6f 	isb	sy
 800b250:	e008      	b.n	800b264 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800b252:	68f9      	ldr	r1, [r7, #12]
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 ff53 	bl	800c100 <xQueueSemaphoreTake>
 800b25a:	4603      	mov	r3, r0
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d001      	beq.n	800b264 <osMutexWait+0x8c>
    return osErrorOS;
 800b260:	23ff      	movs	r3, #255	; 0xff
 800b262:	e000      	b.n	800b266 <osMutexWait+0x8e>
  }
  
  return osOK;
 800b264:	2300      	movs	r3, #0
}
 800b266:	4618      	mov	r0, r3
 800b268:	3710      	adds	r7, #16
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
 800b26e:	bf00      	nop
 800b270:	e000ed04 	.word	0xe000ed04

0800b274 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b084      	sub	sp, #16
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b27c:	2300      	movs	r3, #0
 800b27e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b280:	2300      	movs	r3, #0
 800b282:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800b284:	f7ff ff06 	bl	800b094 <inHandlerMode>
 800b288:	4603      	mov	r3, r0
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d016      	beq.n	800b2bc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800b28e:	f107 0308 	add.w	r3, r7, #8
 800b292:	4619      	mov	r1, r3
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 fdc6 	bl	800be26 <xQueueGiveFromISR>
 800b29a:	4603      	mov	r3, r0
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	d001      	beq.n	800b2a4 <osMutexRelease+0x30>
      return osErrorOS;
 800b2a0:	23ff      	movs	r3, #255	; 0xff
 800b2a2:	e017      	b.n	800b2d4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d013      	beq.n	800b2d2 <osMutexRelease+0x5e>
 800b2aa:	4b0c      	ldr	r3, [pc, #48]	; (800b2dc <osMutexRelease+0x68>)
 800b2ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2b0:	601a      	str	r2, [r3, #0]
 800b2b2:	f3bf 8f4f 	dsb	sy
 800b2b6:	f3bf 8f6f 	isb	sy
 800b2ba:	e00a      	b.n	800b2d2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800b2bc:	2300      	movs	r3, #0
 800b2be:	2200      	movs	r2, #0
 800b2c0:	2100      	movs	r1, #0
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f000 fc16 	bl	800baf4 <xQueueGenericSend>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d001      	beq.n	800b2d2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800b2ce:	23ff      	movs	r3, #255	; 0xff
 800b2d0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3710      	adds	r7, #16
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}
 800b2dc:	e000ed04 	.word	0xe000ed04

0800b2e0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b086      	sub	sp, #24
 800b2e4:	af02      	add	r7, sp, #8
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d00f      	beq.n	800b312 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	d10a      	bne.n	800b30e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	2203      	movs	r2, #3
 800b2fe:	9200      	str	r2, [sp, #0]
 800b300:	2200      	movs	r2, #0
 800b302:	2100      	movs	r1, #0
 800b304:	2001      	movs	r0, #1
 800b306:	f000 fad7 	bl	800b8b8 <xQueueGenericCreateStatic>
 800b30a:	4603      	mov	r3, r0
 800b30c:	e016      	b.n	800b33c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800b30e:	2300      	movs	r3, #0
 800b310:	e014      	b.n	800b33c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	2b01      	cmp	r3, #1
 800b316:	d110      	bne.n	800b33a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800b318:	2203      	movs	r2, #3
 800b31a:	2100      	movs	r1, #0
 800b31c:	2001      	movs	r0, #1
 800b31e:	f000 fb43 	bl	800b9a8 <xQueueGenericCreate>
 800b322:	60f8      	str	r0, [r7, #12]
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d005      	beq.n	800b336 <osSemaphoreCreate+0x56>
 800b32a:	2300      	movs	r3, #0
 800b32c:	2200      	movs	r2, #0
 800b32e:	2100      	movs	r1, #0
 800b330:	68f8      	ldr	r0, [r7, #12]
 800b332:	f000 fbdf 	bl	800baf4 <xQueueGenericSend>
      return sema;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	e000      	b.n	800b33c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800b33a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3710      	adds	r7, #16
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}

0800b344 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b084      	sub	sp, #16
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b34e:	2300      	movs	r3, #0
 800b350:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d101      	bne.n	800b35c <osSemaphoreWait+0x18>
    return osErrorParameter;
 800b358:	2380      	movs	r3, #128	; 0x80
 800b35a:	e03a      	b.n	800b3d2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800b35c:	2300      	movs	r3, #0
 800b35e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b366:	d103      	bne.n	800b370 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800b368:	f04f 33ff 	mov.w	r3, #4294967295
 800b36c:	60fb      	str	r3, [r7, #12]
 800b36e:	e009      	b.n	800b384 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d006      	beq.n	800b384 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d101      	bne.n	800b384 <osSemaphoreWait+0x40>
      ticks = 1;
 800b380:	2301      	movs	r3, #1
 800b382:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b384:	f7ff fe86 	bl	800b094 <inHandlerMode>
 800b388:	4603      	mov	r3, r0
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d017      	beq.n	800b3be <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b38e:	f107 0308 	add.w	r3, r7, #8
 800b392:	461a      	mov	r2, r3
 800b394:	2100      	movs	r1, #0
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 ffbe 	bl	800c318 <xQueueReceiveFromISR>
 800b39c:	4603      	mov	r3, r0
 800b39e:	2b01      	cmp	r3, #1
 800b3a0:	d001      	beq.n	800b3a6 <osSemaphoreWait+0x62>
      return osErrorOS;
 800b3a2:	23ff      	movs	r3, #255	; 0xff
 800b3a4:	e015      	b.n	800b3d2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d011      	beq.n	800b3d0 <osSemaphoreWait+0x8c>
 800b3ac:	4b0b      	ldr	r3, [pc, #44]	; (800b3dc <osSemaphoreWait+0x98>)
 800b3ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3b2:	601a      	str	r2, [r3, #0]
 800b3b4:	f3bf 8f4f 	dsb	sy
 800b3b8:	f3bf 8f6f 	isb	sy
 800b3bc:	e008      	b.n	800b3d0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800b3be:	68f9      	ldr	r1, [r7, #12]
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f000 fe9d 	bl	800c100 <xQueueSemaphoreTake>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	d001      	beq.n	800b3d0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800b3cc:	23ff      	movs	r3, #255	; 0xff
 800b3ce:	e000      	b.n	800b3d2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800b3d0:	2300      	movs	r3, #0
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3710      	adds	r7, #16
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	e000ed04 	.word	0xe000ed04

0800b3e0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800b3f0:	f7ff fe50 	bl	800b094 <inHandlerMode>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d016      	beq.n	800b428 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b3fa:	f107 0308 	add.w	r3, r7, #8
 800b3fe:	4619      	mov	r1, r3
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f000 fd10 	bl	800be26 <xQueueGiveFromISR>
 800b406:	4603      	mov	r3, r0
 800b408:	2b01      	cmp	r3, #1
 800b40a:	d001      	beq.n	800b410 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800b40c:	23ff      	movs	r3, #255	; 0xff
 800b40e:	e017      	b.n	800b440 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d013      	beq.n	800b43e <osSemaphoreRelease+0x5e>
 800b416:	4b0c      	ldr	r3, [pc, #48]	; (800b448 <osSemaphoreRelease+0x68>)
 800b418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b41c:	601a      	str	r2, [r3, #0]
 800b41e:	f3bf 8f4f 	dsb	sy
 800b422:	f3bf 8f6f 	isb	sy
 800b426:	e00a      	b.n	800b43e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800b428:	2300      	movs	r3, #0
 800b42a:	2200      	movs	r2, #0
 800b42c:	2100      	movs	r1, #0
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 fb60 	bl	800baf4 <xQueueGenericSend>
 800b434:	4603      	mov	r3, r0
 800b436:	2b01      	cmp	r3, #1
 800b438:	d001      	beq.n	800b43e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800b43a:	23ff      	movs	r3, #255	; 0xff
 800b43c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800b43e:	68fb      	ldr	r3, [r7, #12]
}
 800b440:	4618      	mov	r0, r3
 800b442:	3710      	adds	r7, #16
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}
 800b448:	e000ed04 	.word	0xe000ed04

0800b44c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b454:	f7ff fe1e 	bl	800b094 <inHandlerMode>
 800b458:	4603      	mov	r3, r0
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d001      	beq.n	800b462 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800b45e:	2382      	movs	r3, #130	; 0x82
 800b460:	e003      	b.n	800b46a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f001 f814 	bl	800c490 <vQueueDelete>

  return osOK; 
 800b468:	2300      	movs	r3, #0
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3708      	adds	r7, #8
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}

0800b472 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b472:	b590      	push	{r4, r7, lr}
 800b474:	b085      	sub	sp, #20
 800b476:	af02      	add	r7, sp, #8
 800b478:	6078      	str	r0, [r7, #4]
 800b47a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	689b      	ldr	r3, [r3, #8]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d011      	beq.n	800b4a8 <osMessageCreate+0x36>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	68db      	ldr	r3, [r3, #12]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d00d      	beq.n	800b4a8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6818      	ldr	r0, [r3, #0]
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6859      	ldr	r1, [r3, #4]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	689a      	ldr	r2, [r3, #8]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	68db      	ldr	r3, [r3, #12]
 800b49c:	2400      	movs	r4, #0
 800b49e:	9400      	str	r4, [sp, #0]
 800b4a0:	f000 fa0a 	bl	800b8b8 <xQueueGenericCreateStatic>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	e008      	b.n	800b4ba <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	6818      	ldr	r0, [r3, #0]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	f000 fa78 	bl	800b9a8 <xQueueGenericCreate>
 800b4b8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	370c      	adds	r7, #12
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd90      	pop	{r4, r7, pc}
	...

0800b4c4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b086      	sub	sp, #24
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d101      	bne.n	800b4e2 <osMessagePut+0x1e>
    ticks = 1;
 800b4de:	2301      	movs	r3, #1
 800b4e0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b4e2:	f7ff fdd7 	bl	800b094 <inHandlerMode>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d018      	beq.n	800b51e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b4ec:	f107 0210 	add.w	r2, r7, #16
 800b4f0:	f107 0108 	add.w	r1, r7, #8
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	68f8      	ldr	r0, [r7, #12]
 800b4f8:	f000 fbfa 	bl	800bcf0 <xQueueGenericSendFromISR>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	d001      	beq.n	800b506 <osMessagePut+0x42>
      return osErrorOS;
 800b502:	23ff      	movs	r3, #255	; 0xff
 800b504:	e018      	b.n	800b538 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d014      	beq.n	800b536 <osMessagePut+0x72>
 800b50c:	4b0c      	ldr	r3, [pc, #48]	; (800b540 <osMessagePut+0x7c>)
 800b50e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b512:	601a      	str	r2, [r3, #0]
 800b514:	f3bf 8f4f 	dsb	sy
 800b518:	f3bf 8f6f 	isb	sy
 800b51c:	e00b      	b.n	800b536 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b51e:	f107 0108 	add.w	r1, r7, #8
 800b522:	2300      	movs	r3, #0
 800b524:	697a      	ldr	r2, [r7, #20]
 800b526:	68f8      	ldr	r0, [r7, #12]
 800b528:	f000 fae4 	bl	800baf4 <xQueueGenericSend>
 800b52c:	4603      	mov	r3, r0
 800b52e:	2b01      	cmp	r3, #1
 800b530:	d001      	beq.n	800b536 <osMessagePut+0x72>
      return osErrorOS;
 800b532:	23ff      	movs	r3, #255	; 0xff
 800b534:	e000      	b.n	800b538 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b536:	2300      	movs	r3, #0
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3718      	adds	r7, #24
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}
 800b540:	e000ed04 	.word	0xe000ed04

0800b544 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b544:	b590      	push	{r4, r7, lr}
 800b546:	b08b      	sub	sp, #44	; 0x2c
 800b548:	af00      	add	r7, sp, #0
 800b54a:	60f8      	str	r0, [r7, #12]
 800b54c:	60b9      	str	r1, [r7, #8]
 800b54e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b554:	2300      	movs	r3, #0
 800b556:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d10a      	bne.n	800b574 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b55e:	2380      	movs	r3, #128	; 0x80
 800b560:	617b      	str	r3, [r7, #20]
    return event;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	461c      	mov	r4, r3
 800b566:	f107 0314 	add.w	r3, r7, #20
 800b56a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b56e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b572:	e054      	b.n	800b61e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b574:	2300      	movs	r3, #0
 800b576:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b578:	2300      	movs	r3, #0
 800b57a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b582:	d103      	bne.n	800b58c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b584:	f04f 33ff 	mov.w	r3, #4294967295
 800b588:	627b      	str	r3, [r7, #36]	; 0x24
 800b58a:	e009      	b.n	800b5a0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d006      	beq.n	800b5a0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800b596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d101      	bne.n	800b5a0 <osMessageGet+0x5c>
      ticks = 1;
 800b59c:	2301      	movs	r3, #1
 800b59e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b5a0:	f7ff fd78 	bl	800b094 <inHandlerMode>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d01c      	beq.n	800b5e4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b5aa:	f107 0220 	add.w	r2, r7, #32
 800b5ae:	f107 0314 	add.w	r3, r7, #20
 800b5b2:	3304      	adds	r3, #4
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	68b8      	ldr	r0, [r7, #8]
 800b5b8:	f000 feae 	bl	800c318 <xQueueReceiveFromISR>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	2b01      	cmp	r3, #1
 800b5c0:	d102      	bne.n	800b5c8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b5c2:	2310      	movs	r3, #16
 800b5c4:	617b      	str	r3, [r7, #20]
 800b5c6:	e001      	b.n	800b5cc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b5cc:	6a3b      	ldr	r3, [r7, #32]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d01d      	beq.n	800b60e <osMessageGet+0xca>
 800b5d2:	4b15      	ldr	r3, [pc, #84]	; (800b628 <osMessageGet+0xe4>)
 800b5d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5d8:	601a      	str	r2, [r3, #0]
 800b5da:	f3bf 8f4f 	dsb	sy
 800b5de:	f3bf 8f6f 	isb	sy
 800b5e2:	e014      	b.n	800b60e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b5e4:	f107 0314 	add.w	r3, r7, #20
 800b5e8:	3304      	adds	r3, #4
 800b5ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5ec:	4619      	mov	r1, r3
 800b5ee:	68b8      	ldr	r0, [r7, #8]
 800b5f0:	f000 fca6 	bl	800bf40 <xQueueReceive>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	d102      	bne.n	800b600 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b5fa:	2310      	movs	r3, #16
 800b5fc:	617b      	str	r3, [r7, #20]
 800b5fe:	e006      	b.n	800b60e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b602:	2b00      	cmp	r3, #0
 800b604:	d101      	bne.n	800b60a <osMessageGet+0xc6>
 800b606:	2300      	movs	r3, #0
 800b608:	e000      	b.n	800b60c <osMessageGet+0xc8>
 800b60a:	2340      	movs	r3, #64	; 0x40
 800b60c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	461c      	mov	r4, r3
 800b612:	f107 0314 	add.w	r3, r7, #20
 800b616:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b61a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b61e:	68f8      	ldr	r0, [r7, #12]
 800b620:	372c      	adds	r7, #44	; 0x2c
 800b622:	46bd      	mov	sp, r7
 800b624:	bd90      	pop	{r4, r7, pc}
 800b626:	bf00      	nop
 800b628:	e000ed04 	.word	0xe000ed04

0800b62c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b634:	f7ff fd2e 	bl	800b094 <inHandlerMode>
 800b638:	4603      	mov	r3, r0
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d004      	beq.n	800b648 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 ff08 	bl	800c454 <uxQueueMessagesWaitingFromISR>
 800b644:	4603      	mov	r3, r0
 800b646:	e003      	b.n	800b650 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f000 fee5 	bl	800c418 <uxQueueMessagesWaiting>
 800b64e:	4603      	mov	r3, r0
  }
}
 800b650:	4618      	mov	r0, r3
 800b652:	3708      	adds	r7, #8
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}

0800b658 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b660:	f7ff fd18 	bl	800b094 <inHandlerMode>
 800b664:	4603      	mov	r3, r0
 800b666:	2b00      	cmp	r3, #0
 800b668:	d001      	beq.n	800b66e <osMessageDelete+0x16>
    return osErrorISR;
 800b66a:	2382      	movs	r3, #130	; 0x82
 800b66c:	e003      	b.n	800b676 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f000 ff0e 	bl	800c490 <vQueueDelete>

  return osOK; 
 800b674:	2300      	movs	r3, #0
}
 800b676:	4618      	mov	r0, r3
 800b678:	3708      	adds	r7, #8
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}

0800b67e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b67e:	b480      	push	{r7}
 800b680:	b083      	sub	sp, #12
 800b682:	af00      	add	r7, sp, #0
 800b684:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f103 0208 	add.w	r2, r3, #8
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f04f 32ff 	mov.w	r2, #4294967295
 800b696:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f103 0208 	add.w	r2, r3, #8
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f103 0208 	add.w	r2, r3, #8
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b6b2:	bf00      	nop
 800b6b4:	370c      	adds	r7, #12
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6bc:	4770      	bx	lr

0800b6be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b6be:	b480      	push	{r7}
 800b6c0:	b083      	sub	sp, #12
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b6cc:	bf00      	nop
 800b6ce:	370c      	adds	r7, #12
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b085      	sub	sp, #20
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	68fa      	ldr	r2, [r7, #12]
 800b6ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	689a      	ldr	r2, [r3, #8]
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	689b      	ldr	r3, [r3, #8]
 800b6fa:	683a      	ldr	r2, [r7, #0]
 800b6fc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	683a      	ldr	r2, [r7, #0]
 800b702:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	1c5a      	adds	r2, r3, #1
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	601a      	str	r2, [r3, #0]
}
 800b714:	bf00      	nop
 800b716:	3714      	adds	r7, #20
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr

0800b720 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b720:	b480      	push	{r7}
 800b722:	b085      	sub	sp, #20
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b736:	d103      	bne.n	800b740 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	691b      	ldr	r3, [r3, #16]
 800b73c:	60fb      	str	r3, [r7, #12]
 800b73e:	e00c      	b.n	800b75a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	3308      	adds	r3, #8
 800b744:	60fb      	str	r3, [r7, #12]
 800b746:	e002      	b.n	800b74e <vListInsert+0x2e>
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	60fb      	str	r3, [r7, #12]
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	68ba      	ldr	r2, [r7, #8]
 800b756:	429a      	cmp	r2, r3
 800b758:	d2f6      	bcs.n	800b748 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	685a      	ldr	r2, [r3, #4]
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	683a      	ldr	r2, [r7, #0]
 800b768:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	68fa      	ldr	r2, [r7, #12]
 800b76e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	683a      	ldr	r2, [r7, #0]
 800b774:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	1c5a      	adds	r2, r3, #1
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	601a      	str	r2, [r3, #0]
}
 800b786:	bf00      	nop
 800b788:	3714      	adds	r7, #20
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr

0800b792 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b792:	b480      	push	{r7}
 800b794:	b085      	sub	sp, #20
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	691b      	ldr	r3, [r3, #16]
 800b79e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	6892      	ldr	r2, [r2, #8]
 800b7a8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	689b      	ldr	r3, [r3, #8]
 800b7ae:	687a      	ldr	r2, [r7, #4]
 800b7b0:	6852      	ldr	r2, [r2, #4]
 800b7b2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d103      	bne.n	800b7c6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	689a      	ldr	r2, [r3, #8]
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	1e5a      	subs	r2, r3, #1
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3714      	adds	r7, #20
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e4:	4770      	bx	lr
	...

0800b7e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b084      	sub	sp, #16
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d10a      	bne.n	800b812 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b800:	f383 8811 	msr	BASEPRI, r3
 800b804:	f3bf 8f6f 	isb	sy
 800b808:	f3bf 8f4f 	dsb	sy
 800b80c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b80e:	bf00      	nop
 800b810:	e7fe      	b.n	800b810 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b812:	f002 f917 	bl	800da44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681a      	ldr	r2, [r3, #0]
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b81e:	68f9      	ldr	r1, [r7, #12]
 800b820:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b822:	fb01 f303 	mul.w	r3, r1, r3
 800b826:	441a      	add	r2, r3
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	2200      	movs	r2, #0
 800b830:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681a      	ldr	r2, [r3, #0]
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	681a      	ldr	r2, [r3, #0]
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b842:	3b01      	subs	r3, #1
 800b844:	68f9      	ldr	r1, [r7, #12]
 800b846:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b848:	fb01 f303 	mul.w	r3, r1, r3
 800b84c:	441a      	add	r2, r3
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	22ff      	movs	r2, #255	; 0xff
 800b856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	22ff      	movs	r2, #255	; 0xff
 800b85e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d114      	bne.n	800b892 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	691b      	ldr	r3, [r3, #16]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d01a      	beq.n	800b8a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	3310      	adds	r3, #16
 800b874:	4618      	mov	r0, r3
 800b876:	f001 fbd3 	bl	800d020 <xTaskRemoveFromEventList>
 800b87a:	4603      	mov	r3, r0
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d012      	beq.n	800b8a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b880:	4b0c      	ldr	r3, [pc, #48]	; (800b8b4 <xQueueGenericReset+0xcc>)
 800b882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b886:	601a      	str	r2, [r3, #0]
 800b888:	f3bf 8f4f 	dsb	sy
 800b88c:	f3bf 8f6f 	isb	sy
 800b890:	e009      	b.n	800b8a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	3310      	adds	r3, #16
 800b896:	4618      	mov	r0, r3
 800b898:	f7ff fef1 	bl	800b67e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	3324      	adds	r3, #36	; 0x24
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f7ff feec 	bl	800b67e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b8a6:	f002 f8fd 	bl	800daa4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b8aa:	2301      	movs	r3, #1
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3710      	adds	r7, #16
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}
 800b8b4:	e000ed04 	.word	0xe000ed04

0800b8b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b08e      	sub	sp, #56	; 0x38
 800b8bc:	af02      	add	r7, sp, #8
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	60b9      	str	r1, [r7, #8]
 800b8c2:	607a      	str	r2, [r7, #4]
 800b8c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d10a      	bne.n	800b8e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d0:	f383 8811 	msr	BASEPRI, r3
 800b8d4:	f3bf 8f6f 	isb	sy
 800b8d8:	f3bf 8f4f 	dsb	sy
 800b8dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b8de:	bf00      	nop
 800b8e0:	e7fe      	b.n	800b8e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d10a      	bne.n	800b8fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ec:	f383 8811 	msr	BASEPRI, r3
 800b8f0:	f3bf 8f6f 	isb	sy
 800b8f4:	f3bf 8f4f 	dsb	sy
 800b8f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b8fa:	bf00      	nop
 800b8fc:	e7fe      	b.n	800b8fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d002      	beq.n	800b90a <xQueueGenericCreateStatic+0x52>
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d001      	beq.n	800b90e <xQueueGenericCreateStatic+0x56>
 800b90a:	2301      	movs	r3, #1
 800b90c:	e000      	b.n	800b910 <xQueueGenericCreateStatic+0x58>
 800b90e:	2300      	movs	r3, #0
 800b910:	2b00      	cmp	r3, #0
 800b912:	d10a      	bne.n	800b92a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b918:	f383 8811 	msr	BASEPRI, r3
 800b91c:	f3bf 8f6f 	isb	sy
 800b920:	f3bf 8f4f 	dsb	sy
 800b924:	623b      	str	r3, [r7, #32]
}
 800b926:	bf00      	nop
 800b928:	e7fe      	b.n	800b928 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d102      	bne.n	800b936 <xQueueGenericCreateStatic+0x7e>
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d101      	bne.n	800b93a <xQueueGenericCreateStatic+0x82>
 800b936:	2301      	movs	r3, #1
 800b938:	e000      	b.n	800b93c <xQueueGenericCreateStatic+0x84>
 800b93a:	2300      	movs	r3, #0
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d10a      	bne.n	800b956 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b944:	f383 8811 	msr	BASEPRI, r3
 800b948:	f3bf 8f6f 	isb	sy
 800b94c:	f3bf 8f4f 	dsb	sy
 800b950:	61fb      	str	r3, [r7, #28]
}
 800b952:	bf00      	nop
 800b954:	e7fe      	b.n	800b954 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b956:	2348      	movs	r3, #72	; 0x48
 800b958:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	2b48      	cmp	r3, #72	; 0x48
 800b95e:	d00a      	beq.n	800b976 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b964:	f383 8811 	msr	BASEPRI, r3
 800b968:	f3bf 8f6f 	isb	sy
 800b96c:	f3bf 8f4f 	dsb	sy
 800b970:	61bb      	str	r3, [r7, #24]
}
 800b972:	bf00      	nop
 800b974:	e7fe      	b.n	800b974 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b976:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d00d      	beq.n	800b99e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b984:	2201      	movs	r2, #1
 800b986:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b98a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b990:	9300      	str	r3, [sp, #0]
 800b992:	4613      	mov	r3, r2
 800b994:	687a      	ldr	r2, [r7, #4]
 800b996:	68b9      	ldr	r1, [r7, #8]
 800b998:	68f8      	ldr	r0, [r7, #12]
 800b99a:	f000 f83f 	bl	800ba1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3730      	adds	r7, #48	; 0x30
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b08a      	sub	sp, #40	; 0x28
 800b9ac:	af02      	add	r7, sp, #8
 800b9ae:	60f8      	str	r0, [r7, #12]
 800b9b0:	60b9      	str	r1, [r7, #8]
 800b9b2:	4613      	mov	r3, r2
 800b9b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d10a      	bne.n	800b9d2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c0:	f383 8811 	msr	BASEPRI, r3
 800b9c4:	f3bf 8f6f 	isb	sy
 800b9c8:	f3bf 8f4f 	dsb	sy
 800b9cc:	613b      	str	r3, [r7, #16]
}
 800b9ce:	bf00      	nop
 800b9d0:	e7fe      	b.n	800b9d0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	68ba      	ldr	r2, [r7, #8]
 800b9d6:	fb02 f303 	mul.w	r3, r2, r3
 800b9da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b9dc:	69fb      	ldr	r3, [r7, #28]
 800b9de:	3348      	adds	r3, #72	; 0x48
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f002 f951 	bl	800dc88 <pvPortMalloc>
 800b9e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b9e8:	69bb      	ldr	r3, [r7, #24]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d011      	beq.n	800ba12 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b9ee:	69bb      	ldr	r3, [r7, #24]
 800b9f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	3348      	adds	r3, #72	; 0x48
 800b9f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b9f8:	69bb      	ldr	r3, [r7, #24]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ba00:	79fa      	ldrb	r2, [r7, #7]
 800ba02:	69bb      	ldr	r3, [r7, #24]
 800ba04:	9300      	str	r3, [sp, #0]
 800ba06:	4613      	mov	r3, r2
 800ba08:	697a      	ldr	r2, [r7, #20]
 800ba0a:	68b9      	ldr	r1, [r7, #8]
 800ba0c:	68f8      	ldr	r0, [r7, #12]
 800ba0e:	f000 f805 	bl	800ba1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ba12:	69bb      	ldr	r3, [r7, #24]
	}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3720      	adds	r7, #32
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b084      	sub	sp, #16
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	60f8      	str	r0, [r7, #12]
 800ba24:	60b9      	str	r1, [r7, #8]
 800ba26:	607a      	str	r2, [r7, #4]
 800ba28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d103      	bne.n	800ba38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ba30:	69bb      	ldr	r3, [r7, #24]
 800ba32:	69ba      	ldr	r2, [r7, #24]
 800ba34:	601a      	str	r2, [r3, #0]
 800ba36:	e002      	b.n	800ba3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ba38:	69bb      	ldr	r3, [r7, #24]
 800ba3a:	687a      	ldr	r2, [r7, #4]
 800ba3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ba3e:	69bb      	ldr	r3, [r7, #24]
 800ba40:	68fa      	ldr	r2, [r7, #12]
 800ba42:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ba44:	69bb      	ldr	r3, [r7, #24]
 800ba46:	68ba      	ldr	r2, [r7, #8]
 800ba48:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ba4a:	2101      	movs	r1, #1
 800ba4c:	69b8      	ldr	r0, [r7, #24]
 800ba4e:	f7ff fecb 	bl	800b7e8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ba52:	bf00      	nop
 800ba54:	3710      	adds	r7, #16
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}

0800ba5a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ba5a:	b580      	push	{r7, lr}
 800ba5c:	b082      	sub	sp, #8
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d00e      	beq.n	800ba86 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2200      	movs	r2, #0
 800ba72:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2200      	movs	r2, #0
 800ba78:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	2100      	movs	r1, #0
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f000 f837 	bl	800baf4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ba86:	bf00      	nop
 800ba88:	3708      	adds	r7, #8
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}

0800ba8e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ba8e:	b580      	push	{r7, lr}
 800ba90:	b086      	sub	sp, #24
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	4603      	mov	r3, r0
 800ba96:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ba98:	2301      	movs	r3, #1
 800ba9a:	617b      	str	r3, [r7, #20]
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800baa0:	79fb      	ldrb	r3, [r7, #7]
 800baa2:	461a      	mov	r2, r3
 800baa4:	6939      	ldr	r1, [r7, #16]
 800baa6:	6978      	ldr	r0, [r7, #20]
 800baa8:	f7ff ff7e 	bl	800b9a8 <xQueueGenericCreate>
 800baac:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800baae:	68f8      	ldr	r0, [r7, #12]
 800bab0:	f7ff ffd3 	bl	800ba5a <prvInitialiseMutex>

		return xNewQueue;
 800bab4:	68fb      	ldr	r3, [r7, #12]
	}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3718      	adds	r7, #24
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800babe:	b580      	push	{r7, lr}
 800bac0:	b088      	sub	sp, #32
 800bac2:	af02      	add	r7, sp, #8
 800bac4:	4603      	mov	r3, r0
 800bac6:	6039      	str	r1, [r7, #0]
 800bac8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800baca:	2301      	movs	r3, #1
 800bacc:	617b      	str	r3, [r7, #20]
 800bace:	2300      	movs	r3, #0
 800bad0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bad2:	79fb      	ldrb	r3, [r7, #7]
 800bad4:	9300      	str	r3, [sp, #0]
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	2200      	movs	r2, #0
 800bada:	6939      	ldr	r1, [r7, #16]
 800badc:	6978      	ldr	r0, [r7, #20]
 800bade:	f7ff feeb 	bl	800b8b8 <xQueueGenericCreateStatic>
 800bae2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bae4:	68f8      	ldr	r0, [r7, #12]
 800bae6:	f7ff ffb8 	bl	800ba5a <prvInitialiseMutex>

		return xNewQueue;
 800baea:	68fb      	ldr	r3, [r7, #12]
	}
 800baec:	4618      	mov	r0, r3
 800baee:	3718      	adds	r7, #24
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b08e      	sub	sp, #56	; 0x38
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	60f8      	str	r0, [r7, #12]
 800bafc:	60b9      	str	r1, [r7, #8]
 800bafe:	607a      	str	r2, [r7, #4]
 800bb00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bb02:	2300      	movs	r3, #0
 800bb04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d10a      	bne.n	800bb26 <xQueueGenericSend+0x32>
	__asm volatile
 800bb10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb14:	f383 8811 	msr	BASEPRI, r3
 800bb18:	f3bf 8f6f 	isb	sy
 800bb1c:	f3bf 8f4f 	dsb	sy
 800bb20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bb22:	bf00      	nop
 800bb24:	e7fe      	b.n	800bb24 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d103      	bne.n	800bb34 <xQueueGenericSend+0x40>
 800bb2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d101      	bne.n	800bb38 <xQueueGenericSend+0x44>
 800bb34:	2301      	movs	r3, #1
 800bb36:	e000      	b.n	800bb3a <xQueueGenericSend+0x46>
 800bb38:	2300      	movs	r3, #0
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d10a      	bne.n	800bb54 <xQueueGenericSend+0x60>
	__asm volatile
 800bb3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb42:	f383 8811 	msr	BASEPRI, r3
 800bb46:	f3bf 8f6f 	isb	sy
 800bb4a:	f3bf 8f4f 	dsb	sy
 800bb4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bb50:	bf00      	nop
 800bb52:	e7fe      	b.n	800bb52 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	2b02      	cmp	r3, #2
 800bb58:	d103      	bne.n	800bb62 <xQueueGenericSend+0x6e>
 800bb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb5e:	2b01      	cmp	r3, #1
 800bb60:	d101      	bne.n	800bb66 <xQueueGenericSend+0x72>
 800bb62:	2301      	movs	r3, #1
 800bb64:	e000      	b.n	800bb68 <xQueueGenericSend+0x74>
 800bb66:	2300      	movs	r3, #0
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d10a      	bne.n	800bb82 <xQueueGenericSend+0x8e>
	__asm volatile
 800bb6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb70:	f383 8811 	msr	BASEPRI, r3
 800bb74:	f3bf 8f6f 	isb	sy
 800bb78:	f3bf 8f4f 	dsb	sy
 800bb7c:	623b      	str	r3, [r7, #32]
}
 800bb7e:	bf00      	nop
 800bb80:	e7fe      	b.n	800bb80 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bb82:	f001 fc0d 	bl	800d3a0 <xTaskGetSchedulerState>
 800bb86:	4603      	mov	r3, r0
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d102      	bne.n	800bb92 <xQueueGenericSend+0x9e>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d101      	bne.n	800bb96 <xQueueGenericSend+0xa2>
 800bb92:	2301      	movs	r3, #1
 800bb94:	e000      	b.n	800bb98 <xQueueGenericSend+0xa4>
 800bb96:	2300      	movs	r3, #0
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d10a      	bne.n	800bbb2 <xQueueGenericSend+0xbe>
	__asm volatile
 800bb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba0:	f383 8811 	msr	BASEPRI, r3
 800bba4:	f3bf 8f6f 	isb	sy
 800bba8:	f3bf 8f4f 	dsb	sy
 800bbac:	61fb      	str	r3, [r7, #28]
}
 800bbae:	bf00      	nop
 800bbb0:	e7fe      	b.n	800bbb0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bbb2:	f001 ff47 	bl	800da44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bbb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d302      	bcc.n	800bbc8 <xQueueGenericSend+0xd4>
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	2b02      	cmp	r3, #2
 800bbc6:	d129      	bne.n	800bc1c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bbc8:	683a      	ldr	r2, [r7, #0]
 800bbca:	68b9      	ldr	r1, [r7, #8]
 800bbcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbce:	f000 fc9a 	bl	800c506 <prvCopyDataToQueue>
 800bbd2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d010      	beq.n	800bbfe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbde:	3324      	adds	r3, #36	; 0x24
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f001 fa1d 	bl	800d020 <xTaskRemoveFromEventList>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d013      	beq.n	800bc14 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bbec:	4b3f      	ldr	r3, [pc, #252]	; (800bcec <xQueueGenericSend+0x1f8>)
 800bbee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbf2:	601a      	str	r2, [r3, #0]
 800bbf4:	f3bf 8f4f 	dsb	sy
 800bbf8:	f3bf 8f6f 	isb	sy
 800bbfc:	e00a      	b.n	800bc14 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bbfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d007      	beq.n	800bc14 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bc04:	4b39      	ldr	r3, [pc, #228]	; (800bcec <xQueueGenericSend+0x1f8>)
 800bc06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc0a:	601a      	str	r2, [r3, #0]
 800bc0c:	f3bf 8f4f 	dsb	sy
 800bc10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bc14:	f001 ff46 	bl	800daa4 <vPortExitCritical>
				return pdPASS;
 800bc18:	2301      	movs	r3, #1
 800bc1a:	e063      	b.n	800bce4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d103      	bne.n	800bc2a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bc22:	f001 ff3f 	bl	800daa4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bc26:	2300      	movs	r3, #0
 800bc28:	e05c      	b.n	800bce4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bc2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d106      	bne.n	800bc3e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bc30:	f107 0314 	add.w	r3, r7, #20
 800bc34:	4618      	mov	r0, r3
 800bc36:	f001 fa55 	bl	800d0e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bc3e:	f001 ff31 	bl	800daa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bc42:	f000 ffe3 	bl	800cc0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bc46:	f001 fefd 	bl	800da44 <vPortEnterCritical>
 800bc4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc50:	b25b      	sxtb	r3, r3
 800bc52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc56:	d103      	bne.n	800bc60 <xQueueGenericSend+0x16c>
 800bc58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc66:	b25b      	sxtb	r3, r3
 800bc68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc6c:	d103      	bne.n	800bc76 <xQueueGenericSend+0x182>
 800bc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc70:	2200      	movs	r2, #0
 800bc72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc76:	f001 ff15 	bl	800daa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bc7a:	1d3a      	adds	r2, r7, #4
 800bc7c:	f107 0314 	add.w	r3, r7, #20
 800bc80:	4611      	mov	r1, r2
 800bc82:	4618      	mov	r0, r3
 800bc84:	f001 fa44 	bl	800d110 <xTaskCheckForTimeOut>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d124      	bne.n	800bcd8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bc8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc90:	f000 fd31 	bl	800c6f6 <prvIsQueueFull>
 800bc94:	4603      	mov	r3, r0
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d018      	beq.n	800bccc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc9c:	3310      	adds	r3, #16
 800bc9e:	687a      	ldr	r2, [r7, #4]
 800bca0:	4611      	mov	r1, r2
 800bca2:	4618      	mov	r0, r3
 800bca4:	f001 f998 	bl	800cfd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bca8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcaa:	f000 fcbc 	bl	800c626 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bcae:	f000 ffbb 	bl	800cc28 <xTaskResumeAll>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	f47f af7c 	bne.w	800bbb2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bcba:	4b0c      	ldr	r3, [pc, #48]	; (800bcec <xQueueGenericSend+0x1f8>)
 800bcbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcc0:	601a      	str	r2, [r3, #0]
 800bcc2:	f3bf 8f4f 	dsb	sy
 800bcc6:	f3bf 8f6f 	isb	sy
 800bcca:	e772      	b.n	800bbb2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bccc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcce:	f000 fcaa 	bl	800c626 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bcd2:	f000 ffa9 	bl	800cc28 <xTaskResumeAll>
 800bcd6:	e76c      	b.n	800bbb2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bcd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcda:	f000 fca4 	bl	800c626 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bcde:	f000 ffa3 	bl	800cc28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bce2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3738      	adds	r7, #56	; 0x38
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}
 800bcec:	e000ed04 	.word	0xe000ed04

0800bcf0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b090      	sub	sp, #64	; 0x40
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	607a      	str	r2, [r7, #4]
 800bcfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d10a      	bne.n	800bd1e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bd08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0c:	f383 8811 	msr	BASEPRI, r3
 800bd10:	f3bf 8f6f 	isb	sy
 800bd14:	f3bf 8f4f 	dsb	sy
 800bd18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bd1a:	bf00      	nop
 800bd1c:	e7fe      	b.n	800bd1c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d103      	bne.n	800bd2c <xQueueGenericSendFromISR+0x3c>
 800bd24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d101      	bne.n	800bd30 <xQueueGenericSendFromISR+0x40>
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	e000      	b.n	800bd32 <xQueueGenericSendFromISR+0x42>
 800bd30:	2300      	movs	r3, #0
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d10a      	bne.n	800bd4c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bd36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd3a:	f383 8811 	msr	BASEPRI, r3
 800bd3e:	f3bf 8f6f 	isb	sy
 800bd42:	f3bf 8f4f 	dsb	sy
 800bd46:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bd48:	bf00      	nop
 800bd4a:	e7fe      	b.n	800bd4a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	2b02      	cmp	r3, #2
 800bd50:	d103      	bne.n	800bd5a <xQueueGenericSendFromISR+0x6a>
 800bd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d101      	bne.n	800bd5e <xQueueGenericSendFromISR+0x6e>
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	e000      	b.n	800bd60 <xQueueGenericSendFromISR+0x70>
 800bd5e:	2300      	movs	r3, #0
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d10a      	bne.n	800bd7a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bd64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd68:	f383 8811 	msr	BASEPRI, r3
 800bd6c:	f3bf 8f6f 	isb	sy
 800bd70:	f3bf 8f4f 	dsb	sy
 800bd74:	623b      	str	r3, [r7, #32]
}
 800bd76:	bf00      	nop
 800bd78:	e7fe      	b.n	800bd78 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bd7a:	f001 ff45 	bl	800dc08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bd7e:	f3ef 8211 	mrs	r2, BASEPRI
 800bd82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd86:	f383 8811 	msr	BASEPRI, r3
 800bd8a:	f3bf 8f6f 	isb	sy
 800bd8e:	f3bf 8f4f 	dsb	sy
 800bd92:	61fa      	str	r2, [r7, #28]
 800bd94:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bd96:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bd98:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bd9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d302      	bcc.n	800bdac <xQueueGenericSendFromISR+0xbc>
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	2b02      	cmp	r3, #2
 800bdaa:	d12f      	bne.n	800be0c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bdac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bdb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bdb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdba:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bdbc:	683a      	ldr	r2, [r7, #0]
 800bdbe:	68b9      	ldr	r1, [r7, #8]
 800bdc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bdc2:	f000 fba0 	bl	800c506 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bdc6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bdca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdce:	d112      	bne.n	800bdf6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bdd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d016      	beq.n	800be06 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bdd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdda:	3324      	adds	r3, #36	; 0x24
 800bddc:	4618      	mov	r0, r3
 800bdde:	f001 f91f 	bl	800d020 <xTaskRemoveFromEventList>
 800bde2:	4603      	mov	r3, r0
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d00e      	beq.n	800be06 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d00b      	beq.n	800be06 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2201      	movs	r2, #1
 800bdf2:	601a      	str	r2, [r3, #0]
 800bdf4:	e007      	b.n	800be06 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bdf6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	b2db      	uxtb	r3, r3
 800bdfe:	b25a      	sxtb	r2, r3
 800be00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800be06:	2301      	movs	r3, #1
 800be08:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800be0a:	e001      	b.n	800be10 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800be0c:	2300      	movs	r3, #0
 800be0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be12:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800be1a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800be1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3740      	adds	r7, #64	; 0x40
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}

0800be26 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800be26:	b580      	push	{r7, lr}
 800be28:	b08e      	sub	sp, #56	; 0x38
 800be2a:	af00      	add	r7, sp, #0
 800be2c:	6078      	str	r0, [r7, #4]
 800be2e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800be34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be36:	2b00      	cmp	r3, #0
 800be38:	d10a      	bne.n	800be50 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800be3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3e:	f383 8811 	msr	BASEPRI, r3
 800be42:	f3bf 8f6f 	isb	sy
 800be46:	f3bf 8f4f 	dsb	sy
 800be4a:	623b      	str	r3, [r7, #32]
}
 800be4c:	bf00      	nop
 800be4e:	e7fe      	b.n	800be4e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800be50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be54:	2b00      	cmp	r3, #0
 800be56:	d00a      	beq.n	800be6e <xQueueGiveFromISR+0x48>
	__asm volatile
 800be58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be5c:	f383 8811 	msr	BASEPRI, r3
 800be60:	f3bf 8f6f 	isb	sy
 800be64:	f3bf 8f4f 	dsb	sy
 800be68:	61fb      	str	r3, [r7, #28]
}
 800be6a:	bf00      	nop
 800be6c:	e7fe      	b.n	800be6c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800be6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d103      	bne.n	800be7e <xQueueGiveFromISR+0x58>
 800be76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be78:	689b      	ldr	r3, [r3, #8]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d101      	bne.n	800be82 <xQueueGiveFromISR+0x5c>
 800be7e:	2301      	movs	r3, #1
 800be80:	e000      	b.n	800be84 <xQueueGiveFromISR+0x5e>
 800be82:	2300      	movs	r3, #0
 800be84:	2b00      	cmp	r3, #0
 800be86:	d10a      	bne.n	800be9e <xQueueGiveFromISR+0x78>
	__asm volatile
 800be88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8c:	f383 8811 	msr	BASEPRI, r3
 800be90:	f3bf 8f6f 	isb	sy
 800be94:	f3bf 8f4f 	dsb	sy
 800be98:	61bb      	str	r3, [r7, #24]
}
 800be9a:	bf00      	nop
 800be9c:	e7fe      	b.n	800be9c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be9e:	f001 feb3 	bl	800dc08 <vPortValidateInterruptPriority>
	__asm volatile
 800bea2:	f3ef 8211 	mrs	r2, BASEPRI
 800bea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beaa:	f383 8811 	msr	BASEPRI, r3
 800beae:	f3bf 8f6f 	isb	sy
 800beb2:	f3bf 8f4f 	dsb	sy
 800beb6:	617a      	str	r2, [r7, #20]
 800beb8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800beba:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bebc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bec2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800beca:	429a      	cmp	r2, r3
 800becc:	d22b      	bcs.n	800bf26 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beda:	1c5a      	adds	r2, r3, #1
 800bedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bede:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bee0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bee8:	d112      	bne.n	800bf10 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800beea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d016      	beq.n	800bf20 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef4:	3324      	adds	r3, #36	; 0x24
 800bef6:	4618      	mov	r0, r3
 800bef8:	f001 f892 	bl	800d020 <xTaskRemoveFromEventList>
 800befc:	4603      	mov	r3, r0
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d00e      	beq.n	800bf20 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d00b      	beq.n	800bf20 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	601a      	str	r2, [r3, #0]
 800bf0e:	e007      	b.n	800bf20 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bf10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf14:	3301      	adds	r3, #1
 800bf16:	b2db      	uxtb	r3, r3
 800bf18:	b25a      	sxtb	r2, r3
 800bf1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bf20:	2301      	movs	r3, #1
 800bf22:	637b      	str	r3, [r7, #52]	; 0x34
 800bf24:	e001      	b.n	800bf2a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bf26:	2300      	movs	r3, #0
 800bf28:	637b      	str	r3, [r7, #52]	; 0x34
 800bf2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf2c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	f383 8811 	msr	BASEPRI, r3
}
 800bf34:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bf36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3738      	adds	r7, #56	; 0x38
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b08c      	sub	sp, #48	; 0x30
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	60b9      	str	r1, [r7, #8]
 800bf4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bf54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d10a      	bne.n	800bf70 <xQueueReceive+0x30>
	__asm volatile
 800bf5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf5e:	f383 8811 	msr	BASEPRI, r3
 800bf62:	f3bf 8f6f 	isb	sy
 800bf66:	f3bf 8f4f 	dsb	sy
 800bf6a:	623b      	str	r3, [r7, #32]
}
 800bf6c:	bf00      	nop
 800bf6e:	e7fe      	b.n	800bf6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d103      	bne.n	800bf7e <xQueueReceive+0x3e>
 800bf76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d101      	bne.n	800bf82 <xQueueReceive+0x42>
 800bf7e:	2301      	movs	r3, #1
 800bf80:	e000      	b.n	800bf84 <xQueueReceive+0x44>
 800bf82:	2300      	movs	r3, #0
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d10a      	bne.n	800bf9e <xQueueReceive+0x5e>
	__asm volatile
 800bf88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf8c:	f383 8811 	msr	BASEPRI, r3
 800bf90:	f3bf 8f6f 	isb	sy
 800bf94:	f3bf 8f4f 	dsb	sy
 800bf98:	61fb      	str	r3, [r7, #28]
}
 800bf9a:	bf00      	nop
 800bf9c:	e7fe      	b.n	800bf9c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf9e:	f001 f9ff 	bl	800d3a0 <xTaskGetSchedulerState>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d102      	bne.n	800bfae <xQueueReceive+0x6e>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d101      	bne.n	800bfb2 <xQueueReceive+0x72>
 800bfae:	2301      	movs	r3, #1
 800bfb0:	e000      	b.n	800bfb4 <xQueueReceive+0x74>
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d10a      	bne.n	800bfce <xQueueReceive+0x8e>
	__asm volatile
 800bfb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfbc:	f383 8811 	msr	BASEPRI, r3
 800bfc0:	f3bf 8f6f 	isb	sy
 800bfc4:	f3bf 8f4f 	dsb	sy
 800bfc8:	61bb      	str	r3, [r7, #24]
}
 800bfca:	bf00      	nop
 800bfcc:	e7fe      	b.n	800bfcc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bfce:	f001 fd39 	bl	800da44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bfd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfd6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d01f      	beq.n	800c01e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bfde:	68b9      	ldr	r1, [r7, #8]
 800bfe0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfe2:	f000 fafa 	bl	800c5da <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bfe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe8:	1e5a      	subs	r2, r3, #1
 800bfea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bfee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff0:	691b      	ldr	r3, [r3, #16]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d00f      	beq.n	800c016 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff8:	3310      	adds	r3, #16
 800bffa:	4618      	mov	r0, r3
 800bffc:	f001 f810 	bl	800d020 <xTaskRemoveFromEventList>
 800c000:	4603      	mov	r3, r0
 800c002:	2b00      	cmp	r3, #0
 800c004:	d007      	beq.n	800c016 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c006:	4b3d      	ldr	r3, [pc, #244]	; (800c0fc <xQueueReceive+0x1bc>)
 800c008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c00c:	601a      	str	r2, [r3, #0]
 800c00e:	f3bf 8f4f 	dsb	sy
 800c012:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c016:	f001 fd45 	bl	800daa4 <vPortExitCritical>
				return pdPASS;
 800c01a:	2301      	movs	r3, #1
 800c01c:	e069      	b.n	800c0f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d103      	bne.n	800c02c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c024:	f001 fd3e 	bl	800daa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c028:	2300      	movs	r3, #0
 800c02a:	e062      	b.n	800c0f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d106      	bne.n	800c040 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c032:	f107 0310 	add.w	r3, r7, #16
 800c036:	4618      	mov	r0, r3
 800c038:	f001 f854 	bl	800d0e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c03c:	2301      	movs	r3, #1
 800c03e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c040:	f001 fd30 	bl	800daa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c044:	f000 fde2 	bl	800cc0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c048:	f001 fcfc 	bl	800da44 <vPortEnterCritical>
 800c04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c04e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c052:	b25b      	sxtb	r3, r3
 800c054:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c058:	d103      	bne.n	800c062 <xQueueReceive+0x122>
 800c05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c05c:	2200      	movs	r2, #0
 800c05e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c064:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c068:	b25b      	sxtb	r3, r3
 800c06a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c06e:	d103      	bne.n	800c078 <xQueueReceive+0x138>
 800c070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c072:	2200      	movs	r2, #0
 800c074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c078:	f001 fd14 	bl	800daa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c07c:	1d3a      	adds	r2, r7, #4
 800c07e:	f107 0310 	add.w	r3, r7, #16
 800c082:	4611      	mov	r1, r2
 800c084:	4618      	mov	r0, r3
 800c086:	f001 f843 	bl	800d110 <xTaskCheckForTimeOut>
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d123      	bne.n	800c0d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c092:	f000 fb1a 	bl	800c6ca <prvIsQueueEmpty>
 800c096:	4603      	mov	r3, r0
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d017      	beq.n	800c0cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c09e:	3324      	adds	r3, #36	; 0x24
 800c0a0:	687a      	ldr	r2, [r7, #4]
 800c0a2:	4611      	mov	r1, r2
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f000 ff97 	bl	800cfd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c0aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0ac:	f000 fabb 	bl	800c626 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c0b0:	f000 fdba 	bl	800cc28 <xTaskResumeAll>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d189      	bne.n	800bfce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c0ba:	4b10      	ldr	r3, [pc, #64]	; (800c0fc <xQueueReceive+0x1bc>)
 800c0bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0c0:	601a      	str	r2, [r3, #0]
 800c0c2:	f3bf 8f4f 	dsb	sy
 800c0c6:	f3bf 8f6f 	isb	sy
 800c0ca:	e780      	b.n	800bfce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c0cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0ce:	f000 faaa 	bl	800c626 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c0d2:	f000 fda9 	bl	800cc28 <xTaskResumeAll>
 800c0d6:	e77a      	b.n	800bfce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c0d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0da:	f000 faa4 	bl	800c626 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c0de:	f000 fda3 	bl	800cc28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c0e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0e4:	f000 faf1 	bl	800c6ca <prvIsQueueEmpty>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	f43f af6f 	beq.w	800bfce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c0f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3730      	adds	r7, #48	; 0x30
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
 800c0fa:	bf00      	nop
 800c0fc:	e000ed04 	.word	0xe000ed04

0800c100 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b08e      	sub	sp, #56	; 0x38
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c10a:	2300      	movs	r3, #0
 800c10c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c112:	2300      	movs	r3, #0
 800c114:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d10a      	bne.n	800c132 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c120:	f383 8811 	msr	BASEPRI, r3
 800c124:	f3bf 8f6f 	isb	sy
 800c128:	f3bf 8f4f 	dsb	sy
 800c12c:	623b      	str	r3, [r7, #32]
}
 800c12e:	bf00      	nop
 800c130:	e7fe      	b.n	800c130 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c136:	2b00      	cmp	r3, #0
 800c138:	d00a      	beq.n	800c150 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c13e:	f383 8811 	msr	BASEPRI, r3
 800c142:	f3bf 8f6f 	isb	sy
 800c146:	f3bf 8f4f 	dsb	sy
 800c14a:	61fb      	str	r3, [r7, #28]
}
 800c14c:	bf00      	nop
 800c14e:	e7fe      	b.n	800c14e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c150:	f001 f926 	bl	800d3a0 <xTaskGetSchedulerState>
 800c154:	4603      	mov	r3, r0
 800c156:	2b00      	cmp	r3, #0
 800c158:	d102      	bne.n	800c160 <xQueueSemaphoreTake+0x60>
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d101      	bne.n	800c164 <xQueueSemaphoreTake+0x64>
 800c160:	2301      	movs	r3, #1
 800c162:	e000      	b.n	800c166 <xQueueSemaphoreTake+0x66>
 800c164:	2300      	movs	r3, #0
 800c166:	2b00      	cmp	r3, #0
 800c168:	d10a      	bne.n	800c180 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c16e:	f383 8811 	msr	BASEPRI, r3
 800c172:	f3bf 8f6f 	isb	sy
 800c176:	f3bf 8f4f 	dsb	sy
 800c17a:	61bb      	str	r3, [r7, #24]
}
 800c17c:	bf00      	nop
 800c17e:	e7fe      	b.n	800c17e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c180:	f001 fc60 	bl	800da44 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c188:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d024      	beq.n	800c1da <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c192:	1e5a      	subs	r2, r3, #1
 800c194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c196:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d104      	bne.n	800c1aa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c1a0:	f001 faa6 	bl	800d6f0 <pvTaskIncrementMutexHeldCount>
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ac:	691b      	ldr	r3, [r3, #16]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d00f      	beq.n	800c1d2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b4:	3310      	adds	r3, #16
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f000 ff32 	bl	800d020 <xTaskRemoveFromEventList>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d007      	beq.n	800c1d2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c1c2:	4b54      	ldr	r3, [pc, #336]	; (800c314 <xQueueSemaphoreTake+0x214>)
 800c1c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1c8:	601a      	str	r2, [r3, #0]
 800c1ca:	f3bf 8f4f 	dsb	sy
 800c1ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c1d2:	f001 fc67 	bl	800daa4 <vPortExitCritical>
				return pdPASS;
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	e097      	b.n	800c30a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d111      	bne.n	800c204 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d00a      	beq.n	800c1fc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ea:	f383 8811 	msr	BASEPRI, r3
 800c1ee:	f3bf 8f6f 	isb	sy
 800c1f2:	f3bf 8f4f 	dsb	sy
 800c1f6:	617b      	str	r3, [r7, #20]
}
 800c1f8:	bf00      	nop
 800c1fa:	e7fe      	b.n	800c1fa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c1fc:	f001 fc52 	bl	800daa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c200:	2300      	movs	r3, #0
 800c202:	e082      	b.n	800c30a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c206:	2b00      	cmp	r3, #0
 800c208:	d106      	bne.n	800c218 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c20a:	f107 030c 	add.w	r3, r7, #12
 800c20e:	4618      	mov	r0, r3
 800c210:	f000 ff68 	bl	800d0e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c214:	2301      	movs	r3, #1
 800c216:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c218:	f001 fc44 	bl	800daa4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c21c:	f000 fcf6 	bl	800cc0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c220:	f001 fc10 	bl	800da44 <vPortEnterCritical>
 800c224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c226:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c22a:	b25b      	sxtb	r3, r3
 800c22c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c230:	d103      	bne.n	800c23a <xQueueSemaphoreTake+0x13a>
 800c232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c234:	2200      	movs	r2, #0
 800c236:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c23c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c240:	b25b      	sxtb	r3, r3
 800c242:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c246:	d103      	bne.n	800c250 <xQueueSemaphoreTake+0x150>
 800c248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c24a:	2200      	movs	r2, #0
 800c24c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c250:	f001 fc28 	bl	800daa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c254:	463a      	mov	r2, r7
 800c256:	f107 030c 	add.w	r3, r7, #12
 800c25a:	4611      	mov	r1, r2
 800c25c:	4618      	mov	r0, r3
 800c25e:	f000 ff57 	bl	800d110 <xTaskCheckForTimeOut>
 800c262:	4603      	mov	r3, r0
 800c264:	2b00      	cmp	r3, #0
 800c266:	d132      	bne.n	800c2ce <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c268:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c26a:	f000 fa2e 	bl	800c6ca <prvIsQueueEmpty>
 800c26e:	4603      	mov	r3, r0
 800c270:	2b00      	cmp	r3, #0
 800c272:	d026      	beq.n	800c2c2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d109      	bne.n	800c290 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c27c:	f001 fbe2 	bl	800da44 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c282:	689b      	ldr	r3, [r3, #8]
 800c284:	4618      	mov	r0, r3
 800c286:	f001 f8a9 	bl	800d3dc <xTaskPriorityInherit>
 800c28a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c28c:	f001 fc0a 	bl	800daa4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c292:	3324      	adds	r3, #36	; 0x24
 800c294:	683a      	ldr	r2, [r7, #0]
 800c296:	4611      	mov	r1, r2
 800c298:	4618      	mov	r0, r3
 800c29a:	f000 fe9d 	bl	800cfd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c29e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2a0:	f000 f9c1 	bl	800c626 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c2a4:	f000 fcc0 	bl	800cc28 <xTaskResumeAll>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	f47f af68 	bne.w	800c180 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c2b0:	4b18      	ldr	r3, [pc, #96]	; (800c314 <xQueueSemaphoreTake+0x214>)
 800c2b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2b6:	601a      	str	r2, [r3, #0]
 800c2b8:	f3bf 8f4f 	dsb	sy
 800c2bc:	f3bf 8f6f 	isb	sy
 800c2c0:	e75e      	b.n	800c180 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c2c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2c4:	f000 f9af 	bl	800c626 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c2c8:	f000 fcae 	bl	800cc28 <xTaskResumeAll>
 800c2cc:	e758      	b.n	800c180 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c2ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2d0:	f000 f9a9 	bl	800c626 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c2d4:	f000 fca8 	bl	800cc28 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2da:	f000 f9f6 	bl	800c6ca <prvIsQueueEmpty>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	f43f af4d 	beq.w	800c180 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d00d      	beq.n	800c308 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c2ec:	f001 fbaa 	bl	800da44 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c2f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2f2:	f000 f8f0 	bl	800c4d6 <prvGetDisinheritPriorityAfterTimeout>
 800c2f6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2fa:	689b      	ldr	r3, [r3, #8]
 800c2fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c2fe:	4618      	mov	r0, r3
 800c300:	f001 f968 	bl	800d5d4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c304:	f001 fbce 	bl	800daa4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c308:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3738      	adds	r7, #56	; 0x38
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
 800c312:	bf00      	nop
 800c314:	e000ed04 	.word	0xe000ed04

0800c318 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b08e      	sub	sp, #56	; 0x38
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	60f8      	str	r0, [r7, #12]
 800c320:	60b9      	str	r1, [r7, #8]
 800c322:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d10a      	bne.n	800c344 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c332:	f383 8811 	msr	BASEPRI, r3
 800c336:	f3bf 8f6f 	isb	sy
 800c33a:	f3bf 8f4f 	dsb	sy
 800c33e:	623b      	str	r3, [r7, #32]
}
 800c340:	bf00      	nop
 800c342:	e7fe      	b.n	800c342 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d103      	bne.n	800c352 <xQueueReceiveFromISR+0x3a>
 800c34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c34c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d101      	bne.n	800c356 <xQueueReceiveFromISR+0x3e>
 800c352:	2301      	movs	r3, #1
 800c354:	e000      	b.n	800c358 <xQueueReceiveFromISR+0x40>
 800c356:	2300      	movs	r3, #0
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d10a      	bne.n	800c372 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c360:	f383 8811 	msr	BASEPRI, r3
 800c364:	f3bf 8f6f 	isb	sy
 800c368:	f3bf 8f4f 	dsb	sy
 800c36c:	61fb      	str	r3, [r7, #28]
}
 800c36e:	bf00      	nop
 800c370:	e7fe      	b.n	800c370 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c372:	f001 fc49 	bl	800dc08 <vPortValidateInterruptPriority>
	__asm volatile
 800c376:	f3ef 8211 	mrs	r2, BASEPRI
 800c37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c37e:	f383 8811 	msr	BASEPRI, r3
 800c382:	f3bf 8f6f 	isb	sy
 800c386:	f3bf 8f4f 	dsb	sy
 800c38a:	61ba      	str	r2, [r7, #24]
 800c38c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c38e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c390:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c396:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d02f      	beq.n	800c3fe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c3a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c3a8:	68b9      	ldr	r1, [r7, #8]
 800c3aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3ac:	f000 f915 	bl	800c5da <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b2:	1e5a      	subs	r2, r3, #1
 800c3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c3b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c3bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3c0:	d112      	bne.n	800c3e8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c4:	691b      	ldr	r3, [r3, #16]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d016      	beq.n	800c3f8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3cc:	3310      	adds	r3, #16
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f000 fe26 	bl	800d020 <xTaskRemoveFromEventList>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d00e      	beq.n	800c3f8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d00b      	beq.n	800c3f8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	601a      	str	r2, [r3, #0]
 800c3e6:	e007      	b.n	800c3f8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c3e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3ec:	3301      	adds	r3, #1
 800c3ee:	b2db      	uxtb	r3, r3
 800c3f0:	b25a      	sxtb	r2, r3
 800c3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	637b      	str	r3, [r7, #52]	; 0x34
 800c3fc:	e001      	b.n	800c402 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c3fe:	2300      	movs	r3, #0
 800c400:	637b      	str	r3, [r7, #52]	; 0x34
 800c402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c404:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	f383 8811 	msr	BASEPRI, r3
}
 800c40c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c40e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c410:	4618      	mov	r0, r3
 800c412:	3738      	adds	r7, #56	; 0x38
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}

0800c418 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b084      	sub	sp, #16
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d10a      	bne.n	800c43c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800c426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c42a:	f383 8811 	msr	BASEPRI, r3
 800c42e:	f3bf 8f6f 	isb	sy
 800c432:	f3bf 8f4f 	dsb	sy
 800c436:	60bb      	str	r3, [r7, #8]
}
 800c438:	bf00      	nop
 800c43a:	e7fe      	b.n	800c43a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800c43c:	f001 fb02 	bl	800da44 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c444:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800c446:	f001 fb2d 	bl	800daa4 <vPortExitCritical>

	return uxReturn;
 800c44a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c44c:	4618      	mov	r0, r3
 800c44e:	3710      	adds	r7, #16
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}

0800c454 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800c454:	b480      	push	{r7}
 800c456:	b087      	sub	sp, #28
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d10a      	bne.n	800c47c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800c466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c46a:	f383 8811 	msr	BASEPRI, r3
 800c46e:	f3bf 8f6f 	isb	sy
 800c472:	f3bf 8f4f 	dsb	sy
 800c476:	60fb      	str	r3, [r7, #12]
}
 800c478:	bf00      	nop
 800c47a:	e7fe      	b.n	800c47a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c480:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800c482:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c484:	4618      	mov	r0, r3
 800c486:	371c      	adds	r7, #28
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr

0800c490 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b084      	sub	sp, #16
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d10a      	bne.n	800c4b8 <vQueueDelete+0x28>
	__asm volatile
 800c4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a6:	f383 8811 	msr	BASEPRI, r3
 800c4aa:	f3bf 8f6f 	isb	sy
 800c4ae:	f3bf 8f4f 	dsb	sy
 800c4b2:	60bb      	str	r3, [r7, #8]
}
 800c4b4:	bf00      	nop
 800c4b6:	e7fe      	b.n	800c4b6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c4b8:	68f8      	ldr	r0, [r7, #12]
 800c4ba:	f000 f935 	bl	800c728 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d102      	bne.n	800c4ce <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c4c8:	68f8      	ldr	r0, [r7, #12]
 800c4ca:	f001 fca9 	bl	800de20 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c4ce:	bf00      	nop
 800c4d0:	3710      	adds	r7, #16
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}

0800c4d6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c4d6:	b480      	push	{r7}
 800c4d8:	b085      	sub	sp, #20
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d006      	beq.n	800c4f4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	f1c3 0307 	rsb	r3, r3, #7
 800c4f0:	60fb      	str	r3, [r7, #12]
 800c4f2:	e001      	b.n	800c4f8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
	}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3714      	adds	r7, #20
 800c4fe:	46bd      	mov	sp, r7
 800c500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c504:	4770      	bx	lr

0800c506 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c506:	b580      	push	{r7, lr}
 800c508:	b086      	sub	sp, #24
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	60f8      	str	r0, [r7, #12]
 800c50e:	60b9      	str	r1, [r7, #8]
 800c510:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c512:	2300      	movs	r3, #0
 800c514:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c51a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c520:	2b00      	cmp	r3, #0
 800c522:	d10d      	bne.n	800c540 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d14d      	bne.n	800c5c8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	689b      	ldr	r3, [r3, #8]
 800c530:	4618      	mov	r0, r3
 800c532:	f000 ffc9 	bl	800d4c8 <xTaskPriorityDisinherit>
 800c536:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	2200      	movs	r2, #0
 800c53c:	609a      	str	r2, [r3, #8]
 800c53e:	e043      	b.n	800c5c8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d119      	bne.n	800c57a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	6858      	ldr	r0, [r3, #4]
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c54e:	461a      	mov	r2, r3
 800c550:	68b9      	ldr	r1, [r7, #8]
 800c552:	f019 fe39 	bl	80261c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	685a      	ldr	r2, [r3, #4]
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c55e:	441a      	add	r2, r3
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	685a      	ldr	r2, [r3, #4]
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	689b      	ldr	r3, [r3, #8]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d32b      	bcc.n	800c5c8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681a      	ldr	r2, [r3, #0]
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	605a      	str	r2, [r3, #4]
 800c578:	e026      	b.n	800c5c8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	68d8      	ldr	r0, [r3, #12]
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c582:	461a      	mov	r2, r3
 800c584:	68b9      	ldr	r1, [r7, #8]
 800c586:	f019 fe1f 	bl	80261c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	68da      	ldr	r2, [r3, #12]
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c592:	425b      	negs	r3, r3
 800c594:	441a      	add	r2, r3
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	68da      	ldr	r2, [r3, #12]
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d207      	bcs.n	800c5b6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	689a      	ldr	r2, [r3, #8]
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ae:	425b      	negs	r3, r3
 800c5b0:	441a      	add	r2, r3
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2b02      	cmp	r3, #2
 800c5ba:	d105      	bne.n	800c5c8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d002      	beq.n	800c5c8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	3b01      	subs	r3, #1
 800c5c6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	1c5a      	adds	r2, r3, #1
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c5d0:	697b      	ldr	r3, [r7, #20]
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3718      	adds	r7, #24
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}

0800c5da <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c5da:	b580      	push	{r7, lr}
 800c5dc:	b082      	sub	sp, #8
 800c5de:	af00      	add	r7, sp, #0
 800c5e0:	6078      	str	r0, [r7, #4]
 800c5e2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d018      	beq.n	800c61e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	68da      	ldr	r2, [r3, #12]
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5f4:	441a      	add	r2, r3
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	68da      	ldr	r2, [r3, #12]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	689b      	ldr	r3, [r3, #8]
 800c602:	429a      	cmp	r2, r3
 800c604:	d303      	bcc.n	800c60e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681a      	ldr	r2, [r3, #0]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	68d9      	ldr	r1, [r3, #12]
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c616:	461a      	mov	r2, r3
 800c618:	6838      	ldr	r0, [r7, #0]
 800c61a:	f019 fdd5 	bl	80261c8 <memcpy>
	}
}
 800c61e:	bf00      	nop
 800c620:	3708      	adds	r7, #8
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}

0800c626 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c626:	b580      	push	{r7, lr}
 800c628:	b084      	sub	sp, #16
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c62e:	f001 fa09 	bl	800da44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c638:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c63a:	e011      	b.n	800c660 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c640:	2b00      	cmp	r3, #0
 800c642:	d012      	beq.n	800c66a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	3324      	adds	r3, #36	; 0x24
 800c648:	4618      	mov	r0, r3
 800c64a:	f000 fce9 	bl	800d020 <xTaskRemoveFromEventList>
 800c64e:	4603      	mov	r3, r0
 800c650:	2b00      	cmp	r3, #0
 800c652:	d001      	beq.n	800c658 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c654:	f000 fdbe 	bl	800d1d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c658:	7bfb      	ldrb	r3, [r7, #15]
 800c65a:	3b01      	subs	r3, #1
 800c65c:	b2db      	uxtb	r3, r3
 800c65e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c660:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c664:	2b00      	cmp	r3, #0
 800c666:	dce9      	bgt.n	800c63c <prvUnlockQueue+0x16>
 800c668:	e000      	b.n	800c66c <prvUnlockQueue+0x46>
					break;
 800c66a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	22ff      	movs	r2, #255	; 0xff
 800c670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c674:	f001 fa16 	bl	800daa4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c678:	f001 f9e4 	bl	800da44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c682:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c684:	e011      	b.n	800c6aa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	691b      	ldr	r3, [r3, #16]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d012      	beq.n	800c6b4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	3310      	adds	r3, #16
 800c692:	4618      	mov	r0, r3
 800c694:	f000 fcc4 	bl	800d020 <xTaskRemoveFromEventList>
 800c698:	4603      	mov	r3, r0
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d001      	beq.n	800c6a2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c69e:	f000 fd99 	bl	800d1d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c6a2:	7bbb      	ldrb	r3, [r7, #14]
 800c6a4:	3b01      	subs	r3, #1
 800c6a6:	b2db      	uxtb	r3, r3
 800c6a8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c6aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	dce9      	bgt.n	800c686 <prvUnlockQueue+0x60>
 800c6b2:	e000      	b.n	800c6b6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c6b4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	22ff      	movs	r2, #255	; 0xff
 800c6ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c6be:	f001 f9f1 	bl	800daa4 <vPortExitCritical>
}
 800c6c2:	bf00      	nop
 800c6c4:	3710      	adds	r7, #16
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}

0800c6ca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c6ca:	b580      	push	{r7, lr}
 800c6cc:	b084      	sub	sp, #16
 800c6ce:	af00      	add	r7, sp, #0
 800c6d0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c6d2:	f001 f9b7 	bl	800da44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d102      	bne.n	800c6e4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c6de:	2301      	movs	r3, #1
 800c6e0:	60fb      	str	r3, [r7, #12]
 800c6e2:	e001      	b.n	800c6e8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c6e8:	f001 f9dc 	bl	800daa4 <vPortExitCritical>

	return xReturn;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3710      	adds	r7, #16
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}

0800c6f6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c6f6:	b580      	push	{r7, lr}
 800c6f8:	b084      	sub	sp, #16
 800c6fa:	af00      	add	r7, sp, #0
 800c6fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c6fe:	f001 f9a1 	bl	800da44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d102      	bne.n	800c714 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c70e:	2301      	movs	r3, #1
 800c710:	60fb      	str	r3, [r7, #12]
 800c712:	e001      	b.n	800c718 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c714:	2300      	movs	r3, #0
 800c716:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c718:	f001 f9c4 	bl	800daa4 <vPortExitCritical>

	return xReturn;
 800c71c:	68fb      	ldr	r3, [r7, #12]
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3710      	adds	r7, #16
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
	...

0800c728 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c728:	b480      	push	{r7}
 800c72a:	b085      	sub	sp, #20
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c730:	2300      	movs	r3, #0
 800c732:	60fb      	str	r3, [r7, #12]
 800c734:	e016      	b.n	800c764 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c736:	4a10      	ldr	r2, [pc, #64]	; (800c778 <vQueueUnregisterQueue+0x50>)
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	00db      	lsls	r3, r3, #3
 800c73c:	4413      	add	r3, r2
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	687a      	ldr	r2, [r7, #4]
 800c742:	429a      	cmp	r2, r3
 800c744:	d10b      	bne.n	800c75e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c746:	4a0c      	ldr	r2, [pc, #48]	; (800c778 <vQueueUnregisterQueue+0x50>)
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	2100      	movs	r1, #0
 800c74c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c750:	4a09      	ldr	r2, [pc, #36]	; (800c778 <vQueueUnregisterQueue+0x50>)
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	00db      	lsls	r3, r3, #3
 800c756:	4413      	add	r3, r2
 800c758:	2200      	movs	r2, #0
 800c75a:	605a      	str	r2, [r3, #4]
				break;
 800c75c:	e006      	b.n	800c76c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	3301      	adds	r3, #1
 800c762:	60fb      	str	r3, [r7, #12]
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	2b07      	cmp	r3, #7
 800c768:	d9e5      	bls.n	800c736 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c76a:	bf00      	nop
 800c76c:	bf00      	nop
 800c76e:	3714      	adds	r7, #20
 800c770:	46bd      	mov	sp, r7
 800c772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c776:	4770      	bx	lr
 800c778:	240053b8 	.word	0x240053b8

0800c77c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b08e      	sub	sp, #56	; 0x38
 800c780:	af04      	add	r7, sp, #16
 800c782:	60f8      	str	r0, [r7, #12]
 800c784:	60b9      	str	r1, [r7, #8]
 800c786:	607a      	str	r2, [r7, #4]
 800c788:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c78a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d10a      	bne.n	800c7a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c794:	f383 8811 	msr	BASEPRI, r3
 800c798:	f3bf 8f6f 	isb	sy
 800c79c:	f3bf 8f4f 	dsb	sy
 800c7a0:	623b      	str	r3, [r7, #32]
}
 800c7a2:	bf00      	nop
 800c7a4:	e7fe      	b.n	800c7a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d10a      	bne.n	800c7c2 <xTaskCreateStatic+0x46>
	__asm volatile
 800c7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b0:	f383 8811 	msr	BASEPRI, r3
 800c7b4:	f3bf 8f6f 	isb	sy
 800c7b8:	f3bf 8f4f 	dsb	sy
 800c7bc:	61fb      	str	r3, [r7, #28]
}
 800c7be:	bf00      	nop
 800c7c0:	e7fe      	b.n	800c7c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c7c2:	23b4      	movs	r3, #180	; 0xb4
 800c7c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	2bb4      	cmp	r3, #180	; 0xb4
 800c7ca:	d00a      	beq.n	800c7e2 <xTaskCreateStatic+0x66>
	__asm volatile
 800c7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d0:	f383 8811 	msr	BASEPRI, r3
 800c7d4:	f3bf 8f6f 	isb	sy
 800c7d8:	f3bf 8f4f 	dsb	sy
 800c7dc:	61bb      	str	r3, [r7, #24]
}
 800c7de:	bf00      	nop
 800c7e0:	e7fe      	b.n	800c7e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c7e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d01e      	beq.n	800c828 <xTaskCreateStatic+0xac>
 800c7ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d01b      	beq.n	800c828 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7fc:	2202      	movs	r2, #2
 800c7fe:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c802:	2300      	movs	r3, #0
 800c804:	9303      	str	r3, [sp, #12]
 800c806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c808:	9302      	str	r3, [sp, #8]
 800c80a:	f107 0314 	add.w	r3, r7, #20
 800c80e:	9301      	str	r3, [sp, #4]
 800c810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c812:	9300      	str	r3, [sp, #0]
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	687a      	ldr	r2, [r7, #4]
 800c818:	68b9      	ldr	r1, [r7, #8]
 800c81a:	68f8      	ldr	r0, [r7, #12]
 800c81c:	f000 f850 	bl	800c8c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c820:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c822:	f000 f8eb 	bl	800c9fc <prvAddNewTaskToReadyList>
 800c826:	e001      	b.n	800c82c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c828:	2300      	movs	r3, #0
 800c82a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c82c:	697b      	ldr	r3, [r7, #20]
	}
 800c82e:	4618      	mov	r0, r3
 800c830:	3728      	adds	r7, #40	; 0x28
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}

0800c836 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c836:	b580      	push	{r7, lr}
 800c838:	b08c      	sub	sp, #48	; 0x30
 800c83a:	af04      	add	r7, sp, #16
 800c83c:	60f8      	str	r0, [r7, #12]
 800c83e:	60b9      	str	r1, [r7, #8]
 800c840:	603b      	str	r3, [r7, #0]
 800c842:	4613      	mov	r3, r2
 800c844:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c846:	88fb      	ldrh	r3, [r7, #6]
 800c848:	009b      	lsls	r3, r3, #2
 800c84a:	4618      	mov	r0, r3
 800c84c:	f001 fa1c 	bl	800dc88 <pvPortMalloc>
 800c850:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d00e      	beq.n	800c876 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c858:	20b4      	movs	r0, #180	; 0xb4
 800c85a:	f001 fa15 	bl	800dc88 <pvPortMalloc>
 800c85e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c860:	69fb      	ldr	r3, [r7, #28]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d003      	beq.n	800c86e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c866:	69fb      	ldr	r3, [r7, #28]
 800c868:	697a      	ldr	r2, [r7, #20]
 800c86a:	631a      	str	r2, [r3, #48]	; 0x30
 800c86c:	e005      	b.n	800c87a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c86e:	6978      	ldr	r0, [r7, #20]
 800c870:	f001 fad6 	bl	800de20 <vPortFree>
 800c874:	e001      	b.n	800c87a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c876:	2300      	movs	r3, #0
 800c878:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c87a:	69fb      	ldr	r3, [r7, #28]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d017      	beq.n	800c8b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c880:	69fb      	ldr	r3, [r7, #28]
 800c882:	2200      	movs	r2, #0
 800c884:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c888:	88fa      	ldrh	r2, [r7, #6]
 800c88a:	2300      	movs	r3, #0
 800c88c:	9303      	str	r3, [sp, #12]
 800c88e:	69fb      	ldr	r3, [r7, #28]
 800c890:	9302      	str	r3, [sp, #8]
 800c892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c894:	9301      	str	r3, [sp, #4]
 800c896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c898:	9300      	str	r3, [sp, #0]
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	68b9      	ldr	r1, [r7, #8]
 800c89e:	68f8      	ldr	r0, [r7, #12]
 800c8a0:	f000 f80e 	bl	800c8c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c8a4:	69f8      	ldr	r0, [r7, #28]
 800c8a6:	f000 f8a9 	bl	800c9fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	61bb      	str	r3, [r7, #24]
 800c8ae:	e002      	b.n	800c8b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c8b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c8b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c8b6:	69bb      	ldr	r3, [r7, #24]
	}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3720      	adds	r7, #32
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}

0800c8c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b088      	sub	sp, #32
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	60f8      	str	r0, [r7, #12]
 800c8c8:	60b9      	str	r1, [r7, #8]
 800c8ca:	607a      	str	r2, [r7, #4]
 800c8cc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c8d2:	6879      	ldr	r1, [r7, #4]
 800c8d4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c8d8:	440b      	add	r3, r1
 800c8da:	009b      	lsls	r3, r3, #2
 800c8dc:	4413      	add	r3, r2
 800c8de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c8e0:	69bb      	ldr	r3, [r7, #24]
 800c8e2:	f023 0307 	bic.w	r3, r3, #7
 800c8e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c8e8:	69bb      	ldr	r3, [r7, #24]
 800c8ea:	f003 0307 	and.w	r3, r3, #7
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d00a      	beq.n	800c908 <prvInitialiseNewTask+0x48>
	__asm volatile
 800c8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f6:	f383 8811 	msr	BASEPRI, r3
 800c8fa:	f3bf 8f6f 	isb	sy
 800c8fe:	f3bf 8f4f 	dsb	sy
 800c902:	617b      	str	r3, [r7, #20]
}
 800c904:	bf00      	nop
 800c906:	e7fe      	b.n	800c906 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d01f      	beq.n	800c94e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c90e:	2300      	movs	r3, #0
 800c910:	61fb      	str	r3, [r7, #28]
 800c912:	e012      	b.n	800c93a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c914:	68ba      	ldr	r2, [r7, #8]
 800c916:	69fb      	ldr	r3, [r7, #28]
 800c918:	4413      	add	r3, r2
 800c91a:	7819      	ldrb	r1, [r3, #0]
 800c91c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c91e:	69fb      	ldr	r3, [r7, #28]
 800c920:	4413      	add	r3, r2
 800c922:	3334      	adds	r3, #52	; 0x34
 800c924:	460a      	mov	r2, r1
 800c926:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c928:	68ba      	ldr	r2, [r7, #8]
 800c92a:	69fb      	ldr	r3, [r7, #28]
 800c92c:	4413      	add	r3, r2
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d006      	beq.n	800c942 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c934:	69fb      	ldr	r3, [r7, #28]
 800c936:	3301      	adds	r3, #1
 800c938:	61fb      	str	r3, [r7, #28]
 800c93a:	69fb      	ldr	r3, [r7, #28]
 800c93c:	2b0f      	cmp	r3, #15
 800c93e:	d9e9      	bls.n	800c914 <prvInitialiseNewTask+0x54>
 800c940:	e000      	b.n	800c944 <prvInitialiseNewTask+0x84>
			{
				break;
 800c942:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c946:	2200      	movs	r2, #0
 800c948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c94c:	e003      	b.n	800c956 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c950:	2200      	movs	r2, #0
 800c952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c958:	2b06      	cmp	r3, #6
 800c95a:	d901      	bls.n	800c960 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c95c:	2306      	movs	r3, #6
 800c95e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c964:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c968:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c96a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c96e:	2200      	movs	r2, #0
 800c970:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c974:	3304      	adds	r3, #4
 800c976:	4618      	mov	r0, r3
 800c978:	f7fe fea1 	bl	800b6be <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c97e:	3318      	adds	r3, #24
 800c980:	4618      	mov	r0, r3
 800c982:	f7fe fe9c 	bl	800b6be <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c98a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c98e:	f1c3 0207 	rsb	r2, r3, #7
 800c992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c994:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c99a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c99e:	2200      	movs	r2, #0
 800c9a0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ae:	334c      	adds	r3, #76	; 0x4c
 800c9b0:	2260      	movs	r2, #96	; 0x60
 800c9b2:	2100      	movs	r1, #0
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f019 fc2f 	bl	8026218 <memset>
 800c9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9bc:	4a0c      	ldr	r2, [pc, #48]	; (800c9f0 <prvInitialiseNewTask+0x130>)
 800c9be:	651a      	str	r2, [r3, #80]	; 0x50
 800c9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c2:	4a0c      	ldr	r2, [pc, #48]	; (800c9f4 <prvInitialiseNewTask+0x134>)
 800c9c4:	655a      	str	r2, [r3, #84]	; 0x54
 800c9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c8:	4a0b      	ldr	r2, [pc, #44]	; (800c9f8 <prvInitialiseNewTask+0x138>)
 800c9ca:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c9cc:	683a      	ldr	r2, [r7, #0]
 800c9ce:	68f9      	ldr	r1, [r7, #12]
 800c9d0:	69b8      	ldr	r0, [r7, #24]
 800c9d2:	f000 ff07 	bl	800d7e4 <pxPortInitialiseStack>
 800c9d6:	4602      	mov	r2, r0
 800c9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9da:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d002      	beq.n	800c9e8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c9e8:	bf00      	nop
 800c9ea:	3720      	adds	r7, #32
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}
 800c9f0:	0802eda4 	.word	0x0802eda4
 800c9f4:	0802edc4 	.word	0x0802edc4
 800c9f8:	0802ed84 	.word	0x0802ed84

0800c9fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b082      	sub	sp, #8
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ca04:	f001 f81e 	bl	800da44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ca08:	4b2a      	ldr	r3, [pc, #168]	; (800cab4 <prvAddNewTaskToReadyList+0xb8>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	3301      	adds	r3, #1
 800ca0e:	4a29      	ldr	r2, [pc, #164]	; (800cab4 <prvAddNewTaskToReadyList+0xb8>)
 800ca10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ca12:	4b29      	ldr	r3, [pc, #164]	; (800cab8 <prvAddNewTaskToReadyList+0xbc>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d109      	bne.n	800ca2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ca1a:	4a27      	ldr	r2, [pc, #156]	; (800cab8 <prvAddNewTaskToReadyList+0xbc>)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ca20:	4b24      	ldr	r3, [pc, #144]	; (800cab4 <prvAddNewTaskToReadyList+0xb8>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	d110      	bne.n	800ca4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ca28:	f000 fbf8 	bl	800d21c <prvInitialiseTaskLists>
 800ca2c:	e00d      	b.n	800ca4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ca2e:	4b23      	ldr	r3, [pc, #140]	; (800cabc <prvAddNewTaskToReadyList+0xc0>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d109      	bne.n	800ca4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ca36:	4b20      	ldr	r3, [pc, #128]	; (800cab8 <prvAddNewTaskToReadyList+0xbc>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d802      	bhi.n	800ca4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ca44:	4a1c      	ldr	r2, [pc, #112]	; (800cab8 <prvAddNewTaskToReadyList+0xbc>)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ca4a:	4b1d      	ldr	r3, [pc, #116]	; (800cac0 <prvAddNewTaskToReadyList+0xc4>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	3301      	adds	r3, #1
 800ca50:	4a1b      	ldr	r2, [pc, #108]	; (800cac0 <prvAddNewTaskToReadyList+0xc4>)
 800ca52:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca58:	2201      	movs	r2, #1
 800ca5a:	409a      	lsls	r2, r3
 800ca5c:	4b19      	ldr	r3, [pc, #100]	; (800cac4 <prvAddNewTaskToReadyList+0xc8>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	4313      	orrs	r3, r2
 800ca62:	4a18      	ldr	r2, [pc, #96]	; (800cac4 <prvAddNewTaskToReadyList+0xc8>)
 800ca64:	6013      	str	r3, [r2, #0]
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca6a:	4613      	mov	r3, r2
 800ca6c:	009b      	lsls	r3, r3, #2
 800ca6e:	4413      	add	r3, r2
 800ca70:	009b      	lsls	r3, r3, #2
 800ca72:	4a15      	ldr	r2, [pc, #84]	; (800cac8 <prvAddNewTaskToReadyList+0xcc>)
 800ca74:	441a      	add	r2, r3
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	3304      	adds	r3, #4
 800ca7a:	4619      	mov	r1, r3
 800ca7c:	4610      	mov	r0, r2
 800ca7e:	f7fe fe2b 	bl	800b6d8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ca82:	f001 f80f 	bl	800daa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ca86:	4b0d      	ldr	r3, [pc, #52]	; (800cabc <prvAddNewTaskToReadyList+0xc0>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d00e      	beq.n	800caac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ca8e:	4b0a      	ldr	r3, [pc, #40]	; (800cab8 <prvAddNewTaskToReadyList+0xbc>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	d207      	bcs.n	800caac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ca9c:	4b0b      	ldr	r3, [pc, #44]	; (800cacc <prvAddNewTaskToReadyList+0xd0>)
 800ca9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caa2:	601a      	str	r2, [r3, #0]
 800caa4:	f3bf 8f4f 	dsb	sy
 800caa8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800caac:	bf00      	nop
 800caae:	3708      	adds	r7, #8
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}
 800cab4:	24000cd0 	.word	0x24000cd0
 800cab8:	24000bd0 	.word	0x24000bd0
 800cabc:	24000cdc 	.word	0x24000cdc
 800cac0:	24000cec 	.word	0x24000cec
 800cac4:	24000cd8 	.word	0x24000cd8
 800cac8:	24000bd4 	.word	0x24000bd4
 800cacc:	e000ed04 	.word	0xe000ed04

0800cad0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b084      	sub	sp, #16
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cad8:	2300      	movs	r3, #0
 800cada:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d017      	beq.n	800cb12 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cae2:	4b13      	ldr	r3, [pc, #76]	; (800cb30 <vTaskDelay+0x60>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d00a      	beq.n	800cb00 <vTaskDelay+0x30>
	__asm volatile
 800caea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caee:	f383 8811 	msr	BASEPRI, r3
 800caf2:	f3bf 8f6f 	isb	sy
 800caf6:	f3bf 8f4f 	dsb	sy
 800cafa:	60bb      	str	r3, [r7, #8]
}
 800cafc:	bf00      	nop
 800cafe:	e7fe      	b.n	800cafe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cb00:	f000 f884 	bl	800cc0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cb04:	2100      	movs	r1, #0
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f000 fe06 	bl	800d718 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cb0c:	f000 f88c 	bl	800cc28 <xTaskResumeAll>
 800cb10:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d107      	bne.n	800cb28 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cb18:	4b06      	ldr	r3, [pc, #24]	; (800cb34 <vTaskDelay+0x64>)
 800cb1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb1e:	601a      	str	r2, [r3, #0]
 800cb20:	f3bf 8f4f 	dsb	sy
 800cb24:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cb28:	bf00      	nop
 800cb2a:	3710      	adds	r7, #16
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}
 800cb30:	24000cf8 	.word	0x24000cf8
 800cb34:	e000ed04 	.word	0xe000ed04

0800cb38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b08a      	sub	sp, #40	; 0x28
 800cb3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cb42:	2300      	movs	r3, #0
 800cb44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cb46:	463a      	mov	r2, r7
 800cb48:	1d39      	adds	r1, r7, #4
 800cb4a:	f107 0308 	add.w	r3, r7, #8
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f7f3 fe94 	bl	800087c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cb54:	6839      	ldr	r1, [r7, #0]
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	68ba      	ldr	r2, [r7, #8]
 800cb5a:	9202      	str	r2, [sp, #8]
 800cb5c:	9301      	str	r3, [sp, #4]
 800cb5e:	2300      	movs	r3, #0
 800cb60:	9300      	str	r3, [sp, #0]
 800cb62:	2300      	movs	r3, #0
 800cb64:	460a      	mov	r2, r1
 800cb66:	4921      	ldr	r1, [pc, #132]	; (800cbec <vTaskStartScheduler+0xb4>)
 800cb68:	4821      	ldr	r0, [pc, #132]	; (800cbf0 <vTaskStartScheduler+0xb8>)
 800cb6a:	f7ff fe07 	bl	800c77c <xTaskCreateStatic>
 800cb6e:	4603      	mov	r3, r0
 800cb70:	4a20      	ldr	r2, [pc, #128]	; (800cbf4 <vTaskStartScheduler+0xbc>)
 800cb72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cb74:	4b1f      	ldr	r3, [pc, #124]	; (800cbf4 <vTaskStartScheduler+0xbc>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d002      	beq.n	800cb82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	617b      	str	r3, [r7, #20]
 800cb80:	e001      	b.n	800cb86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cb82:	2300      	movs	r3, #0
 800cb84:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	2b01      	cmp	r3, #1
 800cb8a:	d11b      	bne.n	800cbc4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800cb8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb90:	f383 8811 	msr	BASEPRI, r3
 800cb94:	f3bf 8f6f 	isb	sy
 800cb98:	f3bf 8f4f 	dsb	sy
 800cb9c:	613b      	str	r3, [r7, #16]
}
 800cb9e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cba0:	4b15      	ldr	r3, [pc, #84]	; (800cbf8 <vTaskStartScheduler+0xc0>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	334c      	adds	r3, #76	; 0x4c
 800cba6:	4a15      	ldr	r2, [pc, #84]	; (800cbfc <vTaskStartScheduler+0xc4>)
 800cba8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cbaa:	4b15      	ldr	r3, [pc, #84]	; (800cc00 <vTaskStartScheduler+0xc8>)
 800cbac:	f04f 32ff 	mov.w	r2, #4294967295
 800cbb0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cbb2:	4b14      	ldr	r3, [pc, #80]	; (800cc04 <vTaskStartScheduler+0xcc>)
 800cbb4:	2201      	movs	r2, #1
 800cbb6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cbb8:	4b13      	ldr	r3, [pc, #76]	; (800cc08 <vTaskStartScheduler+0xd0>)
 800cbba:	2200      	movs	r2, #0
 800cbbc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cbbe:	f000 fe9f 	bl	800d900 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cbc2:	e00e      	b.n	800cbe2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbca:	d10a      	bne.n	800cbe2 <vTaskStartScheduler+0xaa>
	__asm volatile
 800cbcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd0:	f383 8811 	msr	BASEPRI, r3
 800cbd4:	f3bf 8f6f 	isb	sy
 800cbd8:	f3bf 8f4f 	dsb	sy
 800cbdc:	60fb      	str	r3, [r7, #12]
}
 800cbde:	bf00      	nop
 800cbe0:	e7fe      	b.n	800cbe0 <vTaskStartScheduler+0xa8>
}
 800cbe2:	bf00      	nop
 800cbe4:	3718      	adds	r7, #24
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	bf00      	nop
 800cbec:	0802a474 	.word	0x0802a474
 800cbf0:	0800d1ed 	.word	0x0800d1ed
 800cbf4:	24000cf4 	.word	0x24000cf4
 800cbf8:	24000bd0 	.word	0x24000bd0
 800cbfc:	240000bc 	.word	0x240000bc
 800cc00:	24000cf0 	.word	0x24000cf0
 800cc04:	24000cdc 	.word	0x24000cdc
 800cc08:	24000cd4 	.word	0x24000cd4

0800cc0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cc10:	4b04      	ldr	r3, [pc, #16]	; (800cc24 <vTaskSuspendAll+0x18>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	3301      	adds	r3, #1
 800cc16:	4a03      	ldr	r2, [pc, #12]	; (800cc24 <vTaskSuspendAll+0x18>)
 800cc18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cc1a:	bf00      	nop
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc22:	4770      	bx	lr
 800cc24:	24000cf8 	.word	0x24000cf8

0800cc28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b084      	sub	sp, #16
 800cc2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cc32:	2300      	movs	r3, #0
 800cc34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cc36:	4b41      	ldr	r3, [pc, #260]	; (800cd3c <xTaskResumeAll+0x114>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d10a      	bne.n	800cc54 <xTaskResumeAll+0x2c>
	__asm volatile
 800cc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc42:	f383 8811 	msr	BASEPRI, r3
 800cc46:	f3bf 8f6f 	isb	sy
 800cc4a:	f3bf 8f4f 	dsb	sy
 800cc4e:	603b      	str	r3, [r7, #0]
}
 800cc50:	bf00      	nop
 800cc52:	e7fe      	b.n	800cc52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cc54:	f000 fef6 	bl	800da44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cc58:	4b38      	ldr	r3, [pc, #224]	; (800cd3c <xTaskResumeAll+0x114>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	3b01      	subs	r3, #1
 800cc5e:	4a37      	ldr	r2, [pc, #220]	; (800cd3c <xTaskResumeAll+0x114>)
 800cc60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc62:	4b36      	ldr	r3, [pc, #216]	; (800cd3c <xTaskResumeAll+0x114>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d161      	bne.n	800cd2e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cc6a:	4b35      	ldr	r3, [pc, #212]	; (800cd40 <xTaskResumeAll+0x118>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d05d      	beq.n	800cd2e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cc72:	e02e      	b.n	800ccd2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc74:	4b33      	ldr	r3, [pc, #204]	; (800cd44 <xTaskResumeAll+0x11c>)
 800cc76:	68db      	ldr	r3, [r3, #12]
 800cc78:	68db      	ldr	r3, [r3, #12]
 800cc7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	3318      	adds	r3, #24
 800cc80:	4618      	mov	r0, r3
 800cc82:	f7fe fd86 	bl	800b792 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	3304      	adds	r3, #4
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f7fe fd81 	bl	800b792 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc94:	2201      	movs	r2, #1
 800cc96:	409a      	lsls	r2, r3
 800cc98:	4b2b      	ldr	r3, [pc, #172]	; (800cd48 <xTaskResumeAll+0x120>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	4313      	orrs	r3, r2
 800cc9e:	4a2a      	ldr	r2, [pc, #168]	; (800cd48 <xTaskResumeAll+0x120>)
 800cca0:	6013      	str	r3, [r2, #0]
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cca6:	4613      	mov	r3, r2
 800cca8:	009b      	lsls	r3, r3, #2
 800ccaa:	4413      	add	r3, r2
 800ccac:	009b      	lsls	r3, r3, #2
 800ccae:	4a27      	ldr	r2, [pc, #156]	; (800cd4c <xTaskResumeAll+0x124>)
 800ccb0:	441a      	add	r2, r3
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	3304      	adds	r3, #4
 800ccb6:	4619      	mov	r1, r3
 800ccb8:	4610      	mov	r0, r2
 800ccba:	f7fe fd0d 	bl	800b6d8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccc2:	4b23      	ldr	r3, [pc, #140]	; (800cd50 <xTaskResumeAll+0x128>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	d302      	bcc.n	800ccd2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800cccc:	4b21      	ldr	r3, [pc, #132]	; (800cd54 <xTaskResumeAll+0x12c>)
 800ccce:	2201      	movs	r2, #1
 800ccd0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ccd2:	4b1c      	ldr	r3, [pc, #112]	; (800cd44 <xTaskResumeAll+0x11c>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d1cc      	bne.n	800cc74 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d001      	beq.n	800cce4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cce0:	f000 fb3e 	bl	800d360 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cce4:	4b1c      	ldr	r3, [pc, #112]	; (800cd58 <xTaskResumeAll+0x130>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d010      	beq.n	800cd12 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ccf0:	f000 f858 	bl	800cda4 <xTaskIncrementTick>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d002      	beq.n	800cd00 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ccfa:	4b16      	ldr	r3, [pc, #88]	; (800cd54 <xTaskResumeAll+0x12c>)
 800ccfc:	2201      	movs	r2, #1
 800ccfe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	3b01      	subs	r3, #1
 800cd04:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d1f1      	bne.n	800ccf0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800cd0c:	4b12      	ldr	r3, [pc, #72]	; (800cd58 <xTaskResumeAll+0x130>)
 800cd0e:	2200      	movs	r2, #0
 800cd10:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cd12:	4b10      	ldr	r3, [pc, #64]	; (800cd54 <xTaskResumeAll+0x12c>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d009      	beq.n	800cd2e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cd1e:	4b0f      	ldr	r3, [pc, #60]	; (800cd5c <xTaskResumeAll+0x134>)
 800cd20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd24:	601a      	str	r2, [r3, #0]
 800cd26:	f3bf 8f4f 	dsb	sy
 800cd2a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cd2e:	f000 feb9 	bl	800daa4 <vPortExitCritical>

	return xAlreadyYielded;
 800cd32:	68bb      	ldr	r3, [r7, #8]
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3710      	adds	r7, #16
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}
 800cd3c:	24000cf8 	.word	0x24000cf8
 800cd40:	24000cd0 	.word	0x24000cd0
 800cd44:	24000c90 	.word	0x24000c90
 800cd48:	24000cd8 	.word	0x24000cd8
 800cd4c:	24000bd4 	.word	0x24000bd4
 800cd50:	24000bd0 	.word	0x24000bd0
 800cd54:	24000ce4 	.word	0x24000ce4
 800cd58:	24000ce0 	.word	0x24000ce0
 800cd5c:	e000ed04 	.word	0xe000ed04

0800cd60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cd60:	b480      	push	{r7}
 800cd62:	b083      	sub	sp, #12
 800cd64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cd66:	4b05      	ldr	r3, [pc, #20]	; (800cd7c <xTaskGetTickCount+0x1c>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cd6c:	687b      	ldr	r3, [r7, #4]
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	370c      	adds	r7, #12
 800cd72:	46bd      	mov	sp, r7
 800cd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd78:	4770      	bx	lr
 800cd7a:	bf00      	nop
 800cd7c:	24000cd4 	.word	0x24000cd4

0800cd80 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b082      	sub	sp, #8
 800cd84:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cd86:	f000 ff3f 	bl	800dc08 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800cd8e:	4b04      	ldr	r3, [pc, #16]	; (800cda0 <xTaskGetTickCountFromISR+0x20>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cd94:	683b      	ldr	r3, [r7, #0]
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3708      	adds	r7, #8
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
 800cd9e:	bf00      	nop
 800cda0:	24000cd4 	.word	0x24000cd4

0800cda4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b086      	sub	sp, #24
 800cda8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cdae:	4b4e      	ldr	r3, [pc, #312]	; (800cee8 <xTaskIncrementTick+0x144>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	f040 808e 	bne.w	800ced4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cdb8:	4b4c      	ldr	r3, [pc, #304]	; (800ceec <xTaskIncrementTick+0x148>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	3301      	adds	r3, #1
 800cdbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cdc0:	4a4a      	ldr	r2, [pc, #296]	; (800ceec <xTaskIncrementTick+0x148>)
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d120      	bne.n	800ce0e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cdcc:	4b48      	ldr	r3, [pc, #288]	; (800cef0 <xTaskIncrementTick+0x14c>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d00a      	beq.n	800cdec <xTaskIncrementTick+0x48>
	__asm volatile
 800cdd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdda:	f383 8811 	msr	BASEPRI, r3
 800cdde:	f3bf 8f6f 	isb	sy
 800cde2:	f3bf 8f4f 	dsb	sy
 800cde6:	603b      	str	r3, [r7, #0]
}
 800cde8:	bf00      	nop
 800cdea:	e7fe      	b.n	800cdea <xTaskIncrementTick+0x46>
 800cdec:	4b40      	ldr	r3, [pc, #256]	; (800cef0 <xTaskIncrementTick+0x14c>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	60fb      	str	r3, [r7, #12]
 800cdf2:	4b40      	ldr	r3, [pc, #256]	; (800cef4 <xTaskIncrementTick+0x150>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	4a3e      	ldr	r2, [pc, #248]	; (800cef0 <xTaskIncrementTick+0x14c>)
 800cdf8:	6013      	str	r3, [r2, #0]
 800cdfa:	4a3e      	ldr	r2, [pc, #248]	; (800cef4 <xTaskIncrementTick+0x150>)
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	6013      	str	r3, [r2, #0]
 800ce00:	4b3d      	ldr	r3, [pc, #244]	; (800cef8 <xTaskIncrementTick+0x154>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	3301      	adds	r3, #1
 800ce06:	4a3c      	ldr	r2, [pc, #240]	; (800cef8 <xTaskIncrementTick+0x154>)
 800ce08:	6013      	str	r3, [r2, #0]
 800ce0a:	f000 faa9 	bl	800d360 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ce0e:	4b3b      	ldr	r3, [pc, #236]	; (800cefc <xTaskIncrementTick+0x158>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	693a      	ldr	r2, [r7, #16]
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d348      	bcc.n	800ceaa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ce18:	4b35      	ldr	r3, [pc, #212]	; (800cef0 <xTaskIncrementTick+0x14c>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d104      	bne.n	800ce2c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce22:	4b36      	ldr	r3, [pc, #216]	; (800cefc <xTaskIncrementTick+0x158>)
 800ce24:	f04f 32ff 	mov.w	r2, #4294967295
 800ce28:	601a      	str	r2, [r3, #0]
					break;
 800ce2a:	e03e      	b.n	800ceaa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce2c:	4b30      	ldr	r3, [pc, #192]	; (800cef0 <xTaskIncrementTick+0x14c>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	68db      	ldr	r3, [r3, #12]
 800ce32:	68db      	ldr	r3, [r3, #12]
 800ce34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	685b      	ldr	r3, [r3, #4]
 800ce3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ce3c:	693a      	ldr	r2, [r7, #16]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d203      	bcs.n	800ce4c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ce44:	4a2d      	ldr	r2, [pc, #180]	; (800cefc <xTaskIncrementTick+0x158>)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ce4a:	e02e      	b.n	800ceaa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	3304      	adds	r3, #4
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7fe fc9e 	bl	800b792 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d004      	beq.n	800ce68 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	3318      	adds	r3, #24
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7fe fc95 	bl	800b792 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	409a      	lsls	r2, r3
 800ce70:	4b23      	ldr	r3, [pc, #140]	; (800cf00 <xTaskIncrementTick+0x15c>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	4313      	orrs	r3, r2
 800ce76:	4a22      	ldr	r2, [pc, #136]	; (800cf00 <xTaskIncrementTick+0x15c>)
 800ce78:	6013      	str	r3, [r2, #0]
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce7e:	4613      	mov	r3, r2
 800ce80:	009b      	lsls	r3, r3, #2
 800ce82:	4413      	add	r3, r2
 800ce84:	009b      	lsls	r3, r3, #2
 800ce86:	4a1f      	ldr	r2, [pc, #124]	; (800cf04 <xTaskIncrementTick+0x160>)
 800ce88:	441a      	add	r2, r3
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	3304      	adds	r3, #4
 800ce8e:	4619      	mov	r1, r3
 800ce90:	4610      	mov	r0, r2
 800ce92:	f7fe fc21 	bl	800b6d8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce9a:	4b1b      	ldr	r3, [pc, #108]	; (800cf08 <xTaskIncrementTick+0x164>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d3b9      	bcc.n	800ce18 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cea4:	2301      	movs	r3, #1
 800cea6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cea8:	e7b6      	b.n	800ce18 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ceaa:	4b17      	ldr	r3, [pc, #92]	; (800cf08 <xTaskIncrementTick+0x164>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceb0:	4914      	ldr	r1, [pc, #80]	; (800cf04 <xTaskIncrementTick+0x160>)
 800ceb2:	4613      	mov	r3, r2
 800ceb4:	009b      	lsls	r3, r3, #2
 800ceb6:	4413      	add	r3, r2
 800ceb8:	009b      	lsls	r3, r3, #2
 800ceba:	440b      	add	r3, r1
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	2b01      	cmp	r3, #1
 800cec0:	d901      	bls.n	800cec6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800cec2:	2301      	movs	r3, #1
 800cec4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cec6:	4b11      	ldr	r3, [pc, #68]	; (800cf0c <xTaskIncrementTick+0x168>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d007      	beq.n	800cede <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800cece:	2301      	movs	r3, #1
 800ced0:	617b      	str	r3, [r7, #20]
 800ced2:	e004      	b.n	800cede <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ced4:	4b0e      	ldr	r3, [pc, #56]	; (800cf10 <xTaskIncrementTick+0x16c>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	3301      	adds	r3, #1
 800ceda:	4a0d      	ldr	r2, [pc, #52]	; (800cf10 <xTaskIncrementTick+0x16c>)
 800cedc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cede:	697b      	ldr	r3, [r7, #20]
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3718      	adds	r7, #24
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}
 800cee8:	24000cf8 	.word	0x24000cf8
 800ceec:	24000cd4 	.word	0x24000cd4
 800cef0:	24000c88 	.word	0x24000c88
 800cef4:	24000c8c 	.word	0x24000c8c
 800cef8:	24000ce8 	.word	0x24000ce8
 800cefc:	24000cf0 	.word	0x24000cf0
 800cf00:	24000cd8 	.word	0x24000cd8
 800cf04:	24000bd4 	.word	0x24000bd4
 800cf08:	24000bd0 	.word	0x24000bd0
 800cf0c:	24000ce4 	.word	0x24000ce4
 800cf10:	24000ce0 	.word	0x24000ce0

0800cf14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cf14:	b480      	push	{r7}
 800cf16:	b087      	sub	sp, #28
 800cf18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cf1a:	4b29      	ldr	r3, [pc, #164]	; (800cfc0 <vTaskSwitchContext+0xac>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d003      	beq.n	800cf2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cf22:	4b28      	ldr	r3, [pc, #160]	; (800cfc4 <vTaskSwitchContext+0xb0>)
 800cf24:	2201      	movs	r2, #1
 800cf26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cf28:	e044      	b.n	800cfb4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800cf2a:	4b26      	ldr	r3, [pc, #152]	; (800cfc4 <vTaskSwitchContext+0xb0>)
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf30:	4b25      	ldr	r3, [pc, #148]	; (800cfc8 <vTaskSwitchContext+0xb4>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	fab3 f383 	clz	r3, r3
 800cf3c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cf3e:	7afb      	ldrb	r3, [r7, #11]
 800cf40:	f1c3 031f 	rsb	r3, r3, #31
 800cf44:	617b      	str	r3, [r7, #20]
 800cf46:	4921      	ldr	r1, [pc, #132]	; (800cfcc <vTaskSwitchContext+0xb8>)
 800cf48:	697a      	ldr	r2, [r7, #20]
 800cf4a:	4613      	mov	r3, r2
 800cf4c:	009b      	lsls	r3, r3, #2
 800cf4e:	4413      	add	r3, r2
 800cf50:	009b      	lsls	r3, r3, #2
 800cf52:	440b      	add	r3, r1
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d10a      	bne.n	800cf70 <vTaskSwitchContext+0x5c>
	__asm volatile
 800cf5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf5e:	f383 8811 	msr	BASEPRI, r3
 800cf62:	f3bf 8f6f 	isb	sy
 800cf66:	f3bf 8f4f 	dsb	sy
 800cf6a:	607b      	str	r3, [r7, #4]
}
 800cf6c:	bf00      	nop
 800cf6e:	e7fe      	b.n	800cf6e <vTaskSwitchContext+0x5a>
 800cf70:	697a      	ldr	r2, [r7, #20]
 800cf72:	4613      	mov	r3, r2
 800cf74:	009b      	lsls	r3, r3, #2
 800cf76:	4413      	add	r3, r2
 800cf78:	009b      	lsls	r3, r3, #2
 800cf7a:	4a14      	ldr	r2, [pc, #80]	; (800cfcc <vTaskSwitchContext+0xb8>)
 800cf7c:	4413      	add	r3, r2
 800cf7e:	613b      	str	r3, [r7, #16]
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	685b      	ldr	r3, [r3, #4]
 800cf84:	685a      	ldr	r2, [r3, #4]
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	605a      	str	r2, [r3, #4]
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	685a      	ldr	r2, [r3, #4]
 800cf8e:	693b      	ldr	r3, [r7, #16]
 800cf90:	3308      	adds	r3, #8
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d104      	bne.n	800cfa0 <vTaskSwitchContext+0x8c>
 800cf96:	693b      	ldr	r3, [r7, #16]
 800cf98:	685b      	ldr	r3, [r3, #4]
 800cf9a:	685a      	ldr	r2, [r3, #4]
 800cf9c:	693b      	ldr	r3, [r7, #16]
 800cf9e:	605a      	str	r2, [r3, #4]
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	685b      	ldr	r3, [r3, #4]
 800cfa4:	68db      	ldr	r3, [r3, #12]
 800cfa6:	4a0a      	ldr	r2, [pc, #40]	; (800cfd0 <vTaskSwitchContext+0xbc>)
 800cfa8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cfaa:	4b09      	ldr	r3, [pc, #36]	; (800cfd0 <vTaskSwitchContext+0xbc>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	334c      	adds	r3, #76	; 0x4c
 800cfb0:	4a08      	ldr	r2, [pc, #32]	; (800cfd4 <vTaskSwitchContext+0xc0>)
 800cfb2:	6013      	str	r3, [r2, #0]
}
 800cfb4:	bf00      	nop
 800cfb6:	371c      	adds	r7, #28
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbe:	4770      	bx	lr
 800cfc0:	24000cf8 	.word	0x24000cf8
 800cfc4:	24000ce4 	.word	0x24000ce4
 800cfc8:	24000cd8 	.word	0x24000cd8
 800cfcc:	24000bd4 	.word	0x24000bd4
 800cfd0:	24000bd0 	.word	0x24000bd0
 800cfd4:	240000bc 	.word	0x240000bc

0800cfd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b084      	sub	sp, #16
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d10a      	bne.n	800cffe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cfe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfec:	f383 8811 	msr	BASEPRI, r3
 800cff0:	f3bf 8f6f 	isb	sy
 800cff4:	f3bf 8f4f 	dsb	sy
 800cff8:	60fb      	str	r3, [r7, #12]
}
 800cffa:	bf00      	nop
 800cffc:	e7fe      	b.n	800cffc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cffe:	4b07      	ldr	r3, [pc, #28]	; (800d01c <vTaskPlaceOnEventList+0x44>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	3318      	adds	r3, #24
 800d004:	4619      	mov	r1, r3
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f7fe fb8a 	bl	800b720 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d00c:	2101      	movs	r1, #1
 800d00e:	6838      	ldr	r0, [r7, #0]
 800d010:	f000 fb82 	bl	800d718 <prvAddCurrentTaskToDelayedList>
}
 800d014:	bf00      	nop
 800d016:	3710      	adds	r7, #16
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}
 800d01c:	24000bd0 	.word	0x24000bd0

0800d020 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b086      	sub	sp, #24
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	68db      	ldr	r3, [r3, #12]
 800d02c:	68db      	ldr	r3, [r3, #12]
 800d02e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d10a      	bne.n	800d04c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d03a:	f383 8811 	msr	BASEPRI, r3
 800d03e:	f3bf 8f6f 	isb	sy
 800d042:	f3bf 8f4f 	dsb	sy
 800d046:	60fb      	str	r3, [r7, #12]
}
 800d048:	bf00      	nop
 800d04a:	e7fe      	b.n	800d04a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d04c:	693b      	ldr	r3, [r7, #16]
 800d04e:	3318      	adds	r3, #24
 800d050:	4618      	mov	r0, r3
 800d052:	f7fe fb9e 	bl	800b792 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d056:	4b1d      	ldr	r3, [pc, #116]	; (800d0cc <xTaskRemoveFromEventList+0xac>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d11c      	bne.n	800d098 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d05e:	693b      	ldr	r3, [r7, #16]
 800d060:	3304      	adds	r3, #4
 800d062:	4618      	mov	r0, r3
 800d064:	f7fe fb95 	bl	800b792 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d06c:	2201      	movs	r2, #1
 800d06e:	409a      	lsls	r2, r3
 800d070:	4b17      	ldr	r3, [pc, #92]	; (800d0d0 <xTaskRemoveFromEventList+0xb0>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4313      	orrs	r3, r2
 800d076:	4a16      	ldr	r2, [pc, #88]	; (800d0d0 <xTaskRemoveFromEventList+0xb0>)
 800d078:	6013      	str	r3, [r2, #0]
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d07e:	4613      	mov	r3, r2
 800d080:	009b      	lsls	r3, r3, #2
 800d082:	4413      	add	r3, r2
 800d084:	009b      	lsls	r3, r3, #2
 800d086:	4a13      	ldr	r2, [pc, #76]	; (800d0d4 <xTaskRemoveFromEventList+0xb4>)
 800d088:	441a      	add	r2, r3
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	3304      	adds	r3, #4
 800d08e:	4619      	mov	r1, r3
 800d090:	4610      	mov	r0, r2
 800d092:	f7fe fb21 	bl	800b6d8 <vListInsertEnd>
 800d096:	e005      	b.n	800d0a4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	3318      	adds	r3, #24
 800d09c:	4619      	mov	r1, r3
 800d09e:	480e      	ldr	r0, [pc, #56]	; (800d0d8 <xTaskRemoveFromEventList+0xb8>)
 800d0a0:	f7fe fb1a 	bl	800b6d8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0a8:	4b0c      	ldr	r3, [pc, #48]	; (800d0dc <xTaskRemoveFromEventList+0xbc>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d905      	bls.n	800d0be <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d0b6:	4b0a      	ldr	r3, [pc, #40]	; (800d0e0 <xTaskRemoveFromEventList+0xc0>)
 800d0b8:	2201      	movs	r2, #1
 800d0ba:	601a      	str	r2, [r3, #0]
 800d0bc:	e001      	b.n	800d0c2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d0c2:	697b      	ldr	r3, [r7, #20]
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	3718      	adds	r7, #24
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}
 800d0cc:	24000cf8 	.word	0x24000cf8
 800d0d0:	24000cd8 	.word	0x24000cd8
 800d0d4:	24000bd4 	.word	0x24000bd4
 800d0d8:	24000c90 	.word	0x24000c90
 800d0dc:	24000bd0 	.word	0x24000bd0
 800d0e0:	24000ce4 	.word	0x24000ce4

0800d0e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b083      	sub	sp, #12
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d0ec:	4b06      	ldr	r3, [pc, #24]	; (800d108 <vTaskInternalSetTimeOutState+0x24>)
 800d0ee:	681a      	ldr	r2, [r3, #0]
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d0f4:	4b05      	ldr	r3, [pc, #20]	; (800d10c <vTaskInternalSetTimeOutState+0x28>)
 800d0f6:	681a      	ldr	r2, [r3, #0]
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	605a      	str	r2, [r3, #4]
}
 800d0fc:	bf00      	nop
 800d0fe:	370c      	adds	r7, #12
 800d100:	46bd      	mov	sp, r7
 800d102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d106:	4770      	bx	lr
 800d108:	24000ce8 	.word	0x24000ce8
 800d10c:	24000cd4 	.word	0x24000cd4

0800d110 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b088      	sub	sp, #32
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
 800d118:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d10a      	bne.n	800d136 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d124:	f383 8811 	msr	BASEPRI, r3
 800d128:	f3bf 8f6f 	isb	sy
 800d12c:	f3bf 8f4f 	dsb	sy
 800d130:	613b      	str	r3, [r7, #16]
}
 800d132:	bf00      	nop
 800d134:	e7fe      	b.n	800d134 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d10a      	bne.n	800d152 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d140:	f383 8811 	msr	BASEPRI, r3
 800d144:	f3bf 8f6f 	isb	sy
 800d148:	f3bf 8f4f 	dsb	sy
 800d14c:	60fb      	str	r3, [r7, #12]
}
 800d14e:	bf00      	nop
 800d150:	e7fe      	b.n	800d150 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d152:	f000 fc77 	bl	800da44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d156:	4b1d      	ldr	r3, [pc, #116]	; (800d1cc <xTaskCheckForTimeOut+0xbc>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	685b      	ldr	r3, [r3, #4]
 800d160:	69ba      	ldr	r2, [r7, #24]
 800d162:	1ad3      	subs	r3, r2, r3
 800d164:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d16e:	d102      	bne.n	800d176 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d170:	2300      	movs	r3, #0
 800d172:	61fb      	str	r3, [r7, #28]
 800d174:	e023      	b.n	800d1be <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681a      	ldr	r2, [r3, #0]
 800d17a:	4b15      	ldr	r3, [pc, #84]	; (800d1d0 <xTaskCheckForTimeOut+0xc0>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	429a      	cmp	r2, r3
 800d180:	d007      	beq.n	800d192 <xTaskCheckForTimeOut+0x82>
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	685b      	ldr	r3, [r3, #4]
 800d186:	69ba      	ldr	r2, [r7, #24]
 800d188:	429a      	cmp	r2, r3
 800d18a:	d302      	bcc.n	800d192 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d18c:	2301      	movs	r3, #1
 800d18e:	61fb      	str	r3, [r7, #28]
 800d190:	e015      	b.n	800d1be <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	697a      	ldr	r2, [r7, #20]
 800d198:	429a      	cmp	r2, r3
 800d19a:	d20b      	bcs.n	800d1b4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	681a      	ldr	r2, [r3, #0]
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	1ad2      	subs	r2, r2, r3
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f7ff ff9b 	bl	800d0e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	61fb      	str	r3, [r7, #28]
 800d1b2:	e004      	b.n	800d1be <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d1be:	f000 fc71 	bl	800daa4 <vPortExitCritical>

	return xReturn;
 800d1c2:	69fb      	ldr	r3, [r7, #28]
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3720      	adds	r7, #32
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}
 800d1cc:	24000cd4 	.word	0x24000cd4
 800d1d0:	24000ce8 	.word	0x24000ce8

0800d1d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d1d8:	4b03      	ldr	r3, [pc, #12]	; (800d1e8 <vTaskMissedYield+0x14>)
 800d1da:	2201      	movs	r2, #1
 800d1dc:	601a      	str	r2, [r3, #0]
}
 800d1de:	bf00      	nop
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e6:	4770      	bx	lr
 800d1e8:	24000ce4 	.word	0x24000ce4

0800d1ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b082      	sub	sp, #8
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d1f4:	f000 f852 	bl	800d29c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d1f8:	4b06      	ldr	r3, [pc, #24]	; (800d214 <prvIdleTask+0x28>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	2b01      	cmp	r3, #1
 800d1fe:	d9f9      	bls.n	800d1f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d200:	4b05      	ldr	r3, [pc, #20]	; (800d218 <prvIdleTask+0x2c>)
 800d202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d206:	601a      	str	r2, [r3, #0]
 800d208:	f3bf 8f4f 	dsb	sy
 800d20c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d210:	e7f0      	b.n	800d1f4 <prvIdleTask+0x8>
 800d212:	bf00      	nop
 800d214:	24000bd4 	.word	0x24000bd4
 800d218:	e000ed04 	.word	0xe000ed04

0800d21c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b082      	sub	sp, #8
 800d220:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d222:	2300      	movs	r3, #0
 800d224:	607b      	str	r3, [r7, #4]
 800d226:	e00c      	b.n	800d242 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d228:	687a      	ldr	r2, [r7, #4]
 800d22a:	4613      	mov	r3, r2
 800d22c:	009b      	lsls	r3, r3, #2
 800d22e:	4413      	add	r3, r2
 800d230:	009b      	lsls	r3, r3, #2
 800d232:	4a12      	ldr	r2, [pc, #72]	; (800d27c <prvInitialiseTaskLists+0x60>)
 800d234:	4413      	add	r3, r2
 800d236:	4618      	mov	r0, r3
 800d238:	f7fe fa21 	bl	800b67e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	3301      	adds	r3, #1
 800d240:	607b      	str	r3, [r7, #4]
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2b06      	cmp	r3, #6
 800d246:	d9ef      	bls.n	800d228 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d248:	480d      	ldr	r0, [pc, #52]	; (800d280 <prvInitialiseTaskLists+0x64>)
 800d24a:	f7fe fa18 	bl	800b67e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d24e:	480d      	ldr	r0, [pc, #52]	; (800d284 <prvInitialiseTaskLists+0x68>)
 800d250:	f7fe fa15 	bl	800b67e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d254:	480c      	ldr	r0, [pc, #48]	; (800d288 <prvInitialiseTaskLists+0x6c>)
 800d256:	f7fe fa12 	bl	800b67e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d25a:	480c      	ldr	r0, [pc, #48]	; (800d28c <prvInitialiseTaskLists+0x70>)
 800d25c:	f7fe fa0f 	bl	800b67e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d260:	480b      	ldr	r0, [pc, #44]	; (800d290 <prvInitialiseTaskLists+0x74>)
 800d262:	f7fe fa0c 	bl	800b67e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d266:	4b0b      	ldr	r3, [pc, #44]	; (800d294 <prvInitialiseTaskLists+0x78>)
 800d268:	4a05      	ldr	r2, [pc, #20]	; (800d280 <prvInitialiseTaskLists+0x64>)
 800d26a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d26c:	4b0a      	ldr	r3, [pc, #40]	; (800d298 <prvInitialiseTaskLists+0x7c>)
 800d26e:	4a05      	ldr	r2, [pc, #20]	; (800d284 <prvInitialiseTaskLists+0x68>)
 800d270:	601a      	str	r2, [r3, #0]
}
 800d272:	bf00      	nop
 800d274:	3708      	adds	r7, #8
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}
 800d27a:	bf00      	nop
 800d27c:	24000bd4 	.word	0x24000bd4
 800d280:	24000c60 	.word	0x24000c60
 800d284:	24000c74 	.word	0x24000c74
 800d288:	24000c90 	.word	0x24000c90
 800d28c:	24000ca4 	.word	0x24000ca4
 800d290:	24000cbc 	.word	0x24000cbc
 800d294:	24000c88 	.word	0x24000c88
 800d298:	24000c8c 	.word	0x24000c8c

0800d29c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b082      	sub	sp, #8
 800d2a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d2a2:	e019      	b.n	800d2d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d2a4:	f000 fbce 	bl	800da44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2a8:	4b10      	ldr	r3, [pc, #64]	; (800d2ec <prvCheckTasksWaitingTermination+0x50>)
 800d2aa:	68db      	ldr	r3, [r3, #12]
 800d2ac:	68db      	ldr	r3, [r3, #12]
 800d2ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	3304      	adds	r3, #4
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f7fe fa6c 	bl	800b792 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d2ba:	4b0d      	ldr	r3, [pc, #52]	; (800d2f0 <prvCheckTasksWaitingTermination+0x54>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	3b01      	subs	r3, #1
 800d2c0:	4a0b      	ldr	r2, [pc, #44]	; (800d2f0 <prvCheckTasksWaitingTermination+0x54>)
 800d2c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d2c4:	4b0b      	ldr	r3, [pc, #44]	; (800d2f4 <prvCheckTasksWaitingTermination+0x58>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	3b01      	subs	r3, #1
 800d2ca:	4a0a      	ldr	r2, [pc, #40]	; (800d2f4 <prvCheckTasksWaitingTermination+0x58>)
 800d2cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d2ce:	f000 fbe9 	bl	800daa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f000 f810 	bl	800d2f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d2d8:	4b06      	ldr	r3, [pc, #24]	; (800d2f4 <prvCheckTasksWaitingTermination+0x58>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d1e1      	bne.n	800d2a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d2e0:	bf00      	nop
 800d2e2:	bf00      	nop
 800d2e4:	3708      	adds	r7, #8
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}
 800d2ea:	bf00      	nop
 800d2ec:	24000ca4 	.word	0x24000ca4
 800d2f0:	24000cd0 	.word	0x24000cd0
 800d2f4:	24000cb8 	.word	0x24000cb8

0800d2f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b084      	sub	sp, #16
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	334c      	adds	r3, #76	; 0x4c
 800d304:	4618      	mov	r0, r3
 800d306:	f019 fec1 	bl	802708c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d310:	2b00      	cmp	r3, #0
 800d312:	d108      	bne.n	800d326 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d318:	4618      	mov	r0, r3
 800d31a:	f000 fd81 	bl	800de20 <vPortFree>
				vPortFree( pxTCB );
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f000 fd7e 	bl	800de20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d324:	e018      	b.n	800d358 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d103      	bne.n	800d338 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f000 fd75 	bl	800de20 <vPortFree>
	}
 800d336:	e00f      	b.n	800d358 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d33e:	2b02      	cmp	r3, #2
 800d340:	d00a      	beq.n	800d358 <prvDeleteTCB+0x60>
	__asm volatile
 800d342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d346:	f383 8811 	msr	BASEPRI, r3
 800d34a:	f3bf 8f6f 	isb	sy
 800d34e:	f3bf 8f4f 	dsb	sy
 800d352:	60fb      	str	r3, [r7, #12]
}
 800d354:	bf00      	nop
 800d356:	e7fe      	b.n	800d356 <prvDeleteTCB+0x5e>
	}
 800d358:	bf00      	nop
 800d35a:	3710      	adds	r7, #16
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}

0800d360 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d360:	b480      	push	{r7}
 800d362:	b083      	sub	sp, #12
 800d364:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d366:	4b0c      	ldr	r3, [pc, #48]	; (800d398 <prvResetNextTaskUnblockTime+0x38>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d104      	bne.n	800d37a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d370:	4b0a      	ldr	r3, [pc, #40]	; (800d39c <prvResetNextTaskUnblockTime+0x3c>)
 800d372:	f04f 32ff 	mov.w	r2, #4294967295
 800d376:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d378:	e008      	b.n	800d38c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d37a:	4b07      	ldr	r3, [pc, #28]	; (800d398 <prvResetNextTaskUnblockTime+0x38>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	68db      	ldr	r3, [r3, #12]
 800d380:	68db      	ldr	r3, [r3, #12]
 800d382:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	685b      	ldr	r3, [r3, #4]
 800d388:	4a04      	ldr	r2, [pc, #16]	; (800d39c <prvResetNextTaskUnblockTime+0x3c>)
 800d38a:	6013      	str	r3, [r2, #0]
}
 800d38c:	bf00      	nop
 800d38e:	370c      	adds	r7, #12
 800d390:	46bd      	mov	sp, r7
 800d392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d396:	4770      	bx	lr
 800d398:	24000c88 	.word	0x24000c88
 800d39c:	24000cf0 	.word	0x24000cf0

0800d3a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d3a0:	b480      	push	{r7}
 800d3a2:	b083      	sub	sp, #12
 800d3a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d3a6:	4b0b      	ldr	r3, [pc, #44]	; (800d3d4 <xTaskGetSchedulerState+0x34>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d102      	bne.n	800d3b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	607b      	str	r3, [r7, #4]
 800d3b2:	e008      	b.n	800d3c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3b4:	4b08      	ldr	r3, [pc, #32]	; (800d3d8 <xTaskGetSchedulerState+0x38>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d102      	bne.n	800d3c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d3bc:	2302      	movs	r3, #2
 800d3be:	607b      	str	r3, [r7, #4]
 800d3c0:	e001      	b.n	800d3c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d3c6:	687b      	ldr	r3, [r7, #4]
	}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	370c      	adds	r7, #12
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d2:	4770      	bx	lr
 800d3d4:	24000cdc 	.word	0x24000cdc
 800d3d8:	24000cf8 	.word	0x24000cf8

0800d3dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b084      	sub	sp, #16
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d05e      	beq.n	800d4b0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3f6:	4b31      	ldr	r3, [pc, #196]	; (800d4bc <xTaskPriorityInherit+0xe0>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3fc:	429a      	cmp	r2, r3
 800d3fe:	d24e      	bcs.n	800d49e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	699b      	ldr	r3, [r3, #24]
 800d404:	2b00      	cmp	r3, #0
 800d406:	db06      	blt.n	800d416 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d408:	4b2c      	ldr	r3, [pc, #176]	; (800d4bc <xTaskPriorityInherit+0xe0>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d40e:	f1c3 0207 	rsb	r2, r3, #7
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	6959      	ldr	r1, [r3, #20]
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d41e:	4613      	mov	r3, r2
 800d420:	009b      	lsls	r3, r3, #2
 800d422:	4413      	add	r3, r2
 800d424:	009b      	lsls	r3, r3, #2
 800d426:	4a26      	ldr	r2, [pc, #152]	; (800d4c0 <xTaskPriorityInherit+0xe4>)
 800d428:	4413      	add	r3, r2
 800d42a:	4299      	cmp	r1, r3
 800d42c:	d12f      	bne.n	800d48e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	3304      	adds	r3, #4
 800d432:	4618      	mov	r0, r3
 800d434:	f7fe f9ad 	bl	800b792 <uxListRemove>
 800d438:	4603      	mov	r3, r0
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d10a      	bne.n	800d454 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d442:	2201      	movs	r2, #1
 800d444:	fa02 f303 	lsl.w	r3, r2, r3
 800d448:	43da      	mvns	r2, r3
 800d44a:	4b1e      	ldr	r3, [pc, #120]	; (800d4c4 <xTaskPriorityInherit+0xe8>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	4013      	ands	r3, r2
 800d450:	4a1c      	ldr	r2, [pc, #112]	; (800d4c4 <xTaskPriorityInherit+0xe8>)
 800d452:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d454:	4b19      	ldr	r3, [pc, #100]	; (800d4bc <xTaskPriorityInherit+0xe0>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d462:	2201      	movs	r2, #1
 800d464:	409a      	lsls	r2, r3
 800d466:	4b17      	ldr	r3, [pc, #92]	; (800d4c4 <xTaskPriorityInherit+0xe8>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	4313      	orrs	r3, r2
 800d46c:	4a15      	ldr	r2, [pc, #84]	; (800d4c4 <xTaskPriorityInherit+0xe8>)
 800d46e:	6013      	str	r3, [r2, #0]
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d474:	4613      	mov	r3, r2
 800d476:	009b      	lsls	r3, r3, #2
 800d478:	4413      	add	r3, r2
 800d47a:	009b      	lsls	r3, r3, #2
 800d47c:	4a10      	ldr	r2, [pc, #64]	; (800d4c0 <xTaskPriorityInherit+0xe4>)
 800d47e:	441a      	add	r2, r3
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	3304      	adds	r3, #4
 800d484:	4619      	mov	r1, r3
 800d486:	4610      	mov	r0, r2
 800d488:	f7fe f926 	bl	800b6d8 <vListInsertEnd>
 800d48c:	e004      	b.n	800d498 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d48e:	4b0b      	ldr	r3, [pc, #44]	; (800d4bc <xTaskPriorityInherit+0xe0>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d498:	2301      	movs	r3, #1
 800d49a:	60fb      	str	r3, [r7, #12]
 800d49c:	e008      	b.n	800d4b0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d4a2:	4b06      	ldr	r3, [pc, #24]	; (800d4bc <xTaskPriorityInherit+0xe0>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4a8:	429a      	cmp	r2, r3
 800d4aa:	d201      	bcs.n	800d4b0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
	}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	3710      	adds	r7, #16
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}
 800d4ba:	bf00      	nop
 800d4bc:	24000bd0 	.word	0x24000bd0
 800d4c0:	24000bd4 	.word	0x24000bd4
 800d4c4:	24000cd8 	.word	0x24000cd8

0800d4c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b086      	sub	sp, #24
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d06e      	beq.n	800d5bc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d4de:	4b3a      	ldr	r3, [pc, #232]	; (800d5c8 <xTaskPriorityDisinherit+0x100>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	693a      	ldr	r2, [r7, #16]
 800d4e4:	429a      	cmp	r2, r3
 800d4e6:	d00a      	beq.n	800d4fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ec:	f383 8811 	msr	BASEPRI, r3
 800d4f0:	f3bf 8f6f 	isb	sy
 800d4f4:	f3bf 8f4f 	dsb	sy
 800d4f8:	60fb      	str	r3, [r7, #12]
}
 800d4fa:	bf00      	nop
 800d4fc:	e7fe      	b.n	800d4fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d4fe:	693b      	ldr	r3, [r7, #16]
 800d500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d502:	2b00      	cmp	r3, #0
 800d504:	d10a      	bne.n	800d51c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d50a:	f383 8811 	msr	BASEPRI, r3
 800d50e:	f3bf 8f6f 	isb	sy
 800d512:	f3bf 8f4f 	dsb	sy
 800d516:	60bb      	str	r3, [r7, #8]
}
 800d518:	bf00      	nop
 800d51a:	e7fe      	b.n	800d51a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d51c:	693b      	ldr	r3, [r7, #16]
 800d51e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d520:	1e5a      	subs	r2, r3, #1
 800d522:	693b      	ldr	r3, [r7, #16]
 800d524:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d52a:	693b      	ldr	r3, [r7, #16]
 800d52c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d52e:	429a      	cmp	r2, r3
 800d530:	d044      	beq.n	800d5bc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d536:	2b00      	cmp	r3, #0
 800d538:	d140      	bne.n	800d5bc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d53a:	693b      	ldr	r3, [r7, #16]
 800d53c:	3304      	adds	r3, #4
 800d53e:	4618      	mov	r0, r3
 800d540:	f7fe f927 	bl	800b792 <uxListRemove>
 800d544:	4603      	mov	r3, r0
 800d546:	2b00      	cmp	r3, #0
 800d548:	d115      	bne.n	800d576 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d54a:	693b      	ldr	r3, [r7, #16]
 800d54c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d54e:	491f      	ldr	r1, [pc, #124]	; (800d5cc <xTaskPriorityDisinherit+0x104>)
 800d550:	4613      	mov	r3, r2
 800d552:	009b      	lsls	r3, r3, #2
 800d554:	4413      	add	r3, r2
 800d556:	009b      	lsls	r3, r3, #2
 800d558:	440b      	add	r3, r1
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d10a      	bne.n	800d576 <xTaskPriorityDisinherit+0xae>
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d564:	2201      	movs	r2, #1
 800d566:	fa02 f303 	lsl.w	r3, r2, r3
 800d56a:	43da      	mvns	r2, r3
 800d56c:	4b18      	ldr	r3, [pc, #96]	; (800d5d0 <xTaskPriorityDisinherit+0x108>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	4013      	ands	r3, r2
 800d572:	4a17      	ldr	r2, [pc, #92]	; (800d5d0 <xTaskPriorityDisinherit+0x108>)
 800d574:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d57a:	693b      	ldr	r3, [r7, #16]
 800d57c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d57e:	693b      	ldr	r3, [r7, #16]
 800d580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d582:	f1c3 0207 	rsb	r2, r3, #7
 800d586:	693b      	ldr	r3, [r7, #16]
 800d588:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d58e:	2201      	movs	r2, #1
 800d590:	409a      	lsls	r2, r3
 800d592:	4b0f      	ldr	r3, [pc, #60]	; (800d5d0 <xTaskPriorityDisinherit+0x108>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	4313      	orrs	r3, r2
 800d598:	4a0d      	ldr	r2, [pc, #52]	; (800d5d0 <xTaskPriorityDisinherit+0x108>)
 800d59a:	6013      	str	r3, [r2, #0]
 800d59c:	693b      	ldr	r3, [r7, #16]
 800d59e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5a0:	4613      	mov	r3, r2
 800d5a2:	009b      	lsls	r3, r3, #2
 800d5a4:	4413      	add	r3, r2
 800d5a6:	009b      	lsls	r3, r3, #2
 800d5a8:	4a08      	ldr	r2, [pc, #32]	; (800d5cc <xTaskPriorityDisinherit+0x104>)
 800d5aa:	441a      	add	r2, r3
 800d5ac:	693b      	ldr	r3, [r7, #16]
 800d5ae:	3304      	adds	r3, #4
 800d5b0:	4619      	mov	r1, r3
 800d5b2:	4610      	mov	r0, r2
 800d5b4:	f7fe f890 	bl	800b6d8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d5bc:	697b      	ldr	r3, [r7, #20]
	}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	3718      	adds	r7, #24
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}
 800d5c6:	bf00      	nop
 800d5c8:	24000bd0 	.word	0x24000bd0
 800d5cc:	24000bd4 	.word	0x24000bd4
 800d5d0:	24000cd8 	.word	0x24000cd8

0800d5d4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b088      	sub	sp, #32
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d077      	beq.n	800d6dc <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d5ec:	69bb      	ldr	r3, [r7, #24]
 800d5ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d10a      	bne.n	800d60a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5f8:	f383 8811 	msr	BASEPRI, r3
 800d5fc:	f3bf 8f6f 	isb	sy
 800d600:	f3bf 8f4f 	dsb	sy
 800d604:	60fb      	str	r3, [r7, #12]
}
 800d606:	bf00      	nop
 800d608:	e7fe      	b.n	800d608 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d60a:	69bb      	ldr	r3, [r7, #24]
 800d60c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d60e:	683a      	ldr	r2, [r7, #0]
 800d610:	429a      	cmp	r2, r3
 800d612:	d902      	bls.n	800d61a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	61fb      	str	r3, [r7, #28]
 800d618:	e002      	b.n	800d620 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d61a:	69bb      	ldr	r3, [r7, #24]
 800d61c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d61e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d620:	69bb      	ldr	r3, [r7, #24]
 800d622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d624:	69fa      	ldr	r2, [r7, #28]
 800d626:	429a      	cmp	r2, r3
 800d628:	d058      	beq.n	800d6dc <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d62a:	69bb      	ldr	r3, [r7, #24]
 800d62c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d62e:	697a      	ldr	r2, [r7, #20]
 800d630:	429a      	cmp	r2, r3
 800d632:	d153      	bne.n	800d6dc <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d634:	4b2b      	ldr	r3, [pc, #172]	; (800d6e4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	69ba      	ldr	r2, [r7, #24]
 800d63a:	429a      	cmp	r2, r3
 800d63c:	d10a      	bne.n	800d654 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d642:	f383 8811 	msr	BASEPRI, r3
 800d646:	f3bf 8f6f 	isb	sy
 800d64a:	f3bf 8f4f 	dsb	sy
 800d64e:	60bb      	str	r3, [r7, #8]
}
 800d650:	bf00      	nop
 800d652:	e7fe      	b.n	800d652 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d654:	69bb      	ldr	r3, [r7, #24]
 800d656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d658:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d65a:	69bb      	ldr	r3, [r7, #24]
 800d65c:	69fa      	ldr	r2, [r7, #28]
 800d65e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d660:	69bb      	ldr	r3, [r7, #24]
 800d662:	699b      	ldr	r3, [r3, #24]
 800d664:	2b00      	cmp	r3, #0
 800d666:	db04      	blt.n	800d672 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d668:	69fb      	ldr	r3, [r7, #28]
 800d66a:	f1c3 0207 	rsb	r2, r3, #7
 800d66e:	69bb      	ldr	r3, [r7, #24]
 800d670:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d672:	69bb      	ldr	r3, [r7, #24]
 800d674:	6959      	ldr	r1, [r3, #20]
 800d676:	693a      	ldr	r2, [r7, #16]
 800d678:	4613      	mov	r3, r2
 800d67a:	009b      	lsls	r3, r3, #2
 800d67c:	4413      	add	r3, r2
 800d67e:	009b      	lsls	r3, r3, #2
 800d680:	4a19      	ldr	r2, [pc, #100]	; (800d6e8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d682:	4413      	add	r3, r2
 800d684:	4299      	cmp	r1, r3
 800d686:	d129      	bne.n	800d6dc <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d688:	69bb      	ldr	r3, [r7, #24]
 800d68a:	3304      	adds	r3, #4
 800d68c:	4618      	mov	r0, r3
 800d68e:	f7fe f880 	bl	800b792 <uxListRemove>
 800d692:	4603      	mov	r3, r0
 800d694:	2b00      	cmp	r3, #0
 800d696:	d10a      	bne.n	800d6ae <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800d698:	69bb      	ldr	r3, [r7, #24]
 800d69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d69c:	2201      	movs	r2, #1
 800d69e:	fa02 f303 	lsl.w	r3, r2, r3
 800d6a2:	43da      	mvns	r2, r3
 800d6a4:	4b11      	ldr	r3, [pc, #68]	; (800d6ec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	4013      	ands	r3, r2
 800d6aa:	4a10      	ldr	r2, [pc, #64]	; (800d6ec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d6ac:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d6ae:	69bb      	ldr	r3, [r7, #24]
 800d6b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	409a      	lsls	r2, r3
 800d6b6:	4b0d      	ldr	r3, [pc, #52]	; (800d6ec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	4313      	orrs	r3, r2
 800d6bc:	4a0b      	ldr	r2, [pc, #44]	; (800d6ec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d6be:	6013      	str	r3, [r2, #0]
 800d6c0:	69bb      	ldr	r3, [r7, #24]
 800d6c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6c4:	4613      	mov	r3, r2
 800d6c6:	009b      	lsls	r3, r3, #2
 800d6c8:	4413      	add	r3, r2
 800d6ca:	009b      	lsls	r3, r3, #2
 800d6cc:	4a06      	ldr	r2, [pc, #24]	; (800d6e8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d6ce:	441a      	add	r2, r3
 800d6d0:	69bb      	ldr	r3, [r7, #24]
 800d6d2:	3304      	adds	r3, #4
 800d6d4:	4619      	mov	r1, r3
 800d6d6:	4610      	mov	r0, r2
 800d6d8:	f7fd fffe 	bl	800b6d8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d6dc:	bf00      	nop
 800d6de:	3720      	adds	r7, #32
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd80      	pop	{r7, pc}
 800d6e4:	24000bd0 	.word	0x24000bd0
 800d6e8:	24000bd4 	.word	0x24000bd4
 800d6ec:	24000cd8 	.word	0x24000cd8

0800d6f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d6f0:	b480      	push	{r7}
 800d6f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d6f4:	4b07      	ldr	r3, [pc, #28]	; (800d714 <pvTaskIncrementMutexHeldCount+0x24>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d004      	beq.n	800d706 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d6fc:	4b05      	ldr	r3, [pc, #20]	; (800d714 <pvTaskIncrementMutexHeldCount+0x24>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d702:	3201      	adds	r2, #1
 800d704:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d706:	4b03      	ldr	r3, [pc, #12]	; (800d714 <pvTaskIncrementMutexHeldCount+0x24>)
 800d708:	681b      	ldr	r3, [r3, #0]
	}
 800d70a:	4618      	mov	r0, r3
 800d70c:	46bd      	mov	sp, r7
 800d70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d712:	4770      	bx	lr
 800d714:	24000bd0 	.word	0x24000bd0

0800d718 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b084      	sub	sp, #16
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
 800d720:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d722:	4b29      	ldr	r3, [pc, #164]	; (800d7c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d728:	4b28      	ldr	r3, [pc, #160]	; (800d7cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	3304      	adds	r3, #4
 800d72e:	4618      	mov	r0, r3
 800d730:	f7fe f82f 	bl	800b792 <uxListRemove>
 800d734:	4603      	mov	r3, r0
 800d736:	2b00      	cmp	r3, #0
 800d738:	d10b      	bne.n	800d752 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d73a:	4b24      	ldr	r3, [pc, #144]	; (800d7cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d740:	2201      	movs	r2, #1
 800d742:	fa02 f303 	lsl.w	r3, r2, r3
 800d746:	43da      	mvns	r2, r3
 800d748:	4b21      	ldr	r3, [pc, #132]	; (800d7d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	4013      	ands	r3, r2
 800d74e:	4a20      	ldr	r2, [pc, #128]	; (800d7d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d750:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d758:	d10a      	bne.n	800d770 <prvAddCurrentTaskToDelayedList+0x58>
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d007      	beq.n	800d770 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d760:	4b1a      	ldr	r3, [pc, #104]	; (800d7cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	3304      	adds	r3, #4
 800d766:	4619      	mov	r1, r3
 800d768:	481a      	ldr	r0, [pc, #104]	; (800d7d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d76a:	f7fd ffb5 	bl	800b6d8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d76e:	e026      	b.n	800d7be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d770:	68fa      	ldr	r2, [r7, #12]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	4413      	add	r3, r2
 800d776:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d778:	4b14      	ldr	r3, [pc, #80]	; (800d7cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	68ba      	ldr	r2, [r7, #8]
 800d77e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d780:	68ba      	ldr	r2, [r7, #8]
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	429a      	cmp	r2, r3
 800d786:	d209      	bcs.n	800d79c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d788:	4b13      	ldr	r3, [pc, #76]	; (800d7d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d78a:	681a      	ldr	r2, [r3, #0]
 800d78c:	4b0f      	ldr	r3, [pc, #60]	; (800d7cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	3304      	adds	r3, #4
 800d792:	4619      	mov	r1, r3
 800d794:	4610      	mov	r0, r2
 800d796:	f7fd ffc3 	bl	800b720 <vListInsert>
}
 800d79a:	e010      	b.n	800d7be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d79c:	4b0f      	ldr	r3, [pc, #60]	; (800d7dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800d79e:	681a      	ldr	r2, [r3, #0]
 800d7a0:	4b0a      	ldr	r3, [pc, #40]	; (800d7cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	3304      	adds	r3, #4
 800d7a6:	4619      	mov	r1, r3
 800d7a8:	4610      	mov	r0, r2
 800d7aa:	f7fd ffb9 	bl	800b720 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d7ae:	4b0c      	ldr	r3, [pc, #48]	; (800d7e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	68ba      	ldr	r2, [r7, #8]
 800d7b4:	429a      	cmp	r2, r3
 800d7b6:	d202      	bcs.n	800d7be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d7b8:	4a09      	ldr	r2, [pc, #36]	; (800d7e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	6013      	str	r3, [r2, #0]
}
 800d7be:	bf00      	nop
 800d7c0:	3710      	adds	r7, #16
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}
 800d7c6:	bf00      	nop
 800d7c8:	24000cd4 	.word	0x24000cd4
 800d7cc:	24000bd0 	.word	0x24000bd0
 800d7d0:	24000cd8 	.word	0x24000cd8
 800d7d4:	24000cbc 	.word	0x24000cbc
 800d7d8:	24000c8c 	.word	0x24000c8c
 800d7dc:	24000c88 	.word	0x24000c88
 800d7e0:	24000cf0 	.word	0x24000cf0

0800d7e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d7e4:	b480      	push	{r7}
 800d7e6:	b085      	sub	sp, #20
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	60f8      	str	r0, [r7, #12]
 800d7ec:	60b9      	str	r1, [r7, #8]
 800d7ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	3b04      	subs	r3, #4
 800d7f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d7fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	3b04      	subs	r3, #4
 800d802:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	f023 0201 	bic.w	r2, r3, #1
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	3b04      	subs	r3, #4
 800d812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d814:	4a0c      	ldr	r2, [pc, #48]	; (800d848 <pxPortInitialiseStack+0x64>)
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	3b14      	subs	r3, #20
 800d81e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d820:	687a      	ldr	r2, [r7, #4]
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	3b04      	subs	r3, #4
 800d82a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	f06f 0202 	mvn.w	r2, #2
 800d832:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	3b20      	subs	r3, #32
 800d838:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d83a:	68fb      	ldr	r3, [r7, #12]
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3714      	adds	r7, #20
 800d840:	46bd      	mov	sp, r7
 800d842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d846:	4770      	bx	lr
 800d848:	0800d84d 	.word	0x0800d84d

0800d84c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d84c:	b480      	push	{r7}
 800d84e:	b085      	sub	sp, #20
 800d850:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d852:	2300      	movs	r3, #0
 800d854:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d856:	4b12      	ldr	r3, [pc, #72]	; (800d8a0 <prvTaskExitError+0x54>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d85e:	d00a      	beq.n	800d876 <prvTaskExitError+0x2a>
	__asm volatile
 800d860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d864:	f383 8811 	msr	BASEPRI, r3
 800d868:	f3bf 8f6f 	isb	sy
 800d86c:	f3bf 8f4f 	dsb	sy
 800d870:	60fb      	str	r3, [r7, #12]
}
 800d872:	bf00      	nop
 800d874:	e7fe      	b.n	800d874 <prvTaskExitError+0x28>
	__asm volatile
 800d876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d87a:	f383 8811 	msr	BASEPRI, r3
 800d87e:	f3bf 8f6f 	isb	sy
 800d882:	f3bf 8f4f 	dsb	sy
 800d886:	60bb      	str	r3, [r7, #8]
}
 800d888:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d88a:	bf00      	nop
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d0fc      	beq.n	800d88c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d892:	bf00      	nop
 800d894:	bf00      	nop
 800d896:	3714      	adds	r7, #20
 800d898:	46bd      	mov	sp, r7
 800d89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89e:	4770      	bx	lr
 800d8a0:	24000028 	.word	0x24000028
	...

0800d8b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d8b0:	4b07      	ldr	r3, [pc, #28]	; (800d8d0 <pxCurrentTCBConst2>)
 800d8b2:	6819      	ldr	r1, [r3, #0]
 800d8b4:	6808      	ldr	r0, [r1, #0]
 800d8b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8ba:	f380 8809 	msr	PSP, r0
 800d8be:	f3bf 8f6f 	isb	sy
 800d8c2:	f04f 0000 	mov.w	r0, #0
 800d8c6:	f380 8811 	msr	BASEPRI, r0
 800d8ca:	4770      	bx	lr
 800d8cc:	f3af 8000 	nop.w

0800d8d0 <pxCurrentTCBConst2>:
 800d8d0:	24000bd0 	.word	0x24000bd0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d8d4:	bf00      	nop
 800d8d6:	bf00      	nop

0800d8d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d8d8:	4808      	ldr	r0, [pc, #32]	; (800d8fc <prvPortStartFirstTask+0x24>)
 800d8da:	6800      	ldr	r0, [r0, #0]
 800d8dc:	6800      	ldr	r0, [r0, #0]
 800d8de:	f380 8808 	msr	MSP, r0
 800d8e2:	f04f 0000 	mov.w	r0, #0
 800d8e6:	f380 8814 	msr	CONTROL, r0
 800d8ea:	b662      	cpsie	i
 800d8ec:	b661      	cpsie	f
 800d8ee:	f3bf 8f4f 	dsb	sy
 800d8f2:	f3bf 8f6f 	isb	sy
 800d8f6:	df00      	svc	0
 800d8f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d8fa:	bf00      	nop
 800d8fc:	e000ed08 	.word	0xe000ed08

0800d900 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b086      	sub	sp, #24
 800d904:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d906:	4b46      	ldr	r3, [pc, #280]	; (800da20 <xPortStartScheduler+0x120>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	4a46      	ldr	r2, [pc, #280]	; (800da24 <xPortStartScheduler+0x124>)
 800d90c:	4293      	cmp	r3, r2
 800d90e:	d10a      	bne.n	800d926 <xPortStartScheduler+0x26>
	__asm volatile
 800d910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d914:	f383 8811 	msr	BASEPRI, r3
 800d918:	f3bf 8f6f 	isb	sy
 800d91c:	f3bf 8f4f 	dsb	sy
 800d920:	613b      	str	r3, [r7, #16]
}
 800d922:	bf00      	nop
 800d924:	e7fe      	b.n	800d924 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d926:	4b3e      	ldr	r3, [pc, #248]	; (800da20 <xPortStartScheduler+0x120>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	4a3f      	ldr	r2, [pc, #252]	; (800da28 <xPortStartScheduler+0x128>)
 800d92c:	4293      	cmp	r3, r2
 800d92e:	d10a      	bne.n	800d946 <xPortStartScheduler+0x46>
	__asm volatile
 800d930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d934:	f383 8811 	msr	BASEPRI, r3
 800d938:	f3bf 8f6f 	isb	sy
 800d93c:	f3bf 8f4f 	dsb	sy
 800d940:	60fb      	str	r3, [r7, #12]
}
 800d942:	bf00      	nop
 800d944:	e7fe      	b.n	800d944 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d946:	4b39      	ldr	r3, [pc, #228]	; (800da2c <xPortStartScheduler+0x12c>)
 800d948:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	b2db      	uxtb	r3, r3
 800d950:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	22ff      	movs	r2, #255	; 0xff
 800d956:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	781b      	ldrb	r3, [r3, #0]
 800d95c:	b2db      	uxtb	r3, r3
 800d95e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d960:	78fb      	ldrb	r3, [r7, #3]
 800d962:	b2db      	uxtb	r3, r3
 800d964:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d968:	b2da      	uxtb	r2, r3
 800d96a:	4b31      	ldr	r3, [pc, #196]	; (800da30 <xPortStartScheduler+0x130>)
 800d96c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d96e:	4b31      	ldr	r3, [pc, #196]	; (800da34 <xPortStartScheduler+0x134>)
 800d970:	2207      	movs	r2, #7
 800d972:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d974:	e009      	b.n	800d98a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d976:	4b2f      	ldr	r3, [pc, #188]	; (800da34 <xPortStartScheduler+0x134>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	3b01      	subs	r3, #1
 800d97c:	4a2d      	ldr	r2, [pc, #180]	; (800da34 <xPortStartScheduler+0x134>)
 800d97e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d980:	78fb      	ldrb	r3, [r7, #3]
 800d982:	b2db      	uxtb	r3, r3
 800d984:	005b      	lsls	r3, r3, #1
 800d986:	b2db      	uxtb	r3, r3
 800d988:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d98a:	78fb      	ldrb	r3, [r7, #3]
 800d98c:	b2db      	uxtb	r3, r3
 800d98e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d992:	2b80      	cmp	r3, #128	; 0x80
 800d994:	d0ef      	beq.n	800d976 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d996:	4b27      	ldr	r3, [pc, #156]	; (800da34 <xPortStartScheduler+0x134>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f1c3 0307 	rsb	r3, r3, #7
 800d99e:	2b04      	cmp	r3, #4
 800d9a0:	d00a      	beq.n	800d9b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9a6:	f383 8811 	msr	BASEPRI, r3
 800d9aa:	f3bf 8f6f 	isb	sy
 800d9ae:	f3bf 8f4f 	dsb	sy
 800d9b2:	60bb      	str	r3, [r7, #8]
}
 800d9b4:	bf00      	nop
 800d9b6:	e7fe      	b.n	800d9b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d9b8:	4b1e      	ldr	r3, [pc, #120]	; (800da34 <xPortStartScheduler+0x134>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	021b      	lsls	r3, r3, #8
 800d9be:	4a1d      	ldr	r2, [pc, #116]	; (800da34 <xPortStartScheduler+0x134>)
 800d9c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d9c2:	4b1c      	ldr	r3, [pc, #112]	; (800da34 <xPortStartScheduler+0x134>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d9ca:	4a1a      	ldr	r2, [pc, #104]	; (800da34 <xPortStartScheduler+0x134>)
 800d9cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	b2da      	uxtb	r2, r3
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d9d6:	4b18      	ldr	r3, [pc, #96]	; (800da38 <xPortStartScheduler+0x138>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	4a17      	ldr	r2, [pc, #92]	; (800da38 <xPortStartScheduler+0x138>)
 800d9dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d9e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d9e2:	4b15      	ldr	r3, [pc, #84]	; (800da38 <xPortStartScheduler+0x138>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	4a14      	ldr	r2, [pc, #80]	; (800da38 <xPortStartScheduler+0x138>)
 800d9e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d9ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d9ee:	f000 f8dd 	bl	800dbac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d9f2:	4b12      	ldr	r3, [pc, #72]	; (800da3c <xPortStartScheduler+0x13c>)
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d9f8:	f000 f8fc 	bl	800dbf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d9fc:	4b10      	ldr	r3, [pc, #64]	; (800da40 <xPortStartScheduler+0x140>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	4a0f      	ldr	r2, [pc, #60]	; (800da40 <xPortStartScheduler+0x140>)
 800da02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800da06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800da08:	f7ff ff66 	bl	800d8d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800da0c:	f7ff fa82 	bl	800cf14 <vTaskSwitchContext>
	prvTaskExitError();
 800da10:	f7ff ff1c 	bl	800d84c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800da14:	2300      	movs	r3, #0
}
 800da16:	4618      	mov	r0, r3
 800da18:	3718      	adds	r7, #24
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
 800da1e:	bf00      	nop
 800da20:	e000ed00 	.word	0xe000ed00
 800da24:	410fc271 	.word	0x410fc271
 800da28:	410fc270 	.word	0x410fc270
 800da2c:	e000e400 	.word	0xe000e400
 800da30:	24000cfc 	.word	0x24000cfc
 800da34:	24000d00 	.word	0x24000d00
 800da38:	e000ed20 	.word	0xe000ed20
 800da3c:	24000028 	.word	0x24000028
 800da40:	e000ef34 	.word	0xe000ef34

0800da44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800da44:	b480      	push	{r7}
 800da46:	b083      	sub	sp, #12
 800da48:	af00      	add	r7, sp, #0
	__asm volatile
 800da4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da4e:	f383 8811 	msr	BASEPRI, r3
 800da52:	f3bf 8f6f 	isb	sy
 800da56:	f3bf 8f4f 	dsb	sy
 800da5a:	607b      	str	r3, [r7, #4]
}
 800da5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800da5e:	4b0f      	ldr	r3, [pc, #60]	; (800da9c <vPortEnterCritical+0x58>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	3301      	adds	r3, #1
 800da64:	4a0d      	ldr	r2, [pc, #52]	; (800da9c <vPortEnterCritical+0x58>)
 800da66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800da68:	4b0c      	ldr	r3, [pc, #48]	; (800da9c <vPortEnterCritical+0x58>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	2b01      	cmp	r3, #1
 800da6e:	d10f      	bne.n	800da90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800da70:	4b0b      	ldr	r3, [pc, #44]	; (800daa0 <vPortEnterCritical+0x5c>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	b2db      	uxtb	r3, r3
 800da76:	2b00      	cmp	r3, #0
 800da78:	d00a      	beq.n	800da90 <vPortEnterCritical+0x4c>
	__asm volatile
 800da7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da7e:	f383 8811 	msr	BASEPRI, r3
 800da82:	f3bf 8f6f 	isb	sy
 800da86:	f3bf 8f4f 	dsb	sy
 800da8a:	603b      	str	r3, [r7, #0]
}
 800da8c:	bf00      	nop
 800da8e:	e7fe      	b.n	800da8e <vPortEnterCritical+0x4a>
	}
}
 800da90:	bf00      	nop
 800da92:	370c      	adds	r7, #12
 800da94:	46bd      	mov	sp, r7
 800da96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9a:	4770      	bx	lr
 800da9c:	24000028 	.word	0x24000028
 800daa0:	e000ed04 	.word	0xe000ed04

0800daa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800daa4:	b480      	push	{r7}
 800daa6:	b083      	sub	sp, #12
 800daa8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800daaa:	4b12      	ldr	r3, [pc, #72]	; (800daf4 <vPortExitCritical+0x50>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d10a      	bne.n	800dac8 <vPortExitCritical+0x24>
	__asm volatile
 800dab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab6:	f383 8811 	msr	BASEPRI, r3
 800daba:	f3bf 8f6f 	isb	sy
 800dabe:	f3bf 8f4f 	dsb	sy
 800dac2:	607b      	str	r3, [r7, #4]
}
 800dac4:	bf00      	nop
 800dac6:	e7fe      	b.n	800dac6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dac8:	4b0a      	ldr	r3, [pc, #40]	; (800daf4 <vPortExitCritical+0x50>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	3b01      	subs	r3, #1
 800dace:	4a09      	ldr	r2, [pc, #36]	; (800daf4 <vPortExitCritical+0x50>)
 800dad0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dad2:	4b08      	ldr	r3, [pc, #32]	; (800daf4 <vPortExitCritical+0x50>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d105      	bne.n	800dae6 <vPortExitCritical+0x42>
 800dada:	2300      	movs	r3, #0
 800dadc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	f383 8811 	msr	BASEPRI, r3
}
 800dae4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dae6:	bf00      	nop
 800dae8:	370c      	adds	r7, #12
 800daea:	46bd      	mov	sp, r7
 800daec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf0:	4770      	bx	lr
 800daf2:	bf00      	nop
 800daf4:	24000028 	.word	0x24000028
	...

0800db00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800db00:	f3ef 8009 	mrs	r0, PSP
 800db04:	f3bf 8f6f 	isb	sy
 800db08:	4b15      	ldr	r3, [pc, #84]	; (800db60 <pxCurrentTCBConst>)
 800db0a:	681a      	ldr	r2, [r3, #0]
 800db0c:	f01e 0f10 	tst.w	lr, #16
 800db10:	bf08      	it	eq
 800db12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800db16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db1a:	6010      	str	r0, [r2, #0]
 800db1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800db20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800db24:	f380 8811 	msr	BASEPRI, r0
 800db28:	f3bf 8f4f 	dsb	sy
 800db2c:	f3bf 8f6f 	isb	sy
 800db30:	f7ff f9f0 	bl	800cf14 <vTaskSwitchContext>
 800db34:	f04f 0000 	mov.w	r0, #0
 800db38:	f380 8811 	msr	BASEPRI, r0
 800db3c:	bc09      	pop	{r0, r3}
 800db3e:	6819      	ldr	r1, [r3, #0]
 800db40:	6808      	ldr	r0, [r1, #0]
 800db42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db46:	f01e 0f10 	tst.w	lr, #16
 800db4a:	bf08      	it	eq
 800db4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800db50:	f380 8809 	msr	PSP, r0
 800db54:	f3bf 8f6f 	isb	sy
 800db58:	4770      	bx	lr
 800db5a:	bf00      	nop
 800db5c:	f3af 8000 	nop.w

0800db60 <pxCurrentTCBConst>:
 800db60:	24000bd0 	.word	0x24000bd0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800db64:	bf00      	nop
 800db66:	bf00      	nop

0800db68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b082      	sub	sp, #8
 800db6c:	af00      	add	r7, sp, #0
	__asm volatile
 800db6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db72:	f383 8811 	msr	BASEPRI, r3
 800db76:	f3bf 8f6f 	isb	sy
 800db7a:	f3bf 8f4f 	dsb	sy
 800db7e:	607b      	str	r3, [r7, #4]
}
 800db80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800db82:	f7ff f90f 	bl	800cda4 <xTaskIncrementTick>
 800db86:	4603      	mov	r3, r0
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d003      	beq.n	800db94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800db8c:	4b06      	ldr	r3, [pc, #24]	; (800dba8 <SysTick_Handler+0x40>)
 800db8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db92:	601a      	str	r2, [r3, #0]
 800db94:	2300      	movs	r3, #0
 800db96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	f383 8811 	msr	BASEPRI, r3
}
 800db9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dba0:	bf00      	nop
 800dba2:	3708      	adds	r7, #8
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}
 800dba8:	e000ed04 	.word	0xe000ed04

0800dbac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dbac:	b480      	push	{r7}
 800dbae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dbb0:	4b0b      	ldr	r3, [pc, #44]	; (800dbe0 <vPortSetupTimerInterrupt+0x34>)
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dbb6:	4b0b      	ldr	r3, [pc, #44]	; (800dbe4 <vPortSetupTimerInterrupt+0x38>)
 800dbb8:	2200      	movs	r2, #0
 800dbba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dbbc:	4b0a      	ldr	r3, [pc, #40]	; (800dbe8 <vPortSetupTimerInterrupt+0x3c>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	4a0a      	ldr	r2, [pc, #40]	; (800dbec <vPortSetupTimerInterrupt+0x40>)
 800dbc2:	fba2 2303 	umull	r2, r3, r2, r3
 800dbc6:	099b      	lsrs	r3, r3, #6
 800dbc8:	4a09      	ldr	r2, [pc, #36]	; (800dbf0 <vPortSetupTimerInterrupt+0x44>)
 800dbca:	3b01      	subs	r3, #1
 800dbcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dbce:	4b04      	ldr	r3, [pc, #16]	; (800dbe0 <vPortSetupTimerInterrupt+0x34>)
 800dbd0:	2207      	movs	r2, #7
 800dbd2:	601a      	str	r2, [r3, #0]
}
 800dbd4:	bf00      	nop
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbdc:	4770      	bx	lr
 800dbde:	bf00      	nop
 800dbe0:	e000e010 	.word	0xe000e010
 800dbe4:	e000e018 	.word	0xe000e018
 800dbe8:	24000000 	.word	0x24000000
 800dbec:	10624dd3 	.word	0x10624dd3
 800dbf0:	e000e014 	.word	0xe000e014

0800dbf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dbf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dc04 <vPortEnableVFP+0x10>
 800dbf8:	6801      	ldr	r1, [r0, #0]
 800dbfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dbfe:	6001      	str	r1, [r0, #0]
 800dc00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dc02:	bf00      	nop
 800dc04:	e000ed88 	.word	0xe000ed88

0800dc08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dc08:	b480      	push	{r7}
 800dc0a:	b085      	sub	sp, #20
 800dc0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dc0e:	f3ef 8305 	mrs	r3, IPSR
 800dc12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	2b0f      	cmp	r3, #15
 800dc18:	d914      	bls.n	800dc44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dc1a:	4a17      	ldr	r2, [pc, #92]	; (800dc78 <vPortValidateInterruptPriority+0x70>)
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	4413      	add	r3, r2
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dc24:	4b15      	ldr	r3, [pc, #84]	; (800dc7c <vPortValidateInterruptPriority+0x74>)
 800dc26:	781b      	ldrb	r3, [r3, #0]
 800dc28:	7afa      	ldrb	r2, [r7, #11]
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d20a      	bcs.n	800dc44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800dc2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc32:	f383 8811 	msr	BASEPRI, r3
 800dc36:	f3bf 8f6f 	isb	sy
 800dc3a:	f3bf 8f4f 	dsb	sy
 800dc3e:	607b      	str	r3, [r7, #4]
}
 800dc40:	bf00      	nop
 800dc42:	e7fe      	b.n	800dc42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dc44:	4b0e      	ldr	r3, [pc, #56]	; (800dc80 <vPortValidateInterruptPriority+0x78>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dc4c:	4b0d      	ldr	r3, [pc, #52]	; (800dc84 <vPortValidateInterruptPriority+0x7c>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	429a      	cmp	r2, r3
 800dc52:	d90a      	bls.n	800dc6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800dc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc58:	f383 8811 	msr	BASEPRI, r3
 800dc5c:	f3bf 8f6f 	isb	sy
 800dc60:	f3bf 8f4f 	dsb	sy
 800dc64:	603b      	str	r3, [r7, #0]
}
 800dc66:	bf00      	nop
 800dc68:	e7fe      	b.n	800dc68 <vPortValidateInterruptPriority+0x60>
	}
 800dc6a:	bf00      	nop
 800dc6c:	3714      	adds	r7, #20
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc74:	4770      	bx	lr
 800dc76:	bf00      	nop
 800dc78:	e000e3f0 	.word	0xe000e3f0
 800dc7c:	24000cfc 	.word	0x24000cfc
 800dc80:	e000ed0c 	.word	0xe000ed0c
 800dc84:	24000d00 	.word	0x24000d00

0800dc88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b08a      	sub	sp, #40	; 0x28
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dc90:	2300      	movs	r3, #0
 800dc92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dc94:	f7fe ffba 	bl	800cc0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dc98:	4b5b      	ldr	r3, [pc, #364]	; (800de08 <pvPortMalloc+0x180>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d101      	bne.n	800dca4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dca0:	f000 f920 	bl	800dee4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dca4:	4b59      	ldr	r3, [pc, #356]	; (800de0c <pvPortMalloc+0x184>)
 800dca6:	681a      	ldr	r2, [r3, #0]
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	4013      	ands	r3, r2
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	f040 8093 	bne.w	800ddd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d01d      	beq.n	800dcf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800dcb8:	2208      	movs	r2, #8
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	4413      	add	r3, r2
 800dcbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f003 0307 	and.w	r3, r3, #7
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d014      	beq.n	800dcf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f023 0307 	bic.w	r3, r3, #7
 800dcd0:	3308      	adds	r3, #8
 800dcd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f003 0307 	and.w	r3, r3, #7
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d00a      	beq.n	800dcf4 <pvPortMalloc+0x6c>
	__asm volatile
 800dcde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dce2:	f383 8811 	msr	BASEPRI, r3
 800dce6:	f3bf 8f6f 	isb	sy
 800dcea:	f3bf 8f4f 	dsb	sy
 800dcee:	617b      	str	r3, [r7, #20]
}
 800dcf0:	bf00      	nop
 800dcf2:	e7fe      	b.n	800dcf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d06e      	beq.n	800ddd8 <pvPortMalloc+0x150>
 800dcfa:	4b45      	ldr	r3, [pc, #276]	; (800de10 <pvPortMalloc+0x188>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	687a      	ldr	r2, [r7, #4]
 800dd00:	429a      	cmp	r2, r3
 800dd02:	d869      	bhi.n	800ddd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dd04:	4b43      	ldr	r3, [pc, #268]	; (800de14 <pvPortMalloc+0x18c>)
 800dd06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dd08:	4b42      	ldr	r3, [pc, #264]	; (800de14 <pvPortMalloc+0x18c>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dd0e:	e004      	b.n	800dd1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800dd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd1c:	685b      	ldr	r3, [r3, #4]
 800dd1e:	687a      	ldr	r2, [r7, #4]
 800dd20:	429a      	cmp	r2, r3
 800dd22:	d903      	bls.n	800dd2c <pvPortMalloc+0xa4>
 800dd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d1f1      	bne.n	800dd10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dd2c:	4b36      	ldr	r3, [pc, #216]	; (800de08 <pvPortMalloc+0x180>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd32:	429a      	cmp	r2, r3
 800dd34:	d050      	beq.n	800ddd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dd36:	6a3b      	ldr	r3, [r7, #32]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	2208      	movs	r2, #8
 800dd3c:	4413      	add	r3, r2
 800dd3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd42:	681a      	ldr	r2, [r3, #0]
 800dd44:	6a3b      	ldr	r3, [r7, #32]
 800dd46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd4a:	685a      	ldr	r2, [r3, #4]
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	1ad2      	subs	r2, r2, r3
 800dd50:	2308      	movs	r3, #8
 800dd52:	005b      	lsls	r3, r3, #1
 800dd54:	429a      	cmp	r2, r3
 800dd56:	d91f      	bls.n	800dd98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dd58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	4413      	add	r3, r2
 800dd5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dd60:	69bb      	ldr	r3, [r7, #24]
 800dd62:	f003 0307 	and.w	r3, r3, #7
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d00a      	beq.n	800dd80 <pvPortMalloc+0xf8>
	__asm volatile
 800dd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd6e:	f383 8811 	msr	BASEPRI, r3
 800dd72:	f3bf 8f6f 	isb	sy
 800dd76:	f3bf 8f4f 	dsb	sy
 800dd7a:	613b      	str	r3, [r7, #16]
}
 800dd7c:	bf00      	nop
 800dd7e:	e7fe      	b.n	800dd7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd82:	685a      	ldr	r2, [r3, #4]
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	1ad2      	subs	r2, r2, r3
 800dd88:	69bb      	ldr	r3, [r7, #24]
 800dd8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd8e:	687a      	ldr	r2, [r7, #4]
 800dd90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dd92:	69b8      	ldr	r0, [r7, #24]
 800dd94:	f000 f908 	bl	800dfa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dd98:	4b1d      	ldr	r3, [pc, #116]	; (800de10 <pvPortMalloc+0x188>)
 800dd9a:	681a      	ldr	r2, [r3, #0]
 800dd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd9e:	685b      	ldr	r3, [r3, #4]
 800dda0:	1ad3      	subs	r3, r2, r3
 800dda2:	4a1b      	ldr	r2, [pc, #108]	; (800de10 <pvPortMalloc+0x188>)
 800dda4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dda6:	4b1a      	ldr	r3, [pc, #104]	; (800de10 <pvPortMalloc+0x188>)
 800dda8:	681a      	ldr	r2, [r3, #0]
 800ddaa:	4b1b      	ldr	r3, [pc, #108]	; (800de18 <pvPortMalloc+0x190>)
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	429a      	cmp	r2, r3
 800ddb0:	d203      	bcs.n	800ddba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ddb2:	4b17      	ldr	r3, [pc, #92]	; (800de10 <pvPortMalloc+0x188>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	4a18      	ldr	r2, [pc, #96]	; (800de18 <pvPortMalloc+0x190>)
 800ddb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ddba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddbc:	685a      	ldr	r2, [r3, #4]
 800ddbe:	4b13      	ldr	r3, [pc, #76]	; (800de0c <pvPortMalloc+0x184>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	431a      	orrs	r2, r3
 800ddc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ddc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddca:	2200      	movs	r2, #0
 800ddcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ddce:	4b13      	ldr	r3, [pc, #76]	; (800de1c <pvPortMalloc+0x194>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	3301      	adds	r3, #1
 800ddd4:	4a11      	ldr	r2, [pc, #68]	; (800de1c <pvPortMalloc+0x194>)
 800ddd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ddd8:	f7fe ff26 	bl	800cc28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dddc:	69fb      	ldr	r3, [r7, #28]
 800ddde:	f003 0307 	and.w	r3, r3, #7
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d00a      	beq.n	800ddfc <pvPortMalloc+0x174>
	__asm volatile
 800dde6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddea:	f383 8811 	msr	BASEPRI, r3
 800ddee:	f3bf 8f6f 	isb	sy
 800ddf2:	f3bf 8f4f 	dsb	sy
 800ddf6:	60fb      	str	r3, [r7, #12]
}
 800ddf8:	bf00      	nop
 800ddfa:	e7fe      	b.n	800ddfa <pvPortMalloc+0x172>
	return pvReturn;
 800ddfc:	69fb      	ldr	r3, [r7, #28]
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	3728      	adds	r7, #40	; 0x28
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}
 800de06:	bf00      	nop
 800de08:	2400490c 	.word	0x2400490c
 800de0c:	24004920 	.word	0x24004920
 800de10:	24004910 	.word	0x24004910
 800de14:	24004904 	.word	0x24004904
 800de18:	24004914 	.word	0x24004914
 800de1c:	24004918 	.word	0x24004918

0800de20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b086      	sub	sp, #24
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d04d      	beq.n	800dece <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800de32:	2308      	movs	r3, #8
 800de34:	425b      	negs	r3, r3
 800de36:	697a      	ldr	r2, [r7, #20]
 800de38:	4413      	add	r3, r2
 800de3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800de40:	693b      	ldr	r3, [r7, #16]
 800de42:	685a      	ldr	r2, [r3, #4]
 800de44:	4b24      	ldr	r3, [pc, #144]	; (800ded8 <vPortFree+0xb8>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	4013      	ands	r3, r2
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d10a      	bne.n	800de64 <vPortFree+0x44>
	__asm volatile
 800de4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de52:	f383 8811 	msr	BASEPRI, r3
 800de56:	f3bf 8f6f 	isb	sy
 800de5a:	f3bf 8f4f 	dsb	sy
 800de5e:	60fb      	str	r3, [r7, #12]
}
 800de60:	bf00      	nop
 800de62:	e7fe      	b.n	800de62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d00a      	beq.n	800de82 <vPortFree+0x62>
	__asm volatile
 800de6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de70:	f383 8811 	msr	BASEPRI, r3
 800de74:	f3bf 8f6f 	isb	sy
 800de78:	f3bf 8f4f 	dsb	sy
 800de7c:	60bb      	str	r3, [r7, #8]
}
 800de7e:	bf00      	nop
 800de80:	e7fe      	b.n	800de80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800de82:	693b      	ldr	r3, [r7, #16]
 800de84:	685a      	ldr	r2, [r3, #4]
 800de86:	4b14      	ldr	r3, [pc, #80]	; (800ded8 <vPortFree+0xb8>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	4013      	ands	r3, r2
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d01e      	beq.n	800dece <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800de90:	693b      	ldr	r3, [r7, #16]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d11a      	bne.n	800dece <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800de98:	693b      	ldr	r3, [r7, #16]
 800de9a:	685a      	ldr	r2, [r3, #4]
 800de9c:	4b0e      	ldr	r3, [pc, #56]	; (800ded8 <vPortFree+0xb8>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	43db      	mvns	r3, r3
 800dea2:	401a      	ands	r2, r3
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dea8:	f7fe feb0 	bl	800cc0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800deac:	693b      	ldr	r3, [r7, #16]
 800deae:	685a      	ldr	r2, [r3, #4]
 800deb0:	4b0a      	ldr	r3, [pc, #40]	; (800dedc <vPortFree+0xbc>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	4413      	add	r3, r2
 800deb6:	4a09      	ldr	r2, [pc, #36]	; (800dedc <vPortFree+0xbc>)
 800deb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800deba:	6938      	ldr	r0, [r7, #16]
 800debc:	f000 f874 	bl	800dfa8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dec0:	4b07      	ldr	r3, [pc, #28]	; (800dee0 <vPortFree+0xc0>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	3301      	adds	r3, #1
 800dec6:	4a06      	ldr	r2, [pc, #24]	; (800dee0 <vPortFree+0xc0>)
 800dec8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800deca:	f7fe fead 	bl	800cc28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dece:	bf00      	nop
 800ded0:	3718      	adds	r7, #24
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
 800ded6:	bf00      	nop
 800ded8:	24004920 	.word	0x24004920
 800dedc:	24004910 	.word	0x24004910
 800dee0:	2400491c 	.word	0x2400491c

0800dee4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dee4:	b480      	push	{r7}
 800dee6:	b085      	sub	sp, #20
 800dee8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800deea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800deee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800def0:	4b27      	ldr	r3, [pc, #156]	; (800df90 <prvHeapInit+0xac>)
 800def2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	f003 0307 	and.w	r3, r3, #7
 800defa:	2b00      	cmp	r3, #0
 800defc:	d00c      	beq.n	800df18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	3307      	adds	r3, #7
 800df02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	f023 0307 	bic.w	r3, r3, #7
 800df0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800df0c:	68ba      	ldr	r2, [r7, #8]
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	1ad3      	subs	r3, r2, r3
 800df12:	4a1f      	ldr	r2, [pc, #124]	; (800df90 <prvHeapInit+0xac>)
 800df14:	4413      	add	r3, r2
 800df16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800df1c:	4a1d      	ldr	r2, [pc, #116]	; (800df94 <prvHeapInit+0xb0>)
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800df22:	4b1c      	ldr	r3, [pc, #112]	; (800df94 <prvHeapInit+0xb0>)
 800df24:	2200      	movs	r2, #0
 800df26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	68ba      	ldr	r2, [r7, #8]
 800df2c:	4413      	add	r3, r2
 800df2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800df30:	2208      	movs	r2, #8
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	1a9b      	subs	r3, r3, r2
 800df36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	f023 0307 	bic.w	r3, r3, #7
 800df3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	4a15      	ldr	r2, [pc, #84]	; (800df98 <prvHeapInit+0xb4>)
 800df44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800df46:	4b14      	ldr	r3, [pc, #80]	; (800df98 <prvHeapInit+0xb4>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	2200      	movs	r2, #0
 800df4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800df4e:	4b12      	ldr	r3, [pc, #72]	; (800df98 <prvHeapInit+0xb4>)
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	2200      	movs	r2, #0
 800df54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	68fa      	ldr	r2, [r7, #12]
 800df5e:	1ad2      	subs	r2, r2, r3
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800df64:	4b0c      	ldr	r3, [pc, #48]	; (800df98 <prvHeapInit+0xb4>)
 800df66:	681a      	ldr	r2, [r3, #0]
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	685b      	ldr	r3, [r3, #4]
 800df70:	4a0a      	ldr	r2, [pc, #40]	; (800df9c <prvHeapInit+0xb8>)
 800df72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	685b      	ldr	r3, [r3, #4]
 800df78:	4a09      	ldr	r2, [pc, #36]	; (800dfa0 <prvHeapInit+0xbc>)
 800df7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800df7c:	4b09      	ldr	r3, [pc, #36]	; (800dfa4 <prvHeapInit+0xc0>)
 800df7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800df82:	601a      	str	r2, [r3, #0]
}
 800df84:	bf00      	nop
 800df86:	3714      	adds	r7, #20
 800df88:	46bd      	mov	sp, r7
 800df8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8e:	4770      	bx	lr
 800df90:	24000d04 	.word	0x24000d04
 800df94:	24004904 	.word	0x24004904
 800df98:	2400490c 	.word	0x2400490c
 800df9c:	24004914 	.word	0x24004914
 800dfa0:	24004910 	.word	0x24004910
 800dfa4:	24004920 	.word	0x24004920

0800dfa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dfa8:	b480      	push	{r7}
 800dfaa:	b085      	sub	sp, #20
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dfb0:	4b28      	ldr	r3, [pc, #160]	; (800e054 <prvInsertBlockIntoFreeList+0xac>)
 800dfb2:	60fb      	str	r3, [r7, #12]
 800dfb4:	e002      	b.n	800dfbc <prvInsertBlockIntoFreeList+0x14>
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	60fb      	str	r3, [r7, #12]
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	687a      	ldr	r2, [r7, #4]
 800dfc2:	429a      	cmp	r2, r3
 800dfc4:	d8f7      	bhi.n	800dfb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	685b      	ldr	r3, [r3, #4]
 800dfce:	68ba      	ldr	r2, [r7, #8]
 800dfd0:	4413      	add	r3, r2
 800dfd2:	687a      	ldr	r2, [r7, #4]
 800dfd4:	429a      	cmp	r2, r3
 800dfd6:	d108      	bne.n	800dfea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	685a      	ldr	r2, [r3, #4]
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	685b      	ldr	r3, [r3, #4]
 800dfe0:	441a      	add	r2, r3
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	685b      	ldr	r3, [r3, #4]
 800dff2:	68ba      	ldr	r2, [r7, #8]
 800dff4:	441a      	add	r2, r3
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	429a      	cmp	r2, r3
 800dffc:	d118      	bne.n	800e030 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	681a      	ldr	r2, [r3, #0]
 800e002:	4b15      	ldr	r3, [pc, #84]	; (800e058 <prvInsertBlockIntoFreeList+0xb0>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	429a      	cmp	r2, r3
 800e008:	d00d      	beq.n	800e026 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	685a      	ldr	r2, [r3, #4]
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	685b      	ldr	r3, [r3, #4]
 800e014:	441a      	add	r2, r3
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	681a      	ldr	r2, [r3, #0]
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	601a      	str	r2, [r3, #0]
 800e024:	e008      	b.n	800e038 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e026:	4b0c      	ldr	r3, [pc, #48]	; (800e058 <prvInsertBlockIntoFreeList+0xb0>)
 800e028:	681a      	ldr	r2, [r3, #0]
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	601a      	str	r2, [r3, #0]
 800e02e:	e003      	b.n	800e038 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	681a      	ldr	r2, [r3, #0]
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e038:	68fa      	ldr	r2, [r7, #12]
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d002      	beq.n	800e046 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	687a      	ldr	r2, [r7, #4]
 800e044:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e046:	bf00      	nop
 800e048:	3714      	adds	r7, #20
 800e04a:	46bd      	mov	sp, r7
 800e04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e050:	4770      	bx	lr
 800e052:	bf00      	nop
 800e054:	24004904 	.word	0x24004904
 800e058:	2400490c 	.word	0x2400490c

0800e05c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b084      	sub	sp, #16
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
 800e064:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	330c      	adds	r3, #12
 800e06c:	461a      	mov	r2, r3
 800e06e:	6839      	ldr	r1, [r7, #0]
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f004 fd99 	bl	8012ba8 <tcpip_send_msg_wait_sem>
 800e076:	4603      	mov	r3, r0
 800e078:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800e07a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d103      	bne.n	800e08a <netconn_apimsg+0x2e>
    return apimsg->err;
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e088:	e001      	b.n	800e08e <netconn_apimsg+0x32>
  }
  return err;
 800e08a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e08e:	4618      	mov	r0, r3
 800e090:	3710      	adds	r7, #16
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}
	...

0800e098 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b08c      	sub	sp, #48	; 0x30
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	4603      	mov	r3, r0
 800e0a0:	603a      	str	r2, [r7, #0]
 800e0a2:	71fb      	strb	r3, [r7, #7]
 800e0a4:	460b      	mov	r3, r1
 800e0a6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800e0a8:	79fb      	ldrb	r3, [r7, #7]
 800e0aa:	6839      	ldr	r1, [r7, #0]
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f001 fa81 	bl	800f5b4 <netconn_alloc>
 800e0b2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800e0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d054      	beq.n	800e164 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800e0ba:	79bb      	ldrb	r3, [r7, #6]
 800e0bc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800e0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800e0c2:	f107 0308 	add.w	r3, r7, #8
 800e0c6:	4619      	mov	r1, r3
 800e0c8:	4829      	ldr	r0, [pc, #164]	; (800e170 <netconn_new_with_proto_and_callback+0xd8>)
 800e0ca:	f7ff ffc7 	bl	800e05c <netconn_apimsg>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800e0d4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d043      	beq.n	800e164 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800e0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0de:	685b      	ldr	r3, [r3, #4]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d005      	beq.n	800e0f0 <netconn_new_with_proto_and_callback+0x58>
 800e0e4:	4b23      	ldr	r3, [pc, #140]	; (800e174 <netconn_new_with_proto_and_callback+0xdc>)
 800e0e6:	22a3      	movs	r2, #163	; 0xa3
 800e0e8:	4923      	ldr	r1, [pc, #140]	; (800e178 <netconn_new_with_proto_and_callback+0xe0>)
 800e0ea:	4824      	ldr	r0, [pc, #144]	; (800e17c <netconn_new_with_proto_and_callback+0xe4>)
 800e0ec:	f018 fef2 	bl	8026ed4 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800e0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f2:	3310      	adds	r3, #16
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f013 fd9c 	bl	8021c32 <sys_mbox_valid>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d105      	bne.n	800e10c <netconn_new_with_proto_and_callback+0x74>
 800e100:	4b1c      	ldr	r3, [pc, #112]	; (800e174 <netconn_new_with_proto_and_callback+0xdc>)
 800e102:	22a4      	movs	r2, #164	; 0xa4
 800e104:	491e      	ldr	r1, [pc, #120]	; (800e180 <netconn_new_with_proto_and_callback+0xe8>)
 800e106:	481d      	ldr	r0, [pc, #116]	; (800e17c <netconn_new_with_proto_and_callback+0xe4>)
 800e108:	f018 fee4 	bl	8026ed4 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800e10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e10e:	3314      	adds	r3, #20
 800e110:	4618      	mov	r0, r3
 800e112:	f013 fd8e 	bl	8021c32 <sys_mbox_valid>
 800e116:	4603      	mov	r3, r0
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d005      	beq.n	800e128 <netconn_new_with_proto_and_callback+0x90>
 800e11c:	4b15      	ldr	r3, [pc, #84]	; (800e174 <netconn_new_with_proto_and_callback+0xdc>)
 800e11e:	22a6      	movs	r2, #166	; 0xa6
 800e120:	4918      	ldr	r1, [pc, #96]	; (800e184 <netconn_new_with_proto_and_callback+0xec>)
 800e122:	4816      	ldr	r0, [pc, #88]	; (800e17c <netconn_new_with_proto_and_callback+0xe4>)
 800e124:	f018 fed6 	bl	8026ed4 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800e128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e12a:	330c      	adds	r3, #12
 800e12c:	4618      	mov	r0, r3
 800e12e:	f013 fe11 	bl	8021d54 <sys_sem_valid>
 800e132:	4603      	mov	r3, r0
 800e134:	2b00      	cmp	r3, #0
 800e136:	d105      	bne.n	800e144 <netconn_new_with_proto_and_callback+0xac>
 800e138:	4b0e      	ldr	r3, [pc, #56]	; (800e174 <netconn_new_with_proto_and_callback+0xdc>)
 800e13a:	22a9      	movs	r2, #169	; 0xa9
 800e13c:	4912      	ldr	r1, [pc, #72]	; (800e188 <netconn_new_with_proto_and_callback+0xf0>)
 800e13e:	480f      	ldr	r0, [pc, #60]	; (800e17c <netconn_new_with_proto_and_callback+0xe4>)
 800e140:	f018 fec8 	bl	8026ed4 <iprintf>
      sys_sem_free(&conn->op_completed);
 800e144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e146:	330c      	adds	r3, #12
 800e148:	4618      	mov	r0, r3
 800e14a:	f013 fdf6 	bl	8021d3a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800e14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e150:	3310      	adds	r3, #16
 800e152:	4618      	mov	r0, r3
 800e154:	f013 fce6 	bl	8021b24 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800e158:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e15a:	2007      	movs	r0, #7
 800e15c:	f006 fda8 	bl	8014cb0 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800e160:	2300      	movs	r3, #0
 800e162:	e000      	b.n	800e166 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800e164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e166:	4618      	mov	r0, r3
 800e168:	3730      	adds	r7, #48	; 0x30
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd80      	pop	{r7, pc}
 800e16e:	bf00      	nop
 800e170:	0800f589 	.word	0x0800f589
 800e174:	0802a47c 	.word	0x0802a47c
 800e178:	0802a4b0 	.word	0x0802a4b0
 800e17c:	0802a4d4 	.word	0x0802a4d4
 800e180:	0802a4fc 	.word	0x0802a4fc
 800e184:	0802a514 	.word	0x0802a514
 800e188:	0802a538 	.word	0x0802a538

0800e18c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b08c      	sub	sp, #48	; 0x30
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d101      	bne.n	800e19e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800e19a:	2300      	movs	r3, #0
 800e19c:	e014      	b.n	800e1c8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800e1a2:	2329      	movs	r3, #41	; 0x29
 800e1a4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800e1a6:	f107 030c 	add.w	r3, r7, #12
 800e1aa:	4619      	mov	r1, r3
 800e1ac:	4808      	ldr	r0, [pc, #32]	; (800e1d0 <netconn_prepare_delete+0x44>)
 800e1ae:	f7ff ff55 	bl	800e05c <netconn_apimsg>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800e1b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d002      	beq.n	800e1c6 <netconn_prepare_delete+0x3a>
    return err;
 800e1c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e1c4:	e000      	b.n	800e1c8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800e1c6:	2300      	movs	r3, #0
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3730      	adds	r7, #48	; 0x30
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}
 800e1d0:	0800faed 	.word	0x0800faed

0800e1d4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b084      	sub	sp, #16
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d101      	bne.n	800e1e6 <netconn_delete+0x12>
    return ERR_OK;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	e00d      	b.n	800e202 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f7ff ffd0 	bl	800e18c <netconn_prepare_delete>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800e1f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d102      	bne.n	800e1fe <netconn_delete+0x2a>
    netconn_free(conn);
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f001 fa49 	bl	800f690 <netconn_free>
  }
  return err;
 800e1fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e202:	4618      	mov	r0, r3
 800e204:	3710      	adds	r7, #16
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}
	...

0800e20c <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b08e      	sub	sp, #56	; 0x38
 800e210:	af00      	add	r7, sp, #0
 800e212:	60f8      	str	r0, [r7, #12]
 800e214:	60b9      	str	r1, [r7, #8]
 800e216:	607a      	str	r2, [r7, #4]
 800e218:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d109      	bne.n	800e234 <netconn_getaddr+0x28>
 800e220:	4b1d      	ldr	r3, [pc, #116]	; (800e298 <netconn_getaddr+0x8c>)
 800e222:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e226:	491d      	ldr	r1, [pc, #116]	; (800e29c <netconn_getaddr+0x90>)
 800e228:	481d      	ldr	r0, [pc, #116]	; (800e2a0 <netconn_getaddr+0x94>)
 800e22a:	f018 fe53 	bl	8026ed4 <iprintf>
 800e22e:	f06f 030f 	mvn.w	r3, #15
 800e232:	e02d      	b.n	800e290 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d109      	bne.n	800e24e <netconn_getaddr+0x42>
 800e23a:	4b17      	ldr	r3, [pc, #92]	; (800e298 <netconn_getaddr+0x8c>)
 800e23c:	f240 1213 	movw	r2, #275	; 0x113
 800e240:	4918      	ldr	r1, [pc, #96]	; (800e2a4 <netconn_getaddr+0x98>)
 800e242:	4817      	ldr	r0, [pc, #92]	; (800e2a0 <netconn_getaddr+0x94>)
 800e244:	f018 fe46 	bl	8026ed4 <iprintf>
 800e248:	f06f 030f 	mvn.w	r3, #15
 800e24c:	e020      	b.n	800e290 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d109      	bne.n	800e268 <netconn_getaddr+0x5c>
 800e254:	4b10      	ldr	r3, [pc, #64]	; (800e298 <netconn_getaddr+0x8c>)
 800e256:	f44f 728a 	mov.w	r2, #276	; 0x114
 800e25a:	4913      	ldr	r1, [pc, #76]	; (800e2a8 <netconn_getaddr+0x9c>)
 800e25c:	4810      	ldr	r0, [pc, #64]	; (800e2a0 <netconn_getaddr+0x94>)
 800e25e:	f018 fe39 	bl	8026ed4 <iprintf>
 800e262:	f06f 030f 	mvn.w	r3, #15
 800e266:	e013      	b.n	800e290 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800e26c:	78fb      	ldrb	r3, [r7, #3]
 800e26e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 800e272:	68bb      	ldr	r3, [r7, #8]
 800e274:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800e27a:	f107 0314 	add.w	r3, r7, #20
 800e27e:	4619      	mov	r1, r3
 800e280:	480a      	ldr	r0, [pc, #40]	; (800e2ac <netconn_getaddr+0xa0>)
 800e282:	f7ff feeb 	bl	800e05c <netconn_apimsg>
 800e286:	4603      	mov	r3, r0
 800e288:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 800e28c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800e290:	4618      	mov	r0, r3
 800e292:	3738      	adds	r7, #56	; 0x38
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}
 800e298:	0802a47c 	.word	0x0802a47c
 800e29c:	0802a554 	.word	0x0802a554
 800e2a0:	0802a4d4 	.word	0x0802a4d4
 800e2a4:	0802a574 	.word	0x0802a574
 800e2a8:	0802a594 	.word	0x0802a594
 800e2ac:	080106e5 	.word	0x080106e5

0800e2b0 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b08e      	sub	sp, #56	; 0x38
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	60f8      	str	r0, [r7, #12]
 800e2b8:	60b9      	str	r1, [r7, #8]
 800e2ba:	4613      	mov	r3, r2
 800e2bc:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d109      	bne.n	800e2d8 <netconn_bind+0x28>
 800e2c4:	4b11      	ldr	r3, [pc, #68]	; (800e30c <netconn_bind+0x5c>)
 800e2c6:	f44f 729c 	mov.w	r2, #312	; 0x138
 800e2ca:	4911      	ldr	r1, [pc, #68]	; (800e310 <netconn_bind+0x60>)
 800e2cc:	4811      	ldr	r0, [pc, #68]	; (800e314 <netconn_bind+0x64>)
 800e2ce:	f018 fe01 	bl	8026ed4 <iprintf>
 800e2d2:	f06f 030f 	mvn.w	r3, #15
 800e2d6:	e015      	b.n	800e304 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800e2d8:	68bb      	ldr	r3, [r7, #8]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d101      	bne.n	800e2e2 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800e2de:	4b0e      	ldr	r3, [pc, #56]	; (800e318 <netconn_bind+0x68>)
 800e2e0:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800e2ea:	88fb      	ldrh	r3, [r7, #6]
 800e2ec:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800e2ee:	f107 0314 	add.w	r3, r7, #20
 800e2f2:	4619      	mov	r1, r3
 800e2f4:	4809      	ldr	r0, [pc, #36]	; (800e31c <netconn_bind+0x6c>)
 800e2f6:	f7ff feb1 	bl	800e05c <netconn_apimsg>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800e300:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800e304:	4618      	mov	r0, r3
 800e306:	3738      	adds	r7, #56	; 0x38
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}
 800e30c:	0802a47c 	.word	0x0802a47c
 800e310:	0802a5b4 	.word	0x0802a5b4
 800e314:	0802a4d4 	.word	0x0802a4d4
 800e318:	0802ec60 	.word	0x0802ec60
 800e31c:	0800fcb5 	.word	0x0800fcb5

0800e320 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b08e      	sub	sp, #56	; 0x38
 800e324:	af00      	add	r7, sp, #0
 800e326:	60f8      	str	r0, [r7, #12]
 800e328:	60b9      	str	r1, [r7, #8]
 800e32a:	4613      	mov	r3, r2
 800e32c:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d109      	bne.n	800e348 <netconn_connect+0x28>
 800e334:	4b11      	ldr	r3, [pc, #68]	; (800e37c <netconn_connect+0x5c>)
 800e336:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 800e33a:	4911      	ldr	r1, [pc, #68]	; (800e380 <netconn_connect+0x60>)
 800e33c:	4811      	ldr	r0, [pc, #68]	; (800e384 <netconn_connect+0x64>)
 800e33e:	f018 fdc9 	bl	8026ed4 <iprintf>
 800e342:	f06f 030f 	mvn.w	r3, #15
 800e346:	e015      	b.n	800e374 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d101      	bne.n	800e352 <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800e34e:	4b0e      	ldr	r3, [pc, #56]	; (800e388 <netconn_connect+0x68>)
 800e350:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800e35a:	88fb      	ldrh	r3, [r7, #6]
 800e35c:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800e35e:	f107 0314 	add.w	r3, r7, #20
 800e362:	4619      	mov	r1, r3
 800e364:	4809      	ldr	r0, [pc, #36]	; (800e38c <netconn_connect+0x6c>)
 800e366:	f7ff fe79 	bl	800e05c <netconn_apimsg>
 800e36a:	4603      	mov	r3, r0
 800e36c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800e370:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800e374:	4618      	mov	r0, r3
 800e376:	3738      	adds	r7, #56	; 0x38
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}
 800e37c:	0802a47c 	.word	0x0802a47c
 800e380:	0802a5f0 	.word	0x0802a5f0
 800e384:	0802a4d4 	.word	0x0802a4d4
 800e388:	0802ec60 	.word	0x0802ec60
 800e38c:	0800fe49 	.word	0x0800fe49

0800e390 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b08c      	sub	sp, #48	; 0x30
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d109      	bne.n	800e3b2 <netconn_disconnect+0x22>
 800e39e:	4b0d      	ldr	r3, [pc, #52]	; (800e3d4 <netconn_disconnect+0x44>)
 800e3a0:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800e3a4:	490c      	ldr	r1, [pc, #48]	; (800e3d8 <netconn_disconnect+0x48>)
 800e3a6:	480d      	ldr	r0, [pc, #52]	; (800e3dc <netconn_disconnect+0x4c>)
 800e3a8:	f018 fd94 	bl	8026ed4 <iprintf>
 800e3ac:	f06f 030f 	mvn.w	r3, #15
 800e3b0:	e00c      	b.n	800e3cc <netconn_disconnect+0x3c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	60fb      	str	r3, [r7, #12]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 800e3b6:	f107 030c 	add.w	r3, r7, #12
 800e3ba:	4619      	mov	r1, r3
 800e3bc:	4808      	ldr	r0, [pc, #32]	; (800e3e0 <netconn_disconnect+0x50>)
 800e3be:	f7ff fe4d 	bl	800e05c <netconn_apimsg>
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800e3c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	3730      	adds	r7, #48	; 0x30
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}
 800e3d4:	0802a47c 	.word	0x0802a47c
 800e3d8:	0802a610 	.word	0x0802a610
 800e3dc:	0802a4d4 	.word	0x0802a4d4
 800e3e0:	0800ffc5 	.word	0x0800ffc5

0800e3e4 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b08c      	sub	sp, #48	; 0x30
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
 800e3ec:	460b      	mov	r3, r1
 800e3ee:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d109      	bne.n	800e40a <netconn_listen_with_backlog+0x26>
 800e3f6:	4b0d      	ldr	r3, [pc, #52]	; (800e42c <netconn_listen_with_backlog+0x48>)
 800e3f8:	f240 12bb 	movw	r2, #443	; 0x1bb
 800e3fc:	490c      	ldr	r1, [pc, #48]	; (800e430 <netconn_listen_with_backlog+0x4c>)
 800e3fe:	480d      	ldr	r0, [pc, #52]	; (800e434 <netconn_listen_with_backlog+0x50>)
 800e400:	f018 fd68 	bl	8026ed4 <iprintf>
 800e404:	f06f 030f 	mvn.w	r3, #15
 800e408:	e00c      	b.n	800e424 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800e40e:	f107 030c 	add.w	r3, r7, #12
 800e412:	4619      	mov	r1, r3
 800e414:	4808      	ldr	r0, [pc, #32]	; (800e438 <netconn_listen_with_backlog+0x54>)
 800e416:	f7ff fe21 	bl	800e05c <netconn_apimsg>
 800e41a:	4603      	mov	r3, r0
 800e41c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800e420:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800e424:	4618      	mov	r0, r3
 800e426:	3730      	adds	r7, #48	; 0x30
 800e428:	46bd      	mov	sp, r7
 800e42a:	bd80      	pop	{r7, pc}
 800e42c:	0802a47c 	.word	0x0802a47c
 800e430:	0802a634 	.word	0x0802a634
 800e434:	0802a4d4 	.word	0x0802a4d4
 800e438:	08010001 	.word	0x08010001

0800e43c <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b086      	sub	sp, #24
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
 800e444:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d109      	bne.n	800e460 <netconn_accept+0x24>
 800e44c:	4b3d      	ldr	r3, [pc, #244]	; (800e544 <netconn_accept+0x108>)
 800e44e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800e452:	493d      	ldr	r1, [pc, #244]	; (800e548 <netconn_accept+0x10c>)
 800e454:	483d      	ldr	r0, [pc, #244]	; (800e54c <netconn_accept+0x110>)
 800e456:	f018 fd3d 	bl	8026ed4 <iprintf>
 800e45a:	f06f 030f 	mvn.w	r3, #15
 800e45e:	e06c      	b.n	800e53a <netconn_accept+0xfe>
  *new_conn = NULL;
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	2200      	movs	r2, #0
 800e464:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d109      	bne.n	800e480 <netconn_accept+0x44>
 800e46c:	4b35      	ldr	r3, [pc, #212]	; (800e544 <netconn_accept+0x108>)
 800e46e:	f240 12e3 	movw	r2, #483	; 0x1e3
 800e472:	4937      	ldr	r1, [pc, #220]	; (800e550 <netconn_accept+0x114>)
 800e474:	4835      	ldr	r0, [pc, #212]	; (800e54c <netconn_accept+0x110>)
 800e476:	f018 fd2d 	bl	8026ed4 <iprintf>
 800e47a:	f06f 030f 	mvn.w	r3, #15
 800e47e:	e05c      	b.n	800e53a <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	f000 fb99 	bl	800ebb8 <netconn_err>
 800e486:	4603      	mov	r3, r0
 800e488:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800e48a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d002      	beq.n	800e498 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800e492:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e496:	e050      	b.n	800e53a <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	3314      	adds	r3, #20
 800e49c:	4618      	mov	r0, r3
 800e49e:	f013 fbc8 	bl	8021c32 <sys_mbox_valid>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d005      	beq.n	800e4b4 <netconn_accept+0x78>
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	7f1b      	ldrb	r3, [r3, #28]
 800e4ac:	f003 0301 	and.w	r3, r3, #1
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d002      	beq.n	800e4ba <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800e4b4:	f06f 030e 	mvn.w	r3, #14
 800e4b8:	e03f      	b.n	800e53a <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	7f1b      	ldrb	r3, [r3, #28]
 800e4be:	f003 0302 	and.w	r3, r3, #2
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d00e      	beq.n	800e4e4 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	3314      	adds	r3, #20
 800e4ca:	f107 020c 	add.w	r2, r7, #12
 800e4ce:	4611      	mov	r1, r2
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f013 fb92 	bl	8021bfa <sys_arch_mbox_tryfetch>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4dc:	d10a      	bne.n	800e4f4 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800e4de:	f06f 0306 	mvn.w	r3, #6
 800e4e2:	e02a      	b.n	800e53a <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	3314      	adds	r3, #20
 800e4e8:	f107 010c 	add.w	r1, r7, #12
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f013 fb44 	bl	8021b7c <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d005      	beq.n	800e508 <netconn_accept+0xcc>
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e500:	2200      	movs	r2, #0
 800e502:	2101      	movs	r1, #1
 800e504:	6878      	ldr	r0, [r7, #4]
 800e506:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	f107 0213 	add.w	r2, r7, #19
 800e50e:	4611      	mov	r1, r2
 800e510:	4618      	mov	r0, r3
 800e512:	f000 fc1f 	bl	800ed54 <lwip_netconn_is_err_msg>
 800e516:	4603      	mov	r3, r0
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d002      	beq.n	800e522 <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800e51c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e520:	e00b      	b.n	800e53a <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d102      	bne.n	800e52e <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800e528:	f06f 030e 	mvn.w	r3, #14
 800e52c:	e005      	b.n	800e53a <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	697a      	ldr	r2, [r7, #20]
 800e536:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800e538:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800e53a:	4618      	mov	r0, r3
 800e53c:	3718      	adds	r7, #24
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}
 800e542:	bf00      	nop
 800e544:	0802a47c 	.word	0x0802a47c
 800e548:	0802a654 	.word	0x0802a654
 800e54c:	0802a4d4 	.word	0x0802a4d4
 800e550:	0802a674 	.word	0x0802a674

0800e554 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b088      	sub	sp, #32
 800e558:	af00      	add	r7, sp, #0
 800e55a:	60f8      	str	r0, [r7, #12]
 800e55c:	60b9      	str	r1, [r7, #8]
 800e55e:	4613      	mov	r3, r2
 800e560:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800e562:	2300      	movs	r3, #0
 800e564:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d109      	bne.n	800e580 <netconn_recv_data+0x2c>
 800e56c:	4b58      	ldr	r3, [pc, #352]	; (800e6d0 <netconn_recv_data+0x17c>)
 800e56e:	f44f 7212 	mov.w	r2, #584	; 0x248
 800e572:	4958      	ldr	r1, [pc, #352]	; (800e6d4 <netconn_recv_data+0x180>)
 800e574:	4858      	ldr	r0, [pc, #352]	; (800e6d8 <netconn_recv_data+0x184>)
 800e576:	f018 fcad 	bl	8026ed4 <iprintf>
 800e57a:	f06f 030f 	mvn.w	r3, #15
 800e57e:	e0a2      	b.n	800e6c6 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	2200      	movs	r2, #0
 800e584:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d109      	bne.n	800e5a0 <netconn_recv_data+0x4c>
 800e58c:	4b50      	ldr	r3, [pc, #320]	; (800e6d0 <netconn_recv_data+0x17c>)
 800e58e:	f240 224a 	movw	r2, #586	; 0x24a
 800e592:	4952      	ldr	r1, [pc, #328]	; (800e6dc <netconn_recv_data+0x188>)
 800e594:	4850      	ldr	r0, [pc, #320]	; (800e6d8 <netconn_recv_data+0x184>)
 800e596:	f018 fc9d 	bl	8026ed4 <iprintf>
 800e59a:	f06f 030f 	mvn.w	r3, #15
 800e59e:	e092      	b.n	800e6c6 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	3310      	adds	r3, #16
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f013 fb44 	bl	8021c32 <sys_mbox_valid>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d10e      	bne.n	800e5ce <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800e5b0:	68f8      	ldr	r0, [r7, #12]
 800e5b2:	f000 fb01 	bl	800ebb8 <netconn_err>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800e5ba:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d002      	beq.n	800e5c8 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800e5c2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800e5c6:	e07e      	b.n	800e6c6 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800e5c8:	f06f 030a 	mvn.w	r3, #10
 800e5cc:	e07b      	b.n	800e6c6 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	7f1b      	ldrb	r3, [r3, #28]
 800e5d2:	f003 0302 	and.w	r3, r3, #2
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d10f      	bne.n	800e5fa <netconn_recv_data+0xa6>
 800e5da:	79fb      	ldrb	r3, [r7, #7]
 800e5dc:	f003 0304 	and.w	r3, r3, #4
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d10a      	bne.n	800e5fa <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	7f1b      	ldrb	r3, [r3, #28]
 800e5e8:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d104      	bne.n	800e5fa <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d023      	beq.n	800e642 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	3310      	adds	r3, #16
 800e5fe:	f107 0218 	add.w	r2, r7, #24
 800e602:	4611      	mov	r1, r2
 800e604:	4618      	mov	r0, r3
 800e606:	f013 faf8 	bl	8021bfa <sys_arch_mbox_tryfetch>
 800e60a:	4603      	mov	r3, r0
 800e60c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e610:	d11f      	bne.n	800e652 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800e612:	68f8      	ldr	r0, [r7, #12]
 800e614:	f000 fad0 	bl	800ebb8 <netconn_err>
 800e618:	4603      	mov	r3, r0
 800e61a:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800e61c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d002      	beq.n	800e62a <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800e624:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e628:	e04d      	b.n	800e6c6 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	7f1b      	ldrb	r3, [r3, #28]
 800e62e:	f003 0301 	and.w	r3, r3, #1
 800e632:	2b00      	cmp	r3, #0
 800e634:	d002      	beq.n	800e63c <netconn_recv_data+0xe8>
        return ERR_CONN;
 800e636:	f06f 030a 	mvn.w	r3, #10
 800e63a:	e044      	b.n	800e6c6 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800e63c:	f06f 0306 	mvn.w	r3, #6
 800e640:	e041      	b.n	800e6c6 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	3310      	adds	r3, #16
 800e646:	f107 0118 	add.w	r1, r7, #24
 800e64a:	2200      	movs	r2, #0
 800e64c:	4618      	mov	r0, r3
 800e64e:	f013 fa95 	bl	8021b7c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	781b      	ldrb	r3, [r3, #0]
 800e656:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e65a:	2b10      	cmp	r3, #16
 800e65c:	d117      	bne.n	800e68e <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800e65e:	69bb      	ldr	r3, [r7, #24]
 800e660:	f107 0217 	add.w	r2, r7, #23
 800e664:	4611      	mov	r1, r2
 800e666:	4618      	mov	r0, r3
 800e668:	f000 fb74 	bl	800ed54 <lwip_netconn_is_err_msg>
 800e66c:	4603      	mov	r3, r0
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d009      	beq.n	800e686 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800e672:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e676:	f113 0f0f 	cmn.w	r3, #15
 800e67a:	d101      	bne.n	800e680 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800e67c:	2300      	movs	r3, #0
 800e67e:	e022      	b.n	800e6c6 <netconn_recv_data+0x172>
      }
      return err;
 800e680:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e684:	e01f      	b.n	800e6c6 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800e686:	69bb      	ldr	r3, [r7, #24]
 800e688:	891b      	ldrh	r3, [r3, #8]
 800e68a:	83fb      	strh	r3, [r7, #30]
 800e68c:	e00d      	b.n	800e6aa <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800e68e:	69bb      	ldr	r3, [r7, #24]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d106      	bne.n	800e6a2 <netconn_recv_data+0x14e>
 800e694:	4b0e      	ldr	r3, [pc, #56]	; (800e6d0 <netconn_recv_data+0x17c>)
 800e696:	f240 2291 	movw	r2, #657	; 0x291
 800e69a:	4911      	ldr	r1, [pc, #68]	; (800e6e0 <netconn_recv_data+0x18c>)
 800e69c:	480e      	ldr	r0, [pc, #56]	; (800e6d8 <netconn_recv_data+0x184>)
 800e69e:	f018 fc19 	bl	8026ed4 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800e6a2:	69bb      	ldr	r3, [r7, #24]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	891b      	ldrh	r3, [r3, #8]
 800e6a8:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d005      	beq.n	800e6be <netconn_recv_data+0x16a>
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6b6:	8bfa      	ldrh	r2, [r7, #30]
 800e6b8:	2101      	movs	r1, #1
 800e6ba:	68f8      	ldr	r0, [r7, #12]
 800e6bc:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800e6be:	69ba      	ldr	r2, [r7, #24]
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800e6c4:	2300      	movs	r3, #0
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3720      	adds	r7, #32
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}
 800e6ce:	bf00      	nop
 800e6d0:	0802a47c 	.word	0x0802a47c
 800e6d4:	0802a694 	.word	0x0802a694
 800e6d8:	0802a4d4 	.word	0x0802a4d4
 800e6dc:	0802a6b4 	.word	0x0802a6b4
 800e6e0:	0802a6d0 	.word	0x0802a6d0

0800e6e4 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b084      	sub	sp, #16
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	60f8      	str	r0, [r7, #12]
 800e6ec:	60b9      	str	r1, [r7, #8]
 800e6ee:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d005      	beq.n	800e702 <netconn_tcp_recvd_msg+0x1e>
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	781b      	ldrb	r3, [r3, #0]
 800e6fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e6fe:	2b10      	cmp	r3, #16
 800e700:	d009      	beq.n	800e716 <netconn_tcp_recvd_msg+0x32>
 800e702:	4b0c      	ldr	r3, [pc, #48]	; (800e734 <netconn_tcp_recvd_msg+0x50>)
 800e704:	f240 22a7 	movw	r2, #679	; 0x2a7
 800e708:	490b      	ldr	r1, [pc, #44]	; (800e738 <netconn_tcp_recvd_msg+0x54>)
 800e70a:	480c      	ldr	r0, [pc, #48]	; (800e73c <netconn_tcp_recvd_msg+0x58>)
 800e70c:	f018 fbe2 	bl	8026ed4 <iprintf>
 800e710:	f06f 030f 	mvn.w	r3, #15
 800e714:	e00a      	b.n	800e72c <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	68fa      	ldr	r2, [r7, #12]
 800e71a:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	68ba      	ldr	r2, [r7, #8]
 800e720:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800e722:	6879      	ldr	r1, [r7, #4]
 800e724:	4806      	ldr	r0, [pc, #24]	; (800e740 <netconn_tcp_recvd_msg+0x5c>)
 800e726:	f7ff fc99 	bl	800e05c <netconn_apimsg>
 800e72a:	4603      	mov	r3, r0
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	3710      	adds	r7, #16
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}
 800e734:	0802a47c 	.word	0x0802a47c
 800e738:	0802a6dc 	.word	0x0802a6dc
 800e73c:	0802a4d4 	.word	0x0802a4d4
 800e740:	080101cb 	.word	0x080101cb

0800e744 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b08c      	sub	sp, #48	; 0x30
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
 800e74c:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d005      	beq.n	800e760 <netconn_tcp_recvd+0x1c>
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	781b      	ldrb	r3, [r3, #0]
 800e758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e75c:	2b10      	cmp	r3, #16
 800e75e:	d009      	beq.n	800e774 <netconn_tcp_recvd+0x30>
 800e760:	4b0c      	ldr	r3, [pc, #48]	; (800e794 <netconn_tcp_recvd+0x50>)
 800e762:	f240 22b5 	movw	r2, #693	; 0x2b5
 800e766:	490c      	ldr	r1, [pc, #48]	; (800e798 <netconn_tcp_recvd+0x54>)
 800e768:	480c      	ldr	r0, [pc, #48]	; (800e79c <netconn_tcp_recvd+0x58>)
 800e76a:	f018 fbb3 	bl	8026ed4 <iprintf>
 800e76e:	f06f 030f 	mvn.w	r3, #15
 800e772:	e00b      	b.n	800e78c <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 800e774:	f107 030c 	add.w	r3, r7, #12
 800e778:	461a      	mov	r2, r3
 800e77a:	6839      	ldr	r1, [r7, #0]
 800e77c:	6878      	ldr	r0, [r7, #4]
 800e77e:	f7ff ffb1 	bl	800e6e4 <netconn_tcp_recvd_msg>
 800e782:	4603      	mov	r3, r0
 800e784:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 800e788:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800e78c:	4618      	mov	r0, r3
 800e78e:	3730      	adds	r7, #48	; 0x30
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}
 800e794:	0802a47c 	.word	0x0802a47c
 800e798:	0802a6dc 	.word	0x0802a6dc
 800e79c:	0802a4d4 	.word	0x0802a4d4

0800e7a0 <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b090      	sub	sp, #64	; 0x40
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	60f8      	str	r0, [r7, #12]
 800e7a8:	60b9      	str	r1, [r7, #8]
 800e7aa:	4613      	mov	r3, r2
 800e7ac:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	3310      	adds	r3, #16
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f013 fa3d 	bl	8021c32 <sys_mbox_valid>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d102      	bne.n	800e7c4 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800e7be:	f06f 030a 	mvn.w	r3, #10
 800e7c2:	e06d      	b.n	800e8a0 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	7f1b      	ldrb	r3, [r3, #28]
 800e7c8:	b25b      	sxtb	r3, r3
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	da07      	bge.n	800e7de <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	7f1b      	ldrb	r3, [r3, #28]
 800e7d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e7d6:	b2da      	uxtb	r2, r3
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800e7dc:	e039      	b.n	800e852 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800e7de:	79fb      	ldrb	r3, [r7, #7]
 800e7e0:	461a      	mov	r2, r3
 800e7e2:	68b9      	ldr	r1, [r7, #8]
 800e7e4:	68f8      	ldr	r0, [r7, #12]
 800e7e6:	f7ff feb5 	bl	800e554 <netconn_recv_data>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800e7f0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d002      	beq.n	800e7fe <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800e7f8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e7fc:	e050      	b.n	800e8a0 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800e7fe:	68bb      	ldr	r3, [r7, #8]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800e804:	79fb      	ldrb	r3, [r7, #7]
 800e806:	f003 0308 	and.w	r3, r3, #8
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d10e      	bne.n	800e82c <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800e80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e810:	2b00      	cmp	r3, #0
 800e812:	d002      	beq.n	800e81a <netconn_recv_data_tcp+0x7a>
 800e814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e816:	891b      	ldrh	r3, [r3, #8]
 800e818:	e000      	b.n	800e81c <netconn_recv_data_tcp+0x7c>
 800e81a:	2301      	movs	r3, #1
 800e81c:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800e81e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e820:	f107 0214 	add.w	r2, r7, #20
 800e824:	4619      	mov	r1, r3
 800e826:	68f8      	ldr	r0, [r7, #12]
 800e828:	f7ff ff5c 	bl	800e6e4 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800e82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d134      	bne.n	800e89c <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800e832:	79fb      	ldrb	r3, [r7, #7]
 800e834:	f003 0310 	and.w	r3, r3, #16
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d009      	beq.n	800e850 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	7f1b      	ldrb	r3, [r3, #28]
 800e840:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e844:	b2da      	uxtb	r2, r3
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800e84a:	f06f 0306 	mvn.w	r3, #6
 800e84e:	e027      	b.n	800e8a0 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800e850:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e856:	2b00      	cmp	r3, #0
 800e858:	d005      	beq.n	800e866 <netconn_recv_data_tcp+0xc6>
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e85e:	2200      	movs	r2, #0
 800e860:	2101      	movs	r1, #1
 800e862:	68f8      	ldr	r0, [r7, #12]
 800e864:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	685b      	ldr	r3, [r3, #4]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d10f      	bne.n	800e88e <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800e86e:	68f8      	ldr	r0, [r7, #12]
 800e870:	f000 f9a2 	bl	800ebb8 <netconn_err>
 800e874:	4603      	mov	r3, r0
 800e876:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800e87a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d002      	beq.n	800e888 <netconn_recv_data_tcp+0xe8>
          return err;
 800e882:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e886:	e00b      	b.n	800e8a0 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800e888:	f06f 030d 	mvn.w	r3, #13
 800e88c:	e008      	b.n	800e8a0 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800e88e:	2101      	movs	r1, #1
 800e890:	68f8      	ldr	r0, [r7, #12]
 800e892:	f000 f961 	bl	800eb58 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800e896:	f06f 030e 	mvn.w	r3, #14
 800e89a:	e001      	b.n	800e8a0 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800e89c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	3740      	adds	r7, #64	; 0x40
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}

0800e8a8 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b084      	sub	sp, #16
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	60f8      	str	r0, [r7, #12]
 800e8b0:	60b9      	str	r1, [r7, #8]
 800e8b2:	4613      	mov	r3, r2
 800e8b4:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d005      	beq.n	800e8c8 <netconn_recv_tcp_pbuf_flags+0x20>
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	781b      	ldrb	r3, [r3, #0]
 800e8c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e8c4:	2b10      	cmp	r3, #16
 800e8c6:	d009      	beq.n	800e8dc <netconn_recv_tcp_pbuf_flags+0x34>
 800e8c8:	4b0a      	ldr	r3, [pc, #40]	; (800e8f4 <netconn_recv_tcp_pbuf_flags+0x4c>)
 800e8ca:	f240 3225 	movw	r2, #805	; 0x325
 800e8ce:	490a      	ldr	r1, [pc, #40]	; (800e8f8 <netconn_recv_tcp_pbuf_flags+0x50>)
 800e8d0:	480a      	ldr	r0, [pc, #40]	; (800e8fc <netconn_recv_tcp_pbuf_flags+0x54>)
 800e8d2:	f018 faff 	bl	8026ed4 <iprintf>
 800e8d6:	f06f 030f 	mvn.w	r3, #15
 800e8da:	e006      	b.n	800e8ea <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 800e8dc:	79fb      	ldrb	r3, [r7, #7]
 800e8de:	461a      	mov	r2, r3
 800e8e0:	68b9      	ldr	r1, [r7, #8]
 800e8e2:	68f8      	ldr	r0, [r7, #12]
 800e8e4:	f7ff ff5c 	bl	800e7a0 <netconn_recv_data_tcp>
 800e8e8:	4603      	mov	r3, r0
}
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	3710      	adds	r7, #16
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	bd80      	pop	{r7, pc}
 800e8f2:	bf00      	nop
 800e8f4:	0802a47c 	.word	0x0802a47c
 800e8f8:	0802a6dc 	.word	0x0802a6dc
 800e8fc:	0802a4d4 	.word	0x0802a4d4

0800e900 <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b084      	sub	sp, #16
 800e904:	af00      	add	r7, sp, #0
 800e906:	60f8      	str	r0, [r7, #12]
 800e908:	60b9      	str	r1, [r7, #8]
 800e90a:	4613      	mov	r3, r2
 800e90c:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d005      	beq.n	800e920 <netconn_recv_udp_raw_netbuf_flags+0x20>
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	781b      	ldrb	r3, [r3, #0]
 800e918:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e91c:	2b10      	cmp	r3, #16
 800e91e:	d109      	bne.n	800e934 <netconn_recv_udp_raw_netbuf_flags+0x34>
 800e920:	4b0a      	ldr	r3, [pc, #40]	; (800e94c <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 800e922:	f44f 7253 	mov.w	r2, #844	; 0x34c
 800e926:	490a      	ldr	r1, [pc, #40]	; (800e950 <netconn_recv_udp_raw_netbuf_flags+0x50>)
 800e928:	480a      	ldr	r0, [pc, #40]	; (800e954 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 800e92a:	f018 fad3 	bl	8026ed4 <iprintf>
 800e92e:	f06f 030f 	mvn.w	r3, #15
 800e932:	e006      	b.n	800e942 <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 800e934:	79fb      	ldrb	r3, [r7, #7]
 800e936:	461a      	mov	r2, r3
 800e938:	68b9      	ldr	r1, [r7, #8]
 800e93a:	68f8      	ldr	r0, [r7, #12]
 800e93c:	f7ff fe0a 	bl	800e554 <netconn_recv_data>
 800e940:	4603      	mov	r3, r0
}
 800e942:	4618      	mov	r0, r3
 800e944:	3710      	adds	r7, #16
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}
 800e94a:	bf00      	nop
 800e94c:	0802a47c 	.word	0x0802a47c
 800e950:	0802a700 	.word	0x0802a700
 800e954:	0802a4d4 	.word	0x0802a4d4

0800e958 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b08c      	sub	sp, #48	; 0x30
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
 800e960:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d109      	bne.n	800e97c <netconn_send+0x24>
 800e968:	4b0e      	ldr	r3, [pc, #56]	; (800e9a4 <netconn_send+0x4c>)
 800e96a:	f240 32b2 	movw	r2, #946	; 0x3b2
 800e96e:	490e      	ldr	r1, [pc, #56]	; (800e9a8 <netconn_send+0x50>)
 800e970:	480e      	ldr	r0, [pc, #56]	; (800e9ac <netconn_send+0x54>)
 800e972:	f018 faaf 	bl	8026ed4 <iprintf>
 800e976:	f06f 030f 	mvn.w	r3, #15
 800e97a:	e00e      	b.n	800e99a <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800e984:	f107 030c 	add.w	r3, r7, #12
 800e988:	4619      	mov	r1, r3
 800e98a:	4809      	ldr	r0, [pc, #36]	; (800e9b0 <netconn_send+0x58>)
 800e98c:	f7ff fb66 	bl	800e05c <netconn_apimsg>
 800e990:	4603      	mov	r3, r0
 800e992:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800e996:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3730      	adds	r7, #48	; 0x30
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}
 800e9a2:	bf00      	nop
 800e9a4:	0802a47c 	.word	0x0802a47c
 800e9a8:	0802a738 	.word	0x0802a738
 800e9ac:	0802a4d4 	.word	0x0802a4d4
 800e9b0:	08010131 	.word	0x08010131

0800e9b4 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b088      	sub	sp, #32
 800e9b8:	af02      	add	r7, sp, #8
 800e9ba:	60f8      	str	r0, [r7, #12]
 800e9bc:	60b9      	str	r1, [r7, #8]
 800e9be:	607a      	str	r2, [r7, #4]
 800e9c0:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800e9c2:	68bb      	ldr	r3, [r7, #8]
 800e9c4:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800e9ca:	78fa      	ldrb	r2, [r7, #3]
 800e9cc:	f107 0110 	add.w	r1, r7, #16
 800e9d0:	6a3b      	ldr	r3, [r7, #32]
 800e9d2:	9300      	str	r3, [sp, #0]
 800e9d4:	4613      	mov	r3, r2
 800e9d6:	2201      	movs	r2, #1
 800e9d8:	68f8      	ldr	r0, [r7, #12]
 800e9da:	f000 f805 	bl	800e9e8 <netconn_write_vectors_partly>
 800e9de:	4603      	mov	r3, r0
}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	3718      	adds	r7, #24
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b092      	sub	sp, #72	; 0x48
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	60f8      	str	r0, [r7, #12]
 800e9f0:	60b9      	str	r1, [r7, #8]
 800e9f2:	4611      	mov	r1, r2
 800e9f4:	461a      	mov	r2, r3
 800e9f6:	460b      	mov	r3, r1
 800e9f8:	80fb      	strh	r3, [r7, #6]
 800e9fa:	4613      	mov	r3, r2
 800e9fc:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d109      	bne.n	800ea18 <netconn_write_vectors_partly+0x30>
 800ea04:	4b4e      	ldr	r3, [pc, #312]	; (800eb40 <netconn_write_vectors_partly+0x158>)
 800ea06:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800ea0a:	494e      	ldr	r1, [pc, #312]	; (800eb44 <netconn_write_vectors_partly+0x15c>)
 800ea0c:	484e      	ldr	r0, [pc, #312]	; (800eb48 <netconn_write_vectors_partly+0x160>)
 800ea0e:	f018 fa61 	bl	8026ed4 <iprintf>
 800ea12:	f06f 030f 	mvn.w	r3, #15
 800ea16:	e08e      	b.n	800eb36 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	781b      	ldrb	r3, [r3, #0]
 800ea1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ea20:	2b10      	cmp	r3, #16
 800ea22:	d009      	beq.n	800ea38 <netconn_write_vectors_partly+0x50>
 800ea24:	4b46      	ldr	r3, [pc, #280]	; (800eb40 <netconn_write_vectors_partly+0x158>)
 800ea26:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800ea2a:	4948      	ldr	r1, [pc, #288]	; (800eb4c <netconn_write_vectors_partly+0x164>)
 800ea2c:	4846      	ldr	r0, [pc, #280]	; (800eb48 <netconn_write_vectors_partly+0x160>)
 800ea2e:	f018 fa51 	bl	8026ed4 <iprintf>
 800ea32:	f06f 0305 	mvn.w	r3, #5
 800ea36:	e07e      	b.n	800eb36 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	7f1b      	ldrb	r3, [r3, #28]
 800ea3c:	f003 0302 	and.w	r3, r3, #2
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d104      	bne.n	800ea4e <netconn_write_vectors_partly+0x66>
 800ea44:	797b      	ldrb	r3, [r7, #5]
 800ea46:	f003 0304 	and.w	r3, r3, #4
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d001      	beq.n	800ea52 <netconn_write_vectors_partly+0x6a>
 800ea4e:	2301      	movs	r3, #1
 800ea50:	e000      	b.n	800ea54 <netconn_write_vectors_partly+0x6c>
 800ea52:	2300      	movs	r3, #0
 800ea54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800ea58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d005      	beq.n	800ea6c <netconn_write_vectors_partly+0x84>
 800ea60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d102      	bne.n	800ea6c <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800ea66:	f06f 0305 	mvn.w	r3, #5
 800ea6a:	e064      	b.n	800eb36 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800ea70:	2300      	movs	r3, #0
 800ea72:	643b      	str	r3, [r7, #64]	; 0x40
 800ea74:	e015      	b.n	800eaa2 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800ea76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea78:	00db      	lsls	r3, r3, #3
 800ea7a:	68ba      	ldr	r2, [r7, #8]
 800ea7c:	4413      	add	r3, r2
 800ea7e:	685b      	ldr	r3, [r3, #4]
 800ea80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea82:	4413      	add	r3, r2
 800ea84:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800ea86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea88:	00db      	lsls	r3, r3, #3
 800ea8a:	68ba      	ldr	r2, [r7, #8]
 800ea8c:	4413      	add	r3, r2
 800ea8e:	685b      	ldr	r3, [r3, #4]
 800ea90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea92:	429a      	cmp	r2, r3
 800ea94:	d202      	bcs.n	800ea9c <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800ea96:	f06f 0305 	mvn.w	r3, #5
 800ea9a:	e04c      	b.n	800eb36 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800ea9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea9e:	3301      	adds	r3, #1
 800eaa0:	643b      	str	r3, [r7, #64]	; 0x40
 800eaa2:	88fb      	ldrh	r3, [r7, #6]
 800eaa4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eaa6:	429a      	cmp	r2, r3
 800eaa8:	dbe5      	blt.n	800ea76 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800eaaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d101      	bne.n	800eab4 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800eab0:	2300      	movs	r3, #0
 800eab2:	e040      	b.n	800eb36 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800eab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	da0a      	bge.n	800ead0 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800eaba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d102      	bne.n	800eac6 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800eac0:	f06f 0305 	mvn.w	r3, #5
 800eac4:	e037      	b.n	800eb36 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800eac6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800eaca:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800eacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eace:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800ead4:	68bb      	ldr	r3, [r7, #8]
 800ead6:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800ead8:	88fb      	ldrh	r3, [r7, #6]
 800eada:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800eadc:	2300      	movs	r3, #0
 800eade:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800eae0:	797b      	ldrb	r3, [r7, #5]
 800eae2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800eae6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eae8:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800eaea:	2300      	movs	r3, #0
 800eaec:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800eaee:	f107 0314 	add.w	r3, r7, #20
 800eaf2:	4619      	mov	r1, r3
 800eaf4:	4816      	ldr	r0, [pc, #88]	; (800eb50 <netconn_write_vectors_partly+0x168>)
 800eaf6:	f7ff fab1 	bl	800e05c <netconn_apimsg>
 800eafa:	4603      	mov	r3, r0
 800eafc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800eb00:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d114      	bne.n	800eb32 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800eb08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d002      	beq.n	800eb14 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800eb0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb12:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800eb14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d10a      	bne.n	800eb32 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800eb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb20:	429a      	cmp	r2, r3
 800eb22:	d006      	beq.n	800eb32 <netconn_write_vectors_partly+0x14a>
 800eb24:	4b06      	ldr	r3, [pc, #24]	; (800eb40 <netconn_write_vectors_partly+0x158>)
 800eb26:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800eb2a:	490a      	ldr	r1, [pc, #40]	; (800eb54 <netconn_write_vectors_partly+0x16c>)
 800eb2c:	4806      	ldr	r0, [pc, #24]	; (800eb48 <netconn_write_vectors_partly+0x160>)
 800eb2e:	f018 f9d1 	bl	8026ed4 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800eb32:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800eb36:	4618      	mov	r0, r3
 800eb38:	3748      	adds	r7, #72	; 0x48
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd80      	pop	{r7, pc}
 800eb3e:	bf00      	nop
 800eb40:	0802a47c 	.word	0x0802a47c
 800eb44:	0802a754 	.word	0x0802a754
 800eb48:	0802a4d4 	.word	0x0802a4d4
 800eb4c:	0802a770 	.word	0x0802a770
 800eb50:	080105cd 	.word	0x080105cd
 800eb54:	0802a794 	.word	0x0802a794

0800eb58 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b08c      	sub	sp, #48	; 0x30
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
 800eb60:	460b      	mov	r3, r1
 800eb62:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d109      	bne.n	800eb7e <netconn_close_shutdown+0x26>
 800eb6a:	4b0f      	ldr	r3, [pc, #60]	; (800eba8 <netconn_close_shutdown+0x50>)
 800eb6c:	f240 4247 	movw	r2, #1095	; 0x447
 800eb70:	490e      	ldr	r1, [pc, #56]	; (800ebac <netconn_close_shutdown+0x54>)
 800eb72:	480f      	ldr	r0, [pc, #60]	; (800ebb0 <netconn_close_shutdown+0x58>)
 800eb74:	f018 f9ae 	bl	8026ed4 <iprintf>
 800eb78:	f06f 030f 	mvn.w	r3, #15
 800eb7c:	e010      	b.n	800eba0 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800eb82:	78fb      	ldrb	r3, [r7, #3]
 800eb84:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800eb86:	2329      	movs	r3, #41	; 0x29
 800eb88:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800eb8a:	f107 030c 	add.w	r3, r7, #12
 800eb8e:	4619      	mov	r1, r3
 800eb90:	4808      	ldr	r0, [pc, #32]	; (800ebb4 <netconn_close_shutdown+0x5c>)
 800eb92:	f7ff fa63 	bl	800e05c <netconn_apimsg>
 800eb96:	4603      	mov	r3, r0
 800eb98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800eb9c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800eba0:	4618      	mov	r0, r3
 800eba2:	3730      	adds	r7, #48	; 0x30
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}
 800eba8:	0802a47c 	.word	0x0802a47c
 800ebac:	0802a7b8 	.word	0x0802a7b8
 800ebb0:	0802a4d4 	.word	0x0802a4d4
 800ebb4:	080107f1 	.word	0x080107f1

0800ebb8 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b084      	sub	sp, #16
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d101      	bne.n	800ebca <netconn_err+0x12>
    return ERR_OK;
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	e00d      	b.n	800ebe6 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800ebca:	f013 f94d 	bl	8021e68 <sys_arch_protect>
 800ebce:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	7a1b      	ldrb	r3, [r3, #8]
 800ebd4:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	2200      	movs	r2, #0
 800ebda:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800ebdc:	68f8      	ldr	r0, [r7, #12]
 800ebde:	f013 f951 	bl	8021e84 <sys_arch_unprotect>
  return err;
 800ebe2:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	3710      	adds	r7, #16
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}

0800ebee <netconn_shutdown>:
 * @param shut_tx shut down the TX side (no more write possible after this)
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_shutdown(struct netconn *conn, u8_t shut_rx, u8_t shut_tx)
{
 800ebee:	b580      	push	{r7, lr}
 800ebf0:	b082      	sub	sp, #8
 800ebf2:	af00      	add	r7, sp, #0
 800ebf4:	6078      	str	r0, [r7, #4]
 800ebf6:	460b      	mov	r3, r1
 800ebf8:	70fb      	strb	r3, [r7, #3]
 800ebfa:	4613      	mov	r3, r2
 800ebfc:	70bb      	strb	r3, [r7, #2]
  return netconn_close_shutdown(conn, (u8_t)((shut_rx ? NETCONN_SHUT_RD : 0) | (shut_tx ? NETCONN_SHUT_WR : 0)));
 800ebfe:	78fb      	ldrb	r3, [r7, #3]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d001      	beq.n	800ec08 <netconn_shutdown+0x1a>
 800ec04:	2201      	movs	r2, #1
 800ec06:	e000      	b.n	800ec0a <netconn_shutdown+0x1c>
 800ec08:	2200      	movs	r2, #0
 800ec0a:	78bb      	ldrb	r3, [r7, #2]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d001      	beq.n	800ec14 <netconn_shutdown+0x26>
 800ec10:	2302      	movs	r3, #2
 800ec12:	e000      	b.n	800ec16 <netconn_shutdown+0x28>
 800ec14:	2300      	movs	r3, #0
 800ec16:	4313      	orrs	r3, r2
 800ec18:	b25b      	sxtb	r3, r3
 800ec1a:	b2db      	uxtb	r3, r3
 800ec1c:	4619      	mov	r1, r3
 800ec1e:	6878      	ldr	r0, [r7, #4]
 800ec20:	f7ff ff9a 	bl	800eb58 <netconn_close_shutdown>
 800ec24:	4603      	mov	r3, r0
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	3708      	adds	r7, #8
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}
	...

0800ec30 <netconn_gethostbyname>:
netconn_gethostbyname_addrtype(const char *name, ip_addr_t *addr, u8_t dns_addrtype)
#else
err_t
netconn_gethostbyname(const char *name, ip_addr_t *addr)
#endif
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b08a      	sub	sp, #40	; 0x28
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
 800ec38:	6039      	str	r1, [r7, #0]
  sys_sem_t sem;
#endif /* LWIP_MPU_COMPATIBLE */
  err_t err;
  err_t cberr;

  LWIP_ERROR("netconn_gethostbyname: invalid name", (name != NULL), return ERR_ARG;);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d109      	bne.n	800ec54 <netconn_gethostbyname+0x24>
 800ec40:	4b24      	ldr	r3, [pc, #144]	; (800ecd4 <netconn_gethostbyname+0xa4>)
 800ec42:	f240 5204 	movw	r2, #1284	; 0x504
 800ec46:	4924      	ldr	r1, [pc, #144]	; (800ecd8 <netconn_gethostbyname+0xa8>)
 800ec48:	4824      	ldr	r0, [pc, #144]	; (800ecdc <netconn_gethostbyname+0xac>)
 800ec4a:	f018 f943 	bl	8026ed4 <iprintf>
 800ec4e:	f06f 030f 	mvn.w	r3, #15
 800ec52:	e03b      	b.n	800eccc <netconn_gethostbyname+0x9c>
  LWIP_ERROR("netconn_gethostbyname: invalid addr", (addr != NULL), return ERR_ARG;);
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d109      	bne.n	800ec6e <netconn_gethostbyname+0x3e>
 800ec5a:	4b1e      	ldr	r3, [pc, #120]	; (800ecd4 <netconn_gethostbyname+0xa4>)
 800ec5c:	f240 5205 	movw	r2, #1285	; 0x505
 800ec60:	491f      	ldr	r1, [pc, #124]	; (800ece0 <netconn_gethostbyname+0xb0>)
 800ec62:	481e      	ldr	r0, [pc, #120]	; (800ecdc <netconn_gethostbyname+0xac>)
 800ec64:	f018 f936 	bl	8026ed4 <iprintf>
 800ec68:	f06f 030f 	mvn.w	r3, #15
 800ec6c:	e02e      	b.n	800eccc <netconn_gethostbyname+0x9c>
  API_VAR_ALLOC(struct dns_api_msg, MEMP_DNS_API_MSG, msg, ERR_MEM);
#if LWIP_MPU_COMPATIBLE
  strncpy(API_VAR_REF(msg).name, name, DNS_MAX_NAME_LENGTH - 1);
  API_VAR_REF(msg).name[DNS_MAX_NAME_LENGTH - 1] = 0;
#else /* LWIP_MPU_COMPATIBLE */
  msg.err = &err;
 800ec6e:	f107 030f 	add.w	r3, r7, #15
 800ec72:	623b      	str	r3, [r7, #32]
  msg.sem = &sem;
 800ec74:	f107 0310 	add.w	r3, r7, #16
 800ec78:	61fb      	str	r3, [r7, #28]
  API_VAR_REF(msg).addr = API_VAR_REF(addr);
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	61bb      	str	r3, [r7, #24]
  API_VAR_REF(msg).name = name;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	617b      	str	r3, [r7, #20]
  API_VAR_REF(msg).dns_addrtype = dns_addrtype;
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_NETCONN_SEM_PER_THREAD
  API_VAR_REF(msg).sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD*/
  err = sys_sem_new(API_EXPR_REF(API_VAR_REF(msg).sem), 0);
 800ec82:	69fb      	ldr	r3, [r7, #28]
 800ec84:	2100      	movs	r1, #0
 800ec86:	4618      	mov	r0, r3
 800ec88:	f012 fff1 	bl	8021c6e <sys_sem_new>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ec90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d002      	beq.n	800ec9e <netconn_gethostbyname+0x6e>
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return err;
 800ec98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec9c:	e016      	b.n	800eccc <netconn_gethostbyname+0x9c>
  }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  cberr = tcpip_send_msg_wait_sem(lwip_netconn_do_gethostbyname, &API_VAR_REF(msg), API_EXPR_REF(API_VAR_REF(msg).sem));
 800ec9e:	69fa      	ldr	r2, [r7, #28]
 800eca0:	f107 0314 	add.w	r3, r7, #20
 800eca4:	4619      	mov	r1, r3
 800eca6:	480f      	ldr	r0, [pc, #60]	; (800ece4 <netconn_gethostbyname+0xb4>)
 800eca8:	f003 ff7e 	bl	8012ba8 <tcpip_send_msg_wait_sem>
 800ecac:	4603      	mov	r3, r0
 800ecae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(API_EXPR_REF(API_VAR_REF(msg).sem));
 800ecb2:	69fb      	ldr	r3, [r7, #28]
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f013 f840 	bl	8021d3a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
  if (cberr != ERR_OK) {
 800ecba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d002      	beq.n	800ecc8 <netconn_gethostbyname+0x98>
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return cberr;
 800ecc2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ecc6:	e001      	b.n	800eccc <netconn_gethostbyname+0x9c>
  *addr = msg->addr;
  err = msg->err;
#endif /* LWIP_MPU_COMPATIBLE */

  API_VAR_FREE(MEMP_DNS_API_MSG, msg);
  return err;
 800ecc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eccc:	4618      	mov	r0, r3
 800ecce:	3728      	adds	r7, #40	; 0x28
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bd80      	pop	{r7, pc}
 800ecd4:	0802a47c 	.word	0x0802a47c
 800ecd8:	0802a7d4 	.word	0x0802a7d4
 800ecdc:	0802a4d4 	.word	0x0802a4d4
 800ece0:	0802a7f8 	.word	0x0802a7f8
 800ece4:	0801094d 	.word	0x0801094d

0800ece8 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b082      	sub	sp, #8
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	4603      	mov	r3, r0
 800ecf0:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800ecf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ecf6:	f113 0f0d 	cmn.w	r3, #13
 800ecfa:	d009      	beq.n	800ed10 <lwip_netconn_err_to_msg+0x28>
 800ecfc:	f113 0f0d 	cmn.w	r3, #13
 800ed00:	dc0c      	bgt.n	800ed1c <lwip_netconn_err_to_msg+0x34>
 800ed02:	f113 0f0f 	cmn.w	r3, #15
 800ed06:	d007      	beq.n	800ed18 <lwip_netconn_err_to_msg+0x30>
 800ed08:	f113 0f0e 	cmn.w	r3, #14
 800ed0c:	d002      	beq.n	800ed14 <lwip_netconn_err_to_msg+0x2c>
 800ed0e:	e005      	b.n	800ed1c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800ed10:	4b0a      	ldr	r3, [pc, #40]	; (800ed3c <lwip_netconn_err_to_msg+0x54>)
 800ed12:	e00e      	b.n	800ed32 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800ed14:	4b0a      	ldr	r3, [pc, #40]	; (800ed40 <lwip_netconn_err_to_msg+0x58>)
 800ed16:	e00c      	b.n	800ed32 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800ed18:	4b0a      	ldr	r3, [pc, #40]	; (800ed44 <lwip_netconn_err_to_msg+0x5c>)
 800ed1a:	e00a      	b.n	800ed32 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800ed1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d005      	beq.n	800ed30 <lwip_netconn_err_to_msg+0x48>
 800ed24:	4b08      	ldr	r3, [pc, #32]	; (800ed48 <lwip_netconn_err_to_msg+0x60>)
 800ed26:	227d      	movs	r2, #125	; 0x7d
 800ed28:	4908      	ldr	r1, [pc, #32]	; (800ed4c <lwip_netconn_err_to_msg+0x64>)
 800ed2a:	4809      	ldr	r0, [pc, #36]	; (800ed50 <lwip_netconn_err_to_msg+0x68>)
 800ed2c:	f018 f8d2 	bl	8026ed4 <iprintf>
      return NULL;
 800ed30:	2300      	movs	r3, #0
  }
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3708      	adds	r7, #8
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}
 800ed3a:	bf00      	nop
 800ed3c:	0802eae0 	.word	0x0802eae0
 800ed40:	0802eae1 	.word	0x0802eae1
 800ed44:	0802eae2 	.word	0x0802eae2
 800ed48:	0802a81c 	.word	0x0802a81c
 800ed4c:	0802a850 	.word	0x0802a850
 800ed50:	0802a860 	.word	0x0802a860

0800ed54 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b082      	sub	sp, #8
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
 800ed5c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d105      	bne.n	800ed70 <lwip_netconn_is_err_msg+0x1c>
 800ed64:	4b12      	ldr	r3, [pc, #72]	; (800edb0 <lwip_netconn_is_err_msg+0x5c>)
 800ed66:	2285      	movs	r2, #133	; 0x85
 800ed68:	4912      	ldr	r1, [pc, #72]	; (800edb4 <lwip_netconn_is_err_msg+0x60>)
 800ed6a:	4813      	ldr	r0, [pc, #76]	; (800edb8 <lwip_netconn_is_err_msg+0x64>)
 800ed6c:	f018 f8b2 	bl	8026ed4 <iprintf>

  if (msg == &netconn_aborted) {
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	4a12      	ldr	r2, [pc, #72]	; (800edbc <lwip_netconn_is_err_msg+0x68>)
 800ed74:	4293      	cmp	r3, r2
 800ed76:	d104      	bne.n	800ed82 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	22f3      	movs	r2, #243	; 0xf3
 800ed7c:	701a      	strb	r2, [r3, #0]
    return 1;
 800ed7e:	2301      	movs	r3, #1
 800ed80:	e012      	b.n	800eda8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	4a0e      	ldr	r2, [pc, #56]	; (800edc0 <lwip_netconn_is_err_msg+0x6c>)
 800ed86:	4293      	cmp	r3, r2
 800ed88:	d104      	bne.n	800ed94 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	22f2      	movs	r2, #242	; 0xf2
 800ed8e:	701a      	strb	r2, [r3, #0]
    return 1;
 800ed90:	2301      	movs	r3, #1
 800ed92:	e009      	b.n	800eda8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	4a0b      	ldr	r2, [pc, #44]	; (800edc4 <lwip_netconn_is_err_msg+0x70>)
 800ed98:	4293      	cmp	r3, r2
 800ed9a:	d104      	bne.n	800eda6 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	22f1      	movs	r2, #241	; 0xf1
 800eda0:	701a      	strb	r2, [r3, #0]
    return 1;
 800eda2:	2301      	movs	r3, #1
 800eda4:	e000      	b.n	800eda8 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800eda6:	2300      	movs	r3, #0
}
 800eda8:	4618      	mov	r0, r3
 800edaa:	3708      	adds	r7, #8
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}
 800edb0:	0802a81c 	.word	0x0802a81c
 800edb4:	0802a888 	.word	0x0802a888
 800edb8:	0802a860 	.word	0x0802a860
 800edbc:	0802eae0 	.word	0x0802eae0
 800edc0:	0802eae1 	.word	0x0802eae1
 800edc4:	0802eae2 	.word	0x0802eae2

0800edc8 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b088      	sub	sp, #32
 800edcc:	af00      	add	r7, sp, #0
 800edce:	60f8      	str	r0, [r7, #12]
 800edd0:	60b9      	str	r1, [r7, #8]
 800edd2:	607a      	str	r2, [r7, #4]
 800edd4:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800edd6:	68bb      	ldr	r3, [r7, #8]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d105      	bne.n	800ede8 <recv_udp+0x20>
 800eddc:	4b34      	ldr	r3, [pc, #208]	; (800eeb0 <recv_udp+0xe8>)
 800edde:	22e5      	movs	r2, #229	; 0xe5
 800ede0:	4934      	ldr	r1, [pc, #208]	; (800eeb4 <recv_udp+0xec>)
 800ede2:	4835      	ldr	r0, [pc, #212]	; (800eeb8 <recv_udp+0xf0>)
 800ede4:	f018 f876 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d105      	bne.n	800edfa <recv_udp+0x32>
 800edee:	4b30      	ldr	r3, [pc, #192]	; (800eeb0 <recv_udp+0xe8>)
 800edf0:	22e6      	movs	r2, #230	; 0xe6
 800edf2:	4932      	ldr	r1, [pc, #200]	; (800eebc <recv_udp+0xf4>)
 800edf4:	4830      	ldr	r0, [pc, #192]	; (800eeb8 <recv_udp+0xf0>)
 800edf6:	f018 f86d 	bl	8026ed4 <iprintf>
  conn = (struct netconn *)arg;
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800edfe:	69fb      	ldr	r3, [r7, #28]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d103      	bne.n	800ee0c <recv_udp+0x44>
    pbuf_free(p);
 800ee04:	6878      	ldr	r0, [r7, #4]
 800ee06:	f006 fe35 	bl	8015a74 <pbuf_free>
    return;
 800ee0a:	e04d      	b.n	800eea8 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800ee0c:	69fb      	ldr	r3, [r7, #28]
 800ee0e:	685b      	ldr	r3, [r3, #4]
 800ee10:	68ba      	ldr	r2, [r7, #8]
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d005      	beq.n	800ee22 <recv_udp+0x5a>
 800ee16:	4b26      	ldr	r3, [pc, #152]	; (800eeb0 <recv_udp+0xe8>)
 800ee18:	22ee      	movs	r2, #238	; 0xee
 800ee1a:	4929      	ldr	r1, [pc, #164]	; (800eec0 <recv_udp+0xf8>)
 800ee1c:	4826      	ldr	r0, [pc, #152]	; (800eeb8 <recv_udp+0xf0>)
 800ee1e:	f018 f859 	bl	8026ed4 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ee22:	69fb      	ldr	r3, [r7, #28]
 800ee24:	3310      	adds	r3, #16
 800ee26:	4618      	mov	r0, r3
 800ee28:	f012 ff03 	bl	8021c32 <sys_mbox_valid>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d103      	bne.n	800ee3a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800ee32:	6878      	ldr	r0, [r7, #4]
 800ee34:	f006 fe1e 	bl	8015a74 <pbuf_free>
    return;
 800ee38:	e036      	b.n	800eea8 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800ee3a:	2006      	movs	r0, #6
 800ee3c:	f005 fec2 	bl	8014bc4 <memp_malloc>
 800ee40:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800ee42:	69bb      	ldr	r3, [r7, #24]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d103      	bne.n	800ee50 <recv_udp+0x88>
    pbuf_free(p);
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f006 fe13 	bl	8015a74 <pbuf_free>
    return;
 800ee4e:	e02b      	b.n	800eea8 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800ee50:	69bb      	ldr	r3, [r7, #24]
 800ee52:	687a      	ldr	r2, [r7, #4]
 800ee54:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800ee56:	69bb      	ldr	r3, [r7, #24]
 800ee58:	687a      	ldr	r2, [r7, #4]
 800ee5a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d002      	beq.n	800ee68 <recv_udp+0xa0>
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	e000      	b.n	800ee6a <recv_udp+0xa2>
 800ee68:	2300      	movs	r3, #0
 800ee6a:	69ba      	ldr	r2, [r7, #24]
 800ee6c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800ee6e:	69bb      	ldr	r3, [r7, #24]
 800ee70:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ee72:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	891b      	ldrh	r3, [r3, #8]
 800ee78:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800ee7a:	69fb      	ldr	r3, [r7, #28]
 800ee7c:	3310      	adds	r3, #16
 800ee7e:	69b9      	ldr	r1, [r7, #24]
 800ee80:	4618      	mov	r0, r3
 800ee82:	f012 fe61 	bl	8021b48 <sys_mbox_trypost>
 800ee86:	4603      	mov	r3, r0
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d003      	beq.n	800ee94 <recv_udp+0xcc>
    netbuf_delete(buf);
 800ee8c:	69b8      	ldr	r0, [r7, #24]
 800ee8e:	f001 fdc1 	bl	8010a14 <netbuf_delete>
    return;
 800ee92:	e009      	b.n	800eea8 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800ee94:	69fb      	ldr	r3, [r7, #28]
 800ee96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d005      	beq.n	800eea8 <recv_udp+0xe0>
 800ee9c:	69fb      	ldr	r3, [r7, #28]
 800ee9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eea0:	8afa      	ldrh	r2, [r7, #22]
 800eea2:	2100      	movs	r1, #0
 800eea4:	69f8      	ldr	r0, [r7, #28]
 800eea6:	4798      	blx	r3
  }
}
 800eea8:	3720      	adds	r7, #32
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
 800eeae:	bf00      	nop
 800eeb0:	0802a81c 	.word	0x0802a81c
 800eeb4:	0802a894 	.word	0x0802a894
 800eeb8:	0802a860 	.word	0x0802a860
 800eebc:	0802a8b8 	.word	0x0802a8b8
 800eec0:	0802a8d8 	.word	0x0802a8d8

0800eec4 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b088      	sub	sp, #32
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	60f8      	str	r0, [r7, #12]
 800eecc:	60b9      	str	r1, [r7, #8]
 800eece:	607a      	str	r2, [r7, #4]
 800eed0:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800eed2:	68bb      	ldr	r3, [r7, #8]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d106      	bne.n	800eee6 <recv_tcp+0x22>
 800eed8:	4b36      	ldr	r3, [pc, #216]	; (800efb4 <recv_tcp+0xf0>)
 800eeda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800eede:	4936      	ldr	r1, [pc, #216]	; (800efb8 <recv_tcp+0xf4>)
 800eee0:	4836      	ldr	r0, [pc, #216]	; (800efbc <recv_tcp+0xf8>)
 800eee2:	f017 fff7 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d106      	bne.n	800eefa <recv_tcp+0x36>
 800eeec:	4b31      	ldr	r3, [pc, #196]	; (800efb4 <recv_tcp+0xf0>)
 800eeee:	f240 122d 	movw	r2, #301	; 0x12d
 800eef2:	4933      	ldr	r1, [pc, #204]	; (800efc0 <recv_tcp+0xfc>)
 800eef4:	4831      	ldr	r0, [pc, #196]	; (800efbc <recv_tcp+0xf8>)
 800eef6:	f017 ffed 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800eefa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d006      	beq.n	800ef10 <recv_tcp+0x4c>
 800ef02:	4b2c      	ldr	r3, [pc, #176]	; (800efb4 <recv_tcp+0xf0>)
 800ef04:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800ef08:	492e      	ldr	r1, [pc, #184]	; (800efc4 <recv_tcp+0x100>)
 800ef0a:	482c      	ldr	r0, [pc, #176]	; (800efbc <recv_tcp+0xf8>)
 800ef0c:	f017 ffe2 	bl	8026ed4 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800ef14:	697b      	ldr	r3, [r7, #20]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d102      	bne.n	800ef20 <recv_tcp+0x5c>
    return ERR_VAL;
 800ef1a:	f06f 0305 	mvn.w	r3, #5
 800ef1e:	e045      	b.n	800efac <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800ef20:	697b      	ldr	r3, [r7, #20]
 800ef22:	685b      	ldr	r3, [r3, #4]
 800ef24:	68ba      	ldr	r2, [r7, #8]
 800ef26:	429a      	cmp	r2, r3
 800ef28:	d006      	beq.n	800ef38 <recv_tcp+0x74>
 800ef2a:	4b22      	ldr	r3, [pc, #136]	; (800efb4 <recv_tcp+0xf0>)
 800ef2c:	f240 1235 	movw	r2, #309	; 0x135
 800ef30:	4925      	ldr	r1, [pc, #148]	; (800efc8 <recv_tcp+0x104>)
 800ef32:	4822      	ldr	r0, [pc, #136]	; (800efbc <recv_tcp+0xf8>)
 800ef34:	f017 ffce 	bl	8026ed4 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	3310      	adds	r3, #16
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f012 fe78 	bl	8021c32 <sys_mbox_valid>
 800ef42:	4603      	mov	r3, r0
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d10d      	bne.n	800ef64 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d008      	beq.n	800ef60 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	891b      	ldrh	r3, [r3, #8]
 800ef52:	4619      	mov	r1, r3
 800ef54:	68b8      	ldr	r0, [r7, #8]
 800ef56:	f007 fee9 	bl	8016d2c <tcp_recved>
      pbuf_free(p);
 800ef5a:	6878      	ldr	r0, [r7, #4]
 800ef5c:	f006 fd8a 	bl	8015a74 <pbuf_free>
    }
    return ERR_OK;
 800ef60:	2300      	movs	r3, #0
 800ef62:	e023      	b.n	800efac <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d005      	beq.n	800ef76 <recv_tcp+0xb2>
    msg = p;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	891b      	ldrh	r3, [r3, #8]
 800ef72:	83fb      	strh	r3, [r7, #30]
 800ef74:	e003      	b.n	800ef7e <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800ef76:	4b15      	ldr	r3, [pc, #84]	; (800efcc <recv_tcp+0x108>)
 800ef78:	61bb      	str	r3, [r7, #24]
    len = 0;
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800ef7e:	697b      	ldr	r3, [r7, #20]
 800ef80:	3310      	adds	r3, #16
 800ef82:	69b9      	ldr	r1, [r7, #24]
 800ef84:	4618      	mov	r0, r3
 800ef86:	f012 fddf 	bl	8021b48 <sys_mbox_trypost>
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d002      	beq.n	800ef96 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800ef90:	f04f 33ff 	mov.w	r3, #4294967295
 800ef94:	e00a      	b.n	800efac <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d005      	beq.n	800efaa <recv_tcp+0xe6>
 800ef9e:	697b      	ldr	r3, [r7, #20]
 800efa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efa2:	8bfa      	ldrh	r2, [r7, #30]
 800efa4:	2100      	movs	r1, #0
 800efa6:	6978      	ldr	r0, [r7, #20]
 800efa8:	4798      	blx	r3
  }

  return ERR_OK;
 800efaa:	2300      	movs	r3, #0
}
 800efac:	4618      	mov	r0, r3
 800efae:	3720      	adds	r7, #32
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}
 800efb4:	0802a81c 	.word	0x0802a81c
 800efb8:	0802a8f8 	.word	0x0802a8f8
 800efbc:	0802a860 	.word	0x0802a860
 800efc0:	0802a91c 	.word	0x0802a91c
 800efc4:	0802a93c 	.word	0x0802a93c
 800efc8:	0802a954 	.word	0x0802a954
 800efcc:	0802eae2 	.word	0x0802eae2

0800efd0 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b084      	sub	sp, #16
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
 800efd8:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d106      	bne.n	800eff2 <poll_tcp+0x22>
 800efe4:	4b29      	ldr	r3, [pc, #164]	; (800f08c <poll_tcp+0xbc>)
 800efe6:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800efea:	4929      	ldr	r1, [pc, #164]	; (800f090 <poll_tcp+0xc0>)
 800efec:	4829      	ldr	r0, [pc, #164]	; (800f094 <poll_tcp+0xc4>)
 800efee:	f017 ff71 	bl	8026ed4 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	785b      	ldrb	r3, [r3, #1]
 800eff6:	2b01      	cmp	r3, #1
 800eff8:	d104      	bne.n	800f004 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800effa:	2101      	movs	r1, #1
 800effc:	68f8      	ldr	r0, [r7, #12]
 800effe:	f001 f919 	bl	8010234 <lwip_netconn_do_writemore>
 800f002:	e016      	b.n	800f032 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	785b      	ldrb	r3, [r3, #1]
 800f008:	2b04      	cmp	r3, #4
 800f00a:	d112      	bne.n	800f032 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	6a1b      	ldr	r3, [r3, #32]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d00a      	beq.n	800f02a <poll_tcp+0x5a>
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	6a1b      	ldr	r3, [r3, #32]
 800f018:	7a5b      	ldrb	r3, [r3, #9]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d005      	beq.n	800f02a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	6a1b      	ldr	r3, [r3, #32]
 800f022:	7a5a      	ldrb	r2, [r3, #9]
 800f024:	3a01      	subs	r2, #1
 800f026:	b2d2      	uxtb	r2, r2
 800f028:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800f02a:	2101      	movs	r1, #1
 800f02c:	68f8      	ldr	r0, [r7, #12]
 800f02e:	f000 fbf7 	bl	800f820 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	7f1b      	ldrb	r3, [r3, #28]
 800f036:	f003 0310 	and.w	r3, r3, #16
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d021      	beq.n	800f082 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	685b      	ldr	r3, [r3, #4]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d01d      	beq.n	800f082 <poll_tcp+0xb2>
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	685b      	ldr	r3, [r3, #4]
 800f04a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f04e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800f052:	d316      	bcc.n	800f082 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	685b      	ldr	r3, [r3, #4]
 800f058:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f05c:	2b04      	cmp	r3, #4
 800f05e:	d810      	bhi.n	800f082 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	7f1b      	ldrb	r3, [r3, #28]
 800f064:	f023 0310 	bic.w	r3, r3, #16
 800f068:	b2da      	uxtb	r2, r3
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f072:	2b00      	cmp	r3, #0
 800f074:	d005      	beq.n	800f082 <poll_tcp+0xb2>
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f07a:	2200      	movs	r2, #0
 800f07c:	2102      	movs	r1, #2
 800f07e:	68f8      	ldr	r0, [r7, #12]
 800f080:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800f082:	2300      	movs	r3, #0
}
 800f084:	4618      	mov	r0, r3
 800f086:	3710      	adds	r7, #16
 800f088:	46bd      	mov	sp, r7
 800f08a:	bd80      	pop	{r7, pc}
 800f08c:	0802a81c 	.word	0x0802a81c
 800f090:	0802a974 	.word	0x0802a974
 800f094:	0802a860 	.word	0x0802a860

0800f098 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b086      	sub	sp, #24
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	60f8      	str	r0, [r7, #12]
 800f0a0:	60b9      	str	r1, [r7, #8]
 800f0a2:	4613      	mov	r3, r2
 800f0a4:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f0aa:	697b      	ldr	r3, [r7, #20]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d106      	bne.n	800f0be <sent_tcp+0x26>
 800f0b0:	4b20      	ldr	r3, [pc, #128]	; (800f134 <sent_tcp+0x9c>)
 800f0b2:	f240 1293 	movw	r2, #403	; 0x193
 800f0b6:	4920      	ldr	r1, [pc, #128]	; (800f138 <sent_tcp+0xa0>)
 800f0b8:	4820      	ldr	r0, [pc, #128]	; (800f13c <sent_tcp+0xa4>)
 800f0ba:	f017 ff0b 	bl	8026ed4 <iprintf>

  if (conn) {
 800f0be:	697b      	ldr	r3, [r7, #20]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d032      	beq.n	800f12a <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800f0c4:	697b      	ldr	r3, [r7, #20]
 800f0c6:	785b      	ldrb	r3, [r3, #1]
 800f0c8:	2b01      	cmp	r3, #1
 800f0ca:	d104      	bne.n	800f0d6 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800f0cc:	2101      	movs	r1, #1
 800f0ce:	6978      	ldr	r0, [r7, #20]
 800f0d0:	f001 f8b0 	bl	8010234 <lwip_netconn_do_writemore>
 800f0d4:	e007      	b.n	800f0e6 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	785b      	ldrb	r3, [r3, #1]
 800f0da:	2b04      	cmp	r3, #4
 800f0dc:	d103      	bne.n	800f0e6 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800f0de:	2101      	movs	r1, #1
 800f0e0:	6978      	ldr	r0, [r7, #20]
 800f0e2:	f000 fb9d 	bl	800f820 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f0e6:	697b      	ldr	r3, [r7, #20]
 800f0e8:	685b      	ldr	r3, [r3, #4]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d01d      	beq.n	800f12a <sent_tcp+0x92>
 800f0ee:	697b      	ldr	r3, [r7, #20]
 800f0f0:	685b      	ldr	r3, [r3, #4]
 800f0f2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f0f6:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800f0fa:	d316      	bcc.n	800f12a <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800f0fc:	697b      	ldr	r3, [r7, #20]
 800f0fe:	685b      	ldr	r3, [r3, #4]
 800f100:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f104:	2b04      	cmp	r3, #4
 800f106:	d810      	bhi.n	800f12a <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	7f1b      	ldrb	r3, [r3, #28]
 800f10c:	f023 0310 	bic.w	r3, r3, #16
 800f110:	b2da      	uxtb	r2, r3
 800f112:	697b      	ldr	r3, [r7, #20]
 800f114:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800f116:	697b      	ldr	r3, [r7, #20]
 800f118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d005      	beq.n	800f12a <sent_tcp+0x92>
 800f11e:	697b      	ldr	r3, [r7, #20]
 800f120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f122:	88fa      	ldrh	r2, [r7, #6]
 800f124:	2102      	movs	r1, #2
 800f126:	6978      	ldr	r0, [r7, #20]
 800f128:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800f12a:	2300      	movs	r3, #0
}
 800f12c:	4618      	mov	r0, r3
 800f12e:	3718      	adds	r7, #24
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}
 800f134:	0802a81c 	.word	0x0802a81c
 800f138:	0802a974 	.word	0x0802a974
 800f13c:	0802a860 	.word	0x0802a860

0800f140 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b088      	sub	sp, #32
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
 800f148:	460b      	mov	r3, r1
 800f14a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f150:	69fb      	ldr	r3, [r7, #28]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d106      	bne.n	800f164 <err_tcp+0x24>
 800f156:	4b5f      	ldr	r3, [pc, #380]	; (800f2d4 <err_tcp+0x194>)
 800f158:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800f15c:	495e      	ldr	r1, [pc, #376]	; (800f2d8 <err_tcp+0x198>)
 800f15e:	485f      	ldr	r0, [pc, #380]	; (800f2dc <err_tcp+0x19c>)
 800f160:	f017 feb8 	bl	8026ed4 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800f164:	f012 fe80 	bl	8021e68 <sys_arch_protect>
 800f168:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800f16a:	69fb      	ldr	r3, [r7, #28]
 800f16c:	2200      	movs	r2, #0
 800f16e:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800f170:	69fb      	ldr	r3, [r7, #28]
 800f172:	78fa      	ldrb	r2, [r7, #3]
 800f174:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800f176:	69fb      	ldr	r3, [r7, #28]
 800f178:	7f1b      	ldrb	r3, [r3, #28]
 800f17a:	f043 0301 	orr.w	r3, r3, #1
 800f17e:	b2da      	uxtb	r2, r3
 800f180:	69fb      	ldr	r3, [r7, #28]
 800f182:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800f184:	69fb      	ldr	r3, [r7, #28]
 800f186:	785b      	ldrb	r3, [r3, #1]
 800f188:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800f18a:	69fb      	ldr	r3, [r7, #28]
 800f18c:	2200      	movs	r2, #0
 800f18e:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800f190:	69b8      	ldr	r0, [r7, #24]
 800f192:	f012 fe77 	bl	8021e84 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800f196:	69fb      	ldr	r3, [r7, #28]
 800f198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d005      	beq.n	800f1aa <err_tcp+0x6a>
 800f19e:	69fb      	ldr	r3, [r7, #28]
 800f1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	2104      	movs	r1, #4
 800f1a6:	69f8      	ldr	r0, [r7, #28]
 800f1a8:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f1aa:	69fb      	ldr	r3, [r7, #28]
 800f1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d005      	beq.n	800f1be <err_tcp+0x7e>
 800f1b2:	69fb      	ldr	r3, [r7, #28]
 800f1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	2100      	movs	r1, #0
 800f1ba:	69f8      	ldr	r0, [r7, #28]
 800f1bc:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f1be:	69fb      	ldr	r3, [r7, #28]
 800f1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d005      	beq.n	800f1d2 <err_tcp+0x92>
 800f1c6:	69fb      	ldr	r3, [r7, #28]
 800f1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	2102      	movs	r1, #2
 800f1ce:	69f8      	ldr	r0, [r7, #28]
 800f1d0:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800f1d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f7ff fd86 	bl	800ece8 <lwip_netconn_err_to_msg>
 800f1dc:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f1de:	69fb      	ldr	r3, [r7, #28]
 800f1e0:	3310      	adds	r3, #16
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	f012 fd25 	bl	8021c32 <sys_mbox_valid>
 800f1e8:	4603      	mov	r3, r0
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d005      	beq.n	800f1fa <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800f1ee:	69fb      	ldr	r3, [r7, #28]
 800f1f0:	3310      	adds	r3, #16
 800f1f2:	6939      	ldr	r1, [r7, #16]
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f012 fca7 	bl	8021b48 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800f1fa:	69fb      	ldr	r3, [r7, #28]
 800f1fc:	3314      	adds	r3, #20
 800f1fe:	4618      	mov	r0, r3
 800f200:	f012 fd17 	bl	8021c32 <sys_mbox_valid>
 800f204:	4603      	mov	r3, r0
 800f206:	2b00      	cmp	r3, #0
 800f208:	d005      	beq.n	800f216 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800f20a:	69fb      	ldr	r3, [r7, #28]
 800f20c:	3314      	adds	r3, #20
 800f20e:	6939      	ldr	r1, [r7, #16]
 800f210:	4618      	mov	r0, r3
 800f212:	f012 fc99 	bl	8021b48 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800f216:	7dfb      	ldrb	r3, [r7, #23]
 800f218:	2b01      	cmp	r3, #1
 800f21a:	d005      	beq.n	800f228 <err_tcp+0xe8>
 800f21c:	7dfb      	ldrb	r3, [r7, #23]
 800f21e:	2b04      	cmp	r3, #4
 800f220:	d002      	beq.n	800f228 <err_tcp+0xe8>
 800f222:	7dfb      	ldrb	r3, [r7, #23]
 800f224:	2b03      	cmp	r3, #3
 800f226:	d143      	bne.n	800f2b0 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800f228:	69fb      	ldr	r3, [r7, #28]
 800f22a:	7f1b      	ldrb	r3, [r3, #28]
 800f22c:	f003 0304 	and.w	r3, r3, #4
 800f230:	2b00      	cmp	r3, #0
 800f232:	bf14      	ite	ne
 800f234:	2301      	movne	r3, #1
 800f236:	2300      	moveq	r3, #0
 800f238:	b2db      	uxtb	r3, r3
 800f23a:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800f23c:	69fb      	ldr	r3, [r7, #28]
 800f23e:	7f1b      	ldrb	r3, [r3, #28]
 800f240:	f023 0304 	bic.w	r3, r3, #4
 800f244:	b2da      	uxtb	r2, r3
 800f246:	69fb      	ldr	r3, [r7, #28]
 800f248:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d13b      	bne.n	800f2c8 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800f250:	69fb      	ldr	r3, [r7, #28]
 800f252:	6a1b      	ldr	r3, [r3, #32]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d106      	bne.n	800f266 <err_tcp+0x126>
 800f258:	4b1e      	ldr	r3, [pc, #120]	; (800f2d4 <err_tcp+0x194>)
 800f25a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f25e:	4920      	ldr	r1, [pc, #128]	; (800f2e0 <err_tcp+0x1a0>)
 800f260:	481e      	ldr	r0, [pc, #120]	; (800f2dc <err_tcp+0x19c>)
 800f262:	f017 fe37 	bl	8026ed4 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800f266:	7dfb      	ldrb	r3, [r7, #23]
 800f268:	2b04      	cmp	r3, #4
 800f26a:	d104      	bne.n	800f276 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800f26c:	69fb      	ldr	r3, [r7, #28]
 800f26e:	6a1b      	ldr	r3, [r3, #32]
 800f270:	2200      	movs	r2, #0
 800f272:	711a      	strb	r2, [r3, #4]
 800f274:	e003      	b.n	800f27e <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800f276:	69fb      	ldr	r3, [r7, #28]
 800f278:	6a1b      	ldr	r3, [r3, #32]
 800f27a:	78fa      	ldrb	r2, [r7, #3]
 800f27c:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800f27e:	69fb      	ldr	r3, [r7, #28]
 800f280:	6a1b      	ldr	r3, [r3, #32]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	330c      	adds	r3, #12
 800f286:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800f288:	68b8      	ldr	r0, [r7, #8]
 800f28a:	f012 fd63 	bl	8021d54 <sys_sem_valid>
 800f28e:	4603      	mov	r3, r0
 800f290:	2b00      	cmp	r3, #0
 800f292:	d106      	bne.n	800f2a2 <err_tcp+0x162>
 800f294:	4b0f      	ldr	r3, [pc, #60]	; (800f2d4 <err_tcp+0x194>)
 800f296:	f240 12ef 	movw	r2, #495	; 0x1ef
 800f29a:	4912      	ldr	r1, [pc, #72]	; (800f2e4 <err_tcp+0x1a4>)
 800f29c:	480f      	ldr	r0, [pc, #60]	; (800f2dc <err_tcp+0x19c>)
 800f29e:	f017 fe19 	bl	8026ed4 <iprintf>
      conn->current_msg = NULL;
 800f2a2:	69fb      	ldr	r3, [r7, #28]
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800f2a8:	68b8      	ldr	r0, [r7, #8]
 800f2aa:	f012 fd39 	bl	8021d20 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800f2ae:	e00b      	b.n	800f2c8 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800f2b0:	69fb      	ldr	r3, [r7, #28]
 800f2b2:	6a1b      	ldr	r3, [r3, #32]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d008      	beq.n	800f2ca <err_tcp+0x18a>
 800f2b8:	4b06      	ldr	r3, [pc, #24]	; (800f2d4 <err_tcp+0x194>)
 800f2ba:	f240 12f7 	movw	r2, #503	; 0x1f7
 800f2be:	490a      	ldr	r1, [pc, #40]	; (800f2e8 <err_tcp+0x1a8>)
 800f2c0:	4806      	ldr	r0, [pc, #24]	; (800f2dc <err_tcp+0x19c>)
 800f2c2:	f017 fe07 	bl	8026ed4 <iprintf>
  }
}
 800f2c6:	e000      	b.n	800f2ca <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800f2c8:	bf00      	nop
}
 800f2ca:	bf00      	nop
 800f2cc:	3720      	adds	r7, #32
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	bd80      	pop	{r7, pc}
 800f2d2:	bf00      	nop
 800f2d4:	0802a81c 	.word	0x0802a81c
 800f2d8:	0802a974 	.word	0x0802a974
 800f2dc:	0802a860 	.word	0x0802a860
 800f2e0:	0802a984 	.word	0x0802a984
 800f2e4:	0802a9a0 	.word	0x0802a9a0
 800f2e8:	0802a9bc 	.word	0x0802a9bc

0800f2ec <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b084      	sub	sp, #16
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	685b      	ldr	r3, [r3, #4]
 800f2f8:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800f2fa:	6879      	ldr	r1, [r7, #4]
 800f2fc:	68f8      	ldr	r0, [r7, #12]
 800f2fe:	f008 fcf3 	bl	8017ce8 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800f302:	490a      	ldr	r1, [pc, #40]	; (800f32c <setup_tcp+0x40>)
 800f304:	68f8      	ldr	r0, [r7, #12]
 800f306:	f008 fd01 	bl	8017d0c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800f30a:	4909      	ldr	r1, [pc, #36]	; (800f330 <setup_tcp+0x44>)
 800f30c:	68f8      	ldr	r0, [r7, #12]
 800f30e:	f008 fd1f 	bl	8017d50 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800f312:	2202      	movs	r2, #2
 800f314:	4907      	ldr	r1, [pc, #28]	; (800f334 <setup_tcp+0x48>)
 800f316:	68f8      	ldr	r0, [r7, #12]
 800f318:	f008 fd76 	bl	8017e08 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800f31c:	4906      	ldr	r1, [pc, #24]	; (800f338 <setup_tcp+0x4c>)
 800f31e:	68f8      	ldr	r0, [r7, #12]
 800f320:	f008 fd38 	bl	8017d94 <tcp_err>
}
 800f324:	bf00      	nop
 800f326:	3710      	adds	r7, #16
 800f328:	46bd      	mov	sp, r7
 800f32a:	bd80      	pop	{r7, pc}
 800f32c:	0800eec5 	.word	0x0800eec5
 800f330:	0800f099 	.word	0x0800f099
 800f334:	0800efd1 	.word	0x0800efd1
 800f338:	0800f141 	.word	0x0800f141

0800f33c <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800f33c:	b590      	push	{r4, r7, lr}
 800f33e:	b089      	sub	sp, #36	; 0x24
 800f340:	af00      	add	r7, sp, #0
 800f342:	60f8      	str	r0, [r7, #12]
 800f344:	60b9      	str	r1, [r7, #8]
 800f346:	4613      	mov	r3, r2
 800f348:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800f34e:	69fb      	ldr	r3, [r7, #28]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d102      	bne.n	800f35a <accept_function+0x1e>
    return ERR_VAL;
 800f354:	f06f 0305 	mvn.w	r3, #5
 800f358:	e0a1      	b.n	800f49e <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800f35a:	69fb      	ldr	r3, [r7, #28]
 800f35c:	3314      	adds	r3, #20
 800f35e:	4618      	mov	r0, r3
 800f360:	f012 fc67 	bl	8021c32 <sys_mbox_valid>
 800f364:	4603      	mov	r3, r0
 800f366:	2b00      	cmp	r3, #0
 800f368:	d102      	bne.n	800f370 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800f36a:	f06f 0305 	mvn.w	r3, #5
 800f36e:	e096      	b.n	800f49e <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d11b      	bne.n	800f3ae <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800f376:	69fb      	ldr	r3, [r7, #28]
 800f378:	f103 0414 	add.w	r4, r3, #20
 800f37c:	f06f 000c 	mvn.w	r0, #12
 800f380:	f7ff fcb2 	bl	800ece8 <lwip_netconn_err_to_msg>
 800f384:	4603      	mov	r3, r0
 800f386:	4619      	mov	r1, r3
 800f388:	4620      	mov	r0, r4
 800f38a:	f012 fbdd 	bl	8021b48 <sys_mbox_trypost>
 800f38e:	4603      	mov	r3, r0
 800f390:	2b00      	cmp	r3, #0
 800f392:	d109      	bne.n	800f3a8 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f394:	69fb      	ldr	r3, [r7, #28]
 800f396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d005      	beq.n	800f3a8 <accept_function+0x6c>
 800f39c:	69fb      	ldr	r3, [r7, #28]
 800f39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	2100      	movs	r1, #0
 800f3a4:	69f8      	ldr	r0, [r7, #28]
 800f3a6:	4798      	blx	r3
    }
    return ERR_VAL;
 800f3a8:	f06f 0305 	mvn.w	r3, #5
 800f3ac:	e077      	b.n	800f49e <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800f3ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d006      	beq.n	800f3c4 <accept_function+0x88>
 800f3b6:	4b3c      	ldr	r3, [pc, #240]	; (800f4a8 <accept_function+0x16c>)
 800f3b8:	f240 222a 	movw	r2, #554	; 0x22a
 800f3bc:	493b      	ldr	r1, [pc, #236]	; (800f4ac <accept_function+0x170>)
 800f3be:	483c      	ldr	r0, [pc, #240]	; (800f4b0 <accept_function+0x174>)
 800f3c0:	f017 fd88 	bl	8026ed4 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800f3c4:	69fb      	ldr	r3, [r7, #28]
 800f3c6:	781a      	ldrb	r2, [r3, #0]
 800f3c8:	69fb      	ldr	r3, [r7, #28]
 800f3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3cc:	4619      	mov	r1, r3
 800f3ce:	4610      	mov	r0, r2
 800f3d0:	f000 f8f0 	bl	800f5b4 <netconn_alloc>
 800f3d4:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800f3d6:	69bb      	ldr	r3, [r7, #24]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d11b      	bne.n	800f414 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800f3dc:	69fb      	ldr	r3, [r7, #28]
 800f3de:	f103 0414 	add.w	r4, r3, #20
 800f3e2:	f06f 000c 	mvn.w	r0, #12
 800f3e6:	f7ff fc7f 	bl	800ece8 <lwip_netconn_err_to_msg>
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	4619      	mov	r1, r3
 800f3ee:	4620      	mov	r0, r4
 800f3f0:	f012 fbaa 	bl	8021b48 <sys_mbox_trypost>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d109      	bne.n	800f40e <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f3fa:	69fb      	ldr	r3, [r7, #28]
 800f3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d005      	beq.n	800f40e <accept_function+0xd2>
 800f402:	69fb      	ldr	r3, [r7, #28]
 800f404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f406:	2200      	movs	r2, #0
 800f408:	2100      	movs	r1, #0
 800f40a:	69f8      	ldr	r0, [r7, #28]
 800f40c:	4798      	blx	r3
    }
    return ERR_MEM;
 800f40e:	f04f 33ff 	mov.w	r3, #4294967295
 800f412:	e044      	b.n	800f49e <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800f414:	69bb      	ldr	r3, [r7, #24]
 800f416:	68ba      	ldr	r2, [r7, #8]
 800f418:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800f41a:	69b8      	ldr	r0, [r7, #24]
 800f41c:	f7ff ff66 	bl	800f2ec <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800f420:	69fb      	ldr	r3, [r7, #28]
 800f422:	3314      	adds	r3, #20
 800f424:	69b9      	ldr	r1, [r7, #24]
 800f426:	4618      	mov	r0, r3
 800f428:	f012 fb8e 	bl	8021b48 <sys_mbox_trypost>
 800f42c:	4603      	mov	r3, r0
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d02a      	beq.n	800f488 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800f432:	69bb      	ldr	r3, [r7, #24]
 800f434:	685b      	ldr	r3, [r3, #4]
 800f436:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800f438:	2100      	movs	r1, #0
 800f43a:	6978      	ldr	r0, [r7, #20]
 800f43c:	f008 fc54 	bl	8017ce8 <tcp_arg>
    tcp_recv(pcb, NULL);
 800f440:	2100      	movs	r1, #0
 800f442:	6978      	ldr	r0, [r7, #20]
 800f444:	f008 fc62 	bl	8017d0c <tcp_recv>
    tcp_sent(pcb, NULL);
 800f448:	2100      	movs	r1, #0
 800f44a:	6978      	ldr	r0, [r7, #20]
 800f44c:	f008 fc80 	bl	8017d50 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800f450:	2200      	movs	r2, #0
 800f452:	2100      	movs	r1, #0
 800f454:	6978      	ldr	r0, [r7, #20]
 800f456:	f008 fcd7 	bl	8017e08 <tcp_poll>
    tcp_err(pcb, NULL);
 800f45a:	2100      	movs	r1, #0
 800f45c:	6978      	ldr	r0, [r7, #20]
 800f45e:	f008 fc99 	bl	8017d94 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800f462:	69bb      	ldr	r3, [r7, #24]
 800f464:	2200      	movs	r2, #0
 800f466:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800f468:	69bb      	ldr	r3, [r7, #24]
 800f46a:	3310      	adds	r3, #16
 800f46c:	4618      	mov	r0, r3
 800f46e:	f012 fb59 	bl	8021b24 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800f472:	69bb      	ldr	r3, [r7, #24]
 800f474:	3310      	adds	r3, #16
 800f476:	4618      	mov	r0, r3
 800f478:	f012 fbec 	bl	8021c54 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800f47c:	69b8      	ldr	r0, [r7, #24]
 800f47e:	f000 f907 	bl	800f690 <netconn_free>
    return ERR_MEM;
 800f482:	f04f 33ff 	mov.w	r3, #4294967295
 800f486:	e00a      	b.n	800f49e <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f488:	69fb      	ldr	r3, [r7, #28]
 800f48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d005      	beq.n	800f49c <accept_function+0x160>
 800f490:	69fb      	ldr	r3, [r7, #28]
 800f492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f494:	2200      	movs	r2, #0
 800f496:	2100      	movs	r1, #0
 800f498:	69f8      	ldr	r0, [r7, #28]
 800f49a:	4798      	blx	r3
  }

  return ERR_OK;
 800f49c:	2300      	movs	r3, #0
}
 800f49e:	4618      	mov	r0, r3
 800f4a0:	3724      	adds	r7, #36	; 0x24
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd90      	pop	{r4, r7, pc}
 800f4a6:	bf00      	nop
 800f4a8:	0802a81c 	.word	0x0802a81c
 800f4ac:	0802a9d8 	.word	0x0802a9d8
 800f4b0:	0802a860 	.word	0x0802a860

0800f4b4 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800f4b4:	b590      	push	{r4, r7, lr}
 800f4b6:	b085      	sub	sp, #20
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800f4bc:	2300      	movs	r3, #0
 800f4be:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	685b      	ldr	r3, [r3, #4]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d006      	beq.n	800f4d8 <pcb_new+0x24>
 800f4ca:	4b2b      	ldr	r3, [pc, #172]	; (800f578 <pcb_new+0xc4>)
 800f4cc:	f240 2265 	movw	r2, #613	; 0x265
 800f4d0:	492a      	ldr	r1, [pc, #168]	; (800f57c <pcb_new+0xc8>)
 800f4d2:	482b      	ldr	r0, [pc, #172]	; (800f580 <pcb_new+0xcc>)
 800f4d4:	f017 fcfe 	bl	8026ed4 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	781b      	ldrb	r3, [r3, #0]
 800f4de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f4e2:	2b10      	cmp	r3, #16
 800f4e4:	d022      	beq.n	800f52c <pcb_new+0x78>
 800f4e6:	2b20      	cmp	r3, #32
 800f4e8:	d133      	bne.n	800f552 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681c      	ldr	r4, [r3, #0]
 800f4ee:	7bfb      	ldrb	r3, [r7, #15]
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f00d ff8e 	bl	801d412 <udp_new_ip_type>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	685b      	ldr	r3, [r3, #4]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d02a      	beq.n	800f55a <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	781b      	ldrb	r3, [r3, #0]
 800f50a:	2b22      	cmp	r3, #34	; 0x22
 800f50c:	d104      	bne.n	800f518 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	685b      	ldr	r3, [r3, #4]
 800f514:	2201      	movs	r2, #1
 800f516:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	6858      	ldr	r0, [r3, #4]
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	461a      	mov	r2, r3
 800f524:	4917      	ldr	r1, [pc, #92]	; (800f584 <pcb_new+0xd0>)
 800f526:	f00d fefb 	bl	801d320 <udp_recv>
      }
      break;
 800f52a:	e016      	b.n	800f55a <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681c      	ldr	r4, [r3, #0]
 800f530:	7bfb      	ldrb	r3, [r7, #15]
 800f532:	4618      	mov	r0, r3
 800f534:	f008 fbca 	bl	8017ccc <tcp_new_ip_type>
 800f538:	4603      	mov	r3, r0
 800f53a:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	685b      	ldr	r3, [r3, #4]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d00b      	beq.n	800f55e <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	4618      	mov	r0, r3
 800f54c:	f7ff fece 	bl	800f2ec <setup_tcp>
      }
      break;
 800f550:	e005      	b.n	800f55e <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	22fa      	movs	r2, #250	; 0xfa
 800f556:	711a      	strb	r2, [r3, #4]
      return;
 800f558:	e00a      	b.n	800f570 <pcb_new+0xbc>
      break;
 800f55a:	bf00      	nop
 800f55c:	e000      	b.n	800f560 <pcb_new+0xac>
      break;
 800f55e:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	685b      	ldr	r3, [r3, #4]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d102      	bne.n	800f570 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	22ff      	movs	r2, #255	; 0xff
 800f56e:	711a      	strb	r2, [r3, #4]
  }
}
 800f570:	3714      	adds	r7, #20
 800f572:	46bd      	mov	sp, r7
 800f574:	bd90      	pop	{r4, r7, pc}
 800f576:	bf00      	nop
 800f578:	0802a81c 	.word	0x0802a81c
 800f57c:	0802aa00 	.word	0x0802aa00
 800f580:	0802a860 	.word	0x0802a860
 800f584:	0800edc9 	.word	0x0800edc9

0800f588 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b084      	sub	sp, #16
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	2200      	movs	r2, #0
 800f598:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	685b      	ldr	r3, [r3, #4]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d102      	bne.n	800f5aa <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800f5a4:	68f8      	ldr	r0, [r7, #12]
 800f5a6:	f7ff ff85 	bl	800f4b4 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800f5aa:	bf00      	nop
 800f5ac:	3710      	adds	r7, #16
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	bd80      	pop	{r7, pc}
	...

0800f5b4 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b086      	sub	sp, #24
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	6039      	str	r1, [r7, #0]
 800f5be:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800f5c4:	2007      	movs	r0, #7
 800f5c6:	f005 fafd 	bl	8014bc4 <memp_malloc>
 800f5ca:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d101      	bne.n	800f5d6 <netconn_alloc+0x22>
    return NULL;
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	e052      	b.n	800f67c <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	2200      	movs	r2, #0
 800f5da:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	79fa      	ldrb	r2, [r7, #7]
 800f5e0:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800f5e8:	79fb      	ldrb	r3, [r7, #7]
 800f5ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f5ee:	2b10      	cmp	r3, #16
 800f5f0:	d004      	beq.n	800f5fc <netconn_alloc+0x48>
 800f5f2:	2b20      	cmp	r3, #32
 800f5f4:	d105      	bne.n	800f602 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800f5f6:	2306      	movs	r3, #6
 800f5f8:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800f5fa:	e00a      	b.n	800f612 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800f5fc:	2306      	movs	r3, #6
 800f5fe:	617b      	str	r3, [r7, #20]
      break;
 800f600:	e007      	b.n	800f612 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800f602:	4b20      	ldr	r3, [pc, #128]	; (800f684 <netconn_alloc+0xd0>)
 800f604:	f240 22e5 	movw	r2, #741	; 0x2e5
 800f608:	491f      	ldr	r1, [pc, #124]	; (800f688 <netconn_alloc+0xd4>)
 800f60a:	4820      	ldr	r0, [pc, #128]	; (800f68c <netconn_alloc+0xd8>)
 800f60c:	f017 fc62 	bl	8026ed4 <iprintf>
      goto free_and_return;
 800f610:	e02f      	b.n	800f672 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	3310      	adds	r3, #16
 800f616:	6979      	ldr	r1, [r7, #20]
 800f618:	4618      	mov	r0, r3
 800f61a:	f012 fa61 	bl	8021ae0 <sys_mbox_new>
 800f61e:	4603      	mov	r3, r0
 800f620:	2b00      	cmp	r3, #0
 800f622:	d125      	bne.n	800f670 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	330c      	adds	r3, #12
 800f628:	2100      	movs	r1, #0
 800f62a:	4618      	mov	r0, r3
 800f62c:	f012 fb1f 	bl	8021c6e <sys_sem_new>
 800f630:	4603      	mov	r3, r0
 800f632:	2b00      	cmp	r3, #0
 800f634:	d005      	beq.n	800f642 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	3310      	adds	r3, #16
 800f63a:	4618      	mov	r0, r3
 800f63c:	f012 fa72 	bl	8021b24 <sys_mbox_free>
    goto free_and_return;
 800f640:	e017      	b.n	800f672 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	3314      	adds	r3, #20
 800f646:	4618      	mov	r0, r3
 800f648:	f012 fb04 	bl	8021c54 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	2200      	movs	r2, #0
 800f650:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	f04f 32ff 	mov.w	r2, #4294967295
 800f658:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	683a      	ldr	r2, [r7, #0]
 800f65e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	2200      	movs	r2, #0
 800f664:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	7cfa      	ldrb	r2, [r7, #19]
 800f66a:	771a      	strb	r2, [r3, #28]
  return conn;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	e005      	b.n	800f67c <netconn_alloc+0xc8>
    goto free_and_return;
 800f670:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800f672:	68f9      	ldr	r1, [r7, #12]
 800f674:	2007      	movs	r0, #7
 800f676:	f005 fb1b 	bl	8014cb0 <memp_free>
  return NULL;
 800f67a:	2300      	movs	r3, #0
}
 800f67c:	4618      	mov	r0, r3
 800f67e:	3718      	adds	r7, #24
 800f680:	46bd      	mov	sp, r7
 800f682:	bd80      	pop	{r7, pc}
 800f684:	0802a81c 	.word	0x0802a81c
 800f688:	0802aa20 	.word	0x0802aa20
 800f68c:	0802a860 	.word	0x0802a860

0800f690 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b082      	sub	sp, #8
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	685b      	ldr	r3, [r3, #4]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d006      	beq.n	800f6ae <netconn_free+0x1e>
 800f6a0:	4b1b      	ldr	r3, [pc, #108]	; (800f710 <netconn_free+0x80>)
 800f6a2:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800f6a6:	491b      	ldr	r1, [pc, #108]	; (800f714 <netconn_free+0x84>)
 800f6a8:	481b      	ldr	r0, [pc, #108]	; (800f718 <netconn_free+0x88>)
 800f6aa:	f017 fc13 	bl	8026ed4 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	3310      	adds	r3, #16
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	f012 fabd 	bl	8021c32 <sys_mbox_valid>
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d006      	beq.n	800f6cc <netconn_free+0x3c>
 800f6be:	4b14      	ldr	r3, [pc, #80]	; (800f710 <netconn_free+0x80>)
 800f6c0:	f240 3223 	movw	r2, #803	; 0x323
 800f6c4:	4915      	ldr	r1, [pc, #84]	; (800f71c <netconn_free+0x8c>)
 800f6c6:	4814      	ldr	r0, [pc, #80]	; (800f718 <netconn_free+0x88>)
 800f6c8:	f017 fc04 	bl	8026ed4 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	3314      	adds	r3, #20
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f012 faae 	bl	8021c32 <sys_mbox_valid>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d006      	beq.n	800f6ea <netconn_free+0x5a>
 800f6dc:	4b0c      	ldr	r3, [pc, #48]	; (800f710 <netconn_free+0x80>)
 800f6de:	f240 3226 	movw	r2, #806	; 0x326
 800f6e2:	490f      	ldr	r1, [pc, #60]	; (800f720 <netconn_free+0x90>)
 800f6e4:	480c      	ldr	r0, [pc, #48]	; (800f718 <netconn_free+0x88>)
 800f6e6:	f017 fbf5 	bl	8026ed4 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	330c      	adds	r3, #12
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	f012 fb23 	bl	8021d3a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	330c      	adds	r3, #12
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f012 fb3c 	bl	8021d76 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800f6fe:	6879      	ldr	r1, [r7, #4]
 800f700:	2007      	movs	r0, #7
 800f702:	f005 fad5 	bl	8014cb0 <memp_free>
}
 800f706:	bf00      	nop
 800f708:	3708      	adds	r7, #8
 800f70a:	46bd      	mov	sp, r7
 800f70c:	bd80      	pop	{r7, pc}
 800f70e:	bf00      	nop
 800f710:	0802a81c 	.word	0x0802a81c
 800f714:	0802aa48 	.word	0x0802aa48
 800f718:	0802a860 	.word	0x0802a860
 800f71c:	0802aa78 	.word	0x0802aa78
 800f720:	0802aab4 	.word	0x0802aab4

0800f724 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b086      	sub	sp, #24
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	3310      	adds	r3, #16
 800f730:	4618      	mov	r0, r3
 800f732:	f012 fa7e 	bl	8021c32 <sys_mbox_valid>
 800f736:	4603      	mov	r3, r0
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d02f      	beq.n	800f79c <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800f73c:	e018      	b.n	800f770 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	781b      	ldrb	r3, [r3, #0]
 800f742:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f746:	2b10      	cmp	r3, #16
 800f748:	d10e      	bne.n	800f768 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800f74a:	693b      	ldr	r3, [r7, #16]
 800f74c:	f107 020f 	add.w	r2, r7, #15
 800f750:	4611      	mov	r1, r2
 800f752:	4618      	mov	r0, r3
 800f754:	f7ff fafe 	bl	800ed54 <lwip_netconn_is_err_msg>
 800f758:	4603      	mov	r3, r0
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d108      	bne.n	800f770 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800f75e:	693b      	ldr	r3, [r7, #16]
 800f760:	4618      	mov	r0, r3
 800f762:	f006 f987 	bl	8015a74 <pbuf_free>
 800f766:	e003      	b.n	800f770 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800f768:	693b      	ldr	r3, [r7, #16]
 800f76a:	4618      	mov	r0, r3
 800f76c:	f001 f952 	bl	8010a14 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	3310      	adds	r3, #16
 800f774:	f107 0210 	add.w	r2, r7, #16
 800f778:	4611      	mov	r1, r2
 800f77a:	4618      	mov	r0, r3
 800f77c:	f012 fa3d 	bl	8021bfa <sys_arch_mbox_tryfetch>
 800f780:	4603      	mov	r3, r0
 800f782:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f786:	d1da      	bne.n	800f73e <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	3310      	adds	r3, #16
 800f78c:	4618      	mov	r0, r3
 800f78e:	f012 f9c9 	bl	8021b24 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	3310      	adds	r3, #16
 800f796:	4618      	mov	r0, r3
 800f798:	f012 fa5c 	bl	8021c54 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	3314      	adds	r3, #20
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	f012 fa46 	bl	8021c32 <sys_mbox_valid>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d034      	beq.n	800f816 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800f7ac:	e01d      	b.n	800f7ea <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800f7ae:	693b      	ldr	r3, [r7, #16]
 800f7b0:	f107 020e 	add.w	r2, r7, #14
 800f7b4:	4611      	mov	r1, r2
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	f7ff facc 	bl	800ed54 <lwip_netconn_is_err_msg>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d113      	bne.n	800f7ea <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800f7c2:	693b      	ldr	r3, [r7, #16]
 800f7c4:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800f7c6:	6978      	ldr	r0, [r7, #20]
 800f7c8:	f7ff ffac 	bl	800f724 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800f7cc:	697b      	ldr	r3, [r7, #20]
 800f7ce:	685b      	ldr	r3, [r3, #4]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d007      	beq.n	800f7e4 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800f7d4:	697b      	ldr	r3, [r7, #20]
 800f7d6:	685b      	ldr	r3, [r3, #4]
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f007 f8df 	bl	801699c <tcp_abort>
            newconn->pcb.tcp = NULL;
 800f7de:	697b      	ldr	r3, [r7, #20]
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800f7e4:	6978      	ldr	r0, [r7, #20]
 800f7e6:	f7ff ff53 	bl	800f690 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	3314      	adds	r3, #20
 800f7ee:	f107 0210 	add.w	r2, r7, #16
 800f7f2:	4611      	mov	r1, r2
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	f012 fa00 	bl	8021bfa <sys_arch_mbox_tryfetch>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f800:	d1d5      	bne.n	800f7ae <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	3314      	adds	r3, #20
 800f806:	4618      	mov	r0, r3
 800f808:	f012 f98c 	bl	8021b24 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	3314      	adds	r3, #20
 800f810:	4618      	mov	r0, r3
 800f812:	f012 fa1f 	bl	8021c54 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800f816:	bf00      	nop
 800f818:	3718      	adds	r7, #24
 800f81a:	46bd      	mov	sp, r7
 800f81c:	bd80      	pop	{r7, pc}
	...

0800f820 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b086      	sub	sp, #24
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
 800f828:	460b      	mov	r3, r1
 800f82a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800f82c:	2300      	movs	r3, #0
 800f82e:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d106      	bne.n	800f844 <lwip_netconn_do_close_internal+0x24>
 800f836:	4ba1      	ldr	r3, [pc, #644]	; (800fabc <lwip_netconn_do_close_internal+0x29c>)
 800f838:	f240 32a2 	movw	r2, #930	; 0x3a2
 800f83c:	49a0      	ldr	r1, [pc, #640]	; (800fac0 <lwip_netconn_do_close_internal+0x2a0>)
 800f83e:	48a1      	ldr	r0, [pc, #644]	; (800fac4 <lwip_netconn_do_close_internal+0x2a4>)
 800f840:	f017 fb48 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	781b      	ldrb	r3, [r3, #0]
 800f848:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f84c:	2b10      	cmp	r3, #16
 800f84e:	d006      	beq.n	800f85e <lwip_netconn_do_close_internal+0x3e>
 800f850:	4b9a      	ldr	r3, [pc, #616]	; (800fabc <lwip_netconn_do_close_internal+0x29c>)
 800f852:	f240 32a3 	movw	r2, #931	; 0x3a3
 800f856:	499c      	ldr	r1, [pc, #624]	; (800fac8 <lwip_netconn_do_close_internal+0x2a8>)
 800f858:	489a      	ldr	r0, [pc, #616]	; (800fac4 <lwip_netconn_do_close_internal+0x2a4>)
 800f85a:	f017 fb3b 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	785b      	ldrb	r3, [r3, #1]
 800f862:	2b04      	cmp	r3, #4
 800f864:	d006      	beq.n	800f874 <lwip_netconn_do_close_internal+0x54>
 800f866:	4b95      	ldr	r3, [pc, #596]	; (800fabc <lwip_netconn_do_close_internal+0x29c>)
 800f868:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800f86c:	4997      	ldr	r1, [pc, #604]	; (800facc <lwip_netconn_do_close_internal+0x2ac>)
 800f86e:	4895      	ldr	r0, [pc, #596]	; (800fac4 <lwip_netconn_do_close_internal+0x2a4>)
 800f870:	f017 fb30 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	685b      	ldr	r3, [r3, #4]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d106      	bne.n	800f88a <lwip_netconn_do_close_internal+0x6a>
 800f87c:	4b8f      	ldr	r3, [pc, #572]	; (800fabc <lwip_netconn_do_close_internal+0x29c>)
 800f87e:	f240 32a5 	movw	r2, #933	; 0x3a5
 800f882:	4993      	ldr	r1, [pc, #588]	; (800fad0 <lwip_netconn_do_close_internal+0x2b0>)
 800f884:	488f      	ldr	r0, [pc, #572]	; (800fac4 <lwip_netconn_do_close_internal+0x2a4>)
 800f886:	f017 fb25 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	6a1b      	ldr	r3, [r3, #32]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d106      	bne.n	800f8a0 <lwip_netconn_do_close_internal+0x80>
 800f892:	4b8a      	ldr	r3, [pc, #552]	; (800fabc <lwip_netconn_do_close_internal+0x29c>)
 800f894:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f898:	498e      	ldr	r1, [pc, #568]	; (800fad4 <lwip_netconn_do_close_internal+0x2b4>)
 800f89a:	488a      	ldr	r0, [pc, #552]	; (800fac4 <lwip_netconn_do_close_internal+0x2a4>)
 800f89c:	f017 fb1a 	bl	8026ed4 <iprintf>

  tpcb = conn->pcb.tcp;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	685b      	ldr	r3, [r3, #4]
 800f8a4:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	6a1b      	ldr	r3, [r3, #32]
 800f8aa:	7a1b      	ldrb	r3, [r3, #8]
 800f8ac:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800f8ae:	7bfb      	ldrb	r3, [r7, #15]
 800f8b0:	f003 0301 	and.w	r3, r3, #1
 800f8b4:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800f8b6:	7bfb      	ldrb	r3, [r7, #15]
 800f8b8:	f003 0302 	and.w	r3, r3, #2
 800f8bc:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800f8be:	7bfb      	ldrb	r3, [r7, #15]
 800f8c0:	2b03      	cmp	r3, #3
 800f8c2:	d102      	bne.n	800f8ca <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	75bb      	strb	r3, [r7, #22]
 800f8c8:	e01f      	b.n	800f90a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800f8ca:	7bbb      	ldrb	r3, [r7, #14]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d00e      	beq.n	800f8ee <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800f8d0:	693b      	ldr	r3, [r7, #16]
 800f8d2:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800f8d4:	2b05      	cmp	r3, #5
 800f8d6:	d007      	beq.n	800f8e8 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800f8d8:	693b      	ldr	r3, [r7, #16]
 800f8da:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800f8dc:	2b06      	cmp	r3, #6
 800f8de:	d003      	beq.n	800f8e8 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800f8e0:	693b      	ldr	r3, [r7, #16]
 800f8e2:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800f8e4:	2b08      	cmp	r3, #8
 800f8e6:	d102      	bne.n	800f8ee <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800f8e8:	2301      	movs	r3, #1
 800f8ea:	75bb      	strb	r3, [r7, #22]
 800f8ec:	e00d      	b.n	800f90a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800f8ee:	7b7b      	ldrb	r3, [r7, #13]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d008      	beq.n	800f906 <lwip_netconn_do_close_internal+0xe6>
 800f8f4:	693b      	ldr	r3, [r7, #16]
 800f8f6:	8b5b      	ldrh	r3, [r3, #26]
 800f8f8:	f003 0310 	and.w	r3, r3, #16
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d002      	beq.n	800f906 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800f900:	2301      	movs	r3, #1
 800f902:	75bb      	strb	r3, [r7, #22]
 800f904:	e001      	b.n	800f90a <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800f906:	2300      	movs	r3, #0
 800f908:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800f90a:	7dbb      	ldrb	r3, [r7, #22]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d003      	beq.n	800f918 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800f910:	2100      	movs	r1, #0
 800f912:	6938      	ldr	r0, [r7, #16]
 800f914:	f008 f9e8 	bl	8017ce8 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800f918:	693b      	ldr	r3, [r7, #16]
 800f91a:	7d1b      	ldrb	r3, [r3, #20]
 800f91c:	2b01      	cmp	r3, #1
 800f91e:	d104      	bne.n	800f92a <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800f920:	2100      	movs	r1, #0
 800f922:	6938      	ldr	r0, [r7, #16]
 800f924:	f008 fa58 	bl	8017dd8 <tcp_accept>
 800f928:	e01d      	b.n	800f966 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800f92a:	7bbb      	ldrb	r3, [r7, #14]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d007      	beq.n	800f940 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800f930:	2100      	movs	r1, #0
 800f932:	6938      	ldr	r0, [r7, #16]
 800f934:	f008 f9ea 	bl	8017d0c <tcp_recv>
      tcp_accept(tpcb, NULL);
 800f938:	2100      	movs	r1, #0
 800f93a:	6938      	ldr	r0, [r7, #16]
 800f93c:	f008 fa4c 	bl	8017dd8 <tcp_accept>
    }
    if (shut_tx) {
 800f940:	7b7b      	ldrb	r3, [r7, #13]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d003      	beq.n	800f94e <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800f946:	2100      	movs	r1, #0
 800f948:	6938      	ldr	r0, [r7, #16]
 800f94a:	f008 fa01 	bl	8017d50 <tcp_sent>
    }
    if (shut_close) {
 800f94e:	7dbb      	ldrb	r3, [r7, #22]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d008      	beq.n	800f966 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800f954:	2200      	movs	r2, #0
 800f956:	2100      	movs	r1, #0
 800f958:	6938      	ldr	r0, [r7, #16]
 800f95a:	f008 fa55 	bl	8017e08 <tcp_poll>
      tcp_err(tpcb, NULL);
 800f95e:	2100      	movs	r1, #0
 800f960:	6938      	ldr	r0, [r7, #16]
 800f962:	f008 fa17 	bl	8017d94 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800f966:	7dbb      	ldrb	r3, [r7, #22]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d005      	beq.n	800f978 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800f96c:	6938      	ldr	r0, [r7, #16]
 800f96e:	f006 fecf 	bl	8016710 <tcp_close>
 800f972:	4603      	mov	r3, r0
 800f974:	75fb      	strb	r3, [r7, #23]
 800f976:	e007      	b.n	800f988 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800f978:	7bbb      	ldrb	r3, [r7, #14]
 800f97a:	7b7a      	ldrb	r2, [r7, #13]
 800f97c:	4619      	mov	r1, r3
 800f97e:	6938      	ldr	r0, [r7, #16]
 800f980:	f006 fef2 	bl	8016768 <tcp_shutdown>
 800f984:	4603      	mov	r3, r0
 800f986:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800f988:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d102      	bne.n	800f996 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800f990:	2301      	movs	r3, #1
 800f992:	757b      	strb	r3, [r7, #21]
 800f994:	e016      	b.n	800f9c4 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800f996:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f99a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f99e:	d10f      	bne.n	800f9c0 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	6a1b      	ldr	r3, [r3, #32]
 800f9a4:	7a5b      	ldrb	r3, [r3, #9]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d10c      	bne.n	800f9c4 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800f9aa:	2301      	movs	r3, #1
 800f9ac:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800f9ae:	7dbb      	ldrb	r3, [r7, #22]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d007      	beq.n	800f9c4 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800f9b4:	6938      	ldr	r0, [r7, #16]
 800f9b6:	f006 fff1 	bl	801699c <tcp_abort>
          err = ERR_OK;
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	75fb      	strb	r3, [r7, #23]
 800f9be:	e001      	b.n	800f9c4 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800f9c0:	2301      	movs	r3, #1
 800f9c2:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800f9c4:	7d7b      	ldrb	r3, [r7, #21]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d044      	beq.n	800fa54 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	6a1b      	ldr	r3, [r3, #32]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	330c      	adds	r3, #12
 800f9d2:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	6a1b      	ldr	r3, [r3, #32]
 800f9d8:	7dfa      	ldrb	r2, [r7, #23]
 800f9da:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	2200      	movs	r2, #0
 800f9e0:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800f9e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d129      	bne.n	800fa44 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800f9f0:	7dbb      	ldrb	r3, [r7, #22]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d00c      	beq.n	800fa10 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d005      	beq.n	800fa10 <lwip_netconn_do_close_internal+0x1f0>
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa08:	2200      	movs	r2, #0
 800fa0a:	2104      	movs	r1, #4
 800fa0c:	6878      	ldr	r0, [r7, #4]
 800fa0e:	4798      	blx	r3
      }
      if (shut_rx) {
 800fa10:	7bbb      	ldrb	r3, [r7, #14]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d009      	beq.n	800fa2a <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d005      	beq.n	800fa2a <lwip_netconn_do_close_internal+0x20a>
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa22:	2200      	movs	r2, #0
 800fa24:	2100      	movs	r1, #0
 800fa26:	6878      	ldr	r0, [r7, #4]
 800fa28:	4798      	blx	r3
      }
      if (shut_tx) {
 800fa2a:	7b7b      	ldrb	r3, [r7, #13]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d009      	beq.n	800fa44 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d005      	beq.n	800fa44 <lwip_netconn_do_close_internal+0x224>
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	2102      	movs	r1, #2
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800fa44:	78fb      	ldrb	r3, [r7, #3]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d002      	beq.n	800fa50 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800fa4a:	68b8      	ldr	r0, [r7, #8]
 800fa4c:	f012 f968 	bl	8021d20 <sys_sem_signal>
    }
    return ERR_OK;
 800fa50:	2300      	movs	r3, #0
 800fa52:	e02e      	b.n	800fab2 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800fa54:	7d7b      	ldrb	r3, [r7, #21]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d11e      	bne.n	800fa98 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800fa5a:	693b      	ldr	r3, [r7, #16]
 800fa5c:	7d1b      	ldrb	r3, [r3, #20]
 800fa5e:	2b01      	cmp	r3, #1
 800fa60:	d106      	bne.n	800fa70 <lwip_netconn_do_close_internal+0x250>
 800fa62:	4b16      	ldr	r3, [pc, #88]	; (800fabc <lwip_netconn_do_close_internal+0x29c>)
 800fa64:	f240 4241 	movw	r2, #1089	; 0x441
 800fa68:	491b      	ldr	r1, [pc, #108]	; (800fad8 <lwip_netconn_do_close_internal+0x2b8>)
 800fa6a:	4816      	ldr	r0, [pc, #88]	; (800fac4 <lwip_netconn_do_close_internal+0x2a4>)
 800fa6c:	f017 fa32 	bl	8026ed4 <iprintf>
    if (shut_tx) {
 800fa70:	7b7b      	ldrb	r3, [r7, #13]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d003      	beq.n	800fa7e <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800fa76:	4919      	ldr	r1, [pc, #100]	; (800fadc <lwip_netconn_do_close_internal+0x2bc>)
 800fa78:	6938      	ldr	r0, [r7, #16]
 800fa7a:	f008 f969 	bl	8017d50 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800fa7e:	2201      	movs	r2, #1
 800fa80:	4917      	ldr	r1, [pc, #92]	; (800fae0 <lwip_netconn_do_close_internal+0x2c0>)
 800fa82:	6938      	ldr	r0, [r7, #16]
 800fa84:	f008 f9c0 	bl	8017e08 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800fa88:	4916      	ldr	r1, [pc, #88]	; (800fae4 <lwip_netconn_do_close_internal+0x2c4>)
 800fa8a:	6938      	ldr	r0, [r7, #16]
 800fa8c:	f008 f982 	bl	8017d94 <tcp_err>
    tcp_arg(tpcb, conn);
 800fa90:	6879      	ldr	r1, [r7, #4]
 800fa92:	6938      	ldr	r0, [r7, #16]
 800fa94:	f008 f928 	bl	8017ce8 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800fa98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d106      	bne.n	800faae <lwip_netconn_do_close_internal+0x28e>
 800faa0:	4b06      	ldr	r3, [pc, #24]	; (800fabc <lwip_netconn_do_close_internal+0x29c>)
 800faa2:	f240 424d 	movw	r2, #1101	; 0x44d
 800faa6:	4910      	ldr	r1, [pc, #64]	; (800fae8 <lwip_netconn_do_close_internal+0x2c8>)
 800faa8:	4806      	ldr	r0, [pc, #24]	; (800fac4 <lwip_netconn_do_close_internal+0x2a4>)
 800faaa:	f017 fa13 	bl	8026ed4 <iprintf>
  return err;
 800faae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fab2:	4618      	mov	r0, r3
 800fab4:	3718      	adds	r7, #24
 800fab6:	46bd      	mov	sp, r7
 800fab8:	bd80      	pop	{r7, pc}
 800faba:	bf00      	nop
 800fabc:	0802a81c 	.word	0x0802a81c
 800fac0:	0802aaf0 	.word	0x0802aaf0
 800fac4:	0802a860 	.word	0x0802a860
 800fac8:	0802ab00 	.word	0x0802ab00
 800facc:	0802ab20 	.word	0x0802ab20
 800fad0:	0802ab44 	.word	0x0802ab44
 800fad4:	0802a984 	.word	0x0802a984
 800fad8:	0802ab58 	.word	0x0802ab58
 800fadc:	0800f099 	.word	0x0800f099
 800fae0:	0800efd1 	.word	0x0800efd1
 800fae4:	0800f141 	.word	0x0800f141
 800fae8:	0802ab7c 	.word	0x0802ab7c

0800faec <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b084      	sub	sp, #16
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	785b      	ldrb	r3, [r3, #1]
 800fafe:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800fb00:	7afb      	ldrb	r3, [r7, #11]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d00d      	beq.n	800fb22 <lwip_netconn_do_delconn+0x36>
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	781b      	ldrb	r3, [r3, #0]
 800fb0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fb10:	2b10      	cmp	r3, #16
 800fb12:	d006      	beq.n	800fb22 <lwip_netconn_do_delconn+0x36>
 800fb14:	4b60      	ldr	r3, [pc, #384]	; (800fc98 <lwip_netconn_do_delconn+0x1ac>)
 800fb16:	f240 425e 	movw	r2, #1118	; 0x45e
 800fb1a:	4960      	ldr	r1, [pc, #384]	; (800fc9c <lwip_netconn_do_delconn+0x1b0>)
 800fb1c:	4860      	ldr	r0, [pc, #384]	; (800fca0 <lwip_netconn_do_delconn+0x1b4>)
 800fb1e:	f017 f9d9 	bl	8026ed4 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800fb22:	7afb      	ldrb	r3, [r7, #11]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d005      	beq.n	800fb34 <lwip_netconn_do_delconn+0x48>
 800fb28:	7afb      	ldrb	r3, [r7, #11]
 800fb2a:	2b02      	cmp	r3, #2
 800fb2c:	d002      	beq.n	800fb34 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800fb2e:	7afb      	ldrb	r3, [r7, #11]
 800fb30:	2b03      	cmp	r3, #3
 800fb32:	d109      	bne.n	800fb48 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800fb34:	7afb      	ldrb	r3, [r7, #11]
 800fb36:	2b03      	cmp	r3, #3
 800fb38:	d10a      	bne.n	800fb50 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	7f1b      	ldrb	r3, [r3, #28]
 800fb40:	f003 0304 	and.w	r3, r3, #4
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d103      	bne.n	800fb50 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	22fb      	movs	r2, #251	; 0xfb
 800fb4c:	711a      	strb	r2, [r3, #4]
 800fb4e:	e097      	b.n	800fc80 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800fb50:	7afb      	ldrb	r3, [r7, #11]
 800fb52:	2b03      	cmp	r3, #3
 800fb54:	d10d      	bne.n	800fb72 <lwip_netconn_do_delconn+0x86>
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	7f1b      	ldrb	r3, [r3, #28]
 800fb5c:	f003 0304 	and.w	r3, r3, #4
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d106      	bne.n	800fb72 <lwip_netconn_do_delconn+0x86>
 800fb64:	4b4c      	ldr	r3, [pc, #304]	; (800fc98 <lwip_netconn_do_delconn+0x1ac>)
 800fb66:	f240 427a 	movw	r2, #1146	; 0x47a
 800fb6a:	494e      	ldr	r1, [pc, #312]	; (800fca4 <lwip_netconn_do_delconn+0x1b8>)
 800fb6c:	484c      	ldr	r0, [pc, #304]	; (800fca0 <lwip_netconn_do_delconn+0x1b4>)
 800fb6e:	f017 f9b1 	bl	8026ed4 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	2200      	movs	r2, #0
 800fb76:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	f7ff fdd1 	bl	800f724 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	685b      	ldr	r3, [r3, #4]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d05f      	beq.n	800fc4c <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	781b      	ldrb	r3, [r3, #0]
 800fb92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fb96:	2b10      	cmp	r3, #16
 800fb98:	d00d      	beq.n	800fbb6 <lwip_netconn_do_delconn+0xca>
 800fb9a:	2b20      	cmp	r3, #32
 800fb9c:	d151      	bne.n	800fc42 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	685b      	ldr	r3, [r3, #4]
 800fba4:	2200      	movs	r2, #0
 800fba6:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	685b      	ldr	r3, [r3, #4]
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f00d fbd6 	bl	801d360 <udp_remove>
          break;
 800fbb4:	e046      	b.n	800fc44 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	6a1b      	ldr	r3, [r3, #32]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d006      	beq.n	800fbce <lwip_netconn_do_delconn+0xe2>
 800fbc0:	4b35      	ldr	r3, [pc, #212]	; (800fc98 <lwip_netconn_do_delconn+0x1ac>)
 800fbc2:	f240 4294 	movw	r2, #1172	; 0x494
 800fbc6:	4938      	ldr	r1, [pc, #224]	; (800fca8 <lwip_netconn_do_delconn+0x1bc>)
 800fbc8:	4835      	ldr	r0, [pc, #212]	; (800fca0 <lwip_netconn_do_delconn+0x1b4>)
 800fbca:	f017 f983 	bl	8026ed4 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	2204      	movs	r2, #4
 800fbd4:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	2203      	movs	r2, #3
 800fbda:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	68fa      	ldr	r2, [r7, #12]
 800fbe2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	2100      	movs	r1, #0
 800fbea:	4618      	mov	r0, r3
 800fbec:	f7ff fe18 	bl	800f820 <lwip_netconn_do_close_internal>
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d04b      	beq.n	800fc8e <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	785b      	ldrb	r3, [r3, #1]
 800fbfc:	2b04      	cmp	r3, #4
 800fbfe:	d006      	beq.n	800fc0e <lwip_netconn_do_delconn+0x122>
 800fc00:	4b25      	ldr	r3, [pc, #148]	; (800fc98 <lwip_netconn_do_delconn+0x1ac>)
 800fc02:	f240 429a 	movw	r2, #1178	; 0x49a
 800fc06:	4929      	ldr	r1, [pc, #164]	; (800fcac <lwip_netconn_do_delconn+0x1c0>)
 800fc08:	4825      	ldr	r0, [pc, #148]	; (800fca0 <lwip_netconn_do_delconn+0x1b4>)
 800fc0a:	f017 f963 	bl	8026ed4 <iprintf>
            UNLOCK_TCPIP_CORE();
 800fc0e:	4828      	ldr	r0, [pc, #160]	; (800fcb0 <lwip_netconn_do_delconn+0x1c4>)
 800fc10:	f012 f8f7 	bl	8021e02 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	330c      	adds	r3, #12
 800fc1a:	2100      	movs	r1, #0
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	f012 f84e 	bl	8021cbe <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800fc22:	4823      	ldr	r0, [pc, #140]	; (800fcb0 <lwip_netconn_do_delconn+0x1c4>)
 800fc24:	f012 f8de 	bl	8021de4 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	785b      	ldrb	r3, [r3, #1]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d02d      	beq.n	800fc8e <lwip_netconn_do_delconn+0x1a2>
 800fc32:	4b19      	ldr	r3, [pc, #100]	; (800fc98 <lwip_netconn_do_delconn+0x1ac>)
 800fc34:	f240 429e 	movw	r2, #1182	; 0x49e
 800fc38:	491c      	ldr	r1, [pc, #112]	; (800fcac <lwip_netconn_do_delconn+0x1c0>)
 800fc3a:	4819      	ldr	r0, [pc, #100]	; (800fca0 <lwip_netconn_do_delconn+0x1b4>)
 800fc3c:	f017 f94a 	bl	8026ed4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800fc40:	e025      	b.n	800fc8e <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800fc42:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	2200      	movs	r2, #0
 800fc4a:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d007      	beq.n	800fc66 <lwip_netconn_do_delconn+0x17a>
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc5c:	68fa      	ldr	r2, [r7, #12]
 800fc5e:	6810      	ldr	r0, [r2, #0]
 800fc60:	2200      	movs	r2, #0
 800fc62:	2100      	movs	r1, #0
 800fc64:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d007      	beq.n	800fc80 <lwip_netconn_do_delconn+0x194>
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc76:	68fa      	ldr	r2, [r7, #12]
 800fc78:	6810      	ldr	r0, [r2, #0]
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	2102      	movs	r1, #2
 800fc7e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	330c      	adds	r3, #12
 800fc86:	4618      	mov	r0, r3
 800fc88:	f012 f864 	bl	8021d54 <sys_sem_valid>
 800fc8c:	e000      	b.n	800fc90 <lwip_netconn_do_delconn+0x1a4>
          return;
 800fc8e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800fc90:	3710      	adds	r7, #16
 800fc92:	46bd      	mov	sp, r7
 800fc94:	bd80      	pop	{r7, pc}
 800fc96:	bf00      	nop
 800fc98:	0802a81c 	.word	0x0802a81c
 800fc9c:	0802ab8c 	.word	0x0802ab8c
 800fca0:	0802a860 	.word	0x0802a860
 800fca4:	0802aba0 	.word	0x0802aba0
 800fca8:	0802abc0 	.word	0x0802abc0
 800fcac:	0802abdc 	.word	0x0802abdc
 800fcb0:	240053fc 	.word	0x240053fc

0800fcb4 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b084      	sub	sp, #16
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800fcc0:	68bb      	ldr	r3, [r7, #8]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	685b      	ldr	r3, [r3, #4]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d025      	beq.n	800fd16 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800fcca:	68bb      	ldr	r3, [r7, #8]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	781b      	ldrb	r3, [r3, #0]
 800fcd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fcd4:	2b10      	cmp	r3, #16
 800fcd6:	d00e      	beq.n	800fcf6 <lwip_netconn_do_bind+0x42>
 800fcd8:	2b20      	cmp	r3, #32
 800fcda:	d119      	bne.n	800fd10 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800fcdc:	68bb      	ldr	r3, [r7, #8]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	6858      	ldr	r0, [r3, #4]
 800fce2:	68bb      	ldr	r3, [r7, #8]
 800fce4:	6899      	ldr	r1, [r3, #8]
 800fce6:	68bb      	ldr	r3, [r7, #8]
 800fce8:	899b      	ldrh	r3, [r3, #12]
 800fcea:	461a      	mov	r2, r3
 800fcec:	f00d f9fa 	bl	801d0e4 <udp_bind>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	73fb      	strb	r3, [r7, #15]
        break;
 800fcf4:	e011      	b.n	800fd1a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800fcf6:	68bb      	ldr	r3, [r7, #8]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	6858      	ldr	r0, [r3, #4]
 800fcfc:	68bb      	ldr	r3, [r7, #8]
 800fcfe:	6899      	ldr	r1, [r3, #8]
 800fd00:	68bb      	ldr	r3, [r7, #8]
 800fd02:	899b      	ldrh	r3, [r3, #12]
 800fd04:	461a      	mov	r2, r3
 800fd06:	f006 fe55 	bl	80169b4 <tcp_bind>
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	73fb      	strb	r3, [r7, #15]
        break;
 800fd0e:	e004      	b.n	800fd1a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800fd10:	23fa      	movs	r3, #250	; 0xfa
 800fd12:	73fb      	strb	r3, [r7, #15]
        break;
 800fd14:	e001      	b.n	800fd1a <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800fd16:	23fa      	movs	r3, #250	; 0xfa
 800fd18:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800fd1a:	68bb      	ldr	r3, [r7, #8]
 800fd1c:	7bfa      	ldrb	r2, [r7, #15]
 800fd1e:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800fd20:	bf00      	nop
 800fd22:	3710      	adds	r7, #16
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}

0800fd28 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b088      	sub	sp, #32
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	60f8      	str	r0, [r7, #12]
 800fd30:	60b9      	str	r1, [r7, #8]
 800fd32:	4613      	mov	r3, r2
 800fd34:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800fd36:	2300      	movs	r3, #0
 800fd38:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800fd3e:	69bb      	ldr	r3, [r7, #24]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d102      	bne.n	800fd4a <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800fd44:	f06f 0305 	mvn.w	r3, #5
 800fd48:	e070      	b.n	800fe2c <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800fd4a:	69bb      	ldr	r3, [r7, #24]
 800fd4c:	785b      	ldrb	r3, [r3, #1]
 800fd4e:	2b03      	cmp	r3, #3
 800fd50:	d006      	beq.n	800fd60 <lwip_netconn_do_connected+0x38>
 800fd52:	4b38      	ldr	r3, [pc, #224]	; (800fe34 <lwip_netconn_do_connected+0x10c>)
 800fd54:	f240 5223 	movw	r2, #1315	; 0x523
 800fd58:	4937      	ldr	r1, [pc, #220]	; (800fe38 <lwip_netconn_do_connected+0x110>)
 800fd5a:	4838      	ldr	r0, [pc, #224]	; (800fe3c <lwip_netconn_do_connected+0x114>)
 800fd5c:	f017 f8ba 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800fd60:	69bb      	ldr	r3, [r7, #24]
 800fd62:	6a1b      	ldr	r3, [r3, #32]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d10c      	bne.n	800fd82 <lwip_netconn_do_connected+0x5a>
 800fd68:	69bb      	ldr	r3, [r7, #24]
 800fd6a:	7f1b      	ldrb	r3, [r3, #28]
 800fd6c:	f003 0304 	and.w	r3, r3, #4
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d106      	bne.n	800fd82 <lwip_netconn_do_connected+0x5a>
 800fd74:	4b2f      	ldr	r3, [pc, #188]	; (800fe34 <lwip_netconn_do_connected+0x10c>)
 800fd76:	f240 5224 	movw	r2, #1316	; 0x524
 800fd7a:	4931      	ldr	r1, [pc, #196]	; (800fe40 <lwip_netconn_do_connected+0x118>)
 800fd7c:	482f      	ldr	r0, [pc, #188]	; (800fe3c <lwip_netconn_do_connected+0x114>)
 800fd7e:	f017 f8a9 	bl	8026ed4 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800fd82:	69bb      	ldr	r3, [r7, #24]
 800fd84:	6a1b      	ldr	r3, [r3, #32]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d008      	beq.n	800fd9c <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800fd8a:	69bb      	ldr	r3, [r7, #24]
 800fd8c:	6a1b      	ldr	r3, [r3, #32]
 800fd8e:	79fa      	ldrb	r2, [r7, #7]
 800fd90:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800fd92:	69bb      	ldr	r3, [r7, #24]
 800fd94:	6a1b      	ldr	r3, [r3, #32]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	330c      	adds	r3, #12
 800fd9a:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800fd9c:	69bb      	ldr	r3, [r7, #24]
 800fd9e:	781b      	ldrb	r3, [r3, #0]
 800fda0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fda4:	2b10      	cmp	r3, #16
 800fda6:	d106      	bne.n	800fdb6 <lwip_netconn_do_connected+0x8e>
 800fda8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d102      	bne.n	800fdb6 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800fdb0:	69b8      	ldr	r0, [r7, #24]
 800fdb2:	f7ff fa9b 	bl	800f2ec <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800fdb6:	69bb      	ldr	r3, [r7, #24]
 800fdb8:	7f1b      	ldrb	r3, [r3, #28]
 800fdba:	f003 0304 	and.w	r3, r3, #4
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	bf0c      	ite	eq
 800fdc2:	2301      	moveq	r3, #1
 800fdc4:	2300      	movne	r3, #0
 800fdc6:	b2db      	uxtb	r3, r3
 800fdc8:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800fdca:	69bb      	ldr	r3, [r7, #24]
 800fdcc:	7f1b      	ldrb	r3, [r3, #28]
 800fdce:	f023 0304 	bic.w	r3, r3, #4
 800fdd2:	b2da      	uxtb	r2, r3
 800fdd4:	69bb      	ldr	r3, [r7, #24]
 800fdd6:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800fdd8:	697b      	ldr	r3, [r7, #20]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d002      	beq.n	800fde4 <lwip_netconn_do_connected+0xbc>
 800fdde:	69fb      	ldr	r3, [r7, #28]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d10c      	bne.n	800fdfe <lwip_netconn_do_connected+0xd6>
 800fde4:	697b      	ldr	r3, [r7, #20]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d102      	bne.n	800fdf0 <lwip_netconn_do_connected+0xc8>
 800fdea:	69fb      	ldr	r3, [r7, #28]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d006      	beq.n	800fdfe <lwip_netconn_do_connected+0xd6>
 800fdf0:	4b10      	ldr	r3, [pc, #64]	; (800fe34 <lwip_netconn_do_connected+0x10c>)
 800fdf2:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 800fdf6:	4913      	ldr	r1, [pc, #76]	; (800fe44 <lwip_netconn_do_connected+0x11c>)
 800fdf8:	4810      	ldr	r0, [pc, #64]	; (800fe3c <lwip_netconn_do_connected+0x114>)
 800fdfa:	f017 f86b 	bl	8026ed4 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800fdfe:	69bb      	ldr	r3, [r7, #24]
 800fe00:	2200      	movs	r2, #0
 800fe02:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800fe04:	69bb      	ldr	r3, [r7, #24]
 800fe06:	2200      	movs	r2, #0
 800fe08:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800fe0a:	69bb      	ldr	r3, [r7, #24]
 800fe0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d005      	beq.n	800fe1e <lwip_netconn_do_connected+0xf6>
 800fe12:	69bb      	ldr	r3, [r7, #24]
 800fe14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe16:	2200      	movs	r2, #0
 800fe18:	2102      	movs	r1, #2
 800fe1a:	69b8      	ldr	r0, [r7, #24]
 800fe1c:	4798      	blx	r3

  if (was_blocking) {
 800fe1e:	697b      	ldr	r3, [r7, #20]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d002      	beq.n	800fe2a <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800fe24:	69f8      	ldr	r0, [r7, #28]
 800fe26:	f011 ff7b 	bl	8021d20 <sys_sem_signal>
  }
  return ERR_OK;
 800fe2a:	2300      	movs	r3, #0
}
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	3720      	adds	r7, #32
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}
 800fe34:	0802a81c 	.word	0x0802a81c
 800fe38:	0802abe4 	.word	0x0802abe4
 800fe3c:	0802a860 	.word	0x0802a860
 800fe40:	0802ac04 	.word	0x0802ac04
 800fe44:	0802ac44 	.word	0x0802ac44

0800fe48 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b086      	sub	sp, #24
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800fe54:	693b      	ldr	r3, [r7, #16]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	685b      	ldr	r3, [r3, #4]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d102      	bne.n	800fe64 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800fe5e:	23f1      	movs	r3, #241	; 0xf1
 800fe60:	75fb      	strb	r3, [r7, #23]
 800fe62:	e09b      	b.n	800ff9c <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800fe64:	693b      	ldr	r3, [r7, #16]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	781b      	ldrb	r3, [r3, #0]
 800fe6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fe6e:	2b10      	cmp	r3, #16
 800fe70:	d00f      	beq.n	800fe92 <lwip_netconn_do_connect+0x4a>
 800fe72:	2b20      	cmp	r3, #32
 800fe74:	f040 8087 	bne.w	800ff86 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800fe78:	693b      	ldr	r3, [r7, #16]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	6858      	ldr	r0, [r3, #4]
 800fe7e:	693b      	ldr	r3, [r7, #16]
 800fe80:	6899      	ldr	r1, [r3, #8]
 800fe82:	693b      	ldr	r3, [r7, #16]
 800fe84:	899b      	ldrh	r3, [r3, #12]
 800fe86:	461a      	mov	r2, r3
 800fe88:	f00d f9b4 	bl	801d1f4 <udp_connect>
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	75fb      	strb	r3, [r7, #23]
        break;
 800fe90:	e084      	b.n	800ff9c <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800fe92:	693b      	ldr	r3, [r7, #16]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	785b      	ldrb	r3, [r3, #1]
 800fe98:	2b03      	cmp	r3, #3
 800fe9a:	d102      	bne.n	800fea2 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800fe9c:	23f7      	movs	r3, #247	; 0xf7
 800fe9e:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800fea0:	e07b      	b.n	800ff9a <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 800fea2:	693b      	ldr	r3, [r7, #16]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	785b      	ldrb	r3, [r3, #1]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d002      	beq.n	800feb2 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800feac:	23f6      	movs	r3, #246	; 0xf6
 800feae:	75fb      	strb	r3, [r7, #23]
        break;
 800feb0:	e073      	b.n	800ff9a <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800feb2:	693b      	ldr	r3, [r7, #16]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	4618      	mov	r0, r3
 800feb8:	f7ff fa18 	bl	800f2ec <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800febc:	693b      	ldr	r3, [r7, #16]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	6858      	ldr	r0, [r3, #4]
 800fec2:	693b      	ldr	r3, [r7, #16]
 800fec4:	6899      	ldr	r1, [r3, #8]
 800fec6:	693b      	ldr	r3, [r7, #16]
 800fec8:	899a      	ldrh	r2, [r3, #12]
 800feca:	4b38      	ldr	r3, [pc, #224]	; (800ffac <lwip_netconn_do_connect+0x164>)
 800fecc:	f006 ffc4 	bl	8016e58 <tcp_connect>
 800fed0:	4603      	mov	r3, r0
 800fed2:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800fed4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d15e      	bne.n	800ff9a <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800fedc:	693b      	ldr	r3, [r7, #16]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	7f1b      	ldrb	r3, [r3, #28]
 800fee2:	f003 0302 	and.w	r3, r3, #2
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	bf14      	ite	ne
 800feea:	2301      	movne	r3, #1
 800feec:	2300      	moveq	r3, #0
 800feee:	b2db      	uxtb	r3, r3
 800fef0:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800fef2:	693b      	ldr	r3, [r7, #16]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	2203      	movs	r2, #3
 800fef8:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800fefa:	7bfb      	ldrb	r3, [r7, #15]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d009      	beq.n	800ff14 <lwip_netconn_do_connect+0xcc>
 800ff00:	693b      	ldr	r3, [r7, #16]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	7f1a      	ldrb	r2, [r3, #28]
 800ff06:	693b      	ldr	r3, [r7, #16]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	f042 0204 	orr.w	r2, r2, #4
 800ff0e:	b2d2      	uxtb	r2, r2
 800ff10:	771a      	strb	r2, [r3, #28]
 800ff12:	e008      	b.n	800ff26 <lwip_netconn_do_connect+0xde>
 800ff14:	693b      	ldr	r3, [r7, #16]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	7f1a      	ldrb	r2, [r3, #28]
 800ff1a:	693b      	ldr	r3, [r7, #16]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	f022 0204 	bic.w	r2, r2, #4
 800ff22:	b2d2      	uxtb	r2, r2
 800ff24:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800ff26:	7bfb      	ldrb	r3, [r7, #15]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d002      	beq.n	800ff32 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800ff2c:	23fb      	movs	r3, #251	; 0xfb
 800ff2e:	75fb      	strb	r3, [r7, #23]
        break;
 800ff30:	e033      	b.n	800ff9a <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800ff32:	693b      	ldr	r3, [r7, #16]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	693a      	ldr	r2, [r7, #16]
 800ff38:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800ff3a:	693b      	ldr	r3, [r7, #16]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	785b      	ldrb	r3, [r3, #1]
 800ff40:	2b03      	cmp	r3, #3
 800ff42:	d006      	beq.n	800ff52 <lwip_netconn_do_connect+0x10a>
 800ff44:	4b1a      	ldr	r3, [pc, #104]	; (800ffb0 <lwip_netconn_do_connect+0x168>)
 800ff46:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800ff4a:	491a      	ldr	r1, [pc, #104]	; (800ffb4 <lwip_netconn_do_connect+0x16c>)
 800ff4c:	481a      	ldr	r0, [pc, #104]	; (800ffb8 <lwip_netconn_do_connect+0x170>)
 800ff4e:	f016 ffc1 	bl	8026ed4 <iprintf>
              UNLOCK_TCPIP_CORE();
 800ff52:	481a      	ldr	r0, [pc, #104]	; (800ffbc <lwip_netconn_do_connect+0x174>)
 800ff54:	f011 ff55 	bl	8021e02 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ff58:	693b      	ldr	r3, [r7, #16]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	330c      	adds	r3, #12
 800ff5e:	2100      	movs	r1, #0
 800ff60:	4618      	mov	r0, r3
 800ff62:	f011 feac 	bl	8021cbe <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800ff66:	4815      	ldr	r0, [pc, #84]	; (800ffbc <lwip_netconn_do_connect+0x174>)
 800ff68:	f011 ff3c 	bl	8021de4 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800ff6c:	693b      	ldr	r3, [r7, #16]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	785b      	ldrb	r3, [r3, #1]
 800ff72:	2b03      	cmp	r3, #3
 800ff74:	d116      	bne.n	800ffa4 <lwip_netconn_do_connect+0x15c>
 800ff76:	4b0e      	ldr	r3, [pc, #56]	; (800ffb0 <lwip_netconn_do_connect+0x168>)
 800ff78:	f240 5274 	movw	r2, #1396	; 0x574
 800ff7c:	490d      	ldr	r1, [pc, #52]	; (800ffb4 <lwip_netconn_do_connect+0x16c>)
 800ff7e:	480e      	ldr	r0, [pc, #56]	; (800ffb8 <lwip_netconn_do_connect+0x170>)
 800ff80:	f016 ffa8 	bl	8026ed4 <iprintf>
              return;
 800ff84:	e00e      	b.n	800ffa4 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800ff86:	4b0a      	ldr	r3, [pc, #40]	; (800ffb0 <lwip_netconn_do_connect+0x168>)
 800ff88:	f240 527d 	movw	r2, #1405	; 0x57d
 800ff8c:	490c      	ldr	r1, [pc, #48]	; (800ffc0 <lwip_netconn_do_connect+0x178>)
 800ff8e:	480a      	ldr	r0, [pc, #40]	; (800ffb8 <lwip_netconn_do_connect+0x170>)
 800ff90:	f016 ffa0 	bl	8026ed4 <iprintf>
 800ff94:	23fa      	movs	r3, #250	; 0xfa
 800ff96:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800ff98:	e000      	b.n	800ff9c <lwip_netconn_do_connect+0x154>
        break;
 800ff9a:	bf00      	nop
    }
  }
  msg->err = err;
 800ff9c:	693b      	ldr	r3, [r7, #16]
 800ff9e:	7dfa      	ldrb	r2, [r7, #23]
 800ffa0:	711a      	strb	r2, [r3, #4]
 800ffa2:	e000      	b.n	800ffa6 <lwip_netconn_do_connect+0x15e>
              return;
 800ffa4:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800ffa6:	3718      	adds	r7, #24
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}
 800ffac:	0800fd29 	.word	0x0800fd29
 800ffb0:	0802a81c 	.word	0x0802a81c
 800ffb4:	0802abdc 	.word	0x0802abdc
 800ffb8:	0802a860 	.word	0x0802a860
 800ffbc:	240053fc 	.word	0x240053fc
 800ffc0:	0802ac64 	.word	0x0802ac64

0800ffc4 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b084      	sub	sp, #16
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	781b      	ldrb	r3, [r3, #0]
 800ffd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ffda:	2b20      	cmp	r3, #32
 800ffdc:	d109      	bne.n	800fff2 <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	685b      	ldr	r3, [r3, #4]
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f00d f973 	bl	801d2d0 <udp_disconnect>
    msg->err = ERR_OK;
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	2200      	movs	r2, #0
 800ffee:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  }
  TCPIP_APIMSG_ACK(msg);
}
 800fff0:	e002      	b.n	800fff8 <lwip_netconn_do_disconnect+0x34>
    msg->err = ERR_VAL;
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	22fa      	movs	r2, #250	; 0xfa
 800fff6:	711a      	strb	r2, [r3, #4]
}
 800fff8:	bf00      	nop
 800fffa:	3710      	adds	r7, #16
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bd80      	pop	{r7, pc}

08010000 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b086      	sub	sp, #24
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 801000c:	697b      	ldr	r3, [r7, #20]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	685b      	ldr	r3, [r3, #4]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d07f      	beq.n	8010116 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8010016:	697b      	ldr	r3, [r7, #20]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	781b      	ldrb	r3, [r3, #0]
 801001c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010020:	2b10      	cmp	r3, #16
 8010022:	d175      	bne.n	8010110 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8010024:	697b      	ldr	r3, [r7, #20]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	785b      	ldrb	r3, [r3, #1]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d165      	bne.n	80100fa <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 801002e:	697b      	ldr	r3, [r7, #20]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	685b      	ldr	r3, [r3, #4]
 8010034:	7d1b      	ldrb	r3, [r3, #20]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d002      	beq.n	8010040 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 801003a:	23fa      	movs	r3, #250	; 0xfa
 801003c:	72fb      	strb	r3, [r7, #11]
 801003e:	e06c      	b.n	801011a <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8010040:	23ff      	movs	r3, #255	; 0xff
 8010042:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8010044:	697b      	ldr	r3, [r7, #20]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	685b      	ldr	r3, [r3, #4]
 801004a:	f107 020b 	add.w	r2, r7, #11
 801004e:	7cf9      	ldrb	r1, [r7, #19]
 8010050:	4618      	mov	r0, r3
 8010052:	f006 fd67 	bl	8016b24 <tcp_listen_with_backlog_and_err>
 8010056:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d05d      	beq.n	801011a <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 801005e:	697b      	ldr	r3, [r7, #20]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	3310      	adds	r3, #16
 8010064:	4618      	mov	r0, r3
 8010066:	f011 fde4 	bl	8021c32 <sys_mbox_valid>
 801006a:	4603      	mov	r3, r0
 801006c:	2b00      	cmp	r3, #0
 801006e:	d00b      	beq.n	8010088 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8010070:	697b      	ldr	r3, [r7, #20]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	3310      	adds	r3, #16
 8010076:	4618      	mov	r0, r3
 8010078:	f011 fd54 	bl	8021b24 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 801007c:	697b      	ldr	r3, [r7, #20]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	3310      	adds	r3, #16
 8010082:	4618      	mov	r0, r3
 8010084:	f011 fde6 	bl	8021c54 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8010088:	2300      	movs	r3, #0
 801008a:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 801008c:	697b      	ldr	r3, [r7, #20]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	3314      	adds	r3, #20
 8010092:	4618      	mov	r0, r3
 8010094:	f011 fdcd 	bl	8021c32 <sys_mbox_valid>
 8010098:	4603      	mov	r3, r0
 801009a:	2b00      	cmp	r3, #0
 801009c:	d108      	bne.n	80100b0 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 801009e:	697b      	ldr	r3, [r7, #20]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	3314      	adds	r3, #20
 80100a4:	2106      	movs	r1, #6
 80100a6:	4618      	mov	r0, r3
 80100a8:	f011 fd1a 	bl	8021ae0 <sys_mbox_new>
 80100ac:	4603      	mov	r3, r0
 80100ae:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 80100b0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d118      	bne.n	80100ea <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 80100b8:	697b      	ldr	r3, [r7, #20]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	2202      	movs	r2, #2
 80100be:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 80100c0:	697b      	ldr	r3, [r7, #20]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	68fa      	ldr	r2, [r7, #12]
 80100c6:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80100c8:	697b      	ldr	r3, [r7, #20]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	685a      	ldr	r2, [r3, #4]
 80100ce:	697b      	ldr	r3, [r7, #20]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	4619      	mov	r1, r3
 80100d4:	4610      	mov	r0, r2
 80100d6:	f007 fe07 	bl	8017ce8 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	685b      	ldr	r3, [r3, #4]
 80100e0:	4912      	ldr	r1, [pc, #72]	; (801012c <lwip_netconn_do_listen+0x12c>)
 80100e2:	4618      	mov	r0, r3
 80100e4:	f007 fe78 	bl	8017dd8 <tcp_accept>
 80100e8:	e017      	b.n	801011a <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 80100ea:	68f8      	ldr	r0, [r7, #12]
 80100ec:	f006 fb10 	bl	8016710 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	2200      	movs	r2, #0
 80100f6:	605a      	str	r2, [r3, #4]
 80100f8:	e00f      	b.n	801011a <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 80100fa:	697b      	ldr	r3, [r7, #20]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	785b      	ldrb	r3, [r3, #1]
 8010100:	2b02      	cmp	r3, #2
 8010102:	d102      	bne.n	801010a <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8010104:	2300      	movs	r3, #0
 8010106:	72fb      	strb	r3, [r7, #11]
 8010108:	e007      	b.n	801011a <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 801010a:	23f5      	movs	r3, #245	; 0xf5
 801010c:	72fb      	strb	r3, [r7, #11]
 801010e:	e004      	b.n	801011a <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8010110:	23f0      	movs	r3, #240	; 0xf0
 8010112:	72fb      	strb	r3, [r7, #11]
 8010114:	e001      	b.n	801011a <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 8010116:	23f5      	movs	r3, #245	; 0xf5
 8010118:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 801011a:	f997 200b 	ldrsb.w	r2, [r7, #11]
 801011e:	697b      	ldr	r3, [r7, #20]
 8010120:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8010122:	bf00      	nop
 8010124:	3718      	adds	r7, #24
 8010126:	46bd      	mov	sp, r7
 8010128:	bd80      	pop	{r7, pc}
 801012a:	bf00      	nop
 801012c:	0800f33d 	.word	0x0800f33d

08010130 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b084      	sub	sp, #16
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 801013c:	68bb      	ldr	r3, [r7, #8]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	4618      	mov	r0, r3
 8010142:	f7fe fd39 	bl	800ebb8 <netconn_err>
 8010146:	4603      	mov	r3, r0
 8010148:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 801014a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d134      	bne.n	80101bc <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 8010152:	68bb      	ldr	r3, [r7, #8]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	685b      	ldr	r3, [r3, #4]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d02d      	beq.n	80101b8 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801015c:	68bb      	ldr	r3, [r7, #8]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	781b      	ldrb	r3, [r3, #0]
 8010162:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010166:	2b20      	cmp	r3, #32
 8010168:	d123      	bne.n	80101b2 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 801016a:	68bb      	ldr	r3, [r7, #8]
 801016c:	689b      	ldr	r3, [r3, #8]
 801016e:	689b      	ldr	r3, [r3, #8]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d10c      	bne.n	801018e <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8010174:	68bb      	ldr	r3, [r7, #8]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	685a      	ldr	r2, [r3, #4]
 801017a:	68bb      	ldr	r3, [r7, #8]
 801017c:	689b      	ldr	r3, [r3, #8]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	4619      	mov	r1, r3
 8010182:	4610      	mov	r0, r2
 8010184:	f00c fdc4 	bl	801cd10 <udp_send>
 8010188:	4603      	mov	r3, r0
 801018a:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 801018c:	e016      	b.n	80101bc <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 801018e:	68bb      	ldr	r3, [r7, #8]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	6858      	ldr	r0, [r3, #4]
 8010194:	68bb      	ldr	r3, [r7, #8]
 8010196:	689b      	ldr	r3, [r3, #8]
 8010198:	6819      	ldr	r1, [r3, #0]
 801019a:	68bb      	ldr	r3, [r7, #8]
 801019c:	689b      	ldr	r3, [r3, #8]
 801019e:	f103 0208 	add.w	r2, r3, #8
 80101a2:	68bb      	ldr	r3, [r7, #8]
 80101a4:	689b      	ldr	r3, [r3, #8]
 80101a6:	899b      	ldrh	r3, [r3, #12]
 80101a8:	f00c fde6 	bl	801cd78 <udp_sendto>
 80101ac:	4603      	mov	r3, r0
 80101ae:	73fb      	strb	r3, [r7, #15]
          break;
 80101b0:	e004      	b.n	80101bc <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 80101b2:	23f5      	movs	r3, #245	; 0xf5
 80101b4:	73fb      	strb	r3, [r7, #15]
          break;
 80101b6:	e001      	b.n	80101bc <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 80101b8:	23f5      	movs	r3, #245	; 0xf5
 80101ba:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 80101bc:	68bb      	ldr	r3, [r7, #8]
 80101be:	7bfa      	ldrb	r2, [r7, #15]
 80101c0:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80101c2:	bf00      	nop
 80101c4:	3710      	adds	r7, #16
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bd80      	pop	{r7, pc}

080101ca <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80101ca:	b580      	push	{r7, lr}
 80101cc:	b086      	sub	sp, #24
 80101ce:	af00      	add	r7, sp, #0
 80101d0:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80101d6:	693b      	ldr	r3, [r7, #16]
 80101d8:	2200      	movs	r2, #0
 80101da:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80101dc:	693b      	ldr	r3, [r7, #16]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	685b      	ldr	r3, [r3, #4]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d022      	beq.n	801022c <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80101e6:	693b      	ldr	r3, [r7, #16]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	781b      	ldrb	r3, [r3, #0]
 80101ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80101f0:	2b10      	cmp	r3, #16
 80101f2:	d11b      	bne.n	801022c <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 80101f4:	693b      	ldr	r3, [r7, #16]
 80101f6:	689b      	ldr	r3, [r3, #8]
 80101f8:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 80101fa:	697b      	ldr	r3, [r7, #20]
 80101fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010200:	d202      	bcs.n	8010208 <lwip_netconn_do_recv+0x3e>
 8010202:	697b      	ldr	r3, [r7, #20]
 8010204:	b29b      	uxth	r3, r3
 8010206:	e001      	b.n	801020c <lwip_netconn_do_recv+0x42>
 8010208:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801020c:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 801020e:	693b      	ldr	r3, [r7, #16]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	685b      	ldr	r3, [r3, #4]
 8010214:	89fa      	ldrh	r2, [r7, #14]
 8010216:	4611      	mov	r1, r2
 8010218:	4618      	mov	r0, r3
 801021a:	f006 fd87 	bl	8016d2c <tcp_recved>
        remaining -= recved;
 801021e:	89fb      	ldrh	r3, [r7, #14]
 8010220:	697a      	ldr	r2, [r7, #20]
 8010222:	1ad3      	subs	r3, r2, r3
 8010224:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8010226:	697b      	ldr	r3, [r7, #20]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d1e6      	bne.n	80101fa <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 801022c:	bf00      	nop
 801022e:	3718      	adds	r7, #24
 8010230:	46bd      	mov	sp, r7
 8010232:	bd80      	pop	{r7, pc}

08010234 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8010234:	b580      	push	{r7, lr}
 8010236:	b088      	sub	sp, #32
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
 801023c:	460b      	mov	r3, r1
 801023e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8010240:	2300      	movs	r3, #0
 8010242:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d106      	bne.n	8010258 <lwip_netconn_do_writemore+0x24>
 801024a:	4b96      	ldr	r3, [pc, #600]	; (80104a4 <lwip_netconn_do_writemore+0x270>)
 801024c:	f240 6273 	movw	r2, #1651	; 0x673
 8010250:	4995      	ldr	r1, [pc, #596]	; (80104a8 <lwip_netconn_do_writemore+0x274>)
 8010252:	4896      	ldr	r0, [pc, #600]	; (80104ac <lwip_netconn_do_writemore+0x278>)
 8010254:	f016 fe3e 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	785b      	ldrb	r3, [r3, #1]
 801025c:	2b01      	cmp	r3, #1
 801025e:	d006      	beq.n	801026e <lwip_netconn_do_writemore+0x3a>
 8010260:	4b90      	ldr	r3, [pc, #576]	; (80104a4 <lwip_netconn_do_writemore+0x270>)
 8010262:	f240 6274 	movw	r2, #1652	; 0x674
 8010266:	4992      	ldr	r1, [pc, #584]	; (80104b0 <lwip_netconn_do_writemore+0x27c>)
 8010268:	4890      	ldr	r0, [pc, #576]	; (80104ac <lwip_netconn_do_writemore+0x278>)
 801026a:	f016 fe33 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	6a1b      	ldr	r3, [r3, #32]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d106      	bne.n	8010284 <lwip_netconn_do_writemore+0x50>
 8010276:	4b8b      	ldr	r3, [pc, #556]	; (80104a4 <lwip_netconn_do_writemore+0x270>)
 8010278:	f240 6275 	movw	r2, #1653	; 0x675
 801027c:	498d      	ldr	r1, [pc, #564]	; (80104b4 <lwip_netconn_do_writemore+0x280>)
 801027e:	488b      	ldr	r0, [pc, #556]	; (80104ac <lwip_netconn_do_writemore+0x278>)
 8010280:	f016 fe28 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	685b      	ldr	r3, [r3, #4]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d106      	bne.n	801029a <lwip_netconn_do_writemore+0x66>
 801028c:	4b85      	ldr	r3, [pc, #532]	; (80104a4 <lwip_netconn_do_writemore+0x270>)
 801028e:	f240 6276 	movw	r2, #1654	; 0x676
 8010292:	4989      	ldr	r1, [pc, #548]	; (80104b8 <lwip_netconn_do_writemore+0x284>)
 8010294:	4885      	ldr	r0, [pc, #532]	; (80104ac <lwip_netconn_do_writemore+0x278>)
 8010296:	f016 fe1d 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	6a1b      	ldr	r3, [r3, #32]
 801029e:	699a      	ldr	r2, [r3, #24]
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	6a1b      	ldr	r3, [r3, #32]
 80102a4:	695b      	ldr	r3, [r3, #20]
 80102a6:	429a      	cmp	r2, r3
 80102a8:	d306      	bcc.n	80102b8 <lwip_netconn_do_writemore+0x84>
 80102aa:	4b7e      	ldr	r3, [pc, #504]	; (80104a4 <lwip_netconn_do_writemore+0x270>)
 80102ac:	f240 6277 	movw	r2, #1655	; 0x677
 80102b0:	4982      	ldr	r1, [pc, #520]	; (80104bc <lwip_netconn_do_writemore+0x288>)
 80102b2:	487e      	ldr	r0, [pc, #504]	; (80104ac <lwip_netconn_do_writemore+0x278>)
 80102b4:	f016 fe0e 	bl	8026ed4 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	6a1b      	ldr	r3, [r3, #32]
 80102bc:	899b      	ldrh	r3, [r3, #12]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d106      	bne.n	80102d0 <lwip_netconn_do_writemore+0x9c>
 80102c2:	4b78      	ldr	r3, [pc, #480]	; (80104a4 <lwip_netconn_do_writemore+0x270>)
 80102c4:	f240 6279 	movw	r2, #1657	; 0x679
 80102c8:	497d      	ldr	r1, [pc, #500]	; (80104c0 <lwip_netconn_do_writemore+0x28c>)
 80102ca:	4878      	ldr	r0, [pc, #480]	; (80104ac <lwip_netconn_do_writemore+0x278>)
 80102cc:	f016 fe02 	bl	8026ed4 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	6a1b      	ldr	r3, [r3, #32]
 80102d4:	7f1b      	ldrb	r3, [r3, #28]
 80102d6:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	7f1b      	ldrb	r3, [r3, #28]
 80102dc:	f003 0302 	and.w	r3, r3, #2
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d104      	bne.n	80102ee <lwip_netconn_do_writemore+0xba>
 80102e4:	7ebb      	ldrb	r3, [r7, #26]
 80102e6:	f003 0304 	and.w	r3, r3, #4
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d001      	beq.n	80102f2 <lwip_netconn_do_writemore+0xbe>
 80102ee:	2301      	movs	r3, #1
 80102f0:	e000      	b.n	80102f4 <lwip_netconn_do_writemore+0xc0>
 80102f2:	2300      	movs	r3, #0
 80102f4:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	6a1b      	ldr	r3, [r3, #32]
 80102fa:	689b      	ldr	r3, [r3, #8]
 80102fc:	681a      	ldr	r2, [r3, #0]
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	6a1b      	ldr	r3, [r3, #32]
 8010302:	691b      	ldr	r3, [r3, #16]
 8010304:	4413      	add	r3, r2
 8010306:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	6a1b      	ldr	r3, [r3, #32]
 801030c:	689b      	ldr	r3, [r3, #8]
 801030e:	685a      	ldr	r2, [r3, #4]
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	6a1b      	ldr	r3, [r3, #32]
 8010314:	691b      	ldr	r3, [r3, #16]
 8010316:	1ad3      	subs	r3, r2, r3
 8010318:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 801031a:	693b      	ldr	r3, [r7, #16]
 801031c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010320:	d307      	bcc.n	8010332 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8010322:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010326:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8010328:	7ebb      	ldrb	r3, [r7, #26]
 801032a:	f043 0302 	orr.w	r3, r3, #2
 801032e:	76bb      	strb	r3, [r7, #26]
 8010330:	e001      	b.n	8010336 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8010332:	693b      	ldr	r3, [r7, #16]
 8010334:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	685b      	ldr	r3, [r3, #4]
 801033a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801033e:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8010340:	89fa      	ldrh	r2, [r7, #14]
 8010342:	8bbb      	ldrh	r3, [r7, #28]
 8010344:	429a      	cmp	r2, r3
 8010346:	d216      	bcs.n	8010376 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8010348:	89fb      	ldrh	r3, [r7, #14]
 801034a:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 801034c:	7e3b      	ldrb	r3, [r7, #24]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d00d      	beq.n	801036e <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8010352:	8bbb      	ldrh	r3, [r7, #28]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d10e      	bne.n	8010376 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	6a1b      	ldr	r3, [r3, #32]
 801035c:	699b      	ldr	r3, [r3, #24]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d102      	bne.n	8010368 <lwip_netconn_do_writemore+0x134>
 8010362:	f06f 0306 	mvn.w	r3, #6
 8010366:	e000      	b.n	801036a <lwip_netconn_do_writemore+0x136>
 8010368:	2300      	movs	r3, #0
 801036a:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 801036c:	e07d      	b.n	801046a <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 801036e:	7ebb      	ldrb	r3, [r7, #26]
 8010370:	f043 0302 	orr.w	r3, r3, #2
 8010374:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	6a1b      	ldr	r3, [r3, #32]
 801037a:	691a      	ldr	r2, [r3, #16]
 801037c:	8bbb      	ldrh	r3, [r7, #28]
 801037e:	441a      	add	r2, r3
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	6a1b      	ldr	r3, [r3, #32]
 8010384:	689b      	ldr	r3, [r3, #8]
 8010386:	685b      	ldr	r3, [r3, #4]
 8010388:	429a      	cmp	r2, r3
 801038a:	d906      	bls.n	801039a <lwip_netconn_do_writemore+0x166>
 801038c:	4b45      	ldr	r3, [pc, #276]	; (80104a4 <lwip_netconn_do_writemore+0x270>)
 801038e:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8010392:	494c      	ldr	r1, [pc, #304]	; (80104c4 <lwip_netconn_do_writemore+0x290>)
 8010394:	4845      	ldr	r0, [pc, #276]	; (80104ac <lwip_netconn_do_writemore+0x278>)
 8010396:	f016 fd9d 	bl	8026ed4 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 801039a:	8bbb      	ldrh	r3, [r7, #28]
 801039c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80103a0:	4293      	cmp	r3, r2
 80103a2:	d103      	bne.n	80103ac <lwip_netconn_do_writemore+0x178>
 80103a4:	693b      	ldr	r3, [r7, #16]
 80103a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80103aa:	d209      	bcs.n	80103c0 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80103ac:	693b      	ldr	r3, [r7, #16]
 80103ae:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 80103b0:	8bba      	ldrh	r2, [r7, #28]
 80103b2:	429a      	cmp	r2, r3
 80103b4:	d10b      	bne.n	80103ce <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	6a1b      	ldr	r3, [r3, #32]
 80103ba:	899b      	ldrh	r3, [r3, #12]
 80103bc:	2b01      	cmp	r3, #1
 80103be:	d906      	bls.n	80103ce <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 80103c0:	2301      	movs	r3, #1
 80103c2:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80103c4:	7ebb      	ldrb	r3, [r7, #26]
 80103c6:	f043 0302 	orr.w	r3, r3, #2
 80103ca:	76bb      	strb	r3, [r7, #26]
 80103cc:	e001      	b.n	80103d2 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80103ce:	2300      	movs	r3, #0
 80103d0:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	6858      	ldr	r0, [r3, #4]
 80103d6:	7ebb      	ldrb	r3, [r7, #26]
 80103d8:	8bba      	ldrh	r2, [r7, #28]
 80103da:	6979      	ldr	r1, [r7, #20]
 80103dc:	f00a fbc2 	bl	801ab64 <tcp_write>
 80103e0:	4603      	mov	r3, r0
 80103e2:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80103e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d12c      	bne.n	8010446 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	6a1b      	ldr	r3, [r3, #32]
 80103f0:	6999      	ldr	r1, [r3, #24]
 80103f2:	8bba      	ldrh	r2, [r7, #28]
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	6a1b      	ldr	r3, [r3, #32]
 80103f8:	440a      	add	r2, r1
 80103fa:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	6a1b      	ldr	r3, [r3, #32]
 8010400:	6919      	ldr	r1, [r3, #16]
 8010402:	8bba      	ldrh	r2, [r7, #28]
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	6a1b      	ldr	r3, [r3, #32]
 8010408:	440a      	add	r2, r1
 801040a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	6a1b      	ldr	r3, [r3, #32]
 8010410:	691a      	ldr	r2, [r3, #16]
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	6a1b      	ldr	r3, [r3, #32]
 8010416:	689b      	ldr	r3, [r3, #8]
 8010418:	685b      	ldr	r3, [r3, #4]
 801041a:	429a      	cmp	r2, r3
 801041c:	d113      	bne.n	8010446 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	6a1b      	ldr	r3, [r3, #32]
 8010422:	899a      	ldrh	r2, [r3, #12]
 8010424:	3a01      	subs	r2, #1
 8010426:	b292      	uxth	r2, r2
 8010428:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	6a1b      	ldr	r3, [r3, #32]
 801042e:	899b      	ldrh	r3, [r3, #12]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d008      	beq.n	8010446 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	6a1b      	ldr	r3, [r3, #32]
 8010438:	689a      	ldr	r2, [r3, #8]
 801043a:	3208      	adds	r2, #8
 801043c:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	6a1b      	ldr	r3, [r3, #32]
 8010442:	2200      	movs	r2, #0
 8010444:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8010446:	7e7b      	ldrb	r3, [r7, #25]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d004      	beq.n	8010456 <lwip_netconn_do_writemore+0x222>
 801044c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010450:	2b00      	cmp	r3, #0
 8010452:	f43f af50 	beq.w	80102f6 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8010456:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d004      	beq.n	8010468 <lwip_netconn_do_writemore+0x234>
 801045e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010466:	d146      	bne.n	80104f6 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8010468:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 801046a:	7e3b      	ldrb	r3, [r7, #24]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d02b      	beq.n	80104c8 <lwip_netconn_do_writemore+0x294>
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	6a1b      	ldr	r3, [r3, #32]
 8010474:	699a      	ldr	r2, [r3, #24]
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	6a1b      	ldr	r3, [r3, #32]
 801047a:	695b      	ldr	r3, [r3, #20]
 801047c:	429a      	cmp	r2, r3
 801047e:	d223      	bcs.n	80104c8 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010484:	2b00      	cmp	r3, #0
 8010486:	d005      	beq.n	8010494 <lwip_netconn_do_writemore+0x260>
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801048c:	2200      	movs	r2, #0
 801048e:	2103      	movs	r1, #3
 8010490:	6878      	ldr	r0, [r7, #4]
 8010492:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	7f1b      	ldrb	r3, [r3, #28]
 8010498:	f043 0310 	orr.w	r3, r3, #16
 801049c:	b2da      	uxtb	r2, r3
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	771a      	strb	r2, [r3, #28]
 80104a2:	e028      	b.n	80104f6 <lwip_netconn_do_writemore+0x2c2>
 80104a4:	0802a81c 	.word	0x0802a81c
 80104a8:	0802a974 	.word	0x0802a974
 80104ac:	0802a860 	.word	0x0802a860
 80104b0:	0802ac7c 	.word	0x0802ac7c
 80104b4:	0802a984 	.word	0x0802a984
 80104b8:	0802ac9c 	.word	0x0802ac9c
 80104bc:	0802acb4 	.word	0x0802acb4
 80104c0:	0802acf4 	.word	0x0802acf4
 80104c4:	0802ad1c 	.word	0x0802ad1c
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	685b      	ldr	r3, [r3, #4]
 80104cc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80104d0:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80104d4:	d305      	bcc.n	80104e2 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	685b      	ldr	r3, [r3, #4]
 80104da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80104de:	2b04      	cmp	r3, #4
 80104e0:	d909      	bls.n	80104f6 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d005      	beq.n	80104f6 <lwip_netconn_do_writemore+0x2c2>
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104ee:	2200      	movs	r2, #0
 80104f0:	2103      	movs	r1, #3
 80104f2:	6878      	ldr	r0, [r7, #4]
 80104f4:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 80104f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d11d      	bne.n	801053a <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	6a1b      	ldr	r3, [r3, #32]
 8010502:	699a      	ldr	r2, [r3, #24]
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	6a1b      	ldr	r3, [r3, #32]
 8010508:	695b      	ldr	r3, [r3, #20]
 801050a:	429a      	cmp	r2, r3
 801050c:	d002      	beq.n	8010514 <lwip_netconn_do_writemore+0x2e0>
 801050e:	7e3b      	ldrb	r3, [r7, #24]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d001      	beq.n	8010518 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8010514:	2301      	movs	r3, #1
 8010516:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	685b      	ldr	r3, [r3, #4]
 801051c:	4618      	mov	r0, r3
 801051e:	f00b f90b 	bl	801b738 <tcp_output>
 8010522:	4603      	mov	r3, r0
 8010524:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8010526:	f997 300c 	ldrsb.w	r3, [r7, #12]
 801052a:	f113 0f04 	cmn.w	r3, #4
 801052e:	d12c      	bne.n	801058a <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8010530:	7b3b      	ldrb	r3, [r7, #12]
 8010532:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010534:	2301      	movs	r3, #1
 8010536:	76fb      	strb	r3, [r7, #27]
 8010538:	e027      	b.n	801058a <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 801053a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801053e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010542:	d120      	bne.n	8010586 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	685b      	ldr	r3, [r3, #4]
 8010548:	4618      	mov	r0, r3
 801054a:	f00b f8f5 	bl	801b738 <tcp_output>
 801054e:	4603      	mov	r3, r0
 8010550:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8010552:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8010556:	f113 0f04 	cmn.w	r3, #4
 801055a:	d104      	bne.n	8010566 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 801055c:	7b7b      	ldrb	r3, [r7, #13]
 801055e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010560:	2301      	movs	r3, #1
 8010562:	76fb      	strb	r3, [r7, #27]
 8010564:	e011      	b.n	801058a <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8010566:	7e3b      	ldrb	r3, [r7, #24]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d00e      	beq.n	801058a <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	6a1b      	ldr	r3, [r3, #32]
 8010570:	699b      	ldr	r3, [r3, #24]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d102      	bne.n	801057c <lwip_netconn_do_writemore+0x348>
 8010576:	f06f 0306 	mvn.w	r3, #6
 801057a:	e000      	b.n	801057e <lwip_netconn_do_writemore+0x34a>
 801057c:	2300      	movs	r3, #0
 801057e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010580:	2301      	movs	r3, #1
 8010582:	76fb      	strb	r3, [r7, #27]
 8010584:	e001      	b.n	801058a <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8010586:	2301      	movs	r3, #1
 8010588:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 801058a:	7efb      	ldrb	r3, [r7, #27]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d015      	beq.n	80105bc <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	6a1b      	ldr	r3, [r3, #32]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	330c      	adds	r3, #12
 8010598:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	6a1b      	ldr	r3, [r3, #32]
 801059e:	7ffa      	ldrb	r2, [r7, #31]
 80105a0:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	2200      	movs	r2, #0
 80105a6:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	2200      	movs	r2, #0
 80105ac:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80105ae:	78fb      	ldrb	r3, [r7, #3]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d006      	beq.n	80105c2 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80105b4:	68b8      	ldr	r0, [r7, #8]
 80105b6:	f011 fbb3 	bl	8021d20 <sys_sem_signal>
 80105ba:	e002      	b.n	80105c2 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 80105bc:	f04f 33ff 	mov.w	r3, #4294967295
 80105c0:	e000      	b.n	80105c4 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 80105c2:	2300      	movs	r3, #0
}
 80105c4:	4618      	mov	r0, r3
 80105c6:	3720      	adds	r7, #32
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bd80      	pop	{r7, pc}

080105cc <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b084      	sub	sp, #16
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 80105d8:	68bb      	ldr	r3, [r7, #8]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	4618      	mov	r0, r3
 80105de:	f7fe faeb 	bl	800ebb8 <netconn_err>
 80105e2:	4603      	mov	r3, r0
 80105e4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80105e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d166      	bne.n	80106bc <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80105ee:	68bb      	ldr	r3, [r7, #8]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	781b      	ldrb	r3, [r3, #0]
 80105f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80105f8:	2b10      	cmp	r3, #16
 80105fa:	d15d      	bne.n	80106b8 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 80105fc:	68bb      	ldr	r3, [r7, #8]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	785b      	ldrb	r3, [r3, #1]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d002      	beq.n	801060c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8010606:	23fb      	movs	r3, #251	; 0xfb
 8010608:	73fb      	strb	r3, [r7, #15]
 801060a:	e057      	b.n	80106bc <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	685b      	ldr	r3, [r3, #4]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d04d      	beq.n	80106b2 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8010616:	68bb      	ldr	r3, [r7, #8]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	2201      	movs	r2, #1
 801061c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801061e:	68bb      	ldr	r3, [r7, #8]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	6a1b      	ldr	r3, [r3, #32]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d006      	beq.n	8010636 <lwip_netconn_do_write+0x6a>
 8010628:	4b28      	ldr	r3, [pc, #160]	; (80106cc <lwip_netconn_do_write+0x100>)
 801062a:	f240 7223 	movw	r2, #1827	; 0x723
 801062e:	4928      	ldr	r1, [pc, #160]	; (80106d0 <lwip_netconn_do_write+0x104>)
 8010630:	4828      	ldr	r0, [pc, #160]	; (80106d4 <lwip_netconn_do_write+0x108>)
 8010632:	f016 fc4f 	bl	8026ed4 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8010636:	68bb      	ldr	r3, [r7, #8]
 8010638:	695b      	ldr	r3, [r3, #20]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d106      	bne.n	801064c <lwip_netconn_do_write+0x80>
 801063e:	4b23      	ldr	r3, [pc, #140]	; (80106cc <lwip_netconn_do_write+0x100>)
 8010640:	f240 7224 	movw	r2, #1828	; 0x724
 8010644:	4924      	ldr	r1, [pc, #144]	; (80106d8 <lwip_netconn_do_write+0x10c>)
 8010646:	4823      	ldr	r0, [pc, #140]	; (80106d4 <lwip_netconn_do_write+0x108>)
 8010648:	f016 fc44 	bl	8026ed4 <iprintf>
        msg->conn->current_msg = msg;
 801064c:	68bb      	ldr	r3, [r7, #8]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	68ba      	ldr	r2, [r7, #8]
 8010652:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8010654:	68bb      	ldr	r3, [r7, #8]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	2100      	movs	r1, #0
 801065a:	4618      	mov	r0, r3
 801065c:	f7ff fdea 	bl	8010234 <lwip_netconn_do_writemore>
 8010660:	4603      	mov	r3, r0
 8010662:	2b00      	cmp	r3, #0
 8010664:	d02e      	beq.n	80106c4 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8010666:	68bb      	ldr	r3, [r7, #8]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	785b      	ldrb	r3, [r3, #1]
 801066c:	2b01      	cmp	r3, #1
 801066e:	d006      	beq.n	801067e <lwip_netconn_do_write+0xb2>
 8010670:	4b16      	ldr	r3, [pc, #88]	; (80106cc <lwip_netconn_do_write+0x100>)
 8010672:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8010676:	4919      	ldr	r1, [pc, #100]	; (80106dc <lwip_netconn_do_write+0x110>)
 8010678:	4816      	ldr	r0, [pc, #88]	; (80106d4 <lwip_netconn_do_write+0x108>)
 801067a:	f016 fc2b 	bl	8026ed4 <iprintf>
          UNLOCK_TCPIP_CORE();
 801067e:	4818      	ldr	r0, [pc, #96]	; (80106e0 <lwip_netconn_do_write+0x114>)
 8010680:	f011 fbbf 	bl	8021e02 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010684:	68bb      	ldr	r3, [r7, #8]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	330c      	adds	r3, #12
 801068a:	2100      	movs	r1, #0
 801068c:	4618      	mov	r0, r3
 801068e:	f011 fb16 	bl	8021cbe <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8010692:	4813      	ldr	r0, [pc, #76]	; (80106e0 <lwip_netconn_do_write+0x114>)
 8010694:	f011 fba6 	bl	8021de4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8010698:	68bb      	ldr	r3, [r7, #8]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	785b      	ldrb	r3, [r3, #1]
 801069e:	2b01      	cmp	r3, #1
 80106a0:	d110      	bne.n	80106c4 <lwip_netconn_do_write+0xf8>
 80106a2:	4b0a      	ldr	r3, [pc, #40]	; (80106cc <lwip_netconn_do_write+0x100>)
 80106a4:	f240 722c 	movw	r2, #1836	; 0x72c
 80106a8:	490c      	ldr	r1, [pc, #48]	; (80106dc <lwip_netconn_do_write+0x110>)
 80106aa:	480a      	ldr	r0, [pc, #40]	; (80106d4 <lwip_netconn_do_write+0x108>)
 80106ac:	f016 fc12 	bl	8026ed4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 80106b0:	e008      	b.n	80106c4 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 80106b2:	23f5      	movs	r3, #245	; 0xf5
 80106b4:	73fb      	strb	r3, [r7, #15]
 80106b6:	e001      	b.n	80106bc <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 80106b8:	23fa      	movs	r3, #250	; 0xfa
 80106ba:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 80106bc:	68bb      	ldr	r3, [r7, #8]
 80106be:	7bfa      	ldrb	r2, [r7, #15]
 80106c0:	711a      	strb	r2, [r3, #4]
 80106c2:	e000      	b.n	80106c6 <lwip_netconn_do_write+0xfa>
        return;
 80106c4:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 80106c6:	3710      	adds	r7, #16
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}
 80106cc:	0802a81c 	.word	0x0802a81c
 80106d0:	0802abc0 	.word	0x0802abc0
 80106d4:	0802a860 	.word	0x0802a860
 80106d8:	0802ad48 	.word	0x0802ad48
 80106dc:	0802abdc 	.word	0x0802abdc
 80106e0:	240053fc 	.word	0x240053fc

080106e4 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b084      	sub	sp, #16
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	685b      	ldr	r3, [r3, #4]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d06b      	beq.n	80107d2 <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	7c1b      	ldrb	r3, [r3, #16]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d007      	beq.n	8010712 <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	685a      	ldr	r2, [r3, #4]
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	689b      	ldr	r3, [r3, #8]
 801070c:	6812      	ldr	r2, [r2, #0]
 801070e:	601a      	str	r2, [r3, #0]
 8010710:	e006      	b.n	8010720 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	685a      	ldr	r2, [r3, #4]
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	689b      	ldr	r3, [r3, #8]
 801071c:	6852      	ldr	r2, [r2, #4]
 801071e:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	2200      	movs	r2, #0
 8010724:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	781b      	ldrb	r3, [r3, #0]
 801072c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010730:	2b10      	cmp	r3, #16
 8010732:	d021      	beq.n	8010778 <lwip_netconn_do_getaddr+0x94>
 8010734:	2b20      	cmp	r3, #32
 8010736:	d144      	bne.n	80107c2 <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	7c1b      	ldrb	r3, [r3, #16]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d007      	beq.n	8010750 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	685a      	ldr	r2, [r3, #4]
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	68db      	ldr	r3, [r3, #12]
 801074a:	8a52      	ldrh	r2, [r2, #18]
 801074c:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 801074e:	e044      	b.n	80107da <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	685b      	ldr	r3, [r3, #4]
 8010756:	7c1b      	ldrb	r3, [r3, #16]
 8010758:	f003 0304 	and.w	r3, r3, #4
 801075c:	2b00      	cmp	r3, #0
 801075e:	d103      	bne.n	8010768 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	22f5      	movs	r2, #245	; 0xf5
 8010764:	711a      	strb	r2, [r3, #4]
        break;
 8010766:	e038      	b.n	80107da <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	685a      	ldr	r2, [r3, #4]
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	68db      	ldr	r3, [r3, #12]
 8010772:	8a92      	ldrh	r2, [r2, #20]
 8010774:	801a      	strh	r2, [r3, #0]
        break;
 8010776:	e030      	b.n	80107da <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	7c1b      	ldrb	r3, [r3, #16]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d10f      	bne.n	80107a0 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	685b      	ldr	r3, [r3, #4]
 8010786:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 8010788:	2b00      	cmp	r3, #0
 801078a:	d005      	beq.n	8010798 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	685b      	ldr	r3, [r3, #4]
 8010792:	7d1b      	ldrb	r3, [r3, #20]
 8010794:	2b01      	cmp	r3, #1
 8010796:	d103      	bne.n	80107a0 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	22f5      	movs	r2, #245	; 0xf5
 801079c:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 801079e:	e01c      	b.n	80107da <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	7c1b      	ldrb	r3, [r3, #16]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d004      	beq.n	80107b2 <lwip_netconn_do_getaddr+0xce>
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	685b      	ldr	r3, [r3, #4]
 80107ae:	8adb      	ldrh	r3, [r3, #22]
 80107b0:	e003      	b.n	80107ba <lwip_netconn_do_getaddr+0xd6>
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	685b      	ldr	r3, [r3, #4]
 80107b8:	8b1b      	ldrh	r3, [r3, #24]
 80107ba:	68fa      	ldr	r2, [r7, #12]
 80107bc:	68d2      	ldr	r2, [r2, #12]
 80107be:	8013      	strh	r3, [r2, #0]
        break;
 80107c0:	e00b      	b.n	80107da <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 80107c2:	4b08      	ldr	r3, [pc, #32]	; (80107e4 <lwip_netconn_do_getaddr+0x100>)
 80107c4:	f240 727d 	movw	r2, #1917	; 0x77d
 80107c8:	4907      	ldr	r1, [pc, #28]	; (80107e8 <lwip_netconn_do_getaddr+0x104>)
 80107ca:	4808      	ldr	r0, [pc, #32]	; (80107ec <lwip_netconn_do_getaddr+0x108>)
 80107cc:	f016 fb82 	bl	8026ed4 <iprintf>
        break;
 80107d0:	e003      	b.n	80107da <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	22f5      	movs	r2, #245	; 0xf5
 80107d6:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 80107d8:	bf00      	nop
 80107da:	bf00      	nop
 80107dc:	3710      	adds	r7, #16
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}
 80107e2:	bf00      	nop
 80107e4:	0802a81c 	.word	0x0802a81c
 80107e8:	0802ad5c 	.word	0x0802ad5c
 80107ec:	0802a860 	.word	0x0802a860

080107f0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b084      	sub	sp, #16
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	785b      	ldrb	r3, [r3, #1]
 8010802:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	685b      	ldr	r3, [r3, #4]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d069      	beq.n	80108e2 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	781b      	ldrb	r3, [r3, #0]
 8010814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8010818:	2b10      	cmp	r3, #16
 801081a:	d162      	bne.n	80108e2 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8010820:	2b03      	cmp	r3, #3
 8010822:	d002      	beq.n	801082a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8010824:	7afb      	ldrb	r3, [r7, #11]
 8010826:	2b02      	cmp	r3, #2
 8010828:	d05b      	beq.n	80108e2 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 801082a:	7afb      	ldrb	r3, [r7, #11]
 801082c:	2b03      	cmp	r3, #3
 801082e:	d103      	bne.n	8010838 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	22f5      	movs	r2, #245	; 0xf5
 8010834:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8010836:	e059      	b.n	80108ec <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8010838:	7afb      	ldrb	r3, [r7, #11]
 801083a:	2b01      	cmp	r3, #1
 801083c:	d103      	bne.n	8010846 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	22fb      	movs	r2, #251	; 0xfb
 8010842:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8010844:	e052      	b.n	80108ec <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	7a1b      	ldrb	r3, [r3, #8]
 801084a:	f003 0301 	and.w	r3, r3, #1
 801084e:	2b00      	cmp	r3, #0
 8010850:	d004      	beq.n	801085c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	4618      	mov	r0, r3
 8010858:	f7fe ff64 	bl	800f724 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	6a1b      	ldr	r3, [r3, #32]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d006      	beq.n	8010874 <lwip_netconn_do_close+0x84>
 8010866:	4b23      	ldr	r3, [pc, #140]	; (80108f4 <lwip_netconn_do_close+0x104>)
 8010868:	f240 72bd 	movw	r2, #1981	; 0x7bd
 801086c:	4922      	ldr	r1, [pc, #136]	; (80108f8 <lwip_netconn_do_close+0x108>)
 801086e:	4823      	ldr	r0, [pc, #140]	; (80108fc <lwip_netconn_do_close+0x10c>)
 8010870:	f016 fb30 	bl	8026ed4 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	2204      	movs	r2, #4
 801087a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	68fa      	ldr	r2, [r7, #12]
 8010882:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	2100      	movs	r1, #0
 801088a:	4618      	mov	r0, r3
 801088c:	f7fe ffc8 	bl	800f820 <lwip_netconn_do_close_internal>
 8010890:	4603      	mov	r3, r0
 8010892:	2b00      	cmp	r3, #0
 8010894:	d029      	beq.n	80108ea <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	785b      	ldrb	r3, [r3, #1]
 801089c:	2b04      	cmp	r3, #4
 801089e:	d006      	beq.n	80108ae <lwip_netconn_do_close+0xbe>
 80108a0:	4b14      	ldr	r3, [pc, #80]	; (80108f4 <lwip_netconn_do_close+0x104>)
 80108a2:	f240 72c2 	movw	r2, #1986	; 0x7c2
 80108a6:	4916      	ldr	r1, [pc, #88]	; (8010900 <lwip_netconn_do_close+0x110>)
 80108a8:	4814      	ldr	r0, [pc, #80]	; (80108fc <lwip_netconn_do_close+0x10c>)
 80108aa:	f016 fb13 	bl	8026ed4 <iprintf>
        UNLOCK_TCPIP_CORE();
 80108ae:	4815      	ldr	r0, [pc, #84]	; (8010904 <lwip_netconn_do_close+0x114>)
 80108b0:	f011 faa7 	bl	8021e02 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	330c      	adds	r3, #12
 80108ba:	2100      	movs	r1, #0
 80108bc:	4618      	mov	r0, r3
 80108be:	f011 f9fe 	bl	8021cbe <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 80108c2:	4810      	ldr	r0, [pc, #64]	; (8010904 <lwip_netconn_do_close+0x114>)
 80108c4:	f011 fa8e 	bl	8021de4 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	785b      	ldrb	r3, [r3, #1]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d00b      	beq.n	80108ea <lwip_netconn_do_close+0xfa>
 80108d2:	4b08      	ldr	r3, [pc, #32]	; (80108f4 <lwip_netconn_do_close+0x104>)
 80108d4:	f240 72c6 	movw	r2, #1990	; 0x7c6
 80108d8:	4909      	ldr	r1, [pc, #36]	; (8010900 <lwip_netconn_do_close+0x110>)
 80108da:	4808      	ldr	r0, [pc, #32]	; (80108fc <lwip_netconn_do_close+0x10c>)
 80108dc:	f016 fafa 	bl	8026ed4 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 80108e0:	e003      	b.n	80108ea <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	22f5      	movs	r2, #245	; 0xf5
 80108e6:	711a      	strb	r2, [r3, #4]
 80108e8:	e000      	b.n	80108ec <lwip_netconn_do_close+0xfc>
      return;
 80108ea:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 80108ec:	3710      	adds	r7, #16
 80108ee:	46bd      	mov	sp, r7
 80108f0:	bd80      	pop	{r7, pc}
 80108f2:	bf00      	nop
 80108f4:	0802a81c 	.word	0x0802a81c
 80108f8:	0802abc0 	.word	0x0802abc0
 80108fc:	0802a860 	.word	0x0802a860
 8010900:	0802abdc 	.word	0x0802abdc
 8010904:	240053fc 	.word	0x240053fc

08010908 <lwip_netconn_do_dns_found>:
 * (or on timeout). A waiting application thread is waked up by
 * signaling the semaphore.
 */
static void
lwip_netconn_do_dns_found(const char *name, const ip_addr_t *ipaddr, void *arg)
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b086      	sub	sp, #24
 801090c:	af00      	add	r7, sp, #0
 801090e:	60f8      	str	r0, [r7, #12]
 8010910:	60b9      	str	r1, [r7, #8]
 8010912:	607a      	str	r2, [r7, #4]
  struct dns_api_msg *msg = (struct dns_api_msg *)arg;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	617b      	str	r3, [r7, #20]

  /* we trust the internal implementation to be correct :-) */
  LWIP_UNUSED_ARG(name);

  if (ipaddr == NULL) {
 8010918:	68bb      	ldr	r3, [r7, #8]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d104      	bne.n	8010928 <lwip_netconn_do_dns_found+0x20>
    /* timeout or memory error */
    API_EXPR_DEREF(msg->err) = ERR_VAL;
 801091e:	697b      	ldr	r3, [r7, #20]
 8010920:	68db      	ldr	r3, [r3, #12]
 8010922:	22fa      	movs	r2, #250	; 0xfa
 8010924:	701a      	strb	r2, [r3, #0]
 8010926:	e008      	b.n	801093a <lwip_netconn_do_dns_found+0x32>
  } else {
    /* address was resolved */
    API_EXPR_DEREF(msg->err) = ERR_OK;
 8010928:	697b      	ldr	r3, [r7, #20]
 801092a:	68db      	ldr	r3, [r3, #12]
 801092c:	2200      	movs	r2, #0
 801092e:	701a      	strb	r2, [r3, #0]
    API_EXPR_DEREF(msg->addr) = *ipaddr;
 8010930:	697b      	ldr	r3, [r7, #20]
 8010932:	685b      	ldr	r3, [r3, #4]
 8010934:	68ba      	ldr	r2, [r7, #8]
 8010936:	6812      	ldr	r2, [r2, #0]
 8010938:	601a      	str	r2, [r3, #0]
  }
  /* wake up the application task waiting in netconn_gethostbyname */
  sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
 801093a:	697b      	ldr	r3, [r7, #20]
 801093c:	689b      	ldr	r3, [r3, #8]
 801093e:	4618      	mov	r0, r3
 8010940:	f011 f9ee 	bl	8021d20 <sys_sem_signal>
}
 8010944:	bf00      	nop
 8010946:	3718      	adds	r7, #24
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}

0801094c <lwip_netconn_do_gethostbyname>:
 *
 * @param arg the dns_api_msg pointing to the query
 */
void
lwip_netconn_do_gethostbyname(void *arg)
{
 801094c:	b590      	push	{r4, r7, lr}
 801094e:	b087      	sub	sp, #28
 8010950:	af02      	add	r7, sp, #8
 8010952:	6078      	str	r0, [r7, #4]
  struct dns_api_msg *msg = (struct dns_api_msg *)arg;
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	60fb      	str	r3, [r7, #12]
  u8_t addrtype =
 8010958:	2300      	movs	r3, #0
 801095a:	72fb      	strb	r3, [r7, #11]
    msg->dns_addrtype;
#else
    LWIP_DNS_ADDRTYPE_DEFAULT;
#endif

  API_EXPR_DEREF(msg->err) = dns_gethostbyname_addrtype(msg->name,
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	6818      	ldr	r0, [r3, #0]
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	6859      	ldr	r1, [r3, #4]
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	68dc      	ldr	r4, [r3, #12]
 8010968:	7afb      	ldrb	r3, [r7, #11]
 801096a:	9300      	str	r3, [sp, #0]
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	4a15      	ldr	r2, [pc, #84]	; (80109c4 <lwip_netconn_do_gethostbyname+0x78>)
 8010970:	f003 fb80 	bl	8014074 <dns_gethostbyname_addrtype>
 8010974:	4603      	mov	r3, r0
 8010976:	7023      	strb	r3, [r4, #0]
                             API_EXPR_REF(msg->addr), lwip_netconn_do_dns_found, msg, addrtype);
#if LWIP_TCPIP_CORE_LOCKING
  /* For core locking, only block if we need to wait for answer/timeout */
  if (API_EXPR_DEREF(msg->err) == ERR_INPROGRESS) {
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	68db      	ldr	r3, [r3, #12]
 801097c:	f993 3000 	ldrsb.w	r3, [r3]
 8010980:	f113 0f05 	cmn.w	r3, #5
 8010984:	d119      	bne.n	80109ba <lwip_netconn_do_gethostbyname+0x6e>
    UNLOCK_TCPIP_CORE();
 8010986:	4810      	ldr	r0, [pc, #64]	; (80109c8 <lwip_netconn_do_gethostbyname+0x7c>)
 8010988:	f011 fa3b 	bl	8021e02 <sys_mutex_unlock>
    sys_sem_wait(API_EXPR_REF_SEM(msg->sem));
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	689b      	ldr	r3, [r3, #8]
 8010990:	2100      	movs	r1, #0
 8010992:	4618      	mov	r0, r3
 8010994:	f011 f993 	bl	8021cbe <sys_arch_sem_wait>
    LOCK_TCPIP_CORE();
 8010998:	480b      	ldr	r0, [pc, #44]	; (80109c8 <lwip_netconn_do_gethostbyname+0x7c>)
 801099a:	f011 fa23 	bl	8021de4 <sys_mutex_lock>
    LWIP_ASSERT("do_gethostbyname still in progress!!", API_EXPR_DEREF(msg->err) != ERR_INPROGRESS);
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	68db      	ldr	r3, [r3, #12]
 80109a2:	f993 3000 	ldrsb.w	r3, [r3]
 80109a6:	f113 0f05 	cmn.w	r3, #5
 80109aa:	d106      	bne.n	80109ba <lwip_netconn_do_gethostbyname+0x6e>
 80109ac:	4b07      	ldr	r3, [pc, #28]	; (80109cc <lwip_netconn_do_gethostbyname+0x80>)
 80109ae:	f640 0271 	movw	r2, #2161	; 0x871
 80109b2:	4907      	ldr	r1, [pc, #28]	; (80109d0 <lwip_netconn_do_gethostbyname+0x84>)
 80109b4:	4807      	ldr	r0, [pc, #28]	; (80109d4 <lwip_netconn_do_gethostbyname+0x88>)
 80109b6:	f016 fa8d 	bl	8026ed4 <iprintf>
    /* on error or immediate success, wake up the application
     * task waiting in netconn_gethostbyname */
    sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80109ba:	bf00      	nop
 80109bc:	3714      	adds	r7, #20
 80109be:	46bd      	mov	sp, r7
 80109c0:	bd90      	pop	{r4, r7, pc}
 80109c2:	bf00      	nop
 80109c4:	08010909 	.word	0x08010909
 80109c8:	240053fc 	.word	0x240053fc
 80109cc:	0802a81c 	.word	0x0802a81c
 80109d0:	0802ad74 	.word	0x0802ad74
 80109d4:	0802a860 	.word	0x0802a860

080109d8 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 80109d8:	b480      	push	{r7}
 80109da:	b083      	sub	sp, #12
 80109dc:	af00      	add	r7, sp, #0
 80109de:	4603      	mov	r3, r0
 80109e0:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 80109e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	dc04      	bgt.n	80109f4 <err_to_errno+0x1c>
 80109ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80109ee:	f113 0f10 	cmn.w	r3, #16
 80109f2:	da01      	bge.n	80109f8 <err_to_errno+0x20>
    return EIO;
 80109f4:	2305      	movs	r3, #5
 80109f6:	e005      	b.n	8010a04 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 80109f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80109fc:	425b      	negs	r3, r3
 80109fe:	4a04      	ldr	r2, [pc, #16]	; (8010a10 <err_to_errno+0x38>)
 8010a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8010a04:	4618      	mov	r0, r3
 8010a06:	370c      	adds	r7, #12
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0e:	4770      	bx	lr
 8010a10:	0802eae4 	.word	0x0802eae4

08010a14 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b082      	sub	sp, #8
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d013      	beq.n	8010a4a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d00b      	beq.n	8010a42 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	4618      	mov	r0, r3
 8010a30:	f005 f820 	bl	8015a74 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	2200      	movs	r2, #0
 8010a38:	605a      	str	r2, [r3, #4]
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	685a      	ldr	r2, [r3, #4]
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8010a42:	6879      	ldr	r1, [r7, #4]
 8010a44:	2006      	movs	r0, #6
 8010a46:	f004 f933 	bl	8014cb0 <memp_free>
  }
}
 8010a4a:	bf00      	nop
 8010a4c:	3708      	adds	r7, #8
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	bd80      	pop	{r7, pc}
	...

08010a54 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b082      	sub	sp, #8
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d106      	bne.n	8010a70 <netbuf_free+0x1c>
 8010a62:	4b0d      	ldr	r3, [pc, #52]	; (8010a98 <netbuf_free+0x44>)
 8010a64:	2281      	movs	r2, #129	; 0x81
 8010a66:	490d      	ldr	r1, [pc, #52]	; (8010a9c <netbuf_free+0x48>)
 8010a68:	480d      	ldr	r0, [pc, #52]	; (8010aa0 <netbuf_free+0x4c>)
 8010a6a:	f016 fa33 	bl	8026ed4 <iprintf>
 8010a6e:	e00f      	b.n	8010a90 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d004      	beq.n	8010a82 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	f004 fff9 	bl	8015a74 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	2200      	movs	r2, #0
 8010a86:	605a      	str	r2, [r3, #4]
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	685a      	ldr	r2, [r3, #4]
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 8010a90:	3708      	adds	r7, #8
 8010a92:	46bd      	mov	sp, r7
 8010a94:	bd80      	pop	{r7, pc}
 8010a96:	bf00      	nop
 8010a98:	0802ad9c 	.word	0x0802ad9c
 8010a9c:	0802ae38 	.word	0x0802ae38
 8010aa0:	0802adec 	.word	0x0802adec

08010aa4 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b084      	sub	sp, #16
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	60f8      	str	r0, [r7, #12]
 8010aac:	60b9      	str	r1, [r7, #8]
 8010aae:	4613      	mov	r3, r2
 8010ab0:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d108      	bne.n	8010aca <netbuf_ref+0x26>
 8010ab8:	4b1c      	ldr	r3, [pc, #112]	; (8010b2c <netbuf_ref+0x88>)
 8010aba:	2299      	movs	r2, #153	; 0x99
 8010abc:	491c      	ldr	r1, [pc, #112]	; (8010b30 <netbuf_ref+0x8c>)
 8010abe:	481d      	ldr	r0, [pc, #116]	; (8010b34 <netbuf_ref+0x90>)
 8010ac0:	f016 fa08 	bl	8026ed4 <iprintf>
 8010ac4:	f06f 030f 	mvn.w	r3, #15
 8010ac8:	e02b      	b.n	8010b22 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d004      	beq.n	8010adc <netbuf_ref+0x38>
    pbuf_free(buf->p);
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f004 ffcc 	bl	8015a74 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8010adc:	2241      	movs	r2, #65	; 0x41
 8010ade:	2100      	movs	r1, #0
 8010ae0:	2036      	movs	r0, #54	; 0x36
 8010ae2:	f004 fcb1 	bl	8015448 <pbuf_alloc>
 8010ae6:	4602      	mov	r2, r0
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d105      	bne.n	8010b00 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	2200      	movs	r2, #0
 8010af8:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 8010afa:	f04f 33ff 	mov.w	r3, #4294967295
 8010afe:	e010      	b.n	8010b22 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	68ba      	ldr	r2, [r7, #8]
 8010b06:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	88fa      	ldrh	r2, [r7, #6]
 8010b0e:	811a      	strh	r2, [r3, #8]
 8010b10:	68fa      	ldr	r2, [r7, #12]
 8010b12:	6812      	ldr	r2, [r2, #0]
 8010b14:	891b      	ldrh	r3, [r3, #8]
 8010b16:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	681a      	ldr	r2, [r3, #0]
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8010b20:	2300      	movs	r3, #0
}
 8010b22:	4618      	mov	r0, r3
 8010b24:	3710      	adds	r7, #16
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd80      	pop	{r7, pc}
 8010b2a:	bf00      	nop
 8010b2c:	0802ad9c 	.word	0x0802ad9c
 8010b30:	0802ae54 	.word	0x0802ae54
 8010b34:	0802adec 	.word	0x0802adec

08010b38 <lwip_gethostbyname>:
 * @return an entry containing addresses of address family AF_INET
 *         for the host with name name
 */
struct hostent *
lwip_gethostbyname(const char *name)
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b084      	sub	sp, #16
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
  HOSTENT_STORAGE ip_addr_t s_hostent_addr;
  HOSTENT_STORAGE ip_addr_t *s_phostent_addr[2];
  HOSTENT_STORAGE char s_hostname[DNS_MAX_NAME_LENGTH + 1];

  /* query host IP address */
  err = netconn_gethostbyname(name, &addr);
 8010b40:	f107 0308 	add.w	r3, r7, #8
 8010b44:	4619      	mov	r1, r3
 8010b46:	6878      	ldr	r0, [r7, #4]
 8010b48:	f7fe f872 	bl	800ec30 <netconn_gethostbyname>
 8010b4c:	4603      	mov	r3, r0
 8010b4e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010b50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d004      	beq.n	8010b62 <lwip_gethostbyname+0x2a>
    LWIP_DEBUGF(DNS_DEBUG, ("lwip_gethostbyname(%s) failed, err=%d\n", name, err));
    h_errno = HOST_NOT_FOUND;
 8010b58:	4b17      	ldr	r3, [pc, #92]	; (8010bb8 <lwip_gethostbyname+0x80>)
 8010b5a:	22d2      	movs	r2, #210	; 0xd2
 8010b5c:	601a      	str	r2, [r3, #0]
    return NULL;
 8010b5e:	2300      	movs	r3, #0
 8010b60:	e025      	b.n	8010bae <lwip_gethostbyname+0x76>
  }

  /* fill hostent */
  s_hostent_addr = addr;
 8010b62:	4a16      	ldr	r2, [pc, #88]	; (8010bbc <lwip_gethostbyname+0x84>)
 8010b64:	68bb      	ldr	r3, [r7, #8]
 8010b66:	6013      	str	r3, [r2, #0]
  s_phostent_addr[0] = &s_hostent_addr;
 8010b68:	4b15      	ldr	r3, [pc, #84]	; (8010bc0 <lwip_gethostbyname+0x88>)
 8010b6a:	4a14      	ldr	r2, [pc, #80]	; (8010bbc <lwip_gethostbyname+0x84>)
 8010b6c:	601a      	str	r2, [r3, #0]
  s_phostent_addr[1] = NULL;
 8010b6e:	4b14      	ldr	r3, [pc, #80]	; (8010bc0 <lwip_gethostbyname+0x88>)
 8010b70:	2200      	movs	r2, #0
 8010b72:	605a      	str	r2, [r3, #4]
  strncpy(s_hostname, name, DNS_MAX_NAME_LENGTH);
 8010b74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010b78:	6879      	ldr	r1, [r7, #4]
 8010b7a:	4812      	ldr	r0, [pc, #72]	; (8010bc4 <lwip_gethostbyname+0x8c>)
 8010b7c:	f016 fd9a 	bl	80276b4 <strncpy>
  s_hostname[DNS_MAX_NAME_LENGTH] = 0;
 8010b80:	4b10      	ldr	r3, [pc, #64]	; (8010bc4 <lwip_gethostbyname+0x8c>)
 8010b82:	2200      	movs	r2, #0
 8010b84:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  s_hostent.h_name = s_hostname;
 8010b88:	4b0f      	ldr	r3, [pc, #60]	; (8010bc8 <lwip_gethostbyname+0x90>)
 8010b8a:	4a0e      	ldr	r2, [pc, #56]	; (8010bc4 <lwip_gethostbyname+0x8c>)
 8010b8c:	601a      	str	r2, [r3, #0]
  s_aliases = NULL;
 8010b8e:	4b0f      	ldr	r3, [pc, #60]	; (8010bcc <lwip_gethostbyname+0x94>)
 8010b90:	2200      	movs	r2, #0
 8010b92:	601a      	str	r2, [r3, #0]
  s_hostent.h_aliases = &s_aliases;
 8010b94:	4b0c      	ldr	r3, [pc, #48]	; (8010bc8 <lwip_gethostbyname+0x90>)
 8010b96:	4a0d      	ldr	r2, [pc, #52]	; (8010bcc <lwip_gethostbyname+0x94>)
 8010b98:	605a      	str	r2, [r3, #4]
  s_hostent.h_addrtype = AF_INET;
 8010b9a:	4b0b      	ldr	r3, [pc, #44]	; (8010bc8 <lwip_gethostbyname+0x90>)
 8010b9c:	2202      	movs	r2, #2
 8010b9e:	609a      	str	r2, [r3, #8]
  s_hostent.h_length = sizeof(ip_addr_t);
 8010ba0:	4b09      	ldr	r3, [pc, #36]	; (8010bc8 <lwip_gethostbyname+0x90>)
 8010ba2:	2204      	movs	r2, #4
 8010ba4:	60da      	str	r2, [r3, #12]
  s_hostent.h_addr_list = (char **)&s_phostent_addr;
 8010ba6:	4b08      	ldr	r3, [pc, #32]	; (8010bc8 <lwip_gethostbyname+0x90>)
 8010ba8:	4a05      	ldr	r2, [pc, #20]	; (8010bc0 <lwip_gethostbyname+0x88>)
 8010baa:	611a      	str	r2, [r3, #16]

#if LWIP_DNS_API_HOSTENT_STORAGE
  /* this function should return the "per-thread" hostent after copy from s_hostent */
  return sys_thread_hostent(&s_hostent);
#else
  return &s_hostent;
 8010bac:	4b06      	ldr	r3, [pc, #24]	; (8010bc8 <lwip_gethostbyname+0x90>)
#endif /* LWIP_DNS_API_HOSTENT_STORAGE */
}
 8010bae:	4618      	mov	r0, r3
 8010bb0:	3710      	adds	r7, #16
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	bd80      	pop	{r7, pc}
 8010bb6:	bf00      	nop
 8010bb8:	240053f8 	.word	0x240053f8
 8010bbc:	24004924 	.word	0x24004924
 8010bc0:	24004928 	.word	0x24004928
 8010bc4:	24004930 	.word	0x24004930
 8010bc8:	24004a34 	.word	0x24004a34
 8010bcc:	24004a48 	.word	0x24004a48

08010bd0 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 8010bd0:	b480      	push	{r7}
 8010bd2:	b085      	sub	sp, #20
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	db02      	blt.n	8010be8 <tryget_socket_unconn_nouse+0x18>
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	2b03      	cmp	r3, #3
 8010be6:	dd01      	ble.n	8010bec <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 8010be8:	2300      	movs	r3, #0
 8010bea:	e003      	b.n	8010bf4 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	011b      	lsls	r3, r3, #4
 8010bf0:	4a03      	ldr	r2, [pc, #12]	; (8010c00 <tryget_socket_unconn_nouse+0x30>)
 8010bf2:	4413      	add	r3, r2
}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	3714      	adds	r7, #20
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfe:	4770      	bx	lr
 8010c00:	24004a4c 	.word	0x24004a4c

08010c04 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b084      	sub	sp, #16
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 8010c0c:	6878      	ldr	r0, [r7, #4]
 8010c0e:	f7ff ffdf 	bl	8010bd0 <tryget_socket_unconn_nouse>
 8010c12:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 8010c14:	68fb      	ldr	r3, [r7, #12]
}
 8010c16:	4618      	mov	r0, r3
 8010c18:	3710      	adds	r7, #16
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	bd80      	pop	{r7, pc}

08010c1e <tryget_socket_unconn_locked>:

/* Like tryget_socket_unconn(), but called under SYS_ARCH_PROTECT lock. */
static struct lwip_sock *
tryget_socket_unconn_locked(int fd)
{
 8010c1e:	b580      	push	{r7, lr}
 8010c20:	b084      	sub	sp, #16
 8010c22:	af00      	add	r7, sp, #0
 8010c24:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 8010c26:	6878      	ldr	r0, [r7, #4]
 8010c28:	f7ff ffd2 	bl	8010bd0 <tryget_socket_unconn_nouse>
 8010c2c:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used_locked(ret)) {
      return NULL;
    }
  }
  return ret;
 8010c2e:	68fb      	ldr	r3, [r7, #12]
}
 8010c30:	4618      	mov	r0, r3
 8010c32:	3710      	adds	r7, #16
 8010c34:	46bd      	mov	sp, r7
 8010c36:	bd80      	pop	{r7, pc}

08010c38 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b084      	sub	sp, #16
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 8010c40:	6878      	ldr	r0, [r7, #4]
 8010c42:	f7ff ffdf 	bl	8010c04 <tryget_socket_unconn>
 8010c46:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d005      	beq.n	8010c5a <tryget_socket+0x22>
    if (sock->conn) {
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d001      	beq.n	8010c5a <tryget_socket+0x22>
      return sock;
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	e000      	b.n	8010c5c <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 8010c5a:	2300      	movs	r3, #0
}
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	3710      	adds	r7, #16
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}

08010c64 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b084      	sub	sp, #16
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 8010c6c:	6878      	ldr	r0, [r7, #4]
 8010c6e:	f7ff ffe3 	bl	8010c38 <tryget_socket>
 8010c72:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d104      	bne.n	8010c84 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 8010c7a:	4b05      	ldr	r3, [pc, #20]	; (8010c90 <get_socket+0x2c>)
 8010c7c:	2209      	movs	r2, #9
 8010c7e:	601a      	str	r2, [r3, #0]
    return NULL;
 8010c80:	2300      	movs	r3, #0
 8010c82:	e000      	b.n	8010c86 <get_socket+0x22>
  }
  return sock;
 8010c84:	68fb      	ldr	r3, [r7, #12]
}
 8010c86:	4618      	mov	r0, r3
 8010c88:	3710      	adds	r7, #16
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	bd80      	pop	{r7, pc}
 8010c8e:	bf00      	nop
 8010c90:	240086b8 	.word	0x240086b8

08010c94 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b084      	sub	sp, #16
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
 8010c9c:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	60fb      	str	r3, [r7, #12]
 8010ca2:	e052      	b.n	8010d4a <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 8010ca4:	f011 f8e0 	bl	8021e68 <sys_arch_protect>
 8010ca8:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 8010caa:	4a2c      	ldr	r2, [pc, #176]	; (8010d5c <alloc_socket+0xc8>)
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	011b      	lsls	r3, r3, #4
 8010cb0:	4413      	add	r3, r2
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d142      	bne.n	8010d3e <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 8010cb8:	4a28      	ldr	r2, [pc, #160]	; (8010d5c <alloc_socket+0xc8>)
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	011b      	lsls	r3, r3, #4
 8010cbe:	4413      	add	r3, r2
 8010cc0:	687a      	ldr	r2, [r7, #4]
 8010cc2:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 8010cc4:	68b8      	ldr	r0, [r7, #8]
 8010cc6:	f011 f8dd 	bl	8021e84 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 8010cca:	4a24      	ldr	r2, [pc, #144]	; (8010d5c <alloc_socket+0xc8>)
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	011b      	lsls	r3, r3, #4
 8010cd0:	4413      	add	r3, r2
 8010cd2:	3304      	adds	r3, #4
 8010cd4:	2200      	movs	r2, #0
 8010cd6:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 8010cd8:	4a20      	ldr	r2, [pc, #128]	; (8010d5c <alloc_socket+0xc8>)
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	011b      	lsls	r3, r3, #4
 8010cde:	4413      	add	r3, r2
 8010ce0:	330e      	adds	r3, #14
 8010ce2:	781b      	ldrb	r3, [r3, #0]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d006      	beq.n	8010cf6 <alloc_socket+0x62>
 8010ce8:	4b1d      	ldr	r3, [pc, #116]	; (8010d60 <alloc_socket+0xcc>)
 8010cea:	f240 220e 	movw	r2, #526	; 0x20e
 8010cee:	491d      	ldr	r1, [pc, #116]	; (8010d64 <alloc_socket+0xd0>)
 8010cf0:	481d      	ldr	r0, [pc, #116]	; (8010d68 <alloc_socket+0xd4>)
 8010cf2:	f016 f8ef 	bl	8026ed4 <iprintf>
      sockets[i].rcvevent   = 0;
 8010cf6:	4a19      	ldr	r2, [pc, #100]	; (8010d5c <alloc_socket+0xc8>)
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	011b      	lsls	r3, r3, #4
 8010cfc:	4413      	add	r3, r2
 8010cfe:	3308      	adds	r3, #8
 8010d00:	2200      	movs	r2, #0
 8010d02:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	781b      	ldrb	r3, [r3, #0]
 8010d08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010d0c:	2b10      	cmp	r3, #16
 8010d0e:	d102      	bne.n	8010d16 <alloc_socket+0x82>
 8010d10:	683b      	ldr	r3, [r7, #0]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d001      	beq.n	8010d1a <alloc_socket+0x86>
 8010d16:	2301      	movs	r3, #1
 8010d18:	e000      	b.n	8010d1c <alloc_socket+0x88>
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	b299      	uxth	r1, r3
 8010d1e:	4a0f      	ldr	r2, [pc, #60]	; (8010d5c <alloc_socket+0xc8>)
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	011b      	lsls	r3, r3, #4
 8010d24:	4413      	add	r3, r2
 8010d26:	330a      	adds	r3, #10
 8010d28:	460a      	mov	r2, r1
 8010d2a:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 8010d2c:	4a0b      	ldr	r2, [pc, #44]	; (8010d5c <alloc_socket+0xc8>)
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	011b      	lsls	r3, r3, #4
 8010d32:	4413      	add	r3, r2
 8010d34:	330c      	adds	r3, #12
 8010d36:	2200      	movs	r2, #0
 8010d38:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	e00a      	b.n	8010d54 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 8010d3e:	68b8      	ldr	r0, [r7, #8]
 8010d40:	f011 f8a0 	bl	8021e84 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	3301      	adds	r3, #1
 8010d48:	60fb      	str	r3, [r7, #12]
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	2b03      	cmp	r3, #3
 8010d4e:	dda9      	ble.n	8010ca4 <alloc_socket+0x10>
  }
  return -1;
 8010d50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010d54:	4618      	mov	r0, r3
 8010d56:	3710      	adds	r7, #16
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	bd80      	pop	{r7, pc}
 8010d5c:	24004a4c 	.word	0x24004a4c
 8010d60:	0802af34 	.word	0x0802af34
 8010d64:	0802af68 	.word	0x0802af68
 8010d68:	0802af88 	.word	0x0802af88

08010d6c <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 8010d6c:	b480      	push	{r7}
 8010d6e:	b085      	sub	sp, #20
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	60f8      	str	r0, [r7, #12]
 8010d74:	60b9      	str	r1, [r7, #8]
 8010d76:	607a      	str	r2, [r7, #4]
 8010d78:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 8010d7a:	683b      	ldr	r3, [r7, #0]
 8010d7c:	68fa      	ldr	r2, [r7, #12]
 8010d7e:	6852      	ldr	r2, [r2, #4]
 8010d80:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	2200      	movs	r2, #0
 8010d86:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	681a      	ldr	r2, [r3, #0]
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	2200      	movs	r2, #0
 8010d94:	601a      	str	r2, [r3, #0]
  return 1;
 8010d96:	2301      	movs	r3, #1
}
 8010d98:	4618      	mov	r0, r3
 8010d9a:	3714      	adds	r7, #20
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da2:	4770      	bx	lr

08010da4 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b084      	sub	sp, #16
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	60f8      	str	r0, [r7, #12]
 8010dac:	60b9      	str	r1, [r7, #8]
 8010dae:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d00d      	beq.n	8010dd4 <free_socket_free_elements+0x30>
    if (is_tcp) {
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d005      	beq.n	8010dca <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	f004 fe56 	bl	8015a74 <pbuf_free>
 8010dc8:	e004      	b.n	8010dd4 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f7ff fe20 	bl	8010a14 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 8010dd4:	68bb      	ldr	r3, [r7, #8]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d002      	beq.n	8010de0 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 8010dda:	68b8      	ldr	r0, [r7, #8]
 8010ddc:	f7fd f9fa 	bl	800e1d4 <netconn_delete>
  }
}
 8010de0:	bf00      	nop
 8010de2:	3710      	adds	r7, #16
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}

08010de8 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b086      	sub	sp, #24
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
 8010df0:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 8010df2:	f011 f839 	bl	8021e68 <sys_arch_protect>
 8010df6:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 8010df8:	f107 0308 	add.w	r3, r7, #8
 8010dfc:	f107 020c 	add.w	r2, r7, #12
 8010e00:	6839      	ldr	r1, [r7, #0]
 8010e02:	6878      	ldr	r0, [r7, #4]
 8010e04:	f7ff ffb2 	bl	8010d6c <free_socket_locked>
 8010e08:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 8010e0a:	6978      	ldr	r0, [r7, #20]
 8010e0c:	f011 f83a 	bl	8021e84 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 8010e10:	693b      	ldr	r3, [r7, #16]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d006      	beq.n	8010e24 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	f107 0208 	add.w	r2, r7, #8
 8010e1c:	4619      	mov	r1, r3
 8010e1e:	6838      	ldr	r0, [r7, #0]
 8010e20:	f7ff ffc0 	bl	8010da4 <free_socket_free_elements>
  }
}
 8010e24:	bf00      	nop
 8010e26:	3718      	adds	r7, #24
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}

08010e2c <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 8010e2c:	b590      	push	{r4, r7, lr}
 8010e2e:	b099      	sub	sp, #100	; 0x64
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	60f8      	str	r0, [r7, #12]
 8010e34:	60b9      	str	r1, [r7, #8]
 8010e36:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
 8010e38:	2300      	movs	r3, #0
 8010e3a:	84fb      	strh	r3, [r7, #38]	; 0x26
  err_t err;
  int recvevent;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 8010e3c:	68f8      	ldr	r0, [r7, #12]
 8010e3e:	f7ff ff11 	bl	8010c64 <get_socket>
 8010e42:	65b8      	str	r0, [r7, #88]	; 0x58
  if (!sock) {
 8010e44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d102      	bne.n	8010e50 <lwip_accept+0x24>
    return -1;
 8010e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8010e4e:	e0f8      	b.n	8011042 <lwip_accept+0x216>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 8010e50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8010e58:	4611      	mov	r1, r2
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	f7fd faee 	bl	800e43c <netconn_accept>
 8010e60:	4603      	mov	r3, r0
 8010e62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (err != ERR_OK) {
 8010e66:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d02c      	beq.n	8010ec8 <lwip_accept+0x9c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8010e6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	781b      	ldrb	r3, [r3, #0]
 8010e74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010e78:	2b10      	cmp	r3, #16
 8010e7a:	d008      	beq.n	8010e8e <lwip_accept+0x62>
      sock_set_errno(sock, EOPNOTSUPP);
 8010e7c:	235f      	movs	r3, #95	; 0x5f
 8010e7e:	633b      	str	r3, [r7, #48]	; 0x30
 8010e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d01d      	beq.n	8010ec2 <lwip_accept+0x96>
 8010e86:	4a71      	ldr	r2, [pc, #452]	; (801104c <lwip_accept+0x220>)
 8010e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e8a:	6013      	str	r3, [r2, #0]
 8010e8c:	e019      	b.n	8010ec2 <lwip_accept+0x96>
    } else if (err == ERR_CLSD) {
 8010e8e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8010e92:	f113 0f0f 	cmn.w	r3, #15
 8010e96:	d108      	bne.n	8010eaa <lwip_accept+0x7e>
      sock_set_errno(sock, EINVAL);
 8010e98:	2316      	movs	r3, #22
 8010e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8010e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d00f      	beq.n	8010ec2 <lwip_accept+0x96>
 8010ea2:	4a6a      	ldr	r2, [pc, #424]	; (801104c <lwip_accept+0x220>)
 8010ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ea6:	6013      	str	r3, [r2, #0]
 8010ea8:	e00b      	b.n	8010ec2 <lwip_accept+0x96>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 8010eaa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8010eae:	4618      	mov	r0, r3
 8010eb0:	f7ff fd92 	bl	80109d8 <err_to_errno>
 8010eb4:	63b8      	str	r0, [r7, #56]	; 0x38
 8010eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d002      	beq.n	8010ec2 <lwip_accept+0x96>
 8010ebc:	4a63      	ldr	r2, [pc, #396]	; (801104c <lwip_accept+0x220>)
 8010ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ec0:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 8010ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8010ec6:	e0bc      	b.n	8011042 <lwip_accept+0x216>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 8010ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d106      	bne.n	8010edc <lwip_accept+0xb0>
 8010ece:	4b60      	ldr	r3, [pc, #384]	; (8011050 <lwip_accept+0x224>)
 8010ed0:	f240 228b 	movw	r2, #651	; 0x28b
 8010ed4:	495f      	ldr	r1, [pc, #380]	; (8011054 <lwip_accept+0x228>)
 8010ed6:	4860      	ldr	r0, [pc, #384]	; (8011058 <lwip_accept+0x22c>)
 8010ed8:	f015 fffc 	bl	8026ed4 <iprintf>

  newsock = alloc_socket(newconn, 1);
 8010edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ede:	2101      	movs	r1, #1
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f7ff fed7 	bl	8010c94 <alloc_socket>
 8010ee6:	6538      	str	r0, [r7, #80]	; 0x50
  if (newsock == -1) {
 8010ee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010eee:	d10e      	bne.n	8010f0e <lwip_accept+0xe2>
    netconn_delete(newconn);
 8010ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	f7fd f96e 	bl	800e1d4 <netconn_delete>
    sock_set_errno(sock, ENFILE);
 8010ef8:	2317      	movs	r3, #23
 8010efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d002      	beq.n	8010f08 <lwip_accept+0xdc>
 8010f02:	4a52      	ldr	r2, [pc, #328]	; (801104c <lwip_accept+0x220>)
 8010f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f06:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8010f08:	f04f 33ff 	mov.w	r3, #4294967295
 8010f0c:	e099      	b.n	8011042 <lwip_accept+0x216>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 8010f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	db02      	blt.n	8010f1a <lwip_accept+0xee>
 8010f14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f16:	2b03      	cmp	r3, #3
 8010f18:	dd06      	ble.n	8010f28 <lwip_accept+0xfc>
 8010f1a:	4b4d      	ldr	r3, [pc, #308]	; (8011050 <lwip_accept+0x224>)
 8010f1c:	f44f 7225 	mov.w	r2, #660	; 0x294
 8010f20:	494e      	ldr	r1, [pc, #312]	; (801105c <lwip_accept+0x230>)
 8010f22:	484d      	ldr	r0, [pc, #308]	; (8011058 <lwip_accept+0x22c>)
 8010f24:	f015 ffd6 	bl	8026ed4 <iprintf>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 8010f28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f2a:	011b      	lsls	r3, r3, #4
 8010f2c:	4a4c      	ldr	r2, [pc, #304]	; (8011060 <lwip_accept+0x234>)
 8010f2e:	4413      	add	r3, r2
 8010f30:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 8010f32:	f010 ff99 	bl	8021e68 <sys_arch_protect>
 8010f36:	64b8      	str	r0, [r7, #72]	; 0x48
  recvevent = (s16_t)(-1 - newconn->socket);
 8010f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f3a:	699b      	ldr	r3, [r3, #24]
 8010f3c:	b21b      	sxth	r3, r3
 8010f3e:	43db      	mvns	r3, r3
 8010f40:	b21b      	sxth	r3, r3
 8010f42:	65fb      	str	r3, [r7, #92]	; 0x5c
  newconn->socket = newsock;
 8010f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010f48:	619a      	str	r2, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 8010f4a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8010f4c:	f010 ff9a 	bl	8021e84 <sys_arch_unprotect>

  if (newconn->callback) {
 8010f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d012      	beq.n	8010f7e <lwip_accept+0x152>
    LOCK_TCPIP_CORE();
 8010f58:	4842      	ldr	r0, [pc, #264]	; (8011064 <lwip_accept+0x238>)
 8010f5a:	f010 ff43 	bl	8021de4 <sys_mutex_lock>
    while (recvevent > 0) {
 8010f5e:	e008      	b.n	8010f72 <lwip_accept+0x146>
      recvevent--;
 8010f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010f62:	3b01      	subs	r3, #1
 8010f64:	65fb      	str	r3, [r7, #92]	; 0x5c
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 8010f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f6c:	2200      	movs	r2, #0
 8010f6e:	2100      	movs	r1, #0
 8010f70:	4798      	blx	r3
    while (recvevent > 0) {
 8010f72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	dcf3      	bgt.n	8010f60 <lwip_accept+0x134>
    }
    UNLOCK_TCPIP_CORE();
 8010f78:	483a      	ldr	r0, [pc, #232]	; (8011064 <lwip_accept+0x238>)
 8010f7a:	f010 ff42 	bl	8021e02 <sys_mutex_unlock>
  }

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if ((addr != NULL) && (addrlen != NULL)) {
 8010f7e:	68bb      	ldr	r3, [r7, #8]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d055      	beq.n	8011030 <lwip_accept+0x204>
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d052      	beq.n	8011030 <lwip_accept+0x204>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
 8010f8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f8c:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8010f90:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010f94:	2300      	movs	r3, #0
 8010f96:	f7fd f939 	bl	800e20c <netconn_getaddr>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if (err != ERR_OK) {
 8010fa0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d016      	beq.n	8010fd6 <lwip_accept+0x1aa>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
 8010fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010faa:	4618      	mov	r0, r3
 8010fac:	f7fd f912 	bl	800e1d4 <netconn_delete>
      free_socket(nsock, 1);
 8010fb0:	2101      	movs	r1, #1
 8010fb2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010fb4:	f7ff ff18 	bl	8010de8 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 8010fb8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	f7ff fd0b 	bl	80109d8 <err_to_errno>
 8010fc2:	6478      	str	r0, [r7, #68]	; 0x44
 8010fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d002      	beq.n	8010fd0 <lwip_accept+0x1a4>
 8010fca:	4a20      	ldr	r2, [pc, #128]	; (801104c <lwip_accept+0x220>)
 8010fcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fce:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 8010fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8010fd4:	e035      	b.n	8011042 <lwip_accept+0x216>
    }

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 8010fd6:	f107 0314 	add.w	r3, r7, #20
 8010fda:	2210      	movs	r2, #16
 8010fdc:	701a      	strb	r2, [r3, #0]
 8010fde:	f107 0314 	add.w	r3, r7, #20
 8010fe2:	2202      	movs	r2, #2
 8010fe4:	705a      	strb	r2, [r3, #1]
 8010fe6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010fe8:	f107 0414 	add.w	r4, r7, #20
 8010fec:	4618      	mov	r0, r3
 8010fee:	f002 f86f 	bl	80130d0 <lwip_htons>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	8063      	strh	r3, [r4, #2]
 8010ff6:	f107 0314 	add.w	r3, r7, #20
 8010ffa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ffc:	605a      	str	r2, [r3, #4]
 8010ffe:	f107 0314 	add.w	r3, r7, #20
 8011002:	3308      	adds	r3, #8
 8011004:	2208      	movs	r2, #8
 8011006:	2100      	movs	r1, #0
 8011008:	4618      	mov	r0, r3
 801100a:	f015 f905 	bl	8026218 <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	7d3a      	ldrb	r2, [r7, #20]
 8011014:	4293      	cmp	r3, r2
 8011016:	d903      	bls.n	8011020 <lwip_accept+0x1f4>
      *addrlen = tempaddr.sa.sa_len;
 8011018:	7d3b      	ldrb	r3, [r7, #20]
 801101a:	461a      	mov	r2, r3
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	601a      	str	r2, [r3, #0]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	681a      	ldr	r2, [r3, #0]
 8011024:	f107 0314 	add.w	r3, r7, #20
 8011028:	4619      	mov	r1, r3
 801102a:	68b8      	ldr	r0, [r7, #8]
 801102c:	f015 f8cc 	bl	80261c8 <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
 8011030:	2300      	movs	r3, #0
 8011032:	643b      	str	r3, [r7, #64]	; 0x40
 8011034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011036:	2b00      	cmp	r3, #0
 8011038:	d002      	beq.n	8011040 <lwip_accept+0x214>
 801103a:	4a04      	ldr	r2, [pc, #16]	; (801104c <lwip_accept+0x220>)
 801103c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801103e:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  done_socket(nsock);
  return newsock;
 8011040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8011042:	4618      	mov	r0, r3
 8011044:	3764      	adds	r7, #100	; 0x64
 8011046:	46bd      	mov	sp, r7
 8011048:	bd90      	pop	{r4, r7, pc}
 801104a:	bf00      	nop
 801104c:	240086b8 	.word	0x240086b8
 8011050:	0802af34 	.word	0x0802af34
 8011054:	0802afb0 	.word	0x0802afb0
 8011058:	0802af88 	.word	0x0802af88
 801105c:	0802afc0 	.word	0x0802afc0
 8011060:	24004a4c 	.word	0x24004a4c
 8011064:	240053fc 	.word	0x240053fc

08011068 <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b08a      	sub	sp, #40	; 0x28
 801106c:	af00      	add	r7, sp, #0
 801106e:	60f8      	str	r0, [r7, #12]
 8011070:	60b9      	str	r1, [r7, #8]
 8011072:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 8011074:	68f8      	ldr	r0, [r7, #12]
 8011076:	f7ff fdf5 	bl	8010c64 <get_socket>
 801107a:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 801107c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801107e:	2b00      	cmp	r3, #0
 8011080:	d102      	bne.n	8011088 <lwip_bind+0x20>
    return -1;
 8011082:	f04f 33ff 	mov.w	r3, #4294967295
 8011086:	e051      	b.n	801112c <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	2b10      	cmp	r3, #16
 801108c:	d108      	bne.n	80110a0 <lwip_bind+0x38>
 801108e:	68bb      	ldr	r3, [r7, #8]
 8011090:	785b      	ldrb	r3, [r3, #1]
 8011092:	2b02      	cmp	r3, #2
 8011094:	d104      	bne.n	80110a0 <lwip_bind+0x38>
 8011096:	68bb      	ldr	r3, [r7, #8]
 8011098:	f003 0303 	and.w	r3, r3, #3
 801109c:	2b00      	cmp	r3, #0
 801109e:	d014      	beq.n	80110ca <lwip_bind+0x62>
 80110a0:	4b24      	ldr	r3, [pc, #144]	; (8011134 <lwip_bind+0xcc>)
 80110a2:	f240 22e2 	movw	r2, #738	; 0x2e2
 80110a6:	4924      	ldr	r1, [pc, #144]	; (8011138 <lwip_bind+0xd0>)
 80110a8:	4824      	ldr	r0, [pc, #144]	; (801113c <lwip_bind+0xd4>)
 80110aa:	f015 ff13 	bl	8026ed4 <iprintf>
 80110ae:	f06f 000f 	mvn.w	r0, #15
 80110b2:	f7ff fc91 	bl	80109d8 <err_to_errno>
 80110b6:	6178      	str	r0, [r7, #20]
 80110b8:	697b      	ldr	r3, [r7, #20]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d002      	beq.n	80110c4 <lwip_bind+0x5c>
 80110be:	4a20      	ldr	r2, [pc, #128]	; (8011140 <lwip_bind+0xd8>)
 80110c0:	697b      	ldr	r3, [r7, #20]
 80110c2:	6013      	str	r3, [r2, #0]
 80110c4:	f04f 33ff 	mov.w	r3, #4294967295
 80110c8:	e030      	b.n	801112c <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 80110ca:	68bb      	ldr	r3, [r7, #8]
 80110cc:	685b      	ldr	r3, [r3, #4]
 80110ce:	613b      	str	r3, [r7, #16]
 80110d0:	68bb      	ldr	r3, [r7, #8]
 80110d2:	885b      	ldrh	r3, [r3, #2]
 80110d4:	4618      	mov	r0, r3
 80110d6:	f001 fffb 	bl	80130d0 <lwip_htons>
 80110da:	4603      	mov	r3, r0
 80110dc:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 80110de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80110e4:	f107 0110 	add.w	r1, r7, #16
 80110e8:	4618      	mov	r0, r3
 80110ea:	f7fd f8e1 	bl	800e2b0 <netconn_bind>
 80110ee:	4603      	mov	r3, r0
 80110f0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 80110f4:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d00e      	beq.n	801111a <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 80110fc:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8011100:	4618      	mov	r0, r3
 8011102:	f7ff fc69 	bl	80109d8 <err_to_errno>
 8011106:	61b8      	str	r0, [r7, #24]
 8011108:	69bb      	ldr	r3, [r7, #24]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d002      	beq.n	8011114 <lwip_bind+0xac>
 801110e:	4a0c      	ldr	r2, [pc, #48]	; (8011140 <lwip_bind+0xd8>)
 8011110:	69bb      	ldr	r3, [r7, #24]
 8011112:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8011114:	f04f 33ff 	mov.w	r3, #4294967295
 8011118:	e008      	b.n	801112c <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 801111a:	2300      	movs	r3, #0
 801111c:	61fb      	str	r3, [r7, #28]
 801111e:	69fb      	ldr	r3, [r7, #28]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d002      	beq.n	801112a <lwip_bind+0xc2>
 8011124:	4a06      	ldr	r2, [pc, #24]	; (8011140 <lwip_bind+0xd8>)
 8011126:	69fb      	ldr	r3, [r7, #28]
 8011128:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 801112a:	2300      	movs	r3, #0
}
 801112c:	4618      	mov	r0, r3
 801112e:	3728      	adds	r7, #40	; 0x28
 8011130:	46bd      	mov	sp, r7
 8011132:	bd80      	pop	{r7, pc}
 8011134:	0802af34 	.word	0x0802af34
 8011138:	0802afd8 	.word	0x0802afd8
 801113c:	0802af88 	.word	0x0802af88
 8011140:	240086b8 	.word	0x240086b8

08011144 <lwip_close>:

int
lwip_close(int s)
{
 8011144:	b580      	push	{r7, lr}
 8011146:	b086      	sub	sp, #24
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 801114c:	2300      	movs	r3, #0
 801114e:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 8011150:	6878      	ldr	r0, [r7, #4]
 8011152:	f7ff fd87 	bl	8010c64 <get_socket>
 8011156:	6138      	str	r0, [r7, #16]
  if (!sock) {
 8011158:	693b      	ldr	r3, [r7, #16]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d102      	bne.n	8011164 <lwip_close+0x20>
    return -1;
 801115e:	f04f 33ff 	mov.w	r3, #4294967295
 8011162:	e039      	b.n	80111d8 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 8011164:	693b      	ldr	r3, [r7, #16]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d00b      	beq.n	8011184 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 801116c:	693b      	ldr	r3, [r7, #16]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	781b      	ldrb	r3, [r3, #0]
 8011172:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011176:	2b10      	cmp	r3, #16
 8011178:	bf0c      	ite	eq
 801117a:	2301      	moveq	r3, #1
 801117c:	2300      	movne	r3, #0
 801117e:	b2db      	uxtb	r3, r3
 8011180:	617b      	str	r3, [r7, #20]
 8011182:	e00a      	b.n	801119a <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 8011184:	693b      	ldr	r3, [r7, #16]
 8011186:	685b      	ldr	r3, [r3, #4]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d006      	beq.n	801119a <lwip_close+0x56>
 801118c:	4b14      	ldr	r3, [pc, #80]	; (80111e0 <lwip_close+0x9c>)
 801118e:	f44f 7245 	mov.w	r2, #788	; 0x314
 8011192:	4914      	ldr	r1, [pc, #80]	; (80111e4 <lwip_close+0xa0>)
 8011194:	4814      	ldr	r0, [pc, #80]	; (80111e8 <lwip_close+0xa4>)
 8011196:	f015 fe9d 	bl	8026ed4 <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 801119a:	693b      	ldr	r3, [r7, #16]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	4618      	mov	r0, r3
 80111a0:	f7fc fff4 	bl	800e18c <netconn_prepare_delete>
 80111a4:	4603      	mov	r3, r0
 80111a6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80111a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d00e      	beq.n	80111ce <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 80111b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80111b4:	4618      	mov	r0, r3
 80111b6:	f7ff fc0f 	bl	80109d8 <err_to_errno>
 80111ba:	60b8      	str	r0, [r7, #8]
 80111bc:	68bb      	ldr	r3, [r7, #8]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d002      	beq.n	80111c8 <lwip_close+0x84>
 80111c2:	4a0a      	ldr	r2, [pc, #40]	; (80111ec <lwip_close+0xa8>)
 80111c4:	68bb      	ldr	r3, [r7, #8]
 80111c6:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 80111c8:	f04f 33ff 	mov.w	r3, #4294967295
 80111cc:	e004      	b.n	80111d8 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 80111ce:	6979      	ldr	r1, [r7, #20]
 80111d0:	6938      	ldr	r0, [r7, #16]
 80111d2:	f7ff fe09 	bl	8010de8 <free_socket>
  set_errno(0);
  return 0;
 80111d6:	2300      	movs	r3, #0
}
 80111d8:	4618      	mov	r0, r3
 80111da:	3718      	adds	r7, #24
 80111dc:	46bd      	mov	sp, r7
 80111de:	bd80      	pop	{r7, pc}
 80111e0:	0802af34 	.word	0x0802af34
 80111e4:	0802aff4 	.word	0x0802aff4
 80111e8:	0802af88 	.word	0x0802af88
 80111ec:	240086b8 	.word	0x240086b8

080111f0 <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b08c      	sub	sp, #48	; 0x30
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	60f8      	str	r0, [r7, #12]
 80111f8:	60b9      	str	r1, [r7, #8]
 80111fa:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
 80111fc:	68f8      	ldr	r0, [r7, #12]
 80111fe:	f7ff fd31 	bl	8010c64 <get_socket>
 8011202:	62b8      	str	r0, [r7, #40]	; 0x28
  if (!sock) {
 8011204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011206:	2b00      	cmp	r3, #0
 8011208:	d102      	bne.n	8011210 <lwip_connect+0x20>
    return -1;
 801120a:	f04f 33ff 	mov.w	r3, #4294967295
 801120e:	e062      	b.n	80112d6 <lwip_connect+0xe6>
    done_socket(sock);
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
 8011210:	68bb      	ldr	r3, [r7, #8]
 8011212:	785b      	ldrb	r3, [r3, #1]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d108      	bne.n	801122a <lwip_connect+0x3a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 8011218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	4618      	mov	r0, r3
 801121e:	f7fd f8b7 	bl	800e390 <netconn_disconnect>
 8011222:	4603      	mov	r3, r0
 8011224:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011228:	e039      	b.n	801129e <lwip_connect+0xae>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	2b10      	cmp	r3, #16
 801122e:	d10c      	bne.n	801124a <lwip_connect+0x5a>
 8011230:	68bb      	ldr	r3, [r7, #8]
 8011232:	785b      	ldrb	r3, [r3, #1]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d003      	beq.n	8011240 <lwip_connect+0x50>
 8011238:	68bb      	ldr	r3, [r7, #8]
 801123a:	785b      	ldrb	r3, [r3, #1]
 801123c:	2b02      	cmp	r3, #2
 801123e:	d104      	bne.n	801124a <lwip_connect+0x5a>
 8011240:	68bb      	ldr	r3, [r7, #8]
 8011242:	f003 0303 	and.w	r3, r3, #3
 8011246:	2b00      	cmp	r3, #0
 8011248:	d014      	beq.n	8011274 <lwip_connect+0x84>
 801124a:	4b25      	ldr	r3, [pc, #148]	; (80112e0 <lwip_connect+0xf0>)
 801124c:	f240 3247 	movw	r2, #839	; 0x347
 8011250:	4924      	ldr	r1, [pc, #144]	; (80112e4 <lwip_connect+0xf4>)
 8011252:	4825      	ldr	r0, [pc, #148]	; (80112e8 <lwip_connect+0xf8>)
 8011254:	f015 fe3e 	bl	8026ed4 <iprintf>
 8011258:	f06f 000f 	mvn.w	r0, #15
 801125c:	f7ff fbbc 	bl	80109d8 <err_to_errno>
 8011260:	6238      	str	r0, [r7, #32]
 8011262:	6a3b      	ldr	r3, [r7, #32]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d002      	beq.n	801126e <lwip_connect+0x7e>
 8011268:	4a20      	ldr	r2, [pc, #128]	; (80112ec <lwip_connect+0xfc>)
 801126a:	6a3b      	ldr	r3, [r7, #32]
 801126c:	6013      	str	r3, [r2, #0]
 801126e:	f04f 33ff 	mov.w	r3, #4294967295
 8011272:	e030      	b.n	80112d6 <lwip_connect+0xe6>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 8011274:	68bb      	ldr	r3, [r7, #8]
 8011276:	685b      	ldr	r3, [r3, #4]
 8011278:	617b      	str	r3, [r7, #20]
 801127a:	68bb      	ldr	r3, [r7, #8]
 801127c:	885b      	ldrh	r3, [r3, #2]
 801127e:	4618      	mov	r0, r3
 8011280:	f001 ff26 	bl	80130d0 <lwip_htons>
 8011284:	4603      	mov	r3, r0
 8011286:	84fb      	strh	r3, [r7, #38]	; 0x26
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 8011288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801128e:	f107 0114 	add.w	r1, r7, #20
 8011292:	4618      	mov	r0, r3
 8011294:	f7fd f844 	bl	800e320 <netconn_connect>
 8011298:	4603      	mov	r3, r0
 801129a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (err != ERR_OK) {
 801129e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d00e      	beq.n	80112c4 <lwip_connect+0xd4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 80112a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80112aa:	4618      	mov	r0, r3
 80112ac:	f7ff fb94 	bl	80109d8 <err_to_errno>
 80112b0:	61b8      	str	r0, [r7, #24]
 80112b2:	69bb      	ldr	r3, [r7, #24]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d002      	beq.n	80112be <lwip_connect+0xce>
 80112b8:	4a0c      	ldr	r2, [pc, #48]	; (80112ec <lwip_connect+0xfc>)
 80112ba:	69bb      	ldr	r3, [r7, #24]
 80112bc:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 80112be:	f04f 33ff 	mov.w	r3, #4294967295
 80112c2:	e008      	b.n	80112d6 <lwip_connect+0xe6>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 80112c4:	2300      	movs	r3, #0
 80112c6:	61fb      	str	r3, [r7, #28]
 80112c8:	69fb      	ldr	r3, [r7, #28]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d002      	beq.n	80112d4 <lwip_connect+0xe4>
 80112ce:	4a07      	ldr	r2, [pc, #28]	; (80112ec <lwip_connect+0xfc>)
 80112d0:	69fb      	ldr	r3, [r7, #28]
 80112d2:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 80112d4:	2300      	movs	r3, #0
}
 80112d6:	4618      	mov	r0, r3
 80112d8:	3730      	adds	r7, #48	; 0x30
 80112da:	46bd      	mov	sp, r7
 80112dc:	bd80      	pop	{r7, pc}
 80112de:	bf00      	nop
 80112e0:	0802af34 	.word	0x0802af34
 80112e4:	0802b00c 	.word	0x0802b00c
 80112e8:	0802af88 	.word	0x0802af88
 80112ec:	240086b8 	.word	0x240086b8

080112f0 <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b088      	sub	sp, #32
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
 80112f8:	6039      	str	r1, [r7, #0]
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 80112fa:	6878      	ldr	r0, [r7, #4]
 80112fc:	f7ff fcb2 	bl	8010c64 <get_socket>
 8011300:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 8011302:	69fb      	ldr	r3, [r7, #28]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d102      	bne.n	801130e <lwip_listen+0x1e>
    return -1;
 8011308:	f04f 33ff 	mov.w	r3, #4294967295
 801130c:	e03e      	b.n	801138c <lwip_listen+0x9c>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 801130e:	683b      	ldr	r3, [r7, #0]
 8011310:	2bfe      	cmp	r3, #254	; 0xfe
 8011312:	dc03      	bgt.n	801131c <lwip_listen+0x2c>
 8011314:	683b      	ldr	r3, [r7, #0]
 8011316:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801131a:	e000      	b.n	801131e <lwip_listen+0x2e>
 801131c:	23ff      	movs	r3, #255	; 0xff
 801131e:	603b      	str	r3, [r7, #0]

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 8011320:	69fb      	ldr	r3, [r7, #28]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	683a      	ldr	r2, [r7, #0]
 8011326:	b2d2      	uxtb	r2, r2
 8011328:	4611      	mov	r1, r2
 801132a:	4618      	mov	r0, r3
 801132c:	f7fd f85a 	bl	800e3e4 <netconn_listen_with_backlog>
 8011330:	4603      	mov	r3, r0
 8011332:	76fb      	strb	r3, [r7, #27]

  if (err != ERR_OK) {
 8011334:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d01e      	beq.n	801137a <lwip_listen+0x8a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 801133c:	69fb      	ldr	r3, [r7, #28]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	781b      	ldrb	r3, [r3, #0]
 8011342:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011346:	2b10      	cmp	r3, #16
 8011348:	d008      	beq.n	801135c <lwip_listen+0x6c>
      sock_set_errno(sock, EOPNOTSUPP);
 801134a:	235f      	movs	r3, #95	; 0x5f
 801134c:	60fb      	str	r3, [r7, #12]
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d00f      	beq.n	8011374 <lwip_listen+0x84>
 8011354:	4a0f      	ldr	r2, [pc, #60]	; (8011394 <lwip_listen+0xa4>)
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	6013      	str	r3, [r2, #0]
 801135a:	e00b      	b.n	8011374 <lwip_listen+0x84>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 801135c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011360:	4618      	mov	r0, r3
 8011362:	f7ff fb39 	bl	80109d8 <err_to_errno>
 8011366:	6138      	str	r0, [r7, #16]
 8011368:	693b      	ldr	r3, [r7, #16]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d002      	beq.n	8011374 <lwip_listen+0x84>
 801136e:	4a09      	ldr	r2, [pc, #36]	; (8011394 <lwip_listen+0xa4>)
 8011370:	693b      	ldr	r3, [r7, #16]
 8011372:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 8011374:	f04f 33ff 	mov.w	r3, #4294967295
 8011378:	e008      	b.n	801138c <lwip_listen+0x9c>
  }

  sock_set_errno(sock, 0);
 801137a:	2300      	movs	r3, #0
 801137c:	617b      	str	r3, [r7, #20]
 801137e:	697b      	ldr	r3, [r7, #20]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d002      	beq.n	801138a <lwip_listen+0x9a>
 8011384:	4a03      	ldr	r2, [pc, #12]	; (8011394 <lwip_listen+0xa4>)
 8011386:	697b      	ldr	r3, [r7, #20]
 8011388:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 801138a:	2300      	movs	r3, #0
}
 801138c:	4618      	mov	r0, r3
 801138e:	3720      	adds	r7, #32
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}
 8011394:	240086b8 	.word	0x240086b8

08011398 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 8011398:	b580      	push	{r7, lr}
 801139a:	b08c      	sub	sp, #48	; 0x30
 801139c:	af00      	add	r7, sp, #0
 801139e:	60f8      	str	r0, [r7, #12]
 80113a0:	60b9      	str	r1, [r7, #8]
 80113a2:	607a      	str	r2, [r7, #4]
 80113a4:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 80113a6:	2308      	movs	r3, #8
 80113a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 80113ac:	2300      	movs	r3, #0
 80113ae:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	db01      	blt.n	80113ba <lwip_recv_tcp+0x22>
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	e001      	b.n	80113be <lwip_recv_tcp+0x26>
 80113ba:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80113be:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d106      	bne.n	80113d4 <lwip_recv_tcp+0x3c>
 80113c6:	4b74      	ldr	r3, [pc, #464]	; (8011598 <lwip_recv_tcp+0x200>)
 80113c8:	f240 329e 	movw	r2, #926	; 0x39e
 80113cc:	4973      	ldr	r1, [pc, #460]	; (801159c <lwip_recv_tcp+0x204>)
 80113ce:	4874      	ldr	r0, [pc, #464]	; (80115a0 <lwip_recv_tcp+0x208>)
 80113d0:	f015 fd80 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	781b      	ldrb	r3, [r3, #0]
 80113da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80113de:	2b10      	cmp	r3, #16
 80113e0:	d006      	beq.n	80113f0 <lwip_recv_tcp+0x58>
 80113e2:	4b6d      	ldr	r3, [pc, #436]	; (8011598 <lwip_recv_tcp+0x200>)
 80113e4:	f240 329f 	movw	r2, #927	; 0x39f
 80113e8:	496e      	ldr	r1, [pc, #440]	; (80115a4 <lwip_recv_tcp+0x20c>)
 80113ea:	486d      	ldr	r0, [pc, #436]	; (80115a0 <lwip_recv_tcp+0x208>)
 80113ec:	f015 fd72 	bl	8026ed4 <iprintf>

  if (flags & MSG_DONTWAIT) {
 80113f0:	683b      	ldr	r3, [r7, #0]
 80113f2:	f003 0308 	and.w	r3, r3, #8
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d005      	beq.n	8011406 <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 80113fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80113fe:	f043 0304 	orr.w	r3, r3, #4
 8011402:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	685b      	ldr	r3, [r3, #4]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d003      	beq.n	8011416 <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	685b      	ldr	r3, [r3, #4]
 8011412:	617b      	str	r3, [r7, #20]
 8011414:	e036      	b.n	8011484 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801141e:	f107 0114 	add.w	r1, r7, #20
 8011422:	4618      	mov	r0, r3
 8011424:	f7fd fa40 	bl	800e8a8 <netconn_recv_tcp_pbuf_flags>
 8011428:	4603      	mov	r3, r0
 801142a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 801142e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8011432:	2b00      	cmp	r3, #0
 8011434:	d019      	beq.n	801146a <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 8011436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011438:	2b00      	cmp	r3, #0
 801143a:	f300 808d 	bgt.w	8011558 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 801143e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8011442:	4618      	mov	r0, r3
 8011444:	f7ff fac8 	bl	80109d8 <err_to_errno>
 8011448:	61f8      	str	r0, [r7, #28]
 801144a:	69fb      	ldr	r3, [r7, #28]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d002      	beq.n	8011456 <lwip_recv_tcp+0xbe>
 8011450:	4a55      	ldr	r2, [pc, #340]	; (80115a8 <lwip_recv_tcp+0x210>)
 8011452:	69fb      	ldr	r3, [r7, #28]
 8011454:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 8011456:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 801145a:	f113 0f0f 	cmn.w	r3, #15
 801145e:	d101      	bne.n	8011464 <lwip_recv_tcp+0xcc>
          return 0;
 8011460:	2300      	movs	r3, #0
 8011462:	e094      	b.n	801158e <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 8011464:	f04f 33ff 	mov.w	r3, #4294967295
 8011468:	e091      	b.n	801158e <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 801146a:	697b      	ldr	r3, [r7, #20]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d106      	bne.n	801147e <lwip_recv_tcp+0xe6>
 8011470:	4b49      	ldr	r3, [pc, #292]	; (8011598 <lwip_recv_tcp+0x200>)
 8011472:	f240 32c5 	movw	r2, #965	; 0x3c5
 8011476:	494d      	ldr	r1, [pc, #308]	; (80115ac <lwip_recv_tcp+0x214>)
 8011478:	4849      	ldr	r0, [pc, #292]	; (80115a0 <lwip_recv_tcp+0x208>)
 801147a:	f015 fd2b 	bl	8026ed4 <iprintf>
      sock->lastdata.pbuf = p;
 801147e:	697a      	ldr	r2, [r7, #20]
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 8011484:	697b      	ldr	r3, [r7, #20]
 8011486:	891b      	ldrh	r3, [r3, #8]
 8011488:	461a      	mov	r2, r3
 801148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801148c:	4293      	cmp	r3, r2
 801148e:	dd03      	ble.n	8011498 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 8011490:	697b      	ldr	r3, [r7, #20]
 8011492:	891b      	ldrh	r3, [r3, #8]
 8011494:	847b      	strh	r3, [r7, #34]	; 0x22
 8011496:	e001      	b.n	801149c <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 8011498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801149a:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 801149c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801149e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114a0:	4413      	add	r3, r2
 80114a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80114a4:	429a      	cmp	r2, r3
 80114a6:	dd03      	ble.n	80114b0 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 80114a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114aa:	b29b      	uxth	r3, r3
 80114ac:	43db      	mvns	r3, r3
 80114ae:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 80114b0:	6978      	ldr	r0, [r7, #20]
 80114b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114b4:	68ba      	ldr	r2, [r7, #8]
 80114b6:	18d1      	adds	r1, r2, r3
 80114b8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80114ba:	2300      	movs	r3, #0
 80114bc:	f004 fce0 	bl	8015e80 <pbuf_copy_partial>

    recvd += copylen;
 80114c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80114c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80114c4:	4413      	add	r3, r2
 80114c6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 80114c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80114ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80114cc:	429a      	cmp	r2, r3
 80114ce:	da06      	bge.n	80114de <lwip_recv_tcp+0x146>
 80114d0:	4b31      	ldr	r3, [pc, #196]	; (8011598 <lwip_recv_tcp+0x200>)
 80114d2:	f240 32dd 	movw	r2, #989	; 0x3dd
 80114d6:	4936      	ldr	r1, [pc, #216]	; (80115b0 <lwip_recv_tcp+0x218>)
 80114d8:	4831      	ldr	r0, [pc, #196]	; (80115a0 <lwip_recv_tcp+0x208>)
 80114da:	f015 fcfb 	bl	8026ed4 <iprintf>
    recv_left -= copylen;
 80114de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80114e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80114e2:	1ad3      	subs	r3, r2, r3
 80114e4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 80114e6:	683b      	ldr	r3, [r7, #0]
 80114e8:	f003 0301 	and.w	r3, r3, #1
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d123      	bne.n	8011538 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 80114f0:	697b      	ldr	r3, [r7, #20]
 80114f2:	891b      	ldrh	r3, [r3, #8]
 80114f4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80114f6:	429a      	cmp	r2, r3
 80114f8:	d906      	bls.n	8011508 <lwip_recv_tcp+0x170>
 80114fa:	4b27      	ldr	r3, [pc, #156]	; (8011598 <lwip_recv_tcp+0x200>)
 80114fc:	f240 32e3 	movw	r2, #995	; 0x3e3
 8011500:	492c      	ldr	r1, [pc, #176]	; (80115b4 <lwip_recv_tcp+0x21c>)
 8011502:	4827      	ldr	r0, [pc, #156]	; (80115a0 <lwip_recv_tcp+0x208>)
 8011504:	f015 fce6 	bl	8026ed4 <iprintf>
      if (p->tot_len - copylen > 0) {
 8011508:	697b      	ldr	r3, [r7, #20]
 801150a:	891b      	ldrh	r3, [r3, #8]
 801150c:	461a      	mov	r2, r3
 801150e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011510:	1ad3      	subs	r3, r2, r3
 8011512:	2b00      	cmp	r3, #0
 8011514:	dd09      	ble.n	801152a <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 8011516:	697b      	ldr	r3, [r7, #20]
 8011518:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801151a:	4611      	mov	r1, r2
 801151c:	4618      	mov	r0, r3
 801151e:	f004 fa76 	bl	8015a0e <pbuf_free_header>
 8011522:	4602      	mov	r2, r0
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	605a      	str	r2, [r3, #4]
 8011528:	e006      	b.n	8011538 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	2200      	movs	r2, #0
 801152e:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 8011530:	697b      	ldr	r3, [r7, #20]
 8011532:	4618      	mov	r0, r3
 8011534:	f004 fa9e 	bl	8015a74 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 8011538:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801153c:	f043 0314 	orr.w	r3, r3, #20
 8011540:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 8011544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011546:	2b00      	cmp	r3, #0
 8011548:	dd08      	ble.n	801155c <lwip_recv_tcp+0x1c4>
 801154a:	683b      	ldr	r3, [r7, #0]
 801154c:	f003 0301 	and.w	r3, r3, #1
 8011550:	2b00      	cmp	r3, #0
 8011552:	f43f af58 	beq.w	8011406 <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 8011556:	e001      	b.n	801155c <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 8011558:	bf00      	nop
 801155a:	e000      	b.n	801155e <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 801155c:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 801155e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011560:	2b00      	cmp	r3, #0
 8011562:	dd0b      	ble.n	801157c <lwip_recv_tcp+0x1e4>
 8011564:	683b      	ldr	r3, [r7, #0]
 8011566:	f003 0301 	and.w	r3, r3, #1
 801156a:	2b00      	cmp	r3, #0
 801156c:	d106      	bne.n	801157c <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011574:	4611      	mov	r1, r2
 8011576:	4618      	mov	r0, r3
 8011578:	f7fd f8e4 	bl	800e744 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 801157c:	2300      	movs	r3, #0
 801157e:	61bb      	str	r3, [r7, #24]
 8011580:	69bb      	ldr	r3, [r7, #24]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d002      	beq.n	801158c <lwip_recv_tcp+0x1f4>
 8011586:	4a08      	ldr	r2, [pc, #32]	; (80115a8 <lwip_recv_tcp+0x210>)
 8011588:	69bb      	ldr	r3, [r7, #24]
 801158a:	6013      	str	r3, [r2, #0]
  return recvd;
 801158c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 801158e:	4618      	mov	r0, r3
 8011590:	3730      	adds	r7, #48	; 0x30
 8011592:	46bd      	mov	sp, r7
 8011594:	bd80      	pop	{r7, pc}
 8011596:	bf00      	nop
 8011598:	0802af34 	.word	0x0802af34
 801159c:	0802b02c 	.word	0x0802b02c
 80115a0:	0802af88 	.word	0x0802af88
 80115a4:	0802b03c 	.word	0x0802b03c
 80115a8:	240086b8 	.word	0x240086b8
 80115ac:	0802b060 	.word	0x0802b060
 80115b0:	0802b06c 	.word	0x0802b06c
 80115b4:	0802b094 	.word	0x0802b094

080115b8 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 80115b8:	b590      	push	{r4, r7, lr}
 80115ba:	b08b      	sub	sp, #44	; 0x2c
 80115bc:	af00      	add	r7, sp, #0
 80115be:	60f8      	str	r0, [r7, #12]
 80115c0:	60b9      	str	r1, [r7, #8]
 80115c2:	603b      	str	r3, [r7, #0]
 80115c4:	4613      	mov	r3, r2
 80115c6:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 80115c8:	2300      	movs	r3, #0
 80115ca:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 80115cc:	68bb      	ldr	r3, [r7, #8]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d106      	bne.n	80115e0 <lwip_sock_make_addr+0x28>
 80115d2:	4b2b      	ldr	r3, [pc, #172]	; (8011680 <lwip_sock_make_addr+0xc8>)
 80115d4:	f240 4207 	movw	r2, #1031	; 0x407
 80115d8:	492a      	ldr	r1, [pc, #168]	; (8011684 <lwip_sock_make_addr+0xcc>)
 80115da:	482b      	ldr	r0, [pc, #172]	; (8011688 <lwip_sock_make_addr+0xd0>)
 80115dc:	f015 fc7a 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 80115e0:	683b      	ldr	r3, [r7, #0]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d106      	bne.n	80115f4 <lwip_sock_make_addr+0x3c>
 80115e6:	4b26      	ldr	r3, [pc, #152]	; (8011680 <lwip_sock_make_addr+0xc8>)
 80115e8:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80115ec:	4927      	ldr	r1, [pc, #156]	; (801168c <lwip_sock_make_addr+0xd4>)
 80115ee:	4826      	ldr	r0, [pc, #152]	; (8011688 <lwip_sock_make_addr+0xd0>)
 80115f0:	f015 fc70 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 80115f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d106      	bne.n	8011608 <lwip_sock_make_addr+0x50>
 80115fa:	4b21      	ldr	r3, [pc, #132]	; (8011680 <lwip_sock_make_addr+0xc8>)
 80115fc:	f240 4209 	movw	r2, #1033	; 0x409
 8011600:	4923      	ldr	r1, [pc, #140]	; (8011690 <lwip_sock_make_addr+0xd8>)
 8011602:	4821      	ldr	r0, [pc, #132]	; (8011688 <lwip_sock_make_addr+0xd0>)
 8011604:	f015 fc66 	bl	8026ed4 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 8011608:	f107 0314 	add.w	r3, r7, #20
 801160c:	2210      	movs	r2, #16
 801160e:	701a      	strb	r2, [r3, #0]
 8011610:	f107 0314 	add.w	r3, r7, #20
 8011614:	2202      	movs	r2, #2
 8011616:	705a      	strb	r2, [r3, #1]
 8011618:	f107 0414 	add.w	r4, r7, #20
 801161c:	88fb      	ldrh	r3, [r7, #6]
 801161e:	4618      	mov	r0, r3
 8011620:	f001 fd56 	bl	80130d0 <lwip_htons>
 8011624:	4603      	mov	r3, r0
 8011626:	8063      	strh	r3, [r4, #2]
 8011628:	f107 0314 	add.w	r3, r7, #20
 801162c:	68ba      	ldr	r2, [r7, #8]
 801162e:	6812      	ldr	r2, [r2, #0]
 8011630:	605a      	str	r2, [r3, #4]
 8011632:	f107 0314 	add.w	r3, r7, #20
 8011636:	3308      	adds	r3, #8
 8011638:	2208      	movs	r2, #8
 801163a:	2100      	movs	r1, #0
 801163c:	4618      	mov	r0, r3
 801163e:	f014 fdeb 	bl	8026218 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 8011642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	7d3a      	ldrb	r2, [r7, #20]
 8011648:	4293      	cmp	r3, r2
 801164a:	d202      	bcs.n	8011652 <lwip_sock_make_addr+0x9a>
    truncated = 1;
 801164c:	2301      	movs	r3, #1
 801164e:	627b      	str	r3, [r7, #36]	; 0x24
 8011650:	e008      	b.n	8011664 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 8011652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	7d3a      	ldrb	r2, [r7, #20]
 8011658:	4293      	cmp	r3, r2
 801165a:	d903      	bls.n	8011664 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 801165c:	7d3b      	ldrb	r3, [r7, #20]
 801165e:	461a      	mov	r2, r3
 8011660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011662:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 8011664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011666:	681a      	ldr	r2, [r3, #0]
 8011668:	f107 0314 	add.w	r3, r7, #20
 801166c:	4619      	mov	r1, r3
 801166e:	6838      	ldr	r0, [r7, #0]
 8011670:	f014 fdaa 	bl	80261c8 <memcpy>
  return truncated;
 8011674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011676:	4618      	mov	r0, r3
 8011678:	372c      	adds	r7, #44	; 0x2c
 801167a:	46bd      	mov	sp, r7
 801167c:	bd90      	pop	{r4, r7, pc}
 801167e:	bf00      	nop
 8011680:	0802af34 	.word	0x0802af34
 8011684:	0802b0a4 	.word	0x0802b0a4
 8011688:	0802af88 	.word	0x0802af88
 801168c:	0802b0b8 	.word	0x0802b0b8
 8011690:	0802b0c8 	.word	0x0802b0c8

08011694 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 8011694:	b580      	push	{r7, lr}
 8011696:	b088      	sub	sp, #32
 8011698:	af02      	add	r7, sp, #8
 801169a:	60f8      	str	r0, [r7, #12]
 801169c:	60b9      	str	r1, [r7, #8]
 801169e:	607a      	str	r2, [r7, #4]
 80116a0:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d101      	bne.n	80116ac <lwip_recv_tcp_from+0x18>
    return 0;
 80116a8:	2300      	movs	r3, #0
 80116aa:	e021      	b.n	80116f0 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 80116ac:	68bb      	ldr	r3, [r7, #8]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d01d      	beq.n	80116ee <lwip_recv_tcp_from+0x5a>
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d01a      	beq.n	80116ee <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	6818      	ldr	r0, [r3, #0]
 80116bc:	f107 0216 	add.w	r2, r7, #22
 80116c0:	f107 0110 	add.w	r1, r7, #16
 80116c4:	2300      	movs	r3, #0
 80116c6:	f7fc fda1 	bl	800e20c <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 80116ca:	68bb      	ldr	r3, [r7, #8]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d00e      	beq.n	80116ee <lwip_recv_tcp_from+0x5a>
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d00b      	beq.n	80116ee <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	6818      	ldr	r0, [r3, #0]
 80116da:	8afa      	ldrh	r2, [r7, #22]
 80116dc:	f107 0110 	add.w	r1, r7, #16
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	9300      	str	r3, [sp, #0]
 80116e4:	68bb      	ldr	r3, [r7, #8]
 80116e6:	f7ff ff67 	bl	80115b8 <lwip_sock_make_addr>
 80116ea:	4603      	mov	r3, r0
 80116ec:	e000      	b.n	80116f0 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 80116ee:	2300      	movs	r3, #0
}
 80116f0:	4618      	mov	r0, r3
 80116f2:	3718      	adds	r7, #24
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bd80      	pop	{r7, pc}

080116f8 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 80116f8:	b590      	push	{r4, r7, lr}
 80116fa:	b08d      	sub	sp, #52	; 0x34
 80116fc:	af02      	add	r7, sp, #8
 80116fe:	60f8      	str	r0, [r7, #12]
 8011700:	60b9      	str	r1, [r7, #8]
 8011702:	607a      	str	r2, [r7, #4]
 8011704:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	689b      	ldr	r3, [r3, #8]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d10d      	bne.n	801172a <lwip_recvfrom_udp_raw+0x32>
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	68db      	ldr	r3, [r3, #12]
 8011712:	2b00      	cmp	r3, #0
 8011714:	dd09      	ble.n	801172a <lwip_recvfrom_udp_raw+0x32>
 8011716:	4b5e      	ldr	r3, [pc, #376]	; (8011890 <lwip_recvfrom_udp_raw+0x198>)
 8011718:	f240 4249 	movw	r2, #1097	; 0x449
 801171c:	495d      	ldr	r1, [pc, #372]	; (8011894 <lwip_recvfrom_udp_raw+0x19c>)
 801171e:	485e      	ldr	r0, [pc, #376]	; (8011898 <lwip_recvfrom_udp_raw+0x1a0>)
 8011720:	f015 fbd8 	bl	8026ed4 <iprintf>
 8011724:	f06f 030f 	mvn.w	r3, #15
 8011728:	e0ad      	b.n	8011886 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 801172a:	68bb      	ldr	r3, [r7, #8]
 801172c:	f003 0308 	and.w	r3, r3, #8
 8011730:	2b00      	cmp	r3, #0
 8011732:	d003      	beq.n	801173c <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 8011734:	2304      	movs	r3, #4
 8011736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801173a:	e002      	b.n	8011742 <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 801173c:	2300      	movs	r3, #0
 801173e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	685b      	ldr	r3, [r3, #4]
 8011746:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 8011748:	693b      	ldr	r3, [r7, #16]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d11e      	bne.n	801178c <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011756:	f107 0110 	add.w	r1, r7, #16
 801175a:	4618      	mov	r0, r3
 801175c:	f7fd f8d0 	bl	800e900 <netconn_recv_udp_raw_netbuf_flags>
 8011760:	4603      	mov	r3, r0
 8011762:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 8011764:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d002      	beq.n	8011772 <lwip_recvfrom_udp_raw+0x7a>
      return err;
 801176c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011770:	e089      	b.n	8011886 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8011772:	693b      	ldr	r3, [r7, #16]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d106      	bne.n	8011786 <lwip_recvfrom_udp_raw+0x8e>
 8011778:	4b45      	ldr	r3, [pc, #276]	; (8011890 <lwip_recvfrom_udp_raw+0x198>)
 801177a:	f240 425e 	movw	r2, #1118	; 0x45e
 801177e:	4947      	ldr	r1, [pc, #284]	; (801189c <lwip_recvfrom_udp_raw+0x1a4>)
 8011780:	4845      	ldr	r0, [pc, #276]	; (8011898 <lwip_recvfrom_udp_raw+0x1a0>)
 8011782:	f015 fba7 	bl	8026ed4 <iprintf>
    sock->lastdata.netbuf = buf;
 8011786:	693a      	ldr	r2, [r7, #16]
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 801178c:	693b      	ldr	r3, [r7, #16]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	891b      	ldrh	r3, [r3, #8]
 8011792:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 8011794:	2300      	movs	r3, #0
 8011796:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8011798:	2300      	movs	r3, #0
 801179a:	61fb      	str	r3, [r7, #28]
 801179c:	e029      	b.n	80117f2 <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 801179e:	8b3a      	ldrh	r2, [r7, #24]
 80117a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80117a2:	1ad3      	subs	r3, r2, r3
 80117a4:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	689a      	ldr	r2, [r3, #8]
 80117aa:	69fb      	ldr	r3, [r7, #28]
 80117ac:	00db      	lsls	r3, r3, #3
 80117ae:	4413      	add	r3, r2
 80117b0:	685a      	ldr	r2, [r3, #4]
 80117b2:	8afb      	ldrh	r3, [r7, #22]
 80117b4:	429a      	cmp	r2, r3
 80117b6:	d902      	bls.n	80117be <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 80117b8:	8afb      	ldrh	r3, [r7, #22]
 80117ba:	84bb      	strh	r3, [r7, #36]	; 0x24
 80117bc:	e006      	b.n	80117cc <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	689a      	ldr	r2, [r3, #8]
 80117c2:	69fb      	ldr	r3, [r7, #28]
 80117c4:	00db      	lsls	r3, r3, #3
 80117c6:	4413      	add	r3, r2
 80117c8:	685b      	ldr	r3, [r3, #4]
 80117ca:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 80117cc:	693b      	ldr	r3, [r7, #16]
 80117ce:	6818      	ldr	r0, [r3, #0]
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	689a      	ldr	r2, [r3, #8]
 80117d4:	69fb      	ldr	r3, [r7, #28]
 80117d6:	00db      	lsls	r3, r3, #3
 80117d8:	4413      	add	r3, r2
 80117da:	6819      	ldr	r1, [r3, #0]
 80117dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80117de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80117e0:	f004 fb4e 	bl	8015e80 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 80117e4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80117e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80117e8:	4413      	add	r3, r2
 80117ea:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 80117ec:	69fb      	ldr	r3, [r7, #28]
 80117ee:	3301      	adds	r3, #1
 80117f0:	61fb      	str	r3, [r7, #28]
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	68db      	ldr	r3, [r3, #12]
 80117f6:	69fa      	ldr	r2, [r7, #28]
 80117f8:	429a      	cmp	r2, r3
 80117fa:	da03      	bge.n	8011804 <lwip_recvfrom_udp_raw+0x10c>
 80117fc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80117fe:	8b3b      	ldrh	r3, [r7, #24]
 8011800:	429a      	cmp	r2, r3
 8011802:	d3cc      	bcc.n	801179e <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d01a      	beq.n	8011842 <lwip_recvfrom_udp_raw+0x14a>
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	685b      	ldr	r3, [r3, #4]
 8011810:	2b00      	cmp	r3, #0
 8011812:	d016      	beq.n	8011842 <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d012      	beq.n	8011842 <lwip_recvfrom_udp_raw+0x14a>
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	685b      	ldr	r3, [r3, #4]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d00e      	beq.n	8011842 <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	6818      	ldr	r0, [r3, #0]
 8011828:	693b      	ldr	r3, [r7, #16]
 801182a:	f103 0108 	add.w	r1, r3, #8
 801182e:	693b      	ldr	r3, [r7, #16]
 8011830:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	3304      	adds	r3, #4
 801183a:	9300      	str	r3, [sp, #0]
 801183c:	4623      	mov	r3, r4
 801183e:	f7ff febb 	bl	80115b8 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	2200      	movs	r2, #0
 8011846:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	691b      	ldr	r3, [r3, #16]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d007      	beq.n	8011860 <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 8011850:	2300      	movs	r3, #0
 8011852:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 8011854:	7d7b      	ldrb	r3, [r7, #21]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d102      	bne.n	8011860 <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	2200      	movs	r2, #0
 801185e:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 8011860:	68bb      	ldr	r3, [r7, #8]
 8011862:	f003 0301 	and.w	r3, r3, #1
 8011866:	2b00      	cmp	r3, #0
 8011868:	d106      	bne.n	8011878 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	2200      	movs	r2, #0
 801186e:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 8011870:	693b      	ldr	r3, [r7, #16]
 8011872:	4618      	mov	r0, r3
 8011874:	f7ff f8ce 	bl	8010a14 <netbuf_delete>
  }
  if (datagram_len) {
 8011878:	683b      	ldr	r3, [r7, #0]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d002      	beq.n	8011884 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 801187e:	683b      	ldr	r3, [r7, #0]
 8011880:	8b3a      	ldrh	r2, [r7, #24]
 8011882:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 8011884:	2300      	movs	r3, #0
}
 8011886:	4618      	mov	r0, r3
 8011888:	372c      	adds	r7, #44	; 0x2c
 801188a:	46bd      	mov	sp, r7
 801188c:	bd90      	pop	{r4, r7, pc}
 801188e:	bf00      	nop
 8011890:	0802af34 	.word	0x0802af34
 8011894:	0802b0d8 	.word	0x0802b0d8
 8011898:	0802af88 	.word	0x0802af88
 801189c:	0802b104 	.word	0x0802b104

080118a0 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b096      	sub	sp, #88	; 0x58
 80118a4:	af02      	add	r7, sp, #8
 80118a6:	60f8      	str	r0, [r7, #12]
 80118a8:	60b9      	str	r1, [r7, #8]
 80118aa:	607a      	str	r2, [r7, #4]
 80118ac:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 80118ae:	68f8      	ldr	r0, [r7, #12]
 80118b0:	f7ff f9d8 	bl	8010c64 <get_socket>
 80118b4:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 80118b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d102      	bne.n	80118c2 <lwip_recvfrom+0x22>
    return -1;
 80118bc:	f04f 33ff 	mov.w	r3, #4294967295
 80118c0:	e078      	b.n	80119b4 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 80118c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	781b      	ldrb	r3, [r3, #0]
 80118c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80118cc:	2b10      	cmp	r3, #16
 80118ce:	d112      	bne.n	80118f6 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 80118d0:	683b      	ldr	r3, [r7, #0]
 80118d2:	687a      	ldr	r2, [r7, #4]
 80118d4:	68b9      	ldr	r1, [r7, #8]
 80118d6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80118d8:	f7ff fd5e 	bl	8011398 <lwip_recv_tcp>
 80118dc:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 80118de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118e0:	9301      	str	r3, [sp, #4]
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	9300      	str	r3, [sp, #0]
 80118e6:	4b35      	ldr	r3, [pc, #212]	; (80119bc <lwip_recvfrom+0x11c>)
 80118e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80118ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80118ec:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80118ee:	f7ff fed1 	bl	8011694 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 80118f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118f4:	e05e      	b.n	80119b4 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 80118f6:	2300      	movs	r3, #0
 80118f8:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 80118fa:	68bb      	ldr	r3, [r7, #8]
 80118fc:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 8011902:	2300      	movs	r3, #0
 8011904:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 8011906:	2300      	movs	r3, #0
 8011908:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 801190a:	2300      	movs	r3, #0
 801190c:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 801190e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011912:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 8011914:	2301      	movs	r3, #1
 8011916:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 8011918:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801191a:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 801191c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801191e:	2b00      	cmp	r3, #0
 8011920:	d002      	beq.n	8011928 <lwip_recvfrom+0x88>
 8011922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	e000      	b.n	801192a <lwip_recvfrom+0x8a>
 8011928:	2300      	movs	r3, #0
 801192a:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 801192c:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 8011930:	f107 0214 	add.w	r2, r7, #20
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	9300      	str	r3, [sp, #0]
 8011938:	460b      	mov	r3, r1
 801193a:	6839      	ldr	r1, [r7, #0]
 801193c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801193e:	f7ff fedb 	bl	80116f8 <lwip_recvfrom_udp_raw>
 8011942:	4603      	mov	r3, r0
 8011944:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 8011948:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 801194c:	2b00      	cmp	r3, #0
 801194e:	d00e      	beq.n	801196e <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 8011950:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8011954:	4618      	mov	r0, r3
 8011956:	f7ff f83f 	bl	80109d8 <err_to_errno>
 801195a:	63f8      	str	r0, [r7, #60]	; 0x3c
 801195c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801195e:	2b00      	cmp	r3, #0
 8011960:	d002      	beq.n	8011968 <lwip_recvfrom+0xc8>
 8011962:	4a17      	ldr	r2, [pc, #92]	; (80119c0 <lwip_recvfrom+0x120>)
 8011964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011966:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 8011968:	f04f 33ff 	mov.w	r3, #4294967295
 801196c:	e022      	b.n	80119b4 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 801196e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011970:	461a      	mov	r2, r3
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	4293      	cmp	r3, r2
 8011976:	bf28      	it	cs
 8011978:	4613      	movcs	r3, r2
 801197a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801197e:	4293      	cmp	r3, r2
 8011980:	d206      	bcs.n	8011990 <lwip_recvfrom+0xf0>
 8011982:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011984:	461a      	mov	r2, r3
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	4293      	cmp	r3, r2
 801198a:	bf28      	it	cs
 801198c:	4613      	movcs	r3, r2
 801198e:	e001      	b.n	8011994 <lwip_recvfrom+0xf4>
 8011990:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011994:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 8011996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011998:	2b00      	cmp	r3, #0
 801199a:	d002      	beq.n	80119a2 <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 801199c:	69ba      	ldr	r2, [r7, #24]
 801199e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80119a0:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 80119a2:	2300      	movs	r3, #0
 80119a4:	643b      	str	r3, [r7, #64]	; 0x40
 80119a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d002      	beq.n	80119b2 <lwip_recvfrom+0x112>
 80119ac:	4a04      	ldr	r2, [pc, #16]	; (80119c0 <lwip_recvfrom+0x120>)
 80119ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80119b0:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 80119b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80119b4:	4618      	mov	r0, r3
 80119b6:	3750      	adds	r7, #80	; 0x50
 80119b8:	46bd      	mov	sp, r7
 80119ba:	bd80      	pop	{r7, pc}
 80119bc:	0802b110 	.word	0x0802b110
 80119c0:	240086b8 	.word	0x240086b8

080119c4 <lwip_recv>:
  return lwip_recvmsg(s, &msg, 0);
}

ssize_t
lwip_recv(int s, void *mem, size_t len, int flags)
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b086      	sub	sp, #24
 80119c8:	af02      	add	r7, sp, #8
 80119ca:	60f8      	str	r0, [r7, #12]
 80119cc:	60b9      	str	r1, [r7, #8]
 80119ce:	607a      	str	r2, [r7, #4]
 80119d0:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 80119d2:	2300      	movs	r3, #0
 80119d4:	9301      	str	r3, [sp, #4]
 80119d6:	2300      	movs	r3, #0
 80119d8:	9300      	str	r3, [sp, #0]
 80119da:	683b      	ldr	r3, [r7, #0]
 80119dc:	687a      	ldr	r2, [r7, #4]
 80119de:	68b9      	ldr	r1, [r7, #8]
 80119e0:	68f8      	ldr	r0, [r7, #12]
 80119e2:	f7ff ff5d 	bl	80118a0 <lwip_recvfrom>
 80119e6:	4603      	mov	r3, r0
}
 80119e8:	4618      	mov	r0, r3
 80119ea:	3710      	adds	r7, #16
 80119ec:	46bd      	mov	sp, r7
 80119ee:	bd80      	pop	{r7, pc}

080119f0 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b08a      	sub	sp, #40	; 0x28
 80119f4:	af02      	add	r7, sp, #8
 80119f6:	60f8      	str	r0, [r7, #12]
 80119f8:	60b9      	str	r1, [r7, #8]
 80119fa:	607a      	str	r2, [r7, #4]
 80119fc:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 80119fe:	68f8      	ldr	r0, [r7, #12]
 8011a00:	f7ff f930 	bl	8010c64 <get_socket>
 8011a04:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 8011a06:	69fb      	ldr	r3, [r7, #28]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d102      	bne.n	8011a12 <lwip_send+0x22>
    return -1;
 8011a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8011a10:	e046      	b.n	8011aa0 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8011a12:	69fb      	ldr	r3, [r7, #28]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	781b      	ldrb	r3, [r3, #0]
 8011a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011a1c:	2b10      	cmp	r3, #16
 8011a1e:	d00b      	beq.n	8011a38 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 8011a20:	2300      	movs	r3, #0
 8011a22:	9301      	str	r3, [sp, #4]
 8011a24:	2300      	movs	r3, #0
 8011a26:	9300      	str	r3, [sp, #0]
 8011a28:	683b      	ldr	r3, [r7, #0]
 8011a2a:	687a      	ldr	r2, [r7, #4]
 8011a2c:	68b9      	ldr	r1, [r7, #8]
 8011a2e:	68f8      	ldr	r0, [r7, #12]
 8011a30:	f000 f83c 	bl	8011aac <lwip_sendto>
 8011a34:	4603      	mov	r3, r0
 8011a36:	e033      	b.n	8011aa0 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8011a38:	683b      	ldr	r3, [r7, #0]
 8011a3a:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d001      	beq.n	8011a46 <lwip_send+0x56>
 8011a42:	2203      	movs	r2, #3
 8011a44:	e000      	b.n	8011a48 <lwip_send+0x58>
 8011a46:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8011a48:	683b      	ldr	r3, [r7, #0]
 8011a4a:	105b      	asrs	r3, r3, #1
 8011a4c:	b25b      	sxtb	r3, r3
 8011a4e:	f003 0304 	and.w	r3, r3, #4
 8011a52:	b25b      	sxtb	r3, r3
 8011a54:	4313      	orrs	r3, r2
 8011a56:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 8011a58:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 8011a5e:	69fb      	ldr	r3, [r7, #28]
 8011a60:	6818      	ldr	r0, [r3, #0]
 8011a62:	7efa      	ldrb	r2, [r7, #27]
 8011a64:	f107 0310 	add.w	r3, r7, #16
 8011a68:	9300      	str	r3, [sp, #0]
 8011a6a:	4613      	mov	r3, r2
 8011a6c:	687a      	ldr	r2, [r7, #4]
 8011a6e:	68b9      	ldr	r1, [r7, #8]
 8011a70:	f7fc ffa0 	bl	800e9b4 <netconn_write_partly>
 8011a74:	4603      	mov	r3, r0
 8011a76:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 8011a78:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	f7fe ffab 	bl	80109d8 <err_to_errno>
 8011a82:	6178      	str	r0, [r7, #20]
 8011a84:	697b      	ldr	r3, [r7, #20]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d002      	beq.n	8011a90 <lwip_send+0xa0>
 8011a8a:	4a07      	ldr	r2, [pc, #28]	; (8011aa8 <lwip_send+0xb8>)
 8011a8c:	697b      	ldr	r3, [r7, #20]
 8011a8e:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 8011a90:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d101      	bne.n	8011a9c <lwip_send+0xac>
 8011a98:	693b      	ldr	r3, [r7, #16]
 8011a9a:	e001      	b.n	8011aa0 <lwip_send+0xb0>
 8011a9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	3720      	adds	r7, #32
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	bd80      	pop	{r7, pc}
 8011aa8:	240086b8 	.word	0x240086b8

08011aac <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 8011aac:	b580      	push	{r7, lr}
 8011aae:	b08e      	sub	sp, #56	; 0x38
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	60f8      	str	r0, [r7, #12]
 8011ab4:	60b9      	str	r1, [r7, #8]
 8011ab6:	607a      	str	r2, [r7, #4]
 8011ab8:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 8011aba:	68f8      	ldr	r0, [r7, #12]
 8011abc:	f7ff f8d2 	bl	8010c64 <get_socket>
 8011ac0:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 8011ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d102      	bne.n	8011ace <lwip_sendto+0x22>
    return -1;
 8011ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8011acc:	e093      	b.n	8011bf6 <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8011ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	781b      	ldrb	r3, [r3, #0]
 8011ad4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011ad8:	2b10      	cmp	r3, #16
 8011ada:	d107      	bne.n	8011aec <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 8011adc:	683b      	ldr	r3, [r7, #0]
 8011ade:	687a      	ldr	r2, [r7, #4]
 8011ae0:	68b9      	ldr	r1, [r7, #8]
 8011ae2:	68f8      	ldr	r0, [r7, #12]
 8011ae4:	f7ff ff84 	bl	80119f0 <lwip_send>
 8011ae8:	4603      	mov	r3, r0
 8011aea:	e084      	b.n	8011bf6 <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011af2:	d30a      	bcc.n	8011b0a <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 8011af4:	235a      	movs	r3, #90	; 0x5a
 8011af6:	623b      	str	r3, [r7, #32]
 8011af8:	6a3b      	ldr	r3, [r7, #32]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d002      	beq.n	8011b04 <lwip_sendto+0x58>
 8011afe:	4a40      	ldr	r2, [pc, #256]	; (8011c00 <lwip_sendto+0x154>)
 8011b00:	6a3b      	ldr	r3, [r7, #32]
 8011b02:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8011b04:	f04f 33ff 	mov.w	r3, #4294967295
 8011b08:	e075      	b.n	8011bf6 <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 8011b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d102      	bne.n	8011b1a <lwip_sendto+0x6e>
 8011b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d023      	beq.n	8011b62 <lwip_sendto+0xb6>
 8011b1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b1c:	2b10      	cmp	r3, #16
 8011b1e:	d10b      	bne.n	8011b38 <lwip_sendto+0x8c>
 8011b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d008      	beq.n	8011b38 <lwip_sendto+0x8c>
 8011b26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b28:	785b      	ldrb	r3, [r3, #1]
 8011b2a:	2b02      	cmp	r3, #2
 8011b2c:	d104      	bne.n	8011b38 <lwip_sendto+0x8c>
 8011b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b30:	f003 0303 	and.w	r3, r3, #3
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d014      	beq.n	8011b62 <lwip_sendto+0xb6>
 8011b38:	4b32      	ldr	r3, [pc, #200]	; (8011c04 <lwip_sendto+0x158>)
 8011b3a:	f240 6252 	movw	r2, #1618	; 0x652
 8011b3e:	4932      	ldr	r1, [pc, #200]	; (8011c08 <lwip_sendto+0x15c>)
 8011b40:	4832      	ldr	r0, [pc, #200]	; (8011c0c <lwip_sendto+0x160>)
 8011b42:	f015 f9c7 	bl	8026ed4 <iprintf>
 8011b46:	f06f 000f 	mvn.w	r0, #15
 8011b4a:	f7fe ff45 	bl	80109d8 <err_to_errno>
 8011b4e:	62b8      	str	r0, [r7, #40]	; 0x28
 8011b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d002      	beq.n	8011b5c <lwip_sendto+0xb0>
 8011b56:	4a2a      	ldr	r2, [pc, #168]	; (8011c00 <lwip_sendto+0x154>)
 8011b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b5a:	6013      	str	r3, [r2, #0]
 8011b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8011b60:	e049      	b.n	8011bf6 <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 8011b62:	2300      	movs	r3, #0
 8011b64:	617b      	str	r3, [r7, #20]
 8011b66:	697b      	ldr	r3, [r7, #20]
 8011b68:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 8011b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d00a      	beq.n	8011b86 <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 8011b70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b72:	685b      	ldr	r3, [r3, #4]
 8011b74:	61bb      	str	r3, [r7, #24]
 8011b76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b78:	885b      	ldrh	r3, [r3, #2]
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	f001 faa8 	bl	80130d0 <lwip_htons>
 8011b80:	4603      	mov	r3, r0
 8011b82:	86bb      	strh	r3, [r7, #52]	; 0x34
 8011b84:	e003      	b.n	8011b8e <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 8011b86:	2300      	movs	r3, #0
 8011b88:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 8011b8e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011b90:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 8011b92:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011b94:	f107 0310 	add.w	r3, r7, #16
 8011b98:	68b9      	ldr	r1, [r7, #8]
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	f7fe ff82 	bl	8010aa4 <netbuf_ref>
 8011ba0:	4603      	mov	r3, r0
 8011ba2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 8011ba6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d10a      	bne.n	8011bc4 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 8011bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	f107 0210 	add.w	r2, r7, #16
 8011bb6:	4611      	mov	r1, r2
 8011bb8:	4618      	mov	r0, r3
 8011bba:	f7fc fecd 	bl	800e958 <netconn_send>
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 8011bc4:	f107 0310 	add.w	r3, r7, #16
 8011bc8:	4618      	mov	r0, r3
 8011bca:	f7fe ff43 	bl	8010a54 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 8011bce:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	f7fe ff00 	bl	80109d8 <err_to_errno>
 8011bd8:	6278      	str	r0, [r7, #36]	; 0x24
 8011bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d002      	beq.n	8011be6 <lwip_sendto+0x13a>
 8011be0:	4a07      	ldr	r2, [pc, #28]	; (8011c00 <lwip_sendto+0x154>)
 8011be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011be4:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 8011be6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d101      	bne.n	8011bf2 <lwip_sendto+0x146>
 8011bee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011bf0:	e001      	b.n	8011bf6 <lwip_sendto+0x14a>
 8011bf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	3738      	adds	r7, #56	; 0x38
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	bd80      	pop	{r7, pc}
 8011bfe:	bf00      	nop
 8011c00:	240086b8 	.word	0x240086b8
 8011c04:	0802af34 	.word	0x0802af34
 8011c08:	0802b214 	.word	0x0802b214
 8011c0c:	0802af88 	.word	0x0802af88

08011c10 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b086      	sub	sp, #24
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	60f8      	str	r0, [r7, #12]
 8011c18:	60b9      	str	r1, [r7, #8]
 8011c1a:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 8011c1c:	68bb      	ldr	r3, [r7, #8]
 8011c1e:	2b03      	cmp	r3, #3
 8011c20:	d009      	beq.n	8011c36 <lwip_socket+0x26>
 8011c22:	68bb      	ldr	r3, [r7, #8]
 8011c24:	2b03      	cmp	r3, #3
 8011c26:	dc23      	bgt.n	8011c70 <lwip_socket+0x60>
 8011c28:	68bb      	ldr	r3, [r7, #8]
 8011c2a:	2b01      	cmp	r3, #1
 8011c2c:	d019      	beq.n	8011c62 <lwip_socket+0x52>
 8011c2e:	68bb      	ldr	r3, [r7, #8]
 8011c30:	2b02      	cmp	r3, #2
 8011c32:	d009      	beq.n	8011c48 <lwip_socket+0x38>
 8011c34:	e01c      	b.n	8011c70 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	b2db      	uxtb	r3, r3
 8011c3a:	4a22      	ldr	r2, [pc, #136]	; (8011cc4 <lwip_socket+0xb4>)
 8011c3c:	4619      	mov	r1, r3
 8011c3e:	2040      	movs	r0, #64	; 0x40
 8011c40:	f7fc fa2a 	bl	800e098 <netconn_new_with_proto_and_callback>
 8011c44:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 8011c46:	e019      	b.n	8011c7c <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	2b88      	cmp	r3, #136	; 0x88
 8011c4c:	d101      	bne.n	8011c52 <lwip_socket+0x42>
 8011c4e:	2321      	movs	r3, #33	; 0x21
 8011c50:	e000      	b.n	8011c54 <lwip_socket+0x44>
 8011c52:	2320      	movs	r3, #32
 8011c54:	4a1b      	ldr	r2, [pc, #108]	; (8011cc4 <lwip_socket+0xb4>)
 8011c56:	2100      	movs	r1, #0
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f7fc fa1d 	bl	800e098 <netconn_new_with_proto_and_callback>
 8011c5e:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8011c60:	e00c      	b.n	8011c7c <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 8011c62:	4a18      	ldr	r2, [pc, #96]	; (8011cc4 <lwip_socket+0xb4>)
 8011c64:	2100      	movs	r1, #0
 8011c66:	2010      	movs	r0, #16
 8011c68:	f7fc fa16 	bl	800e098 <netconn_new_with_proto_and_callback>
 8011c6c:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 8011c6e:	e005      	b.n	8011c7c <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 8011c70:	4b15      	ldr	r3, [pc, #84]	; (8011cc8 <lwip_socket+0xb8>)
 8011c72:	2216      	movs	r2, #22
 8011c74:	601a      	str	r2, [r3, #0]
      return -1;
 8011c76:	f04f 33ff 	mov.w	r3, #4294967295
 8011c7a:	e01e      	b.n	8011cba <lwip_socket+0xaa>
  }

  if (!conn) {
 8011c7c:	697b      	ldr	r3, [r7, #20]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d105      	bne.n	8011c8e <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 8011c82:	4b11      	ldr	r3, [pc, #68]	; (8011cc8 <lwip_socket+0xb8>)
 8011c84:	2269      	movs	r2, #105	; 0x69
 8011c86:	601a      	str	r2, [r3, #0]
    return -1;
 8011c88:	f04f 33ff 	mov.w	r3, #4294967295
 8011c8c:	e015      	b.n	8011cba <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 8011c8e:	2100      	movs	r1, #0
 8011c90:	6978      	ldr	r0, [r7, #20]
 8011c92:	f7fe ffff 	bl	8010c94 <alloc_socket>
 8011c96:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 8011c98:	693b      	ldr	r3, [r7, #16]
 8011c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c9e:	d108      	bne.n	8011cb2 <lwip_socket+0xa2>
    netconn_delete(conn);
 8011ca0:	6978      	ldr	r0, [r7, #20]
 8011ca2:	f7fc fa97 	bl	800e1d4 <netconn_delete>
    set_errno(ENFILE);
 8011ca6:	4b08      	ldr	r3, [pc, #32]	; (8011cc8 <lwip_socket+0xb8>)
 8011ca8:	2217      	movs	r2, #23
 8011caa:	601a      	str	r2, [r3, #0]
    return -1;
 8011cac:	f04f 33ff 	mov.w	r3, #4294967295
 8011cb0:	e003      	b.n	8011cba <lwip_socket+0xaa>
  }
  conn->socket = i;
 8011cb2:	697b      	ldr	r3, [r7, #20]
 8011cb4:	693a      	ldr	r2, [r7, #16]
 8011cb6:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 8011cb8:	693b      	ldr	r3, [r7, #16]
}
 8011cba:	4618      	mov	r0, r3
 8011cbc:	3718      	adds	r7, #24
 8011cbe:	46bd      	mov	sp, r7
 8011cc0:	bd80      	pop	{r7, pc}
 8011cc2:	bf00      	nop
 8011cc4:	0801247d 	.word	0x0801247d
 8011cc8:	240086b8 	.word	0x240086b8

08011ccc <lwip_link_select_cb>:

#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
/* Add select_cb to select_cb_list. */
static void
lwip_link_select_cb(struct lwip_select_cb *select_cb)
{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b082      	sub	sp, #8
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	6078      	str	r0, [r7, #4]
  LWIP_SOCKET_SELECT_DECL_PROTECT(lev);

  /* Protect the select_cb_list */
  LWIP_SOCKET_SELECT_PROTECT(lev);
 8011cd4:	480c      	ldr	r0, [pc, #48]	; (8011d08 <lwip_link_select_cb+0x3c>)
 8011cd6:	f010 f885 	bl	8021de4 <sys_mutex_lock>

  /* Put this select_cb on top of list */
  select_cb->next = select_cb_list;
 8011cda:	4b0c      	ldr	r3, [pc, #48]	; (8011d0c <lwip_link_select_cb+0x40>)
 8011cdc:	681a      	ldr	r2, [r3, #0]
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	601a      	str	r2, [r3, #0]
  if (select_cb_list != NULL) {
 8011ce2:	4b0a      	ldr	r3, [pc, #40]	; (8011d0c <lwip_link_select_cb+0x40>)
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d003      	beq.n	8011cf2 <lwip_link_select_cb+0x26>
    select_cb_list->prev = select_cb;
 8011cea:	4b08      	ldr	r3, [pc, #32]	; (8011d0c <lwip_link_select_cb+0x40>)
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	687a      	ldr	r2, [r7, #4]
 8011cf0:	605a      	str	r2, [r3, #4]
  }
  select_cb_list = select_cb;
 8011cf2:	4a06      	ldr	r2, [pc, #24]	; (8011d0c <lwip_link_select_cb+0x40>)
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	6013      	str	r3, [r2, #0]
  /* Increasing this counter tells select_check_waiters that the list has changed. */
  select_cb_ctr++;
#endif

  /* Now we can safely unprotect */
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 8011cf8:	4803      	ldr	r0, [pc, #12]	; (8011d08 <lwip_link_select_cb+0x3c>)
 8011cfa:	f010 f882 	bl	8021e02 <sys_mutex_unlock>
}
 8011cfe:	bf00      	nop
 8011d00:	3708      	adds	r7, #8
 8011d02:	46bd      	mov	sp, r7
 8011d04:	bd80      	pop	{r7, pc}
 8011d06:	bf00      	nop
 8011d08:	240053fc 	.word	0x240053fc
 8011d0c:	24004a8c 	.word	0x24004a8c

08011d10 <lwip_unlink_select_cb>:

/* Remove select_cb from select_cb_list. */
static void
lwip_unlink_select_cb(struct lwip_select_cb *select_cb)
{
 8011d10:	b580      	push	{r7, lr}
 8011d12:	b082      	sub	sp, #8
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	6078      	str	r0, [r7, #4]
  LWIP_SOCKET_SELECT_DECL_PROTECT(lev);

  /* Take us off the list */
  LWIP_SOCKET_SELECT_PROTECT(lev);
 8011d18:	481b      	ldr	r0, [pc, #108]	; (8011d88 <lwip_unlink_select_cb+0x78>)
 8011d1a:	f010 f863 	bl	8021de4 <sys_mutex_lock>
  if (select_cb->next != NULL) {
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d004      	beq.n	8011d30 <lwip_unlink_select_cb+0x20>
    select_cb->next->prev = select_cb->prev;
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	687a      	ldr	r2, [r7, #4]
 8011d2c:	6852      	ldr	r2, [r2, #4]
 8011d2e:	605a      	str	r2, [r3, #4]
  }
  if (select_cb_list == select_cb) {
 8011d30:	4b16      	ldr	r3, [pc, #88]	; (8011d8c <lwip_unlink_select_cb+0x7c>)
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	687a      	ldr	r2, [r7, #4]
 8011d36:	429a      	cmp	r2, r3
 8011d38:	d10f      	bne.n	8011d5a <lwip_unlink_select_cb+0x4a>
    LWIP_ASSERT("select_cb->prev == NULL", select_cb->prev == NULL);
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	685b      	ldr	r3, [r3, #4]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d006      	beq.n	8011d50 <lwip_unlink_select_cb+0x40>
 8011d42:	4b13      	ldr	r3, [pc, #76]	; (8011d90 <lwip_unlink_select_cb+0x80>)
 8011d44:	f240 720d 	movw	r2, #1805	; 0x70d
 8011d48:	4912      	ldr	r1, [pc, #72]	; (8011d94 <lwip_unlink_select_cb+0x84>)
 8011d4a:	4813      	ldr	r0, [pc, #76]	; (8011d98 <lwip_unlink_select_cb+0x88>)
 8011d4c:	f015 f8c2 	bl	8026ed4 <iprintf>
    select_cb_list = select_cb->next;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	4a0d      	ldr	r2, [pc, #52]	; (8011d8c <lwip_unlink_select_cb+0x7c>)
 8011d56:	6013      	str	r3, [r2, #0]
 8011d58:	e00f      	b.n	8011d7a <lwip_unlink_select_cb+0x6a>
  } else {
    LWIP_ASSERT("select_cb->prev != NULL", select_cb->prev != NULL);
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	685b      	ldr	r3, [r3, #4]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d106      	bne.n	8011d70 <lwip_unlink_select_cb+0x60>
 8011d62:	4b0b      	ldr	r3, [pc, #44]	; (8011d90 <lwip_unlink_select_cb+0x80>)
 8011d64:	f44f 62e2 	mov.w	r2, #1808	; 0x710
 8011d68:	490c      	ldr	r1, [pc, #48]	; (8011d9c <lwip_unlink_select_cb+0x8c>)
 8011d6a:	480b      	ldr	r0, [pc, #44]	; (8011d98 <lwip_unlink_select_cb+0x88>)
 8011d6c:	f015 f8b2 	bl	8026ed4 <iprintf>
    select_cb->prev->next = select_cb->next;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	685b      	ldr	r3, [r3, #4]
 8011d74:	687a      	ldr	r2, [r7, #4]
 8011d76:	6812      	ldr	r2, [r2, #0]
 8011d78:	601a      	str	r2, [r3, #0]
  }
#if !LWIP_TCPIP_CORE_LOCKING
  /* Increasing this counter tells select_check_waiters that the list has changed. */
  select_cb_ctr++;
#endif
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 8011d7a:	4803      	ldr	r0, [pc, #12]	; (8011d88 <lwip_unlink_select_cb+0x78>)
 8011d7c:	f010 f841 	bl	8021e02 <sys_mutex_unlock>
}
 8011d80:	bf00      	nop
 8011d82:	3708      	adds	r7, #8
 8011d84:	46bd      	mov	sp, r7
 8011d86:	bd80      	pop	{r7, pc}
 8011d88:	240053fc 	.word	0x240053fc
 8011d8c:	24004a8c 	.word	0x24004a8c
 8011d90:	0802af34 	.word	0x0802af34
 8011d94:	0802b234 	.word	0x0802b234
 8011d98:	0802af88 	.word	0x0802af88
 8011d9c:	0802b24c 	.word	0x0802b24c

08011da0 <lwip_selscan>:
 * @return number of sockets that had events (read/write/exception) (>= 0)
 */
static int
lwip_selscan(int maxfdp1, fd_set *readset_in, fd_set *writeset_in, fd_set *exceptset_in,
             fd_set *readset_out, fd_set *writeset_out, fd_set *exceptset_out)
{
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b098      	sub	sp, #96	; 0x60
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	60f8      	str	r0, [r7, #12]
 8011da8:	60b9      	str	r1, [r7, #8]
 8011daa:	607a      	str	r2, [r7, #4]
 8011dac:	603b      	str	r3, [r7, #0]
  int i, nready = 0;
 8011dae:	2300      	movs	r3, #0
 8011db0:	65bb      	str	r3, [r7, #88]	; 0x58
  fd_set lreadset, lwriteset, lexceptset;
  struct lwip_sock *sock;
  SYS_ARCH_DECL_PROTECT(lev);

  FD_ZERO(&lreadset);
 8011db2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011db6:	653b      	str	r3, [r7, #80]	; 0x50
 8011db8:	2300      	movs	r3, #0
 8011dba:	657b      	str	r3, [r7, #84]	; 0x54
 8011dbc:	e007      	b.n	8011dce <lwip_selscan+0x2e>
 8011dbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011dc0:	1c5a      	adds	r2, r3, #1
 8011dc2:	653a      	str	r2, [r7, #80]	; 0x50
 8011dc4:	2200      	movs	r2, #0
 8011dc6:	701a      	strb	r2, [r3, #0]
 8011dc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011dca:	3301      	adds	r3, #1
 8011dcc:	657b      	str	r3, [r7, #84]	; 0x54
 8011dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011dd0:	2b07      	cmp	r3, #7
 8011dd2:	d9f4      	bls.n	8011dbe <lwip_selscan+0x1e>
  FD_ZERO(&lwriteset);
 8011dd4:	f107 031c 	add.w	r3, r7, #28
 8011dd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8011dda:	2300      	movs	r3, #0
 8011ddc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011dde:	e007      	b.n	8011df0 <lwip_selscan+0x50>
 8011de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011de2:	1c5a      	adds	r2, r3, #1
 8011de4:	64ba      	str	r2, [r7, #72]	; 0x48
 8011de6:	2200      	movs	r2, #0
 8011de8:	701a      	strb	r2, [r3, #0]
 8011dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011dec:	3301      	adds	r3, #1
 8011dee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011df2:	2b07      	cmp	r3, #7
 8011df4:	d9f4      	bls.n	8011de0 <lwip_selscan+0x40>
  FD_ZERO(&lexceptset);
 8011df6:	f107 0314 	add.w	r3, r7, #20
 8011dfa:	643b      	str	r3, [r7, #64]	; 0x40
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	647b      	str	r3, [r7, #68]	; 0x44
 8011e00:	e007      	b.n	8011e12 <lwip_selscan+0x72>
 8011e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e04:	1c5a      	adds	r2, r3, #1
 8011e06:	643a      	str	r2, [r7, #64]	; 0x40
 8011e08:	2200      	movs	r2, #0
 8011e0a:	701a      	strb	r2, [r3, #0]
 8011e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e0e:	3301      	adds	r3, #1
 8011e10:	647b      	str	r3, [r7, #68]	; 0x44
 8011e12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e14:	2b07      	cmp	r3, #7
 8011e16:	d9f4      	bls.n	8011e02 <lwip_selscan+0x62>

  /* Go through each socket in each list to count number of sockets which
     currently match */
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 8011e18:	2300      	movs	r3, #0
 8011e1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011e1c:	e0e1      	b.n	8011fe2 <lwip_selscan+0x242>
    /* if this FD is not in the set, continue */
    if (!(readset_in && FD_ISSET(i, readset_in)) &&
 8011e1e:	68bb      	ldr	r3, [r7, #8]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d00d      	beq.n	8011e40 <lwip_selscan+0xa0>
 8011e24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011e26:	095a      	lsrs	r2, r3, #5
 8011e28:	68bb      	ldr	r3, [r7, #8]
 8011e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e2e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011e30:	f002 021f 	and.w	r2, r2, #31
 8011e34:	2101      	movs	r1, #1
 8011e36:	fa01 f202 	lsl.w	r2, r1, r2
 8011e3a:	4013      	ands	r3, r2
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d123      	bne.n	8011e88 <lwip_selscan+0xe8>
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d00d      	beq.n	8011e62 <lwip_selscan+0xc2>
        !(writeset_in && FD_ISSET(i, writeset_in)) &&
 8011e46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011e48:	095a      	lsrs	r2, r3, #5
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011e52:	f002 021f 	and.w	r2, r2, #31
 8011e56:	2101      	movs	r1, #1
 8011e58:	fa01 f202 	lsl.w	r2, r1, r2
 8011e5c:	4013      	ands	r3, r2
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d112      	bne.n	8011e88 <lwip_selscan+0xe8>
 8011e62:	683b      	ldr	r3, [r7, #0]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	f000 80b8 	beq.w	8011fda <lwip_selscan+0x23a>
        !(exceptset_in && FD_ISSET(i, exceptset_in))) {
 8011e6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011e6c:	095a      	lsrs	r2, r3, #5
 8011e6e:	683b      	ldr	r3, [r7, #0]
 8011e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011e76:	f002 021f 	and.w	r2, r2, #31
 8011e7a:	2101      	movs	r1, #1
 8011e7c:	fa01 f202 	lsl.w	r2, r1, r2
 8011e80:	4013      	ands	r3, r2
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	f000 80a9 	beq.w	8011fda <lwip_selscan+0x23a>
      continue;
    }
    /* First get the socket's status (protected)... */
    SYS_ARCH_PROTECT(lev);
 8011e88:	f00f ffee 	bl	8021e68 <sys_arch_protect>
 8011e8c:	63f8      	str	r0, [r7, #60]	; 0x3c
    sock = tryget_socket_unconn_locked(i);
 8011e8e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8011e90:	f7fe fec5 	bl	8010c1e <tryget_socket_unconn_locked>
 8011e94:	63b8      	str	r0, [r7, #56]	; 0x38
    if (sock != NULL) {
 8011e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	f000 8098 	beq.w	8011fce <lwip_selscan+0x22e>
      void *lastdata = sock->lastdata.pbuf;
 8011e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ea0:	685b      	ldr	r3, [r3, #4]
 8011ea2:	637b      	str	r3, [r7, #52]	; 0x34
      s16_t rcvevent = sock->rcvevent;
 8011ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ea6:	891b      	ldrh	r3, [r3, #8]
 8011ea8:	867b      	strh	r3, [r7, #50]	; 0x32
      u16_t sendevent = sock->sendevent;
 8011eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eac:	895b      	ldrh	r3, [r3, #10]
 8011eae:	863b      	strh	r3, [r7, #48]	; 0x30
      u16_t errevent = sock->errevent;
 8011eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eb2:	899b      	ldrh	r3, [r3, #12]
 8011eb4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      SYS_ARCH_UNPROTECT(lev);
 8011eb6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011eb8:	f00f ffe4 	bl	8021e84 <sys_arch_unprotect>

      /* ... then examine it: */
      /* See if netconn of this socket is ready for read */
      if (readset_in && FD_ISSET(i, readset_in) && ((lastdata != NULL) || (rcvevent > 0))) {
 8011ebc:	68bb      	ldr	r3, [r7, #8]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d02c      	beq.n	8011f1c <lwip_selscan+0x17c>
 8011ec2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011ec4:	095a      	lsrs	r2, r3, #5
 8011ec6:	68bb      	ldr	r3, [r7, #8]
 8011ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ecc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011ece:	f002 021f 	and.w	r2, r2, #31
 8011ed2:	2101      	movs	r1, #1
 8011ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8011ed8:	4013      	ands	r3, r2
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d01e      	beq.n	8011f1c <lwip_selscan+0x17c>
 8011ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d103      	bne.n	8011eec <lwip_selscan+0x14c>
 8011ee4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	dd17      	ble.n	8011f1c <lwip_selscan+0x17c>
        FD_SET(i, &lreadset);
 8011eec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011eee:	095a      	lsrs	r2, r3, #5
 8011ef0:	0093      	lsls	r3, r2, #2
 8011ef2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8011ef6:	440b      	add	r3, r1
 8011ef8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8011efc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8011efe:	f001 011f 	and.w	r1, r1, #31
 8011f02:	2001      	movs	r0, #1
 8011f04:	fa00 f101 	lsl.w	r1, r0, r1
 8011f08:	4319      	orrs	r1, r3
 8011f0a:	0093      	lsls	r3, r2, #2
 8011f0c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8011f10:	4413      	add	r3, r2
 8011f12:	f843 1c3c 	str.w	r1, [r3, #-60]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for reading\n", i));
        nready++;
 8011f16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011f18:	3301      	adds	r3, #1
 8011f1a:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      /* See if netconn of this socket is ready for write */
      if (writeset_in && FD_ISSET(i, writeset_in) && (sendevent != 0)) {
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d028      	beq.n	8011f74 <lwip_selscan+0x1d4>
 8011f22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011f24:	095a      	lsrs	r2, r3, #5
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011f2e:	f002 021f 	and.w	r2, r2, #31
 8011f32:	2101      	movs	r1, #1
 8011f34:	fa01 f202 	lsl.w	r2, r1, r2
 8011f38:	4013      	ands	r3, r2
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d01a      	beq.n	8011f74 <lwip_selscan+0x1d4>
 8011f3e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d017      	beq.n	8011f74 <lwip_selscan+0x1d4>
        FD_SET(i, &lwriteset);
 8011f44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011f46:	095a      	lsrs	r2, r3, #5
 8011f48:	0093      	lsls	r3, r2, #2
 8011f4a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8011f4e:	440b      	add	r3, r1
 8011f50:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011f54:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8011f56:	f001 011f 	and.w	r1, r1, #31
 8011f5a:	2001      	movs	r0, #1
 8011f5c:	fa00 f101 	lsl.w	r1, r0, r1
 8011f60:	4319      	orrs	r1, r3
 8011f62:	0093      	lsls	r3, r2, #2
 8011f64:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8011f68:	4413      	add	r3, r2
 8011f6a:	f843 1c44 	str.w	r1, [r3, #-68]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for writing\n", i));
        nready++;
 8011f6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011f70:	3301      	adds	r3, #1
 8011f72:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      /* See if netconn of this socket had an error */
      if (exceptset_in && FD_ISSET(i, exceptset_in) && (errevent != 0)) {
 8011f74:	683b      	ldr	r3, [r7, #0]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d030      	beq.n	8011fdc <lwip_selscan+0x23c>
 8011f7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011f7c:	095a      	lsrs	r2, r3, #5
 8011f7e:	683b      	ldr	r3, [r7, #0]
 8011f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011f86:	f002 021f 	and.w	r2, r2, #31
 8011f8a:	2101      	movs	r1, #1
 8011f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8011f90:	4013      	ands	r3, r2
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d022      	beq.n	8011fdc <lwip_selscan+0x23c>
 8011f96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d01f      	beq.n	8011fdc <lwip_selscan+0x23c>
        FD_SET(i, &lexceptset);
 8011f9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011f9e:	095a      	lsrs	r2, r3, #5
 8011fa0:	0093      	lsls	r3, r2, #2
 8011fa2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8011fa6:	440b      	add	r3, r1
 8011fa8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8011fac:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8011fae:	f001 011f 	and.w	r1, r1, #31
 8011fb2:	2001      	movs	r0, #1
 8011fb4:	fa00 f101 	lsl.w	r1, r0, r1
 8011fb8:	4319      	orrs	r1, r3
 8011fba:	0093      	lsls	r3, r2, #2
 8011fbc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8011fc0:	4413      	add	r3, r2
 8011fc2:	f843 1c4c 	str.w	r1, [r3, #-76]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for exception\n", i));
        nready++;
 8011fc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011fc8:	3301      	adds	r3, #1
 8011fca:	65bb      	str	r3, [r7, #88]	; 0x58
 8011fcc:	e006      	b.n	8011fdc <lwip_selscan+0x23c>
      }
      done_socket(sock);
    } else {
      SYS_ARCH_UNPROTECT(lev);
 8011fce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011fd0:	f00f ff58 	bl	8021e84 <sys_arch_unprotect>
      /* no a valid open socket */
      return -1;
 8011fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8011fd8:	e02b      	b.n	8012032 <lwip_selscan+0x292>
      continue;
 8011fda:	bf00      	nop
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 8011fdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011fde:	3301      	adds	r3, #1
 8011fe0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011fe2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	429a      	cmp	r2, r3
 8011fe8:	f6ff af19 	blt.w	8011e1e <lwip_selscan+0x7e>
    }
  }
  /* copy local sets to the ones provided as arguments */
  *readset_out = lreadset;
 8011fec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011fee:	461a      	mov	r2, r3
 8011ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011ff4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011ff8:	e882 0003 	stmia.w	r2, {r0, r1}
  *writeset_out = lwriteset;
 8011ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011ffe:	461a      	mov	r2, r3
 8012000:	f107 031c 	add.w	r3, r7, #28
 8012004:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012008:	e882 0003 	stmia.w	r2, {r0, r1}
  *exceptset_out = lexceptset;
 801200c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801200e:	461a      	mov	r2, r3
 8012010:	f107 0314 	add.w	r3, r7, #20
 8012014:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012018:	e882 0003 	stmia.w	r2, {r0, r1}

  LWIP_ASSERT("nready >= 0", nready >= 0);
 801201c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801201e:	2b00      	cmp	r3, #0
 8012020:	da06      	bge.n	8012030 <lwip_selscan+0x290>
 8012022:	4b06      	ldr	r3, [pc, #24]	; (801203c <lwip_selscan+0x29c>)
 8012024:	f240 7269 	movw	r2, #1897	; 0x769
 8012028:	4905      	ldr	r1, [pc, #20]	; (8012040 <lwip_selscan+0x2a0>)
 801202a:	4806      	ldr	r0, [pc, #24]	; (8012044 <lwip_selscan+0x2a4>)
 801202c:	f014 ff52 	bl	8026ed4 <iprintf>
  return nready;
 8012030:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 8012032:	4618      	mov	r0, r3
 8012034:	3760      	adds	r7, #96	; 0x60
 8012036:	46bd      	mov	sp, r7
 8012038:	bd80      	pop	{r7, pc}
 801203a:	bf00      	nop
 801203c:	0802af34 	.word	0x0802af34
 8012040:	0802b264 	.word	0x0802b264
 8012044:	0802af88 	.word	0x0802af88

08012048 <lwip_select>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

int
lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,
            struct timeval *timeout)
{
 8012048:	b580      	push	{r7, lr}
 801204a:	b0a0      	sub	sp, #128	; 0x80
 801204c:	af04      	add	r7, sp, #16
 801204e:	60f8      	str	r0, [r7, #12]
 8012050:	60b9      	str	r1, [r7, #8]
 8012052:	607a      	str	r2, [r7, #4]
 8012054:	603b      	str	r3, [r7, #0]
  u32_t waitres = 0;
 8012056:	2300      	movs	r3, #0
 8012058:	66fb      	str	r3, [r7, #108]	; 0x6c
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select(%d, %p, %p, %p, tvsec=%"S32_F" tvusec=%"S32_F")\n",
                              maxfdp1, (void *)readset, (void *) writeset, (void *) exceptset,
                              timeout ? (s32_t)timeout->tv_sec : (s32_t) - 1,
                              timeout ? (s32_t)timeout->tv_usec : (s32_t) - 1));

  if ((maxfdp1 < 0) || (maxfdp1 > LWIP_SELECT_MAXNFDS)) {
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	2b00      	cmp	r3, #0
 801205e:	db02      	blt.n	8012066 <lwip_select+0x1e>
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	2b40      	cmp	r3, #64	; 0x40
 8012064:	dd05      	ble.n	8012072 <lwip_select+0x2a>
    set_errno(EINVAL);
 8012066:	4b84      	ldr	r3, [pc, #528]	; (8012278 <lwip_select+0x230>)
 8012068:	2216      	movs	r2, #22
 801206a:	601a      	str	r2, [r3, #0]
    return -1;
 801206c:	f04f 33ff 	mov.w	r3, #4294967295
 8012070:	e1b3      	b.n	80123da <lwip_select+0x392>

  lwip_select_inc_sockets_used(maxfdp1, readset, writeset, exceptset, &used_sockets);

  /* Go through each socket in each list to count number of sockets which
     currently match */
  nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 8012072:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012076:	9302      	str	r3, [sp, #8]
 8012078:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801207c:	9301      	str	r3, [sp, #4]
 801207e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012082:	9300      	str	r3, [sp, #0]
 8012084:	683b      	ldr	r3, [r7, #0]
 8012086:	687a      	ldr	r2, [r7, #4]
 8012088:	68b9      	ldr	r1, [r7, #8]
 801208a:	68f8      	ldr	r0, [r7, #12]
 801208c:	f7ff fe88 	bl	8011da0 <lwip_selscan>
 8012090:	66b8      	str	r0, [r7, #104]	; 0x68

  if (nready < 0) {
 8012092:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012094:	2b00      	cmp	r3, #0
 8012096:	da05      	bge.n	80120a4 <lwip_select+0x5c>
    /* one of the sockets in one of the fd_sets was invalid */
    set_errno(EBADF);
 8012098:	4b77      	ldr	r3, [pc, #476]	; (8012278 <lwip_select+0x230>)
 801209a:	2209      	movs	r2, #9
 801209c:	601a      	str	r2, [r3, #0]
    lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
    return -1;
 801209e:	f04f 33ff 	mov.w	r3, #4294967295
 80120a2:	e19a      	b.n	80123da <lwip_select+0x392>
  } else if (nready > 0) {
 80120a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	f300 8175 	bgt.w	8012396 <lwip_select+0x34e>
    /* one or more sockets are set, no need to wait */
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: nready=%d\n", nready));
  } else {
    /* If we don't have any current events, then suspend if we are supposed to */
    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
 80120ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d009      	beq.n	80120c6 <lwip_select+0x7e>
 80120b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80120b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120b8:	4313      	orrs	r3, r2
 80120ba:	d104      	bne.n	80120c6 <lwip_select+0x7e>
 80120bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80120be:	689b      	ldr	r3, [r3, #8]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	f000 8168 	beq.w	8012396 <lwip_select+0x34e>
         list is only valid while we are in this function, so it's ok
         to use local variables (unless we're running in MPU compatible
         mode). */
      API_SELECT_CB_VAR_DECLARE(select_cb);
      API_SELECT_CB_VAR_ALLOC(select_cb, set_errno(ENOMEM); lwip_select_dec_sockets_used(maxfdp1, &used_sockets); return -1);
      memset(&API_SELECT_CB_VAR_REF(select_cb), 0, sizeof(struct lwip_select_cb));
 80120c6:	f107 0310 	add.w	r3, r7, #16
 80120ca:	2224      	movs	r2, #36	; 0x24
 80120cc:	2100      	movs	r1, #0
 80120ce:	4618      	mov	r0, r3
 80120d0:	f014 f8a2 	bl	8026218 <memset>

      API_SELECT_CB_VAR_REF(select_cb).readset = readset;
 80120d4:	68bb      	ldr	r3, [r7, #8]
 80120d6:	61bb      	str	r3, [r7, #24]
      API_SELECT_CB_VAR_REF(select_cb).writeset = writeset;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	61fb      	str	r3, [r7, #28]
      API_SELECT_CB_VAR_REF(select_cb).exceptset = exceptset;
 80120dc:	683b      	ldr	r3, [r7, #0]
 80120de:	623b      	str	r3, [r7, #32]
#if LWIP_NETCONN_SEM_PER_THREAD
      API_SELECT_CB_VAR_REF(select_cb).sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD */
      if (sys_sem_new(&API_SELECT_CB_VAR_REF(select_cb).sem, 0) != ERR_OK) {
 80120e0:	f107 0310 	add.w	r3, r7, #16
 80120e4:	3320      	adds	r3, #32
 80120e6:	2100      	movs	r1, #0
 80120e8:	4618      	mov	r0, r3
 80120ea:	f00f fdc0 	bl	8021c6e <sys_sem_new>
 80120ee:	4603      	mov	r3, r0
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d005      	beq.n	8012100 <lwip_select+0xb8>
        /* failed to create semaphore */
        set_errno(ENOMEM);
 80120f4:	4b60      	ldr	r3, [pc, #384]	; (8012278 <lwip_select+0x230>)
 80120f6:	220c      	movs	r2, #12
 80120f8:	601a      	str	r2, [r3, #0]
        lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
        API_SELECT_CB_VAR_FREE(select_cb);
        return -1;
 80120fa:	f04f 33ff 	mov.w	r3, #4294967295
 80120fe:	e16c      	b.n	80123da <lwip_select+0x392>
      }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

      lwip_link_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
 8012100:	f107 0310 	add.w	r3, r7, #16
 8012104:	4618      	mov	r0, r3
 8012106:	f7ff fde1 	bl	8011ccc <lwip_link_select_cb>

      /* Increase select_waiting for each socket we are interested in */
      maxfdp2 = maxfdp1;
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	65fb      	str	r3, [r7, #92]	; 0x5c
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 801210e:	2300      	movs	r3, #0
 8012110:	663b      	str	r3, [r7, #96]	; 0x60
 8012112:	e06b      	b.n	80121ec <lwip_select+0x1a4>
        if ((readset && FD_ISSET(i, readset)) ||
 8012114:	68bb      	ldr	r3, [r7, #8]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d00d      	beq.n	8012136 <lwip_select+0xee>
 801211a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801211c:	095a      	lsrs	r2, r3, #5
 801211e:	68bb      	ldr	r3, [r7, #8]
 8012120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012124:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012126:	f002 021f 	and.w	r2, r2, #31
 801212a:	2101      	movs	r1, #1
 801212c:	fa01 f202 	lsl.w	r2, r1, r2
 8012130:	4013      	ands	r3, r2
 8012132:	2b00      	cmp	r3, #0
 8012134:	d121      	bne.n	801217a <lwip_select+0x132>
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d00d      	beq.n	8012158 <lwip_select+0x110>
            (writeset && FD_ISSET(i, writeset)) ||
 801213c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801213e:	095a      	lsrs	r2, r3, #5
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012146:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012148:	f002 021f 	and.w	r2, r2, #31
 801214c:	2101      	movs	r1, #1
 801214e:	fa01 f202 	lsl.w	r2, r1, r2
 8012152:	4013      	ands	r3, r2
 8012154:	2b00      	cmp	r3, #0
 8012156:	d110      	bne.n	801217a <lwip_select+0x132>
 8012158:	683b      	ldr	r3, [r7, #0]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d043      	beq.n	80121e6 <lwip_select+0x19e>
            (exceptset && FD_ISSET(i, exceptset))) {
 801215e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012160:	095a      	lsrs	r2, r3, #5
 8012162:	683b      	ldr	r3, [r7, #0]
 8012164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012168:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801216a:	f002 021f 	and.w	r2, r2, #31
 801216e:	2101      	movs	r1, #1
 8012170:	fa01 f202 	lsl.w	r2, r1, r2
 8012174:	4013      	ands	r3, r2
 8012176:	2b00      	cmp	r3, #0
 8012178:	d035      	beq.n	80121e6 <lwip_select+0x19e>
          struct lwip_sock *sock;
          SYS_ARCH_PROTECT(lev);
 801217a:	f00f fe75 	bl	8021e68 <sys_arch_protect>
 801217e:	65b8      	str	r0, [r7, #88]	; 0x58
          sock = tryget_socket_unconn_locked(i);
 8012180:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8012182:	f7fe fd4c 	bl	8010c1e <tryget_socket_unconn_locked>
 8012186:	6578      	str	r0, [r7, #84]	; 0x54
          if (sock != NULL) {
 8012188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801218a:	2b00      	cmp	r3, #0
 801218c:	d01f      	beq.n	80121ce <lwip_select+0x186>
            sock->select_waiting++;
 801218e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012190:	7b9b      	ldrb	r3, [r3, #14]
 8012192:	3301      	adds	r3, #1
 8012194:	b2da      	uxtb	r2, r3
 8012196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012198:	739a      	strb	r2, [r3, #14]
            if (sock->select_waiting == 0) {
 801219a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801219c:	7b9b      	ldrb	r3, [r3, #14]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d111      	bne.n	80121c6 <lwip_select+0x17e>
              /* overflow - too many threads waiting */
              sock->select_waiting--;
 80121a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80121a4:	7b9b      	ldrb	r3, [r3, #14]
 80121a6:	3b01      	subs	r3, #1
 80121a8:	b2da      	uxtb	r2, r3
 80121aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80121ac:	739a      	strb	r2, [r3, #14]
              nready = -1;
 80121ae:	f04f 33ff 	mov.w	r3, #4294967295
 80121b2:	66bb      	str	r3, [r7, #104]	; 0x68
              maxfdp2 = i;
 80121b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80121b6:	65fb      	str	r3, [r7, #92]	; 0x5c
              SYS_ARCH_UNPROTECT(lev);
 80121b8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80121ba:	f00f fe63 	bl	8021e84 <sys_arch_unprotect>
              done_socket(sock);
              set_errno(EBUSY);
 80121be:	4b2e      	ldr	r3, [pc, #184]	; (8012278 <lwip_select+0x230>)
 80121c0:	2210      	movs	r2, #16
 80121c2:	601a      	str	r2, [r3, #0]
              break;
 80121c4:	e016      	b.n	80121f4 <lwip_select+0x1ac>
            }
            SYS_ARCH_UNPROTECT(lev);
 80121c6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80121c8:	f00f fe5c 	bl	8021e84 <sys_arch_unprotect>
 80121cc:	e00b      	b.n	80121e6 <lwip_select+0x19e>
            done_socket(sock);
          } else {
            /* Not a valid socket */
            nready = -1;
 80121ce:	f04f 33ff 	mov.w	r3, #4294967295
 80121d2:	66bb      	str	r3, [r7, #104]	; 0x68
            maxfdp2 = i;
 80121d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80121d6:	65fb      	str	r3, [r7, #92]	; 0x5c
            SYS_ARCH_UNPROTECT(lev);
 80121d8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80121da:	f00f fe53 	bl	8021e84 <sys_arch_unprotect>
            set_errno(EBADF);
 80121de:	4b26      	ldr	r3, [pc, #152]	; (8012278 <lwip_select+0x230>)
 80121e0:	2209      	movs	r2, #9
 80121e2:	601a      	str	r2, [r3, #0]
            break;
 80121e4:	e006      	b.n	80121f4 <lwip_select+0x1ac>
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 80121e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80121e8:	3301      	adds	r3, #1
 80121ea:	663b      	str	r3, [r7, #96]	; 0x60
 80121ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	429a      	cmp	r2, r3
 80121f2:	db8f      	blt.n	8012114 <lwip_select+0xcc>
          }
        }
      }

      if (nready >= 0) {
 80121f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	db3b      	blt.n	8012272 <lwip_select+0x22a>
        /* Call lwip_selscan again: there could have been events between
           the last scan (without us on the list) and putting us on the list! */
        nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 80121fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80121fe:	9302      	str	r3, [sp, #8]
 8012200:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012204:	9301      	str	r3, [sp, #4]
 8012206:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801220a:	9300      	str	r3, [sp, #0]
 801220c:	683b      	ldr	r3, [r7, #0]
 801220e:	687a      	ldr	r2, [r7, #4]
 8012210:	68b9      	ldr	r1, [r7, #8]
 8012212:	68f8      	ldr	r0, [r7, #12]
 8012214:	f7ff fdc4 	bl	8011da0 <lwip_selscan>
 8012218:	66b8      	str	r0, [r7, #104]	; 0x68
        if (!nready) {
 801221a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801221c:	2b00      	cmp	r3, #0
 801221e:	d128      	bne.n	8012272 <lwip_select+0x22a>
          /* Still none ready, just wait to be woken */
          if (timeout == 0) {
 8012220:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012222:	2b00      	cmp	r3, #0
 8012224:	d102      	bne.n	801222c <lwip_select+0x1e4>
            /* Wait forever */
            msectimeout = 0;
 8012226:	2300      	movs	r3, #0
 8012228:	667b      	str	r3, [r7, #100]	; 0x64
 801222a:	e01a      	b.n	8012262 <lwip_select+0x21a>
          } else {
            long msecs_long = ((timeout->tv_sec * 1000) + ((timeout->tv_usec + 500) / 1000));
 801222c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801222e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012236:	fb03 f202 	mul.w	r2, r3, r2
 801223a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801223c:	689b      	ldr	r3, [r3, #8]
 801223e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8012242:	490e      	ldr	r1, [pc, #56]	; (801227c <lwip_select+0x234>)
 8012244:	fb81 0103 	smull	r0, r1, r1, r3
 8012248:	1189      	asrs	r1, r1, #6
 801224a:	17db      	asrs	r3, r3, #31
 801224c:	1acb      	subs	r3, r1, r3
 801224e:	4413      	add	r3, r2
 8012250:	653b      	str	r3, [r7, #80]	; 0x50
            if (msecs_long <= 0) {
 8012252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012254:	2b00      	cmp	r3, #0
 8012256:	dc02      	bgt.n	801225e <lwip_select+0x216>
              /* Wait 1ms at least (0 means wait forever) */
              msectimeout = 1;
 8012258:	2301      	movs	r3, #1
 801225a:	667b      	str	r3, [r7, #100]	; 0x64
 801225c:	e001      	b.n	8012262 <lwip_select+0x21a>
            } else {
              msectimeout = (u32_t)msecs_long;
 801225e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012260:	667b      	str	r3, [r7, #100]	; 0x64
            }
          }

          waitres = sys_arch_sem_wait(SELECT_SEM_PTR(API_SELECT_CB_VAR_REF(select_cb).sem), msectimeout);
 8012262:	f107 0310 	add.w	r3, r7, #16
 8012266:	3320      	adds	r3, #32
 8012268:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801226a:	4618      	mov	r0, r3
 801226c:	f00f fd27 	bl	8021cbe <sys_arch_sem_wait>
 8012270:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif
        }
      }

      /* Decrease select_waiting for each socket we are interested in */
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 8012272:	2300      	movs	r3, #0
 8012274:	663b      	str	r3, [r7, #96]	; 0x60
 8012276:	e065      	b.n	8012344 <lwip_select+0x2fc>
 8012278:	240086b8 	.word	0x240086b8
 801227c:	10624dd3 	.word	0x10624dd3
        if ((readset && FD_ISSET(i, readset)) ||
 8012280:	68bb      	ldr	r3, [r7, #8]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d00d      	beq.n	80122a2 <lwip_select+0x25a>
 8012286:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012288:	095a      	lsrs	r2, r3, #5
 801228a:	68bb      	ldr	r3, [r7, #8]
 801228c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012290:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012292:	f002 021f 	and.w	r2, r2, #31
 8012296:	2101      	movs	r1, #1
 8012298:	fa01 f202 	lsl.w	r2, r1, r2
 801229c:	4013      	ands	r3, r2
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d121      	bne.n	80122e6 <lwip_select+0x29e>
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d00d      	beq.n	80122c4 <lwip_select+0x27c>
            (writeset && FD_ISSET(i, writeset)) ||
 80122a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80122aa:	095a      	lsrs	r2, r3, #5
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80122b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80122b4:	f002 021f 	and.w	r2, r2, #31
 80122b8:	2101      	movs	r1, #1
 80122ba:	fa01 f202 	lsl.w	r2, r1, r2
 80122be:	4013      	ands	r3, r2
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d110      	bne.n	80122e6 <lwip_select+0x29e>
 80122c4:	683b      	ldr	r3, [r7, #0]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d039      	beq.n	801233e <lwip_select+0x2f6>
            (exceptset && FD_ISSET(i, exceptset))) {
 80122ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80122cc:	095a      	lsrs	r2, r3, #5
 80122ce:	683b      	ldr	r3, [r7, #0]
 80122d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80122d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80122d6:	f002 021f 	and.w	r2, r2, #31
 80122da:	2101      	movs	r1, #1
 80122dc:	fa01 f202 	lsl.w	r2, r1, r2
 80122e0:	4013      	ands	r3, r2
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d02b      	beq.n	801233e <lwip_select+0x2f6>
          struct lwip_sock *sock;
          SYS_ARCH_PROTECT(lev);
 80122e6:	f00f fdbf 	bl	8021e68 <sys_arch_protect>
 80122ea:	65b8      	str	r0, [r7, #88]	; 0x58
          sock = tryget_socket_unconn_locked(i);
 80122ec:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80122ee:	f7fe fc96 	bl	8010c1e <tryget_socket_unconn_locked>
 80122f2:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (sock != NULL) {
 80122f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d018      	beq.n	801232c <lwip_select+0x2e4>
            /* for now, handle select_waiting==0... */
            LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
 80122fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122fc:	7b9b      	ldrb	r3, [r3, #14]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d106      	bne.n	8012310 <lwip_select+0x2c8>
 8012302:	4b38      	ldr	r3, [pc, #224]	; (80123e4 <lwip_select+0x39c>)
 8012304:	f640 023c 	movw	r2, #2108	; 0x83c
 8012308:	4937      	ldr	r1, [pc, #220]	; (80123e8 <lwip_select+0x3a0>)
 801230a:	4838      	ldr	r0, [pc, #224]	; (80123ec <lwip_select+0x3a4>)
 801230c:	f014 fde2 	bl	8026ed4 <iprintf>
            if (sock->select_waiting > 0) {
 8012310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012312:	7b9b      	ldrb	r3, [r3, #14]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d005      	beq.n	8012324 <lwip_select+0x2dc>
              sock->select_waiting--;
 8012318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801231a:	7b9b      	ldrb	r3, [r3, #14]
 801231c:	3b01      	subs	r3, #1
 801231e:	b2da      	uxtb	r2, r3
 8012320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012322:	739a      	strb	r2, [r3, #14]
            }
            SYS_ARCH_UNPROTECT(lev);
 8012324:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8012326:	f00f fdad 	bl	8021e84 <sys_arch_unprotect>
 801232a:	e008      	b.n	801233e <lwip_select+0x2f6>
            done_socket(sock);
          } else {
            SYS_ARCH_UNPROTECT(lev);
 801232c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801232e:	f00f fda9 	bl	8021e84 <sys_arch_unprotect>
            /* Not a valid socket */
            nready = -1;
 8012332:	f04f 33ff 	mov.w	r3, #4294967295
 8012336:	66bb      	str	r3, [r7, #104]	; 0x68
            set_errno(EBADF);
 8012338:	4b2d      	ldr	r3, [pc, #180]	; (80123f0 <lwip_select+0x3a8>)
 801233a:	2209      	movs	r2, #9
 801233c:	601a      	str	r2, [r3, #0]
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 801233e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012340:	3301      	adds	r3, #1
 8012342:	663b      	str	r3, [r7, #96]	; 0x60
 8012344:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012346:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012348:	429a      	cmp	r2, r3
 801234a:	db99      	blt.n	8012280 <lwip_select+0x238>
          }
        }
      }

      lwip_unlink_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
 801234c:	f107 0310 	add.w	r3, r7, #16
 8012350:	4618      	mov	r0, r3
 8012352:	f7ff fcdd 	bl	8011d10 <lwip_unlink_select_cb>
      if (API_SELECT_CB_VAR_REF(select_cb).sem_signalled && (!waited || (waitres == SYS_ARCH_TIMEOUT))) {
        /* don't leave the thread-local semaphore signalled */
        sys_arch_sem_wait(API_SELECT_CB_VAR_REF(select_cb).sem, 1);
      }
#else /* LWIP_NETCONN_SEM_PER_THREAD */
      sys_sem_free(&API_SELECT_CB_VAR_REF(select_cb).sem);
 8012356:	f107 0310 	add.w	r3, r7, #16
 801235a:	3320      	adds	r3, #32
 801235c:	4618      	mov	r0, r3
 801235e:	f00f fcec 	bl	8021d3a <sys_sem_free>
#endif /* LWIP_NETCONN_SEM_PER_THREAD */
      API_SELECT_CB_VAR_FREE(select_cb);

      if (nready < 0) {
 8012362:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012364:	2b00      	cmp	r3, #0
 8012366:	da02      	bge.n	801236e <lwip_select+0x326>
        /* This happens when a socket got closed while waiting */
        lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
        return -1;
 8012368:	f04f 33ff 	mov.w	r3, #4294967295
 801236c:	e035      	b.n	80123da <lwip_select+0x392>
      }

      if (waitres == SYS_ARCH_TIMEOUT) {
 801236e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012374:	d00f      	beq.n	8012396 <lwip_select+0x34e>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: timeout expired\n"));
        /* This is OK as the local fdsets are empty and nready is zero,
           or we would have returned earlier. */
      } else {
        /* See what's set now after waiting */
        nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 8012376:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801237a:	9302      	str	r3, [sp, #8]
 801237c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012380:	9301      	str	r3, [sp, #4]
 8012382:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012386:	9300      	str	r3, [sp, #0]
 8012388:	683b      	ldr	r3, [r7, #0]
 801238a:	687a      	ldr	r2, [r7, #4]
 801238c:	68b9      	ldr	r1, [r7, #8]
 801238e:	68f8      	ldr	r0, [r7, #12]
 8012390:	f7ff fd06 	bl	8011da0 <lwip_selscan>
 8012394:	66b8      	str	r0, [r7, #104]	; 0x68
    }
  }

  lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
  set_errno(0);
  if (readset) {
 8012396:	68bb      	ldr	r3, [r7, #8]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d007      	beq.n	80123ac <lwip_select+0x364>
    *readset = lreadset;
 801239c:	68bb      	ldr	r3, [r7, #8]
 801239e:	461a      	mov	r2, r3
 80123a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80123a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80123a8:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  if (writeset) {
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d007      	beq.n	80123c2 <lwip_select+0x37a>
    *writeset = lwriteset;
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	461a      	mov	r2, r3
 80123b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80123ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80123be:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  if (exceptset) {
 80123c2:	683b      	ldr	r3, [r7, #0]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d007      	beq.n	80123d8 <lwip_select+0x390>
    *exceptset = lexceptset;
 80123c8:	683b      	ldr	r3, [r7, #0]
 80123ca:	461a      	mov	r2, r3
 80123cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80123d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80123d4:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  return nready;
 80123d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 80123da:	4618      	mov	r0, r3
 80123dc:	3770      	adds	r7, #112	; 0x70
 80123de:	46bd      	mov	sp, r7
 80123e0:	bd80      	pop	{r7, pc}
 80123e2:	bf00      	nop
 80123e4:	0802af34 	.word	0x0802af34
 80123e8:	0802b270 	.word	0x0802b270
 80123ec:	0802af88 	.word	0x0802af88
 80123f0:	240086b8 	.word	0x240086b8

080123f4 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 80123f4:	b480      	push	{r7}
 80123f6:	b087      	sub	sp, #28
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	60f8      	str	r0, [r7, #12]
 80123fc:	60b9      	str	r1, [r7, #8]
 80123fe:	607a      	str	r2, [r7, #4]
 8012400:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8012402:	2300      	movs	r3, #0
 8012404:	617b      	str	r3, [r7, #20]
 8012406:	e02c      	b.n	8012462 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	695a      	ldr	r2, [r3, #20]
 801240c:	697b      	ldr	r3, [r7, #20]
 801240e:	00db      	lsls	r3, r3, #3
 8012410:	4413      	add	r3, r2
 8012412:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 8012414:	693b      	ldr	r3, [r7, #16]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	68ba      	ldr	r2, [r7, #8]
 801241a:	429a      	cmp	r2, r3
 801241c:	d11e      	bne.n	801245c <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d009      	beq.n	8012438 <lwip_poll_should_wake+0x44>
 8012424:	693b      	ldr	r3, [r7, #16]
 8012426:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801242a:	b29b      	uxth	r3, r3
 801242c:	f003 0301 	and.w	r3, r3, #1
 8012430:	2b00      	cmp	r3, #0
 8012432:	d001      	beq.n	8012438 <lwip_poll_should_wake+0x44>
        return 1;
 8012434:	2301      	movs	r3, #1
 8012436:	e01a      	b.n	801246e <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 8012438:	683b      	ldr	r3, [r7, #0]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d009      	beq.n	8012452 <lwip_poll_should_wake+0x5e>
 801243e:	693b      	ldr	r3, [r7, #16]
 8012440:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012444:	b29b      	uxth	r3, r3
 8012446:	f003 0302 	and.w	r3, r3, #2
 801244a:	2b00      	cmp	r3, #0
 801244c:	d001      	beq.n	8012452 <lwip_poll_should_wake+0x5e>
        return 1;
 801244e:	2301      	movs	r3, #1
 8012450:	e00d      	b.n	801246e <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 8012452:	6a3b      	ldr	r3, [r7, #32]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d001      	beq.n	801245c <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 8012458:	2301      	movs	r3, #1
 801245a:	e008      	b.n	801246e <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 801245c:	697b      	ldr	r3, [r7, #20]
 801245e:	3301      	adds	r3, #1
 8012460:	617b      	str	r3, [r7, #20]
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	699b      	ldr	r3, [r3, #24]
 8012466:	697a      	ldr	r2, [r7, #20]
 8012468:	429a      	cmp	r2, r3
 801246a:	d3cd      	bcc.n	8012408 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 801246c:	2300      	movs	r3, #0
}
 801246e:	4618      	mov	r0, r3
 8012470:	371c      	adds	r7, #28
 8012472:	46bd      	mov	sp, r7
 8012474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012478:	4770      	bx	lr
	...

0801247c <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 801247c:	b580      	push	{r7, lr}
 801247e:	b08a      	sub	sp, #40	; 0x28
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]
 8012484:	460b      	mov	r3, r1
 8012486:	70fb      	strb	r3, [r7, #3]
 8012488:	4613      	mov	r3, r2
 801248a:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	2b00      	cmp	r3, #0
 8012490:	f000 80a4 	beq.w	80125dc <event_callback+0x160>
    s = conn->socket;
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	699b      	ldr	r3, [r3, #24]
 8012498:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 801249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801249c:	2b00      	cmp	r3, #0
 801249e:	da18      	bge.n	80124d2 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 80124a0:	f00f fce2 	bl	8021e68 <sys_arch_protect>
 80124a4:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	699b      	ldr	r3, [r3, #24]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	da0b      	bge.n	80124c6 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 80124ae:	78fb      	ldrb	r3, [r7, #3]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d104      	bne.n	80124be <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	699b      	ldr	r3, [r3, #24]
 80124b8:	1e5a      	subs	r2, r3, #1
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 80124be:	69f8      	ldr	r0, [r7, #28]
 80124c0:	f00f fce0 	bl	8021e84 <sys_arch_unprotect>
        return;
 80124c4:	e08d      	b.n	80125e2 <event_callback+0x166>
      }
      s = conn->socket;
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	699b      	ldr	r3, [r3, #24]
 80124ca:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 80124cc:	69f8      	ldr	r0, [r7, #28]
 80124ce:	f00f fcd9 	bl	8021e84 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 80124d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80124d4:	f7fe fbc6 	bl	8010c64 <get_socket>
 80124d8:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 80124da:	69bb      	ldr	r3, [r7, #24]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d07f      	beq.n	80125e0 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 80124e0:	2301      	movs	r3, #1
 80124e2:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 80124e4:	f00f fcc0 	bl	8021e68 <sys_arch_protect>
 80124e8:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 80124ea:	78fb      	ldrb	r3, [r7, #3]
 80124ec:	2b04      	cmp	r3, #4
 80124ee:	d83e      	bhi.n	801256e <event_callback+0xf2>
 80124f0:	a201      	add	r2, pc, #4	; (adr r2, 80124f8 <event_callback+0x7c>)
 80124f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124f6:	bf00      	nop
 80124f8:	0801250d 	.word	0x0801250d
 80124fc:	0801252f 	.word	0x0801252f
 8012500:	08012547 	.word	0x08012547
 8012504:	0801255b 	.word	0x0801255b
 8012508:	08012567 	.word	0x08012567
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 801250c:	69bb      	ldr	r3, [r7, #24]
 801250e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012512:	b29b      	uxth	r3, r3
 8012514:	3301      	adds	r3, #1
 8012516:	b29b      	uxth	r3, r3
 8012518:	b21a      	sxth	r2, r3
 801251a:	69bb      	ldr	r3, [r7, #24]
 801251c:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 801251e:	69bb      	ldr	r3, [r7, #24]
 8012520:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012524:	2b01      	cmp	r3, #1
 8012526:	dd2a      	ble.n	801257e <event_callback+0x102>
        check_waiters = 0;
 8012528:	2300      	movs	r3, #0
 801252a:	623b      	str	r3, [r7, #32]
      }
      break;
 801252c:	e027      	b.n	801257e <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 801252e:	69bb      	ldr	r3, [r7, #24]
 8012530:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012534:	b29b      	uxth	r3, r3
 8012536:	3b01      	subs	r3, #1
 8012538:	b29b      	uxth	r3, r3
 801253a:	b21a      	sxth	r2, r3
 801253c:	69bb      	ldr	r3, [r7, #24]
 801253e:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 8012540:	2300      	movs	r3, #0
 8012542:	623b      	str	r3, [r7, #32]
      break;
 8012544:	e01c      	b.n	8012580 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 8012546:	69bb      	ldr	r3, [r7, #24]
 8012548:	895b      	ldrh	r3, [r3, #10]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d001      	beq.n	8012552 <event_callback+0xd6>
        check_waiters = 0;
 801254e:	2300      	movs	r3, #0
 8012550:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 8012552:	69bb      	ldr	r3, [r7, #24]
 8012554:	2201      	movs	r2, #1
 8012556:	815a      	strh	r2, [r3, #10]
      break;
 8012558:	e012      	b.n	8012580 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 801255a:	69bb      	ldr	r3, [r7, #24]
 801255c:	2200      	movs	r2, #0
 801255e:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 8012560:	2300      	movs	r3, #0
 8012562:	623b      	str	r3, [r7, #32]
      break;
 8012564:	e00c      	b.n	8012580 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 8012566:	69bb      	ldr	r3, [r7, #24]
 8012568:	2201      	movs	r2, #1
 801256a:	819a      	strh	r2, [r3, #12]
      break;
 801256c:	e008      	b.n	8012580 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 801256e:	4b1e      	ldr	r3, [pc, #120]	; (80125e8 <event_callback+0x16c>)
 8012570:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 8012574:	491d      	ldr	r1, [pc, #116]	; (80125ec <event_callback+0x170>)
 8012576:	481e      	ldr	r0, [pc, #120]	; (80125f0 <event_callback+0x174>)
 8012578:	f014 fcac 	bl	8026ed4 <iprintf>
      break;
 801257c:	e000      	b.n	8012580 <event_callback+0x104>
      break;
 801257e:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 8012580:	69bb      	ldr	r3, [r7, #24]
 8012582:	7b9b      	ldrb	r3, [r3, #14]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d025      	beq.n	80125d4 <event_callback+0x158>
 8012588:	6a3b      	ldr	r3, [r7, #32]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d022      	beq.n	80125d4 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 801258e:	69bb      	ldr	r3, [r7, #24]
 8012590:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012594:	2b00      	cmp	r3, #0
 8012596:	bfcc      	ite	gt
 8012598:	2301      	movgt	r3, #1
 801259a:	2300      	movle	r3, #0
 801259c:	b2db      	uxtb	r3, r3
 801259e:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 80125a0:	69bb      	ldr	r3, [r7, #24]
 80125a2:	895b      	ldrh	r3, [r3, #10]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	bf14      	ite	ne
 80125a8:	2301      	movne	r3, #1
 80125aa:	2300      	moveq	r3, #0
 80125ac:	b2db      	uxtb	r3, r3
 80125ae:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 80125b0:	69bb      	ldr	r3, [r7, #24]
 80125b2:	899b      	ldrh	r3, [r3, #12]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	bf14      	ite	ne
 80125b8:	2301      	movne	r3, #1
 80125ba:	2300      	moveq	r3, #0
 80125bc:	b2db      	uxtb	r3, r3
 80125be:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 80125c0:	69f8      	ldr	r0, [r7, #28]
 80125c2:	f00f fc5f 	bl	8021e84 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	693a      	ldr	r2, [r7, #16]
 80125ca:	6979      	ldr	r1, [r7, #20]
 80125cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80125ce:	f000 f811 	bl	80125f4 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 80125d2:	e006      	b.n	80125e2 <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 80125d4:	69f8      	ldr	r0, [r7, #28]
 80125d6:	f00f fc55 	bl	8021e84 <sys_arch_unprotect>
 80125da:	e002      	b.n	80125e2 <event_callback+0x166>
    return;
 80125dc:	bf00      	nop
 80125de:	e000      	b.n	80125e2 <event_callback+0x166>
      return;
 80125e0:	bf00      	nop
  }
  done_socket(sock);
}
 80125e2:	3728      	adds	r7, #40	; 0x28
 80125e4:	46bd      	mov	sp, r7
 80125e6:	bd80      	pop	{r7, pc}
 80125e8:	0802af34 	.word	0x0802af34
 80125ec:	0802b2b0 	.word	0x0802b2b0
 80125f0:	0802af88 	.word	0x0802af88

080125f4 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b088      	sub	sp, #32
 80125f8:	af02      	add	r7, sp, #8
 80125fa:	60f8      	str	r0, [r7, #12]
 80125fc:	60b9      	str	r1, [r7, #8]
 80125fe:	607a      	str	r2, [r7, #4]
 8012600:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8012602:	4b3e      	ldr	r3, [pc, #248]	; (80126fc <select_check_waiters+0x108>)
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	617b      	str	r3, [r7, #20]
 8012608:	e06f      	b.n	80126ea <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 801260a:	697b      	ldr	r3, [r7, #20]
 801260c:	69db      	ldr	r3, [r3, #28]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d168      	bne.n	80126e4 <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 8012612:	2300      	movs	r3, #0
 8012614:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 8012616:	697b      	ldr	r3, [r7, #20]
 8012618:	695b      	ldr	r3, [r3, #20]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d009      	beq.n	8012632 <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 801261e:	683b      	ldr	r3, [r7, #0]
 8012620:	9300      	str	r3, [sp, #0]
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	68ba      	ldr	r2, [r7, #8]
 8012626:	68f9      	ldr	r1, [r7, #12]
 8012628:	6978      	ldr	r0, [r7, #20]
 801262a:	f7ff fee3 	bl	80123f4 <lwip_poll_should_wake>
 801262e:	6138      	str	r0, [r7, #16]
 8012630:	e04d      	b.n	80126ce <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 8012632:	68bb      	ldr	r3, [r7, #8]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d014      	beq.n	8012662 <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 8012638:	697b      	ldr	r3, [r7, #20]
 801263a:	689b      	ldr	r3, [r3, #8]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d010      	beq.n	8012662 <select_check_waiters+0x6e>
 8012640:	697b      	ldr	r3, [r7, #20]
 8012642:	689b      	ldr	r3, [r3, #8]
 8012644:	68fa      	ldr	r2, [r7, #12]
 8012646:	0952      	lsrs	r2, r2, #5
 8012648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801264c:	68fa      	ldr	r2, [r7, #12]
 801264e:	f002 021f 	and.w	r2, r2, #31
 8012652:	2101      	movs	r1, #1
 8012654:	fa01 f202 	lsl.w	r2, r1, r2
 8012658:	4013      	ands	r3, r2
 801265a:	2b00      	cmp	r3, #0
 801265c:	d001      	beq.n	8012662 <select_check_waiters+0x6e>
            do_signal = 1;
 801265e:	2301      	movs	r3, #1
 8012660:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d017      	beq.n	8012698 <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 8012668:	693b      	ldr	r3, [r7, #16]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d114      	bne.n	8012698 <select_check_waiters+0xa4>
 801266e:	697b      	ldr	r3, [r7, #20]
 8012670:	68db      	ldr	r3, [r3, #12]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d010      	beq.n	8012698 <select_check_waiters+0xa4>
 8012676:	697b      	ldr	r3, [r7, #20]
 8012678:	68db      	ldr	r3, [r3, #12]
 801267a:	68fa      	ldr	r2, [r7, #12]
 801267c:	0952      	lsrs	r2, r2, #5
 801267e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012682:	68fa      	ldr	r2, [r7, #12]
 8012684:	f002 021f 	and.w	r2, r2, #31
 8012688:	2101      	movs	r1, #1
 801268a:	fa01 f202 	lsl.w	r2, r1, r2
 801268e:	4013      	ands	r3, r2
 8012690:	2b00      	cmp	r3, #0
 8012692:	d001      	beq.n	8012698 <select_check_waiters+0xa4>
            do_signal = 1;
 8012694:	2301      	movs	r3, #1
 8012696:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 8012698:	683b      	ldr	r3, [r7, #0]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d017      	beq.n	80126ce <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 801269e:	693b      	ldr	r3, [r7, #16]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d114      	bne.n	80126ce <select_check_waiters+0xda>
 80126a4:	697b      	ldr	r3, [r7, #20]
 80126a6:	691b      	ldr	r3, [r3, #16]
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d010      	beq.n	80126ce <select_check_waiters+0xda>
 80126ac:	697b      	ldr	r3, [r7, #20]
 80126ae:	691b      	ldr	r3, [r3, #16]
 80126b0:	68fa      	ldr	r2, [r7, #12]
 80126b2:	0952      	lsrs	r2, r2, #5
 80126b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80126b8:	68fa      	ldr	r2, [r7, #12]
 80126ba:	f002 021f 	and.w	r2, r2, #31
 80126be:	2101      	movs	r1, #1
 80126c0:	fa01 f202 	lsl.w	r2, r1, r2
 80126c4:	4013      	ands	r3, r2
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d001      	beq.n	80126ce <select_check_waiters+0xda>
            do_signal = 1;
 80126ca:	2301      	movs	r3, #1
 80126cc:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 80126ce:	693b      	ldr	r3, [r7, #16]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d007      	beq.n	80126e4 <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 80126d4:	697b      	ldr	r3, [r7, #20]
 80126d6:	2201      	movs	r2, #1
 80126d8:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 80126da:	697b      	ldr	r3, [r7, #20]
 80126dc:	3320      	adds	r3, #32
 80126de:	4618      	mov	r0, r3
 80126e0:	f00f fb1e 	bl	8021d20 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 80126e4:	697b      	ldr	r3, [r7, #20]
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	617b      	str	r3, [r7, #20]
 80126ea:	697b      	ldr	r3, [r7, #20]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d18c      	bne.n	801260a <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 80126f0:	bf00      	nop
 80126f2:	bf00      	nop
 80126f4:	3718      	adds	r7, #24
 80126f6:	46bd      	mov	sp, r7
 80126f8:	bd80      	pop	{r7, pc}
 80126fa:	bf00      	nop
 80126fc:	24004a8c 	.word	0x24004a8c

08012700 <lwip_shutdown>:
/**
 * Close one end of a full-duplex connection.
 */
int
lwip_shutdown(int s, int how)
{
 8012700:	b580      	push	{r7, lr}
 8012702:	b08a      	sub	sp, #40	; 0x28
 8012704:	af00      	add	r7, sp, #0
 8012706:	6078      	str	r0, [r7, #4]
 8012708:	6039      	str	r1, [r7, #0]
  struct lwip_sock *sock;
  err_t err;
  u8_t shut_rx = 0, shut_tx = 0;
 801270a:	2300      	movs	r3, #0
 801270c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012710:	2300      	movs	r3, #0
 8012712:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_shutdown(%d, how=%d)\n", s, how));

  sock = get_socket(s);
 8012716:	6878      	ldr	r0, [r7, #4]
 8012718:	f7fe faa4 	bl	8010c64 <get_socket>
 801271c:	6238      	str	r0, [r7, #32]
  if (!sock) {
 801271e:	6a3b      	ldr	r3, [r7, #32]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d102      	bne.n	801272a <lwip_shutdown+0x2a>
    return -1;
 8012724:	f04f 33ff 	mov.w	r3, #4294967295
 8012728:	e062      	b.n	80127f0 <lwip_shutdown+0xf0>
  }

  if (sock->conn != NULL) {
 801272a:	6a3b      	ldr	r3, [r7, #32]
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d011      	beq.n	8012756 <lwip_shutdown+0x56>
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8012732:	6a3b      	ldr	r3, [r7, #32]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	781b      	ldrb	r3, [r3, #0]
 8012738:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801273c:	2b10      	cmp	r3, #16
 801273e:	d015      	beq.n	801276c <lwip_shutdown+0x6c>
      sock_set_errno(sock, EOPNOTSUPP);
 8012740:	235f      	movs	r3, #95	; 0x5f
 8012742:	60fb      	str	r3, [r7, #12]
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d002      	beq.n	8012750 <lwip_shutdown+0x50>
 801274a:	4a2b      	ldr	r2, [pc, #172]	; (80127f8 <lwip_shutdown+0xf8>)
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 8012750:	f04f 33ff 	mov.w	r3, #4294967295
 8012754:	e04c      	b.n	80127f0 <lwip_shutdown+0xf0>
    }
  } else {
    sock_set_errno(sock, ENOTCONN);
 8012756:	236b      	movs	r3, #107	; 0x6b
 8012758:	61fb      	str	r3, [r7, #28]
 801275a:	69fb      	ldr	r3, [r7, #28]
 801275c:	2b00      	cmp	r3, #0
 801275e:	d002      	beq.n	8012766 <lwip_shutdown+0x66>
 8012760:	4a25      	ldr	r2, [pc, #148]	; (80127f8 <lwip_shutdown+0xf8>)
 8012762:	69fb      	ldr	r3, [r7, #28]
 8012764:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8012766:	f04f 33ff 	mov.w	r3, #4294967295
 801276a:	e041      	b.n	80127f0 <lwip_shutdown+0xf0>
  }

  if (how == SHUT_RD) {
 801276c:	683b      	ldr	r3, [r7, #0]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d103      	bne.n	801277a <lwip_shutdown+0x7a>
    shut_rx = 1;
 8012772:	2301      	movs	r3, #1
 8012774:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012778:	e01b      	b.n	80127b2 <lwip_shutdown+0xb2>
  } else if (how == SHUT_WR) {
 801277a:	683b      	ldr	r3, [r7, #0]
 801277c:	2b01      	cmp	r3, #1
 801277e:	d103      	bne.n	8012788 <lwip_shutdown+0x88>
    shut_tx = 1;
 8012780:	2301      	movs	r3, #1
 8012782:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012786:	e014      	b.n	80127b2 <lwip_shutdown+0xb2>
  } else if (how == SHUT_RDWR) {
 8012788:	683b      	ldr	r3, [r7, #0]
 801278a:	2b02      	cmp	r3, #2
 801278c:	d106      	bne.n	801279c <lwip_shutdown+0x9c>
    shut_rx = 1;
 801278e:	2301      	movs	r3, #1
 8012790:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    shut_tx = 1;
 8012794:	2301      	movs	r3, #1
 8012796:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801279a:	e00a      	b.n	80127b2 <lwip_shutdown+0xb2>
  } else {
    sock_set_errno(sock, EINVAL);
 801279c:	2316      	movs	r3, #22
 801279e:	61bb      	str	r3, [r7, #24]
 80127a0:	69bb      	ldr	r3, [r7, #24]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d002      	beq.n	80127ac <lwip_shutdown+0xac>
 80127a6:	4a14      	ldr	r2, [pc, #80]	; (80127f8 <lwip_shutdown+0xf8>)
 80127a8:	69bb      	ldr	r3, [r7, #24]
 80127aa:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 80127ac:	f04f 33ff 	mov.w	r3, #4294967295
 80127b0:	e01e      	b.n	80127f0 <lwip_shutdown+0xf0>
  }
  err = netconn_shutdown(sock->conn, shut_rx, shut_tx);
 80127b2:	6a3b      	ldr	r3, [r7, #32]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80127ba:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80127be:	4618      	mov	r0, r3
 80127c0:	f7fc fa15 	bl	800ebee <netconn_shutdown>
 80127c4:	4603      	mov	r3, r0
 80127c6:	75fb      	strb	r3, [r7, #23]

  sock_set_errno(sock, err_to_errno(err));
 80127c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80127cc:	4618      	mov	r0, r3
 80127ce:	f7fe f903 	bl	80109d8 <err_to_errno>
 80127d2:	6138      	str	r0, [r7, #16]
 80127d4:	693b      	ldr	r3, [r7, #16]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d002      	beq.n	80127e0 <lwip_shutdown+0xe0>
 80127da:	4a07      	ldr	r2, [pc, #28]	; (80127f8 <lwip_shutdown+0xf8>)
 80127dc:	693b      	ldr	r3, [r7, #16]
 80127de:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? 0 : -1);
 80127e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d101      	bne.n	80127ec <lwip_shutdown+0xec>
 80127e8:	2300      	movs	r3, #0
 80127ea:	e001      	b.n	80127f0 <lwip_shutdown+0xf0>
 80127ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80127f0:	4618      	mov	r0, r3
 80127f2:	3728      	adds	r7, #40	; 0x28
 80127f4:	46bd      	mov	sp, r7
 80127f6:	bd80      	pop	{r7, pc}
 80127f8:	240086b8 	.word	0x240086b8

080127fc <lwip_getaddrname>:

static int
lwip_getaddrname(int s, struct sockaddr *name, socklen_t *namelen, u8_t local)
{
 80127fc:	b590      	push	{r4, r7, lr}
 80127fe:	b08f      	sub	sp, #60	; 0x3c
 8012800:	af00      	add	r7, sp, #0
 8012802:	60f8      	str	r0, [r7, #12]
 8012804:	60b9      	str	r1, [r7, #8]
 8012806:	607a      	str	r2, [r7, #4]
 8012808:	70fb      	strb	r3, [r7, #3]
  union sockaddr_aligned saddr;
  ip_addr_t naddr;
  u16_t port;
  err_t err;

  sock = get_socket(s);
 801280a:	68f8      	ldr	r0, [r7, #12]
 801280c:	f7fe fa2a 	bl	8010c64 <get_socket>
 8012810:	6378      	str	r0, [r7, #52]	; 0x34
  if (!sock) {
 8012812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012814:	2b00      	cmp	r3, #0
 8012816:	d102      	bne.n	801281e <lwip_getaddrname+0x22>
    return -1;
 8012818:	f04f 33ff 	mov.w	r3, #4294967295
 801281c:	e054      	b.n	80128c8 <lwip_getaddrname+0xcc>
  }

  /* get the IP address and port */
  err = netconn_getaddr(sock->conn, &naddr, &port, local);
 801281e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012820:	6818      	ldr	r0, [r3, #0]
 8012822:	78fb      	ldrb	r3, [r7, #3]
 8012824:	f107 0212 	add.w	r2, r7, #18
 8012828:	f107 0114 	add.w	r1, r7, #20
 801282c:	f7fb fcee 	bl	800e20c <netconn_getaddr>
 8012830:	4603      	mov	r3, r0
 8012832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (err != ERR_OK) {
 8012836:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801283a:	2b00      	cmp	r3, #0
 801283c:	d00e      	beq.n	801285c <lwip_getaddrname+0x60>
    sock_set_errno(sock, err_to_errno(err));
 801283e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8012842:	4618      	mov	r0, r3
 8012844:	f7fe f8c8 	bl	80109d8 <err_to_errno>
 8012848:	62b8      	str	r0, [r7, #40]	; 0x28
 801284a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801284c:	2b00      	cmp	r3, #0
 801284e:	d002      	beq.n	8012856 <lwip_getaddrname+0x5a>
 8012850:	4a1f      	ldr	r2, [pc, #124]	; (80128d0 <lwip_getaddrname+0xd4>)
 8012852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012854:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8012856:	f04f 33ff 	mov.w	r3, #4294967295
 801285a:	e035      	b.n	80128c8 <lwip_getaddrname+0xcc>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(&naddr), ip_2_ip4(&naddr));
    IP_SET_TYPE_VAL(naddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, &naddr, port);
 801285c:	f107 0318 	add.w	r3, r7, #24
 8012860:	2210      	movs	r2, #16
 8012862:	701a      	strb	r2, [r3, #0]
 8012864:	f107 0318 	add.w	r3, r7, #24
 8012868:	2202      	movs	r2, #2
 801286a:	705a      	strb	r2, [r3, #1]
 801286c:	8a7b      	ldrh	r3, [r7, #18]
 801286e:	f107 0418 	add.w	r4, r7, #24
 8012872:	4618      	mov	r0, r3
 8012874:	f000 fc2c 	bl	80130d0 <lwip_htons>
 8012878:	4603      	mov	r3, r0
 801287a:	8063      	strh	r3, [r4, #2]
 801287c:	f107 0318 	add.w	r3, r7, #24
 8012880:	697a      	ldr	r2, [r7, #20]
 8012882:	605a      	str	r2, [r3, #4]
 8012884:	f107 0318 	add.w	r3, r7, #24
 8012888:	3308      	adds	r3, #8
 801288a:	2208      	movs	r2, #8
 801288c:	2100      	movs	r1, #0
 801288e:	4618      	mov	r0, r3
 8012890:	f013 fcc2 	bl	8026218 <memset>

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getaddrname(%d, addr=", s));
  ip_addr_debug_print_val(SOCKETS_DEBUG, naddr);
  LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F")\n", port));

  if (*namelen > saddr.sa.sa_len) {
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	7e3a      	ldrb	r2, [r7, #24]
 801289a:	4293      	cmp	r3, r2
 801289c:	d903      	bls.n	80128a6 <lwip_getaddrname+0xaa>
    *namelen = saddr.sa.sa_len;
 801289e:	7e3b      	ldrb	r3, [r7, #24]
 80128a0:	461a      	mov	r2, r3
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(name, &saddr, *namelen);
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	681a      	ldr	r2, [r3, #0]
 80128aa:	f107 0318 	add.w	r3, r7, #24
 80128ae:	4619      	mov	r1, r3
 80128b0:	68b8      	ldr	r0, [r7, #8]
 80128b2:	f013 fc89 	bl	80261c8 <memcpy>

  sock_set_errno(sock, 0);
 80128b6:	2300      	movs	r3, #0
 80128b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80128ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d002      	beq.n	80128c6 <lwip_getaddrname+0xca>
 80128c0:	4a03      	ldr	r2, [pc, #12]	; (80128d0 <lwip_getaddrname+0xd4>)
 80128c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128c4:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 80128c6:	2300      	movs	r3, #0
}
 80128c8:	4618      	mov	r0, r3
 80128ca:	373c      	adds	r7, #60	; 0x3c
 80128cc:	46bd      	mov	sp, r7
 80128ce:	bd90      	pop	{r4, r7, pc}
 80128d0:	240086b8 	.word	0x240086b8

080128d4 <lwip_getsockname>:
  return lwip_getaddrname(s, name, namelen, 0);
}

int
lwip_getsockname(int s, struct sockaddr *name, socklen_t *namelen)
{
 80128d4:	b580      	push	{r7, lr}
 80128d6:	b084      	sub	sp, #16
 80128d8:	af00      	add	r7, sp, #0
 80128da:	60f8      	str	r0, [r7, #12]
 80128dc:	60b9      	str	r1, [r7, #8]
 80128de:	607a      	str	r2, [r7, #4]
  return lwip_getaddrname(s, name, namelen, 1);
 80128e0:	2301      	movs	r3, #1
 80128e2:	687a      	ldr	r2, [r7, #4]
 80128e4:	68b9      	ldr	r1, [r7, #8]
 80128e6:	68f8      	ldr	r0, [r7, #12]
 80128e8:	f7ff ff88 	bl	80127fc <lwip_getaddrname>
 80128ec:	4603      	mov	r3, r0
}
 80128ee:	4618      	mov	r0, r3
 80128f0:	3710      	adds	r7, #16
 80128f2:	46bd      	mov	sp, r7
 80128f4:	bd80      	pop	{r7, pc}
	...

080128f8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b084      	sub	sp, #16
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
 8012900:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8012902:	f00a f80b 	bl	801c91c <sys_timeouts_sleeptime>
 8012906:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801290e:	d10b      	bne.n	8012928 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8012910:	4813      	ldr	r0, [pc, #76]	; (8012960 <tcpip_timeouts_mbox_fetch+0x68>)
 8012912:	f00f fa76 	bl	8021e02 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8012916:	2200      	movs	r2, #0
 8012918:	6839      	ldr	r1, [r7, #0]
 801291a:	6878      	ldr	r0, [r7, #4]
 801291c:	f00f f92e 	bl	8021b7c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8012920:	480f      	ldr	r0, [pc, #60]	; (8012960 <tcpip_timeouts_mbox_fetch+0x68>)
 8012922:	f00f fa5f 	bl	8021de4 <sys_mutex_lock>
    return;
 8012926:	e018      	b.n	801295a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d102      	bne.n	8012934 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801292e:	f009 ffbb 	bl	801c8a8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012932:	e7e6      	b.n	8012902 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8012934:	480a      	ldr	r0, [pc, #40]	; (8012960 <tcpip_timeouts_mbox_fetch+0x68>)
 8012936:	f00f fa64 	bl	8021e02 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801293a:	68fa      	ldr	r2, [r7, #12]
 801293c:	6839      	ldr	r1, [r7, #0]
 801293e:	6878      	ldr	r0, [r7, #4]
 8012940:	f00f f91c 	bl	8021b7c <sys_arch_mbox_fetch>
 8012944:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8012946:	4806      	ldr	r0, [pc, #24]	; (8012960 <tcpip_timeouts_mbox_fetch+0x68>)
 8012948:	f00f fa4c 	bl	8021de4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 801294c:	68bb      	ldr	r3, [r7, #8]
 801294e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012952:	d102      	bne.n	801295a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8012954:	f009 ffa8 	bl	801c8a8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012958:	e7d3      	b.n	8012902 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801295a:	3710      	adds	r7, #16
 801295c:	46bd      	mov	sp, r7
 801295e:	bd80      	pop	{r7, pc}
 8012960:	240053fc 	.word	0x240053fc

08012964 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8012964:	b580      	push	{r7, lr}
 8012966:	b084      	sub	sp, #16
 8012968:	af00      	add	r7, sp, #0
 801296a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 801296c:	4810      	ldr	r0, [pc, #64]	; (80129b0 <tcpip_thread+0x4c>)
 801296e:	f00f fa39 	bl	8021de4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8012972:	4b10      	ldr	r3, [pc, #64]	; (80129b4 <tcpip_thread+0x50>)
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d005      	beq.n	8012986 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801297a:	4b0e      	ldr	r3, [pc, #56]	; (80129b4 <tcpip_thread+0x50>)
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	4a0e      	ldr	r2, [pc, #56]	; (80129b8 <tcpip_thread+0x54>)
 8012980:	6812      	ldr	r2, [r2, #0]
 8012982:	4610      	mov	r0, r2
 8012984:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012986:	f107 030c 	add.w	r3, r7, #12
 801298a:	4619      	mov	r1, r3
 801298c:	480b      	ldr	r0, [pc, #44]	; (80129bc <tcpip_thread+0x58>)
 801298e:	f7ff ffb3 	bl	80128f8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	2b00      	cmp	r3, #0
 8012996:	d106      	bne.n	80129a6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012998:	4b09      	ldr	r3, [pc, #36]	; (80129c0 <tcpip_thread+0x5c>)
 801299a:	2291      	movs	r2, #145	; 0x91
 801299c:	4909      	ldr	r1, [pc, #36]	; (80129c4 <tcpip_thread+0x60>)
 801299e:	480a      	ldr	r0, [pc, #40]	; (80129c8 <tcpip_thread+0x64>)
 80129a0:	f014 fa98 	bl	8026ed4 <iprintf>
      continue;
 80129a4:	e003      	b.n	80129ae <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	4618      	mov	r0, r3
 80129aa:	f000 f80f 	bl	80129cc <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80129ae:	e7ea      	b.n	8012986 <tcpip_thread+0x22>
 80129b0:	240053fc 	.word	0x240053fc
 80129b4:	24004a90 	.word	0x24004a90
 80129b8:	24004a94 	.word	0x24004a94
 80129bc:	24004a98 	.word	0x24004a98
 80129c0:	0802b304 	.word	0x0802b304
 80129c4:	0802b334 	.word	0x0802b334
 80129c8:	0802b354 	.word	0x0802b354

080129cc <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b082      	sub	sp, #8
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	781b      	ldrb	r3, [r3, #0]
 80129d8:	2b02      	cmp	r3, #2
 80129da:	d026      	beq.n	8012a2a <tcpip_thread_handle_msg+0x5e>
 80129dc:	2b02      	cmp	r3, #2
 80129de:	dc2b      	bgt.n	8012a38 <tcpip_thread_handle_msg+0x6c>
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d002      	beq.n	80129ea <tcpip_thread_handle_msg+0x1e>
 80129e4:	2b01      	cmp	r3, #1
 80129e6:	d015      	beq.n	8012a14 <tcpip_thread_handle_msg+0x48>
 80129e8:	e026      	b.n	8012a38 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	68db      	ldr	r3, [r3, #12]
 80129ee:	687a      	ldr	r2, [r7, #4]
 80129f0:	6850      	ldr	r0, [r2, #4]
 80129f2:	687a      	ldr	r2, [r7, #4]
 80129f4:	6892      	ldr	r2, [r2, #8]
 80129f6:	4611      	mov	r1, r2
 80129f8:	4798      	blx	r3
 80129fa:	4603      	mov	r3, r0
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d004      	beq.n	8012a0a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	685b      	ldr	r3, [r3, #4]
 8012a04:	4618      	mov	r0, r3
 8012a06:	f003 f835 	bl	8015a74 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012a0a:	6879      	ldr	r1, [r7, #4]
 8012a0c:	2009      	movs	r0, #9
 8012a0e:	f002 f94f 	bl	8014cb0 <memp_free>
      break;
 8012a12:	e018      	b.n	8012a46 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	685b      	ldr	r3, [r3, #4]
 8012a18:	687a      	ldr	r2, [r7, #4]
 8012a1a:	6892      	ldr	r2, [r2, #8]
 8012a1c:	4610      	mov	r0, r2
 8012a1e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8012a20:	6879      	ldr	r1, [r7, #4]
 8012a22:	2008      	movs	r0, #8
 8012a24:	f002 f944 	bl	8014cb0 <memp_free>
      break;
 8012a28:	e00d      	b.n	8012a46 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	685b      	ldr	r3, [r3, #4]
 8012a2e:	687a      	ldr	r2, [r7, #4]
 8012a30:	6892      	ldr	r2, [r2, #8]
 8012a32:	4610      	mov	r0, r2
 8012a34:	4798      	blx	r3
      break;
 8012a36:	e006      	b.n	8012a46 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012a38:	4b05      	ldr	r3, [pc, #20]	; (8012a50 <tcpip_thread_handle_msg+0x84>)
 8012a3a:	22cf      	movs	r2, #207	; 0xcf
 8012a3c:	4905      	ldr	r1, [pc, #20]	; (8012a54 <tcpip_thread_handle_msg+0x88>)
 8012a3e:	4806      	ldr	r0, [pc, #24]	; (8012a58 <tcpip_thread_handle_msg+0x8c>)
 8012a40:	f014 fa48 	bl	8026ed4 <iprintf>
      break;
 8012a44:	bf00      	nop
  }
}
 8012a46:	bf00      	nop
 8012a48:	3708      	adds	r7, #8
 8012a4a:	46bd      	mov	sp, r7
 8012a4c:	bd80      	pop	{r7, pc}
 8012a4e:	bf00      	nop
 8012a50:	0802b304 	.word	0x0802b304
 8012a54:	0802b334 	.word	0x0802b334
 8012a58:	0802b354 	.word	0x0802b354

08012a5c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b086      	sub	sp, #24
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	60f8      	str	r0, [r7, #12]
 8012a64:	60b9      	str	r1, [r7, #8]
 8012a66:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012a68:	481a      	ldr	r0, [pc, #104]	; (8012ad4 <tcpip_inpkt+0x78>)
 8012a6a:	f00f f8e2 	bl	8021c32 <sys_mbox_valid>
 8012a6e:	4603      	mov	r3, r0
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d105      	bne.n	8012a80 <tcpip_inpkt+0x24>
 8012a74:	4b18      	ldr	r3, [pc, #96]	; (8012ad8 <tcpip_inpkt+0x7c>)
 8012a76:	22fc      	movs	r2, #252	; 0xfc
 8012a78:	4918      	ldr	r1, [pc, #96]	; (8012adc <tcpip_inpkt+0x80>)
 8012a7a:	4819      	ldr	r0, [pc, #100]	; (8012ae0 <tcpip_inpkt+0x84>)
 8012a7c:	f014 fa2a 	bl	8026ed4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8012a80:	2009      	movs	r0, #9
 8012a82:	f002 f89f 	bl	8014bc4 <memp_malloc>
 8012a86:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8012a88:	697b      	ldr	r3, [r7, #20]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d102      	bne.n	8012a94 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8012a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8012a92:	e01a      	b.n	8012aca <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8012a94:	697b      	ldr	r3, [r7, #20]
 8012a96:	2200      	movs	r2, #0
 8012a98:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8012a9a:	697b      	ldr	r3, [r7, #20]
 8012a9c:	68fa      	ldr	r2, [r7, #12]
 8012a9e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8012aa0:	697b      	ldr	r3, [r7, #20]
 8012aa2:	68ba      	ldr	r2, [r7, #8]
 8012aa4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8012aa6:	697b      	ldr	r3, [r7, #20]
 8012aa8:	687a      	ldr	r2, [r7, #4]
 8012aaa:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012aac:	6979      	ldr	r1, [r7, #20]
 8012aae:	4809      	ldr	r0, [pc, #36]	; (8012ad4 <tcpip_inpkt+0x78>)
 8012ab0:	f00f f84a 	bl	8021b48 <sys_mbox_trypost>
 8012ab4:	4603      	mov	r3, r0
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d006      	beq.n	8012ac8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012aba:	6979      	ldr	r1, [r7, #20]
 8012abc:	2009      	movs	r0, #9
 8012abe:	f002 f8f7 	bl	8014cb0 <memp_free>
    return ERR_MEM;
 8012ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8012ac6:	e000      	b.n	8012aca <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8012ac8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8012aca:	4618      	mov	r0, r3
 8012acc:	3718      	adds	r7, #24
 8012ace:	46bd      	mov	sp, r7
 8012ad0:	bd80      	pop	{r7, pc}
 8012ad2:	bf00      	nop
 8012ad4:	24004a98 	.word	0x24004a98
 8012ad8:	0802b304 	.word	0x0802b304
 8012adc:	0802b37c 	.word	0x0802b37c
 8012ae0:	0802b354 	.word	0x0802b354

08012ae4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	b082      	sub	sp, #8
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
 8012aec:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8012aee:	683b      	ldr	r3, [r7, #0]
 8012af0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012af4:	f003 0318 	and.w	r3, r3, #24
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d006      	beq.n	8012b0a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8012afc:	4a08      	ldr	r2, [pc, #32]	; (8012b20 <tcpip_input+0x3c>)
 8012afe:	6839      	ldr	r1, [r7, #0]
 8012b00:	6878      	ldr	r0, [r7, #4]
 8012b02:	f7ff ffab 	bl	8012a5c <tcpip_inpkt>
 8012b06:	4603      	mov	r3, r0
 8012b08:	e005      	b.n	8012b16 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8012b0a:	4a06      	ldr	r2, [pc, #24]	; (8012b24 <tcpip_input+0x40>)
 8012b0c:	6839      	ldr	r1, [r7, #0]
 8012b0e:	6878      	ldr	r0, [r7, #4]
 8012b10:	f7ff ffa4 	bl	8012a5c <tcpip_inpkt>
 8012b14:	4603      	mov	r3, r0
}
 8012b16:	4618      	mov	r0, r3
 8012b18:	3708      	adds	r7, #8
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	bd80      	pop	{r7, pc}
 8012b1e:	bf00      	nop
 8012b20:	08021935 	.word	0x08021935
 8012b24:	08020591 	.word	0x08020591

08012b28 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b084      	sub	sp, #16
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	6078      	str	r0, [r7, #4]
 8012b30:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012b32:	4819      	ldr	r0, [pc, #100]	; (8012b98 <tcpip_try_callback+0x70>)
 8012b34:	f00f f87d 	bl	8021c32 <sys_mbox_valid>
 8012b38:	4603      	mov	r3, r0
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d106      	bne.n	8012b4c <tcpip_try_callback+0x24>
 8012b3e:	4b17      	ldr	r3, [pc, #92]	; (8012b9c <tcpip_try_callback+0x74>)
 8012b40:	f240 125d 	movw	r2, #349	; 0x15d
 8012b44:	4916      	ldr	r1, [pc, #88]	; (8012ba0 <tcpip_try_callback+0x78>)
 8012b46:	4817      	ldr	r0, [pc, #92]	; (8012ba4 <tcpip_try_callback+0x7c>)
 8012b48:	f014 f9c4 	bl	8026ed4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8012b4c:	2008      	movs	r0, #8
 8012b4e:	f002 f839 	bl	8014bc4 <memp_malloc>
 8012b52:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d102      	bne.n	8012b60 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8012b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8012b5e:	e017      	b.n	8012b90 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	2201      	movs	r2, #1
 8012b64:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	687a      	ldr	r2, [r7, #4]
 8012b6a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	683a      	ldr	r2, [r7, #0]
 8012b70:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012b72:	68f9      	ldr	r1, [r7, #12]
 8012b74:	4808      	ldr	r0, [pc, #32]	; (8012b98 <tcpip_try_callback+0x70>)
 8012b76:	f00e ffe7 	bl	8021b48 <sys_mbox_trypost>
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d006      	beq.n	8012b8e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8012b80:	68f9      	ldr	r1, [r7, #12]
 8012b82:	2008      	movs	r0, #8
 8012b84:	f002 f894 	bl	8014cb0 <memp_free>
    return ERR_MEM;
 8012b88:	f04f 33ff 	mov.w	r3, #4294967295
 8012b8c:	e000      	b.n	8012b90 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8012b8e:	2300      	movs	r3, #0
}
 8012b90:	4618      	mov	r0, r3
 8012b92:	3710      	adds	r7, #16
 8012b94:	46bd      	mov	sp, r7
 8012b96:	bd80      	pop	{r7, pc}
 8012b98:	24004a98 	.word	0x24004a98
 8012b9c:	0802b304 	.word	0x0802b304
 8012ba0:	0802b37c 	.word	0x0802b37c
 8012ba4:	0802b354 	.word	0x0802b354

08012ba8 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8012ba8:	b580      	push	{r7, lr}
 8012baa:	b084      	sub	sp, #16
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	60f8      	str	r0, [r7, #12]
 8012bb0:	60b9      	str	r1, [r7, #8]
 8012bb2:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8012bb4:	4806      	ldr	r0, [pc, #24]	; (8012bd0 <tcpip_send_msg_wait_sem+0x28>)
 8012bb6:	f00f f915 	bl	8021de4 <sys_mutex_lock>
  fn(apimsg);
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	68b8      	ldr	r0, [r7, #8]
 8012bbe:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8012bc0:	4803      	ldr	r0, [pc, #12]	; (8012bd0 <tcpip_send_msg_wait_sem+0x28>)
 8012bc2:	f00f f91e 	bl	8021e02 <sys_mutex_unlock>
  return ERR_OK;
 8012bc6:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8012bc8:	4618      	mov	r0, r3
 8012bca:	3710      	adds	r7, #16
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	bd80      	pop	{r7, pc}
 8012bd0:	240053fc 	.word	0x240053fc

08012bd4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8012bd4:	b580      	push	{r7, lr}
 8012bd6:	b084      	sub	sp, #16
 8012bd8:	af02      	add	r7, sp, #8
 8012bda:	6078      	str	r0, [r7, #4]
 8012bdc:	6039      	str	r1, [r7, #0]
  lwip_init();
 8012bde:	f001 fb49 	bl	8014274 <lwip_init>

  tcpip_init_done = initfunc;
 8012be2:	4a17      	ldr	r2, [pc, #92]	; (8012c40 <tcpip_init+0x6c>)
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8012be8:	4a16      	ldr	r2, [pc, #88]	; (8012c44 <tcpip_init+0x70>)
 8012bea:	683b      	ldr	r3, [r7, #0]
 8012bec:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8012bee:	2106      	movs	r1, #6
 8012bf0:	4815      	ldr	r0, [pc, #84]	; (8012c48 <tcpip_init+0x74>)
 8012bf2:	f00e ff75 	bl	8021ae0 <sys_mbox_new>
 8012bf6:	4603      	mov	r3, r0
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d006      	beq.n	8012c0a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8012bfc:	4b13      	ldr	r3, [pc, #76]	; (8012c4c <tcpip_init+0x78>)
 8012bfe:	f240 2261 	movw	r2, #609	; 0x261
 8012c02:	4913      	ldr	r1, [pc, #76]	; (8012c50 <tcpip_init+0x7c>)
 8012c04:	4813      	ldr	r0, [pc, #76]	; (8012c54 <tcpip_init+0x80>)
 8012c06:	f014 f965 	bl	8026ed4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8012c0a:	4813      	ldr	r0, [pc, #76]	; (8012c58 <tcpip_init+0x84>)
 8012c0c:	f00f f8ce 	bl	8021dac <sys_mutex_new>
 8012c10:	4603      	mov	r3, r0
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d006      	beq.n	8012c24 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8012c16:	4b0d      	ldr	r3, [pc, #52]	; (8012c4c <tcpip_init+0x78>)
 8012c18:	f240 2265 	movw	r2, #613	; 0x265
 8012c1c:	490f      	ldr	r1, [pc, #60]	; (8012c5c <tcpip_init+0x88>)
 8012c1e:	480d      	ldr	r0, [pc, #52]	; (8012c54 <tcpip_init+0x80>)
 8012c20:	f014 f958 	bl	8026ed4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8012c24:	2300      	movs	r3, #0
 8012c26:	9300      	str	r3, [sp, #0]
 8012c28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012c2c:	2200      	movs	r2, #0
 8012c2e:	490c      	ldr	r1, [pc, #48]	; (8012c60 <tcpip_init+0x8c>)
 8012c30:	480c      	ldr	r0, [pc, #48]	; (8012c64 <tcpip_init+0x90>)
 8012c32:	f00f f8f3 	bl	8021e1c <sys_thread_new>
}
 8012c36:	bf00      	nop
 8012c38:	3708      	adds	r7, #8
 8012c3a:	46bd      	mov	sp, r7
 8012c3c:	bd80      	pop	{r7, pc}
 8012c3e:	bf00      	nop
 8012c40:	24004a90 	.word	0x24004a90
 8012c44:	24004a94 	.word	0x24004a94
 8012c48:	24004a98 	.word	0x24004a98
 8012c4c:	0802b304 	.word	0x0802b304
 8012c50:	0802b38c 	.word	0x0802b38c
 8012c54:	0802b354 	.word	0x0802b354
 8012c58:	240053fc 	.word	0x240053fc
 8012c5c:	0802b3b0 	.word	0x0802b3b0
 8012c60:	08012965 	.word	0x08012965
 8012c64:	0802b3d4 	.word	0x0802b3d4

08012c68 <sntp_process>:
/**
 * SNTP processing of received timestamp
 */
static void
sntp_process(const struct sntp_timestamps *timestamps)
{
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b084      	sub	sp, #16
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
  s32_t sec;
  u32_t frac;

  sec  = (s32_t)lwip_ntohl(timestamps->xmit.sec);
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	4618      	mov	r0, r3
 8012c76:	f000 fa40 	bl	80130fa <lwip_htonl>
 8012c7a:	4603      	mov	r3, r0
 8012c7c:	60fb      	str	r3, [r7, #12]
  frac = lwip_ntohl(timestamps->xmit.frac);
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	685b      	ldr	r3, [r3, #4]
 8012c82:	4618      	mov	r0, r3
 8012c84:	f000 fa39 	bl	80130fa <lwip_htonl>
 8012c88:	60b8      	str	r0, [r7, #8]
      frac = (u32_t)((u64_t)t4);
    }
  }
#endif /* SNTP_COMP_ROUNDTRIP */

  SNTP_SET_SYSTEM_TIME_NTP(sec, frac);
 8012c8a:	68fa      	ldr	r2, [r7, #12]
 8012c8c:	4b04      	ldr	r3, [pc, #16]	; (8012ca0 <sntp_process+0x38>)
 8012c8e:	4413      	add	r3, r2
 8012c90:	4618      	mov	r0, r3
 8012c92:	f010 fef5 	bl	8023a80 <lwip_sntp_recv_callback>
  LWIP_UNUSED_ARG(frac); /* might be unused if only seconds are set */
  LWIP_DEBUGF(SNTP_DEBUG_TRACE, ("sntp_process: %s, %" U32_F " us\n",
                                 sntp_format_time(sec), SNTP_FRAC_TO_US(frac)));
}
 8012c96:	bf00      	nop
 8012c98:	3710      	adds	r7, #16
 8012c9a:	46bd      	mov	sp, r7
 8012c9c:	bd80      	pop	{r7, pc}
 8012c9e:	bf00      	nop
 8012ca0:	7c558180 	.word	0x7c558180

08012ca4 <sntp_initialize_request>:
/**
 * Initialize request struct to be sent to server.
 */
static void
sntp_initialize_request(struct sntp_msg *req)
{
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b082      	sub	sp, #8
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
  memset(req, 0, SNTP_MSG_LEN);
 8012cac:	2230      	movs	r2, #48	; 0x30
 8012cae:	2100      	movs	r1, #0
 8012cb0:	6878      	ldr	r0, [r7, #4]
 8012cb2:	f013 fab1 	bl	8026218 <memset>
  req->li_vn_mode = SNTP_LI_NO_WARNING | SNTP_VERSION | SNTP_MODE_CLIENT;
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	2223      	movs	r2, #35	; 0x23
 8012cba:	701a      	strb	r2, [r3, #0]
# endif
    req->transmit_timestamp[0] = sec;
    req->transmit_timestamp[1] = frac;
  }
#endif /* SNTP_CHECK_RESPONSE >= 2 || SNTP_COMP_ROUNDTRIP */
}
 8012cbc:	bf00      	nop
 8012cbe:	3708      	adds	r7, #8
 8012cc0:	46bd      	mov	sp, r7
 8012cc2:	bd80      	pop	{r7, pc}

08012cc4 <sntp_retry>:
 *
 * @param arg is unused (only necessary to conform to sys_timeout)
 */
static void
sntp_retry(void *arg)
{
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	b084      	sub	sp, #16
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	6078      	str	r0, [r7, #4]

  LWIP_DEBUGF(SNTP_DEBUG_STATE, ("sntp_retry: Next request will be sent in %"U32_F" ms\n",
                                 sntp_retry_timeout));

  /* set up a timer to send a retry and increase the retry delay */
  sys_timeout(sntp_retry_timeout, sntp_request, NULL);
 8012ccc:	4b0d      	ldr	r3, [pc, #52]	; (8012d04 <sntp_retry+0x40>)
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	2200      	movs	r2, #0
 8012cd2:	490d      	ldr	r1, [pc, #52]	; (8012d08 <sntp_retry+0x44>)
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	f009 fd87 	bl	801c7e8 <sys_timeout>

#if SNTP_RETRY_TIMEOUT_EXP
  {
    u32_t new_retry_timeout;
    /* increase the timeout for next retry */
    new_retry_timeout = sntp_retry_timeout << 1;
 8012cda:	4b0a      	ldr	r3, [pc, #40]	; (8012d04 <sntp_retry+0x40>)
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	005b      	lsls	r3, r3, #1
 8012ce0:	60fb      	str	r3, [r7, #12]
    /* limit to maximum timeout and prevent overflow */
    if ((new_retry_timeout <= SNTP_RETRY_TIMEOUT_MAX) &&
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	4a09      	ldr	r2, [pc, #36]	; (8012d0c <sntp_retry+0x48>)
 8012ce6:	4293      	cmp	r3, r2
 8012ce8:	d807      	bhi.n	8012cfa <sntp_retry+0x36>
        (new_retry_timeout > sntp_retry_timeout)) {
 8012cea:	4b06      	ldr	r3, [pc, #24]	; (8012d04 <sntp_retry+0x40>)
 8012cec:	681b      	ldr	r3, [r3, #0]
    if ((new_retry_timeout <= SNTP_RETRY_TIMEOUT_MAX) &&
 8012cee:	68fa      	ldr	r2, [r7, #12]
 8012cf0:	429a      	cmp	r2, r3
 8012cf2:	d902      	bls.n	8012cfa <sntp_retry+0x36>
      sntp_retry_timeout = new_retry_timeout;
 8012cf4:	4a03      	ldr	r2, [pc, #12]	; (8012d04 <sntp_retry+0x40>)
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* SNTP_RETRY_TIMEOUT_EXP */
}
 8012cfa:	bf00      	nop
 8012cfc:	3710      	adds	r7, #16
 8012cfe:	46bd      	mov	sp, r7
 8012d00:	bd80      	pop	{r7, pc}
 8012d02:	bf00      	nop
 8012d04:	24004ab0 	.word	0x24004ab0
 8012d08:	08012ee1 	.word	0x08012ee1
 8012d0c:	000249f0 	.word	0x000249f0

08012d10 <sntp_recv>:
#endif /* SNTP_SUPPORT_MULTIPLE_SERVERS */

/** UDP recv callback for the sntp pcb */
static void
sntp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b088      	sub	sp, #32
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	60f8      	str	r0, [r7, #12]
 8012d18:	60b9      	str	r1, [r7, #8]
 8012d1a:	607a      	str	r2, [r7, #4]
 8012d1c:	603b      	str	r3, [r7, #0]
  err_t err;

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);

  err = ERR_ARG;
 8012d1e:	23f0      	movs	r3, #240	; 0xf0
 8012d20:	77fb      	strb	r3, [r7, #31]
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);
#endif /* SNTP_CHECK_RESPONSE >= 1 */
  {
    /* process the response */
    if (p->tot_len == SNTP_MSG_LEN) {
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	891b      	ldrh	r3, [r3, #8]
 8012d26:	2b30      	cmp	r3, #48	; 0x30
 8012d28:	d12d      	bne.n	8012d86 <sntp_recv+0x76>
      mode = pbuf_get_at(p, SNTP_OFFSET_LI_VN_MODE) & SNTP_MODE_MASK;
 8012d2a:	2100      	movs	r1, #0
 8012d2c:	6878      	ldr	r0, [r7, #4]
 8012d2e:	f003 fa83 	bl	8016238 <pbuf_get_at>
 8012d32:	4603      	mov	r3, r0
 8012d34:	f003 0307 	and.w	r3, r3, #7
 8012d38:	77bb      	strb	r3, [r7, #30]
      /* if this is a SNTP response... */
      if (((sntp_opmode == SNTP_OPMODE_POLL)       && (mode == SNTP_MODE_SERVER)) ||
 8012d3a:	4b30      	ldr	r3, [pc, #192]	; (8012dfc <sntp_recv+0xec>)
 8012d3c:	781b      	ldrb	r3, [r3, #0]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d102      	bne.n	8012d48 <sntp_recv+0x38>
 8012d42:	7fbb      	ldrb	r3, [r7, #30]
 8012d44:	2b04      	cmp	r3, #4
 8012d46:	d006      	beq.n	8012d56 <sntp_recv+0x46>
          ((sntp_opmode == SNTP_OPMODE_LISTENONLY) && (mode == SNTP_MODE_BROADCAST))) {
 8012d48:	4b2c      	ldr	r3, [pc, #176]	; (8012dfc <sntp_recv+0xec>)
 8012d4a:	781b      	ldrb	r3, [r3, #0]
      if (((sntp_opmode == SNTP_OPMODE_POLL)       && (mode == SNTP_MODE_SERVER)) ||
 8012d4c:	2b01      	cmp	r3, #1
 8012d4e:	d118      	bne.n	8012d82 <sntp_recv+0x72>
          ((sntp_opmode == SNTP_OPMODE_LISTENONLY) && (mode == SNTP_MODE_BROADCAST))) {
 8012d50:	7fbb      	ldrb	r3, [r7, #30]
 8012d52:	2b05      	cmp	r3, #5
 8012d54:	d115      	bne.n	8012d82 <sntp_recv+0x72>
        stratum = pbuf_get_at(p, SNTP_OFFSET_STRATUM);
 8012d56:	2101      	movs	r1, #1
 8012d58:	6878      	ldr	r0, [r7, #4]
 8012d5a:	f003 fa6d 	bl	8016238 <pbuf_get_at>
 8012d5e:	4603      	mov	r3, r0
 8012d60:	777b      	strb	r3, [r7, #29]

        if (stratum == SNTP_STRATUM_KOD) {
 8012d62:	7f7b      	ldrb	r3, [r7, #29]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d102      	bne.n	8012d6e <sntp_recv+0x5e>
          /* Kiss-of-death packet. Use another server or increase UPDATE_DELAY. */
          err = SNTP_ERR_KOD;
 8012d68:	2301      	movs	r3, #1
 8012d6a:	77fb      	strb	r3, [r7, #31]
        if (stratum == SNTP_STRATUM_KOD) {
 8012d6c:	e00b      	b.n	8012d86 <sntp_recv+0x76>
          LWIP_DEBUGF(SNTP_DEBUG_STATE, ("sntp_recv: Received Kiss-of-Death\n"));
        } else {
          pbuf_copy_partial(p, &timestamps, sizeof(timestamps), SNTP_OFFSET_TIMESTAMPS);
 8012d6e:	f107 0110 	add.w	r1, r7, #16
 8012d72:	2328      	movs	r3, #40	; 0x28
 8012d74:	2208      	movs	r2, #8
 8012d76:	6878      	ldr	r0, [r7, #4]
 8012d78:	f003 f882 	bl	8015e80 <pbuf_copy_partial>
          } else
#endif /* SNTP_CHECK_RESPONSE >= 2 */
            /* @todo: add code for SNTP_CHECK_RESPONSE >= 3 and >= 4 here */
          {
            /* correct answer */
            err = ERR_OK;
 8012d7c:	2300      	movs	r3, #0
 8012d7e:	77fb      	strb	r3, [r7, #31]
        if (stratum == SNTP_STRATUM_KOD) {
 8012d80:	e001      	b.n	8012d86 <sntp_recv+0x76>
          }
        }
      } else {
        LWIP_DEBUGF(SNTP_DEBUG_WARN, ("sntp_recv: Invalid mode in response: %"U16_F"\n", (u16_t)mode));
        /* wait for correct response */
        err = ERR_TIMEOUT;
 8012d82:	23fd      	movs	r3, #253	; 0xfd
 8012d84:	77fb      	strb	r3, [r7, #31]
    /* packet from wrong remote address or port, wait for correct response */
    err = ERR_TIMEOUT;
  }
#endif /* SNTP_CHECK_RESPONSE >= 1 */

  pbuf_free(p);
 8012d86:	6878      	ldr	r0, [r7, #4]
 8012d88:	f002 fe74 	bl	8015a74 <pbuf_free>

  if (err == ERR_OK) {
 8012d8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d124      	bne.n	8012dde <sntp_recv+0xce>
    /* correct packet received: process it it */
    sntp_process(&timestamps);
 8012d94:	f107 0310 	add.w	r3, r7, #16
 8012d98:	4618      	mov	r0, r3
 8012d9a:	f7ff ff65 	bl	8012c68 <sntp_process>

#if SNTP_MONITOR_SERVER_REACHABILITY
    /* indicate that server responded */
    sntp_servers[sntp_current_server].reachability |= 1;
 8012d9e:	4b18      	ldr	r3, [pc, #96]	; (8012e00 <sntp_recv+0xf0>)
 8012da0:	7a1b      	ldrb	r3, [r3, #8]
 8012da2:	f043 0301 	orr.w	r3, r3, #1
 8012da6:	b2da      	uxtb	r2, r3
 8012da8:	4b15      	ldr	r3, [pc, #84]	; (8012e00 <sntp_recv+0xf0>)
 8012daa:	721a      	strb	r2, [r3, #8]
#endif /* SNTP_MONITOR_SERVER_REACHABILITY */
    /* Set up timeout for next request (only if poll response was received)*/
    if (sntp_opmode == SNTP_OPMODE_POLL) {
 8012dac:	4b13      	ldr	r3, [pc, #76]	; (8012dfc <sntp_recv+0xec>)
 8012dae:	781b      	ldrb	r3, [r3, #0]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d11f      	bne.n	8012df4 <sntp_recv+0xe4>
      u32_t sntp_update_delay;
      sys_untimeout(sntp_try_next_server, NULL);
 8012db4:	2100      	movs	r1, #0
 8012db6:	4813      	ldr	r0, [pc, #76]	; (8012e04 <sntp_recv+0xf4>)
 8012db8:	f009 fd3c 	bl	801c834 <sys_untimeout>
      sys_untimeout(sntp_request, NULL);
 8012dbc:	2100      	movs	r1, #0
 8012dbe:	4812      	ldr	r0, [pc, #72]	; (8012e08 <sntp_recv+0xf8>)
 8012dc0:	f009 fd38 	bl	801c834 <sys_untimeout>

      /* Correct response, reset retry timeout */
      SNTP_RESET_RETRY_TIMEOUT();
 8012dc4:	4b11      	ldr	r3, [pc, #68]	; (8012e0c <sntp_recv+0xfc>)
 8012dc6:	f643 2298 	movw	r2, #15000	; 0x3a98
 8012dca:	601a      	str	r2, [r3, #0]

      sntp_update_delay = (u32_t)SNTP_UPDATE_DELAY;
 8012dcc:	f644 6320 	movw	r3, #20000	; 0x4e20
 8012dd0:	61bb      	str	r3, [r7, #24]
      sys_timeout(sntp_update_delay, sntp_request, NULL);
 8012dd2:	2200      	movs	r2, #0
 8012dd4:	490c      	ldr	r1, [pc, #48]	; (8012e08 <sntp_recv+0xf8>)
 8012dd6:	69b8      	ldr	r0, [r7, #24]
 8012dd8:	f009 fd06 	bl	801c7e8 <sys_timeout>
      sntp_try_next_server(NULL);
    }
  } else {
    /* ignore any broken packet, poll mode: retry after timeout to avoid flooding */
  }
}
 8012ddc:	e00a      	b.n	8012df4 <sntp_recv+0xe4>
  } else if (err == SNTP_ERR_KOD) {
 8012dde:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012de2:	2b01      	cmp	r3, #1
 8012de4:	d106      	bne.n	8012df4 <sntp_recv+0xe4>
    if (sntp_opmode == SNTP_OPMODE_POLL) {
 8012de6:	4b05      	ldr	r3, [pc, #20]	; (8012dfc <sntp_recv+0xec>)
 8012de8:	781b      	ldrb	r3, [r3, #0]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d102      	bne.n	8012df4 <sntp_recv+0xe4>
      sntp_try_next_server(NULL);
 8012dee:	2000      	movs	r0, #0
 8012df0:	f7ff ff68 	bl	8012cc4 <sntp_retry>
}
 8012df4:	bf00      	nop
 8012df6:	3720      	adds	r7, #32
 8012df8:	46bd      	mov	sp, r7
 8012dfa:	bd80      	pop	{r7, pc}
 8012dfc:	24004a9c 	.word	0x24004a9c
 8012e00:	24004aa4 	.word	0x24004aa4
 8012e04:	08012cc5 	.word	0x08012cc5
 8012e08:	08012ee1 	.word	0x08012ee1
 8012e0c:	24004ab0 	.word	0x24004ab0

08012e10 <sntp_send_request>:
 *
 * @param server_addr resolved IP address of the SNTP server
 */
static void
sntp_send_request(const ip_addr_t *server_addr)
{
 8012e10:	b580      	push	{r7, lr}
 8012e12:	b084      	sub	sp, #16
 8012e14:	af00      	add	r7, sp, #0
 8012e16:	6078      	str	r0, [r7, #4]
  struct pbuf *p;

  LWIP_ASSERT("server_addr != NULL", server_addr != NULL);
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d106      	bne.n	8012e2c <sntp_send_request+0x1c>
 8012e1e:	4b1c      	ldr	r3, [pc, #112]	; (8012e90 <sntp_send_request+0x80>)
 8012e20:	f44f 7208 	mov.w	r2, #544	; 0x220
 8012e24:	491b      	ldr	r1, [pc, #108]	; (8012e94 <sntp_send_request+0x84>)
 8012e26:	481c      	ldr	r0, [pc, #112]	; (8012e98 <sntp_send_request+0x88>)
 8012e28:	f014 f854 	bl	8026ed4 <iprintf>

  p = pbuf_alloc(PBUF_TRANSPORT, SNTP_MSG_LEN, PBUF_RAM);
 8012e2c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012e30:	2130      	movs	r1, #48	; 0x30
 8012e32:	2036      	movs	r0, #54	; 0x36
 8012e34:	f002 fb08 	bl	8015448 <pbuf_alloc>
 8012e38:	60f8      	str	r0, [r7, #12]
  if (p != NULL) {
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d01c      	beq.n	8012e7a <sntp_send_request+0x6a>
    struct sntp_msg *sntpmsg = (struct sntp_msg *)p->payload;
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	685b      	ldr	r3, [r3, #4]
 8012e44:	60bb      	str	r3, [r7, #8]
    LWIP_DEBUGF(SNTP_DEBUG_STATE, ("sntp_send_request: Sending request to server\n"));
    /* initialize request message */
    sntp_initialize_request(sntpmsg);
 8012e46:	68b8      	ldr	r0, [r7, #8]
 8012e48:	f7ff ff2c 	bl	8012ca4 <sntp_initialize_request>
    /* send request */
    udp_sendto(sntp_pcb, p, server_addr, SNTP_PORT);
 8012e4c:	4b13      	ldr	r3, [pc, #76]	; (8012e9c <sntp_send_request+0x8c>)
 8012e4e:	6818      	ldr	r0, [r3, #0]
 8012e50:	237b      	movs	r3, #123	; 0x7b
 8012e52:	687a      	ldr	r2, [r7, #4]
 8012e54:	68f9      	ldr	r1, [r7, #12]
 8012e56:	f009 ff8f 	bl	801cd78 <udp_sendto>
    /* free the pbuf after sending it */
    pbuf_free(p);
 8012e5a:	68f8      	ldr	r0, [r7, #12]
 8012e5c:	f002 fe0a 	bl	8015a74 <pbuf_free>
#if SNTP_MONITOR_SERVER_REACHABILITY
    /* indicate new packet has been sent */
    sntp_servers[sntp_current_server].reachability <<= 1;
 8012e60:	4b0f      	ldr	r3, [pc, #60]	; (8012ea0 <sntp_send_request+0x90>)
 8012e62:	7a1b      	ldrb	r3, [r3, #8]
 8012e64:	005b      	lsls	r3, r3, #1
 8012e66:	b2da      	uxtb	r2, r3
 8012e68:	4b0d      	ldr	r3, [pc, #52]	; (8012ea0 <sntp_send_request+0x90>)
 8012e6a:	721a      	strb	r2, [r3, #8]
#endif /* SNTP_MONITOR_SERVER_REACHABILITY */
    /* set up receive timeout: try next server or retry on timeout */
    sys_timeout((u32_t)SNTP_RECV_TIMEOUT, sntp_try_next_server, NULL);
 8012e6c:	2200      	movs	r2, #0
 8012e6e:	490d      	ldr	r1, [pc, #52]	; (8012ea4 <sntp_send_request+0x94>)
 8012e70:	f643 2098 	movw	r0, #15000	; 0x3a98
 8012e74:	f009 fcb8 	bl	801c7e8 <sys_timeout>
    LWIP_DEBUGF(SNTP_DEBUG_SERIOUS, ("sntp_send_request: Out of memory, trying again in %"U32_F" ms\n",
                                     (u32_t)SNTP_RETRY_TIMEOUT));
    /* out of memory: set up a timer to send a retry */
    sys_timeout((u32_t)SNTP_RETRY_TIMEOUT, sntp_request, NULL);
  }
}
 8012e78:	e005      	b.n	8012e86 <sntp_send_request+0x76>
    sys_timeout((u32_t)SNTP_RETRY_TIMEOUT, sntp_request, NULL);
 8012e7a:	2200      	movs	r2, #0
 8012e7c:	490a      	ldr	r1, [pc, #40]	; (8012ea8 <sntp_send_request+0x98>)
 8012e7e:	f643 2098 	movw	r0, #15000	; 0x3a98
 8012e82:	f009 fcb1 	bl	801c7e8 <sys_timeout>
}
 8012e86:	bf00      	nop
 8012e88:	3710      	adds	r7, #16
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	bd80      	pop	{r7, pc}
 8012e8e:	bf00      	nop
 8012e90:	0802b3e4 	.word	0x0802b3e4
 8012e94:	0802b41c 	.word	0x0802b41c
 8012e98:	0802b430 	.word	0x0802b430
 8012e9c:	24004aa0 	.word	0x24004aa0
 8012ea0:	24004aa4 	.word	0x24004aa4
 8012ea4:	08012cc5 	.word	0x08012cc5
 8012ea8:	08012ee1 	.word	0x08012ee1

08012eac <sntp_dns_found>:
/**
 * DNS found callback when using DNS names as server address.
 */
static void
sntp_dns_found(const char *hostname, const ip_addr_t *ipaddr, void *arg)
{
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b084      	sub	sp, #16
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	60f8      	str	r0, [r7, #12]
 8012eb4:	60b9      	str	r1, [r7, #8]
 8012eb6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(hostname);
  LWIP_UNUSED_ARG(arg);

  if (ipaddr != NULL) {
 8012eb8:	68bb      	ldr	r3, [r7, #8]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d007      	beq.n	8012ece <sntp_dns_found+0x22>
    /* Address resolved, send request */
    LWIP_DEBUGF(SNTP_DEBUG_STATE, ("sntp_dns_found: Server address resolved, sending request\n"));
    sntp_servers[sntp_current_server].addr = *ipaddr;
 8012ebe:	4a07      	ldr	r2, [pc, #28]	; (8012edc <sntp_dns_found+0x30>)
 8012ec0:	68bb      	ldr	r3, [r7, #8]
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	6053      	str	r3, [r2, #4]
    sntp_send_request(ipaddr);
 8012ec6:	68b8      	ldr	r0, [r7, #8]
 8012ec8:	f7ff ffa2 	bl	8012e10 <sntp_send_request>
  } else {
    /* DNS resolving failed -> try another server */
    LWIP_DEBUGF(SNTP_DEBUG_WARN_STATE, ("sntp_dns_found: Failed to resolve server address resolved, trying next server\n"));
    sntp_try_next_server(NULL);
  }
}
 8012ecc:	e002      	b.n	8012ed4 <sntp_dns_found+0x28>
    sntp_try_next_server(NULL);
 8012ece:	2000      	movs	r0, #0
 8012ed0:	f7ff fef8 	bl	8012cc4 <sntp_retry>
}
 8012ed4:	bf00      	nop
 8012ed6:	3710      	adds	r7, #16
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	bd80      	pop	{r7, pc}
 8012edc:	24004aa4 	.word	0x24004aa4

08012ee0 <sntp_request>:
 *
 * @param arg is unused (only necessary to conform to sys_timeout)
 */
static void
sntp_request(void *arg)
{
 8012ee0:	b580      	push	{r7, lr}
 8012ee2:	b084      	sub	sp, #16
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	6078      	str	r0, [r7, #4]

  LWIP_UNUSED_ARG(arg);

  /* initialize SNTP server address */
#if SNTP_SERVER_DNS
  if (sntp_servers[sntp_current_server].name) {
 8012ee8:	4b1e      	ldr	r3, [pc, #120]	; (8012f64 <sntp_request+0x84>)
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d019      	beq.n	8012f24 <sntp_request+0x44>
    /* always resolve the name and rely on dns-internal caching & timeout */
    ip_addr_set_zero(&sntp_servers[sntp_current_server].addr);
 8012ef0:	4b1c      	ldr	r3, [pc, #112]	; (8012f64 <sntp_request+0x84>)
 8012ef2:	2200      	movs	r2, #0
 8012ef4:	605a      	str	r2, [r3, #4]
    err = dns_gethostbyname(sntp_servers[sntp_current_server].name, &sntp_server_address,
 8012ef6:	4b1b      	ldr	r3, [pc, #108]	; (8012f64 <sntp_request+0x84>)
 8012ef8:	6818      	ldr	r0, [r3, #0]
 8012efa:	f107 0108 	add.w	r1, r7, #8
 8012efe:	2300      	movs	r3, #0
 8012f00:	4a19      	ldr	r2, [pc, #100]	; (8012f68 <sntp_request+0x88>)
 8012f02:	f001 f8a3 	bl	801404c <dns_gethostbyname>
 8012f06:	4603      	mov	r3, r0
 8012f08:	73fb      	strb	r3, [r7, #15]
                            sntp_dns_found, NULL);
    if (err == ERR_INPROGRESS) {
 8012f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012f0e:	f113 0f05 	cmn.w	r3, #5
 8012f12:	d023      	beq.n	8012f5c <sntp_request+0x7c>
      /* DNS request sent, wait for sntp_dns_found being called */
      LWIP_DEBUGF(SNTP_DEBUG_STATE, ("sntp_request: Waiting for server address to be resolved.\n"));
      return;
    } else if (err == ERR_OK) {
 8012f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d10e      	bne.n	8012f3a <sntp_request+0x5a>
      sntp_servers[sntp_current_server].addr = sntp_server_address;
 8012f1c:	4a11      	ldr	r2, [pc, #68]	; (8012f64 <sntp_request+0x84>)
 8012f1e:	68bb      	ldr	r3, [r7, #8]
 8012f20:	6053      	str	r3, [r2, #4]
 8012f22:	e00a      	b.n	8012f3a <sntp_request+0x5a>
    }
  } else
#endif /* SNTP_SERVER_DNS */
  {
    sntp_server_address = sntp_servers[sntp_current_server].addr;
 8012f24:	4b0f      	ldr	r3, [pc, #60]	; (8012f64 <sntp_request+0x84>)
 8012f26:	685b      	ldr	r3, [r3, #4]
 8012f28:	60bb      	str	r3, [r7, #8]
    err = (ip_addr_isany_val(sntp_server_address)) ? ERR_ARG : ERR_OK;
 8012f2a:	68bb      	ldr	r3, [r7, #8]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d102      	bne.n	8012f36 <sntp_request+0x56>
 8012f30:	f06f 030f 	mvn.w	r3, #15
 8012f34:	e000      	b.n	8012f38 <sntp_request+0x58>
 8012f36:	2300      	movs	r3, #0
 8012f38:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 8012f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d105      	bne.n	8012f4e <sntp_request+0x6e>
    LWIP_DEBUGF(SNTP_DEBUG_TRACE, ("sntp_request: current server address is %s\n",
                                   ipaddr_ntoa(&sntp_server_address)));
    sntp_send_request(&sntp_server_address);
 8012f42:	f107 0308 	add.w	r3, r7, #8
 8012f46:	4618      	mov	r0, r3
 8012f48:	f7ff ff62 	bl	8012e10 <sntp_send_request>
 8012f4c:	e007      	b.n	8012f5e <sntp_request+0x7e>
  } else {
    /* address conversion failed, try another server */
    LWIP_DEBUGF(SNTP_DEBUG_WARN_STATE, ("sntp_request: Invalid server address, trying next server.\n"));
    sys_timeout((u32_t)SNTP_RETRY_TIMEOUT, sntp_try_next_server, NULL);
 8012f4e:	2200      	movs	r2, #0
 8012f50:	4906      	ldr	r1, [pc, #24]	; (8012f6c <sntp_request+0x8c>)
 8012f52:	f643 2098 	movw	r0, #15000	; 0x3a98
 8012f56:	f009 fc47 	bl	801c7e8 <sys_timeout>
 8012f5a:	e000      	b.n	8012f5e <sntp_request+0x7e>
      return;
 8012f5c:	bf00      	nop
  }
}
 8012f5e:	3710      	adds	r7, #16
 8012f60:	46bd      	mov	sp, r7
 8012f62:	bd80      	pop	{r7, pc}
 8012f64:	24004aa4 	.word	0x24004aa4
 8012f68:	08012ead 	.word	0x08012ead
 8012f6c:	08012cc5 	.word	0x08012cc5

08012f70 <sntp_init>:
 * Initialize this module.
 * Send out request instantly or after SNTP_STARTUP_DELAY(_FUNC).
 */
void
sntp_init(void)
{
 8012f70:	b580      	push	{r7, lr}
 8012f72:	af00      	add	r7, sp, #0
#else
#error SNTP_SERVER_ADDRESS string not supported SNTP_SERVER_DNS==0
#endif
#endif /* SNTP_SERVER_ADDRESS */

  if (sntp_pcb == NULL) {
 8012f74:	4b28      	ldr	r3, [pc, #160]	; (8013018 <sntp_init+0xa8>)
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d14a      	bne.n	8013012 <sntp_init+0xa2>
    sntp_pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 8012f7c:	202e      	movs	r0, #46	; 0x2e
 8012f7e:	f00a fa48 	bl	801d412 <udp_new_ip_type>
 8012f82:	4603      	mov	r3, r0
 8012f84:	4a24      	ldr	r2, [pc, #144]	; (8013018 <sntp_init+0xa8>)
 8012f86:	6013      	str	r3, [r2, #0]
    LWIP_ASSERT("Failed to allocate udp pcb for sntp client", sntp_pcb != NULL);
 8012f88:	4b23      	ldr	r3, [pc, #140]	; (8013018 <sntp_init+0xa8>)
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d106      	bne.n	8012f9e <sntp_init+0x2e>
 8012f90:	4b22      	ldr	r3, [pc, #136]	; (801301c <sntp_init+0xac>)
 8012f92:	f240 2296 	movw	r2, #662	; 0x296
 8012f96:	4922      	ldr	r1, [pc, #136]	; (8013020 <sntp_init+0xb0>)
 8012f98:	4822      	ldr	r0, [pc, #136]	; (8013024 <sntp_init+0xb4>)
 8012f9a:	f013 ff9b 	bl	8026ed4 <iprintf>
    if (sntp_pcb != NULL) {
 8012f9e:	4b1e      	ldr	r3, [pc, #120]	; (8013018 <sntp_init+0xa8>)
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d035      	beq.n	8013012 <sntp_init+0xa2>
      udp_recv(sntp_pcb, sntp_recv, NULL);
 8012fa6:	4b1c      	ldr	r3, [pc, #112]	; (8013018 <sntp_init+0xa8>)
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	2200      	movs	r2, #0
 8012fac:	491e      	ldr	r1, [pc, #120]	; (8013028 <sntp_init+0xb8>)
 8012fae:	4618      	mov	r0, r3
 8012fb0:	f00a f9b6 	bl	801d320 <udp_recv>

      if (sntp_opmode == SNTP_OPMODE_POLL) {
 8012fb4:	4b1d      	ldr	r3, [pc, #116]	; (801302c <sntp_init+0xbc>)
 8012fb6:	781b      	ldrb	r3, [r3, #0]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d116      	bne.n	8012fea <sntp_init+0x7a>
        SNTP_RESET_RETRY_TIMEOUT();
 8012fbc:	4b1c      	ldr	r3, [pc, #112]	; (8013030 <sntp_init+0xc0>)
 8012fbe:	f643 2298 	movw	r2, #15000	; 0x3a98
 8012fc2:	601a      	str	r2, [r3, #0]
#if SNTP_STARTUP_DELAY
        sys_timeout((u32_t)SNTP_STARTUP_DELAY_FUNC, sntp_request, NULL);
 8012fc4:	f014 f814 	bl	8026ff0 <rand>
 8012fc8:	4603      	mov	r3, r0
 8012fca:	461a      	mov	r2, r3
 8012fcc:	4b19      	ldr	r3, [pc, #100]	; (8013034 <sntp_init+0xc4>)
 8012fce:	fba3 1302 	umull	r1, r3, r3, r2
 8012fd2:	0b1b      	lsrs	r3, r3, #12
 8012fd4:	f241 3188 	movw	r1, #5000	; 0x1388
 8012fd8:	fb01 f303 	mul.w	r3, r1, r3
 8012fdc:	1ad3      	subs	r3, r2, r3
 8012fde:	2200      	movs	r2, #0
 8012fe0:	4915      	ldr	r1, [pc, #84]	; (8013038 <sntp_init+0xc8>)
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	f009 fc00 	bl	801c7e8 <sys_timeout>
        ip_set_option(sntp_pcb, SOF_BROADCAST);
        udp_bind(sntp_pcb, IP_ANY_TYPE, SNTP_PORT);
      }
    }
  }
}
 8012fe8:	e013      	b.n	8013012 <sntp_init+0xa2>
      } else if (sntp_opmode == SNTP_OPMODE_LISTENONLY) {
 8012fea:	4b10      	ldr	r3, [pc, #64]	; (801302c <sntp_init+0xbc>)
 8012fec:	781b      	ldrb	r3, [r3, #0]
 8012fee:	2b01      	cmp	r3, #1
 8012ff0:	d10f      	bne.n	8013012 <sntp_init+0xa2>
        ip_set_option(sntp_pcb, SOF_BROADCAST);
 8012ff2:	4b09      	ldr	r3, [pc, #36]	; (8013018 <sntp_init+0xa8>)
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	7a5a      	ldrb	r2, [r3, #9]
 8012ff8:	4b07      	ldr	r3, [pc, #28]	; (8013018 <sntp_init+0xa8>)
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	f042 0220 	orr.w	r2, r2, #32
 8013000:	b2d2      	uxtb	r2, r2
 8013002:	725a      	strb	r2, [r3, #9]
        udp_bind(sntp_pcb, IP_ANY_TYPE, SNTP_PORT);
 8013004:	4b04      	ldr	r3, [pc, #16]	; (8013018 <sntp_init+0xa8>)
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	227b      	movs	r2, #123	; 0x7b
 801300a:	490c      	ldr	r1, [pc, #48]	; (801303c <sntp_init+0xcc>)
 801300c:	4618      	mov	r0, r3
 801300e:	f00a f869 	bl	801d0e4 <udp_bind>
}
 8013012:	bf00      	nop
 8013014:	bd80      	pop	{r7, pc}
 8013016:	bf00      	nop
 8013018:	24004aa0 	.word	0x24004aa0
 801301c:	0802b3e4 	.word	0x0802b3e4
 8013020:	0802b458 	.word	0x0802b458
 8013024:	0802b430 	.word	0x0802b430
 8013028:	08012d11 	.word	0x08012d11
 801302c:	24004a9c 	.word	0x24004a9c
 8013030:	24004ab0 	.word	0x24004ab0
 8013034:	d1b71759 	.word	0xd1b71759
 8013038:	08012ee1 	.word	0x08012ee1
 801303c:	0802ec60 	.word	0x0802ec60

08013040 <sntp_setoperatingmode>:
 * Sets the operating mode.
 * @param operating_mode one of the available operating modes
 */
void
sntp_setoperatingmode(u8_t operating_mode)
{
 8013040:	b580      	push	{r7, lr}
 8013042:	b082      	sub	sp, #8
 8013044:	af00      	add	r7, sp, #0
 8013046:	4603      	mov	r3, r0
 8013048:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("Invalid operating mode", operating_mode <= SNTP_OPMODE_LISTENONLY);
 801304a:	79fb      	ldrb	r3, [r7, #7]
 801304c:	2b01      	cmp	r3, #1
 801304e:	d906      	bls.n	801305e <sntp_setoperatingmode+0x1e>
 8013050:	4b0c      	ldr	r3, [pc, #48]	; (8013084 <sntp_setoperatingmode+0x44>)
 8013052:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013056:	490c      	ldr	r1, [pc, #48]	; (8013088 <sntp_setoperatingmode+0x48>)
 8013058:	480c      	ldr	r0, [pc, #48]	; (801308c <sntp_setoperatingmode+0x4c>)
 801305a:	f013 ff3b 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("Operating mode must not be set while SNTP client is running", sntp_pcb == NULL);
 801305e:	4b0c      	ldr	r3, [pc, #48]	; (8013090 <sntp_setoperatingmode+0x50>)
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d006      	beq.n	8013074 <sntp_setoperatingmode+0x34>
 8013066:	4b07      	ldr	r3, [pc, #28]	; (8013084 <sntp_setoperatingmode+0x44>)
 8013068:	f240 22d2 	movw	r2, #722	; 0x2d2
 801306c:	4909      	ldr	r1, [pc, #36]	; (8013094 <sntp_setoperatingmode+0x54>)
 801306e:	4807      	ldr	r0, [pc, #28]	; (801308c <sntp_setoperatingmode+0x4c>)
 8013070:	f013 ff30 	bl	8026ed4 <iprintf>
  sntp_opmode = operating_mode;
 8013074:	4a08      	ldr	r2, [pc, #32]	; (8013098 <sntp_setoperatingmode+0x58>)
 8013076:	79fb      	ldrb	r3, [r7, #7]
 8013078:	7013      	strb	r3, [r2, #0]
}
 801307a:	bf00      	nop
 801307c:	3708      	adds	r7, #8
 801307e:	46bd      	mov	sp, r7
 8013080:	bd80      	pop	{r7, pc}
 8013082:	bf00      	nop
 8013084:	0802b3e4 	.word	0x0802b3e4
 8013088:	0802b484 	.word	0x0802b484
 801308c:	0802b430 	.word	0x0802b430
 8013090:	24004aa0 	.word	0x24004aa0
 8013094:	0802b49c 	.word	0x0802b49c
 8013098:	24004a9c 	.word	0x24004a9c

0801309c <sntp_setservername>:
 * @param idx the index of the NTP server to set must be < SNTP_MAX_SERVERS
 * @param server DNS name of the NTP server to set, to be resolved at contact time
 */
void
sntp_setservername(u8_t idx, const char *server)
{
 801309c:	b480      	push	{r7}
 801309e:	b083      	sub	sp, #12
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	4603      	mov	r3, r0
 80130a4:	6039      	str	r1, [r7, #0]
 80130a6:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();
  if (idx < SNTP_MAX_SERVERS) {
 80130a8:	79fb      	ldrb	r3, [r7, #7]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d108      	bne.n	80130c0 <sntp_setservername+0x24>
    sntp_servers[idx].name = server;
 80130ae:	79fa      	ldrb	r2, [r7, #7]
 80130b0:	4906      	ldr	r1, [pc, #24]	; (80130cc <sntp_setservername+0x30>)
 80130b2:	4613      	mov	r3, r2
 80130b4:	005b      	lsls	r3, r3, #1
 80130b6:	4413      	add	r3, r2
 80130b8:	009b      	lsls	r3, r3, #2
 80130ba:	440b      	add	r3, r1
 80130bc:	683a      	ldr	r2, [r7, #0]
 80130be:	601a      	str	r2, [r3, #0]
  }
}
 80130c0:	bf00      	nop
 80130c2:	370c      	adds	r7, #12
 80130c4:	46bd      	mov	sp, r7
 80130c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ca:	4770      	bx	lr
 80130cc:	24004aa4 	.word	0x24004aa4

080130d0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80130d0:	b480      	push	{r7}
 80130d2:	b083      	sub	sp, #12
 80130d4:	af00      	add	r7, sp, #0
 80130d6:	4603      	mov	r3, r0
 80130d8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80130da:	88fb      	ldrh	r3, [r7, #6]
 80130dc:	021b      	lsls	r3, r3, #8
 80130de:	b21a      	sxth	r2, r3
 80130e0:	88fb      	ldrh	r3, [r7, #6]
 80130e2:	0a1b      	lsrs	r3, r3, #8
 80130e4:	b29b      	uxth	r3, r3
 80130e6:	b21b      	sxth	r3, r3
 80130e8:	4313      	orrs	r3, r2
 80130ea:	b21b      	sxth	r3, r3
 80130ec:	b29b      	uxth	r3, r3
}
 80130ee:	4618      	mov	r0, r3
 80130f0:	370c      	adds	r7, #12
 80130f2:	46bd      	mov	sp, r7
 80130f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f8:	4770      	bx	lr

080130fa <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80130fa:	b480      	push	{r7}
 80130fc:	b083      	sub	sp, #12
 80130fe:	af00      	add	r7, sp, #0
 8013100:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	061a      	lsls	r2, r3, #24
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	021b      	lsls	r3, r3, #8
 801310a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801310e:	431a      	orrs	r2, r3
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	0a1b      	lsrs	r3, r3, #8
 8013114:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013118:	431a      	orrs	r2, r3
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	0e1b      	lsrs	r3, r3, #24
 801311e:	4313      	orrs	r3, r2
}
 8013120:	4618      	mov	r0, r3
 8013122:	370c      	adds	r7, #12
 8013124:	46bd      	mov	sp, r7
 8013126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801312a:	4770      	bx	lr

0801312c <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 801312c:	b480      	push	{r7}
 801312e:	b087      	sub	sp, #28
 8013130:	af00      	add	r7, sp, #0
 8013132:	60f8      	str	r0, [r7, #12]
 8013134:	60b9      	str	r1, [r7, #8]
 8013136:	607a      	str	r2, [r7, #4]
  char c1, c2;

  do {
    c1 = *str1++;
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	1c5a      	adds	r2, r3, #1
 801313c:	60fa      	str	r2, [r7, #12]
 801313e:	781b      	ldrb	r3, [r3, #0]
 8013140:	75fb      	strb	r3, [r7, #23]
    c2 = *str2++;
 8013142:	68bb      	ldr	r3, [r7, #8]
 8013144:	1c5a      	adds	r2, r3, #1
 8013146:	60ba      	str	r2, [r7, #8]
 8013148:	781b      	ldrb	r3, [r3, #0]
 801314a:	75bb      	strb	r3, [r7, #22]
    if (c1 != c2) {
 801314c:	7dfa      	ldrb	r2, [r7, #23]
 801314e:	7dbb      	ldrb	r3, [r7, #22]
 8013150:	429a      	cmp	r2, r3
 8013152:	d016      	beq.n	8013182 <lwip_strnicmp+0x56>
      char c1_upc = c1 | 0x20;
 8013154:	7dfb      	ldrb	r3, [r7, #23]
 8013156:	f043 0320 	orr.w	r3, r3, #32
 801315a:	757b      	strb	r3, [r7, #21]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801315c:	7d7b      	ldrb	r3, [r7, #21]
 801315e:	2b60      	cmp	r3, #96	; 0x60
 8013160:	d90c      	bls.n	801317c <lwip_strnicmp+0x50>
 8013162:	7d7b      	ldrb	r3, [r7, #21]
 8013164:	2b7a      	cmp	r3, #122	; 0x7a
 8013166:	d809      	bhi.n	801317c <lwip_strnicmp+0x50>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 8013168:	7dbb      	ldrb	r3, [r7, #22]
 801316a:	f043 0320 	orr.w	r3, r3, #32
 801316e:	753b      	strb	r3, [r7, #20]
        if (c1_upc != c2_upc) {
 8013170:	7d7a      	ldrb	r2, [r7, #21]
 8013172:	7d3b      	ldrb	r3, [r7, #20]
 8013174:	429a      	cmp	r2, r3
 8013176:	d003      	beq.n	8013180 <lwip_strnicmp+0x54>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 8013178:	2301      	movs	r3, #1
 801317a:	e00c      	b.n	8013196 <lwip_strnicmp+0x6a>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 801317c:	2301      	movs	r3, #1
 801317e:	e00a      	b.n	8013196 <lwip_strnicmp+0x6a>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8013180:	bf00      	nop
      }
    }
    len--;
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	3b01      	subs	r3, #1
 8013186:	607b      	str	r3, [r7, #4]
  } while ((len != 0) && (c1 != 0));
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d002      	beq.n	8013194 <lwip_strnicmp+0x68>
 801318e:	7dfb      	ldrb	r3, [r7, #23]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d1d1      	bne.n	8013138 <lwip_strnicmp+0xc>
  return 0;
 8013194:	2300      	movs	r3, #0
}
 8013196:	4618      	mov	r0, r3
 8013198:	371c      	adds	r7, #28
 801319a:	46bd      	mov	sp, r7
 801319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a0:	4770      	bx	lr

080131a2 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 80131a2:	b480      	push	{r7}
 80131a4:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 80131a6:	bf00      	nop
 80131a8:	46bd      	mov	sp, r7
 80131aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ae:	4770      	bx	lr

080131b0 <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 80131b0:	b480      	push	{r7}
 80131b2:	b083      	sub	sp, #12
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	4603      	mov	r3, r0
 80131b8:	6039      	str	r1, [r7, #0]
 80131ba:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 80131bc:	79fb      	ldrb	r3, [r7, #7]
 80131be:	2b01      	cmp	r3, #1
 80131c0:	d80f      	bhi.n	80131e2 <dns_setserver+0x32>
    if (dnsserver != NULL) {
 80131c2:	683b      	ldr	r3, [r7, #0]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d006      	beq.n	80131d6 <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 80131c8:	79fb      	ldrb	r3, [r7, #7]
 80131ca:	4909      	ldr	r1, [pc, #36]	; (80131f0 <dns_setserver+0x40>)
 80131cc:	683a      	ldr	r2, [r7, #0]
 80131ce:	6812      	ldr	r2, [r2, #0]
 80131d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 80131d4:	e005      	b.n	80131e2 <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 80131d6:	79fb      	ldrb	r3, [r7, #7]
 80131d8:	4905      	ldr	r1, [pc, #20]	; (80131f0 <dns_setserver+0x40>)
 80131da:	4a06      	ldr	r2, [pc, #24]	; (80131f4 <dns_setserver+0x44>)
 80131dc:	6812      	ldr	r2, [r2, #0]
 80131de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80131e2:	bf00      	nop
 80131e4:	370c      	adds	r7, #12
 80131e6:	46bd      	mov	sp, r7
 80131e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ec:	4770      	bx	lr
 80131ee:	bf00      	nop
 80131f0:	24004f38 	.word	0x24004f38
 80131f4:	0802ec60 	.word	0x0802ec60

080131f8 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 80131f8:	b580      	push	{r7, lr}
 80131fa:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 80131fc:	f000 fc54 	bl	8013aa8 <dns_check_entries>
}
 8013200:	bf00      	nop
 8013202:	bd80      	pop	{r7, pc}

08013204 <dns_lookup>:
 *         was not found in the cached dns_table.
 * @return ERR_OK if found, ERR_ARG if not found
 */
static err_t
dns_lookup(const char *name, ip_addr_t *addr LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype))
{
 8013204:	b580      	push	{r7, lr}
 8013206:	b084      	sub	sp, #16
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
 801320c:	6039      	str	r1, [r7, #0]
    return ERR_OK;
  }
#endif /* DNS_LOOKUP_LOCAL_EXTERN */

  /* Walk through name list, return entry if found. If not, return NULL. */
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 801320e:	2300      	movs	r3, #0
 8013210:	73fb      	strb	r3, [r7, #15]
 8013212:	e02e      	b.n	8013272 <dns_lookup+0x6e>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 8013214:	7bfa      	ldrb	r2, [r7, #15]
 8013216:	491b      	ldr	r1, [pc, #108]	; (8013284 <dns_lookup+0x80>)
 8013218:	4613      	mov	r3, r2
 801321a:	011b      	lsls	r3, r3, #4
 801321c:	4413      	add	r3, r2
 801321e:	011b      	lsls	r3, r3, #4
 8013220:	440b      	add	r3, r1
 8013222:	330a      	adds	r3, #10
 8013224:	781b      	ldrb	r3, [r3, #0]
 8013226:	2b03      	cmp	r3, #3
 8013228:	d120      	bne.n	801326c <dns_lookup+0x68>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 801322a:	7bfa      	ldrb	r2, [r7, #15]
 801322c:	4613      	mov	r3, r2
 801322e:	011b      	lsls	r3, r3, #4
 8013230:	4413      	add	r3, r2
 8013232:	011b      	lsls	r3, r3, #4
 8013234:	3310      	adds	r3, #16
 8013236:	4a13      	ldr	r2, [pc, #76]	; (8013284 <dns_lookup+0x80>)
 8013238:	4413      	add	r3, r2
 801323a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801323e:	4619      	mov	r1, r3
 8013240:	6878      	ldr	r0, [r7, #4]
 8013242:	f7ff ff73 	bl	801312c <lwip_strnicmp>
 8013246:	4603      	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 8013248:	2b00      	cmp	r3, #0
 801324a:	d10f      	bne.n	801326c <dns_lookup+0x68>
        LWIP_DNS_ADDRTYPE_MATCH_IP(dns_addrtype, dns_table[i].ipaddr)) {
      LWIP_DEBUGF(DNS_DEBUG, ("dns_lookup: \"%s\": found = ", name));
      ip_addr_debug_print_val(DNS_DEBUG, dns_table[i].ipaddr);
      LWIP_DEBUGF(DNS_DEBUG, ("\n"));
      if (addr) {
 801324c:	683b      	ldr	r3, [r7, #0]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d00a      	beq.n	8013268 <dns_lookup+0x64>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 8013252:	7bfa      	ldrb	r2, [r7, #15]
 8013254:	490b      	ldr	r1, [pc, #44]	; (8013284 <dns_lookup+0x80>)
 8013256:	4613      	mov	r3, r2
 8013258:	011b      	lsls	r3, r3, #4
 801325a:	4413      	add	r3, r2
 801325c:	011b      	lsls	r3, r3, #4
 801325e:	440b      	add	r3, r1
 8013260:	3304      	adds	r3, #4
 8013262:	681a      	ldr	r2, [r3, #0]
 8013264:	683b      	ldr	r3, [r7, #0]
 8013266:	601a      	str	r2, [r3, #0]
      }
      return ERR_OK;
 8013268:	2300      	movs	r3, #0
 801326a:	e007      	b.n	801327c <dns_lookup+0x78>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 801326c:	7bfb      	ldrb	r3, [r7, #15]
 801326e:	3301      	adds	r3, #1
 8013270:	73fb      	strb	r3, [r7, #15]
 8013272:	7bfb      	ldrb	r3, [r7, #15]
 8013274:	2b03      	cmp	r3, #3
 8013276:	d9cd      	bls.n	8013214 <dns_lookup+0x10>
    }
  }

  return ERR_ARG;
 8013278:	f06f 030f 	mvn.w	r3, #15
}
 801327c:	4618      	mov	r0, r3
 801327e:	3710      	adds	r7, #16
 8013280:	46bd      	mov	sp, r7
 8013282:	bd80      	pop	{r7, pc}
 8013284:	24004ac8 	.word	0x24004ac8

08013288 <dns_compare_name>:
 * @param start_offset offset into p where the name starts
 * @return 0xFFFF: names differ, other: names equal -> offset behind name
 */
static u16_t
dns_compare_name(const char *query, struct pbuf *p, u16_t start_offset)
{
 8013288:	b580      	push	{r7, lr}
 801328a:	b088      	sub	sp, #32
 801328c:	af00      	add	r7, sp, #0
 801328e:	60f8      	str	r0, [r7, #12]
 8013290:	60b9      	str	r1, [r7, #8]
 8013292:	4613      	mov	r3, r2
 8013294:	80fb      	strh	r3, [r7, #6]
  int n;
  u16_t response_offset = start_offset;
 8013296:	88fb      	ldrh	r3, [r7, #6]
 8013298:	837b      	strh	r3, [r7, #26]

  do {
    n = pbuf_try_get_at(p, response_offset);
 801329a:	8b7b      	ldrh	r3, [r7, #26]
 801329c:	4619      	mov	r1, r3
 801329e:	68b8      	ldr	r0, [r7, #8]
 80132a0:	f002 ffe1 	bl	8016266 <pbuf_try_get_at>
 80132a4:	61f8      	str	r0, [r7, #28]
    if ((n < 0) || (response_offset == 0xFFFF)) {
 80132a6:	69fb      	ldr	r3, [r7, #28]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	db04      	blt.n	80132b6 <dns_compare_name+0x2e>
 80132ac:	8b7b      	ldrh	r3, [r7, #26]
 80132ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80132b2:	4293      	cmp	r3, r2
 80132b4:	d102      	bne.n	80132bc <dns_compare_name+0x34>
      /* error or overflow */
      return 0xFFFF;
 80132b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80132ba:	e06c      	b.n	8013396 <dns_compare_name+0x10e>
    }
    response_offset++;
 80132bc:	8b7b      	ldrh	r3, [r7, #26]
 80132be:	3301      	adds	r3, #1
 80132c0:	837b      	strh	r3, [r7, #26]
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
 80132c2:	69fb      	ldr	r3, [r7, #28]
 80132c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80132c8:	2bc0      	cmp	r3, #192	; 0xc0
 80132ca:	d144      	bne.n	8013356 <dns_compare_name+0xce>
      /* Compressed name: cannot be equal since we don't send them */
      return 0xFFFF;
 80132cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80132d0:	e061      	b.n	8013396 <dns_compare_name+0x10e>
    } else {
      /* Not compressed name */
      while (n > 0) {
        int c = pbuf_try_get_at(p, response_offset);
 80132d2:	8b7b      	ldrh	r3, [r7, #26]
 80132d4:	4619      	mov	r1, r3
 80132d6:	68b8      	ldr	r0, [r7, #8]
 80132d8:	f002 ffc5 	bl	8016266 <pbuf_try_get_at>
 80132dc:	6178      	str	r0, [r7, #20]
        if (c < 0) {
 80132de:	697b      	ldr	r3, [r7, #20]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	da02      	bge.n	80132ea <dns_compare_name+0x62>
          return 0xFFFF;
 80132e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80132e8:	e055      	b.n	8013396 <dns_compare_name+0x10e>
        }
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	781b      	ldrb	r3, [r3, #0]
 80132ee:	74fb      	strb	r3, [r7, #19]
 80132f0:	7cfb      	ldrb	r3, [r7, #19]
 80132f2:	3301      	adds	r3, #1
 80132f4:	4a2a      	ldr	r2, [pc, #168]	; (80133a0 <dns_compare_name+0x118>)
 80132f6:	4413      	add	r3, r2
 80132f8:	781b      	ldrb	r3, [r3, #0]
 80132fa:	f003 0303 	and.w	r3, r3, #3
 80132fe:	2b01      	cmp	r3, #1
 8013300:	d103      	bne.n	801330a <dns_compare_name+0x82>
 8013302:	7cfb      	ldrb	r3, [r7, #19]
 8013304:	f103 0220 	add.w	r2, r3, #32
 8013308:	e000      	b.n	801330c <dns_compare_name+0x84>
 801330a:	7cfa      	ldrb	r2, [r7, #19]
 801330c:	697b      	ldr	r3, [r7, #20]
 801330e:	74bb      	strb	r3, [r7, #18]
 8013310:	7cbb      	ldrb	r3, [r7, #18]
 8013312:	3301      	adds	r3, #1
 8013314:	4922      	ldr	r1, [pc, #136]	; (80133a0 <dns_compare_name+0x118>)
 8013316:	440b      	add	r3, r1
 8013318:	781b      	ldrb	r3, [r3, #0]
 801331a:	f003 0303 	and.w	r3, r3, #3
 801331e:	2b01      	cmp	r3, #1
 8013320:	d102      	bne.n	8013328 <dns_compare_name+0xa0>
 8013322:	7cbb      	ldrb	r3, [r7, #18]
 8013324:	3320      	adds	r3, #32
 8013326:	e000      	b.n	801332a <dns_compare_name+0xa2>
 8013328:	7cbb      	ldrb	r3, [r7, #18]
 801332a:	429a      	cmp	r2, r3
 801332c:	d002      	beq.n	8013334 <dns_compare_name+0xac>
          return 0xFFFF;
 801332e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013332:	e030      	b.n	8013396 <dns_compare_name+0x10e>
        }
        if (response_offset == 0xFFFF) {
 8013334:	8b7b      	ldrh	r3, [r7, #26]
 8013336:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801333a:	4293      	cmp	r3, r2
 801333c:	d102      	bne.n	8013344 <dns_compare_name+0xbc>
          /* would overflow */
          return 0xFFFF;
 801333e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013342:	e028      	b.n	8013396 <dns_compare_name+0x10e>
        }
        response_offset++;
 8013344:	8b7b      	ldrh	r3, [r7, #26]
 8013346:	3301      	adds	r3, #1
 8013348:	837b      	strh	r3, [r7, #26]
        ++query;
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	3301      	adds	r3, #1
 801334e:	60fb      	str	r3, [r7, #12]
        --n;
 8013350:	69fb      	ldr	r3, [r7, #28]
 8013352:	3b01      	subs	r3, #1
 8013354:	61fb      	str	r3, [r7, #28]
      while (n > 0) {
 8013356:	69fb      	ldr	r3, [r7, #28]
 8013358:	2b00      	cmp	r3, #0
 801335a:	dcba      	bgt.n	80132d2 <dns_compare_name+0x4a>
      }
      ++query;
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	3301      	adds	r3, #1
 8013360:	60fb      	str	r3, [r7, #12]
    }
    n = pbuf_try_get_at(p, response_offset);
 8013362:	8b7b      	ldrh	r3, [r7, #26]
 8013364:	4619      	mov	r1, r3
 8013366:	68b8      	ldr	r0, [r7, #8]
 8013368:	f002 ff7d 	bl	8016266 <pbuf_try_get_at>
 801336c:	61f8      	str	r0, [r7, #28]
    if (n < 0) {
 801336e:	69fb      	ldr	r3, [r7, #28]
 8013370:	2b00      	cmp	r3, #0
 8013372:	da02      	bge.n	801337a <dns_compare_name+0xf2>
      return 0xFFFF;
 8013374:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013378:	e00d      	b.n	8013396 <dns_compare_name+0x10e>
    }
  } while (n != 0);
 801337a:	69fb      	ldr	r3, [r7, #28]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d18c      	bne.n	801329a <dns_compare_name+0x12>

  if (response_offset == 0xFFFF) {
 8013380:	8b7b      	ldrh	r3, [r7, #26]
 8013382:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013386:	4293      	cmp	r3, r2
 8013388:	d102      	bne.n	8013390 <dns_compare_name+0x108>
    /* would overflow */
    return 0xFFFF;
 801338a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801338e:	e002      	b.n	8013396 <dns_compare_name+0x10e>
  }
  return (u16_t)(response_offset + 1);
 8013390:	8b7b      	ldrh	r3, [r7, #26]
 8013392:	3301      	adds	r3, #1
 8013394:	b29b      	uxth	r3, r3
}
 8013396:	4618      	mov	r0, r3
 8013398:	3720      	adds	r7, #32
 801339a:	46bd      	mov	sp, r7
 801339c:	bd80      	pop	{r7, pc}
 801339e:	bf00      	nop
 80133a0:	0802ec80 	.word	0x0802ec80

080133a4 <dns_skip_name>:
 * @param query_idx start index into p pointing to encoded DNS name in the DNS server response
 * @return index to end of the name
 */
static u16_t
dns_skip_name(struct pbuf *p, u16_t query_idx)
{
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b084      	sub	sp, #16
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	6078      	str	r0, [r7, #4]
 80133ac:	460b      	mov	r3, r1
 80133ae:	807b      	strh	r3, [r7, #2]
  int n;
  u16_t offset = query_idx;
 80133b0:	887b      	ldrh	r3, [r7, #2]
 80133b2:	81fb      	strh	r3, [r7, #14]

  do {
    n = pbuf_try_get_at(p, offset++);
 80133b4:	89fb      	ldrh	r3, [r7, #14]
 80133b6:	1c5a      	adds	r2, r3, #1
 80133b8:	81fa      	strh	r2, [r7, #14]
 80133ba:	4619      	mov	r1, r3
 80133bc:	6878      	ldr	r0, [r7, #4]
 80133be:	f002 ff52 	bl	8016266 <pbuf_try_get_at>
 80133c2:	60b8      	str	r0, [r7, #8]
    if ((n < 0) || (offset == 0)) {
 80133c4:	68bb      	ldr	r3, [r7, #8]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	db02      	blt.n	80133d0 <dns_skip_name+0x2c>
 80133ca:	89fb      	ldrh	r3, [r7, #14]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d102      	bne.n	80133d6 <dns_skip_name+0x32>
      return 0xFFFF;
 80133d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80133d4:	e02f      	b.n	8013436 <dns_skip_name+0x92>
    }
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
 80133d6:	68bb      	ldr	r3, [r7, #8]
 80133d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80133dc:	2bc0      	cmp	r3, #192	; 0xc0
 80133de:	d01e      	beq.n	801341e <dns_skip_name+0x7a>
      /* Compressed name: since we only want to skip it (not check it), stop here */
      break;
    } else {
      /* Not compressed name */
      if (offset + n >= p->tot_len) {
 80133e0:	89fa      	ldrh	r2, [r7, #14]
 80133e2:	68bb      	ldr	r3, [r7, #8]
 80133e4:	4413      	add	r3, r2
 80133e6:	687a      	ldr	r2, [r7, #4]
 80133e8:	8912      	ldrh	r2, [r2, #8]
 80133ea:	4293      	cmp	r3, r2
 80133ec:	db02      	blt.n	80133f4 <dns_skip_name+0x50>
        return 0xFFFF;
 80133ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80133f2:	e020      	b.n	8013436 <dns_skip_name+0x92>
      }
      offset = (u16_t)(offset + n);
 80133f4:	68bb      	ldr	r3, [r7, #8]
 80133f6:	b29a      	uxth	r2, r3
 80133f8:	89fb      	ldrh	r3, [r7, #14]
 80133fa:	4413      	add	r3, r2
 80133fc:	81fb      	strh	r3, [r7, #14]
    }
    n = pbuf_try_get_at(p, offset);
 80133fe:	89fb      	ldrh	r3, [r7, #14]
 8013400:	4619      	mov	r1, r3
 8013402:	6878      	ldr	r0, [r7, #4]
 8013404:	f002 ff2f 	bl	8016266 <pbuf_try_get_at>
 8013408:	60b8      	str	r0, [r7, #8]
    if (n < 0) {
 801340a:	68bb      	ldr	r3, [r7, #8]
 801340c:	2b00      	cmp	r3, #0
 801340e:	da02      	bge.n	8013416 <dns_skip_name+0x72>
      return 0xFFFF;
 8013410:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013414:	e00f      	b.n	8013436 <dns_skip_name+0x92>
    }
  } while (n != 0);
 8013416:	68bb      	ldr	r3, [r7, #8]
 8013418:	2b00      	cmp	r3, #0
 801341a:	d1cb      	bne.n	80133b4 <dns_skip_name+0x10>
 801341c:	e000      	b.n	8013420 <dns_skip_name+0x7c>
      break;
 801341e:	bf00      	nop

  if (offset == 0xFFFF) {
 8013420:	89fb      	ldrh	r3, [r7, #14]
 8013422:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013426:	4293      	cmp	r3, r2
 8013428:	d102      	bne.n	8013430 <dns_skip_name+0x8c>
    return 0xFFFF;
 801342a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801342e:	e002      	b.n	8013436 <dns_skip_name+0x92>
  }
  return (u16_t)(offset + 1);
 8013430:	89fb      	ldrh	r3, [r7, #14]
 8013432:	3301      	adds	r3, #1
 8013434:	b29b      	uxth	r3, r3
}
 8013436:	4618      	mov	r0, r3
 8013438:	3710      	adds	r7, #16
 801343a:	46bd      	mov	sp, r7
 801343c:	bd80      	pop	{r7, pc}
	...

08013440 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 8013440:	b580      	push	{r7, lr}
 8013442:	b090      	sub	sp, #64	; 0x40
 8013444:	af00      	add	r7, sp, #0
 8013446:	4603      	mov	r3, r0
 8013448:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 801344a:	79fa      	ldrb	r2, [r7, #7]
 801344c:	4613      	mov	r3, r2
 801344e:	011b      	lsls	r3, r3, #4
 8013450:	4413      	add	r3, r2
 8013452:	011b      	lsls	r3, r3, #4
 8013454:	4a6c      	ldr	r2, [pc, #432]	; (8013608 <dns_send+0x1c8>)
 8013456:	4413      	add	r3, r2
 8013458:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 801345a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801345c:	7adb      	ldrb	r3, [r3, #11]
 801345e:	2b01      	cmp	r3, #1
 8013460:	d906      	bls.n	8013470 <dns_send+0x30>
 8013462:	4b6a      	ldr	r3, [pc, #424]	; (801360c <dns_send+0x1cc>)
 8013464:	f240 22fa 	movw	r2, #762	; 0x2fa
 8013468:	4969      	ldr	r1, [pc, #420]	; (8013610 <dns_send+0x1d0>)
 801346a:	486a      	ldr	r0, [pc, #424]	; (8013614 <dns_send+0x1d4>)
 801346c:	f013 fd32 	bl	8026ed4 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8013470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013472:	7adb      	ldrb	r3, [r3, #11]
 8013474:	461a      	mov	r2, r3
 8013476:	4b68      	ldr	r3, [pc, #416]	; (8013618 <dns_send+0x1d8>)
 8013478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801347c:	2b00      	cmp	r3, #0
 801347e:	d109      	bne.n	8013494 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 8013480:	79fb      	ldrb	r3, [r7, #7]
 8013482:	2100      	movs	r1, #0
 8013484:	4618      	mov	r0, r3
 8013486:	f000 f959 	bl	801373c <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 801348a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801348c:	2200      	movs	r2, #0
 801348e:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 8013490:	2300      	movs	r3, #0
 8013492:	e0b4      	b.n	80135fe <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8013494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013496:	3310      	adds	r3, #16
 8013498:	4618      	mov	r0, r3
 801349a:	f7ec ff2b 	bl	80002f4 <strlen>
 801349e:	4603      	mov	r3, r0
 80134a0:	b29b      	uxth	r3, r3
 80134a2:	3312      	adds	r3, #18
 80134a4:	b29b      	uxth	r3, r3
 80134a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80134aa:	4619      	mov	r1, r3
 80134ac:	2036      	movs	r0, #54	; 0x36
 80134ae:	f001 ffcb 	bl	8015448 <pbuf_alloc>
 80134b2:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 80134b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	f000 8095 	beq.w	80135e6 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 80134bc:	f107 0310 	add.w	r3, r7, #16
 80134c0:	220c      	movs	r2, #12
 80134c2:	2100      	movs	r1, #0
 80134c4:	4618      	mov	r0, r3
 80134c6:	f012 fea7 	bl	8026218 <memset>
    hdr.id = lwip_htons(entry->txid);
 80134ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134cc:	891b      	ldrh	r3, [r3, #8]
 80134ce:	4618      	mov	r0, r3
 80134d0:	f7ff fdfe 	bl	80130d0 <lwip_htons>
 80134d4:	4603      	mov	r3, r0
 80134d6:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 80134d8:	2301      	movs	r3, #1
 80134da:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 80134dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80134e0:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 80134e2:	f107 0310 	add.w	r3, r7, #16
 80134e6:	220c      	movs	r2, #12
 80134e8:	4619      	mov	r1, r3
 80134ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80134ec:	f002 fd76 	bl	8015fdc <pbuf_take>
    hostname = entry->name;
 80134f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134f2:	3310      	adds	r3, #16
 80134f4:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 80134f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134f8:	3b01      	subs	r3, #1
 80134fa:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 80134fc:	230c      	movs	r3, #12
 80134fe:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 8013500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013502:	3301      	adds	r3, #1
 8013504:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 8013506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013508:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801350a:	2300      	movs	r3, #0
 801350c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013510:	e007      	b.n	8013522 <dns_send+0xe2>
        ++n;
 8013512:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013516:	3301      	adds	r3, #1
 8013518:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801351c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801351e:	3301      	adds	r3, #1
 8013520:	63bb      	str	r3, [r7, #56]	; 0x38
 8013522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013524:	781b      	ldrb	r3, [r3, #0]
 8013526:	2b2e      	cmp	r3, #46	; 0x2e
 8013528:	d003      	beq.n	8013532 <dns_send+0xf2>
 801352a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801352c:	781b      	ldrb	r3, [r3, #0]
 801352e:	2b00      	cmp	r3, #0
 8013530:	d1ef      	bne.n	8013512 <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 8013532:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013536:	1ad3      	subs	r3, r2, r3
 8013538:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 801353a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801353c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013540:	4413      	add	r3, r2
 8013542:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013546:	4293      	cmp	r3, r2
 8013548:	dc53      	bgt.n	80135f2 <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 801354a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801354e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013550:	4619      	mov	r1, r3
 8013552:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013554:	f002 fea9 	bl	80162aa <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8013558:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801355a:	3301      	adds	r3, #1
 801355c:	b29b      	uxth	r3, r3
 801355e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013560:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013562:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013564:	f002 fdcc 	bl	8016100 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 8013568:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801356c:	b29a      	uxth	r2, r3
 801356e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013570:	4413      	add	r3, r2
 8013572:	b29b      	uxth	r3, r3
 8013574:	3301      	adds	r3, #1
 8013576:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 8013578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801357a:	781b      	ldrb	r3, [r3, #0]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d1bf      	bne.n	8013500 <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 8013580:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013582:	2200      	movs	r2, #0
 8013584:	4619      	mov	r1, r3
 8013586:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013588:	f002 fe8f 	bl	80162aa <pbuf_put_at>
    query_idx++;
 801358c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801358e:	3301      	adds	r3, #1
 8013590:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8013592:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013596:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 8013598:	f44f 7380 	mov.w	r3, #256	; 0x100
 801359c:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 801359e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80135a0:	f107 010c 	add.w	r1, r7, #12
 80135a4:	2204      	movs	r2, #4
 80135a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80135a8:	f002 fdaa 	bl	8016100 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 80135ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135ae:	7bdb      	ldrb	r3, [r3, #15]
 80135b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 80135b4:	2335      	movs	r3, #53	; 0x35
 80135b6:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 80135b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135ba:	7adb      	ldrb	r3, [r3, #11]
 80135bc:	009b      	lsls	r3, r3, #2
 80135be:	4a16      	ldr	r2, [pc, #88]	; (8013618 <dns_send+0x1d8>)
 80135c0:	4413      	add	r3, r2
 80135c2:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 80135c4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80135c8:	4a14      	ldr	r2, [pc, #80]	; (801361c <dns_send+0x1dc>)
 80135ca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80135ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80135d0:	69fa      	ldr	r2, [r7, #28]
 80135d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80135d4:	f009 fbd0 	bl	801cd78 <udp_sendto>
 80135d8:	4603      	mov	r3, r0
 80135da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 80135de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80135e0:	f002 fa48 	bl	8015a74 <pbuf_free>
 80135e4:	e002      	b.n	80135ec <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 80135e6:	23ff      	movs	r3, #255	; 0xff
 80135e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 80135ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80135f0:	e005      	b.n	80135fe <dns_send+0x1be>
        goto overflow_return;
 80135f2:	bf00      	nop
overflow_return:
  pbuf_free(p);
 80135f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80135f6:	f002 fa3d 	bl	8015a74 <pbuf_free>
  return ERR_VAL;
 80135fa:	f06f 0305 	mvn.w	r3, #5
}
 80135fe:	4618      	mov	r0, r3
 8013600:	3740      	adds	r7, #64	; 0x40
 8013602:	46bd      	mov	sp, r7
 8013604:	bd80      	pop	{r7, pc}
 8013606:	bf00      	nop
 8013608:	24004ac8 	.word	0x24004ac8
 801360c:	0802b4d8 	.word	0x0802b4d8
 8013610:	0802b508 	.word	0x0802b508
 8013614:	0802b520 	.word	0x0802b520
 8013618:	24004f38 	.word	0x24004f38
 801361c:	24004ab4 	.word	0x24004ab4

08013620 <dns_alloc_random_port>:

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
static struct udp_pcb *
dns_alloc_random_port(void)
{
 8013620:	b580      	push	{r7, lr}
 8013622:	b084      	sub	sp, #16
 8013624:	af00      	add	r7, sp, #0
  err_t err;
  struct udp_pcb *pcb;

  pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 8013626:	202e      	movs	r0, #46	; 0x2e
 8013628:	f009 fef3 	bl	801d412 <udp_new_ip_type>
 801362c:	60b8      	str	r0, [r7, #8]
  if (pcb == NULL) {
 801362e:	68bb      	ldr	r3, [r7, #8]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d101      	bne.n	8013638 <dns_alloc_random_port+0x18>
    /* out of memory, have to reuse an existing pcb */
    return NULL;
 8013634:	2300      	movs	r3, #0
 8013636:	e026      	b.n	8013686 <dns_alloc_random_port+0x66>
  }
  do {
    u16_t port = (u16_t)DNS_RAND_TXID();
 8013638:	f013 fcda 	bl	8026ff0 <rand>
 801363c:	4603      	mov	r3, r0
 801363e:	80fb      	strh	r3, [r7, #6]
    if (DNS_PORT_ALLOWED(port)) {
 8013640:	88fb      	ldrh	r3, [r7, #6]
 8013642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013646:	d308      	bcc.n	801365a <dns_alloc_random_port+0x3a>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 8013648:	88fb      	ldrh	r3, [r7, #6]
 801364a:	461a      	mov	r2, r3
 801364c:	4910      	ldr	r1, [pc, #64]	; (8013690 <dns_alloc_random_port+0x70>)
 801364e:	68b8      	ldr	r0, [r7, #8]
 8013650:	f009 fd48 	bl	801d0e4 <udp_bind>
 8013654:	4603      	mov	r3, r0
 8013656:	73fb      	strb	r3, [r7, #15]
 8013658:	e001      	b.n	801365e <dns_alloc_random_port+0x3e>
    } else {
      /* this port is not allowed, try again */
      err = ERR_USE;
 801365a:	23f8      	movs	r3, #248	; 0xf8
 801365c:	73fb      	strb	r3, [r7, #15]
    }
  } while (err == ERR_USE);
 801365e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013662:	f113 0f08 	cmn.w	r3, #8
 8013666:	d0e7      	beq.n	8013638 <dns_alloc_random_port+0x18>
  if (err != ERR_OK) {
 8013668:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801366c:	2b00      	cmp	r3, #0
 801366e:	d004      	beq.n	801367a <dns_alloc_random_port+0x5a>
    udp_remove(pcb);
 8013670:	68b8      	ldr	r0, [r7, #8]
 8013672:	f009 fe75 	bl	801d360 <udp_remove>
    return NULL;
 8013676:	2300      	movs	r3, #0
 8013678:	e005      	b.n	8013686 <dns_alloc_random_port+0x66>
  }
  udp_recv(pcb, dns_recv, NULL);
 801367a:	2200      	movs	r2, #0
 801367c:	4905      	ldr	r1, [pc, #20]	; (8013694 <dns_alloc_random_port+0x74>)
 801367e:	68b8      	ldr	r0, [r7, #8]
 8013680:	f009 fe4e 	bl	801d320 <udp_recv>
  return pcb;
 8013684:	68bb      	ldr	r3, [r7, #8]
}
 8013686:	4618      	mov	r0, r3
 8013688:	3710      	adds	r7, #16
 801368a:	46bd      	mov	sp, r7
 801368c:	bd80      	pop	{r7, pc}
 801368e:	bf00      	nop
 8013690:	0802ec60 	.word	0x0802ec60
 8013694:	08013b41 	.word	0x08013b41

08013698 <dns_alloc_pcb>:
 *
 * @return an index into dns_pcbs
 */
static u8_t
dns_alloc_pcb(void)
{
 8013698:	b590      	push	{r4, r7, lr}
 801369a:	b083      	sub	sp, #12
 801369c:	af00      	add	r7, sp, #0
  u8_t i;
  u8_t idx;

  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 801369e:	2300      	movs	r3, #0
 80136a0:	71fb      	strb	r3, [r7, #7]
 80136a2:	e008      	b.n	80136b6 <dns_alloc_pcb+0x1e>
    if (dns_pcbs[i] == NULL) {
 80136a4:	79fb      	ldrb	r3, [r7, #7]
 80136a6:	4a23      	ldr	r2, [pc, #140]	; (8013734 <dns_alloc_pcb+0x9c>)
 80136a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d006      	beq.n	80136be <dns_alloc_pcb+0x26>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 80136b0:	79fb      	ldrb	r3, [r7, #7]
 80136b2:	3301      	adds	r3, #1
 80136b4:	71fb      	strb	r3, [r7, #7]
 80136b6:	79fb      	ldrb	r3, [r7, #7]
 80136b8:	2b03      	cmp	r3, #3
 80136ba:	d9f3      	bls.n	80136a4 <dns_alloc_pcb+0xc>
 80136bc:	e000      	b.n	80136c0 <dns_alloc_pcb+0x28>
      break;
 80136be:	bf00      	nop
    }
  }
  if (i < DNS_MAX_SOURCE_PORTS) {
 80136c0:	79fb      	ldrb	r3, [r7, #7]
 80136c2:	2b03      	cmp	r3, #3
 80136c4:	d811      	bhi.n	80136ea <dns_alloc_pcb+0x52>
    dns_pcbs[i] = dns_alloc_random_port();
 80136c6:	79fc      	ldrb	r4, [r7, #7]
 80136c8:	f7ff ffaa 	bl	8013620 <dns_alloc_random_port>
 80136cc:	4603      	mov	r3, r0
 80136ce:	4a19      	ldr	r2, [pc, #100]	; (8013734 <dns_alloc_pcb+0x9c>)
 80136d0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    if (dns_pcbs[i] != NULL) {
 80136d4:	79fb      	ldrb	r3, [r7, #7]
 80136d6:	4a17      	ldr	r2, [pc, #92]	; (8013734 <dns_alloc_pcb+0x9c>)
 80136d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d004      	beq.n	80136ea <dns_alloc_pcb+0x52>
      /* succeeded */
      dns_last_pcb_idx = i;
 80136e0:	4a15      	ldr	r2, [pc, #84]	; (8013738 <dns_alloc_pcb+0xa0>)
 80136e2:	79fb      	ldrb	r3, [r7, #7]
 80136e4:	7013      	strb	r3, [r2, #0]
      return i;
 80136e6:	79fb      	ldrb	r3, [r7, #7]
 80136e8:	e020      	b.n	801372c <dns_alloc_pcb+0x94>
    }
  }
  /* if we come here, creating a new UDP pcb failed, so we have to use
     an already existing one (so overflow is no issue) */
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 80136ea:	2300      	movs	r3, #0
 80136ec:	71fb      	strb	r3, [r7, #7]
 80136ee:	4b12      	ldr	r3, [pc, #72]	; (8013738 <dns_alloc_pcb+0xa0>)
 80136f0:	781b      	ldrb	r3, [r3, #0]
 80136f2:	3301      	adds	r3, #1
 80136f4:	71bb      	strb	r3, [r7, #6]
 80136f6:	e015      	b.n	8013724 <dns_alloc_pcb+0x8c>
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 80136f8:	79bb      	ldrb	r3, [r7, #6]
 80136fa:	2b03      	cmp	r3, #3
 80136fc:	d901      	bls.n	8013702 <dns_alloc_pcb+0x6a>
      idx = 0;
 80136fe:	2300      	movs	r3, #0
 8013700:	71bb      	strb	r3, [r7, #6]
    }
    if (dns_pcbs[idx] != NULL) {
 8013702:	79bb      	ldrb	r3, [r7, #6]
 8013704:	4a0b      	ldr	r2, [pc, #44]	; (8013734 <dns_alloc_pcb+0x9c>)
 8013706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d004      	beq.n	8013718 <dns_alloc_pcb+0x80>
      dns_last_pcb_idx = idx;
 801370e:	4a0a      	ldr	r2, [pc, #40]	; (8013738 <dns_alloc_pcb+0xa0>)
 8013710:	79bb      	ldrb	r3, [r7, #6]
 8013712:	7013      	strb	r3, [r2, #0]
      return idx;
 8013714:	79bb      	ldrb	r3, [r7, #6]
 8013716:	e009      	b.n	801372c <dns_alloc_pcb+0x94>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8013718:	79fb      	ldrb	r3, [r7, #7]
 801371a:	3301      	adds	r3, #1
 801371c:	71fb      	strb	r3, [r7, #7]
 801371e:	79bb      	ldrb	r3, [r7, #6]
 8013720:	3301      	adds	r3, #1
 8013722:	71bb      	strb	r3, [r7, #6]
 8013724:	79fb      	ldrb	r3, [r7, #7]
 8013726:	2b03      	cmp	r3, #3
 8013728:	d9e6      	bls.n	80136f8 <dns_alloc_pcb+0x60>
    }
  }
  return DNS_MAX_SOURCE_PORTS;
 801372a:	2304      	movs	r3, #4
}
 801372c:	4618      	mov	r0, r3
 801372e:	370c      	adds	r7, #12
 8013730:	46bd      	mov	sp, r7
 8013732:	bd90      	pop	{r4, r7, pc}
 8013734:	24004ab4 	.word	0x24004ab4
 8013738:	24004ac4 	.word	0x24004ac4

0801373c <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 801373c:	b590      	push	{r4, r7, lr}
 801373e:	b085      	sub	sp, #20
 8013740:	af00      	add	r7, sp, #0
 8013742:	4603      	mov	r3, r0
 8013744:	6039      	str	r1, [r7, #0]
 8013746:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8013748:	2300      	movs	r3, #0
 801374a:	73fb      	strb	r3, [r7, #15]
 801374c:	e03d      	b.n	80137ca <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 801374e:	7bfa      	ldrb	r2, [r7, #15]
 8013750:	4957      	ldr	r1, [pc, #348]	; (80138b0 <dns_call_found+0x174>)
 8013752:	4613      	mov	r3, r2
 8013754:	005b      	lsls	r3, r3, #1
 8013756:	4413      	add	r3, r2
 8013758:	009b      	lsls	r3, r3, #2
 801375a:	440b      	add	r3, r1
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d030      	beq.n	80137c4 <dns_call_found+0x88>
 8013762:	7bfa      	ldrb	r2, [r7, #15]
 8013764:	4952      	ldr	r1, [pc, #328]	; (80138b0 <dns_call_found+0x174>)
 8013766:	4613      	mov	r3, r2
 8013768:	005b      	lsls	r3, r3, #1
 801376a:	4413      	add	r3, r2
 801376c:	009b      	lsls	r3, r3, #2
 801376e:	440b      	add	r3, r1
 8013770:	3308      	adds	r3, #8
 8013772:	781b      	ldrb	r3, [r3, #0]
 8013774:	79fa      	ldrb	r2, [r7, #7]
 8013776:	429a      	cmp	r2, r3
 8013778:	d124      	bne.n	80137c4 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 801377a:	7bfa      	ldrb	r2, [r7, #15]
 801377c:	494c      	ldr	r1, [pc, #304]	; (80138b0 <dns_call_found+0x174>)
 801377e:	4613      	mov	r3, r2
 8013780:	005b      	lsls	r3, r3, #1
 8013782:	4413      	add	r3, r2
 8013784:	009b      	lsls	r3, r3, #2
 8013786:	440b      	add	r3, r1
 8013788:	681c      	ldr	r4, [r3, #0]
 801378a:	79fa      	ldrb	r2, [r7, #7]
 801378c:	4613      	mov	r3, r2
 801378e:	011b      	lsls	r3, r3, #4
 8013790:	4413      	add	r3, r2
 8013792:	011b      	lsls	r3, r3, #4
 8013794:	3310      	adds	r3, #16
 8013796:	4a47      	ldr	r2, [pc, #284]	; (80138b4 <dns_call_found+0x178>)
 8013798:	1898      	adds	r0, r3, r2
 801379a:	7bfa      	ldrb	r2, [r7, #15]
 801379c:	4944      	ldr	r1, [pc, #272]	; (80138b0 <dns_call_found+0x174>)
 801379e:	4613      	mov	r3, r2
 80137a0:	005b      	lsls	r3, r3, #1
 80137a2:	4413      	add	r3, r2
 80137a4:	009b      	lsls	r3, r3, #2
 80137a6:	440b      	add	r3, r1
 80137a8:	3304      	adds	r3, #4
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	461a      	mov	r2, r3
 80137ae:	6839      	ldr	r1, [r7, #0]
 80137b0:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 80137b2:	7bfa      	ldrb	r2, [r7, #15]
 80137b4:	493e      	ldr	r1, [pc, #248]	; (80138b0 <dns_call_found+0x174>)
 80137b6:	4613      	mov	r3, r2
 80137b8:	005b      	lsls	r3, r3, #1
 80137ba:	4413      	add	r3, r2
 80137bc:	009b      	lsls	r3, r3, #2
 80137be:	440b      	add	r3, r1
 80137c0:	2200      	movs	r2, #0
 80137c2:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80137c4:	7bfb      	ldrb	r3, [r7, #15]
 80137c6:	3301      	adds	r3, #1
 80137c8:	73fb      	strb	r3, [r7, #15]
 80137ca:	7bfb      	ldrb	r3, [r7, #15]
 80137cc:	2b03      	cmp	r3, #3
 80137ce:	d9be      	bls.n	801374e <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80137d0:	2300      	movs	r3, #0
 80137d2:	73fb      	strb	r3, [r7, #15]
 80137d4:	e031      	b.n	801383a <dns_call_found+0xfe>
    if (i == idx) {
 80137d6:	7bfa      	ldrb	r2, [r7, #15]
 80137d8:	79fb      	ldrb	r3, [r7, #7]
 80137da:	429a      	cmp	r2, r3
 80137dc:	d029      	beq.n	8013832 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 80137de:	7bfa      	ldrb	r2, [r7, #15]
 80137e0:	4934      	ldr	r1, [pc, #208]	; (80138b4 <dns_call_found+0x178>)
 80137e2:	4613      	mov	r3, r2
 80137e4:	011b      	lsls	r3, r3, #4
 80137e6:	4413      	add	r3, r2
 80137e8:	011b      	lsls	r3, r3, #4
 80137ea:	440b      	add	r3, r1
 80137ec:	330a      	adds	r3, #10
 80137ee:	781b      	ldrb	r3, [r3, #0]
 80137f0:	2b02      	cmp	r3, #2
 80137f2:	d11f      	bne.n	8013834 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 80137f4:	7bfa      	ldrb	r2, [r7, #15]
 80137f6:	492f      	ldr	r1, [pc, #188]	; (80138b4 <dns_call_found+0x178>)
 80137f8:	4613      	mov	r3, r2
 80137fa:	011b      	lsls	r3, r3, #4
 80137fc:	4413      	add	r3, r2
 80137fe:	011b      	lsls	r3, r3, #4
 8013800:	440b      	add	r3, r1
 8013802:	330f      	adds	r3, #15
 8013804:	7819      	ldrb	r1, [r3, #0]
 8013806:	79fa      	ldrb	r2, [r7, #7]
 8013808:	482a      	ldr	r0, [pc, #168]	; (80138b4 <dns_call_found+0x178>)
 801380a:	4613      	mov	r3, r2
 801380c:	011b      	lsls	r3, r3, #4
 801380e:	4413      	add	r3, r2
 8013810:	011b      	lsls	r3, r3, #4
 8013812:	4403      	add	r3, r0
 8013814:	330f      	adds	r3, #15
 8013816:	781b      	ldrb	r3, [r3, #0]
 8013818:	4299      	cmp	r1, r3
 801381a:	d10b      	bne.n	8013834 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 801381c:	79fa      	ldrb	r2, [r7, #7]
 801381e:	4925      	ldr	r1, [pc, #148]	; (80138b4 <dns_call_found+0x178>)
 8013820:	4613      	mov	r3, r2
 8013822:	011b      	lsls	r3, r3, #4
 8013824:	4413      	add	r3, r2
 8013826:	011b      	lsls	r3, r3, #4
 8013828:	440b      	add	r3, r1
 801382a:	330f      	adds	r3, #15
 801382c:	2204      	movs	r2, #4
 801382e:	701a      	strb	r2, [r3, #0]
        break;
 8013830:	e006      	b.n	8013840 <dns_call_found+0x104>
      continue; /* only check other requests */
 8013832:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8013834:	7bfb      	ldrb	r3, [r7, #15]
 8013836:	3301      	adds	r3, #1
 8013838:	73fb      	strb	r3, [r7, #15]
 801383a:	7bfb      	ldrb	r3, [r7, #15]
 801383c:	2b03      	cmp	r3, #3
 801383e:	d9ca      	bls.n	80137d6 <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8013840:	79fa      	ldrb	r2, [r7, #7]
 8013842:	491c      	ldr	r1, [pc, #112]	; (80138b4 <dns_call_found+0x178>)
 8013844:	4613      	mov	r3, r2
 8013846:	011b      	lsls	r3, r3, #4
 8013848:	4413      	add	r3, r2
 801384a:	011b      	lsls	r3, r3, #4
 801384c:	440b      	add	r3, r1
 801384e:	330f      	adds	r3, #15
 8013850:	781b      	ldrb	r3, [r3, #0]
 8013852:	2b03      	cmp	r3, #3
 8013854:	d827      	bhi.n	80138a6 <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8013856:	79fa      	ldrb	r2, [r7, #7]
 8013858:	4916      	ldr	r1, [pc, #88]	; (80138b4 <dns_call_found+0x178>)
 801385a:	4613      	mov	r3, r2
 801385c:	011b      	lsls	r3, r3, #4
 801385e:	4413      	add	r3, r2
 8013860:	011b      	lsls	r3, r3, #4
 8013862:	440b      	add	r3, r1
 8013864:	330f      	adds	r3, #15
 8013866:	781b      	ldrb	r3, [r3, #0]
 8013868:	461a      	mov	r2, r3
 801386a:	4b13      	ldr	r3, [pc, #76]	; (80138b8 <dns_call_found+0x17c>)
 801386c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013870:	4618      	mov	r0, r3
 8013872:	f009 fd75 	bl	801d360 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8013876:	79fa      	ldrb	r2, [r7, #7]
 8013878:	490e      	ldr	r1, [pc, #56]	; (80138b4 <dns_call_found+0x178>)
 801387a:	4613      	mov	r3, r2
 801387c:	011b      	lsls	r3, r3, #4
 801387e:	4413      	add	r3, r2
 8013880:	011b      	lsls	r3, r3, #4
 8013882:	440b      	add	r3, r1
 8013884:	330f      	adds	r3, #15
 8013886:	781b      	ldrb	r3, [r3, #0]
 8013888:	4619      	mov	r1, r3
 801388a:	4b0b      	ldr	r3, [pc, #44]	; (80138b8 <dns_call_found+0x17c>)
 801388c:	2200      	movs	r2, #0
 801388e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8013892:	79fa      	ldrb	r2, [r7, #7]
 8013894:	4907      	ldr	r1, [pc, #28]	; (80138b4 <dns_call_found+0x178>)
 8013896:	4613      	mov	r3, r2
 8013898:	011b      	lsls	r3, r3, #4
 801389a:	4413      	add	r3, r2
 801389c:	011b      	lsls	r3, r3, #4
 801389e:	440b      	add	r3, r1
 80138a0:	330f      	adds	r3, #15
 80138a2:	2204      	movs	r2, #4
 80138a4:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 80138a6:	bf00      	nop
 80138a8:	3714      	adds	r7, #20
 80138aa:	46bd      	mov	sp, r7
 80138ac:	bd90      	pop	{r4, r7, pc}
 80138ae:	bf00      	nop
 80138b0:	24004f08 	.word	0x24004f08
 80138b4:	24004ac8 	.word	0x24004ac8
 80138b8:	24004ab4 	.word	0x24004ab4

080138bc <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 80138bc:	b580      	push	{r7, lr}
 80138be:	b082      	sub	sp, #8
 80138c0:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 80138c2:	f013 fb95 	bl	8026ff0 <rand>
 80138c6:	4603      	mov	r3, r0
 80138c8:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 80138ca:	2300      	movs	r3, #0
 80138cc:	71fb      	strb	r3, [r7, #7]
 80138ce:	e01a      	b.n	8013906 <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 80138d0:	79fa      	ldrb	r2, [r7, #7]
 80138d2:	4911      	ldr	r1, [pc, #68]	; (8013918 <dns_create_txid+0x5c>)
 80138d4:	4613      	mov	r3, r2
 80138d6:	011b      	lsls	r3, r3, #4
 80138d8:	4413      	add	r3, r2
 80138da:	011b      	lsls	r3, r3, #4
 80138dc:	440b      	add	r3, r1
 80138de:	330a      	adds	r3, #10
 80138e0:	781b      	ldrb	r3, [r3, #0]
 80138e2:	2b02      	cmp	r3, #2
 80138e4:	d10c      	bne.n	8013900 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 80138e6:	79fa      	ldrb	r2, [r7, #7]
 80138e8:	490b      	ldr	r1, [pc, #44]	; (8013918 <dns_create_txid+0x5c>)
 80138ea:	4613      	mov	r3, r2
 80138ec:	011b      	lsls	r3, r3, #4
 80138ee:	4413      	add	r3, r2
 80138f0:	011b      	lsls	r3, r3, #4
 80138f2:	440b      	add	r3, r1
 80138f4:	3308      	adds	r3, #8
 80138f6:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 80138f8:	88ba      	ldrh	r2, [r7, #4]
 80138fa:	429a      	cmp	r2, r3
 80138fc:	d100      	bne.n	8013900 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 80138fe:	e7e0      	b.n	80138c2 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8013900:	79fb      	ldrb	r3, [r7, #7]
 8013902:	3301      	adds	r3, #1
 8013904:	71fb      	strb	r3, [r7, #7]
 8013906:	79fb      	ldrb	r3, [r7, #7]
 8013908:	2b03      	cmp	r3, #3
 801390a:	d9e1      	bls.n	80138d0 <dns_create_txid+0x14>
    }
  }

  return txid;
 801390c:	88bb      	ldrh	r3, [r7, #4]
}
 801390e:	4618      	mov	r0, r3
 8013910:	3708      	adds	r7, #8
 8013912:	46bd      	mov	sp, r7
 8013914:	bd80      	pop	{r7, pc}
 8013916:	bf00      	nop
 8013918:	24004ac8 	.word	0x24004ac8

0801391c <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 801391c:	b480      	push	{r7}
 801391e:	b085      	sub	sp, #20
 8013920:	af00      	add	r7, sp, #0
 8013922:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 8013924:	2300      	movs	r3, #0
 8013926:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d00d      	beq.n	801394a <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	7adb      	ldrb	r3, [r3, #11]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d109      	bne.n	801394a <dns_backupserver_available+0x2e>
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	7adb      	ldrb	r3, [r3, #11]
 801393a:	3301      	adds	r3, #1
 801393c:	4a06      	ldr	r2, [pc, #24]	; (8013958 <dns_backupserver_available+0x3c>)
 801393e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d001      	beq.n	801394a <dns_backupserver_available+0x2e>
      ret = 1;
 8013946:	2301      	movs	r3, #1
 8013948:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 801394a:	7bfb      	ldrb	r3, [r7, #15]
}
 801394c:	4618      	mov	r0, r3
 801394e:	3714      	adds	r7, #20
 8013950:	46bd      	mov	sp, r7
 8013952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013956:	4770      	bx	lr
 8013958:	24004f38 	.word	0x24004f38

0801395c <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 801395c:	b580      	push	{r7, lr}
 801395e:	b084      	sub	sp, #16
 8013960:	af00      	add	r7, sp, #0
 8013962:	4603      	mov	r3, r0
 8013964:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 8013966:	79fa      	ldrb	r2, [r7, #7]
 8013968:	4613      	mov	r3, r2
 801396a:	011b      	lsls	r3, r3, #4
 801396c:	4413      	add	r3, r2
 801396e:	011b      	lsls	r3, r3, #4
 8013970:	4a48      	ldr	r2, [pc, #288]	; (8013a94 <dns_check_entry+0x138>)
 8013972:	4413      	add	r3, r2
 8013974:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8013976:	79fb      	ldrb	r3, [r7, #7]
 8013978:	2b03      	cmp	r3, #3
 801397a:	d906      	bls.n	801398a <dns_check_entry+0x2e>
 801397c:	4b46      	ldr	r3, [pc, #280]	; (8013a98 <dns_check_entry+0x13c>)
 801397e:	f240 421c 	movw	r2, #1052	; 0x41c
 8013982:	4946      	ldr	r1, [pc, #280]	; (8013a9c <dns_check_entry+0x140>)
 8013984:	4846      	ldr	r0, [pc, #280]	; (8013aa0 <dns_check_entry+0x144>)
 8013986:	f013 faa5 	bl	8026ed4 <iprintf>

  switch (entry->state) {
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	7a9b      	ldrb	r3, [r3, #10]
 801398e:	2b03      	cmp	r3, #3
 8013990:	d86f      	bhi.n	8013a72 <dns_check_entry+0x116>
 8013992:	a201      	add	r2, pc, #4	; (adr r2, 8013998 <dns_check_entry+0x3c>)
 8013994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013998:	08013a83 	.word	0x08013a83
 801399c:	080139a9 	.word	0x080139a9
 80139a0:	080139db 	.word	0x080139db
 80139a4:	08013a51 	.word	0x08013a51
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 80139a8:	f7ff ff88 	bl	80138bc <dns_create_txid>
 80139ac:	4603      	mov	r3, r0
 80139ae:	461a      	mov	r2, r3
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	2202      	movs	r2, #2
 80139b8:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	2200      	movs	r2, #0
 80139be:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	2201      	movs	r2, #1
 80139c4:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	2200      	movs	r2, #0
 80139ca:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 80139cc:	79fb      	ldrb	r3, [r7, #7]
 80139ce:	4618      	mov	r0, r3
 80139d0:	f7ff fd36 	bl	8013440 <dns_send>
 80139d4:	4603      	mov	r3, r0
 80139d6:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 80139d8:	e058      	b.n	8013a8c <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	7b1b      	ldrb	r3, [r3, #12]
 80139de:	3b01      	subs	r3, #1
 80139e0:	b2da      	uxtb	r2, r3
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	731a      	strb	r2, [r3, #12]
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	7b1b      	ldrb	r3, [r3, #12]
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d14b      	bne.n	8013a86 <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	7b5b      	ldrb	r3, [r3, #13]
 80139f2:	3301      	adds	r3, #1
 80139f4:	b2da      	uxtb	r2, r3
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	735a      	strb	r2, [r3, #13]
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	7b5b      	ldrb	r3, [r3, #13]
 80139fe:	2b04      	cmp	r3, #4
 8013a00:	d11b      	bne.n	8013a3a <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 8013a02:	68f8      	ldr	r0, [r7, #12]
 8013a04:	f7ff ff8a 	bl	801391c <dns_backupserver_available>
 8013a08:	4603      	mov	r3, r0
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d00c      	beq.n	8013a28 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	7adb      	ldrb	r3, [r3, #11]
 8013a12:	3301      	adds	r3, #1
 8013a14:	b2da      	uxtb	r2, r3
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	2201      	movs	r2, #1
 8013a1e:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	2200      	movs	r2, #0
 8013a24:	735a      	strb	r2, [r3, #13]
 8013a26:	e00c      	b.n	8013a42 <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 8013a28:	79fb      	ldrb	r3, [r7, #7]
 8013a2a:	2100      	movs	r1, #0
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	f7ff fe85 	bl	801373c <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	2200      	movs	r2, #0
 8013a36:	729a      	strb	r2, [r3, #10]
            break;
 8013a38:	e028      	b.n	8013a8c <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	7b5a      	ldrb	r2, [r3, #13]
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 8013a42:	79fb      	ldrb	r3, [r7, #7]
 8013a44:	4618      	mov	r0, r3
 8013a46:	f7ff fcfb 	bl	8013440 <dns_send>
 8013a4a:	4603      	mov	r3, r0
 8013a4c:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 8013a4e:	e01a      	b.n	8013a86 <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d008      	beq.n	8013a6a <dns_check_entry+0x10e>
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	1e5a      	subs	r2, r3, #1
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	601a      	str	r2, [r3, #0]
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d10f      	bne.n	8013a8a <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	729a      	strb	r2, [r3, #10]
      }
      break;
 8013a70:	e00b      	b.n	8013a8a <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8013a72:	4b09      	ldr	r3, [pc, #36]	; (8013a98 <dns_check_entry+0x13c>)
 8013a74:	f240 425b 	movw	r2, #1115	; 0x45b
 8013a78:	490a      	ldr	r1, [pc, #40]	; (8013aa4 <dns_check_entry+0x148>)
 8013a7a:	4809      	ldr	r0, [pc, #36]	; (8013aa0 <dns_check_entry+0x144>)
 8013a7c:	f013 fa2a 	bl	8026ed4 <iprintf>
      break;
 8013a80:	e004      	b.n	8013a8c <dns_check_entry+0x130>
      break;
 8013a82:	bf00      	nop
 8013a84:	e002      	b.n	8013a8c <dns_check_entry+0x130>
      break;
 8013a86:	bf00      	nop
 8013a88:	e000      	b.n	8013a8c <dns_check_entry+0x130>
      break;
 8013a8a:	bf00      	nop
  }
}
 8013a8c:	bf00      	nop
 8013a8e:	3710      	adds	r7, #16
 8013a90:	46bd      	mov	sp, r7
 8013a92:	bd80      	pop	{r7, pc}
 8013a94:	24004ac8 	.word	0x24004ac8
 8013a98:	0802b4d8 	.word	0x0802b4d8
 8013a9c:	0802b548 	.word	0x0802b548
 8013aa0:	0802b520 	.word	0x0802b520
 8013aa4:	0802b564 	.word	0x0802b564

08013aa8 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 8013aa8:	b580      	push	{r7, lr}
 8013aaa:	b082      	sub	sp, #8
 8013aac:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8013aae:	2300      	movs	r3, #0
 8013ab0:	71fb      	strb	r3, [r7, #7]
 8013ab2:	e006      	b.n	8013ac2 <dns_check_entries+0x1a>
    dns_check_entry(i);
 8013ab4:	79fb      	ldrb	r3, [r7, #7]
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f7ff ff50 	bl	801395c <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8013abc:	79fb      	ldrb	r3, [r7, #7]
 8013abe:	3301      	adds	r3, #1
 8013ac0:	71fb      	strb	r3, [r7, #7]
 8013ac2:	79fb      	ldrb	r3, [r7, #7]
 8013ac4:	2b03      	cmp	r3, #3
 8013ac6:	d9f5      	bls.n	8013ab4 <dns_check_entries+0xc>
  }
}
 8013ac8:	bf00      	nop
 8013aca:	bf00      	nop
 8013acc:	3708      	adds	r7, #8
 8013ace:	46bd      	mov	sp, r7
 8013ad0:	bd80      	pop	{r7, pc}
	...

08013ad4 <dns_correct_response>:
/**
 * Save TTL and call dns_call_found for correct response.
 */
static void
dns_correct_response(u8_t idx, u32_t ttl)
{
 8013ad4:	b580      	push	{r7, lr}
 8013ad6:	b084      	sub	sp, #16
 8013ad8:	af00      	add	r7, sp, #0
 8013ada:	4603      	mov	r3, r0
 8013adc:	6039      	str	r1, [r7, #0]
 8013ade:	71fb      	strb	r3, [r7, #7]
  struct dns_table_entry *entry = &dns_table[idx];
 8013ae0:	79fa      	ldrb	r2, [r7, #7]
 8013ae2:	4613      	mov	r3, r2
 8013ae4:	011b      	lsls	r3, r3, #4
 8013ae6:	4413      	add	r3, r2
 8013ae8:	011b      	lsls	r3, r3, #4
 8013aea:	4a13      	ldr	r2, [pc, #76]	; (8013b38 <dns_correct_response+0x64>)
 8013aec:	4413      	add	r3, r2
 8013aee:	60fb      	str	r3, [r7, #12]

  entry->state = DNS_STATE_DONE;
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	2203      	movs	r2, #3
 8013af4:	729a      	strb	r2, [r3, #10]
  LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response = ", entry->name));
  ip_addr_debug_print_val(DNS_DEBUG, entry->ipaddr);
  LWIP_DEBUGF(DNS_DEBUG, ("\n"));

  /* read the answer resource record's TTL, and maximize it if needed */
  entry->ttl = ttl;
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	683a      	ldr	r2, [r7, #0]
 8013afa:	601a      	str	r2, [r3, #0]
  if (entry->ttl > DNS_MAX_TTL) {
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	4a0e      	ldr	r2, [pc, #56]	; (8013b3c <dns_correct_response+0x68>)
 8013b02:	4293      	cmp	r3, r2
 8013b04:	d902      	bls.n	8013b0c <dns_correct_response+0x38>
    entry->ttl = DNS_MAX_TTL;
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	4a0c      	ldr	r2, [pc, #48]	; (8013b3c <dns_correct_response+0x68>)
 8013b0a:	601a      	str	r2, [r3, #0]
  }
  dns_call_found(idx, &entry->ipaddr);
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	1d1a      	adds	r2, r3, #4
 8013b10:	79fb      	ldrb	r3, [r7, #7]
 8013b12:	4611      	mov	r1, r2
 8013b14:	4618      	mov	r0, r3
 8013b16:	f7ff fe11 	bl	801373c <dns_call_found>

  if (entry->ttl == 0) {
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d106      	bne.n	8013b30 <dns_correct_response+0x5c>
    /* RFC 883, page 29: "Zero values are
       interpreted to mean that the RR can only be used for the
       transaction in progress, and should not be cached."
       -> flush this entry now */
    /* entry reused during callback? */
    if (entry->state == DNS_STATE_DONE) {
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	7a9b      	ldrb	r3, [r3, #10]
 8013b26:	2b03      	cmp	r3, #3
 8013b28:	d102      	bne.n	8013b30 <dns_correct_response+0x5c>
      entry->state = DNS_STATE_UNUSED;
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	729a      	strb	r2, [r3, #10]
    }
  }
}
 8013b30:	bf00      	nop
 8013b32:	3710      	adds	r7, #16
 8013b34:	46bd      	mov	sp, r7
 8013b36:	bd80      	pop	{r7, pc}
 8013b38:	24004ac8 	.word	0x24004ac8
 8013b3c:	00093a80 	.word	0x00093a80

08013b40 <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8013b40:	b590      	push	{r4, r7, lr}
 8013b42:	b091      	sub	sp, #68	; 0x44
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	60f8      	str	r0, [r7, #12]
 8013b48:	60b9      	str	r1, [r7, #8]
 8013b4a:	607a      	str	r2, [r7, #4]
 8013b4c:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	891b      	ldrh	r3, [r3, #8]
 8013b52:	2b0f      	cmp	r3, #15
 8013b54:	f240 811e 	bls.w	8013d94 <dns_recv+0x254>
    /* free pbuf and return */
    goto ignore_packet;
  }

  /* copy dns payload inside static buffer for processing */
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 8013b58:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8013b5c:	2300      	movs	r3, #0
 8013b5e:	220c      	movs	r2, #12
 8013b60:	6878      	ldr	r0, [r7, #4]
 8013b62:	f002 f98d 	bl	8015e80 <pbuf_copy_partial>
 8013b66:	4603      	mov	r3, r0
 8013b68:	2b0c      	cmp	r3, #12
 8013b6a:	f040 8115 	bne.w	8013d98 <dns_recv+0x258>
    /* Match the ID in the DNS header with the name table. */
    txid = lwip_htons(hdr.id);
 8013b6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013b70:	4618      	mov	r0, r3
 8013b72:	f7ff faad 	bl	80130d0 <lwip_htons>
 8013b76:	4603      	mov	r3, r0
 8013b78:	873b      	strh	r3, [r7, #56]	; 0x38
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8013b7a:	2300      	movs	r3, #0
 8013b7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013b80:	e102      	b.n	8013d88 <dns_recv+0x248>
      struct dns_table_entry *entry = &dns_table[i];
 8013b82:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8013b86:	4613      	mov	r3, r2
 8013b88:	011b      	lsls	r3, r3, #4
 8013b8a:	4413      	add	r3, r2
 8013b8c:	011b      	lsls	r3, r3, #4
 8013b8e:	4a92      	ldr	r2, [pc, #584]	; (8013dd8 <dns_recv+0x298>)
 8013b90:	4413      	add	r3, r2
 8013b92:	637b      	str	r3, [r7, #52]	; 0x34
      if ((entry->state == DNS_STATE_ASKING) &&
 8013b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b96:	7a9b      	ldrb	r3, [r3, #10]
 8013b98:	2b02      	cmp	r3, #2
 8013b9a:	f040 80f0 	bne.w	8013d7e <dns_recv+0x23e>
          (entry->txid == txid)) {
 8013b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ba0:	891b      	ldrh	r3, [r3, #8]
      if ((entry->state == DNS_STATE_ASKING) &&
 8013ba2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8013ba4:	429a      	cmp	r2, r3
 8013ba6:	f040 80ea 	bne.w	8013d7e <dns_recv+0x23e>

        /* We only care about the question(s) and the answers. The authrr
           and the extrarr are simply discarded. */
        nquestions = lwip_htons(hdr.numquestions);
 8013baa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013bac:	4618      	mov	r0, r3
 8013bae:	f7ff fa8f 	bl	80130d0 <lwip_htons>
 8013bb2:	4603      	mov	r3, r0
 8013bb4:	867b      	strh	r3, [r7, #50]	; 0x32
        nanswers   = lwip_htons(hdr.numanswers);
 8013bb6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013bb8:	4618      	mov	r0, r3
 8013bba:	f7ff fa89 	bl	80130d0 <lwip_htons>
 8013bbe:	4603      	mov	r3, r0
 8013bc0:	877b      	strh	r3, [r7, #58]	; 0x3a

        /* Check for correct response. */
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 8013bc2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013bc6:	b25b      	sxtb	r3, r3
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	f280 80e7 	bge.w	8013d9c <dns_recv+0x25c>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": not a response\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }
        if (nquestions != 1) {
 8013bce:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8013bd0:	2b01      	cmp	r3, #1
 8013bd2:	f040 80e5 	bne.w	8013da0 <dns_recv+0x260>
        if (!entry->is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
        {
          /* Check whether response comes from the same network address to which the
             question was sent. (RFC 5452) */
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 8013bd6:	683b      	ldr	r3, [r7, #0]
 8013bd8:	681a      	ldr	r2, [r3, #0]
 8013bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bdc:	7adb      	ldrb	r3, [r3, #11]
 8013bde:	4619      	mov	r1, r3
 8013be0:	4b7e      	ldr	r3, [pc, #504]	; (8013ddc <dns_recv+0x29c>)
 8013be2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013be6:	429a      	cmp	r2, r3
 8013be8:	f040 80dc 	bne.w	8013da4 <dns_recv+0x264>
          }
        }

        /* Check if the name in the "question" part match with the name in the entry and
           skip it if equal. */
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 8013bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bee:	3310      	adds	r3, #16
 8013bf0:	220c      	movs	r2, #12
 8013bf2:	6879      	ldr	r1, [r7, #4]
 8013bf4:	4618      	mov	r0, r3
 8013bf6:	f7ff fb47 	bl	8013288 <dns_compare_name>
 8013bfa:	4603      	mov	r3, r0
 8013bfc:	87bb      	strh	r3, [r7, #60]	; 0x3c
        if (res_idx == 0xFFFF) {
 8013bfe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013c00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013c04:	4293      	cmp	r3, r2
 8013c06:	f000 80cf 	beq.w	8013da8 <dns_recv+0x268>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }

        /* check if "question" part matches the request */
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 8013c0a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013c0c:	f107 0114 	add.w	r1, r7, #20
 8013c10:	2204      	movs	r2, #4
 8013c12:	6878      	ldr	r0, [r7, #4]
 8013c14:	f002 f934 	bl	8015e80 <pbuf_copy_partial>
 8013c18:	4603      	mov	r3, r0
 8013c1a:	2b04      	cmp	r3, #4
 8013c1c:	f040 80c6 	bne.w	8013dac <dns_recv+0x26c>
          goto ignore_packet; /* ignore this packet */
        }
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 8013c20:	8afb      	ldrh	r3, [r7, #22]
 8013c22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013c26:	f040 80c3 	bne.w	8013db0 <dns_recv+0x270>
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
            (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_A)))) {
 8013c2a:	8abb      	ldrh	r3, [r7, #20]
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 8013c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013c30:	f040 80be 	bne.w	8013db0 <dns_recv+0x270>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }
        /* skip the rest of the "question" part */
        if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
 8013c34:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013c36:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8013c3a:	4293      	cmp	r3, r2
 8013c3c:	f200 80ba 	bhi.w	8013db4 <dns_recv+0x274>
          goto ignore_packet;
        }
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 8013c40:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013c42:	3304      	adds	r3, #4
 8013c44:	87bb      	strh	r3, [r7, #60]	; 0x3c

        /* Check for error. If so, call callback to inform. */
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 8013c46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c4a:	f003 030f 	and.w	r3, r3, #15
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d078      	beq.n	8013d44 <dns_recv+0x204>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in flags\n", entry->name));

          /* if there is another backup DNS server to try
           * then don't stop the DNS request
           */
          if (dns_backupserver_available(entry)) {
 8013c52:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013c54:	f7ff fe62 	bl	801391c <dns_backupserver_available>
 8013c58:	4603      	mov	r3, r0
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d07a      	beq.n	8013d54 <dns_recv+0x214>
            /* avoid retrying the same server */
            entry->retries = DNS_MAX_RETRIES-1;
 8013c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c60:	2203      	movs	r2, #3
 8013c62:	735a      	strb	r2, [r3, #13]
            entry->tmr     = 1;
 8013c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c66:	2201      	movs	r2, #1
 8013c68:	731a      	strb	r2, [r3, #12]

            /* contact next available server for this entry */
            dns_check_entry(i);
 8013c6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013c6e:	4618      	mov	r0, r3
 8013c70:	f7ff fe74 	bl	801395c <dns_check_entry>

            goto ignore_packet;
 8013c74:	e0a9      	b.n	8013dca <dns_recv+0x28a>
          }
        } else {
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
            /* skip answer resource record's host name */
            res_idx = dns_skip_name(p, res_idx);
 8013c76:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013c78:	4619      	mov	r1, r3
 8013c7a:	6878      	ldr	r0, [r7, #4]
 8013c7c:	f7ff fb92 	bl	80133a4 <dns_skip_name>
 8013c80:	4603      	mov	r3, r0
 8013c82:	87bb      	strh	r3, [r7, #60]	; 0x3c
            if (res_idx == 0xFFFF) {
 8013c84:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013c86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013c8a:	4293      	cmp	r3, r2
 8013c8c:	f000 8094 	beq.w	8013db8 <dns_recv+0x278>
              goto ignore_packet; /* ignore this packet */
            }

            /* Check for IP address type and Internet class. Others are discarded. */
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 8013c90:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013c92:	f107 0118 	add.w	r1, r7, #24
 8013c96:	220a      	movs	r2, #10
 8013c98:	6878      	ldr	r0, [r7, #4]
 8013c9a:	f002 f8f1 	bl	8015e80 <pbuf_copy_partial>
 8013c9e:	4603      	mov	r3, r0
 8013ca0:	2b0a      	cmp	r3, #10
 8013ca2:	f040 808b 	bne.w	8013dbc <dns_recv+0x27c>
              goto ignore_packet; /* ignore this packet */
            }
            if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
 8013ca6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013ca8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013cac:	4293      	cmp	r3, r2
 8013cae:	f200 8087 	bhi.w	8013dc0 <dns_recv+0x280>
              goto ignore_packet;
            }
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 8013cb2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013cb4:	330a      	adds	r3, #10
 8013cb6:	87bb      	strh	r3, [r7, #60]	; 0x3c

            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 8013cb8:	8b7b      	ldrh	r3, [r7, #26]
 8013cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013cbe:	d12b      	bne.n	8013d18 <dns_recv+0x1d8>
#if LWIP_IPV4
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 8013cc0:	8b3b      	ldrh	r3, [r7, #24]
 8013cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013cc6:	d127      	bne.n	8013d18 <dns_recv+0x1d8>
 8013cc8:	8c3b      	ldrh	r3, [r7, #32]
 8013cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013cce:	d123      	bne.n	8013d18 <dns_recv+0x1d8>
                if (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
                {
                  ip4_addr_t ip4addr;
                  /* read the IP address after answer resource record's header */
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 8013cd0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013cd2:	f107 0110 	add.w	r1, r7, #16
 8013cd6:	2204      	movs	r2, #4
 8013cd8:	6878      	ldr	r0, [r7, #4]
 8013cda:	f002 f8d1 	bl	8015e80 <pbuf_copy_partial>
 8013cde:	4603      	mov	r3, r0
 8013ce0:	2b04      	cmp	r3, #4
 8013ce2:	d16f      	bne.n	8013dc4 <dns_recv+0x284>
                    goto ignore_packet; /* ignore this packet */
                  }
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 8013ce4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8013ce8:	6939      	ldr	r1, [r7, #16]
 8013cea:	483b      	ldr	r0, [pc, #236]	; (8013dd8 <dns_recv+0x298>)
 8013cec:	4613      	mov	r3, r2
 8013cee:	011b      	lsls	r3, r3, #4
 8013cf0:	4413      	add	r3, r2
 8013cf2:	011b      	lsls	r3, r3, #4
 8013cf4:	4403      	add	r3, r0
 8013cf6:	3304      	adds	r3, #4
 8013cf8:	6019      	str	r1, [r3, #0]
                  pbuf_free(p);
 8013cfa:	6878      	ldr	r0, [r7, #4]
 8013cfc:	f001 feba 	bl	8015a74 <pbuf_free>
                  /* handle correct response */
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 8013d00:	69fb      	ldr	r3, [r7, #28]
 8013d02:	4618      	mov	r0, r3
 8013d04:	f7ff f9f9 	bl	80130fa <lwip_htonl>
 8013d08:	4602      	mov	r2, r0
 8013d0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013d0e:	4611      	mov	r1, r2
 8013d10:	4618      	mov	r0, r3
 8013d12:	f7ff fedf 	bl	8013ad4 <dns_correct_response>
 8013d16:	e05c      	b.n	8013dd2 <dns_recv+0x292>
                }
              }
#endif /* LWIP_IPV6 */
            }
            /* skip this answer */
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 8013d18:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 8013d1a:	8c3b      	ldrh	r3, [r7, #32]
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	f7ff f9d7 	bl	80130d0 <lwip_htons>
 8013d22:	4603      	mov	r3, r0
 8013d24:	4423      	add	r3, r4
 8013d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013d2a:	da4d      	bge.n	8013dc8 <dns_recv+0x288>
              goto ignore_packet; /* ignore this packet */
            }
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 8013d2c:	8c3b      	ldrh	r3, [r7, #32]
 8013d2e:	4618      	mov	r0, r3
 8013d30:	f7ff f9ce 	bl	80130d0 <lwip_htons>
 8013d34:	4603      	mov	r3, r0
 8013d36:	461a      	mov	r2, r3
 8013d38:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013d3a:	4413      	add	r3, r2
 8013d3c:	87bb      	strh	r3, [r7, #60]	; 0x3c
            --nanswers;
 8013d3e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013d40:	3b01      	subs	r3, #1
 8013d42:	877b      	strh	r3, [r7, #58]	; 0x3a
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 8013d44:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d004      	beq.n	8013d54 <dns_recv+0x214>
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	891b      	ldrh	r3, [r3, #8]
 8013d4e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8013d50:	429a      	cmp	r2, r3
 8013d52:	d390      	bcc.n	8013c76 <dns_recv+0x136>
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in response\n", entry->name));
        }
        /* call callback to indicate error, clean up memory and return */
        pbuf_free(p);
 8013d54:	6878      	ldr	r0, [r7, #4]
 8013d56:	f001 fe8d 	bl	8015a74 <pbuf_free>
        dns_call_found(i, NULL);
 8013d5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013d5e:	2100      	movs	r1, #0
 8013d60:	4618      	mov	r0, r3
 8013d62:	f7ff fceb 	bl	801373c <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 8013d66:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8013d6a:	491b      	ldr	r1, [pc, #108]	; (8013dd8 <dns_recv+0x298>)
 8013d6c:	4613      	mov	r3, r2
 8013d6e:	011b      	lsls	r3, r3, #4
 8013d70:	4413      	add	r3, r2
 8013d72:	011b      	lsls	r3, r3, #4
 8013d74:	440b      	add	r3, r1
 8013d76:	330a      	adds	r3, #10
 8013d78:	2200      	movs	r2, #0
 8013d7a:	701a      	strb	r2, [r3, #0]
        return;
 8013d7c:	e029      	b.n	8013dd2 <dns_recv+0x292>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8013d7e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013d82:	3301      	adds	r3, #1
 8013d84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013d88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013d8c:	2b03      	cmp	r3, #3
 8013d8e:	f67f aef8 	bls.w	8013b82 <dns_recv+0x42>
      }
    }
  }

ignore_packet:
 8013d92:	e001      	b.n	8013d98 <dns_recv+0x258>
    goto ignore_packet;
 8013d94:	bf00      	nop
 8013d96:	e018      	b.n	8013dca <dns_recv+0x28a>
ignore_packet:
 8013d98:	bf00      	nop
 8013d9a:	e016      	b.n	8013dca <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 8013d9c:	bf00      	nop
 8013d9e:	e014      	b.n	8013dca <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 8013da0:	bf00      	nop
 8013da2:	e012      	b.n	8013dca <dns_recv+0x28a>
            goto ignore_packet; /* ignore this packet */
 8013da4:	bf00      	nop
 8013da6:	e010      	b.n	8013dca <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 8013da8:	bf00      	nop
 8013daa:	e00e      	b.n	8013dca <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 8013dac:	bf00      	nop
 8013dae:	e00c      	b.n	8013dca <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 8013db0:	bf00      	nop
 8013db2:	e00a      	b.n	8013dca <dns_recv+0x28a>
          goto ignore_packet;
 8013db4:	bf00      	nop
 8013db6:	e008      	b.n	8013dca <dns_recv+0x28a>
              goto ignore_packet; /* ignore this packet */
 8013db8:	bf00      	nop
 8013dba:	e006      	b.n	8013dca <dns_recv+0x28a>
              goto ignore_packet; /* ignore this packet */
 8013dbc:	bf00      	nop
 8013dbe:	e004      	b.n	8013dca <dns_recv+0x28a>
              goto ignore_packet;
 8013dc0:	bf00      	nop
 8013dc2:	e002      	b.n	8013dca <dns_recv+0x28a>
                    goto ignore_packet; /* ignore this packet */
 8013dc4:	bf00      	nop
 8013dc6:	e000      	b.n	8013dca <dns_recv+0x28a>
              goto ignore_packet; /* ignore this packet */
 8013dc8:	bf00      	nop
  /* deallocate memory and return */
  pbuf_free(p);
 8013dca:	6878      	ldr	r0, [r7, #4]
 8013dcc:	f001 fe52 	bl	8015a74 <pbuf_free>
  return;
 8013dd0:	bf00      	nop
}
 8013dd2:	3744      	adds	r7, #68	; 0x44
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	bd90      	pop	{r4, r7, pc}
 8013dd8:	24004ac8 	.word	0x24004ac8
 8013ddc:	24004f38 	.word	0x24004f38

08013de0 <dns_enqueue>:
 * @return err_t return code.
 */
static err_t
dns_enqueue(const char *name, size_t hostnamelen, dns_found_callback found,
            void *callback_arg LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype) LWIP_DNS_ISMDNS_ARG(u8_t is_mdns))
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b08a      	sub	sp, #40	; 0x28
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	60f8      	str	r0, [r7, #12]
 8013de8:	60b9      	str	r1, [r7, #8]
 8013dea:	607a      	str	r2, [r7, #4]
 8013dec:	603b      	str	r3, [r7, #0]
  u8_t i;
  u8_t lseq, lseqi;
  struct dns_table_entry *entry = NULL;
 8013dee:	2300      	movs	r3, #0
 8013df0:	623b      	str	r3, [r7, #32]
  struct dns_req_entry *req;

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  u8_t r;
  /* check for duplicate entries */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8013df2:	2300      	movs	r3, #0
 8013df4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013df8:	e056      	b.n	8013ea8 <dns_enqueue+0xc8>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8013dfa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013dfe:	4990      	ldr	r1, [pc, #576]	; (8014040 <dns_enqueue+0x260>)
 8013e00:	4613      	mov	r3, r2
 8013e02:	011b      	lsls	r3, r3, #4
 8013e04:	4413      	add	r3, r2
 8013e06:	011b      	lsls	r3, r3, #4
 8013e08:	440b      	add	r3, r1
 8013e0a:	330a      	adds	r3, #10
 8013e0c:	781b      	ldrb	r3, [r3, #0]
 8013e0e:	2b02      	cmp	r3, #2
 8013e10:	d145      	bne.n	8013e9e <dns_enqueue+0xbe>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 8013e12:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013e16:	4613      	mov	r3, r2
 8013e18:	011b      	lsls	r3, r3, #4
 8013e1a:	4413      	add	r3, r2
 8013e1c:	011b      	lsls	r3, r3, #4
 8013e1e:	3310      	adds	r3, #16
 8013e20:	4a87      	ldr	r2, [pc, #540]	; (8014040 <dns_enqueue+0x260>)
 8013e22:	4413      	add	r3, r2
 8013e24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013e28:	4619      	mov	r1, r3
 8013e2a:	68f8      	ldr	r0, [r7, #12]
 8013e2c:	f7ff f97e 	bl	801312c <lwip_strnicmp>
 8013e30:	4603      	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d133      	bne.n	8013e9e <dns_enqueue+0xbe>
           for the same host should not be that common */
        continue;
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
      /* this is a duplicate entry, find a free request entry */
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8013e36:	2300      	movs	r3, #0
 8013e38:	76fb      	strb	r3, [r7, #27]
 8013e3a:	e02d      	b.n	8013e98 <dns_enqueue+0xb8>
        if (dns_requests[r].found == 0) {
 8013e3c:	7efa      	ldrb	r2, [r7, #27]
 8013e3e:	4981      	ldr	r1, [pc, #516]	; (8014044 <dns_enqueue+0x264>)
 8013e40:	4613      	mov	r3, r2
 8013e42:	005b      	lsls	r3, r3, #1
 8013e44:	4413      	add	r3, r2
 8013e46:	009b      	lsls	r3, r3, #2
 8013e48:	440b      	add	r3, r1
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d120      	bne.n	8013e92 <dns_enqueue+0xb2>
          dns_requests[r].found = found;
 8013e50:	7efa      	ldrb	r2, [r7, #27]
 8013e52:	497c      	ldr	r1, [pc, #496]	; (8014044 <dns_enqueue+0x264>)
 8013e54:	4613      	mov	r3, r2
 8013e56:	005b      	lsls	r3, r3, #1
 8013e58:	4413      	add	r3, r2
 8013e5a:	009b      	lsls	r3, r3, #2
 8013e5c:	440b      	add	r3, r1
 8013e5e:	687a      	ldr	r2, [r7, #4]
 8013e60:	601a      	str	r2, [r3, #0]
          dns_requests[r].arg = callback_arg;
 8013e62:	7efa      	ldrb	r2, [r7, #27]
 8013e64:	4977      	ldr	r1, [pc, #476]	; (8014044 <dns_enqueue+0x264>)
 8013e66:	4613      	mov	r3, r2
 8013e68:	005b      	lsls	r3, r3, #1
 8013e6a:	4413      	add	r3, r2
 8013e6c:	009b      	lsls	r3, r3, #2
 8013e6e:	440b      	add	r3, r1
 8013e70:	3304      	adds	r3, #4
 8013e72:	683a      	ldr	r2, [r7, #0]
 8013e74:	601a      	str	r2, [r3, #0]
          dns_requests[r].dns_table_idx = i;
 8013e76:	7efa      	ldrb	r2, [r7, #27]
 8013e78:	4972      	ldr	r1, [pc, #456]	; (8014044 <dns_enqueue+0x264>)
 8013e7a:	4613      	mov	r3, r2
 8013e7c:	005b      	lsls	r3, r3, #1
 8013e7e:	4413      	add	r3, r2
 8013e80:	009b      	lsls	r3, r3, #2
 8013e82:	440b      	add	r3, r1
 8013e84:	3308      	adds	r3, #8
 8013e86:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013e8a:	701a      	strb	r2, [r3, #0]
          LWIP_DNS_SET_ADDRTYPE(dns_requests[r].reqaddrtype, dns_addrtype);
          LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": duplicate request\n", name));
          return ERR_INPROGRESS;
 8013e8c:	f06f 0304 	mvn.w	r3, #4
 8013e90:	e0d1      	b.n	8014036 <dns_enqueue+0x256>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8013e92:	7efb      	ldrb	r3, [r7, #27]
 8013e94:	3301      	adds	r3, #1
 8013e96:	76fb      	strb	r3, [r7, #27]
 8013e98:	7efb      	ldrb	r3, [r7, #27]
 8013e9a:	2b03      	cmp	r3, #3
 8013e9c:	d9ce      	bls.n	8013e3c <dns_enqueue+0x5c>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8013e9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013ea2:	3301      	adds	r3, #1
 8013ea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013ea8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013eac:	2b03      	cmp	r3, #3
 8013eae:	d9a4      	bls.n	8013dfa <dns_enqueue+0x1a>
  }
  /* no duplicate entries found */
#endif

  /* search an unused entry, or the oldest one */
  lseq = 0;
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  lseqi = DNS_TABLE_SIZE;
 8013eb6:	2304      	movs	r3, #4
 8013eb8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8013ebc:	2300      	movs	r3, #0
 8013ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013ec2:	e027      	b.n	8013f14 <dns_enqueue+0x134>
    entry = &dns_table[i];
 8013ec4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013ec8:	4613      	mov	r3, r2
 8013eca:	011b      	lsls	r3, r3, #4
 8013ecc:	4413      	add	r3, r2
 8013ece:	011b      	lsls	r3, r3, #4
 8013ed0:	4a5b      	ldr	r2, [pc, #364]	; (8014040 <dns_enqueue+0x260>)
 8013ed2:	4413      	add	r3, r2
 8013ed4:	623b      	str	r3, [r7, #32]
    /* is it an unused entry ? */
    if (entry->state == DNS_STATE_UNUSED) {
 8013ed6:	6a3b      	ldr	r3, [r7, #32]
 8013ed8:	7a9b      	ldrb	r3, [r3, #10]
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d01f      	beq.n	8013f1e <dns_enqueue+0x13e>
      break;
    }
    /* check if this is the oldest completed entry */
    if (entry->state == DNS_STATE_DONE) {
 8013ede:	6a3b      	ldr	r3, [r7, #32]
 8013ee0:	7a9b      	ldrb	r3, [r3, #10]
 8013ee2:	2b03      	cmp	r3, #3
 8013ee4:	d111      	bne.n	8013f0a <dns_enqueue+0x12a>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 8013ee6:	4b58      	ldr	r3, [pc, #352]	; (8014048 <dns_enqueue+0x268>)
 8013ee8:	781a      	ldrb	r2, [r3, #0]
 8013eea:	6a3b      	ldr	r3, [r7, #32]
 8013eec:	7b9b      	ldrb	r3, [r3, #14]
 8013eee:	1ad3      	subs	r3, r2, r3
 8013ef0:	76bb      	strb	r3, [r7, #26]
      if (age > lseq) {
 8013ef2:	7eba      	ldrb	r2, [r7, #26]
 8013ef4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013ef8:	429a      	cmp	r2, r3
 8013efa:	d906      	bls.n	8013f0a <dns_enqueue+0x12a>
        lseq = age;
 8013efc:	7ebb      	ldrb	r3, [r7, #26]
 8013efe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        lseqi = i;
 8013f02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f06:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8013f0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f0e:	3301      	adds	r3, #1
 8013f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013f14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f18:	2b03      	cmp	r3, #3
 8013f1a:	d9d3      	bls.n	8013ec4 <dns_enqueue+0xe4>
 8013f1c:	e000      	b.n	8013f20 <dns_enqueue+0x140>
      break;
 8013f1e:	bf00      	nop
      }
    }
  }

  /* if we don't have found an unused entry, use the oldest completed one */
  if (i == DNS_TABLE_SIZE) {
 8013f20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f24:	2b04      	cmp	r3, #4
 8013f26:	d11f      	bne.n	8013f68 <dns_enqueue+0x188>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 8013f28:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8013f2c:	2b03      	cmp	r3, #3
 8013f2e:	d80b      	bhi.n	8013f48 <dns_enqueue+0x168>
 8013f30:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8013f34:	4942      	ldr	r1, [pc, #264]	; (8014040 <dns_enqueue+0x260>)
 8013f36:	4613      	mov	r3, r2
 8013f38:	011b      	lsls	r3, r3, #4
 8013f3a:	4413      	add	r3, r2
 8013f3c:	011b      	lsls	r3, r3, #4
 8013f3e:	440b      	add	r3, r1
 8013f40:	330a      	adds	r3, #10
 8013f42:	781b      	ldrb	r3, [r3, #0]
 8013f44:	2b03      	cmp	r3, #3
 8013f46:	d002      	beq.n	8013f4e <dns_enqueue+0x16e>
      /* no entry can be used now, table is full */
      LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS entries table is full\n", name));
      return ERR_MEM;
 8013f48:	f04f 33ff 	mov.w	r3, #4294967295
 8013f4c:	e073      	b.n	8014036 <dns_enqueue+0x256>
    } else {
      /* use the oldest completed one */
      i = lseqi;
 8013f4e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8013f52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      entry = &dns_table[i];
 8013f56:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013f5a:	4613      	mov	r3, r2
 8013f5c:	011b      	lsls	r3, r3, #4
 8013f5e:	4413      	add	r3, r2
 8013f60:	011b      	lsls	r3, r3, #4
 8013f62:	4a37      	ldr	r2, [pc, #220]	; (8014040 <dns_enqueue+0x260>)
 8013f64:	4413      	add	r3, r2
 8013f66:	623b      	str	r3, [r7, #32]
    }
  }

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  /* find a free request entry */
  req = NULL;
 8013f68:	2300      	movs	r3, #0
 8013f6a:	61fb      	str	r3, [r7, #28]
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	76fb      	strb	r3, [r7, #27]
 8013f70:	e015      	b.n	8013f9e <dns_enqueue+0x1be>
    if (dns_requests[r].found == NULL) {
 8013f72:	7efa      	ldrb	r2, [r7, #27]
 8013f74:	4933      	ldr	r1, [pc, #204]	; (8014044 <dns_enqueue+0x264>)
 8013f76:	4613      	mov	r3, r2
 8013f78:	005b      	lsls	r3, r3, #1
 8013f7a:	4413      	add	r3, r2
 8013f7c:	009b      	lsls	r3, r3, #2
 8013f7e:	440b      	add	r3, r1
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d108      	bne.n	8013f98 <dns_enqueue+0x1b8>
      req = &dns_requests[r];
 8013f86:	7efa      	ldrb	r2, [r7, #27]
 8013f88:	4613      	mov	r3, r2
 8013f8a:	005b      	lsls	r3, r3, #1
 8013f8c:	4413      	add	r3, r2
 8013f8e:	009b      	lsls	r3, r3, #2
 8013f90:	4a2c      	ldr	r2, [pc, #176]	; (8014044 <dns_enqueue+0x264>)
 8013f92:	4413      	add	r3, r2
 8013f94:	61fb      	str	r3, [r7, #28]
      break;
 8013f96:	e005      	b.n	8013fa4 <dns_enqueue+0x1c4>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8013f98:	7efb      	ldrb	r3, [r7, #27]
 8013f9a:	3301      	adds	r3, #1
 8013f9c:	76fb      	strb	r3, [r7, #27]
 8013f9e:	7efb      	ldrb	r3, [r7, #27]
 8013fa0:	2b03      	cmp	r3, #3
 8013fa2:	d9e6      	bls.n	8013f72 <dns_enqueue+0x192>
    }
  }
  if (req == NULL) {
 8013fa4:	69fb      	ldr	r3, [r7, #28]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d102      	bne.n	8013fb0 <dns_enqueue+0x1d0>
    /* no request entry can be used now, table is full */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS request entries table is full\n", name));
    return ERR_MEM;
 8013faa:	f04f 33ff 	mov.w	r3, #4294967295
 8013fae:	e042      	b.n	8014036 <dns_enqueue+0x256>
  }
  req->dns_table_idx = i;
 8013fb0:	69fb      	ldr	r3, [r7, #28]
 8013fb2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013fb6:	721a      	strb	r2, [r3, #8]

  /* use this entry */
  LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": use DNS entry %"U16_F"\n", name, (u16_t)(i)));

  /* fill the entry */
  entry->state = DNS_STATE_NEW;
 8013fb8:	6a3b      	ldr	r3, [r7, #32]
 8013fba:	2201      	movs	r2, #1
 8013fbc:	729a      	strb	r2, [r3, #10]
  entry->seqno = dns_seqno;
 8013fbe:	4b22      	ldr	r3, [pc, #136]	; (8014048 <dns_enqueue+0x268>)
 8013fc0:	781a      	ldrb	r2, [r3, #0]
 8013fc2:	6a3b      	ldr	r3, [r7, #32]
 8013fc4:	739a      	strb	r2, [r3, #14]
  LWIP_DNS_SET_ADDRTYPE(entry->reqaddrtype, dns_addrtype);
  LWIP_DNS_SET_ADDRTYPE(req->reqaddrtype, dns_addrtype);
  req->found = found;
 8013fc6:	69fb      	ldr	r3, [r7, #28]
 8013fc8:	687a      	ldr	r2, [r7, #4]
 8013fca:	601a      	str	r2, [r3, #0]
  req->arg   = callback_arg;
 8013fcc:	69fb      	ldr	r3, [r7, #28]
 8013fce:	683a      	ldr	r2, [r7, #0]
 8013fd0:	605a      	str	r2, [r3, #4]
  namelen = LWIP_MIN(hostnamelen, DNS_MAX_NAME_LENGTH - 1);
 8013fd2:	68bb      	ldr	r3, [r7, #8]
 8013fd4:	2bff      	cmp	r3, #255	; 0xff
 8013fd6:	bf28      	it	cs
 8013fd8:	23ff      	movcs	r3, #255	; 0xff
 8013fda:	617b      	str	r3, [r7, #20]
  MEMCPY(entry->name, name, namelen);
 8013fdc:	6a3b      	ldr	r3, [r7, #32]
 8013fde:	3310      	adds	r3, #16
 8013fe0:	697a      	ldr	r2, [r7, #20]
 8013fe2:	68f9      	ldr	r1, [r7, #12]
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	f012 f8ef 	bl	80261c8 <memcpy>
  entry->name[namelen] = 0;
 8013fea:	6a3a      	ldr	r2, [r7, #32]
 8013fec:	697b      	ldr	r3, [r7, #20]
 8013fee:	4413      	add	r3, r2
 8013ff0:	3310      	adds	r3, #16
 8013ff2:	2200      	movs	r2, #0
 8013ff4:	701a      	strb	r2, [r3, #0]

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  entry->pcb_idx = dns_alloc_pcb();
 8013ff6:	f7ff fb4f 	bl	8013698 <dns_alloc_pcb>
 8013ffa:	4603      	mov	r3, r0
 8013ffc:	461a      	mov	r2, r3
 8013ffe:	6a3b      	ldr	r3, [r7, #32]
 8014000:	73da      	strb	r2, [r3, #15]
  if (entry->pcb_idx >= DNS_MAX_SOURCE_PORTS) {
 8014002:	6a3b      	ldr	r3, [r7, #32]
 8014004:	7bdb      	ldrb	r3, [r3, #15]
 8014006:	2b03      	cmp	r3, #3
 8014008:	d908      	bls.n	801401c <dns_enqueue+0x23c>
    /* failed to get a UDP pcb */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": failed to allocate a pcb\n", name));
    entry->state = DNS_STATE_UNUSED;
 801400a:	6a3b      	ldr	r3, [r7, #32]
 801400c:	2200      	movs	r2, #0
 801400e:	729a      	strb	r2, [r3, #10]
    req->found = NULL;
 8014010:	69fb      	ldr	r3, [r7, #28]
 8014012:	2200      	movs	r2, #0
 8014014:	601a      	str	r2, [r3, #0]
    return ERR_MEM;
 8014016:	f04f 33ff 	mov.w	r3, #4294967295
 801401a:	e00c      	b.n	8014036 <dns_enqueue+0x256>

#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  entry->is_mdns = is_mdns;
#endif

  dns_seqno++;
 801401c:	4b0a      	ldr	r3, [pc, #40]	; (8014048 <dns_enqueue+0x268>)
 801401e:	781b      	ldrb	r3, [r3, #0]
 8014020:	3301      	adds	r3, #1
 8014022:	b2da      	uxtb	r2, r3
 8014024:	4b08      	ldr	r3, [pc, #32]	; (8014048 <dns_enqueue+0x268>)
 8014026:	701a      	strb	r2, [r3, #0]

  /* force to send query without waiting timer */
  dns_check_entry(i);
 8014028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801402c:	4618      	mov	r0, r3
 801402e:	f7ff fc95 	bl	801395c <dns_check_entry>

  /* dns query is enqueued */
  return ERR_INPROGRESS;
 8014032:	f06f 0304 	mvn.w	r3, #4
}
 8014036:	4618      	mov	r0, r3
 8014038:	3728      	adds	r7, #40	; 0x28
 801403a:	46bd      	mov	sp, r7
 801403c:	bd80      	pop	{r7, pc}
 801403e:	bf00      	nop
 8014040:	24004ac8 	.word	0x24004ac8
 8014044:	24004f08 	.word	0x24004f08
 8014048:	24004ac5 	.word	0x24004ac5

0801404c <dns_gethostbyname>:
 * @return a err_t return code.
 */
err_t
dns_gethostbyname(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                  void *callback_arg)
{
 801404c:	b580      	push	{r7, lr}
 801404e:	b086      	sub	sp, #24
 8014050:	af02      	add	r7, sp, #8
 8014052:	60f8      	str	r0, [r7, #12]
 8014054:	60b9      	str	r1, [r7, #8]
 8014056:	607a      	str	r2, [r7, #4]
 8014058:	603b      	str	r3, [r7, #0]
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 801405a:	2300      	movs	r3, #0
 801405c:	9300      	str	r3, [sp, #0]
 801405e:	683b      	ldr	r3, [r7, #0]
 8014060:	687a      	ldr	r2, [r7, #4]
 8014062:	68b9      	ldr	r1, [r7, #8]
 8014064:	68f8      	ldr	r0, [r7, #12]
 8014066:	f000 f805 	bl	8014074 <dns_gethostbyname_addrtype>
 801406a:	4603      	mov	r3, r0
}
 801406c:	4618      	mov	r0, r3
 801406e:	3710      	adds	r7, #16
 8014070:	46bd      	mov	sp, r7
 8014072:	bd80      	pop	{r7, pc}

08014074 <dns_gethostbyname_addrtype>:
 *                     - LWIP_DNS_ADDRTYPE_IPV6: try to resolve IPv6 only
 */
err_t
dns_gethostbyname_addrtype(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                           void *callback_arg, u8_t dns_addrtype)
{
 8014074:	b580      	push	{r7, lr}
 8014076:	b086      	sub	sp, #24
 8014078:	af00      	add	r7, sp, #0
 801407a:	60f8      	str	r0, [r7, #12]
 801407c:	60b9      	str	r1, [r7, #8]
 801407e:	607a      	str	r2, [r7, #4]
 8014080:	603b      	str	r3, [r7, #0]
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 8014082:	68bb      	ldr	r3, [r7, #8]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d006      	beq.n	8014096 <dns_gethostbyname_addrtype+0x22>
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	2b00      	cmp	r3, #0
 801408c:	d003      	beq.n	8014096 <dns_gethostbyname_addrtype+0x22>
      (!hostname) || (!hostname[0])) {
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	781b      	ldrb	r3, [r3, #0]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d102      	bne.n	801409c <dns_gethostbyname_addrtype+0x28>
    return ERR_ARG;
 8014096:	f06f 030f 	mvn.w	r3, #15
 801409a:	e029      	b.n	80140f0 <dns_gethostbyname_addrtype+0x7c>
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 801409c:	68f8      	ldr	r0, [r7, #12]
 801409e:	f7ec f929 	bl	80002f4 <strlen>
 80140a2:	6178      	str	r0, [r7, #20]
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 80140a4:	697b      	ldr	r3, [r7, #20]
 80140a6:	2bff      	cmp	r3, #255	; 0xff
 80140a8:	d902      	bls.n	80140b0 <dns_gethostbyname_addrtype+0x3c>
    LWIP_DEBUGF(DNS_DEBUG, ("dns_gethostbyname: name too long to resolve"));
    return ERR_ARG;
 80140aa:	f06f 030f 	mvn.w	r3, #15
 80140ae:	e01f      	b.n	80140f0 <dns_gethostbyname_addrtype+0x7c>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 80140b0:	68b9      	ldr	r1, [r7, #8]
 80140b2:	68f8      	ldr	r0, [r7, #12]
 80140b4:	f00c fcdc 	bl	8020a70 <ip4addr_aton>
 80140b8:	4603      	mov	r3, r0
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d001      	beq.n	80140c2 <dns_gethostbyname_addrtype+0x4e>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 80140be:	2300      	movs	r3, #0
 80140c0:	e016      	b.n	80140f0 <dns_gethostbyname_addrtype+0x7c>
    }
  }
  /* already have this address cached? */
  if (dns_lookup(hostname, addr LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)) == ERR_OK) {
 80140c2:	68b9      	ldr	r1, [r7, #8]
 80140c4:	68f8      	ldr	r0, [r7, #12]
 80140c6:	f7ff f89d 	bl	8013204 <dns_lookup>
 80140ca:	4603      	mov	r3, r0
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d101      	bne.n	80140d4 <dns_gethostbyname_addrtype+0x60>
    return ERR_OK;
 80140d0:	2300      	movs	r3, #0
 80140d2:	e00d      	b.n	80140f0 <dns_gethostbyname_addrtype+0x7c>

  if (!is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
  {
    /* prevent calling found callback if no server is set, return error instead */
    if (ip_addr_isany_val(dns_servers[0])) {
 80140d4:	4b08      	ldr	r3, [pc, #32]	; (80140f8 <dns_gethostbyname_addrtype+0x84>)
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d102      	bne.n	80140e2 <dns_gethostbyname_addrtype+0x6e>
      return ERR_VAL;
 80140dc:	f06f 0305 	mvn.w	r3, #5
 80140e0:	e006      	b.n	80140f0 <dns_gethostbyname_addrtype+0x7c>
    }
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
 80140e2:	683b      	ldr	r3, [r7, #0]
 80140e4:	687a      	ldr	r2, [r7, #4]
 80140e6:	6979      	ldr	r1, [r7, #20]
 80140e8:	68f8      	ldr	r0, [r7, #12]
 80140ea:	f7ff fe79 	bl	8013de0 <dns_enqueue>
 80140ee:	4603      	mov	r3, r0
                     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 80140f0:	4618      	mov	r0, r3
 80140f2:	3718      	adds	r7, #24
 80140f4:	46bd      	mov	sp, r7
 80140f6:	bd80      	pop	{r7, pc}
 80140f8:	24004f38 	.word	0x24004f38

080140fc <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80140fc:	b480      	push	{r7}
 80140fe:	b089      	sub	sp, #36	; 0x24
 8014100:	af00      	add	r7, sp, #0
 8014102:	6078      	str	r0, [r7, #4]
 8014104:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 801410a:	2300      	movs	r3, #0
 801410c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 801410e:	2300      	movs	r3, #0
 8014110:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8014112:	69fb      	ldr	r3, [r7, #28]
 8014114:	f003 0301 	and.w	r3, r3, #1
 8014118:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 801411a:	693b      	ldr	r3, [r7, #16]
 801411c:	2b00      	cmp	r3, #0
 801411e:	d00d      	beq.n	801413c <lwip_standard_chksum+0x40>
 8014120:	683b      	ldr	r3, [r7, #0]
 8014122:	2b00      	cmp	r3, #0
 8014124:	dd0a      	ble.n	801413c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8014126:	69fa      	ldr	r2, [r7, #28]
 8014128:	1c53      	adds	r3, r2, #1
 801412a:	61fb      	str	r3, [r7, #28]
 801412c:	f107 030e 	add.w	r3, r7, #14
 8014130:	3301      	adds	r3, #1
 8014132:	7812      	ldrb	r2, [r2, #0]
 8014134:	701a      	strb	r2, [r3, #0]
    len--;
 8014136:	683b      	ldr	r3, [r7, #0]
 8014138:	3b01      	subs	r3, #1
 801413a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 801413c:	69fb      	ldr	r3, [r7, #28]
 801413e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8014140:	e00a      	b.n	8014158 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8014142:	69bb      	ldr	r3, [r7, #24]
 8014144:	1c9a      	adds	r2, r3, #2
 8014146:	61ba      	str	r2, [r7, #24]
 8014148:	881b      	ldrh	r3, [r3, #0]
 801414a:	461a      	mov	r2, r3
 801414c:	697b      	ldr	r3, [r7, #20]
 801414e:	4413      	add	r3, r2
 8014150:	617b      	str	r3, [r7, #20]
    len -= 2;
 8014152:	683b      	ldr	r3, [r7, #0]
 8014154:	3b02      	subs	r3, #2
 8014156:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8014158:	683b      	ldr	r3, [r7, #0]
 801415a:	2b01      	cmp	r3, #1
 801415c:	dcf1      	bgt.n	8014142 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 801415e:	683b      	ldr	r3, [r7, #0]
 8014160:	2b00      	cmp	r3, #0
 8014162:	dd04      	ble.n	801416e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8014164:	f107 030e 	add.w	r3, r7, #14
 8014168:	69ba      	ldr	r2, [r7, #24]
 801416a:	7812      	ldrb	r2, [r2, #0]
 801416c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 801416e:	89fb      	ldrh	r3, [r7, #14]
 8014170:	461a      	mov	r2, r3
 8014172:	697b      	ldr	r3, [r7, #20]
 8014174:	4413      	add	r3, r2
 8014176:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8014178:	697b      	ldr	r3, [r7, #20]
 801417a:	0c1a      	lsrs	r2, r3, #16
 801417c:	697b      	ldr	r3, [r7, #20]
 801417e:	b29b      	uxth	r3, r3
 8014180:	4413      	add	r3, r2
 8014182:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8014184:	697b      	ldr	r3, [r7, #20]
 8014186:	0c1a      	lsrs	r2, r3, #16
 8014188:	697b      	ldr	r3, [r7, #20]
 801418a:	b29b      	uxth	r3, r3
 801418c:	4413      	add	r3, r2
 801418e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8014190:	693b      	ldr	r3, [r7, #16]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d007      	beq.n	80141a6 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8014196:	697b      	ldr	r3, [r7, #20]
 8014198:	021b      	lsls	r3, r3, #8
 801419a:	b29a      	uxth	r2, r3
 801419c:	697b      	ldr	r3, [r7, #20]
 801419e:	0a1b      	lsrs	r3, r3, #8
 80141a0:	b2db      	uxtb	r3, r3
 80141a2:	4313      	orrs	r3, r2
 80141a4:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80141a6:	697b      	ldr	r3, [r7, #20]
 80141a8:	b29b      	uxth	r3, r3
}
 80141aa:	4618      	mov	r0, r3
 80141ac:	3724      	adds	r7, #36	; 0x24
 80141ae:	46bd      	mov	sp, r7
 80141b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b4:	4770      	bx	lr

080141b6 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80141b6:	b580      	push	{r7, lr}
 80141b8:	b082      	sub	sp, #8
 80141ba:	af00      	add	r7, sp, #0
 80141bc:	6078      	str	r0, [r7, #4]
 80141be:	460b      	mov	r3, r1
 80141c0:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80141c2:	887b      	ldrh	r3, [r7, #2]
 80141c4:	4619      	mov	r1, r3
 80141c6:	6878      	ldr	r0, [r7, #4]
 80141c8:	f7ff ff98 	bl	80140fc <lwip_standard_chksum>
 80141cc:	4603      	mov	r3, r0
 80141ce:	43db      	mvns	r3, r3
 80141d0:	b29b      	uxth	r3, r3
}
 80141d2:	4618      	mov	r0, r3
 80141d4:	3708      	adds	r7, #8
 80141d6:	46bd      	mov	sp, r7
 80141d8:	bd80      	pop	{r7, pc}

080141da <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80141da:	b580      	push	{r7, lr}
 80141dc:	b086      	sub	sp, #24
 80141de:	af00      	add	r7, sp, #0
 80141e0:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 80141e2:	2300      	movs	r3, #0
 80141e4:	60fb      	str	r3, [r7, #12]

  acc = 0;
 80141e6:	2300      	movs	r3, #0
 80141e8:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	613b      	str	r3, [r7, #16]
 80141ee:	e02b      	b.n	8014248 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 80141f0:	693b      	ldr	r3, [r7, #16]
 80141f2:	685a      	ldr	r2, [r3, #4]
 80141f4:	693b      	ldr	r3, [r7, #16]
 80141f6:	895b      	ldrh	r3, [r3, #10]
 80141f8:	4619      	mov	r1, r3
 80141fa:	4610      	mov	r0, r2
 80141fc:	f7ff ff7e 	bl	80140fc <lwip_standard_chksum>
 8014200:	4603      	mov	r3, r0
 8014202:	461a      	mov	r2, r3
 8014204:	697b      	ldr	r3, [r7, #20]
 8014206:	4413      	add	r3, r2
 8014208:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 801420a:	697b      	ldr	r3, [r7, #20]
 801420c:	0c1a      	lsrs	r2, r3, #16
 801420e:	697b      	ldr	r3, [r7, #20]
 8014210:	b29b      	uxth	r3, r3
 8014212:	4413      	add	r3, r2
 8014214:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8014216:	693b      	ldr	r3, [r7, #16]
 8014218:	895b      	ldrh	r3, [r3, #10]
 801421a:	f003 0301 	and.w	r3, r3, #1
 801421e:	b29b      	uxth	r3, r3
 8014220:	2b00      	cmp	r3, #0
 8014222:	d00e      	beq.n	8014242 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	2b00      	cmp	r3, #0
 8014228:	bf0c      	ite	eq
 801422a:	2301      	moveq	r3, #1
 801422c:	2300      	movne	r3, #0
 801422e:	b2db      	uxtb	r3, r3
 8014230:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8014232:	697b      	ldr	r3, [r7, #20]
 8014234:	021b      	lsls	r3, r3, #8
 8014236:	b29a      	uxth	r2, r3
 8014238:	697b      	ldr	r3, [r7, #20]
 801423a:	0a1b      	lsrs	r3, r3, #8
 801423c:	b2db      	uxtb	r3, r3
 801423e:	4313      	orrs	r3, r2
 8014240:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8014242:	693b      	ldr	r3, [r7, #16]
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	613b      	str	r3, [r7, #16]
 8014248:	693b      	ldr	r3, [r7, #16]
 801424a:	2b00      	cmp	r3, #0
 801424c:	d1d0      	bne.n	80141f0 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	2b00      	cmp	r3, #0
 8014252:	d007      	beq.n	8014264 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8014254:	697b      	ldr	r3, [r7, #20]
 8014256:	021b      	lsls	r3, r3, #8
 8014258:	b29a      	uxth	r2, r3
 801425a:	697b      	ldr	r3, [r7, #20]
 801425c:	0a1b      	lsrs	r3, r3, #8
 801425e:	b2db      	uxtb	r3, r3
 8014260:	4313      	orrs	r3, r2
 8014262:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8014264:	697b      	ldr	r3, [r7, #20]
 8014266:	b29b      	uxth	r3, r3
 8014268:	43db      	mvns	r3, r3
 801426a:	b29b      	uxth	r3, r3
}
 801426c:	4618      	mov	r0, r3
 801426e:	3718      	adds	r7, #24
 8014270:	46bd      	mov	sp, r7
 8014272:	bd80      	pop	{r7, pc}

08014274 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8014274:	b580      	push	{r7, lr}
 8014276:	b082      	sub	sp, #8
 8014278:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801427a:	2300      	movs	r3, #0
 801427c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801427e:	f00d fd87 	bl	8021d90 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8014282:	f000 f8d7 	bl	8014434 <mem_init>
  memp_init();
 8014286:	f000 fc2f 	bl	8014ae8 <memp_init>
  pbuf_init();
  netif_init();
 801428a:	f000 fd3b 	bl	8014d04 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801428e:	f008 fb7d 	bl	801c98c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8014292:	f002 f82d 	bl	80162f0 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8014296:	f7fe ff84 	bl	80131a2 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801429a:	f008 fa83 	bl	801c7a4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801429e:	bf00      	nop
 80142a0:	3708      	adds	r7, #8
 80142a2:	46bd      	mov	sp, r7
 80142a4:	bd80      	pop	{r7, pc}
	...

080142a8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80142a8:	b480      	push	{r7}
 80142aa:	b083      	sub	sp, #12
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	4603      	mov	r3, r0
 80142b0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80142b2:	4b05      	ldr	r3, [pc, #20]	; (80142c8 <ptr_to_mem+0x20>)
 80142b4:	681a      	ldr	r2, [r3, #0]
 80142b6:	88fb      	ldrh	r3, [r7, #6]
 80142b8:	4413      	add	r3, r2
}
 80142ba:	4618      	mov	r0, r3
 80142bc:	370c      	adds	r7, #12
 80142be:	46bd      	mov	sp, r7
 80142c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c4:	4770      	bx	lr
 80142c6:	bf00      	nop
 80142c8:	24004f40 	.word	0x24004f40

080142cc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80142cc:	b480      	push	{r7}
 80142ce:	b083      	sub	sp, #12
 80142d0:	af00      	add	r7, sp, #0
 80142d2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80142d4:	4b05      	ldr	r3, [pc, #20]	; (80142ec <mem_to_ptr+0x20>)
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	687a      	ldr	r2, [r7, #4]
 80142da:	1ad3      	subs	r3, r2, r3
 80142dc:	b29b      	uxth	r3, r3
}
 80142de:	4618      	mov	r0, r3
 80142e0:	370c      	adds	r7, #12
 80142e2:	46bd      	mov	sp, r7
 80142e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142e8:	4770      	bx	lr
 80142ea:	bf00      	nop
 80142ec:	24004f40 	.word	0x24004f40

080142f0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80142f0:	b590      	push	{r4, r7, lr}
 80142f2:	b085      	sub	sp, #20
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80142f8:	4b45      	ldr	r3, [pc, #276]	; (8014410 <plug_holes+0x120>)
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	687a      	ldr	r2, [r7, #4]
 80142fe:	429a      	cmp	r2, r3
 8014300:	d206      	bcs.n	8014310 <plug_holes+0x20>
 8014302:	4b44      	ldr	r3, [pc, #272]	; (8014414 <plug_holes+0x124>)
 8014304:	f240 12df 	movw	r2, #479	; 0x1df
 8014308:	4943      	ldr	r1, [pc, #268]	; (8014418 <plug_holes+0x128>)
 801430a:	4844      	ldr	r0, [pc, #272]	; (801441c <plug_holes+0x12c>)
 801430c:	f012 fde2 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8014310:	4b43      	ldr	r3, [pc, #268]	; (8014420 <plug_holes+0x130>)
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	687a      	ldr	r2, [r7, #4]
 8014316:	429a      	cmp	r2, r3
 8014318:	d306      	bcc.n	8014328 <plug_holes+0x38>
 801431a:	4b3e      	ldr	r3, [pc, #248]	; (8014414 <plug_holes+0x124>)
 801431c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8014320:	4940      	ldr	r1, [pc, #256]	; (8014424 <plug_holes+0x134>)
 8014322:	483e      	ldr	r0, [pc, #248]	; (801441c <plug_holes+0x12c>)
 8014324:	f012 fdd6 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	791b      	ldrb	r3, [r3, #4]
 801432c:	2b00      	cmp	r3, #0
 801432e:	d006      	beq.n	801433e <plug_holes+0x4e>
 8014330:	4b38      	ldr	r3, [pc, #224]	; (8014414 <plug_holes+0x124>)
 8014332:	f240 12e1 	movw	r2, #481	; 0x1e1
 8014336:	493c      	ldr	r1, [pc, #240]	; (8014428 <plug_holes+0x138>)
 8014338:	4838      	ldr	r0, [pc, #224]	; (801441c <plug_holes+0x12c>)
 801433a:	f012 fdcb 	bl	8026ed4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	881b      	ldrh	r3, [r3, #0]
 8014342:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8014346:	d906      	bls.n	8014356 <plug_holes+0x66>
 8014348:	4b32      	ldr	r3, [pc, #200]	; (8014414 <plug_holes+0x124>)
 801434a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801434e:	4937      	ldr	r1, [pc, #220]	; (801442c <plug_holes+0x13c>)
 8014350:	4832      	ldr	r0, [pc, #200]	; (801441c <plug_holes+0x12c>)
 8014352:	f012 fdbf 	bl	8026ed4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	881b      	ldrh	r3, [r3, #0]
 801435a:	4618      	mov	r0, r3
 801435c:	f7ff ffa4 	bl	80142a8 <ptr_to_mem>
 8014360:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8014362:	687a      	ldr	r2, [r7, #4]
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	429a      	cmp	r2, r3
 8014368:	d024      	beq.n	80143b4 <plug_holes+0xc4>
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	791b      	ldrb	r3, [r3, #4]
 801436e:	2b00      	cmp	r3, #0
 8014370:	d120      	bne.n	80143b4 <plug_holes+0xc4>
 8014372:	4b2b      	ldr	r3, [pc, #172]	; (8014420 <plug_holes+0x130>)
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	68fa      	ldr	r2, [r7, #12]
 8014378:	429a      	cmp	r2, r3
 801437a:	d01b      	beq.n	80143b4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801437c:	4b2c      	ldr	r3, [pc, #176]	; (8014430 <plug_holes+0x140>)
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	68fa      	ldr	r2, [r7, #12]
 8014382:	429a      	cmp	r2, r3
 8014384:	d102      	bne.n	801438c <plug_holes+0x9c>
      lfree = mem;
 8014386:	4a2a      	ldr	r2, [pc, #168]	; (8014430 <plug_holes+0x140>)
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	881a      	ldrh	r2, [r3, #0]
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	881b      	ldrh	r3, [r3, #0]
 8014398:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 801439c:	d00a      	beq.n	80143b4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	881b      	ldrh	r3, [r3, #0]
 80143a2:	4618      	mov	r0, r3
 80143a4:	f7ff ff80 	bl	80142a8 <ptr_to_mem>
 80143a8:	4604      	mov	r4, r0
 80143aa:	6878      	ldr	r0, [r7, #4]
 80143ac:	f7ff ff8e 	bl	80142cc <mem_to_ptr>
 80143b0:	4603      	mov	r3, r0
 80143b2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	885b      	ldrh	r3, [r3, #2]
 80143b8:	4618      	mov	r0, r3
 80143ba:	f7ff ff75 	bl	80142a8 <ptr_to_mem>
 80143be:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80143c0:	68ba      	ldr	r2, [r7, #8]
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	429a      	cmp	r2, r3
 80143c6:	d01f      	beq.n	8014408 <plug_holes+0x118>
 80143c8:	68bb      	ldr	r3, [r7, #8]
 80143ca:	791b      	ldrb	r3, [r3, #4]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d11b      	bne.n	8014408 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80143d0:	4b17      	ldr	r3, [pc, #92]	; (8014430 <plug_holes+0x140>)
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	687a      	ldr	r2, [r7, #4]
 80143d6:	429a      	cmp	r2, r3
 80143d8:	d102      	bne.n	80143e0 <plug_holes+0xf0>
      lfree = pmem;
 80143da:	4a15      	ldr	r2, [pc, #84]	; (8014430 <plug_holes+0x140>)
 80143dc:	68bb      	ldr	r3, [r7, #8]
 80143de:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	881a      	ldrh	r2, [r3, #0]
 80143e4:	68bb      	ldr	r3, [r7, #8]
 80143e6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	881b      	ldrh	r3, [r3, #0]
 80143ec:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80143f0:	d00a      	beq.n	8014408 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	881b      	ldrh	r3, [r3, #0]
 80143f6:	4618      	mov	r0, r3
 80143f8:	f7ff ff56 	bl	80142a8 <ptr_to_mem>
 80143fc:	4604      	mov	r4, r0
 80143fe:	68b8      	ldr	r0, [r7, #8]
 8014400:	f7ff ff64 	bl	80142cc <mem_to_ptr>
 8014404:	4603      	mov	r3, r0
 8014406:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8014408:	bf00      	nop
 801440a:	3714      	adds	r7, #20
 801440c:	46bd      	mov	sp, r7
 801440e:	bd90      	pop	{r4, r7, pc}
 8014410:	24004f40 	.word	0x24004f40
 8014414:	0802b584 	.word	0x0802b584
 8014418:	0802b5b4 	.word	0x0802b5b4
 801441c:	0802b5cc 	.word	0x0802b5cc
 8014420:	24004f44 	.word	0x24004f44
 8014424:	0802b5f4 	.word	0x0802b5f4
 8014428:	0802b610 	.word	0x0802b610
 801442c:	0802b62c 	.word	0x0802b62c
 8014430:	24004f4c 	.word	0x24004f4c

08014434 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8014434:	b580      	push	{r7, lr}
 8014436:	b082      	sub	sp, #8
 8014438:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801443a:	4b1d      	ldr	r3, [pc, #116]	; (80144b0 <mem_init+0x7c>)
 801443c:	4a1d      	ldr	r2, [pc, #116]	; (80144b4 <mem_init+0x80>)
 801443e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8014440:	4b1b      	ldr	r3, [pc, #108]	; (80144b0 <mem_init+0x7c>)
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 801444c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	2200      	movs	r2, #0
 8014452:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	2200      	movs	r2, #0
 8014458:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801445a:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 801445e:	f7ff ff23 	bl	80142a8 <ptr_to_mem>
 8014462:	4603      	mov	r3, r0
 8014464:	4a14      	ldr	r2, [pc, #80]	; (80144b8 <mem_init+0x84>)
 8014466:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8014468:	4b13      	ldr	r3, [pc, #76]	; (80144b8 <mem_init+0x84>)
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	2201      	movs	r2, #1
 801446e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8014470:	4b11      	ldr	r3, [pc, #68]	; (80144b8 <mem_init+0x84>)
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8014478:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801447a:	4b0f      	ldr	r3, [pc, #60]	; (80144b8 <mem_init+0x84>)
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8014482:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8014484:	4b0a      	ldr	r3, [pc, #40]	; (80144b0 <mem_init+0x7c>)
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	4a0c      	ldr	r2, [pc, #48]	; (80144bc <mem_init+0x88>)
 801448a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801448c:	480c      	ldr	r0, [pc, #48]	; (80144c0 <mem_init+0x8c>)
 801448e:	f00d fc8d 	bl	8021dac <sys_mutex_new>
 8014492:	4603      	mov	r3, r0
 8014494:	2b00      	cmp	r3, #0
 8014496:	d006      	beq.n	80144a6 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8014498:	4b0a      	ldr	r3, [pc, #40]	; (80144c4 <mem_init+0x90>)
 801449a:	f240 221f 	movw	r2, #543	; 0x21f
 801449e:	490a      	ldr	r1, [pc, #40]	; (80144c8 <mem_init+0x94>)
 80144a0:	480a      	ldr	r0, [pc, #40]	; (80144cc <mem_init+0x98>)
 80144a2:	f012 fd17 	bl	8026ed4 <iprintf>
  }
}
 80144a6:	bf00      	nop
 80144a8:	3708      	adds	r7, #8
 80144aa:	46bd      	mov	sp, r7
 80144ac:	bd80      	pop	{r7, pc}
 80144ae:	bf00      	nop
 80144b0:	24004f40 	.word	0x24004f40
 80144b4:	30004000 	.word	0x30004000
 80144b8:	24004f44 	.word	0x24004f44
 80144bc:	24004f4c 	.word	0x24004f4c
 80144c0:	24004f48 	.word	0x24004f48
 80144c4:	0802b584 	.word	0x0802b584
 80144c8:	0802b658 	.word	0x0802b658
 80144cc:	0802b5cc 	.word	0x0802b5cc

080144d0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b086      	sub	sp, #24
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80144d8:	6878      	ldr	r0, [r7, #4]
 80144da:	f7ff fef7 	bl	80142cc <mem_to_ptr>
 80144de:	4603      	mov	r3, r0
 80144e0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	881b      	ldrh	r3, [r3, #0]
 80144e6:	4618      	mov	r0, r3
 80144e8:	f7ff fede 	bl	80142a8 <ptr_to_mem>
 80144ec:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	885b      	ldrh	r3, [r3, #2]
 80144f2:	4618      	mov	r0, r3
 80144f4:	f7ff fed8 	bl	80142a8 <ptr_to_mem>
 80144f8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	881b      	ldrh	r3, [r3, #0]
 80144fe:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8014502:	d818      	bhi.n	8014536 <mem_link_valid+0x66>
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	885b      	ldrh	r3, [r3, #2]
 8014508:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 801450c:	d813      	bhi.n	8014536 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8014512:	8afa      	ldrh	r2, [r7, #22]
 8014514:	429a      	cmp	r2, r3
 8014516:	d004      	beq.n	8014522 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	881b      	ldrh	r3, [r3, #0]
 801451c:	8afa      	ldrh	r2, [r7, #22]
 801451e:	429a      	cmp	r2, r3
 8014520:	d109      	bne.n	8014536 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8014522:	4b08      	ldr	r3, [pc, #32]	; (8014544 <mem_link_valid+0x74>)
 8014524:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014526:	693a      	ldr	r2, [r7, #16]
 8014528:	429a      	cmp	r2, r3
 801452a:	d006      	beq.n	801453a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801452c:	693b      	ldr	r3, [r7, #16]
 801452e:	885b      	ldrh	r3, [r3, #2]
 8014530:	8afa      	ldrh	r2, [r7, #22]
 8014532:	429a      	cmp	r2, r3
 8014534:	d001      	beq.n	801453a <mem_link_valid+0x6a>
    return 0;
 8014536:	2300      	movs	r3, #0
 8014538:	e000      	b.n	801453c <mem_link_valid+0x6c>
  }
  return 1;
 801453a:	2301      	movs	r3, #1
}
 801453c:	4618      	mov	r0, r3
 801453e:	3718      	adds	r7, #24
 8014540:	46bd      	mov	sp, r7
 8014542:	bd80      	pop	{r7, pc}
 8014544:	24004f44 	.word	0x24004f44

08014548 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8014548:	b580      	push	{r7, lr}
 801454a:	b088      	sub	sp, #32
 801454c:	af00      	add	r7, sp, #0
 801454e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d070      	beq.n	8014638 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	f003 0303 	and.w	r3, r3, #3
 801455c:	2b00      	cmp	r3, #0
 801455e:	d00d      	beq.n	801457c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8014560:	4b37      	ldr	r3, [pc, #220]	; (8014640 <mem_free+0xf8>)
 8014562:	f240 2273 	movw	r2, #627	; 0x273
 8014566:	4937      	ldr	r1, [pc, #220]	; (8014644 <mem_free+0xfc>)
 8014568:	4837      	ldr	r0, [pc, #220]	; (8014648 <mem_free+0x100>)
 801456a:	f012 fcb3 	bl	8026ed4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801456e:	f00d fc7b 	bl	8021e68 <sys_arch_protect>
 8014572:	60f8      	str	r0, [r7, #12]
 8014574:	68f8      	ldr	r0, [r7, #12]
 8014576:	f00d fc85 	bl	8021e84 <sys_arch_unprotect>
    return;
 801457a:	e05e      	b.n	801463a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	3b08      	subs	r3, #8
 8014580:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8014582:	4b32      	ldr	r3, [pc, #200]	; (801464c <mem_free+0x104>)
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	69fa      	ldr	r2, [r7, #28]
 8014588:	429a      	cmp	r2, r3
 801458a:	d306      	bcc.n	801459a <mem_free+0x52>
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	f103 020c 	add.w	r2, r3, #12
 8014592:	4b2f      	ldr	r3, [pc, #188]	; (8014650 <mem_free+0x108>)
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	429a      	cmp	r2, r3
 8014598:	d90d      	bls.n	80145b6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801459a:	4b29      	ldr	r3, [pc, #164]	; (8014640 <mem_free+0xf8>)
 801459c:	f240 227f 	movw	r2, #639	; 0x27f
 80145a0:	492c      	ldr	r1, [pc, #176]	; (8014654 <mem_free+0x10c>)
 80145a2:	4829      	ldr	r0, [pc, #164]	; (8014648 <mem_free+0x100>)
 80145a4:	f012 fc96 	bl	8026ed4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80145a8:	f00d fc5e 	bl	8021e68 <sys_arch_protect>
 80145ac:	6138      	str	r0, [r7, #16]
 80145ae:	6938      	ldr	r0, [r7, #16]
 80145b0:	f00d fc68 	bl	8021e84 <sys_arch_unprotect>
    return;
 80145b4:	e041      	b.n	801463a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80145b6:	4828      	ldr	r0, [pc, #160]	; (8014658 <mem_free+0x110>)
 80145b8:	f00d fc14 	bl	8021de4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80145bc:	69fb      	ldr	r3, [r7, #28]
 80145be:	791b      	ldrb	r3, [r3, #4]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d110      	bne.n	80145e6 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80145c4:	4b1e      	ldr	r3, [pc, #120]	; (8014640 <mem_free+0xf8>)
 80145c6:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80145ca:	4924      	ldr	r1, [pc, #144]	; (801465c <mem_free+0x114>)
 80145cc:	481e      	ldr	r0, [pc, #120]	; (8014648 <mem_free+0x100>)
 80145ce:	f012 fc81 	bl	8026ed4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80145d2:	4821      	ldr	r0, [pc, #132]	; (8014658 <mem_free+0x110>)
 80145d4:	f00d fc15 	bl	8021e02 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80145d8:	f00d fc46 	bl	8021e68 <sys_arch_protect>
 80145dc:	6178      	str	r0, [r7, #20]
 80145de:	6978      	ldr	r0, [r7, #20]
 80145e0:	f00d fc50 	bl	8021e84 <sys_arch_unprotect>
    return;
 80145e4:	e029      	b.n	801463a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80145e6:	69f8      	ldr	r0, [r7, #28]
 80145e8:	f7ff ff72 	bl	80144d0 <mem_link_valid>
 80145ec:	4603      	mov	r3, r0
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d110      	bne.n	8014614 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80145f2:	4b13      	ldr	r3, [pc, #76]	; (8014640 <mem_free+0xf8>)
 80145f4:	f240 2295 	movw	r2, #661	; 0x295
 80145f8:	4919      	ldr	r1, [pc, #100]	; (8014660 <mem_free+0x118>)
 80145fa:	4813      	ldr	r0, [pc, #76]	; (8014648 <mem_free+0x100>)
 80145fc:	f012 fc6a 	bl	8026ed4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8014600:	4815      	ldr	r0, [pc, #84]	; (8014658 <mem_free+0x110>)
 8014602:	f00d fbfe 	bl	8021e02 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014606:	f00d fc2f 	bl	8021e68 <sys_arch_protect>
 801460a:	61b8      	str	r0, [r7, #24]
 801460c:	69b8      	ldr	r0, [r7, #24]
 801460e:	f00d fc39 	bl	8021e84 <sys_arch_unprotect>
    return;
 8014612:	e012      	b.n	801463a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8014614:	69fb      	ldr	r3, [r7, #28]
 8014616:	2200      	movs	r2, #0
 8014618:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801461a:	4b12      	ldr	r3, [pc, #72]	; (8014664 <mem_free+0x11c>)
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	69fa      	ldr	r2, [r7, #28]
 8014620:	429a      	cmp	r2, r3
 8014622:	d202      	bcs.n	801462a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8014624:	4a0f      	ldr	r2, [pc, #60]	; (8014664 <mem_free+0x11c>)
 8014626:	69fb      	ldr	r3, [r7, #28]
 8014628:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801462a:	69f8      	ldr	r0, [r7, #28]
 801462c:	f7ff fe60 	bl	80142f0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8014630:	4809      	ldr	r0, [pc, #36]	; (8014658 <mem_free+0x110>)
 8014632:	f00d fbe6 	bl	8021e02 <sys_mutex_unlock>
 8014636:	e000      	b.n	801463a <mem_free+0xf2>
    return;
 8014638:	bf00      	nop
}
 801463a:	3720      	adds	r7, #32
 801463c:	46bd      	mov	sp, r7
 801463e:	bd80      	pop	{r7, pc}
 8014640:	0802b584 	.word	0x0802b584
 8014644:	0802b674 	.word	0x0802b674
 8014648:	0802b5cc 	.word	0x0802b5cc
 801464c:	24004f40 	.word	0x24004f40
 8014650:	24004f44 	.word	0x24004f44
 8014654:	0802b698 	.word	0x0802b698
 8014658:	24004f48 	.word	0x24004f48
 801465c:	0802b6b4 	.word	0x0802b6b4
 8014660:	0802b6dc 	.word	0x0802b6dc
 8014664:	24004f4c 	.word	0x24004f4c

08014668 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b088      	sub	sp, #32
 801466c:	af00      	add	r7, sp, #0
 801466e:	6078      	str	r0, [r7, #4]
 8014670:	460b      	mov	r3, r1
 8014672:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8014674:	887b      	ldrh	r3, [r7, #2]
 8014676:	3303      	adds	r3, #3
 8014678:	b29b      	uxth	r3, r3
 801467a:	f023 0303 	bic.w	r3, r3, #3
 801467e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8014680:	8bfb      	ldrh	r3, [r7, #30]
 8014682:	2b0b      	cmp	r3, #11
 8014684:	d801      	bhi.n	801468a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8014686:	230c      	movs	r3, #12
 8014688:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801468a:	8bfb      	ldrh	r3, [r7, #30]
 801468c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8014690:	d803      	bhi.n	801469a <mem_trim+0x32>
 8014692:	8bfa      	ldrh	r2, [r7, #30]
 8014694:	887b      	ldrh	r3, [r7, #2]
 8014696:	429a      	cmp	r2, r3
 8014698:	d201      	bcs.n	801469e <mem_trim+0x36>
    return NULL;
 801469a:	2300      	movs	r3, #0
 801469c:	e0d8      	b.n	8014850 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801469e:	4b6e      	ldr	r3, [pc, #440]	; (8014858 <mem_trim+0x1f0>)
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	687a      	ldr	r2, [r7, #4]
 80146a4:	429a      	cmp	r2, r3
 80146a6:	d304      	bcc.n	80146b2 <mem_trim+0x4a>
 80146a8:	4b6c      	ldr	r3, [pc, #432]	; (801485c <mem_trim+0x1f4>)
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	687a      	ldr	r2, [r7, #4]
 80146ae:	429a      	cmp	r2, r3
 80146b0:	d306      	bcc.n	80146c0 <mem_trim+0x58>
 80146b2:	4b6b      	ldr	r3, [pc, #428]	; (8014860 <mem_trim+0x1f8>)
 80146b4:	f240 22d1 	movw	r2, #721	; 0x2d1
 80146b8:	496a      	ldr	r1, [pc, #424]	; (8014864 <mem_trim+0x1fc>)
 80146ba:	486b      	ldr	r0, [pc, #428]	; (8014868 <mem_trim+0x200>)
 80146bc:	f012 fc0a 	bl	8026ed4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80146c0:	4b65      	ldr	r3, [pc, #404]	; (8014858 <mem_trim+0x1f0>)
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	687a      	ldr	r2, [r7, #4]
 80146c6:	429a      	cmp	r2, r3
 80146c8:	d304      	bcc.n	80146d4 <mem_trim+0x6c>
 80146ca:	4b64      	ldr	r3, [pc, #400]	; (801485c <mem_trim+0x1f4>)
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	687a      	ldr	r2, [r7, #4]
 80146d0:	429a      	cmp	r2, r3
 80146d2:	d307      	bcc.n	80146e4 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80146d4:	f00d fbc8 	bl	8021e68 <sys_arch_protect>
 80146d8:	60b8      	str	r0, [r7, #8]
 80146da:	68b8      	ldr	r0, [r7, #8]
 80146dc:	f00d fbd2 	bl	8021e84 <sys_arch_unprotect>
    return rmem;
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	e0b5      	b.n	8014850 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	3b08      	subs	r3, #8
 80146e8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80146ea:	69b8      	ldr	r0, [r7, #24]
 80146ec:	f7ff fdee 	bl	80142cc <mem_to_ptr>
 80146f0:	4603      	mov	r3, r0
 80146f2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80146f4:	69bb      	ldr	r3, [r7, #24]
 80146f6:	881a      	ldrh	r2, [r3, #0]
 80146f8:	8afb      	ldrh	r3, [r7, #22]
 80146fa:	1ad3      	subs	r3, r2, r3
 80146fc:	b29b      	uxth	r3, r3
 80146fe:	3b08      	subs	r3, #8
 8014700:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8014702:	8bfa      	ldrh	r2, [r7, #30]
 8014704:	8abb      	ldrh	r3, [r7, #20]
 8014706:	429a      	cmp	r2, r3
 8014708:	d906      	bls.n	8014718 <mem_trim+0xb0>
 801470a:	4b55      	ldr	r3, [pc, #340]	; (8014860 <mem_trim+0x1f8>)
 801470c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8014710:	4956      	ldr	r1, [pc, #344]	; (801486c <mem_trim+0x204>)
 8014712:	4855      	ldr	r0, [pc, #340]	; (8014868 <mem_trim+0x200>)
 8014714:	f012 fbde 	bl	8026ed4 <iprintf>
  if (newsize > size) {
 8014718:	8bfa      	ldrh	r2, [r7, #30]
 801471a:	8abb      	ldrh	r3, [r7, #20]
 801471c:	429a      	cmp	r2, r3
 801471e:	d901      	bls.n	8014724 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8014720:	2300      	movs	r3, #0
 8014722:	e095      	b.n	8014850 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8014724:	8bfa      	ldrh	r2, [r7, #30]
 8014726:	8abb      	ldrh	r3, [r7, #20]
 8014728:	429a      	cmp	r2, r3
 801472a:	d101      	bne.n	8014730 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	e08f      	b.n	8014850 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8014730:	484f      	ldr	r0, [pc, #316]	; (8014870 <mem_trim+0x208>)
 8014732:	f00d fb57 	bl	8021de4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8014736:	69bb      	ldr	r3, [r7, #24]
 8014738:	881b      	ldrh	r3, [r3, #0]
 801473a:	4618      	mov	r0, r3
 801473c:	f7ff fdb4 	bl	80142a8 <ptr_to_mem>
 8014740:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8014742:	693b      	ldr	r3, [r7, #16]
 8014744:	791b      	ldrb	r3, [r3, #4]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d13f      	bne.n	80147ca <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801474a:	69bb      	ldr	r3, [r7, #24]
 801474c:	881b      	ldrh	r3, [r3, #0]
 801474e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8014752:	d106      	bne.n	8014762 <mem_trim+0xfa>
 8014754:	4b42      	ldr	r3, [pc, #264]	; (8014860 <mem_trim+0x1f8>)
 8014756:	f240 22f5 	movw	r2, #757	; 0x2f5
 801475a:	4946      	ldr	r1, [pc, #280]	; (8014874 <mem_trim+0x20c>)
 801475c:	4842      	ldr	r0, [pc, #264]	; (8014868 <mem_trim+0x200>)
 801475e:	f012 fbb9 	bl	8026ed4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8014762:	693b      	ldr	r3, [r7, #16]
 8014764:	881b      	ldrh	r3, [r3, #0]
 8014766:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8014768:	8afa      	ldrh	r2, [r7, #22]
 801476a:	8bfb      	ldrh	r3, [r7, #30]
 801476c:	4413      	add	r3, r2
 801476e:	b29b      	uxth	r3, r3
 8014770:	3308      	adds	r3, #8
 8014772:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8014774:	4b40      	ldr	r3, [pc, #256]	; (8014878 <mem_trim+0x210>)
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	693a      	ldr	r2, [r7, #16]
 801477a:	429a      	cmp	r2, r3
 801477c:	d106      	bne.n	801478c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 801477e:	89fb      	ldrh	r3, [r7, #14]
 8014780:	4618      	mov	r0, r3
 8014782:	f7ff fd91 	bl	80142a8 <ptr_to_mem>
 8014786:	4603      	mov	r3, r0
 8014788:	4a3b      	ldr	r2, [pc, #236]	; (8014878 <mem_trim+0x210>)
 801478a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 801478c:	89fb      	ldrh	r3, [r7, #14]
 801478e:	4618      	mov	r0, r3
 8014790:	f7ff fd8a 	bl	80142a8 <ptr_to_mem>
 8014794:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8014796:	693b      	ldr	r3, [r7, #16]
 8014798:	2200      	movs	r2, #0
 801479a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801479c:	693b      	ldr	r3, [r7, #16]
 801479e:	89ba      	ldrh	r2, [r7, #12]
 80147a0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80147a2:	693b      	ldr	r3, [r7, #16]
 80147a4:	8afa      	ldrh	r2, [r7, #22]
 80147a6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80147a8:	69bb      	ldr	r3, [r7, #24]
 80147aa:	89fa      	ldrh	r2, [r7, #14]
 80147ac:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80147ae:	693b      	ldr	r3, [r7, #16]
 80147b0:	881b      	ldrh	r3, [r3, #0]
 80147b2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80147b6:	d047      	beq.n	8014848 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80147b8:	693b      	ldr	r3, [r7, #16]
 80147ba:	881b      	ldrh	r3, [r3, #0]
 80147bc:	4618      	mov	r0, r3
 80147be:	f7ff fd73 	bl	80142a8 <ptr_to_mem>
 80147c2:	4602      	mov	r2, r0
 80147c4:	89fb      	ldrh	r3, [r7, #14]
 80147c6:	8053      	strh	r3, [r2, #2]
 80147c8:	e03e      	b.n	8014848 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80147ca:	8bfb      	ldrh	r3, [r7, #30]
 80147cc:	f103 0214 	add.w	r2, r3, #20
 80147d0:	8abb      	ldrh	r3, [r7, #20]
 80147d2:	429a      	cmp	r2, r3
 80147d4:	d838      	bhi.n	8014848 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80147d6:	8afa      	ldrh	r2, [r7, #22]
 80147d8:	8bfb      	ldrh	r3, [r7, #30]
 80147da:	4413      	add	r3, r2
 80147dc:	b29b      	uxth	r3, r3
 80147de:	3308      	adds	r3, #8
 80147e0:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80147e2:	69bb      	ldr	r3, [r7, #24]
 80147e4:	881b      	ldrh	r3, [r3, #0]
 80147e6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80147ea:	d106      	bne.n	80147fa <mem_trim+0x192>
 80147ec:	4b1c      	ldr	r3, [pc, #112]	; (8014860 <mem_trim+0x1f8>)
 80147ee:	f240 3216 	movw	r2, #790	; 0x316
 80147f2:	4920      	ldr	r1, [pc, #128]	; (8014874 <mem_trim+0x20c>)
 80147f4:	481c      	ldr	r0, [pc, #112]	; (8014868 <mem_trim+0x200>)
 80147f6:	f012 fb6d 	bl	8026ed4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80147fa:	89fb      	ldrh	r3, [r7, #14]
 80147fc:	4618      	mov	r0, r3
 80147fe:	f7ff fd53 	bl	80142a8 <ptr_to_mem>
 8014802:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8014804:	4b1c      	ldr	r3, [pc, #112]	; (8014878 <mem_trim+0x210>)
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	693a      	ldr	r2, [r7, #16]
 801480a:	429a      	cmp	r2, r3
 801480c:	d202      	bcs.n	8014814 <mem_trim+0x1ac>
      lfree = mem2;
 801480e:	4a1a      	ldr	r2, [pc, #104]	; (8014878 <mem_trim+0x210>)
 8014810:	693b      	ldr	r3, [r7, #16]
 8014812:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8014814:	693b      	ldr	r3, [r7, #16]
 8014816:	2200      	movs	r2, #0
 8014818:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801481a:	69bb      	ldr	r3, [r7, #24]
 801481c:	881a      	ldrh	r2, [r3, #0]
 801481e:	693b      	ldr	r3, [r7, #16]
 8014820:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8014822:	693b      	ldr	r3, [r7, #16]
 8014824:	8afa      	ldrh	r2, [r7, #22]
 8014826:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8014828:	69bb      	ldr	r3, [r7, #24]
 801482a:	89fa      	ldrh	r2, [r7, #14]
 801482c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801482e:	693b      	ldr	r3, [r7, #16]
 8014830:	881b      	ldrh	r3, [r3, #0]
 8014832:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8014836:	d007      	beq.n	8014848 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8014838:	693b      	ldr	r3, [r7, #16]
 801483a:	881b      	ldrh	r3, [r3, #0]
 801483c:	4618      	mov	r0, r3
 801483e:	f7ff fd33 	bl	80142a8 <ptr_to_mem>
 8014842:	4602      	mov	r2, r0
 8014844:	89fb      	ldrh	r3, [r7, #14]
 8014846:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8014848:	4809      	ldr	r0, [pc, #36]	; (8014870 <mem_trim+0x208>)
 801484a:	f00d fada 	bl	8021e02 <sys_mutex_unlock>
  return rmem;
 801484e:	687b      	ldr	r3, [r7, #4]
}
 8014850:	4618      	mov	r0, r3
 8014852:	3720      	adds	r7, #32
 8014854:	46bd      	mov	sp, r7
 8014856:	bd80      	pop	{r7, pc}
 8014858:	24004f40 	.word	0x24004f40
 801485c:	24004f44 	.word	0x24004f44
 8014860:	0802b584 	.word	0x0802b584
 8014864:	0802b710 	.word	0x0802b710
 8014868:	0802b5cc 	.word	0x0802b5cc
 801486c:	0802b728 	.word	0x0802b728
 8014870:	24004f48 	.word	0x24004f48
 8014874:	0802b748 	.word	0x0802b748
 8014878:	24004f4c 	.word	0x24004f4c

0801487c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 801487c:	b580      	push	{r7, lr}
 801487e:	b088      	sub	sp, #32
 8014880:	af00      	add	r7, sp, #0
 8014882:	4603      	mov	r3, r0
 8014884:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8014886:	88fb      	ldrh	r3, [r7, #6]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d101      	bne.n	8014890 <mem_malloc+0x14>
    return NULL;
 801488c:	2300      	movs	r3, #0
 801488e:	e0e2      	b.n	8014a56 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8014890:	88fb      	ldrh	r3, [r7, #6]
 8014892:	3303      	adds	r3, #3
 8014894:	b29b      	uxth	r3, r3
 8014896:	f023 0303 	bic.w	r3, r3, #3
 801489a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 801489c:	8bbb      	ldrh	r3, [r7, #28]
 801489e:	2b0b      	cmp	r3, #11
 80148a0:	d801      	bhi.n	80148a6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80148a2:	230c      	movs	r3, #12
 80148a4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80148a6:	8bbb      	ldrh	r3, [r7, #28]
 80148a8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80148ac:	d803      	bhi.n	80148b6 <mem_malloc+0x3a>
 80148ae:	8bba      	ldrh	r2, [r7, #28]
 80148b0:	88fb      	ldrh	r3, [r7, #6]
 80148b2:	429a      	cmp	r2, r3
 80148b4:	d201      	bcs.n	80148ba <mem_malloc+0x3e>
    return NULL;
 80148b6:	2300      	movs	r3, #0
 80148b8:	e0cd      	b.n	8014a56 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80148ba:	4869      	ldr	r0, [pc, #420]	; (8014a60 <mem_malloc+0x1e4>)
 80148bc:	f00d fa92 	bl	8021de4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80148c0:	4b68      	ldr	r3, [pc, #416]	; (8014a64 <mem_malloc+0x1e8>)
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	4618      	mov	r0, r3
 80148c6:	f7ff fd01 	bl	80142cc <mem_to_ptr>
 80148ca:	4603      	mov	r3, r0
 80148cc:	83fb      	strh	r3, [r7, #30]
 80148ce:	e0b7      	b.n	8014a40 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80148d0:	8bfb      	ldrh	r3, [r7, #30]
 80148d2:	4618      	mov	r0, r3
 80148d4:	f7ff fce8 	bl	80142a8 <ptr_to_mem>
 80148d8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80148da:	697b      	ldr	r3, [r7, #20]
 80148dc:	791b      	ldrb	r3, [r3, #4]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	f040 80a7 	bne.w	8014a32 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80148e4:	697b      	ldr	r3, [r7, #20]
 80148e6:	881b      	ldrh	r3, [r3, #0]
 80148e8:	461a      	mov	r2, r3
 80148ea:	8bfb      	ldrh	r3, [r7, #30]
 80148ec:	1ad3      	subs	r3, r2, r3
 80148ee:	f1a3 0208 	sub.w	r2, r3, #8
 80148f2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80148f4:	429a      	cmp	r2, r3
 80148f6:	f0c0 809c 	bcc.w	8014a32 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80148fa:	697b      	ldr	r3, [r7, #20]
 80148fc:	881b      	ldrh	r3, [r3, #0]
 80148fe:	461a      	mov	r2, r3
 8014900:	8bfb      	ldrh	r3, [r7, #30]
 8014902:	1ad3      	subs	r3, r2, r3
 8014904:	f1a3 0208 	sub.w	r2, r3, #8
 8014908:	8bbb      	ldrh	r3, [r7, #28]
 801490a:	3314      	adds	r3, #20
 801490c:	429a      	cmp	r2, r3
 801490e:	d333      	bcc.n	8014978 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8014910:	8bfa      	ldrh	r2, [r7, #30]
 8014912:	8bbb      	ldrh	r3, [r7, #28]
 8014914:	4413      	add	r3, r2
 8014916:	b29b      	uxth	r3, r3
 8014918:	3308      	adds	r3, #8
 801491a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801491c:	8a7b      	ldrh	r3, [r7, #18]
 801491e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8014922:	d106      	bne.n	8014932 <mem_malloc+0xb6>
 8014924:	4b50      	ldr	r3, [pc, #320]	; (8014a68 <mem_malloc+0x1ec>)
 8014926:	f240 3287 	movw	r2, #903	; 0x387
 801492a:	4950      	ldr	r1, [pc, #320]	; (8014a6c <mem_malloc+0x1f0>)
 801492c:	4850      	ldr	r0, [pc, #320]	; (8014a70 <mem_malloc+0x1f4>)
 801492e:	f012 fad1 	bl	8026ed4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8014932:	8a7b      	ldrh	r3, [r7, #18]
 8014934:	4618      	mov	r0, r3
 8014936:	f7ff fcb7 	bl	80142a8 <ptr_to_mem>
 801493a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	2200      	movs	r2, #0
 8014940:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8014942:	697b      	ldr	r3, [r7, #20]
 8014944:	881a      	ldrh	r2, [r3, #0]
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	8bfa      	ldrh	r2, [r7, #30]
 801494e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8014950:	697b      	ldr	r3, [r7, #20]
 8014952:	8a7a      	ldrh	r2, [r7, #18]
 8014954:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8014956:	697b      	ldr	r3, [r7, #20]
 8014958:	2201      	movs	r2, #1
 801495a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	881b      	ldrh	r3, [r3, #0]
 8014960:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8014964:	d00b      	beq.n	801497e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	881b      	ldrh	r3, [r3, #0]
 801496a:	4618      	mov	r0, r3
 801496c:	f7ff fc9c 	bl	80142a8 <ptr_to_mem>
 8014970:	4602      	mov	r2, r0
 8014972:	8a7b      	ldrh	r3, [r7, #18]
 8014974:	8053      	strh	r3, [r2, #2]
 8014976:	e002      	b.n	801497e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8014978:	697b      	ldr	r3, [r7, #20]
 801497a:	2201      	movs	r2, #1
 801497c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801497e:	4b39      	ldr	r3, [pc, #228]	; (8014a64 <mem_malloc+0x1e8>)
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	697a      	ldr	r2, [r7, #20]
 8014984:	429a      	cmp	r2, r3
 8014986:	d127      	bne.n	80149d8 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8014988:	4b36      	ldr	r3, [pc, #216]	; (8014a64 <mem_malloc+0x1e8>)
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801498e:	e005      	b.n	801499c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8014990:	69bb      	ldr	r3, [r7, #24]
 8014992:	881b      	ldrh	r3, [r3, #0]
 8014994:	4618      	mov	r0, r3
 8014996:	f7ff fc87 	bl	80142a8 <ptr_to_mem>
 801499a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801499c:	69bb      	ldr	r3, [r7, #24]
 801499e:	791b      	ldrb	r3, [r3, #4]
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d004      	beq.n	80149ae <mem_malloc+0x132>
 80149a4:	4b33      	ldr	r3, [pc, #204]	; (8014a74 <mem_malloc+0x1f8>)
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	69ba      	ldr	r2, [r7, #24]
 80149aa:	429a      	cmp	r2, r3
 80149ac:	d1f0      	bne.n	8014990 <mem_malloc+0x114>
          }
          lfree = cur;
 80149ae:	4a2d      	ldr	r2, [pc, #180]	; (8014a64 <mem_malloc+0x1e8>)
 80149b0:	69bb      	ldr	r3, [r7, #24]
 80149b2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80149b4:	4b2b      	ldr	r3, [pc, #172]	; (8014a64 <mem_malloc+0x1e8>)
 80149b6:	681a      	ldr	r2, [r3, #0]
 80149b8:	4b2e      	ldr	r3, [pc, #184]	; (8014a74 <mem_malloc+0x1f8>)
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	429a      	cmp	r2, r3
 80149be:	d00b      	beq.n	80149d8 <mem_malloc+0x15c>
 80149c0:	4b28      	ldr	r3, [pc, #160]	; (8014a64 <mem_malloc+0x1e8>)
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	791b      	ldrb	r3, [r3, #4]
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d006      	beq.n	80149d8 <mem_malloc+0x15c>
 80149ca:	4b27      	ldr	r3, [pc, #156]	; (8014a68 <mem_malloc+0x1ec>)
 80149cc:	f240 32b5 	movw	r2, #949	; 0x3b5
 80149d0:	4929      	ldr	r1, [pc, #164]	; (8014a78 <mem_malloc+0x1fc>)
 80149d2:	4827      	ldr	r0, [pc, #156]	; (8014a70 <mem_malloc+0x1f4>)
 80149d4:	f012 fa7e 	bl	8026ed4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80149d8:	4821      	ldr	r0, [pc, #132]	; (8014a60 <mem_malloc+0x1e4>)
 80149da:	f00d fa12 	bl	8021e02 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80149de:	8bba      	ldrh	r2, [r7, #28]
 80149e0:	697b      	ldr	r3, [r7, #20]
 80149e2:	4413      	add	r3, r2
 80149e4:	3308      	adds	r3, #8
 80149e6:	4a23      	ldr	r2, [pc, #140]	; (8014a74 <mem_malloc+0x1f8>)
 80149e8:	6812      	ldr	r2, [r2, #0]
 80149ea:	4293      	cmp	r3, r2
 80149ec:	d906      	bls.n	80149fc <mem_malloc+0x180>
 80149ee:	4b1e      	ldr	r3, [pc, #120]	; (8014a68 <mem_malloc+0x1ec>)
 80149f0:	f240 32b9 	movw	r2, #953	; 0x3b9
 80149f4:	4921      	ldr	r1, [pc, #132]	; (8014a7c <mem_malloc+0x200>)
 80149f6:	481e      	ldr	r0, [pc, #120]	; (8014a70 <mem_malloc+0x1f4>)
 80149f8:	f012 fa6c 	bl	8026ed4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80149fc:	697b      	ldr	r3, [r7, #20]
 80149fe:	f003 0303 	and.w	r3, r3, #3
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d006      	beq.n	8014a14 <mem_malloc+0x198>
 8014a06:	4b18      	ldr	r3, [pc, #96]	; (8014a68 <mem_malloc+0x1ec>)
 8014a08:	f240 32bb 	movw	r2, #955	; 0x3bb
 8014a0c:	491c      	ldr	r1, [pc, #112]	; (8014a80 <mem_malloc+0x204>)
 8014a0e:	4818      	ldr	r0, [pc, #96]	; (8014a70 <mem_malloc+0x1f4>)
 8014a10:	f012 fa60 	bl	8026ed4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8014a14:	697b      	ldr	r3, [r7, #20]
 8014a16:	f003 0303 	and.w	r3, r3, #3
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d006      	beq.n	8014a2c <mem_malloc+0x1b0>
 8014a1e:	4b12      	ldr	r3, [pc, #72]	; (8014a68 <mem_malloc+0x1ec>)
 8014a20:	f240 32bd 	movw	r2, #957	; 0x3bd
 8014a24:	4917      	ldr	r1, [pc, #92]	; (8014a84 <mem_malloc+0x208>)
 8014a26:	4812      	ldr	r0, [pc, #72]	; (8014a70 <mem_malloc+0x1f4>)
 8014a28:	f012 fa54 	bl	8026ed4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8014a2c:	697b      	ldr	r3, [r7, #20]
 8014a2e:	3308      	adds	r3, #8
 8014a30:	e011      	b.n	8014a56 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8014a32:	8bfb      	ldrh	r3, [r7, #30]
 8014a34:	4618      	mov	r0, r3
 8014a36:	f7ff fc37 	bl	80142a8 <ptr_to_mem>
 8014a3a:	4603      	mov	r3, r0
 8014a3c:	881b      	ldrh	r3, [r3, #0]
 8014a3e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8014a40:	8bfa      	ldrh	r2, [r7, #30]
 8014a42:	8bbb      	ldrh	r3, [r7, #28]
 8014a44:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8014a48:	429a      	cmp	r2, r3
 8014a4a:	f4ff af41 	bcc.w	80148d0 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8014a4e:	4804      	ldr	r0, [pc, #16]	; (8014a60 <mem_malloc+0x1e4>)
 8014a50:	f00d f9d7 	bl	8021e02 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8014a54:	2300      	movs	r3, #0
}
 8014a56:	4618      	mov	r0, r3
 8014a58:	3720      	adds	r7, #32
 8014a5a:	46bd      	mov	sp, r7
 8014a5c:	bd80      	pop	{r7, pc}
 8014a5e:	bf00      	nop
 8014a60:	24004f48 	.word	0x24004f48
 8014a64:	24004f4c 	.word	0x24004f4c
 8014a68:	0802b584 	.word	0x0802b584
 8014a6c:	0802b748 	.word	0x0802b748
 8014a70:	0802b5cc 	.word	0x0802b5cc
 8014a74:	24004f44 	.word	0x24004f44
 8014a78:	0802b75c 	.word	0x0802b75c
 8014a7c:	0802b778 	.word	0x0802b778
 8014a80:	0802b7a8 	.word	0x0802b7a8
 8014a84:	0802b7d8 	.word	0x0802b7d8

08014a88 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8014a88:	b480      	push	{r7}
 8014a8a:	b085      	sub	sp, #20
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	689b      	ldr	r3, [r3, #8]
 8014a94:	2200      	movs	r2, #0
 8014a96:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	685b      	ldr	r3, [r3, #4]
 8014a9c:	3303      	adds	r3, #3
 8014a9e:	f023 0303 	bic.w	r3, r3, #3
 8014aa2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8014aa4:	2300      	movs	r3, #0
 8014aa6:	60fb      	str	r3, [r7, #12]
 8014aa8:	e011      	b.n	8014ace <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	689b      	ldr	r3, [r3, #8]
 8014aae:	681a      	ldr	r2, [r3, #0]
 8014ab0:	68bb      	ldr	r3, [r7, #8]
 8014ab2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	689b      	ldr	r3, [r3, #8]
 8014ab8:	68ba      	ldr	r2, [r7, #8]
 8014aba:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	881b      	ldrh	r3, [r3, #0]
 8014ac0:	461a      	mov	r2, r3
 8014ac2:	68bb      	ldr	r3, [r7, #8]
 8014ac4:	4413      	add	r3, r2
 8014ac6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	3301      	adds	r3, #1
 8014acc:	60fb      	str	r3, [r7, #12]
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	885b      	ldrh	r3, [r3, #2]
 8014ad2:	461a      	mov	r2, r3
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	4293      	cmp	r3, r2
 8014ad8:	dbe7      	blt.n	8014aaa <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8014ada:	bf00      	nop
 8014adc:	bf00      	nop
 8014ade:	3714      	adds	r7, #20
 8014ae0:	46bd      	mov	sp, r7
 8014ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ae6:	4770      	bx	lr

08014ae8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8014ae8:	b580      	push	{r7, lr}
 8014aea:	b082      	sub	sp, #8
 8014aec:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8014aee:	2300      	movs	r3, #0
 8014af0:	80fb      	strh	r3, [r7, #6]
 8014af2:	e009      	b.n	8014b08 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8014af4:	88fb      	ldrh	r3, [r7, #6]
 8014af6:	4a08      	ldr	r2, [pc, #32]	; (8014b18 <memp_init+0x30>)
 8014af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014afc:	4618      	mov	r0, r3
 8014afe:	f7ff ffc3 	bl	8014a88 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8014b02:	88fb      	ldrh	r3, [r7, #6]
 8014b04:	3301      	adds	r3, #1
 8014b06:	80fb      	strh	r3, [r7, #6]
 8014b08:	88fb      	ldrh	r3, [r7, #6]
 8014b0a:	2b0d      	cmp	r3, #13
 8014b0c:	d9f2      	bls.n	8014af4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8014b0e:	bf00      	nop
 8014b10:	bf00      	nop
 8014b12:	3708      	adds	r7, #8
 8014b14:	46bd      	mov	sp, r7
 8014b16:	bd80      	pop	{r7, pc}
 8014b18:	0802ebd0 	.word	0x0802ebd0

08014b1c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8014b1c:	b580      	push	{r7, lr}
 8014b1e:	b084      	sub	sp, #16
 8014b20:	af00      	add	r7, sp, #0
 8014b22:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8014b24:	f00d f9a0 	bl	8021e68 <sys_arch_protect>
 8014b28:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	689b      	ldr	r3, [r3, #8]
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8014b32:	68bb      	ldr	r3, [r7, #8]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d015      	beq.n	8014b64 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	689b      	ldr	r3, [r3, #8]
 8014b3c:	68ba      	ldr	r2, [r7, #8]
 8014b3e:	6812      	ldr	r2, [r2, #0]
 8014b40:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8014b42:	68bb      	ldr	r3, [r7, #8]
 8014b44:	f003 0303 	and.w	r3, r3, #3
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d006      	beq.n	8014b5a <do_memp_malloc_pool+0x3e>
 8014b4c:	4b09      	ldr	r3, [pc, #36]	; (8014b74 <do_memp_malloc_pool+0x58>)
 8014b4e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8014b52:	4909      	ldr	r1, [pc, #36]	; (8014b78 <do_memp_malloc_pool+0x5c>)
 8014b54:	4809      	ldr	r0, [pc, #36]	; (8014b7c <do_memp_malloc_pool+0x60>)
 8014b56:	f012 f9bd 	bl	8026ed4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8014b5a:	68f8      	ldr	r0, [r7, #12]
 8014b5c:	f00d f992 	bl	8021e84 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8014b60:	68bb      	ldr	r3, [r7, #8]
 8014b62:	e003      	b.n	8014b6c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8014b64:	68f8      	ldr	r0, [r7, #12]
 8014b66:	f00d f98d 	bl	8021e84 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8014b6a:	2300      	movs	r3, #0
}
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	3710      	adds	r7, #16
 8014b70:	46bd      	mov	sp, r7
 8014b72:	bd80      	pop	{r7, pc}
 8014b74:	0802b7fc 	.word	0x0802b7fc
 8014b78:	0802b82c 	.word	0x0802b82c
 8014b7c:	0802b850 	.word	0x0802b850

08014b80 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8014b80:	b580      	push	{r7, lr}
 8014b82:	b082      	sub	sp, #8
 8014b84:	af00      	add	r7, sp, #0
 8014b86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d106      	bne.n	8014b9c <memp_malloc_pool+0x1c>
 8014b8e:	4b0a      	ldr	r3, [pc, #40]	; (8014bb8 <memp_malloc_pool+0x38>)
 8014b90:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8014b94:	4909      	ldr	r1, [pc, #36]	; (8014bbc <memp_malloc_pool+0x3c>)
 8014b96:	480a      	ldr	r0, [pc, #40]	; (8014bc0 <memp_malloc_pool+0x40>)
 8014b98:	f012 f99c 	bl	8026ed4 <iprintf>
  if (desc == NULL) {
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d101      	bne.n	8014ba6 <memp_malloc_pool+0x26>
    return NULL;
 8014ba2:	2300      	movs	r3, #0
 8014ba4:	e003      	b.n	8014bae <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8014ba6:	6878      	ldr	r0, [r7, #4]
 8014ba8:	f7ff ffb8 	bl	8014b1c <do_memp_malloc_pool>
 8014bac:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8014bae:	4618      	mov	r0, r3
 8014bb0:	3708      	adds	r7, #8
 8014bb2:	46bd      	mov	sp, r7
 8014bb4:	bd80      	pop	{r7, pc}
 8014bb6:	bf00      	nop
 8014bb8:	0802b7fc 	.word	0x0802b7fc
 8014bbc:	0802b878 	.word	0x0802b878
 8014bc0:	0802b850 	.word	0x0802b850

08014bc4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8014bc4:	b580      	push	{r7, lr}
 8014bc6:	b084      	sub	sp, #16
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	4603      	mov	r3, r0
 8014bcc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8014bce:	79fb      	ldrb	r3, [r7, #7]
 8014bd0:	2b0d      	cmp	r3, #13
 8014bd2:	d908      	bls.n	8014be6 <memp_malloc+0x22>
 8014bd4:	4b0a      	ldr	r3, [pc, #40]	; (8014c00 <memp_malloc+0x3c>)
 8014bd6:	f240 1257 	movw	r2, #343	; 0x157
 8014bda:	490a      	ldr	r1, [pc, #40]	; (8014c04 <memp_malloc+0x40>)
 8014bdc:	480a      	ldr	r0, [pc, #40]	; (8014c08 <memp_malloc+0x44>)
 8014bde:	f012 f979 	bl	8026ed4 <iprintf>
 8014be2:	2300      	movs	r3, #0
 8014be4:	e008      	b.n	8014bf8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8014be6:	79fb      	ldrb	r3, [r7, #7]
 8014be8:	4a08      	ldr	r2, [pc, #32]	; (8014c0c <memp_malloc+0x48>)
 8014bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014bee:	4618      	mov	r0, r3
 8014bf0:	f7ff ff94 	bl	8014b1c <do_memp_malloc_pool>
 8014bf4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8014bf6:	68fb      	ldr	r3, [r7, #12]
}
 8014bf8:	4618      	mov	r0, r3
 8014bfa:	3710      	adds	r7, #16
 8014bfc:	46bd      	mov	sp, r7
 8014bfe:	bd80      	pop	{r7, pc}
 8014c00:	0802b7fc 	.word	0x0802b7fc
 8014c04:	0802b88c 	.word	0x0802b88c
 8014c08:	0802b850 	.word	0x0802b850
 8014c0c:	0802ebd0 	.word	0x0802ebd0

08014c10 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b084      	sub	sp, #16
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	6078      	str	r0, [r7, #4]
 8014c18:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8014c1a:	683b      	ldr	r3, [r7, #0]
 8014c1c:	f003 0303 	and.w	r3, r3, #3
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d006      	beq.n	8014c32 <do_memp_free_pool+0x22>
 8014c24:	4b0d      	ldr	r3, [pc, #52]	; (8014c5c <do_memp_free_pool+0x4c>)
 8014c26:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8014c2a:	490d      	ldr	r1, [pc, #52]	; (8014c60 <do_memp_free_pool+0x50>)
 8014c2c:	480d      	ldr	r0, [pc, #52]	; (8014c64 <do_memp_free_pool+0x54>)
 8014c2e:	f012 f951 	bl	8026ed4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8014c32:	683b      	ldr	r3, [r7, #0]
 8014c34:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8014c36:	f00d f917 	bl	8021e68 <sys_arch_protect>
 8014c3a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	689b      	ldr	r3, [r3, #8]
 8014c40:	681a      	ldr	r2, [r3, #0]
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	689b      	ldr	r3, [r3, #8]
 8014c4a:	68fa      	ldr	r2, [r7, #12]
 8014c4c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8014c4e:	68b8      	ldr	r0, [r7, #8]
 8014c50:	f00d f918 	bl	8021e84 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8014c54:	bf00      	nop
 8014c56:	3710      	adds	r7, #16
 8014c58:	46bd      	mov	sp, r7
 8014c5a:	bd80      	pop	{r7, pc}
 8014c5c:	0802b7fc 	.word	0x0802b7fc
 8014c60:	0802b8ac 	.word	0x0802b8ac
 8014c64:	0802b850 	.word	0x0802b850

08014c68 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8014c68:	b580      	push	{r7, lr}
 8014c6a:	b082      	sub	sp, #8
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	6078      	str	r0, [r7, #4]
 8014c70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d106      	bne.n	8014c86 <memp_free_pool+0x1e>
 8014c78:	4b0a      	ldr	r3, [pc, #40]	; (8014ca4 <memp_free_pool+0x3c>)
 8014c7a:	f240 1295 	movw	r2, #405	; 0x195
 8014c7e:	490a      	ldr	r1, [pc, #40]	; (8014ca8 <memp_free_pool+0x40>)
 8014c80:	480a      	ldr	r0, [pc, #40]	; (8014cac <memp_free_pool+0x44>)
 8014c82:	f012 f927 	bl	8026ed4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d007      	beq.n	8014c9c <memp_free_pool+0x34>
 8014c8c:	683b      	ldr	r3, [r7, #0]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d004      	beq.n	8014c9c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8014c92:	6839      	ldr	r1, [r7, #0]
 8014c94:	6878      	ldr	r0, [r7, #4]
 8014c96:	f7ff ffbb 	bl	8014c10 <do_memp_free_pool>
 8014c9a:	e000      	b.n	8014c9e <memp_free_pool+0x36>
    return;
 8014c9c:	bf00      	nop
}
 8014c9e:	3708      	adds	r7, #8
 8014ca0:	46bd      	mov	sp, r7
 8014ca2:	bd80      	pop	{r7, pc}
 8014ca4:	0802b7fc 	.word	0x0802b7fc
 8014ca8:	0802b878 	.word	0x0802b878
 8014cac:	0802b850 	.word	0x0802b850

08014cb0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8014cb0:	b580      	push	{r7, lr}
 8014cb2:	b082      	sub	sp, #8
 8014cb4:	af00      	add	r7, sp, #0
 8014cb6:	4603      	mov	r3, r0
 8014cb8:	6039      	str	r1, [r7, #0]
 8014cba:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8014cbc:	79fb      	ldrb	r3, [r7, #7]
 8014cbe:	2b0d      	cmp	r3, #13
 8014cc0:	d907      	bls.n	8014cd2 <memp_free+0x22>
 8014cc2:	4b0c      	ldr	r3, [pc, #48]	; (8014cf4 <memp_free+0x44>)
 8014cc4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8014cc8:	490b      	ldr	r1, [pc, #44]	; (8014cf8 <memp_free+0x48>)
 8014cca:	480c      	ldr	r0, [pc, #48]	; (8014cfc <memp_free+0x4c>)
 8014ccc:	f012 f902 	bl	8026ed4 <iprintf>
 8014cd0:	e00c      	b.n	8014cec <memp_free+0x3c>

  if (mem == NULL) {
 8014cd2:	683b      	ldr	r3, [r7, #0]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d008      	beq.n	8014cea <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8014cd8:	79fb      	ldrb	r3, [r7, #7]
 8014cda:	4a09      	ldr	r2, [pc, #36]	; (8014d00 <memp_free+0x50>)
 8014cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014ce0:	6839      	ldr	r1, [r7, #0]
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	f7ff ff94 	bl	8014c10 <do_memp_free_pool>
 8014ce8:	e000      	b.n	8014cec <memp_free+0x3c>
    return;
 8014cea:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8014cec:	3708      	adds	r7, #8
 8014cee:	46bd      	mov	sp, r7
 8014cf0:	bd80      	pop	{r7, pc}
 8014cf2:	bf00      	nop
 8014cf4:	0802b7fc 	.word	0x0802b7fc
 8014cf8:	0802b8cc 	.word	0x0802b8cc
 8014cfc:	0802b850 	.word	0x0802b850
 8014d00:	0802ebd0 	.word	0x0802ebd0

08014d04 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8014d04:	b480      	push	{r7}
 8014d06:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8014d08:	bf00      	nop
 8014d0a:	46bd      	mov	sp, r7
 8014d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d10:	4770      	bx	lr
	...

08014d14 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8014d14:	b580      	push	{r7, lr}
 8014d16:	b086      	sub	sp, #24
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	60f8      	str	r0, [r7, #12]
 8014d1c:	60b9      	str	r1, [r7, #8]
 8014d1e:	607a      	str	r2, [r7, #4]
 8014d20:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d108      	bne.n	8014d3a <netif_add+0x26>
 8014d28:	4b5b      	ldr	r3, [pc, #364]	; (8014e98 <netif_add+0x184>)
 8014d2a:	f240 1227 	movw	r2, #295	; 0x127
 8014d2e:	495b      	ldr	r1, [pc, #364]	; (8014e9c <netif_add+0x188>)
 8014d30:	485b      	ldr	r0, [pc, #364]	; (8014ea0 <netif_add+0x18c>)
 8014d32:	f012 f8cf 	bl	8026ed4 <iprintf>
 8014d36:	2300      	movs	r3, #0
 8014d38:	e0a9      	b.n	8014e8e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8014d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d108      	bne.n	8014d52 <netif_add+0x3e>
 8014d40:	4b55      	ldr	r3, [pc, #340]	; (8014e98 <netif_add+0x184>)
 8014d42:	f44f 7294 	mov.w	r2, #296	; 0x128
 8014d46:	4957      	ldr	r1, [pc, #348]	; (8014ea4 <netif_add+0x190>)
 8014d48:	4855      	ldr	r0, [pc, #340]	; (8014ea0 <netif_add+0x18c>)
 8014d4a:	f012 f8c3 	bl	8026ed4 <iprintf>
 8014d4e:	2300      	movs	r3, #0
 8014d50:	e09d      	b.n	8014e8e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8014d52:	68bb      	ldr	r3, [r7, #8]
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d101      	bne.n	8014d5c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8014d58:	4b53      	ldr	r3, [pc, #332]	; (8014ea8 <netif_add+0x194>)
 8014d5a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d101      	bne.n	8014d66 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8014d62:	4b51      	ldr	r3, [pc, #324]	; (8014ea8 <netif_add+0x194>)
 8014d64:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8014d66:	683b      	ldr	r3, [r7, #0]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d101      	bne.n	8014d70 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8014d6c:	4b4e      	ldr	r3, [pc, #312]	; (8014ea8 <netif_add+0x194>)
 8014d6e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	2200      	movs	r2, #0
 8014d74:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	2200      	movs	r2, #0
 8014d7a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8014d7c:	68fb      	ldr	r3, [r7, #12]
 8014d7e:	2200      	movs	r2, #0
 8014d80:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	4a49      	ldr	r2, [pc, #292]	; (8014eac <netif_add+0x198>)
 8014d86:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	2200      	movs	r2, #0
 8014d8c:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	2200      	movs	r2, #0
 8014d92:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	3324      	adds	r3, #36	; 0x24
 8014d9a:	2204      	movs	r2, #4
 8014d9c:	2100      	movs	r1, #0
 8014d9e:	4618      	mov	r0, r3
 8014da0:	f011 fa3a 	bl	8026218 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	2200      	movs	r2, #0
 8014da8:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	6a3a      	ldr	r2, [r7, #32]
 8014dae:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8014db0:	4b3f      	ldr	r3, [pc, #252]	; (8014eb0 <netif_add+0x19c>)
 8014db2:	781a      	ldrb	r2, [r3, #0]
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014dbe:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8014dc0:	683b      	ldr	r3, [r7, #0]
 8014dc2:	687a      	ldr	r2, [r7, #4]
 8014dc4:	68b9      	ldr	r1, [r7, #8]
 8014dc6:	68f8      	ldr	r0, [r7, #12]
 8014dc8:	f000 f914 	bl	8014ff4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8014dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dce:	68f8      	ldr	r0, [r7, #12]
 8014dd0:	4798      	blx	r3
 8014dd2:	4603      	mov	r3, r0
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d001      	beq.n	8014ddc <netif_add+0xc8>
    return NULL;
 8014dd8:	2300      	movs	r3, #0
 8014dda:	e058      	b.n	8014e8e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014de2:	2bff      	cmp	r3, #255	; 0xff
 8014de4:	d103      	bne.n	8014dee <netif_add+0xda>
        netif->num = 0;
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	2200      	movs	r2, #0
 8014dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8014dee:	2300      	movs	r3, #0
 8014df0:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8014df2:	4b30      	ldr	r3, [pc, #192]	; (8014eb4 <netif_add+0x1a0>)
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	617b      	str	r3, [r7, #20]
 8014df8:	e02b      	b.n	8014e52 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8014dfa:	697a      	ldr	r2, [r7, #20]
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	429a      	cmp	r2, r3
 8014e00:	d106      	bne.n	8014e10 <netif_add+0xfc>
 8014e02:	4b25      	ldr	r3, [pc, #148]	; (8014e98 <netif_add+0x184>)
 8014e04:	f240 128b 	movw	r2, #395	; 0x18b
 8014e08:	492b      	ldr	r1, [pc, #172]	; (8014eb8 <netif_add+0x1a4>)
 8014e0a:	4825      	ldr	r0, [pc, #148]	; (8014ea0 <netif_add+0x18c>)
 8014e0c:	f012 f862 	bl	8026ed4 <iprintf>
        num_netifs++;
 8014e10:	693b      	ldr	r3, [r7, #16]
 8014e12:	3301      	adds	r3, #1
 8014e14:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8014e16:	693b      	ldr	r3, [r7, #16]
 8014e18:	2bff      	cmp	r3, #255	; 0xff
 8014e1a:	dd06      	ble.n	8014e2a <netif_add+0x116>
 8014e1c:	4b1e      	ldr	r3, [pc, #120]	; (8014e98 <netif_add+0x184>)
 8014e1e:	f240 128d 	movw	r2, #397	; 0x18d
 8014e22:	4926      	ldr	r1, [pc, #152]	; (8014ebc <netif_add+0x1a8>)
 8014e24:	481e      	ldr	r0, [pc, #120]	; (8014ea0 <netif_add+0x18c>)
 8014e26:	f012 f855 	bl	8026ed4 <iprintf>
        if (netif2->num == netif->num) {
 8014e2a:	697b      	ldr	r3, [r7, #20]
 8014e2c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014e36:	429a      	cmp	r2, r3
 8014e38:	d108      	bne.n	8014e4c <netif_add+0x138>
          netif->num++;
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014e40:	3301      	adds	r3, #1
 8014e42:	b2da      	uxtb	r2, r3
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8014e4a:	e005      	b.n	8014e58 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8014e4c:	697b      	ldr	r3, [r7, #20]
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	617b      	str	r3, [r7, #20]
 8014e52:	697b      	ldr	r3, [r7, #20]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d1d0      	bne.n	8014dfa <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8014e58:	697b      	ldr	r3, [r7, #20]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d1be      	bne.n	8014ddc <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014e64:	2bfe      	cmp	r3, #254	; 0xfe
 8014e66:	d103      	bne.n	8014e70 <netif_add+0x15c>
    netif_num = 0;
 8014e68:	4b11      	ldr	r3, [pc, #68]	; (8014eb0 <netif_add+0x19c>)
 8014e6a:	2200      	movs	r2, #0
 8014e6c:	701a      	strb	r2, [r3, #0]
 8014e6e:	e006      	b.n	8014e7e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014e76:	3301      	adds	r3, #1
 8014e78:	b2da      	uxtb	r2, r3
 8014e7a:	4b0d      	ldr	r3, [pc, #52]	; (8014eb0 <netif_add+0x19c>)
 8014e7c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8014e7e:	4b0d      	ldr	r3, [pc, #52]	; (8014eb4 <netif_add+0x1a0>)
 8014e80:	681a      	ldr	r2, [r3, #0]
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8014e86:	4a0b      	ldr	r2, [pc, #44]	; (8014eb4 <netif_add+0x1a0>)
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8014e8c:	68fb      	ldr	r3, [r7, #12]
}
 8014e8e:	4618      	mov	r0, r3
 8014e90:	3718      	adds	r7, #24
 8014e92:	46bd      	mov	sp, r7
 8014e94:	bd80      	pop	{r7, pc}
 8014e96:	bf00      	nop
 8014e98:	0802b8e8 	.word	0x0802b8e8
 8014e9c:	0802b97c 	.word	0x0802b97c
 8014ea0:	0802b938 	.word	0x0802b938
 8014ea4:	0802b998 	.word	0x0802b998
 8014ea8:	0802ec60 	.word	0x0802ec60
 8014eac:	080152d7 	.word	0x080152d7
 8014eb0:	24004f88 	.word	0x24004f88
 8014eb4:	24008658 	.word	0x24008658
 8014eb8:	0802b9bc 	.word	0x0802b9bc
 8014ebc:	0802b9d0 	.word	0x0802b9d0

08014ec0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	b082      	sub	sp, #8
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	6078      	str	r0, [r7, #4]
 8014ec8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8014eca:	6839      	ldr	r1, [r7, #0]
 8014ecc:	6878      	ldr	r0, [r7, #4]
 8014ece:	f003 f941 	bl	8018154 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8014ed2:	6839      	ldr	r1, [r7, #0]
 8014ed4:	6878      	ldr	r0, [r7, #4]
 8014ed6:	f008 faa9 	bl	801d42c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8014eda:	bf00      	nop
 8014edc:	3708      	adds	r7, #8
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	bd80      	pop	{r7, pc}
	...

08014ee4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	b086      	sub	sp, #24
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	60f8      	str	r0, [r7, #12]
 8014eec:	60b9      	str	r1, [r7, #8]
 8014eee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8014ef0:	68bb      	ldr	r3, [r7, #8]
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d106      	bne.n	8014f04 <netif_do_set_ipaddr+0x20>
 8014ef6:	4b1d      	ldr	r3, [pc, #116]	; (8014f6c <netif_do_set_ipaddr+0x88>)
 8014ef8:	f240 12cb 	movw	r2, #459	; 0x1cb
 8014efc:	491c      	ldr	r1, [pc, #112]	; (8014f70 <netif_do_set_ipaddr+0x8c>)
 8014efe:	481d      	ldr	r0, [pc, #116]	; (8014f74 <netif_do_set_ipaddr+0x90>)
 8014f00:	f011 ffe8 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d106      	bne.n	8014f18 <netif_do_set_ipaddr+0x34>
 8014f0a:	4b18      	ldr	r3, [pc, #96]	; (8014f6c <netif_do_set_ipaddr+0x88>)
 8014f0c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8014f10:	4917      	ldr	r1, [pc, #92]	; (8014f70 <netif_do_set_ipaddr+0x8c>)
 8014f12:	4818      	ldr	r0, [pc, #96]	; (8014f74 <netif_do_set_ipaddr+0x90>)
 8014f14:	f011 ffde 	bl	8026ed4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8014f18:	68bb      	ldr	r3, [r7, #8]
 8014f1a:	681a      	ldr	r2, [r3, #0]
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	3304      	adds	r3, #4
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	429a      	cmp	r2, r3
 8014f24:	d01c      	beq.n	8014f60 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8014f26:	68bb      	ldr	r3, [r7, #8]
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	3304      	adds	r3, #4
 8014f30:	681a      	ldr	r2, [r3, #0]
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8014f36:	f107 0314 	add.w	r3, r7, #20
 8014f3a:	4619      	mov	r1, r3
 8014f3c:	6878      	ldr	r0, [r7, #4]
 8014f3e:	f7ff ffbf 	bl	8014ec0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8014f42:	68bb      	ldr	r3, [r7, #8]
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d002      	beq.n	8014f4e <netif_do_set_ipaddr+0x6a>
 8014f48:	68bb      	ldr	r3, [r7, #8]
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	e000      	b.n	8014f50 <netif_do_set_ipaddr+0x6c>
 8014f4e:	2300      	movs	r3, #0
 8014f50:	68fa      	ldr	r2, [r7, #12]
 8014f52:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8014f54:	2101      	movs	r1, #1
 8014f56:	68f8      	ldr	r0, [r7, #12]
 8014f58:	f000 f8d2 	bl	8015100 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8014f5c:	2301      	movs	r3, #1
 8014f5e:	e000      	b.n	8014f62 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8014f60:	2300      	movs	r3, #0
}
 8014f62:	4618      	mov	r0, r3
 8014f64:	3718      	adds	r7, #24
 8014f66:	46bd      	mov	sp, r7
 8014f68:	bd80      	pop	{r7, pc}
 8014f6a:	bf00      	nop
 8014f6c:	0802b8e8 	.word	0x0802b8e8
 8014f70:	0802ba00 	.word	0x0802ba00
 8014f74:	0802b938 	.word	0x0802b938

08014f78 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8014f78:	b480      	push	{r7}
 8014f7a:	b085      	sub	sp, #20
 8014f7c:	af00      	add	r7, sp, #0
 8014f7e:	60f8      	str	r0, [r7, #12]
 8014f80:	60b9      	str	r1, [r7, #8]
 8014f82:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8014f84:	68bb      	ldr	r3, [r7, #8]
 8014f86:	681a      	ldr	r2, [r3, #0]
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	3308      	adds	r3, #8
 8014f8c:	681b      	ldr	r3, [r3, #0]
 8014f8e:	429a      	cmp	r2, r3
 8014f90:	d00a      	beq.n	8014fa8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8014f92:	68bb      	ldr	r3, [r7, #8]
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d002      	beq.n	8014f9e <netif_do_set_netmask+0x26>
 8014f98:	68bb      	ldr	r3, [r7, #8]
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	e000      	b.n	8014fa0 <netif_do_set_netmask+0x28>
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	68fa      	ldr	r2, [r7, #12]
 8014fa2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8014fa4:	2301      	movs	r3, #1
 8014fa6:	e000      	b.n	8014faa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8014fa8:	2300      	movs	r3, #0
}
 8014faa:	4618      	mov	r0, r3
 8014fac:	3714      	adds	r7, #20
 8014fae:	46bd      	mov	sp, r7
 8014fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb4:	4770      	bx	lr

08014fb6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8014fb6:	b480      	push	{r7}
 8014fb8:	b085      	sub	sp, #20
 8014fba:	af00      	add	r7, sp, #0
 8014fbc:	60f8      	str	r0, [r7, #12]
 8014fbe:	60b9      	str	r1, [r7, #8]
 8014fc0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8014fc2:	68bb      	ldr	r3, [r7, #8]
 8014fc4:	681a      	ldr	r2, [r3, #0]
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	330c      	adds	r3, #12
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	429a      	cmp	r2, r3
 8014fce:	d00a      	beq.n	8014fe6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8014fd0:	68bb      	ldr	r3, [r7, #8]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d002      	beq.n	8014fdc <netif_do_set_gw+0x26>
 8014fd6:	68bb      	ldr	r3, [r7, #8]
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	e000      	b.n	8014fde <netif_do_set_gw+0x28>
 8014fdc:	2300      	movs	r3, #0
 8014fde:	68fa      	ldr	r2, [r7, #12]
 8014fe0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8014fe2:	2301      	movs	r3, #1
 8014fe4:	e000      	b.n	8014fe8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8014fe6:	2300      	movs	r3, #0
}
 8014fe8:	4618      	mov	r0, r3
 8014fea:	3714      	adds	r7, #20
 8014fec:	46bd      	mov	sp, r7
 8014fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff2:	4770      	bx	lr

08014ff4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8014ff4:	b580      	push	{r7, lr}
 8014ff6:	b088      	sub	sp, #32
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	60f8      	str	r0, [r7, #12]
 8014ffc:	60b9      	str	r1, [r7, #8]
 8014ffe:	607a      	str	r2, [r7, #4]
 8015000:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8015002:	2300      	movs	r3, #0
 8015004:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8015006:	2300      	movs	r3, #0
 8015008:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801500a:	68bb      	ldr	r3, [r7, #8]
 801500c:	2b00      	cmp	r3, #0
 801500e:	d101      	bne.n	8015014 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8015010:	4b1c      	ldr	r3, [pc, #112]	; (8015084 <netif_set_addr+0x90>)
 8015012:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	2b00      	cmp	r3, #0
 8015018:	d101      	bne.n	801501e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801501a:	4b1a      	ldr	r3, [pc, #104]	; (8015084 <netif_set_addr+0x90>)
 801501c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801501e:	683b      	ldr	r3, [r7, #0]
 8015020:	2b00      	cmp	r3, #0
 8015022:	d101      	bne.n	8015028 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8015024:	4b17      	ldr	r3, [pc, #92]	; (8015084 <netif_set_addr+0x90>)
 8015026:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8015028:	68bb      	ldr	r3, [r7, #8]
 801502a:	2b00      	cmp	r3, #0
 801502c:	d003      	beq.n	8015036 <netif_set_addr+0x42>
 801502e:	68bb      	ldr	r3, [r7, #8]
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d101      	bne.n	801503a <netif_set_addr+0x46>
 8015036:	2301      	movs	r3, #1
 8015038:	e000      	b.n	801503c <netif_set_addr+0x48>
 801503a:	2300      	movs	r3, #0
 801503c:	617b      	str	r3, [r7, #20]
  if (remove) {
 801503e:	697b      	ldr	r3, [r7, #20]
 8015040:	2b00      	cmp	r3, #0
 8015042:	d006      	beq.n	8015052 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8015044:	f107 0310 	add.w	r3, r7, #16
 8015048:	461a      	mov	r2, r3
 801504a:	68b9      	ldr	r1, [r7, #8]
 801504c:	68f8      	ldr	r0, [r7, #12]
 801504e:	f7ff ff49 	bl	8014ee4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8015052:	69fa      	ldr	r2, [r7, #28]
 8015054:	6879      	ldr	r1, [r7, #4]
 8015056:	68f8      	ldr	r0, [r7, #12]
 8015058:	f7ff ff8e 	bl	8014f78 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801505c:	69ba      	ldr	r2, [r7, #24]
 801505e:	6839      	ldr	r1, [r7, #0]
 8015060:	68f8      	ldr	r0, [r7, #12]
 8015062:	f7ff ffa8 	bl	8014fb6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8015066:	697b      	ldr	r3, [r7, #20]
 8015068:	2b00      	cmp	r3, #0
 801506a:	d106      	bne.n	801507a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801506c:	f107 0310 	add.w	r3, r7, #16
 8015070:	461a      	mov	r2, r3
 8015072:	68b9      	ldr	r1, [r7, #8]
 8015074:	68f8      	ldr	r0, [r7, #12]
 8015076:	f7ff ff35 	bl	8014ee4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801507a:	bf00      	nop
 801507c:	3720      	adds	r7, #32
 801507e:	46bd      	mov	sp, r7
 8015080:	bd80      	pop	{r7, pc}
 8015082:	bf00      	nop
 8015084:	0802ec60 	.word	0x0802ec60

08015088 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8015088:	b480      	push	{r7}
 801508a:	b083      	sub	sp, #12
 801508c:	af00      	add	r7, sp, #0
 801508e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8015090:	4a04      	ldr	r2, [pc, #16]	; (80150a4 <netif_set_default+0x1c>)
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8015096:	bf00      	nop
 8015098:	370c      	adds	r7, #12
 801509a:	46bd      	mov	sp, r7
 801509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150a0:	4770      	bx	lr
 80150a2:	bf00      	nop
 80150a4:	2400865c 	.word	0x2400865c

080150a8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80150a8:	b580      	push	{r7, lr}
 80150aa:	b082      	sub	sp, #8
 80150ac:	af00      	add	r7, sp, #0
 80150ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d107      	bne.n	80150c6 <netif_set_up+0x1e>
 80150b6:	4b0f      	ldr	r3, [pc, #60]	; (80150f4 <netif_set_up+0x4c>)
 80150b8:	f44f 7254 	mov.w	r2, #848	; 0x350
 80150bc:	490e      	ldr	r1, [pc, #56]	; (80150f8 <netif_set_up+0x50>)
 80150be:	480f      	ldr	r0, [pc, #60]	; (80150fc <netif_set_up+0x54>)
 80150c0:	f011 ff08 	bl	8026ed4 <iprintf>
 80150c4:	e013      	b.n	80150ee <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80150cc:	f003 0301 	and.w	r3, r3, #1
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d10c      	bne.n	80150ee <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80150da:	f043 0301 	orr.w	r3, r3, #1
 80150de:	b2da      	uxtb	r2, r3
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80150e6:	2103      	movs	r1, #3
 80150e8:	6878      	ldr	r0, [r7, #4]
 80150ea:	f000 f809 	bl	8015100 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80150ee:	3708      	adds	r7, #8
 80150f0:	46bd      	mov	sp, r7
 80150f2:	bd80      	pop	{r7, pc}
 80150f4:	0802b8e8 	.word	0x0802b8e8
 80150f8:	0802ba70 	.word	0x0802ba70
 80150fc:	0802b938 	.word	0x0802b938

08015100 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8015100:	b580      	push	{r7, lr}
 8015102:	b082      	sub	sp, #8
 8015104:	af00      	add	r7, sp, #0
 8015106:	6078      	str	r0, [r7, #4]
 8015108:	460b      	mov	r3, r1
 801510a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	2b00      	cmp	r3, #0
 8015110:	d106      	bne.n	8015120 <netif_issue_reports+0x20>
 8015112:	4b18      	ldr	r3, [pc, #96]	; (8015174 <netif_issue_reports+0x74>)
 8015114:	f240 326d 	movw	r2, #877	; 0x36d
 8015118:	4917      	ldr	r1, [pc, #92]	; (8015178 <netif_issue_reports+0x78>)
 801511a:	4818      	ldr	r0, [pc, #96]	; (801517c <netif_issue_reports+0x7c>)
 801511c:	f011 feda 	bl	8026ed4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015126:	f003 0304 	and.w	r3, r3, #4
 801512a:	2b00      	cmp	r3, #0
 801512c:	d01e      	beq.n	801516c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015134:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8015138:	2b00      	cmp	r3, #0
 801513a:	d017      	beq.n	801516c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801513c:	78fb      	ldrb	r3, [r7, #3]
 801513e:	f003 0301 	and.w	r3, r3, #1
 8015142:	2b00      	cmp	r3, #0
 8015144:	d013      	beq.n	801516e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	3304      	adds	r3, #4
 801514a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801514c:	2b00      	cmp	r3, #0
 801514e:	d00e      	beq.n	801516e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015156:	f003 0308 	and.w	r3, r3, #8
 801515a:	2b00      	cmp	r3, #0
 801515c:	d007      	beq.n	801516e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	3304      	adds	r3, #4
 8015162:	4619      	mov	r1, r3
 8015164:	6878      	ldr	r0, [r7, #4]
 8015166:	f00a ffb3 	bl	80200d0 <etharp_request>
 801516a:	e000      	b.n	801516e <netif_issue_reports+0x6e>
    return;
 801516c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801516e:	3708      	adds	r7, #8
 8015170:	46bd      	mov	sp, r7
 8015172:	bd80      	pop	{r7, pc}
 8015174:	0802b8e8 	.word	0x0802b8e8
 8015178:	0802ba8c 	.word	0x0802ba8c
 801517c:	0802b938 	.word	0x0802b938

08015180 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8015180:	b580      	push	{r7, lr}
 8015182:	b082      	sub	sp, #8
 8015184:	af00      	add	r7, sp, #0
 8015186:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d107      	bne.n	801519e <netif_set_down+0x1e>
 801518e:	4b12      	ldr	r3, [pc, #72]	; (80151d8 <netif_set_down+0x58>)
 8015190:	f240 329b 	movw	r2, #923	; 0x39b
 8015194:	4911      	ldr	r1, [pc, #68]	; (80151dc <netif_set_down+0x5c>)
 8015196:	4812      	ldr	r0, [pc, #72]	; (80151e0 <netif_set_down+0x60>)
 8015198:	f011 fe9c 	bl	8026ed4 <iprintf>
 801519c:	e019      	b.n	80151d2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80151a4:	f003 0301 	and.w	r3, r3, #1
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d012      	beq.n	80151d2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80151b2:	f023 0301 	bic.w	r3, r3, #1
 80151b6:	b2da      	uxtb	r2, r3
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80151c4:	f003 0308 	and.w	r3, r3, #8
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d002      	beq.n	80151d2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80151cc:	6878      	ldr	r0, [r7, #4]
 80151ce:	f00a fb39 	bl	801f844 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80151d2:	3708      	adds	r7, #8
 80151d4:	46bd      	mov	sp, r7
 80151d6:	bd80      	pop	{r7, pc}
 80151d8:	0802b8e8 	.word	0x0802b8e8
 80151dc:	0802bab0 	.word	0x0802bab0
 80151e0:	0802b938 	.word	0x0802b938

080151e4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80151e4:	b580      	push	{r7, lr}
 80151e6:	b082      	sub	sp, #8
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d107      	bne.n	8015202 <netif_set_link_up+0x1e>
 80151f2:	4b15      	ldr	r3, [pc, #84]	; (8015248 <netif_set_link_up+0x64>)
 80151f4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80151f8:	4914      	ldr	r1, [pc, #80]	; (801524c <netif_set_link_up+0x68>)
 80151fa:	4815      	ldr	r0, [pc, #84]	; (8015250 <netif_set_link_up+0x6c>)
 80151fc:	f011 fe6a 	bl	8026ed4 <iprintf>
 8015200:	e01e      	b.n	8015240 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015208:	f003 0304 	and.w	r3, r3, #4
 801520c:	2b00      	cmp	r3, #0
 801520e:	d117      	bne.n	8015240 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015216:	f043 0304 	orr.w	r3, r3, #4
 801521a:	b2da      	uxtb	r2, r3
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8015222:	6878      	ldr	r0, [r7, #4]
 8015224:	f008 fd4e 	bl	801dcc4 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8015228:	2103      	movs	r1, #3
 801522a:	6878      	ldr	r0, [r7, #4]
 801522c:	f7ff ff68 	bl	8015100 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	69db      	ldr	r3, [r3, #28]
 8015234:	2b00      	cmp	r3, #0
 8015236:	d003      	beq.n	8015240 <netif_set_link_up+0x5c>
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	69db      	ldr	r3, [r3, #28]
 801523c:	6878      	ldr	r0, [r7, #4]
 801523e:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8015240:	3708      	adds	r7, #8
 8015242:	46bd      	mov	sp, r7
 8015244:	bd80      	pop	{r7, pc}
 8015246:	bf00      	nop
 8015248:	0802b8e8 	.word	0x0802b8e8
 801524c:	0802bad0 	.word	0x0802bad0
 8015250:	0802b938 	.word	0x0802b938

08015254 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8015254:	b580      	push	{r7, lr}
 8015256:	b082      	sub	sp, #8
 8015258:	af00      	add	r7, sp, #0
 801525a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	2b00      	cmp	r3, #0
 8015260:	d107      	bne.n	8015272 <netif_set_link_down+0x1e>
 8015262:	4b11      	ldr	r3, [pc, #68]	; (80152a8 <netif_set_link_down+0x54>)
 8015264:	f240 4206 	movw	r2, #1030	; 0x406
 8015268:	4910      	ldr	r1, [pc, #64]	; (80152ac <netif_set_link_down+0x58>)
 801526a:	4811      	ldr	r0, [pc, #68]	; (80152b0 <netif_set_link_down+0x5c>)
 801526c:	f011 fe32 	bl	8026ed4 <iprintf>
 8015270:	e017      	b.n	80152a2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015278:	f003 0304 	and.w	r3, r3, #4
 801527c:	2b00      	cmp	r3, #0
 801527e:	d010      	beq.n	80152a2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015286:	f023 0304 	bic.w	r3, r3, #4
 801528a:	b2da      	uxtb	r2, r3
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	69db      	ldr	r3, [r3, #28]
 8015296:	2b00      	cmp	r3, #0
 8015298:	d003      	beq.n	80152a2 <netif_set_link_down+0x4e>
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	69db      	ldr	r3, [r3, #28]
 801529e:	6878      	ldr	r0, [r7, #4]
 80152a0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80152a2:	3708      	adds	r7, #8
 80152a4:	46bd      	mov	sp, r7
 80152a6:	bd80      	pop	{r7, pc}
 80152a8:	0802b8e8 	.word	0x0802b8e8
 80152ac:	0802baf4 	.word	0x0802baf4
 80152b0:	0802b938 	.word	0x0802b938

080152b4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80152b4:	b480      	push	{r7}
 80152b6:	b083      	sub	sp, #12
 80152b8:	af00      	add	r7, sp, #0
 80152ba:	6078      	str	r0, [r7, #4]
 80152bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d002      	beq.n	80152ca <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	683a      	ldr	r2, [r7, #0]
 80152c8:	61da      	str	r2, [r3, #28]
  }
}
 80152ca:	bf00      	nop
 80152cc:	370c      	adds	r7, #12
 80152ce:	46bd      	mov	sp, r7
 80152d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152d4:	4770      	bx	lr

080152d6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80152d6:	b480      	push	{r7}
 80152d8:	b085      	sub	sp, #20
 80152da:	af00      	add	r7, sp, #0
 80152dc:	60f8      	str	r0, [r7, #12]
 80152de:	60b9      	str	r1, [r7, #8]
 80152e0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80152e2:	f06f 030b 	mvn.w	r3, #11
}
 80152e6:	4618      	mov	r0, r3
 80152e8:	3714      	adds	r7, #20
 80152ea:	46bd      	mov	sp, r7
 80152ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152f0:	4770      	bx	lr
	...

080152f4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80152f4:	b480      	push	{r7}
 80152f6:	b085      	sub	sp, #20
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	4603      	mov	r3, r0
 80152fc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80152fe:	79fb      	ldrb	r3, [r7, #7]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d013      	beq.n	801532c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8015304:	4b0d      	ldr	r3, [pc, #52]	; (801533c <netif_get_by_index+0x48>)
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	60fb      	str	r3, [r7, #12]
 801530a:	e00c      	b.n	8015326 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015312:	3301      	adds	r3, #1
 8015314:	b2db      	uxtb	r3, r3
 8015316:	79fa      	ldrb	r2, [r7, #7]
 8015318:	429a      	cmp	r2, r3
 801531a:	d101      	bne.n	8015320 <netif_get_by_index+0x2c>
        return netif; /* found! */
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	e006      	b.n	801532e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	60fb      	str	r3, [r7, #12]
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	2b00      	cmp	r3, #0
 801532a:	d1ef      	bne.n	801530c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801532c:	2300      	movs	r3, #0
}
 801532e:	4618      	mov	r0, r3
 8015330:	3714      	adds	r7, #20
 8015332:	46bd      	mov	sp, r7
 8015334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015338:	4770      	bx	lr
 801533a:	bf00      	nop
 801533c:	24008658 	.word	0x24008658

08015340 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8015340:	b580      	push	{r7, lr}
 8015342:	b082      	sub	sp, #8
 8015344:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8015346:	f00c fd8f 	bl	8021e68 <sys_arch_protect>
 801534a:	6038      	str	r0, [r7, #0]
 801534c:	4b0d      	ldr	r3, [pc, #52]	; (8015384 <pbuf_free_ooseq+0x44>)
 801534e:	2200      	movs	r2, #0
 8015350:	701a      	strb	r2, [r3, #0]
 8015352:	6838      	ldr	r0, [r7, #0]
 8015354:	f00c fd96 	bl	8021e84 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8015358:	4b0b      	ldr	r3, [pc, #44]	; (8015388 <pbuf_free_ooseq+0x48>)
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	607b      	str	r3, [r7, #4]
 801535e:	e00a      	b.n	8015376 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015364:	2b00      	cmp	r3, #0
 8015366:	d003      	beq.n	8015370 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8015368:	6878      	ldr	r0, [r7, #4]
 801536a:	f002 ff31 	bl	80181d0 <tcp_free_ooseq>
      return;
 801536e:	e005      	b.n	801537c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	68db      	ldr	r3, [r3, #12]
 8015374:	607b      	str	r3, [r7, #4]
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	2b00      	cmp	r3, #0
 801537a:	d1f1      	bne.n	8015360 <pbuf_free_ooseq+0x20>
    }
  }
}
 801537c:	3708      	adds	r7, #8
 801537e:	46bd      	mov	sp, r7
 8015380:	bd80      	pop	{r7, pc}
 8015382:	bf00      	nop
 8015384:	24008660 	.word	0x24008660
 8015388:	24008668 	.word	0x24008668

0801538c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 801538c:	b580      	push	{r7, lr}
 801538e:	b082      	sub	sp, #8
 8015390:	af00      	add	r7, sp, #0
 8015392:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8015394:	f7ff ffd4 	bl	8015340 <pbuf_free_ooseq>
}
 8015398:	bf00      	nop
 801539a:	3708      	adds	r7, #8
 801539c:	46bd      	mov	sp, r7
 801539e:	bd80      	pop	{r7, pc}

080153a0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80153a0:	b580      	push	{r7, lr}
 80153a2:	b082      	sub	sp, #8
 80153a4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80153a6:	f00c fd5f 	bl	8021e68 <sys_arch_protect>
 80153aa:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80153ac:	4b0f      	ldr	r3, [pc, #60]	; (80153ec <pbuf_pool_is_empty+0x4c>)
 80153ae:	781b      	ldrb	r3, [r3, #0]
 80153b0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80153b2:	4b0e      	ldr	r3, [pc, #56]	; (80153ec <pbuf_pool_is_empty+0x4c>)
 80153b4:	2201      	movs	r2, #1
 80153b6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80153b8:	6878      	ldr	r0, [r7, #4]
 80153ba:	f00c fd63 	bl	8021e84 <sys_arch_unprotect>

  if (!queued) {
 80153be:	78fb      	ldrb	r3, [r7, #3]
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d10f      	bne.n	80153e4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80153c4:	2100      	movs	r1, #0
 80153c6:	480a      	ldr	r0, [pc, #40]	; (80153f0 <pbuf_pool_is_empty+0x50>)
 80153c8:	f7fd fbae 	bl	8012b28 <tcpip_try_callback>
 80153cc:	4603      	mov	r3, r0
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d008      	beq.n	80153e4 <pbuf_pool_is_empty+0x44>
 80153d2:	f00c fd49 	bl	8021e68 <sys_arch_protect>
 80153d6:	6078      	str	r0, [r7, #4]
 80153d8:	4b04      	ldr	r3, [pc, #16]	; (80153ec <pbuf_pool_is_empty+0x4c>)
 80153da:	2200      	movs	r2, #0
 80153dc:	701a      	strb	r2, [r3, #0]
 80153de:	6878      	ldr	r0, [r7, #4]
 80153e0:	f00c fd50 	bl	8021e84 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80153e4:	bf00      	nop
 80153e6:	3708      	adds	r7, #8
 80153e8:	46bd      	mov	sp, r7
 80153ea:	bd80      	pop	{r7, pc}
 80153ec:	24008660 	.word	0x24008660
 80153f0:	0801538d 	.word	0x0801538d

080153f4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80153f4:	b480      	push	{r7}
 80153f6:	b085      	sub	sp, #20
 80153f8:	af00      	add	r7, sp, #0
 80153fa:	60f8      	str	r0, [r7, #12]
 80153fc:	60b9      	str	r1, [r7, #8]
 80153fe:	4611      	mov	r1, r2
 8015400:	461a      	mov	r2, r3
 8015402:	460b      	mov	r3, r1
 8015404:	80fb      	strh	r3, [r7, #6]
 8015406:	4613      	mov	r3, r2
 8015408:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	2200      	movs	r2, #0
 801540e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	68ba      	ldr	r2, [r7, #8]
 8015414:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	88fa      	ldrh	r2, [r7, #6]
 801541a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	88ba      	ldrh	r2, [r7, #4]
 8015420:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8015422:	8b3b      	ldrh	r3, [r7, #24]
 8015424:	b2da      	uxtb	r2, r3
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	7f3a      	ldrb	r2, [r7, #28]
 801542e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	2201      	movs	r2, #1
 8015434:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	2200      	movs	r2, #0
 801543a:	73da      	strb	r2, [r3, #15]
}
 801543c:	bf00      	nop
 801543e:	3714      	adds	r7, #20
 8015440:	46bd      	mov	sp, r7
 8015442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015446:	4770      	bx	lr

08015448 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8015448:	b580      	push	{r7, lr}
 801544a:	b08c      	sub	sp, #48	; 0x30
 801544c:	af02      	add	r7, sp, #8
 801544e:	4603      	mov	r3, r0
 8015450:	71fb      	strb	r3, [r7, #7]
 8015452:	460b      	mov	r3, r1
 8015454:	80bb      	strh	r3, [r7, #4]
 8015456:	4613      	mov	r3, r2
 8015458:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801545a:	79fb      	ldrb	r3, [r7, #7]
 801545c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801545e:	887b      	ldrh	r3, [r7, #2]
 8015460:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8015464:	d07f      	beq.n	8015566 <pbuf_alloc+0x11e>
 8015466:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801546a:	f300 80c8 	bgt.w	80155fe <pbuf_alloc+0x1b6>
 801546e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8015472:	d010      	beq.n	8015496 <pbuf_alloc+0x4e>
 8015474:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8015478:	f300 80c1 	bgt.w	80155fe <pbuf_alloc+0x1b6>
 801547c:	2b01      	cmp	r3, #1
 801547e:	d002      	beq.n	8015486 <pbuf_alloc+0x3e>
 8015480:	2b41      	cmp	r3, #65	; 0x41
 8015482:	f040 80bc 	bne.w	80155fe <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8015486:	887a      	ldrh	r2, [r7, #2]
 8015488:	88bb      	ldrh	r3, [r7, #4]
 801548a:	4619      	mov	r1, r3
 801548c:	2000      	movs	r0, #0
 801548e:	f000 f8d1 	bl	8015634 <pbuf_alloc_reference>
 8015492:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8015494:	e0bd      	b.n	8015612 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8015496:	2300      	movs	r3, #0
 8015498:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801549a:	2300      	movs	r3, #0
 801549c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801549e:	88bb      	ldrh	r3, [r7, #4]
 80154a0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80154a2:	200d      	movs	r0, #13
 80154a4:	f7ff fb8e 	bl	8014bc4 <memp_malloc>
 80154a8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80154aa:	693b      	ldr	r3, [r7, #16]
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d109      	bne.n	80154c4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80154b0:	f7ff ff76 	bl	80153a0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80154b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d002      	beq.n	80154c0 <pbuf_alloc+0x78>
            pbuf_free(p);
 80154ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80154bc:	f000 fada 	bl	8015a74 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80154c0:	2300      	movs	r3, #0
 80154c2:	e0a7      	b.n	8015614 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80154c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80154c6:	3303      	adds	r3, #3
 80154c8:	b29b      	uxth	r3, r3
 80154ca:	f023 0303 	bic.w	r3, r3, #3
 80154ce:	b29b      	uxth	r3, r3
 80154d0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80154d4:	b29b      	uxth	r3, r3
 80154d6:	8b7a      	ldrh	r2, [r7, #26]
 80154d8:	4293      	cmp	r3, r2
 80154da:	bf28      	it	cs
 80154dc:	4613      	movcs	r3, r2
 80154de:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80154e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80154e2:	3310      	adds	r3, #16
 80154e4:	693a      	ldr	r2, [r7, #16]
 80154e6:	4413      	add	r3, r2
 80154e8:	3303      	adds	r3, #3
 80154ea:	f023 0303 	bic.w	r3, r3, #3
 80154ee:	4618      	mov	r0, r3
 80154f0:	89f9      	ldrh	r1, [r7, #14]
 80154f2:	8b7a      	ldrh	r2, [r7, #26]
 80154f4:	2300      	movs	r3, #0
 80154f6:	9301      	str	r3, [sp, #4]
 80154f8:	887b      	ldrh	r3, [r7, #2]
 80154fa:	9300      	str	r3, [sp, #0]
 80154fc:	460b      	mov	r3, r1
 80154fe:	4601      	mov	r1, r0
 8015500:	6938      	ldr	r0, [r7, #16]
 8015502:	f7ff ff77 	bl	80153f4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8015506:	693b      	ldr	r3, [r7, #16]
 8015508:	685b      	ldr	r3, [r3, #4]
 801550a:	f003 0303 	and.w	r3, r3, #3
 801550e:	2b00      	cmp	r3, #0
 8015510:	d006      	beq.n	8015520 <pbuf_alloc+0xd8>
 8015512:	4b42      	ldr	r3, [pc, #264]	; (801561c <pbuf_alloc+0x1d4>)
 8015514:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015518:	4941      	ldr	r1, [pc, #260]	; (8015620 <pbuf_alloc+0x1d8>)
 801551a:	4842      	ldr	r0, [pc, #264]	; (8015624 <pbuf_alloc+0x1dc>)
 801551c:	f011 fcda 	bl	8026ed4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8015520:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015522:	3303      	adds	r3, #3
 8015524:	f023 0303 	bic.w	r3, r3, #3
 8015528:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 801552c:	d106      	bne.n	801553c <pbuf_alloc+0xf4>
 801552e:	4b3b      	ldr	r3, [pc, #236]	; (801561c <pbuf_alloc+0x1d4>)
 8015530:	f44f 7281 	mov.w	r2, #258	; 0x102
 8015534:	493c      	ldr	r1, [pc, #240]	; (8015628 <pbuf_alloc+0x1e0>)
 8015536:	483b      	ldr	r0, [pc, #236]	; (8015624 <pbuf_alloc+0x1dc>)
 8015538:	f011 fccc 	bl	8026ed4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801553e:	2b00      	cmp	r3, #0
 8015540:	d102      	bne.n	8015548 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8015542:	693b      	ldr	r3, [r7, #16]
 8015544:	627b      	str	r3, [r7, #36]	; 0x24
 8015546:	e002      	b.n	801554e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8015548:	69fb      	ldr	r3, [r7, #28]
 801554a:	693a      	ldr	r2, [r7, #16]
 801554c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801554e:	693b      	ldr	r3, [r7, #16]
 8015550:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8015552:	8b7a      	ldrh	r2, [r7, #26]
 8015554:	89fb      	ldrh	r3, [r7, #14]
 8015556:	1ad3      	subs	r3, r2, r3
 8015558:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801555a:	2300      	movs	r3, #0
 801555c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801555e:	8b7b      	ldrh	r3, [r7, #26]
 8015560:	2b00      	cmp	r3, #0
 8015562:	d19e      	bne.n	80154a2 <pbuf_alloc+0x5a>
      break;
 8015564:	e055      	b.n	8015612 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8015566:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015568:	3303      	adds	r3, #3
 801556a:	b29b      	uxth	r3, r3
 801556c:	f023 0303 	bic.w	r3, r3, #3
 8015570:	b29a      	uxth	r2, r3
 8015572:	88bb      	ldrh	r3, [r7, #4]
 8015574:	3303      	adds	r3, #3
 8015576:	b29b      	uxth	r3, r3
 8015578:	f023 0303 	bic.w	r3, r3, #3
 801557c:	b29b      	uxth	r3, r3
 801557e:	4413      	add	r3, r2
 8015580:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8015582:	8b3b      	ldrh	r3, [r7, #24]
 8015584:	3310      	adds	r3, #16
 8015586:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8015588:	8b3a      	ldrh	r2, [r7, #24]
 801558a:	88bb      	ldrh	r3, [r7, #4]
 801558c:	3303      	adds	r3, #3
 801558e:	f023 0303 	bic.w	r3, r3, #3
 8015592:	429a      	cmp	r2, r3
 8015594:	d306      	bcc.n	80155a4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8015596:	8afa      	ldrh	r2, [r7, #22]
 8015598:	88bb      	ldrh	r3, [r7, #4]
 801559a:	3303      	adds	r3, #3
 801559c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80155a0:	429a      	cmp	r2, r3
 80155a2:	d201      	bcs.n	80155a8 <pbuf_alloc+0x160>
        return NULL;
 80155a4:	2300      	movs	r3, #0
 80155a6:	e035      	b.n	8015614 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80155a8:	8afb      	ldrh	r3, [r7, #22]
 80155aa:	4618      	mov	r0, r3
 80155ac:	f7ff f966 	bl	801487c <mem_malloc>
 80155b0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80155b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d101      	bne.n	80155bc <pbuf_alloc+0x174>
        return NULL;
 80155b8:	2300      	movs	r3, #0
 80155ba:	e02b      	b.n	8015614 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80155bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80155be:	3310      	adds	r3, #16
 80155c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80155c2:	4413      	add	r3, r2
 80155c4:	3303      	adds	r3, #3
 80155c6:	f023 0303 	bic.w	r3, r3, #3
 80155ca:	4618      	mov	r0, r3
 80155cc:	88b9      	ldrh	r1, [r7, #4]
 80155ce:	88ba      	ldrh	r2, [r7, #4]
 80155d0:	2300      	movs	r3, #0
 80155d2:	9301      	str	r3, [sp, #4]
 80155d4:	887b      	ldrh	r3, [r7, #2]
 80155d6:	9300      	str	r3, [sp, #0]
 80155d8:	460b      	mov	r3, r1
 80155da:	4601      	mov	r1, r0
 80155dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80155de:	f7ff ff09 	bl	80153f4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80155e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155e4:	685b      	ldr	r3, [r3, #4]
 80155e6:	f003 0303 	and.w	r3, r3, #3
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d010      	beq.n	8015610 <pbuf_alloc+0x1c8>
 80155ee:	4b0b      	ldr	r3, [pc, #44]	; (801561c <pbuf_alloc+0x1d4>)
 80155f0:	f44f 7291 	mov.w	r2, #290	; 0x122
 80155f4:	490d      	ldr	r1, [pc, #52]	; (801562c <pbuf_alloc+0x1e4>)
 80155f6:	480b      	ldr	r0, [pc, #44]	; (8015624 <pbuf_alloc+0x1dc>)
 80155f8:	f011 fc6c 	bl	8026ed4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80155fc:	e008      	b.n	8015610 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80155fe:	4b07      	ldr	r3, [pc, #28]	; (801561c <pbuf_alloc+0x1d4>)
 8015600:	f240 1227 	movw	r2, #295	; 0x127
 8015604:	490a      	ldr	r1, [pc, #40]	; (8015630 <pbuf_alloc+0x1e8>)
 8015606:	4807      	ldr	r0, [pc, #28]	; (8015624 <pbuf_alloc+0x1dc>)
 8015608:	f011 fc64 	bl	8026ed4 <iprintf>
      return NULL;
 801560c:	2300      	movs	r3, #0
 801560e:	e001      	b.n	8015614 <pbuf_alloc+0x1cc>
      break;
 8015610:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8015612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015614:	4618      	mov	r0, r3
 8015616:	3728      	adds	r7, #40	; 0x28
 8015618:	46bd      	mov	sp, r7
 801561a:	bd80      	pop	{r7, pc}
 801561c:	0802bb18 	.word	0x0802bb18
 8015620:	0802bb48 	.word	0x0802bb48
 8015624:	0802bb78 	.word	0x0802bb78
 8015628:	0802bba0 	.word	0x0802bba0
 801562c:	0802bbd4 	.word	0x0802bbd4
 8015630:	0802bc00 	.word	0x0802bc00

08015634 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8015634:	b580      	push	{r7, lr}
 8015636:	b086      	sub	sp, #24
 8015638:	af02      	add	r7, sp, #8
 801563a:	6078      	str	r0, [r7, #4]
 801563c:	460b      	mov	r3, r1
 801563e:	807b      	strh	r3, [r7, #2]
 8015640:	4613      	mov	r3, r2
 8015642:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8015644:	883b      	ldrh	r3, [r7, #0]
 8015646:	2b41      	cmp	r3, #65	; 0x41
 8015648:	d009      	beq.n	801565e <pbuf_alloc_reference+0x2a>
 801564a:	883b      	ldrh	r3, [r7, #0]
 801564c:	2b01      	cmp	r3, #1
 801564e:	d006      	beq.n	801565e <pbuf_alloc_reference+0x2a>
 8015650:	4b0f      	ldr	r3, [pc, #60]	; (8015690 <pbuf_alloc_reference+0x5c>)
 8015652:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8015656:	490f      	ldr	r1, [pc, #60]	; (8015694 <pbuf_alloc_reference+0x60>)
 8015658:	480f      	ldr	r0, [pc, #60]	; (8015698 <pbuf_alloc_reference+0x64>)
 801565a:	f011 fc3b 	bl	8026ed4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801565e:	200c      	movs	r0, #12
 8015660:	f7ff fab0 	bl	8014bc4 <memp_malloc>
 8015664:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	2b00      	cmp	r3, #0
 801566a:	d101      	bne.n	8015670 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801566c:	2300      	movs	r3, #0
 801566e:	e00b      	b.n	8015688 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8015670:	8879      	ldrh	r1, [r7, #2]
 8015672:	887a      	ldrh	r2, [r7, #2]
 8015674:	2300      	movs	r3, #0
 8015676:	9301      	str	r3, [sp, #4]
 8015678:	883b      	ldrh	r3, [r7, #0]
 801567a:	9300      	str	r3, [sp, #0]
 801567c:	460b      	mov	r3, r1
 801567e:	6879      	ldr	r1, [r7, #4]
 8015680:	68f8      	ldr	r0, [r7, #12]
 8015682:	f7ff feb7 	bl	80153f4 <pbuf_init_alloced_pbuf>
  return p;
 8015686:	68fb      	ldr	r3, [r7, #12]
}
 8015688:	4618      	mov	r0, r3
 801568a:	3710      	adds	r7, #16
 801568c:	46bd      	mov	sp, r7
 801568e:	bd80      	pop	{r7, pc}
 8015690:	0802bb18 	.word	0x0802bb18
 8015694:	0802bc1c 	.word	0x0802bc1c
 8015698:	0802bb78 	.word	0x0802bb78

0801569c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801569c:	b580      	push	{r7, lr}
 801569e:	b088      	sub	sp, #32
 80156a0:	af02      	add	r7, sp, #8
 80156a2:	607b      	str	r3, [r7, #4]
 80156a4:	4603      	mov	r3, r0
 80156a6:	73fb      	strb	r3, [r7, #15]
 80156a8:	460b      	mov	r3, r1
 80156aa:	81bb      	strh	r3, [r7, #12]
 80156ac:	4613      	mov	r3, r2
 80156ae:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80156b0:	7bfb      	ldrb	r3, [r7, #15]
 80156b2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80156b4:	8a7b      	ldrh	r3, [r7, #18]
 80156b6:	3303      	adds	r3, #3
 80156b8:	f023 0203 	bic.w	r2, r3, #3
 80156bc:	89bb      	ldrh	r3, [r7, #12]
 80156be:	441a      	add	r2, r3
 80156c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80156c2:	429a      	cmp	r2, r3
 80156c4:	d901      	bls.n	80156ca <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80156c6:	2300      	movs	r3, #0
 80156c8:	e018      	b.n	80156fc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80156ca:	6a3b      	ldr	r3, [r7, #32]
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d007      	beq.n	80156e0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80156d0:	8a7b      	ldrh	r3, [r7, #18]
 80156d2:	3303      	adds	r3, #3
 80156d4:	f023 0303 	bic.w	r3, r3, #3
 80156d8:	6a3a      	ldr	r2, [r7, #32]
 80156da:	4413      	add	r3, r2
 80156dc:	617b      	str	r3, [r7, #20]
 80156de:	e001      	b.n	80156e4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80156e0:	2300      	movs	r3, #0
 80156e2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80156e4:	6878      	ldr	r0, [r7, #4]
 80156e6:	89b9      	ldrh	r1, [r7, #12]
 80156e8:	89ba      	ldrh	r2, [r7, #12]
 80156ea:	2302      	movs	r3, #2
 80156ec:	9301      	str	r3, [sp, #4]
 80156ee:	897b      	ldrh	r3, [r7, #10]
 80156f0:	9300      	str	r3, [sp, #0]
 80156f2:	460b      	mov	r3, r1
 80156f4:	6979      	ldr	r1, [r7, #20]
 80156f6:	f7ff fe7d 	bl	80153f4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80156fa:	687b      	ldr	r3, [r7, #4]
}
 80156fc:	4618      	mov	r0, r3
 80156fe:	3718      	adds	r7, #24
 8015700:	46bd      	mov	sp, r7
 8015702:	bd80      	pop	{r7, pc}

08015704 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8015704:	b580      	push	{r7, lr}
 8015706:	b084      	sub	sp, #16
 8015708:	af00      	add	r7, sp, #0
 801570a:	6078      	str	r0, [r7, #4]
 801570c:	460b      	mov	r3, r1
 801570e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	2b00      	cmp	r3, #0
 8015714:	d106      	bne.n	8015724 <pbuf_realloc+0x20>
 8015716:	4b3a      	ldr	r3, [pc, #232]	; (8015800 <pbuf_realloc+0xfc>)
 8015718:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801571c:	4939      	ldr	r1, [pc, #228]	; (8015804 <pbuf_realloc+0x100>)
 801571e:	483a      	ldr	r0, [pc, #232]	; (8015808 <pbuf_realloc+0x104>)
 8015720:	f011 fbd8 	bl	8026ed4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	891b      	ldrh	r3, [r3, #8]
 8015728:	887a      	ldrh	r2, [r7, #2]
 801572a:	429a      	cmp	r2, r3
 801572c:	d263      	bcs.n	80157f6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	891a      	ldrh	r2, [r3, #8]
 8015732:	887b      	ldrh	r3, [r7, #2]
 8015734:	1ad3      	subs	r3, r2, r3
 8015736:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8015738:	887b      	ldrh	r3, [r7, #2]
 801573a:	817b      	strh	r3, [r7, #10]
  q = p;
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8015740:	e018      	b.n	8015774 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	895b      	ldrh	r3, [r3, #10]
 8015746:	897a      	ldrh	r2, [r7, #10]
 8015748:	1ad3      	subs	r3, r2, r3
 801574a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	891a      	ldrh	r2, [r3, #8]
 8015750:	893b      	ldrh	r3, [r7, #8]
 8015752:	1ad3      	subs	r3, r2, r3
 8015754:	b29a      	uxth	r2, r3
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	2b00      	cmp	r3, #0
 8015764:	d106      	bne.n	8015774 <pbuf_realloc+0x70>
 8015766:	4b26      	ldr	r3, [pc, #152]	; (8015800 <pbuf_realloc+0xfc>)
 8015768:	f240 12af 	movw	r2, #431	; 0x1af
 801576c:	4927      	ldr	r1, [pc, #156]	; (801580c <pbuf_realloc+0x108>)
 801576e:	4826      	ldr	r0, [pc, #152]	; (8015808 <pbuf_realloc+0x104>)
 8015770:	f011 fbb0 	bl	8026ed4 <iprintf>
  while (rem_len > q->len) {
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	895b      	ldrh	r3, [r3, #10]
 8015778:	897a      	ldrh	r2, [r7, #10]
 801577a:	429a      	cmp	r2, r3
 801577c:	d8e1      	bhi.n	8015742 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	7b1b      	ldrb	r3, [r3, #12]
 8015782:	f003 030f 	and.w	r3, r3, #15
 8015786:	2b00      	cmp	r3, #0
 8015788:	d121      	bne.n	80157ce <pbuf_realloc+0xca>
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	895b      	ldrh	r3, [r3, #10]
 801578e:	897a      	ldrh	r2, [r7, #10]
 8015790:	429a      	cmp	r2, r3
 8015792:	d01c      	beq.n	80157ce <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	7b5b      	ldrb	r3, [r3, #13]
 8015798:	f003 0302 	and.w	r3, r3, #2
 801579c:	2b00      	cmp	r3, #0
 801579e:	d116      	bne.n	80157ce <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	685a      	ldr	r2, [r3, #4]
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	1ad3      	subs	r3, r2, r3
 80157a8:	b29a      	uxth	r2, r3
 80157aa:	897b      	ldrh	r3, [r7, #10]
 80157ac:	4413      	add	r3, r2
 80157ae:	b29b      	uxth	r3, r3
 80157b0:	4619      	mov	r1, r3
 80157b2:	68f8      	ldr	r0, [r7, #12]
 80157b4:	f7fe ff58 	bl	8014668 <mem_trim>
 80157b8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d106      	bne.n	80157ce <pbuf_realloc+0xca>
 80157c0:	4b0f      	ldr	r3, [pc, #60]	; (8015800 <pbuf_realloc+0xfc>)
 80157c2:	f240 12bd 	movw	r2, #445	; 0x1bd
 80157c6:	4912      	ldr	r1, [pc, #72]	; (8015810 <pbuf_realloc+0x10c>)
 80157c8:	480f      	ldr	r0, [pc, #60]	; (8015808 <pbuf_realloc+0x104>)
 80157ca:	f011 fb83 	bl	8026ed4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	897a      	ldrh	r2, [r7, #10]
 80157d2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	895a      	ldrh	r2, [r3, #10]
 80157d8:	68fb      	ldr	r3, [r7, #12]
 80157da:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80157dc:	68fb      	ldr	r3, [r7, #12]
 80157de:	681b      	ldr	r3, [r3, #0]
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d004      	beq.n	80157ee <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	4618      	mov	r0, r3
 80157ea:	f000 f943 	bl	8015a74 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	2200      	movs	r2, #0
 80157f2:	601a      	str	r2, [r3, #0]
 80157f4:	e000      	b.n	80157f8 <pbuf_realloc+0xf4>
    return;
 80157f6:	bf00      	nop

}
 80157f8:	3710      	adds	r7, #16
 80157fa:	46bd      	mov	sp, r7
 80157fc:	bd80      	pop	{r7, pc}
 80157fe:	bf00      	nop
 8015800:	0802bb18 	.word	0x0802bb18
 8015804:	0802bc30 	.word	0x0802bc30
 8015808:	0802bb78 	.word	0x0802bb78
 801580c:	0802bc48 	.word	0x0802bc48
 8015810:	0802bc60 	.word	0x0802bc60

08015814 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8015814:	b580      	push	{r7, lr}
 8015816:	b086      	sub	sp, #24
 8015818:	af00      	add	r7, sp, #0
 801581a:	60f8      	str	r0, [r7, #12]
 801581c:	60b9      	str	r1, [r7, #8]
 801581e:	4613      	mov	r3, r2
 8015820:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	2b00      	cmp	r3, #0
 8015826:	d106      	bne.n	8015836 <pbuf_add_header_impl+0x22>
 8015828:	4b2b      	ldr	r3, [pc, #172]	; (80158d8 <pbuf_add_header_impl+0xc4>)
 801582a:	f240 12df 	movw	r2, #479	; 0x1df
 801582e:	492b      	ldr	r1, [pc, #172]	; (80158dc <pbuf_add_header_impl+0xc8>)
 8015830:	482b      	ldr	r0, [pc, #172]	; (80158e0 <pbuf_add_header_impl+0xcc>)
 8015832:	f011 fb4f 	bl	8026ed4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	2b00      	cmp	r3, #0
 801583a:	d003      	beq.n	8015844 <pbuf_add_header_impl+0x30>
 801583c:	68bb      	ldr	r3, [r7, #8]
 801583e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015842:	d301      	bcc.n	8015848 <pbuf_add_header_impl+0x34>
    return 1;
 8015844:	2301      	movs	r3, #1
 8015846:	e043      	b.n	80158d0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8015848:	68bb      	ldr	r3, [r7, #8]
 801584a:	2b00      	cmp	r3, #0
 801584c:	d101      	bne.n	8015852 <pbuf_add_header_impl+0x3e>
    return 0;
 801584e:	2300      	movs	r3, #0
 8015850:	e03e      	b.n	80158d0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8015852:	68bb      	ldr	r3, [r7, #8]
 8015854:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	891a      	ldrh	r2, [r3, #8]
 801585a:	8a7b      	ldrh	r3, [r7, #18]
 801585c:	4413      	add	r3, r2
 801585e:	b29b      	uxth	r3, r3
 8015860:	8a7a      	ldrh	r2, [r7, #18]
 8015862:	429a      	cmp	r2, r3
 8015864:	d901      	bls.n	801586a <pbuf_add_header_impl+0x56>
    return 1;
 8015866:	2301      	movs	r3, #1
 8015868:	e032      	b.n	80158d0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	7b1b      	ldrb	r3, [r3, #12]
 801586e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8015870:	8a3b      	ldrh	r3, [r7, #16]
 8015872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015876:	2b00      	cmp	r3, #0
 8015878:	d00c      	beq.n	8015894 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	685a      	ldr	r2, [r3, #4]
 801587e:	68bb      	ldr	r3, [r7, #8]
 8015880:	425b      	negs	r3, r3
 8015882:	4413      	add	r3, r2
 8015884:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	3310      	adds	r3, #16
 801588a:	697a      	ldr	r2, [r7, #20]
 801588c:	429a      	cmp	r2, r3
 801588e:	d20d      	bcs.n	80158ac <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8015890:	2301      	movs	r3, #1
 8015892:	e01d      	b.n	80158d0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8015894:	79fb      	ldrb	r3, [r7, #7]
 8015896:	2b00      	cmp	r3, #0
 8015898:	d006      	beq.n	80158a8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	685a      	ldr	r2, [r3, #4]
 801589e:	68bb      	ldr	r3, [r7, #8]
 80158a0:	425b      	negs	r3, r3
 80158a2:	4413      	add	r3, r2
 80158a4:	617b      	str	r3, [r7, #20]
 80158a6:	e001      	b.n	80158ac <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80158a8:	2301      	movs	r3, #1
 80158aa:	e011      	b.n	80158d0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	697a      	ldr	r2, [r7, #20]
 80158b0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	895a      	ldrh	r2, [r3, #10]
 80158b6:	8a7b      	ldrh	r3, [r7, #18]
 80158b8:	4413      	add	r3, r2
 80158ba:	b29a      	uxth	r2, r3
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	891a      	ldrh	r2, [r3, #8]
 80158c4:	8a7b      	ldrh	r3, [r7, #18]
 80158c6:	4413      	add	r3, r2
 80158c8:	b29a      	uxth	r2, r3
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	811a      	strh	r2, [r3, #8]


  return 0;
 80158ce:	2300      	movs	r3, #0
}
 80158d0:	4618      	mov	r0, r3
 80158d2:	3718      	adds	r7, #24
 80158d4:	46bd      	mov	sp, r7
 80158d6:	bd80      	pop	{r7, pc}
 80158d8:	0802bb18 	.word	0x0802bb18
 80158dc:	0802bc7c 	.word	0x0802bc7c
 80158e0:	0802bb78 	.word	0x0802bb78

080158e4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80158e4:	b580      	push	{r7, lr}
 80158e6:	b082      	sub	sp, #8
 80158e8:	af00      	add	r7, sp, #0
 80158ea:	6078      	str	r0, [r7, #4]
 80158ec:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80158ee:	2200      	movs	r2, #0
 80158f0:	6839      	ldr	r1, [r7, #0]
 80158f2:	6878      	ldr	r0, [r7, #4]
 80158f4:	f7ff ff8e 	bl	8015814 <pbuf_add_header_impl>
 80158f8:	4603      	mov	r3, r0
}
 80158fa:	4618      	mov	r0, r3
 80158fc:	3708      	adds	r7, #8
 80158fe:	46bd      	mov	sp, r7
 8015900:	bd80      	pop	{r7, pc}
	...

08015904 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8015904:	b580      	push	{r7, lr}
 8015906:	b084      	sub	sp, #16
 8015908:	af00      	add	r7, sp, #0
 801590a:	6078      	str	r0, [r7, #4]
 801590c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d106      	bne.n	8015922 <pbuf_remove_header+0x1e>
 8015914:	4b20      	ldr	r3, [pc, #128]	; (8015998 <pbuf_remove_header+0x94>)
 8015916:	f240 224b 	movw	r2, #587	; 0x24b
 801591a:	4920      	ldr	r1, [pc, #128]	; (801599c <pbuf_remove_header+0x98>)
 801591c:	4820      	ldr	r0, [pc, #128]	; (80159a0 <pbuf_remove_header+0x9c>)
 801591e:	f011 fad9 	bl	8026ed4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	2b00      	cmp	r3, #0
 8015926:	d003      	beq.n	8015930 <pbuf_remove_header+0x2c>
 8015928:	683b      	ldr	r3, [r7, #0]
 801592a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801592e:	d301      	bcc.n	8015934 <pbuf_remove_header+0x30>
    return 1;
 8015930:	2301      	movs	r3, #1
 8015932:	e02c      	b.n	801598e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8015934:	683b      	ldr	r3, [r7, #0]
 8015936:	2b00      	cmp	r3, #0
 8015938:	d101      	bne.n	801593e <pbuf_remove_header+0x3a>
    return 0;
 801593a:	2300      	movs	r3, #0
 801593c:	e027      	b.n	801598e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801593e:	683b      	ldr	r3, [r7, #0]
 8015940:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	895b      	ldrh	r3, [r3, #10]
 8015946:	89fa      	ldrh	r2, [r7, #14]
 8015948:	429a      	cmp	r2, r3
 801594a:	d908      	bls.n	801595e <pbuf_remove_header+0x5a>
 801594c:	4b12      	ldr	r3, [pc, #72]	; (8015998 <pbuf_remove_header+0x94>)
 801594e:	f240 2255 	movw	r2, #597	; 0x255
 8015952:	4914      	ldr	r1, [pc, #80]	; (80159a4 <pbuf_remove_header+0xa0>)
 8015954:	4812      	ldr	r0, [pc, #72]	; (80159a0 <pbuf_remove_header+0x9c>)
 8015956:	f011 fabd 	bl	8026ed4 <iprintf>
 801595a:	2301      	movs	r3, #1
 801595c:	e017      	b.n	801598e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	685b      	ldr	r3, [r3, #4]
 8015962:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	685a      	ldr	r2, [r3, #4]
 8015968:	683b      	ldr	r3, [r7, #0]
 801596a:	441a      	add	r2, r3
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	895a      	ldrh	r2, [r3, #10]
 8015974:	89fb      	ldrh	r3, [r7, #14]
 8015976:	1ad3      	subs	r3, r2, r3
 8015978:	b29a      	uxth	r2, r3
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	891a      	ldrh	r2, [r3, #8]
 8015982:	89fb      	ldrh	r3, [r7, #14]
 8015984:	1ad3      	subs	r3, r2, r3
 8015986:	b29a      	uxth	r2, r3
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801598c:	2300      	movs	r3, #0
}
 801598e:	4618      	mov	r0, r3
 8015990:	3710      	adds	r7, #16
 8015992:	46bd      	mov	sp, r7
 8015994:	bd80      	pop	{r7, pc}
 8015996:	bf00      	nop
 8015998:	0802bb18 	.word	0x0802bb18
 801599c:	0802bc7c 	.word	0x0802bc7c
 80159a0:	0802bb78 	.word	0x0802bb78
 80159a4:	0802bc88 	.word	0x0802bc88

080159a8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80159a8:	b580      	push	{r7, lr}
 80159aa:	b082      	sub	sp, #8
 80159ac:	af00      	add	r7, sp, #0
 80159ae:	6078      	str	r0, [r7, #4]
 80159b0:	460b      	mov	r3, r1
 80159b2:	807b      	strh	r3, [r7, #2]
 80159b4:	4613      	mov	r3, r2
 80159b6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80159b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	da08      	bge.n	80159d2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80159c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80159c4:	425b      	negs	r3, r3
 80159c6:	4619      	mov	r1, r3
 80159c8:	6878      	ldr	r0, [r7, #4]
 80159ca:	f7ff ff9b 	bl	8015904 <pbuf_remove_header>
 80159ce:	4603      	mov	r3, r0
 80159d0:	e007      	b.n	80159e2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80159d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80159d6:	787a      	ldrb	r2, [r7, #1]
 80159d8:	4619      	mov	r1, r3
 80159da:	6878      	ldr	r0, [r7, #4]
 80159dc:	f7ff ff1a 	bl	8015814 <pbuf_add_header_impl>
 80159e0:	4603      	mov	r3, r0
  }
}
 80159e2:	4618      	mov	r0, r3
 80159e4:	3708      	adds	r7, #8
 80159e6:	46bd      	mov	sp, r7
 80159e8:	bd80      	pop	{r7, pc}

080159ea <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80159ea:	b580      	push	{r7, lr}
 80159ec:	b082      	sub	sp, #8
 80159ee:	af00      	add	r7, sp, #0
 80159f0:	6078      	str	r0, [r7, #4]
 80159f2:	460b      	mov	r3, r1
 80159f4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80159f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80159fa:	2201      	movs	r2, #1
 80159fc:	4619      	mov	r1, r3
 80159fe:	6878      	ldr	r0, [r7, #4]
 8015a00:	f7ff ffd2 	bl	80159a8 <pbuf_header_impl>
 8015a04:	4603      	mov	r3, r0
}
 8015a06:	4618      	mov	r0, r3
 8015a08:	3708      	adds	r7, #8
 8015a0a:	46bd      	mov	sp, r7
 8015a0c:	bd80      	pop	{r7, pc}

08015a0e <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 8015a0e:	b580      	push	{r7, lr}
 8015a10:	b086      	sub	sp, #24
 8015a12:	af00      	add	r7, sp, #0
 8015a14:	6078      	str	r0, [r7, #4]
 8015a16:	460b      	mov	r3, r1
 8015a18:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 8015a1e:	887b      	ldrh	r3, [r7, #2]
 8015a20:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 8015a22:	e01c      	b.n	8015a5e <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 8015a24:	697b      	ldr	r3, [r7, #20]
 8015a26:	895b      	ldrh	r3, [r3, #10]
 8015a28:	8a7a      	ldrh	r2, [r7, #18]
 8015a2a:	429a      	cmp	r2, r3
 8015a2c:	d310      	bcc.n	8015a50 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 8015a2e:	697b      	ldr	r3, [r7, #20]
 8015a30:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 8015a32:	697b      	ldr	r3, [r7, #20]
 8015a34:	895b      	ldrh	r3, [r3, #10]
 8015a36:	8a7a      	ldrh	r2, [r7, #18]
 8015a38:	1ad3      	subs	r3, r2, r3
 8015a3a:	827b      	strh	r3, [r7, #18]
      p = p->next;
 8015a3c:	697b      	ldr	r3, [r7, #20]
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	617b      	str	r3, [r7, #20]
      f->next = 0;
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	2200      	movs	r2, #0
 8015a46:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 8015a48:	68f8      	ldr	r0, [r7, #12]
 8015a4a:	f000 f813 	bl	8015a74 <pbuf_free>
 8015a4e:	e006      	b.n	8015a5e <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 8015a50:	8a7b      	ldrh	r3, [r7, #18]
 8015a52:	4619      	mov	r1, r3
 8015a54:	6978      	ldr	r0, [r7, #20]
 8015a56:	f7ff ff55 	bl	8015904 <pbuf_remove_header>
      free_left = 0;
 8015a5a:	2300      	movs	r3, #0
 8015a5c:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 8015a5e:	8a7b      	ldrh	r3, [r7, #18]
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d002      	beq.n	8015a6a <pbuf_free_header+0x5c>
 8015a64:	697b      	ldr	r3, [r7, #20]
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d1dc      	bne.n	8015a24 <pbuf_free_header+0x16>
    }
  }
  return p;
 8015a6a:	697b      	ldr	r3, [r7, #20]
}
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	3718      	adds	r7, #24
 8015a70:	46bd      	mov	sp, r7
 8015a72:	bd80      	pop	{r7, pc}

08015a74 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8015a74:	b580      	push	{r7, lr}
 8015a76:	b088      	sub	sp, #32
 8015a78:	af00      	add	r7, sp, #0
 8015a7a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d10b      	bne.n	8015a9a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d106      	bne.n	8015a96 <pbuf_free+0x22>
 8015a88:	4b3b      	ldr	r3, [pc, #236]	; (8015b78 <pbuf_free+0x104>)
 8015a8a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8015a8e:	493b      	ldr	r1, [pc, #236]	; (8015b7c <pbuf_free+0x108>)
 8015a90:	483b      	ldr	r0, [pc, #236]	; (8015b80 <pbuf_free+0x10c>)
 8015a92:	f011 fa1f 	bl	8026ed4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8015a96:	2300      	movs	r3, #0
 8015a98:	e069      	b.n	8015b6e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8015a9e:	e062      	b.n	8015b66 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8015aa0:	f00c f9e2 	bl	8021e68 <sys_arch_protect>
 8015aa4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	7b9b      	ldrb	r3, [r3, #14]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d106      	bne.n	8015abc <pbuf_free+0x48>
 8015aae:	4b32      	ldr	r3, [pc, #200]	; (8015b78 <pbuf_free+0x104>)
 8015ab0:	f240 22f1 	movw	r2, #753	; 0x2f1
 8015ab4:	4933      	ldr	r1, [pc, #204]	; (8015b84 <pbuf_free+0x110>)
 8015ab6:	4832      	ldr	r0, [pc, #200]	; (8015b80 <pbuf_free+0x10c>)
 8015ab8:	f011 fa0c 	bl	8026ed4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	7b9b      	ldrb	r3, [r3, #14]
 8015ac0:	3b01      	subs	r3, #1
 8015ac2:	b2da      	uxtb	r2, r3
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	739a      	strb	r2, [r3, #14]
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	7b9b      	ldrb	r3, [r3, #14]
 8015acc:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8015ace:	69b8      	ldr	r0, [r7, #24]
 8015ad0:	f00c f9d8 	bl	8021e84 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8015ad4:	7dfb      	ldrb	r3, [r7, #23]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d143      	bne.n	8015b62 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	681b      	ldr	r3, [r3, #0]
 8015ade:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	7b1b      	ldrb	r3, [r3, #12]
 8015ae4:	f003 030f 	and.w	r3, r3, #15
 8015ae8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	7b5b      	ldrb	r3, [r3, #13]
 8015aee:	f003 0302 	and.w	r3, r3, #2
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d011      	beq.n	8015b1a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8015afa:	68bb      	ldr	r3, [r7, #8]
 8015afc:	691b      	ldr	r3, [r3, #16]
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d106      	bne.n	8015b10 <pbuf_free+0x9c>
 8015b02:	4b1d      	ldr	r3, [pc, #116]	; (8015b78 <pbuf_free+0x104>)
 8015b04:	f240 22ff 	movw	r2, #767	; 0x2ff
 8015b08:	491f      	ldr	r1, [pc, #124]	; (8015b88 <pbuf_free+0x114>)
 8015b0a:	481d      	ldr	r0, [pc, #116]	; (8015b80 <pbuf_free+0x10c>)
 8015b0c:	f011 f9e2 	bl	8026ed4 <iprintf>
        pc->custom_free_function(p);
 8015b10:	68bb      	ldr	r3, [r7, #8]
 8015b12:	691b      	ldr	r3, [r3, #16]
 8015b14:	6878      	ldr	r0, [r7, #4]
 8015b16:	4798      	blx	r3
 8015b18:	e01d      	b.n	8015b56 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8015b1a:	7bfb      	ldrb	r3, [r7, #15]
 8015b1c:	2b02      	cmp	r3, #2
 8015b1e:	d104      	bne.n	8015b2a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8015b20:	6879      	ldr	r1, [r7, #4]
 8015b22:	200d      	movs	r0, #13
 8015b24:	f7ff f8c4 	bl	8014cb0 <memp_free>
 8015b28:	e015      	b.n	8015b56 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8015b2a:	7bfb      	ldrb	r3, [r7, #15]
 8015b2c:	2b01      	cmp	r3, #1
 8015b2e:	d104      	bne.n	8015b3a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8015b30:	6879      	ldr	r1, [r7, #4]
 8015b32:	200c      	movs	r0, #12
 8015b34:	f7ff f8bc 	bl	8014cb0 <memp_free>
 8015b38:	e00d      	b.n	8015b56 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8015b3a:	7bfb      	ldrb	r3, [r7, #15]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d103      	bne.n	8015b48 <pbuf_free+0xd4>
          mem_free(p);
 8015b40:	6878      	ldr	r0, [r7, #4]
 8015b42:	f7fe fd01 	bl	8014548 <mem_free>
 8015b46:	e006      	b.n	8015b56 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8015b48:	4b0b      	ldr	r3, [pc, #44]	; (8015b78 <pbuf_free+0x104>)
 8015b4a:	f240 320f 	movw	r2, #783	; 0x30f
 8015b4e:	490f      	ldr	r1, [pc, #60]	; (8015b8c <pbuf_free+0x118>)
 8015b50:	480b      	ldr	r0, [pc, #44]	; (8015b80 <pbuf_free+0x10c>)
 8015b52:	f011 f9bf 	bl	8026ed4 <iprintf>
        }
      }
      count++;
 8015b56:	7ffb      	ldrb	r3, [r7, #31]
 8015b58:	3301      	adds	r3, #1
 8015b5a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8015b5c:	693b      	ldr	r3, [r7, #16]
 8015b5e:	607b      	str	r3, [r7, #4]
 8015b60:	e001      	b.n	8015b66 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8015b62:	2300      	movs	r3, #0
 8015b64:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d199      	bne.n	8015aa0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8015b6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8015b6e:	4618      	mov	r0, r3
 8015b70:	3720      	adds	r7, #32
 8015b72:	46bd      	mov	sp, r7
 8015b74:	bd80      	pop	{r7, pc}
 8015b76:	bf00      	nop
 8015b78:	0802bb18 	.word	0x0802bb18
 8015b7c:	0802bc7c 	.word	0x0802bc7c
 8015b80:	0802bb78 	.word	0x0802bb78
 8015b84:	0802bca8 	.word	0x0802bca8
 8015b88:	0802bcc0 	.word	0x0802bcc0
 8015b8c:	0802bce4 	.word	0x0802bce4

08015b90 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8015b90:	b480      	push	{r7}
 8015b92:	b085      	sub	sp, #20
 8015b94:	af00      	add	r7, sp, #0
 8015b96:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8015b98:	2300      	movs	r3, #0
 8015b9a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8015b9c:	e005      	b.n	8015baa <pbuf_clen+0x1a>
    ++len;
 8015b9e:	89fb      	ldrh	r3, [r7, #14]
 8015ba0:	3301      	adds	r3, #1
 8015ba2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	681b      	ldr	r3, [r3, #0]
 8015ba8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d1f6      	bne.n	8015b9e <pbuf_clen+0xe>
  }
  return len;
 8015bb0:	89fb      	ldrh	r3, [r7, #14]
}
 8015bb2:	4618      	mov	r0, r3
 8015bb4:	3714      	adds	r7, #20
 8015bb6:	46bd      	mov	sp, r7
 8015bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bbc:	4770      	bx	lr
	...

08015bc0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8015bc0:	b580      	push	{r7, lr}
 8015bc2:	b084      	sub	sp, #16
 8015bc4:	af00      	add	r7, sp, #0
 8015bc6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d016      	beq.n	8015bfc <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8015bce:	f00c f94b 	bl	8021e68 <sys_arch_protect>
 8015bd2:	60f8      	str	r0, [r7, #12]
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	7b9b      	ldrb	r3, [r3, #14]
 8015bd8:	3301      	adds	r3, #1
 8015bda:	b2da      	uxtb	r2, r3
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	739a      	strb	r2, [r3, #14]
 8015be0:	68f8      	ldr	r0, [r7, #12]
 8015be2:	f00c f94f 	bl	8021e84 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	7b9b      	ldrb	r3, [r3, #14]
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d106      	bne.n	8015bfc <pbuf_ref+0x3c>
 8015bee:	4b05      	ldr	r3, [pc, #20]	; (8015c04 <pbuf_ref+0x44>)
 8015bf0:	f240 3242 	movw	r2, #834	; 0x342
 8015bf4:	4904      	ldr	r1, [pc, #16]	; (8015c08 <pbuf_ref+0x48>)
 8015bf6:	4805      	ldr	r0, [pc, #20]	; (8015c0c <pbuf_ref+0x4c>)
 8015bf8:	f011 f96c 	bl	8026ed4 <iprintf>
  }
}
 8015bfc:	bf00      	nop
 8015bfe:	3710      	adds	r7, #16
 8015c00:	46bd      	mov	sp, r7
 8015c02:	bd80      	pop	{r7, pc}
 8015c04:	0802bb18 	.word	0x0802bb18
 8015c08:	0802bcf8 	.word	0x0802bcf8
 8015c0c:	0802bb78 	.word	0x0802bb78

08015c10 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8015c10:	b580      	push	{r7, lr}
 8015c12:	b084      	sub	sp, #16
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	6078      	str	r0, [r7, #4]
 8015c18:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d002      	beq.n	8015c26 <pbuf_cat+0x16>
 8015c20:	683b      	ldr	r3, [r7, #0]
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d107      	bne.n	8015c36 <pbuf_cat+0x26>
 8015c26:	4b20      	ldr	r3, [pc, #128]	; (8015ca8 <pbuf_cat+0x98>)
 8015c28:	f240 3259 	movw	r2, #857	; 0x359
 8015c2c:	491f      	ldr	r1, [pc, #124]	; (8015cac <pbuf_cat+0x9c>)
 8015c2e:	4820      	ldr	r0, [pc, #128]	; (8015cb0 <pbuf_cat+0xa0>)
 8015c30:	f011 f950 	bl	8026ed4 <iprintf>
 8015c34:	e034      	b.n	8015ca0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	60fb      	str	r3, [r7, #12]
 8015c3a:	e00a      	b.n	8015c52 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	891a      	ldrh	r2, [r3, #8]
 8015c40:	683b      	ldr	r3, [r7, #0]
 8015c42:	891b      	ldrh	r3, [r3, #8]
 8015c44:	4413      	add	r3, r2
 8015c46:	b29a      	uxth	r2, r3
 8015c48:	68fb      	ldr	r3, [r7, #12]
 8015c4a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8015c4c:	68fb      	ldr	r3, [r7, #12]
 8015c4e:	681b      	ldr	r3, [r3, #0]
 8015c50:	60fb      	str	r3, [r7, #12]
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d1f0      	bne.n	8015c3c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	891a      	ldrh	r2, [r3, #8]
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	895b      	ldrh	r3, [r3, #10]
 8015c62:	429a      	cmp	r2, r3
 8015c64:	d006      	beq.n	8015c74 <pbuf_cat+0x64>
 8015c66:	4b10      	ldr	r3, [pc, #64]	; (8015ca8 <pbuf_cat+0x98>)
 8015c68:	f240 3262 	movw	r2, #866	; 0x362
 8015c6c:	4911      	ldr	r1, [pc, #68]	; (8015cb4 <pbuf_cat+0xa4>)
 8015c6e:	4810      	ldr	r0, [pc, #64]	; (8015cb0 <pbuf_cat+0xa0>)
 8015c70:	f011 f930 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	681b      	ldr	r3, [r3, #0]
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d006      	beq.n	8015c8a <pbuf_cat+0x7a>
 8015c7c:	4b0a      	ldr	r3, [pc, #40]	; (8015ca8 <pbuf_cat+0x98>)
 8015c7e:	f240 3263 	movw	r2, #867	; 0x363
 8015c82:	490d      	ldr	r1, [pc, #52]	; (8015cb8 <pbuf_cat+0xa8>)
 8015c84:	480a      	ldr	r0, [pc, #40]	; (8015cb0 <pbuf_cat+0xa0>)
 8015c86:	f011 f925 	bl	8026ed4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8015c8a:	68fb      	ldr	r3, [r7, #12]
 8015c8c:	891a      	ldrh	r2, [r3, #8]
 8015c8e:	683b      	ldr	r3, [r7, #0]
 8015c90:	891b      	ldrh	r3, [r3, #8]
 8015c92:	4413      	add	r3, r2
 8015c94:	b29a      	uxth	r2, r3
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	683a      	ldr	r2, [r7, #0]
 8015c9e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8015ca0:	3710      	adds	r7, #16
 8015ca2:	46bd      	mov	sp, r7
 8015ca4:	bd80      	pop	{r7, pc}
 8015ca6:	bf00      	nop
 8015ca8:	0802bb18 	.word	0x0802bb18
 8015cac:	0802bd0c 	.word	0x0802bd0c
 8015cb0:	0802bb78 	.word	0x0802bb78
 8015cb4:	0802bd44 	.word	0x0802bd44
 8015cb8:	0802bd74 	.word	0x0802bd74

08015cbc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8015cbc:	b580      	push	{r7, lr}
 8015cbe:	b082      	sub	sp, #8
 8015cc0:	af00      	add	r7, sp, #0
 8015cc2:	6078      	str	r0, [r7, #4]
 8015cc4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8015cc6:	6839      	ldr	r1, [r7, #0]
 8015cc8:	6878      	ldr	r0, [r7, #4]
 8015cca:	f7ff ffa1 	bl	8015c10 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8015cce:	6838      	ldr	r0, [r7, #0]
 8015cd0:	f7ff ff76 	bl	8015bc0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8015cd4:	bf00      	nop
 8015cd6:	3708      	adds	r7, #8
 8015cd8:	46bd      	mov	sp, r7
 8015cda:	bd80      	pop	{r7, pc}

08015cdc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8015cdc:	b580      	push	{r7, lr}
 8015cde:	b086      	sub	sp, #24
 8015ce0:	af00      	add	r7, sp, #0
 8015ce2:	6078      	str	r0, [r7, #4]
 8015ce4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8015ce6:	2300      	movs	r3, #0
 8015ce8:	617b      	str	r3, [r7, #20]
 8015cea:	2300      	movs	r3, #0
 8015cec:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d008      	beq.n	8015d06 <pbuf_copy+0x2a>
 8015cf4:	683b      	ldr	r3, [r7, #0]
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d005      	beq.n	8015d06 <pbuf_copy+0x2a>
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	891a      	ldrh	r2, [r3, #8]
 8015cfe:	683b      	ldr	r3, [r7, #0]
 8015d00:	891b      	ldrh	r3, [r3, #8]
 8015d02:	429a      	cmp	r2, r3
 8015d04:	d209      	bcs.n	8015d1a <pbuf_copy+0x3e>
 8015d06:	4b57      	ldr	r3, [pc, #348]	; (8015e64 <pbuf_copy+0x188>)
 8015d08:	f240 32c9 	movw	r2, #969	; 0x3c9
 8015d0c:	4956      	ldr	r1, [pc, #344]	; (8015e68 <pbuf_copy+0x18c>)
 8015d0e:	4857      	ldr	r0, [pc, #348]	; (8015e6c <pbuf_copy+0x190>)
 8015d10:	f011 f8e0 	bl	8026ed4 <iprintf>
 8015d14:	f06f 030f 	mvn.w	r3, #15
 8015d18:	e09f      	b.n	8015e5a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	895b      	ldrh	r3, [r3, #10]
 8015d1e:	461a      	mov	r2, r3
 8015d20:	697b      	ldr	r3, [r7, #20]
 8015d22:	1ad2      	subs	r2, r2, r3
 8015d24:	683b      	ldr	r3, [r7, #0]
 8015d26:	895b      	ldrh	r3, [r3, #10]
 8015d28:	4619      	mov	r1, r3
 8015d2a:	693b      	ldr	r3, [r7, #16]
 8015d2c:	1acb      	subs	r3, r1, r3
 8015d2e:	429a      	cmp	r2, r3
 8015d30:	d306      	bcc.n	8015d40 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8015d32:	683b      	ldr	r3, [r7, #0]
 8015d34:	895b      	ldrh	r3, [r3, #10]
 8015d36:	461a      	mov	r2, r3
 8015d38:	693b      	ldr	r3, [r7, #16]
 8015d3a:	1ad3      	subs	r3, r2, r3
 8015d3c:	60fb      	str	r3, [r7, #12]
 8015d3e:	e005      	b.n	8015d4c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	895b      	ldrh	r3, [r3, #10]
 8015d44:	461a      	mov	r2, r3
 8015d46:	697b      	ldr	r3, [r7, #20]
 8015d48:	1ad3      	subs	r3, r2, r3
 8015d4a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	685a      	ldr	r2, [r3, #4]
 8015d50:	697b      	ldr	r3, [r7, #20]
 8015d52:	18d0      	adds	r0, r2, r3
 8015d54:	683b      	ldr	r3, [r7, #0]
 8015d56:	685a      	ldr	r2, [r3, #4]
 8015d58:	693b      	ldr	r3, [r7, #16]
 8015d5a:	4413      	add	r3, r2
 8015d5c:	68fa      	ldr	r2, [r7, #12]
 8015d5e:	4619      	mov	r1, r3
 8015d60:	f010 fa32 	bl	80261c8 <memcpy>
    offset_to += len;
 8015d64:	697a      	ldr	r2, [r7, #20]
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	4413      	add	r3, r2
 8015d6a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8015d6c:	693a      	ldr	r2, [r7, #16]
 8015d6e:	68fb      	ldr	r3, [r7, #12]
 8015d70:	4413      	add	r3, r2
 8015d72:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	895b      	ldrh	r3, [r3, #10]
 8015d78:	461a      	mov	r2, r3
 8015d7a:	697b      	ldr	r3, [r7, #20]
 8015d7c:	4293      	cmp	r3, r2
 8015d7e:	d906      	bls.n	8015d8e <pbuf_copy+0xb2>
 8015d80:	4b38      	ldr	r3, [pc, #224]	; (8015e64 <pbuf_copy+0x188>)
 8015d82:	f240 32d9 	movw	r2, #985	; 0x3d9
 8015d86:	493a      	ldr	r1, [pc, #232]	; (8015e70 <pbuf_copy+0x194>)
 8015d88:	4838      	ldr	r0, [pc, #224]	; (8015e6c <pbuf_copy+0x190>)
 8015d8a:	f011 f8a3 	bl	8026ed4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8015d8e:	683b      	ldr	r3, [r7, #0]
 8015d90:	895b      	ldrh	r3, [r3, #10]
 8015d92:	461a      	mov	r2, r3
 8015d94:	693b      	ldr	r3, [r7, #16]
 8015d96:	4293      	cmp	r3, r2
 8015d98:	d906      	bls.n	8015da8 <pbuf_copy+0xcc>
 8015d9a:	4b32      	ldr	r3, [pc, #200]	; (8015e64 <pbuf_copy+0x188>)
 8015d9c:	f240 32da 	movw	r2, #986	; 0x3da
 8015da0:	4934      	ldr	r1, [pc, #208]	; (8015e74 <pbuf_copy+0x198>)
 8015da2:	4832      	ldr	r0, [pc, #200]	; (8015e6c <pbuf_copy+0x190>)
 8015da4:	f011 f896 	bl	8026ed4 <iprintf>
    if (offset_from >= p_from->len) {
 8015da8:	683b      	ldr	r3, [r7, #0]
 8015daa:	895b      	ldrh	r3, [r3, #10]
 8015dac:	461a      	mov	r2, r3
 8015dae:	693b      	ldr	r3, [r7, #16]
 8015db0:	4293      	cmp	r3, r2
 8015db2:	d304      	bcc.n	8015dbe <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8015db4:	2300      	movs	r3, #0
 8015db6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8015db8:	683b      	ldr	r3, [r7, #0]
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	895b      	ldrh	r3, [r3, #10]
 8015dc2:	461a      	mov	r2, r3
 8015dc4:	697b      	ldr	r3, [r7, #20]
 8015dc6:	4293      	cmp	r3, r2
 8015dc8:	d114      	bne.n	8015df4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8015dca:	2300      	movs	r3, #0
 8015dcc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d10c      	bne.n	8015df4 <pbuf_copy+0x118>
 8015dda:	683b      	ldr	r3, [r7, #0]
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d009      	beq.n	8015df4 <pbuf_copy+0x118>
 8015de0:	4b20      	ldr	r3, [pc, #128]	; (8015e64 <pbuf_copy+0x188>)
 8015de2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8015de6:	4924      	ldr	r1, [pc, #144]	; (8015e78 <pbuf_copy+0x19c>)
 8015de8:	4820      	ldr	r0, [pc, #128]	; (8015e6c <pbuf_copy+0x190>)
 8015dea:	f011 f873 	bl	8026ed4 <iprintf>
 8015dee:	f06f 030f 	mvn.w	r3, #15
 8015df2:	e032      	b.n	8015e5a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8015df4:	683b      	ldr	r3, [r7, #0]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d013      	beq.n	8015e22 <pbuf_copy+0x146>
 8015dfa:	683b      	ldr	r3, [r7, #0]
 8015dfc:	895a      	ldrh	r2, [r3, #10]
 8015dfe:	683b      	ldr	r3, [r7, #0]
 8015e00:	891b      	ldrh	r3, [r3, #8]
 8015e02:	429a      	cmp	r2, r3
 8015e04:	d10d      	bne.n	8015e22 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8015e06:	683b      	ldr	r3, [r7, #0]
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d009      	beq.n	8015e22 <pbuf_copy+0x146>
 8015e0e:	4b15      	ldr	r3, [pc, #84]	; (8015e64 <pbuf_copy+0x188>)
 8015e10:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8015e14:	4919      	ldr	r1, [pc, #100]	; (8015e7c <pbuf_copy+0x1a0>)
 8015e16:	4815      	ldr	r0, [pc, #84]	; (8015e6c <pbuf_copy+0x190>)
 8015e18:	f011 f85c 	bl	8026ed4 <iprintf>
 8015e1c:	f06f 0305 	mvn.w	r3, #5
 8015e20:	e01b      	b.n	8015e5a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d013      	beq.n	8015e50 <pbuf_copy+0x174>
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	895a      	ldrh	r2, [r3, #10]
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	891b      	ldrh	r3, [r3, #8]
 8015e30:	429a      	cmp	r2, r3
 8015e32:	d10d      	bne.n	8015e50 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d009      	beq.n	8015e50 <pbuf_copy+0x174>
 8015e3c:	4b09      	ldr	r3, [pc, #36]	; (8015e64 <pbuf_copy+0x188>)
 8015e3e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8015e42:	490e      	ldr	r1, [pc, #56]	; (8015e7c <pbuf_copy+0x1a0>)
 8015e44:	4809      	ldr	r0, [pc, #36]	; (8015e6c <pbuf_copy+0x190>)
 8015e46:	f011 f845 	bl	8026ed4 <iprintf>
 8015e4a:	f06f 0305 	mvn.w	r3, #5
 8015e4e:	e004      	b.n	8015e5a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8015e50:	683b      	ldr	r3, [r7, #0]
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	f47f af61 	bne.w	8015d1a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8015e58:	2300      	movs	r3, #0
}
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	3718      	adds	r7, #24
 8015e5e:	46bd      	mov	sp, r7
 8015e60:	bd80      	pop	{r7, pc}
 8015e62:	bf00      	nop
 8015e64:	0802bb18 	.word	0x0802bb18
 8015e68:	0802bdc0 	.word	0x0802bdc0
 8015e6c:	0802bb78 	.word	0x0802bb78
 8015e70:	0802bdf0 	.word	0x0802bdf0
 8015e74:	0802be08 	.word	0x0802be08
 8015e78:	0802be24 	.word	0x0802be24
 8015e7c:	0802be34 	.word	0x0802be34

08015e80 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8015e80:	b580      	push	{r7, lr}
 8015e82:	b088      	sub	sp, #32
 8015e84:	af00      	add	r7, sp, #0
 8015e86:	60f8      	str	r0, [r7, #12]
 8015e88:	60b9      	str	r1, [r7, #8]
 8015e8a:	4611      	mov	r1, r2
 8015e8c:	461a      	mov	r2, r3
 8015e8e:	460b      	mov	r3, r1
 8015e90:	80fb      	strh	r3, [r7, #6]
 8015e92:	4613      	mov	r3, r2
 8015e94:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8015e96:	2300      	movs	r3, #0
 8015e98:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d108      	bne.n	8015eb6 <pbuf_copy_partial+0x36>
 8015ea4:	4b2b      	ldr	r3, [pc, #172]	; (8015f54 <pbuf_copy_partial+0xd4>)
 8015ea6:	f240 420a 	movw	r2, #1034	; 0x40a
 8015eaa:	492b      	ldr	r1, [pc, #172]	; (8015f58 <pbuf_copy_partial+0xd8>)
 8015eac:	482b      	ldr	r0, [pc, #172]	; (8015f5c <pbuf_copy_partial+0xdc>)
 8015eae:	f011 f811 	bl	8026ed4 <iprintf>
 8015eb2:	2300      	movs	r3, #0
 8015eb4:	e04a      	b.n	8015f4c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8015eb6:	68bb      	ldr	r3, [r7, #8]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d108      	bne.n	8015ece <pbuf_copy_partial+0x4e>
 8015ebc:	4b25      	ldr	r3, [pc, #148]	; (8015f54 <pbuf_copy_partial+0xd4>)
 8015ebe:	f240 420b 	movw	r2, #1035	; 0x40b
 8015ec2:	4927      	ldr	r1, [pc, #156]	; (8015f60 <pbuf_copy_partial+0xe0>)
 8015ec4:	4825      	ldr	r0, [pc, #148]	; (8015f5c <pbuf_copy_partial+0xdc>)
 8015ec6:	f011 f805 	bl	8026ed4 <iprintf>
 8015eca:	2300      	movs	r3, #0
 8015ecc:	e03e      	b.n	8015f4c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8015ece:	68fb      	ldr	r3, [r7, #12]
 8015ed0:	61fb      	str	r3, [r7, #28]
 8015ed2:	e034      	b.n	8015f3e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8015ed4:	88bb      	ldrh	r3, [r7, #4]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d00a      	beq.n	8015ef0 <pbuf_copy_partial+0x70>
 8015eda:	69fb      	ldr	r3, [r7, #28]
 8015edc:	895b      	ldrh	r3, [r3, #10]
 8015ede:	88ba      	ldrh	r2, [r7, #4]
 8015ee0:	429a      	cmp	r2, r3
 8015ee2:	d305      	bcc.n	8015ef0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8015ee4:	69fb      	ldr	r3, [r7, #28]
 8015ee6:	895b      	ldrh	r3, [r3, #10]
 8015ee8:	88ba      	ldrh	r2, [r7, #4]
 8015eea:	1ad3      	subs	r3, r2, r3
 8015eec:	80bb      	strh	r3, [r7, #4]
 8015eee:	e023      	b.n	8015f38 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8015ef0:	69fb      	ldr	r3, [r7, #28]
 8015ef2:	895a      	ldrh	r2, [r3, #10]
 8015ef4:	88bb      	ldrh	r3, [r7, #4]
 8015ef6:	1ad3      	subs	r3, r2, r3
 8015ef8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8015efa:	8b3a      	ldrh	r2, [r7, #24]
 8015efc:	88fb      	ldrh	r3, [r7, #6]
 8015efe:	429a      	cmp	r2, r3
 8015f00:	d901      	bls.n	8015f06 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8015f02:	88fb      	ldrh	r3, [r7, #6]
 8015f04:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8015f06:	8b7b      	ldrh	r3, [r7, #26]
 8015f08:	68ba      	ldr	r2, [r7, #8]
 8015f0a:	18d0      	adds	r0, r2, r3
 8015f0c:	69fb      	ldr	r3, [r7, #28]
 8015f0e:	685a      	ldr	r2, [r3, #4]
 8015f10:	88bb      	ldrh	r3, [r7, #4]
 8015f12:	4413      	add	r3, r2
 8015f14:	8b3a      	ldrh	r2, [r7, #24]
 8015f16:	4619      	mov	r1, r3
 8015f18:	f010 f956 	bl	80261c8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8015f1c:	8afa      	ldrh	r2, [r7, #22]
 8015f1e:	8b3b      	ldrh	r3, [r7, #24]
 8015f20:	4413      	add	r3, r2
 8015f22:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8015f24:	8b7a      	ldrh	r2, [r7, #26]
 8015f26:	8b3b      	ldrh	r3, [r7, #24]
 8015f28:	4413      	add	r3, r2
 8015f2a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8015f2c:	88fa      	ldrh	r2, [r7, #6]
 8015f2e:	8b3b      	ldrh	r3, [r7, #24]
 8015f30:	1ad3      	subs	r3, r2, r3
 8015f32:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8015f34:	2300      	movs	r3, #0
 8015f36:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8015f38:	69fb      	ldr	r3, [r7, #28]
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	61fb      	str	r3, [r7, #28]
 8015f3e:	88fb      	ldrh	r3, [r7, #6]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d002      	beq.n	8015f4a <pbuf_copy_partial+0xca>
 8015f44:	69fb      	ldr	r3, [r7, #28]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d1c4      	bne.n	8015ed4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8015f4a:	8afb      	ldrh	r3, [r7, #22]
}
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	3720      	adds	r7, #32
 8015f50:	46bd      	mov	sp, r7
 8015f52:	bd80      	pop	{r7, pc}
 8015f54:	0802bb18 	.word	0x0802bb18
 8015f58:	0802be60 	.word	0x0802be60
 8015f5c:	0802bb78 	.word	0x0802bb78
 8015f60:	0802be80 	.word	0x0802be80

08015f64 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8015f64:	b480      	push	{r7}
 8015f66:	b087      	sub	sp, #28
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	60f8      	str	r0, [r7, #12]
 8015f6c:	460b      	mov	r3, r1
 8015f6e:	607a      	str	r2, [r7, #4]
 8015f70:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8015f72:	897b      	ldrh	r3, [r7, #10]
 8015f74:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8015f76:	68fb      	ldr	r3, [r7, #12]
 8015f78:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8015f7a:	e007      	b.n	8015f8c <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8015f7c:	693b      	ldr	r3, [r7, #16]
 8015f7e:	895b      	ldrh	r3, [r3, #10]
 8015f80:	8afa      	ldrh	r2, [r7, #22]
 8015f82:	1ad3      	subs	r3, r2, r3
 8015f84:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8015f86:	693b      	ldr	r3, [r7, #16]
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8015f8c:	693b      	ldr	r3, [r7, #16]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d004      	beq.n	8015f9c <pbuf_skip_const+0x38>
 8015f92:	693b      	ldr	r3, [r7, #16]
 8015f94:	895b      	ldrh	r3, [r3, #10]
 8015f96:	8afa      	ldrh	r2, [r7, #22]
 8015f98:	429a      	cmp	r2, r3
 8015f9a:	d2ef      	bcs.n	8015f7c <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d002      	beq.n	8015fa8 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	8afa      	ldrh	r2, [r7, #22]
 8015fa6:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8015fa8:	693b      	ldr	r3, [r7, #16]
}
 8015faa:	4618      	mov	r0, r3
 8015fac:	371c      	adds	r7, #28
 8015fae:	46bd      	mov	sp, r7
 8015fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fb4:	4770      	bx	lr

08015fb6 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8015fb6:	b580      	push	{r7, lr}
 8015fb8:	b086      	sub	sp, #24
 8015fba:	af00      	add	r7, sp, #0
 8015fbc:	60f8      	str	r0, [r7, #12]
 8015fbe:	460b      	mov	r3, r1
 8015fc0:	607a      	str	r2, [r7, #4]
 8015fc2:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8015fc4:	897b      	ldrh	r3, [r7, #10]
 8015fc6:	687a      	ldr	r2, [r7, #4]
 8015fc8:	4619      	mov	r1, r3
 8015fca:	68f8      	ldr	r0, [r7, #12]
 8015fcc:	f7ff ffca 	bl	8015f64 <pbuf_skip_const>
 8015fd0:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 8015fd2:	697b      	ldr	r3, [r7, #20]
}
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	3718      	adds	r7, #24
 8015fd8:	46bd      	mov	sp, r7
 8015fda:	bd80      	pop	{r7, pc}

08015fdc <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8015fdc:	b580      	push	{r7, lr}
 8015fde:	b088      	sub	sp, #32
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	60f8      	str	r0, [r7, #12]
 8015fe4:	60b9      	str	r1, [r7, #8]
 8015fe6:	4613      	mov	r3, r2
 8015fe8:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8015fea:	88fb      	ldrh	r3, [r7, #6]
 8015fec:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8015fee:	2300      	movs	r3, #0
 8015ff0:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8015ff2:	68fb      	ldr	r3, [r7, #12]
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d109      	bne.n	801600c <pbuf_take+0x30>
 8015ff8:	4b3a      	ldr	r3, [pc, #232]	; (80160e4 <pbuf_take+0x108>)
 8015ffa:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8015ffe:	493a      	ldr	r1, [pc, #232]	; (80160e8 <pbuf_take+0x10c>)
 8016000:	483a      	ldr	r0, [pc, #232]	; (80160ec <pbuf_take+0x110>)
 8016002:	f010 ff67 	bl	8026ed4 <iprintf>
 8016006:	f06f 030f 	mvn.w	r3, #15
 801600a:	e067      	b.n	80160dc <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801600c:	68bb      	ldr	r3, [r7, #8]
 801600e:	2b00      	cmp	r3, #0
 8016010:	d109      	bne.n	8016026 <pbuf_take+0x4a>
 8016012:	4b34      	ldr	r3, [pc, #208]	; (80160e4 <pbuf_take+0x108>)
 8016014:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8016018:	4935      	ldr	r1, [pc, #212]	; (80160f0 <pbuf_take+0x114>)
 801601a:	4834      	ldr	r0, [pc, #208]	; (80160ec <pbuf_take+0x110>)
 801601c:	f010 ff5a 	bl	8026ed4 <iprintf>
 8016020:	f06f 030f 	mvn.w	r3, #15
 8016024:	e05a      	b.n	80160dc <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	891b      	ldrh	r3, [r3, #8]
 801602a:	88fa      	ldrh	r2, [r7, #6]
 801602c:	429a      	cmp	r2, r3
 801602e:	d909      	bls.n	8016044 <pbuf_take+0x68>
 8016030:	4b2c      	ldr	r3, [pc, #176]	; (80160e4 <pbuf_take+0x108>)
 8016032:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8016036:	492f      	ldr	r1, [pc, #188]	; (80160f4 <pbuf_take+0x118>)
 8016038:	482c      	ldr	r0, [pc, #176]	; (80160ec <pbuf_take+0x110>)
 801603a:	f010 ff4b 	bl	8026ed4 <iprintf>
 801603e:	f04f 33ff 	mov.w	r3, #4294967295
 8016042:	e04b      	b.n	80160dc <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	2b00      	cmp	r3, #0
 8016048:	d007      	beq.n	801605a <pbuf_take+0x7e>
 801604a:	68bb      	ldr	r3, [r7, #8]
 801604c:	2b00      	cmp	r3, #0
 801604e:	d004      	beq.n	801605a <pbuf_take+0x7e>
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	891b      	ldrh	r3, [r3, #8]
 8016054:	88fa      	ldrh	r2, [r7, #6]
 8016056:	429a      	cmp	r2, r3
 8016058:	d902      	bls.n	8016060 <pbuf_take+0x84>
    return ERR_ARG;
 801605a:	f06f 030f 	mvn.w	r3, #15
 801605e:	e03d      	b.n	80160dc <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	61fb      	str	r3, [r7, #28]
 8016064:	e028      	b.n	80160b8 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8016066:	69fb      	ldr	r3, [r7, #28]
 8016068:	2b00      	cmp	r3, #0
 801606a:	d106      	bne.n	801607a <pbuf_take+0x9e>
 801606c:	4b1d      	ldr	r3, [pc, #116]	; (80160e4 <pbuf_take+0x108>)
 801606e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8016072:	4921      	ldr	r1, [pc, #132]	; (80160f8 <pbuf_take+0x11c>)
 8016074:	481d      	ldr	r0, [pc, #116]	; (80160ec <pbuf_take+0x110>)
 8016076:	f010 ff2d 	bl	8026ed4 <iprintf>
    buf_copy_len = total_copy_len;
 801607a:	697b      	ldr	r3, [r7, #20]
 801607c:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 801607e:	69fb      	ldr	r3, [r7, #28]
 8016080:	895b      	ldrh	r3, [r3, #10]
 8016082:	461a      	mov	r2, r3
 8016084:	69bb      	ldr	r3, [r7, #24]
 8016086:	4293      	cmp	r3, r2
 8016088:	d902      	bls.n	8016090 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 801608a:	69fb      	ldr	r3, [r7, #28]
 801608c:	895b      	ldrh	r3, [r3, #10]
 801608e:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8016090:	69fb      	ldr	r3, [r7, #28]
 8016092:	6858      	ldr	r0, [r3, #4]
 8016094:	68ba      	ldr	r2, [r7, #8]
 8016096:	693b      	ldr	r3, [r7, #16]
 8016098:	4413      	add	r3, r2
 801609a:	69ba      	ldr	r2, [r7, #24]
 801609c:	4619      	mov	r1, r3
 801609e:	f010 f893 	bl	80261c8 <memcpy>
    total_copy_len -= buf_copy_len;
 80160a2:	697a      	ldr	r2, [r7, #20]
 80160a4:	69bb      	ldr	r3, [r7, #24]
 80160a6:	1ad3      	subs	r3, r2, r3
 80160a8:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 80160aa:	693a      	ldr	r2, [r7, #16]
 80160ac:	69bb      	ldr	r3, [r7, #24]
 80160ae:	4413      	add	r3, r2
 80160b0:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 80160b2:	69fb      	ldr	r3, [r7, #28]
 80160b4:	681b      	ldr	r3, [r3, #0]
 80160b6:	61fb      	str	r3, [r7, #28]
 80160b8:	697b      	ldr	r3, [r7, #20]
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d1d3      	bne.n	8016066 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80160be:	697b      	ldr	r3, [r7, #20]
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d103      	bne.n	80160cc <pbuf_take+0xf0>
 80160c4:	88fb      	ldrh	r3, [r7, #6]
 80160c6:	693a      	ldr	r2, [r7, #16]
 80160c8:	429a      	cmp	r2, r3
 80160ca:	d006      	beq.n	80160da <pbuf_take+0xfe>
 80160cc:	4b05      	ldr	r3, [pc, #20]	; (80160e4 <pbuf_take+0x108>)
 80160ce:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 80160d2:	490a      	ldr	r1, [pc, #40]	; (80160fc <pbuf_take+0x120>)
 80160d4:	4805      	ldr	r0, [pc, #20]	; (80160ec <pbuf_take+0x110>)
 80160d6:	f010 fefd 	bl	8026ed4 <iprintf>
  return ERR_OK;
 80160da:	2300      	movs	r3, #0
}
 80160dc:	4618      	mov	r0, r3
 80160de:	3720      	adds	r7, #32
 80160e0:	46bd      	mov	sp, r7
 80160e2:	bd80      	pop	{r7, pc}
 80160e4:	0802bb18 	.word	0x0802bb18
 80160e8:	0802bef0 	.word	0x0802bef0
 80160ec:	0802bb78 	.word	0x0802bb78
 80160f0:	0802bf08 	.word	0x0802bf08
 80160f4:	0802bf24 	.word	0x0802bf24
 80160f8:	0802bf44 	.word	0x0802bf44
 80160fc:	0802bf5c 	.word	0x0802bf5c

08016100 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8016100:	b580      	push	{r7, lr}
 8016102:	b088      	sub	sp, #32
 8016104:	af00      	add	r7, sp, #0
 8016106:	60f8      	str	r0, [r7, #12]
 8016108:	60b9      	str	r1, [r7, #8]
 801610a:	4611      	mov	r1, r2
 801610c:	461a      	mov	r2, r3
 801610e:	460b      	mov	r3, r1
 8016110:	80fb      	strh	r3, [r7, #6]
 8016112:	4613      	mov	r3, r2
 8016114:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 8016116:	f107 0210 	add.w	r2, r7, #16
 801611a:	88bb      	ldrh	r3, [r7, #4]
 801611c:	4619      	mov	r1, r3
 801611e:	68f8      	ldr	r0, [r7, #12]
 8016120:	f7ff ff49 	bl	8015fb6 <pbuf_skip>
 8016124:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8016126:	69fb      	ldr	r3, [r7, #28]
 8016128:	2b00      	cmp	r3, #0
 801612a:	d047      	beq.n	80161bc <pbuf_take_at+0xbc>
 801612c:	69fb      	ldr	r3, [r7, #28]
 801612e:	891b      	ldrh	r3, [r3, #8]
 8016130:	461a      	mov	r2, r3
 8016132:	8a3b      	ldrh	r3, [r7, #16]
 8016134:	4619      	mov	r1, r3
 8016136:	88fb      	ldrh	r3, [r7, #6]
 8016138:	440b      	add	r3, r1
 801613a:	429a      	cmp	r2, r3
 801613c:	db3e      	blt.n	80161bc <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 801613e:	88fb      	ldrh	r3, [r7, #6]
 8016140:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 8016142:	68bb      	ldr	r3, [r7, #8]
 8016144:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 8016146:	69fb      	ldr	r3, [r7, #28]
 8016148:	895a      	ldrh	r2, [r3, #10]
 801614a:	8a3b      	ldrh	r3, [r7, #16]
 801614c:	429a      	cmp	r2, r3
 801614e:	d806      	bhi.n	801615e <pbuf_take_at+0x5e>
 8016150:	4b1d      	ldr	r3, [pc, #116]	; (80161c8 <pbuf_take_at+0xc8>)
 8016152:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8016156:	491d      	ldr	r1, [pc, #116]	; (80161cc <pbuf_take_at+0xcc>)
 8016158:	481d      	ldr	r0, [pc, #116]	; (80161d0 <pbuf_take_at+0xd0>)
 801615a:	f010 febb 	bl	8026ed4 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 801615e:	69fb      	ldr	r3, [r7, #28]
 8016160:	895b      	ldrh	r3, [r3, #10]
 8016162:	461a      	mov	r2, r3
 8016164:	8a3b      	ldrh	r3, [r7, #16]
 8016166:	1ad2      	subs	r2, r2, r3
 8016168:	88fb      	ldrh	r3, [r7, #6]
 801616a:	429a      	cmp	r2, r3
 801616c:	da05      	bge.n	801617a <pbuf_take_at+0x7a>
 801616e:	69fb      	ldr	r3, [r7, #28]
 8016170:	895a      	ldrh	r2, [r3, #10]
 8016172:	8a3b      	ldrh	r3, [r7, #16]
 8016174:	1ad3      	subs	r3, r2, r3
 8016176:	b29b      	uxth	r3, r3
 8016178:	e000      	b.n	801617c <pbuf_take_at+0x7c>
 801617a:	88fb      	ldrh	r3, [r7, #6]
 801617c:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 801617e:	69fb      	ldr	r3, [r7, #28]
 8016180:	685b      	ldr	r3, [r3, #4]
 8016182:	8a3a      	ldrh	r2, [r7, #16]
 8016184:	4413      	add	r3, r2
 8016186:	8a7a      	ldrh	r2, [r7, #18]
 8016188:	68b9      	ldr	r1, [r7, #8]
 801618a:	4618      	mov	r0, r3
 801618c:	f010 f81c 	bl	80261c8 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8016190:	8b7a      	ldrh	r2, [r7, #26]
 8016192:	8a7b      	ldrh	r3, [r7, #18]
 8016194:	1ad3      	subs	r3, r2, r3
 8016196:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 8016198:	8a7b      	ldrh	r3, [r7, #18]
 801619a:	697a      	ldr	r2, [r7, #20]
 801619c:	4413      	add	r3, r2
 801619e:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 80161a0:	8b7b      	ldrh	r3, [r7, #26]
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d008      	beq.n	80161b8 <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 80161a6:	69fb      	ldr	r3, [r7, #28]
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	8b7a      	ldrh	r2, [r7, #26]
 80161ac:	6979      	ldr	r1, [r7, #20]
 80161ae:	4618      	mov	r0, r3
 80161b0:	f7ff ff14 	bl	8015fdc <pbuf_take>
 80161b4:	4603      	mov	r3, r0
 80161b6:	e003      	b.n	80161c0 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 80161b8:	2300      	movs	r3, #0
 80161ba:	e001      	b.n	80161c0 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 80161bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80161c0:	4618      	mov	r0, r3
 80161c2:	3720      	adds	r7, #32
 80161c4:	46bd      	mov	sp, r7
 80161c6:	bd80      	pop	{r7, pc}
 80161c8:	0802bb18 	.word	0x0802bb18
 80161cc:	0802bf74 	.word	0x0802bf74
 80161d0:	0802bb78 	.word	0x0802bb78

080161d4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80161d4:	b580      	push	{r7, lr}
 80161d6:	b084      	sub	sp, #16
 80161d8:	af00      	add	r7, sp, #0
 80161da:	4603      	mov	r3, r0
 80161dc:	603a      	str	r2, [r7, #0]
 80161de:	71fb      	strb	r3, [r7, #7]
 80161e0:	460b      	mov	r3, r1
 80161e2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80161e4:	683b      	ldr	r3, [r7, #0]
 80161e6:	8919      	ldrh	r1, [r3, #8]
 80161e8:	88ba      	ldrh	r2, [r7, #4]
 80161ea:	79fb      	ldrb	r3, [r7, #7]
 80161ec:	4618      	mov	r0, r3
 80161ee:	f7ff f92b 	bl	8015448 <pbuf_alloc>
 80161f2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d101      	bne.n	80161fe <pbuf_clone+0x2a>
    return NULL;
 80161fa:	2300      	movs	r3, #0
 80161fc:	e011      	b.n	8016222 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80161fe:	6839      	ldr	r1, [r7, #0]
 8016200:	68f8      	ldr	r0, [r7, #12]
 8016202:	f7ff fd6b 	bl	8015cdc <pbuf_copy>
 8016206:	4603      	mov	r3, r0
 8016208:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801620a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801620e:	2b00      	cmp	r3, #0
 8016210:	d006      	beq.n	8016220 <pbuf_clone+0x4c>
 8016212:	4b06      	ldr	r3, [pc, #24]	; (801622c <pbuf_clone+0x58>)
 8016214:	f240 5224 	movw	r2, #1316	; 0x524
 8016218:	4905      	ldr	r1, [pc, #20]	; (8016230 <pbuf_clone+0x5c>)
 801621a:	4806      	ldr	r0, [pc, #24]	; (8016234 <pbuf_clone+0x60>)
 801621c:	f010 fe5a 	bl	8026ed4 <iprintf>
  return q;
 8016220:	68fb      	ldr	r3, [r7, #12]
}
 8016222:	4618      	mov	r0, r3
 8016224:	3710      	adds	r7, #16
 8016226:	46bd      	mov	sp, r7
 8016228:	bd80      	pop	{r7, pc}
 801622a:	bf00      	nop
 801622c:	0802bb18 	.word	0x0802bb18
 8016230:	0802bf8c 	.word	0x0802bf8c
 8016234:	0802bb78 	.word	0x0802bb78

08016238 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 8016238:	b580      	push	{r7, lr}
 801623a:	b084      	sub	sp, #16
 801623c:	af00      	add	r7, sp, #0
 801623e:	6078      	str	r0, [r7, #4]
 8016240:	460b      	mov	r3, r1
 8016242:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 8016244:	887b      	ldrh	r3, [r7, #2]
 8016246:	4619      	mov	r1, r3
 8016248:	6878      	ldr	r0, [r7, #4]
 801624a:	f000 f80c 	bl	8016266 <pbuf_try_get_at>
 801624e:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	2b00      	cmp	r3, #0
 8016254:	db02      	blt.n	801625c <pbuf_get_at+0x24>
    return (u8_t)ret;
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	b2db      	uxtb	r3, r3
 801625a:	e000      	b.n	801625e <pbuf_get_at+0x26>
  }
  return 0;
 801625c:	2300      	movs	r3, #0
}
 801625e:	4618      	mov	r0, r3
 8016260:	3710      	adds	r7, #16
 8016262:	46bd      	mov	sp, r7
 8016264:	bd80      	pop	{r7, pc}

08016266 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8016266:	b580      	push	{r7, lr}
 8016268:	b084      	sub	sp, #16
 801626a:	af00      	add	r7, sp, #0
 801626c:	6078      	str	r0, [r7, #4]
 801626e:	460b      	mov	r3, r1
 8016270:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 8016272:	f107 020a 	add.w	r2, r7, #10
 8016276:	887b      	ldrh	r3, [r7, #2]
 8016278:	4619      	mov	r1, r3
 801627a:	6878      	ldr	r0, [r7, #4]
 801627c:	f7ff fe72 	bl	8015f64 <pbuf_skip_const>
 8016280:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8016282:	68fb      	ldr	r3, [r7, #12]
 8016284:	2b00      	cmp	r3, #0
 8016286:	d00a      	beq.n	801629e <pbuf_try_get_at+0x38>
 8016288:	68fb      	ldr	r3, [r7, #12]
 801628a:	895a      	ldrh	r2, [r3, #10]
 801628c:	897b      	ldrh	r3, [r7, #10]
 801628e:	429a      	cmp	r2, r3
 8016290:	d905      	bls.n	801629e <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	685b      	ldr	r3, [r3, #4]
 8016296:	897a      	ldrh	r2, [r7, #10]
 8016298:	4413      	add	r3, r2
 801629a:	781b      	ldrb	r3, [r3, #0]
 801629c:	e001      	b.n	80162a2 <pbuf_try_get_at+0x3c>
  }
  return -1;
 801629e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80162a2:	4618      	mov	r0, r3
 80162a4:	3710      	adds	r7, #16
 80162a6:	46bd      	mov	sp, r7
 80162a8:	bd80      	pop	{r7, pc}

080162aa <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 80162aa:	b580      	push	{r7, lr}
 80162ac:	b084      	sub	sp, #16
 80162ae:	af00      	add	r7, sp, #0
 80162b0:	6078      	str	r0, [r7, #4]
 80162b2:	460b      	mov	r3, r1
 80162b4:	807b      	strh	r3, [r7, #2]
 80162b6:	4613      	mov	r3, r2
 80162b8:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 80162ba:	f107 020a 	add.w	r2, r7, #10
 80162be:	887b      	ldrh	r3, [r7, #2]
 80162c0:	4619      	mov	r1, r3
 80162c2:	6878      	ldr	r0, [r7, #4]
 80162c4:	f7ff fe77 	bl	8015fb6 <pbuf_skip>
 80162c8:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 80162ca:	68fb      	ldr	r3, [r7, #12]
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d00a      	beq.n	80162e6 <pbuf_put_at+0x3c>
 80162d0:	68fb      	ldr	r3, [r7, #12]
 80162d2:	895a      	ldrh	r2, [r3, #10]
 80162d4:	897b      	ldrh	r3, [r7, #10]
 80162d6:	429a      	cmp	r2, r3
 80162d8:	d905      	bls.n	80162e6 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	685b      	ldr	r3, [r3, #4]
 80162de:	897a      	ldrh	r2, [r7, #10]
 80162e0:	4413      	add	r3, r2
 80162e2:	787a      	ldrb	r2, [r7, #1]
 80162e4:	701a      	strb	r2, [r3, #0]
  }
}
 80162e6:	bf00      	nop
 80162e8:	3710      	adds	r7, #16
 80162ea:	46bd      	mov	sp, r7
 80162ec:	bd80      	pop	{r7, pc}
	...

080162f0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80162f0:	b580      	push	{r7, lr}
 80162f2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80162f4:	f010 fe7c 	bl	8026ff0 <rand>
 80162f8:	4603      	mov	r3, r0
 80162fa:	b29b      	uxth	r3, r3
 80162fc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016300:	b29b      	uxth	r3, r3
 8016302:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8016306:	b29a      	uxth	r2, r3
 8016308:	4b01      	ldr	r3, [pc, #4]	; (8016310 <tcp_init+0x20>)
 801630a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801630c:	bf00      	nop
 801630e:	bd80      	pop	{r7, pc}
 8016310:	2400002c 	.word	0x2400002c

08016314 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8016314:	b580      	push	{r7, lr}
 8016316:	b082      	sub	sp, #8
 8016318:	af00      	add	r7, sp, #0
 801631a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	7d1b      	ldrb	r3, [r3, #20]
 8016320:	2b01      	cmp	r3, #1
 8016322:	d105      	bne.n	8016330 <tcp_free+0x1c>
 8016324:	4b06      	ldr	r3, [pc, #24]	; (8016340 <tcp_free+0x2c>)
 8016326:	22d4      	movs	r2, #212	; 0xd4
 8016328:	4906      	ldr	r1, [pc, #24]	; (8016344 <tcp_free+0x30>)
 801632a:	4807      	ldr	r0, [pc, #28]	; (8016348 <tcp_free+0x34>)
 801632c:	f010 fdd2 	bl	8026ed4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8016330:	6879      	ldr	r1, [r7, #4]
 8016332:	2001      	movs	r0, #1
 8016334:	f7fe fcbc 	bl	8014cb0 <memp_free>
}
 8016338:	bf00      	nop
 801633a:	3708      	adds	r7, #8
 801633c:	46bd      	mov	sp, r7
 801633e:	bd80      	pop	{r7, pc}
 8016340:	0802c018 	.word	0x0802c018
 8016344:	0802c048 	.word	0x0802c048
 8016348:	0802c05c 	.word	0x0802c05c

0801634c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801634c:	b580      	push	{r7, lr}
 801634e:	b082      	sub	sp, #8
 8016350:	af00      	add	r7, sp, #0
 8016352:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	7d1b      	ldrb	r3, [r3, #20]
 8016358:	2b01      	cmp	r3, #1
 801635a:	d105      	bne.n	8016368 <tcp_free_listen+0x1c>
 801635c:	4b06      	ldr	r3, [pc, #24]	; (8016378 <tcp_free_listen+0x2c>)
 801635e:	22df      	movs	r2, #223	; 0xdf
 8016360:	4906      	ldr	r1, [pc, #24]	; (801637c <tcp_free_listen+0x30>)
 8016362:	4807      	ldr	r0, [pc, #28]	; (8016380 <tcp_free_listen+0x34>)
 8016364:	f010 fdb6 	bl	8026ed4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8016368:	6879      	ldr	r1, [r7, #4]
 801636a:	2002      	movs	r0, #2
 801636c:	f7fe fca0 	bl	8014cb0 <memp_free>
}
 8016370:	bf00      	nop
 8016372:	3708      	adds	r7, #8
 8016374:	46bd      	mov	sp, r7
 8016376:	bd80      	pop	{r7, pc}
 8016378:	0802c018 	.word	0x0802c018
 801637c:	0802c084 	.word	0x0802c084
 8016380:	0802c05c 	.word	0x0802c05c

08016384 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8016384:	b580      	push	{r7, lr}
 8016386:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8016388:	f001 f9be 	bl	8017708 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801638c:	4b07      	ldr	r3, [pc, #28]	; (80163ac <tcp_tmr+0x28>)
 801638e:	781b      	ldrb	r3, [r3, #0]
 8016390:	3301      	adds	r3, #1
 8016392:	b2da      	uxtb	r2, r3
 8016394:	4b05      	ldr	r3, [pc, #20]	; (80163ac <tcp_tmr+0x28>)
 8016396:	701a      	strb	r2, [r3, #0]
 8016398:	4b04      	ldr	r3, [pc, #16]	; (80163ac <tcp_tmr+0x28>)
 801639a:	781b      	ldrb	r3, [r3, #0]
 801639c:	f003 0301 	and.w	r3, r3, #1
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d001      	beq.n	80163a8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80163a4:	f000 fe70 	bl	8017088 <tcp_slowtmr>
  }
}
 80163a8:	bf00      	nop
 80163aa:	bd80      	pop	{r7, pc}
 80163ac:	24004f89 	.word	0x24004f89

080163b0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80163b0:	b580      	push	{r7, lr}
 80163b2:	b084      	sub	sp, #16
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	6078      	str	r0, [r7, #4]
 80163b8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80163ba:	683b      	ldr	r3, [r7, #0]
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d105      	bne.n	80163cc <tcp_remove_listener+0x1c>
 80163c0:	4b0d      	ldr	r3, [pc, #52]	; (80163f8 <tcp_remove_listener+0x48>)
 80163c2:	22ff      	movs	r2, #255	; 0xff
 80163c4:	490d      	ldr	r1, [pc, #52]	; (80163fc <tcp_remove_listener+0x4c>)
 80163c6:	480e      	ldr	r0, [pc, #56]	; (8016400 <tcp_remove_listener+0x50>)
 80163c8:	f010 fd84 	bl	8026ed4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	60fb      	str	r3, [r7, #12]
 80163d0:	e00a      	b.n	80163e8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80163d2:	68fb      	ldr	r3, [r7, #12]
 80163d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80163d6:	683a      	ldr	r2, [r7, #0]
 80163d8:	429a      	cmp	r2, r3
 80163da:	d102      	bne.n	80163e2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	2200      	movs	r2, #0
 80163e0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80163e2:	68fb      	ldr	r3, [r7, #12]
 80163e4:	68db      	ldr	r3, [r3, #12]
 80163e6:	60fb      	str	r3, [r7, #12]
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d1f1      	bne.n	80163d2 <tcp_remove_listener+0x22>
    }
  }
}
 80163ee:	bf00      	nop
 80163f0:	bf00      	nop
 80163f2:	3710      	adds	r7, #16
 80163f4:	46bd      	mov	sp, r7
 80163f6:	bd80      	pop	{r7, pc}
 80163f8:	0802c018 	.word	0x0802c018
 80163fc:	0802c0a0 	.word	0x0802c0a0
 8016400:	0802c05c 	.word	0x0802c05c

08016404 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8016404:	b580      	push	{r7, lr}
 8016406:	b084      	sub	sp, #16
 8016408:	af00      	add	r7, sp, #0
 801640a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	2b00      	cmp	r3, #0
 8016410:	d106      	bne.n	8016420 <tcp_listen_closed+0x1c>
 8016412:	4b14      	ldr	r3, [pc, #80]	; (8016464 <tcp_listen_closed+0x60>)
 8016414:	f240 1211 	movw	r2, #273	; 0x111
 8016418:	4913      	ldr	r1, [pc, #76]	; (8016468 <tcp_listen_closed+0x64>)
 801641a:	4814      	ldr	r0, [pc, #80]	; (801646c <tcp_listen_closed+0x68>)
 801641c:	f010 fd5a 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	7d1b      	ldrb	r3, [r3, #20]
 8016424:	2b01      	cmp	r3, #1
 8016426:	d006      	beq.n	8016436 <tcp_listen_closed+0x32>
 8016428:	4b0e      	ldr	r3, [pc, #56]	; (8016464 <tcp_listen_closed+0x60>)
 801642a:	f44f 7289 	mov.w	r2, #274	; 0x112
 801642e:	4910      	ldr	r1, [pc, #64]	; (8016470 <tcp_listen_closed+0x6c>)
 8016430:	480e      	ldr	r0, [pc, #56]	; (801646c <tcp_listen_closed+0x68>)
 8016432:	f010 fd4f 	bl	8026ed4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8016436:	2301      	movs	r3, #1
 8016438:	60fb      	str	r3, [r7, #12]
 801643a:	e00b      	b.n	8016454 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801643c:	4a0d      	ldr	r2, [pc, #52]	; (8016474 <tcp_listen_closed+0x70>)
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	6879      	ldr	r1, [r7, #4]
 8016448:	4618      	mov	r0, r3
 801644a:	f7ff ffb1 	bl	80163b0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	3301      	adds	r3, #1
 8016452:	60fb      	str	r3, [r7, #12]
 8016454:	68fb      	ldr	r3, [r7, #12]
 8016456:	2b03      	cmp	r3, #3
 8016458:	d9f0      	bls.n	801643c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801645a:	bf00      	nop
 801645c:	bf00      	nop
 801645e:	3710      	adds	r7, #16
 8016460:	46bd      	mov	sp, r7
 8016462:	bd80      	pop	{r7, pc}
 8016464:	0802c018 	.word	0x0802c018
 8016468:	0802c0c8 	.word	0x0802c0c8
 801646c:	0802c05c 	.word	0x0802c05c
 8016470:	0802c0d4 	.word	0x0802c0d4
 8016474:	0802ec20 	.word	0x0802ec20

08016478 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8016478:	b5b0      	push	{r4, r5, r7, lr}
 801647a:	b088      	sub	sp, #32
 801647c:	af04      	add	r7, sp, #16
 801647e:	6078      	str	r0, [r7, #4]
 8016480:	460b      	mov	r3, r1
 8016482:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	2b00      	cmp	r3, #0
 8016488:	d106      	bne.n	8016498 <tcp_close_shutdown+0x20>
 801648a:	4b63      	ldr	r3, [pc, #396]	; (8016618 <tcp_close_shutdown+0x1a0>)
 801648c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8016490:	4962      	ldr	r1, [pc, #392]	; (801661c <tcp_close_shutdown+0x1a4>)
 8016492:	4863      	ldr	r0, [pc, #396]	; (8016620 <tcp_close_shutdown+0x1a8>)
 8016494:	f010 fd1e 	bl	8026ed4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8016498:	78fb      	ldrb	r3, [r7, #3]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d066      	beq.n	801656c <tcp_close_shutdown+0xf4>
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	7d1b      	ldrb	r3, [r3, #20]
 80164a2:	2b04      	cmp	r3, #4
 80164a4:	d003      	beq.n	80164ae <tcp_close_shutdown+0x36>
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	7d1b      	ldrb	r3, [r3, #20]
 80164aa:	2b07      	cmp	r3, #7
 80164ac:	d15e      	bne.n	801656c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d104      	bne.n	80164c0 <tcp_close_shutdown+0x48>
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80164ba:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80164be:	d055      	beq.n	801656c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	8b5b      	ldrh	r3, [r3, #26]
 80164c4:	f003 0310 	and.w	r3, r3, #16
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d106      	bne.n	80164da <tcp_close_shutdown+0x62>
 80164cc:	4b52      	ldr	r3, [pc, #328]	; (8016618 <tcp_close_shutdown+0x1a0>)
 80164ce:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80164d2:	4954      	ldr	r1, [pc, #336]	; (8016624 <tcp_close_shutdown+0x1ac>)
 80164d4:	4852      	ldr	r0, [pc, #328]	; (8016620 <tcp_close_shutdown+0x1a8>)
 80164d6:	f010 fcfd 	bl	8026ed4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80164e2:	687d      	ldr	r5, [r7, #4]
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	3304      	adds	r3, #4
 80164e8:	687a      	ldr	r2, [r7, #4]
 80164ea:	8ad2      	ldrh	r2, [r2, #22]
 80164ec:	6879      	ldr	r1, [r7, #4]
 80164ee:	8b09      	ldrh	r1, [r1, #24]
 80164f0:	9102      	str	r1, [sp, #8]
 80164f2:	9201      	str	r2, [sp, #4]
 80164f4:	9300      	str	r3, [sp, #0]
 80164f6:	462b      	mov	r3, r5
 80164f8:	4622      	mov	r2, r4
 80164fa:	4601      	mov	r1, r0
 80164fc:	6878      	ldr	r0, [r7, #4]
 80164fe:	f005 fecf 	bl	801c2a0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8016502:	6878      	ldr	r0, [r7, #4]
 8016504:	f001 fcb0 	bl	8017e68 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8016508:	4b47      	ldr	r3, [pc, #284]	; (8016628 <tcp_close_shutdown+0x1b0>)
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	687a      	ldr	r2, [r7, #4]
 801650e:	429a      	cmp	r2, r3
 8016510:	d105      	bne.n	801651e <tcp_close_shutdown+0xa6>
 8016512:	4b45      	ldr	r3, [pc, #276]	; (8016628 <tcp_close_shutdown+0x1b0>)
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	68db      	ldr	r3, [r3, #12]
 8016518:	4a43      	ldr	r2, [pc, #268]	; (8016628 <tcp_close_shutdown+0x1b0>)
 801651a:	6013      	str	r3, [r2, #0]
 801651c:	e013      	b.n	8016546 <tcp_close_shutdown+0xce>
 801651e:	4b42      	ldr	r3, [pc, #264]	; (8016628 <tcp_close_shutdown+0x1b0>)
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	60fb      	str	r3, [r7, #12]
 8016524:	e00c      	b.n	8016540 <tcp_close_shutdown+0xc8>
 8016526:	68fb      	ldr	r3, [r7, #12]
 8016528:	68db      	ldr	r3, [r3, #12]
 801652a:	687a      	ldr	r2, [r7, #4]
 801652c:	429a      	cmp	r2, r3
 801652e:	d104      	bne.n	801653a <tcp_close_shutdown+0xc2>
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	68da      	ldr	r2, [r3, #12]
 8016534:	68fb      	ldr	r3, [r7, #12]
 8016536:	60da      	str	r2, [r3, #12]
 8016538:	e005      	b.n	8016546 <tcp_close_shutdown+0xce>
 801653a:	68fb      	ldr	r3, [r7, #12]
 801653c:	68db      	ldr	r3, [r3, #12]
 801653e:	60fb      	str	r3, [r7, #12]
 8016540:	68fb      	ldr	r3, [r7, #12]
 8016542:	2b00      	cmp	r3, #0
 8016544:	d1ef      	bne.n	8016526 <tcp_close_shutdown+0xae>
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	2200      	movs	r2, #0
 801654a:	60da      	str	r2, [r3, #12]
 801654c:	4b37      	ldr	r3, [pc, #220]	; (801662c <tcp_close_shutdown+0x1b4>)
 801654e:	2201      	movs	r2, #1
 8016550:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8016552:	4b37      	ldr	r3, [pc, #220]	; (8016630 <tcp_close_shutdown+0x1b8>)
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	687a      	ldr	r2, [r7, #4]
 8016558:	429a      	cmp	r2, r3
 801655a:	d102      	bne.n	8016562 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801655c:	f004 f944 	bl	801a7e8 <tcp_trigger_input_pcb_close>
 8016560:	e002      	b.n	8016568 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8016562:	6878      	ldr	r0, [r7, #4]
 8016564:	f7ff fed6 	bl	8016314 <tcp_free>
      }
      return ERR_OK;
 8016568:	2300      	movs	r3, #0
 801656a:	e050      	b.n	801660e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	7d1b      	ldrb	r3, [r3, #20]
 8016570:	2b02      	cmp	r3, #2
 8016572:	d03b      	beq.n	80165ec <tcp_close_shutdown+0x174>
 8016574:	2b02      	cmp	r3, #2
 8016576:	dc44      	bgt.n	8016602 <tcp_close_shutdown+0x18a>
 8016578:	2b00      	cmp	r3, #0
 801657a:	d002      	beq.n	8016582 <tcp_close_shutdown+0x10a>
 801657c:	2b01      	cmp	r3, #1
 801657e:	d02a      	beq.n	80165d6 <tcp_close_shutdown+0x15e>
 8016580:	e03f      	b.n	8016602 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	8adb      	ldrh	r3, [r3, #22]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d021      	beq.n	80165ce <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801658a:	4b2a      	ldr	r3, [pc, #168]	; (8016634 <tcp_close_shutdown+0x1bc>)
 801658c:	681b      	ldr	r3, [r3, #0]
 801658e:	687a      	ldr	r2, [r7, #4]
 8016590:	429a      	cmp	r2, r3
 8016592:	d105      	bne.n	80165a0 <tcp_close_shutdown+0x128>
 8016594:	4b27      	ldr	r3, [pc, #156]	; (8016634 <tcp_close_shutdown+0x1bc>)
 8016596:	681b      	ldr	r3, [r3, #0]
 8016598:	68db      	ldr	r3, [r3, #12]
 801659a:	4a26      	ldr	r2, [pc, #152]	; (8016634 <tcp_close_shutdown+0x1bc>)
 801659c:	6013      	str	r3, [r2, #0]
 801659e:	e013      	b.n	80165c8 <tcp_close_shutdown+0x150>
 80165a0:	4b24      	ldr	r3, [pc, #144]	; (8016634 <tcp_close_shutdown+0x1bc>)
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	60bb      	str	r3, [r7, #8]
 80165a6:	e00c      	b.n	80165c2 <tcp_close_shutdown+0x14a>
 80165a8:	68bb      	ldr	r3, [r7, #8]
 80165aa:	68db      	ldr	r3, [r3, #12]
 80165ac:	687a      	ldr	r2, [r7, #4]
 80165ae:	429a      	cmp	r2, r3
 80165b0:	d104      	bne.n	80165bc <tcp_close_shutdown+0x144>
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	68da      	ldr	r2, [r3, #12]
 80165b6:	68bb      	ldr	r3, [r7, #8]
 80165b8:	60da      	str	r2, [r3, #12]
 80165ba:	e005      	b.n	80165c8 <tcp_close_shutdown+0x150>
 80165bc:	68bb      	ldr	r3, [r7, #8]
 80165be:	68db      	ldr	r3, [r3, #12]
 80165c0:	60bb      	str	r3, [r7, #8]
 80165c2:	68bb      	ldr	r3, [r7, #8]
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d1ef      	bne.n	80165a8 <tcp_close_shutdown+0x130>
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	2200      	movs	r2, #0
 80165cc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80165ce:	6878      	ldr	r0, [r7, #4]
 80165d0:	f7ff fea0 	bl	8016314 <tcp_free>
      break;
 80165d4:	e01a      	b.n	801660c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80165d6:	6878      	ldr	r0, [r7, #4]
 80165d8:	f7ff ff14 	bl	8016404 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80165dc:	6879      	ldr	r1, [r7, #4]
 80165de:	4816      	ldr	r0, [pc, #88]	; (8016638 <tcp_close_shutdown+0x1c0>)
 80165e0:	f001 fc92 	bl	8017f08 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80165e4:	6878      	ldr	r0, [r7, #4]
 80165e6:	f7ff feb1 	bl	801634c <tcp_free_listen>
      break;
 80165ea:	e00f      	b.n	801660c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80165ec:	6879      	ldr	r1, [r7, #4]
 80165ee:	480e      	ldr	r0, [pc, #56]	; (8016628 <tcp_close_shutdown+0x1b0>)
 80165f0:	f001 fc8a 	bl	8017f08 <tcp_pcb_remove>
 80165f4:	4b0d      	ldr	r3, [pc, #52]	; (801662c <tcp_close_shutdown+0x1b4>)
 80165f6:	2201      	movs	r2, #1
 80165f8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80165fa:	6878      	ldr	r0, [r7, #4]
 80165fc:	f7ff fe8a 	bl	8016314 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8016600:	e004      	b.n	801660c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8016602:	6878      	ldr	r0, [r7, #4]
 8016604:	f000 f81a 	bl	801663c <tcp_close_shutdown_fin>
 8016608:	4603      	mov	r3, r0
 801660a:	e000      	b.n	801660e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 801660c:	2300      	movs	r3, #0
}
 801660e:	4618      	mov	r0, r3
 8016610:	3710      	adds	r7, #16
 8016612:	46bd      	mov	sp, r7
 8016614:	bdb0      	pop	{r4, r5, r7, pc}
 8016616:	bf00      	nop
 8016618:	0802c018 	.word	0x0802c018
 801661c:	0802c0ec 	.word	0x0802c0ec
 8016620:	0802c05c 	.word	0x0802c05c
 8016624:	0802c10c 	.word	0x0802c10c
 8016628:	24008668 	.word	0x24008668
 801662c:	24008664 	.word	0x24008664
 8016630:	2400867c 	.word	0x2400867c
 8016634:	24008674 	.word	0x24008674
 8016638:	24008670 	.word	0x24008670

0801663c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801663c:	b580      	push	{r7, lr}
 801663e:	b084      	sub	sp, #16
 8016640:	af00      	add	r7, sp, #0
 8016642:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	2b00      	cmp	r3, #0
 8016648:	d106      	bne.n	8016658 <tcp_close_shutdown_fin+0x1c>
 801664a:	4b2e      	ldr	r3, [pc, #184]	; (8016704 <tcp_close_shutdown_fin+0xc8>)
 801664c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8016650:	492d      	ldr	r1, [pc, #180]	; (8016708 <tcp_close_shutdown_fin+0xcc>)
 8016652:	482e      	ldr	r0, [pc, #184]	; (801670c <tcp_close_shutdown_fin+0xd0>)
 8016654:	f010 fc3e 	bl	8026ed4 <iprintf>

  switch (pcb->state) {
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	7d1b      	ldrb	r3, [r3, #20]
 801665c:	2b07      	cmp	r3, #7
 801665e:	d020      	beq.n	80166a2 <tcp_close_shutdown_fin+0x66>
 8016660:	2b07      	cmp	r3, #7
 8016662:	dc2b      	bgt.n	80166bc <tcp_close_shutdown_fin+0x80>
 8016664:	2b03      	cmp	r3, #3
 8016666:	d002      	beq.n	801666e <tcp_close_shutdown_fin+0x32>
 8016668:	2b04      	cmp	r3, #4
 801666a:	d00d      	beq.n	8016688 <tcp_close_shutdown_fin+0x4c>
 801666c:	e026      	b.n	80166bc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801666e:	6878      	ldr	r0, [r7, #4]
 8016670:	f004 ff24 	bl	801b4bc <tcp_send_fin>
 8016674:	4603      	mov	r3, r0
 8016676:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8016678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801667c:	2b00      	cmp	r3, #0
 801667e:	d11f      	bne.n	80166c0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	2205      	movs	r2, #5
 8016684:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016686:	e01b      	b.n	80166c0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8016688:	6878      	ldr	r0, [r7, #4]
 801668a:	f004 ff17 	bl	801b4bc <tcp_send_fin>
 801668e:	4603      	mov	r3, r0
 8016690:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8016692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016696:	2b00      	cmp	r3, #0
 8016698:	d114      	bne.n	80166c4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	2205      	movs	r2, #5
 801669e:	751a      	strb	r2, [r3, #20]
      }
      break;
 80166a0:	e010      	b.n	80166c4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80166a2:	6878      	ldr	r0, [r7, #4]
 80166a4:	f004 ff0a 	bl	801b4bc <tcp_send_fin>
 80166a8:	4603      	mov	r3, r0
 80166aa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80166ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d109      	bne.n	80166c8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	2209      	movs	r2, #9
 80166b8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80166ba:	e005      	b.n	80166c8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80166bc:	2300      	movs	r3, #0
 80166be:	e01c      	b.n	80166fa <tcp_close_shutdown_fin+0xbe>
      break;
 80166c0:	bf00      	nop
 80166c2:	e002      	b.n	80166ca <tcp_close_shutdown_fin+0x8e>
      break;
 80166c4:	bf00      	nop
 80166c6:	e000      	b.n	80166ca <tcp_close_shutdown_fin+0x8e>
      break;
 80166c8:	bf00      	nop
  }

  if (err == ERR_OK) {
 80166ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d103      	bne.n	80166da <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80166d2:	6878      	ldr	r0, [r7, #4]
 80166d4:	f005 f830 	bl	801b738 <tcp_output>
 80166d8:	e00d      	b.n	80166f6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80166da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80166de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166e2:	d108      	bne.n	80166f6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	8b5b      	ldrh	r3, [r3, #26]
 80166e8:	f043 0308 	orr.w	r3, r3, #8
 80166ec:	b29a      	uxth	r2, r3
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80166f2:	2300      	movs	r3, #0
 80166f4:	e001      	b.n	80166fa <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80166f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80166fa:	4618      	mov	r0, r3
 80166fc:	3710      	adds	r7, #16
 80166fe:	46bd      	mov	sp, r7
 8016700:	bd80      	pop	{r7, pc}
 8016702:	bf00      	nop
 8016704:	0802c018 	.word	0x0802c018
 8016708:	0802c0c8 	.word	0x0802c0c8
 801670c:	0802c05c 	.word	0x0802c05c

08016710 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8016710:	b580      	push	{r7, lr}
 8016712:	b082      	sub	sp, #8
 8016714:	af00      	add	r7, sp, #0
 8016716:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	2b00      	cmp	r3, #0
 801671c:	d109      	bne.n	8016732 <tcp_close+0x22>
 801671e:	4b0f      	ldr	r3, [pc, #60]	; (801675c <tcp_close+0x4c>)
 8016720:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8016724:	490e      	ldr	r1, [pc, #56]	; (8016760 <tcp_close+0x50>)
 8016726:	480f      	ldr	r0, [pc, #60]	; (8016764 <tcp_close+0x54>)
 8016728:	f010 fbd4 	bl	8026ed4 <iprintf>
 801672c:	f06f 030f 	mvn.w	r3, #15
 8016730:	e00f      	b.n	8016752 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	7d1b      	ldrb	r3, [r3, #20]
 8016736:	2b01      	cmp	r3, #1
 8016738:	d006      	beq.n	8016748 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	8b5b      	ldrh	r3, [r3, #26]
 801673e:	f043 0310 	orr.w	r3, r3, #16
 8016742:	b29a      	uxth	r2, r3
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8016748:	2101      	movs	r1, #1
 801674a:	6878      	ldr	r0, [r7, #4]
 801674c:	f7ff fe94 	bl	8016478 <tcp_close_shutdown>
 8016750:	4603      	mov	r3, r0
}
 8016752:	4618      	mov	r0, r3
 8016754:	3708      	adds	r7, #8
 8016756:	46bd      	mov	sp, r7
 8016758:	bd80      	pop	{r7, pc}
 801675a:	bf00      	nop
 801675c:	0802c018 	.word	0x0802c018
 8016760:	0802c128 	.word	0x0802c128
 8016764:	0802c05c 	.word	0x0802c05c

08016768 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8016768:	b580      	push	{r7, lr}
 801676a:	b084      	sub	sp, #16
 801676c:	af00      	add	r7, sp, #0
 801676e:	60f8      	str	r0, [r7, #12]
 8016770:	60b9      	str	r1, [r7, #8]
 8016772:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	2b00      	cmp	r3, #0
 8016778:	d109      	bne.n	801678e <tcp_shutdown+0x26>
 801677a:	4b26      	ldr	r3, [pc, #152]	; (8016814 <tcp_shutdown+0xac>)
 801677c:	f240 2207 	movw	r2, #519	; 0x207
 8016780:	4925      	ldr	r1, [pc, #148]	; (8016818 <tcp_shutdown+0xb0>)
 8016782:	4826      	ldr	r0, [pc, #152]	; (801681c <tcp_shutdown+0xb4>)
 8016784:	f010 fba6 	bl	8026ed4 <iprintf>
 8016788:	f06f 030f 	mvn.w	r3, #15
 801678c:	e03d      	b.n	801680a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	7d1b      	ldrb	r3, [r3, #20]
 8016792:	2b01      	cmp	r3, #1
 8016794:	d102      	bne.n	801679c <tcp_shutdown+0x34>
    return ERR_CONN;
 8016796:	f06f 030a 	mvn.w	r3, #10
 801679a:	e036      	b.n	801680a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 801679c:	68bb      	ldr	r3, [r7, #8]
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d01b      	beq.n	80167da <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80167a2:	68fb      	ldr	r3, [r7, #12]
 80167a4:	8b5b      	ldrh	r3, [r3, #26]
 80167a6:	f043 0310 	orr.w	r3, r3, #16
 80167aa:	b29a      	uxth	r2, r3
 80167ac:	68fb      	ldr	r3, [r7, #12]
 80167ae:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d005      	beq.n	80167c2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 80167b6:	2101      	movs	r1, #1
 80167b8:	68f8      	ldr	r0, [r7, #12]
 80167ba:	f7ff fe5d 	bl	8016478 <tcp_close_shutdown>
 80167be:	4603      	mov	r3, r0
 80167c0:	e023      	b.n	801680a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d007      	beq.n	80167da <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80167ce:	4618      	mov	r0, r3
 80167d0:	f7ff f950 	bl	8015a74 <pbuf_free>
      pcb->refused_data = NULL;
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	2200      	movs	r2, #0
 80167d8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d013      	beq.n	8016808 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	7d1b      	ldrb	r3, [r3, #20]
 80167e4:	2b04      	cmp	r3, #4
 80167e6:	dc02      	bgt.n	80167ee <tcp_shutdown+0x86>
 80167e8:	2b03      	cmp	r3, #3
 80167ea:	da02      	bge.n	80167f2 <tcp_shutdown+0x8a>
 80167ec:	e009      	b.n	8016802 <tcp_shutdown+0x9a>
 80167ee:	2b07      	cmp	r3, #7
 80167f0:	d107      	bne.n	8016802 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80167f2:	68bb      	ldr	r3, [r7, #8]
 80167f4:	b2db      	uxtb	r3, r3
 80167f6:	4619      	mov	r1, r3
 80167f8:	68f8      	ldr	r0, [r7, #12]
 80167fa:	f7ff fe3d 	bl	8016478 <tcp_close_shutdown>
 80167fe:	4603      	mov	r3, r0
 8016800:	e003      	b.n	801680a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8016802:	f06f 030a 	mvn.w	r3, #10
 8016806:	e000      	b.n	801680a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8016808:	2300      	movs	r3, #0
}
 801680a:	4618      	mov	r0, r3
 801680c:	3710      	adds	r7, #16
 801680e:	46bd      	mov	sp, r7
 8016810:	bd80      	pop	{r7, pc}
 8016812:	bf00      	nop
 8016814:	0802c018 	.word	0x0802c018
 8016818:	0802c140 	.word	0x0802c140
 801681c:	0802c05c 	.word	0x0802c05c

08016820 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8016820:	b580      	push	{r7, lr}
 8016822:	b08e      	sub	sp, #56	; 0x38
 8016824:	af04      	add	r7, sp, #16
 8016826:	6078      	str	r0, [r7, #4]
 8016828:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	2b00      	cmp	r3, #0
 801682e:	d107      	bne.n	8016840 <tcp_abandon+0x20>
 8016830:	4b52      	ldr	r3, [pc, #328]	; (801697c <tcp_abandon+0x15c>)
 8016832:	f240 223d 	movw	r2, #573	; 0x23d
 8016836:	4952      	ldr	r1, [pc, #328]	; (8016980 <tcp_abandon+0x160>)
 8016838:	4852      	ldr	r0, [pc, #328]	; (8016984 <tcp_abandon+0x164>)
 801683a:	f010 fb4b 	bl	8026ed4 <iprintf>
 801683e:	e099      	b.n	8016974 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	7d1b      	ldrb	r3, [r3, #20]
 8016844:	2b01      	cmp	r3, #1
 8016846:	d106      	bne.n	8016856 <tcp_abandon+0x36>
 8016848:	4b4c      	ldr	r3, [pc, #304]	; (801697c <tcp_abandon+0x15c>)
 801684a:	f44f 7210 	mov.w	r2, #576	; 0x240
 801684e:	494e      	ldr	r1, [pc, #312]	; (8016988 <tcp_abandon+0x168>)
 8016850:	484c      	ldr	r0, [pc, #304]	; (8016984 <tcp_abandon+0x164>)
 8016852:	f010 fb3f 	bl	8026ed4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	7d1b      	ldrb	r3, [r3, #20]
 801685a:	2b0a      	cmp	r3, #10
 801685c:	d107      	bne.n	801686e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801685e:	6879      	ldr	r1, [r7, #4]
 8016860:	484a      	ldr	r0, [pc, #296]	; (801698c <tcp_abandon+0x16c>)
 8016862:	f001 fb51 	bl	8017f08 <tcp_pcb_remove>
    tcp_free(pcb);
 8016866:	6878      	ldr	r0, [r7, #4]
 8016868:	f7ff fd54 	bl	8016314 <tcp_free>
 801686c:	e082      	b.n	8016974 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801686e:	2300      	movs	r3, #0
 8016870:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8016872:	2300      	movs	r3, #0
 8016874:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801687a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016880:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016888:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	691b      	ldr	r3, [r3, #16]
 801688e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	7d1b      	ldrb	r3, [r3, #20]
 8016894:	2b00      	cmp	r3, #0
 8016896:	d126      	bne.n	80168e6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	8adb      	ldrh	r3, [r3, #22]
 801689c:	2b00      	cmp	r3, #0
 801689e:	d02e      	beq.n	80168fe <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80168a0:	4b3b      	ldr	r3, [pc, #236]	; (8016990 <tcp_abandon+0x170>)
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	687a      	ldr	r2, [r7, #4]
 80168a6:	429a      	cmp	r2, r3
 80168a8:	d105      	bne.n	80168b6 <tcp_abandon+0x96>
 80168aa:	4b39      	ldr	r3, [pc, #228]	; (8016990 <tcp_abandon+0x170>)
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	68db      	ldr	r3, [r3, #12]
 80168b0:	4a37      	ldr	r2, [pc, #220]	; (8016990 <tcp_abandon+0x170>)
 80168b2:	6013      	str	r3, [r2, #0]
 80168b4:	e013      	b.n	80168de <tcp_abandon+0xbe>
 80168b6:	4b36      	ldr	r3, [pc, #216]	; (8016990 <tcp_abandon+0x170>)
 80168b8:	681b      	ldr	r3, [r3, #0]
 80168ba:	61fb      	str	r3, [r7, #28]
 80168bc:	e00c      	b.n	80168d8 <tcp_abandon+0xb8>
 80168be:	69fb      	ldr	r3, [r7, #28]
 80168c0:	68db      	ldr	r3, [r3, #12]
 80168c2:	687a      	ldr	r2, [r7, #4]
 80168c4:	429a      	cmp	r2, r3
 80168c6:	d104      	bne.n	80168d2 <tcp_abandon+0xb2>
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	68da      	ldr	r2, [r3, #12]
 80168cc:	69fb      	ldr	r3, [r7, #28]
 80168ce:	60da      	str	r2, [r3, #12]
 80168d0:	e005      	b.n	80168de <tcp_abandon+0xbe>
 80168d2:	69fb      	ldr	r3, [r7, #28]
 80168d4:	68db      	ldr	r3, [r3, #12]
 80168d6:	61fb      	str	r3, [r7, #28]
 80168d8:	69fb      	ldr	r3, [r7, #28]
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d1ef      	bne.n	80168be <tcp_abandon+0x9e>
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	2200      	movs	r2, #0
 80168e2:	60da      	str	r2, [r3, #12]
 80168e4:	e00b      	b.n	80168fe <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80168e6:	683b      	ldr	r3, [r7, #0]
 80168e8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	8adb      	ldrh	r3, [r3, #22]
 80168ee:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80168f0:	6879      	ldr	r1, [r7, #4]
 80168f2:	4828      	ldr	r0, [pc, #160]	; (8016994 <tcp_abandon+0x174>)
 80168f4:	f001 fb08 	bl	8017f08 <tcp_pcb_remove>
 80168f8:	4b27      	ldr	r3, [pc, #156]	; (8016998 <tcp_abandon+0x178>)
 80168fa:	2201      	movs	r2, #1
 80168fc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016902:	2b00      	cmp	r3, #0
 8016904:	d004      	beq.n	8016910 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801690a:	4618      	mov	r0, r3
 801690c:	f000 ffdc 	bl	80178c8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016914:	2b00      	cmp	r3, #0
 8016916:	d004      	beq.n	8016922 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801691c:	4618      	mov	r0, r3
 801691e:	f000 ffd3 	bl	80178c8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016926:	2b00      	cmp	r3, #0
 8016928:	d004      	beq.n	8016934 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801692e:	4618      	mov	r0, r3
 8016930:	f000 ffca 	bl	80178c8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8016934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016936:	2b00      	cmp	r3, #0
 8016938:	d00e      	beq.n	8016958 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801693a:	6879      	ldr	r1, [r7, #4]
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	3304      	adds	r3, #4
 8016940:	687a      	ldr	r2, [r7, #4]
 8016942:	8b12      	ldrh	r2, [r2, #24]
 8016944:	9202      	str	r2, [sp, #8]
 8016946:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016948:	9201      	str	r2, [sp, #4]
 801694a:	9300      	str	r3, [sp, #0]
 801694c:	460b      	mov	r3, r1
 801694e:	697a      	ldr	r2, [r7, #20]
 8016950:	69b9      	ldr	r1, [r7, #24]
 8016952:	6878      	ldr	r0, [r7, #4]
 8016954:	f005 fca4 	bl	801c2a0 <tcp_rst>
    }
    last_state = pcb->state;
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	7d1b      	ldrb	r3, [r3, #20]
 801695c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801695e:	6878      	ldr	r0, [r7, #4]
 8016960:	f7ff fcd8 	bl	8016314 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8016964:	693b      	ldr	r3, [r7, #16]
 8016966:	2b00      	cmp	r3, #0
 8016968:	d004      	beq.n	8016974 <tcp_abandon+0x154>
 801696a:	693b      	ldr	r3, [r7, #16]
 801696c:	f06f 010c 	mvn.w	r1, #12
 8016970:	68f8      	ldr	r0, [r7, #12]
 8016972:	4798      	blx	r3
  }
}
 8016974:	3728      	adds	r7, #40	; 0x28
 8016976:	46bd      	mov	sp, r7
 8016978:	bd80      	pop	{r7, pc}
 801697a:	bf00      	nop
 801697c:	0802c018 	.word	0x0802c018
 8016980:	0802c15c 	.word	0x0802c15c
 8016984:	0802c05c 	.word	0x0802c05c
 8016988:	0802c178 	.word	0x0802c178
 801698c:	24008678 	.word	0x24008678
 8016990:	24008674 	.word	0x24008674
 8016994:	24008668 	.word	0x24008668
 8016998:	24008664 	.word	0x24008664

0801699c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801699c:	b580      	push	{r7, lr}
 801699e:	b082      	sub	sp, #8
 80169a0:	af00      	add	r7, sp, #0
 80169a2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80169a4:	2101      	movs	r1, #1
 80169a6:	6878      	ldr	r0, [r7, #4]
 80169a8:	f7ff ff3a 	bl	8016820 <tcp_abandon>
}
 80169ac:	bf00      	nop
 80169ae:	3708      	adds	r7, #8
 80169b0:	46bd      	mov	sp, r7
 80169b2:	bd80      	pop	{r7, pc}

080169b4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80169b4:	b580      	push	{r7, lr}
 80169b6:	b088      	sub	sp, #32
 80169b8:	af00      	add	r7, sp, #0
 80169ba:	60f8      	str	r0, [r7, #12]
 80169bc:	60b9      	str	r1, [r7, #8]
 80169be:	4613      	mov	r3, r2
 80169c0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80169c2:	2304      	movs	r3, #4
 80169c4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80169c6:	68bb      	ldr	r3, [r7, #8]
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d101      	bne.n	80169d0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80169cc:	4b3e      	ldr	r3, [pc, #248]	; (8016ac8 <tcp_bind+0x114>)
 80169ce:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80169d0:	68fb      	ldr	r3, [r7, #12]
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d109      	bne.n	80169ea <tcp_bind+0x36>
 80169d6:	4b3d      	ldr	r3, [pc, #244]	; (8016acc <tcp_bind+0x118>)
 80169d8:	f240 22a9 	movw	r2, #681	; 0x2a9
 80169dc:	493c      	ldr	r1, [pc, #240]	; (8016ad0 <tcp_bind+0x11c>)
 80169de:	483d      	ldr	r0, [pc, #244]	; (8016ad4 <tcp_bind+0x120>)
 80169e0:	f010 fa78 	bl	8026ed4 <iprintf>
 80169e4:	f06f 030f 	mvn.w	r3, #15
 80169e8:	e06a      	b.n	8016ac0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	7d1b      	ldrb	r3, [r3, #20]
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d009      	beq.n	8016a06 <tcp_bind+0x52>
 80169f2:	4b36      	ldr	r3, [pc, #216]	; (8016acc <tcp_bind+0x118>)
 80169f4:	f240 22ab 	movw	r2, #683	; 0x2ab
 80169f8:	4937      	ldr	r1, [pc, #220]	; (8016ad8 <tcp_bind+0x124>)
 80169fa:	4836      	ldr	r0, [pc, #216]	; (8016ad4 <tcp_bind+0x120>)
 80169fc:	f010 fa6a 	bl	8026ed4 <iprintf>
 8016a00:	f06f 0305 	mvn.w	r3, #5
 8016a04:	e05c      	b.n	8016ac0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8016a06:	88fb      	ldrh	r3, [r7, #6]
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d109      	bne.n	8016a20 <tcp_bind+0x6c>
    port = tcp_new_port();
 8016a0c:	f000 f9de 	bl	8016dcc <tcp_new_port>
 8016a10:	4603      	mov	r3, r0
 8016a12:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8016a14:	88fb      	ldrh	r3, [r7, #6]
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d135      	bne.n	8016a86 <tcp_bind+0xd2>
      return ERR_BUF;
 8016a1a:	f06f 0301 	mvn.w	r3, #1
 8016a1e:	e04f      	b.n	8016ac0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8016a20:	2300      	movs	r3, #0
 8016a22:	61fb      	str	r3, [r7, #28]
 8016a24:	e02b      	b.n	8016a7e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8016a26:	4a2d      	ldr	r2, [pc, #180]	; (8016adc <tcp_bind+0x128>)
 8016a28:	69fb      	ldr	r3, [r7, #28]
 8016a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016a2e:	681b      	ldr	r3, [r3, #0]
 8016a30:	61bb      	str	r3, [r7, #24]
 8016a32:	e01e      	b.n	8016a72 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8016a34:	69bb      	ldr	r3, [r7, #24]
 8016a36:	8adb      	ldrh	r3, [r3, #22]
 8016a38:	88fa      	ldrh	r2, [r7, #6]
 8016a3a:	429a      	cmp	r2, r3
 8016a3c:	d116      	bne.n	8016a6c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8016a3e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d010      	beq.n	8016a66 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8016a44:	69bb      	ldr	r3, [r7, #24]
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	d00c      	beq.n	8016a66 <tcp_bind+0xb2>
 8016a4c:	68bb      	ldr	r3, [r7, #8]
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d009      	beq.n	8016a66 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8016a52:	68bb      	ldr	r3, [r7, #8]
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d005      	beq.n	8016a66 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8016a5a:	69bb      	ldr	r3, [r7, #24]
 8016a5c:	681a      	ldr	r2, [r3, #0]
 8016a5e:	68bb      	ldr	r3, [r7, #8]
 8016a60:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8016a62:	429a      	cmp	r2, r3
 8016a64:	d102      	bne.n	8016a6c <tcp_bind+0xb8>
              return ERR_USE;
 8016a66:	f06f 0307 	mvn.w	r3, #7
 8016a6a:	e029      	b.n	8016ac0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8016a6c:	69bb      	ldr	r3, [r7, #24]
 8016a6e:	68db      	ldr	r3, [r3, #12]
 8016a70:	61bb      	str	r3, [r7, #24]
 8016a72:	69bb      	ldr	r3, [r7, #24]
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d1dd      	bne.n	8016a34 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8016a78:	69fb      	ldr	r3, [r7, #28]
 8016a7a:	3301      	adds	r3, #1
 8016a7c:	61fb      	str	r3, [r7, #28]
 8016a7e:	69fa      	ldr	r2, [r7, #28]
 8016a80:	697b      	ldr	r3, [r7, #20]
 8016a82:	429a      	cmp	r2, r3
 8016a84:	dbcf      	blt.n	8016a26 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8016a86:	68bb      	ldr	r3, [r7, #8]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d00c      	beq.n	8016aa6 <tcp_bind+0xf2>
 8016a8c:	68bb      	ldr	r3, [r7, #8]
 8016a8e:	681b      	ldr	r3, [r3, #0]
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d008      	beq.n	8016aa6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8016a94:	68bb      	ldr	r3, [r7, #8]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d002      	beq.n	8016aa0 <tcp_bind+0xec>
 8016a9a:	68bb      	ldr	r3, [r7, #8]
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	e000      	b.n	8016aa2 <tcp_bind+0xee>
 8016aa0:	2300      	movs	r3, #0
 8016aa2:	68fa      	ldr	r2, [r7, #12]
 8016aa4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8016aa6:	68fb      	ldr	r3, [r7, #12]
 8016aa8:	88fa      	ldrh	r2, [r7, #6]
 8016aaa:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8016aac:	4b0c      	ldr	r3, [pc, #48]	; (8016ae0 <tcp_bind+0x12c>)
 8016aae:	681a      	ldr	r2, [r3, #0]
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	60da      	str	r2, [r3, #12]
 8016ab4:	4a0a      	ldr	r2, [pc, #40]	; (8016ae0 <tcp_bind+0x12c>)
 8016ab6:	68fb      	ldr	r3, [r7, #12]
 8016ab8:	6013      	str	r3, [r2, #0]
 8016aba:	f005 fdb3 	bl	801c624 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8016abe:	2300      	movs	r3, #0
}
 8016ac0:	4618      	mov	r0, r3
 8016ac2:	3720      	adds	r7, #32
 8016ac4:	46bd      	mov	sp, r7
 8016ac6:	bd80      	pop	{r7, pc}
 8016ac8:	0802ec60 	.word	0x0802ec60
 8016acc:	0802c018 	.word	0x0802c018
 8016ad0:	0802c1ac 	.word	0x0802c1ac
 8016ad4:	0802c05c 	.word	0x0802c05c
 8016ad8:	0802c1c4 	.word	0x0802c1c4
 8016adc:	0802ec20 	.word	0x0802ec20
 8016ae0:	24008674 	.word	0x24008674

08016ae4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8016ae4:	b580      	push	{r7, lr}
 8016ae6:	b084      	sub	sp, #16
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	60f8      	str	r0, [r7, #12]
 8016aec:	60b9      	str	r1, [r7, #8]
 8016aee:	4613      	mov	r3, r2
 8016af0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8016af2:	68bb      	ldr	r3, [r7, #8]
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d106      	bne.n	8016b06 <tcp_accept_null+0x22>
 8016af8:	4b07      	ldr	r3, [pc, #28]	; (8016b18 <tcp_accept_null+0x34>)
 8016afa:	f240 320f 	movw	r2, #783	; 0x30f
 8016afe:	4907      	ldr	r1, [pc, #28]	; (8016b1c <tcp_accept_null+0x38>)
 8016b00:	4807      	ldr	r0, [pc, #28]	; (8016b20 <tcp_accept_null+0x3c>)
 8016b02:	f010 f9e7 	bl	8026ed4 <iprintf>

  tcp_abort(pcb);
 8016b06:	68b8      	ldr	r0, [r7, #8]
 8016b08:	f7ff ff48 	bl	801699c <tcp_abort>

  return ERR_ABRT;
 8016b0c:	f06f 030c 	mvn.w	r3, #12
}
 8016b10:	4618      	mov	r0, r3
 8016b12:	3710      	adds	r7, #16
 8016b14:	46bd      	mov	sp, r7
 8016b16:	bd80      	pop	{r7, pc}
 8016b18:	0802c018 	.word	0x0802c018
 8016b1c:	0802c1ec 	.word	0x0802c1ec
 8016b20:	0802c05c 	.word	0x0802c05c

08016b24 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8016b24:	b580      	push	{r7, lr}
 8016b26:	b088      	sub	sp, #32
 8016b28:	af00      	add	r7, sp, #0
 8016b2a:	60f8      	str	r0, [r7, #12]
 8016b2c:	460b      	mov	r3, r1
 8016b2e:	607a      	str	r2, [r7, #4]
 8016b30:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8016b32:	2300      	movs	r3, #0
 8016b34:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d109      	bne.n	8016b50 <tcp_listen_with_backlog_and_err+0x2c>
 8016b3c:	4b47      	ldr	r3, [pc, #284]	; (8016c5c <tcp_listen_with_backlog_and_err+0x138>)
 8016b3e:	f240 3259 	movw	r2, #857	; 0x359
 8016b42:	4947      	ldr	r1, [pc, #284]	; (8016c60 <tcp_listen_with_backlog_and_err+0x13c>)
 8016b44:	4847      	ldr	r0, [pc, #284]	; (8016c64 <tcp_listen_with_backlog_and_err+0x140>)
 8016b46:	f010 f9c5 	bl	8026ed4 <iprintf>
 8016b4a:	23f0      	movs	r3, #240	; 0xf0
 8016b4c:	76fb      	strb	r3, [r7, #27]
 8016b4e:	e079      	b.n	8016c44 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8016b50:	68fb      	ldr	r3, [r7, #12]
 8016b52:	7d1b      	ldrb	r3, [r3, #20]
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d009      	beq.n	8016b6c <tcp_listen_with_backlog_and_err+0x48>
 8016b58:	4b40      	ldr	r3, [pc, #256]	; (8016c5c <tcp_listen_with_backlog_and_err+0x138>)
 8016b5a:	f240 325a 	movw	r2, #858	; 0x35a
 8016b5e:	4942      	ldr	r1, [pc, #264]	; (8016c68 <tcp_listen_with_backlog_and_err+0x144>)
 8016b60:	4840      	ldr	r0, [pc, #256]	; (8016c64 <tcp_listen_with_backlog_and_err+0x140>)
 8016b62:	f010 f9b7 	bl	8026ed4 <iprintf>
 8016b66:	23f1      	movs	r3, #241	; 0xf1
 8016b68:	76fb      	strb	r3, [r7, #27]
 8016b6a:	e06b      	b.n	8016c44 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	7d1b      	ldrb	r3, [r3, #20]
 8016b70:	2b01      	cmp	r3, #1
 8016b72:	d104      	bne.n	8016b7e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8016b74:	68fb      	ldr	r3, [r7, #12]
 8016b76:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8016b78:	23f7      	movs	r3, #247	; 0xf7
 8016b7a:	76fb      	strb	r3, [r7, #27]
    goto done;
 8016b7c:	e062      	b.n	8016c44 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8016b7e:	2002      	movs	r0, #2
 8016b80:	f7fe f820 	bl	8014bc4 <memp_malloc>
 8016b84:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8016b86:	69fb      	ldr	r3, [r7, #28]
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	d102      	bne.n	8016b92 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8016b8c:	23ff      	movs	r3, #255	; 0xff
 8016b8e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8016b90:	e058      	b.n	8016c44 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	691a      	ldr	r2, [r3, #16]
 8016b96:	69fb      	ldr	r3, [r7, #28]
 8016b98:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	8ada      	ldrh	r2, [r3, #22]
 8016b9e:	69fb      	ldr	r3, [r7, #28]
 8016ba0:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8016ba2:	69fb      	ldr	r3, [r7, #28]
 8016ba4:	2201      	movs	r2, #1
 8016ba6:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8016ba8:	68fb      	ldr	r3, [r7, #12]
 8016baa:	7d5a      	ldrb	r2, [r3, #21]
 8016bac:	69fb      	ldr	r3, [r7, #28]
 8016bae:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	7a5a      	ldrb	r2, [r3, #9]
 8016bb4:	69fb      	ldr	r3, [r7, #28]
 8016bb6:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8016bb8:	69fb      	ldr	r3, [r7, #28]
 8016bba:	2200      	movs	r2, #0
 8016bbc:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8016bbe:	68fb      	ldr	r3, [r7, #12]
 8016bc0:	7ada      	ldrb	r2, [r3, #11]
 8016bc2:	69fb      	ldr	r3, [r7, #28]
 8016bc4:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	7a9a      	ldrb	r2, [r3, #10]
 8016bca:	69fb      	ldr	r3, [r7, #28]
 8016bcc:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	681a      	ldr	r2, [r3, #0]
 8016bd2:	69fb      	ldr	r3, [r7, #28]
 8016bd4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	8adb      	ldrh	r3, [r3, #22]
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d021      	beq.n	8016c22 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8016bde:	4b23      	ldr	r3, [pc, #140]	; (8016c6c <tcp_listen_with_backlog_and_err+0x148>)
 8016be0:	681b      	ldr	r3, [r3, #0]
 8016be2:	68fa      	ldr	r2, [r7, #12]
 8016be4:	429a      	cmp	r2, r3
 8016be6:	d105      	bne.n	8016bf4 <tcp_listen_with_backlog_and_err+0xd0>
 8016be8:	4b20      	ldr	r3, [pc, #128]	; (8016c6c <tcp_listen_with_backlog_and_err+0x148>)
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	68db      	ldr	r3, [r3, #12]
 8016bee:	4a1f      	ldr	r2, [pc, #124]	; (8016c6c <tcp_listen_with_backlog_and_err+0x148>)
 8016bf0:	6013      	str	r3, [r2, #0]
 8016bf2:	e013      	b.n	8016c1c <tcp_listen_with_backlog_and_err+0xf8>
 8016bf4:	4b1d      	ldr	r3, [pc, #116]	; (8016c6c <tcp_listen_with_backlog_and_err+0x148>)
 8016bf6:	681b      	ldr	r3, [r3, #0]
 8016bf8:	617b      	str	r3, [r7, #20]
 8016bfa:	e00c      	b.n	8016c16 <tcp_listen_with_backlog_and_err+0xf2>
 8016bfc:	697b      	ldr	r3, [r7, #20]
 8016bfe:	68db      	ldr	r3, [r3, #12]
 8016c00:	68fa      	ldr	r2, [r7, #12]
 8016c02:	429a      	cmp	r2, r3
 8016c04:	d104      	bne.n	8016c10 <tcp_listen_with_backlog_and_err+0xec>
 8016c06:	68fb      	ldr	r3, [r7, #12]
 8016c08:	68da      	ldr	r2, [r3, #12]
 8016c0a:	697b      	ldr	r3, [r7, #20]
 8016c0c:	60da      	str	r2, [r3, #12]
 8016c0e:	e005      	b.n	8016c1c <tcp_listen_with_backlog_and_err+0xf8>
 8016c10:	697b      	ldr	r3, [r7, #20]
 8016c12:	68db      	ldr	r3, [r3, #12]
 8016c14:	617b      	str	r3, [r7, #20]
 8016c16:	697b      	ldr	r3, [r7, #20]
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d1ef      	bne.n	8016bfc <tcp_listen_with_backlog_and_err+0xd8>
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	2200      	movs	r2, #0
 8016c20:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8016c22:	68f8      	ldr	r0, [r7, #12]
 8016c24:	f7ff fb76 	bl	8016314 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8016c28:	69fb      	ldr	r3, [r7, #28]
 8016c2a:	4a11      	ldr	r2, [pc, #68]	; (8016c70 <tcp_listen_with_backlog_and_err+0x14c>)
 8016c2c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8016c2e:	4b11      	ldr	r3, [pc, #68]	; (8016c74 <tcp_listen_with_backlog_and_err+0x150>)
 8016c30:	681a      	ldr	r2, [r3, #0]
 8016c32:	69fb      	ldr	r3, [r7, #28]
 8016c34:	60da      	str	r2, [r3, #12]
 8016c36:	4a0f      	ldr	r2, [pc, #60]	; (8016c74 <tcp_listen_with_backlog_and_err+0x150>)
 8016c38:	69fb      	ldr	r3, [r7, #28]
 8016c3a:	6013      	str	r3, [r2, #0]
 8016c3c:	f005 fcf2 	bl	801c624 <tcp_timer_needed>
  res = ERR_OK;
 8016c40:	2300      	movs	r3, #0
 8016c42:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d002      	beq.n	8016c50 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	7efa      	ldrb	r2, [r7, #27]
 8016c4e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8016c50:	69fb      	ldr	r3, [r7, #28]
}
 8016c52:	4618      	mov	r0, r3
 8016c54:	3720      	adds	r7, #32
 8016c56:	46bd      	mov	sp, r7
 8016c58:	bd80      	pop	{r7, pc}
 8016c5a:	bf00      	nop
 8016c5c:	0802c018 	.word	0x0802c018
 8016c60:	0802c20c 	.word	0x0802c20c
 8016c64:	0802c05c 	.word	0x0802c05c
 8016c68:	0802c23c 	.word	0x0802c23c
 8016c6c:	24008674 	.word	0x24008674
 8016c70:	08016ae5 	.word	0x08016ae5
 8016c74:	24008670 	.word	0x24008670

08016c78 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8016c78:	b580      	push	{r7, lr}
 8016c7a:	b084      	sub	sp, #16
 8016c7c:	af00      	add	r7, sp, #0
 8016c7e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d106      	bne.n	8016c94 <tcp_update_rcv_ann_wnd+0x1c>
 8016c86:	4b25      	ldr	r3, [pc, #148]	; (8016d1c <tcp_update_rcv_ann_wnd+0xa4>)
 8016c88:	f240 32a6 	movw	r2, #934	; 0x3a6
 8016c8c:	4924      	ldr	r1, [pc, #144]	; (8016d20 <tcp_update_rcv_ann_wnd+0xa8>)
 8016c8e:	4825      	ldr	r0, [pc, #148]	; (8016d24 <tcp_update_rcv_ann_wnd+0xac>)
 8016c90:	f010 f920 	bl	8026ed4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c98:	687a      	ldr	r2, [r7, #4]
 8016c9a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8016c9c:	4413      	add	r3, r2
 8016c9e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ca4:	687a      	ldr	r2, [r7, #4]
 8016ca6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8016ca8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8016cac:	bf28      	it	cs
 8016cae:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8016cb2:	b292      	uxth	r2, r2
 8016cb4:	4413      	add	r3, r2
 8016cb6:	68fa      	ldr	r2, [r7, #12]
 8016cb8:	1ad3      	subs	r3, r2, r3
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	db08      	blt.n	8016cd0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cca:	68fa      	ldr	r2, [r7, #12]
 8016ccc:	1ad3      	subs	r3, r2, r3
 8016cce:	e020      	b.n	8016d12 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cd8:	1ad3      	subs	r3, r2, r3
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	dd03      	ble.n	8016ce6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	2200      	movs	r2, #0
 8016ce2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016ce4:	e014      	b.n	8016d10 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cee:	1ad3      	subs	r3, r2, r3
 8016cf0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8016cf2:	68bb      	ldr	r3, [r7, #8]
 8016cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016cf8:	d306      	bcc.n	8016d08 <tcp_update_rcv_ann_wnd+0x90>
 8016cfa:	4b08      	ldr	r3, [pc, #32]	; (8016d1c <tcp_update_rcv_ann_wnd+0xa4>)
 8016cfc:	f240 32b6 	movw	r2, #950	; 0x3b6
 8016d00:	4909      	ldr	r1, [pc, #36]	; (8016d28 <tcp_update_rcv_ann_wnd+0xb0>)
 8016d02:	4808      	ldr	r0, [pc, #32]	; (8016d24 <tcp_update_rcv_ann_wnd+0xac>)
 8016d04:	f010 f8e6 	bl	8026ed4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8016d08:	68bb      	ldr	r3, [r7, #8]
 8016d0a:	b29a      	uxth	r2, r3
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8016d10:	2300      	movs	r3, #0
  }
}
 8016d12:	4618      	mov	r0, r3
 8016d14:	3710      	adds	r7, #16
 8016d16:	46bd      	mov	sp, r7
 8016d18:	bd80      	pop	{r7, pc}
 8016d1a:	bf00      	nop
 8016d1c:	0802c018 	.word	0x0802c018
 8016d20:	0802c274 	.word	0x0802c274
 8016d24:	0802c05c 	.word	0x0802c05c
 8016d28:	0802c298 	.word	0x0802c298

08016d2c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8016d2c:	b580      	push	{r7, lr}
 8016d2e:	b084      	sub	sp, #16
 8016d30:	af00      	add	r7, sp, #0
 8016d32:	6078      	str	r0, [r7, #4]
 8016d34:	460b      	mov	r3, r1
 8016d36:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d107      	bne.n	8016d4e <tcp_recved+0x22>
 8016d3e:	4b1f      	ldr	r3, [pc, #124]	; (8016dbc <tcp_recved+0x90>)
 8016d40:	f240 32cf 	movw	r2, #975	; 0x3cf
 8016d44:	491e      	ldr	r1, [pc, #120]	; (8016dc0 <tcp_recved+0x94>)
 8016d46:	481f      	ldr	r0, [pc, #124]	; (8016dc4 <tcp_recved+0x98>)
 8016d48:	f010 f8c4 	bl	8026ed4 <iprintf>
 8016d4c:	e032      	b.n	8016db4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	7d1b      	ldrb	r3, [r3, #20]
 8016d52:	2b01      	cmp	r3, #1
 8016d54:	d106      	bne.n	8016d64 <tcp_recved+0x38>
 8016d56:	4b19      	ldr	r3, [pc, #100]	; (8016dbc <tcp_recved+0x90>)
 8016d58:	f240 32d2 	movw	r2, #978	; 0x3d2
 8016d5c:	491a      	ldr	r1, [pc, #104]	; (8016dc8 <tcp_recved+0x9c>)
 8016d5e:	4819      	ldr	r0, [pc, #100]	; (8016dc4 <tcp_recved+0x98>)
 8016d60:	f010 f8b8 	bl	8026ed4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016d68:	887b      	ldrh	r3, [r7, #2]
 8016d6a:	4413      	add	r3, r2
 8016d6c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8016d6e:	89fb      	ldrh	r3, [r7, #14]
 8016d70:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016d74:	d804      	bhi.n	8016d80 <tcp_recved+0x54>
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016d7a:	89fa      	ldrh	r2, [r7, #14]
 8016d7c:	429a      	cmp	r2, r3
 8016d7e:	d204      	bcs.n	8016d8a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8016d86:	851a      	strh	r2, [r3, #40]	; 0x28
 8016d88:	e002      	b.n	8016d90 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	89fa      	ldrh	r2, [r7, #14]
 8016d8e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8016d90:	6878      	ldr	r0, [r7, #4]
 8016d92:	f7ff ff71 	bl	8016c78 <tcp_update_rcv_ann_wnd>
 8016d96:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8016d98:	68bb      	ldr	r3, [r7, #8]
 8016d9a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8016d9e:	d309      	bcc.n	8016db4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	8b5b      	ldrh	r3, [r3, #26]
 8016da4:	f043 0302 	orr.w	r3, r3, #2
 8016da8:	b29a      	uxth	r2, r3
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016dae:	6878      	ldr	r0, [r7, #4]
 8016db0:	f004 fcc2 	bl	801b738 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8016db4:	3710      	adds	r7, #16
 8016db6:	46bd      	mov	sp, r7
 8016db8:	bd80      	pop	{r7, pc}
 8016dba:	bf00      	nop
 8016dbc:	0802c018 	.word	0x0802c018
 8016dc0:	0802c2b4 	.word	0x0802c2b4
 8016dc4:	0802c05c 	.word	0x0802c05c
 8016dc8:	0802c2cc 	.word	0x0802c2cc

08016dcc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8016dcc:	b480      	push	{r7}
 8016dce:	b083      	sub	sp, #12
 8016dd0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8016dd6:	4b1e      	ldr	r3, [pc, #120]	; (8016e50 <tcp_new_port+0x84>)
 8016dd8:	881b      	ldrh	r3, [r3, #0]
 8016dda:	3301      	adds	r3, #1
 8016ddc:	b29a      	uxth	r2, r3
 8016dde:	4b1c      	ldr	r3, [pc, #112]	; (8016e50 <tcp_new_port+0x84>)
 8016de0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8016de2:	4b1b      	ldr	r3, [pc, #108]	; (8016e50 <tcp_new_port+0x84>)
 8016de4:	881b      	ldrh	r3, [r3, #0]
 8016de6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016dea:	4293      	cmp	r3, r2
 8016dec:	d103      	bne.n	8016df6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8016dee:	4b18      	ldr	r3, [pc, #96]	; (8016e50 <tcp_new_port+0x84>)
 8016df0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8016df4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8016df6:	2300      	movs	r3, #0
 8016df8:	71fb      	strb	r3, [r7, #7]
 8016dfa:	e01e      	b.n	8016e3a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8016dfc:	79fb      	ldrb	r3, [r7, #7]
 8016dfe:	4a15      	ldr	r2, [pc, #84]	; (8016e54 <tcp_new_port+0x88>)
 8016e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016e04:	681b      	ldr	r3, [r3, #0]
 8016e06:	603b      	str	r3, [r7, #0]
 8016e08:	e011      	b.n	8016e2e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8016e0a:	683b      	ldr	r3, [r7, #0]
 8016e0c:	8ada      	ldrh	r2, [r3, #22]
 8016e0e:	4b10      	ldr	r3, [pc, #64]	; (8016e50 <tcp_new_port+0x84>)
 8016e10:	881b      	ldrh	r3, [r3, #0]
 8016e12:	429a      	cmp	r2, r3
 8016e14:	d108      	bne.n	8016e28 <tcp_new_port+0x5c>
        n++;
 8016e16:	88bb      	ldrh	r3, [r7, #4]
 8016e18:	3301      	adds	r3, #1
 8016e1a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8016e1c:	88bb      	ldrh	r3, [r7, #4]
 8016e1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016e22:	d3d8      	bcc.n	8016dd6 <tcp_new_port+0xa>
          return 0;
 8016e24:	2300      	movs	r3, #0
 8016e26:	e00d      	b.n	8016e44 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8016e28:	683b      	ldr	r3, [r7, #0]
 8016e2a:	68db      	ldr	r3, [r3, #12]
 8016e2c:	603b      	str	r3, [r7, #0]
 8016e2e:	683b      	ldr	r3, [r7, #0]
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d1ea      	bne.n	8016e0a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8016e34:	79fb      	ldrb	r3, [r7, #7]
 8016e36:	3301      	adds	r3, #1
 8016e38:	71fb      	strb	r3, [r7, #7]
 8016e3a:	79fb      	ldrb	r3, [r7, #7]
 8016e3c:	2b03      	cmp	r3, #3
 8016e3e:	d9dd      	bls.n	8016dfc <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8016e40:	4b03      	ldr	r3, [pc, #12]	; (8016e50 <tcp_new_port+0x84>)
 8016e42:	881b      	ldrh	r3, [r3, #0]
}
 8016e44:	4618      	mov	r0, r3
 8016e46:	370c      	adds	r7, #12
 8016e48:	46bd      	mov	sp, r7
 8016e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e4e:	4770      	bx	lr
 8016e50:	2400002c 	.word	0x2400002c
 8016e54:	0802ec20 	.word	0x0802ec20

08016e58 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8016e58:	b580      	push	{r7, lr}
 8016e5a:	b08a      	sub	sp, #40	; 0x28
 8016e5c:	af00      	add	r7, sp, #0
 8016e5e:	60f8      	str	r0, [r7, #12]
 8016e60:	60b9      	str	r1, [r7, #8]
 8016e62:	603b      	str	r3, [r7, #0]
 8016e64:	4613      	mov	r3, r2
 8016e66:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8016e68:	2300      	movs	r3, #0
 8016e6a:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8016e6c:	68fb      	ldr	r3, [r7, #12]
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d109      	bne.n	8016e86 <tcp_connect+0x2e>
 8016e72:	4b7d      	ldr	r3, [pc, #500]	; (8017068 <tcp_connect+0x210>)
 8016e74:	f240 4235 	movw	r2, #1077	; 0x435
 8016e78:	497c      	ldr	r1, [pc, #496]	; (801706c <tcp_connect+0x214>)
 8016e7a:	487d      	ldr	r0, [pc, #500]	; (8017070 <tcp_connect+0x218>)
 8016e7c:	f010 f82a 	bl	8026ed4 <iprintf>
 8016e80:	f06f 030f 	mvn.w	r3, #15
 8016e84:	e0ec      	b.n	8017060 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8016e86:	68bb      	ldr	r3, [r7, #8]
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d109      	bne.n	8016ea0 <tcp_connect+0x48>
 8016e8c:	4b76      	ldr	r3, [pc, #472]	; (8017068 <tcp_connect+0x210>)
 8016e8e:	f240 4236 	movw	r2, #1078	; 0x436
 8016e92:	4978      	ldr	r1, [pc, #480]	; (8017074 <tcp_connect+0x21c>)
 8016e94:	4876      	ldr	r0, [pc, #472]	; (8017070 <tcp_connect+0x218>)
 8016e96:	f010 f81d 	bl	8026ed4 <iprintf>
 8016e9a:	f06f 030f 	mvn.w	r3, #15
 8016e9e:	e0df      	b.n	8017060 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8016ea0:	68fb      	ldr	r3, [r7, #12]
 8016ea2:	7d1b      	ldrb	r3, [r3, #20]
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d009      	beq.n	8016ebc <tcp_connect+0x64>
 8016ea8:	4b6f      	ldr	r3, [pc, #444]	; (8017068 <tcp_connect+0x210>)
 8016eaa:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8016eae:	4972      	ldr	r1, [pc, #456]	; (8017078 <tcp_connect+0x220>)
 8016eb0:	486f      	ldr	r0, [pc, #444]	; (8017070 <tcp_connect+0x218>)
 8016eb2:	f010 f80f 	bl	8026ed4 <iprintf>
 8016eb6:	f06f 0309 	mvn.w	r3, #9
 8016eba:	e0d1      	b.n	8017060 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8016ebc:	68bb      	ldr	r3, [r7, #8]
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	d002      	beq.n	8016ec8 <tcp_connect+0x70>
 8016ec2:	68bb      	ldr	r3, [r7, #8]
 8016ec4:	681b      	ldr	r3, [r3, #0]
 8016ec6:	e000      	b.n	8016eca <tcp_connect+0x72>
 8016ec8:	2300      	movs	r3, #0
 8016eca:	68fa      	ldr	r2, [r7, #12]
 8016ecc:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8016ece:	68fb      	ldr	r3, [r7, #12]
 8016ed0:	88fa      	ldrh	r2, [r7, #6]
 8016ed2:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8016ed4:	68fb      	ldr	r3, [r7, #12]
 8016ed6:	7a1b      	ldrb	r3, [r3, #8]
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d006      	beq.n	8016eea <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8016edc:	68fb      	ldr	r3, [r7, #12]
 8016ede:	7a1b      	ldrb	r3, [r3, #8]
 8016ee0:	4618      	mov	r0, r3
 8016ee2:	f7fe fa07 	bl	80152f4 <netif_get_by_index>
 8016ee6:	6278      	str	r0, [r7, #36]	; 0x24
 8016ee8:	e005      	b.n	8016ef6 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	3304      	adds	r3, #4
 8016eee:	4618      	mov	r0, r3
 8016ef0:	f009 fab4 	bl	802045c <ip4_route>
 8016ef4:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8016ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d102      	bne.n	8016f02 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8016efc:	f06f 0303 	mvn.w	r3, #3
 8016f00:	e0ae      	b.n	8017060 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016f02:	68fb      	ldr	r3, [r7, #12]
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d003      	beq.n	8016f10 <tcp_connect+0xb8>
 8016f08:	68fb      	ldr	r3, [r7, #12]
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d111      	bne.n	8016f34 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8016f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d002      	beq.n	8016f1c <tcp_connect+0xc4>
 8016f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f18:	3304      	adds	r3, #4
 8016f1a:	e000      	b.n	8016f1e <tcp_connect+0xc6>
 8016f1c:	2300      	movs	r3, #0
 8016f1e:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8016f20:	69fb      	ldr	r3, [r7, #28]
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d102      	bne.n	8016f2c <tcp_connect+0xd4>
      return ERR_RTE;
 8016f26:	f06f 0303 	mvn.w	r3, #3
 8016f2a:	e099      	b.n	8017060 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016f2c:	69fb      	ldr	r3, [r7, #28]
 8016f2e:	681a      	ldr	r2, [r3, #0]
 8016f30:	68fb      	ldr	r3, [r7, #12]
 8016f32:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	8adb      	ldrh	r3, [r3, #22]
 8016f38:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	8adb      	ldrh	r3, [r3, #22]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d10c      	bne.n	8016f5c <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8016f42:	f7ff ff43 	bl	8016dcc <tcp_new_port>
 8016f46:	4603      	mov	r3, r0
 8016f48:	461a      	mov	r2, r3
 8016f4a:	68fb      	ldr	r3, [r7, #12]
 8016f4c:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8016f4e:	68fb      	ldr	r3, [r7, #12]
 8016f50:	8adb      	ldrh	r3, [r3, #22]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d102      	bne.n	8016f5c <tcp_connect+0x104>
      return ERR_BUF;
 8016f56:	f06f 0301 	mvn.w	r3, #1
 8016f5a:	e081      	b.n	8017060 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8016f5c:	68f8      	ldr	r0, [r7, #12]
 8016f5e:	f001 f867 	bl	8018030 <tcp_next_iss>
 8016f62:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	2200      	movs	r2, #0
 8016f68:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	697a      	ldr	r2, [r7, #20]
 8016f6e:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8016f70:	697b      	ldr	r3, [r7, #20]
 8016f72:	1e5a      	subs	r2, r3, #1
 8016f74:	68fb      	ldr	r3, [r7, #12]
 8016f76:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8016f78:	697b      	ldr	r3, [r7, #20]
 8016f7a:	1e5a      	subs	r2, r3, #1
 8016f7c:	68fb      	ldr	r3, [r7, #12]
 8016f7e:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8016f80:	697b      	ldr	r3, [r7, #20]
 8016f82:	1e5a      	subs	r2, r3, #1
 8016f84:	68fb      	ldr	r3, [r7, #12]
 8016f86:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8016f88:	68fb      	ldr	r3, [r7, #12]
 8016f8a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8016f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016f90:	68fb      	ldr	r3, [r7, #12]
 8016f92:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8016f94:	68fb      	ldr	r3, [r7, #12]
 8016f96:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016f9c:	68fb      	ldr	r3, [r7, #12]
 8016f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8016fa0:	68fb      	ldr	r3, [r7, #12]
 8016fa2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8016fa6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8016faa:	68fb      	ldr	r3, [r7, #12]
 8016fac:	f44f 7206 	mov.w	r2, #536	; 0x218
 8016fb0:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8016fb2:	68fb      	ldr	r3, [r7, #12]
 8016fb4:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8016fb6:	68fb      	ldr	r3, [r7, #12]
 8016fb8:	3304      	adds	r3, #4
 8016fba:	461a      	mov	r2, r3
 8016fbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016fbe:	f001 f85d 	bl	801807c <tcp_eff_send_mss_netif>
 8016fc2:	4603      	mov	r3, r0
 8016fc4:	461a      	mov	r2, r3
 8016fc6:	68fb      	ldr	r3, [r7, #12]
 8016fc8:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8016fca:	68fb      	ldr	r3, [r7, #12]
 8016fcc:	2201      	movs	r2, #1
 8016fce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8016fd2:	68fb      	ldr	r3, [r7, #12]
 8016fd4:	683a      	ldr	r2, [r7, #0]
 8016fd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8016fda:	2102      	movs	r1, #2
 8016fdc:	68f8      	ldr	r0, [r7, #12]
 8016fde:	f004 fabd 	bl	801b55c <tcp_enqueue_flags>
 8016fe2:	4603      	mov	r3, r0
 8016fe4:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8016fe6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d136      	bne.n	801705c <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	2202      	movs	r2, #2
 8016ff2:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8016ff4:	8b7b      	ldrh	r3, [r7, #26]
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d021      	beq.n	801703e <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8016ffa:	4b20      	ldr	r3, [pc, #128]	; (801707c <tcp_connect+0x224>)
 8016ffc:	681b      	ldr	r3, [r3, #0]
 8016ffe:	68fa      	ldr	r2, [r7, #12]
 8017000:	429a      	cmp	r2, r3
 8017002:	d105      	bne.n	8017010 <tcp_connect+0x1b8>
 8017004:	4b1d      	ldr	r3, [pc, #116]	; (801707c <tcp_connect+0x224>)
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	68db      	ldr	r3, [r3, #12]
 801700a:	4a1c      	ldr	r2, [pc, #112]	; (801707c <tcp_connect+0x224>)
 801700c:	6013      	str	r3, [r2, #0]
 801700e:	e013      	b.n	8017038 <tcp_connect+0x1e0>
 8017010:	4b1a      	ldr	r3, [pc, #104]	; (801707c <tcp_connect+0x224>)
 8017012:	681b      	ldr	r3, [r3, #0]
 8017014:	623b      	str	r3, [r7, #32]
 8017016:	e00c      	b.n	8017032 <tcp_connect+0x1da>
 8017018:	6a3b      	ldr	r3, [r7, #32]
 801701a:	68db      	ldr	r3, [r3, #12]
 801701c:	68fa      	ldr	r2, [r7, #12]
 801701e:	429a      	cmp	r2, r3
 8017020:	d104      	bne.n	801702c <tcp_connect+0x1d4>
 8017022:	68fb      	ldr	r3, [r7, #12]
 8017024:	68da      	ldr	r2, [r3, #12]
 8017026:	6a3b      	ldr	r3, [r7, #32]
 8017028:	60da      	str	r2, [r3, #12]
 801702a:	e005      	b.n	8017038 <tcp_connect+0x1e0>
 801702c:	6a3b      	ldr	r3, [r7, #32]
 801702e:	68db      	ldr	r3, [r3, #12]
 8017030:	623b      	str	r3, [r7, #32]
 8017032:	6a3b      	ldr	r3, [r7, #32]
 8017034:	2b00      	cmp	r3, #0
 8017036:	d1ef      	bne.n	8017018 <tcp_connect+0x1c0>
 8017038:	68fb      	ldr	r3, [r7, #12]
 801703a:	2200      	movs	r2, #0
 801703c:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 801703e:	4b10      	ldr	r3, [pc, #64]	; (8017080 <tcp_connect+0x228>)
 8017040:	681a      	ldr	r2, [r3, #0]
 8017042:	68fb      	ldr	r3, [r7, #12]
 8017044:	60da      	str	r2, [r3, #12]
 8017046:	4a0e      	ldr	r2, [pc, #56]	; (8017080 <tcp_connect+0x228>)
 8017048:	68fb      	ldr	r3, [r7, #12]
 801704a:	6013      	str	r3, [r2, #0]
 801704c:	f005 faea 	bl	801c624 <tcp_timer_needed>
 8017050:	4b0c      	ldr	r3, [pc, #48]	; (8017084 <tcp_connect+0x22c>)
 8017052:	2201      	movs	r2, #1
 8017054:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8017056:	68f8      	ldr	r0, [r7, #12]
 8017058:	f004 fb6e 	bl	801b738 <tcp_output>
  }
  return ret;
 801705c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8017060:	4618      	mov	r0, r3
 8017062:	3728      	adds	r7, #40	; 0x28
 8017064:	46bd      	mov	sp, r7
 8017066:	bd80      	pop	{r7, pc}
 8017068:	0802c018 	.word	0x0802c018
 801706c:	0802c2f4 	.word	0x0802c2f4
 8017070:	0802c05c 	.word	0x0802c05c
 8017074:	0802c310 	.word	0x0802c310
 8017078:	0802c32c 	.word	0x0802c32c
 801707c:	24008674 	.word	0x24008674
 8017080:	24008668 	.word	0x24008668
 8017084:	24008664 	.word	0x24008664

08017088 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8017088:	b5b0      	push	{r4, r5, r7, lr}
 801708a:	b090      	sub	sp, #64	; 0x40
 801708c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801708e:	2300      	movs	r3, #0
 8017090:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8017094:	4b94      	ldr	r3, [pc, #592]	; (80172e8 <tcp_slowtmr+0x260>)
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	3301      	adds	r3, #1
 801709a:	4a93      	ldr	r2, [pc, #588]	; (80172e8 <tcp_slowtmr+0x260>)
 801709c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801709e:	4b93      	ldr	r3, [pc, #588]	; (80172ec <tcp_slowtmr+0x264>)
 80170a0:	781b      	ldrb	r3, [r3, #0]
 80170a2:	3301      	adds	r3, #1
 80170a4:	b2da      	uxtb	r2, r3
 80170a6:	4b91      	ldr	r3, [pc, #580]	; (80172ec <tcp_slowtmr+0x264>)
 80170a8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80170aa:	2300      	movs	r3, #0
 80170ac:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80170ae:	4b90      	ldr	r3, [pc, #576]	; (80172f0 <tcp_slowtmr+0x268>)
 80170b0:	681b      	ldr	r3, [r3, #0]
 80170b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80170b4:	e29d      	b.n	80175f2 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80170b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170b8:	7d1b      	ldrb	r3, [r3, #20]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d106      	bne.n	80170cc <tcp_slowtmr+0x44>
 80170be:	4b8d      	ldr	r3, [pc, #564]	; (80172f4 <tcp_slowtmr+0x26c>)
 80170c0:	f240 42be 	movw	r2, #1214	; 0x4be
 80170c4:	498c      	ldr	r1, [pc, #560]	; (80172f8 <tcp_slowtmr+0x270>)
 80170c6:	488d      	ldr	r0, [pc, #564]	; (80172fc <tcp_slowtmr+0x274>)
 80170c8:	f00f ff04 	bl	8026ed4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80170cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170ce:	7d1b      	ldrb	r3, [r3, #20]
 80170d0:	2b01      	cmp	r3, #1
 80170d2:	d106      	bne.n	80170e2 <tcp_slowtmr+0x5a>
 80170d4:	4b87      	ldr	r3, [pc, #540]	; (80172f4 <tcp_slowtmr+0x26c>)
 80170d6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80170da:	4989      	ldr	r1, [pc, #548]	; (8017300 <tcp_slowtmr+0x278>)
 80170dc:	4887      	ldr	r0, [pc, #540]	; (80172fc <tcp_slowtmr+0x274>)
 80170de:	f00f fef9 	bl	8026ed4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80170e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170e4:	7d1b      	ldrb	r3, [r3, #20]
 80170e6:	2b0a      	cmp	r3, #10
 80170e8:	d106      	bne.n	80170f8 <tcp_slowtmr+0x70>
 80170ea:	4b82      	ldr	r3, [pc, #520]	; (80172f4 <tcp_slowtmr+0x26c>)
 80170ec:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80170f0:	4984      	ldr	r1, [pc, #528]	; (8017304 <tcp_slowtmr+0x27c>)
 80170f2:	4882      	ldr	r0, [pc, #520]	; (80172fc <tcp_slowtmr+0x274>)
 80170f4:	f00f feee 	bl	8026ed4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80170f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170fa:	7f9a      	ldrb	r2, [r3, #30]
 80170fc:	4b7b      	ldr	r3, [pc, #492]	; (80172ec <tcp_slowtmr+0x264>)
 80170fe:	781b      	ldrb	r3, [r3, #0]
 8017100:	429a      	cmp	r2, r3
 8017102:	d105      	bne.n	8017110 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8017104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017106:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8017108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801710a:	68db      	ldr	r3, [r3, #12]
 801710c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 801710e:	e270      	b.n	80175f2 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8017110:	4b76      	ldr	r3, [pc, #472]	; (80172ec <tcp_slowtmr+0x264>)
 8017112:	781a      	ldrb	r2, [r3, #0]
 8017114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017116:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8017118:	2300      	movs	r3, #0
 801711a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801711e:	2300      	movs	r3, #0
 8017120:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8017124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017126:	7d1b      	ldrb	r3, [r3, #20]
 8017128:	2b02      	cmp	r3, #2
 801712a:	d10a      	bne.n	8017142 <tcp_slowtmr+0xba>
 801712c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801712e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017132:	2b05      	cmp	r3, #5
 8017134:	d905      	bls.n	8017142 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8017136:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801713a:	3301      	adds	r3, #1
 801713c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017140:	e11e      	b.n	8017380 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8017142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017144:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017148:	2b0b      	cmp	r3, #11
 801714a:	d905      	bls.n	8017158 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 801714c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017150:	3301      	adds	r3, #1
 8017152:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017156:	e113      	b.n	8017380 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8017158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801715a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801715e:	2b00      	cmp	r3, #0
 8017160:	d075      	beq.n	801724e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8017162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017166:	2b00      	cmp	r3, #0
 8017168:	d006      	beq.n	8017178 <tcp_slowtmr+0xf0>
 801716a:	4b62      	ldr	r3, [pc, #392]	; (80172f4 <tcp_slowtmr+0x26c>)
 801716c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8017170:	4965      	ldr	r1, [pc, #404]	; (8017308 <tcp_slowtmr+0x280>)
 8017172:	4862      	ldr	r0, [pc, #392]	; (80172fc <tcp_slowtmr+0x274>)
 8017174:	f00f feae 	bl	8026ed4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8017178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801717a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801717c:	2b00      	cmp	r3, #0
 801717e:	d106      	bne.n	801718e <tcp_slowtmr+0x106>
 8017180:	4b5c      	ldr	r3, [pc, #368]	; (80172f4 <tcp_slowtmr+0x26c>)
 8017182:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8017186:	4961      	ldr	r1, [pc, #388]	; (801730c <tcp_slowtmr+0x284>)
 8017188:	485c      	ldr	r0, [pc, #368]	; (80172fc <tcp_slowtmr+0x274>)
 801718a:	f00f fea3 	bl	8026ed4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801718e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017190:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8017194:	2b0b      	cmp	r3, #11
 8017196:	d905      	bls.n	80171a4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8017198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801719c:	3301      	adds	r3, #1
 801719e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80171a2:	e0ed      	b.n	8017380 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80171a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171a6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80171aa:	3b01      	subs	r3, #1
 80171ac:	4a58      	ldr	r2, [pc, #352]	; (8017310 <tcp_slowtmr+0x288>)
 80171ae:	5cd3      	ldrb	r3, [r2, r3]
 80171b0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80171b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171b4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80171b8:	7c7a      	ldrb	r2, [r7, #17]
 80171ba:	429a      	cmp	r2, r3
 80171bc:	d907      	bls.n	80171ce <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80171be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171c0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80171c4:	3301      	adds	r3, #1
 80171c6:	b2da      	uxtb	r2, r3
 80171c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171ca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80171ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171d0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80171d4:	7c7a      	ldrb	r2, [r7, #17]
 80171d6:	429a      	cmp	r2, r3
 80171d8:	f200 80d2 	bhi.w	8017380 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80171dc:	2301      	movs	r3, #1
 80171de:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80171e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d108      	bne.n	80171fc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80171ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80171ec:	f005 f94c 	bl	801c488 <tcp_zero_window_probe>
 80171f0:	4603      	mov	r3, r0
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d014      	beq.n	8017220 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80171f6:	2300      	movs	r3, #0
 80171f8:	623b      	str	r3, [r7, #32]
 80171fa:	e011      	b.n	8017220 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80171fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017202:	4619      	mov	r1, r3
 8017204:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017206:	f004 f811 	bl	801b22c <tcp_split_unsent_seg>
 801720a:	4603      	mov	r3, r0
 801720c:	2b00      	cmp	r3, #0
 801720e:	d107      	bne.n	8017220 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8017210:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017212:	f004 fa91 	bl	801b738 <tcp_output>
 8017216:	4603      	mov	r3, r0
 8017218:	2b00      	cmp	r3, #0
 801721a:	d101      	bne.n	8017220 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 801721c:	2300      	movs	r3, #0
 801721e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8017220:	6a3b      	ldr	r3, [r7, #32]
 8017222:	2b00      	cmp	r3, #0
 8017224:	f000 80ac 	beq.w	8017380 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8017228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801722a:	2200      	movs	r2, #0
 801722c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8017230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017232:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017236:	2b06      	cmp	r3, #6
 8017238:	f200 80a2 	bhi.w	8017380 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 801723c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801723e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017242:	3301      	adds	r3, #1
 8017244:	b2da      	uxtb	r2, r3
 8017246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017248:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 801724c:	e098      	b.n	8017380 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801724e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017250:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017254:	2b00      	cmp	r3, #0
 8017256:	db0f      	blt.n	8017278 <tcp_slowtmr+0x1f0>
 8017258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801725a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801725e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017262:	4293      	cmp	r3, r2
 8017264:	d008      	beq.n	8017278 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8017266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017268:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801726c:	b29b      	uxth	r3, r3
 801726e:	3301      	adds	r3, #1
 8017270:	b29b      	uxth	r3, r3
 8017272:	b21a      	sxth	r2, r3
 8017274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017276:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8017278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801727a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801727e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017280:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8017284:	429a      	cmp	r2, r3
 8017286:	db7b      	blt.n	8017380 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8017288:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801728a:	f004 fd47 	bl	801bd1c <tcp_rexmit_rto_prepare>
 801728e:	4603      	mov	r3, r0
 8017290:	2b00      	cmp	r3, #0
 8017292:	d007      	beq.n	80172a4 <tcp_slowtmr+0x21c>
 8017294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017298:	2b00      	cmp	r3, #0
 801729a:	d171      	bne.n	8017380 <tcp_slowtmr+0x2f8>
 801729c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801729e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d06d      	beq.n	8017380 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80172a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172a6:	7d1b      	ldrb	r3, [r3, #20]
 80172a8:	2b02      	cmp	r3, #2
 80172aa:	d03a      	beq.n	8017322 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80172ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80172b2:	2b0c      	cmp	r3, #12
 80172b4:	bf28      	it	cs
 80172b6:	230c      	movcs	r3, #12
 80172b8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80172ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80172c0:	10db      	asrs	r3, r3, #3
 80172c2:	b21b      	sxth	r3, r3
 80172c4:	461a      	mov	r2, r3
 80172c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172c8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80172cc:	4413      	add	r3, r2
 80172ce:	7efa      	ldrb	r2, [r7, #27]
 80172d0:	4910      	ldr	r1, [pc, #64]	; (8017314 <tcp_slowtmr+0x28c>)
 80172d2:	5c8a      	ldrb	r2, [r1, r2]
 80172d4:	4093      	lsls	r3, r2
 80172d6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80172d8:	697b      	ldr	r3, [r7, #20]
 80172da:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80172de:	4293      	cmp	r3, r2
 80172e0:	dc1a      	bgt.n	8017318 <tcp_slowtmr+0x290>
 80172e2:	697b      	ldr	r3, [r7, #20]
 80172e4:	b21a      	sxth	r2, r3
 80172e6:	e019      	b.n	801731c <tcp_slowtmr+0x294>
 80172e8:	2400866c 	.word	0x2400866c
 80172ec:	24004f8a 	.word	0x24004f8a
 80172f0:	24008668 	.word	0x24008668
 80172f4:	0802c018 	.word	0x0802c018
 80172f8:	0802c35c 	.word	0x0802c35c
 80172fc:	0802c05c 	.word	0x0802c05c
 8017300:	0802c388 	.word	0x0802c388
 8017304:	0802c3b4 	.word	0x0802c3b4
 8017308:	0802c3e4 	.word	0x0802c3e4
 801730c:	0802c418 	.word	0x0802c418
 8017310:	0802ec18 	.word	0x0802ec18
 8017314:	0802ec08 	.word	0x0802ec08
 8017318:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801731c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801731e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8017322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017324:	2200      	movs	r2, #0
 8017326:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8017328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801732a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801732e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017330:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017334:	4293      	cmp	r3, r2
 8017336:	bf28      	it	cs
 8017338:	4613      	movcs	r3, r2
 801733a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801733c:	8a7b      	ldrh	r3, [r7, #18]
 801733e:	085b      	lsrs	r3, r3, #1
 8017340:	b29a      	uxth	r2, r3
 8017342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017344:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8017348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801734a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801734e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017350:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017352:	005b      	lsls	r3, r3, #1
 8017354:	b29b      	uxth	r3, r3
 8017356:	429a      	cmp	r2, r3
 8017358:	d206      	bcs.n	8017368 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801735a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801735c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801735e:	005b      	lsls	r3, r3, #1
 8017360:	b29a      	uxth	r2, r3
 8017362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017364:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8017368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801736a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801736c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801736e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8017372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017374:	2200      	movs	r2, #0
 8017376:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801737a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801737c:	f004 fd3e 	bl	801bdfc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8017380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017382:	7d1b      	ldrb	r3, [r3, #20]
 8017384:	2b06      	cmp	r3, #6
 8017386:	d111      	bne.n	80173ac <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8017388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801738a:	8b5b      	ldrh	r3, [r3, #26]
 801738c:	f003 0310 	and.w	r3, r3, #16
 8017390:	2b00      	cmp	r3, #0
 8017392:	d00b      	beq.n	80173ac <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017394:	4b9c      	ldr	r3, [pc, #624]	; (8017608 <tcp_slowtmr+0x580>)
 8017396:	681a      	ldr	r2, [r3, #0]
 8017398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801739a:	6a1b      	ldr	r3, [r3, #32]
 801739c:	1ad3      	subs	r3, r2, r3
 801739e:	2b28      	cmp	r3, #40	; 0x28
 80173a0:	d904      	bls.n	80173ac <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80173a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80173a6:	3301      	adds	r3, #1
 80173a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80173ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173ae:	7a5b      	ldrb	r3, [r3, #9]
 80173b0:	f003 0308 	and.w	r3, r3, #8
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d04a      	beq.n	801744e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80173b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173ba:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80173bc:	2b04      	cmp	r3, #4
 80173be:	d003      	beq.n	80173c8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80173c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173c2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80173c4:	2b07      	cmp	r3, #7
 80173c6:	d142      	bne.n	801744e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80173c8:	4b8f      	ldr	r3, [pc, #572]	; (8017608 <tcp_slowtmr+0x580>)
 80173ca:	681a      	ldr	r2, [r3, #0]
 80173cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173ce:	6a1b      	ldr	r3, [r3, #32]
 80173d0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80173d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173d4:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80173d8:	4b8c      	ldr	r3, [pc, #560]	; (801760c <tcp_slowtmr+0x584>)
 80173da:	440b      	add	r3, r1
 80173dc:	498c      	ldr	r1, [pc, #560]	; (8017610 <tcp_slowtmr+0x588>)
 80173de:	fba1 1303 	umull	r1, r3, r1, r3
 80173e2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80173e4:	429a      	cmp	r2, r3
 80173e6:	d90a      	bls.n	80173fe <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80173e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80173ec:	3301      	adds	r3, #1
 80173ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80173f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80173f6:	3301      	adds	r3, #1
 80173f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80173fc:	e027      	b.n	801744e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80173fe:	4b82      	ldr	r3, [pc, #520]	; (8017608 <tcp_slowtmr+0x580>)
 8017400:	681a      	ldr	r2, [r3, #0]
 8017402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017404:	6a1b      	ldr	r3, [r3, #32]
 8017406:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8017408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801740a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801740e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017410:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8017414:	4618      	mov	r0, r3
 8017416:	4b7f      	ldr	r3, [pc, #508]	; (8017614 <tcp_slowtmr+0x58c>)
 8017418:	fb03 f300 	mul.w	r3, r3, r0
 801741c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801741e:	497c      	ldr	r1, [pc, #496]	; (8017610 <tcp_slowtmr+0x588>)
 8017420:	fba1 1303 	umull	r1, r3, r1, r3
 8017424:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017426:	429a      	cmp	r2, r3
 8017428:	d911      	bls.n	801744e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 801742a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801742c:	f004 ffec 	bl	801c408 <tcp_keepalive>
 8017430:	4603      	mov	r3, r0
 8017432:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8017436:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801743a:	2b00      	cmp	r3, #0
 801743c:	d107      	bne.n	801744e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 801743e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017440:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8017444:	3301      	adds	r3, #1
 8017446:	b2da      	uxtb	r2, r3
 8017448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801744a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801744e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017452:	2b00      	cmp	r3, #0
 8017454:	d011      	beq.n	801747a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8017456:	4b6c      	ldr	r3, [pc, #432]	; (8017608 <tcp_slowtmr+0x580>)
 8017458:	681a      	ldr	r2, [r3, #0]
 801745a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801745c:	6a1b      	ldr	r3, [r3, #32]
 801745e:	1ad2      	subs	r2, r2, r3
 8017460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017462:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8017466:	4619      	mov	r1, r3
 8017468:	460b      	mov	r3, r1
 801746a:	005b      	lsls	r3, r3, #1
 801746c:	440b      	add	r3, r1
 801746e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8017470:	429a      	cmp	r2, r3
 8017472:	d302      	bcc.n	801747a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8017474:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017476:	f000 feab 	bl	80181d0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801747a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801747c:	7d1b      	ldrb	r3, [r3, #20]
 801747e:	2b03      	cmp	r3, #3
 8017480:	d10b      	bne.n	801749a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017482:	4b61      	ldr	r3, [pc, #388]	; (8017608 <tcp_slowtmr+0x580>)
 8017484:	681a      	ldr	r2, [r3, #0]
 8017486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017488:	6a1b      	ldr	r3, [r3, #32]
 801748a:	1ad3      	subs	r3, r2, r3
 801748c:	2b28      	cmp	r3, #40	; 0x28
 801748e:	d904      	bls.n	801749a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8017490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017494:	3301      	adds	r3, #1
 8017496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801749a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801749c:	7d1b      	ldrb	r3, [r3, #20]
 801749e:	2b09      	cmp	r3, #9
 80174a0:	d10b      	bne.n	80174ba <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80174a2:	4b59      	ldr	r3, [pc, #356]	; (8017608 <tcp_slowtmr+0x580>)
 80174a4:	681a      	ldr	r2, [r3, #0]
 80174a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174a8:	6a1b      	ldr	r3, [r3, #32]
 80174aa:	1ad3      	subs	r3, r2, r3
 80174ac:	2bf0      	cmp	r3, #240	; 0xf0
 80174ae:	d904      	bls.n	80174ba <tcp_slowtmr+0x432>
        ++pcb_remove;
 80174b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80174b4:	3301      	adds	r3, #1
 80174b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80174ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d060      	beq.n	8017584 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80174c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80174c8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80174ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80174cc:	f000 fccc 	bl	8017e68 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80174d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d010      	beq.n	80174f8 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80174d6:	4b50      	ldr	r3, [pc, #320]	; (8017618 <tcp_slowtmr+0x590>)
 80174d8:	681b      	ldr	r3, [r3, #0]
 80174da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80174dc:	429a      	cmp	r2, r3
 80174de:	d106      	bne.n	80174ee <tcp_slowtmr+0x466>
 80174e0:	4b4e      	ldr	r3, [pc, #312]	; (801761c <tcp_slowtmr+0x594>)
 80174e2:	f240 526d 	movw	r2, #1389	; 0x56d
 80174e6:	494e      	ldr	r1, [pc, #312]	; (8017620 <tcp_slowtmr+0x598>)
 80174e8:	484e      	ldr	r0, [pc, #312]	; (8017624 <tcp_slowtmr+0x59c>)
 80174ea:	f00f fcf3 	bl	8026ed4 <iprintf>
        prev->next = pcb->next;
 80174ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174f0:	68da      	ldr	r2, [r3, #12]
 80174f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174f4:	60da      	str	r2, [r3, #12]
 80174f6:	e00f      	b.n	8017518 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80174f8:	4b47      	ldr	r3, [pc, #284]	; (8017618 <tcp_slowtmr+0x590>)
 80174fa:	681b      	ldr	r3, [r3, #0]
 80174fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80174fe:	429a      	cmp	r2, r3
 8017500:	d006      	beq.n	8017510 <tcp_slowtmr+0x488>
 8017502:	4b46      	ldr	r3, [pc, #280]	; (801761c <tcp_slowtmr+0x594>)
 8017504:	f240 5271 	movw	r2, #1393	; 0x571
 8017508:	4947      	ldr	r1, [pc, #284]	; (8017628 <tcp_slowtmr+0x5a0>)
 801750a:	4846      	ldr	r0, [pc, #280]	; (8017624 <tcp_slowtmr+0x59c>)
 801750c:	f00f fce2 	bl	8026ed4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8017510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017512:	68db      	ldr	r3, [r3, #12]
 8017514:	4a40      	ldr	r2, [pc, #256]	; (8017618 <tcp_slowtmr+0x590>)
 8017516:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8017518:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801751c:	2b00      	cmp	r3, #0
 801751e:	d013      	beq.n	8017548 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8017520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017522:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8017524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017526:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017528:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801752a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801752c:	3304      	adds	r3, #4
 801752e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017530:	8ad2      	ldrh	r2, [r2, #22]
 8017532:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017534:	8b09      	ldrh	r1, [r1, #24]
 8017536:	9102      	str	r1, [sp, #8]
 8017538:	9201      	str	r2, [sp, #4]
 801753a:	9300      	str	r3, [sp, #0]
 801753c:	462b      	mov	r3, r5
 801753e:	4622      	mov	r2, r4
 8017540:	4601      	mov	r1, r0
 8017542:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017544:	f004 feac 	bl	801c2a0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8017548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801754a:	691b      	ldr	r3, [r3, #16]
 801754c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801754e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017550:	7d1b      	ldrb	r3, [r3, #20]
 8017552:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8017554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017556:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8017558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801755a:	68db      	ldr	r3, [r3, #12]
 801755c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801755e:	6838      	ldr	r0, [r7, #0]
 8017560:	f7fe fed8 	bl	8016314 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8017564:	4b31      	ldr	r3, [pc, #196]	; (801762c <tcp_slowtmr+0x5a4>)
 8017566:	2200      	movs	r2, #0
 8017568:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801756a:	68fb      	ldr	r3, [r7, #12]
 801756c:	2b00      	cmp	r3, #0
 801756e:	d004      	beq.n	801757a <tcp_slowtmr+0x4f2>
 8017570:	68fb      	ldr	r3, [r7, #12]
 8017572:	f06f 010c 	mvn.w	r1, #12
 8017576:	68b8      	ldr	r0, [r7, #8]
 8017578:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801757a:	4b2c      	ldr	r3, [pc, #176]	; (801762c <tcp_slowtmr+0x5a4>)
 801757c:	781b      	ldrb	r3, [r3, #0]
 801757e:	2b00      	cmp	r3, #0
 8017580:	d037      	beq.n	80175f2 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8017582:	e592      	b.n	80170aa <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8017584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017586:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8017588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801758a:	68db      	ldr	r3, [r3, #12]
 801758c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801758e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017590:	7f1b      	ldrb	r3, [r3, #28]
 8017592:	3301      	adds	r3, #1
 8017594:	b2da      	uxtb	r2, r3
 8017596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017598:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801759a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801759c:	7f1a      	ldrb	r2, [r3, #28]
 801759e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175a0:	7f5b      	ldrb	r3, [r3, #29]
 80175a2:	429a      	cmp	r2, r3
 80175a4:	d325      	bcc.n	80175f2 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80175a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175a8:	2200      	movs	r2, #0
 80175aa:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80175ac:	4b1f      	ldr	r3, [pc, #124]	; (801762c <tcp_slowtmr+0x5a4>)
 80175ae:	2200      	movs	r2, #0
 80175b0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80175b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d00b      	beq.n	80175d4 <tcp_slowtmr+0x54c>
 80175bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80175c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80175c4:	6912      	ldr	r2, [r2, #16]
 80175c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80175c8:	4610      	mov	r0, r2
 80175ca:	4798      	blx	r3
 80175cc:	4603      	mov	r3, r0
 80175ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80175d2:	e002      	b.n	80175da <tcp_slowtmr+0x552>
 80175d4:	2300      	movs	r3, #0
 80175d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80175da:	4b14      	ldr	r3, [pc, #80]	; (801762c <tcp_slowtmr+0x5a4>)
 80175dc:	781b      	ldrb	r3, [r3, #0]
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d000      	beq.n	80175e4 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80175e2:	e562      	b.n	80170aa <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80175e4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d102      	bne.n	80175f2 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80175ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80175ee:	f004 f8a3 	bl	801b738 <tcp_output>
  while (pcb != NULL) {
 80175f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	f47f ad5e 	bne.w	80170b6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80175fa:	2300      	movs	r3, #0
 80175fc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80175fe:	4b0c      	ldr	r3, [pc, #48]	; (8017630 <tcp_slowtmr+0x5a8>)
 8017600:	681b      	ldr	r3, [r3, #0]
 8017602:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8017604:	e069      	b.n	80176da <tcp_slowtmr+0x652>
 8017606:	bf00      	nop
 8017608:	2400866c 	.word	0x2400866c
 801760c:	000a4cb8 	.word	0x000a4cb8
 8017610:	10624dd3 	.word	0x10624dd3
 8017614:	000124f8 	.word	0x000124f8
 8017618:	24008668 	.word	0x24008668
 801761c:	0802c018 	.word	0x0802c018
 8017620:	0802c450 	.word	0x0802c450
 8017624:	0802c05c 	.word	0x0802c05c
 8017628:	0802c47c 	.word	0x0802c47c
 801762c:	24008664 	.word	0x24008664
 8017630:	24008678 	.word	0x24008678
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017636:	7d1b      	ldrb	r3, [r3, #20]
 8017638:	2b0a      	cmp	r3, #10
 801763a:	d006      	beq.n	801764a <tcp_slowtmr+0x5c2>
 801763c:	4b2b      	ldr	r3, [pc, #172]	; (80176ec <tcp_slowtmr+0x664>)
 801763e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8017642:	492b      	ldr	r1, [pc, #172]	; (80176f0 <tcp_slowtmr+0x668>)
 8017644:	482b      	ldr	r0, [pc, #172]	; (80176f4 <tcp_slowtmr+0x66c>)
 8017646:	f00f fc45 	bl	8026ed4 <iprintf>
    pcb_remove = 0;
 801764a:	2300      	movs	r3, #0
 801764c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8017650:	4b29      	ldr	r3, [pc, #164]	; (80176f8 <tcp_slowtmr+0x670>)
 8017652:	681a      	ldr	r2, [r3, #0]
 8017654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017656:	6a1b      	ldr	r3, [r3, #32]
 8017658:	1ad3      	subs	r3, r2, r3
 801765a:	2bf0      	cmp	r3, #240	; 0xf0
 801765c:	d904      	bls.n	8017668 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801765e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017662:	3301      	adds	r3, #1
 8017664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8017668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801766c:	2b00      	cmp	r3, #0
 801766e:	d02f      	beq.n	80176d0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8017670:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017672:	f000 fbf9 	bl	8017e68 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8017676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017678:	2b00      	cmp	r3, #0
 801767a:	d010      	beq.n	801769e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801767c:	4b1f      	ldr	r3, [pc, #124]	; (80176fc <tcp_slowtmr+0x674>)
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017682:	429a      	cmp	r2, r3
 8017684:	d106      	bne.n	8017694 <tcp_slowtmr+0x60c>
 8017686:	4b19      	ldr	r3, [pc, #100]	; (80176ec <tcp_slowtmr+0x664>)
 8017688:	f240 52af 	movw	r2, #1455	; 0x5af
 801768c:	491c      	ldr	r1, [pc, #112]	; (8017700 <tcp_slowtmr+0x678>)
 801768e:	4819      	ldr	r0, [pc, #100]	; (80176f4 <tcp_slowtmr+0x66c>)
 8017690:	f00f fc20 	bl	8026ed4 <iprintf>
        prev->next = pcb->next;
 8017694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017696:	68da      	ldr	r2, [r3, #12]
 8017698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801769a:	60da      	str	r2, [r3, #12]
 801769c:	e00f      	b.n	80176be <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801769e:	4b17      	ldr	r3, [pc, #92]	; (80176fc <tcp_slowtmr+0x674>)
 80176a0:	681b      	ldr	r3, [r3, #0]
 80176a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80176a4:	429a      	cmp	r2, r3
 80176a6:	d006      	beq.n	80176b6 <tcp_slowtmr+0x62e>
 80176a8:	4b10      	ldr	r3, [pc, #64]	; (80176ec <tcp_slowtmr+0x664>)
 80176aa:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80176ae:	4915      	ldr	r1, [pc, #84]	; (8017704 <tcp_slowtmr+0x67c>)
 80176b0:	4810      	ldr	r0, [pc, #64]	; (80176f4 <tcp_slowtmr+0x66c>)
 80176b2:	f00f fc0f 	bl	8026ed4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80176b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176b8:	68db      	ldr	r3, [r3, #12]
 80176ba:	4a10      	ldr	r2, [pc, #64]	; (80176fc <tcp_slowtmr+0x674>)
 80176bc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80176be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176c0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80176c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176c4:	68db      	ldr	r3, [r3, #12]
 80176c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80176c8:	69f8      	ldr	r0, [r7, #28]
 80176ca:	f7fe fe23 	bl	8016314 <tcp_free>
 80176ce:	e004      	b.n	80176da <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80176d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176d2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80176d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176d6:	68db      	ldr	r3, [r3, #12]
 80176d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80176da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d1a9      	bne.n	8017634 <tcp_slowtmr+0x5ac>
    }
  }
}
 80176e0:	bf00      	nop
 80176e2:	bf00      	nop
 80176e4:	3730      	adds	r7, #48	; 0x30
 80176e6:	46bd      	mov	sp, r7
 80176e8:	bdb0      	pop	{r4, r5, r7, pc}
 80176ea:	bf00      	nop
 80176ec:	0802c018 	.word	0x0802c018
 80176f0:	0802c4a8 	.word	0x0802c4a8
 80176f4:	0802c05c 	.word	0x0802c05c
 80176f8:	2400866c 	.word	0x2400866c
 80176fc:	24008678 	.word	0x24008678
 8017700:	0802c4d8 	.word	0x0802c4d8
 8017704:	0802c500 	.word	0x0802c500

08017708 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8017708:	b580      	push	{r7, lr}
 801770a:	b082      	sub	sp, #8
 801770c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801770e:	4b2d      	ldr	r3, [pc, #180]	; (80177c4 <tcp_fasttmr+0xbc>)
 8017710:	781b      	ldrb	r3, [r3, #0]
 8017712:	3301      	adds	r3, #1
 8017714:	b2da      	uxtb	r2, r3
 8017716:	4b2b      	ldr	r3, [pc, #172]	; (80177c4 <tcp_fasttmr+0xbc>)
 8017718:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801771a:	4b2b      	ldr	r3, [pc, #172]	; (80177c8 <tcp_fasttmr+0xc0>)
 801771c:	681b      	ldr	r3, [r3, #0]
 801771e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8017720:	e048      	b.n	80177b4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	7f9a      	ldrb	r2, [r3, #30]
 8017726:	4b27      	ldr	r3, [pc, #156]	; (80177c4 <tcp_fasttmr+0xbc>)
 8017728:	781b      	ldrb	r3, [r3, #0]
 801772a:	429a      	cmp	r2, r3
 801772c:	d03f      	beq.n	80177ae <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801772e:	4b25      	ldr	r3, [pc, #148]	; (80177c4 <tcp_fasttmr+0xbc>)
 8017730:	781a      	ldrb	r2, [r3, #0]
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	8b5b      	ldrh	r3, [r3, #26]
 801773a:	f003 0301 	and.w	r3, r3, #1
 801773e:	2b00      	cmp	r3, #0
 8017740:	d010      	beq.n	8017764 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	8b5b      	ldrh	r3, [r3, #26]
 8017746:	f043 0302 	orr.w	r3, r3, #2
 801774a:	b29a      	uxth	r2, r3
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8017750:	6878      	ldr	r0, [r7, #4]
 8017752:	f003 fff1 	bl	801b738 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	8b5b      	ldrh	r3, [r3, #26]
 801775a:	f023 0303 	bic.w	r3, r3, #3
 801775e:	b29a      	uxth	r2, r3
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	8b5b      	ldrh	r3, [r3, #26]
 8017768:	f003 0308 	and.w	r3, r3, #8
 801776c:	2b00      	cmp	r3, #0
 801776e:	d009      	beq.n	8017784 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	8b5b      	ldrh	r3, [r3, #26]
 8017774:	f023 0308 	bic.w	r3, r3, #8
 8017778:	b29a      	uxth	r2, r3
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801777e:	6878      	ldr	r0, [r7, #4]
 8017780:	f7fe ff5c 	bl	801663c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	68db      	ldr	r3, [r3, #12]
 8017788:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801778e:	2b00      	cmp	r3, #0
 8017790:	d00a      	beq.n	80177a8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8017792:	4b0e      	ldr	r3, [pc, #56]	; (80177cc <tcp_fasttmr+0xc4>)
 8017794:	2200      	movs	r2, #0
 8017796:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8017798:	6878      	ldr	r0, [r7, #4]
 801779a:	f000 f819 	bl	80177d0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801779e:	4b0b      	ldr	r3, [pc, #44]	; (80177cc <tcp_fasttmr+0xc4>)
 80177a0:	781b      	ldrb	r3, [r3, #0]
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d000      	beq.n	80177a8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80177a6:	e7b8      	b.n	801771a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80177a8:	683b      	ldr	r3, [r7, #0]
 80177aa:	607b      	str	r3, [r7, #4]
 80177ac:	e002      	b.n	80177b4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	68db      	ldr	r3, [r3, #12]
 80177b2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d1b3      	bne.n	8017722 <tcp_fasttmr+0x1a>
    }
  }
}
 80177ba:	bf00      	nop
 80177bc:	bf00      	nop
 80177be:	3708      	adds	r7, #8
 80177c0:	46bd      	mov	sp, r7
 80177c2:	bd80      	pop	{r7, pc}
 80177c4:	24004f8a 	.word	0x24004f8a
 80177c8:	24008668 	.word	0x24008668
 80177cc:	24008664 	.word	0x24008664

080177d0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80177d0:	b590      	push	{r4, r7, lr}
 80177d2:	b085      	sub	sp, #20
 80177d4:	af00      	add	r7, sp, #0
 80177d6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d109      	bne.n	80177f2 <tcp_process_refused_data+0x22>
 80177de:	4b37      	ldr	r3, [pc, #220]	; (80178bc <tcp_process_refused_data+0xec>)
 80177e0:	f240 6209 	movw	r2, #1545	; 0x609
 80177e4:	4936      	ldr	r1, [pc, #216]	; (80178c0 <tcp_process_refused_data+0xf0>)
 80177e6:	4837      	ldr	r0, [pc, #220]	; (80178c4 <tcp_process_refused_data+0xf4>)
 80177e8:	f00f fb74 	bl	8026ed4 <iprintf>
 80177ec:	f06f 030f 	mvn.w	r3, #15
 80177f0:	e060      	b.n	80178b4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80177f6:	7b5b      	ldrb	r3, [r3, #13]
 80177f8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80177fe:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	2200      	movs	r2, #0
 8017804:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801780c:	2b00      	cmp	r3, #0
 801780e:	d00b      	beq.n	8017828 <tcp_process_refused_data+0x58>
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	6918      	ldr	r0, [r3, #16]
 801781a:	2300      	movs	r3, #0
 801781c:	68ba      	ldr	r2, [r7, #8]
 801781e:	6879      	ldr	r1, [r7, #4]
 8017820:	47a0      	blx	r4
 8017822:	4603      	mov	r3, r0
 8017824:	73fb      	strb	r3, [r7, #15]
 8017826:	e007      	b.n	8017838 <tcp_process_refused_data+0x68>
 8017828:	2300      	movs	r3, #0
 801782a:	68ba      	ldr	r2, [r7, #8]
 801782c:	6879      	ldr	r1, [r7, #4]
 801782e:	2000      	movs	r0, #0
 8017830:	f000 f8a4 	bl	801797c <tcp_recv_null>
 8017834:	4603      	mov	r3, r0
 8017836:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8017838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801783c:	2b00      	cmp	r3, #0
 801783e:	d12a      	bne.n	8017896 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8017840:	7bbb      	ldrb	r3, [r7, #14]
 8017842:	f003 0320 	and.w	r3, r3, #32
 8017846:	2b00      	cmp	r3, #0
 8017848:	d033      	beq.n	80178b2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801784e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8017852:	d005      	beq.n	8017860 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017858:	3301      	adds	r3, #1
 801785a:	b29a      	uxth	r2, r3
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017866:	2b00      	cmp	r3, #0
 8017868:	d00b      	beq.n	8017882 <tcp_process_refused_data+0xb2>
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	6918      	ldr	r0, [r3, #16]
 8017874:	2300      	movs	r3, #0
 8017876:	2200      	movs	r2, #0
 8017878:	6879      	ldr	r1, [r7, #4]
 801787a:	47a0      	blx	r4
 801787c:	4603      	mov	r3, r0
 801787e:	73fb      	strb	r3, [r7, #15]
 8017880:	e001      	b.n	8017886 <tcp_process_refused_data+0xb6>
 8017882:	2300      	movs	r3, #0
 8017884:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8017886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801788a:	f113 0f0d 	cmn.w	r3, #13
 801788e:	d110      	bne.n	80178b2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8017890:	f06f 030c 	mvn.w	r3, #12
 8017894:	e00e      	b.n	80178b4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8017896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801789a:	f113 0f0d 	cmn.w	r3, #13
 801789e:	d102      	bne.n	80178a6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80178a0:	f06f 030c 	mvn.w	r3, #12
 80178a4:	e006      	b.n	80178b4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	68ba      	ldr	r2, [r7, #8]
 80178aa:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80178ac:	f06f 0304 	mvn.w	r3, #4
 80178b0:	e000      	b.n	80178b4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80178b2:	2300      	movs	r3, #0
}
 80178b4:	4618      	mov	r0, r3
 80178b6:	3714      	adds	r7, #20
 80178b8:	46bd      	mov	sp, r7
 80178ba:	bd90      	pop	{r4, r7, pc}
 80178bc:	0802c018 	.word	0x0802c018
 80178c0:	0802c528 	.word	0x0802c528
 80178c4:	0802c05c 	.word	0x0802c05c

080178c8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80178c8:	b580      	push	{r7, lr}
 80178ca:	b084      	sub	sp, #16
 80178cc:	af00      	add	r7, sp, #0
 80178ce:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80178d0:	e007      	b.n	80178e2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	681b      	ldr	r3, [r3, #0]
 80178d6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80178d8:	6878      	ldr	r0, [r7, #4]
 80178da:	f000 f80a 	bl	80178f2 <tcp_seg_free>
    seg = next;
 80178de:	68fb      	ldr	r3, [r7, #12]
 80178e0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d1f4      	bne.n	80178d2 <tcp_segs_free+0xa>
  }
}
 80178e8:	bf00      	nop
 80178ea:	bf00      	nop
 80178ec:	3710      	adds	r7, #16
 80178ee:	46bd      	mov	sp, r7
 80178f0:	bd80      	pop	{r7, pc}

080178f2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80178f2:	b580      	push	{r7, lr}
 80178f4:	b082      	sub	sp, #8
 80178f6:	af00      	add	r7, sp, #0
 80178f8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	d00c      	beq.n	801791a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	685b      	ldr	r3, [r3, #4]
 8017904:	2b00      	cmp	r3, #0
 8017906:	d004      	beq.n	8017912 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	685b      	ldr	r3, [r3, #4]
 801790c:	4618      	mov	r0, r3
 801790e:	f7fe f8b1 	bl	8015a74 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8017912:	6879      	ldr	r1, [r7, #4]
 8017914:	2003      	movs	r0, #3
 8017916:	f7fd f9cb 	bl	8014cb0 <memp_free>
  }
}
 801791a:	bf00      	nop
 801791c:	3708      	adds	r7, #8
 801791e:	46bd      	mov	sp, r7
 8017920:	bd80      	pop	{r7, pc}
	...

08017924 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8017924:	b580      	push	{r7, lr}
 8017926:	b084      	sub	sp, #16
 8017928:	af00      	add	r7, sp, #0
 801792a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	2b00      	cmp	r3, #0
 8017930:	d106      	bne.n	8017940 <tcp_seg_copy+0x1c>
 8017932:	4b0f      	ldr	r3, [pc, #60]	; (8017970 <tcp_seg_copy+0x4c>)
 8017934:	f240 6282 	movw	r2, #1666	; 0x682
 8017938:	490e      	ldr	r1, [pc, #56]	; (8017974 <tcp_seg_copy+0x50>)
 801793a:	480f      	ldr	r0, [pc, #60]	; (8017978 <tcp_seg_copy+0x54>)
 801793c:	f00f faca 	bl	8026ed4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8017940:	2003      	movs	r0, #3
 8017942:	f7fd f93f 	bl	8014bc4 <memp_malloc>
 8017946:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8017948:	68fb      	ldr	r3, [r7, #12]
 801794a:	2b00      	cmp	r3, #0
 801794c:	d101      	bne.n	8017952 <tcp_seg_copy+0x2e>
    return NULL;
 801794e:	2300      	movs	r3, #0
 8017950:	e00a      	b.n	8017968 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8017952:	2210      	movs	r2, #16
 8017954:	6879      	ldr	r1, [r7, #4]
 8017956:	68f8      	ldr	r0, [r7, #12]
 8017958:	f00e fc36 	bl	80261c8 <memcpy>
  pbuf_ref(cseg->p);
 801795c:	68fb      	ldr	r3, [r7, #12]
 801795e:	685b      	ldr	r3, [r3, #4]
 8017960:	4618      	mov	r0, r3
 8017962:	f7fe f92d 	bl	8015bc0 <pbuf_ref>
  return cseg;
 8017966:	68fb      	ldr	r3, [r7, #12]
}
 8017968:	4618      	mov	r0, r3
 801796a:	3710      	adds	r7, #16
 801796c:	46bd      	mov	sp, r7
 801796e:	bd80      	pop	{r7, pc}
 8017970:	0802c018 	.word	0x0802c018
 8017974:	0802c56c 	.word	0x0802c56c
 8017978:	0802c05c 	.word	0x0802c05c

0801797c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801797c:	b580      	push	{r7, lr}
 801797e:	b084      	sub	sp, #16
 8017980:	af00      	add	r7, sp, #0
 8017982:	60f8      	str	r0, [r7, #12]
 8017984:	60b9      	str	r1, [r7, #8]
 8017986:	607a      	str	r2, [r7, #4]
 8017988:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801798a:	68bb      	ldr	r3, [r7, #8]
 801798c:	2b00      	cmp	r3, #0
 801798e:	d109      	bne.n	80179a4 <tcp_recv_null+0x28>
 8017990:	4b12      	ldr	r3, [pc, #72]	; (80179dc <tcp_recv_null+0x60>)
 8017992:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8017996:	4912      	ldr	r1, [pc, #72]	; (80179e0 <tcp_recv_null+0x64>)
 8017998:	4812      	ldr	r0, [pc, #72]	; (80179e4 <tcp_recv_null+0x68>)
 801799a:	f00f fa9b 	bl	8026ed4 <iprintf>
 801799e:	f06f 030f 	mvn.w	r3, #15
 80179a2:	e016      	b.n	80179d2 <tcp_recv_null+0x56>

  if (p != NULL) {
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d009      	beq.n	80179be <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	891b      	ldrh	r3, [r3, #8]
 80179ae:	4619      	mov	r1, r3
 80179b0:	68b8      	ldr	r0, [r7, #8]
 80179b2:	f7ff f9bb 	bl	8016d2c <tcp_recved>
    pbuf_free(p);
 80179b6:	6878      	ldr	r0, [r7, #4]
 80179b8:	f7fe f85c 	bl	8015a74 <pbuf_free>
 80179bc:	e008      	b.n	80179d0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80179be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d104      	bne.n	80179d0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80179c6:	68b8      	ldr	r0, [r7, #8]
 80179c8:	f7fe fea2 	bl	8016710 <tcp_close>
 80179cc:	4603      	mov	r3, r0
 80179ce:	e000      	b.n	80179d2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80179d0:	2300      	movs	r3, #0
}
 80179d2:	4618      	mov	r0, r3
 80179d4:	3710      	adds	r7, #16
 80179d6:	46bd      	mov	sp, r7
 80179d8:	bd80      	pop	{r7, pc}
 80179da:	bf00      	nop
 80179dc:	0802c018 	.word	0x0802c018
 80179e0:	0802c588 	.word	0x0802c588
 80179e4:	0802c05c 	.word	0x0802c05c

080179e8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80179e8:	b580      	push	{r7, lr}
 80179ea:	b086      	sub	sp, #24
 80179ec:	af00      	add	r7, sp, #0
 80179ee:	4603      	mov	r3, r0
 80179f0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80179f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	db01      	blt.n	80179fe <tcp_kill_prio+0x16>
 80179fa:	79fb      	ldrb	r3, [r7, #7]
 80179fc:	e000      	b.n	8017a00 <tcp_kill_prio+0x18>
 80179fe:	237f      	movs	r3, #127	; 0x7f
 8017a00:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8017a02:	7afb      	ldrb	r3, [r7, #11]
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	d034      	beq.n	8017a72 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8017a08:	7afb      	ldrb	r3, [r7, #11]
 8017a0a:	3b01      	subs	r3, #1
 8017a0c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8017a0e:	2300      	movs	r3, #0
 8017a10:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8017a12:	2300      	movs	r3, #0
 8017a14:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017a16:	4b19      	ldr	r3, [pc, #100]	; (8017a7c <tcp_kill_prio+0x94>)
 8017a18:	681b      	ldr	r3, [r3, #0]
 8017a1a:	617b      	str	r3, [r7, #20]
 8017a1c:	e01f      	b.n	8017a5e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8017a1e:	697b      	ldr	r3, [r7, #20]
 8017a20:	7d5b      	ldrb	r3, [r3, #21]
 8017a22:	7afa      	ldrb	r2, [r7, #11]
 8017a24:	429a      	cmp	r2, r3
 8017a26:	d80c      	bhi.n	8017a42 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8017a28:	697b      	ldr	r3, [r7, #20]
 8017a2a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8017a2c:	7afa      	ldrb	r2, [r7, #11]
 8017a2e:	429a      	cmp	r2, r3
 8017a30:	d112      	bne.n	8017a58 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8017a32:	4b13      	ldr	r3, [pc, #76]	; (8017a80 <tcp_kill_prio+0x98>)
 8017a34:	681a      	ldr	r2, [r3, #0]
 8017a36:	697b      	ldr	r3, [r7, #20]
 8017a38:	6a1b      	ldr	r3, [r3, #32]
 8017a3a:	1ad3      	subs	r3, r2, r3
 8017a3c:	68fa      	ldr	r2, [r7, #12]
 8017a3e:	429a      	cmp	r2, r3
 8017a40:	d80a      	bhi.n	8017a58 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8017a42:	4b0f      	ldr	r3, [pc, #60]	; (8017a80 <tcp_kill_prio+0x98>)
 8017a44:	681a      	ldr	r2, [r3, #0]
 8017a46:	697b      	ldr	r3, [r7, #20]
 8017a48:	6a1b      	ldr	r3, [r3, #32]
 8017a4a:	1ad3      	subs	r3, r2, r3
 8017a4c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8017a4e:	697b      	ldr	r3, [r7, #20]
 8017a50:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8017a52:	697b      	ldr	r3, [r7, #20]
 8017a54:	7d5b      	ldrb	r3, [r3, #21]
 8017a56:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017a58:	697b      	ldr	r3, [r7, #20]
 8017a5a:	68db      	ldr	r3, [r3, #12]
 8017a5c:	617b      	str	r3, [r7, #20]
 8017a5e:	697b      	ldr	r3, [r7, #20]
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d1dc      	bne.n	8017a1e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8017a64:	693b      	ldr	r3, [r7, #16]
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	d004      	beq.n	8017a74 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8017a6a:	6938      	ldr	r0, [r7, #16]
 8017a6c:	f7fe ff96 	bl	801699c <tcp_abort>
 8017a70:	e000      	b.n	8017a74 <tcp_kill_prio+0x8c>
    return;
 8017a72:	bf00      	nop
  }
}
 8017a74:	3718      	adds	r7, #24
 8017a76:	46bd      	mov	sp, r7
 8017a78:	bd80      	pop	{r7, pc}
 8017a7a:	bf00      	nop
 8017a7c:	24008668 	.word	0x24008668
 8017a80:	2400866c 	.word	0x2400866c

08017a84 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8017a84:	b580      	push	{r7, lr}
 8017a86:	b086      	sub	sp, #24
 8017a88:	af00      	add	r7, sp, #0
 8017a8a:	4603      	mov	r3, r0
 8017a8c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8017a8e:	79fb      	ldrb	r3, [r7, #7]
 8017a90:	2b08      	cmp	r3, #8
 8017a92:	d009      	beq.n	8017aa8 <tcp_kill_state+0x24>
 8017a94:	79fb      	ldrb	r3, [r7, #7]
 8017a96:	2b09      	cmp	r3, #9
 8017a98:	d006      	beq.n	8017aa8 <tcp_kill_state+0x24>
 8017a9a:	4b1a      	ldr	r3, [pc, #104]	; (8017b04 <tcp_kill_state+0x80>)
 8017a9c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8017aa0:	4919      	ldr	r1, [pc, #100]	; (8017b08 <tcp_kill_state+0x84>)
 8017aa2:	481a      	ldr	r0, [pc, #104]	; (8017b0c <tcp_kill_state+0x88>)
 8017aa4:	f00f fa16 	bl	8026ed4 <iprintf>

  inactivity = 0;
 8017aa8:	2300      	movs	r3, #0
 8017aaa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8017aac:	2300      	movs	r3, #0
 8017aae:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017ab0:	4b17      	ldr	r3, [pc, #92]	; (8017b10 <tcp_kill_state+0x8c>)
 8017ab2:	681b      	ldr	r3, [r3, #0]
 8017ab4:	617b      	str	r3, [r7, #20]
 8017ab6:	e017      	b.n	8017ae8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8017ab8:	697b      	ldr	r3, [r7, #20]
 8017aba:	7d1b      	ldrb	r3, [r3, #20]
 8017abc:	79fa      	ldrb	r2, [r7, #7]
 8017abe:	429a      	cmp	r2, r3
 8017ac0:	d10f      	bne.n	8017ae2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017ac2:	4b14      	ldr	r3, [pc, #80]	; (8017b14 <tcp_kill_state+0x90>)
 8017ac4:	681a      	ldr	r2, [r3, #0]
 8017ac6:	697b      	ldr	r3, [r7, #20]
 8017ac8:	6a1b      	ldr	r3, [r3, #32]
 8017aca:	1ad3      	subs	r3, r2, r3
 8017acc:	68fa      	ldr	r2, [r7, #12]
 8017ace:	429a      	cmp	r2, r3
 8017ad0:	d807      	bhi.n	8017ae2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8017ad2:	4b10      	ldr	r3, [pc, #64]	; (8017b14 <tcp_kill_state+0x90>)
 8017ad4:	681a      	ldr	r2, [r3, #0]
 8017ad6:	697b      	ldr	r3, [r7, #20]
 8017ad8:	6a1b      	ldr	r3, [r3, #32]
 8017ada:	1ad3      	subs	r3, r2, r3
 8017adc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8017ade:	697b      	ldr	r3, [r7, #20]
 8017ae0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017ae2:	697b      	ldr	r3, [r7, #20]
 8017ae4:	68db      	ldr	r3, [r3, #12]
 8017ae6:	617b      	str	r3, [r7, #20]
 8017ae8:	697b      	ldr	r3, [r7, #20]
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d1e4      	bne.n	8017ab8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8017aee:	693b      	ldr	r3, [r7, #16]
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d003      	beq.n	8017afc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8017af4:	2100      	movs	r1, #0
 8017af6:	6938      	ldr	r0, [r7, #16]
 8017af8:	f7fe fe92 	bl	8016820 <tcp_abandon>
  }
}
 8017afc:	bf00      	nop
 8017afe:	3718      	adds	r7, #24
 8017b00:	46bd      	mov	sp, r7
 8017b02:	bd80      	pop	{r7, pc}
 8017b04:	0802c018 	.word	0x0802c018
 8017b08:	0802c5a4 	.word	0x0802c5a4
 8017b0c:	0802c05c 	.word	0x0802c05c
 8017b10:	24008668 	.word	0x24008668
 8017b14:	2400866c 	.word	0x2400866c

08017b18 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8017b18:	b580      	push	{r7, lr}
 8017b1a:	b084      	sub	sp, #16
 8017b1c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8017b1e:	2300      	movs	r3, #0
 8017b20:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8017b22:	2300      	movs	r3, #0
 8017b24:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017b26:	4b12      	ldr	r3, [pc, #72]	; (8017b70 <tcp_kill_timewait+0x58>)
 8017b28:	681b      	ldr	r3, [r3, #0]
 8017b2a:	60fb      	str	r3, [r7, #12]
 8017b2c:	e012      	b.n	8017b54 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017b2e:	4b11      	ldr	r3, [pc, #68]	; (8017b74 <tcp_kill_timewait+0x5c>)
 8017b30:	681a      	ldr	r2, [r3, #0]
 8017b32:	68fb      	ldr	r3, [r7, #12]
 8017b34:	6a1b      	ldr	r3, [r3, #32]
 8017b36:	1ad3      	subs	r3, r2, r3
 8017b38:	687a      	ldr	r2, [r7, #4]
 8017b3a:	429a      	cmp	r2, r3
 8017b3c:	d807      	bhi.n	8017b4e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8017b3e:	4b0d      	ldr	r3, [pc, #52]	; (8017b74 <tcp_kill_timewait+0x5c>)
 8017b40:	681a      	ldr	r2, [r3, #0]
 8017b42:	68fb      	ldr	r3, [r7, #12]
 8017b44:	6a1b      	ldr	r3, [r3, #32]
 8017b46:	1ad3      	subs	r3, r2, r3
 8017b48:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8017b4a:	68fb      	ldr	r3, [r7, #12]
 8017b4c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017b4e:	68fb      	ldr	r3, [r7, #12]
 8017b50:	68db      	ldr	r3, [r3, #12]
 8017b52:	60fb      	str	r3, [r7, #12]
 8017b54:	68fb      	ldr	r3, [r7, #12]
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d1e9      	bne.n	8017b2e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8017b5a:	68bb      	ldr	r3, [r7, #8]
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d002      	beq.n	8017b66 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8017b60:	68b8      	ldr	r0, [r7, #8]
 8017b62:	f7fe ff1b 	bl	801699c <tcp_abort>
  }
}
 8017b66:	bf00      	nop
 8017b68:	3710      	adds	r7, #16
 8017b6a:	46bd      	mov	sp, r7
 8017b6c:	bd80      	pop	{r7, pc}
 8017b6e:	bf00      	nop
 8017b70:	24008678 	.word	0x24008678
 8017b74:	2400866c 	.word	0x2400866c

08017b78 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8017b78:	b580      	push	{r7, lr}
 8017b7a:	b082      	sub	sp, #8
 8017b7c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8017b7e:	4b10      	ldr	r3, [pc, #64]	; (8017bc0 <tcp_handle_closepend+0x48>)
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8017b84:	e014      	b.n	8017bb0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	68db      	ldr	r3, [r3, #12]
 8017b8a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	8b5b      	ldrh	r3, [r3, #26]
 8017b90:	f003 0308 	and.w	r3, r3, #8
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	d009      	beq.n	8017bac <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8017b98:	687b      	ldr	r3, [r7, #4]
 8017b9a:	8b5b      	ldrh	r3, [r3, #26]
 8017b9c:	f023 0308 	bic.w	r3, r3, #8
 8017ba0:	b29a      	uxth	r2, r3
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8017ba6:	6878      	ldr	r0, [r7, #4]
 8017ba8:	f7fe fd48 	bl	801663c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8017bac:	683b      	ldr	r3, [r7, #0]
 8017bae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d1e7      	bne.n	8017b86 <tcp_handle_closepend+0xe>
  }
}
 8017bb6:	bf00      	nop
 8017bb8:	bf00      	nop
 8017bba:	3708      	adds	r7, #8
 8017bbc:	46bd      	mov	sp, r7
 8017bbe:	bd80      	pop	{r7, pc}
 8017bc0:	24008668 	.word	0x24008668

08017bc4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8017bc4:	b580      	push	{r7, lr}
 8017bc6:	b084      	sub	sp, #16
 8017bc8:	af00      	add	r7, sp, #0
 8017bca:	4603      	mov	r3, r0
 8017bcc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017bce:	2001      	movs	r0, #1
 8017bd0:	f7fc fff8 	bl	8014bc4 <memp_malloc>
 8017bd4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8017bd6:	68fb      	ldr	r3, [r7, #12]
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	d126      	bne.n	8017c2a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8017bdc:	f7ff ffcc 	bl	8017b78 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8017be0:	f7ff ff9a 	bl	8017b18 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017be4:	2001      	movs	r0, #1
 8017be6:	f7fc ffed 	bl	8014bc4 <memp_malloc>
 8017bea:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8017bec:	68fb      	ldr	r3, [r7, #12]
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d11b      	bne.n	8017c2a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8017bf2:	2009      	movs	r0, #9
 8017bf4:	f7ff ff46 	bl	8017a84 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017bf8:	2001      	movs	r0, #1
 8017bfa:	f7fc ffe3 	bl	8014bc4 <memp_malloc>
 8017bfe:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8017c00:	68fb      	ldr	r3, [r7, #12]
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d111      	bne.n	8017c2a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8017c06:	2008      	movs	r0, #8
 8017c08:	f7ff ff3c 	bl	8017a84 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017c0c:	2001      	movs	r0, #1
 8017c0e:	f7fc ffd9 	bl	8014bc4 <memp_malloc>
 8017c12:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8017c14:	68fb      	ldr	r3, [r7, #12]
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d107      	bne.n	8017c2a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8017c1a:	79fb      	ldrb	r3, [r7, #7]
 8017c1c:	4618      	mov	r0, r3
 8017c1e:	f7ff fee3 	bl	80179e8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017c22:	2001      	movs	r0, #1
 8017c24:	f7fc ffce 	bl	8014bc4 <memp_malloc>
 8017c28:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d03f      	beq.n	8017cb0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8017c30:	229c      	movs	r2, #156	; 0x9c
 8017c32:	2100      	movs	r1, #0
 8017c34:	68f8      	ldr	r0, [r7, #12]
 8017c36:	f00e faef 	bl	8026218 <memset>
    pcb->prio = prio;
 8017c3a:	68fb      	ldr	r3, [r7, #12]
 8017c3c:	79fa      	ldrb	r2, [r7, #7]
 8017c3e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8017c40:	68fb      	ldr	r3, [r7, #12]
 8017c42:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8017c46:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8017c4a:	68fb      	ldr	r3, [r7, #12]
 8017c4c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8017c50:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017c52:	68fb      	ldr	r3, [r7, #12]
 8017c54:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8017c56:	68fb      	ldr	r3, [r7, #12]
 8017c58:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8017c5a:	68fb      	ldr	r3, [r7, #12]
 8017c5c:	22ff      	movs	r2, #255	; 0xff
 8017c5e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8017c60:	68fb      	ldr	r3, [r7, #12]
 8017c62:	f44f 7206 	mov.w	r2, #536	; 0x218
 8017c66:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8017c68:	68fb      	ldr	r3, [r7, #12]
 8017c6a:	2206      	movs	r2, #6
 8017c6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8017c70:	68fb      	ldr	r3, [r7, #12]
 8017c72:	2206      	movs	r2, #6
 8017c74:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8017c76:	68fb      	ldr	r3, [r7, #12]
 8017c78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017c7c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8017c7e:	68fb      	ldr	r3, [r7, #12]
 8017c80:	2201      	movs	r2, #1
 8017c82:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8017c86:	4b0d      	ldr	r3, [pc, #52]	; (8017cbc <tcp_alloc+0xf8>)
 8017c88:	681a      	ldr	r2, [r3, #0]
 8017c8a:	68fb      	ldr	r3, [r7, #12]
 8017c8c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8017c8e:	4b0c      	ldr	r3, [pc, #48]	; (8017cc0 <tcp_alloc+0xfc>)
 8017c90:	781a      	ldrb	r2, [r3, #0]
 8017c92:	68fb      	ldr	r3, [r7, #12]
 8017c94:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8017c96:	68fb      	ldr	r3, [r7, #12]
 8017c98:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8017c9c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8017ca0:	68fb      	ldr	r3, [r7, #12]
 8017ca2:	4a08      	ldr	r2, [pc, #32]	; (8017cc4 <tcp_alloc+0x100>)
 8017ca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	4a07      	ldr	r2, [pc, #28]	; (8017cc8 <tcp_alloc+0x104>)
 8017cac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8017cb0:	68fb      	ldr	r3, [r7, #12]
}
 8017cb2:	4618      	mov	r0, r3
 8017cb4:	3710      	adds	r7, #16
 8017cb6:	46bd      	mov	sp, r7
 8017cb8:	bd80      	pop	{r7, pc}
 8017cba:	bf00      	nop
 8017cbc:	2400866c 	.word	0x2400866c
 8017cc0:	24004f8a 	.word	0x24004f8a
 8017cc4:	0801797d 	.word	0x0801797d
 8017cc8:	006ddd00 	.word	0x006ddd00

08017ccc <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8017ccc:	b580      	push	{r7, lr}
 8017cce:	b084      	sub	sp, #16
 8017cd0:	af00      	add	r7, sp, #0
 8017cd2:	4603      	mov	r3, r0
 8017cd4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8017cd6:	2040      	movs	r0, #64	; 0x40
 8017cd8:	f7ff ff74 	bl	8017bc4 <tcp_alloc>
 8017cdc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8017cde:	68fb      	ldr	r3, [r7, #12]
}
 8017ce0:	4618      	mov	r0, r3
 8017ce2:	3710      	adds	r7, #16
 8017ce4:	46bd      	mov	sp, r7
 8017ce6:	bd80      	pop	{r7, pc}

08017ce8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8017ce8:	b480      	push	{r7}
 8017cea:	b083      	sub	sp, #12
 8017cec:	af00      	add	r7, sp, #0
 8017cee:	6078      	str	r0, [r7, #4]
 8017cf0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d002      	beq.n	8017cfe <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	683a      	ldr	r2, [r7, #0]
 8017cfc:	611a      	str	r2, [r3, #16]
  }
}
 8017cfe:	bf00      	nop
 8017d00:	370c      	adds	r7, #12
 8017d02:	46bd      	mov	sp, r7
 8017d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d08:	4770      	bx	lr
	...

08017d0c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8017d0c:	b580      	push	{r7, lr}
 8017d0e:	b082      	sub	sp, #8
 8017d10:	af00      	add	r7, sp, #0
 8017d12:	6078      	str	r0, [r7, #4]
 8017d14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	d00e      	beq.n	8017d3a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	7d1b      	ldrb	r3, [r3, #20]
 8017d20:	2b01      	cmp	r3, #1
 8017d22:	d106      	bne.n	8017d32 <tcp_recv+0x26>
 8017d24:	4b07      	ldr	r3, [pc, #28]	; (8017d44 <tcp_recv+0x38>)
 8017d26:	f240 72df 	movw	r2, #2015	; 0x7df
 8017d2a:	4907      	ldr	r1, [pc, #28]	; (8017d48 <tcp_recv+0x3c>)
 8017d2c:	4807      	ldr	r0, [pc, #28]	; (8017d4c <tcp_recv+0x40>)
 8017d2e:	f00f f8d1 	bl	8026ed4 <iprintf>
    pcb->recv = recv;
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	683a      	ldr	r2, [r7, #0]
 8017d36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8017d3a:	bf00      	nop
 8017d3c:	3708      	adds	r7, #8
 8017d3e:	46bd      	mov	sp, r7
 8017d40:	bd80      	pop	{r7, pc}
 8017d42:	bf00      	nop
 8017d44:	0802c018 	.word	0x0802c018
 8017d48:	0802c5b4 	.word	0x0802c5b4
 8017d4c:	0802c05c 	.word	0x0802c05c

08017d50 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8017d50:	b580      	push	{r7, lr}
 8017d52:	b082      	sub	sp, #8
 8017d54:	af00      	add	r7, sp, #0
 8017d56:	6078      	str	r0, [r7, #4]
 8017d58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d00e      	beq.n	8017d7e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	7d1b      	ldrb	r3, [r3, #20]
 8017d64:	2b01      	cmp	r3, #1
 8017d66:	d106      	bne.n	8017d76 <tcp_sent+0x26>
 8017d68:	4b07      	ldr	r3, [pc, #28]	; (8017d88 <tcp_sent+0x38>)
 8017d6a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8017d6e:	4907      	ldr	r1, [pc, #28]	; (8017d8c <tcp_sent+0x3c>)
 8017d70:	4807      	ldr	r0, [pc, #28]	; (8017d90 <tcp_sent+0x40>)
 8017d72:	f00f f8af 	bl	8026ed4 <iprintf>
    pcb->sent = sent;
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	683a      	ldr	r2, [r7, #0]
 8017d7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8017d7e:	bf00      	nop
 8017d80:	3708      	adds	r7, #8
 8017d82:	46bd      	mov	sp, r7
 8017d84:	bd80      	pop	{r7, pc}
 8017d86:	bf00      	nop
 8017d88:	0802c018 	.word	0x0802c018
 8017d8c:	0802c5dc 	.word	0x0802c5dc
 8017d90:	0802c05c 	.word	0x0802c05c

08017d94 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8017d94:	b580      	push	{r7, lr}
 8017d96:	b082      	sub	sp, #8
 8017d98:	af00      	add	r7, sp, #0
 8017d9a:	6078      	str	r0, [r7, #4]
 8017d9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	d00e      	beq.n	8017dc2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	7d1b      	ldrb	r3, [r3, #20]
 8017da8:	2b01      	cmp	r3, #1
 8017daa:	d106      	bne.n	8017dba <tcp_err+0x26>
 8017dac:	4b07      	ldr	r3, [pc, #28]	; (8017dcc <tcp_err+0x38>)
 8017dae:	f640 020d 	movw	r2, #2061	; 0x80d
 8017db2:	4907      	ldr	r1, [pc, #28]	; (8017dd0 <tcp_err+0x3c>)
 8017db4:	4807      	ldr	r0, [pc, #28]	; (8017dd4 <tcp_err+0x40>)
 8017db6:	f00f f88d 	bl	8026ed4 <iprintf>
    pcb->errf = err;
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	683a      	ldr	r2, [r7, #0]
 8017dbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8017dc2:	bf00      	nop
 8017dc4:	3708      	adds	r7, #8
 8017dc6:	46bd      	mov	sp, r7
 8017dc8:	bd80      	pop	{r7, pc}
 8017dca:	bf00      	nop
 8017dcc:	0802c018 	.word	0x0802c018
 8017dd0:	0802c604 	.word	0x0802c604
 8017dd4:	0802c05c 	.word	0x0802c05c

08017dd8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8017dd8:	b480      	push	{r7}
 8017dda:	b085      	sub	sp, #20
 8017ddc:	af00      	add	r7, sp, #0
 8017dde:	6078      	str	r0, [r7, #4]
 8017de0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	d008      	beq.n	8017dfa <tcp_accept+0x22>
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	7d1b      	ldrb	r3, [r3, #20]
 8017dec:	2b01      	cmp	r3, #1
 8017dee:	d104      	bne.n	8017dfa <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8017df4:	68fb      	ldr	r3, [r7, #12]
 8017df6:	683a      	ldr	r2, [r7, #0]
 8017df8:	619a      	str	r2, [r3, #24]
  }
}
 8017dfa:	bf00      	nop
 8017dfc:	3714      	adds	r7, #20
 8017dfe:	46bd      	mov	sp, r7
 8017e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e04:	4770      	bx	lr
	...

08017e08 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8017e08:	b580      	push	{r7, lr}
 8017e0a:	b084      	sub	sp, #16
 8017e0c:	af00      	add	r7, sp, #0
 8017e0e:	60f8      	str	r0, [r7, #12]
 8017e10:	60b9      	str	r1, [r7, #8]
 8017e12:	4613      	mov	r3, r2
 8017e14:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8017e16:	68fb      	ldr	r3, [r7, #12]
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d107      	bne.n	8017e2c <tcp_poll+0x24>
 8017e1c:	4b0e      	ldr	r3, [pc, #56]	; (8017e58 <tcp_poll+0x50>)
 8017e1e:	f640 023d 	movw	r2, #2109	; 0x83d
 8017e22:	490e      	ldr	r1, [pc, #56]	; (8017e5c <tcp_poll+0x54>)
 8017e24:	480e      	ldr	r0, [pc, #56]	; (8017e60 <tcp_poll+0x58>)
 8017e26:	f00f f855 	bl	8026ed4 <iprintf>
 8017e2a:	e011      	b.n	8017e50 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8017e2c:	68fb      	ldr	r3, [r7, #12]
 8017e2e:	7d1b      	ldrb	r3, [r3, #20]
 8017e30:	2b01      	cmp	r3, #1
 8017e32:	d106      	bne.n	8017e42 <tcp_poll+0x3a>
 8017e34:	4b08      	ldr	r3, [pc, #32]	; (8017e58 <tcp_poll+0x50>)
 8017e36:	f640 023e 	movw	r2, #2110	; 0x83e
 8017e3a:	490a      	ldr	r1, [pc, #40]	; (8017e64 <tcp_poll+0x5c>)
 8017e3c:	4808      	ldr	r0, [pc, #32]	; (8017e60 <tcp_poll+0x58>)
 8017e3e:	f00f f849 	bl	8026ed4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8017e42:	68fb      	ldr	r3, [r7, #12]
 8017e44:	68ba      	ldr	r2, [r7, #8]
 8017e46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8017e4a:	68fb      	ldr	r3, [r7, #12]
 8017e4c:	79fa      	ldrb	r2, [r7, #7]
 8017e4e:	775a      	strb	r2, [r3, #29]
}
 8017e50:	3710      	adds	r7, #16
 8017e52:	46bd      	mov	sp, r7
 8017e54:	bd80      	pop	{r7, pc}
 8017e56:	bf00      	nop
 8017e58:	0802c018 	.word	0x0802c018
 8017e5c:	0802c62c 	.word	0x0802c62c
 8017e60:	0802c05c 	.word	0x0802c05c
 8017e64:	0802c644 	.word	0x0802c644

08017e68 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8017e68:	b580      	push	{r7, lr}
 8017e6a:	b082      	sub	sp, #8
 8017e6c:	af00      	add	r7, sp, #0
 8017e6e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	d107      	bne.n	8017e86 <tcp_pcb_purge+0x1e>
 8017e76:	4b21      	ldr	r3, [pc, #132]	; (8017efc <tcp_pcb_purge+0x94>)
 8017e78:	f640 0251 	movw	r2, #2129	; 0x851
 8017e7c:	4920      	ldr	r1, [pc, #128]	; (8017f00 <tcp_pcb_purge+0x98>)
 8017e7e:	4821      	ldr	r0, [pc, #132]	; (8017f04 <tcp_pcb_purge+0x9c>)
 8017e80:	f00f f828 	bl	8026ed4 <iprintf>
 8017e84:	e037      	b.n	8017ef6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	7d1b      	ldrb	r3, [r3, #20]
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d033      	beq.n	8017ef6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8017e92:	2b0a      	cmp	r3, #10
 8017e94:	d02f      	beq.n	8017ef6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8017e9a:	2b01      	cmp	r3, #1
 8017e9c:	d02b      	beq.n	8017ef6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	d007      	beq.n	8017eb6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017eaa:	4618      	mov	r0, r3
 8017eac:	f7fd fde2 	bl	8015a74 <pbuf_free>
      pcb->refused_data = NULL;
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	2200      	movs	r2, #0
 8017eb4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d002      	beq.n	8017ec4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8017ebe:	6878      	ldr	r0, [r7, #4]
 8017ec0:	f000 f986 	bl	80181d0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017eca:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017ed0:	4618      	mov	r0, r3
 8017ed2:	f7ff fcf9 	bl	80178c8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017eda:	4618      	mov	r0, r3
 8017edc:	f7ff fcf4 	bl	80178c8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	2200      	movs	r2, #0
 8017ee4:	66da      	str	r2, [r3, #108]	; 0x6c
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	2200      	movs	r2, #0
 8017ef2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8017ef6:	3708      	adds	r7, #8
 8017ef8:	46bd      	mov	sp, r7
 8017efa:	bd80      	pop	{r7, pc}
 8017efc:	0802c018 	.word	0x0802c018
 8017f00:	0802c664 	.word	0x0802c664
 8017f04:	0802c05c 	.word	0x0802c05c

08017f08 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8017f08:	b580      	push	{r7, lr}
 8017f0a:	b084      	sub	sp, #16
 8017f0c:	af00      	add	r7, sp, #0
 8017f0e:	6078      	str	r0, [r7, #4]
 8017f10:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8017f12:	683b      	ldr	r3, [r7, #0]
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d106      	bne.n	8017f26 <tcp_pcb_remove+0x1e>
 8017f18:	4b3e      	ldr	r3, [pc, #248]	; (8018014 <tcp_pcb_remove+0x10c>)
 8017f1a:	f640 0283 	movw	r2, #2179	; 0x883
 8017f1e:	493e      	ldr	r1, [pc, #248]	; (8018018 <tcp_pcb_remove+0x110>)
 8017f20:	483e      	ldr	r0, [pc, #248]	; (801801c <tcp_pcb_remove+0x114>)
 8017f22:	f00e ffd7 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d106      	bne.n	8017f3a <tcp_pcb_remove+0x32>
 8017f2c:	4b39      	ldr	r3, [pc, #228]	; (8018014 <tcp_pcb_remove+0x10c>)
 8017f2e:	f640 0284 	movw	r2, #2180	; 0x884
 8017f32:	493b      	ldr	r1, [pc, #236]	; (8018020 <tcp_pcb_remove+0x118>)
 8017f34:	4839      	ldr	r0, [pc, #228]	; (801801c <tcp_pcb_remove+0x114>)
 8017f36:	f00e ffcd 	bl	8026ed4 <iprintf>

  TCP_RMV(pcblist, pcb);
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	683a      	ldr	r2, [r7, #0]
 8017f40:	429a      	cmp	r2, r3
 8017f42:	d105      	bne.n	8017f50 <tcp_pcb_remove+0x48>
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	681b      	ldr	r3, [r3, #0]
 8017f48:	68da      	ldr	r2, [r3, #12]
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	601a      	str	r2, [r3, #0]
 8017f4e:	e013      	b.n	8017f78 <tcp_pcb_remove+0x70>
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	681b      	ldr	r3, [r3, #0]
 8017f54:	60fb      	str	r3, [r7, #12]
 8017f56:	e00c      	b.n	8017f72 <tcp_pcb_remove+0x6a>
 8017f58:	68fb      	ldr	r3, [r7, #12]
 8017f5a:	68db      	ldr	r3, [r3, #12]
 8017f5c:	683a      	ldr	r2, [r7, #0]
 8017f5e:	429a      	cmp	r2, r3
 8017f60:	d104      	bne.n	8017f6c <tcp_pcb_remove+0x64>
 8017f62:	683b      	ldr	r3, [r7, #0]
 8017f64:	68da      	ldr	r2, [r3, #12]
 8017f66:	68fb      	ldr	r3, [r7, #12]
 8017f68:	60da      	str	r2, [r3, #12]
 8017f6a:	e005      	b.n	8017f78 <tcp_pcb_remove+0x70>
 8017f6c:	68fb      	ldr	r3, [r7, #12]
 8017f6e:	68db      	ldr	r3, [r3, #12]
 8017f70:	60fb      	str	r3, [r7, #12]
 8017f72:	68fb      	ldr	r3, [r7, #12]
 8017f74:	2b00      	cmp	r3, #0
 8017f76:	d1ef      	bne.n	8017f58 <tcp_pcb_remove+0x50>
 8017f78:	683b      	ldr	r3, [r7, #0]
 8017f7a:	2200      	movs	r2, #0
 8017f7c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8017f7e:	6838      	ldr	r0, [r7, #0]
 8017f80:	f7ff ff72 	bl	8017e68 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8017f84:	683b      	ldr	r3, [r7, #0]
 8017f86:	7d1b      	ldrb	r3, [r3, #20]
 8017f88:	2b0a      	cmp	r3, #10
 8017f8a:	d013      	beq.n	8017fb4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8017f8c:	683b      	ldr	r3, [r7, #0]
 8017f8e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8017f90:	2b01      	cmp	r3, #1
 8017f92:	d00f      	beq.n	8017fb4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8017f94:	683b      	ldr	r3, [r7, #0]
 8017f96:	8b5b      	ldrh	r3, [r3, #26]
 8017f98:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d009      	beq.n	8017fb4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8017fa0:	683b      	ldr	r3, [r7, #0]
 8017fa2:	8b5b      	ldrh	r3, [r3, #26]
 8017fa4:	f043 0302 	orr.w	r3, r3, #2
 8017fa8:	b29a      	uxth	r2, r3
 8017faa:	683b      	ldr	r3, [r7, #0]
 8017fac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8017fae:	6838      	ldr	r0, [r7, #0]
 8017fb0:	f003 fbc2 	bl	801b738 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8017fb4:	683b      	ldr	r3, [r7, #0]
 8017fb6:	7d1b      	ldrb	r3, [r3, #20]
 8017fb8:	2b01      	cmp	r3, #1
 8017fba:	d020      	beq.n	8017ffe <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8017fbc:	683b      	ldr	r3, [r7, #0]
 8017fbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d006      	beq.n	8017fd2 <tcp_pcb_remove+0xca>
 8017fc4:	4b13      	ldr	r3, [pc, #76]	; (8018014 <tcp_pcb_remove+0x10c>)
 8017fc6:	f640 0293 	movw	r2, #2195	; 0x893
 8017fca:	4916      	ldr	r1, [pc, #88]	; (8018024 <tcp_pcb_remove+0x11c>)
 8017fcc:	4813      	ldr	r0, [pc, #76]	; (801801c <tcp_pcb_remove+0x114>)
 8017fce:	f00e ff81 	bl	8026ed4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8017fd2:	683b      	ldr	r3, [r7, #0]
 8017fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	d006      	beq.n	8017fe8 <tcp_pcb_remove+0xe0>
 8017fda:	4b0e      	ldr	r3, [pc, #56]	; (8018014 <tcp_pcb_remove+0x10c>)
 8017fdc:	f640 0294 	movw	r2, #2196	; 0x894
 8017fe0:	4911      	ldr	r1, [pc, #68]	; (8018028 <tcp_pcb_remove+0x120>)
 8017fe2:	480e      	ldr	r0, [pc, #56]	; (801801c <tcp_pcb_remove+0x114>)
 8017fe4:	f00e ff76 	bl	8026ed4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8017fe8:	683b      	ldr	r3, [r7, #0]
 8017fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d006      	beq.n	8017ffe <tcp_pcb_remove+0xf6>
 8017ff0:	4b08      	ldr	r3, [pc, #32]	; (8018014 <tcp_pcb_remove+0x10c>)
 8017ff2:	f640 0296 	movw	r2, #2198	; 0x896
 8017ff6:	490d      	ldr	r1, [pc, #52]	; (801802c <tcp_pcb_remove+0x124>)
 8017ff8:	4808      	ldr	r0, [pc, #32]	; (801801c <tcp_pcb_remove+0x114>)
 8017ffa:	f00e ff6b 	bl	8026ed4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8017ffe:	683b      	ldr	r3, [r7, #0]
 8018000:	2200      	movs	r2, #0
 8018002:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8018004:	683b      	ldr	r3, [r7, #0]
 8018006:	2200      	movs	r2, #0
 8018008:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801800a:	bf00      	nop
 801800c:	3710      	adds	r7, #16
 801800e:	46bd      	mov	sp, r7
 8018010:	bd80      	pop	{r7, pc}
 8018012:	bf00      	nop
 8018014:	0802c018 	.word	0x0802c018
 8018018:	0802c680 	.word	0x0802c680
 801801c:	0802c05c 	.word	0x0802c05c
 8018020:	0802c69c 	.word	0x0802c69c
 8018024:	0802c6bc 	.word	0x0802c6bc
 8018028:	0802c6d4 	.word	0x0802c6d4
 801802c:	0802c6f0 	.word	0x0802c6f0

08018030 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8018030:	b580      	push	{r7, lr}
 8018032:	b082      	sub	sp, #8
 8018034:	af00      	add	r7, sp, #0
 8018036:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	2b00      	cmp	r3, #0
 801803c:	d106      	bne.n	801804c <tcp_next_iss+0x1c>
 801803e:	4b0a      	ldr	r3, [pc, #40]	; (8018068 <tcp_next_iss+0x38>)
 8018040:	f640 02af 	movw	r2, #2223	; 0x8af
 8018044:	4909      	ldr	r1, [pc, #36]	; (801806c <tcp_next_iss+0x3c>)
 8018046:	480a      	ldr	r0, [pc, #40]	; (8018070 <tcp_next_iss+0x40>)
 8018048:	f00e ff44 	bl	8026ed4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801804c:	4b09      	ldr	r3, [pc, #36]	; (8018074 <tcp_next_iss+0x44>)
 801804e:	681a      	ldr	r2, [r3, #0]
 8018050:	4b09      	ldr	r3, [pc, #36]	; (8018078 <tcp_next_iss+0x48>)
 8018052:	681b      	ldr	r3, [r3, #0]
 8018054:	4413      	add	r3, r2
 8018056:	4a07      	ldr	r2, [pc, #28]	; (8018074 <tcp_next_iss+0x44>)
 8018058:	6013      	str	r3, [r2, #0]
  return iss;
 801805a:	4b06      	ldr	r3, [pc, #24]	; (8018074 <tcp_next_iss+0x44>)
 801805c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801805e:	4618      	mov	r0, r3
 8018060:	3708      	adds	r7, #8
 8018062:	46bd      	mov	sp, r7
 8018064:	bd80      	pop	{r7, pc}
 8018066:	bf00      	nop
 8018068:	0802c018 	.word	0x0802c018
 801806c:	0802c708 	.word	0x0802c708
 8018070:	0802c05c 	.word	0x0802c05c
 8018074:	24000030 	.word	0x24000030
 8018078:	2400866c 	.word	0x2400866c

0801807c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801807c:	b580      	push	{r7, lr}
 801807e:	b086      	sub	sp, #24
 8018080:	af00      	add	r7, sp, #0
 8018082:	4603      	mov	r3, r0
 8018084:	60b9      	str	r1, [r7, #8]
 8018086:	607a      	str	r2, [r7, #4]
 8018088:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	2b00      	cmp	r3, #0
 801808e:	d106      	bne.n	801809e <tcp_eff_send_mss_netif+0x22>
 8018090:	4b14      	ldr	r3, [pc, #80]	; (80180e4 <tcp_eff_send_mss_netif+0x68>)
 8018092:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8018096:	4914      	ldr	r1, [pc, #80]	; (80180e8 <tcp_eff_send_mss_netif+0x6c>)
 8018098:	4814      	ldr	r0, [pc, #80]	; (80180ec <tcp_eff_send_mss_netif+0x70>)
 801809a:	f00e ff1b 	bl	8026ed4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801809e:	68bb      	ldr	r3, [r7, #8]
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d101      	bne.n	80180a8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80180a4:	89fb      	ldrh	r3, [r7, #14]
 80180a6:	e019      	b.n	80180dc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80180a8:	68bb      	ldr	r3, [r7, #8]
 80180aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80180ac:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80180ae:	8afb      	ldrh	r3, [r7, #22]
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	d012      	beq.n	80180da <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80180b4:	2328      	movs	r3, #40	; 0x28
 80180b6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80180b8:	8afa      	ldrh	r2, [r7, #22]
 80180ba:	8abb      	ldrh	r3, [r7, #20]
 80180bc:	429a      	cmp	r2, r3
 80180be:	d904      	bls.n	80180ca <tcp_eff_send_mss_netif+0x4e>
 80180c0:	8afa      	ldrh	r2, [r7, #22]
 80180c2:	8abb      	ldrh	r3, [r7, #20]
 80180c4:	1ad3      	subs	r3, r2, r3
 80180c6:	b29b      	uxth	r3, r3
 80180c8:	e000      	b.n	80180cc <tcp_eff_send_mss_netif+0x50>
 80180ca:	2300      	movs	r3, #0
 80180cc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80180ce:	8a7a      	ldrh	r2, [r7, #18]
 80180d0:	89fb      	ldrh	r3, [r7, #14]
 80180d2:	4293      	cmp	r3, r2
 80180d4:	bf28      	it	cs
 80180d6:	4613      	movcs	r3, r2
 80180d8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80180da:	89fb      	ldrh	r3, [r7, #14]
}
 80180dc:	4618      	mov	r0, r3
 80180de:	3718      	adds	r7, #24
 80180e0:	46bd      	mov	sp, r7
 80180e2:	bd80      	pop	{r7, pc}
 80180e4:	0802c018 	.word	0x0802c018
 80180e8:	0802c724 	.word	0x0802c724
 80180ec:	0802c05c 	.word	0x0802c05c

080180f0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80180f0:	b580      	push	{r7, lr}
 80180f2:	b084      	sub	sp, #16
 80180f4:	af00      	add	r7, sp, #0
 80180f6:	6078      	str	r0, [r7, #4]
 80180f8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80180fa:	683b      	ldr	r3, [r7, #0]
 80180fc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	2b00      	cmp	r3, #0
 8018102:	d119      	bne.n	8018138 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8018104:	4b10      	ldr	r3, [pc, #64]	; (8018148 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8018106:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801810a:	4910      	ldr	r1, [pc, #64]	; (801814c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801810c:	4810      	ldr	r0, [pc, #64]	; (8018150 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801810e:	f00e fee1 	bl	8026ed4 <iprintf>

  while (pcb != NULL) {
 8018112:	e011      	b.n	8018138 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8018114:	68fb      	ldr	r3, [r7, #12]
 8018116:	681a      	ldr	r2, [r3, #0]
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	681b      	ldr	r3, [r3, #0]
 801811c:	429a      	cmp	r2, r3
 801811e:	d108      	bne.n	8018132 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8018120:	68fb      	ldr	r3, [r7, #12]
 8018122:	68db      	ldr	r3, [r3, #12]
 8018124:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8018126:	68f8      	ldr	r0, [r7, #12]
 8018128:	f7fe fc38 	bl	801699c <tcp_abort>
      pcb = next;
 801812c:	68bb      	ldr	r3, [r7, #8]
 801812e:	60fb      	str	r3, [r7, #12]
 8018130:	e002      	b.n	8018138 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8018132:	68fb      	ldr	r3, [r7, #12]
 8018134:	68db      	ldr	r3, [r3, #12]
 8018136:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8018138:	68fb      	ldr	r3, [r7, #12]
 801813a:	2b00      	cmp	r3, #0
 801813c:	d1ea      	bne.n	8018114 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801813e:	bf00      	nop
 8018140:	bf00      	nop
 8018142:	3710      	adds	r7, #16
 8018144:	46bd      	mov	sp, r7
 8018146:	bd80      	pop	{r7, pc}
 8018148:	0802c018 	.word	0x0802c018
 801814c:	0802c74c 	.word	0x0802c74c
 8018150:	0802c05c 	.word	0x0802c05c

08018154 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018154:	b580      	push	{r7, lr}
 8018156:	b084      	sub	sp, #16
 8018158:	af00      	add	r7, sp, #0
 801815a:	6078      	str	r0, [r7, #4]
 801815c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	2b00      	cmp	r3, #0
 8018162:	d02a      	beq.n	80181ba <tcp_netif_ip_addr_changed+0x66>
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	681b      	ldr	r3, [r3, #0]
 8018168:	2b00      	cmp	r3, #0
 801816a:	d026      	beq.n	80181ba <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801816c:	4b15      	ldr	r3, [pc, #84]	; (80181c4 <tcp_netif_ip_addr_changed+0x70>)
 801816e:	681b      	ldr	r3, [r3, #0]
 8018170:	4619      	mov	r1, r3
 8018172:	6878      	ldr	r0, [r7, #4]
 8018174:	f7ff ffbc 	bl	80180f0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8018178:	4b13      	ldr	r3, [pc, #76]	; (80181c8 <tcp_netif_ip_addr_changed+0x74>)
 801817a:	681b      	ldr	r3, [r3, #0]
 801817c:	4619      	mov	r1, r3
 801817e:	6878      	ldr	r0, [r7, #4]
 8018180:	f7ff ffb6 	bl	80180f0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8018184:	683b      	ldr	r3, [r7, #0]
 8018186:	2b00      	cmp	r3, #0
 8018188:	d017      	beq.n	80181ba <tcp_netif_ip_addr_changed+0x66>
 801818a:	683b      	ldr	r3, [r7, #0]
 801818c:	681b      	ldr	r3, [r3, #0]
 801818e:	2b00      	cmp	r3, #0
 8018190:	d013      	beq.n	80181ba <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8018192:	4b0e      	ldr	r3, [pc, #56]	; (80181cc <tcp_netif_ip_addr_changed+0x78>)
 8018194:	681b      	ldr	r3, [r3, #0]
 8018196:	60fb      	str	r3, [r7, #12]
 8018198:	e00c      	b.n	80181b4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801819a:	68fb      	ldr	r3, [r7, #12]
 801819c:	681a      	ldr	r2, [r3, #0]
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	681b      	ldr	r3, [r3, #0]
 80181a2:	429a      	cmp	r2, r3
 80181a4:	d103      	bne.n	80181ae <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80181a6:	683b      	ldr	r3, [r7, #0]
 80181a8:	681a      	ldr	r2, [r3, #0]
 80181aa:	68fb      	ldr	r3, [r7, #12]
 80181ac:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80181ae:	68fb      	ldr	r3, [r7, #12]
 80181b0:	68db      	ldr	r3, [r3, #12]
 80181b2:	60fb      	str	r3, [r7, #12]
 80181b4:	68fb      	ldr	r3, [r7, #12]
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d1ef      	bne.n	801819a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80181ba:	bf00      	nop
 80181bc:	3710      	adds	r7, #16
 80181be:	46bd      	mov	sp, r7
 80181c0:	bd80      	pop	{r7, pc}
 80181c2:	bf00      	nop
 80181c4:	24008668 	.word	0x24008668
 80181c8:	24008674 	.word	0x24008674
 80181cc:	24008670 	.word	0x24008670

080181d0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80181d0:	b580      	push	{r7, lr}
 80181d2:	b082      	sub	sp, #8
 80181d4:	af00      	add	r7, sp, #0
 80181d6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d007      	beq.n	80181f0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80181e4:	4618      	mov	r0, r3
 80181e6:	f7ff fb6f 	bl	80178c8 <tcp_segs_free>
    pcb->ooseq = NULL;
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	2200      	movs	r2, #0
 80181ee:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80181f0:	bf00      	nop
 80181f2:	3708      	adds	r7, #8
 80181f4:	46bd      	mov	sp, r7
 80181f6:	bd80      	pop	{r7, pc}

080181f8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80181f8:	b590      	push	{r4, r7, lr}
 80181fa:	b08d      	sub	sp, #52	; 0x34
 80181fc:	af04      	add	r7, sp, #16
 80181fe:	6078      	str	r0, [r7, #4]
 8018200:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	2b00      	cmp	r3, #0
 8018206:	d105      	bne.n	8018214 <tcp_input+0x1c>
 8018208:	4b9b      	ldr	r3, [pc, #620]	; (8018478 <tcp_input+0x280>)
 801820a:	2283      	movs	r2, #131	; 0x83
 801820c:	499b      	ldr	r1, [pc, #620]	; (801847c <tcp_input+0x284>)
 801820e:	489c      	ldr	r0, [pc, #624]	; (8018480 <tcp_input+0x288>)
 8018210:	f00e fe60 	bl	8026ed4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	685b      	ldr	r3, [r3, #4]
 8018218:	4a9a      	ldr	r2, [pc, #616]	; (8018484 <tcp_input+0x28c>)
 801821a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	895b      	ldrh	r3, [r3, #10]
 8018220:	2b13      	cmp	r3, #19
 8018222:	f240 83c4 	bls.w	80189ae <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8018226:	4b98      	ldr	r3, [pc, #608]	; (8018488 <tcp_input+0x290>)
 8018228:	695b      	ldr	r3, [r3, #20]
 801822a:	4a97      	ldr	r2, [pc, #604]	; (8018488 <tcp_input+0x290>)
 801822c:	6812      	ldr	r2, [r2, #0]
 801822e:	4611      	mov	r1, r2
 8018230:	4618      	mov	r0, r3
 8018232:	f008 fbc7 	bl	80209c4 <ip4_addr_isbroadcast_u32>
 8018236:	4603      	mov	r3, r0
 8018238:	2b00      	cmp	r3, #0
 801823a:	f040 83ba 	bne.w	80189b2 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801823e:	4b92      	ldr	r3, [pc, #584]	; (8018488 <tcp_input+0x290>)
 8018240:	695b      	ldr	r3, [r3, #20]
 8018242:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8018246:	2be0      	cmp	r3, #224	; 0xe0
 8018248:	f000 83b3 	beq.w	80189b2 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801824c:	4b8d      	ldr	r3, [pc, #564]	; (8018484 <tcp_input+0x28c>)
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	899b      	ldrh	r3, [r3, #12]
 8018252:	b29b      	uxth	r3, r3
 8018254:	4618      	mov	r0, r3
 8018256:	f7fa ff3b 	bl	80130d0 <lwip_htons>
 801825a:	4603      	mov	r3, r0
 801825c:	0b1b      	lsrs	r3, r3, #12
 801825e:	b29b      	uxth	r3, r3
 8018260:	b2db      	uxtb	r3, r3
 8018262:	009b      	lsls	r3, r3, #2
 8018264:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8018266:	7cbb      	ldrb	r3, [r7, #18]
 8018268:	2b13      	cmp	r3, #19
 801826a:	f240 83a4 	bls.w	80189b6 <tcp_input+0x7be>
 801826e:	7cbb      	ldrb	r3, [r7, #18]
 8018270:	b29a      	uxth	r2, r3
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	891b      	ldrh	r3, [r3, #8]
 8018276:	429a      	cmp	r2, r3
 8018278:	f200 839d 	bhi.w	80189b6 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801827c:	7cbb      	ldrb	r3, [r7, #18]
 801827e:	b29b      	uxth	r3, r3
 8018280:	3b14      	subs	r3, #20
 8018282:	b29a      	uxth	r2, r3
 8018284:	4b81      	ldr	r3, [pc, #516]	; (801848c <tcp_input+0x294>)
 8018286:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8018288:	4b81      	ldr	r3, [pc, #516]	; (8018490 <tcp_input+0x298>)
 801828a:	2200      	movs	r2, #0
 801828c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	895a      	ldrh	r2, [r3, #10]
 8018292:	7cbb      	ldrb	r3, [r7, #18]
 8018294:	b29b      	uxth	r3, r3
 8018296:	429a      	cmp	r2, r3
 8018298:	d309      	bcc.n	80182ae <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801829a:	4b7c      	ldr	r3, [pc, #496]	; (801848c <tcp_input+0x294>)
 801829c:	881a      	ldrh	r2, [r3, #0]
 801829e:	4b7d      	ldr	r3, [pc, #500]	; (8018494 <tcp_input+0x29c>)
 80182a0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80182a2:	7cbb      	ldrb	r3, [r7, #18]
 80182a4:	4619      	mov	r1, r3
 80182a6:	6878      	ldr	r0, [r7, #4]
 80182a8:	f7fd fb2c 	bl	8015904 <pbuf_remove_header>
 80182ac:	e04e      	b.n	801834c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80182ae:	687b      	ldr	r3, [r7, #4]
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	d105      	bne.n	80182c2 <tcp_input+0xca>
 80182b6:	4b70      	ldr	r3, [pc, #448]	; (8018478 <tcp_input+0x280>)
 80182b8:	22c2      	movs	r2, #194	; 0xc2
 80182ba:	4977      	ldr	r1, [pc, #476]	; (8018498 <tcp_input+0x2a0>)
 80182bc:	4870      	ldr	r0, [pc, #448]	; (8018480 <tcp_input+0x288>)
 80182be:	f00e fe09 	bl	8026ed4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80182c2:	2114      	movs	r1, #20
 80182c4:	6878      	ldr	r0, [r7, #4]
 80182c6:	f7fd fb1d 	bl	8015904 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	895a      	ldrh	r2, [r3, #10]
 80182ce:	4b71      	ldr	r3, [pc, #452]	; (8018494 <tcp_input+0x29c>)
 80182d0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80182d2:	4b6e      	ldr	r3, [pc, #440]	; (801848c <tcp_input+0x294>)
 80182d4:	881a      	ldrh	r2, [r3, #0]
 80182d6:	4b6f      	ldr	r3, [pc, #444]	; (8018494 <tcp_input+0x29c>)
 80182d8:	881b      	ldrh	r3, [r3, #0]
 80182da:	1ad3      	subs	r3, r2, r3
 80182dc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80182de:	4b6d      	ldr	r3, [pc, #436]	; (8018494 <tcp_input+0x29c>)
 80182e0:	881b      	ldrh	r3, [r3, #0]
 80182e2:	4619      	mov	r1, r3
 80182e4:	6878      	ldr	r0, [r7, #4]
 80182e6:	f7fd fb0d 	bl	8015904 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	681b      	ldr	r3, [r3, #0]
 80182ee:	895b      	ldrh	r3, [r3, #10]
 80182f0:	8a3a      	ldrh	r2, [r7, #16]
 80182f2:	429a      	cmp	r2, r3
 80182f4:	f200 8361 	bhi.w	80189ba <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	681b      	ldr	r3, [r3, #0]
 80182fc:	685b      	ldr	r3, [r3, #4]
 80182fe:	4a64      	ldr	r2, [pc, #400]	; (8018490 <tcp_input+0x298>)
 8018300:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	681b      	ldr	r3, [r3, #0]
 8018306:	8a3a      	ldrh	r2, [r7, #16]
 8018308:	4611      	mov	r1, r2
 801830a:	4618      	mov	r0, r3
 801830c:	f7fd fafa 	bl	8015904 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	891a      	ldrh	r2, [r3, #8]
 8018314:	8a3b      	ldrh	r3, [r7, #16]
 8018316:	1ad3      	subs	r3, r2, r3
 8018318:	b29a      	uxth	r2, r3
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	895b      	ldrh	r3, [r3, #10]
 8018322:	2b00      	cmp	r3, #0
 8018324:	d005      	beq.n	8018332 <tcp_input+0x13a>
 8018326:	4b54      	ldr	r3, [pc, #336]	; (8018478 <tcp_input+0x280>)
 8018328:	22df      	movs	r2, #223	; 0xdf
 801832a:	495c      	ldr	r1, [pc, #368]	; (801849c <tcp_input+0x2a4>)
 801832c:	4854      	ldr	r0, [pc, #336]	; (8018480 <tcp_input+0x288>)
 801832e:	f00e fdd1 	bl	8026ed4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	891a      	ldrh	r2, [r3, #8]
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	891b      	ldrh	r3, [r3, #8]
 801833c:	429a      	cmp	r2, r3
 801833e:	d005      	beq.n	801834c <tcp_input+0x154>
 8018340:	4b4d      	ldr	r3, [pc, #308]	; (8018478 <tcp_input+0x280>)
 8018342:	22e0      	movs	r2, #224	; 0xe0
 8018344:	4956      	ldr	r1, [pc, #344]	; (80184a0 <tcp_input+0x2a8>)
 8018346:	484e      	ldr	r0, [pc, #312]	; (8018480 <tcp_input+0x288>)
 8018348:	f00e fdc4 	bl	8026ed4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801834c:	4b4d      	ldr	r3, [pc, #308]	; (8018484 <tcp_input+0x28c>)
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	881b      	ldrh	r3, [r3, #0]
 8018352:	b29b      	uxth	r3, r3
 8018354:	4a4b      	ldr	r2, [pc, #300]	; (8018484 <tcp_input+0x28c>)
 8018356:	6814      	ldr	r4, [r2, #0]
 8018358:	4618      	mov	r0, r3
 801835a:	f7fa feb9 	bl	80130d0 <lwip_htons>
 801835e:	4603      	mov	r3, r0
 8018360:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8018362:	4b48      	ldr	r3, [pc, #288]	; (8018484 <tcp_input+0x28c>)
 8018364:	681b      	ldr	r3, [r3, #0]
 8018366:	885b      	ldrh	r3, [r3, #2]
 8018368:	b29b      	uxth	r3, r3
 801836a:	4a46      	ldr	r2, [pc, #280]	; (8018484 <tcp_input+0x28c>)
 801836c:	6814      	ldr	r4, [r2, #0]
 801836e:	4618      	mov	r0, r3
 8018370:	f7fa feae 	bl	80130d0 <lwip_htons>
 8018374:	4603      	mov	r3, r0
 8018376:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8018378:	4b42      	ldr	r3, [pc, #264]	; (8018484 <tcp_input+0x28c>)
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	685b      	ldr	r3, [r3, #4]
 801837e:	4a41      	ldr	r2, [pc, #260]	; (8018484 <tcp_input+0x28c>)
 8018380:	6814      	ldr	r4, [r2, #0]
 8018382:	4618      	mov	r0, r3
 8018384:	f7fa feb9 	bl	80130fa <lwip_htonl>
 8018388:	4603      	mov	r3, r0
 801838a:	6063      	str	r3, [r4, #4]
 801838c:	6863      	ldr	r3, [r4, #4]
 801838e:	4a45      	ldr	r2, [pc, #276]	; (80184a4 <tcp_input+0x2ac>)
 8018390:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8018392:	4b3c      	ldr	r3, [pc, #240]	; (8018484 <tcp_input+0x28c>)
 8018394:	681b      	ldr	r3, [r3, #0]
 8018396:	689b      	ldr	r3, [r3, #8]
 8018398:	4a3a      	ldr	r2, [pc, #232]	; (8018484 <tcp_input+0x28c>)
 801839a:	6814      	ldr	r4, [r2, #0]
 801839c:	4618      	mov	r0, r3
 801839e:	f7fa feac 	bl	80130fa <lwip_htonl>
 80183a2:	4603      	mov	r3, r0
 80183a4:	60a3      	str	r3, [r4, #8]
 80183a6:	68a3      	ldr	r3, [r4, #8]
 80183a8:	4a3f      	ldr	r2, [pc, #252]	; (80184a8 <tcp_input+0x2b0>)
 80183aa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80183ac:	4b35      	ldr	r3, [pc, #212]	; (8018484 <tcp_input+0x28c>)
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	89db      	ldrh	r3, [r3, #14]
 80183b2:	b29b      	uxth	r3, r3
 80183b4:	4a33      	ldr	r2, [pc, #204]	; (8018484 <tcp_input+0x28c>)
 80183b6:	6814      	ldr	r4, [r2, #0]
 80183b8:	4618      	mov	r0, r3
 80183ba:	f7fa fe89 	bl	80130d0 <lwip_htons>
 80183be:	4603      	mov	r3, r0
 80183c0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80183c2:	4b30      	ldr	r3, [pc, #192]	; (8018484 <tcp_input+0x28c>)
 80183c4:	681b      	ldr	r3, [r3, #0]
 80183c6:	899b      	ldrh	r3, [r3, #12]
 80183c8:	b29b      	uxth	r3, r3
 80183ca:	4618      	mov	r0, r3
 80183cc:	f7fa fe80 	bl	80130d0 <lwip_htons>
 80183d0:	4603      	mov	r3, r0
 80183d2:	b2db      	uxtb	r3, r3
 80183d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80183d8:	b2da      	uxtb	r2, r3
 80183da:	4b34      	ldr	r3, [pc, #208]	; (80184ac <tcp_input+0x2b4>)
 80183dc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	891a      	ldrh	r2, [r3, #8]
 80183e2:	4b33      	ldr	r3, [pc, #204]	; (80184b0 <tcp_input+0x2b8>)
 80183e4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80183e6:	4b31      	ldr	r3, [pc, #196]	; (80184ac <tcp_input+0x2b4>)
 80183e8:	781b      	ldrb	r3, [r3, #0]
 80183ea:	f003 0303 	and.w	r3, r3, #3
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d00c      	beq.n	801840c <tcp_input+0x214>
    tcplen++;
 80183f2:	4b2f      	ldr	r3, [pc, #188]	; (80184b0 <tcp_input+0x2b8>)
 80183f4:	881b      	ldrh	r3, [r3, #0]
 80183f6:	3301      	adds	r3, #1
 80183f8:	b29a      	uxth	r2, r3
 80183fa:	4b2d      	ldr	r3, [pc, #180]	; (80184b0 <tcp_input+0x2b8>)
 80183fc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	891a      	ldrh	r2, [r3, #8]
 8018402:	4b2b      	ldr	r3, [pc, #172]	; (80184b0 <tcp_input+0x2b8>)
 8018404:	881b      	ldrh	r3, [r3, #0]
 8018406:	429a      	cmp	r2, r3
 8018408:	f200 82d9 	bhi.w	80189be <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801840c:	2300      	movs	r3, #0
 801840e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018410:	4b28      	ldr	r3, [pc, #160]	; (80184b4 <tcp_input+0x2bc>)
 8018412:	681b      	ldr	r3, [r3, #0]
 8018414:	61fb      	str	r3, [r7, #28]
 8018416:	e09d      	b.n	8018554 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8018418:	69fb      	ldr	r3, [r7, #28]
 801841a:	7d1b      	ldrb	r3, [r3, #20]
 801841c:	2b00      	cmp	r3, #0
 801841e:	d105      	bne.n	801842c <tcp_input+0x234>
 8018420:	4b15      	ldr	r3, [pc, #84]	; (8018478 <tcp_input+0x280>)
 8018422:	22fb      	movs	r2, #251	; 0xfb
 8018424:	4924      	ldr	r1, [pc, #144]	; (80184b8 <tcp_input+0x2c0>)
 8018426:	4816      	ldr	r0, [pc, #88]	; (8018480 <tcp_input+0x288>)
 8018428:	f00e fd54 	bl	8026ed4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801842c:	69fb      	ldr	r3, [r7, #28]
 801842e:	7d1b      	ldrb	r3, [r3, #20]
 8018430:	2b0a      	cmp	r3, #10
 8018432:	d105      	bne.n	8018440 <tcp_input+0x248>
 8018434:	4b10      	ldr	r3, [pc, #64]	; (8018478 <tcp_input+0x280>)
 8018436:	22fc      	movs	r2, #252	; 0xfc
 8018438:	4920      	ldr	r1, [pc, #128]	; (80184bc <tcp_input+0x2c4>)
 801843a:	4811      	ldr	r0, [pc, #68]	; (8018480 <tcp_input+0x288>)
 801843c:	f00e fd4a 	bl	8026ed4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8018440:	69fb      	ldr	r3, [r7, #28]
 8018442:	7d1b      	ldrb	r3, [r3, #20]
 8018444:	2b01      	cmp	r3, #1
 8018446:	d105      	bne.n	8018454 <tcp_input+0x25c>
 8018448:	4b0b      	ldr	r3, [pc, #44]	; (8018478 <tcp_input+0x280>)
 801844a:	22fd      	movs	r2, #253	; 0xfd
 801844c:	491c      	ldr	r1, [pc, #112]	; (80184c0 <tcp_input+0x2c8>)
 801844e:	480c      	ldr	r0, [pc, #48]	; (8018480 <tcp_input+0x288>)
 8018450:	f00e fd40 	bl	8026ed4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018454:	69fb      	ldr	r3, [r7, #28]
 8018456:	7a1b      	ldrb	r3, [r3, #8]
 8018458:	2b00      	cmp	r3, #0
 801845a:	d033      	beq.n	80184c4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801845c:	69fb      	ldr	r3, [r7, #28]
 801845e:	7a1a      	ldrb	r2, [r3, #8]
 8018460:	4b09      	ldr	r3, [pc, #36]	; (8018488 <tcp_input+0x290>)
 8018462:	685b      	ldr	r3, [r3, #4]
 8018464:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018468:	3301      	adds	r3, #1
 801846a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801846c:	429a      	cmp	r2, r3
 801846e:	d029      	beq.n	80184c4 <tcp_input+0x2cc>
      prev = pcb;
 8018470:	69fb      	ldr	r3, [r7, #28]
 8018472:	61bb      	str	r3, [r7, #24]
      continue;
 8018474:	e06b      	b.n	801854e <tcp_input+0x356>
 8018476:	bf00      	nop
 8018478:	0802c780 	.word	0x0802c780
 801847c:	0802c7b4 	.word	0x0802c7b4
 8018480:	0802c7cc 	.word	0x0802c7cc
 8018484:	24004f9c 	.word	0x24004f9c
 8018488:	24005400 	.word	0x24005400
 801848c:	24004fa0 	.word	0x24004fa0
 8018490:	24004fa4 	.word	0x24004fa4
 8018494:	24004fa2 	.word	0x24004fa2
 8018498:	0802c7f4 	.word	0x0802c7f4
 801849c:	0802c804 	.word	0x0802c804
 80184a0:	0802c810 	.word	0x0802c810
 80184a4:	24004fac 	.word	0x24004fac
 80184a8:	24004fb0 	.word	0x24004fb0
 80184ac:	24004fb8 	.word	0x24004fb8
 80184b0:	24004fb6 	.word	0x24004fb6
 80184b4:	24008668 	.word	0x24008668
 80184b8:	0802c830 	.word	0x0802c830
 80184bc:	0802c858 	.word	0x0802c858
 80184c0:	0802c884 	.word	0x0802c884
    }

    if (pcb->remote_port == tcphdr->src &&
 80184c4:	69fb      	ldr	r3, [r7, #28]
 80184c6:	8b1a      	ldrh	r2, [r3, #24]
 80184c8:	4b94      	ldr	r3, [pc, #592]	; (801871c <tcp_input+0x524>)
 80184ca:	681b      	ldr	r3, [r3, #0]
 80184cc:	881b      	ldrh	r3, [r3, #0]
 80184ce:	b29b      	uxth	r3, r3
 80184d0:	429a      	cmp	r2, r3
 80184d2:	d13a      	bne.n	801854a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80184d4:	69fb      	ldr	r3, [r7, #28]
 80184d6:	8ada      	ldrh	r2, [r3, #22]
 80184d8:	4b90      	ldr	r3, [pc, #576]	; (801871c <tcp_input+0x524>)
 80184da:	681b      	ldr	r3, [r3, #0]
 80184dc:	885b      	ldrh	r3, [r3, #2]
 80184de:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80184e0:	429a      	cmp	r2, r3
 80184e2:	d132      	bne.n	801854a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80184e4:	69fb      	ldr	r3, [r7, #28]
 80184e6:	685a      	ldr	r2, [r3, #4]
 80184e8:	4b8d      	ldr	r3, [pc, #564]	; (8018720 <tcp_input+0x528>)
 80184ea:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80184ec:	429a      	cmp	r2, r3
 80184ee:	d12c      	bne.n	801854a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80184f0:	69fb      	ldr	r3, [r7, #28]
 80184f2:	681a      	ldr	r2, [r3, #0]
 80184f4:	4b8a      	ldr	r3, [pc, #552]	; (8018720 <tcp_input+0x528>)
 80184f6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80184f8:	429a      	cmp	r2, r3
 80184fa:	d126      	bne.n	801854a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80184fc:	69fb      	ldr	r3, [r7, #28]
 80184fe:	68db      	ldr	r3, [r3, #12]
 8018500:	69fa      	ldr	r2, [r7, #28]
 8018502:	429a      	cmp	r2, r3
 8018504:	d106      	bne.n	8018514 <tcp_input+0x31c>
 8018506:	4b87      	ldr	r3, [pc, #540]	; (8018724 <tcp_input+0x52c>)
 8018508:	f240 120d 	movw	r2, #269	; 0x10d
 801850c:	4986      	ldr	r1, [pc, #536]	; (8018728 <tcp_input+0x530>)
 801850e:	4887      	ldr	r0, [pc, #540]	; (801872c <tcp_input+0x534>)
 8018510:	f00e fce0 	bl	8026ed4 <iprintf>
      if (prev != NULL) {
 8018514:	69bb      	ldr	r3, [r7, #24]
 8018516:	2b00      	cmp	r3, #0
 8018518:	d00a      	beq.n	8018530 <tcp_input+0x338>
        prev->next = pcb->next;
 801851a:	69fb      	ldr	r3, [r7, #28]
 801851c:	68da      	ldr	r2, [r3, #12]
 801851e:	69bb      	ldr	r3, [r7, #24]
 8018520:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8018522:	4b83      	ldr	r3, [pc, #524]	; (8018730 <tcp_input+0x538>)
 8018524:	681a      	ldr	r2, [r3, #0]
 8018526:	69fb      	ldr	r3, [r7, #28]
 8018528:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801852a:	4a81      	ldr	r2, [pc, #516]	; (8018730 <tcp_input+0x538>)
 801852c:	69fb      	ldr	r3, [r7, #28]
 801852e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8018530:	69fb      	ldr	r3, [r7, #28]
 8018532:	68db      	ldr	r3, [r3, #12]
 8018534:	69fa      	ldr	r2, [r7, #28]
 8018536:	429a      	cmp	r2, r3
 8018538:	d111      	bne.n	801855e <tcp_input+0x366>
 801853a:	4b7a      	ldr	r3, [pc, #488]	; (8018724 <tcp_input+0x52c>)
 801853c:	f240 1215 	movw	r2, #277	; 0x115
 8018540:	497c      	ldr	r1, [pc, #496]	; (8018734 <tcp_input+0x53c>)
 8018542:	487a      	ldr	r0, [pc, #488]	; (801872c <tcp_input+0x534>)
 8018544:	f00e fcc6 	bl	8026ed4 <iprintf>
      break;
 8018548:	e009      	b.n	801855e <tcp_input+0x366>
    }
    prev = pcb;
 801854a:	69fb      	ldr	r3, [r7, #28]
 801854c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801854e:	69fb      	ldr	r3, [r7, #28]
 8018550:	68db      	ldr	r3, [r3, #12]
 8018552:	61fb      	str	r3, [r7, #28]
 8018554:	69fb      	ldr	r3, [r7, #28]
 8018556:	2b00      	cmp	r3, #0
 8018558:	f47f af5e 	bne.w	8018418 <tcp_input+0x220>
 801855c:	e000      	b.n	8018560 <tcp_input+0x368>
      break;
 801855e:	bf00      	nop
  }

  if (pcb == NULL) {
 8018560:	69fb      	ldr	r3, [r7, #28]
 8018562:	2b00      	cmp	r3, #0
 8018564:	f040 8095 	bne.w	8018692 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018568:	4b73      	ldr	r3, [pc, #460]	; (8018738 <tcp_input+0x540>)
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	61fb      	str	r3, [r7, #28]
 801856e:	e03f      	b.n	80185f0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8018570:	69fb      	ldr	r3, [r7, #28]
 8018572:	7d1b      	ldrb	r3, [r3, #20]
 8018574:	2b0a      	cmp	r3, #10
 8018576:	d006      	beq.n	8018586 <tcp_input+0x38e>
 8018578:	4b6a      	ldr	r3, [pc, #424]	; (8018724 <tcp_input+0x52c>)
 801857a:	f240 121f 	movw	r2, #287	; 0x11f
 801857e:	496f      	ldr	r1, [pc, #444]	; (801873c <tcp_input+0x544>)
 8018580:	486a      	ldr	r0, [pc, #424]	; (801872c <tcp_input+0x534>)
 8018582:	f00e fca7 	bl	8026ed4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018586:	69fb      	ldr	r3, [r7, #28]
 8018588:	7a1b      	ldrb	r3, [r3, #8]
 801858a:	2b00      	cmp	r3, #0
 801858c:	d009      	beq.n	80185a2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801858e:	69fb      	ldr	r3, [r7, #28]
 8018590:	7a1a      	ldrb	r2, [r3, #8]
 8018592:	4b63      	ldr	r3, [pc, #396]	; (8018720 <tcp_input+0x528>)
 8018594:	685b      	ldr	r3, [r3, #4]
 8018596:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801859a:	3301      	adds	r3, #1
 801859c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801859e:	429a      	cmp	r2, r3
 80185a0:	d122      	bne.n	80185e8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80185a2:	69fb      	ldr	r3, [r7, #28]
 80185a4:	8b1a      	ldrh	r2, [r3, #24]
 80185a6:	4b5d      	ldr	r3, [pc, #372]	; (801871c <tcp_input+0x524>)
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	881b      	ldrh	r3, [r3, #0]
 80185ac:	b29b      	uxth	r3, r3
 80185ae:	429a      	cmp	r2, r3
 80185b0:	d11b      	bne.n	80185ea <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80185b2:	69fb      	ldr	r3, [r7, #28]
 80185b4:	8ada      	ldrh	r2, [r3, #22]
 80185b6:	4b59      	ldr	r3, [pc, #356]	; (801871c <tcp_input+0x524>)
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	885b      	ldrh	r3, [r3, #2]
 80185bc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80185be:	429a      	cmp	r2, r3
 80185c0:	d113      	bne.n	80185ea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80185c2:	69fb      	ldr	r3, [r7, #28]
 80185c4:	685a      	ldr	r2, [r3, #4]
 80185c6:	4b56      	ldr	r3, [pc, #344]	; (8018720 <tcp_input+0x528>)
 80185c8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80185ca:	429a      	cmp	r2, r3
 80185cc:	d10d      	bne.n	80185ea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80185ce:	69fb      	ldr	r3, [r7, #28]
 80185d0:	681a      	ldr	r2, [r3, #0]
 80185d2:	4b53      	ldr	r3, [pc, #332]	; (8018720 <tcp_input+0x528>)
 80185d4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80185d6:	429a      	cmp	r2, r3
 80185d8:	d107      	bne.n	80185ea <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80185da:	69f8      	ldr	r0, [r7, #28]
 80185dc:	f000 fb54 	bl	8018c88 <tcp_timewait_input>
        }
        pbuf_free(p);
 80185e0:	6878      	ldr	r0, [r7, #4]
 80185e2:	f7fd fa47 	bl	8015a74 <pbuf_free>
        return;
 80185e6:	e1f0      	b.n	80189ca <tcp_input+0x7d2>
        continue;
 80185e8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80185ea:	69fb      	ldr	r3, [r7, #28]
 80185ec:	68db      	ldr	r3, [r3, #12]
 80185ee:	61fb      	str	r3, [r7, #28]
 80185f0:	69fb      	ldr	r3, [r7, #28]
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	d1bc      	bne.n	8018570 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80185f6:	2300      	movs	r3, #0
 80185f8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80185fa:	4b51      	ldr	r3, [pc, #324]	; (8018740 <tcp_input+0x548>)
 80185fc:	681b      	ldr	r3, [r3, #0]
 80185fe:	617b      	str	r3, [r7, #20]
 8018600:	e02a      	b.n	8018658 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8018602:	697b      	ldr	r3, [r7, #20]
 8018604:	7a1b      	ldrb	r3, [r3, #8]
 8018606:	2b00      	cmp	r3, #0
 8018608:	d00c      	beq.n	8018624 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801860a:	697b      	ldr	r3, [r7, #20]
 801860c:	7a1a      	ldrb	r2, [r3, #8]
 801860e:	4b44      	ldr	r3, [pc, #272]	; (8018720 <tcp_input+0x528>)
 8018610:	685b      	ldr	r3, [r3, #4]
 8018612:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018616:	3301      	adds	r3, #1
 8018618:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801861a:	429a      	cmp	r2, r3
 801861c:	d002      	beq.n	8018624 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801861e:	697b      	ldr	r3, [r7, #20]
 8018620:	61bb      	str	r3, [r7, #24]
        continue;
 8018622:	e016      	b.n	8018652 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8018624:	697b      	ldr	r3, [r7, #20]
 8018626:	8ada      	ldrh	r2, [r3, #22]
 8018628:	4b3c      	ldr	r3, [pc, #240]	; (801871c <tcp_input+0x524>)
 801862a:	681b      	ldr	r3, [r3, #0]
 801862c:	885b      	ldrh	r3, [r3, #2]
 801862e:	b29b      	uxth	r3, r3
 8018630:	429a      	cmp	r2, r3
 8018632:	d10c      	bne.n	801864e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8018634:	697b      	ldr	r3, [r7, #20]
 8018636:	681a      	ldr	r2, [r3, #0]
 8018638:	4b39      	ldr	r3, [pc, #228]	; (8018720 <tcp_input+0x528>)
 801863a:	695b      	ldr	r3, [r3, #20]
 801863c:	429a      	cmp	r2, r3
 801863e:	d00f      	beq.n	8018660 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8018640:	697b      	ldr	r3, [r7, #20]
 8018642:	2b00      	cmp	r3, #0
 8018644:	d00d      	beq.n	8018662 <tcp_input+0x46a>
 8018646:	697b      	ldr	r3, [r7, #20]
 8018648:	681b      	ldr	r3, [r3, #0]
 801864a:	2b00      	cmp	r3, #0
 801864c:	d009      	beq.n	8018662 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801864e:	697b      	ldr	r3, [r7, #20]
 8018650:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8018652:	697b      	ldr	r3, [r7, #20]
 8018654:	68db      	ldr	r3, [r3, #12]
 8018656:	617b      	str	r3, [r7, #20]
 8018658:	697b      	ldr	r3, [r7, #20]
 801865a:	2b00      	cmp	r3, #0
 801865c:	d1d1      	bne.n	8018602 <tcp_input+0x40a>
 801865e:	e000      	b.n	8018662 <tcp_input+0x46a>
            break;
 8018660:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8018662:	697b      	ldr	r3, [r7, #20]
 8018664:	2b00      	cmp	r3, #0
 8018666:	d014      	beq.n	8018692 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8018668:	69bb      	ldr	r3, [r7, #24]
 801866a:	2b00      	cmp	r3, #0
 801866c:	d00a      	beq.n	8018684 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801866e:	697b      	ldr	r3, [r7, #20]
 8018670:	68da      	ldr	r2, [r3, #12]
 8018672:	69bb      	ldr	r3, [r7, #24]
 8018674:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8018676:	4b32      	ldr	r3, [pc, #200]	; (8018740 <tcp_input+0x548>)
 8018678:	681a      	ldr	r2, [r3, #0]
 801867a:	697b      	ldr	r3, [r7, #20]
 801867c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801867e:	4a30      	ldr	r2, [pc, #192]	; (8018740 <tcp_input+0x548>)
 8018680:	697b      	ldr	r3, [r7, #20]
 8018682:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8018684:	6978      	ldr	r0, [r7, #20]
 8018686:	f000 fa01 	bl	8018a8c <tcp_listen_input>
      }
      pbuf_free(p);
 801868a:	6878      	ldr	r0, [r7, #4]
 801868c:	f7fd f9f2 	bl	8015a74 <pbuf_free>
      return;
 8018690:	e19b      	b.n	80189ca <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8018692:	69fb      	ldr	r3, [r7, #28]
 8018694:	2b00      	cmp	r3, #0
 8018696:	f000 8160 	beq.w	801895a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801869a:	4b2a      	ldr	r3, [pc, #168]	; (8018744 <tcp_input+0x54c>)
 801869c:	2200      	movs	r2, #0
 801869e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	891a      	ldrh	r2, [r3, #8]
 80186a4:	4b27      	ldr	r3, [pc, #156]	; (8018744 <tcp_input+0x54c>)
 80186a6:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80186a8:	4a26      	ldr	r2, [pc, #152]	; (8018744 <tcp_input+0x54c>)
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80186ae:	4b1b      	ldr	r3, [pc, #108]	; (801871c <tcp_input+0x524>)
 80186b0:	681b      	ldr	r3, [r3, #0]
 80186b2:	4a24      	ldr	r2, [pc, #144]	; (8018744 <tcp_input+0x54c>)
 80186b4:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80186b6:	4b24      	ldr	r3, [pc, #144]	; (8018748 <tcp_input+0x550>)
 80186b8:	2200      	movs	r2, #0
 80186ba:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80186bc:	4b23      	ldr	r3, [pc, #140]	; (801874c <tcp_input+0x554>)
 80186be:	2200      	movs	r2, #0
 80186c0:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80186c2:	4b23      	ldr	r3, [pc, #140]	; (8018750 <tcp_input+0x558>)
 80186c4:	2200      	movs	r2, #0
 80186c6:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80186c8:	4b22      	ldr	r3, [pc, #136]	; (8018754 <tcp_input+0x55c>)
 80186ca:	781b      	ldrb	r3, [r3, #0]
 80186cc:	f003 0308 	and.w	r3, r3, #8
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d006      	beq.n	80186e2 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	7b5b      	ldrb	r3, [r3, #13]
 80186d8:	f043 0301 	orr.w	r3, r3, #1
 80186dc:	b2da      	uxtb	r2, r3
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80186e2:	69fb      	ldr	r3, [r7, #28]
 80186e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d038      	beq.n	801875c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80186ea:	69f8      	ldr	r0, [r7, #28]
 80186ec:	f7ff f870 	bl	80177d0 <tcp_process_refused_data>
 80186f0:	4603      	mov	r3, r0
 80186f2:	f113 0f0d 	cmn.w	r3, #13
 80186f6:	d007      	beq.n	8018708 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80186f8:	69fb      	ldr	r3, [r7, #28]
 80186fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d02d      	beq.n	801875c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8018700:	4b15      	ldr	r3, [pc, #84]	; (8018758 <tcp_input+0x560>)
 8018702:	881b      	ldrh	r3, [r3, #0]
 8018704:	2b00      	cmp	r3, #0
 8018706:	d029      	beq.n	801875c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8018708:	69fb      	ldr	r3, [r7, #28]
 801870a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801870c:	2b00      	cmp	r3, #0
 801870e:	f040 8104 	bne.w	801891a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8018712:	69f8      	ldr	r0, [r7, #28]
 8018714:	f003 fe16 	bl	801c344 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8018718:	e0ff      	b.n	801891a <tcp_input+0x722>
 801871a:	bf00      	nop
 801871c:	24004f9c 	.word	0x24004f9c
 8018720:	24005400 	.word	0x24005400
 8018724:	0802c780 	.word	0x0802c780
 8018728:	0802c8ac 	.word	0x0802c8ac
 801872c:	0802c7cc 	.word	0x0802c7cc
 8018730:	24008668 	.word	0x24008668
 8018734:	0802c8d8 	.word	0x0802c8d8
 8018738:	24008678 	.word	0x24008678
 801873c:	0802c904 	.word	0x0802c904
 8018740:	24008670 	.word	0x24008670
 8018744:	24004f8c 	.word	0x24004f8c
 8018748:	24004fbc 	.word	0x24004fbc
 801874c:	24004fb9 	.word	0x24004fb9
 8018750:	24004fb4 	.word	0x24004fb4
 8018754:	24004fb8 	.word	0x24004fb8
 8018758:	24004fb6 	.word	0x24004fb6
      }
    }
    tcp_input_pcb = pcb;
 801875c:	4a9c      	ldr	r2, [pc, #624]	; (80189d0 <tcp_input+0x7d8>)
 801875e:	69fb      	ldr	r3, [r7, #28]
 8018760:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8018762:	69f8      	ldr	r0, [r7, #28]
 8018764:	f000 fb0a 	bl	8018d7c <tcp_process>
 8018768:	4603      	mov	r3, r0
 801876a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801876c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018770:	f113 0f0d 	cmn.w	r3, #13
 8018774:	f000 80d3 	beq.w	801891e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8018778:	4b96      	ldr	r3, [pc, #600]	; (80189d4 <tcp_input+0x7dc>)
 801877a:	781b      	ldrb	r3, [r3, #0]
 801877c:	f003 0308 	and.w	r3, r3, #8
 8018780:	2b00      	cmp	r3, #0
 8018782:	d015      	beq.n	80187b0 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8018784:	69fb      	ldr	r3, [r7, #28]
 8018786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801878a:	2b00      	cmp	r3, #0
 801878c:	d008      	beq.n	80187a0 <tcp_input+0x5a8>
 801878e:	69fb      	ldr	r3, [r7, #28]
 8018790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018794:	69fa      	ldr	r2, [r7, #28]
 8018796:	6912      	ldr	r2, [r2, #16]
 8018798:	f06f 010d 	mvn.w	r1, #13
 801879c:	4610      	mov	r0, r2
 801879e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80187a0:	69f9      	ldr	r1, [r7, #28]
 80187a2:	488d      	ldr	r0, [pc, #564]	; (80189d8 <tcp_input+0x7e0>)
 80187a4:	f7ff fbb0 	bl	8017f08 <tcp_pcb_remove>
        tcp_free(pcb);
 80187a8:	69f8      	ldr	r0, [r7, #28]
 80187aa:	f7fd fdb3 	bl	8016314 <tcp_free>
 80187ae:	e0c1      	b.n	8018934 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80187b0:	2300      	movs	r3, #0
 80187b2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80187b4:	4b89      	ldr	r3, [pc, #548]	; (80189dc <tcp_input+0x7e4>)
 80187b6:	881b      	ldrh	r3, [r3, #0]
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	d01d      	beq.n	80187f8 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80187bc:	4b87      	ldr	r3, [pc, #540]	; (80189dc <tcp_input+0x7e4>)
 80187be:	881b      	ldrh	r3, [r3, #0]
 80187c0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80187c2:	69fb      	ldr	r3, [r7, #28]
 80187c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80187c8:	2b00      	cmp	r3, #0
 80187ca:	d00a      	beq.n	80187e2 <tcp_input+0x5ea>
 80187cc:	69fb      	ldr	r3, [r7, #28]
 80187ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80187d2:	69fa      	ldr	r2, [r7, #28]
 80187d4:	6910      	ldr	r0, [r2, #16]
 80187d6:	89fa      	ldrh	r2, [r7, #14]
 80187d8:	69f9      	ldr	r1, [r7, #28]
 80187da:	4798      	blx	r3
 80187dc:	4603      	mov	r3, r0
 80187de:	74fb      	strb	r3, [r7, #19]
 80187e0:	e001      	b.n	80187e6 <tcp_input+0x5ee>
 80187e2:	2300      	movs	r3, #0
 80187e4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80187e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80187ea:	f113 0f0d 	cmn.w	r3, #13
 80187ee:	f000 8098 	beq.w	8018922 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80187f2:	4b7a      	ldr	r3, [pc, #488]	; (80189dc <tcp_input+0x7e4>)
 80187f4:	2200      	movs	r2, #0
 80187f6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80187f8:	69f8      	ldr	r0, [r7, #28]
 80187fa:	f000 f907 	bl	8018a0c <tcp_input_delayed_close>
 80187fe:	4603      	mov	r3, r0
 8018800:	2b00      	cmp	r3, #0
 8018802:	f040 8090 	bne.w	8018926 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8018806:	4b76      	ldr	r3, [pc, #472]	; (80189e0 <tcp_input+0x7e8>)
 8018808:	681b      	ldr	r3, [r3, #0]
 801880a:	2b00      	cmp	r3, #0
 801880c:	d041      	beq.n	8018892 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801880e:	69fb      	ldr	r3, [r7, #28]
 8018810:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018812:	2b00      	cmp	r3, #0
 8018814:	d006      	beq.n	8018824 <tcp_input+0x62c>
 8018816:	4b73      	ldr	r3, [pc, #460]	; (80189e4 <tcp_input+0x7ec>)
 8018818:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801881c:	4972      	ldr	r1, [pc, #456]	; (80189e8 <tcp_input+0x7f0>)
 801881e:	4873      	ldr	r0, [pc, #460]	; (80189ec <tcp_input+0x7f4>)
 8018820:	f00e fb58 	bl	8026ed4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8018824:	69fb      	ldr	r3, [r7, #28]
 8018826:	8b5b      	ldrh	r3, [r3, #26]
 8018828:	f003 0310 	and.w	r3, r3, #16
 801882c:	2b00      	cmp	r3, #0
 801882e:	d008      	beq.n	8018842 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8018830:	4b6b      	ldr	r3, [pc, #428]	; (80189e0 <tcp_input+0x7e8>)
 8018832:	681b      	ldr	r3, [r3, #0]
 8018834:	4618      	mov	r0, r3
 8018836:	f7fd f91d 	bl	8015a74 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801883a:	69f8      	ldr	r0, [r7, #28]
 801883c:	f7fe f8ae 	bl	801699c <tcp_abort>
            goto aborted;
 8018840:	e078      	b.n	8018934 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8018842:	69fb      	ldr	r3, [r7, #28]
 8018844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018848:	2b00      	cmp	r3, #0
 801884a:	d00c      	beq.n	8018866 <tcp_input+0x66e>
 801884c:	69fb      	ldr	r3, [r7, #28]
 801884e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8018852:	69fb      	ldr	r3, [r7, #28]
 8018854:	6918      	ldr	r0, [r3, #16]
 8018856:	4b62      	ldr	r3, [pc, #392]	; (80189e0 <tcp_input+0x7e8>)
 8018858:	681a      	ldr	r2, [r3, #0]
 801885a:	2300      	movs	r3, #0
 801885c:	69f9      	ldr	r1, [r7, #28]
 801885e:	47a0      	blx	r4
 8018860:	4603      	mov	r3, r0
 8018862:	74fb      	strb	r3, [r7, #19]
 8018864:	e008      	b.n	8018878 <tcp_input+0x680>
 8018866:	4b5e      	ldr	r3, [pc, #376]	; (80189e0 <tcp_input+0x7e8>)
 8018868:	681a      	ldr	r2, [r3, #0]
 801886a:	2300      	movs	r3, #0
 801886c:	69f9      	ldr	r1, [r7, #28]
 801886e:	2000      	movs	r0, #0
 8018870:	f7ff f884 	bl	801797c <tcp_recv_null>
 8018874:	4603      	mov	r3, r0
 8018876:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8018878:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801887c:	f113 0f0d 	cmn.w	r3, #13
 8018880:	d053      	beq.n	801892a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8018882:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018886:	2b00      	cmp	r3, #0
 8018888:	d003      	beq.n	8018892 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801888a:	4b55      	ldr	r3, [pc, #340]	; (80189e0 <tcp_input+0x7e8>)
 801888c:	681a      	ldr	r2, [r3, #0]
 801888e:	69fb      	ldr	r3, [r7, #28]
 8018890:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8018892:	4b50      	ldr	r3, [pc, #320]	; (80189d4 <tcp_input+0x7dc>)
 8018894:	781b      	ldrb	r3, [r3, #0]
 8018896:	f003 0320 	and.w	r3, r3, #32
 801889a:	2b00      	cmp	r3, #0
 801889c:	d030      	beq.n	8018900 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 801889e:	69fb      	ldr	r3, [r7, #28]
 80188a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	d009      	beq.n	80188ba <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80188a6:	69fb      	ldr	r3, [r7, #28]
 80188a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80188aa:	7b5a      	ldrb	r2, [r3, #13]
 80188ac:	69fb      	ldr	r3, [r7, #28]
 80188ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80188b0:	f042 0220 	orr.w	r2, r2, #32
 80188b4:	b2d2      	uxtb	r2, r2
 80188b6:	735a      	strb	r2, [r3, #13]
 80188b8:	e022      	b.n	8018900 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80188ba:	69fb      	ldr	r3, [r7, #28]
 80188bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80188be:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80188c2:	d005      	beq.n	80188d0 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80188c4:	69fb      	ldr	r3, [r7, #28]
 80188c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80188c8:	3301      	adds	r3, #1
 80188ca:	b29a      	uxth	r2, r3
 80188cc:	69fb      	ldr	r3, [r7, #28]
 80188ce:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80188d0:	69fb      	ldr	r3, [r7, #28]
 80188d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80188d6:	2b00      	cmp	r3, #0
 80188d8:	d00b      	beq.n	80188f2 <tcp_input+0x6fa>
 80188da:	69fb      	ldr	r3, [r7, #28]
 80188dc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80188e0:	69fb      	ldr	r3, [r7, #28]
 80188e2:	6918      	ldr	r0, [r3, #16]
 80188e4:	2300      	movs	r3, #0
 80188e6:	2200      	movs	r2, #0
 80188e8:	69f9      	ldr	r1, [r7, #28]
 80188ea:	47a0      	blx	r4
 80188ec:	4603      	mov	r3, r0
 80188ee:	74fb      	strb	r3, [r7, #19]
 80188f0:	e001      	b.n	80188f6 <tcp_input+0x6fe>
 80188f2:	2300      	movs	r3, #0
 80188f4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80188f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80188fa:	f113 0f0d 	cmn.w	r3, #13
 80188fe:	d016      	beq.n	801892e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8018900:	4b33      	ldr	r3, [pc, #204]	; (80189d0 <tcp_input+0x7d8>)
 8018902:	2200      	movs	r2, #0
 8018904:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8018906:	69f8      	ldr	r0, [r7, #28]
 8018908:	f000 f880 	bl	8018a0c <tcp_input_delayed_close>
 801890c:	4603      	mov	r3, r0
 801890e:	2b00      	cmp	r3, #0
 8018910:	d10f      	bne.n	8018932 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8018912:	69f8      	ldr	r0, [r7, #28]
 8018914:	f002 ff10 	bl	801b738 <tcp_output>
 8018918:	e00c      	b.n	8018934 <tcp_input+0x73c>
        goto aborted;
 801891a:	bf00      	nop
 801891c:	e00a      	b.n	8018934 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801891e:	bf00      	nop
 8018920:	e008      	b.n	8018934 <tcp_input+0x73c>
              goto aborted;
 8018922:	bf00      	nop
 8018924:	e006      	b.n	8018934 <tcp_input+0x73c>
          goto aborted;
 8018926:	bf00      	nop
 8018928:	e004      	b.n	8018934 <tcp_input+0x73c>
            goto aborted;
 801892a:	bf00      	nop
 801892c:	e002      	b.n	8018934 <tcp_input+0x73c>
              goto aborted;
 801892e:	bf00      	nop
 8018930:	e000      	b.n	8018934 <tcp_input+0x73c>
          goto aborted;
 8018932:	bf00      	nop
    tcp_input_pcb = NULL;
 8018934:	4b26      	ldr	r3, [pc, #152]	; (80189d0 <tcp_input+0x7d8>)
 8018936:	2200      	movs	r2, #0
 8018938:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801893a:	4b29      	ldr	r3, [pc, #164]	; (80189e0 <tcp_input+0x7e8>)
 801893c:	2200      	movs	r2, #0
 801893e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8018940:	4b2b      	ldr	r3, [pc, #172]	; (80189f0 <tcp_input+0x7f8>)
 8018942:	685b      	ldr	r3, [r3, #4]
 8018944:	2b00      	cmp	r3, #0
 8018946:	d03f      	beq.n	80189c8 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8018948:	4b29      	ldr	r3, [pc, #164]	; (80189f0 <tcp_input+0x7f8>)
 801894a:	685b      	ldr	r3, [r3, #4]
 801894c:	4618      	mov	r0, r3
 801894e:	f7fd f891 	bl	8015a74 <pbuf_free>
      inseg.p = NULL;
 8018952:	4b27      	ldr	r3, [pc, #156]	; (80189f0 <tcp_input+0x7f8>)
 8018954:	2200      	movs	r2, #0
 8018956:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8018958:	e036      	b.n	80189c8 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801895a:	4b26      	ldr	r3, [pc, #152]	; (80189f4 <tcp_input+0x7fc>)
 801895c:	681b      	ldr	r3, [r3, #0]
 801895e:	899b      	ldrh	r3, [r3, #12]
 8018960:	b29b      	uxth	r3, r3
 8018962:	4618      	mov	r0, r3
 8018964:	f7fa fbb4 	bl	80130d0 <lwip_htons>
 8018968:	4603      	mov	r3, r0
 801896a:	b2db      	uxtb	r3, r3
 801896c:	f003 0304 	and.w	r3, r3, #4
 8018970:	2b00      	cmp	r3, #0
 8018972:	d118      	bne.n	80189a6 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018974:	4b20      	ldr	r3, [pc, #128]	; (80189f8 <tcp_input+0x800>)
 8018976:	6819      	ldr	r1, [r3, #0]
 8018978:	4b20      	ldr	r3, [pc, #128]	; (80189fc <tcp_input+0x804>)
 801897a:	881b      	ldrh	r3, [r3, #0]
 801897c:	461a      	mov	r2, r3
 801897e:	4b20      	ldr	r3, [pc, #128]	; (8018a00 <tcp_input+0x808>)
 8018980:	681b      	ldr	r3, [r3, #0]
 8018982:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018984:	4b1b      	ldr	r3, [pc, #108]	; (80189f4 <tcp_input+0x7fc>)
 8018986:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018988:	885b      	ldrh	r3, [r3, #2]
 801898a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801898c:	4a19      	ldr	r2, [pc, #100]	; (80189f4 <tcp_input+0x7fc>)
 801898e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018990:	8812      	ldrh	r2, [r2, #0]
 8018992:	b292      	uxth	r2, r2
 8018994:	9202      	str	r2, [sp, #8]
 8018996:	9301      	str	r3, [sp, #4]
 8018998:	4b1a      	ldr	r3, [pc, #104]	; (8018a04 <tcp_input+0x80c>)
 801899a:	9300      	str	r3, [sp, #0]
 801899c:	4b1a      	ldr	r3, [pc, #104]	; (8018a08 <tcp_input+0x810>)
 801899e:	4602      	mov	r2, r0
 80189a0:	2000      	movs	r0, #0
 80189a2:	f003 fc7d 	bl	801c2a0 <tcp_rst>
    pbuf_free(p);
 80189a6:	6878      	ldr	r0, [r7, #4]
 80189a8:	f7fd f864 	bl	8015a74 <pbuf_free>
  return;
 80189ac:	e00c      	b.n	80189c8 <tcp_input+0x7d0>
    goto dropped;
 80189ae:	bf00      	nop
 80189b0:	e006      	b.n	80189c0 <tcp_input+0x7c8>
    goto dropped;
 80189b2:	bf00      	nop
 80189b4:	e004      	b.n	80189c0 <tcp_input+0x7c8>
    goto dropped;
 80189b6:	bf00      	nop
 80189b8:	e002      	b.n	80189c0 <tcp_input+0x7c8>
      goto dropped;
 80189ba:	bf00      	nop
 80189bc:	e000      	b.n	80189c0 <tcp_input+0x7c8>
      goto dropped;
 80189be:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80189c0:	6878      	ldr	r0, [r7, #4]
 80189c2:	f7fd f857 	bl	8015a74 <pbuf_free>
 80189c6:	e000      	b.n	80189ca <tcp_input+0x7d2>
  return;
 80189c8:	bf00      	nop
}
 80189ca:	3724      	adds	r7, #36	; 0x24
 80189cc:	46bd      	mov	sp, r7
 80189ce:	bd90      	pop	{r4, r7, pc}
 80189d0:	2400867c 	.word	0x2400867c
 80189d4:	24004fb9 	.word	0x24004fb9
 80189d8:	24008668 	.word	0x24008668
 80189dc:	24004fb4 	.word	0x24004fb4
 80189e0:	24004fbc 	.word	0x24004fbc
 80189e4:	0802c780 	.word	0x0802c780
 80189e8:	0802c934 	.word	0x0802c934
 80189ec:	0802c7cc 	.word	0x0802c7cc
 80189f0:	24004f8c 	.word	0x24004f8c
 80189f4:	24004f9c 	.word	0x24004f9c
 80189f8:	24004fb0 	.word	0x24004fb0
 80189fc:	24004fb6 	.word	0x24004fb6
 8018a00:	24004fac 	.word	0x24004fac
 8018a04:	24005410 	.word	0x24005410
 8018a08:	24005414 	.word	0x24005414

08018a0c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8018a0c:	b580      	push	{r7, lr}
 8018a0e:	b082      	sub	sp, #8
 8018a10:	af00      	add	r7, sp, #0
 8018a12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	d106      	bne.n	8018a28 <tcp_input_delayed_close+0x1c>
 8018a1a:	4b17      	ldr	r3, [pc, #92]	; (8018a78 <tcp_input_delayed_close+0x6c>)
 8018a1c:	f240 225a 	movw	r2, #602	; 0x25a
 8018a20:	4916      	ldr	r1, [pc, #88]	; (8018a7c <tcp_input_delayed_close+0x70>)
 8018a22:	4817      	ldr	r0, [pc, #92]	; (8018a80 <tcp_input_delayed_close+0x74>)
 8018a24:	f00e fa56 	bl	8026ed4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8018a28:	4b16      	ldr	r3, [pc, #88]	; (8018a84 <tcp_input_delayed_close+0x78>)
 8018a2a:	781b      	ldrb	r3, [r3, #0]
 8018a2c:	f003 0310 	and.w	r3, r3, #16
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d01c      	beq.n	8018a6e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	8b5b      	ldrh	r3, [r3, #26]
 8018a38:	f003 0310 	and.w	r3, r3, #16
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	d10d      	bne.n	8018a5c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d008      	beq.n	8018a5c <tcp_input_delayed_close+0x50>
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018a50:	687a      	ldr	r2, [r7, #4]
 8018a52:	6912      	ldr	r2, [r2, #16]
 8018a54:	f06f 010e 	mvn.w	r1, #14
 8018a58:	4610      	mov	r0, r2
 8018a5a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8018a5c:	6879      	ldr	r1, [r7, #4]
 8018a5e:	480a      	ldr	r0, [pc, #40]	; (8018a88 <tcp_input_delayed_close+0x7c>)
 8018a60:	f7ff fa52 	bl	8017f08 <tcp_pcb_remove>
    tcp_free(pcb);
 8018a64:	6878      	ldr	r0, [r7, #4]
 8018a66:	f7fd fc55 	bl	8016314 <tcp_free>
    return 1;
 8018a6a:	2301      	movs	r3, #1
 8018a6c:	e000      	b.n	8018a70 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8018a6e:	2300      	movs	r3, #0
}
 8018a70:	4618      	mov	r0, r3
 8018a72:	3708      	adds	r7, #8
 8018a74:	46bd      	mov	sp, r7
 8018a76:	bd80      	pop	{r7, pc}
 8018a78:	0802c780 	.word	0x0802c780
 8018a7c:	0802c950 	.word	0x0802c950
 8018a80:	0802c7cc 	.word	0x0802c7cc
 8018a84:	24004fb9 	.word	0x24004fb9
 8018a88:	24008668 	.word	0x24008668

08018a8c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8018a8c:	b590      	push	{r4, r7, lr}
 8018a8e:	b08b      	sub	sp, #44	; 0x2c
 8018a90:	af04      	add	r7, sp, #16
 8018a92:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8018a94:	4b6f      	ldr	r3, [pc, #444]	; (8018c54 <tcp_listen_input+0x1c8>)
 8018a96:	781b      	ldrb	r3, [r3, #0]
 8018a98:	f003 0304 	and.w	r3, r3, #4
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	f040 80d2 	bne.w	8018c46 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	d106      	bne.n	8018ab6 <tcp_listen_input+0x2a>
 8018aa8:	4b6b      	ldr	r3, [pc, #428]	; (8018c58 <tcp_listen_input+0x1cc>)
 8018aaa:	f240 2281 	movw	r2, #641	; 0x281
 8018aae:	496b      	ldr	r1, [pc, #428]	; (8018c5c <tcp_listen_input+0x1d0>)
 8018ab0:	486b      	ldr	r0, [pc, #428]	; (8018c60 <tcp_listen_input+0x1d4>)
 8018ab2:	f00e fa0f 	bl	8026ed4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8018ab6:	4b67      	ldr	r3, [pc, #412]	; (8018c54 <tcp_listen_input+0x1c8>)
 8018ab8:	781b      	ldrb	r3, [r3, #0]
 8018aba:	f003 0310 	and.w	r3, r3, #16
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	d019      	beq.n	8018af6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018ac2:	4b68      	ldr	r3, [pc, #416]	; (8018c64 <tcp_listen_input+0x1d8>)
 8018ac4:	6819      	ldr	r1, [r3, #0]
 8018ac6:	4b68      	ldr	r3, [pc, #416]	; (8018c68 <tcp_listen_input+0x1dc>)
 8018ac8:	881b      	ldrh	r3, [r3, #0]
 8018aca:	461a      	mov	r2, r3
 8018acc:	4b67      	ldr	r3, [pc, #412]	; (8018c6c <tcp_listen_input+0x1e0>)
 8018ace:	681b      	ldr	r3, [r3, #0]
 8018ad0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018ad2:	4b67      	ldr	r3, [pc, #412]	; (8018c70 <tcp_listen_input+0x1e4>)
 8018ad4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018ad6:	885b      	ldrh	r3, [r3, #2]
 8018ad8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018ada:	4a65      	ldr	r2, [pc, #404]	; (8018c70 <tcp_listen_input+0x1e4>)
 8018adc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018ade:	8812      	ldrh	r2, [r2, #0]
 8018ae0:	b292      	uxth	r2, r2
 8018ae2:	9202      	str	r2, [sp, #8]
 8018ae4:	9301      	str	r3, [sp, #4]
 8018ae6:	4b63      	ldr	r3, [pc, #396]	; (8018c74 <tcp_listen_input+0x1e8>)
 8018ae8:	9300      	str	r3, [sp, #0]
 8018aea:	4b63      	ldr	r3, [pc, #396]	; (8018c78 <tcp_listen_input+0x1ec>)
 8018aec:	4602      	mov	r2, r0
 8018aee:	6878      	ldr	r0, [r7, #4]
 8018af0:	f003 fbd6 	bl	801c2a0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8018af4:	e0a9      	b.n	8018c4a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8018af6:	4b57      	ldr	r3, [pc, #348]	; (8018c54 <tcp_listen_input+0x1c8>)
 8018af8:	781b      	ldrb	r3, [r3, #0]
 8018afa:	f003 0302 	and.w	r3, r3, #2
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	f000 80a3 	beq.w	8018c4a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	7d5b      	ldrb	r3, [r3, #21]
 8018b08:	4618      	mov	r0, r3
 8018b0a:	f7ff f85b 	bl	8017bc4 <tcp_alloc>
 8018b0e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8018b10:	697b      	ldr	r3, [r7, #20]
 8018b12:	2b00      	cmp	r3, #0
 8018b14:	d111      	bne.n	8018b3a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	699b      	ldr	r3, [r3, #24]
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	d00a      	beq.n	8018b34 <tcp_listen_input+0xa8>
 8018b1e:	687b      	ldr	r3, [r7, #4]
 8018b20:	699b      	ldr	r3, [r3, #24]
 8018b22:	687a      	ldr	r2, [r7, #4]
 8018b24:	6910      	ldr	r0, [r2, #16]
 8018b26:	f04f 32ff 	mov.w	r2, #4294967295
 8018b2a:	2100      	movs	r1, #0
 8018b2c:	4798      	blx	r3
 8018b2e:	4603      	mov	r3, r0
 8018b30:	73bb      	strb	r3, [r7, #14]
      return;
 8018b32:	e08b      	b.n	8018c4c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8018b34:	23f0      	movs	r3, #240	; 0xf0
 8018b36:	73bb      	strb	r3, [r7, #14]
      return;
 8018b38:	e088      	b.n	8018c4c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8018b3a:	4b50      	ldr	r3, [pc, #320]	; (8018c7c <tcp_listen_input+0x1f0>)
 8018b3c:	695a      	ldr	r2, [r3, #20]
 8018b3e:	697b      	ldr	r3, [r7, #20]
 8018b40:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8018b42:	4b4e      	ldr	r3, [pc, #312]	; (8018c7c <tcp_listen_input+0x1f0>)
 8018b44:	691a      	ldr	r2, [r3, #16]
 8018b46:	697b      	ldr	r3, [r7, #20]
 8018b48:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8018b4a:	687b      	ldr	r3, [r7, #4]
 8018b4c:	8ada      	ldrh	r2, [r3, #22]
 8018b4e:	697b      	ldr	r3, [r7, #20]
 8018b50:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8018b52:	4b47      	ldr	r3, [pc, #284]	; (8018c70 <tcp_listen_input+0x1e4>)
 8018b54:	681b      	ldr	r3, [r3, #0]
 8018b56:	881b      	ldrh	r3, [r3, #0]
 8018b58:	b29a      	uxth	r2, r3
 8018b5a:	697b      	ldr	r3, [r7, #20]
 8018b5c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8018b5e:	697b      	ldr	r3, [r7, #20]
 8018b60:	2203      	movs	r2, #3
 8018b62:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8018b64:	4b41      	ldr	r3, [pc, #260]	; (8018c6c <tcp_listen_input+0x1e0>)
 8018b66:	681b      	ldr	r3, [r3, #0]
 8018b68:	1c5a      	adds	r2, r3, #1
 8018b6a:	697b      	ldr	r3, [r7, #20]
 8018b6c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8018b6e:	697b      	ldr	r3, [r7, #20]
 8018b70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018b72:	697b      	ldr	r3, [r7, #20]
 8018b74:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8018b76:	6978      	ldr	r0, [r7, #20]
 8018b78:	f7ff fa5a 	bl	8018030 <tcp_next_iss>
 8018b7c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8018b7e:	697b      	ldr	r3, [r7, #20]
 8018b80:	693a      	ldr	r2, [r7, #16]
 8018b82:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8018b84:	697b      	ldr	r3, [r7, #20]
 8018b86:	693a      	ldr	r2, [r7, #16]
 8018b88:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8018b8a:	697b      	ldr	r3, [r7, #20]
 8018b8c:	693a      	ldr	r2, [r7, #16]
 8018b8e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8018b90:	697b      	ldr	r3, [r7, #20]
 8018b92:	693a      	ldr	r2, [r7, #16]
 8018b94:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8018b96:	4b35      	ldr	r3, [pc, #212]	; (8018c6c <tcp_listen_input+0x1e0>)
 8018b98:	681b      	ldr	r3, [r3, #0]
 8018b9a:	1e5a      	subs	r2, r3, #1
 8018b9c:	697b      	ldr	r3, [r7, #20]
 8018b9e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	691a      	ldr	r2, [r3, #16]
 8018ba4:	697b      	ldr	r3, [r7, #20]
 8018ba6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8018ba8:	697b      	ldr	r3, [r7, #20]
 8018baa:	687a      	ldr	r2, [r7, #4]
 8018bac:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	7a5b      	ldrb	r3, [r3, #9]
 8018bb2:	f003 030c 	and.w	r3, r3, #12
 8018bb6:	b2da      	uxtb	r2, r3
 8018bb8:	697b      	ldr	r3, [r7, #20]
 8018bba:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	7a1a      	ldrb	r2, [r3, #8]
 8018bc0:	697b      	ldr	r3, [r7, #20]
 8018bc2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8018bc4:	4b2e      	ldr	r3, [pc, #184]	; (8018c80 <tcp_listen_input+0x1f4>)
 8018bc6:	681a      	ldr	r2, [r3, #0]
 8018bc8:	697b      	ldr	r3, [r7, #20]
 8018bca:	60da      	str	r2, [r3, #12]
 8018bcc:	4a2c      	ldr	r2, [pc, #176]	; (8018c80 <tcp_listen_input+0x1f4>)
 8018bce:	697b      	ldr	r3, [r7, #20]
 8018bd0:	6013      	str	r3, [r2, #0]
 8018bd2:	f003 fd27 	bl	801c624 <tcp_timer_needed>
 8018bd6:	4b2b      	ldr	r3, [pc, #172]	; (8018c84 <tcp_listen_input+0x1f8>)
 8018bd8:	2201      	movs	r2, #1
 8018bda:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8018bdc:	6978      	ldr	r0, [r7, #20]
 8018bde:	f001 fd8d 	bl	801a6fc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8018be2:	4b23      	ldr	r3, [pc, #140]	; (8018c70 <tcp_listen_input+0x1e4>)
 8018be4:	681b      	ldr	r3, [r3, #0]
 8018be6:	89db      	ldrh	r3, [r3, #14]
 8018be8:	b29a      	uxth	r2, r3
 8018bea:	697b      	ldr	r3, [r7, #20]
 8018bec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8018bf0:	697b      	ldr	r3, [r7, #20]
 8018bf2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018bf6:	697b      	ldr	r3, [r7, #20]
 8018bf8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8018bfc:	697b      	ldr	r3, [r7, #20]
 8018bfe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8018c00:	697b      	ldr	r3, [r7, #20]
 8018c02:	3304      	adds	r3, #4
 8018c04:	4618      	mov	r0, r3
 8018c06:	f007 fc29 	bl	802045c <ip4_route>
 8018c0a:	4601      	mov	r1, r0
 8018c0c:	697b      	ldr	r3, [r7, #20]
 8018c0e:	3304      	adds	r3, #4
 8018c10:	461a      	mov	r2, r3
 8018c12:	4620      	mov	r0, r4
 8018c14:	f7ff fa32 	bl	801807c <tcp_eff_send_mss_netif>
 8018c18:	4603      	mov	r3, r0
 8018c1a:	461a      	mov	r2, r3
 8018c1c:	697b      	ldr	r3, [r7, #20]
 8018c1e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8018c20:	2112      	movs	r1, #18
 8018c22:	6978      	ldr	r0, [r7, #20]
 8018c24:	f002 fc9a 	bl	801b55c <tcp_enqueue_flags>
 8018c28:	4603      	mov	r3, r0
 8018c2a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8018c2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	d004      	beq.n	8018c3e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8018c34:	2100      	movs	r1, #0
 8018c36:	6978      	ldr	r0, [r7, #20]
 8018c38:	f7fd fdf2 	bl	8016820 <tcp_abandon>
      return;
 8018c3c:	e006      	b.n	8018c4c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8018c3e:	6978      	ldr	r0, [r7, #20]
 8018c40:	f002 fd7a 	bl	801b738 <tcp_output>
  return;
 8018c44:	e001      	b.n	8018c4a <tcp_listen_input+0x1be>
    return;
 8018c46:	bf00      	nop
 8018c48:	e000      	b.n	8018c4c <tcp_listen_input+0x1c0>
  return;
 8018c4a:	bf00      	nop
}
 8018c4c:	371c      	adds	r7, #28
 8018c4e:	46bd      	mov	sp, r7
 8018c50:	bd90      	pop	{r4, r7, pc}
 8018c52:	bf00      	nop
 8018c54:	24004fb8 	.word	0x24004fb8
 8018c58:	0802c780 	.word	0x0802c780
 8018c5c:	0802c978 	.word	0x0802c978
 8018c60:	0802c7cc 	.word	0x0802c7cc
 8018c64:	24004fb0 	.word	0x24004fb0
 8018c68:	24004fb6 	.word	0x24004fb6
 8018c6c:	24004fac 	.word	0x24004fac
 8018c70:	24004f9c 	.word	0x24004f9c
 8018c74:	24005410 	.word	0x24005410
 8018c78:	24005414 	.word	0x24005414
 8018c7c:	24005400 	.word	0x24005400
 8018c80:	24008668 	.word	0x24008668
 8018c84:	24008664 	.word	0x24008664

08018c88 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8018c88:	b580      	push	{r7, lr}
 8018c8a:	b086      	sub	sp, #24
 8018c8c:	af04      	add	r7, sp, #16
 8018c8e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8018c90:	4b2f      	ldr	r3, [pc, #188]	; (8018d50 <tcp_timewait_input+0xc8>)
 8018c92:	781b      	ldrb	r3, [r3, #0]
 8018c94:	f003 0304 	and.w	r3, r3, #4
 8018c98:	2b00      	cmp	r3, #0
 8018c9a:	d153      	bne.n	8018d44 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	2b00      	cmp	r3, #0
 8018ca0:	d106      	bne.n	8018cb0 <tcp_timewait_input+0x28>
 8018ca2:	4b2c      	ldr	r3, [pc, #176]	; (8018d54 <tcp_timewait_input+0xcc>)
 8018ca4:	f240 22ee 	movw	r2, #750	; 0x2ee
 8018ca8:	492b      	ldr	r1, [pc, #172]	; (8018d58 <tcp_timewait_input+0xd0>)
 8018caa:	482c      	ldr	r0, [pc, #176]	; (8018d5c <tcp_timewait_input+0xd4>)
 8018cac:	f00e f912 	bl	8026ed4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8018cb0:	4b27      	ldr	r3, [pc, #156]	; (8018d50 <tcp_timewait_input+0xc8>)
 8018cb2:	781b      	ldrb	r3, [r3, #0]
 8018cb4:	f003 0302 	and.w	r3, r3, #2
 8018cb8:	2b00      	cmp	r3, #0
 8018cba:	d02a      	beq.n	8018d12 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8018cbc:	4b28      	ldr	r3, [pc, #160]	; (8018d60 <tcp_timewait_input+0xd8>)
 8018cbe:	681a      	ldr	r2, [r3, #0]
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cc4:	1ad3      	subs	r3, r2, r3
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	db2d      	blt.n	8018d26 <tcp_timewait_input+0x9e>
 8018cca:	4b25      	ldr	r3, [pc, #148]	; (8018d60 <tcp_timewait_input+0xd8>)
 8018ccc:	681a      	ldr	r2, [r3, #0]
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cd2:	6879      	ldr	r1, [r7, #4]
 8018cd4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018cd6:	440b      	add	r3, r1
 8018cd8:	1ad3      	subs	r3, r2, r3
 8018cda:	2b00      	cmp	r3, #0
 8018cdc:	dc23      	bgt.n	8018d26 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018cde:	4b21      	ldr	r3, [pc, #132]	; (8018d64 <tcp_timewait_input+0xdc>)
 8018ce0:	6819      	ldr	r1, [r3, #0]
 8018ce2:	4b21      	ldr	r3, [pc, #132]	; (8018d68 <tcp_timewait_input+0xe0>)
 8018ce4:	881b      	ldrh	r3, [r3, #0]
 8018ce6:	461a      	mov	r2, r3
 8018ce8:	4b1d      	ldr	r3, [pc, #116]	; (8018d60 <tcp_timewait_input+0xd8>)
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018cee:	4b1f      	ldr	r3, [pc, #124]	; (8018d6c <tcp_timewait_input+0xe4>)
 8018cf0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018cf2:	885b      	ldrh	r3, [r3, #2]
 8018cf4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018cf6:	4a1d      	ldr	r2, [pc, #116]	; (8018d6c <tcp_timewait_input+0xe4>)
 8018cf8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018cfa:	8812      	ldrh	r2, [r2, #0]
 8018cfc:	b292      	uxth	r2, r2
 8018cfe:	9202      	str	r2, [sp, #8]
 8018d00:	9301      	str	r3, [sp, #4]
 8018d02:	4b1b      	ldr	r3, [pc, #108]	; (8018d70 <tcp_timewait_input+0xe8>)
 8018d04:	9300      	str	r3, [sp, #0]
 8018d06:	4b1b      	ldr	r3, [pc, #108]	; (8018d74 <tcp_timewait_input+0xec>)
 8018d08:	4602      	mov	r2, r0
 8018d0a:	6878      	ldr	r0, [r7, #4]
 8018d0c:	f003 fac8 	bl	801c2a0 <tcp_rst>
      return;
 8018d10:	e01b      	b.n	8018d4a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8018d12:	4b0f      	ldr	r3, [pc, #60]	; (8018d50 <tcp_timewait_input+0xc8>)
 8018d14:	781b      	ldrb	r3, [r3, #0]
 8018d16:	f003 0301 	and.w	r3, r3, #1
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d003      	beq.n	8018d26 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8018d1e:	4b16      	ldr	r3, [pc, #88]	; (8018d78 <tcp_timewait_input+0xf0>)
 8018d20:	681a      	ldr	r2, [r3, #0]
 8018d22:	687b      	ldr	r3, [r7, #4]
 8018d24:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8018d26:	4b10      	ldr	r3, [pc, #64]	; (8018d68 <tcp_timewait_input+0xe0>)
 8018d28:	881b      	ldrh	r3, [r3, #0]
 8018d2a:	2b00      	cmp	r3, #0
 8018d2c:	d00c      	beq.n	8018d48 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	8b5b      	ldrh	r3, [r3, #26]
 8018d32:	f043 0302 	orr.w	r3, r3, #2
 8018d36:	b29a      	uxth	r2, r3
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8018d3c:	6878      	ldr	r0, [r7, #4]
 8018d3e:	f002 fcfb 	bl	801b738 <tcp_output>
  }
  return;
 8018d42:	e001      	b.n	8018d48 <tcp_timewait_input+0xc0>
    return;
 8018d44:	bf00      	nop
 8018d46:	e000      	b.n	8018d4a <tcp_timewait_input+0xc2>
  return;
 8018d48:	bf00      	nop
}
 8018d4a:	3708      	adds	r7, #8
 8018d4c:	46bd      	mov	sp, r7
 8018d4e:	bd80      	pop	{r7, pc}
 8018d50:	24004fb8 	.word	0x24004fb8
 8018d54:	0802c780 	.word	0x0802c780
 8018d58:	0802c998 	.word	0x0802c998
 8018d5c:	0802c7cc 	.word	0x0802c7cc
 8018d60:	24004fac 	.word	0x24004fac
 8018d64:	24004fb0 	.word	0x24004fb0
 8018d68:	24004fb6 	.word	0x24004fb6
 8018d6c:	24004f9c 	.word	0x24004f9c
 8018d70:	24005410 	.word	0x24005410
 8018d74:	24005414 	.word	0x24005414
 8018d78:	2400866c 	.word	0x2400866c

08018d7c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8018d7c:	b590      	push	{r4, r7, lr}
 8018d7e:	b08d      	sub	sp, #52	; 0x34
 8018d80:	af04      	add	r7, sp, #16
 8018d82:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8018d84:	2300      	movs	r3, #0
 8018d86:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8018d88:	2300      	movs	r3, #0
 8018d8a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	2b00      	cmp	r3, #0
 8018d90:	d106      	bne.n	8018da0 <tcp_process+0x24>
 8018d92:	4ba5      	ldr	r3, [pc, #660]	; (8019028 <tcp_process+0x2ac>)
 8018d94:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8018d98:	49a4      	ldr	r1, [pc, #656]	; (801902c <tcp_process+0x2b0>)
 8018d9a:	48a5      	ldr	r0, [pc, #660]	; (8019030 <tcp_process+0x2b4>)
 8018d9c:	f00e f89a 	bl	8026ed4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8018da0:	4ba4      	ldr	r3, [pc, #656]	; (8019034 <tcp_process+0x2b8>)
 8018da2:	781b      	ldrb	r3, [r3, #0]
 8018da4:	f003 0304 	and.w	r3, r3, #4
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	d04e      	beq.n	8018e4a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	7d1b      	ldrb	r3, [r3, #20]
 8018db0:	2b02      	cmp	r3, #2
 8018db2:	d108      	bne.n	8018dc6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018db8:	4b9f      	ldr	r3, [pc, #636]	; (8019038 <tcp_process+0x2bc>)
 8018dba:	681b      	ldr	r3, [r3, #0]
 8018dbc:	429a      	cmp	r2, r3
 8018dbe:	d123      	bne.n	8018e08 <tcp_process+0x8c>
        acceptable = 1;
 8018dc0:	2301      	movs	r3, #1
 8018dc2:	76fb      	strb	r3, [r7, #27]
 8018dc4:	e020      	b.n	8018e08 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018dca:	4b9c      	ldr	r3, [pc, #624]	; (801903c <tcp_process+0x2c0>)
 8018dcc:	681b      	ldr	r3, [r3, #0]
 8018dce:	429a      	cmp	r2, r3
 8018dd0:	d102      	bne.n	8018dd8 <tcp_process+0x5c>
        acceptable = 1;
 8018dd2:	2301      	movs	r3, #1
 8018dd4:	76fb      	strb	r3, [r7, #27]
 8018dd6:	e017      	b.n	8018e08 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018dd8:	4b98      	ldr	r3, [pc, #608]	; (801903c <tcp_process+0x2c0>)
 8018dda:	681a      	ldr	r2, [r3, #0]
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018de0:	1ad3      	subs	r3, r2, r3
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	db10      	blt.n	8018e08 <tcp_process+0x8c>
 8018de6:	4b95      	ldr	r3, [pc, #596]	; (801903c <tcp_process+0x2c0>)
 8018de8:	681a      	ldr	r2, [r3, #0]
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dee:	6879      	ldr	r1, [r7, #4]
 8018df0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018df2:	440b      	add	r3, r1
 8018df4:	1ad3      	subs	r3, r2, r3
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	dc06      	bgt.n	8018e08 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	8b5b      	ldrh	r3, [r3, #26]
 8018dfe:	f043 0302 	orr.w	r3, r3, #2
 8018e02:	b29a      	uxth	r2, r3
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8018e08:	7efb      	ldrb	r3, [r7, #27]
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	d01b      	beq.n	8018e46 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	7d1b      	ldrb	r3, [r3, #20]
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	d106      	bne.n	8018e24 <tcp_process+0xa8>
 8018e16:	4b84      	ldr	r3, [pc, #528]	; (8019028 <tcp_process+0x2ac>)
 8018e18:	f44f 724e 	mov.w	r2, #824	; 0x338
 8018e1c:	4988      	ldr	r1, [pc, #544]	; (8019040 <tcp_process+0x2c4>)
 8018e1e:	4884      	ldr	r0, [pc, #528]	; (8019030 <tcp_process+0x2b4>)
 8018e20:	f00e f858 	bl	8026ed4 <iprintf>
      recv_flags |= TF_RESET;
 8018e24:	4b87      	ldr	r3, [pc, #540]	; (8019044 <tcp_process+0x2c8>)
 8018e26:	781b      	ldrb	r3, [r3, #0]
 8018e28:	f043 0308 	orr.w	r3, r3, #8
 8018e2c:	b2da      	uxtb	r2, r3
 8018e2e:	4b85      	ldr	r3, [pc, #532]	; (8019044 <tcp_process+0x2c8>)
 8018e30:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	8b5b      	ldrh	r3, [r3, #26]
 8018e36:	f023 0301 	bic.w	r3, r3, #1
 8018e3a:	b29a      	uxth	r2, r3
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8018e40:	f06f 030d 	mvn.w	r3, #13
 8018e44:	e37a      	b.n	801953c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8018e46:	2300      	movs	r3, #0
 8018e48:	e378      	b.n	801953c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8018e4a:	4b7a      	ldr	r3, [pc, #488]	; (8019034 <tcp_process+0x2b8>)
 8018e4c:	781b      	ldrb	r3, [r3, #0]
 8018e4e:	f003 0302 	and.w	r3, r3, #2
 8018e52:	2b00      	cmp	r3, #0
 8018e54:	d010      	beq.n	8018e78 <tcp_process+0xfc>
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	7d1b      	ldrb	r3, [r3, #20]
 8018e5a:	2b02      	cmp	r3, #2
 8018e5c:	d00c      	beq.n	8018e78 <tcp_process+0xfc>
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	7d1b      	ldrb	r3, [r3, #20]
 8018e62:	2b03      	cmp	r3, #3
 8018e64:	d008      	beq.n	8018e78 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	8b5b      	ldrh	r3, [r3, #26]
 8018e6a:	f043 0302 	orr.w	r3, r3, #2
 8018e6e:	b29a      	uxth	r2, r3
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8018e74:	2300      	movs	r3, #0
 8018e76:	e361      	b.n	801953c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	8b5b      	ldrh	r3, [r3, #26]
 8018e7c:	f003 0310 	and.w	r3, r3, #16
 8018e80:	2b00      	cmp	r3, #0
 8018e82:	d103      	bne.n	8018e8c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8018e84:	4b70      	ldr	r3, [pc, #448]	; (8019048 <tcp_process+0x2cc>)
 8018e86:	681a      	ldr	r2, [r3, #0]
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	2200      	movs	r2, #0
 8018e90:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	2200      	movs	r2, #0
 8018e98:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8018e9c:	6878      	ldr	r0, [r7, #4]
 8018e9e:	f001 fc2d 	bl	801a6fc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	7d1b      	ldrb	r3, [r3, #20]
 8018ea6:	3b02      	subs	r3, #2
 8018ea8:	2b07      	cmp	r3, #7
 8018eaa:	f200 8337 	bhi.w	801951c <tcp_process+0x7a0>
 8018eae:	a201      	add	r2, pc, #4	; (adr r2, 8018eb4 <tcp_process+0x138>)
 8018eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018eb4:	08018ed5 	.word	0x08018ed5
 8018eb8:	08019105 	.word	0x08019105
 8018ebc:	0801927d 	.word	0x0801927d
 8018ec0:	080192a7 	.word	0x080192a7
 8018ec4:	080193cb 	.word	0x080193cb
 8018ec8:	0801927d 	.word	0x0801927d
 8018ecc:	08019457 	.word	0x08019457
 8018ed0:	080194e7 	.word	0x080194e7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8018ed4:	4b57      	ldr	r3, [pc, #348]	; (8019034 <tcp_process+0x2b8>)
 8018ed6:	781b      	ldrb	r3, [r3, #0]
 8018ed8:	f003 0310 	and.w	r3, r3, #16
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	f000 80e4 	beq.w	80190aa <tcp_process+0x32e>
 8018ee2:	4b54      	ldr	r3, [pc, #336]	; (8019034 <tcp_process+0x2b8>)
 8018ee4:	781b      	ldrb	r3, [r3, #0]
 8018ee6:	f003 0302 	and.w	r3, r3, #2
 8018eea:	2b00      	cmp	r3, #0
 8018eec:	f000 80dd 	beq.w	80190aa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018ef4:	1c5a      	adds	r2, r3, #1
 8018ef6:	4b50      	ldr	r3, [pc, #320]	; (8019038 <tcp_process+0x2bc>)
 8018ef8:	681b      	ldr	r3, [r3, #0]
 8018efa:	429a      	cmp	r2, r3
 8018efc:	f040 80d5 	bne.w	80190aa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8018f00:	4b4e      	ldr	r3, [pc, #312]	; (801903c <tcp_process+0x2c0>)
 8018f02:	681b      	ldr	r3, [r3, #0]
 8018f04:	1c5a      	adds	r2, r3, #1
 8018f06:	687b      	ldr	r3, [r7, #4]
 8018f08:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8018f12:	4b49      	ldr	r3, [pc, #292]	; (8019038 <tcp_process+0x2bc>)
 8018f14:	681a      	ldr	r2, [r3, #0]
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8018f1a:	4b4c      	ldr	r3, [pc, #304]	; (801904c <tcp_process+0x2d0>)
 8018f1c:	681b      	ldr	r3, [r3, #0]
 8018f1e:	89db      	ldrh	r3, [r3, #14]
 8018f20:	b29a      	uxth	r2, r3
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8018f34:	4b41      	ldr	r3, [pc, #260]	; (801903c <tcp_process+0x2c0>)
 8018f36:	681b      	ldr	r3, [r3, #0]
 8018f38:	1e5a      	subs	r2, r3, #1
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	2204      	movs	r2, #4
 8018f42:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	3304      	adds	r3, #4
 8018f4c:	4618      	mov	r0, r3
 8018f4e:	f007 fa85 	bl	802045c <ip4_route>
 8018f52:	4601      	mov	r1, r0
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	3304      	adds	r3, #4
 8018f58:	461a      	mov	r2, r3
 8018f5a:	4620      	mov	r0, r4
 8018f5c:	f7ff f88e 	bl	801807c <tcp_eff_send_mss_netif>
 8018f60:	4603      	mov	r3, r0
 8018f62:	461a      	mov	r2, r3
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018f6c:	009a      	lsls	r2, r3, #2
 8018f6e:	687b      	ldr	r3, [r7, #4]
 8018f70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018f72:	005b      	lsls	r3, r3, #1
 8018f74:	f241 111c 	movw	r1, #4380	; 0x111c
 8018f78:	428b      	cmp	r3, r1
 8018f7a:	bf38      	it	cc
 8018f7c:	460b      	movcc	r3, r1
 8018f7e:	429a      	cmp	r2, r3
 8018f80:	d204      	bcs.n	8018f8c <tcp_process+0x210>
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018f86:	009b      	lsls	r3, r3, #2
 8018f88:	b29b      	uxth	r3, r3
 8018f8a:	e00d      	b.n	8018fa8 <tcp_process+0x22c>
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018f90:	005b      	lsls	r3, r3, #1
 8018f92:	f241 121c 	movw	r2, #4380	; 0x111c
 8018f96:	4293      	cmp	r3, r2
 8018f98:	d904      	bls.n	8018fa4 <tcp_process+0x228>
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018f9e:	005b      	lsls	r3, r3, #1
 8018fa0:	b29b      	uxth	r3, r3
 8018fa2:	e001      	b.n	8018fa8 <tcp_process+0x22c>
 8018fa4:	f241 131c 	movw	r3, #4380	; 0x111c
 8018fa8:	687a      	ldr	r2, [r7, #4]
 8018faa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8018fae:	687b      	ldr	r3, [r7, #4]
 8018fb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	d106      	bne.n	8018fc6 <tcp_process+0x24a>
 8018fb8:	4b1b      	ldr	r3, [pc, #108]	; (8019028 <tcp_process+0x2ac>)
 8018fba:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8018fbe:	4924      	ldr	r1, [pc, #144]	; (8019050 <tcp_process+0x2d4>)
 8018fc0:	481b      	ldr	r0, [pc, #108]	; (8019030 <tcp_process+0x2b4>)
 8018fc2:	f00d ff87 	bl	8026ed4 <iprintf>
        --pcb->snd_queuelen;
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018fcc:	3b01      	subs	r3, #1
 8018fce:	b29a      	uxth	r2, r3
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018fda:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8018fdc:	69fb      	ldr	r3, [r7, #28]
 8018fde:	2b00      	cmp	r3, #0
 8018fe0:	d111      	bne.n	8019006 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018fe6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8018fe8:	69fb      	ldr	r3, [r7, #28]
 8018fea:	2b00      	cmp	r3, #0
 8018fec:	d106      	bne.n	8018ffc <tcp_process+0x280>
 8018fee:	4b0e      	ldr	r3, [pc, #56]	; (8019028 <tcp_process+0x2ac>)
 8018ff0:	f44f 725d 	mov.w	r2, #884	; 0x374
 8018ff4:	4917      	ldr	r1, [pc, #92]	; (8019054 <tcp_process+0x2d8>)
 8018ff6:	480e      	ldr	r0, [pc, #56]	; (8019030 <tcp_process+0x2b4>)
 8018ff8:	f00d ff6c 	bl	8026ed4 <iprintf>
          pcb->unsent = rseg->next;
 8018ffc:	69fb      	ldr	r3, [r7, #28]
 8018ffe:	681a      	ldr	r2, [r3, #0]
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	66da      	str	r2, [r3, #108]	; 0x6c
 8019004:	e003      	b.n	801900e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8019006:	69fb      	ldr	r3, [r7, #28]
 8019008:	681a      	ldr	r2, [r3, #0]
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801900e:	69f8      	ldr	r0, [r7, #28]
 8019010:	f7fe fc6f 	bl	80178f2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019018:	2b00      	cmp	r3, #0
 801901a:	d11d      	bne.n	8019058 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019022:	861a      	strh	r2, [r3, #48]	; 0x30
 8019024:	e01f      	b.n	8019066 <tcp_process+0x2ea>
 8019026:	bf00      	nop
 8019028:	0802c780 	.word	0x0802c780
 801902c:	0802c9b8 	.word	0x0802c9b8
 8019030:	0802c7cc 	.word	0x0802c7cc
 8019034:	24004fb8 	.word	0x24004fb8
 8019038:	24004fb0 	.word	0x24004fb0
 801903c:	24004fac 	.word	0x24004fac
 8019040:	0802c9d4 	.word	0x0802c9d4
 8019044:	24004fb9 	.word	0x24004fb9
 8019048:	2400866c 	.word	0x2400866c
 801904c:	24004f9c 	.word	0x24004f9c
 8019050:	0802c9f4 	.word	0x0802c9f4
 8019054:	0802ca0c 	.word	0x0802ca0c
        } else {
          pcb->rtime = 0;
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	2200      	movs	r2, #0
 801905c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	2200      	movs	r2, #0
 8019062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801906c:	2b00      	cmp	r3, #0
 801906e:	d00a      	beq.n	8019086 <tcp_process+0x30a>
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019076:	687a      	ldr	r2, [r7, #4]
 8019078:	6910      	ldr	r0, [r2, #16]
 801907a:	2200      	movs	r2, #0
 801907c:	6879      	ldr	r1, [r7, #4]
 801907e:	4798      	blx	r3
 8019080:	4603      	mov	r3, r0
 8019082:	76bb      	strb	r3, [r7, #26]
 8019084:	e001      	b.n	801908a <tcp_process+0x30e>
 8019086:	2300      	movs	r3, #0
 8019088:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801908a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801908e:	f113 0f0d 	cmn.w	r3, #13
 8019092:	d102      	bne.n	801909a <tcp_process+0x31e>
          return ERR_ABRT;
 8019094:	f06f 030c 	mvn.w	r3, #12
 8019098:	e250      	b.n	801953c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	8b5b      	ldrh	r3, [r3, #26]
 801909e:	f043 0302 	orr.w	r3, r3, #2
 80190a2:	b29a      	uxth	r2, r3
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80190a8:	e23a      	b.n	8019520 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80190aa:	4b9d      	ldr	r3, [pc, #628]	; (8019320 <tcp_process+0x5a4>)
 80190ac:	781b      	ldrb	r3, [r3, #0]
 80190ae:	f003 0310 	and.w	r3, r3, #16
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	f000 8234 	beq.w	8019520 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80190b8:	4b9a      	ldr	r3, [pc, #616]	; (8019324 <tcp_process+0x5a8>)
 80190ba:	6819      	ldr	r1, [r3, #0]
 80190bc:	4b9a      	ldr	r3, [pc, #616]	; (8019328 <tcp_process+0x5ac>)
 80190be:	881b      	ldrh	r3, [r3, #0]
 80190c0:	461a      	mov	r2, r3
 80190c2:	4b9a      	ldr	r3, [pc, #616]	; (801932c <tcp_process+0x5b0>)
 80190c4:	681b      	ldr	r3, [r3, #0]
 80190c6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80190c8:	4b99      	ldr	r3, [pc, #612]	; (8019330 <tcp_process+0x5b4>)
 80190ca:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80190cc:	885b      	ldrh	r3, [r3, #2]
 80190ce:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80190d0:	4a97      	ldr	r2, [pc, #604]	; (8019330 <tcp_process+0x5b4>)
 80190d2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80190d4:	8812      	ldrh	r2, [r2, #0]
 80190d6:	b292      	uxth	r2, r2
 80190d8:	9202      	str	r2, [sp, #8]
 80190da:	9301      	str	r3, [sp, #4]
 80190dc:	4b95      	ldr	r3, [pc, #596]	; (8019334 <tcp_process+0x5b8>)
 80190de:	9300      	str	r3, [sp, #0]
 80190e0:	4b95      	ldr	r3, [pc, #596]	; (8019338 <tcp_process+0x5bc>)
 80190e2:	4602      	mov	r2, r0
 80190e4:	6878      	ldr	r0, [r7, #4]
 80190e6:	f003 f8db 	bl	801c2a0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80190f0:	2b05      	cmp	r3, #5
 80190f2:	f200 8215 	bhi.w	8019520 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	2200      	movs	r2, #0
 80190fa:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80190fc:	6878      	ldr	r0, [r7, #4]
 80190fe:	f002 fea5 	bl	801be4c <tcp_rexmit_rto>
      break;
 8019102:	e20d      	b.n	8019520 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8019104:	4b86      	ldr	r3, [pc, #536]	; (8019320 <tcp_process+0x5a4>)
 8019106:	781b      	ldrb	r3, [r3, #0]
 8019108:	f003 0310 	and.w	r3, r3, #16
 801910c:	2b00      	cmp	r3, #0
 801910e:	f000 80a1 	beq.w	8019254 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019112:	4b84      	ldr	r3, [pc, #528]	; (8019324 <tcp_process+0x5a8>)
 8019114:	681a      	ldr	r2, [r3, #0]
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801911a:	1ad3      	subs	r3, r2, r3
 801911c:	3b01      	subs	r3, #1
 801911e:	2b00      	cmp	r3, #0
 8019120:	db7e      	blt.n	8019220 <tcp_process+0x4a4>
 8019122:	4b80      	ldr	r3, [pc, #512]	; (8019324 <tcp_process+0x5a8>)
 8019124:	681a      	ldr	r2, [r3, #0]
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801912a:	1ad3      	subs	r3, r2, r3
 801912c:	2b00      	cmp	r3, #0
 801912e:	dc77      	bgt.n	8019220 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	2204      	movs	r2, #4
 8019134:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8019136:	687b      	ldr	r3, [r7, #4]
 8019138:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801913a:	2b00      	cmp	r3, #0
 801913c:	d102      	bne.n	8019144 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801913e:	23fa      	movs	r3, #250	; 0xfa
 8019140:	76bb      	strb	r3, [r7, #26]
 8019142:	e01d      	b.n	8019180 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019148:	699b      	ldr	r3, [r3, #24]
 801914a:	2b00      	cmp	r3, #0
 801914c:	d106      	bne.n	801915c <tcp_process+0x3e0>
 801914e:	4b7b      	ldr	r3, [pc, #492]	; (801933c <tcp_process+0x5c0>)
 8019150:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8019154:	497a      	ldr	r1, [pc, #488]	; (8019340 <tcp_process+0x5c4>)
 8019156:	487b      	ldr	r0, [pc, #492]	; (8019344 <tcp_process+0x5c8>)
 8019158:	f00d febc 	bl	8026ed4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019160:	699b      	ldr	r3, [r3, #24]
 8019162:	2b00      	cmp	r3, #0
 8019164:	d00a      	beq.n	801917c <tcp_process+0x400>
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801916a:	699b      	ldr	r3, [r3, #24]
 801916c:	687a      	ldr	r2, [r7, #4]
 801916e:	6910      	ldr	r0, [r2, #16]
 8019170:	2200      	movs	r2, #0
 8019172:	6879      	ldr	r1, [r7, #4]
 8019174:	4798      	blx	r3
 8019176:	4603      	mov	r3, r0
 8019178:	76bb      	strb	r3, [r7, #26]
 801917a:	e001      	b.n	8019180 <tcp_process+0x404>
 801917c:	23f0      	movs	r3, #240	; 0xf0
 801917e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8019180:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8019184:	2b00      	cmp	r3, #0
 8019186:	d00a      	beq.n	801919e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8019188:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801918c:	f113 0f0d 	cmn.w	r3, #13
 8019190:	d002      	beq.n	8019198 <tcp_process+0x41c>
              tcp_abort(pcb);
 8019192:	6878      	ldr	r0, [r7, #4]
 8019194:	f7fd fc02 	bl	801699c <tcp_abort>
            }
            return ERR_ABRT;
 8019198:	f06f 030c 	mvn.w	r3, #12
 801919c:	e1ce      	b.n	801953c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801919e:	6878      	ldr	r0, [r7, #4]
 80191a0:	f000 fae0 	bl	8019764 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80191a4:	4b68      	ldr	r3, [pc, #416]	; (8019348 <tcp_process+0x5cc>)
 80191a6:	881b      	ldrh	r3, [r3, #0]
 80191a8:	2b00      	cmp	r3, #0
 80191aa:	d005      	beq.n	80191b8 <tcp_process+0x43c>
            recv_acked--;
 80191ac:	4b66      	ldr	r3, [pc, #408]	; (8019348 <tcp_process+0x5cc>)
 80191ae:	881b      	ldrh	r3, [r3, #0]
 80191b0:	3b01      	subs	r3, #1
 80191b2:	b29a      	uxth	r2, r3
 80191b4:	4b64      	ldr	r3, [pc, #400]	; (8019348 <tcp_process+0x5cc>)
 80191b6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80191bc:	009a      	lsls	r2, r3, #2
 80191be:	687b      	ldr	r3, [r7, #4]
 80191c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80191c2:	005b      	lsls	r3, r3, #1
 80191c4:	f241 111c 	movw	r1, #4380	; 0x111c
 80191c8:	428b      	cmp	r3, r1
 80191ca:	bf38      	it	cc
 80191cc:	460b      	movcc	r3, r1
 80191ce:	429a      	cmp	r2, r3
 80191d0:	d204      	bcs.n	80191dc <tcp_process+0x460>
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80191d6:	009b      	lsls	r3, r3, #2
 80191d8:	b29b      	uxth	r3, r3
 80191da:	e00d      	b.n	80191f8 <tcp_process+0x47c>
 80191dc:	687b      	ldr	r3, [r7, #4]
 80191de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80191e0:	005b      	lsls	r3, r3, #1
 80191e2:	f241 121c 	movw	r2, #4380	; 0x111c
 80191e6:	4293      	cmp	r3, r2
 80191e8:	d904      	bls.n	80191f4 <tcp_process+0x478>
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80191ee:	005b      	lsls	r3, r3, #1
 80191f0:	b29b      	uxth	r3, r3
 80191f2:	e001      	b.n	80191f8 <tcp_process+0x47c>
 80191f4:	f241 131c 	movw	r3, #4380	; 0x111c
 80191f8:	687a      	ldr	r2, [r7, #4]
 80191fa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80191fe:	4b53      	ldr	r3, [pc, #332]	; (801934c <tcp_process+0x5d0>)
 8019200:	781b      	ldrb	r3, [r3, #0]
 8019202:	f003 0320 	and.w	r3, r3, #32
 8019206:	2b00      	cmp	r3, #0
 8019208:	d037      	beq.n	801927a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801920a:	687b      	ldr	r3, [r7, #4]
 801920c:	8b5b      	ldrh	r3, [r3, #26]
 801920e:	f043 0302 	orr.w	r3, r3, #2
 8019212:	b29a      	uxth	r2, r3
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	2207      	movs	r2, #7
 801921c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801921e:	e02c      	b.n	801927a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019220:	4b40      	ldr	r3, [pc, #256]	; (8019324 <tcp_process+0x5a8>)
 8019222:	6819      	ldr	r1, [r3, #0]
 8019224:	4b40      	ldr	r3, [pc, #256]	; (8019328 <tcp_process+0x5ac>)
 8019226:	881b      	ldrh	r3, [r3, #0]
 8019228:	461a      	mov	r2, r3
 801922a:	4b40      	ldr	r3, [pc, #256]	; (801932c <tcp_process+0x5b0>)
 801922c:	681b      	ldr	r3, [r3, #0]
 801922e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019230:	4b3f      	ldr	r3, [pc, #252]	; (8019330 <tcp_process+0x5b4>)
 8019232:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019234:	885b      	ldrh	r3, [r3, #2]
 8019236:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019238:	4a3d      	ldr	r2, [pc, #244]	; (8019330 <tcp_process+0x5b4>)
 801923a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801923c:	8812      	ldrh	r2, [r2, #0]
 801923e:	b292      	uxth	r2, r2
 8019240:	9202      	str	r2, [sp, #8]
 8019242:	9301      	str	r3, [sp, #4]
 8019244:	4b3b      	ldr	r3, [pc, #236]	; (8019334 <tcp_process+0x5b8>)
 8019246:	9300      	str	r3, [sp, #0]
 8019248:	4b3b      	ldr	r3, [pc, #236]	; (8019338 <tcp_process+0x5bc>)
 801924a:	4602      	mov	r2, r0
 801924c:	6878      	ldr	r0, [r7, #4]
 801924e:	f003 f827 	bl	801c2a0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8019252:	e167      	b.n	8019524 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8019254:	4b32      	ldr	r3, [pc, #200]	; (8019320 <tcp_process+0x5a4>)
 8019256:	781b      	ldrb	r3, [r3, #0]
 8019258:	f003 0302 	and.w	r3, r3, #2
 801925c:	2b00      	cmp	r3, #0
 801925e:	f000 8161 	beq.w	8019524 <tcp_process+0x7a8>
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019266:	1e5a      	subs	r2, r3, #1
 8019268:	4b30      	ldr	r3, [pc, #192]	; (801932c <tcp_process+0x5b0>)
 801926a:	681b      	ldr	r3, [r3, #0]
 801926c:	429a      	cmp	r2, r3
 801926e:	f040 8159 	bne.w	8019524 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8019272:	6878      	ldr	r0, [r7, #4]
 8019274:	f002 fe0c 	bl	801be90 <tcp_rexmit>
      break;
 8019278:	e154      	b.n	8019524 <tcp_process+0x7a8>
 801927a:	e153      	b.n	8019524 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801927c:	6878      	ldr	r0, [r7, #4]
 801927e:	f000 fa71 	bl	8019764 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8019282:	4b32      	ldr	r3, [pc, #200]	; (801934c <tcp_process+0x5d0>)
 8019284:	781b      	ldrb	r3, [r3, #0]
 8019286:	f003 0320 	and.w	r3, r3, #32
 801928a:	2b00      	cmp	r3, #0
 801928c:	f000 814c 	beq.w	8019528 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8019290:	687b      	ldr	r3, [r7, #4]
 8019292:	8b5b      	ldrh	r3, [r3, #26]
 8019294:	f043 0302 	orr.w	r3, r3, #2
 8019298:	b29a      	uxth	r2, r3
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	2207      	movs	r2, #7
 80192a2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80192a4:	e140      	b.n	8019528 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80192a6:	6878      	ldr	r0, [r7, #4]
 80192a8:	f000 fa5c 	bl	8019764 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80192ac:	4b27      	ldr	r3, [pc, #156]	; (801934c <tcp_process+0x5d0>)
 80192ae:	781b      	ldrb	r3, [r3, #0]
 80192b0:	f003 0320 	and.w	r3, r3, #32
 80192b4:	2b00      	cmp	r3, #0
 80192b6:	d071      	beq.n	801939c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80192b8:	4b19      	ldr	r3, [pc, #100]	; (8019320 <tcp_process+0x5a4>)
 80192ba:	781b      	ldrb	r3, [r3, #0]
 80192bc:	f003 0310 	and.w	r3, r3, #16
 80192c0:	2b00      	cmp	r3, #0
 80192c2:	d060      	beq.n	8019386 <tcp_process+0x60a>
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80192c8:	4b16      	ldr	r3, [pc, #88]	; (8019324 <tcp_process+0x5a8>)
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	429a      	cmp	r2, r3
 80192ce:	d15a      	bne.n	8019386 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80192d4:	2b00      	cmp	r3, #0
 80192d6:	d156      	bne.n	8019386 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	8b5b      	ldrh	r3, [r3, #26]
 80192dc:	f043 0302 	orr.w	r3, r3, #2
 80192e0:	b29a      	uxth	r2, r3
 80192e2:	687b      	ldr	r3, [r7, #4]
 80192e4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80192e6:	6878      	ldr	r0, [r7, #4]
 80192e8:	f7fe fdbe 	bl	8017e68 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80192ec:	4b18      	ldr	r3, [pc, #96]	; (8019350 <tcp_process+0x5d4>)
 80192ee:	681b      	ldr	r3, [r3, #0]
 80192f0:	687a      	ldr	r2, [r7, #4]
 80192f2:	429a      	cmp	r2, r3
 80192f4:	d105      	bne.n	8019302 <tcp_process+0x586>
 80192f6:	4b16      	ldr	r3, [pc, #88]	; (8019350 <tcp_process+0x5d4>)
 80192f8:	681b      	ldr	r3, [r3, #0]
 80192fa:	68db      	ldr	r3, [r3, #12]
 80192fc:	4a14      	ldr	r2, [pc, #80]	; (8019350 <tcp_process+0x5d4>)
 80192fe:	6013      	str	r3, [r2, #0]
 8019300:	e02e      	b.n	8019360 <tcp_process+0x5e4>
 8019302:	4b13      	ldr	r3, [pc, #76]	; (8019350 <tcp_process+0x5d4>)
 8019304:	681b      	ldr	r3, [r3, #0]
 8019306:	617b      	str	r3, [r7, #20]
 8019308:	e027      	b.n	801935a <tcp_process+0x5de>
 801930a:	697b      	ldr	r3, [r7, #20]
 801930c:	68db      	ldr	r3, [r3, #12]
 801930e:	687a      	ldr	r2, [r7, #4]
 8019310:	429a      	cmp	r2, r3
 8019312:	d11f      	bne.n	8019354 <tcp_process+0x5d8>
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	68da      	ldr	r2, [r3, #12]
 8019318:	697b      	ldr	r3, [r7, #20]
 801931a:	60da      	str	r2, [r3, #12]
 801931c:	e020      	b.n	8019360 <tcp_process+0x5e4>
 801931e:	bf00      	nop
 8019320:	24004fb8 	.word	0x24004fb8
 8019324:	24004fb0 	.word	0x24004fb0
 8019328:	24004fb6 	.word	0x24004fb6
 801932c:	24004fac 	.word	0x24004fac
 8019330:	24004f9c 	.word	0x24004f9c
 8019334:	24005410 	.word	0x24005410
 8019338:	24005414 	.word	0x24005414
 801933c:	0802c780 	.word	0x0802c780
 8019340:	0802ca20 	.word	0x0802ca20
 8019344:	0802c7cc 	.word	0x0802c7cc
 8019348:	24004fb4 	.word	0x24004fb4
 801934c:	24004fb9 	.word	0x24004fb9
 8019350:	24008668 	.word	0x24008668
 8019354:	697b      	ldr	r3, [r7, #20]
 8019356:	68db      	ldr	r3, [r3, #12]
 8019358:	617b      	str	r3, [r7, #20]
 801935a:	697b      	ldr	r3, [r7, #20]
 801935c:	2b00      	cmp	r3, #0
 801935e:	d1d4      	bne.n	801930a <tcp_process+0x58e>
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	2200      	movs	r2, #0
 8019364:	60da      	str	r2, [r3, #12]
 8019366:	4b77      	ldr	r3, [pc, #476]	; (8019544 <tcp_process+0x7c8>)
 8019368:	2201      	movs	r2, #1
 801936a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	220a      	movs	r2, #10
 8019370:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8019372:	4b75      	ldr	r3, [pc, #468]	; (8019548 <tcp_process+0x7cc>)
 8019374:	681a      	ldr	r2, [r3, #0]
 8019376:	687b      	ldr	r3, [r7, #4]
 8019378:	60da      	str	r2, [r3, #12]
 801937a:	4a73      	ldr	r2, [pc, #460]	; (8019548 <tcp_process+0x7cc>)
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	6013      	str	r3, [r2, #0]
 8019380:	f003 f950 	bl	801c624 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8019384:	e0d2      	b.n	801952c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	8b5b      	ldrh	r3, [r3, #26]
 801938a:	f043 0302 	orr.w	r3, r3, #2
 801938e:	b29a      	uxth	r2, r3
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	2208      	movs	r2, #8
 8019398:	751a      	strb	r2, [r3, #20]
      break;
 801939a:	e0c7      	b.n	801952c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801939c:	4b6b      	ldr	r3, [pc, #428]	; (801954c <tcp_process+0x7d0>)
 801939e:	781b      	ldrb	r3, [r3, #0]
 80193a0:	f003 0310 	and.w	r3, r3, #16
 80193a4:	2b00      	cmp	r3, #0
 80193a6:	f000 80c1 	beq.w	801952c <tcp_process+0x7b0>
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80193ae:	4b68      	ldr	r3, [pc, #416]	; (8019550 <tcp_process+0x7d4>)
 80193b0:	681b      	ldr	r3, [r3, #0]
 80193b2:	429a      	cmp	r2, r3
 80193b4:	f040 80ba 	bne.w	801952c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80193b8:	687b      	ldr	r3, [r7, #4]
 80193ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80193bc:	2b00      	cmp	r3, #0
 80193be:	f040 80b5 	bne.w	801952c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	2206      	movs	r2, #6
 80193c6:	751a      	strb	r2, [r3, #20]
      break;
 80193c8:	e0b0      	b.n	801952c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80193ca:	6878      	ldr	r0, [r7, #4]
 80193cc:	f000 f9ca 	bl	8019764 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80193d0:	4b60      	ldr	r3, [pc, #384]	; (8019554 <tcp_process+0x7d8>)
 80193d2:	781b      	ldrb	r3, [r3, #0]
 80193d4:	f003 0320 	and.w	r3, r3, #32
 80193d8:	2b00      	cmp	r3, #0
 80193da:	f000 80a9 	beq.w	8019530 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	8b5b      	ldrh	r3, [r3, #26]
 80193e2:	f043 0302 	orr.w	r3, r3, #2
 80193e6:	b29a      	uxth	r2, r3
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80193ec:	6878      	ldr	r0, [r7, #4]
 80193ee:	f7fe fd3b 	bl	8017e68 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80193f2:	4b59      	ldr	r3, [pc, #356]	; (8019558 <tcp_process+0x7dc>)
 80193f4:	681b      	ldr	r3, [r3, #0]
 80193f6:	687a      	ldr	r2, [r7, #4]
 80193f8:	429a      	cmp	r2, r3
 80193fa:	d105      	bne.n	8019408 <tcp_process+0x68c>
 80193fc:	4b56      	ldr	r3, [pc, #344]	; (8019558 <tcp_process+0x7dc>)
 80193fe:	681b      	ldr	r3, [r3, #0]
 8019400:	68db      	ldr	r3, [r3, #12]
 8019402:	4a55      	ldr	r2, [pc, #340]	; (8019558 <tcp_process+0x7dc>)
 8019404:	6013      	str	r3, [r2, #0]
 8019406:	e013      	b.n	8019430 <tcp_process+0x6b4>
 8019408:	4b53      	ldr	r3, [pc, #332]	; (8019558 <tcp_process+0x7dc>)
 801940a:	681b      	ldr	r3, [r3, #0]
 801940c:	613b      	str	r3, [r7, #16]
 801940e:	e00c      	b.n	801942a <tcp_process+0x6ae>
 8019410:	693b      	ldr	r3, [r7, #16]
 8019412:	68db      	ldr	r3, [r3, #12]
 8019414:	687a      	ldr	r2, [r7, #4]
 8019416:	429a      	cmp	r2, r3
 8019418:	d104      	bne.n	8019424 <tcp_process+0x6a8>
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	68da      	ldr	r2, [r3, #12]
 801941e:	693b      	ldr	r3, [r7, #16]
 8019420:	60da      	str	r2, [r3, #12]
 8019422:	e005      	b.n	8019430 <tcp_process+0x6b4>
 8019424:	693b      	ldr	r3, [r7, #16]
 8019426:	68db      	ldr	r3, [r3, #12]
 8019428:	613b      	str	r3, [r7, #16]
 801942a:	693b      	ldr	r3, [r7, #16]
 801942c:	2b00      	cmp	r3, #0
 801942e:	d1ef      	bne.n	8019410 <tcp_process+0x694>
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	2200      	movs	r2, #0
 8019434:	60da      	str	r2, [r3, #12]
 8019436:	4b43      	ldr	r3, [pc, #268]	; (8019544 <tcp_process+0x7c8>)
 8019438:	2201      	movs	r2, #1
 801943a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	220a      	movs	r2, #10
 8019440:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8019442:	4b41      	ldr	r3, [pc, #260]	; (8019548 <tcp_process+0x7cc>)
 8019444:	681a      	ldr	r2, [r3, #0]
 8019446:	687b      	ldr	r3, [r7, #4]
 8019448:	60da      	str	r2, [r3, #12]
 801944a:	4a3f      	ldr	r2, [pc, #252]	; (8019548 <tcp_process+0x7cc>)
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	6013      	str	r3, [r2, #0]
 8019450:	f003 f8e8 	bl	801c624 <tcp_timer_needed>
      }
      break;
 8019454:	e06c      	b.n	8019530 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8019456:	6878      	ldr	r0, [r7, #4]
 8019458:	f000 f984 	bl	8019764 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801945c:	4b3b      	ldr	r3, [pc, #236]	; (801954c <tcp_process+0x7d0>)
 801945e:	781b      	ldrb	r3, [r3, #0]
 8019460:	f003 0310 	and.w	r3, r3, #16
 8019464:	2b00      	cmp	r3, #0
 8019466:	d065      	beq.n	8019534 <tcp_process+0x7b8>
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801946c:	4b38      	ldr	r3, [pc, #224]	; (8019550 <tcp_process+0x7d4>)
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	429a      	cmp	r2, r3
 8019472:	d15f      	bne.n	8019534 <tcp_process+0x7b8>
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019478:	2b00      	cmp	r3, #0
 801947a:	d15b      	bne.n	8019534 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801947c:	6878      	ldr	r0, [r7, #4]
 801947e:	f7fe fcf3 	bl	8017e68 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8019482:	4b35      	ldr	r3, [pc, #212]	; (8019558 <tcp_process+0x7dc>)
 8019484:	681b      	ldr	r3, [r3, #0]
 8019486:	687a      	ldr	r2, [r7, #4]
 8019488:	429a      	cmp	r2, r3
 801948a:	d105      	bne.n	8019498 <tcp_process+0x71c>
 801948c:	4b32      	ldr	r3, [pc, #200]	; (8019558 <tcp_process+0x7dc>)
 801948e:	681b      	ldr	r3, [r3, #0]
 8019490:	68db      	ldr	r3, [r3, #12]
 8019492:	4a31      	ldr	r2, [pc, #196]	; (8019558 <tcp_process+0x7dc>)
 8019494:	6013      	str	r3, [r2, #0]
 8019496:	e013      	b.n	80194c0 <tcp_process+0x744>
 8019498:	4b2f      	ldr	r3, [pc, #188]	; (8019558 <tcp_process+0x7dc>)
 801949a:	681b      	ldr	r3, [r3, #0]
 801949c:	60fb      	str	r3, [r7, #12]
 801949e:	e00c      	b.n	80194ba <tcp_process+0x73e>
 80194a0:	68fb      	ldr	r3, [r7, #12]
 80194a2:	68db      	ldr	r3, [r3, #12]
 80194a4:	687a      	ldr	r2, [r7, #4]
 80194a6:	429a      	cmp	r2, r3
 80194a8:	d104      	bne.n	80194b4 <tcp_process+0x738>
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	68da      	ldr	r2, [r3, #12]
 80194ae:	68fb      	ldr	r3, [r7, #12]
 80194b0:	60da      	str	r2, [r3, #12]
 80194b2:	e005      	b.n	80194c0 <tcp_process+0x744>
 80194b4:	68fb      	ldr	r3, [r7, #12]
 80194b6:	68db      	ldr	r3, [r3, #12]
 80194b8:	60fb      	str	r3, [r7, #12]
 80194ba:	68fb      	ldr	r3, [r7, #12]
 80194bc:	2b00      	cmp	r3, #0
 80194be:	d1ef      	bne.n	80194a0 <tcp_process+0x724>
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	2200      	movs	r2, #0
 80194c4:	60da      	str	r2, [r3, #12]
 80194c6:	4b1f      	ldr	r3, [pc, #124]	; (8019544 <tcp_process+0x7c8>)
 80194c8:	2201      	movs	r2, #1
 80194ca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	220a      	movs	r2, #10
 80194d0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80194d2:	4b1d      	ldr	r3, [pc, #116]	; (8019548 <tcp_process+0x7cc>)
 80194d4:	681a      	ldr	r2, [r3, #0]
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	60da      	str	r2, [r3, #12]
 80194da:	4a1b      	ldr	r2, [pc, #108]	; (8019548 <tcp_process+0x7cc>)
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	6013      	str	r3, [r2, #0]
 80194e0:	f003 f8a0 	bl	801c624 <tcp_timer_needed>
      }
      break;
 80194e4:	e026      	b.n	8019534 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80194e6:	6878      	ldr	r0, [r7, #4]
 80194e8:	f000 f93c 	bl	8019764 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80194ec:	4b17      	ldr	r3, [pc, #92]	; (801954c <tcp_process+0x7d0>)
 80194ee:	781b      	ldrb	r3, [r3, #0]
 80194f0:	f003 0310 	and.w	r3, r3, #16
 80194f4:	2b00      	cmp	r3, #0
 80194f6:	d01f      	beq.n	8019538 <tcp_process+0x7bc>
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80194fc:	4b14      	ldr	r3, [pc, #80]	; (8019550 <tcp_process+0x7d4>)
 80194fe:	681b      	ldr	r3, [r3, #0]
 8019500:	429a      	cmp	r2, r3
 8019502:	d119      	bne.n	8019538 <tcp_process+0x7bc>
 8019504:	687b      	ldr	r3, [r7, #4]
 8019506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019508:	2b00      	cmp	r3, #0
 801950a:	d115      	bne.n	8019538 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801950c:	4b11      	ldr	r3, [pc, #68]	; (8019554 <tcp_process+0x7d8>)
 801950e:	781b      	ldrb	r3, [r3, #0]
 8019510:	f043 0310 	orr.w	r3, r3, #16
 8019514:	b2da      	uxtb	r2, r3
 8019516:	4b0f      	ldr	r3, [pc, #60]	; (8019554 <tcp_process+0x7d8>)
 8019518:	701a      	strb	r2, [r3, #0]
      }
      break;
 801951a:	e00d      	b.n	8019538 <tcp_process+0x7bc>
    default:
      break;
 801951c:	bf00      	nop
 801951e:	e00c      	b.n	801953a <tcp_process+0x7be>
      break;
 8019520:	bf00      	nop
 8019522:	e00a      	b.n	801953a <tcp_process+0x7be>
      break;
 8019524:	bf00      	nop
 8019526:	e008      	b.n	801953a <tcp_process+0x7be>
      break;
 8019528:	bf00      	nop
 801952a:	e006      	b.n	801953a <tcp_process+0x7be>
      break;
 801952c:	bf00      	nop
 801952e:	e004      	b.n	801953a <tcp_process+0x7be>
      break;
 8019530:	bf00      	nop
 8019532:	e002      	b.n	801953a <tcp_process+0x7be>
      break;
 8019534:	bf00      	nop
 8019536:	e000      	b.n	801953a <tcp_process+0x7be>
      break;
 8019538:	bf00      	nop
  }
  return ERR_OK;
 801953a:	2300      	movs	r3, #0
}
 801953c:	4618      	mov	r0, r3
 801953e:	3724      	adds	r7, #36	; 0x24
 8019540:	46bd      	mov	sp, r7
 8019542:	bd90      	pop	{r4, r7, pc}
 8019544:	24008664 	.word	0x24008664
 8019548:	24008678 	.word	0x24008678
 801954c:	24004fb8 	.word	0x24004fb8
 8019550:	24004fb0 	.word	0x24004fb0
 8019554:	24004fb9 	.word	0x24004fb9
 8019558:	24008668 	.word	0x24008668

0801955c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801955c:	b590      	push	{r4, r7, lr}
 801955e:	b085      	sub	sp, #20
 8019560:	af00      	add	r7, sp, #0
 8019562:	6078      	str	r0, [r7, #4]
 8019564:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	2b00      	cmp	r3, #0
 801956a:	d106      	bne.n	801957a <tcp_oos_insert_segment+0x1e>
 801956c:	4b3b      	ldr	r3, [pc, #236]	; (801965c <tcp_oos_insert_segment+0x100>)
 801956e:	f240 421f 	movw	r2, #1055	; 0x41f
 8019572:	493b      	ldr	r1, [pc, #236]	; (8019660 <tcp_oos_insert_segment+0x104>)
 8019574:	483b      	ldr	r0, [pc, #236]	; (8019664 <tcp_oos_insert_segment+0x108>)
 8019576:	f00d fcad 	bl	8026ed4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	68db      	ldr	r3, [r3, #12]
 801957e:	899b      	ldrh	r3, [r3, #12]
 8019580:	b29b      	uxth	r3, r3
 8019582:	4618      	mov	r0, r3
 8019584:	f7f9 fda4 	bl	80130d0 <lwip_htons>
 8019588:	4603      	mov	r3, r0
 801958a:	b2db      	uxtb	r3, r3
 801958c:	f003 0301 	and.w	r3, r3, #1
 8019590:	2b00      	cmp	r3, #0
 8019592:	d028      	beq.n	80195e6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8019594:	6838      	ldr	r0, [r7, #0]
 8019596:	f7fe f997 	bl	80178c8 <tcp_segs_free>
    next = NULL;
 801959a:	2300      	movs	r3, #0
 801959c:	603b      	str	r3, [r7, #0]
 801959e:	e056      	b.n	801964e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80195a0:	683b      	ldr	r3, [r7, #0]
 80195a2:	68db      	ldr	r3, [r3, #12]
 80195a4:	899b      	ldrh	r3, [r3, #12]
 80195a6:	b29b      	uxth	r3, r3
 80195a8:	4618      	mov	r0, r3
 80195aa:	f7f9 fd91 	bl	80130d0 <lwip_htons>
 80195ae:	4603      	mov	r3, r0
 80195b0:	b2db      	uxtb	r3, r3
 80195b2:	f003 0301 	and.w	r3, r3, #1
 80195b6:	2b00      	cmp	r3, #0
 80195b8:	d00d      	beq.n	80195d6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	68db      	ldr	r3, [r3, #12]
 80195be:	899b      	ldrh	r3, [r3, #12]
 80195c0:	b29c      	uxth	r4, r3
 80195c2:	2001      	movs	r0, #1
 80195c4:	f7f9 fd84 	bl	80130d0 <lwip_htons>
 80195c8:	4603      	mov	r3, r0
 80195ca:	461a      	mov	r2, r3
 80195cc:	687b      	ldr	r3, [r7, #4]
 80195ce:	68db      	ldr	r3, [r3, #12]
 80195d0:	4322      	orrs	r2, r4
 80195d2:	b292      	uxth	r2, r2
 80195d4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80195d6:	683b      	ldr	r3, [r7, #0]
 80195d8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80195da:	683b      	ldr	r3, [r7, #0]
 80195dc:	681b      	ldr	r3, [r3, #0]
 80195de:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80195e0:	68f8      	ldr	r0, [r7, #12]
 80195e2:	f7fe f986 	bl	80178f2 <tcp_seg_free>
    while (next &&
 80195e6:	683b      	ldr	r3, [r7, #0]
 80195e8:	2b00      	cmp	r3, #0
 80195ea:	d00e      	beq.n	801960a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	891b      	ldrh	r3, [r3, #8]
 80195f0:	461a      	mov	r2, r3
 80195f2:	4b1d      	ldr	r3, [pc, #116]	; (8019668 <tcp_oos_insert_segment+0x10c>)
 80195f4:	681b      	ldr	r3, [r3, #0]
 80195f6:	441a      	add	r2, r3
 80195f8:	683b      	ldr	r3, [r7, #0]
 80195fa:	68db      	ldr	r3, [r3, #12]
 80195fc:	685b      	ldr	r3, [r3, #4]
 80195fe:	6839      	ldr	r1, [r7, #0]
 8019600:	8909      	ldrh	r1, [r1, #8]
 8019602:	440b      	add	r3, r1
 8019604:	1ad3      	subs	r3, r2, r3
    while (next &&
 8019606:	2b00      	cmp	r3, #0
 8019608:	daca      	bge.n	80195a0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801960a:	683b      	ldr	r3, [r7, #0]
 801960c:	2b00      	cmp	r3, #0
 801960e:	d01e      	beq.n	801964e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	891b      	ldrh	r3, [r3, #8]
 8019614:	461a      	mov	r2, r3
 8019616:	4b14      	ldr	r3, [pc, #80]	; (8019668 <tcp_oos_insert_segment+0x10c>)
 8019618:	681b      	ldr	r3, [r3, #0]
 801961a:	441a      	add	r2, r3
 801961c:	683b      	ldr	r3, [r7, #0]
 801961e:	68db      	ldr	r3, [r3, #12]
 8019620:	685b      	ldr	r3, [r3, #4]
 8019622:	1ad3      	subs	r3, r2, r3
    if (next &&
 8019624:	2b00      	cmp	r3, #0
 8019626:	dd12      	ble.n	801964e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8019628:	683b      	ldr	r3, [r7, #0]
 801962a:	68db      	ldr	r3, [r3, #12]
 801962c:	685b      	ldr	r3, [r3, #4]
 801962e:	b29a      	uxth	r2, r3
 8019630:	4b0d      	ldr	r3, [pc, #52]	; (8019668 <tcp_oos_insert_segment+0x10c>)
 8019632:	681b      	ldr	r3, [r3, #0]
 8019634:	b29b      	uxth	r3, r3
 8019636:	1ad3      	subs	r3, r2, r3
 8019638:	b29a      	uxth	r2, r3
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	685a      	ldr	r2, [r3, #4]
 8019642:	687b      	ldr	r3, [r7, #4]
 8019644:	891b      	ldrh	r3, [r3, #8]
 8019646:	4619      	mov	r1, r3
 8019648:	4610      	mov	r0, r2
 801964a:	f7fc f85b 	bl	8015704 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	683a      	ldr	r2, [r7, #0]
 8019652:	601a      	str	r2, [r3, #0]
}
 8019654:	bf00      	nop
 8019656:	3714      	adds	r7, #20
 8019658:	46bd      	mov	sp, r7
 801965a:	bd90      	pop	{r4, r7, pc}
 801965c:	0802c780 	.word	0x0802c780
 8019660:	0802ca40 	.word	0x0802ca40
 8019664:	0802c7cc 	.word	0x0802c7cc
 8019668:	24004fac 	.word	0x24004fac

0801966c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801966c:	b5b0      	push	{r4, r5, r7, lr}
 801966e:	b086      	sub	sp, #24
 8019670:	af00      	add	r7, sp, #0
 8019672:	60f8      	str	r0, [r7, #12]
 8019674:	60b9      	str	r1, [r7, #8]
 8019676:	607a      	str	r2, [r7, #4]
 8019678:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801967a:	e03e      	b.n	80196fa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801967c:	68bb      	ldr	r3, [r7, #8]
 801967e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8019680:	68bb      	ldr	r3, [r7, #8]
 8019682:	681b      	ldr	r3, [r3, #0]
 8019684:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8019686:	697b      	ldr	r3, [r7, #20]
 8019688:	685b      	ldr	r3, [r3, #4]
 801968a:	4618      	mov	r0, r3
 801968c:	f7fc fa80 	bl	8015b90 <pbuf_clen>
 8019690:	4603      	mov	r3, r0
 8019692:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8019694:	68fb      	ldr	r3, [r7, #12]
 8019696:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801969a:	8a7a      	ldrh	r2, [r7, #18]
 801969c:	429a      	cmp	r2, r3
 801969e:	d906      	bls.n	80196ae <tcp_free_acked_segments+0x42>
 80196a0:	4b2a      	ldr	r3, [pc, #168]	; (801974c <tcp_free_acked_segments+0xe0>)
 80196a2:	f240 4257 	movw	r2, #1111	; 0x457
 80196a6:	492a      	ldr	r1, [pc, #168]	; (8019750 <tcp_free_acked_segments+0xe4>)
 80196a8:	482a      	ldr	r0, [pc, #168]	; (8019754 <tcp_free_acked_segments+0xe8>)
 80196aa:	f00d fc13 	bl	8026ed4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80196ae:	68fb      	ldr	r3, [r7, #12]
 80196b0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80196b4:	8a7b      	ldrh	r3, [r7, #18]
 80196b6:	1ad3      	subs	r3, r2, r3
 80196b8:	b29a      	uxth	r2, r3
 80196ba:	68fb      	ldr	r3, [r7, #12]
 80196bc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80196c0:	697b      	ldr	r3, [r7, #20]
 80196c2:	891a      	ldrh	r2, [r3, #8]
 80196c4:	4b24      	ldr	r3, [pc, #144]	; (8019758 <tcp_free_acked_segments+0xec>)
 80196c6:	881b      	ldrh	r3, [r3, #0]
 80196c8:	4413      	add	r3, r2
 80196ca:	b29a      	uxth	r2, r3
 80196cc:	4b22      	ldr	r3, [pc, #136]	; (8019758 <tcp_free_acked_segments+0xec>)
 80196ce:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80196d0:	6978      	ldr	r0, [r7, #20]
 80196d2:	f7fe f90e 	bl	80178f2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80196d6:	68fb      	ldr	r3, [r7, #12]
 80196d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80196dc:	2b00      	cmp	r3, #0
 80196de:	d00c      	beq.n	80196fa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80196e0:	68bb      	ldr	r3, [r7, #8]
 80196e2:	2b00      	cmp	r3, #0
 80196e4:	d109      	bne.n	80196fa <tcp_free_acked_segments+0x8e>
 80196e6:	683b      	ldr	r3, [r7, #0]
 80196e8:	2b00      	cmp	r3, #0
 80196ea:	d106      	bne.n	80196fa <tcp_free_acked_segments+0x8e>
 80196ec:	4b17      	ldr	r3, [pc, #92]	; (801974c <tcp_free_acked_segments+0xe0>)
 80196ee:	f240 4261 	movw	r2, #1121	; 0x461
 80196f2:	491a      	ldr	r1, [pc, #104]	; (801975c <tcp_free_acked_segments+0xf0>)
 80196f4:	4817      	ldr	r0, [pc, #92]	; (8019754 <tcp_free_acked_segments+0xe8>)
 80196f6:	f00d fbed 	bl	8026ed4 <iprintf>
  while (seg_list != NULL &&
 80196fa:	68bb      	ldr	r3, [r7, #8]
 80196fc:	2b00      	cmp	r3, #0
 80196fe:	d020      	beq.n	8019742 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8019700:	68bb      	ldr	r3, [r7, #8]
 8019702:	68db      	ldr	r3, [r3, #12]
 8019704:	685b      	ldr	r3, [r3, #4]
 8019706:	4618      	mov	r0, r3
 8019708:	f7f9 fcf7 	bl	80130fa <lwip_htonl>
 801970c:	4604      	mov	r4, r0
 801970e:	68bb      	ldr	r3, [r7, #8]
 8019710:	891b      	ldrh	r3, [r3, #8]
 8019712:	461d      	mov	r5, r3
 8019714:	68bb      	ldr	r3, [r7, #8]
 8019716:	68db      	ldr	r3, [r3, #12]
 8019718:	899b      	ldrh	r3, [r3, #12]
 801971a:	b29b      	uxth	r3, r3
 801971c:	4618      	mov	r0, r3
 801971e:	f7f9 fcd7 	bl	80130d0 <lwip_htons>
 8019722:	4603      	mov	r3, r0
 8019724:	b2db      	uxtb	r3, r3
 8019726:	f003 0303 	and.w	r3, r3, #3
 801972a:	2b00      	cmp	r3, #0
 801972c:	d001      	beq.n	8019732 <tcp_free_acked_segments+0xc6>
 801972e:	2301      	movs	r3, #1
 8019730:	e000      	b.n	8019734 <tcp_free_acked_segments+0xc8>
 8019732:	2300      	movs	r3, #0
 8019734:	442b      	add	r3, r5
 8019736:	18e2      	adds	r2, r4, r3
 8019738:	4b09      	ldr	r3, [pc, #36]	; (8019760 <tcp_free_acked_segments+0xf4>)
 801973a:	681b      	ldr	r3, [r3, #0]
 801973c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801973e:	2b00      	cmp	r3, #0
 8019740:	dd9c      	ble.n	801967c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8019742:	68bb      	ldr	r3, [r7, #8]
}
 8019744:	4618      	mov	r0, r3
 8019746:	3718      	adds	r7, #24
 8019748:	46bd      	mov	sp, r7
 801974a:	bdb0      	pop	{r4, r5, r7, pc}
 801974c:	0802c780 	.word	0x0802c780
 8019750:	0802ca68 	.word	0x0802ca68
 8019754:	0802c7cc 	.word	0x0802c7cc
 8019758:	24004fb4 	.word	0x24004fb4
 801975c:	0802ca90 	.word	0x0802ca90
 8019760:	24004fb0 	.word	0x24004fb0

08019764 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8019764:	b5b0      	push	{r4, r5, r7, lr}
 8019766:	b094      	sub	sp, #80	; 0x50
 8019768:	af00      	add	r7, sp, #0
 801976a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801976c:	2300      	movs	r3, #0
 801976e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8019770:	687b      	ldr	r3, [r7, #4]
 8019772:	2b00      	cmp	r3, #0
 8019774:	d106      	bne.n	8019784 <tcp_receive+0x20>
 8019776:	4ba6      	ldr	r3, [pc, #664]	; (8019a10 <tcp_receive+0x2ac>)
 8019778:	f240 427b 	movw	r2, #1147	; 0x47b
 801977c:	49a5      	ldr	r1, [pc, #660]	; (8019a14 <tcp_receive+0x2b0>)
 801977e:	48a6      	ldr	r0, [pc, #664]	; (8019a18 <tcp_receive+0x2b4>)
 8019780:	f00d fba8 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	7d1b      	ldrb	r3, [r3, #20]
 8019788:	2b03      	cmp	r3, #3
 801978a:	d806      	bhi.n	801979a <tcp_receive+0x36>
 801978c:	4ba0      	ldr	r3, [pc, #640]	; (8019a10 <tcp_receive+0x2ac>)
 801978e:	f240 427c 	movw	r2, #1148	; 0x47c
 8019792:	49a2      	ldr	r1, [pc, #648]	; (8019a1c <tcp_receive+0x2b8>)
 8019794:	48a0      	ldr	r0, [pc, #640]	; (8019a18 <tcp_receive+0x2b4>)
 8019796:	f00d fb9d 	bl	8026ed4 <iprintf>

  if (flags & TCP_ACK) {
 801979a:	4ba1      	ldr	r3, [pc, #644]	; (8019a20 <tcp_receive+0x2bc>)
 801979c:	781b      	ldrb	r3, [r3, #0]
 801979e:	f003 0310 	and.w	r3, r3, #16
 80197a2:	2b00      	cmp	r3, #0
 80197a4:	f000 8263 	beq.w	8019c6e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80197ae:	461a      	mov	r2, r3
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80197b4:	4413      	add	r3, r2
 80197b6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80197bc:	4b99      	ldr	r3, [pc, #612]	; (8019a24 <tcp_receive+0x2c0>)
 80197be:	681b      	ldr	r3, [r3, #0]
 80197c0:	1ad3      	subs	r3, r2, r3
 80197c2:	2b00      	cmp	r3, #0
 80197c4:	db1b      	blt.n	80197fe <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80197c6:	687b      	ldr	r3, [r7, #4]
 80197c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80197ca:	4b96      	ldr	r3, [pc, #600]	; (8019a24 <tcp_receive+0x2c0>)
 80197cc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80197ce:	429a      	cmp	r2, r3
 80197d0:	d106      	bne.n	80197e0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80197d6:	4b94      	ldr	r3, [pc, #592]	; (8019a28 <tcp_receive+0x2c4>)
 80197d8:	681b      	ldr	r3, [r3, #0]
 80197da:	1ad3      	subs	r3, r2, r3
 80197dc:	2b00      	cmp	r3, #0
 80197de:	db0e      	blt.n	80197fe <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80197e4:	4b90      	ldr	r3, [pc, #576]	; (8019a28 <tcp_receive+0x2c4>)
 80197e6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80197e8:	429a      	cmp	r2, r3
 80197ea:	d125      	bne.n	8019838 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80197ec:	4b8f      	ldr	r3, [pc, #572]	; (8019a2c <tcp_receive+0x2c8>)
 80197ee:	681b      	ldr	r3, [r3, #0]
 80197f0:	89db      	ldrh	r3, [r3, #14]
 80197f2:	b29a      	uxth	r2, r3
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80197fa:	429a      	cmp	r2, r3
 80197fc:	d91c      	bls.n	8019838 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80197fe:	4b8b      	ldr	r3, [pc, #556]	; (8019a2c <tcp_receive+0x2c8>)
 8019800:	681b      	ldr	r3, [r3, #0]
 8019802:	89db      	ldrh	r3, [r3, #14]
 8019804:	b29a      	uxth	r2, r3
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019818:	429a      	cmp	r2, r3
 801981a:	d205      	bcs.n	8019828 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8019828:	4b7e      	ldr	r3, [pc, #504]	; (8019a24 <tcp_receive+0x2c0>)
 801982a:	681a      	ldr	r2, [r3, #0]
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8019830:	4b7d      	ldr	r3, [pc, #500]	; (8019a28 <tcp_receive+0x2c4>)
 8019832:	681a      	ldr	r2, [r3, #0]
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8019838:	4b7b      	ldr	r3, [pc, #492]	; (8019a28 <tcp_receive+0x2c4>)
 801983a:	681a      	ldr	r2, [r3, #0]
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019840:	1ad3      	subs	r3, r2, r3
 8019842:	2b00      	cmp	r3, #0
 8019844:	dc58      	bgt.n	80198f8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8019846:	4b7a      	ldr	r3, [pc, #488]	; (8019a30 <tcp_receive+0x2cc>)
 8019848:	881b      	ldrh	r3, [r3, #0]
 801984a:	2b00      	cmp	r3, #0
 801984c:	d14b      	bne.n	80198e6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019852:	687a      	ldr	r2, [r7, #4]
 8019854:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8019858:	4413      	add	r3, r2
 801985a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801985c:	429a      	cmp	r2, r3
 801985e:	d142      	bne.n	80198e6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8019866:	2b00      	cmp	r3, #0
 8019868:	db3d      	blt.n	80198e6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801986e:	4b6e      	ldr	r3, [pc, #440]	; (8019a28 <tcp_receive+0x2c4>)
 8019870:	681b      	ldr	r3, [r3, #0]
 8019872:	429a      	cmp	r2, r3
 8019874:	d137      	bne.n	80198e6 <tcp_receive+0x182>
              found_dupack = 1;
 8019876:	2301      	movs	r3, #1
 8019878:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8019880:	2bff      	cmp	r3, #255	; 0xff
 8019882:	d007      	beq.n	8019894 <tcp_receive+0x130>
                ++pcb->dupacks;
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801988a:	3301      	adds	r3, #1
 801988c:	b2da      	uxtb	r2, r3
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801989a:	2b03      	cmp	r3, #3
 801989c:	d91b      	bls.n	80198d6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80198a4:	687b      	ldr	r3, [r7, #4]
 80198a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80198a8:	4413      	add	r3, r2
 80198aa:	b29a      	uxth	r2, r3
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80198b2:	429a      	cmp	r2, r3
 80198b4:	d30a      	bcc.n	80198cc <tcp_receive+0x168>
 80198b6:	687b      	ldr	r3, [r7, #4]
 80198b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80198c0:	4413      	add	r3, r2
 80198c2:	b29a      	uxth	r2, r3
 80198c4:	687b      	ldr	r3, [r7, #4]
 80198c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80198ca:	e004      	b.n	80198d6 <tcp_receive+0x172>
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80198d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80198dc:	2b02      	cmp	r3, #2
 80198de:	d902      	bls.n	80198e6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80198e0:	6878      	ldr	r0, [r7, #4]
 80198e2:	f002 fb41 	bl	801bf68 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80198e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80198e8:	2b00      	cmp	r3, #0
 80198ea:	f040 8160 	bne.w	8019bae <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	2200      	movs	r2, #0
 80198f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80198f6:	e15a      	b.n	8019bae <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80198f8:	4b4b      	ldr	r3, [pc, #300]	; (8019a28 <tcp_receive+0x2c4>)
 80198fa:	681a      	ldr	r2, [r3, #0]
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019900:	1ad3      	subs	r3, r2, r3
 8019902:	3b01      	subs	r3, #1
 8019904:	2b00      	cmp	r3, #0
 8019906:	f2c0 814d 	blt.w	8019ba4 <tcp_receive+0x440>
 801990a:	4b47      	ldr	r3, [pc, #284]	; (8019a28 <tcp_receive+0x2c4>)
 801990c:	681a      	ldr	r2, [r3, #0]
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019912:	1ad3      	subs	r3, r2, r3
 8019914:	2b00      	cmp	r3, #0
 8019916:	f300 8145 	bgt.w	8019ba4 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	8b5b      	ldrh	r3, [r3, #26]
 801991e:	f003 0304 	and.w	r3, r3, #4
 8019922:	2b00      	cmp	r3, #0
 8019924:	d010      	beq.n	8019948 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	8b5b      	ldrh	r3, [r3, #26]
 801992a:	f023 0304 	bic.w	r3, r3, #4
 801992e:	b29a      	uxth	r2, r3
 8019930:	687b      	ldr	r3, [r7, #4]
 8019932:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	2200      	movs	r2, #0
 8019944:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	2200      	movs	r2, #0
 801994c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019956:	10db      	asrs	r3, r3, #3
 8019958:	b21b      	sxth	r3, r3
 801995a:	b29a      	uxth	r2, r3
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019962:	b29b      	uxth	r3, r3
 8019964:	4413      	add	r3, r2
 8019966:	b29b      	uxth	r3, r3
 8019968:	b21a      	sxth	r2, r3
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8019970:	4b2d      	ldr	r3, [pc, #180]	; (8019a28 <tcp_receive+0x2c4>)
 8019972:	681b      	ldr	r3, [r3, #0]
 8019974:	b29a      	uxth	r2, r3
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801997a:	b29b      	uxth	r3, r3
 801997c:	1ad3      	subs	r3, r2, r3
 801997e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	2200      	movs	r2, #0
 8019984:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8019988:	4b27      	ldr	r3, [pc, #156]	; (8019a28 <tcp_receive+0x2c4>)
 801998a:	681a      	ldr	r2, [r3, #0]
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	7d1b      	ldrb	r3, [r3, #20]
 8019994:	2b03      	cmp	r3, #3
 8019996:	f240 8096 	bls.w	8019ac6 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80199a0:	687b      	ldr	r3, [r7, #4]
 80199a2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80199a6:	429a      	cmp	r2, r3
 80199a8:	d244      	bcs.n	8019a34 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	8b5b      	ldrh	r3, [r3, #26]
 80199ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	d001      	beq.n	80199ba <tcp_receive+0x256>
 80199b6:	2301      	movs	r3, #1
 80199b8:	e000      	b.n	80199bc <tcp_receive+0x258>
 80199ba:	2302      	movs	r3, #2
 80199bc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80199c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80199c4:	b29a      	uxth	r2, r3
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80199ca:	fb12 f303 	smulbb	r3, r2, r3
 80199ce:	b29b      	uxth	r3, r3
 80199d0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80199d2:	4293      	cmp	r3, r2
 80199d4:	bf28      	it	cs
 80199d6:	4613      	movcs	r3, r2
 80199d8:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80199e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80199e2:	4413      	add	r3, r2
 80199e4:	b29a      	uxth	r2, r3
 80199e6:	687b      	ldr	r3, [r7, #4]
 80199e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80199ec:	429a      	cmp	r2, r3
 80199ee:	d309      	bcc.n	8019a04 <tcp_receive+0x2a0>
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80199f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80199f8:	4413      	add	r3, r2
 80199fa:	b29a      	uxth	r2, r3
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8019a02:	e060      	b.n	8019ac6 <tcp_receive+0x362>
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019a0a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8019a0e:	e05a      	b.n	8019ac6 <tcp_receive+0x362>
 8019a10:	0802c780 	.word	0x0802c780
 8019a14:	0802cab0 	.word	0x0802cab0
 8019a18:	0802c7cc 	.word	0x0802c7cc
 8019a1c:	0802cacc 	.word	0x0802cacc
 8019a20:	24004fb8 	.word	0x24004fb8
 8019a24:	24004fac 	.word	0x24004fac
 8019a28:	24004fb0 	.word	0x24004fb0
 8019a2c:	24004f9c 	.word	0x24004f9c
 8019a30:	24004fb6 	.word	0x24004fb6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019a3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8019a3c:	4413      	add	r3, r2
 8019a3e:	b29a      	uxth	r2, r3
 8019a40:	687b      	ldr	r3, [r7, #4]
 8019a42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8019a46:	429a      	cmp	r2, r3
 8019a48:	d309      	bcc.n	8019a5e <tcp_receive+0x2fa>
 8019a4a:	687b      	ldr	r3, [r7, #4]
 8019a4c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019a50:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8019a52:	4413      	add	r3, r2
 8019a54:	b29a      	uxth	r2, r3
 8019a56:	687b      	ldr	r3, [r7, #4]
 8019a58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8019a5c:	e004      	b.n	8019a68 <tcp_receive+0x304>
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019a64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8019a68:	687b      	ldr	r3, [r7, #4]
 8019a6a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019a74:	429a      	cmp	r2, r3
 8019a76:	d326      	bcc.n	8019ac6 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019a7e:	687b      	ldr	r3, [r7, #4]
 8019a80:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019a84:	1ad3      	subs	r3, r2, r3
 8019a86:	b29a      	uxth	r2, r3
 8019a88:	687b      	ldr	r3, [r7, #4]
 8019a8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8019a8e:	687b      	ldr	r3, [r7, #4]
 8019a90:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019a98:	4413      	add	r3, r2
 8019a9a:	b29a      	uxth	r2, r3
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019aa2:	429a      	cmp	r2, r3
 8019aa4:	d30a      	bcc.n	8019abc <tcp_receive+0x358>
 8019aa6:	687b      	ldr	r3, [r7, #4]
 8019aa8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019ab0:	4413      	add	r3, r2
 8019ab2:	b29a      	uxth	r2, r3
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8019aba:	e004      	b.n	8019ac6 <tcp_receive+0x362>
 8019abc:	687b      	ldr	r3, [r7, #4]
 8019abe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019ac2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8019aca:	687b      	ldr	r3, [r7, #4]
 8019acc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019ace:	4a98      	ldr	r2, [pc, #608]	; (8019d30 <tcp_receive+0x5cc>)
 8019ad0:	6878      	ldr	r0, [r7, #4]
 8019ad2:	f7ff fdcb 	bl	801966c <tcp_free_acked_segments>
 8019ad6:	4602      	mov	r2, r0
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8019adc:	687b      	ldr	r3, [r7, #4]
 8019ade:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8019ae0:	687b      	ldr	r3, [r7, #4]
 8019ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019ae4:	4a93      	ldr	r2, [pc, #588]	; (8019d34 <tcp_receive+0x5d0>)
 8019ae6:	6878      	ldr	r0, [r7, #4]
 8019ae8:	f7ff fdc0 	bl	801966c <tcp_free_acked_segments>
 8019aec:	4602      	mov	r2, r0
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8019af2:	687b      	ldr	r3, [r7, #4]
 8019af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019af6:	2b00      	cmp	r3, #0
 8019af8:	d104      	bne.n	8019b04 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8019afa:	687b      	ldr	r3, [r7, #4]
 8019afc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019b00:	861a      	strh	r2, [r3, #48]	; 0x30
 8019b02:	e002      	b.n	8019b0a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	2200      	movs	r2, #0
 8019b08:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	2200      	movs	r2, #0
 8019b0e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d103      	bne.n	8019b20 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	2200      	movs	r2, #0
 8019b1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8019b26:	4b84      	ldr	r3, [pc, #528]	; (8019d38 <tcp_receive+0x5d4>)
 8019b28:	881b      	ldrh	r3, [r3, #0]
 8019b2a:	4413      	add	r3, r2
 8019b2c:	b29a      	uxth	r2, r3
 8019b2e:	687b      	ldr	r3, [r7, #4]
 8019b30:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	8b5b      	ldrh	r3, [r3, #26]
 8019b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019b3c:	2b00      	cmp	r3, #0
 8019b3e:	d035      	beq.n	8019bac <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8019b40:	687b      	ldr	r3, [r7, #4]
 8019b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019b44:	2b00      	cmp	r3, #0
 8019b46:	d118      	bne.n	8019b7a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	d00c      	beq.n	8019b6a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8019b50:	687b      	ldr	r3, [r7, #4]
 8019b52:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019b58:	68db      	ldr	r3, [r3, #12]
 8019b5a:	685b      	ldr	r3, [r3, #4]
 8019b5c:	4618      	mov	r0, r3
 8019b5e:	f7f9 facc 	bl	80130fa <lwip_htonl>
 8019b62:	4603      	mov	r3, r0
 8019b64:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8019b66:	2b00      	cmp	r3, #0
 8019b68:	dc20      	bgt.n	8019bac <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	8b5b      	ldrh	r3, [r3, #26]
 8019b6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019b72:	b29a      	uxth	r2, r3
 8019b74:	687b      	ldr	r3, [r7, #4]
 8019b76:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019b78:	e018      	b.n	8019bac <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019b82:	68db      	ldr	r3, [r3, #12]
 8019b84:	685b      	ldr	r3, [r3, #4]
 8019b86:	4618      	mov	r0, r3
 8019b88:	f7f9 fab7 	bl	80130fa <lwip_htonl>
 8019b8c:	4603      	mov	r3, r0
 8019b8e:	1ae3      	subs	r3, r4, r3
 8019b90:	2b00      	cmp	r3, #0
 8019b92:	dc0b      	bgt.n	8019bac <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8019b94:	687b      	ldr	r3, [r7, #4]
 8019b96:	8b5b      	ldrh	r3, [r3, #26]
 8019b98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019b9c:	b29a      	uxth	r2, r3
 8019b9e:	687b      	ldr	r3, [r7, #4]
 8019ba0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019ba2:	e003      	b.n	8019bac <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8019ba4:	6878      	ldr	r0, [r7, #4]
 8019ba6:	f002 fbcd 	bl	801c344 <tcp_send_empty_ack>
 8019baa:	e000      	b.n	8019bae <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019bac:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8019bae:	687b      	ldr	r3, [r7, #4]
 8019bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	d05b      	beq.n	8019c6e <tcp_receive+0x50a>
 8019bb6:	687b      	ldr	r3, [r7, #4]
 8019bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019bba:	4b60      	ldr	r3, [pc, #384]	; (8019d3c <tcp_receive+0x5d8>)
 8019bbc:	681b      	ldr	r3, [r3, #0]
 8019bbe:	1ad3      	subs	r3, r2, r3
 8019bc0:	2b00      	cmp	r3, #0
 8019bc2:	da54      	bge.n	8019c6e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8019bc4:	4b5e      	ldr	r3, [pc, #376]	; (8019d40 <tcp_receive+0x5dc>)
 8019bc6:	681b      	ldr	r3, [r3, #0]
 8019bc8:	b29a      	uxth	r2, r3
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019bce:	b29b      	uxth	r3, r3
 8019bd0:	1ad3      	subs	r3, r2, r3
 8019bd2:	b29b      	uxth	r3, r3
 8019bd4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8019bd8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019be2:	10db      	asrs	r3, r3, #3
 8019be4:	b21b      	sxth	r3, r3
 8019be6:	b29b      	uxth	r3, r3
 8019be8:	1ad3      	subs	r3, r2, r3
 8019bea:	b29b      	uxth	r3, r3
 8019bec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019bf6:	b29a      	uxth	r2, r3
 8019bf8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019bfc:	4413      	add	r3, r2
 8019bfe:	b29b      	uxth	r3, r3
 8019c00:	b21a      	sxth	r2, r3
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8019c06:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	da05      	bge.n	8019c1a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8019c0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019c12:	425b      	negs	r3, r3
 8019c14:	b29b      	uxth	r3, r3
 8019c16:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8019c1a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8019c1e:	687b      	ldr	r3, [r7, #4]
 8019c20:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019c24:	109b      	asrs	r3, r3, #2
 8019c26:	b21b      	sxth	r3, r3
 8019c28:	b29b      	uxth	r3, r3
 8019c2a:	1ad3      	subs	r3, r2, r3
 8019c2c:	b29b      	uxth	r3, r3
 8019c2e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8019c32:	687b      	ldr	r3, [r7, #4]
 8019c34:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019c38:	b29a      	uxth	r2, r3
 8019c3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019c3e:	4413      	add	r3, r2
 8019c40:	b29b      	uxth	r3, r3
 8019c42:	b21a      	sxth	r2, r3
 8019c44:	687b      	ldr	r3, [r7, #4]
 8019c46:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019c4e:	10db      	asrs	r3, r3, #3
 8019c50:	b21b      	sxth	r3, r3
 8019c52:	b29a      	uxth	r2, r3
 8019c54:	687b      	ldr	r3, [r7, #4]
 8019c56:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019c5a:	b29b      	uxth	r3, r3
 8019c5c:	4413      	add	r3, r2
 8019c5e:	b29b      	uxth	r3, r3
 8019c60:	b21a      	sxth	r2, r3
 8019c62:	687b      	ldr	r3, [r7, #4]
 8019c64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	2200      	movs	r2, #0
 8019c6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8019c6e:	4b35      	ldr	r3, [pc, #212]	; (8019d44 <tcp_receive+0x5e0>)
 8019c70:	881b      	ldrh	r3, [r3, #0]
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	f000 84e1 	beq.w	801a63a <tcp_receive+0xed6>
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	7d1b      	ldrb	r3, [r3, #20]
 8019c7c:	2b06      	cmp	r3, #6
 8019c7e:	f200 84dc 	bhi.w	801a63a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019c82:	687b      	ldr	r3, [r7, #4]
 8019c84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019c86:	4b30      	ldr	r3, [pc, #192]	; (8019d48 <tcp_receive+0x5e4>)
 8019c88:	681b      	ldr	r3, [r3, #0]
 8019c8a:	1ad3      	subs	r3, r2, r3
 8019c8c:	3b01      	subs	r3, #1
 8019c8e:	2b00      	cmp	r3, #0
 8019c90:	f2c0 808e 	blt.w	8019db0 <tcp_receive+0x64c>
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019c98:	4b2a      	ldr	r3, [pc, #168]	; (8019d44 <tcp_receive+0x5e0>)
 8019c9a:	881b      	ldrh	r3, [r3, #0]
 8019c9c:	4619      	mov	r1, r3
 8019c9e:	4b2a      	ldr	r3, [pc, #168]	; (8019d48 <tcp_receive+0x5e4>)
 8019ca0:	681b      	ldr	r3, [r3, #0]
 8019ca2:	440b      	add	r3, r1
 8019ca4:	1ad3      	subs	r3, r2, r3
 8019ca6:	3301      	adds	r3, #1
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	f300 8081 	bgt.w	8019db0 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8019cae:	4b27      	ldr	r3, [pc, #156]	; (8019d4c <tcp_receive+0x5e8>)
 8019cb0:	685b      	ldr	r3, [r3, #4]
 8019cb2:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019cb8:	4b23      	ldr	r3, [pc, #140]	; (8019d48 <tcp_receive+0x5e4>)
 8019cba:	681b      	ldr	r3, [r3, #0]
 8019cbc:	1ad3      	subs	r3, r2, r3
 8019cbe:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8019cc0:	4b22      	ldr	r3, [pc, #136]	; (8019d4c <tcp_receive+0x5e8>)
 8019cc2:	685b      	ldr	r3, [r3, #4]
 8019cc4:	2b00      	cmp	r3, #0
 8019cc6:	d106      	bne.n	8019cd6 <tcp_receive+0x572>
 8019cc8:	4b21      	ldr	r3, [pc, #132]	; (8019d50 <tcp_receive+0x5ec>)
 8019cca:	f240 5294 	movw	r2, #1428	; 0x594
 8019cce:	4921      	ldr	r1, [pc, #132]	; (8019d54 <tcp_receive+0x5f0>)
 8019cd0:	4821      	ldr	r0, [pc, #132]	; (8019d58 <tcp_receive+0x5f4>)
 8019cd2:	f00d f8ff 	bl	8026ed4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8019cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cd8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019cdc:	4293      	cmp	r3, r2
 8019cde:	d906      	bls.n	8019cee <tcp_receive+0x58a>
 8019ce0:	4b1b      	ldr	r3, [pc, #108]	; (8019d50 <tcp_receive+0x5ec>)
 8019ce2:	f240 5295 	movw	r2, #1429	; 0x595
 8019ce6:	491d      	ldr	r1, [pc, #116]	; (8019d5c <tcp_receive+0x5f8>)
 8019ce8:	481b      	ldr	r0, [pc, #108]	; (8019d58 <tcp_receive+0x5f4>)
 8019cea:	f00d f8f3 	bl	8026ed4 <iprintf>
      off = (u16_t)off32;
 8019cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cf0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8019cf4:	4b15      	ldr	r3, [pc, #84]	; (8019d4c <tcp_receive+0x5e8>)
 8019cf6:	685b      	ldr	r3, [r3, #4]
 8019cf8:	891b      	ldrh	r3, [r3, #8]
 8019cfa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019cfe:	429a      	cmp	r2, r3
 8019d00:	d906      	bls.n	8019d10 <tcp_receive+0x5ac>
 8019d02:	4b13      	ldr	r3, [pc, #76]	; (8019d50 <tcp_receive+0x5ec>)
 8019d04:	f240 5297 	movw	r2, #1431	; 0x597
 8019d08:	4915      	ldr	r1, [pc, #84]	; (8019d60 <tcp_receive+0x5fc>)
 8019d0a:	4813      	ldr	r0, [pc, #76]	; (8019d58 <tcp_receive+0x5f4>)
 8019d0c:	f00d f8e2 	bl	8026ed4 <iprintf>
      inseg.len -= off;
 8019d10:	4b0e      	ldr	r3, [pc, #56]	; (8019d4c <tcp_receive+0x5e8>)
 8019d12:	891a      	ldrh	r2, [r3, #8]
 8019d14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019d18:	1ad3      	subs	r3, r2, r3
 8019d1a:	b29a      	uxth	r2, r3
 8019d1c:	4b0b      	ldr	r3, [pc, #44]	; (8019d4c <tcp_receive+0x5e8>)
 8019d1e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8019d20:	4b0a      	ldr	r3, [pc, #40]	; (8019d4c <tcp_receive+0x5e8>)
 8019d22:	685b      	ldr	r3, [r3, #4]
 8019d24:	891a      	ldrh	r2, [r3, #8]
 8019d26:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019d2a:	1ad3      	subs	r3, r2, r3
 8019d2c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8019d2e:	e029      	b.n	8019d84 <tcp_receive+0x620>
 8019d30:	0802cae8 	.word	0x0802cae8
 8019d34:	0802caf0 	.word	0x0802caf0
 8019d38:	24004fb4 	.word	0x24004fb4
 8019d3c:	24004fb0 	.word	0x24004fb0
 8019d40:	2400866c 	.word	0x2400866c
 8019d44:	24004fb6 	.word	0x24004fb6
 8019d48:	24004fac 	.word	0x24004fac
 8019d4c:	24004f8c 	.word	0x24004f8c
 8019d50:	0802c780 	.word	0x0802c780
 8019d54:	0802caf8 	.word	0x0802caf8
 8019d58:	0802c7cc 	.word	0x0802c7cc
 8019d5c:	0802cb08 	.word	0x0802cb08
 8019d60:	0802cb18 	.word	0x0802cb18
        off -= p->len;
 8019d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019d66:	895b      	ldrh	r3, [r3, #10]
 8019d68:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019d6c:	1ad3      	subs	r3, r2, r3
 8019d6e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8019d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019d74:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8019d76:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8019d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019d7a:	2200      	movs	r2, #0
 8019d7c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8019d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019d80:	681b      	ldr	r3, [r3, #0]
 8019d82:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8019d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019d86:	895b      	ldrh	r3, [r3, #10]
 8019d88:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019d8c:	429a      	cmp	r2, r3
 8019d8e:	d8e9      	bhi.n	8019d64 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8019d90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019d94:	4619      	mov	r1, r3
 8019d96:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8019d98:	f7fb fdb4 	bl	8015904 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019da0:	4a91      	ldr	r2, [pc, #580]	; (8019fe8 <tcp_receive+0x884>)
 8019da2:	6013      	str	r3, [r2, #0]
 8019da4:	4b91      	ldr	r3, [pc, #580]	; (8019fec <tcp_receive+0x888>)
 8019da6:	68db      	ldr	r3, [r3, #12]
 8019da8:	4a8f      	ldr	r2, [pc, #572]	; (8019fe8 <tcp_receive+0x884>)
 8019daa:	6812      	ldr	r2, [r2, #0]
 8019dac:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019dae:	e00d      	b.n	8019dcc <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8019db0:	4b8d      	ldr	r3, [pc, #564]	; (8019fe8 <tcp_receive+0x884>)
 8019db2:	681a      	ldr	r2, [r3, #0]
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019db8:	1ad3      	subs	r3, r2, r3
 8019dba:	2b00      	cmp	r3, #0
 8019dbc:	da06      	bge.n	8019dcc <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8019dbe:	687b      	ldr	r3, [r7, #4]
 8019dc0:	8b5b      	ldrh	r3, [r3, #26]
 8019dc2:	f043 0302 	orr.w	r3, r3, #2
 8019dc6:	b29a      	uxth	r2, r3
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019dcc:	4b86      	ldr	r3, [pc, #536]	; (8019fe8 <tcp_receive+0x884>)
 8019dce:	681a      	ldr	r2, [r3, #0]
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019dd4:	1ad3      	subs	r3, r2, r3
 8019dd6:	2b00      	cmp	r3, #0
 8019dd8:	f2c0 842a 	blt.w	801a630 <tcp_receive+0xecc>
 8019ddc:	4b82      	ldr	r3, [pc, #520]	; (8019fe8 <tcp_receive+0x884>)
 8019dde:	681a      	ldr	r2, [r3, #0]
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019de4:	6879      	ldr	r1, [r7, #4]
 8019de6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019de8:	440b      	add	r3, r1
 8019dea:	1ad3      	subs	r3, r2, r3
 8019dec:	3301      	adds	r3, #1
 8019dee:	2b00      	cmp	r3, #0
 8019df0:	f300 841e 	bgt.w	801a630 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019df8:	4b7b      	ldr	r3, [pc, #492]	; (8019fe8 <tcp_receive+0x884>)
 8019dfa:	681b      	ldr	r3, [r3, #0]
 8019dfc:	429a      	cmp	r2, r3
 8019dfe:	f040 829a 	bne.w	801a336 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8019e02:	4b7a      	ldr	r3, [pc, #488]	; (8019fec <tcp_receive+0x888>)
 8019e04:	891c      	ldrh	r4, [r3, #8]
 8019e06:	4b79      	ldr	r3, [pc, #484]	; (8019fec <tcp_receive+0x888>)
 8019e08:	68db      	ldr	r3, [r3, #12]
 8019e0a:	899b      	ldrh	r3, [r3, #12]
 8019e0c:	b29b      	uxth	r3, r3
 8019e0e:	4618      	mov	r0, r3
 8019e10:	f7f9 f95e 	bl	80130d0 <lwip_htons>
 8019e14:	4603      	mov	r3, r0
 8019e16:	b2db      	uxtb	r3, r3
 8019e18:	f003 0303 	and.w	r3, r3, #3
 8019e1c:	2b00      	cmp	r3, #0
 8019e1e:	d001      	beq.n	8019e24 <tcp_receive+0x6c0>
 8019e20:	2301      	movs	r3, #1
 8019e22:	e000      	b.n	8019e26 <tcp_receive+0x6c2>
 8019e24:	2300      	movs	r3, #0
 8019e26:	4423      	add	r3, r4
 8019e28:	b29a      	uxth	r2, r3
 8019e2a:	4b71      	ldr	r3, [pc, #452]	; (8019ff0 <tcp_receive+0x88c>)
 8019e2c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019e32:	4b6f      	ldr	r3, [pc, #444]	; (8019ff0 <tcp_receive+0x88c>)
 8019e34:	881b      	ldrh	r3, [r3, #0]
 8019e36:	429a      	cmp	r2, r3
 8019e38:	d275      	bcs.n	8019f26 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019e3a:	4b6c      	ldr	r3, [pc, #432]	; (8019fec <tcp_receive+0x888>)
 8019e3c:	68db      	ldr	r3, [r3, #12]
 8019e3e:	899b      	ldrh	r3, [r3, #12]
 8019e40:	b29b      	uxth	r3, r3
 8019e42:	4618      	mov	r0, r3
 8019e44:	f7f9 f944 	bl	80130d0 <lwip_htons>
 8019e48:	4603      	mov	r3, r0
 8019e4a:	b2db      	uxtb	r3, r3
 8019e4c:	f003 0301 	and.w	r3, r3, #1
 8019e50:	2b00      	cmp	r3, #0
 8019e52:	d01f      	beq.n	8019e94 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8019e54:	4b65      	ldr	r3, [pc, #404]	; (8019fec <tcp_receive+0x888>)
 8019e56:	68db      	ldr	r3, [r3, #12]
 8019e58:	899b      	ldrh	r3, [r3, #12]
 8019e5a:	b29b      	uxth	r3, r3
 8019e5c:	b21b      	sxth	r3, r3
 8019e5e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8019e62:	b21c      	sxth	r4, r3
 8019e64:	4b61      	ldr	r3, [pc, #388]	; (8019fec <tcp_receive+0x888>)
 8019e66:	68db      	ldr	r3, [r3, #12]
 8019e68:	899b      	ldrh	r3, [r3, #12]
 8019e6a:	b29b      	uxth	r3, r3
 8019e6c:	4618      	mov	r0, r3
 8019e6e:	f7f9 f92f 	bl	80130d0 <lwip_htons>
 8019e72:	4603      	mov	r3, r0
 8019e74:	b2db      	uxtb	r3, r3
 8019e76:	b29b      	uxth	r3, r3
 8019e78:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8019e7c:	b29b      	uxth	r3, r3
 8019e7e:	4618      	mov	r0, r3
 8019e80:	f7f9 f926 	bl	80130d0 <lwip_htons>
 8019e84:	4603      	mov	r3, r0
 8019e86:	b21b      	sxth	r3, r3
 8019e88:	4323      	orrs	r3, r4
 8019e8a:	b21a      	sxth	r2, r3
 8019e8c:	4b57      	ldr	r3, [pc, #348]	; (8019fec <tcp_receive+0x888>)
 8019e8e:	68db      	ldr	r3, [r3, #12]
 8019e90:	b292      	uxth	r2, r2
 8019e92:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8019e94:	687b      	ldr	r3, [r7, #4]
 8019e96:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019e98:	4b54      	ldr	r3, [pc, #336]	; (8019fec <tcp_receive+0x888>)
 8019e9a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019e9c:	4b53      	ldr	r3, [pc, #332]	; (8019fec <tcp_receive+0x888>)
 8019e9e:	68db      	ldr	r3, [r3, #12]
 8019ea0:	899b      	ldrh	r3, [r3, #12]
 8019ea2:	b29b      	uxth	r3, r3
 8019ea4:	4618      	mov	r0, r3
 8019ea6:	f7f9 f913 	bl	80130d0 <lwip_htons>
 8019eaa:	4603      	mov	r3, r0
 8019eac:	b2db      	uxtb	r3, r3
 8019eae:	f003 0302 	and.w	r3, r3, #2
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	d005      	beq.n	8019ec2 <tcp_receive+0x75e>
            inseg.len -= 1;
 8019eb6:	4b4d      	ldr	r3, [pc, #308]	; (8019fec <tcp_receive+0x888>)
 8019eb8:	891b      	ldrh	r3, [r3, #8]
 8019eba:	3b01      	subs	r3, #1
 8019ebc:	b29a      	uxth	r2, r3
 8019ebe:	4b4b      	ldr	r3, [pc, #300]	; (8019fec <tcp_receive+0x888>)
 8019ec0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8019ec2:	4b4a      	ldr	r3, [pc, #296]	; (8019fec <tcp_receive+0x888>)
 8019ec4:	685b      	ldr	r3, [r3, #4]
 8019ec6:	4a49      	ldr	r2, [pc, #292]	; (8019fec <tcp_receive+0x888>)
 8019ec8:	8912      	ldrh	r2, [r2, #8]
 8019eca:	4611      	mov	r1, r2
 8019ecc:	4618      	mov	r0, r3
 8019ece:	f7fb fc19 	bl	8015704 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8019ed2:	4b46      	ldr	r3, [pc, #280]	; (8019fec <tcp_receive+0x888>)
 8019ed4:	891c      	ldrh	r4, [r3, #8]
 8019ed6:	4b45      	ldr	r3, [pc, #276]	; (8019fec <tcp_receive+0x888>)
 8019ed8:	68db      	ldr	r3, [r3, #12]
 8019eda:	899b      	ldrh	r3, [r3, #12]
 8019edc:	b29b      	uxth	r3, r3
 8019ede:	4618      	mov	r0, r3
 8019ee0:	f7f9 f8f6 	bl	80130d0 <lwip_htons>
 8019ee4:	4603      	mov	r3, r0
 8019ee6:	b2db      	uxtb	r3, r3
 8019ee8:	f003 0303 	and.w	r3, r3, #3
 8019eec:	2b00      	cmp	r3, #0
 8019eee:	d001      	beq.n	8019ef4 <tcp_receive+0x790>
 8019ef0:	2301      	movs	r3, #1
 8019ef2:	e000      	b.n	8019ef6 <tcp_receive+0x792>
 8019ef4:	2300      	movs	r3, #0
 8019ef6:	4423      	add	r3, r4
 8019ef8:	b29a      	uxth	r2, r3
 8019efa:	4b3d      	ldr	r3, [pc, #244]	; (8019ff0 <tcp_receive+0x88c>)
 8019efc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019efe:	4b3c      	ldr	r3, [pc, #240]	; (8019ff0 <tcp_receive+0x88c>)
 8019f00:	881b      	ldrh	r3, [r3, #0]
 8019f02:	461a      	mov	r2, r3
 8019f04:	4b38      	ldr	r3, [pc, #224]	; (8019fe8 <tcp_receive+0x884>)
 8019f06:	681b      	ldr	r3, [r3, #0]
 8019f08:	441a      	add	r2, r3
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f0e:	6879      	ldr	r1, [r7, #4]
 8019f10:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019f12:	440b      	add	r3, r1
 8019f14:	429a      	cmp	r2, r3
 8019f16:	d006      	beq.n	8019f26 <tcp_receive+0x7c2>
 8019f18:	4b36      	ldr	r3, [pc, #216]	; (8019ff4 <tcp_receive+0x890>)
 8019f1a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8019f1e:	4936      	ldr	r1, [pc, #216]	; (8019ff8 <tcp_receive+0x894>)
 8019f20:	4836      	ldr	r0, [pc, #216]	; (8019ffc <tcp_receive+0x898>)
 8019f22:	f00c ffd7 	bl	8026ed4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	f000 80e7 	beq.w	801a0fe <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019f30:	4b2e      	ldr	r3, [pc, #184]	; (8019fec <tcp_receive+0x888>)
 8019f32:	68db      	ldr	r3, [r3, #12]
 8019f34:	899b      	ldrh	r3, [r3, #12]
 8019f36:	b29b      	uxth	r3, r3
 8019f38:	4618      	mov	r0, r3
 8019f3a:	f7f9 f8c9 	bl	80130d0 <lwip_htons>
 8019f3e:	4603      	mov	r3, r0
 8019f40:	b2db      	uxtb	r3, r3
 8019f42:	f003 0301 	and.w	r3, r3, #1
 8019f46:	2b00      	cmp	r3, #0
 8019f48:	d010      	beq.n	8019f6c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8019f4a:	e00a      	b.n	8019f62 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8019f4c:	687b      	ldr	r3, [r7, #4]
 8019f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019f50:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019f56:	681a      	ldr	r2, [r3, #0]
 8019f58:	687b      	ldr	r3, [r7, #4]
 8019f5a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8019f5c:	68f8      	ldr	r0, [r7, #12]
 8019f5e:	f7fd fcc8 	bl	80178f2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8019f62:	687b      	ldr	r3, [r7, #4]
 8019f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019f66:	2b00      	cmp	r3, #0
 8019f68:	d1f0      	bne.n	8019f4c <tcp_receive+0x7e8>
 8019f6a:	e0c8      	b.n	801a0fe <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019f70:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8019f72:	e052      	b.n	801a01a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019f76:	68db      	ldr	r3, [r3, #12]
 8019f78:	899b      	ldrh	r3, [r3, #12]
 8019f7a:	b29b      	uxth	r3, r3
 8019f7c:	4618      	mov	r0, r3
 8019f7e:	f7f9 f8a7 	bl	80130d0 <lwip_htons>
 8019f82:	4603      	mov	r3, r0
 8019f84:	b2db      	uxtb	r3, r3
 8019f86:	f003 0301 	and.w	r3, r3, #1
 8019f8a:	2b00      	cmp	r3, #0
 8019f8c:	d03d      	beq.n	801a00a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8019f8e:	4b17      	ldr	r3, [pc, #92]	; (8019fec <tcp_receive+0x888>)
 8019f90:	68db      	ldr	r3, [r3, #12]
 8019f92:	899b      	ldrh	r3, [r3, #12]
 8019f94:	b29b      	uxth	r3, r3
 8019f96:	4618      	mov	r0, r3
 8019f98:	f7f9 f89a 	bl	80130d0 <lwip_htons>
 8019f9c:	4603      	mov	r3, r0
 8019f9e:	b2db      	uxtb	r3, r3
 8019fa0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019fa4:	2b00      	cmp	r3, #0
 8019fa6:	d130      	bne.n	801a00a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8019fa8:	4b10      	ldr	r3, [pc, #64]	; (8019fec <tcp_receive+0x888>)
 8019faa:	68db      	ldr	r3, [r3, #12]
 8019fac:	899b      	ldrh	r3, [r3, #12]
 8019fae:	b29c      	uxth	r4, r3
 8019fb0:	2001      	movs	r0, #1
 8019fb2:	f7f9 f88d 	bl	80130d0 <lwip_htons>
 8019fb6:	4603      	mov	r3, r0
 8019fb8:	461a      	mov	r2, r3
 8019fba:	4b0c      	ldr	r3, [pc, #48]	; (8019fec <tcp_receive+0x888>)
 8019fbc:	68db      	ldr	r3, [r3, #12]
 8019fbe:	4322      	orrs	r2, r4
 8019fc0:	b292      	uxth	r2, r2
 8019fc2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8019fc4:	4b09      	ldr	r3, [pc, #36]	; (8019fec <tcp_receive+0x888>)
 8019fc6:	891c      	ldrh	r4, [r3, #8]
 8019fc8:	4b08      	ldr	r3, [pc, #32]	; (8019fec <tcp_receive+0x888>)
 8019fca:	68db      	ldr	r3, [r3, #12]
 8019fcc:	899b      	ldrh	r3, [r3, #12]
 8019fce:	b29b      	uxth	r3, r3
 8019fd0:	4618      	mov	r0, r3
 8019fd2:	f7f9 f87d 	bl	80130d0 <lwip_htons>
 8019fd6:	4603      	mov	r3, r0
 8019fd8:	b2db      	uxtb	r3, r3
 8019fda:	f003 0303 	and.w	r3, r3, #3
 8019fde:	2b00      	cmp	r3, #0
 8019fe0:	d00e      	beq.n	801a000 <tcp_receive+0x89c>
 8019fe2:	2301      	movs	r3, #1
 8019fe4:	e00d      	b.n	801a002 <tcp_receive+0x89e>
 8019fe6:	bf00      	nop
 8019fe8:	24004fac 	.word	0x24004fac
 8019fec:	24004f8c 	.word	0x24004f8c
 8019ff0:	24004fb6 	.word	0x24004fb6
 8019ff4:	0802c780 	.word	0x0802c780
 8019ff8:	0802cb28 	.word	0x0802cb28
 8019ffc:	0802c7cc 	.word	0x0802c7cc
 801a000:	2300      	movs	r3, #0
 801a002:	4423      	add	r3, r4
 801a004:	b29a      	uxth	r2, r3
 801a006:	4b98      	ldr	r3, [pc, #608]	; (801a268 <tcp_receive+0xb04>)
 801a008:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801a00a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a00c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801a00e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a010:	681b      	ldr	r3, [r3, #0]
 801a012:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801a014:	6938      	ldr	r0, [r7, #16]
 801a016:	f7fd fc6c 	bl	80178f2 <tcp_seg_free>
            while (next &&
 801a01a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a01c:	2b00      	cmp	r3, #0
 801a01e:	d00e      	beq.n	801a03e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801a020:	4b91      	ldr	r3, [pc, #580]	; (801a268 <tcp_receive+0xb04>)
 801a022:	881b      	ldrh	r3, [r3, #0]
 801a024:	461a      	mov	r2, r3
 801a026:	4b91      	ldr	r3, [pc, #580]	; (801a26c <tcp_receive+0xb08>)
 801a028:	681b      	ldr	r3, [r3, #0]
 801a02a:	441a      	add	r2, r3
 801a02c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a02e:	68db      	ldr	r3, [r3, #12]
 801a030:	685b      	ldr	r3, [r3, #4]
 801a032:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801a034:	8909      	ldrh	r1, [r1, #8]
 801a036:	440b      	add	r3, r1
 801a038:	1ad3      	subs	r3, r2, r3
            while (next &&
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	da9a      	bge.n	8019f74 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801a03e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a040:	2b00      	cmp	r3, #0
 801a042:	d059      	beq.n	801a0f8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801a044:	4b88      	ldr	r3, [pc, #544]	; (801a268 <tcp_receive+0xb04>)
 801a046:	881b      	ldrh	r3, [r3, #0]
 801a048:	461a      	mov	r2, r3
 801a04a:	4b88      	ldr	r3, [pc, #544]	; (801a26c <tcp_receive+0xb08>)
 801a04c:	681b      	ldr	r3, [r3, #0]
 801a04e:	441a      	add	r2, r3
 801a050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a052:	68db      	ldr	r3, [r3, #12]
 801a054:	685b      	ldr	r3, [r3, #4]
 801a056:	1ad3      	subs	r3, r2, r3
            if (next &&
 801a058:	2b00      	cmp	r3, #0
 801a05a:	dd4d      	ble.n	801a0f8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801a05c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a05e:	68db      	ldr	r3, [r3, #12]
 801a060:	685b      	ldr	r3, [r3, #4]
 801a062:	b29a      	uxth	r2, r3
 801a064:	4b81      	ldr	r3, [pc, #516]	; (801a26c <tcp_receive+0xb08>)
 801a066:	681b      	ldr	r3, [r3, #0]
 801a068:	b29b      	uxth	r3, r3
 801a06a:	1ad3      	subs	r3, r2, r3
 801a06c:	b29a      	uxth	r2, r3
 801a06e:	4b80      	ldr	r3, [pc, #512]	; (801a270 <tcp_receive+0xb0c>)
 801a070:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801a072:	4b7f      	ldr	r3, [pc, #508]	; (801a270 <tcp_receive+0xb0c>)
 801a074:	68db      	ldr	r3, [r3, #12]
 801a076:	899b      	ldrh	r3, [r3, #12]
 801a078:	b29b      	uxth	r3, r3
 801a07a:	4618      	mov	r0, r3
 801a07c:	f7f9 f828 	bl	80130d0 <lwip_htons>
 801a080:	4603      	mov	r3, r0
 801a082:	b2db      	uxtb	r3, r3
 801a084:	f003 0302 	and.w	r3, r3, #2
 801a088:	2b00      	cmp	r3, #0
 801a08a:	d005      	beq.n	801a098 <tcp_receive+0x934>
                inseg.len -= 1;
 801a08c:	4b78      	ldr	r3, [pc, #480]	; (801a270 <tcp_receive+0xb0c>)
 801a08e:	891b      	ldrh	r3, [r3, #8]
 801a090:	3b01      	subs	r3, #1
 801a092:	b29a      	uxth	r2, r3
 801a094:	4b76      	ldr	r3, [pc, #472]	; (801a270 <tcp_receive+0xb0c>)
 801a096:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801a098:	4b75      	ldr	r3, [pc, #468]	; (801a270 <tcp_receive+0xb0c>)
 801a09a:	685b      	ldr	r3, [r3, #4]
 801a09c:	4a74      	ldr	r2, [pc, #464]	; (801a270 <tcp_receive+0xb0c>)
 801a09e:	8912      	ldrh	r2, [r2, #8]
 801a0a0:	4611      	mov	r1, r2
 801a0a2:	4618      	mov	r0, r3
 801a0a4:	f7fb fb2e 	bl	8015704 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801a0a8:	4b71      	ldr	r3, [pc, #452]	; (801a270 <tcp_receive+0xb0c>)
 801a0aa:	891c      	ldrh	r4, [r3, #8]
 801a0ac:	4b70      	ldr	r3, [pc, #448]	; (801a270 <tcp_receive+0xb0c>)
 801a0ae:	68db      	ldr	r3, [r3, #12]
 801a0b0:	899b      	ldrh	r3, [r3, #12]
 801a0b2:	b29b      	uxth	r3, r3
 801a0b4:	4618      	mov	r0, r3
 801a0b6:	f7f9 f80b 	bl	80130d0 <lwip_htons>
 801a0ba:	4603      	mov	r3, r0
 801a0bc:	b2db      	uxtb	r3, r3
 801a0be:	f003 0303 	and.w	r3, r3, #3
 801a0c2:	2b00      	cmp	r3, #0
 801a0c4:	d001      	beq.n	801a0ca <tcp_receive+0x966>
 801a0c6:	2301      	movs	r3, #1
 801a0c8:	e000      	b.n	801a0cc <tcp_receive+0x968>
 801a0ca:	2300      	movs	r3, #0
 801a0cc:	4423      	add	r3, r4
 801a0ce:	b29a      	uxth	r2, r3
 801a0d0:	4b65      	ldr	r3, [pc, #404]	; (801a268 <tcp_receive+0xb04>)
 801a0d2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801a0d4:	4b64      	ldr	r3, [pc, #400]	; (801a268 <tcp_receive+0xb04>)
 801a0d6:	881b      	ldrh	r3, [r3, #0]
 801a0d8:	461a      	mov	r2, r3
 801a0da:	4b64      	ldr	r3, [pc, #400]	; (801a26c <tcp_receive+0xb08>)
 801a0dc:	681b      	ldr	r3, [r3, #0]
 801a0de:	441a      	add	r2, r3
 801a0e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a0e2:	68db      	ldr	r3, [r3, #12]
 801a0e4:	685b      	ldr	r3, [r3, #4]
 801a0e6:	429a      	cmp	r2, r3
 801a0e8:	d006      	beq.n	801a0f8 <tcp_receive+0x994>
 801a0ea:	4b62      	ldr	r3, [pc, #392]	; (801a274 <tcp_receive+0xb10>)
 801a0ec:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801a0f0:	4961      	ldr	r1, [pc, #388]	; (801a278 <tcp_receive+0xb14>)
 801a0f2:	4862      	ldr	r0, [pc, #392]	; (801a27c <tcp_receive+0xb18>)
 801a0f4:	f00c feee 	bl	8026ed4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a0fc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801a0fe:	4b5a      	ldr	r3, [pc, #360]	; (801a268 <tcp_receive+0xb04>)
 801a100:	881b      	ldrh	r3, [r3, #0]
 801a102:	461a      	mov	r2, r3
 801a104:	4b59      	ldr	r3, [pc, #356]	; (801a26c <tcp_receive+0xb08>)
 801a106:	681b      	ldr	r3, [r3, #0]
 801a108:	441a      	add	r2, r3
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a112:	4b55      	ldr	r3, [pc, #340]	; (801a268 <tcp_receive+0xb04>)
 801a114:	881b      	ldrh	r3, [r3, #0]
 801a116:	429a      	cmp	r2, r3
 801a118:	d206      	bcs.n	801a128 <tcp_receive+0x9c4>
 801a11a:	4b56      	ldr	r3, [pc, #344]	; (801a274 <tcp_receive+0xb10>)
 801a11c:	f240 6207 	movw	r2, #1543	; 0x607
 801a120:	4957      	ldr	r1, [pc, #348]	; (801a280 <tcp_receive+0xb1c>)
 801a122:	4856      	ldr	r0, [pc, #344]	; (801a27c <tcp_receive+0xb18>)
 801a124:	f00c fed6 	bl	8026ed4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a12c:	4b4e      	ldr	r3, [pc, #312]	; (801a268 <tcp_receive+0xb04>)
 801a12e:	881b      	ldrh	r3, [r3, #0]
 801a130:	1ad3      	subs	r3, r2, r3
 801a132:	b29a      	uxth	r2, r3
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801a138:	6878      	ldr	r0, [r7, #4]
 801a13a:	f7fc fd9d 	bl	8016c78 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801a13e:	4b4c      	ldr	r3, [pc, #304]	; (801a270 <tcp_receive+0xb0c>)
 801a140:	685b      	ldr	r3, [r3, #4]
 801a142:	891b      	ldrh	r3, [r3, #8]
 801a144:	2b00      	cmp	r3, #0
 801a146:	d006      	beq.n	801a156 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801a148:	4b49      	ldr	r3, [pc, #292]	; (801a270 <tcp_receive+0xb0c>)
 801a14a:	685b      	ldr	r3, [r3, #4]
 801a14c:	4a4d      	ldr	r2, [pc, #308]	; (801a284 <tcp_receive+0xb20>)
 801a14e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801a150:	4b47      	ldr	r3, [pc, #284]	; (801a270 <tcp_receive+0xb0c>)
 801a152:	2200      	movs	r2, #0
 801a154:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801a156:	4b46      	ldr	r3, [pc, #280]	; (801a270 <tcp_receive+0xb0c>)
 801a158:	68db      	ldr	r3, [r3, #12]
 801a15a:	899b      	ldrh	r3, [r3, #12]
 801a15c:	b29b      	uxth	r3, r3
 801a15e:	4618      	mov	r0, r3
 801a160:	f7f8 ffb6 	bl	80130d0 <lwip_htons>
 801a164:	4603      	mov	r3, r0
 801a166:	b2db      	uxtb	r3, r3
 801a168:	f003 0301 	and.w	r3, r3, #1
 801a16c:	2b00      	cmp	r3, #0
 801a16e:	f000 80b8 	beq.w	801a2e2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801a172:	4b45      	ldr	r3, [pc, #276]	; (801a288 <tcp_receive+0xb24>)
 801a174:	781b      	ldrb	r3, [r3, #0]
 801a176:	f043 0320 	orr.w	r3, r3, #32
 801a17a:	b2da      	uxtb	r2, r3
 801a17c:	4b42      	ldr	r3, [pc, #264]	; (801a288 <tcp_receive+0xb24>)
 801a17e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801a180:	e0af      	b.n	801a2e2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a186:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801a188:	687b      	ldr	r3, [r7, #4]
 801a18a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a18c:	68db      	ldr	r3, [r3, #12]
 801a18e:	685b      	ldr	r3, [r3, #4]
 801a190:	4a36      	ldr	r2, [pc, #216]	; (801a26c <tcp_receive+0xb08>)
 801a192:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801a194:	68bb      	ldr	r3, [r7, #8]
 801a196:	891b      	ldrh	r3, [r3, #8]
 801a198:	461c      	mov	r4, r3
 801a19a:	68bb      	ldr	r3, [r7, #8]
 801a19c:	68db      	ldr	r3, [r3, #12]
 801a19e:	899b      	ldrh	r3, [r3, #12]
 801a1a0:	b29b      	uxth	r3, r3
 801a1a2:	4618      	mov	r0, r3
 801a1a4:	f7f8 ff94 	bl	80130d0 <lwip_htons>
 801a1a8:	4603      	mov	r3, r0
 801a1aa:	b2db      	uxtb	r3, r3
 801a1ac:	f003 0303 	and.w	r3, r3, #3
 801a1b0:	2b00      	cmp	r3, #0
 801a1b2:	d001      	beq.n	801a1b8 <tcp_receive+0xa54>
 801a1b4:	2301      	movs	r3, #1
 801a1b6:	e000      	b.n	801a1ba <tcp_receive+0xa56>
 801a1b8:	2300      	movs	r3, #0
 801a1ba:	191a      	adds	r2, r3, r4
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1c0:	441a      	add	r2, r3
 801a1c2:	687b      	ldr	r3, [r7, #4]
 801a1c4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801a1c6:	687b      	ldr	r3, [r7, #4]
 801a1c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a1ca:	461c      	mov	r4, r3
 801a1cc:	68bb      	ldr	r3, [r7, #8]
 801a1ce:	891b      	ldrh	r3, [r3, #8]
 801a1d0:	461d      	mov	r5, r3
 801a1d2:	68bb      	ldr	r3, [r7, #8]
 801a1d4:	68db      	ldr	r3, [r3, #12]
 801a1d6:	899b      	ldrh	r3, [r3, #12]
 801a1d8:	b29b      	uxth	r3, r3
 801a1da:	4618      	mov	r0, r3
 801a1dc:	f7f8 ff78 	bl	80130d0 <lwip_htons>
 801a1e0:	4603      	mov	r3, r0
 801a1e2:	b2db      	uxtb	r3, r3
 801a1e4:	f003 0303 	and.w	r3, r3, #3
 801a1e8:	2b00      	cmp	r3, #0
 801a1ea:	d001      	beq.n	801a1f0 <tcp_receive+0xa8c>
 801a1ec:	2301      	movs	r3, #1
 801a1ee:	e000      	b.n	801a1f2 <tcp_receive+0xa8e>
 801a1f0:	2300      	movs	r3, #0
 801a1f2:	442b      	add	r3, r5
 801a1f4:	429c      	cmp	r4, r3
 801a1f6:	d206      	bcs.n	801a206 <tcp_receive+0xaa2>
 801a1f8:	4b1e      	ldr	r3, [pc, #120]	; (801a274 <tcp_receive+0xb10>)
 801a1fa:	f240 622b 	movw	r2, #1579	; 0x62b
 801a1fe:	4923      	ldr	r1, [pc, #140]	; (801a28c <tcp_receive+0xb28>)
 801a200:	481e      	ldr	r0, [pc, #120]	; (801a27c <tcp_receive+0xb18>)
 801a202:	f00c fe67 	bl	8026ed4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801a206:	68bb      	ldr	r3, [r7, #8]
 801a208:	891b      	ldrh	r3, [r3, #8]
 801a20a:	461c      	mov	r4, r3
 801a20c:	68bb      	ldr	r3, [r7, #8]
 801a20e:	68db      	ldr	r3, [r3, #12]
 801a210:	899b      	ldrh	r3, [r3, #12]
 801a212:	b29b      	uxth	r3, r3
 801a214:	4618      	mov	r0, r3
 801a216:	f7f8 ff5b 	bl	80130d0 <lwip_htons>
 801a21a:	4603      	mov	r3, r0
 801a21c:	b2db      	uxtb	r3, r3
 801a21e:	f003 0303 	and.w	r3, r3, #3
 801a222:	2b00      	cmp	r3, #0
 801a224:	d001      	beq.n	801a22a <tcp_receive+0xac6>
 801a226:	2301      	movs	r3, #1
 801a228:	e000      	b.n	801a22c <tcp_receive+0xac8>
 801a22a:	2300      	movs	r3, #0
 801a22c:	1919      	adds	r1, r3, r4
 801a22e:	687b      	ldr	r3, [r7, #4]
 801a230:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a232:	b28b      	uxth	r3, r1
 801a234:	1ad3      	subs	r3, r2, r3
 801a236:	b29a      	uxth	r2, r3
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801a23c:	6878      	ldr	r0, [r7, #4]
 801a23e:	f7fc fd1b 	bl	8016c78 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801a242:	68bb      	ldr	r3, [r7, #8]
 801a244:	685b      	ldr	r3, [r3, #4]
 801a246:	891b      	ldrh	r3, [r3, #8]
 801a248:	2b00      	cmp	r3, #0
 801a24a:	d028      	beq.n	801a29e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801a24c:	4b0d      	ldr	r3, [pc, #52]	; (801a284 <tcp_receive+0xb20>)
 801a24e:	681b      	ldr	r3, [r3, #0]
 801a250:	2b00      	cmp	r3, #0
 801a252:	d01d      	beq.n	801a290 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801a254:	4b0b      	ldr	r3, [pc, #44]	; (801a284 <tcp_receive+0xb20>)
 801a256:	681a      	ldr	r2, [r3, #0]
 801a258:	68bb      	ldr	r3, [r7, #8]
 801a25a:	685b      	ldr	r3, [r3, #4]
 801a25c:	4619      	mov	r1, r3
 801a25e:	4610      	mov	r0, r2
 801a260:	f7fb fcd6 	bl	8015c10 <pbuf_cat>
 801a264:	e018      	b.n	801a298 <tcp_receive+0xb34>
 801a266:	bf00      	nop
 801a268:	24004fb6 	.word	0x24004fb6
 801a26c:	24004fac 	.word	0x24004fac
 801a270:	24004f8c 	.word	0x24004f8c
 801a274:	0802c780 	.word	0x0802c780
 801a278:	0802cb60 	.word	0x0802cb60
 801a27c:	0802c7cc 	.word	0x0802c7cc
 801a280:	0802cb9c 	.word	0x0802cb9c
 801a284:	24004fbc 	.word	0x24004fbc
 801a288:	24004fb9 	.word	0x24004fb9
 801a28c:	0802cbbc 	.word	0x0802cbbc
            } else {
              recv_data = cseg->p;
 801a290:	68bb      	ldr	r3, [r7, #8]
 801a292:	685b      	ldr	r3, [r3, #4]
 801a294:	4a70      	ldr	r2, [pc, #448]	; (801a458 <tcp_receive+0xcf4>)
 801a296:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801a298:	68bb      	ldr	r3, [r7, #8]
 801a29a:	2200      	movs	r2, #0
 801a29c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801a29e:	68bb      	ldr	r3, [r7, #8]
 801a2a0:	68db      	ldr	r3, [r3, #12]
 801a2a2:	899b      	ldrh	r3, [r3, #12]
 801a2a4:	b29b      	uxth	r3, r3
 801a2a6:	4618      	mov	r0, r3
 801a2a8:	f7f8 ff12 	bl	80130d0 <lwip_htons>
 801a2ac:	4603      	mov	r3, r0
 801a2ae:	b2db      	uxtb	r3, r3
 801a2b0:	f003 0301 	and.w	r3, r3, #1
 801a2b4:	2b00      	cmp	r3, #0
 801a2b6:	d00d      	beq.n	801a2d4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801a2b8:	4b68      	ldr	r3, [pc, #416]	; (801a45c <tcp_receive+0xcf8>)
 801a2ba:	781b      	ldrb	r3, [r3, #0]
 801a2bc:	f043 0320 	orr.w	r3, r3, #32
 801a2c0:	b2da      	uxtb	r2, r3
 801a2c2:	4b66      	ldr	r3, [pc, #408]	; (801a45c <tcp_receive+0xcf8>)
 801a2c4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801a2c6:	687b      	ldr	r3, [r7, #4]
 801a2c8:	7d1b      	ldrb	r3, [r3, #20]
 801a2ca:	2b04      	cmp	r3, #4
 801a2cc:	d102      	bne.n	801a2d4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801a2ce:	687b      	ldr	r3, [r7, #4]
 801a2d0:	2207      	movs	r2, #7
 801a2d2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801a2d4:	68bb      	ldr	r3, [r7, #8]
 801a2d6:	681a      	ldr	r2, [r3, #0]
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801a2dc:	68b8      	ldr	r0, [r7, #8]
 801a2de:	f7fd fb08 	bl	80178f2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a2e6:	2b00      	cmp	r3, #0
 801a2e8:	d008      	beq.n	801a2fc <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801a2ea:	687b      	ldr	r3, [r7, #4]
 801a2ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a2ee:	68db      	ldr	r3, [r3, #12]
 801a2f0:	685a      	ldr	r2, [r3, #4]
 801a2f2:	687b      	ldr	r3, [r7, #4]
 801a2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801a2f6:	429a      	cmp	r2, r3
 801a2f8:	f43f af43 	beq.w	801a182 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801a2fc:	687b      	ldr	r3, [r7, #4]
 801a2fe:	8b5b      	ldrh	r3, [r3, #26]
 801a300:	f003 0301 	and.w	r3, r3, #1
 801a304:	2b00      	cmp	r3, #0
 801a306:	d00e      	beq.n	801a326 <tcp_receive+0xbc2>
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	8b5b      	ldrh	r3, [r3, #26]
 801a30c:	f023 0301 	bic.w	r3, r3, #1
 801a310:	b29a      	uxth	r2, r3
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	835a      	strh	r2, [r3, #26]
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	8b5b      	ldrh	r3, [r3, #26]
 801a31a:	f043 0302 	orr.w	r3, r3, #2
 801a31e:	b29a      	uxth	r2, r3
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801a324:	e188      	b.n	801a638 <tcp_receive+0xed4>
        tcp_ack(pcb);
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	8b5b      	ldrh	r3, [r3, #26]
 801a32a:	f043 0301 	orr.w	r3, r3, #1
 801a32e:	b29a      	uxth	r2, r3
 801a330:	687b      	ldr	r3, [r7, #4]
 801a332:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801a334:	e180      	b.n	801a638 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a33a:	2b00      	cmp	r3, #0
 801a33c:	d106      	bne.n	801a34c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801a33e:	4848      	ldr	r0, [pc, #288]	; (801a460 <tcp_receive+0xcfc>)
 801a340:	f7fd faf0 	bl	8017924 <tcp_seg_copy>
 801a344:	4602      	mov	r2, r0
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	675a      	str	r2, [r3, #116]	; 0x74
 801a34a:	e16d      	b.n	801a628 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801a34c:	2300      	movs	r3, #0
 801a34e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801a350:	687b      	ldr	r3, [r7, #4]
 801a352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a354:	63bb      	str	r3, [r7, #56]	; 0x38
 801a356:	e157      	b.n	801a608 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801a358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a35a:	68db      	ldr	r3, [r3, #12]
 801a35c:	685a      	ldr	r2, [r3, #4]
 801a35e:	4b41      	ldr	r3, [pc, #260]	; (801a464 <tcp_receive+0xd00>)
 801a360:	681b      	ldr	r3, [r3, #0]
 801a362:	429a      	cmp	r2, r3
 801a364:	d11d      	bne.n	801a3a2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801a366:	4b3e      	ldr	r3, [pc, #248]	; (801a460 <tcp_receive+0xcfc>)
 801a368:	891a      	ldrh	r2, [r3, #8]
 801a36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a36c:	891b      	ldrh	r3, [r3, #8]
 801a36e:	429a      	cmp	r2, r3
 801a370:	f240 814f 	bls.w	801a612 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a374:	483a      	ldr	r0, [pc, #232]	; (801a460 <tcp_receive+0xcfc>)
 801a376:	f7fd fad5 	bl	8017924 <tcp_seg_copy>
 801a37a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801a37c:	697b      	ldr	r3, [r7, #20]
 801a37e:	2b00      	cmp	r3, #0
 801a380:	f000 8149 	beq.w	801a616 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801a384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a386:	2b00      	cmp	r3, #0
 801a388:	d003      	beq.n	801a392 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801a38a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a38c:	697a      	ldr	r2, [r7, #20]
 801a38e:	601a      	str	r2, [r3, #0]
 801a390:	e002      	b.n	801a398 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	697a      	ldr	r2, [r7, #20]
 801a396:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801a398:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a39a:	6978      	ldr	r0, [r7, #20]
 801a39c:	f7ff f8de 	bl	801955c <tcp_oos_insert_segment>
                }
                break;
 801a3a0:	e139      	b.n	801a616 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801a3a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	d117      	bne.n	801a3d8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801a3a8:	4b2e      	ldr	r3, [pc, #184]	; (801a464 <tcp_receive+0xd00>)
 801a3aa:	681a      	ldr	r2, [r3, #0]
 801a3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a3ae:	68db      	ldr	r3, [r3, #12]
 801a3b0:	685b      	ldr	r3, [r3, #4]
 801a3b2:	1ad3      	subs	r3, r2, r3
 801a3b4:	2b00      	cmp	r3, #0
 801a3b6:	da57      	bge.n	801a468 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a3b8:	4829      	ldr	r0, [pc, #164]	; (801a460 <tcp_receive+0xcfc>)
 801a3ba:	f7fd fab3 	bl	8017924 <tcp_seg_copy>
 801a3be:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801a3c0:	69bb      	ldr	r3, [r7, #24]
 801a3c2:	2b00      	cmp	r3, #0
 801a3c4:	f000 8129 	beq.w	801a61a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	69ba      	ldr	r2, [r7, #24]
 801a3cc:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801a3ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a3d0:	69b8      	ldr	r0, [r7, #24]
 801a3d2:	f7ff f8c3 	bl	801955c <tcp_oos_insert_segment>
                  }
                  break;
 801a3d6:	e120      	b.n	801a61a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801a3d8:	4b22      	ldr	r3, [pc, #136]	; (801a464 <tcp_receive+0xd00>)
 801a3da:	681a      	ldr	r2, [r3, #0]
 801a3dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3de:	68db      	ldr	r3, [r3, #12]
 801a3e0:	685b      	ldr	r3, [r3, #4]
 801a3e2:	1ad3      	subs	r3, r2, r3
 801a3e4:	3b01      	subs	r3, #1
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	db3e      	blt.n	801a468 <tcp_receive+0xd04>
 801a3ea:	4b1e      	ldr	r3, [pc, #120]	; (801a464 <tcp_receive+0xd00>)
 801a3ec:	681a      	ldr	r2, [r3, #0]
 801a3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a3f0:	68db      	ldr	r3, [r3, #12]
 801a3f2:	685b      	ldr	r3, [r3, #4]
 801a3f4:	1ad3      	subs	r3, r2, r3
 801a3f6:	3301      	adds	r3, #1
 801a3f8:	2b00      	cmp	r3, #0
 801a3fa:	dc35      	bgt.n	801a468 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a3fc:	4818      	ldr	r0, [pc, #96]	; (801a460 <tcp_receive+0xcfc>)
 801a3fe:	f7fd fa91 	bl	8017924 <tcp_seg_copy>
 801a402:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801a404:	69fb      	ldr	r3, [r7, #28]
 801a406:	2b00      	cmp	r3, #0
 801a408:	f000 8109 	beq.w	801a61e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801a40c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a40e:	68db      	ldr	r3, [r3, #12]
 801a410:	685b      	ldr	r3, [r3, #4]
 801a412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a414:	8912      	ldrh	r2, [r2, #8]
 801a416:	441a      	add	r2, r3
 801a418:	4b12      	ldr	r3, [pc, #72]	; (801a464 <tcp_receive+0xd00>)
 801a41a:	681b      	ldr	r3, [r3, #0]
 801a41c:	1ad3      	subs	r3, r2, r3
 801a41e:	2b00      	cmp	r3, #0
 801a420:	dd12      	ble.n	801a448 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801a422:	4b10      	ldr	r3, [pc, #64]	; (801a464 <tcp_receive+0xd00>)
 801a424:	681b      	ldr	r3, [r3, #0]
 801a426:	b29a      	uxth	r2, r3
 801a428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a42a:	68db      	ldr	r3, [r3, #12]
 801a42c:	685b      	ldr	r3, [r3, #4]
 801a42e:	b29b      	uxth	r3, r3
 801a430:	1ad3      	subs	r3, r2, r3
 801a432:	b29a      	uxth	r2, r3
 801a434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a436:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801a438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a43a:	685a      	ldr	r2, [r3, #4]
 801a43c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a43e:	891b      	ldrh	r3, [r3, #8]
 801a440:	4619      	mov	r1, r3
 801a442:	4610      	mov	r0, r2
 801a444:	f7fb f95e 	bl	8015704 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801a448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a44a:	69fa      	ldr	r2, [r7, #28]
 801a44c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801a44e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a450:	69f8      	ldr	r0, [r7, #28]
 801a452:	f7ff f883 	bl	801955c <tcp_oos_insert_segment>
                  }
                  break;
 801a456:	e0e2      	b.n	801a61e <tcp_receive+0xeba>
 801a458:	24004fbc 	.word	0x24004fbc
 801a45c:	24004fb9 	.word	0x24004fb9
 801a460:	24004f8c 	.word	0x24004f8c
 801a464:	24004fac 	.word	0x24004fac
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801a468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a46a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801a46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a46e:	681b      	ldr	r3, [r3, #0]
 801a470:	2b00      	cmp	r3, #0
 801a472:	f040 80c6 	bne.w	801a602 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801a476:	4b80      	ldr	r3, [pc, #512]	; (801a678 <tcp_receive+0xf14>)
 801a478:	681a      	ldr	r2, [r3, #0]
 801a47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a47c:	68db      	ldr	r3, [r3, #12]
 801a47e:	685b      	ldr	r3, [r3, #4]
 801a480:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801a482:	2b00      	cmp	r3, #0
 801a484:	f340 80bd 	ble.w	801a602 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801a488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a48a:	68db      	ldr	r3, [r3, #12]
 801a48c:	899b      	ldrh	r3, [r3, #12]
 801a48e:	b29b      	uxth	r3, r3
 801a490:	4618      	mov	r0, r3
 801a492:	f7f8 fe1d 	bl	80130d0 <lwip_htons>
 801a496:	4603      	mov	r3, r0
 801a498:	b2db      	uxtb	r3, r3
 801a49a:	f003 0301 	and.w	r3, r3, #1
 801a49e:	2b00      	cmp	r3, #0
 801a4a0:	f040 80bf 	bne.w	801a622 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801a4a4:	4875      	ldr	r0, [pc, #468]	; (801a67c <tcp_receive+0xf18>)
 801a4a6:	f7fd fa3d 	bl	8017924 <tcp_seg_copy>
 801a4aa:	4602      	mov	r2, r0
 801a4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4ae:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801a4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4b2:	681b      	ldr	r3, [r3, #0]
 801a4b4:	2b00      	cmp	r3, #0
 801a4b6:	f000 80b6 	beq.w	801a626 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801a4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4bc:	68db      	ldr	r3, [r3, #12]
 801a4be:	685b      	ldr	r3, [r3, #4]
 801a4c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a4c2:	8912      	ldrh	r2, [r2, #8]
 801a4c4:	441a      	add	r2, r3
 801a4c6:	4b6c      	ldr	r3, [pc, #432]	; (801a678 <tcp_receive+0xf14>)
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	1ad3      	subs	r3, r2, r3
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	dd12      	ble.n	801a4f6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801a4d0:	4b69      	ldr	r3, [pc, #420]	; (801a678 <tcp_receive+0xf14>)
 801a4d2:	681b      	ldr	r3, [r3, #0]
 801a4d4:	b29a      	uxth	r2, r3
 801a4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4d8:	68db      	ldr	r3, [r3, #12]
 801a4da:	685b      	ldr	r3, [r3, #4]
 801a4dc:	b29b      	uxth	r3, r3
 801a4de:	1ad3      	subs	r3, r2, r3
 801a4e0:	b29a      	uxth	r2, r3
 801a4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4e4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801a4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4e8:	685a      	ldr	r2, [r3, #4]
 801a4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4ec:	891b      	ldrh	r3, [r3, #8]
 801a4ee:	4619      	mov	r1, r3
 801a4f0:	4610      	mov	r0, r2
 801a4f2:	f7fb f907 	bl	8015704 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801a4f6:	4b62      	ldr	r3, [pc, #392]	; (801a680 <tcp_receive+0xf1c>)
 801a4f8:	881b      	ldrh	r3, [r3, #0]
 801a4fa:	461a      	mov	r2, r3
 801a4fc:	4b5e      	ldr	r3, [pc, #376]	; (801a678 <tcp_receive+0xf14>)
 801a4fe:	681b      	ldr	r3, [r3, #0]
 801a500:	441a      	add	r2, r3
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a506:	6879      	ldr	r1, [r7, #4]
 801a508:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a50a:	440b      	add	r3, r1
 801a50c:	1ad3      	subs	r3, r2, r3
 801a50e:	2b00      	cmp	r3, #0
 801a510:	f340 8089 	ble.w	801a626 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801a514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a516:	681b      	ldr	r3, [r3, #0]
 801a518:	68db      	ldr	r3, [r3, #12]
 801a51a:	899b      	ldrh	r3, [r3, #12]
 801a51c:	b29b      	uxth	r3, r3
 801a51e:	4618      	mov	r0, r3
 801a520:	f7f8 fdd6 	bl	80130d0 <lwip_htons>
 801a524:	4603      	mov	r3, r0
 801a526:	b2db      	uxtb	r3, r3
 801a528:	f003 0301 	and.w	r3, r3, #1
 801a52c:	2b00      	cmp	r3, #0
 801a52e:	d022      	beq.n	801a576 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801a530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a532:	681b      	ldr	r3, [r3, #0]
 801a534:	68db      	ldr	r3, [r3, #12]
 801a536:	899b      	ldrh	r3, [r3, #12]
 801a538:	b29b      	uxth	r3, r3
 801a53a:	b21b      	sxth	r3, r3
 801a53c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801a540:	b21c      	sxth	r4, r3
 801a542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a544:	681b      	ldr	r3, [r3, #0]
 801a546:	68db      	ldr	r3, [r3, #12]
 801a548:	899b      	ldrh	r3, [r3, #12]
 801a54a:	b29b      	uxth	r3, r3
 801a54c:	4618      	mov	r0, r3
 801a54e:	f7f8 fdbf 	bl	80130d0 <lwip_htons>
 801a552:	4603      	mov	r3, r0
 801a554:	b2db      	uxtb	r3, r3
 801a556:	b29b      	uxth	r3, r3
 801a558:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801a55c:	b29b      	uxth	r3, r3
 801a55e:	4618      	mov	r0, r3
 801a560:	f7f8 fdb6 	bl	80130d0 <lwip_htons>
 801a564:	4603      	mov	r3, r0
 801a566:	b21b      	sxth	r3, r3
 801a568:	4323      	orrs	r3, r4
 801a56a:	b21a      	sxth	r2, r3
 801a56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a56e:	681b      	ldr	r3, [r3, #0]
 801a570:	68db      	ldr	r3, [r3, #12]
 801a572:	b292      	uxth	r2, r2
 801a574:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801a576:	687b      	ldr	r3, [r7, #4]
 801a578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a57a:	b29a      	uxth	r2, r3
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a580:	4413      	add	r3, r2
 801a582:	b299      	uxth	r1, r3
 801a584:	4b3c      	ldr	r3, [pc, #240]	; (801a678 <tcp_receive+0xf14>)
 801a586:	681b      	ldr	r3, [r3, #0]
 801a588:	b29a      	uxth	r2, r3
 801a58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a58c:	681b      	ldr	r3, [r3, #0]
 801a58e:	1a8a      	subs	r2, r1, r2
 801a590:	b292      	uxth	r2, r2
 801a592:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801a594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a596:	681b      	ldr	r3, [r3, #0]
 801a598:	685a      	ldr	r2, [r3, #4]
 801a59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a59c:	681b      	ldr	r3, [r3, #0]
 801a59e:	891b      	ldrh	r3, [r3, #8]
 801a5a0:	4619      	mov	r1, r3
 801a5a2:	4610      	mov	r0, r2
 801a5a4:	f7fb f8ae 	bl	8015704 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801a5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a5aa:	681b      	ldr	r3, [r3, #0]
 801a5ac:	891c      	ldrh	r4, [r3, #8]
 801a5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a5b0:	681b      	ldr	r3, [r3, #0]
 801a5b2:	68db      	ldr	r3, [r3, #12]
 801a5b4:	899b      	ldrh	r3, [r3, #12]
 801a5b6:	b29b      	uxth	r3, r3
 801a5b8:	4618      	mov	r0, r3
 801a5ba:	f7f8 fd89 	bl	80130d0 <lwip_htons>
 801a5be:	4603      	mov	r3, r0
 801a5c0:	b2db      	uxtb	r3, r3
 801a5c2:	f003 0303 	and.w	r3, r3, #3
 801a5c6:	2b00      	cmp	r3, #0
 801a5c8:	d001      	beq.n	801a5ce <tcp_receive+0xe6a>
 801a5ca:	2301      	movs	r3, #1
 801a5cc:	e000      	b.n	801a5d0 <tcp_receive+0xe6c>
 801a5ce:	2300      	movs	r3, #0
 801a5d0:	4423      	add	r3, r4
 801a5d2:	b29a      	uxth	r2, r3
 801a5d4:	4b2a      	ldr	r3, [pc, #168]	; (801a680 <tcp_receive+0xf1c>)
 801a5d6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801a5d8:	4b29      	ldr	r3, [pc, #164]	; (801a680 <tcp_receive+0xf1c>)
 801a5da:	881b      	ldrh	r3, [r3, #0]
 801a5dc:	461a      	mov	r2, r3
 801a5de:	4b26      	ldr	r3, [pc, #152]	; (801a678 <tcp_receive+0xf14>)
 801a5e0:	681b      	ldr	r3, [r3, #0]
 801a5e2:	441a      	add	r2, r3
 801a5e4:	687b      	ldr	r3, [r7, #4]
 801a5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a5e8:	6879      	ldr	r1, [r7, #4]
 801a5ea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a5ec:	440b      	add	r3, r1
 801a5ee:	429a      	cmp	r2, r3
 801a5f0:	d019      	beq.n	801a626 <tcp_receive+0xec2>
 801a5f2:	4b24      	ldr	r3, [pc, #144]	; (801a684 <tcp_receive+0xf20>)
 801a5f4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801a5f8:	4923      	ldr	r1, [pc, #140]	; (801a688 <tcp_receive+0xf24>)
 801a5fa:	4824      	ldr	r0, [pc, #144]	; (801a68c <tcp_receive+0xf28>)
 801a5fc:	f00c fc6a 	bl	8026ed4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801a600:	e011      	b.n	801a626 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801a602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a604:	681b      	ldr	r3, [r3, #0]
 801a606:	63bb      	str	r3, [r7, #56]	; 0x38
 801a608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a60a:	2b00      	cmp	r3, #0
 801a60c:	f47f aea4 	bne.w	801a358 <tcp_receive+0xbf4>
 801a610:	e00a      	b.n	801a628 <tcp_receive+0xec4>
                break;
 801a612:	bf00      	nop
 801a614:	e008      	b.n	801a628 <tcp_receive+0xec4>
                break;
 801a616:	bf00      	nop
 801a618:	e006      	b.n	801a628 <tcp_receive+0xec4>
                  break;
 801a61a:	bf00      	nop
 801a61c:	e004      	b.n	801a628 <tcp_receive+0xec4>
                  break;
 801a61e:	bf00      	nop
 801a620:	e002      	b.n	801a628 <tcp_receive+0xec4>
                  break;
 801a622:	bf00      	nop
 801a624:	e000      	b.n	801a628 <tcp_receive+0xec4>
                break;
 801a626:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801a628:	6878      	ldr	r0, [r7, #4]
 801a62a:	f001 fe8b 	bl	801c344 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801a62e:	e003      	b.n	801a638 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801a630:	6878      	ldr	r0, [r7, #4]
 801a632:	f001 fe87 	bl	801c344 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a636:	e01a      	b.n	801a66e <tcp_receive+0xf0a>
 801a638:	e019      	b.n	801a66e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801a63a:	4b0f      	ldr	r3, [pc, #60]	; (801a678 <tcp_receive+0xf14>)
 801a63c:	681a      	ldr	r2, [r3, #0]
 801a63e:	687b      	ldr	r3, [r7, #4]
 801a640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a642:	1ad3      	subs	r3, r2, r3
 801a644:	2b00      	cmp	r3, #0
 801a646:	db0a      	blt.n	801a65e <tcp_receive+0xefa>
 801a648:	4b0b      	ldr	r3, [pc, #44]	; (801a678 <tcp_receive+0xf14>)
 801a64a:	681a      	ldr	r2, [r3, #0]
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a650:	6879      	ldr	r1, [r7, #4]
 801a652:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a654:	440b      	add	r3, r1
 801a656:	1ad3      	subs	r3, r2, r3
 801a658:	3301      	adds	r3, #1
 801a65a:	2b00      	cmp	r3, #0
 801a65c:	dd07      	ble.n	801a66e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801a65e:	687b      	ldr	r3, [r7, #4]
 801a660:	8b5b      	ldrh	r3, [r3, #26]
 801a662:	f043 0302 	orr.w	r3, r3, #2
 801a666:	b29a      	uxth	r2, r3
 801a668:	687b      	ldr	r3, [r7, #4]
 801a66a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801a66c:	e7ff      	b.n	801a66e <tcp_receive+0xf0a>
 801a66e:	bf00      	nop
 801a670:	3750      	adds	r7, #80	; 0x50
 801a672:	46bd      	mov	sp, r7
 801a674:	bdb0      	pop	{r4, r5, r7, pc}
 801a676:	bf00      	nop
 801a678:	24004fac 	.word	0x24004fac
 801a67c:	24004f8c 	.word	0x24004f8c
 801a680:	24004fb6 	.word	0x24004fb6
 801a684:	0802c780 	.word	0x0802c780
 801a688:	0802cb28 	.word	0x0802cb28
 801a68c:	0802c7cc 	.word	0x0802c7cc

0801a690 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801a690:	b480      	push	{r7}
 801a692:	b083      	sub	sp, #12
 801a694:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801a696:	4b15      	ldr	r3, [pc, #84]	; (801a6ec <tcp_get_next_optbyte+0x5c>)
 801a698:	881b      	ldrh	r3, [r3, #0]
 801a69a:	1c5a      	adds	r2, r3, #1
 801a69c:	b291      	uxth	r1, r2
 801a69e:	4a13      	ldr	r2, [pc, #76]	; (801a6ec <tcp_get_next_optbyte+0x5c>)
 801a6a0:	8011      	strh	r1, [r2, #0]
 801a6a2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801a6a4:	4b12      	ldr	r3, [pc, #72]	; (801a6f0 <tcp_get_next_optbyte+0x60>)
 801a6a6:	681b      	ldr	r3, [r3, #0]
 801a6a8:	2b00      	cmp	r3, #0
 801a6aa:	d004      	beq.n	801a6b6 <tcp_get_next_optbyte+0x26>
 801a6ac:	4b11      	ldr	r3, [pc, #68]	; (801a6f4 <tcp_get_next_optbyte+0x64>)
 801a6ae:	881b      	ldrh	r3, [r3, #0]
 801a6b0:	88fa      	ldrh	r2, [r7, #6]
 801a6b2:	429a      	cmp	r2, r3
 801a6b4:	d208      	bcs.n	801a6c8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801a6b6:	4b10      	ldr	r3, [pc, #64]	; (801a6f8 <tcp_get_next_optbyte+0x68>)
 801a6b8:	681b      	ldr	r3, [r3, #0]
 801a6ba:	3314      	adds	r3, #20
 801a6bc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801a6be:	88fb      	ldrh	r3, [r7, #6]
 801a6c0:	683a      	ldr	r2, [r7, #0]
 801a6c2:	4413      	add	r3, r2
 801a6c4:	781b      	ldrb	r3, [r3, #0]
 801a6c6:	e00b      	b.n	801a6e0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801a6c8:	88fb      	ldrh	r3, [r7, #6]
 801a6ca:	b2da      	uxtb	r2, r3
 801a6cc:	4b09      	ldr	r3, [pc, #36]	; (801a6f4 <tcp_get_next_optbyte+0x64>)
 801a6ce:	881b      	ldrh	r3, [r3, #0]
 801a6d0:	b2db      	uxtb	r3, r3
 801a6d2:	1ad3      	subs	r3, r2, r3
 801a6d4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801a6d6:	4b06      	ldr	r3, [pc, #24]	; (801a6f0 <tcp_get_next_optbyte+0x60>)
 801a6d8:	681a      	ldr	r2, [r3, #0]
 801a6da:	797b      	ldrb	r3, [r7, #5]
 801a6dc:	4413      	add	r3, r2
 801a6de:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a6e0:	4618      	mov	r0, r3
 801a6e2:	370c      	adds	r7, #12
 801a6e4:	46bd      	mov	sp, r7
 801a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6ea:	4770      	bx	lr
 801a6ec:	24004fa8 	.word	0x24004fa8
 801a6f0:	24004fa4 	.word	0x24004fa4
 801a6f4:	24004fa2 	.word	0x24004fa2
 801a6f8:	24004f9c 	.word	0x24004f9c

0801a6fc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801a6fc:	b580      	push	{r7, lr}
 801a6fe:	b084      	sub	sp, #16
 801a700:	af00      	add	r7, sp, #0
 801a702:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	2b00      	cmp	r3, #0
 801a708:	d106      	bne.n	801a718 <tcp_parseopt+0x1c>
 801a70a:	4b32      	ldr	r3, [pc, #200]	; (801a7d4 <tcp_parseopt+0xd8>)
 801a70c:	f240 727d 	movw	r2, #1917	; 0x77d
 801a710:	4931      	ldr	r1, [pc, #196]	; (801a7d8 <tcp_parseopt+0xdc>)
 801a712:	4832      	ldr	r0, [pc, #200]	; (801a7dc <tcp_parseopt+0xe0>)
 801a714:	f00c fbde 	bl	8026ed4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801a718:	4b31      	ldr	r3, [pc, #196]	; (801a7e0 <tcp_parseopt+0xe4>)
 801a71a:	881b      	ldrh	r3, [r3, #0]
 801a71c:	2b00      	cmp	r3, #0
 801a71e:	d055      	beq.n	801a7cc <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a720:	4b30      	ldr	r3, [pc, #192]	; (801a7e4 <tcp_parseopt+0xe8>)
 801a722:	2200      	movs	r2, #0
 801a724:	801a      	strh	r2, [r3, #0]
 801a726:	e045      	b.n	801a7b4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801a728:	f7ff ffb2 	bl	801a690 <tcp_get_next_optbyte>
 801a72c:	4603      	mov	r3, r0
 801a72e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801a730:	7bfb      	ldrb	r3, [r7, #15]
 801a732:	2b02      	cmp	r3, #2
 801a734:	d006      	beq.n	801a744 <tcp_parseopt+0x48>
 801a736:	2b02      	cmp	r3, #2
 801a738:	dc2b      	bgt.n	801a792 <tcp_parseopt+0x96>
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	d041      	beq.n	801a7c2 <tcp_parseopt+0xc6>
 801a73e:	2b01      	cmp	r3, #1
 801a740:	d127      	bne.n	801a792 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801a742:	e037      	b.n	801a7b4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801a744:	f7ff ffa4 	bl	801a690 <tcp_get_next_optbyte>
 801a748:	4603      	mov	r3, r0
 801a74a:	2b04      	cmp	r3, #4
 801a74c:	d13b      	bne.n	801a7c6 <tcp_parseopt+0xca>
 801a74e:	4b25      	ldr	r3, [pc, #148]	; (801a7e4 <tcp_parseopt+0xe8>)
 801a750:	881b      	ldrh	r3, [r3, #0]
 801a752:	3301      	adds	r3, #1
 801a754:	4a22      	ldr	r2, [pc, #136]	; (801a7e0 <tcp_parseopt+0xe4>)
 801a756:	8812      	ldrh	r2, [r2, #0]
 801a758:	4293      	cmp	r3, r2
 801a75a:	da34      	bge.n	801a7c6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801a75c:	f7ff ff98 	bl	801a690 <tcp_get_next_optbyte>
 801a760:	4603      	mov	r3, r0
 801a762:	b29b      	uxth	r3, r3
 801a764:	021b      	lsls	r3, r3, #8
 801a766:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801a768:	f7ff ff92 	bl	801a690 <tcp_get_next_optbyte>
 801a76c:	4603      	mov	r3, r0
 801a76e:	b29a      	uxth	r2, r3
 801a770:	89bb      	ldrh	r3, [r7, #12]
 801a772:	4313      	orrs	r3, r2
 801a774:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801a776:	89bb      	ldrh	r3, [r7, #12]
 801a778:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801a77c:	d804      	bhi.n	801a788 <tcp_parseopt+0x8c>
 801a77e:	89bb      	ldrh	r3, [r7, #12]
 801a780:	2b00      	cmp	r3, #0
 801a782:	d001      	beq.n	801a788 <tcp_parseopt+0x8c>
 801a784:	89ba      	ldrh	r2, [r7, #12]
 801a786:	e001      	b.n	801a78c <tcp_parseopt+0x90>
 801a788:	f44f 7206 	mov.w	r2, #536	; 0x218
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801a790:	e010      	b.n	801a7b4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801a792:	f7ff ff7d 	bl	801a690 <tcp_get_next_optbyte>
 801a796:	4603      	mov	r3, r0
 801a798:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801a79a:	7afb      	ldrb	r3, [r7, #11]
 801a79c:	2b01      	cmp	r3, #1
 801a79e:	d914      	bls.n	801a7ca <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801a7a0:	7afb      	ldrb	r3, [r7, #11]
 801a7a2:	b29a      	uxth	r2, r3
 801a7a4:	4b0f      	ldr	r3, [pc, #60]	; (801a7e4 <tcp_parseopt+0xe8>)
 801a7a6:	881b      	ldrh	r3, [r3, #0]
 801a7a8:	4413      	add	r3, r2
 801a7aa:	b29b      	uxth	r3, r3
 801a7ac:	3b02      	subs	r3, #2
 801a7ae:	b29a      	uxth	r2, r3
 801a7b0:	4b0c      	ldr	r3, [pc, #48]	; (801a7e4 <tcp_parseopt+0xe8>)
 801a7b2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a7b4:	4b0b      	ldr	r3, [pc, #44]	; (801a7e4 <tcp_parseopt+0xe8>)
 801a7b6:	881a      	ldrh	r2, [r3, #0]
 801a7b8:	4b09      	ldr	r3, [pc, #36]	; (801a7e0 <tcp_parseopt+0xe4>)
 801a7ba:	881b      	ldrh	r3, [r3, #0]
 801a7bc:	429a      	cmp	r2, r3
 801a7be:	d3b3      	bcc.n	801a728 <tcp_parseopt+0x2c>
 801a7c0:	e004      	b.n	801a7cc <tcp_parseopt+0xd0>
          return;
 801a7c2:	bf00      	nop
 801a7c4:	e002      	b.n	801a7cc <tcp_parseopt+0xd0>
            return;
 801a7c6:	bf00      	nop
 801a7c8:	e000      	b.n	801a7cc <tcp_parseopt+0xd0>
            return;
 801a7ca:	bf00      	nop
      }
    }
  }
}
 801a7cc:	3710      	adds	r7, #16
 801a7ce:	46bd      	mov	sp, r7
 801a7d0:	bd80      	pop	{r7, pc}
 801a7d2:	bf00      	nop
 801a7d4:	0802c780 	.word	0x0802c780
 801a7d8:	0802cbe4 	.word	0x0802cbe4
 801a7dc:	0802c7cc 	.word	0x0802c7cc
 801a7e0:	24004fa0 	.word	0x24004fa0
 801a7e4:	24004fa8 	.word	0x24004fa8

0801a7e8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801a7e8:	b480      	push	{r7}
 801a7ea:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801a7ec:	4b05      	ldr	r3, [pc, #20]	; (801a804 <tcp_trigger_input_pcb_close+0x1c>)
 801a7ee:	781b      	ldrb	r3, [r3, #0]
 801a7f0:	f043 0310 	orr.w	r3, r3, #16
 801a7f4:	b2da      	uxtb	r2, r3
 801a7f6:	4b03      	ldr	r3, [pc, #12]	; (801a804 <tcp_trigger_input_pcb_close+0x1c>)
 801a7f8:	701a      	strb	r2, [r3, #0]
}
 801a7fa:	bf00      	nop
 801a7fc:	46bd      	mov	sp, r7
 801a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a802:	4770      	bx	lr
 801a804:	24004fb9 	.word	0x24004fb9

0801a808 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801a808:	b580      	push	{r7, lr}
 801a80a:	b084      	sub	sp, #16
 801a80c:	af00      	add	r7, sp, #0
 801a80e:	60f8      	str	r0, [r7, #12]
 801a810:	60b9      	str	r1, [r7, #8]
 801a812:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801a814:	68fb      	ldr	r3, [r7, #12]
 801a816:	2b00      	cmp	r3, #0
 801a818:	d00a      	beq.n	801a830 <tcp_route+0x28>
 801a81a:	68fb      	ldr	r3, [r7, #12]
 801a81c:	7a1b      	ldrb	r3, [r3, #8]
 801a81e:	2b00      	cmp	r3, #0
 801a820:	d006      	beq.n	801a830 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801a822:	68fb      	ldr	r3, [r7, #12]
 801a824:	7a1b      	ldrb	r3, [r3, #8]
 801a826:	4618      	mov	r0, r3
 801a828:	f7fa fd64 	bl	80152f4 <netif_get_by_index>
 801a82c:	4603      	mov	r3, r0
 801a82e:	e003      	b.n	801a838 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801a830:	6878      	ldr	r0, [r7, #4]
 801a832:	f005 fe13 	bl	802045c <ip4_route>
 801a836:	4603      	mov	r3, r0
  }
}
 801a838:	4618      	mov	r0, r3
 801a83a:	3710      	adds	r7, #16
 801a83c:	46bd      	mov	sp, r7
 801a83e:	bd80      	pop	{r7, pc}

0801a840 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801a840:	b590      	push	{r4, r7, lr}
 801a842:	b087      	sub	sp, #28
 801a844:	af00      	add	r7, sp, #0
 801a846:	60f8      	str	r0, [r7, #12]
 801a848:	60b9      	str	r1, [r7, #8]
 801a84a:	603b      	str	r3, [r7, #0]
 801a84c:	4613      	mov	r3, r2
 801a84e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801a850:	68fb      	ldr	r3, [r7, #12]
 801a852:	2b00      	cmp	r3, #0
 801a854:	d105      	bne.n	801a862 <tcp_create_segment+0x22>
 801a856:	4b44      	ldr	r3, [pc, #272]	; (801a968 <tcp_create_segment+0x128>)
 801a858:	22a3      	movs	r2, #163	; 0xa3
 801a85a:	4944      	ldr	r1, [pc, #272]	; (801a96c <tcp_create_segment+0x12c>)
 801a85c:	4844      	ldr	r0, [pc, #272]	; (801a970 <tcp_create_segment+0x130>)
 801a85e:	f00c fb39 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801a862:	68bb      	ldr	r3, [r7, #8]
 801a864:	2b00      	cmp	r3, #0
 801a866:	d105      	bne.n	801a874 <tcp_create_segment+0x34>
 801a868:	4b3f      	ldr	r3, [pc, #252]	; (801a968 <tcp_create_segment+0x128>)
 801a86a:	22a4      	movs	r2, #164	; 0xa4
 801a86c:	4941      	ldr	r1, [pc, #260]	; (801a974 <tcp_create_segment+0x134>)
 801a86e:	4840      	ldr	r0, [pc, #256]	; (801a970 <tcp_create_segment+0x130>)
 801a870:	f00c fb30 	bl	8026ed4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a874:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a878:	009b      	lsls	r3, r3, #2
 801a87a:	b2db      	uxtb	r3, r3
 801a87c:	f003 0304 	and.w	r3, r3, #4
 801a880:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801a882:	2003      	movs	r0, #3
 801a884:	f7fa f99e 	bl	8014bc4 <memp_malloc>
 801a888:	6138      	str	r0, [r7, #16]
 801a88a:	693b      	ldr	r3, [r7, #16]
 801a88c:	2b00      	cmp	r3, #0
 801a88e:	d104      	bne.n	801a89a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801a890:	68b8      	ldr	r0, [r7, #8]
 801a892:	f7fb f8ef 	bl	8015a74 <pbuf_free>
    return NULL;
 801a896:	2300      	movs	r3, #0
 801a898:	e061      	b.n	801a95e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801a89a:	693b      	ldr	r3, [r7, #16]
 801a89c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801a8a0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801a8a2:	693b      	ldr	r3, [r7, #16]
 801a8a4:	2200      	movs	r2, #0
 801a8a6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801a8a8:	693b      	ldr	r3, [r7, #16]
 801a8aa:	68ba      	ldr	r2, [r7, #8]
 801a8ac:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801a8ae:	68bb      	ldr	r3, [r7, #8]
 801a8b0:	891a      	ldrh	r2, [r3, #8]
 801a8b2:	7dfb      	ldrb	r3, [r7, #23]
 801a8b4:	b29b      	uxth	r3, r3
 801a8b6:	429a      	cmp	r2, r3
 801a8b8:	d205      	bcs.n	801a8c6 <tcp_create_segment+0x86>
 801a8ba:	4b2b      	ldr	r3, [pc, #172]	; (801a968 <tcp_create_segment+0x128>)
 801a8bc:	22b0      	movs	r2, #176	; 0xb0
 801a8be:	492e      	ldr	r1, [pc, #184]	; (801a978 <tcp_create_segment+0x138>)
 801a8c0:	482b      	ldr	r0, [pc, #172]	; (801a970 <tcp_create_segment+0x130>)
 801a8c2:	f00c fb07 	bl	8026ed4 <iprintf>
  seg->len = p->tot_len - optlen;
 801a8c6:	68bb      	ldr	r3, [r7, #8]
 801a8c8:	891a      	ldrh	r2, [r3, #8]
 801a8ca:	7dfb      	ldrb	r3, [r7, #23]
 801a8cc:	b29b      	uxth	r3, r3
 801a8ce:	1ad3      	subs	r3, r2, r3
 801a8d0:	b29a      	uxth	r2, r3
 801a8d2:	693b      	ldr	r3, [r7, #16]
 801a8d4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801a8d6:	2114      	movs	r1, #20
 801a8d8:	68b8      	ldr	r0, [r7, #8]
 801a8da:	f7fb f803 	bl	80158e4 <pbuf_add_header>
 801a8de:	4603      	mov	r3, r0
 801a8e0:	2b00      	cmp	r3, #0
 801a8e2:	d004      	beq.n	801a8ee <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801a8e4:	6938      	ldr	r0, [r7, #16]
 801a8e6:	f7fd f804 	bl	80178f2 <tcp_seg_free>
    return NULL;
 801a8ea:	2300      	movs	r3, #0
 801a8ec:	e037      	b.n	801a95e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801a8ee:	693b      	ldr	r3, [r7, #16]
 801a8f0:	685b      	ldr	r3, [r3, #4]
 801a8f2:	685a      	ldr	r2, [r3, #4]
 801a8f4:	693b      	ldr	r3, [r7, #16]
 801a8f6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801a8f8:	68fb      	ldr	r3, [r7, #12]
 801a8fa:	8ada      	ldrh	r2, [r3, #22]
 801a8fc:	693b      	ldr	r3, [r7, #16]
 801a8fe:	68dc      	ldr	r4, [r3, #12]
 801a900:	4610      	mov	r0, r2
 801a902:	f7f8 fbe5 	bl	80130d0 <lwip_htons>
 801a906:	4603      	mov	r3, r0
 801a908:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801a90a:	68fb      	ldr	r3, [r7, #12]
 801a90c:	8b1a      	ldrh	r2, [r3, #24]
 801a90e:	693b      	ldr	r3, [r7, #16]
 801a910:	68dc      	ldr	r4, [r3, #12]
 801a912:	4610      	mov	r0, r2
 801a914:	f7f8 fbdc 	bl	80130d0 <lwip_htons>
 801a918:	4603      	mov	r3, r0
 801a91a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801a91c:	693b      	ldr	r3, [r7, #16]
 801a91e:	68dc      	ldr	r4, [r3, #12]
 801a920:	6838      	ldr	r0, [r7, #0]
 801a922:	f7f8 fbea 	bl	80130fa <lwip_htonl>
 801a926:	4603      	mov	r3, r0
 801a928:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801a92a:	7dfb      	ldrb	r3, [r7, #23]
 801a92c:	089b      	lsrs	r3, r3, #2
 801a92e:	b2db      	uxtb	r3, r3
 801a930:	b29b      	uxth	r3, r3
 801a932:	3305      	adds	r3, #5
 801a934:	b29b      	uxth	r3, r3
 801a936:	031b      	lsls	r3, r3, #12
 801a938:	b29a      	uxth	r2, r3
 801a93a:	79fb      	ldrb	r3, [r7, #7]
 801a93c:	b29b      	uxth	r3, r3
 801a93e:	4313      	orrs	r3, r2
 801a940:	b29a      	uxth	r2, r3
 801a942:	693b      	ldr	r3, [r7, #16]
 801a944:	68dc      	ldr	r4, [r3, #12]
 801a946:	4610      	mov	r0, r2
 801a948:	f7f8 fbc2 	bl	80130d0 <lwip_htons>
 801a94c:	4603      	mov	r3, r0
 801a94e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801a950:	693b      	ldr	r3, [r7, #16]
 801a952:	68db      	ldr	r3, [r3, #12]
 801a954:	2200      	movs	r2, #0
 801a956:	749a      	strb	r2, [r3, #18]
 801a958:	2200      	movs	r2, #0
 801a95a:	74da      	strb	r2, [r3, #19]
  return seg;
 801a95c:	693b      	ldr	r3, [r7, #16]
}
 801a95e:	4618      	mov	r0, r3
 801a960:	371c      	adds	r7, #28
 801a962:	46bd      	mov	sp, r7
 801a964:	bd90      	pop	{r4, r7, pc}
 801a966:	bf00      	nop
 801a968:	0802cc00 	.word	0x0802cc00
 801a96c:	0802cc34 	.word	0x0802cc34
 801a970:	0802cc54 	.word	0x0802cc54
 801a974:	0802cc7c 	.word	0x0802cc7c
 801a978:	0802cca0 	.word	0x0802cca0

0801a97c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801a97c:	b580      	push	{r7, lr}
 801a97e:	b086      	sub	sp, #24
 801a980:	af00      	add	r7, sp, #0
 801a982:	607b      	str	r3, [r7, #4]
 801a984:	4603      	mov	r3, r0
 801a986:	73fb      	strb	r3, [r7, #15]
 801a988:	460b      	mov	r3, r1
 801a98a:	81bb      	strh	r3, [r7, #12]
 801a98c:	4613      	mov	r3, r2
 801a98e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801a990:	89bb      	ldrh	r3, [r7, #12]
 801a992:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801a994:	687b      	ldr	r3, [r7, #4]
 801a996:	2b00      	cmp	r3, #0
 801a998:	d105      	bne.n	801a9a6 <tcp_pbuf_prealloc+0x2a>
 801a99a:	4b30      	ldr	r3, [pc, #192]	; (801aa5c <tcp_pbuf_prealloc+0xe0>)
 801a99c:	22e8      	movs	r2, #232	; 0xe8
 801a99e:	4930      	ldr	r1, [pc, #192]	; (801aa60 <tcp_pbuf_prealloc+0xe4>)
 801a9a0:	4830      	ldr	r0, [pc, #192]	; (801aa64 <tcp_pbuf_prealloc+0xe8>)
 801a9a2:	f00c fa97 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801a9a6:	6a3b      	ldr	r3, [r7, #32]
 801a9a8:	2b00      	cmp	r3, #0
 801a9aa:	d105      	bne.n	801a9b8 <tcp_pbuf_prealloc+0x3c>
 801a9ac:	4b2b      	ldr	r3, [pc, #172]	; (801aa5c <tcp_pbuf_prealloc+0xe0>)
 801a9ae:	22e9      	movs	r2, #233	; 0xe9
 801a9b0:	492d      	ldr	r1, [pc, #180]	; (801aa68 <tcp_pbuf_prealloc+0xec>)
 801a9b2:	482c      	ldr	r0, [pc, #176]	; (801aa64 <tcp_pbuf_prealloc+0xe8>)
 801a9b4:	f00c fa8e 	bl	8026ed4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801a9b8:	89ba      	ldrh	r2, [r7, #12]
 801a9ba:	897b      	ldrh	r3, [r7, #10]
 801a9bc:	429a      	cmp	r2, r3
 801a9be:	d221      	bcs.n	801aa04 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801a9c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a9c4:	f003 0302 	and.w	r3, r3, #2
 801a9c8:	2b00      	cmp	r3, #0
 801a9ca:	d111      	bne.n	801a9f0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801a9cc:	6a3b      	ldr	r3, [r7, #32]
 801a9ce:	8b5b      	ldrh	r3, [r3, #26]
 801a9d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801a9d4:	2b00      	cmp	r3, #0
 801a9d6:	d115      	bne.n	801aa04 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801a9d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a9dc:	2b00      	cmp	r3, #0
 801a9de:	d007      	beq.n	801a9f0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801a9e0:	6a3b      	ldr	r3, [r7, #32]
 801a9e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801a9e4:	2b00      	cmp	r3, #0
 801a9e6:	d103      	bne.n	801a9f0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801a9e8:	6a3b      	ldr	r3, [r7, #32]
 801a9ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801a9ec:	2b00      	cmp	r3, #0
 801a9ee:	d009      	beq.n	801aa04 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801a9f0:	89bb      	ldrh	r3, [r7, #12]
 801a9f2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801a9f6:	f023 0203 	bic.w	r2, r3, #3
 801a9fa:	897b      	ldrh	r3, [r7, #10]
 801a9fc:	4293      	cmp	r3, r2
 801a9fe:	bf28      	it	cs
 801aa00:	4613      	movcs	r3, r2
 801aa02:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801aa04:	8af9      	ldrh	r1, [r7, #22]
 801aa06:	7bfb      	ldrb	r3, [r7, #15]
 801aa08:	f44f 7220 	mov.w	r2, #640	; 0x280
 801aa0c:	4618      	mov	r0, r3
 801aa0e:	f7fa fd1b 	bl	8015448 <pbuf_alloc>
 801aa12:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801aa14:	693b      	ldr	r3, [r7, #16]
 801aa16:	2b00      	cmp	r3, #0
 801aa18:	d101      	bne.n	801aa1e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801aa1a:	2300      	movs	r3, #0
 801aa1c:	e019      	b.n	801aa52 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801aa1e:	693b      	ldr	r3, [r7, #16]
 801aa20:	681b      	ldr	r3, [r3, #0]
 801aa22:	2b00      	cmp	r3, #0
 801aa24:	d006      	beq.n	801aa34 <tcp_pbuf_prealloc+0xb8>
 801aa26:	4b0d      	ldr	r3, [pc, #52]	; (801aa5c <tcp_pbuf_prealloc+0xe0>)
 801aa28:	f240 120b 	movw	r2, #267	; 0x10b
 801aa2c:	490f      	ldr	r1, [pc, #60]	; (801aa6c <tcp_pbuf_prealloc+0xf0>)
 801aa2e:	480d      	ldr	r0, [pc, #52]	; (801aa64 <tcp_pbuf_prealloc+0xe8>)
 801aa30:	f00c fa50 	bl	8026ed4 <iprintf>
  *oversize = p->len - length;
 801aa34:	693b      	ldr	r3, [r7, #16]
 801aa36:	895a      	ldrh	r2, [r3, #10]
 801aa38:	89bb      	ldrh	r3, [r7, #12]
 801aa3a:	1ad3      	subs	r3, r2, r3
 801aa3c:	b29a      	uxth	r2, r3
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801aa42:	693b      	ldr	r3, [r7, #16]
 801aa44:	89ba      	ldrh	r2, [r7, #12]
 801aa46:	811a      	strh	r2, [r3, #8]
 801aa48:	693b      	ldr	r3, [r7, #16]
 801aa4a:	891a      	ldrh	r2, [r3, #8]
 801aa4c:	693b      	ldr	r3, [r7, #16]
 801aa4e:	815a      	strh	r2, [r3, #10]
  return p;
 801aa50:	693b      	ldr	r3, [r7, #16]
}
 801aa52:	4618      	mov	r0, r3
 801aa54:	3718      	adds	r7, #24
 801aa56:	46bd      	mov	sp, r7
 801aa58:	bd80      	pop	{r7, pc}
 801aa5a:	bf00      	nop
 801aa5c:	0802cc00 	.word	0x0802cc00
 801aa60:	0802ccb8 	.word	0x0802ccb8
 801aa64:	0802cc54 	.word	0x0802cc54
 801aa68:	0802ccdc 	.word	0x0802ccdc
 801aa6c:	0802ccfc 	.word	0x0802ccfc

0801aa70 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801aa70:	b580      	push	{r7, lr}
 801aa72:	b082      	sub	sp, #8
 801aa74:	af00      	add	r7, sp, #0
 801aa76:	6078      	str	r0, [r7, #4]
 801aa78:	460b      	mov	r3, r1
 801aa7a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	2b00      	cmp	r3, #0
 801aa80:	d106      	bne.n	801aa90 <tcp_write_checks+0x20>
 801aa82:	4b33      	ldr	r3, [pc, #204]	; (801ab50 <tcp_write_checks+0xe0>)
 801aa84:	f240 1233 	movw	r2, #307	; 0x133
 801aa88:	4932      	ldr	r1, [pc, #200]	; (801ab54 <tcp_write_checks+0xe4>)
 801aa8a:	4833      	ldr	r0, [pc, #204]	; (801ab58 <tcp_write_checks+0xe8>)
 801aa8c:	f00c fa22 	bl	8026ed4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801aa90:	687b      	ldr	r3, [r7, #4]
 801aa92:	7d1b      	ldrb	r3, [r3, #20]
 801aa94:	2b04      	cmp	r3, #4
 801aa96:	d00e      	beq.n	801aab6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801aa9c:	2b07      	cmp	r3, #7
 801aa9e:	d00a      	beq.n	801aab6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801aaa4:	2b02      	cmp	r3, #2
 801aaa6:	d006      	beq.n	801aab6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801aaac:	2b03      	cmp	r3, #3
 801aaae:	d002      	beq.n	801aab6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801aab0:	f06f 030a 	mvn.w	r3, #10
 801aab4:	e048      	b.n	801ab48 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801aab6:	887b      	ldrh	r3, [r7, #2]
 801aab8:	2b00      	cmp	r3, #0
 801aaba:	d101      	bne.n	801aac0 <tcp_write_checks+0x50>
    return ERR_OK;
 801aabc:	2300      	movs	r3, #0
 801aabe:	e043      	b.n	801ab48 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801aac0:	687b      	ldr	r3, [r7, #4]
 801aac2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801aac6:	887a      	ldrh	r2, [r7, #2]
 801aac8:	429a      	cmp	r2, r3
 801aaca:	d909      	bls.n	801aae0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801aacc:	687b      	ldr	r3, [r7, #4]
 801aace:	8b5b      	ldrh	r3, [r3, #26]
 801aad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801aad4:	b29a      	uxth	r2, r3
 801aad6:	687b      	ldr	r3, [r7, #4]
 801aad8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801aada:	f04f 33ff 	mov.w	r3, #4294967295
 801aade:	e033      	b.n	801ab48 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801aae0:	687b      	ldr	r3, [r7, #4]
 801aae2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801aae6:	2b08      	cmp	r3, #8
 801aae8:	d909      	bls.n	801aafe <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801aaea:	687b      	ldr	r3, [r7, #4]
 801aaec:	8b5b      	ldrh	r3, [r3, #26]
 801aaee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801aaf2:	b29a      	uxth	r2, r3
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801aaf8:	f04f 33ff 	mov.w	r3, #4294967295
 801aafc:	e024      	b.n	801ab48 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ab04:	2b00      	cmp	r3, #0
 801ab06:	d00f      	beq.n	801ab28 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ab0c:	2b00      	cmp	r3, #0
 801ab0e:	d11a      	bne.n	801ab46 <tcp_write_checks+0xd6>
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ab14:	2b00      	cmp	r3, #0
 801ab16:	d116      	bne.n	801ab46 <tcp_write_checks+0xd6>
 801ab18:	4b0d      	ldr	r3, [pc, #52]	; (801ab50 <tcp_write_checks+0xe0>)
 801ab1a:	f240 1255 	movw	r2, #341	; 0x155
 801ab1e:	490f      	ldr	r1, [pc, #60]	; (801ab5c <tcp_write_checks+0xec>)
 801ab20:	480d      	ldr	r0, [pc, #52]	; (801ab58 <tcp_write_checks+0xe8>)
 801ab22:	f00c f9d7 	bl	8026ed4 <iprintf>
 801ab26:	e00e      	b.n	801ab46 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801ab28:	687b      	ldr	r3, [r7, #4]
 801ab2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ab2c:	2b00      	cmp	r3, #0
 801ab2e:	d103      	bne.n	801ab38 <tcp_write_checks+0xc8>
 801ab30:	687b      	ldr	r3, [r7, #4]
 801ab32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ab34:	2b00      	cmp	r3, #0
 801ab36:	d006      	beq.n	801ab46 <tcp_write_checks+0xd6>
 801ab38:	4b05      	ldr	r3, [pc, #20]	; (801ab50 <tcp_write_checks+0xe0>)
 801ab3a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801ab3e:	4908      	ldr	r1, [pc, #32]	; (801ab60 <tcp_write_checks+0xf0>)
 801ab40:	4805      	ldr	r0, [pc, #20]	; (801ab58 <tcp_write_checks+0xe8>)
 801ab42:	f00c f9c7 	bl	8026ed4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801ab46:	2300      	movs	r3, #0
}
 801ab48:	4618      	mov	r0, r3
 801ab4a:	3708      	adds	r7, #8
 801ab4c:	46bd      	mov	sp, r7
 801ab4e:	bd80      	pop	{r7, pc}
 801ab50:	0802cc00 	.word	0x0802cc00
 801ab54:	0802cd10 	.word	0x0802cd10
 801ab58:	0802cc54 	.word	0x0802cc54
 801ab5c:	0802cd30 	.word	0x0802cd30
 801ab60:	0802cd6c 	.word	0x0802cd6c

0801ab64 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801ab64:	b590      	push	{r4, r7, lr}
 801ab66:	b09b      	sub	sp, #108	; 0x6c
 801ab68:	af04      	add	r7, sp, #16
 801ab6a:	60f8      	str	r0, [r7, #12]
 801ab6c:	60b9      	str	r1, [r7, #8]
 801ab6e:	4611      	mov	r1, r2
 801ab70:	461a      	mov	r2, r3
 801ab72:	460b      	mov	r3, r1
 801ab74:	80fb      	strh	r3, [r7, #6]
 801ab76:	4613      	mov	r3, r2
 801ab78:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801ab7a:	2300      	movs	r3, #0
 801ab7c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801ab7e:	2300      	movs	r3, #0
 801ab80:	653b      	str	r3, [r7, #80]	; 0x50
 801ab82:	2300      	movs	r3, #0
 801ab84:	64fb      	str	r3, [r7, #76]	; 0x4c
 801ab86:	2300      	movs	r3, #0
 801ab88:	64bb      	str	r3, [r7, #72]	; 0x48
 801ab8a:	2300      	movs	r3, #0
 801ab8c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801ab8e:	2300      	movs	r3, #0
 801ab90:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801ab94:	2300      	movs	r3, #0
 801ab96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801ab9a:	2300      	movs	r3, #0
 801ab9c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801ab9e:	2300      	movs	r3, #0
 801aba0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801aba2:	2300      	movs	r3, #0
 801aba4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801aba6:	68fb      	ldr	r3, [r7, #12]
 801aba8:	2b00      	cmp	r3, #0
 801abaa:	d109      	bne.n	801abc0 <tcp_write+0x5c>
 801abac:	4ba4      	ldr	r3, [pc, #656]	; (801ae40 <tcp_write+0x2dc>)
 801abae:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801abb2:	49a4      	ldr	r1, [pc, #656]	; (801ae44 <tcp_write+0x2e0>)
 801abb4:	48a4      	ldr	r0, [pc, #656]	; (801ae48 <tcp_write+0x2e4>)
 801abb6:	f00c f98d 	bl	8026ed4 <iprintf>
 801abba:	f06f 030f 	mvn.w	r3, #15
 801abbe:	e32a      	b.n	801b216 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801abc0:	68fb      	ldr	r3, [r7, #12]
 801abc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801abc6:	085b      	lsrs	r3, r3, #1
 801abc8:	b29a      	uxth	r2, r3
 801abca:	68fb      	ldr	r3, [r7, #12]
 801abcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801abce:	4293      	cmp	r3, r2
 801abd0:	bf28      	it	cs
 801abd2:	4613      	movcs	r3, r2
 801abd4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801abd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801abd8:	2b00      	cmp	r3, #0
 801abda:	d102      	bne.n	801abe2 <tcp_write+0x7e>
 801abdc:	68fb      	ldr	r3, [r7, #12]
 801abde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801abe0:	e000      	b.n	801abe4 <tcp_write+0x80>
 801abe2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801abe4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801abe6:	68bb      	ldr	r3, [r7, #8]
 801abe8:	2b00      	cmp	r3, #0
 801abea:	d109      	bne.n	801ac00 <tcp_write+0x9c>
 801abec:	4b94      	ldr	r3, [pc, #592]	; (801ae40 <tcp_write+0x2dc>)
 801abee:	f240 12ad 	movw	r2, #429	; 0x1ad
 801abf2:	4996      	ldr	r1, [pc, #600]	; (801ae4c <tcp_write+0x2e8>)
 801abf4:	4894      	ldr	r0, [pc, #592]	; (801ae48 <tcp_write+0x2e4>)
 801abf6:	f00c f96d 	bl	8026ed4 <iprintf>
 801abfa:	f06f 030f 	mvn.w	r3, #15
 801abfe:	e30a      	b.n	801b216 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801ac00:	88fb      	ldrh	r3, [r7, #6]
 801ac02:	4619      	mov	r1, r3
 801ac04:	68f8      	ldr	r0, [r7, #12]
 801ac06:	f7ff ff33 	bl	801aa70 <tcp_write_checks>
 801ac0a:	4603      	mov	r3, r0
 801ac0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801ac10:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801ac14:	2b00      	cmp	r3, #0
 801ac16:	d002      	beq.n	801ac1e <tcp_write+0xba>
    return err;
 801ac18:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801ac1c:	e2fb      	b.n	801b216 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801ac1e:	68fb      	ldr	r3, [r7, #12]
 801ac20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ac24:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801ac28:	2300      	movs	r3, #0
 801ac2a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801ac2e:	68fb      	ldr	r3, [r7, #12]
 801ac30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ac32:	2b00      	cmp	r3, #0
 801ac34:	f000 80f6 	beq.w	801ae24 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801ac38:	68fb      	ldr	r3, [r7, #12]
 801ac3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ac3c:	653b      	str	r3, [r7, #80]	; 0x50
 801ac3e:	e002      	b.n	801ac46 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801ac40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ac42:	681b      	ldr	r3, [r3, #0]
 801ac44:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801ac46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ac48:	681b      	ldr	r3, [r3, #0]
 801ac4a:	2b00      	cmp	r3, #0
 801ac4c:	d1f8      	bne.n	801ac40 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801ac4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ac50:	7a9b      	ldrb	r3, [r3, #10]
 801ac52:	009b      	lsls	r3, r3, #2
 801ac54:	b29b      	uxth	r3, r3
 801ac56:	f003 0304 	and.w	r3, r3, #4
 801ac5a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801ac5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ac5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ac60:	891b      	ldrh	r3, [r3, #8]
 801ac62:	4619      	mov	r1, r3
 801ac64:	8c3b      	ldrh	r3, [r7, #32]
 801ac66:	440b      	add	r3, r1
 801ac68:	429a      	cmp	r2, r3
 801ac6a:	da06      	bge.n	801ac7a <tcp_write+0x116>
 801ac6c:	4b74      	ldr	r3, [pc, #464]	; (801ae40 <tcp_write+0x2dc>)
 801ac6e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801ac72:	4977      	ldr	r1, [pc, #476]	; (801ae50 <tcp_write+0x2ec>)
 801ac74:	4874      	ldr	r0, [pc, #464]	; (801ae48 <tcp_write+0x2e4>)
 801ac76:	f00c f92d 	bl	8026ed4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801ac7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ac7c:	891a      	ldrh	r2, [r3, #8]
 801ac7e:	8c3b      	ldrh	r3, [r7, #32]
 801ac80:	4413      	add	r3, r2
 801ac82:	b29b      	uxth	r3, r3
 801ac84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ac86:	1ad3      	subs	r3, r2, r3
 801ac88:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801ac8a:	68fb      	ldr	r3, [r7, #12]
 801ac8c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801ac90:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801ac92:	8a7b      	ldrh	r3, [r7, #18]
 801ac94:	2b00      	cmp	r3, #0
 801ac96:	d026      	beq.n	801ace6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801ac98:	8a7b      	ldrh	r3, [r7, #18]
 801ac9a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ac9c:	429a      	cmp	r2, r3
 801ac9e:	d206      	bcs.n	801acae <tcp_write+0x14a>
 801aca0:	4b67      	ldr	r3, [pc, #412]	; (801ae40 <tcp_write+0x2dc>)
 801aca2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801aca6:	496b      	ldr	r1, [pc, #428]	; (801ae54 <tcp_write+0x2f0>)
 801aca8:	4867      	ldr	r0, [pc, #412]	; (801ae48 <tcp_write+0x2e4>)
 801acaa:	f00c f913 	bl	8026ed4 <iprintf>
      seg = last_unsent;
 801acae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801acb0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801acb2:	8a7b      	ldrh	r3, [r7, #18]
 801acb4:	88fa      	ldrh	r2, [r7, #6]
 801acb6:	4293      	cmp	r3, r2
 801acb8:	bf28      	it	cs
 801acba:	4613      	movcs	r3, r2
 801acbc:	b29b      	uxth	r3, r3
 801acbe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801acc0:	4293      	cmp	r3, r2
 801acc2:	bf28      	it	cs
 801acc4:	4613      	movcs	r3, r2
 801acc6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801acc8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801accc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801acce:	4413      	add	r3, r2
 801acd0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801acd4:	8a7a      	ldrh	r2, [r7, #18]
 801acd6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801acd8:	1ad3      	subs	r3, r2, r3
 801acda:	b29b      	uxth	r3, r3
 801acdc:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801acde:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ace0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ace2:	1ad3      	subs	r3, r2, r3
 801ace4:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801ace6:	8a7b      	ldrh	r3, [r7, #18]
 801ace8:	2b00      	cmp	r3, #0
 801acea:	d00b      	beq.n	801ad04 <tcp_write+0x1a0>
 801acec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801acf0:	88fb      	ldrh	r3, [r7, #6]
 801acf2:	429a      	cmp	r2, r3
 801acf4:	d006      	beq.n	801ad04 <tcp_write+0x1a0>
 801acf6:	4b52      	ldr	r3, [pc, #328]	; (801ae40 <tcp_write+0x2dc>)
 801acf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 801acfc:	4956      	ldr	r1, [pc, #344]	; (801ae58 <tcp_write+0x2f4>)
 801acfe:	4852      	ldr	r0, [pc, #328]	; (801ae48 <tcp_write+0x2e4>)
 801ad00:	f00c f8e8 	bl	8026ed4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801ad04:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ad08:	88fb      	ldrh	r3, [r7, #6]
 801ad0a:	429a      	cmp	r2, r3
 801ad0c:	f080 8167 	bcs.w	801afde <tcp_write+0x47a>
 801ad10:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ad12:	2b00      	cmp	r3, #0
 801ad14:	f000 8163 	beq.w	801afde <tcp_write+0x47a>
 801ad18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ad1a:	891b      	ldrh	r3, [r3, #8]
 801ad1c:	2b00      	cmp	r3, #0
 801ad1e:	f000 815e 	beq.w	801afde <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801ad22:	88fa      	ldrh	r2, [r7, #6]
 801ad24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ad28:	1ad2      	subs	r2, r2, r3
 801ad2a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ad2c:	4293      	cmp	r3, r2
 801ad2e:	bfa8      	it	ge
 801ad30:	4613      	movge	r3, r2
 801ad32:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801ad34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ad36:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801ad38:	797b      	ldrb	r3, [r7, #5]
 801ad3a:	f003 0301 	and.w	r3, r3, #1
 801ad3e:	2b00      	cmp	r3, #0
 801ad40:	d027      	beq.n	801ad92 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801ad42:	f107 0012 	add.w	r0, r7, #18
 801ad46:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ad48:	8bf9      	ldrh	r1, [r7, #30]
 801ad4a:	2301      	movs	r3, #1
 801ad4c:	9302      	str	r3, [sp, #8]
 801ad4e:	797b      	ldrb	r3, [r7, #5]
 801ad50:	9301      	str	r3, [sp, #4]
 801ad52:	68fb      	ldr	r3, [r7, #12]
 801ad54:	9300      	str	r3, [sp, #0]
 801ad56:	4603      	mov	r3, r0
 801ad58:	2000      	movs	r0, #0
 801ad5a:	f7ff fe0f 	bl	801a97c <tcp_pbuf_prealloc>
 801ad5e:	6578      	str	r0, [r7, #84]	; 0x54
 801ad60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ad62:	2b00      	cmp	r3, #0
 801ad64:	f000 8225 	beq.w	801b1b2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801ad68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ad6a:	6858      	ldr	r0, [r3, #4]
 801ad6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ad70:	68ba      	ldr	r2, [r7, #8]
 801ad72:	4413      	add	r3, r2
 801ad74:	8bfa      	ldrh	r2, [r7, #30]
 801ad76:	4619      	mov	r1, r3
 801ad78:	f00b fa26 	bl	80261c8 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801ad7c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801ad7e:	f7fa ff07 	bl	8015b90 <pbuf_clen>
 801ad82:	4603      	mov	r3, r0
 801ad84:	461a      	mov	r2, r3
 801ad86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801ad8a:	4413      	add	r3, r2
 801ad8c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801ad90:	e041      	b.n	801ae16 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801ad92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ad94:	685b      	ldr	r3, [r3, #4]
 801ad96:	637b      	str	r3, [r7, #52]	; 0x34
 801ad98:	e002      	b.n	801ada0 <tcp_write+0x23c>
 801ad9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad9c:	681b      	ldr	r3, [r3, #0]
 801ad9e:	637b      	str	r3, [r7, #52]	; 0x34
 801ada0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ada2:	681b      	ldr	r3, [r3, #0]
 801ada4:	2b00      	cmp	r3, #0
 801ada6:	d1f8      	bne.n	801ad9a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801ada8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801adaa:	7b1b      	ldrb	r3, [r3, #12]
 801adac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801adb0:	2b00      	cmp	r3, #0
 801adb2:	d115      	bne.n	801ade0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801adb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801adb6:	685b      	ldr	r3, [r3, #4]
 801adb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801adba:	8952      	ldrh	r2, [r2, #10]
 801adbc:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801adbe:	68ba      	ldr	r2, [r7, #8]
 801adc0:	429a      	cmp	r2, r3
 801adc2:	d10d      	bne.n	801ade0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801adc4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801adc8:	2b00      	cmp	r3, #0
 801adca:	d006      	beq.n	801adda <tcp_write+0x276>
 801adcc:	4b1c      	ldr	r3, [pc, #112]	; (801ae40 <tcp_write+0x2dc>)
 801adce:	f240 2231 	movw	r2, #561	; 0x231
 801add2:	4922      	ldr	r1, [pc, #136]	; (801ae5c <tcp_write+0x2f8>)
 801add4:	481c      	ldr	r0, [pc, #112]	; (801ae48 <tcp_write+0x2e4>)
 801add6:	f00c f87d 	bl	8026ed4 <iprintf>
          extendlen = seglen;
 801adda:	8bfb      	ldrh	r3, [r7, #30]
 801addc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801adde:	e01a      	b.n	801ae16 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801ade0:	8bfb      	ldrh	r3, [r7, #30]
 801ade2:	2201      	movs	r2, #1
 801ade4:	4619      	mov	r1, r3
 801ade6:	2000      	movs	r0, #0
 801ade8:	f7fa fb2e 	bl	8015448 <pbuf_alloc>
 801adec:	6578      	str	r0, [r7, #84]	; 0x54
 801adee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	f000 81e0 	beq.w	801b1b6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801adf6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801adfa:	68ba      	ldr	r2, [r7, #8]
 801adfc:	441a      	add	r2, r3
 801adfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ae00:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801ae02:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801ae04:	f7fa fec4 	bl	8015b90 <pbuf_clen>
 801ae08:	4603      	mov	r3, r0
 801ae0a:	461a      	mov	r2, r3
 801ae0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801ae10:	4413      	add	r3, r2
 801ae12:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801ae16:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ae1a:	8bfb      	ldrh	r3, [r7, #30]
 801ae1c:	4413      	add	r3, r2
 801ae1e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801ae22:	e0dc      	b.n	801afde <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801ae24:	68fb      	ldr	r3, [r7, #12]
 801ae26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801ae2a:	2b00      	cmp	r3, #0
 801ae2c:	f000 80d7 	beq.w	801afde <tcp_write+0x47a>
 801ae30:	4b03      	ldr	r3, [pc, #12]	; (801ae40 <tcp_write+0x2dc>)
 801ae32:	f240 224a 	movw	r2, #586	; 0x24a
 801ae36:	490a      	ldr	r1, [pc, #40]	; (801ae60 <tcp_write+0x2fc>)
 801ae38:	4803      	ldr	r0, [pc, #12]	; (801ae48 <tcp_write+0x2e4>)
 801ae3a:	f00c f84b 	bl	8026ed4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801ae3e:	e0ce      	b.n	801afde <tcp_write+0x47a>
 801ae40:	0802cc00 	.word	0x0802cc00
 801ae44:	0802cda0 	.word	0x0802cda0
 801ae48:	0802cc54 	.word	0x0802cc54
 801ae4c:	0802cdb8 	.word	0x0802cdb8
 801ae50:	0802cdec 	.word	0x0802cdec
 801ae54:	0802ce04 	.word	0x0802ce04
 801ae58:	0802ce24 	.word	0x0802ce24
 801ae5c:	0802ce44 	.word	0x0802ce44
 801ae60:	0802ce70 	.word	0x0802ce70
    struct pbuf *p;
    u16_t left = len - pos;
 801ae64:	88fa      	ldrh	r2, [r7, #6]
 801ae66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ae6a:	1ad3      	subs	r3, r2, r3
 801ae6c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801ae6e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ae72:	b29b      	uxth	r3, r3
 801ae74:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ae76:	1ad3      	subs	r3, r2, r3
 801ae78:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801ae7a:	8b7a      	ldrh	r2, [r7, #26]
 801ae7c:	8bbb      	ldrh	r3, [r7, #28]
 801ae7e:	4293      	cmp	r3, r2
 801ae80:	bf28      	it	cs
 801ae82:	4613      	movcs	r3, r2
 801ae84:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801ae86:	797b      	ldrb	r3, [r7, #5]
 801ae88:	f003 0301 	and.w	r3, r3, #1
 801ae8c:	2b00      	cmp	r3, #0
 801ae8e:	d036      	beq.n	801aefe <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801ae90:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ae94:	b29a      	uxth	r2, r3
 801ae96:	8b3b      	ldrh	r3, [r7, #24]
 801ae98:	4413      	add	r3, r2
 801ae9a:	b299      	uxth	r1, r3
 801ae9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ae9e:	2b00      	cmp	r3, #0
 801aea0:	bf0c      	ite	eq
 801aea2:	2301      	moveq	r3, #1
 801aea4:	2300      	movne	r3, #0
 801aea6:	b2db      	uxtb	r3, r3
 801aea8:	f107 0012 	add.w	r0, r7, #18
 801aeac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801aeae:	9302      	str	r3, [sp, #8]
 801aeb0:	797b      	ldrb	r3, [r7, #5]
 801aeb2:	9301      	str	r3, [sp, #4]
 801aeb4:	68fb      	ldr	r3, [r7, #12]
 801aeb6:	9300      	str	r3, [sp, #0]
 801aeb8:	4603      	mov	r3, r0
 801aeba:	2036      	movs	r0, #54	; 0x36
 801aebc:	f7ff fd5e 	bl	801a97c <tcp_pbuf_prealloc>
 801aec0:	6338      	str	r0, [r7, #48]	; 0x30
 801aec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aec4:	2b00      	cmp	r3, #0
 801aec6:	f000 8178 	beq.w	801b1ba <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801aeca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aecc:	895b      	ldrh	r3, [r3, #10]
 801aece:	8b3a      	ldrh	r2, [r7, #24]
 801aed0:	429a      	cmp	r2, r3
 801aed2:	d906      	bls.n	801aee2 <tcp_write+0x37e>
 801aed4:	4b8c      	ldr	r3, [pc, #560]	; (801b108 <tcp_write+0x5a4>)
 801aed6:	f240 2266 	movw	r2, #614	; 0x266
 801aeda:	498c      	ldr	r1, [pc, #560]	; (801b10c <tcp_write+0x5a8>)
 801aedc:	488c      	ldr	r0, [pc, #560]	; (801b110 <tcp_write+0x5ac>)
 801aede:	f00b fff9 	bl	8026ed4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801aee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aee4:	685a      	ldr	r2, [r3, #4]
 801aee6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aeea:	18d0      	adds	r0, r2, r3
 801aeec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801aef0:	68ba      	ldr	r2, [r7, #8]
 801aef2:	4413      	add	r3, r2
 801aef4:	8b3a      	ldrh	r2, [r7, #24]
 801aef6:	4619      	mov	r1, r3
 801aef8:	f00b f966 	bl	80261c8 <memcpy>
 801aefc:	e02f      	b.n	801af5e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801aefe:	8a7b      	ldrh	r3, [r7, #18]
 801af00:	2b00      	cmp	r3, #0
 801af02:	d006      	beq.n	801af12 <tcp_write+0x3ae>
 801af04:	4b80      	ldr	r3, [pc, #512]	; (801b108 <tcp_write+0x5a4>)
 801af06:	f240 2271 	movw	r2, #625	; 0x271
 801af0a:	4982      	ldr	r1, [pc, #520]	; (801b114 <tcp_write+0x5b0>)
 801af0c:	4880      	ldr	r0, [pc, #512]	; (801b110 <tcp_write+0x5ac>)
 801af0e:	f00b ffe1 	bl	8026ed4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801af12:	8b3b      	ldrh	r3, [r7, #24]
 801af14:	2201      	movs	r2, #1
 801af16:	4619      	mov	r1, r3
 801af18:	2036      	movs	r0, #54	; 0x36
 801af1a:	f7fa fa95 	bl	8015448 <pbuf_alloc>
 801af1e:	6178      	str	r0, [r7, #20]
 801af20:	697b      	ldr	r3, [r7, #20]
 801af22:	2b00      	cmp	r3, #0
 801af24:	f000 814b 	beq.w	801b1be <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801af28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801af2c:	68ba      	ldr	r2, [r7, #8]
 801af2e:	441a      	add	r2, r3
 801af30:	697b      	ldr	r3, [r7, #20]
 801af32:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801af34:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801af38:	b29b      	uxth	r3, r3
 801af3a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801af3e:	4619      	mov	r1, r3
 801af40:	2036      	movs	r0, #54	; 0x36
 801af42:	f7fa fa81 	bl	8015448 <pbuf_alloc>
 801af46:	6338      	str	r0, [r7, #48]	; 0x30
 801af48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af4a:	2b00      	cmp	r3, #0
 801af4c:	d103      	bne.n	801af56 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801af4e:	6978      	ldr	r0, [r7, #20]
 801af50:	f7fa fd90 	bl	8015a74 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801af54:	e136      	b.n	801b1c4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801af56:	6979      	ldr	r1, [r7, #20]
 801af58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801af5a:	f7fa fe59 	bl	8015c10 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801af5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801af60:	f7fa fe16 	bl	8015b90 <pbuf_clen>
 801af64:	4603      	mov	r3, r0
 801af66:	461a      	mov	r2, r3
 801af68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801af6c:	4413      	add	r3, r2
 801af6e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801af72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801af76:	2b09      	cmp	r3, #9
 801af78:	d903      	bls.n	801af82 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801af7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801af7c:	f7fa fd7a 	bl	8015a74 <pbuf_free>
      goto memerr;
 801af80:	e120      	b.n	801b1c4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801af82:	68fb      	ldr	r3, [r7, #12]
 801af84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801af86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801af8a:	441a      	add	r2, r3
 801af8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801af90:	9300      	str	r3, [sp, #0]
 801af92:	4613      	mov	r3, r2
 801af94:	2200      	movs	r2, #0
 801af96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801af98:	68f8      	ldr	r0, [r7, #12]
 801af9a:	f7ff fc51 	bl	801a840 <tcp_create_segment>
 801af9e:	64f8      	str	r0, [r7, #76]	; 0x4c
 801afa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801afa2:	2b00      	cmp	r3, #0
 801afa4:	f000 810d 	beq.w	801b1c2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801afa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801afaa:	2b00      	cmp	r3, #0
 801afac:	d102      	bne.n	801afb4 <tcp_write+0x450>
      queue = seg;
 801afae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801afb0:	647b      	str	r3, [r7, #68]	; 0x44
 801afb2:	e00c      	b.n	801afce <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801afb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801afb6:	2b00      	cmp	r3, #0
 801afb8:	d106      	bne.n	801afc8 <tcp_write+0x464>
 801afba:	4b53      	ldr	r3, [pc, #332]	; (801b108 <tcp_write+0x5a4>)
 801afbc:	f240 22ab 	movw	r2, #683	; 0x2ab
 801afc0:	4955      	ldr	r1, [pc, #340]	; (801b118 <tcp_write+0x5b4>)
 801afc2:	4853      	ldr	r0, [pc, #332]	; (801b110 <tcp_write+0x5ac>)
 801afc4:	f00b ff86 	bl	8026ed4 <iprintf>
      prev_seg->next = seg;
 801afc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801afca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801afcc:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801afce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801afd0:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801afd2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801afd6:	8b3b      	ldrh	r3, [r7, #24]
 801afd8:	4413      	add	r3, r2
 801afda:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801afde:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801afe2:	88fb      	ldrh	r3, [r7, #6]
 801afe4:	429a      	cmp	r2, r3
 801afe6:	f4ff af3d 	bcc.w	801ae64 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801afea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801afec:	2b00      	cmp	r3, #0
 801afee:	d02c      	beq.n	801b04a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801aff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aff2:	685b      	ldr	r3, [r3, #4]
 801aff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801aff6:	e01e      	b.n	801b036 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801aff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801affa:	891a      	ldrh	r2, [r3, #8]
 801affc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801affe:	4413      	add	r3, r2
 801b000:	b29a      	uxth	r2, r3
 801b002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b004:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801b006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b008:	681b      	ldr	r3, [r3, #0]
 801b00a:	2b00      	cmp	r3, #0
 801b00c:	d110      	bne.n	801b030 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801b00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b010:	685b      	ldr	r3, [r3, #4]
 801b012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b014:	8952      	ldrh	r2, [r2, #10]
 801b016:	4413      	add	r3, r2
 801b018:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801b01a:	68b9      	ldr	r1, [r7, #8]
 801b01c:	4618      	mov	r0, r3
 801b01e:	f00b f8d3 	bl	80261c8 <memcpy>
        p->len += oversize_used;
 801b022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b024:	895a      	ldrh	r2, [r3, #10]
 801b026:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b028:	4413      	add	r3, r2
 801b02a:	b29a      	uxth	r2, r3
 801b02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b02e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801b030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b032:	681b      	ldr	r3, [r3, #0]
 801b034:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b038:	2b00      	cmp	r3, #0
 801b03a:	d1dd      	bne.n	801aff8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801b03c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b03e:	891a      	ldrh	r2, [r3, #8]
 801b040:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b042:	4413      	add	r3, r2
 801b044:	b29a      	uxth	r2, r3
 801b046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b048:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801b04a:	8a7a      	ldrh	r2, [r7, #18]
 801b04c:	68fb      	ldr	r3, [r7, #12]
 801b04e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801b052:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b054:	2b00      	cmp	r3, #0
 801b056:	d018      	beq.n	801b08a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801b058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d106      	bne.n	801b06c <tcp_write+0x508>
 801b05e:	4b2a      	ldr	r3, [pc, #168]	; (801b108 <tcp_write+0x5a4>)
 801b060:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801b064:	492d      	ldr	r1, [pc, #180]	; (801b11c <tcp_write+0x5b8>)
 801b066:	482a      	ldr	r0, [pc, #168]	; (801b110 <tcp_write+0x5ac>)
 801b068:	f00b ff34 	bl	8026ed4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801b06c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b06e:	685b      	ldr	r3, [r3, #4]
 801b070:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801b072:	4618      	mov	r0, r3
 801b074:	f7fa fdcc 	bl	8015c10 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801b078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b07a:	891a      	ldrh	r2, [r3, #8]
 801b07c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b07e:	891b      	ldrh	r3, [r3, #8]
 801b080:	4413      	add	r3, r2
 801b082:	b29a      	uxth	r2, r3
 801b084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b086:	811a      	strh	r2, [r3, #8]
 801b088:	e037      	b.n	801b0fa <tcp_write+0x596>
  } else if (extendlen > 0) {
 801b08a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b08c:	2b00      	cmp	r3, #0
 801b08e:	d034      	beq.n	801b0fa <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801b090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b092:	2b00      	cmp	r3, #0
 801b094:	d003      	beq.n	801b09e <tcp_write+0x53a>
 801b096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b098:	685b      	ldr	r3, [r3, #4]
 801b09a:	2b00      	cmp	r3, #0
 801b09c:	d106      	bne.n	801b0ac <tcp_write+0x548>
 801b09e:	4b1a      	ldr	r3, [pc, #104]	; (801b108 <tcp_write+0x5a4>)
 801b0a0:	f240 22e6 	movw	r2, #742	; 0x2e6
 801b0a4:	491e      	ldr	r1, [pc, #120]	; (801b120 <tcp_write+0x5bc>)
 801b0a6:	481a      	ldr	r0, [pc, #104]	; (801b110 <tcp_write+0x5ac>)
 801b0a8:	f00b ff14 	bl	8026ed4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801b0ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b0ae:	685b      	ldr	r3, [r3, #4]
 801b0b0:	62bb      	str	r3, [r7, #40]	; 0x28
 801b0b2:	e009      	b.n	801b0c8 <tcp_write+0x564>
      p->tot_len += extendlen;
 801b0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0b6:	891a      	ldrh	r2, [r3, #8]
 801b0b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b0ba:	4413      	add	r3, r2
 801b0bc:	b29a      	uxth	r2, r3
 801b0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0c0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801b0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0c4:	681b      	ldr	r3, [r3, #0]
 801b0c6:	62bb      	str	r3, [r7, #40]	; 0x28
 801b0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0ca:	681b      	ldr	r3, [r3, #0]
 801b0cc:	2b00      	cmp	r3, #0
 801b0ce:	d1f1      	bne.n	801b0b4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801b0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0d2:	891a      	ldrh	r2, [r3, #8]
 801b0d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b0d6:	4413      	add	r3, r2
 801b0d8:	b29a      	uxth	r2, r3
 801b0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0dc:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801b0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0e0:	895a      	ldrh	r2, [r3, #10]
 801b0e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b0e4:	4413      	add	r3, r2
 801b0e6:	b29a      	uxth	r2, r3
 801b0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0ea:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801b0ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b0ee:	891a      	ldrh	r2, [r3, #8]
 801b0f0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b0f2:	4413      	add	r3, r2
 801b0f4:	b29a      	uxth	r2, r3
 801b0f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b0f8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801b0fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b0fc:	2b00      	cmp	r3, #0
 801b0fe:	d111      	bne.n	801b124 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801b100:	68fb      	ldr	r3, [r7, #12]
 801b102:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b104:	66da      	str	r2, [r3, #108]	; 0x6c
 801b106:	e010      	b.n	801b12a <tcp_write+0x5c6>
 801b108:	0802cc00 	.word	0x0802cc00
 801b10c:	0802cea0 	.word	0x0802cea0
 801b110:	0802cc54 	.word	0x0802cc54
 801b114:	0802cee0 	.word	0x0802cee0
 801b118:	0802cef0 	.word	0x0802cef0
 801b11c:	0802cf04 	.word	0x0802cf04
 801b120:	0802cf3c 	.word	0x0802cf3c
  } else {
    last_unsent->next = queue;
 801b124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b126:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b128:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801b12a:	68fb      	ldr	r3, [r7, #12]
 801b12c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801b12e:	88fb      	ldrh	r3, [r7, #6]
 801b130:	441a      	add	r2, r3
 801b132:	68fb      	ldr	r3, [r7, #12]
 801b134:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801b136:	68fb      	ldr	r3, [r7, #12]
 801b138:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801b13c:	88fb      	ldrh	r3, [r7, #6]
 801b13e:	1ad3      	subs	r3, r2, r3
 801b140:	b29a      	uxth	r2, r3
 801b142:	68fb      	ldr	r3, [r7, #12]
 801b144:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801b148:	68fb      	ldr	r3, [r7, #12]
 801b14a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801b14e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801b152:	68fb      	ldr	r3, [r7, #12]
 801b154:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b158:	2b00      	cmp	r3, #0
 801b15a:	d00e      	beq.n	801b17a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801b15c:	68fb      	ldr	r3, [r7, #12]
 801b15e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b160:	2b00      	cmp	r3, #0
 801b162:	d10a      	bne.n	801b17a <tcp_write+0x616>
 801b164:	68fb      	ldr	r3, [r7, #12]
 801b166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b168:	2b00      	cmp	r3, #0
 801b16a:	d106      	bne.n	801b17a <tcp_write+0x616>
 801b16c:	4b2c      	ldr	r3, [pc, #176]	; (801b220 <tcp_write+0x6bc>)
 801b16e:	f240 3212 	movw	r2, #786	; 0x312
 801b172:	492c      	ldr	r1, [pc, #176]	; (801b224 <tcp_write+0x6c0>)
 801b174:	482c      	ldr	r0, [pc, #176]	; (801b228 <tcp_write+0x6c4>)
 801b176:	f00b fead 	bl	8026ed4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801b17a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b17c:	2b00      	cmp	r3, #0
 801b17e:	d016      	beq.n	801b1ae <tcp_write+0x64a>
 801b180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b182:	68db      	ldr	r3, [r3, #12]
 801b184:	2b00      	cmp	r3, #0
 801b186:	d012      	beq.n	801b1ae <tcp_write+0x64a>
 801b188:	797b      	ldrb	r3, [r7, #5]
 801b18a:	f003 0302 	and.w	r3, r3, #2
 801b18e:	2b00      	cmp	r3, #0
 801b190:	d10d      	bne.n	801b1ae <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801b192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b194:	68db      	ldr	r3, [r3, #12]
 801b196:	899b      	ldrh	r3, [r3, #12]
 801b198:	b29c      	uxth	r4, r3
 801b19a:	2008      	movs	r0, #8
 801b19c:	f7f7 ff98 	bl	80130d0 <lwip_htons>
 801b1a0:	4603      	mov	r3, r0
 801b1a2:	461a      	mov	r2, r3
 801b1a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b1a6:	68db      	ldr	r3, [r3, #12]
 801b1a8:	4322      	orrs	r2, r4
 801b1aa:	b292      	uxth	r2, r2
 801b1ac:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801b1ae:	2300      	movs	r3, #0
 801b1b0:	e031      	b.n	801b216 <tcp_write+0x6b2>
          goto memerr;
 801b1b2:	bf00      	nop
 801b1b4:	e006      	b.n	801b1c4 <tcp_write+0x660>
            goto memerr;
 801b1b6:	bf00      	nop
 801b1b8:	e004      	b.n	801b1c4 <tcp_write+0x660>
        goto memerr;
 801b1ba:	bf00      	nop
 801b1bc:	e002      	b.n	801b1c4 <tcp_write+0x660>
        goto memerr;
 801b1be:	bf00      	nop
 801b1c0:	e000      	b.n	801b1c4 <tcp_write+0x660>
      goto memerr;
 801b1c2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b1c4:	68fb      	ldr	r3, [r7, #12]
 801b1c6:	8b5b      	ldrh	r3, [r3, #26]
 801b1c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b1cc:	b29a      	uxth	r2, r3
 801b1ce:	68fb      	ldr	r3, [r7, #12]
 801b1d0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801b1d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b1d4:	2b00      	cmp	r3, #0
 801b1d6:	d002      	beq.n	801b1de <tcp_write+0x67a>
    pbuf_free(concat_p);
 801b1d8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801b1da:	f7fa fc4b 	bl	8015a74 <pbuf_free>
  }
  if (queue != NULL) {
 801b1de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b1e0:	2b00      	cmp	r3, #0
 801b1e2:	d002      	beq.n	801b1ea <tcp_write+0x686>
    tcp_segs_free(queue);
 801b1e4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801b1e6:	f7fc fb6f 	bl	80178c8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801b1ea:	68fb      	ldr	r3, [r7, #12]
 801b1ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b1f0:	2b00      	cmp	r3, #0
 801b1f2:	d00e      	beq.n	801b212 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801b1f4:	68fb      	ldr	r3, [r7, #12]
 801b1f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b1f8:	2b00      	cmp	r3, #0
 801b1fa:	d10a      	bne.n	801b212 <tcp_write+0x6ae>
 801b1fc:	68fb      	ldr	r3, [r7, #12]
 801b1fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b200:	2b00      	cmp	r3, #0
 801b202:	d106      	bne.n	801b212 <tcp_write+0x6ae>
 801b204:	4b06      	ldr	r3, [pc, #24]	; (801b220 <tcp_write+0x6bc>)
 801b206:	f240 3227 	movw	r2, #807	; 0x327
 801b20a:	4906      	ldr	r1, [pc, #24]	; (801b224 <tcp_write+0x6c0>)
 801b20c:	4806      	ldr	r0, [pc, #24]	; (801b228 <tcp_write+0x6c4>)
 801b20e:	f00b fe61 	bl	8026ed4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801b212:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b216:	4618      	mov	r0, r3
 801b218:	375c      	adds	r7, #92	; 0x5c
 801b21a:	46bd      	mov	sp, r7
 801b21c:	bd90      	pop	{r4, r7, pc}
 801b21e:	bf00      	nop
 801b220:	0802cc00 	.word	0x0802cc00
 801b224:	0802cf74 	.word	0x0802cf74
 801b228:	0802cc54 	.word	0x0802cc54

0801b22c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801b22c:	b590      	push	{r4, r7, lr}
 801b22e:	b08b      	sub	sp, #44	; 0x2c
 801b230:	af02      	add	r7, sp, #8
 801b232:	6078      	str	r0, [r7, #4]
 801b234:	460b      	mov	r3, r1
 801b236:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801b238:	2300      	movs	r3, #0
 801b23a:	61fb      	str	r3, [r7, #28]
 801b23c:	2300      	movs	r3, #0
 801b23e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801b240:	2300      	movs	r3, #0
 801b242:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801b244:	687b      	ldr	r3, [r7, #4]
 801b246:	2b00      	cmp	r3, #0
 801b248:	d106      	bne.n	801b258 <tcp_split_unsent_seg+0x2c>
 801b24a:	4b95      	ldr	r3, [pc, #596]	; (801b4a0 <tcp_split_unsent_seg+0x274>)
 801b24c:	f240 324b 	movw	r2, #843	; 0x34b
 801b250:	4994      	ldr	r1, [pc, #592]	; (801b4a4 <tcp_split_unsent_seg+0x278>)
 801b252:	4895      	ldr	r0, [pc, #596]	; (801b4a8 <tcp_split_unsent_seg+0x27c>)
 801b254:	f00b fe3e 	bl	8026ed4 <iprintf>

  useg = pcb->unsent;
 801b258:	687b      	ldr	r3, [r7, #4]
 801b25a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b25c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801b25e:	697b      	ldr	r3, [r7, #20]
 801b260:	2b00      	cmp	r3, #0
 801b262:	d102      	bne.n	801b26a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801b264:	f04f 33ff 	mov.w	r3, #4294967295
 801b268:	e116      	b.n	801b498 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801b26a:	887b      	ldrh	r3, [r7, #2]
 801b26c:	2b00      	cmp	r3, #0
 801b26e:	d109      	bne.n	801b284 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801b270:	4b8b      	ldr	r3, [pc, #556]	; (801b4a0 <tcp_split_unsent_seg+0x274>)
 801b272:	f240 3253 	movw	r2, #851	; 0x353
 801b276:	498d      	ldr	r1, [pc, #564]	; (801b4ac <tcp_split_unsent_seg+0x280>)
 801b278:	488b      	ldr	r0, [pc, #556]	; (801b4a8 <tcp_split_unsent_seg+0x27c>)
 801b27a:	f00b fe2b 	bl	8026ed4 <iprintf>
    return ERR_VAL;
 801b27e:	f06f 0305 	mvn.w	r3, #5
 801b282:	e109      	b.n	801b498 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801b284:	697b      	ldr	r3, [r7, #20]
 801b286:	891b      	ldrh	r3, [r3, #8]
 801b288:	887a      	ldrh	r2, [r7, #2]
 801b28a:	429a      	cmp	r2, r3
 801b28c:	d301      	bcc.n	801b292 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801b28e:	2300      	movs	r3, #0
 801b290:	e102      	b.n	801b498 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b296:	887a      	ldrh	r2, [r7, #2]
 801b298:	429a      	cmp	r2, r3
 801b29a:	d906      	bls.n	801b2aa <tcp_split_unsent_seg+0x7e>
 801b29c:	4b80      	ldr	r3, [pc, #512]	; (801b4a0 <tcp_split_unsent_seg+0x274>)
 801b29e:	f240 325b 	movw	r2, #859	; 0x35b
 801b2a2:	4983      	ldr	r1, [pc, #524]	; (801b4b0 <tcp_split_unsent_seg+0x284>)
 801b2a4:	4880      	ldr	r0, [pc, #512]	; (801b4a8 <tcp_split_unsent_seg+0x27c>)
 801b2a6:	f00b fe15 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801b2aa:	697b      	ldr	r3, [r7, #20]
 801b2ac:	891b      	ldrh	r3, [r3, #8]
 801b2ae:	2b00      	cmp	r3, #0
 801b2b0:	d106      	bne.n	801b2c0 <tcp_split_unsent_seg+0x94>
 801b2b2:	4b7b      	ldr	r3, [pc, #492]	; (801b4a0 <tcp_split_unsent_seg+0x274>)
 801b2b4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801b2b8:	497e      	ldr	r1, [pc, #504]	; (801b4b4 <tcp_split_unsent_seg+0x288>)
 801b2ba:	487b      	ldr	r0, [pc, #492]	; (801b4a8 <tcp_split_unsent_seg+0x27c>)
 801b2bc:	f00b fe0a 	bl	8026ed4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801b2c0:	697b      	ldr	r3, [r7, #20]
 801b2c2:	7a9b      	ldrb	r3, [r3, #10]
 801b2c4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801b2c6:	7bfb      	ldrb	r3, [r7, #15]
 801b2c8:	009b      	lsls	r3, r3, #2
 801b2ca:	b2db      	uxtb	r3, r3
 801b2cc:	f003 0304 	and.w	r3, r3, #4
 801b2d0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801b2d2:	697b      	ldr	r3, [r7, #20]
 801b2d4:	891a      	ldrh	r2, [r3, #8]
 801b2d6:	887b      	ldrh	r3, [r7, #2]
 801b2d8:	1ad3      	subs	r3, r2, r3
 801b2da:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801b2dc:	7bbb      	ldrb	r3, [r7, #14]
 801b2de:	b29a      	uxth	r2, r3
 801b2e0:	89bb      	ldrh	r3, [r7, #12]
 801b2e2:	4413      	add	r3, r2
 801b2e4:	b29b      	uxth	r3, r3
 801b2e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b2ea:	4619      	mov	r1, r3
 801b2ec:	2036      	movs	r0, #54	; 0x36
 801b2ee:	f7fa f8ab 	bl	8015448 <pbuf_alloc>
 801b2f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b2f4:	693b      	ldr	r3, [r7, #16]
 801b2f6:	2b00      	cmp	r3, #0
 801b2f8:	f000 80b7 	beq.w	801b46a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801b2fc:	697b      	ldr	r3, [r7, #20]
 801b2fe:	685b      	ldr	r3, [r3, #4]
 801b300:	891a      	ldrh	r2, [r3, #8]
 801b302:	697b      	ldr	r3, [r7, #20]
 801b304:	891b      	ldrh	r3, [r3, #8]
 801b306:	1ad3      	subs	r3, r2, r3
 801b308:	b29a      	uxth	r2, r3
 801b30a:	887b      	ldrh	r3, [r7, #2]
 801b30c:	4413      	add	r3, r2
 801b30e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801b310:	697b      	ldr	r3, [r7, #20]
 801b312:	6858      	ldr	r0, [r3, #4]
 801b314:	693b      	ldr	r3, [r7, #16]
 801b316:	685a      	ldr	r2, [r3, #4]
 801b318:	7bbb      	ldrb	r3, [r7, #14]
 801b31a:	18d1      	adds	r1, r2, r3
 801b31c:	897b      	ldrh	r3, [r7, #10]
 801b31e:	89ba      	ldrh	r2, [r7, #12]
 801b320:	f7fa fdae 	bl	8015e80 <pbuf_copy_partial>
 801b324:	4603      	mov	r3, r0
 801b326:	461a      	mov	r2, r3
 801b328:	89bb      	ldrh	r3, [r7, #12]
 801b32a:	4293      	cmp	r3, r2
 801b32c:	f040 809f 	bne.w	801b46e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801b330:	697b      	ldr	r3, [r7, #20]
 801b332:	68db      	ldr	r3, [r3, #12]
 801b334:	899b      	ldrh	r3, [r3, #12]
 801b336:	b29b      	uxth	r3, r3
 801b338:	4618      	mov	r0, r3
 801b33a:	f7f7 fec9 	bl	80130d0 <lwip_htons>
 801b33e:	4603      	mov	r3, r0
 801b340:	b2db      	uxtb	r3, r3
 801b342:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b346:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801b348:	2300      	movs	r3, #0
 801b34a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801b34c:	7efb      	ldrb	r3, [r7, #27]
 801b34e:	f003 0308 	and.w	r3, r3, #8
 801b352:	2b00      	cmp	r3, #0
 801b354:	d007      	beq.n	801b366 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801b356:	7efb      	ldrb	r3, [r7, #27]
 801b358:	f023 0308 	bic.w	r3, r3, #8
 801b35c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801b35e:	7ebb      	ldrb	r3, [r7, #26]
 801b360:	f043 0308 	orr.w	r3, r3, #8
 801b364:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801b366:	7efb      	ldrb	r3, [r7, #27]
 801b368:	f003 0301 	and.w	r3, r3, #1
 801b36c:	2b00      	cmp	r3, #0
 801b36e:	d007      	beq.n	801b380 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801b370:	7efb      	ldrb	r3, [r7, #27]
 801b372:	f023 0301 	bic.w	r3, r3, #1
 801b376:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801b378:	7ebb      	ldrb	r3, [r7, #26]
 801b37a:	f043 0301 	orr.w	r3, r3, #1
 801b37e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801b380:	697b      	ldr	r3, [r7, #20]
 801b382:	68db      	ldr	r3, [r3, #12]
 801b384:	685b      	ldr	r3, [r3, #4]
 801b386:	4618      	mov	r0, r3
 801b388:	f7f7 feb7 	bl	80130fa <lwip_htonl>
 801b38c:	4602      	mov	r2, r0
 801b38e:	887b      	ldrh	r3, [r7, #2]
 801b390:	18d1      	adds	r1, r2, r3
 801b392:	7eba      	ldrb	r2, [r7, #26]
 801b394:	7bfb      	ldrb	r3, [r7, #15]
 801b396:	9300      	str	r3, [sp, #0]
 801b398:	460b      	mov	r3, r1
 801b39a:	6939      	ldr	r1, [r7, #16]
 801b39c:	6878      	ldr	r0, [r7, #4]
 801b39e:	f7ff fa4f 	bl	801a840 <tcp_create_segment>
 801b3a2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801b3a4:	69fb      	ldr	r3, [r7, #28]
 801b3a6:	2b00      	cmp	r3, #0
 801b3a8:	d063      	beq.n	801b472 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801b3aa:	697b      	ldr	r3, [r7, #20]
 801b3ac:	685b      	ldr	r3, [r3, #4]
 801b3ae:	4618      	mov	r0, r3
 801b3b0:	f7fa fbee 	bl	8015b90 <pbuf_clen>
 801b3b4:	4603      	mov	r3, r0
 801b3b6:	461a      	mov	r2, r3
 801b3b8:	687b      	ldr	r3, [r7, #4]
 801b3ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b3be:	1a9b      	subs	r3, r3, r2
 801b3c0:	b29a      	uxth	r2, r3
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801b3c8:	697b      	ldr	r3, [r7, #20]
 801b3ca:	6858      	ldr	r0, [r3, #4]
 801b3cc:	697b      	ldr	r3, [r7, #20]
 801b3ce:	685b      	ldr	r3, [r3, #4]
 801b3d0:	891a      	ldrh	r2, [r3, #8]
 801b3d2:	89bb      	ldrh	r3, [r7, #12]
 801b3d4:	1ad3      	subs	r3, r2, r3
 801b3d6:	b29b      	uxth	r3, r3
 801b3d8:	4619      	mov	r1, r3
 801b3da:	f7fa f993 	bl	8015704 <pbuf_realloc>
  useg->len -= remainder;
 801b3de:	697b      	ldr	r3, [r7, #20]
 801b3e0:	891a      	ldrh	r2, [r3, #8]
 801b3e2:	89bb      	ldrh	r3, [r7, #12]
 801b3e4:	1ad3      	subs	r3, r2, r3
 801b3e6:	b29a      	uxth	r2, r3
 801b3e8:	697b      	ldr	r3, [r7, #20]
 801b3ea:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801b3ec:	697b      	ldr	r3, [r7, #20]
 801b3ee:	68db      	ldr	r3, [r3, #12]
 801b3f0:	899b      	ldrh	r3, [r3, #12]
 801b3f2:	b29c      	uxth	r4, r3
 801b3f4:	7efb      	ldrb	r3, [r7, #27]
 801b3f6:	b29b      	uxth	r3, r3
 801b3f8:	4618      	mov	r0, r3
 801b3fa:	f7f7 fe69 	bl	80130d0 <lwip_htons>
 801b3fe:	4603      	mov	r3, r0
 801b400:	461a      	mov	r2, r3
 801b402:	697b      	ldr	r3, [r7, #20]
 801b404:	68db      	ldr	r3, [r3, #12]
 801b406:	4322      	orrs	r2, r4
 801b408:	b292      	uxth	r2, r2
 801b40a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801b40c:	697b      	ldr	r3, [r7, #20]
 801b40e:	685b      	ldr	r3, [r3, #4]
 801b410:	4618      	mov	r0, r3
 801b412:	f7fa fbbd 	bl	8015b90 <pbuf_clen>
 801b416:	4603      	mov	r3, r0
 801b418:	461a      	mov	r2, r3
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b420:	4413      	add	r3, r2
 801b422:	b29a      	uxth	r2, r3
 801b424:	687b      	ldr	r3, [r7, #4]
 801b426:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801b42a:	69fb      	ldr	r3, [r7, #28]
 801b42c:	685b      	ldr	r3, [r3, #4]
 801b42e:	4618      	mov	r0, r3
 801b430:	f7fa fbae 	bl	8015b90 <pbuf_clen>
 801b434:	4603      	mov	r3, r0
 801b436:	461a      	mov	r2, r3
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b43e:	4413      	add	r3, r2
 801b440:	b29a      	uxth	r2, r3
 801b442:	687b      	ldr	r3, [r7, #4]
 801b444:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801b448:	697b      	ldr	r3, [r7, #20]
 801b44a:	681a      	ldr	r2, [r3, #0]
 801b44c:	69fb      	ldr	r3, [r7, #28]
 801b44e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801b450:	697b      	ldr	r3, [r7, #20]
 801b452:	69fa      	ldr	r2, [r7, #28]
 801b454:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801b456:	69fb      	ldr	r3, [r7, #28]
 801b458:	681b      	ldr	r3, [r3, #0]
 801b45a:	2b00      	cmp	r3, #0
 801b45c:	d103      	bne.n	801b466 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801b45e:	687b      	ldr	r3, [r7, #4]
 801b460:	2200      	movs	r2, #0
 801b462:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801b466:	2300      	movs	r3, #0
 801b468:	e016      	b.n	801b498 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801b46a:	bf00      	nop
 801b46c:	e002      	b.n	801b474 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801b46e:	bf00      	nop
 801b470:	e000      	b.n	801b474 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801b472:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801b474:	69fb      	ldr	r3, [r7, #28]
 801b476:	2b00      	cmp	r3, #0
 801b478:	d006      	beq.n	801b488 <tcp_split_unsent_seg+0x25c>
 801b47a:	4b09      	ldr	r3, [pc, #36]	; (801b4a0 <tcp_split_unsent_seg+0x274>)
 801b47c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801b480:	490d      	ldr	r1, [pc, #52]	; (801b4b8 <tcp_split_unsent_seg+0x28c>)
 801b482:	4809      	ldr	r0, [pc, #36]	; (801b4a8 <tcp_split_unsent_seg+0x27c>)
 801b484:	f00b fd26 	bl	8026ed4 <iprintf>
  if (p != NULL) {
 801b488:	693b      	ldr	r3, [r7, #16]
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	d002      	beq.n	801b494 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801b48e:	6938      	ldr	r0, [r7, #16]
 801b490:	f7fa faf0 	bl	8015a74 <pbuf_free>
  }

  return ERR_MEM;
 801b494:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b498:	4618      	mov	r0, r3
 801b49a:	3724      	adds	r7, #36	; 0x24
 801b49c:	46bd      	mov	sp, r7
 801b49e:	bd90      	pop	{r4, r7, pc}
 801b4a0:	0802cc00 	.word	0x0802cc00
 801b4a4:	0802cf94 	.word	0x0802cf94
 801b4a8:	0802cc54 	.word	0x0802cc54
 801b4ac:	0802cfb8 	.word	0x0802cfb8
 801b4b0:	0802cfdc 	.word	0x0802cfdc
 801b4b4:	0802cfec 	.word	0x0802cfec
 801b4b8:	0802cffc 	.word	0x0802cffc

0801b4bc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801b4bc:	b590      	push	{r4, r7, lr}
 801b4be:	b085      	sub	sp, #20
 801b4c0:	af00      	add	r7, sp, #0
 801b4c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	2b00      	cmp	r3, #0
 801b4c8:	d106      	bne.n	801b4d8 <tcp_send_fin+0x1c>
 801b4ca:	4b21      	ldr	r3, [pc, #132]	; (801b550 <tcp_send_fin+0x94>)
 801b4cc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801b4d0:	4920      	ldr	r1, [pc, #128]	; (801b554 <tcp_send_fin+0x98>)
 801b4d2:	4821      	ldr	r0, [pc, #132]	; (801b558 <tcp_send_fin+0x9c>)
 801b4d4:	f00b fcfe 	bl	8026ed4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b4dc:	2b00      	cmp	r3, #0
 801b4de:	d02e      	beq.n	801b53e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b4e4:	60fb      	str	r3, [r7, #12]
 801b4e6:	e002      	b.n	801b4ee <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801b4e8:	68fb      	ldr	r3, [r7, #12]
 801b4ea:	681b      	ldr	r3, [r3, #0]
 801b4ec:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801b4ee:	68fb      	ldr	r3, [r7, #12]
 801b4f0:	681b      	ldr	r3, [r3, #0]
 801b4f2:	2b00      	cmp	r3, #0
 801b4f4:	d1f8      	bne.n	801b4e8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801b4f6:	68fb      	ldr	r3, [r7, #12]
 801b4f8:	68db      	ldr	r3, [r3, #12]
 801b4fa:	899b      	ldrh	r3, [r3, #12]
 801b4fc:	b29b      	uxth	r3, r3
 801b4fe:	4618      	mov	r0, r3
 801b500:	f7f7 fde6 	bl	80130d0 <lwip_htons>
 801b504:	4603      	mov	r3, r0
 801b506:	b2db      	uxtb	r3, r3
 801b508:	f003 0307 	and.w	r3, r3, #7
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	d116      	bne.n	801b53e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801b510:	68fb      	ldr	r3, [r7, #12]
 801b512:	68db      	ldr	r3, [r3, #12]
 801b514:	899b      	ldrh	r3, [r3, #12]
 801b516:	b29c      	uxth	r4, r3
 801b518:	2001      	movs	r0, #1
 801b51a:	f7f7 fdd9 	bl	80130d0 <lwip_htons>
 801b51e:	4603      	mov	r3, r0
 801b520:	461a      	mov	r2, r3
 801b522:	68fb      	ldr	r3, [r7, #12]
 801b524:	68db      	ldr	r3, [r3, #12]
 801b526:	4322      	orrs	r2, r4
 801b528:	b292      	uxth	r2, r2
 801b52a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801b52c:	687b      	ldr	r3, [r7, #4]
 801b52e:	8b5b      	ldrh	r3, [r3, #26]
 801b530:	f043 0320 	orr.w	r3, r3, #32
 801b534:	b29a      	uxth	r2, r3
 801b536:	687b      	ldr	r3, [r7, #4]
 801b538:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801b53a:	2300      	movs	r3, #0
 801b53c:	e004      	b.n	801b548 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801b53e:	2101      	movs	r1, #1
 801b540:	6878      	ldr	r0, [r7, #4]
 801b542:	f000 f80b 	bl	801b55c <tcp_enqueue_flags>
 801b546:	4603      	mov	r3, r0
}
 801b548:	4618      	mov	r0, r3
 801b54a:	3714      	adds	r7, #20
 801b54c:	46bd      	mov	sp, r7
 801b54e:	bd90      	pop	{r4, r7, pc}
 801b550:	0802cc00 	.word	0x0802cc00
 801b554:	0802d008 	.word	0x0802d008
 801b558:	0802cc54 	.word	0x0802cc54

0801b55c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801b55c:	b580      	push	{r7, lr}
 801b55e:	b08a      	sub	sp, #40	; 0x28
 801b560:	af02      	add	r7, sp, #8
 801b562:	6078      	str	r0, [r7, #4]
 801b564:	460b      	mov	r3, r1
 801b566:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801b568:	2300      	movs	r3, #0
 801b56a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801b56c:	2300      	movs	r3, #0
 801b56e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801b570:	78fb      	ldrb	r3, [r7, #3]
 801b572:	f003 0303 	and.w	r3, r3, #3
 801b576:	2b00      	cmp	r3, #0
 801b578:	d106      	bne.n	801b588 <tcp_enqueue_flags+0x2c>
 801b57a:	4b67      	ldr	r3, [pc, #412]	; (801b718 <tcp_enqueue_flags+0x1bc>)
 801b57c:	f240 4211 	movw	r2, #1041	; 0x411
 801b580:	4966      	ldr	r1, [pc, #408]	; (801b71c <tcp_enqueue_flags+0x1c0>)
 801b582:	4867      	ldr	r0, [pc, #412]	; (801b720 <tcp_enqueue_flags+0x1c4>)
 801b584:	f00b fca6 	bl	8026ed4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801b588:	687b      	ldr	r3, [r7, #4]
 801b58a:	2b00      	cmp	r3, #0
 801b58c:	d106      	bne.n	801b59c <tcp_enqueue_flags+0x40>
 801b58e:	4b62      	ldr	r3, [pc, #392]	; (801b718 <tcp_enqueue_flags+0x1bc>)
 801b590:	f240 4213 	movw	r2, #1043	; 0x413
 801b594:	4963      	ldr	r1, [pc, #396]	; (801b724 <tcp_enqueue_flags+0x1c8>)
 801b596:	4862      	ldr	r0, [pc, #392]	; (801b720 <tcp_enqueue_flags+0x1c4>)
 801b598:	f00b fc9c 	bl	8026ed4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801b59c:	78fb      	ldrb	r3, [r7, #3]
 801b59e:	f003 0302 	and.w	r3, r3, #2
 801b5a2:	2b00      	cmp	r3, #0
 801b5a4:	d001      	beq.n	801b5aa <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801b5a6:	2301      	movs	r3, #1
 801b5a8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801b5aa:	7ffb      	ldrb	r3, [r7, #31]
 801b5ac:	009b      	lsls	r3, r3, #2
 801b5ae:	b2db      	uxtb	r3, r3
 801b5b0:	f003 0304 	and.w	r3, r3, #4
 801b5b4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801b5b6:	7dfb      	ldrb	r3, [r7, #23]
 801b5b8:	b29b      	uxth	r3, r3
 801b5ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b5be:	4619      	mov	r1, r3
 801b5c0:	2036      	movs	r0, #54	; 0x36
 801b5c2:	f7f9 ff41 	bl	8015448 <pbuf_alloc>
 801b5c6:	6138      	str	r0, [r7, #16]
 801b5c8:	693b      	ldr	r3, [r7, #16]
 801b5ca:	2b00      	cmp	r3, #0
 801b5cc:	d109      	bne.n	801b5e2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b5ce:	687b      	ldr	r3, [r7, #4]
 801b5d0:	8b5b      	ldrh	r3, [r3, #26]
 801b5d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b5d6:	b29a      	uxth	r2, r3
 801b5d8:	687b      	ldr	r3, [r7, #4]
 801b5da:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801b5dc:	f04f 33ff 	mov.w	r3, #4294967295
 801b5e0:	e095      	b.n	801b70e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801b5e2:	693b      	ldr	r3, [r7, #16]
 801b5e4:	895a      	ldrh	r2, [r3, #10]
 801b5e6:	7dfb      	ldrb	r3, [r7, #23]
 801b5e8:	b29b      	uxth	r3, r3
 801b5ea:	429a      	cmp	r2, r3
 801b5ec:	d206      	bcs.n	801b5fc <tcp_enqueue_flags+0xa0>
 801b5ee:	4b4a      	ldr	r3, [pc, #296]	; (801b718 <tcp_enqueue_flags+0x1bc>)
 801b5f0:	f240 4239 	movw	r2, #1081	; 0x439
 801b5f4:	494c      	ldr	r1, [pc, #304]	; (801b728 <tcp_enqueue_flags+0x1cc>)
 801b5f6:	484a      	ldr	r0, [pc, #296]	; (801b720 <tcp_enqueue_flags+0x1c4>)
 801b5f8:	f00b fc6c 	bl	8026ed4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801b5fc:	687b      	ldr	r3, [r7, #4]
 801b5fe:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801b600:	78fa      	ldrb	r2, [r7, #3]
 801b602:	7ffb      	ldrb	r3, [r7, #31]
 801b604:	9300      	str	r3, [sp, #0]
 801b606:	460b      	mov	r3, r1
 801b608:	6939      	ldr	r1, [r7, #16]
 801b60a:	6878      	ldr	r0, [r7, #4]
 801b60c:	f7ff f918 	bl	801a840 <tcp_create_segment>
 801b610:	60f8      	str	r0, [r7, #12]
 801b612:	68fb      	ldr	r3, [r7, #12]
 801b614:	2b00      	cmp	r3, #0
 801b616:	d109      	bne.n	801b62c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	8b5b      	ldrh	r3, [r3, #26]
 801b61c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b620:	b29a      	uxth	r2, r3
 801b622:	687b      	ldr	r3, [r7, #4]
 801b624:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801b626:	f04f 33ff 	mov.w	r3, #4294967295
 801b62a:	e070      	b.n	801b70e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801b62c:	68fb      	ldr	r3, [r7, #12]
 801b62e:	68db      	ldr	r3, [r3, #12]
 801b630:	f003 0303 	and.w	r3, r3, #3
 801b634:	2b00      	cmp	r3, #0
 801b636:	d006      	beq.n	801b646 <tcp_enqueue_flags+0xea>
 801b638:	4b37      	ldr	r3, [pc, #220]	; (801b718 <tcp_enqueue_flags+0x1bc>)
 801b63a:	f240 4242 	movw	r2, #1090	; 0x442
 801b63e:	493b      	ldr	r1, [pc, #236]	; (801b72c <tcp_enqueue_flags+0x1d0>)
 801b640:	4837      	ldr	r0, [pc, #220]	; (801b720 <tcp_enqueue_flags+0x1c4>)
 801b642:	f00b fc47 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801b646:	68fb      	ldr	r3, [r7, #12]
 801b648:	891b      	ldrh	r3, [r3, #8]
 801b64a:	2b00      	cmp	r3, #0
 801b64c:	d006      	beq.n	801b65c <tcp_enqueue_flags+0x100>
 801b64e:	4b32      	ldr	r3, [pc, #200]	; (801b718 <tcp_enqueue_flags+0x1bc>)
 801b650:	f240 4243 	movw	r2, #1091	; 0x443
 801b654:	4936      	ldr	r1, [pc, #216]	; (801b730 <tcp_enqueue_flags+0x1d4>)
 801b656:	4832      	ldr	r0, [pc, #200]	; (801b720 <tcp_enqueue_flags+0x1c4>)
 801b658:	f00b fc3c 	bl	8026ed4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801b65c:	687b      	ldr	r3, [r7, #4]
 801b65e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b660:	2b00      	cmp	r3, #0
 801b662:	d103      	bne.n	801b66c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801b664:	687b      	ldr	r3, [r7, #4]
 801b666:	68fa      	ldr	r2, [r7, #12]
 801b668:	66da      	str	r2, [r3, #108]	; 0x6c
 801b66a:	e00d      	b.n	801b688 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801b66c:	687b      	ldr	r3, [r7, #4]
 801b66e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b670:	61bb      	str	r3, [r7, #24]
 801b672:	e002      	b.n	801b67a <tcp_enqueue_flags+0x11e>
 801b674:	69bb      	ldr	r3, [r7, #24]
 801b676:	681b      	ldr	r3, [r3, #0]
 801b678:	61bb      	str	r3, [r7, #24]
 801b67a:	69bb      	ldr	r3, [r7, #24]
 801b67c:	681b      	ldr	r3, [r3, #0]
 801b67e:	2b00      	cmp	r3, #0
 801b680:	d1f8      	bne.n	801b674 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801b682:	69bb      	ldr	r3, [r7, #24]
 801b684:	68fa      	ldr	r2, [r7, #12]
 801b686:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801b688:	687b      	ldr	r3, [r7, #4]
 801b68a:	2200      	movs	r2, #0
 801b68c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801b690:	78fb      	ldrb	r3, [r7, #3]
 801b692:	f003 0302 	and.w	r3, r3, #2
 801b696:	2b00      	cmp	r3, #0
 801b698:	d104      	bne.n	801b6a4 <tcp_enqueue_flags+0x148>
 801b69a:	78fb      	ldrb	r3, [r7, #3]
 801b69c:	f003 0301 	and.w	r3, r3, #1
 801b6a0:	2b00      	cmp	r3, #0
 801b6a2:	d004      	beq.n	801b6ae <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801b6a4:	687b      	ldr	r3, [r7, #4]
 801b6a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b6a8:	1c5a      	adds	r2, r3, #1
 801b6aa:	687b      	ldr	r3, [r7, #4]
 801b6ac:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801b6ae:	78fb      	ldrb	r3, [r7, #3]
 801b6b0:	f003 0301 	and.w	r3, r3, #1
 801b6b4:	2b00      	cmp	r3, #0
 801b6b6:	d006      	beq.n	801b6c6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801b6b8:	687b      	ldr	r3, [r7, #4]
 801b6ba:	8b5b      	ldrh	r3, [r3, #26]
 801b6bc:	f043 0320 	orr.w	r3, r3, #32
 801b6c0:	b29a      	uxth	r2, r3
 801b6c2:	687b      	ldr	r3, [r7, #4]
 801b6c4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801b6c6:	68fb      	ldr	r3, [r7, #12]
 801b6c8:	685b      	ldr	r3, [r3, #4]
 801b6ca:	4618      	mov	r0, r3
 801b6cc:	f7fa fa60 	bl	8015b90 <pbuf_clen>
 801b6d0:	4603      	mov	r3, r0
 801b6d2:	461a      	mov	r2, r3
 801b6d4:	687b      	ldr	r3, [r7, #4]
 801b6d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b6da:	4413      	add	r3, r2
 801b6dc:	b29a      	uxth	r2, r3
 801b6de:	687b      	ldr	r3, [r7, #4]
 801b6e0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801b6e4:	687b      	ldr	r3, [r7, #4]
 801b6e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b6ea:	2b00      	cmp	r3, #0
 801b6ec:	d00e      	beq.n	801b70c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801b6ee:	687b      	ldr	r3, [r7, #4]
 801b6f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b6f2:	2b00      	cmp	r3, #0
 801b6f4:	d10a      	bne.n	801b70c <tcp_enqueue_flags+0x1b0>
 801b6f6:	687b      	ldr	r3, [r7, #4]
 801b6f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b6fa:	2b00      	cmp	r3, #0
 801b6fc:	d106      	bne.n	801b70c <tcp_enqueue_flags+0x1b0>
 801b6fe:	4b06      	ldr	r3, [pc, #24]	; (801b718 <tcp_enqueue_flags+0x1bc>)
 801b700:	f240 4265 	movw	r2, #1125	; 0x465
 801b704:	490b      	ldr	r1, [pc, #44]	; (801b734 <tcp_enqueue_flags+0x1d8>)
 801b706:	4806      	ldr	r0, [pc, #24]	; (801b720 <tcp_enqueue_flags+0x1c4>)
 801b708:	f00b fbe4 	bl	8026ed4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801b70c:	2300      	movs	r3, #0
}
 801b70e:	4618      	mov	r0, r3
 801b710:	3720      	adds	r7, #32
 801b712:	46bd      	mov	sp, r7
 801b714:	bd80      	pop	{r7, pc}
 801b716:	bf00      	nop
 801b718:	0802cc00 	.word	0x0802cc00
 801b71c:	0802d024 	.word	0x0802d024
 801b720:	0802cc54 	.word	0x0802cc54
 801b724:	0802d07c 	.word	0x0802d07c
 801b728:	0802d09c 	.word	0x0802d09c
 801b72c:	0802d0d8 	.word	0x0802d0d8
 801b730:	0802d0f0 	.word	0x0802d0f0
 801b734:	0802d11c 	.word	0x0802d11c

0801b738 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801b738:	b5b0      	push	{r4, r5, r7, lr}
 801b73a:	b08a      	sub	sp, #40	; 0x28
 801b73c:	af00      	add	r7, sp, #0
 801b73e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801b740:	687b      	ldr	r3, [r7, #4]
 801b742:	2b00      	cmp	r3, #0
 801b744:	d106      	bne.n	801b754 <tcp_output+0x1c>
 801b746:	4b9e      	ldr	r3, [pc, #632]	; (801b9c0 <tcp_output+0x288>)
 801b748:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801b74c:	499d      	ldr	r1, [pc, #628]	; (801b9c4 <tcp_output+0x28c>)
 801b74e:	489e      	ldr	r0, [pc, #632]	; (801b9c8 <tcp_output+0x290>)
 801b750:	f00b fbc0 	bl	8026ed4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801b754:	687b      	ldr	r3, [r7, #4]
 801b756:	7d1b      	ldrb	r3, [r3, #20]
 801b758:	2b01      	cmp	r3, #1
 801b75a:	d106      	bne.n	801b76a <tcp_output+0x32>
 801b75c:	4b98      	ldr	r3, [pc, #608]	; (801b9c0 <tcp_output+0x288>)
 801b75e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801b762:	499a      	ldr	r1, [pc, #616]	; (801b9cc <tcp_output+0x294>)
 801b764:	4898      	ldr	r0, [pc, #608]	; (801b9c8 <tcp_output+0x290>)
 801b766:	f00b fbb5 	bl	8026ed4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801b76a:	4b99      	ldr	r3, [pc, #612]	; (801b9d0 <tcp_output+0x298>)
 801b76c:	681b      	ldr	r3, [r3, #0]
 801b76e:	687a      	ldr	r2, [r7, #4]
 801b770:	429a      	cmp	r2, r3
 801b772:	d101      	bne.n	801b778 <tcp_output+0x40>
    return ERR_OK;
 801b774:	2300      	movs	r3, #0
 801b776:	e1ce      	b.n	801bb16 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801b778:	687b      	ldr	r3, [r7, #4]
 801b77a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b77e:	687b      	ldr	r3, [r7, #4]
 801b780:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b784:	4293      	cmp	r3, r2
 801b786:	bf28      	it	cs
 801b788:	4613      	movcs	r3, r2
 801b78a:	b29b      	uxth	r3, r3
 801b78c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801b78e:	687b      	ldr	r3, [r7, #4]
 801b790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b792:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801b794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b796:	2b00      	cmp	r3, #0
 801b798:	d10b      	bne.n	801b7b2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801b79a:	687b      	ldr	r3, [r7, #4]
 801b79c:	8b5b      	ldrh	r3, [r3, #26]
 801b79e:	f003 0302 	and.w	r3, r3, #2
 801b7a2:	2b00      	cmp	r3, #0
 801b7a4:	f000 81aa 	beq.w	801bafc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801b7a8:	6878      	ldr	r0, [r7, #4]
 801b7aa:	f000 fdcb 	bl	801c344 <tcp_send_empty_ack>
 801b7ae:	4603      	mov	r3, r0
 801b7b0:	e1b1      	b.n	801bb16 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801b7b2:	6879      	ldr	r1, [r7, #4]
 801b7b4:	687b      	ldr	r3, [r7, #4]
 801b7b6:	3304      	adds	r3, #4
 801b7b8:	461a      	mov	r2, r3
 801b7ba:	6878      	ldr	r0, [r7, #4]
 801b7bc:	f7ff f824 	bl	801a808 <tcp_route>
 801b7c0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801b7c2:	697b      	ldr	r3, [r7, #20]
 801b7c4:	2b00      	cmp	r3, #0
 801b7c6:	d102      	bne.n	801b7ce <tcp_output+0x96>
    return ERR_RTE;
 801b7c8:	f06f 0303 	mvn.w	r3, #3
 801b7cc:	e1a3      	b.n	801bb16 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801b7ce:	687b      	ldr	r3, [r7, #4]
 801b7d0:	2b00      	cmp	r3, #0
 801b7d2:	d003      	beq.n	801b7dc <tcp_output+0xa4>
 801b7d4:	687b      	ldr	r3, [r7, #4]
 801b7d6:	681b      	ldr	r3, [r3, #0]
 801b7d8:	2b00      	cmp	r3, #0
 801b7da:	d111      	bne.n	801b800 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801b7dc:	697b      	ldr	r3, [r7, #20]
 801b7de:	2b00      	cmp	r3, #0
 801b7e0:	d002      	beq.n	801b7e8 <tcp_output+0xb0>
 801b7e2:	697b      	ldr	r3, [r7, #20]
 801b7e4:	3304      	adds	r3, #4
 801b7e6:	e000      	b.n	801b7ea <tcp_output+0xb2>
 801b7e8:	2300      	movs	r3, #0
 801b7ea:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801b7ec:	693b      	ldr	r3, [r7, #16]
 801b7ee:	2b00      	cmp	r3, #0
 801b7f0:	d102      	bne.n	801b7f8 <tcp_output+0xc0>
      return ERR_RTE;
 801b7f2:	f06f 0303 	mvn.w	r3, #3
 801b7f6:	e18e      	b.n	801bb16 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801b7f8:	693b      	ldr	r3, [r7, #16]
 801b7fa:	681a      	ldr	r2, [r3, #0]
 801b7fc:	687b      	ldr	r3, [r7, #4]
 801b7fe:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801b800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b802:	68db      	ldr	r3, [r3, #12]
 801b804:	685b      	ldr	r3, [r3, #4]
 801b806:	4618      	mov	r0, r3
 801b808:	f7f7 fc77 	bl	80130fa <lwip_htonl>
 801b80c:	4602      	mov	r2, r0
 801b80e:	687b      	ldr	r3, [r7, #4]
 801b810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b812:	1ad3      	subs	r3, r2, r3
 801b814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b816:	8912      	ldrh	r2, [r2, #8]
 801b818:	4413      	add	r3, r2
 801b81a:	69ba      	ldr	r2, [r7, #24]
 801b81c:	429a      	cmp	r2, r3
 801b81e:	d227      	bcs.n	801b870 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801b820:	687b      	ldr	r3, [r7, #4]
 801b822:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b826:	461a      	mov	r2, r3
 801b828:	69bb      	ldr	r3, [r7, #24]
 801b82a:	4293      	cmp	r3, r2
 801b82c:	d114      	bne.n	801b858 <tcp_output+0x120>
 801b82e:	687b      	ldr	r3, [r7, #4]
 801b830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b832:	2b00      	cmp	r3, #0
 801b834:	d110      	bne.n	801b858 <tcp_output+0x120>
 801b836:	687b      	ldr	r3, [r7, #4]
 801b838:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801b83c:	2b00      	cmp	r3, #0
 801b83e:	d10b      	bne.n	801b858 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801b840:	687b      	ldr	r3, [r7, #4]
 801b842:	2200      	movs	r2, #0
 801b844:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801b848:	687b      	ldr	r3, [r7, #4]
 801b84a:	2201      	movs	r2, #1
 801b84c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801b850:	687b      	ldr	r3, [r7, #4]
 801b852:	2200      	movs	r2, #0
 801b854:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801b858:	687b      	ldr	r3, [r7, #4]
 801b85a:	8b5b      	ldrh	r3, [r3, #26]
 801b85c:	f003 0302 	and.w	r3, r3, #2
 801b860:	2b00      	cmp	r3, #0
 801b862:	f000 814d 	beq.w	801bb00 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801b866:	6878      	ldr	r0, [r7, #4]
 801b868:	f000 fd6c 	bl	801c344 <tcp_send_empty_ack>
 801b86c:	4603      	mov	r3, r0
 801b86e:	e152      	b.n	801bb16 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801b870:	687b      	ldr	r3, [r7, #4]
 801b872:	2200      	movs	r2, #0
 801b874:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801b878:	687b      	ldr	r3, [r7, #4]
 801b87a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b87c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801b87e:	6a3b      	ldr	r3, [r7, #32]
 801b880:	2b00      	cmp	r3, #0
 801b882:	f000 811c 	beq.w	801babe <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801b886:	e002      	b.n	801b88e <tcp_output+0x156>
 801b888:	6a3b      	ldr	r3, [r7, #32]
 801b88a:	681b      	ldr	r3, [r3, #0]
 801b88c:	623b      	str	r3, [r7, #32]
 801b88e:	6a3b      	ldr	r3, [r7, #32]
 801b890:	681b      	ldr	r3, [r3, #0]
 801b892:	2b00      	cmp	r3, #0
 801b894:	d1f8      	bne.n	801b888 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801b896:	e112      	b.n	801babe <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801b898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b89a:	68db      	ldr	r3, [r3, #12]
 801b89c:	899b      	ldrh	r3, [r3, #12]
 801b89e:	b29b      	uxth	r3, r3
 801b8a0:	4618      	mov	r0, r3
 801b8a2:	f7f7 fc15 	bl	80130d0 <lwip_htons>
 801b8a6:	4603      	mov	r3, r0
 801b8a8:	b2db      	uxtb	r3, r3
 801b8aa:	f003 0304 	and.w	r3, r3, #4
 801b8ae:	2b00      	cmp	r3, #0
 801b8b0:	d006      	beq.n	801b8c0 <tcp_output+0x188>
 801b8b2:	4b43      	ldr	r3, [pc, #268]	; (801b9c0 <tcp_output+0x288>)
 801b8b4:	f240 5236 	movw	r2, #1334	; 0x536
 801b8b8:	4946      	ldr	r1, [pc, #280]	; (801b9d4 <tcp_output+0x29c>)
 801b8ba:	4843      	ldr	r0, [pc, #268]	; (801b9c8 <tcp_output+0x290>)
 801b8bc:	f00b fb0a 	bl	8026ed4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b8c0:	687b      	ldr	r3, [r7, #4]
 801b8c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b8c4:	2b00      	cmp	r3, #0
 801b8c6:	d01f      	beq.n	801b908 <tcp_output+0x1d0>
 801b8c8:	687b      	ldr	r3, [r7, #4]
 801b8ca:	8b5b      	ldrh	r3, [r3, #26]
 801b8cc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801b8d0:	2b00      	cmp	r3, #0
 801b8d2:	d119      	bne.n	801b908 <tcp_output+0x1d0>
 801b8d4:	687b      	ldr	r3, [r7, #4]
 801b8d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b8d8:	2b00      	cmp	r3, #0
 801b8da:	d00b      	beq.n	801b8f4 <tcp_output+0x1bc>
 801b8dc:	687b      	ldr	r3, [r7, #4]
 801b8de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b8e0:	681b      	ldr	r3, [r3, #0]
 801b8e2:	2b00      	cmp	r3, #0
 801b8e4:	d110      	bne.n	801b908 <tcp_output+0x1d0>
 801b8e6:	687b      	ldr	r3, [r7, #4]
 801b8e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b8ea:	891a      	ldrh	r2, [r3, #8]
 801b8ec:	687b      	ldr	r3, [r7, #4]
 801b8ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b8f0:	429a      	cmp	r2, r3
 801b8f2:	d209      	bcs.n	801b908 <tcp_output+0x1d0>
 801b8f4:	687b      	ldr	r3, [r7, #4]
 801b8f6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801b8fa:	2b00      	cmp	r3, #0
 801b8fc:	d004      	beq.n	801b908 <tcp_output+0x1d0>
 801b8fe:	687b      	ldr	r3, [r7, #4]
 801b900:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b904:	2b08      	cmp	r3, #8
 801b906:	d901      	bls.n	801b90c <tcp_output+0x1d4>
 801b908:	2301      	movs	r3, #1
 801b90a:	e000      	b.n	801b90e <tcp_output+0x1d6>
 801b90c:	2300      	movs	r3, #0
 801b90e:	2b00      	cmp	r3, #0
 801b910:	d106      	bne.n	801b920 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801b912:	687b      	ldr	r3, [r7, #4]
 801b914:	8b5b      	ldrh	r3, [r3, #26]
 801b916:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b91a:	2b00      	cmp	r3, #0
 801b91c:	f000 80e4 	beq.w	801bae8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801b920:	687b      	ldr	r3, [r7, #4]
 801b922:	7d1b      	ldrb	r3, [r3, #20]
 801b924:	2b02      	cmp	r3, #2
 801b926:	d00d      	beq.n	801b944 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801b928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b92a:	68db      	ldr	r3, [r3, #12]
 801b92c:	899b      	ldrh	r3, [r3, #12]
 801b92e:	b29c      	uxth	r4, r3
 801b930:	2010      	movs	r0, #16
 801b932:	f7f7 fbcd 	bl	80130d0 <lwip_htons>
 801b936:	4603      	mov	r3, r0
 801b938:	461a      	mov	r2, r3
 801b93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b93c:	68db      	ldr	r3, [r3, #12]
 801b93e:	4322      	orrs	r2, r4
 801b940:	b292      	uxth	r2, r2
 801b942:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801b944:	697a      	ldr	r2, [r7, #20]
 801b946:	6879      	ldr	r1, [r7, #4]
 801b948:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b94a:	f000 f909 	bl	801bb60 <tcp_output_segment>
 801b94e:	4603      	mov	r3, r0
 801b950:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801b952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b956:	2b00      	cmp	r3, #0
 801b958:	d009      	beq.n	801b96e <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b95a:	687b      	ldr	r3, [r7, #4]
 801b95c:	8b5b      	ldrh	r3, [r3, #26]
 801b95e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b962:	b29a      	uxth	r2, r3
 801b964:	687b      	ldr	r3, [r7, #4]
 801b966:	835a      	strh	r2, [r3, #26]
      return err;
 801b968:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b96c:	e0d3      	b.n	801bb16 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801b96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b970:	681a      	ldr	r2, [r3, #0]
 801b972:	687b      	ldr	r3, [r7, #4]
 801b974:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801b976:	687b      	ldr	r3, [r7, #4]
 801b978:	7d1b      	ldrb	r3, [r3, #20]
 801b97a:	2b02      	cmp	r3, #2
 801b97c:	d006      	beq.n	801b98c <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b97e:	687b      	ldr	r3, [r7, #4]
 801b980:	8b5b      	ldrh	r3, [r3, #26]
 801b982:	f023 0303 	bic.w	r3, r3, #3
 801b986:	b29a      	uxth	r2, r3
 801b988:	687b      	ldr	r3, [r7, #4]
 801b98a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b98e:	68db      	ldr	r3, [r3, #12]
 801b990:	685b      	ldr	r3, [r3, #4]
 801b992:	4618      	mov	r0, r3
 801b994:	f7f7 fbb1 	bl	80130fa <lwip_htonl>
 801b998:	4604      	mov	r4, r0
 801b99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b99c:	891b      	ldrh	r3, [r3, #8]
 801b99e:	461d      	mov	r5, r3
 801b9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9a2:	68db      	ldr	r3, [r3, #12]
 801b9a4:	899b      	ldrh	r3, [r3, #12]
 801b9a6:	b29b      	uxth	r3, r3
 801b9a8:	4618      	mov	r0, r3
 801b9aa:	f7f7 fb91 	bl	80130d0 <lwip_htons>
 801b9ae:	4603      	mov	r3, r0
 801b9b0:	b2db      	uxtb	r3, r3
 801b9b2:	f003 0303 	and.w	r3, r3, #3
 801b9b6:	2b00      	cmp	r3, #0
 801b9b8:	d00e      	beq.n	801b9d8 <tcp_output+0x2a0>
 801b9ba:	2301      	movs	r3, #1
 801b9bc:	e00d      	b.n	801b9da <tcp_output+0x2a2>
 801b9be:	bf00      	nop
 801b9c0:	0802cc00 	.word	0x0802cc00
 801b9c4:	0802d144 	.word	0x0802d144
 801b9c8:	0802cc54 	.word	0x0802cc54
 801b9cc:	0802d15c 	.word	0x0802d15c
 801b9d0:	2400867c 	.word	0x2400867c
 801b9d4:	0802d184 	.word	0x0802d184
 801b9d8:	2300      	movs	r3, #0
 801b9da:	442b      	add	r3, r5
 801b9dc:	4423      	add	r3, r4
 801b9de:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b9e0:	687b      	ldr	r3, [r7, #4]
 801b9e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b9e4:	68bb      	ldr	r3, [r7, #8]
 801b9e6:	1ad3      	subs	r3, r2, r3
 801b9e8:	2b00      	cmp	r3, #0
 801b9ea:	da02      	bge.n	801b9f2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801b9ec:	687b      	ldr	r3, [r7, #4]
 801b9ee:	68ba      	ldr	r2, [r7, #8]
 801b9f0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801b9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9f4:	891b      	ldrh	r3, [r3, #8]
 801b9f6:	461c      	mov	r4, r3
 801b9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9fa:	68db      	ldr	r3, [r3, #12]
 801b9fc:	899b      	ldrh	r3, [r3, #12]
 801b9fe:	b29b      	uxth	r3, r3
 801ba00:	4618      	mov	r0, r3
 801ba02:	f7f7 fb65 	bl	80130d0 <lwip_htons>
 801ba06:	4603      	mov	r3, r0
 801ba08:	b2db      	uxtb	r3, r3
 801ba0a:	f003 0303 	and.w	r3, r3, #3
 801ba0e:	2b00      	cmp	r3, #0
 801ba10:	d001      	beq.n	801ba16 <tcp_output+0x2de>
 801ba12:	2301      	movs	r3, #1
 801ba14:	e000      	b.n	801ba18 <tcp_output+0x2e0>
 801ba16:	2300      	movs	r3, #0
 801ba18:	4423      	add	r3, r4
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	d049      	beq.n	801bab2 <tcp_output+0x37a>
      seg->next = NULL;
 801ba1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba20:	2200      	movs	r2, #0
 801ba22:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801ba24:	687b      	ldr	r3, [r7, #4]
 801ba26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ba28:	2b00      	cmp	r3, #0
 801ba2a:	d105      	bne.n	801ba38 <tcp_output+0x300>
        pcb->unacked = seg;
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ba30:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801ba32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba34:	623b      	str	r3, [r7, #32]
 801ba36:	e03f      	b.n	801bab8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801ba38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba3a:	68db      	ldr	r3, [r3, #12]
 801ba3c:	685b      	ldr	r3, [r3, #4]
 801ba3e:	4618      	mov	r0, r3
 801ba40:	f7f7 fb5b 	bl	80130fa <lwip_htonl>
 801ba44:	4604      	mov	r4, r0
 801ba46:	6a3b      	ldr	r3, [r7, #32]
 801ba48:	68db      	ldr	r3, [r3, #12]
 801ba4a:	685b      	ldr	r3, [r3, #4]
 801ba4c:	4618      	mov	r0, r3
 801ba4e:	f7f7 fb54 	bl	80130fa <lwip_htonl>
 801ba52:	4603      	mov	r3, r0
 801ba54:	1ae3      	subs	r3, r4, r3
 801ba56:	2b00      	cmp	r3, #0
 801ba58:	da24      	bge.n	801baa4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801ba5a:	687b      	ldr	r3, [r7, #4]
 801ba5c:	3370      	adds	r3, #112	; 0x70
 801ba5e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801ba60:	e002      	b.n	801ba68 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801ba62:	69fb      	ldr	r3, [r7, #28]
 801ba64:	681b      	ldr	r3, [r3, #0]
 801ba66:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801ba68:	69fb      	ldr	r3, [r7, #28]
 801ba6a:	681b      	ldr	r3, [r3, #0]
 801ba6c:	2b00      	cmp	r3, #0
 801ba6e:	d011      	beq.n	801ba94 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801ba70:	69fb      	ldr	r3, [r7, #28]
 801ba72:	681b      	ldr	r3, [r3, #0]
 801ba74:	68db      	ldr	r3, [r3, #12]
 801ba76:	685b      	ldr	r3, [r3, #4]
 801ba78:	4618      	mov	r0, r3
 801ba7a:	f7f7 fb3e 	bl	80130fa <lwip_htonl>
 801ba7e:	4604      	mov	r4, r0
 801ba80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba82:	68db      	ldr	r3, [r3, #12]
 801ba84:	685b      	ldr	r3, [r3, #4]
 801ba86:	4618      	mov	r0, r3
 801ba88:	f7f7 fb37 	bl	80130fa <lwip_htonl>
 801ba8c:	4603      	mov	r3, r0
 801ba8e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801ba90:	2b00      	cmp	r3, #0
 801ba92:	dbe6      	blt.n	801ba62 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801ba94:	69fb      	ldr	r3, [r7, #28]
 801ba96:	681a      	ldr	r2, [r3, #0]
 801ba98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba9a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801ba9c:	69fb      	ldr	r3, [r7, #28]
 801ba9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801baa0:	601a      	str	r2, [r3, #0]
 801baa2:	e009      	b.n	801bab8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801baa4:	6a3b      	ldr	r3, [r7, #32]
 801baa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801baa8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801baaa:	6a3b      	ldr	r3, [r7, #32]
 801baac:	681b      	ldr	r3, [r3, #0]
 801baae:	623b      	str	r3, [r7, #32]
 801bab0:	e002      	b.n	801bab8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801bab2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bab4:	f7fb ff1d 	bl	80178f2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801bab8:	687b      	ldr	r3, [r7, #4]
 801baba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801babc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801babe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bac0:	2b00      	cmp	r3, #0
 801bac2:	d012      	beq.n	801baea <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801bac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bac6:	68db      	ldr	r3, [r3, #12]
 801bac8:	685b      	ldr	r3, [r3, #4]
 801baca:	4618      	mov	r0, r3
 801bacc:	f7f7 fb15 	bl	80130fa <lwip_htonl>
 801bad0:	4602      	mov	r2, r0
 801bad2:	687b      	ldr	r3, [r7, #4]
 801bad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bad6:	1ad3      	subs	r3, r2, r3
 801bad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bada:	8912      	ldrh	r2, [r2, #8]
 801badc:	4413      	add	r3, r2
  while (seg != NULL &&
 801bade:	69ba      	ldr	r2, [r7, #24]
 801bae0:	429a      	cmp	r2, r3
 801bae2:	f4bf aed9 	bcs.w	801b898 <tcp_output+0x160>
 801bae6:	e000      	b.n	801baea <tcp_output+0x3b2>
      break;
 801bae8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801baea:	687b      	ldr	r3, [r7, #4]
 801baec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801baee:	2b00      	cmp	r3, #0
 801baf0:	d108      	bne.n	801bb04 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801baf2:	687b      	ldr	r3, [r7, #4]
 801baf4:	2200      	movs	r2, #0
 801baf6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801bafa:	e004      	b.n	801bb06 <tcp_output+0x3ce>
    goto output_done;
 801bafc:	bf00      	nop
 801bafe:	e002      	b.n	801bb06 <tcp_output+0x3ce>
    goto output_done;
 801bb00:	bf00      	nop
 801bb02:	e000      	b.n	801bb06 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801bb04:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801bb06:	687b      	ldr	r3, [r7, #4]
 801bb08:	8b5b      	ldrh	r3, [r3, #26]
 801bb0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801bb0e:	b29a      	uxth	r2, r3
 801bb10:	687b      	ldr	r3, [r7, #4]
 801bb12:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801bb14:	2300      	movs	r3, #0
}
 801bb16:	4618      	mov	r0, r3
 801bb18:	3728      	adds	r7, #40	; 0x28
 801bb1a:	46bd      	mov	sp, r7
 801bb1c:	bdb0      	pop	{r4, r5, r7, pc}
 801bb1e:	bf00      	nop

0801bb20 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801bb20:	b580      	push	{r7, lr}
 801bb22:	b082      	sub	sp, #8
 801bb24:	af00      	add	r7, sp, #0
 801bb26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801bb28:	687b      	ldr	r3, [r7, #4]
 801bb2a:	2b00      	cmp	r3, #0
 801bb2c:	d106      	bne.n	801bb3c <tcp_output_segment_busy+0x1c>
 801bb2e:	4b09      	ldr	r3, [pc, #36]	; (801bb54 <tcp_output_segment_busy+0x34>)
 801bb30:	f240 529a 	movw	r2, #1434	; 0x59a
 801bb34:	4908      	ldr	r1, [pc, #32]	; (801bb58 <tcp_output_segment_busy+0x38>)
 801bb36:	4809      	ldr	r0, [pc, #36]	; (801bb5c <tcp_output_segment_busy+0x3c>)
 801bb38:	f00b f9cc 	bl	8026ed4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801bb3c:	687b      	ldr	r3, [r7, #4]
 801bb3e:	685b      	ldr	r3, [r3, #4]
 801bb40:	7b9b      	ldrb	r3, [r3, #14]
 801bb42:	2b01      	cmp	r3, #1
 801bb44:	d001      	beq.n	801bb4a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801bb46:	2301      	movs	r3, #1
 801bb48:	e000      	b.n	801bb4c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801bb4a:	2300      	movs	r3, #0
}
 801bb4c:	4618      	mov	r0, r3
 801bb4e:	3708      	adds	r7, #8
 801bb50:	46bd      	mov	sp, r7
 801bb52:	bd80      	pop	{r7, pc}
 801bb54:	0802cc00 	.word	0x0802cc00
 801bb58:	0802d19c 	.word	0x0802d19c
 801bb5c:	0802cc54 	.word	0x0802cc54

0801bb60 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801bb60:	b5b0      	push	{r4, r5, r7, lr}
 801bb62:	b08c      	sub	sp, #48	; 0x30
 801bb64:	af04      	add	r7, sp, #16
 801bb66:	60f8      	str	r0, [r7, #12]
 801bb68:	60b9      	str	r1, [r7, #8]
 801bb6a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801bb6c:	68fb      	ldr	r3, [r7, #12]
 801bb6e:	2b00      	cmp	r3, #0
 801bb70:	d106      	bne.n	801bb80 <tcp_output_segment+0x20>
 801bb72:	4b63      	ldr	r3, [pc, #396]	; (801bd00 <tcp_output_segment+0x1a0>)
 801bb74:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801bb78:	4962      	ldr	r1, [pc, #392]	; (801bd04 <tcp_output_segment+0x1a4>)
 801bb7a:	4863      	ldr	r0, [pc, #396]	; (801bd08 <tcp_output_segment+0x1a8>)
 801bb7c:	f00b f9aa 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801bb80:	68bb      	ldr	r3, [r7, #8]
 801bb82:	2b00      	cmp	r3, #0
 801bb84:	d106      	bne.n	801bb94 <tcp_output_segment+0x34>
 801bb86:	4b5e      	ldr	r3, [pc, #376]	; (801bd00 <tcp_output_segment+0x1a0>)
 801bb88:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801bb8c:	495f      	ldr	r1, [pc, #380]	; (801bd0c <tcp_output_segment+0x1ac>)
 801bb8e:	485e      	ldr	r0, [pc, #376]	; (801bd08 <tcp_output_segment+0x1a8>)
 801bb90:	f00b f9a0 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801bb94:	687b      	ldr	r3, [r7, #4]
 801bb96:	2b00      	cmp	r3, #0
 801bb98:	d106      	bne.n	801bba8 <tcp_output_segment+0x48>
 801bb9a:	4b59      	ldr	r3, [pc, #356]	; (801bd00 <tcp_output_segment+0x1a0>)
 801bb9c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801bba0:	495b      	ldr	r1, [pc, #364]	; (801bd10 <tcp_output_segment+0x1b0>)
 801bba2:	4859      	ldr	r0, [pc, #356]	; (801bd08 <tcp_output_segment+0x1a8>)
 801bba4:	f00b f996 	bl	8026ed4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801bba8:	68f8      	ldr	r0, [r7, #12]
 801bbaa:	f7ff ffb9 	bl	801bb20 <tcp_output_segment_busy>
 801bbae:	4603      	mov	r3, r0
 801bbb0:	2b00      	cmp	r3, #0
 801bbb2:	d001      	beq.n	801bbb8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801bbb4:	2300      	movs	r3, #0
 801bbb6:	e09f      	b.n	801bcf8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801bbb8:	68bb      	ldr	r3, [r7, #8]
 801bbba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801bbbc:	68fb      	ldr	r3, [r7, #12]
 801bbbe:	68dc      	ldr	r4, [r3, #12]
 801bbc0:	4610      	mov	r0, r2
 801bbc2:	f7f7 fa9a 	bl	80130fa <lwip_htonl>
 801bbc6:	4603      	mov	r3, r0
 801bbc8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801bbca:	68bb      	ldr	r3, [r7, #8]
 801bbcc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801bbce:	68fb      	ldr	r3, [r7, #12]
 801bbd0:	68dc      	ldr	r4, [r3, #12]
 801bbd2:	4610      	mov	r0, r2
 801bbd4:	f7f7 fa7c 	bl	80130d0 <lwip_htons>
 801bbd8:	4603      	mov	r3, r0
 801bbda:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801bbdc:	68bb      	ldr	r3, [r7, #8]
 801bbde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bbe0:	68ba      	ldr	r2, [r7, #8]
 801bbe2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801bbe4:	441a      	add	r2, r3
 801bbe6:	68bb      	ldr	r3, [r7, #8]
 801bbe8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801bbea:	68fb      	ldr	r3, [r7, #12]
 801bbec:	68db      	ldr	r3, [r3, #12]
 801bbee:	3314      	adds	r3, #20
 801bbf0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801bbf2:	68fb      	ldr	r3, [r7, #12]
 801bbf4:	7a9b      	ldrb	r3, [r3, #10]
 801bbf6:	f003 0301 	and.w	r3, r3, #1
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	d015      	beq.n	801bc2a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801bbfe:	68bb      	ldr	r3, [r7, #8]
 801bc00:	3304      	adds	r3, #4
 801bc02:	461a      	mov	r2, r3
 801bc04:	6879      	ldr	r1, [r7, #4]
 801bc06:	f44f 7006 	mov.w	r0, #536	; 0x218
 801bc0a:	f7fc fa37 	bl	801807c <tcp_eff_send_mss_netif>
 801bc0e:	4603      	mov	r3, r0
 801bc10:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801bc12:	8b7b      	ldrh	r3, [r7, #26]
 801bc14:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801bc18:	4618      	mov	r0, r3
 801bc1a:	f7f7 fa6e 	bl	80130fa <lwip_htonl>
 801bc1e:	4602      	mov	r2, r0
 801bc20:	69fb      	ldr	r3, [r7, #28]
 801bc22:	601a      	str	r2, [r3, #0]
    opts += 1;
 801bc24:	69fb      	ldr	r3, [r7, #28]
 801bc26:	3304      	adds	r3, #4
 801bc28:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801bc2a:	68bb      	ldr	r3, [r7, #8]
 801bc2c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801bc30:	2b00      	cmp	r3, #0
 801bc32:	da02      	bge.n	801bc3a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801bc34:	68bb      	ldr	r3, [r7, #8]
 801bc36:	2200      	movs	r2, #0
 801bc38:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801bc3a:	68bb      	ldr	r3, [r7, #8]
 801bc3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bc3e:	2b00      	cmp	r3, #0
 801bc40:	d10c      	bne.n	801bc5c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801bc42:	4b34      	ldr	r3, [pc, #208]	; (801bd14 <tcp_output_segment+0x1b4>)
 801bc44:	681a      	ldr	r2, [r3, #0]
 801bc46:	68bb      	ldr	r3, [r7, #8]
 801bc48:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801bc4a:	68fb      	ldr	r3, [r7, #12]
 801bc4c:	68db      	ldr	r3, [r3, #12]
 801bc4e:	685b      	ldr	r3, [r3, #4]
 801bc50:	4618      	mov	r0, r3
 801bc52:	f7f7 fa52 	bl	80130fa <lwip_htonl>
 801bc56:	4602      	mov	r2, r0
 801bc58:	68bb      	ldr	r3, [r7, #8]
 801bc5a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801bc5c:	68fb      	ldr	r3, [r7, #12]
 801bc5e:	68da      	ldr	r2, [r3, #12]
 801bc60:	68fb      	ldr	r3, [r7, #12]
 801bc62:	685b      	ldr	r3, [r3, #4]
 801bc64:	685b      	ldr	r3, [r3, #4]
 801bc66:	1ad3      	subs	r3, r2, r3
 801bc68:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801bc6a:	68fb      	ldr	r3, [r7, #12]
 801bc6c:	685b      	ldr	r3, [r3, #4]
 801bc6e:	8959      	ldrh	r1, [r3, #10]
 801bc70:	68fb      	ldr	r3, [r7, #12]
 801bc72:	685b      	ldr	r3, [r3, #4]
 801bc74:	8b3a      	ldrh	r2, [r7, #24]
 801bc76:	1a8a      	subs	r2, r1, r2
 801bc78:	b292      	uxth	r2, r2
 801bc7a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801bc7c:	68fb      	ldr	r3, [r7, #12]
 801bc7e:	685b      	ldr	r3, [r3, #4]
 801bc80:	8919      	ldrh	r1, [r3, #8]
 801bc82:	68fb      	ldr	r3, [r7, #12]
 801bc84:	685b      	ldr	r3, [r3, #4]
 801bc86:	8b3a      	ldrh	r2, [r7, #24]
 801bc88:	1a8a      	subs	r2, r1, r2
 801bc8a:	b292      	uxth	r2, r2
 801bc8c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801bc8e:	68fb      	ldr	r3, [r7, #12]
 801bc90:	685b      	ldr	r3, [r3, #4]
 801bc92:	68fa      	ldr	r2, [r7, #12]
 801bc94:	68d2      	ldr	r2, [r2, #12]
 801bc96:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801bc98:	68fb      	ldr	r3, [r7, #12]
 801bc9a:	68db      	ldr	r3, [r3, #12]
 801bc9c:	2200      	movs	r2, #0
 801bc9e:	741a      	strb	r2, [r3, #16]
 801bca0:	2200      	movs	r2, #0
 801bca2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801bca4:	68fb      	ldr	r3, [r7, #12]
 801bca6:	68db      	ldr	r3, [r3, #12]
 801bca8:	f103 0214 	add.w	r2, r3, #20
 801bcac:	68fb      	ldr	r3, [r7, #12]
 801bcae:	7a9b      	ldrb	r3, [r3, #10]
 801bcb0:	009b      	lsls	r3, r3, #2
 801bcb2:	f003 0304 	and.w	r3, r3, #4
 801bcb6:	4413      	add	r3, r2
 801bcb8:	69fa      	ldr	r2, [r7, #28]
 801bcba:	429a      	cmp	r2, r3
 801bcbc:	d006      	beq.n	801bccc <tcp_output_segment+0x16c>
 801bcbe:	4b10      	ldr	r3, [pc, #64]	; (801bd00 <tcp_output_segment+0x1a0>)
 801bcc0:	f240 621c 	movw	r2, #1564	; 0x61c
 801bcc4:	4914      	ldr	r1, [pc, #80]	; (801bd18 <tcp_output_segment+0x1b8>)
 801bcc6:	4810      	ldr	r0, [pc, #64]	; (801bd08 <tcp_output_segment+0x1a8>)
 801bcc8:	f00b f904 	bl	8026ed4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801bccc:	68fb      	ldr	r3, [r7, #12]
 801bcce:	6858      	ldr	r0, [r3, #4]
 801bcd0:	68b9      	ldr	r1, [r7, #8]
 801bcd2:	68bb      	ldr	r3, [r7, #8]
 801bcd4:	1d1c      	adds	r4, r3, #4
 801bcd6:	68bb      	ldr	r3, [r7, #8]
 801bcd8:	7add      	ldrb	r5, [r3, #11]
 801bcda:	68bb      	ldr	r3, [r7, #8]
 801bcdc:	7a9b      	ldrb	r3, [r3, #10]
 801bcde:	687a      	ldr	r2, [r7, #4]
 801bce0:	9202      	str	r2, [sp, #8]
 801bce2:	2206      	movs	r2, #6
 801bce4:	9201      	str	r2, [sp, #4]
 801bce6:	9300      	str	r3, [sp, #0]
 801bce8:	462b      	mov	r3, r5
 801bcea:	4622      	mov	r2, r4
 801bcec:	f004 fd92 	bl	8020814 <ip4_output_if>
 801bcf0:	4603      	mov	r3, r0
 801bcf2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801bcf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801bcf8:	4618      	mov	r0, r3
 801bcfa:	3720      	adds	r7, #32
 801bcfc:	46bd      	mov	sp, r7
 801bcfe:	bdb0      	pop	{r4, r5, r7, pc}
 801bd00:	0802cc00 	.word	0x0802cc00
 801bd04:	0802d1c4 	.word	0x0802d1c4
 801bd08:	0802cc54 	.word	0x0802cc54
 801bd0c:	0802d1e4 	.word	0x0802d1e4
 801bd10:	0802d204 	.word	0x0802d204
 801bd14:	2400866c 	.word	0x2400866c
 801bd18:	0802d228 	.word	0x0802d228

0801bd1c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801bd1c:	b5b0      	push	{r4, r5, r7, lr}
 801bd1e:	b084      	sub	sp, #16
 801bd20:	af00      	add	r7, sp, #0
 801bd22:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801bd24:	687b      	ldr	r3, [r7, #4]
 801bd26:	2b00      	cmp	r3, #0
 801bd28:	d106      	bne.n	801bd38 <tcp_rexmit_rto_prepare+0x1c>
 801bd2a:	4b31      	ldr	r3, [pc, #196]	; (801bdf0 <tcp_rexmit_rto_prepare+0xd4>)
 801bd2c:	f240 6263 	movw	r2, #1635	; 0x663
 801bd30:	4930      	ldr	r1, [pc, #192]	; (801bdf4 <tcp_rexmit_rto_prepare+0xd8>)
 801bd32:	4831      	ldr	r0, [pc, #196]	; (801bdf8 <tcp_rexmit_rto_prepare+0xdc>)
 801bd34:	f00b f8ce 	bl	8026ed4 <iprintf>

  if (pcb->unacked == NULL) {
 801bd38:	687b      	ldr	r3, [r7, #4]
 801bd3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bd3c:	2b00      	cmp	r3, #0
 801bd3e:	d102      	bne.n	801bd46 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801bd40:	f06f 0305 	mvn.w	r3, #5
 801bd44:	e050      	b.n	801bde8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801bd46:	687b      	ldr	r3, [r7, #4]
 801bd48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bd4a:	60fb      	str	r3, [r7, #12]
 801bd4c:	e00b      	b.n	801bd66 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801bd4e:	68f8      	ldr	r0, [r7, #12]
 801bd50:	f7ff fee6 	bl	801bb20 <tcp_output_segment_busy>
 801bd54:	4603      	mov	r3, r0
 801bd56:	2b00      	cmp	r3, #0
 801bd58:	d002      	beq.n	801bd60 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801bd5a:	f06f 0305 	mvn.w	r3, #5
 801bd5e:	e043      	b.n	801bde8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801bd60:	68fb      	ldr	r3, [r7, #12]
 801bd62:	681b      	ldr	r3, [r3, #0]
 801bd64:	60fb      	str	r3, [r7, #12]
 801bd66:	68fb      	ldr	r3, [r7, #12]
 801bd68:	681b      	ldr	r3, [r3, #0]
 801bd6a:	2b00      	cmp	r3, #0
 801bd6c:	d1ef      	bne.n	801bd4e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801bd6e:	68f8      	ldr	r0, [r7, #12]
 801bd70:	f7ff fed6 	bl	801bb20 <tcp_output_segment_busy>
 801bd74:	4603      	mov	r3, r0
 801bd76:	2b00      	cmp	r3, #0
 801bd78:	d002      	beq.n	801bd80 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801bd7a:	f06f 0305 	mvn.w	r3, #5
 801bd7e:	e033      	b.n	801bde8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801bd80:	687b      	ldr	r3, [r7, #4]
 801bd82:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801bd84:	68fb      	ldr	r3, [r7, #12]
 801bd86:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801bd88:	687b      	ldr	r3, [r7, #4]
 801bd8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801bd8c:	687b      	ldr	r3, [r7, #4]
 801bd8e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801bd90:	687b      	ldr	r3, [r7, #4]
 801bd92:	2200      	movs	r2, #0
 801bd94:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801bd96:	687b      	ldr	r3, [r7, #4]
 801bd98:	8b5b      	ldrh	r3, [r3, #26]
 801bd9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801bd9e:	b29a      	uxth	r2, r3
 801bda0:	687b      	ldr	r3, [r7, #4]
 801bda2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801bda4:	68fb      	ldr	r3, [r7, #12]
 801bda6:	68db      	ldr	r3, [r3, #12]
 801bda8:	685b      	ldr	r3, [r3, #4]
 801bdaa:	4618      	mov	r0, r3
 801bdac:	f7f7 f9a5 	bl	80130fa <lwip_htonl>
 801bdb0:	4604      	mov	r4, r0
 801bdb2:	68fb      	ldr	r3, [r7, #12]
 801bdb4:	891b      	ldrh	r3, [r3, #8]
 801bdb6:	461d      	mov	r5, r3
 801bdb8:	68fb      	ldr	r3, [r7, #12]
 801bdba:	68db      	ldr	r3, [r3, #12]
 801bdbc:	899b      	ldrh	r3, [r3, #12]
 801bdbe:	b29b      	uxth	r3, r3
 801bdc0:	4618      	mov	r0, r3
 801bdc2:	f7f7 f985 	bl	80130d0 <lwip_htons>
 801bdc6:	4603      	mov	r3, r0
 801bdc8:	b2db      	uxtb	r3, r3
 801bdca:	f003 0303 	and.w	r3, r3, #3
 801bdce:	2b00      	cmp	r3, #0
 801bdd0:	d001      	beq.n	801bdd6 <tcp_rexmit_rto_prepare+0xba>
 801bdd2:	2301      	movs	r3, #1
 801bdd4:	e000      	b.n	801bdd8 <tcp_rexmit_rto_prepare+0xbc>
 801bdd6:	2300      	movs	r3, #0
 801bdd8:	442b      	add	r3, r5
 801bdda:	18e2      	adds	r2, r4, r3
 801bddc:	687b      	ldr	r3, [r7, #4]
 801bdde:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801bde0:	687b      	ldr	r3, [r7, #4]
 801bde2:	2200      	movs	r2, #0
 801bde4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801bde6:	2300      	movs	r3, #0
}
 801bde8:	4618      	mov	r0, r3
 801bdea:	3710      	adds	r7, #16
 801bdec:	46bd      	mov	sp, r7
 801bdee:	bdb0      	pop	{r4, r5, r7, pc}
 801bdf0:	0802cc00 	.word	0x0802cc00
 801bdf4:	0802d23c 	.word	0x0802d23c
 801bdf8:	0802cc54 	.word	0x0802cc54

0801bdfc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801bdfc:	b580      	push	{r7, lr}
 801bdfe:	b082      	sub	sp, #8
 801be00:	af00      	add	r7, sp, #0
 801be02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801be04:	687b      	ldr	r3, [r7, #4]
 801be06:	2b00      	cmp	r3, #0
 801be08:	d106      	bne.n	801be18 <tcp_rexmit_rto_commit+0x1c>
 801be0a:	4b0d      	ldr	r3, [pc, #52]	; (801be40 <tcp_rexmit_rto_commit+0x44>)
 801be0c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801be10:	490c      	ldr	r1, [pc, #48]	; (801be44 <tcp_rexmit_rto_commit+0x48>)
 801be12:	480d      	ldr	r0, [pc, #52]	; (801be48 <tcp_rexmit_rto_commit+0x4c>)
 801be14:	f00b f85e 	bl	8026ed4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801be18:	687b      	ldr	r3, [r7, #4]
 801be1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801be1e:	2bff      	cmp	r3, #255	; 0xff
 801be20:	d007      	beq.n	801be32 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801be22:	687b      	ldr	r3, [r7, #4]
 801be24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801be28:	3301      	adds	r3, #1
 801be2a:	b2da      	uxtb	r2, r3
 801be2c:	687b      	ldr	r3, [r7, #4]
 801be2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801be32:	6878      	ldr	r0, [r7, #4]
 801be34:	f7ff fc80 	bl	801b738 <tcp_output>
}
 801be38:	bf00      	nop
 801be3a:	3708      	adds	r7, #8
 801be3c:	46bd      	mov	sp, r7
 801be3e:	bd80      	pop	{r7, pc}
 801be40:	0802cc00 	.word	0x0802cc00
 801be44:	0802d260 	.word	0x0802d260
 801be48:	0802cc54 	.word	0x0802cc54

0801be4c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801be4c:	b580      	push	{r7, lr}
 801be4e:	b082      	sub	sp, #8
 801be50:	af00      	add	r7, sp, #0
 801be52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801be54:	687b      	ldr	r3, [r7, #4]
 801be56:	2b00      	cmp	r3, #0
 801be58:	d106      	bne.n	801be68 <tcp_rexmit_rto+0x1c>
 801be5a:	4b0a      	ldr	r3, [pc, #40]	; (801be84 <tcp_rexmit_rto+0x38>)
 801be5c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801be60:	4909      	ldr	r1, [pc, #36]	; (801be88 <tcp_rexmit_rto+0x3c>)
 801be62:	480a      	ldr	r0, [pc, #40]	; (801be8c <tcp_rexmit_rto+0x40>)
 801be64:	f00b f836 	bl	8026ed4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801be68:	6878      	ldr	r0, [r7, #4]
 801be6a:	f7ff ff57 	bl	801bd1c <tcp_rexmit_rto_prepare>
 801be6e:	4603      	mov	r3, r0
 801be70:	2b00      	cmp	r3, #0
 801be72:	d102      	bne.n	801be7a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801be74:	6878      	ldr	r0, [r7, #4]
 801be76:	f7ff ffc1 	bl	801bdfc <tcp_rexmit_rto_commit>
  }
}
 801be7a:	bf00      	nop
 801be7c:	3708      	adds	r7, #8
 801be7e:	46bd      	mov	sp, r7
 801be80:	bd80      	pop	{r7, pc}
 801be82:	bf00      	nop
 801be84:	0802cc00 	.word	0x0802cc00
 801be88:	0802d284 	.word	0x0802d284
 801be8c:	0802cc54 	.word	0x0802cc54

0801be90 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801be90:	b590      	push	{r4, r7, lr}
 801be92:	b085      	sub	sp, #20
 801be94:	af00      	add	r7, sp, #0
 801be96:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801be98:	687b      	ldr	r3, [r7, #4]
 801be9a:	2b00      	cmp	r3, #0
 801be9c:	d106      	bne.n	801beac <tcp_rexmit+0x1c>
 801be9e:	4b2f      	ldr	r3, [pc, #188]	; (801bf5c <tcp_rexmit+0xcc>)
 801bea0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801bea4:	492e      	ldr	r1, [pc, #184]	; (801bf60 <tcp_rexmit+0xd0>)
 801bea6:	482f      	ldr	r0, [pc, #188]	; (801bf64 <tcp_rexmit+0xd4>)
 801bea8:	f00b f814 	bl	8026ed4 <iprintf>

  if (pcb->unacked == NULL) {
 801beac:	687b      	ldr	r3, [r7, #4]
 801beae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801beb0:	2b00      	cmp	r3, #0
 801beb2:	d102      	bne.n	801beba <tcp_rexmit+0x2a>
    return ERR_VAL;
 801beb4:	f06f 0305 	mvn.w	r3, #5
 801beb8:	e04c      	b.n	801bf54 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bebe:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801bec0:	68b8      	ldr	r0, [r7, #8]
 801bec2:	f7ff fe2d 	bl	801bb20 <tcp_output_segment_busy>
 801bec6:	4603      	mov	r3, r0
 801bec8:	2b00      	cmp	r3, #0
 801beca:	d002      	beq.n	801bed2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801becc:	f06f 0305 	mvn.w	r3, #5
 801bed0:	e040      	b.n	801bf54 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801bed2:	68bb      	ldr	r3, [r7, #8]
 801bed4:	681a      	ldr	r2, [r3, #0]
 801bed6:	687b      	ldr	r3, [r7, #4]
 801bed8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801beda:	687b      	ldr	r3, [r7, #4]
 801bedc:	336c      	adds	r3, #108	; 0x6c
 801bede:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801bee0:	e002      	b.n	801bee8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801bee2:	68fb      	ldr	r3, [r7, #12]
 801bee4:	681b      	ldr	r3, [r3, #0]
 801bee6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801bee8:	68fb      	ldr	r3, [r7, #12]
 801beea:	681b      	ldr	r3, [r3, #0]
 801beec:	2b00      	cmp	r3, #0
 801beee:	d011      	beq.n	801bf14 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801bef0:	68fb      	ldr	r3, [r7, #12]
 801bef2:	681b      	ldr	r3, [r3, #0]
 801bef4:	68db      	ldr	r3, [r3, #12]
 801bef6:	685b      	ldr	r3, [r3, #4]
 801bef8:	4618      	mov	r0, r3
 801befa:	f7f7 f8fe 	bl	80130fa <lwip_htonl>
 801befe:	4604      	mov	r4, r0
 801bf00:	68bb      	ldr	r3, [r7, #8]
 801bf02:	68db      	ldr	r3, [r3, #12]
 801bf04:	685b      	ldr	r3, [r3, #4]
 801bf06:	4618      	mov	r0, r3
 801bf08:	f7f7 f8f7 	bl	80130fa <lwip_htonl>
 801bf0c:	4603      	mov	r3, r0
 801bf0e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801bf10:	2b00      	cmp	r3, #0
 801bf12:	dbe6      	blt.n	801bee2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801bf14:	68fb      	ldr	r3, [r7, #12]
 801bf16:	681a      	ldr	r2, [r3, #0]
 801bf18:	68bb      	ldr	r3, [r7, #8]
 801bf1a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801bf1c:	68fb      	ldr	r3, [r7, #12]
 801bf1e:	68ba      	ldr	r2, [r7, #8]
 801bf20:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801bf22:	68bb      	ldr	r3, [r7, #8]
 801bf24:	681b      	ldr	r3, [r3, #0]
 801bf26:	2b00      	cmp	r3, #0
 801bf28:	d103      	bne.n	801bf32 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801bf2a:	687b      	ldr	r3, [r7, #4]
 801bf2c:	2200      	movs	r2, #0
 801bf2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801bf32:	687b      	ldr	r3, [r7, #4]
 801bf34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801bf38:	2bff      	cmp	r3, #255	; 0xff
 801bf3a:	d007      	beq.n	801bf4c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801bf3c:	687b      	ldr	r3, [r7, #4]
 801bf3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801bf42:	3301      	adds	r3, #1
 801bf44:	b2da      	uxtb	r2, r3
 801bf46:	687b      	ldr	r3, [r7, #4]
 801bf48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801bf4c:	687b      	ldr	r3, [r7, #4]
 801bf4e:	2200      	movs	r2, #0
 801bf50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801bf52:	2300      	movs	r3, #0
}
 801bf54:	4618      	mov	r0, r3
 801bf56:	3714      	adds	r7, #20
 801bf58:	46bd      	mov	sp, r7
 801bf5a:	bd90      	pop	{r4, r7, pc}
 801bf5c:	0802cc00 	.word	0x0802cc00
 801bf60:	0802d2a0 	.word	0x0802d2a0
 801bf64:	0802cc54 	.word	0x0802cc54

0801bf68 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801bf68:	b580      	push	{r7, lr}
 801bf6a:	b082      	sub	sp, #8
 801bf6c:	af00      	add	r7, sp, #0
 801bf6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801bf70:	687b      	ldr	r3, [r7, #4]
 801bf72:	2b00      	cmp	r3, #0
 801bf74:	d106      	bne.n	801bf84 <tcp_rexmit_fast+0x1c>
 801bf76:	4b2a      	ldr	r3, [pc, #168]	; (801c020 <tcp_rexmit_fast+0xb8>)
 801bf78:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801bf7c:	4929      	ldr	r1, [pc, #164]	; (801c024 <tcp_rexmit_fast+0xbc>)
 801bf7e:	482a      	ldr	r0, [pc, #168]	; (801c028 <tcp_rexmit_fast+0xc0>)
 801bf80:	f00a ffa8 	bl	8026ed4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801bf84:	687b      	ldr	r3, [r7, #4]
 801bf86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bf88:	2b00      	cmp	r3, #0
 801bf8a:	d045      	beq.n	801c018 <tcp_rexmit_fast+0xb0>
 801bf8c:	687b      	ldr	r3, [r7, #4]
 801bf8e:	8b5b      	ldrh	r3, [r3, #26]
 801bf90:	f003 0304 	and.w	r3, r3, #4
 801bf94:	2b00      	cmp	r3, #0
 801bf96:	d13f      	bne.n	801c018 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801bf98:	6878      	ldr	r0, [r7, #4]
 801bf9a:	f7ff ff79 	bl	801be90 <tcp_rexmit>
 801bf9e:	4603      	mov	r3, r0
 801bfa0:	2b00      	cmp	r3, #0
 801bfa2:	d139      	bne.n	801c018 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801bfa4:	687b      	ldr	r3, [r7, #4]
 801bfa6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801bfaa:	687b      	ldr	r3, [r7, #4]
 801bfac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801bfb0:	4293      	cmp	r3, r2
 801bfb2:	bf28      	it	cs
 801bfb4:	4613      	movcs	r3, r2
 801bfb6:	b29b      	uxth	r3, r3
 801bfb8:	2b00      	cmp	r3, #0
 801bfba:	da00      	bge.n	801bfbe <tcp_rexmit_fast+0x56>
 801bfbc:	3301      	adds	r3, #1
 801bfbe:	105b      	asrs	r3, r3, #1
 801bfc0:	b29a      	uxth	r2, r3
 801bfc2:	687b      	ldr	r3, [r7, #4]
 801bfc4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801bfc8:	687b      	ldr	r3, [r7, #4]
 801bfca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801bfce:	461a      	mov	r2, r3
 801bfd0:	687b      	ldr	r3, [r7, #4]
 801bfd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bfd4:	005b      	lsls	r3, r3, #1
 801bfd6:	429a      	cmp	r2, r3
 801bfd8:	d206      	bcs.n	801bfe8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801bfda:	687b      	ldr	r3, [r7, #4]
 801bfdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bfde:	005b      	lsls	r3, r3, #1
 801bfe0:	b29a      	uxth	r2, r3
 801bfe2:	687b      	ldr	r3, [r7, #4]
 801bfe4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801bfe8:	687b      	ldr	r3, [r7, #4]
 801bfea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801bfee:	687b      	ldr	r3, [r7, #4]
 801bff0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bff2:	4619      	mov	r1, r3
 801bff4:	0049      	lsls	r1, r1, #1
 801bff6:	440b      	add	r3, r1
 801bff8:	b29b      	uxth	r3, r3
 801bffa:	4413      	add	r3, r2
 801bffc:	b29a      	uxth	r2, r3
 801bffe:	687b      	ldr	r3, [r7, #4]
 801c000:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801c004:	687b      	ldr	r3, [r7, #4]
 801c006:	8b5b      	ldrh	r3, [r3, #26]
 801c008:	f043 0304 	orr.w	r3, r3, #4
 801c00c:	b29a      	uxth	r2, r3
 801c00e:	687b      	ldr	r3, [r7, #4]
 801c010:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801c012:	687b      	ldr	r3, [r7, #4]
 801c014:	2200      	movs	r2, #0
 801c016:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801c018:	bf00      	nop
 801c01a:	3708      	adds	r7, #8
 801c01c:	46bd      	mov	sp, r7
 801c01e:	bd80      	pop	{r7, pc}
 801c020:	0802cc00 	.word	0x0802cc00
 801c024:	0802d2b8 	.word	0x0802d2b8
 801c028:	0802cc54 	.word	0x0802cc54

0801c02c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801c02c:	b580      	push	{r7, lr}
 801c02e:	b086      	sub	sp, #24
 801c030:	af00      	add	r7, sp, #0
 801c032:	60f8      	str	r0, [r7, #12]
 801c034:	607b      	str	r3, [r7, #4]
 801c036:	460b      	mov	r3, r1
 801c038:	817b      	strh	r3, [r7, #10]
 801c03a:	4613      	mov	r3, r2
 801c03c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801c03e:	897a      	ldrh	r2, [r7, #10]
 801c040:	893b      	ldrh	r3, [r7, #8]
 801c042:	4413      	add	r3, r2
 801c044:	b29b      	uxth	r3, r3
 801c046:	3314      	adds	r3, #20
 801c048:	b29b      	uxth	r3, r3
 801c04a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c04e:	4619      	mov	r1, r3
 801c050:	2022      	movs	r0, #34	; 0x22
 801c052:	f7f9 f9f9 	bl	8015448 <pbuf_alloc>
 801c056:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801c058:	697b      	ldr	r3, [r7, #20]
 801c05a:	2b00      	cmp	r3, #0
 801c05c:	d04d      	beq.n	801c0fa <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801c05e:	897b      	ldrh	r3, [r7, #10]
 801c060:	3313      	adds	r3, #19
 801c062:	697a      	ldr	r2, [r7, #20]
 801c064:	8952      	ldrh	r2, [r2, #10]
 801c066:	4293      	cmp	r3, r2
 801c068:	db06      	blt.n	801c078 <tcp_output_alloc_header_common+0x4c>
 801c06a:	4b26      	ldr	r3, [pc, #152]	; (801c104 <tcp_output_alloc_header_common+0xd8>)
 801c06c:	f240 7223 	movw	r2, #1827	; 0x723
 801c070:	4925      	ldr	r1, [pc, #148]	; (801c108 <tcp_output_alloc_header_common+0xdc>)
 801c072:	4826      	ldr	r0, [pc, #152]	; (801c10c <tcp_output_alloc_header_common+0xe0>)
 801c074:	f00a ff2e 	bl	8026ed4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801c078:	697b      	ldr	r3, [r7, #20]
 801c07a:	685b      	ldr	r3, [r3, #4]
 801c07c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801c07e:	8c3b      	ldrh	r3, [r7, #32]
 801c080:	4618      	mov	r0, r3
 801c082:	f7f7 f825 	bl	80130d0 <lwip_htons>
 801c086:	4603      	mov	r3, r0
 801c088:	461a      	mov	r2, r3
 801c08a:	693b      	ldr	r3, [r7, #16]
 801c08c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801c08e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c090:	4618      	mov	r0, r3
 801c092:	f7f7 f81d 	bl	80130d0 <lwip_htons>
 801c096:	4603      	mov	r3, r0
 801c098:	461a      	mov	r2, r3
 801c09a:	693b      	ldr	r3, [r7, #16]
 801c09c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801c09e:	693b      	ldr	r3, [r7, #16]
 801c0a0:	687a      	ldr	r2, [r7, #4]
 801c0a2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801c0a4:	68f8      	ldr	r0, [r7, #12]
 801c0a6:	f7f7 f828 	bl	80130fa <lwip_htonl>
 801c0aa:	4602      	mov	r2, r0
 801c0ac:	693b      	ldr	r3, [r7, #16]
 801c0ae:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801c0b0:	897b      	ldrh	r3, [r7, #10]
 801c0b2:	089b      	lsrs	r3, r3, #2
 801c0b4:	b29b      	uxth	r3, r3
 801c0b6:	3305      	adds	r3, #5
 801c0b8:	b29b      	uxth	r3, r3
 801c0ba:	031b      	lsls	r3, r3, #12
 801c0bc:	b29a      	uxth	r2, r3
 801c0be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c0c2:	b29b      	uxth	r3, r3
 801c0c4:	4313      	orrs	r3, r2
 801c0c6:	b29b      	uxth	r3, r3
 801c0c8:	4618      	mov	r0, r3
 801c0ca:	f7f7 f801 	bl	80130d0 <lwip_htons>
 801c0ce:	4603      	mov	r3, r0
 801c0d0:	461a      	mov	r2, r3
 801c0d2:	693b      	ldr	r3, [r7, #16]
 801c0d4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801c0d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801c0d8:	4618      	mov	r0, r3
 801c0da:	f7f6 fff9 	bl	80130d0 <lwip_htons>
 801c0de:	4603      	mov	r3, r0
 801c0e0:	461a      	mov	r2, r3
 801c0e2:	693b      	ldr	r3, [r7, #16]
 801c0e4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801c0e6:	693b      	ldr	r3, [r7, #16]
 801c0e8:	2200      	movs	r2, #0
 801c0ea:	741a      	strb	r2, [r3, #16]
 801c0ec:	2200      	movs	r2, #0
 801c0ee:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801c0f0:	693b      	ldr	r3, [r7, #16]
 801c0f2:	2200      	movs	r2, #0
 801c0f4:	749a      	strb	r2, [r3, #18]
 801c0f6:	2200      	movs	r2, #0
 801c0f8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801c0fa:	697b      	ldr	r3, [r7, #20]
}
 801c0fc:	4618      	mov	r0, r3
 801c0fe:	3718      	adds	r7, #24
 801c100:	46bd      	mov	sp, r7
 801c102:	bd80      	pop	{r7, pc}
 801c104:	0802cc00 	.word	0x0802cc00
 801c108:	0802d2d8 	.word	0x0802d2d8
 801c10c:	0802cc54 	.word	0x0802cc54

0801c110 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801c110:	b5b0      	push	{r4, r5, r7, lr}
 801c112:	b08a      	sub	sp, #40	; 0x28
 801c114:	af04      	add	r7, sp, #16
 801c116:	60f8      	str	r0, [r7, #12]
 801c118:	607b      	str	r3, [r7, #4]
 801c11a:	460b      	mov	r3, r1
 801c11c:	817b      	strh	r3, [r7, #10]
 801c11e:	4613      	mov	r3, r2
 801c120:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801c122:	68fb      	ldr	r3, [r7, #12]
 801c124:	2b00      	cmp	r3, #0
 801c126:	d106      	bne.n	801c136 <tcp_output_alloc_header+0x26>
 801c128:	4b15      	ldr	r3, [pc, #84]	; (801c180 <tcp_output_alloc_header+0x70>)
 801c12a:	f240 7242 	movw	r2, #1858	; 0x742
 801c12e:	4915      	ldr	r1, [pc, #84]	; (801c184 <tcp_output_alloc_header+0x74>)
 801c130:	4815      	ldr	r0, [pc, #84]	; (801c188 <tcp_output_alloc_header+0x78>)
 801c132:	f00a fecf 	bl	8026ed4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801c136:	68fb      	ldr	r3, [r7, #12]
 801c138:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801c13a:	68fb      	ldr	r3, [r7, #12]
 801c13c:	8adb      	ldrh	r3, [r3, #22]
 801c13e:	68fa      	ldr	r2, [r7, #12]
 801c140:	8b12      	ldrh	r2, [r2, #24]
 801c142:	68f9      	ldr	r1, [r7, #12]
 801c144:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801c146:	893d      	ldrh	r5, [r7, #8]
 801c148:	897c      	ldrh	r4, [r7, #10]
 801c14a:	9103      	str	r1, [sp, #12]
 801c14c:	2110      	movs	r1, #16
 801c14e:	9102      	str	r1, [sp, #8]
 801c150:	9201      	str	r2, [sp, #4]
 801c152:	9300      	str	r3, [sp, #0]
 801c154:	687b      	ldr	r3, [r7, #4]
 801c156:	462a      	mov	r2, r5
 801c158:	4621      	mov	r1, r4
 801c15a:	f7ff ff67 	bl	801c02c <tcp_output_alloc_header_common>
 801c15e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801c160:	697b      	ldr	r3, [r7, #20]
 801c162:	2b00      	cmp	r3, #0
 801c164:	d006      	beq.n	801c174 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801c166:	68fb      	ldr	r3, [r7, #12]
 801c168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c16a:	68fa      	ldr	r2, [r7, #12]
 801c16c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801c16e:	441a      	add	r2, r3
 801c170:	68fb      	ldr	r3, [r7, #12]
 801c172:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801c174:	697b      	ldr	r3, [r7, #20]
}
 801c176:	4618      	mov	r0, r3
 801c178:	3718      	adds	r7, #24
 801c17a:	46bd      	mov	sp, r7
 801c17c:	bdb0      	pop	{r4, r5, r7, pc}
 801c17e:	bf00      	nop
 801c180:	0802cc00 	.word	0x0802cc00
 801c184:	0802d308 	.word	0x0802d308
 801c188:	0802cc54 	.word	0x0802cc54

0801c18c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801c18c:	b580      	push	{r7, lr}
 801c18e:	b088      	sub	sp, #32
 801c190:	af00      	add	r7, sp, #0
 801c192:	60f8      	str	r0, [r7, #12]
 801c194:	60b9      	str	r1, [r7, #8]
 801c196:	4611      	mov	r1, r2
 801c198:	461a      	mov	r2, r3
 801c19a:	460b      	mov	r3, r1
 801c19c:	71fb      	strb	r3, [r7, #7]
 801c19e:	4613      	mov	r3, r2
 801c1a0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801c1a2:	2300      	movs	r3, #0
 801c1a4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801c1a6:	68bb      	ldr	r3, [r7, #8]
 801c1a8:	2b00      	cmp	r3, #0
 801c1aa:	d106      	bne.n	801c1ba <tcp_output_fill_options+0x2e>
 801c1ac:	4b13      	ldr	r3, [pc, #76]	; (801c1fc <tcp_output_fill_options+0x70>)
 801c1ae:	f240 7256 	movw	r2, #1878	; 0x756
 801c1b2:	4913      	ldr	r1, [pc, #76]	; (801c200 <tcp_output_fill_options+0x74>)
 801c1b4:	4813      	ldr	r0, [pc, #76]	; (801c204 <tcp_output_fill_options+0x78>)
 801c1b6:	f00a fe8d 	bl	8026ed4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801c1ba:	68bb      	ldr	r3, [r7, #8]
 801c1bc:	685b      	ldr	r3, [r3, #4]
 801c1be:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801c1c0:	69bb      	ldr	r3, [r7, #24]
 801c1c2:	3314      	adds	r3, #20
 801c1c4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801c1c6:	69bb      	ldr	r3, [r7, #24]
 801c1c8:	f103 0214 	add.w	r2, r3, #20
 801c1cc:	8bfb      	ldrh	r3, [r7, #30]
 801c1ce:	009b      	lsls	r3, r3, #2
 801c1d0:	4619      	mov	r1, r3
 801c1d2:	79fb      	ldrb	r3, [r7, #7]
 801c1d4:	009b      	lsls	r3, r3, #2
 801c1d6:	f003 0304 	and.w	r3, r3, #4
 801c1da:	440b      	add	r3, r1
 801c1dc:	4413      	add	r3, r2
 801c1de:	697a      	ldr	r2, [r7, #20]
 801c1e0:	429a      	cmp	r2, r3
 801c1e2:	d006      	beq.n	801c1f2 <tcp_output_fill_options+0x66>
 801c1e4:	4b05      	ldr	r3, [pc, #20]	; (801c1fc <tcp_output_fill_options+0x70>)
 801c1e6:	f240 7275 	movw	r2, #1909	; 0x775
 801c1ea:	4907      	ldr	r1, [pc, #28]	; (801c208 <tcp_output_fill_options+0x7c>)
 801c1ec:	4805      	ldr	r0, [pc, #20]	; (801c204 <tcp_output_fill_options+0x78>)
 801c1ee:	f00a fe71 	bl	8026ed4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801c1f2:	bf00      	nop
 801c1f4:	3720      	adds	r7, #32
 801c1f6:	46bd      	mov	sp, r7
 801c1f8:	bd80      	pop	{r7, pc}
 801c1fa:	bf00      	nop
 801c1fc:	0802cc00 	.word	0x0802cc00
 801c200:	0802d330 	.word	0x0802d330
 801c204:	0802cc54 	.word	0x0802cc54
 801c208:	0802d228 	.word	0x0802d228

0801c20c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801c20c:	b580      	push	{r7, lr}
 801c20e:	b08a      	sub	sp, #40	; 0x28
 801c210:	af04      	add	r7, sp, #16
 801c212:	60f8      	str	r0, [r7, #12]
 801c214:	60b9      	str	r1, [r7, #8]
 801c216:	607a      	str	r2, [r7, #4]
 801c218:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801c21a:	68bb      	ldr	r3, [r7, #8]
 801c21c:	2b00      	cmp	r3, #0
 801c21e:	d106      	bne.n	801c22e <tcp_output_control_segment+0x22>
 801c220:	4b1c      	ldr	r3, [pc, #112]	; (801c294 <tcp_output_control_segment+0x88>)
 801c222:	f240 7287 	movw	r2, #1927	; 0x787
 801c226:	491c      	ldr	r1, [pc, #112]	; (801c298 <tcp_output_control_segment+0x8c>)
 801c228:	481c      	ldr	r0, [pc, #112]	; (801c29c <tcp_output_control_segment+0x90>)
 801c22a:	f00a fe53 	bl	8026ed4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801c22e:	683a      	ldr	r2, [r7, #0]
 801c230:	6879      	ldr	r1, [r7, #4]
 801c232:	68f8      	ldr	r0, [r7, #12]
 801c234:	f7fe fae8 	bl	801a808 <tcp_route>
 801c238:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801c23a:	693b      	ldr	r3, [r7, #16]
 801c23c:	2b00      	cmp	r3, #0
 801c23e:	d102      	bne.n	801c246 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801c240:	23fc      	movs	r3, #252	; 0xfc
 801c242:	75fb      	strb	r3, [r7, #23]
 801c244:	e01c      	b.n	801c280 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801c246:	68fb      	ldr	r3, [r7, #12]
 801c248:	2b00      	cmp	r3, #0
 801c24a:	d006      	beq.n	801c25a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801c24c:	68fb      	ldr	r3, [r7, #12]
 801c24e:	7adb      	ldrb	r3, [r3, #11]
 801c250:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801c252:	68fb      	ldr	r3, [r7, #12]
 801c254:	7a9b      	ldrb	r3, [r3, #10]
 801c256:	757b      	strb	r3, [r7, #21]
 801c258:	e003      	b.n	801c262 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801c25a:	23ff      	movs	r3, #255	; 0xff
 801c25c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801c25e:	2300      	movs	r3, #0
 801c260:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801c262:	7dba      	ldrb	r2, [r7, #22]
 801c264:	693b      	ldr	r3, [r7, #16]
 801c266:	9302      	str	r3, [sp, #8]
 801c268:	2306      	movs	r3, #6
 801c26a:	9301      	str	r3, [sp, #4]
 801c26c:	7d7b      	ldrb	r3, [r7, #21]
 801c26e:	9300      	str	r3, [sp, #0]
 801c270:	4613      	mov	r3, r2
 801c272:	683a      	ldr	r2, [r7, #0]
 801c274:	6879      	ldr	r1, [r7, #4]
 801c276:	68b8      	ldr	r0, [r7, #8]
 801c278:	f004 facc 	bl	8020814 <ip4_output_if>
 801c27c:	4603      	mov	r3, r0
 801c27e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801c280:	68b8      	ldr	r0, [r7, #8]
 801c282:	f7f9 fbf7 	bl	8015a74 <pbuf_free>
  return err;
 801c286:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801c28a:	4618      	mov	r0, r3
 801c28c:	3718      	adds	r7, #24
 801c28e:	46bd      	mov	sp, r7
 801c290:	bd80      	pop	{r7, pc}
 801c292:	bf00      	nop
 801c294:	0802cc00 	.word	0x0802cc00
 801c298:	0802d358 	.word	0x0802d358
 801c29c:	0802cc54 	.word	0x0802cc54

0801c2a0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801c2a0:	b590      	push	{r4, r7, lr}
 801c2a2:	b08b      	sub	sp, #44	; 0x2c
 801c2a4:	af04      	add	r7, sp, #16
 801c2a6:	60f8      	str	r0, [r7, #12]
 801c2a8:	60b9      	str	r1, [r7, #8]
 801c2aa:	607a      	str	r2, [r7, #4]
 801c2ac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801c2ae:	683b      	ldr	r3, [r7, #0]
 801c2b0:	2b00      	cmp	r3, #0
 801c2b2:	d106      	bne.n	801c2c2 <tcp_rst+0x22>
 801c2b4:	4b1f      	ldr	r3, [pc, #124]	; (801c334 <tcp_rst+0x94>)
 801c2b6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801c2ba:	491f      	ldr	r1, [pc, #124]	; (801c338 <tcp_rst+0x98>)
 801c2bc:	481f      	ldr	r0, [pc, #124]	; (801c33c <tcp_rst+0x9c>)
 801c2be:	f00a fe09 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801c2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c2c4:	2b00      	cmp	r3, #0
 801c2c6:	d106      	bne.n	801c2d6 <tcp_rst+0x36>
 801c2c8:	4b1a      	ldr	r3, [pc, #104]	; (801c334 <tcp_rst+0x94>)
 801c2ca:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801c2ce:	491c      	ldr	r1, [pc, #112]	; (801c340 <tcp_rst+0xa0>)
 801c2d0:	481a      	ldr	r0, [pc, #104]	; (801c33c <tcp_rst+0x9c>)
 801c2d2:	f00a fdff 	bl	8026ed4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801c2d6:	2300      	movs	r3, #0
 801c2d8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801c2da:	f246 0308 	movw	r3, #24584	; 0x6008
 801c2de:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801c2e0:	7dfb      	ldrb	r3, [r7, #23]
 801c2e2:	b29c      	uxth	r4, r3
 801c2e4:	68b8      	ldr	r0, [r7, #8]
 801c2e6:	f7f6 ff08 	bl	80130fa <lwip_htonl>
 801c2ea:	4602      	mov	r2, r0
 801c2ec:	8abb      	ldrh	r3, [r7, #20]
 801c2ee:	9303      	str	r3, [sp, #12]
 801c2f0:	2314      	movs	r3, #20
 801c2f2:	9302      	str	r3, [sp, #8]
 801c2f4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801c2f6:	9301      	str	r3, [sp, #4]
 801c2f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801c2fa:	9300      	str	r3, [sp, #0]
 801c2fc:	4613      	mov	r3, r2
 801c2fe:	2200      	movs	r2, #0
 801c300:	4621      	mov	r1, r4
 801c302:	6878      	ldr	r0, [r7, #4]
 801c304:	f7ff fe92 	bl	801c02c <tcp_output_alloc_header_common>
 801c308:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801c30a:	693b      	ldr	r3, [r7, #16]
 801c30c:	2b00      	cmp	r3, #0
 801c30e:	d00c      	beq.n	801c32a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801c310:	7dfb      	ldrb	r3, [r7, #23]
 801c312:	2200      	movs	r2, #0
 801c314:	6939      	ldr	r1, [r7, #16]
 801c316:	68f8      	ldr	r0, [r7, #12]
 801c318:	f7ff ff38 	bl	801c18c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801c31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c31e:	683a      	ldr	r2, [r7, #0]
 801c320:	6939      	ldr	r1, [r7, #16]
 801c322:	68f8      	ldr	r0, [r7, #12]
 801c324:	f7ff ff72 	bl	801c20c <tcp_output_control_segment>
 801c328:	e000      	b.n	801c32c <tcp_rst+0x8c>
    return;
 801c32a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801c32c:	371c      	adds	r7, #28
 801c32e:	46bd      	mov	sp, r7
 801c330:	bd90      	pop	{r4, r7, pc}
 801c332:	bf00      	nop
 801c334:	0802cc00 	.word	0x0802cc00
 801c338:	0802d384 	.word	0x0802d384
 801c33c:	0802cc54 	.word	0x0802cc54
 801c340:	0802d3a0 	.word	0x0802d3a0

0801c344 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801c344:	b590      	push	{r4, r7, lr}
 801c346:	b087      	sub	sp, #28
 801c348:	af00      	add	r7, sp, #0
 801c34a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801c34c:	2300      	movs	r3, #0
 801c34e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801c350:	2300      	movs	r3, #0
 801c352:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801c354:	687b      	ldr	r3, [r7, #4]
 801c356:	2b00      	cmp	r3, #0
 801c358:	d106      	bne.n	801c368 <tcp_send_empty_ack+0x24>
 801c35a:	4b28      	ldr	r3, [pc, #160]	; (801c3fc <tcp_send_empty_ack+0xb8>)
 801c35c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801c360:	4927      	ldr	r1, [pc, #156]	; (801c400 <tcp_send_empty_ack+0xbc>)
 801c362:	4828      	ldr	r0, [pc, #160]	; (801c404 <tcp_send_empty_ack+0xc0>)
 801c364:	f00a fdb6 	bl	8026ed4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801c368:	7dfb      	ldrb	r3, [r7, #23]
 801c36a:	009b      	lsls	r3, r3, #2
 801c36c:	b2db      	uxtb	r3, r3
 801c36e:	f003 0304 	and.w	r3, r3, #4
 801c372:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801c374:	7d7b      	ldrb	r3, [r7, #21]
 801c376:	b29c      	uxth	r4, r3
 801c378:	687b      	ldr	r3, [r7, #4]
 801c37a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c37c:	4618      	mov	r0, r3
 801c37e:	f7f6 febc 	bl	80130fa <lwip_htonl>
 801c382:	4603      	mov	r3, r0
 801c384:	2200      	movs	r2, #0
 801c386:	4621      	mov	r1, r4
 801c388:	6878      	ldr	r0, [r7, #4]
 801c38a:	f7ff fec1 	bl	801c110 <tcp_output_alloc_header>
 801c38e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801c390:	693b      	ldr	r3, [r7, #16]
 801c392:	2b00      	cmp	r3, #0
 801c394:	d109      	bne.n	801c3aa <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c396:	687b      	ldr	r3, [r7, #4]
 801c398:	8b5b      	ldrh	r3, [r3, #26]
 801c39a:	f043 0303 	orr.w	r3, r3, #3
 801c39e:	b29a      	uxth	r2, r3
 801c3a0:	687b      	ldr	r3, [r7, #4]
 801c3a2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801c3a4:	f06f 0301 	mvn.w	r3, #1
 801c3a8:	e023      	b.n	801c3f2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801c3aa:	7dbb      	ldrb	r3, [r7, #22]
 801c3ac:	7dfa      	ldrb	r2, [r7, #23]
 801c3ae:	6939      	ldr	r1, [r7, #16]
 801c3b0:	6878      	ldr	r0, [r7, #4]
 801c3b2:	f7ff feeb 	bl	801c18c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c3b6:	687a      	ldr	r2, [r7, #4]
 801c3b8:	687b      	ldr	r3, [r7, #4]
 801c3ba:	3304      	adds	r3, #4
 801c3bc:	6939      	ldr	r1, [r7, #16]
 801c3be:	6878      	ldr	r0, [r7, #4]
 801c3c0:	f7ff ff24 	bl	801c20c <tcp_output_control_segment>
 801c3c4:	4603      	mov	r3, r0
 801c3c6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801c3c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c3cc:	2b00      	cmp	r3, #0
 801c3ce:	d007      	beq.n	801c3e0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c3d0:	687b      	ldr	r3, [r7, #4]
 801c3d2:	8b5b      	ldrh	r3, [r3, #26]
 801c3d4:	f043 0303 	orr.w	r3, r3, #3
 801c3d8:	b29a      	uxth	r2, r3
 801c3da:	687b      	ldr	r3, [r7, #4]
 801c3dc:	835a      	strh	r2, [r3, #26]
 801c3de:	e006      	b.n	801c3ee <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c3e0:	687b      	ldr	r3, [r7, #4]
 801c3e2:	8b5b      	ldrh	r3, [r3, #26]
 801c3e4:	f023 0303 	bic.w	r3, r3, #3
 801c3e8:	b29a      	uxth	r2, r3
 801c3ea:	687b      	ldr	r3, [r7, #4]
 801c3ec:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801c3ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c3f2:	4618      	mov	r0, r3
 801c3f4:	371c      	adds	r7, #28
 801c3f6:	46bd      	mov	sp, r7
 801c3f8:	bd90      	pop	{r4, r7, pc}
 801c3fa:	bf00      	nop
 801c3fc:	0802cc00 	.word	0x0802cc00
 801c400:	0802d3bc 	.word	0x0802d3bc
 801c404:	0802cc54 	.word	0x0802cc54

0801c408 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801c408:	b590      	push	{r4, r7, lr}
 801c40a:	b087      	sub	sp, #28
 801c40c:	af00      	add	r7, sp, #0
 801c40e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801c410:	2300      	movs	r3, #0
 801c412:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801c414:	687b      	ldr	r3, [r7, #4]
 801c416:	2b00      	cmp	r3, #0
 801c418:	d106      	bne.n	801c428 <tcp_keepalive+0x20>
 801c41a:	4b18      	ldr	r3, [pc, #96]	; (801c47c <tcp_keepalive+0x74>)
 801c41c:	f640 0224 	movw	r2, #2084	; 0x824
 801c420:	4917      	ldr	r1, [pc, #92]	; (801c480 <tcp_keepalive+0x78>)
 801c422:	4818      	ldr	r0, [pc, #96]	; (801c484 <tcp_keepalive+0x7c>)
 801c424:	f00a fd56 	bl	8026ed4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801c428:	7dfb      	ldrb	r3, [r7, #23]
 801c42a:	b29c      	uxth	r4, r3
 801c42c:	687b      	ldr	r3, [r7, #4]
 801c42e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c430:	3b01      	subs	r3, #1
 801c432:	4618      	mov	r0, r3
 801c434:	f7f6 fe61 	bl	80130fa <lwip_htonl>
 801c438:	4603      	mov	r3, r0
 801c43a:	2200      	movs	r2, #0
 801c43c:	4621      	mov	r1, r4
 801c43e:	6878      	ldr	r0, [r7, #4]
 801c440:	f7ff fe66 	bl	801c110 <tcp_output_alloc_header>
 801c444:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801c446:	693b      	ldr	r3, [r7, #16]
 801c448:	2b00      	cmp	r3, #0
 801c44a:	d102      	bne.n	801c452 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801c44c:	f04f 33ff 	mov.w	r3, #4294967295
 801c450:	e010      	b.n	801c474 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801c452:	7dfb      	ldrb	r3, [r7, #23]
 801c454:	2200      	movs	r2, #0
 801c456:	6939      	ldr	r1, [r7, #16]
 801c458:	6878      	ldr	r0, [r7, #4]
 801c45a:	f7ff fe97 	bl	801c18c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c45e:	687a      	ldr	r2, [r7, #4]
 801c460:	687b      	ldr	r3, [r7, #4]
 801c462:	3304      	adds	r3, #4
 801c464:	6939      	ldr	r1, [r7, #16]
 801c466:	6878      	ldr	r0, [r7, #4]
 801c468:	f7ff fed0 	bl	801c20c <tcp_output_control_segment>
 801c46c:	4603      	mov	r3, r0
 801c46e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801c470:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c474:	4618      	mov	r0, r3
 801c476:	371c      	adds	r7, #28
 801c478:	46bd      	mov	sp, r7
 801c47a:	bd90      	pop	{r4, r7, pc}
 801c47c:	0802cc00 	.word	0x0802cc00
 801c480:	0802d3dc 	.word	0x0802d3dc
 801c484:	0802cc54 	.word	0x0802cc54

0801c488 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801c488:	b590      	push	{r4, r7, lr}
 801c48a:	b08b      	sub	sp, #44	; 0x2c
 801c48c:	af00      	add	r7, sp, #0
 801c48e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801c490:	2300      	movs	r3, #0
 801c492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801c496:	687b      	ldr	r3, [r7, #4]
 801c498:	2b00      	cmp	r3, #0
 801c49a:	d106      	bne.n	801c4aa <tcp_zero_window_probe+0x22>
 801c49c:	4b4c      	ldr	r3, [pc, #304]	; (801c5d0 <tcp_zero_window_probe+0x148>)
 801c49e:	f640 024f 	movw	r2, #2127	; 0x84f
 801c4a2:	494c      	ldr	r1, [pc, #304]	; (801c5d4 <tcp_zero_window_probe+0x14c>)
 801c4a4:	484c      	ldr	r0, [pc, #304]	; (801c5d8 <tcp_zero_window_probe+0x150>)
 801c4a6:	f00a fd15 	bl	8026ed4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801c4aa:	687b      	ldr	r3, [r7, #4]
 801c4ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c4ae:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801c4b0:	6a3b      	ldr	r3, [r7, #32]
 801c4b2:	2b00      	cmp	r3, #0
 801c4b4:	d101      	bne.n	801c4ba <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801c4b6:	2300      	movs	r3, #0
 801c4b8:	e086      	b.n	801c5c8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801c4ba:	687b      	ldr	r3, [r7, #4]
 801c4bc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801c4c0:	2bff      	cmp	r3, #255	; 0xff
 801c4c2:	d007      	beq.n	801c4d4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801c4c4:	687b      	ldr	r3, [r7, #4]
 801c4c6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801c4ca:	3301      	adds	r3, #1
 801c4cc:	b2da      	uxtb	r2, r3
 801c4ce:	687b      	ldr	r3, [r7, #4]
 801c4d0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801c4d4:	6a3b      	ldr	r3, [r7, #32]
 801c4d6:	68db      	ldr	r3, [r3, #12]
 801c4d8:	899b      	ldrh	r3, [r3, #12]
 801c4da:	b29b      	uxth	r3, r3
 801c4dc:	4618      	mov	r0, r3
 801c4de:	f7f6 fdf7 	bl	80130d0 <lwip_htons>
 801c4e2:	4603      	mov	r3, r0
 801c4e4:	b2db      	uxtb	r3, r3
 801c4e6:	f003 0301 	and.w	r3, r3, #1
 801c4ea:	2b00      	cmp	r3, #0
 801c4ec:	d005      	beq.n	801c4fa <tcp_zero_window_probe+0x72>
 801c4ee:	6a3b      	ldr	r3, [r7, #32]
 801c4f0:	891b      	ldrh	r3, [r3, #8]
 801c4f2:	2b00      	cmp	r3, #0
 801c4f4:	d101      	bne.n	801c4fa <tcp_zero_window_probe+0x72>
 801c4f6:	2301      	movs	r3, #1
 801c4f8:	e000      	b.n	801c4fc <tcp_zero_window_probe+0x74>
 801c4fa:	2300      	movs	r3, #0
 801c4fc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801c4fe:	7ffb      	ldrb	r3, [r7, #31]
 801c500:	2b00      	cmp	r3, #0
 801c502:	bf0c      	ite	eq
 801c504:	2301      	moveq	r3, #1
 801c506:	2300      	movne	r3, #0
 801c508:	b2db      	uxtb	r3, r3
 801c50a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801c50c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c510:	b299      	uxth	r1, r3
 801c512:	6a3b      	ldr	r3, [r7, #32]
 801c514:	68db      	ldr	r3, [r3, #12]
 801c516:	685b      	ldr	r3, [r3, #4]
 801c518:	8bba      	ldrh	r2, [r7, #28]
 801c51a:	6878      	ldr	r0, [r7, #4]
 801c51c:	f7ff fdf8 	bl	801c110 <tcp_output_alloc_header>
 801c520:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801c522:	69bb      	ldr	r3, [r7, #24]
 801c524:	2b00      	cmp	r3, #0
 801c526:	d102      	bne.n	801c52e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801c528:	f04f 33ff 	mov.w	r3, #4294967295
 801c52c:	e04c      	b.n	801c5c8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801c52e:	69bb      	ldr	r3, [r7, #24]
 801c530:	685b      	ldr	r3, [r3, #4]
 801c532:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801c534:	7ffb      	ldrb	r3, [r7, #31]
 801c536:	2b00      	cmp	r3, #0
 801c538:	d011      	beq.n	801c55e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801c53a:	697b      	ldr	r3, [r7, #20]
 801c53c:	899b      	ldrh	r3, [r3, #12]
 801c53e:	b29b      	uxth	r3, r3
 801c540:	b21b      	sxth	r3, r3
 801c542:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801c546:	b21c      	sxth	r4, r3
 801c548:	2011      	movs	r0, #17
 801c54a:	f7f6 fdc1 	bl	80130d0 <lwip_htons>
 801c54e:	4603      	mov	r3, r0
 801c550:	b21b      	sxth	r3, r3
 801c552:	4323      	orrs	r3, r4
 801c554:	b21b      	sxth	r3, r3
 801c556:	b29a      	uxth	r2, r3
 801c558:	697b      	ldr	r3, [r7, #20]
 801c55a:	819a      	strh	r2, [r3, #12]
 801c55c:	e010      	b.n	801c580 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801c55e:	69bb      	ldr	r3, [r7, #24]
 801c560:	685b      	ldr	r3, [r3, #4]
 801c562:	3314      	adds	r3, #20
 801c564:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801c566:	6a3b      	ldr	r3, [r7, #32]
 801c568:	6858      	ldr	r0, [r3, #4]
 801c56a:	6a3b      	ldr	r3, [r7, #32]
 801c56c:	685b      	ldr	r3, [r3, #4]
 801c56e:	891a      	ldrh	r2, [r3, #8]
 801c570:	6a3b      	ldr	r3, [r7, #32]
 801c572:	891b      	ldrh	r3, [r3, #8]
 801c574:	1ad3      	subs	r3, r2, r3
 801c576:	b29b      	uxth	r3, r3
 801c578:	2201      	movs	r2, #1
 801c57a:	6939      	ldr	r1, [r7, #16]
 801c57c:	f7f9 fc80 	bl	8015e80 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801c580:	6a3b      	ldr	r3, [r7, #32]
 801c582:	68db      	ldr	r3, [r3, #12]
 801c584:	685b      	ldr	r3, [r3, #4]
 801c586:	4618      	mov	r0, r3
 801c588:	f7f6 fdb7 	bl	80130fa <lwip_htonl>
 801c58c:	4603      	mov	r3, r0
 801c58e:	3301      	adds	r3, #1
 801c590:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801c592:	687b      	ldr	r3, [r7, #4]
 801c594:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c596:	68fb      	ldr	r3, [r7, #12]
 801c598:	1ad3      	subs	r3, r2, r3
 801c59a:	2b00      	cmp	r3, #0
 801c59c:	da02      	bge.n	801c5a4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801c59e:	687b      	ldr	r3, [r7, #4]
 801c5a0:	68fa      	ldr	r2, [r7, #12]
 801c5a2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801c5a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c5a8:	2200      	movs	r2, #0
 801c5aa:	69b9      	ldr	r1, [r7, #24]
 801c5ac:	6878      	ldr	r0, [r7, #4]
 801c5ae:	f7ff fded 	bl	801c18c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c5b2:	687a      	ldr	r2, [r7, #4]
 801c5b4:	687b      	ldr	r3, [r7, #4]
 801c5b6:	3304      	adds	r3, #4
 801c5b8:	69b9      	ldr	r1, [r7, #24]
 801c5ba:	6878      	ldr	r0, [r7, #4]
 801c5bc:	f7ff fe26 	bl	801c20c <tcp_output_control_segment>
 801c5c0:	4603      	mov	r3, r0
 801c5c2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801c5c4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801c5c8:	4618      	mov	r0, r3
 801c5ca:	372c      	adds	r7, #44	; 0x2c
 801c5cc:	46bd      	mov	sp, r7
 801c5ce:	bd90      	pop	{r4, r7, pc}
 801c5d0:	0802cc00 	.word	0x0802cc00
 801c5d4:	0802d3f8 	.word	0x0802d3f8
 801c5d8:	0802cc54 	.word	0x0802cc54

0801c5dc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801c5dc:	b580      	push	{r7, lr}
 801c5de:	b082      	sub	sp, #8
 801c5e0:	af00      	add	r7, sp, #0
 801c5e2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801c5e4:	f7f9 fece 	bl	8016384 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801c5e8:	4b0a      	ldr	r3, [pc, #40]	; (801c614 <tcpip_tcp_timer+0x38>)
 801c5ea:	681b      	ldr	r3, [r3, #0]
 801c5ec:	2b00      	cmp	r3, #0
 801c5ee:	d103      	bne.n	801c5f8 <tcpip_tcp_timer+0x1c>
 801c5f0:	4b09      	ldr	r3, [pc, #36]	; (801c618 <tcpip_tcp_timer+0x3c>)
 801c5f2:	681b      	ldr	r3, [r3, #0]
 801c5f4:	2b00      	cmp	r3, #0
 801c5f6:	d005      	beq.n	801c604 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801c5f8:	2200      	movs	r2, #0
 801c5fa:	4908      	ldr	r1, [pc, #32]	; (801c61c <tcpip_tcp_timer+0x40>)
 801c5fc:	20fa      	movs	r0, #250	; 0xfa
 801c5fe:	f000 f8f3 	bl	801c7e8 <sys_timeout>
 801c602:	e003      	b.n	801c60c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801c604:	4b06      	ldr	r3, [pc, #24]	; (801c620 <tcpip_tcp_timer+0x44>)
 801c606:	2200      	movs	r2, #0
 801c608:	601a      	str	r2, [r3, #0]
  }
}
 801c60a:	bf00      	nop
 801c60c:	bf00      	nop
 801c60e:	3708      	adds	r7, #8
 801c610:	46bd      	mov	sp, r7
 801c612:	bd80      	pop	{r7, pc}
 801c614:	24008668 	.word	0x24008668
 801c618:	24008678 	.word	0x24008678
 801c61c:	0801c5dd 	.word	0x0801c5dd
 801c620:	24004fc8 	.word	0x24004fc8

0801c624 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801c624:	b580      	push	{r7, lr}
 801c626:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801c628:	4b0a      	ldr	r3, [pc, #40]	; (801c654 <tcp_timer_needed+0x30>)
 801c62a:	681b      	ldr	r3, [r3, #0]
 801c62c:	2b00      	cmp	r3, #0
 801c62e:	d10f      	bne.n	801c650 <tcp_timer_needed+0x2c>
 801c630:	4b09      	ldr	r3, [pc, #36]	; (801c658 <tcp_timer_needed+0x34>)
 801c632:	681b      	ldr	r3, [r3, #0]
 801c634:	2b00      	cmp	r3, #0
 801c636:	d103      	bne.n	801c640 <tcp_timer_needed+0x1c>
 801c638:	4b08      	ldr	r3, [pc, #32]	; (801c65c <tcp_timer_needed+0x38>)
 801c63a:	681b      	ldr	r3, [r3, #0]
 801c63c:	2b00      	cmp	r3, #0
 801c63e:	d007      	beq.n	801c650 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801c640:	4b04      	ldr	r3, [pc, #16]	; (801c654 <tcp_timer_needed+0x30>)
 801c642:	2201      	movs	r2, #1
 801c644:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801c646:	2200      	movs	r2, #0
 801c648:	4905      	ldr	r1, [pc, #20]	; (801c660 <tcp_timer_needed+0x3c>)
 801c64a:	20fa      	movs	r0, #250	; 0xfa
 801c64c:	f000 f8cc 	bl	801c7e8 <sys_timeout>
  }
}
 801c650:	bf00      	nop
 801c652:	bd80      	pop	{r7, pc}
 801c654:	24004fc8 	.word	0x24004fc8
 801c658:	24008668 	.word	0x24008668
 801c65c:	24008678 	.word	0x24008678
 801c660:	0801c5dd 	.word	0x0801c5dd

0801c664 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801c664:	b580      	push	{r7, lr}
 801c666:	b086      	sub	sp, #24
 801c668:	af00      	add	r7, sp, #0
 801c66a:	60f8      	str	r0, [r7, #12]
 801c66c:	60b9      	str	r1, [r7, #8]
 801c66e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801c670:	200a      	movs	r0, #10
 801c672:	f7f8 faa7 	bl	8014bc4 <memp_malloc>
 801c676:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801c678:	693b      	ldr	r3, [r7, #16]
 801c67a:	2b00      	cmp	r3, #0
 801c67c:	d109      	bne.n	801c692 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801c67e:	693b      	ldr	r3, [r7, #16]
 801c680:	2b00      	cmp	r3, #0
 801c682:	d151      	bne.n	801c728 <sys_timeout_abs+0xc4>
 801c684:	4b2a      	ldr	r3, [pc, #168]	; (801c730 <sys_timeout_abs+0xcc>)
 801c686:	22be      	movs	r2, #190	; 0xbe
 801c688:	492a      	ldr	r1, [pc, #168]	; (801c734 <sys_timeout_abs+0xd0>)
 801c68a:	482b      	ldr	r0, [pc, #172]	; (801c738 <sys_timeout_abs+0xd4>)
 801c68c:	f00a fc22 	bl	8026ed4 <iprintf>
    return;
 801c690:	e04a      	b.n	801c728 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801c692:	693b      	ldr	r3, [r7, #16]
 801c694:	2200      	movs	r2, #0
 801c696:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801c698:	693b      	ldr	r3, [r7, #16]
 801c69a:	68ba      	ldr	r2, [r7, #8]
 801c69c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801c69e:	693b      	ldr	r3, [r7, #16]
 801c6a0:	687a      	ldr	r2, [r7, #4]
 801c6a2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801c6a4:	693b      	ldr	r3, [r7, #16]
 801c6a6:	68fa      	ldr	r2, [r7, #12]
 801c6a8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801c6aa:	4b24      	ldr	r3, [pc, #144]	; (801c73c <sys_timeout_abs+0xd8>)
 801c6ac:	681b      	ldr	r3, [r3, #0]
 801c6ae:	2b00      	cmp	r3, #0
 801c6b0:	d103      	bne.n	801c6ba <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801c6b2:	4a22      	ldr	r2, [pc, #136]	; (801c73c <sys_timeout_abs+0xd8>)
 801c6b4:	693b      	ldr	r3, [r7, #16]
 801c6b6:	6013      	str	r3, [r2, #0]
    return;
 801c6b8:	e037      	b.n	801c72a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801c6ba:	693b      	ldr	r3, [r7, #16]
 801c6bc:	685a      	ldr	r2, [r3, #4]
 801c6be:	4b1f      	ldr	r3, [pc, #124]	; (801c73c <sys_timeout_abs+0xd8>)
 801c6c0:	681b      	ldr	r3, [r3, #0]
 801c6c2:	685b      	ldr	r3, [r3, #4]
 801c6c4:	1ad3      	subs	r3, r2, r3
 801c6c6:	0fdb      	lsrs	r3, r3, #31
 801c6c8:	f003 0301 	and.w	r3, r3, #1
 801c6cc:	b2db      	uxtb	r3, r3
 801c6ce:	2b00      	cmp	r3, #0
 801c6d0:	d007      	beq.n	801c6e2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801c6d2:	4b1a      	ldr	r3, [pc, #104]	; (801c73c <sys_timeout_abs+0xd8>)
 801c6d4:	681a      	ldr	r2, [r3, #0]
 801c6d6:	693b      	ldr	r3, [r7, #16]
 801c6d8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801c6da:	4a18      	ldr	r2, [pc, #96]	; (801c73c <sys_timeout_abs+0xd8>)
 801c6dc:	693b      	ldr	r3, [r7, #16]
 801c6de:	6013      	str	r3, [r2, #0]
 801c6e0:	e023      	b.n	801c72a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801c6e2:	4b16      	ldr	r3, [pc, #88]	; (801c73c <sys_timeout_abs+0xd8>)
 801c6e4:	681b      	ldr	r3, [r3, #0]
 801c6e6:	617b      	str	r3, [r7, #20]
 801c6e8:	e01a      	b.n	801c720 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801c6ea:	697b      	ldr	r3, [r7, #20]
 801c6ec:	681b      	ldr	r3, [r3, #0]
 801c6ee:	2b00      	cmp	r3, #0
 801c6f0:	d00b      	beq.n	801c70a <sys_timeout_abs+0xa6>
 801c6f2:	693b      	ldr	r3, [r7, #16]
 801c6f4:	685a      	ldr	r2, [r3, #4]
 801c6f6:	697b      	ldr	r3, [r7, #20]
 801c6f8:	681b      	ldr	r3, [r3, #0]
 801c6fa:	685b      	ldr	r3, [r3, #4]
 801c6fc:	1ad3      	subs	r3, r2, r3
 801c6fe:	0fdb      	lsrs	r3, r3, #31
 801c700:	f003 0301 	and.w	r3, r3, #1
 801c704:	b2db      	uxtb	r3, r3
 801c706:	2b00      	cmp	r3, #0
 801c708:	d007      	beq.n	801c71a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801c70a:	697b      	ldr	r3, [r7, #20]
 801c70c:	681a      	ldr	r2, [r3, #0]
 801c70e:	693b      	ldr	r3, [r7, #16]
 801c710:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801c712:	697b      	ldr	r3, [r7, #20]
 801c714:	693a      	ldr	r2, [r7, #16]
 801c716:	601a      	str	r2, [r3, #0]
        break;
 801c718:	e007      	b.n	801c72a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801c71a:	697b      	ldr	r3, [r7, #20]
 801c71c:	681b      	ldr	r3, [r3, #0]
 801c71e:	617b      	str	r3, [r7, #20]
 801c720:	697b      	ldr	r3, [r7, #20]
 801c722:	2b00      	cmp	r3, #0
 801c724:	d1e1      	bne.n	801c6ea <sys_timeout_abs+0x86>
 801c726:	e000      	b.n	801c72a <sys_timeout_abs+0xc6>
    return;
 801c728:	bf00      	nop
      }
    }
  }
}
 801c72a:	3718      	adds	r7, #24
 801c72c:	46bd      	mov	sp, r7
 801c72e:	bd80      	pop	{r7, pc}
 801c730:	0802d41c 	.word	0x0802d41c
 801c734:	0802d450 	.word	0x0802d450
 801c738:	0802d490 	.word	0x0802d490
 801c73c:	24004fc0 	.word	0x24004fc0

0801c740 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801c740:	b580      	push	{r7, lr}
 801c742:	b086      	sub	sp, #24
 801c744:	af00      	add	r7, sp, #0
 801c746:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801c748:	687b      	ldr	r3, [r7, #4]
 801c74a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801c74c:	697b      	ldr	r3, [r7, #20]
 801c74e:	685b      	ldr	r3, [r3, #4]
 801c750:	4798      	blx	r3

  now = sys_now();
 801c752:	f7ee fbab 	bl	800aeac <sys_now>
 801c756:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801c758:	697b      	ldr	r3, [r7, #20]
 801c75a:	681a      	ldr	r2, [r3, #0]
 801c75c:	4b0f      	ldr	r3, [pc, #60]	; (801c79c <lwip_cyclic_timer+0x5c>)
 801c75e:	681b      	ldr	r3, [r3, #0]
 801c760:	4413      	add	r3, r2
 801c762:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801c764:	68fa      	ldr	r2, [r7, #12]
 801c766:	693b      	ldr	r3, [r7, #16]
 801c768:	1ad3      	subs	r3, r2, r3
 801c76a:	0fdb      	lsrs	r3, r3, #31
 801c76c:	f003 0301 	and.w	r3, r3, #1
 801c770:	b2db      	uxtb	r3, r3
 801c772:	2b00      	cmp	r3, #0
 801c774:	d009      	beq.n	801c78a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801c776:	697b      	ldr	r3, [r7, #20]
 801c778:	681a      	ldr	r2, [r3, #0]
 801c77a:	693b      	ldr	r3, [r7, #16]
 801c77c:	4413      	add	r3, r2
 801c77e:	687a      	ldr	r2, [r7, #4]
 801c780:	4907      	ldr	r1, [pc, #28]	; (801c7a0 <lwip_cyclic_timer+0x60>)
 801c782:	4618      	mov	r0, r3
 801c784:	f7ff ff6e 	bl	801c664 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801c788:	e004      	b.n	801c794 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801c78a:	687a      	ldr	r2, [r7, #4]
 801c78c:	4904      	ldr	r1, [pc, #16]	; (801c7a0 <lwip_cyclic_timer+0x60>)
 801c78e:	68f8      	ldr	r0, [r7, #12]
 801c790:	f7ff ff68 	bl	801c664 <sys_timeout_abs>
}
 801c794:	bf00      	nop
 801c796:	3718      	adds	r7, #24
 801c798:	46bd      	mov	sp, r7
 801c79a:	bd80      	pop	{r7, pc}
 801c79c:	24004fc4 	.word	0x24004fc4
 801c7a0:	0801c741 	.word	0x0801c741

0801c7a4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801c7a4:	b580      	push	{r7, lr}
 801c7a6:	b082      	sub	sp, #8
 801c7a8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c7aa:	2301      	movs	r3, #1
 801c7ac:	607b      	str	r3, [r7, #4]
 801c7ae:	e00e      	b.n	801c7ce <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801c7b0:	4a0b      	ldr	r2, [pc, #44]	; (801c7e0 <sys_timeouts_init+0x3c>)
 801c7b2:	687b      	ldr	r3, [r7, #4]
 801c7b4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801c7b8:	687b      	ldr	r3, [r7, #4]
 801c7ba:	00db      	lsls	r3, r3, #3
 801c7bc:	4a08      	ldr	r2, [pc, #32]	; (801c7e0 <sys_timeouts_init+0x3c>)
 801c7be:	4413      	add	r3, r2
 801c7c0:	461a      	mov	r2, r3
 801c7c2:	4908      	ldr	r1, [pc, #32]	; (801c7e4 <sys_timeouts_init+0x40>)
 801c7c4:	f000 f810 	bl	801c7e8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c7c8:	687b      	ldr	r3, [r7, #4]
 801c7ca:	3301      	adds	r3, #1
 801c7cc:	607b      	str	r3, [r7, #4]
 801c7ce:	687b      	ldr	r3, [r7, #4]
 801c7d0:	2b05      	cmp	r3, #5
 801c7d2:	d9ed      	bls.n	801c7b0 <sys_timeouts_init+0xc>
  }
}
 801c7d4:	bf00      	nop
 801c7d6:	bf00      	nop
 801c7d8:	3708      	adds	r7, #8
 801c7da:	46bd      	mov	sp, r7
 801c7dc:	bd80      	pop	{r7, pc}
 801c7de:	bf00      	nop
 801c7e0:	0802ec30 	.word	0x0802ec30
 801c7e4:	0801c741 	.word	0x0801c741

0801c7e8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801c7e8:	b580      	push	{r7, lr}
 801c7ea:	b086      	sub	sp, #24
 801c7ec:	af00      	add	r7, sp, #0
 801c7ee:	60f8      	str	r0, [r7, #12]
 801c7f0:	60b9      	str	r1, [r7, #8]
 801c7f2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801c7f4:	68fb      	ldr	r3, [r7, #12]
 801c7f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c7fa:	d306      	bcc.n	801c80a <sys_timeout+0x22>
 801c7fc:	4b0a      	ldr	r3, [pc, #40]	; (801c828 <sys_timeout+0x40>)
 801c7fe:	f240 1229 	movw	r2, #297	; 0x129
 801c802:	490a      	ldr	r1, [pc, #40]	; (801c82c <sys_timeout+0x44>)
 801c804:	480a      	ldr	r0, [pc, #40]	; (801c830 <sys_timeout+0x48>)
 801c806:	f00a fb65 	bl	8026ed4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801c80a:	f7ee fb4f 	bl	800aeac <sys_now>
 801c80e:	4602      	mov	r2, r0
 801c810:	68fb      	ldr	r3, [r7, #12]
 801c812:	4413      	add	r3, r2
 801c814:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801c816:	687a      	ldr	r2, [r7, #4]
 801c818:	68b9      	ldr	r1, [r7, #8]
 801c81a:	6978      	ldr	r0, [r7, #20]
 801c81c:	f7ff ff22 	bl	801c664 <sys_timeout_abs>
#endif
}
 801c820:	bf00      	nop
 801c822:	3718      	adds	r7, #24
 801c824:	46bd      	mov	sp, r7
 801c826:	bd80      	pop	{r7, pc}
 801c828:	0802d41c 	.word	0x0802d41c
 801c82c:	0802d4b8 	.word	0x0802d4b8
 801c830:	0802d490 	.word	0x0802d490

0801c834 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 801c834:	b580      	push	{r7, lr}
 801c836:	b084      	sub	sp, #16
 801c838:	af00      	add	r7, sp, #0
 801c83a:	6078      	str	r0, [r7, #4]
 801c83c:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801c83e:	4b19      	ldr	r3, [pc, #100]	; (801c8a4 <sys_untimeout+0x70>)
 801c840:	681b      	ldr	r3, [r3, #0]
 801c842:	2b00      	cmp	r3, #0
 801c844:	d029      	beq.n	801c89a <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801c846:	4b17      	ldr	r3, [pc, #92]	; (801c8a4 <sys_untimeout+0x70>)
 801c848:	681b      	ldr	r3, [r3, #0]
 801c84a:	60bb      	str	r3, [r7, #8]
 801c84c:	2300      	movs	r3, #0
 801c84e:	60fb      	str	r3, [r7, #12]
 801c850:	e01f      	b.n	801c892 <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 801c852:	68bb      	ldr	r3, [r7, #8]
 801c854:	689b      	ldr	r3, [r3, #8]
 801c856:	687a      	ldr	r2, [r7, #4]
 801c858:	429a      	cmp	r2, r3
 801c85a:	d115      	bne.n	801c888 <sys_untimeout+0x54>
 801c85c:	68bb      	ldr	r3, [r7, #8]
 801c85e:	68db      	ldr	r3, [r3, #12]
 801c860:	683a      	ldr	r2, [r7, #0]
 801c862:	429a      	cmp	r2, r3
 801c864:	d110      	bne.n	801c888 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 801c866:	68fb      	ldr	r3, [r7, #12]
 801c868:	2b00      	cmp	r3, #0
 801c86a:	d104      	bne.n	801c876 <sys_untimeout+0x42>
        next_timeout = t->next;
 801c86c:	68bb      	ldr	r3, [r7, #8]
 801c86e:	681b      	ldr	r3, [r3, #0]
 801c870:	4a0c      	ldr	r2, [pc, #48]	; (801c8a4 <sys_untimeout+0x70>)
 801c872:	6013      	str	r3, [r2, #0]
 801c874:	e003      	b.n	801c87e <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 801c876:	68bb      	ldr	r3, [r7, #8]
 801c878:	681a      	ldr	r2, [r3, #0]
 801c87a:	68fb      	ldr	r3, [r7, #12]
 801c87c:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 801c87e:	68b9      	ldr	r1, [r7, #8]
 801c880:	200a      	movs	r0, #10
 801c882:	f7f8 fa15 	bl	8014cb0 <memp_free>
      return;
 801c886:	e009      	b.n	801c89c <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801c888:	68bb      	ldr	r3, [r7, #8]
 801c88a:	60fb      	str	r3, [r7, #12]
 801c88c:	68bb      	ldr	r3, [r7, #8]
 801c88e:	681b      	ldr	r3, [r3, #0]
 801c890:	60bb      	str	r3, [r7, #8]
 801c892:	68bb      	ldr	r3, [r7, #8]
 801c894:	2b00      	cmp	r3, #0
 801c896:	d1dc      	bne.n	801c852 <sys_untimeout+0x1e>
    }
  }
  return;
 801c898:	e000      	b.n	801c89c <sys_untimeout+0x68>
    return;
 801c89a:	bf00      	nop
}
 801c89c:	3710      	adds	r7, #16
 801c89e:	46bd      	mov	sp, r7
 801c8a0:	bd80      	pop	{r7, pc}
 801c8a2:	bf00      	nop
 801c8a4:	24004fc0 	.word	0x24004fc0

0801c8a8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801c8a8:	b580      	push	{r7, lr}
 801c8aa:	b084      	sub	sp, #16
 801c8ac:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801c8ae:	f7ee fafd 	bl	800aeac <sys_now>
 801c8b2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801c8b4:	4b17      	ldr	r3, [pc, #92]	; (801c914 <sys_check_timeouts+0x6c>)
 801c8b6:	681b      	ldr	r3, [r3, #0]
 801c8b8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801c8ba:	68bb      	ldr	r3, [r7, #8]
 801c8bc:	2b00      	cmp	r3, #0
 801c8be:	d022      	beq.n	801c906 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801c8c0:	68bb      	ldr	r3, [r7, #8]
 801c8c2:	685b      	ldr	r3, [r3, #4]
 801c8c4:	68fa      	ldr	r2, [r7, #12]
 801c8c6:	1ad3      	subs	r3, r2, r3
 801c8c8:	0fdb      	lsrs	r3, r3, #31
 801c8ca:	f003 0301 	and.w	r3, r3, #1
 801c8ce:	b2db      	uxtb	r3, r3
 801c8d0:	2b00      	cmp	r3, #0
 801c8d2:	d11a      	bne.n	801c90a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801c8d4:	68bb      	ldr	r3, [r7, #8]
 801c8d6:	681b      	ldr	r3, [r3, #0]
 801c8d8:	4a0e      	ldr	r2, [pc, #56]	; (801c914 <sys_check_timeouts+0x6c>)
 801c8da:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801c8dc:	68bb      	ldr	r3, [r7, #8]
 801c8de:	689b      	ldr	r3, [r3, #8]
 801c8e0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801c8e2:	68bb      	ldr	r3, [r7, #8]
 801c8e4:	68db      	ldr	r3, [r3, #12]
 801c8e6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801c8e8:	68bb      	ldr	r3, [r7, #8]
 801c8ea:	685b      	ldr	r3, [r3, #4]
 801c8ec:	4a0a      	ldr	r2, [pc, #40]	; (801c918 <sys_check_timeouts+0x70>)
 801c8ee:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801c8f0:	68b9      	ldr	r1, [r7, #8]
 801c8f2:	200a      	movs	r0, #10
 801c8f4:	f7f8 f9dc 	bl	8014cb0 <memp_free>
    if (handler != NULL) {
 801c8f8:	687b      	ldr	r3, [r7, #4]
 801c8fa:	2b00      	cmp	r3, #0
 801c8fc:	d0da      	beq.n	801c8b4 <sys_check_timeouts+0xc>
      handler(arg);
 801c8fe:	687b      	ldr	r3, [r7, #4]
 801c900:	6838      	ldr	r0, [r7, #0]
 801c902:	4798      	blx	r3
  do {
 801c904:	e7d6      	b.n	801c8b4 <sys_check_timeouts+0xc>
      return;
 801c906:	bf00      	nop
 801c908:	e000      	b.n	801c90c <sys_check_timeouts+0x64>
      return;
 801c90a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801c90c:	3710      	adds	r7, #16
 801c90e:	46bd      	mov	sp, r7
 801c910:	bd80      	pop	{r7, pc}
 801c912:	bf00      	nop
 801c914:	24004fc0 	.word	0x24004fc0
 801c918:	24004fc4 	.word	0x24004fc4

0801c91c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801c91c:	b580      	push	{r7, lr}
 801c91e:	b082      	sub	sp, #8
 801c920:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801c922:	4b16      	ldr	r3, [pc, #88]	; (801c97c <sys_timeouts_sleeptime+0x60>)
 801c924:	681b      	ldr	r3, [r3, #0]
 801c926:	2b00      	cmp	r3, #0
 801c928:	d102      	bne.n	801c930 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801c92a:	f04f 33ff 	mov.w	r3, #4294967295
 801c92e:	e020      	b.n	801c972 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801c930:	f7ee fabc 	bl	800aeac <sys_now>
 801c934:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801c936:	4b11      	ldr	r3, [pc, #68]	; (801c97c <sys_timeouts_sleeptime+0x60>)
 801c938:	681b      	ldr	r3, [r3, #0]
 801c93a:	685a      	ldr	r2, [r3, #4]
 801c93c:	687b      	ldr	r3, [r7, #4]
 801c93e:	1ad3      	subs	r3, r2, r3
 801c940:	0fdb      	lsrs	r3, r3, #31
 801c942:	f003 0301 	and.w	r3, r3, #1
 801c946:	b2db      	uxtb	r3, r3
 801c948:	2b00      	cmp	r3, #0
 801c94a:	d001      	beq.n	801c950 <sys_timeouts_sleeptime+0x34>
    return 0;
 801c94c:	2300      	movs	r3, #0
 801c94e:	e010      	b.n	801c972 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801c950:	4b0a      	ldr	r3, [pc, #40]	; (801c97c <sys_timeouts_sleeptime+0x60>)
 801c952:	681b      	ldr	r3, [r3, #0]
 801c954:	685a      	ldr	r2, [r3, #4]
 801c956:	687b      	ldr	r3, [r7, #4]
 801c958:	1ad3      	subs	r3, r2, r3
 801c95a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801c95c:	683b      	ldr	r3, [r7, #0]
 801c95e:	2b00      	cmp	r3, #0
 801c960:	da06      	bge.n	801c970 <sys_timeouts_sleeptime+0x54>
 801c962:	4b07      	ldr	r3, [pc, #28]	; (801c980 <sys_timeouts_sleeptime+0x64>)
 801c964:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801c968:	4906      	ldr	r1, [pc, #24]	; (801c984 <sys_timeouts_sleeptime+0x68>)
 801c96a:	4807      	ldr	r0, [pc, #28]	; (801c988 <sys_timeouts_sleeptime+0x6c>)
 801c96c:	f00a fab2 	bl	8026ed4 <iprintf>
    return ret;
 801c970:	683b      	ldr	r3, [r7, #0]
  }
}
 801c972:	4618      	mov	r0, r3
 801c974:	3708      	adds	r7, #8
 801c976:	46bd      	mov	sp, r7
 801c978:	bd80      	pop	{r7, pc}
 801c97a:	bf00      	nop
 801c97c:	24004fc0 	.word	0x24004fc0
 801c980:	0802d41c 	.word	0x0802d41c
 801c984:	0802d4f0 	.word	0x0802d4f0
 801c988:	0802d490 	.word	0x0802d490

0801c98c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801c98c:	b580      	push	{r7, lr}
 801c98e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801c990:	f00a fb2e 	bl	8026ff0 <rand>
 801c994:	4603      	mov	r3, r0
 801c996:	b29b      	uxth	r3, r3
 801c998:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801c99c:	b29b      	uxth	r3, r3
 801c99e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801c9a2:	b29a      	uxth	r2, r3
 801c9a4:	4b01      	ldr	r3, [pc, #4]	; (801c9ac <udp_init+0x20>)
 801c9a6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801c9a8:	bf00      	nop
 801c9aa:	bd80      	pop	{r7, pc}
 801c9ac:	24000034 	.word	0x24000034

0801c9b0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801c9b0:	b480      	push	{r7}
 801c9b2:	b083      	sub	sp, #12
 801c9b4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801c9b6:	2300      	movs	r3, #0
 801c9b8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801c9ba:	4b17      	ldr	r3, [pc, #92]	; (801ca18 <udp_new_port+0x68>)
 801c9bc:	881b      	ldrh	r3, [r3, #0]
 801c9be:	1c5a      	adds	r2, r3, #1
 801c9c0:	b291      	uxth	r1, r2
 801c9c2:	4a15      	ldr	r2, [pc, #84]	; (801ca18 <udp_new_port+0x68>)
 801c9c4:	8011      	strh	r1, [r2, #0]
 801c9c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c9ca:	4293      	cmp	r3, r2
 801c9cc:	d103      	bne.n	801c9d6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801c9ce:	4b12      	ldr	r3, [pc, #72]	; (801ca18 <udp_new_port+0x68>)
 801c9d0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801c9d4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c9d6:	4b11      	ldr	r3, [pc, #68]	; (801ca1c <udp_new_port+0x6c>)
 801c9d8:	681b      	ldr	r3, [r3, #0]
 801c9da:	603b      	str	r3, [r7, #0]
 801c9dc:	e011      	b.n	801ca02 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801c9de:	683b      	ldr	r3, [r7, #0]
 801c9e0:	8a5a      	ldrh	r2, [r3, #18]
 801c9e2:	4b0d      	ldr	r3, [pc, #52]	; (801ca18 <udp_new_port+0x68>)
 801c9e4:	881b      	ldrh	r3, [r3, #0]
 801c9e6:	429a      	cmp	r2, r3
 801c9e8:	d108      	bne.n	801c9fc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801c9ea:	88fb      	ldrh	r3, [r7, #6]
 801c9ec:	3301      	adds	r3, #1
 801c9ee:	80fb      	strh	r3, [r7, #6]
 801c9f0:	88fb      	ldrh	r3, [r7, #6]
 801c9f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c9f6:	d3e0      	bcc.n	801c9ba <udp_new_port+0xa>
        return 0;
 801c9f8:	2300      	movs	r3, #0
 801c9fa:	e007      	b.n	801ca0c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c9fc:	683b      	ldr	r3, [r7, #0]
 801c9fe:	68db      	ldr	r3, [r3, #12]
 801ca00:	603b      	str	r3, [r7, #0]
 801ca02:	683b      	ldr	r3, [r7, #0]
 801ca04:	2b00      	cmp	r3, #0
 801ca06:	d1ea      	bne.n	801c9de <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801ca08:	4b03      	ldr	r3, [pc, #12]	; (801ca18 <udp_new_port+0x68>)
 801ca0a:	881b      	ldrh	r3, [r3, #0]
}
 801ca0c:	4618      	mov	r0, r3
 801ca0e:	370c      	adds	r7, #12
 801ca10:	46bd      	mov	sp, r7
 801ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca16:	4770      	bx	lr
 801ca18:	24000034 	.word	0x24000034
 801ca1c:	24008680 	.word	0x24008680

0801ca20 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801ca20:	b580      	push	{r7, lr}
 801ca22:	b084      	sub	sp, #16
 801ca24:	af00      	add	r7, sp, #0
 801ca26:	60f8      	str	r0, [r7, #12]
 801ca28:	60b9      	str	r1, [r7, #8]
 801ca2a:	4613      	mov	r3, r2
 801ca2c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801ca2e:	68fb      	ldr	r3, [r7, #12]
 801ca30:	2b00      	cmp	r3, #0
 801ca32:	d105      	bne.n	801ca40 <udp_input_local_match+0x20>
 801ca34:	4b27      	ldr	r3, [pc, #156]	; (801cad4 <udp_input_local_match+0xb4>)
 801ca36:	2287      	movs	r2, #135	; 0x87
 801ca38:	4927      	ldr	r1, [pc, #156]	; (801cad8 <udp_input_local_match+0xb8>)
 801ca3a:	4828      	ldr	r0, [pc, #160]	; (801cadc <udp_input_local_match+0xbc>)
 801ca3c:	f00a fa4a 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801ca40:	68bb      	ldr	r3, [r7, #8]
 801ca42:	2b00      	cmp	r3, #0
 801ca44:	d105      	bne.n	801ca52 <udp_input_local_match+0x32>
 801ca46:	4b23      	ldr	r3, [pc, #140]	; (801cad4 <udp_input_local_match+0xb4>)
 801ca48:	2288      	movs	r2, #136	; 0x88
 801ca4a:	4925      	ldr	r1, [pc, #148]	; (801cae0 <udp_input_local_match+0xc0>)
 801ca4c:	4823      	ldr	r0, [pc, #140]	; (801cadc <udp_input_local_match+0xbc>)
 801ca4e:	f00a fa41 	bl	8026ed4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ca52:	68fb      	ldr	r3, [r7, #12]
 801ca54:	7a1b      	ldrb	r3, [r3, #8]
 801ca56:	2b00      	cmp	r3, #0
 801ca58:	d00b      	beq.n	801ca72 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801ca5a:	68fb      	ldr	r3, [r7, #12]
 801ca5c:	7a1a      	ldrb	r2, [r3, #8]
 801ca5e:	4b21      	ldr	r3, [pc, #132]	; (801cae4 <udp_input_local_match+0xc4>)
 801ca60:	685b      	ldr	r3, [r3, #4]
 801ca62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801ca66:	3301      	adds	r3, #1
 801ca68:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ca6a:	429a      	cmp	r2, r3
 801ca6c:	d001      	beq.n	801ca72 <udp_input_local_match+0x52>
    return 0;
 801ca6e:	2300      	movs	r3, #0
 801ca70:	e02b      	b.n	801caca <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801ca72:	79fb      	ldrb	r3, [r7, #7]
 801ca74:	2b00      	cmp	r3, #0
 801ca76:	d018      	beq.n	801caaa <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ca78:	68fb      	ldr	r3, [r7, #12]
 801ca7a:	2b00      	cmp	r3, #0
 801ca7c:	d013      	beq.n	801caa6 <udp_input_local_match+0x86>
 801ca7e:	68fb      	ldr	r3, [r7, #12]
 801ca80:	681b      	ldr	r3, [r3, #0]
 801ca82:	2b00      	cmp	r3, #0
 801ca84:	d00f      	beq.n	801caa6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801ca86:	4b17      	ldr	r3, [pc, #92]	; (801cae4 <udp_input_local_match+0xc4>)
 801ca88:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ca8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ca8e:	d00a      	beq.n	801caa6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801ca90:	68fb      	ldr	r3, [r7, #12]
 801ca92:	681a      	ldr	r2, [r3, #0]
 801ca94:	4b13      	ldr	r3, [pc, #76]	; (801cae4 <udp_input_local_match+0xc4>)
 801ca96:	695b      	ldr	r3, [r3, #20]
 801ca98:	405a      	eors	r2, r3
 801ca9a:	68bb      	ldr	r3, [r7, #8]
 801ca9c:	3308      	adds	r3, #8
 801ca9e:	681b      	ldr	r3, [r3, #0]
 801caa0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801caa2:	2b00      	cmp	r3, #0
 801caa4:	d110      	bne.n	801cac8 <udp_input_local_match+0xa8>
          return 1;
 801caa6:	2301      	movs	r3, #1
 801caa8:	e00f      	b.n	801caca <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801caaa:	68fb      	ldr	r3, [r7, #12]
 801caac:	2b00      	cmp	r3, #0
 801caae:	d009      	beq.n	801cac4 <udp_input_local_match+0xa4>
 801cab0:	68fb      	ldr	r3, [r7, #12]
 801cab2:	681b      	ldr	r3, [r3, #0]
 801cab4:	2b00      	cmp	r3, #0
 801cab6:	d005      	beq.n	801cac4 <udp_input_local_match+0xa4>
 801cab8:	68fb      	ldr	r3, [r7, #12]
 801caba:	681a      	ldr	r2, [r3, #0]
 801cabc:	4b09      	ldr	r3, [pc, #36]	; (801cae4 <udp_input_local_match+0xc4>)
 801cabe:	695b      	ldr	r3, [r3, #20]
 801cac0:	429a      	cmp	r2, r3
 801cac2:	d101      	bne.n	801cac8 <udp_input_local_match+0xa8>
        return 1;
 801cac4:	2301      	movs	r3, #1
 801cac6:	e000      	b.n	801caca <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801cac8:	2300      	movs	r3, #0
}
 801caca:	4618      	mov	r0, r3
 801cacc:	3710      	adds	r7, #16
 801cace:	46bd      	mov	sp, r7
 801cad0:	bd80      	pop	{r7, pc}
 801cad2:	bf00      	nop
 801cad4:	0802d504 	.word	0x0802d504
 801cad8:	0802d534 	.word	0x0802d534
 801cadc:	0802d558 	.word	0x0802d558
 801cae0:	0802d580 	.word	0x0802d580
 801cae4:	24005400 	.word	0x24005400

0801cae8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801cae8:	b590      	push	{r4, r7, lr}
 801caea:	b08d      	sub	sp, #52	; 0x34
 801caec:	af02      	add	r7, sp, #8
 801caee:	6078      	str	r0, [r7, #4]
 801caf0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801caf2:	2300      	movs	r3, #0
 801caf4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801caf6:	687b      	ldr	r3, [r7, #4]
 801caf8:	2b00      	cmp	r3, #0
 801cafa:	d105      	bne.n	801cb08 <udp_input+0x20>
 801cafc:	4b7c      	ldr	r3, [pc, #496]	; (801ccf0 <udp_input+0x208>)
 801cafe:	22cf      	movs	r2, #207	; 0xcf
 801cb00:	497c      	ldr	r1, [pc, #496]	; (801ccf4 <udp_input+0x20c>)
 801cb02:	487d      	ldr	r0, [pc, #500]	; (801ccf8 <udp_input+0x210>)
 801cb04:	f00a f9e6 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801cb08:	683b      	ldr	r3, [r7, #0]
 801cb0a:	2b00      	cmp	r3, #0
 801cb0c:	d105      	bne.n	801cb1a <udp_input+0x32>
 801cb0e:	4b78      	ldr	r3, [pc, #480]	; (801ccf0 <udp_input+0x208>)
 801cb10:	22d0      	movs	r2, #208	; 0xd0
 801cb12:	497a      	ldr	r1, [pc, #488]	; (801ccfc <udp_input+0x214>)
 801cb14:	4878      	ldr	r0, [pc, #480]	; (801ccf8 <udp_input+0x210>)
 801cb16:	f00a f9dd 	bl	8026ed4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801cb1a:	687b      	ldr	r3, [r7, #4]
 801cb1c:	895b      	ldrh	r3, [r3, #10]
 801cb1e:	2b07      	cmp	r3, #7
 801cb20:	d803      	bhi.n	801cb2a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801cb22:	6878      	ldr	r0, [r7, #4]
 801cb24:	f7f8 ffa6 	bl	8015a74 <pbuf_free>
    goto end;
 801cb28:	e0de      	b.n	801cce8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801cb2a:	687b      	ldr	r3, [r7, #4]
 801cb2c:	685b      	ldr	r3, [r3, #4]
 801cb2e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801cb30:	4b73      	ldr	r3, [pc, #460]	; (801cd00 <udp_input+0x218>)
 801cb32:	695b      	ldr	r3, [r3, #20]
 801cb34:	4a72      	ldr	r2, [pc, #456]	; (801cd00 <udp_input+0x218>)
 801cb36:	6812      	ldr	r2, [r2, #0]
 801cb38:	4611      	mov	r1, r2
 801cb3a:	4618      	mov	r0, r3
 801cb3c:	f003 ff42 	bl	80209c4 <ip4_addr_isbroadcast_u32>
 801cb40:	4603      	mov	r3, r0
 801cb42:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801cb44:	697b      	ldr	r3, [r7, #20]
 801cb46:	881b      	ldrh	r3, [r3, #0]
 801cb48:	b29b      	uxth	r3, r3
 801cb4a:	4618      	mov	r0, r3
 801cb4c:	f7f6 fac0 	bl	80130d0 <lwip_htons>
 801cb50:	4603      	mov	r3, r0
 801cb52:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801cb54:	697b      	ldr	r3, [r7, #20]
 801cb56:	885b      	ldrh	r3, [r3, #2]
 801cb58:	b29b      	uxth	r3, r3
 801cb5a:	4618      	mov	r0, r3
 801cb5c:	f7f6 fab8 	bl	80130d0 <lwip_htons>
 801cb60:	4603      	mov	r3, r0
 801cb62:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801cb64:	2300      	movs	r3, #0
 801cb66:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801cb68:	2300      	movs	r3, #0
 801cb6a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801cb6c:	2300      	movs	r3, #0
 801cb6e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801cb70:	4b64      	ldr	r3, [pc, #400]	; (801cd04 <udp_input+0x21c>)
 801cb72:	681b      	ldr	r3, [r3, #0]
 801cb74:	627b      	str	r3, [r7, #36]	; 0x24
 801cb76:	e054      	b.n	801cc22 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801cb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb7a:	8a5b      	ldrh	r3, [r3, #18]
 801cb7c:	89fa      	ldrh	r2, [r7, #14]
 801cb7e:	429a      	cmp	r2, r3
 801cb80:	d14a      	bne.n	801cc18 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801cb82:	7cfb      	ldrb	r3, [r7, #19]
 801cb84:	461a      	mov	r2, r3
 801cb86:	6839      	ldr	r1, [r7, #0]
 801cb88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801cb8a:	f7ff ff49 	bl	801ca20 <udp_input_local_match>
 801cb8e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801cb90:	2b00      	cmp	r3, #0
 801cb92:	d041      	beq.n	801cc18 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801cb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb96:	7c1b      	ldrb	r3, [r3, #16]
 801cb98:	f003 0304 	and.w	r3, r3, #4
 801cb9c:	2b00      	cmp	r3, #0
 801cb9e:	d11d      	bne.n	801cbdc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801cba0:	69fb      	ldr	r3, [r7, #28]
 801cba2:	2b00      	cmp	r3, #0
 801cba4:	d102      	bne.n	801cbac <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801cba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cba8:	61fb      	str	r3, [r7, #28]
 801cbaa:	e017      	b.n	801cbdc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801cbac:	7cfb      	ldrb	r3, [r7, #19]
 801cbae:	2b00      	cmp	r3, #0
 801cbb0:	d014      	beq.n	801cbdc <udp_input+0xf4>
 801cbb2:	4b53      	ldr	r3, [pc, #332]	; (801cd00 <udp_input+0x218>)
 801cbb4:	695b      	ldr	r3, [r3, #20]
 801cbb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cbba:	d10f      	bne.n	801cbdc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801cbbc:	69fb      	ldr	r3, [r7, #28]
 801cbbe:	681a      	ldr	r2, [r3, #0]
 801cbc0:	683b      	ldr	r3, [r7, #0]
 801cbc2:	3304      	adds	r3, #4
 801cbc4:	681b      	ldr	r3, [r3, #0]
 801cbc6:	429a      	cmp	r2, r3
 801cbc8:	d008      	beq.n	801cbdc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801cbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbcc:	681a      	ldr	r2, [r3, #0]
 801cbce:	683b      	ldr	r3, [r7, #0]
 801cbd0:	3304      	adds	r3, #4
 801cbd2:	681b      	ldr	r3, [r3, #0]
 801cbd4:	429a      	cmp	r2, r3
 801cbd6:	d101      	bne.n	801cbdc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801cbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbda:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801cbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbde:	8a9b      	ldrh	r3, [r3, #20]
 801cbe0:	8a3a      	ldrh	r2, [r7, #16]
 801cbe2:	429a      	cmp	r2, r3
 801cbe4:	d118      	bne.n	801cc18 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801cbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbe8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801cbea:	2b00      	cmp	r3, #0
 801cbec:	d005      	beq.n	801cbfa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801cbee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbf0:	685a      	ldr	r2, [r3, #4]
 801cbf2:	4b43      	ldr	r3, [pc, #268]	; (801cd00 <udp_input+0x218>)
 801cbf4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801cbf6:	429a      	cmp	r2, r3
 801cbf8:	d10e      	bne.n	801cc18 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801cbfa:	6a3b      	ldr	r3, [r7, #32]
 801cbfc:	2b00      	cmp	r3, #0
 801cbfe:	d014      	beq.n	801cc2a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801cc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc02:	68da      	ldr	r2, [r3, #12]
 801cc04:	6a3b      	ldr	r3, [r7, #32]
 801cc06:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801cc08:	4b3e      	ldr	r3, [pc, #248]	; (801cd04 <udp_input+0x21c>)
 801cc0a:	681a      	ldr	r2, [r3, #0]
 801cc0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc0e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801cc10:	4a3c      	ldr	r2, [pc, #240]	; (801cd04 <udp_input+0x21c>)
 801cc12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc14:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801cc16:	e008      	b.n	801cc2a <udp_input+0x142>
      }
    }

    prev = pcb;
 801cc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc1a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801cc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc1e:	68db      	ldr	r3, [r3, #12]
 801cc20:	627b      	str	r3, [r7, #36]	; 0x24
 801cc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc24:	2b00      	cmp	r3, #0
 801cc26:	d1a7      	bne.n	801cb78 <udp_input+0x90>
 801cc28:	e000      	b.n	801cc2c <udp_input+0x144>
        break;
 801cc2a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801cc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc2e:	2b00      	cmp	r3, #0
 801cc30:	d101      	bne.n	801cc36 <udp_input+0x14e>
    pcb = uncon_pcb;
 801cc32:	69fb      	ldr	r3, [r7, #28]
 801cc34:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801cc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc38:	2b00      	cmp	r3, #0
 801cc3a:	d002      	beq.n	801cc42 <udp_input+0x15a>
    for_us = 1;
 801cc3c:	2301      	movs	r3, #1
 801cc3e:	76fb      	strb	r3, [r7, #27]
 801cc40:	e00a      	b.n	801cc58 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801cc42:	683b      	ldr	r3, [r7, #0]
 801cc44:	3304      	adds	r3, #4
 801cc46:	681a      	ldr	r2, [r3, #0]
 801cc48:	4b2d      	ldr	r3, [pc, #180]	; (801cd00 <udp_input+0x218>)
 801cc4a:	695b      	ldr	r3, [r3, #20]
 801cc4c:	429a      	cmp	r2, r3
 801cc4e:	bf0c      	ite	eq
 801cc50:	2301      	moveq	r3, #1
 801cc52:	2300      	movne	r3, #0
 801cc54:	b2db      	uxtb	r3, r3
 801cc56:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801cc58:	7efb      	ldrb	r3, [r7, #27]
 801cc5a:	2b00      	cmp	r3, #0
 801cc5c:	d041      	beq.n	801cce2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801cc5e:	2108      	movs	r1, #8
 801cc60:	6878      	ldr	r0, [r7, #4]
 801cc62:	f7f8 fe4f 	bl	8015904 <pbuf_remove_header>
 801cc66:	4603      	mov	r3, r0
 801cc68:	2b00      	cmp	r3, #0
 801cc6a:	d00a      	beq.n	801cc82 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801cc6c:	4b20      	ldr	r3, [pc, #128]	; (801ccf0 <udp_input+0x208>)
 801cc6e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801cc72:	4925      	ldr	r1, [pc, #148]	; (801cd08 <udp_input+0x220>)
 801cc74:	4820      	ldr	r0, [pc, #128]	; (801ccf8 <udp_input+0x210>)
 801cc76:	f00a f92d 	bl	8026ed4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801cc7a:	6878      	ldr	r0, [r7, #4]
 801cc7c:	f7f8 fefa 	bl	8015a74 <pbuf_free>
      goto end;
 801cc80:	e032      	b.n	801cce8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801cc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc84:	2b00      	cmp	r3, #0
 801cc86:	d012      	beq.n	801ccae <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801cc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc8a:	699b      	ldr	r3, [r3, #24]
 801cc8c:	2b00      	cmp	r3, #0
 801cc8e:	d00a      	beq.n	801cca6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801cc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc92:	699c      	ldr	r4, [r3, #24]
 801cc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc96:	69d8      	ldr	r0, [r3, #28]
 801cc98:	8a3b      	ldrh	r3, [r7, #16]
 801cc9a:	9300      	str	r3, [sp, #0]
 801cc9c:	4b1b      	ldr	r3, [pc, #108]	; (801cd0c <udp_input+0x224>)
 801cc9e:	687a      	ldr	r2, [r7, #4]
 801cca0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801cca2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801cca4:	e021      	b.n	801ccea <udp_input+0x202>
        pbuf_free(p);
 801cca6:	6878      	ldr	r0, [r7, #4]
 801cca8:	f7f8 fee4 	bl	8015a74 <pbuf_free>
        goto end;
 801ccac:	e01c      	b.n	801cce8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801ccae:	7cfb      	ldrb	r3, [r7, #19]
 801ccb0:	2b00      	cmp	r3, #0
 801ccb2:	d112      	bne.n	801ccda <udp_input+0x1f2>
 801ccb4:	4b12      	ldr	r3, [pc, #72]	; (801cd00 <udp_input+0x218>)
 801ccb6:	695b      	ldr	r3, [r3, #20]
 801ccb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ccbc:	2be0      	cmp	r3, #224	; 0xe0
 801ccbe:	d00c      	beq.n	801ccda <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801ccc0:	4b0f      	ldr	r3, [pc, #60]	; (801cd00 <udp_input+0x218>)
 801ccc2:	899b      	ldrh	r3, [r3, #12]
 801ccc4:	3308      	adds	r3, #8
 801ccc6:	b29b      	uxth	r3, r3
 801ccc8:	b21b      	sxth	r3, r3
 801ccca:	4619      	mov	r1, r3
 801cccc:	6878      	ldr	r0, [r7, #4]
 801ccce:	f7f8 fe8c 	bl	80159ea <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801ccd2:	2103      	movs	r1, #3
 801ccd4:	6878      	ldr	r0, [r7, #4]
 801ccd6:	f003 fb2d 	bl	8020334 <icmp_dest_unreach>
      pbuf_free(p);
 801ccda:	6878      	ldr	r0, [r7, #4]
 801ccdc:	f7f8 feca 	bl	8015a74 <pbuf_free>
  return;
 801cce0:	e003      	b.n	801ccea <udp_input+0x202>
    pbuf_free(p);
 801cce2:	6878      	ldr	r0, [r7, #4]
 801cce4:	f7f8 fec6 	bl	8015a74 <pbuf_free>
  return;
 801cce8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801ccea:	372c      	adds	r7, #44	; 0x2c
 801ccec:	46bd      	mov	sp, r7
 801ccee:	bd90      	pop	{r4, r7, pc}
 801ccf0:	0802d504 	.word	0x0802d504
 801ccf4:	0802d5a8 	.word	0x0802d5a8
 801ccf8:	0802d558 	.word	0x0802d558
 801ccfc:	0802d5c0 	.word	0x0802d5c0
 801cd00:	24005400 	.word	0x24005400
 801cd04:	24008680 	.word	0x24008680
 801cd08:	0802d5dc 	.word	0x0802d5dc
 801cd0c:	24005410 	.word	0x24005410

0801cd10 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801cd10:	b580      	push	{r7, lr}
 801cd12:	b082      	sub	sp, #8
 801cd14:	af00      	add	r7, sp, #0
 801cd16:	6078      	str	r0, [r7, #4]
 801cd18:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801cd1a:	687b      	ldr	r3, [r7, #4]
 801cd1c:	2b00      	cmp	r3, #0
 801cd1e:	d109      	bne.n	801cd34 <udp_send+0x24>
 801cd20:	4b11      	ldr	r3, [pc, #68]	; (801cd68 <udp_send+0x58>)
 801cd22:	f240 12d5 	movw	r2, #469	; 0x1d5
 801cd26:	4911      	ldr	r1, [pc, #68]	; (801cd6c <udp_send+0x5c>)
 801cd28:	4811      	ldr	r0, [pc, #68]	; (801cd70 <udp_send+0x60>)
 801cd2a:	f00a f8d3 	bl	8026ed4 <iprintf>
 801cd2e:	f06f 030f 	mvn.w	r3, #15
 801cd32:	e015      	b.n	801cd60 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801cd34:	683b      	ldr	r3, [r7, #0]
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	d109      	bne.n	801cd4e <udp_send+0x3e>
 801cd3a:	4b0b      	ldr	r3, [pc, #44]	; (801cd68 <udp_send+0x58>)
 801cd3c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801cd40:	490c      	ldr	r1, [pc, #48]	; (801cd74 <udp_send+0x64>)
 801cd42:	480b      	ldr	r0, [pc, #44]	; (801cd70 <udp_send+0x60>)
 801cd44:	f00a f8c6 	bl	8026ed4 <iprintf>
 801cd48:	f06f 030f 	mvn.w	r3, #15
 801cd4c:	e008      	b.n	801cd60 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801cd4e:	687b      	ldr	r3, [r7, #4]
 801cd50:	1d1a      	adds	r2, r3, #4
 801cd52:	687b      	ldr	r3, [r7, #4]
 801cd54:	8a9b      	ldrh	r3, [r3, #20]
 801cd56:	6839      	ldr	r1, [r7, #0]
 801cd58:	6878      	ldr	r0, [r7, #4]
 801cd5a:	f000 f80d 	bl	801cd78 <udp_sendto>
 801cd5e:	4603      	mov	r3, r0
}
 801cd60:	4618      	mov	r0, r3
 801cd62:	3708      	adds	r7, #8
 801cd64:	46bd      	mov	sp, r7
 801cd66:	bd80      	pop	{r7, pc}
 801cd68:	0802d504 	.word	0x0802d504
 801cd6c:	0802d5f8 	.word	0x0802d5f8
 801cd70:	0802d558 	.word	0x0802d558
 801cd74:	0802d610 	.word	0x0802d610

0801cd78 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801cd78:	b580      	push	{r7, lr}
 801cd7a:	b088      	sub	sp, #32
 801cd7c:	af02      	add	r7, sp, #8
 801cd7e:	60f8      	str	r0, [r7, #12]
 801cd80:	60b9      	str	r1, [r7, #8]
 801cd82:	607a      	str	r2, [r7, #4]
 801cd84:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801cd86:	68fb      	ldr	r3, [r7, #12]
 801cd88:	2b00      	cmp	r3, #0
 801cd8a:	d109      	bne.n	801cda0 <udp_sendto+0x28>
 801cd8c:	4b23      	ldr	r3, [pc, #140]	; (801ce1c <udp_sendto+0xa4>)
 801cd8e:	f44f 7206 	mov.w	r2, #536	; 0x218
 801cd92:	4923      	ldr	r1, [pc, #140]	; (801ce20 <udp_sendto+0xa8>)
 801cd94:	4823      	ldr	r0, [pc, #140]	; (801ce24 <udp_sendto+0xac>)
 801cd96:	f00a f89d 	bl	8026ed4 <iprintf>
 801cd9a:	f06f 030f 	mvn.w	r3, #15
 801cd9e:	e038      	b.n	801ce12 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801cda0:	68bb      	ldr	r3, [r7, #8]
 801cda2:	2b00      	cmp	r3, #0
 801cda4:	d109      	bne.n	801cdba <udp_sendto+0x42>
 801cda6:	4b1d      	ldr	r3, [pc, #116]	; (801ce1c <udp_sendto+0xa4>)
 801cda8:	f240 2219 	movw	r2, #537	; 0x219
 801cdac:	491e      	ldr	r1, [pc, #120]	; (801ce28 <udp_sendto+0xb0>)
 801cdae:	481d      	ldr	r0, [pc, #116]	; (801ce24 <udp_sendto+0xac>)
 801cdb0:	f00a f890 	bl	8026ed4 <iprintf>
 801cdb4:	f06f 030f 	mvn.w	r3, #15
 801cdb8:	e02b      	b.n	801ce12 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801cdba:	687b      	ldr	r3, [r7, #4]
 801cdbc:	2b00      	cmp	r3, #0
 801cdbe:	d109      	bne.n	801cdd4 <udp_sendto+0x5c>
 801cdc0:	4b16      	ldr	r3, [pc, #88]	; (801ce1c <udp_sendto+0xa4>)
 801cdc2:	f240 221a 	movw	r2, #538	; 0x21a
 801cdc6:	4919      	ldr	r1, [pc, #100]	; (801ce2c <udp_sendto+0xb4>)
 801cdc8:	4816      	ldr	r0, [pc, #88]	; (801ce24 <udp_sendto+0xac>)
 801cdca:	f00a f883 	bl	8026ed4 <iprintf>
 801cdce:	f06f 030f 	mvn.w	r3, #15
 801cdd2:	e01e      	b.n	801ce12 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801cdd4:	68fb      	ldr	r3, [r7, #12]
 801cdd6:	7a1b      	ldrb	r3, [r3, #8]
 801cdd8:	2b00      	cmp	r3, #0
 801cdda:	d006      	beq.n	801cdea <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801cddc:	68fb      	ldr	r3, [r7, #12]
 801cdde:	7a1b      	ldrb	r3, [r3, #8]
 801cde0:	4618      	mov	r0, r3
 801cde2:	f7f8 fa87 	bl	80152f4 <netif_get_by_index>
 801cde6:	6178      	str	r0, [r7, #20]
 801cde8:	e003      	b.n	801cdf2 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801cdea:	6878      	ldr	r0, [r7, #4]
 801cdec:	f003 fb36 	bl	802045c <ip4_route>
 801cdf0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801cdf2:	697b      	ldr	r3, [r7, #20]
 801cdf4:	2b00      	cmp	r3, #0
 801cdf6:	d102      	bne.n	801cdfe <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801cdf8:	f06f 0303 	mvn.w	r3, #3
 801cdfc:	e009      	b.n	801ce12 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801cdfe:	887a      	ldrh	r2, [r7, #2]
 801ce00:	697b      	ldr	r3, [r7, #20]
 801ce02:	9300      	str	r3, [sp, #0]
 801ce04:	4613      	mov	r3, r2
 801ce06:	687a      	ldr	r2, [r7, #4]
 801ce08:	68b9      	ldr	r1, [r7, #8]
 801ce0a:	68f8      	ldr	r0, [r7, #12]
 801ce0c:	f000 f810 	bl	801ce30 <udp_sendto_if>
 801ce10:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801ce12:	4618      	mov	r0, r3
 801ce14:	3718      	adds	r7, #24
 801ce16:	46bd      	mov	sp, r7
 801ce18:	bd80      	pop	{r7, pc}
 801ce1a:	bf00      	nop
 801ce1c:	0802d504 	.word	0x0802d504
 801ce20:	0802d628 	.word	0x0802d628
 801ce24:	0802d558 	.word	0x0802d558
 801ce28:	0802d640 	.word	0x0802d640
 801ce2c:	0802d65c 	.word	0x0802d65c

0801ce30 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801ce30:	b580      	push	{r7, lr}
 801ce32:	b088      	sub	sp, #32
 801ce34:	af02      	add	r7, sp, #8
 801ce36:	60f8      	str	r0, [r7, #12]
 801ce38:	60b9      	str	r1, [r7, #8]
 801ce3a:	607a      	str	r2, [r7, #4]
 801ce3c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801ce3e:	68fb      	ldr	r3, [r7, #12]
 801ce40:	2b00      	cmp	r3, #0
 801ce42:	d109      	bne.n	801ce58 <udp_sendto_if+0x28>
 801ce44:	4b2e      	ldr	r3, [pc, #184]	; (801cf00 <udp_sendto_if+0xd0>)
 801ce46:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ce4a:	492e      	ldr	r1, [pc, #184]	; (801cf04 <udp_sendto_if+0xd4>)
 801ce4c:	482e      	ldr	r0, [pc, #184]	; (801cf08 <udp_sendto_if+0xd8>)
 801ce4e:	f00a f841 	bl	8026ed4 <iprintf>
 801ce52:	f06f 030f 	mvn.w	r3, #15
 801ce56:	e04f      	b.n	801cef8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801ce58:	68bb      	ldr	r3, [r7, #8]
 801ce5a:	2b00      	cmp	r3, #0
 801ce5c:	d109      	bne.n	801ce72 <udp_sendto_if+0x42>
 801ce5e:	4b28      	ldr	r3, [pc, #160]	; (801cf00 <udp_sendto_if+0xd0>)
 801ce60:	f240 2281 	movw	r2, #641	; 0x281
 801ce64:	4929      	ldr	r1, [pc, #164]	; (801cf0c <udp_sendto_if+0xdc>)
 801ce66:	4828      	ldr	r0, [pc, #160]	; (801cf08 <udp_sendto_if+0xd8>)
 801ce68:	f00a f834 	bl	8026ed4 <iprintf>
 801ce6c:	f06f 030f 	mvn.w	r3, #15
 801ce70:	e042      	b.n	801cef8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801ce72:	687b      	ldr	r3, [r7, #4]
 801ce74:	2b00      	cmp	r3, #0
 801ce76:	d109      	bne.n	801ce8c <udp_sendto_if+0x5c>
 801ce78:	4b21      	ldr	r3, [pc, #132]	; (801cf00 <udp_sendto_if+0xd0>)
 801ce7a:	f240 2282 	movw	r2, #642	; 0x282
 801ce7e:	4924      	ldr	r1, [pc, #144]	; (801cf10 <udp_sendto_if+0xe0>)
 801ce80:	4821      	ldr	r0, [pc, #132]	; (801cf08 <udp_sendto_if+0xd8>)
 801ce82:	f00a f827 	bl	8026ed4 <iprintf>
 801ce86:	f06f 030f 	mvn.w	r3, #15
 801ce8a:	e035      	b.n	801cef8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801ce8c:	6a3b      	ldr	r3, [r7, #32]
 801ce8e:	2b00      	cmp	r3, #0
 801ce90:	d109      	bne.n	801cea6 <udp_sendto_if+0x76>
 801ce92:	4b1b      	ldr	r3, [pc, #108]	; (801cf00 <udp_sendto_if+0xd0>)
 801ce94:	f240 2283 	movw	r2, #643	; 0x283
 801ce98:	491e      	ldr	r1, [pc, #120]	; (801cf14 <udp_sendto_if+0xe4>)
 801ce9a:	481b      	ldr	r0, [pc, #108]	; (801cf08 <udp_sendto_if+0xd8>)
 801ce9c:	f00a f81a 	bl	8026ed4 <iprintf>
 801cea0:	f06f 030f 	mvn.w	r3, #15
 801cea4:	e028      	b.n	801cef8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801cea6:	68fb      	ldr	r3, [r7, #12]
 801cea8:	2b00      	cmp	r3, #0
 801ceaa:	d009      	beq.n	801cec0 <udp_sendto_if+0x90>
 801ceac:	68fb      	ldr	r3, [r7, #12]
 801ceae:	681b      	ldr	r3, [r3, #0]
 801ceb0:	2b00      	cmp	r3, #0
 801ceb2:	d005      	beq.n	801cec0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801ceb4:	68fb      	ldr	r3, [r7, #12]
 801ceb6:	681b      	ldr	r3, [r3, #0]
 801ceb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801cebc:	2be0      	cmp	r3, #224	; 0xe0
 801cebe:	d103      	bne.n	801cec8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801cec0:	6a3b      	ldr	r3, [r7, #32]
 801cec2:	3304      	adds	r3, #4
 801cec4:	617b      	str	r3, [r7, #20]
 801cec6:	e00b      	b.n	801cee0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801cec8:	68fb      	ldr	r3, [r7, #12]
 801ceca:	681a      	ldr	r2, [r3, #0]
 801cecc:	6a3b      	ldr	r3, [r7, #32]
 801cece:	3304      	adds	r3, #4
 801ced0:	681b      	ldr	r3, [r3, #0]
 801ced2:	429a      	cmp	r2, r3
 801ced4:	d002      	beq.n	801cedc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801ced6:	f06f 0303 	mvn.w	r3, #3
 801ceda:	e00d      	b.n	801cef8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801cedc:	68fb      	ldr	r3, [r7, #12]
 801cede:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801cee0:	887a      	ldrh	r2, [r7, #2]
 801cee2:	697b      	ldr	r3, [r7, #20]
 801cee4:	9301      	str	r3, [sp, #4]
 801cee6:	6a3b      	ldr	r3, [r7, #32]
 801cee8:	9300      	str	r3, [sp, #0]
 801ceea:	4613      	mov	r3, r2
 801ceec:	687a      	ldr	r2, [r7, #4]
 801ceee:	68b9      	ldr	r1, [r7, #8]
 801cef0:	68f8      	ldr	r0, [r7, #12]
 801cef2:	f000 f811 	bl	801cf18 <udp_sendto_if_src>
 801cef6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801cef8:	4618      	mov	r0, r3
 801cefa:	3718      	adds	r7, #24
 801cefc:	46bd      	mov	sp, r7
 801cefe:	bd80      	pop	{r7, pc}
 801cf00:	0802d504 	.word	0x0802d504
 801cf04:	0802d678 	.word	0x0802d678
 801cf08:	0802d558 	.word	0x0802d558
 801cf0c:	0802d694 	.word	0x0802d694
 801cf10:	0802d6b0 	.word	0x0802d6b0
 801cf14:	0802d6d0 	.word	0x0802d6d0

0801cf18 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801cf18:	b580      	push	{r7, lr}
 801cf1a:	b08c      	sub	sp, #48	; 0x30
 801cf1c:	af04      	add	r7, sp, #16
 801cf1e:	60f8      	str	r0, [r7, #12]
 801cf20:	60b9      	str	r1, [r7, #8]
 801cf22:	607a      	str	r2, [r7, #4]
 801cf24:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801cf26:	68fb      	ldr	r3, [r7, #12]
 801cf28:	2b00      	cmp	r3, #0
 801cf2a:	d109      	bne.n	801cf40 <udp_sendto_if_src+0x28>
 801cf2c:	4b65      	ldr	r3, [pc, #404]	; (801d0c4 <udp_sendto_if_src+0x1ac>)
 801cf2e:	f240 22d1 	movw	r2, #721	; 0x2d1
 801cf32:	4965      	ldr	r1, [pc, #404]	; (801d0c8 <udp_sendto_if_src+0x1b0>)
 801cf34:	4865      	ldr	r0, [pc, #404]	; (801d0cc <udp_sendto_if_src+0x1b4>)
 801cf36:	f009 ffcd 	bl	8026ed4 <iprintf>
 801cf3a:	f06f 030f 	mvn.w	r3, #15
 801cf3e:	e0bc      	b.n	801d0ba <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801cf40:	68bb      	ldr	r3, [r7, #8]
 801cf42:	2b00      	cmp	r3, #0
 801cf44:	d109      	bne.n	801cf5a <udp_sendto_if_src+0x42>
 801cf46:	4b5f      	ldr	r3, [pc, #380]	; (801d0c4 <udp_sendto_if_src+0x1ac>)
 801cf48:	f240 22d2 	movw	r2, #722	; 0x2d2
 801cf4c:	4960      	ldr	r1, [pc, #384]	; (801d0d0 <udp_sendto_if_src+0x1b8>)
 801cf4e:	485f      	ldr	r0, [pc, #380]	; (801d0cc <udp_sendto_if_src+0x1b4>)
 801cf50:	f009 ffc0 	bl	8026ed4 <iprintf>
 801cf54:	f06f 030f 	mvn.w	r3, #15
 801cf58:	e0af      	b.n	801d0ba <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801cf5a:	687b      	ldr	r3, [r7, #4]
 801cf5c:	2b00      	cmp	r3, #0
 801cf5e:	d109      	bne.n	801cf74 <udp_sendto_if_src+0x5c>
 801cf60:	4b58      	ldr	r3, [pc, #352]	; (801d0c4 <udp_sendto_if_src+0x1ac>)
 801cf62:	f240 22d3 	movw	r2, #723	; 0x2d3
 801cf66:	495b      	ldr	r1, [pc, #364]	; (801d0d4 <udp_sendto_if_src+0x1bc>)
 801cf68:	4858      	ldr	r0, [pc, #352]	; (801d0cc <udp_sendto_if_src+0x1b4>)
 801cf6a:	f009 ffb3 	bl	8026ed4 <iprintf>
 801cf6e:	f06f 030f 	mvn.w	r3, #15
 801cf72:	e0a2      	b.n	801d0ba <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801cf74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf76:	2b00      	cmp	r3, #0
 801cf78:	d109      	bne.n	801cf8e <udp_sendto_if_src+0x76>
 801cf7a:	4b52      	ldr	r3, [pc, #328]	; (801d0c4 <udp_sendto_if_src+0x1ac>)
 801cf7c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801cf80:	4955      	ldr	r1, [pc, #340]	; (801d0d8 <udp_sendto_if_src+0x1c0>)
 801cf82:	4852      	ldr	r0, [pc, #328]	; (801d0cc <udp_sendto_if_src+0x1b4>)
 801cf84:	f009 ffa6 	bl	8026ed4 <iprintf>
 801cf88:	f06f 030f 	mvn.w	r3, #15
 801cf8c:	e095      	b.n	801d0ba <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801cf8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cf90:	2b00      	cmp	r3, #0
 801cf92:	d109      	bne.n	801cfa8 <udp_sendto_if_src+0x90>
 801cf94:	4b4b      	ldr	r3, [pc, #300]	; (801d0c4 <udp_sendto_if_src+0x1ac>)
 801cf96:	f240 22d5 	movw	r2, #725	; 0x2d5
 801cf9a:	4950      	ldr	r1, [pc, #320]	; (801d0dc <udp_sendto_if_src+0x1c4>)
 801cf9c:	484b      	ldr	r0, [pc, #300]	; (801d0cc <udp_sendto_if_src+0x1b4>)
 801cf9e:	f009 ff99 	bl	8026ed4 <iprintf>
 801cfa2:	f06f 030f 	mvn.w	r3, #15
 801cfa6:	e088      	b.n	801d0ba <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801cfa8:	68fb      	ldr	r3, [r7, #12]
 801cfaa:	8a5b      	ldrh	r3, [r3, #18]
 801cfac:	2b00      	cmp	r3, #0
 801cfae:	d10f      	bne.n	801cfd0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801cfb0:	68f9      	ldr	r1, [r7, #12]
 801cfb2:	68fb      	ldr	r3, [r7, #12]
 801cfb4:	8a5b      	ldrh	r3, [r3, #18]
 801cfb6:	461a      	mov	r2, r3
 801cfb8:	68f8      	ldr	r0, [r7, #12]
 801cfba:	f000 f893 	bl	801d0e4 <udp_bind>
 801cfbe:	4603      	mov	r3, r0
 801cfc0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801cfc2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801cfc6:	2b00      	cmp	r3, #0
 801cfc8:	d002      	beq.n	801cfd0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801cfca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801cfce:	e074      	b.n	801d0ba <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801cfd0:	68bb      	ldr	r3, [r7, #8]
 801cfd2:	891b      	ldrh	r3, [r3, #8]
 801cfd4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801cfd8:	4293      	cmp	r3, r2
 801cfda:	d902      	bls.n	801cfe2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801cfdc:	f04f 33ff 	mov.w	r3, #4294967295
 801cfe0:	e06b      	b.n	801d0ba <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801cfe2:	2108      	movs	r1, #8
 801cfe4:	68b8      	ldr	r0, [r7, #8]
 801cfe6:	f7f8 fc7d 	bl	80158e4 <pbuf_add_header>
 801cfea:	4603      	mov	r3, r0
 801cfec:	2b00      	cmp	r3, #0
 801cfee:	d015      	beq.n	801d01c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801cff0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801cff4:	2108      	movs	r1, #8
 801cff6:	2022      	movs	r0, #34	; 0x22
 801cff8:	f7f8 fa26 	bl	8015448 <pbuf_alloc>
 801cffc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801cffe:	69fb      	ldr	r3, [r7, #28]
 801d000:	2b00      	cmp	r3, #0
 801d002:	d102      	bne.n	801d00a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801d004:	f04f 33ff 	mov.w	r3, #4294967295
 801d008:	e057      	b.n	801d0ba <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801d00a:	68bb      	ldr	r3, [r7, #8]
 801d00c:	891b      	ldrh	r3, [r3, #8]
 801d00e:	2b00      	cmp	r3, #0
 801d010:	d006      	beq.n	801d020 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801d012:	68b9      	ldr	r1, [r7, #8]
 801d014:	69f8      	ldr	r0, [r7, #28]
 801d016:	f7f8 fe51 	bl	8015cbc <pbuf_chain>
 801d01a:	e001      	b.n	801d020 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801d01c:	68bb      	ldr	r3, [r7, #8]
 801d01e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801d020:	69fb      	ldr	r3, [r7, #28]
 801d022:	895b      	ldrh	r3, [r3, #10]
 801d024:	2b07      	cmp	r3, #7
 801d026:	d806      	bhi.n	801d036 <udp_sendto_if_src+0x11e>
 801d028:	4b26      	ldr	r3, [pc, #152]	; (801d0c4 <udp_sendto_if_src+0x1ac>)
 801d02a:	f240 320d 	movw	r2, #781	; 0x30d
 801d02e:	492c      	ldr	r1, [pc, #176]	; (801d0e0 <udp_sendto_if_src+0x1c8>)
 801d030:	4826      	ldr	r0, [pc, #152]	; (801d0cc <udp_sendto_if_src+0x1b4>)
 801d032:	f009 ff4f 	bl	8026ed4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801d036:	69fb      	ldr	r3, [r7, #28]
 801d038:	685b      	ldr	r3, [r3, #4]
 801d03a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801d03c:	68fb      	ldr	r3, [r7, #12]
 801d03e:	8a5b      	ldrh	r3, [r3, #18]
 801d040:	4618      	mov	r0, r3
 801d042:	f7f6 f845 	bl	80130d0 <lwip_htons>
 801d046:	4603      	mov	r3, r0
 801d048:	461a      	mov	r2, r3
 801d04a:	697b      	ldr	r3, [r7, #20]
 801d04c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801d04e:	887b      	ldrh	r3, [r7, #2]
 801d050:	4618      	mov	r0, r3
 801d052:	f7f6 f83d 	bl	80130d0 <lwip_htons>
 801d056:	4603      	mov	r3, r0
 801d058:	461a      	mov	r2, r3
 801d05a:	697b      	ldr	r3, [r7, #20]
 801d05c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801d05e:	697b      	ldr	r3, [r7, #20]
 801d060:	2200      	movs	r2, #0
 801d062:	719a      	strb	r2, [r3, #6]
 801d064:	2200      	movs	r2, #0
 801d066:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801d068:	69fb      	ldr	r3, [r7, #28]
 801d06a:	891b      	ldrh	r3, [r3, #8]
 801d06c:	4618      	mov	r0, r3
 801d06e:	f7f6 f82f 	bl	80130d0 <lwip_htons>
 801d072:	4603      	mov	r3, r0
 801d074:	461a      	mov	r2, r3
 801d076:	697b      	ldr	r3, [r7, #20]
 801d078:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801d07a:	2311      	movs	r3, #17
 801d07c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801d07e:	68fb      	ldr	r3, [r7, #12]
 801d080:	7adb      	ldrb	r3, [r3, #11]
 801d082:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801d084:	68fb      	ldr	r3, [r7, #12]
 801d086:	7a9b      	ldrb	r3, [r3, #10]
 801d088:	7cb9      	ldrb	r1, [r7, #18]
 801d08a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d08c:	9202      	str	r2, [sp, #8]
 801d08e:	7cfa      	ldrb	r2, [r7, #19]
 801d090:	9201      	str	r2, [sp, #4]
 801d092:	9300      	str	r3, [sp, #0]
 801d094:	460b      	mov	r3, r1
 801d096:	687a      	ldr	r2, [r7, #4]
 801d098:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d09a:	69f8      	ldr	r0, [r7, #28]
 801d09c:	f003 fbe4 	bl	8020868 <ip4_output_if_src>
 801d0a0:	4603      	mov	r3, r0
 801d0a2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801d0a4:	69fa      	ldr	r2, [r7, #28]
 801d0a6:	68bb      	ldr	r3, [r7, #8]
 801d0a8:	429a      	cmp	r2, r3
 801d0aa:	d004      	beq.n	801d0b6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801d0ac:	69f8      	ldr	r0, [r7, #28]
 801d0ae:	f7f8 fce1 	bl	8015a74 <pbuf_free>
    q = NULL;
 801d0b2:	2300      	movs	r3, #0
 801d0b4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801d0b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801d0ba:	4618      	mov	r0, r3
 801d0bc:	3720      	adds	r7, #32
 801d0be:	46bd      	mov	sp, r7
 801d0c0:	bd80      	pop	{r7, pc}
 801d0c2:	bf00      	nop
 801d0c4:	0802d504 	.word	0x0802d504
 801d0c8:	0802d6f0 	.word	0x0802d6f0
 801d0cc:	0802d558 	.word	0x0802d558
 801d0d0:	0802d710 	.word	0x0802d710
 801d0d4:	0802d730 	.word	0x0802d730
 801d0d8:	0802d754 	.word	0x0802d754
 801d0dc:	0802d778 	.word	0x0802d778
 801d0e0:	0802d79c 	.word	0x0802d79c

0801d0e4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801d0e4:	b580      	push	{r7, lr}
 801d0e6:	b086      	sub	sp, #24
 801d0e8:	af00      	add	r7, sp, #0
 801d0ea:	60f8      	str	r0, [r7, #12]
 801d0ec:	60b9      	str	r1, [r7, #8]
 801d0ee:	4613      	mov	r3, r2
 801d0f0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801d0f2:	68bb      	ldr	r3, [r7, #8]
 801d0f4:	2b00      	cmp	r3, #0
 801d0f6:	d101      	bne.n	801d0fc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801d0f8:	4b39      	ldr	r3, [pc, #228]	; (801d1e0 <udp_bind+0xfc>)
 801d0fa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801d0fc:	68fb      	ldr	r3, [r7, #12]
 801d0fe:	2b00      	cmp	r3, #0
 801d100:	d109      	bne.n	801d116 <udp_bind+0x32>
 801d102:	4b38      	ldr	r3, [pc, #224]	; (801d1e4 <udp_bind+0x100>)
 801d104:	f240 32b7 	movw	r2, #951	; 0x3b7
 801d108:	4937      	ldr	r1, [pc, #220]	; (801d1e8 <udp_bind+0x104>)
 801d10a:	4838      	ldr	r0, [pc, #224]	; (801d1ec <udp_bind+0x108>)
 801d10c:	f009 fee2 	bl	8026ed4 <iprintf>
 801d110:	f06f 030f 	mvn.w	r3, #15
 801d114:	e060      	b.n	801d1d8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801d116:	2300      	movs	r3, #0
 801d118:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d11a:	4b35      	ldr	r3, [pc, #212]	; (801d1f0 <udp_bind+0x10c>)
 801d11c:	681b      	ldr	r3, [r3, #0]
 801d11e:	617b      	str	r3, [r7, #20]
 801d120:	e009      	b.n	801d136 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801d122:	68fa      	ldr	r2, [r7, #12]
 801d124:	697b      	ldr	r3, [r7, #20]
 801d126:	429a      	cmp	r2, r3
 801d128:	d102      	bne.n	801d130 <udp_bind+0x4c>
      rebind = 1;
 801d12a:	2301      	movs	r3, #1
 801d12c:	74fb      	strb	r3, [r7, #19]
      break;
 801d12e:	e005      	b.n	801d13c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d130:	697b      	ldr	r3, [r7, #20]
 801d132:	68db      	ldr	r3, [r3, #12]
 801d134:	617b      	str	r3, [r7, #20]
 801d136:	697b      	ldr	r3, [r7, #20]
 801d138:	2b00      	cmp	r3, #0
 801d13a:	d1f2      	bne.n	801d122 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801d13c:	88fb      	ldrh	r3, [r7, #6]
 801d13e:	2b00      	cmp	r3, #0
 801d140:	d109      	bne.n	801d156 <udp_bind+0x72>
    port = udp_new_port();
 801d142:	f7ff fc35 	bl	801c9b0 <udp_new_port>
 801d146:	4603      	mov	r3, r0
 801d148:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801d14a:	88fb      	ldrh	r3, [r7, #6]
 801d14c:	2b00      	cmp	r3, #0
 801d14e:	d12c      	bne.n	801d1aa <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801d150:	f06f 0307 	mvn.w	r3, #7
 801d154:	e040      	b.n	801d1d8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d156:	4b26      	ldr	r3, [pc, #152]	; (801d1f0 <udp_bind+0x10c>)
 801d158:	681b      	ldr	r3, [r3, #0]
 801d15a:	617b      	str	r3, [r7, #20]
 801d15c:	e022      	b.n	801d1a4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801d15e:	68fa      	ldr	r2, [r7, #12]
 801d160:	697b      	ldr	r3, [r7, #20]
 801d162:	429a      	cmp	r2, r3
 801d164:	d01b      	beq.n	801d19e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801d166:	697b      	ldr	r3, [r7, #20]
 801d168:	8a5b      	ldrh	r3, [r3, #18]
 801d16a:	88fa      	ldrh	r2, [r7, #6]
 801d16c:	429a      	cmp	r2, r3
 801d16e:	d116      	bne.n	801d19e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801d170:	697b      	ldr	r3, [r7, #20]
 801d172:	681a      	ldr	r2, [r3, #0]
 801d174:	68bb      	ldr	r3, [r7, #8]
 801d176:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801d178:	429a      	cmp	r2, r3
 801d17a:	d00d      	beq.n	801d198 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801d17c:	68bb      	ldr	r3, [r7, #8]
 801d17e:	2b00      	cmp	r3, #0
 801d180:	d00a      	beq.n	801d198 <udp_bind+0xb4>
 801d182:	68bb      	ldr	r3, [r7, #8]
 801d184:	681b      	ldr	r3, [r3, #0]
 801d186:	2b00      	cmp	r3, #0
 801d188:	d006      	beq.n	801d198 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801d18a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801d18c:	2b00      	cmp	r3, #0
 801d18e:	d003      	beq.n	801d198 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801d190:	697b      	ldr	r3, [r7, #20]
 801d192:	681b      	ldr	r3, [r3, #0]
 801d194:	2b00      	cmp	r3, #0
 801d196:	d102      	bne.n	801d19e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801d198:	f06f 0307 	mvn.w	r3, #7
 801d19c:	e01c      	b.n	801d1d8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d19e:	697b      	ldr	r3, [r7, #20]
 801d1a0:	68db      	ldr	r3, [r3, #12]
 801d1a2:	617b      	str	r3, [r7, #20]
 801d1a4:	697b      	ldr	r3, [r7, #20]
 801d1a6:	2b00      	cmp	r3, #0
 801d1a8:	d1d9      	bne.n	801d15e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801d1aa:	68bb      	ldr	r3, [r7, #8]
 801d1ac:	2b00      	cmp	r3, #0
 801d1ae:	d002      	beq.n	801d1b6 <udp_bind+0xd2>
 801d1b0:	68bb      	ldr	r3, [r7, #8]
 801d1b2:	681b      	ldr	r3, [r3, #0]
 801d1b4:	e000      	b.n	801d1b8 <udp_bind+0xd4>
 801d1b6:	2300      	movs	r3, #0
 801d1b8:	68fa      	ldr	r2, [r7, #12]
 801d1ba:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801d1bc:	68fb      	ldr	r3, [r7, #12]
 801d1be:	88fa      	ldrh	r2, [r7, #6]
 801d1c0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801d1c2:	7cfb      	ldrb	r3, [r7, #19]
 801d1c4:	2b00      	cmp	r3, #0
 801d1c6:	d106      	bne.n	801d1d6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801d1c8:	4b09      	ldr	r3, [pc, #36]	; (801d1f0 <udp_bind+0x10c>)
 801d1ca:	681a      	ldr	r2, [r3, #0]
 801d1cc:	68fb      	ldr	r3, [r7, #12]
 801d1ce:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801d1d0:	4a07      	ldr	r2, [pc, #28]	; (801d1f0 <udp_bind+0x10c>)
 801d1d2:	68fb      	ldr	r3, [r7, #12]
 801d1d4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801d1d6:	2300      	movs	r3, #0
}
 801d1d8:	4618      	mov	r0, r3
 801d1da:	3718      	adds	r7, #24
 801d1dc:	46bd      	mov	sp, r7
 801d1de:	bd80      	pop	{r7, pc}
 801d1e0:	0802ec60 	.word	0x0802ec60
 801d1e4:	0802d504 	.word	0x0802d504
 801d1e8:	0802d7cc 	.word	0x0802d7cc
 801d1ec:	0802d558 	.word	0x0802d558
 801d1f0:	24008680 	.word	0x24008680

0801d1f4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801d1f4:	b580      	push	{r7, lr}
 801d1f6:	b086      	sub	sp, #24
 801d1f8:	af00      	add	r7, sp, #0
 801d1fa:	60f8      	str	r0, [r7, #12]
 801d1fc:	60b9      	str	r1, [r7, #8]
 801d1fe:	4613      	mov	r3, r2
 801d200:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801d202:	68fb      	ldr	r3, [r7, #12]
 801d204:	2b00      	cmp	r3, #0
 801d206:	d109      	bne.n	801d21c <udp_connect+0x28>
 801d208:	4b2c      	ldr	r3, [pc, #176]	; (801d2bc <udp_connect+0xc8>)
 801d20a:	f240 4235 	movw	r2, #1077	; 0x435
 801d20e:	492c      	ldr	r1, [pc, #176]	; (801d2c0 <udp_connect+0xcc>)
 801d210:	482c      	ldr	r0, [pc, #176]	; (801d2c4 <udp_connect+0xd0>)
 801d212:	f009 fe5f 	bl	8026ed4 <iprintf>
 801d216:	f06f 030f 	mvn.w	r3, #15
 801d21a:	e04b      	b.n	801d2b4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801d21c:	68bb      	ldr	r3, [r7, #8]
 801d21e:	2b00      	cmp	r3, #0
 801d220:	d109      	bne.n	801d236 <udp_connect+0x42>
 801d222:	4b26      	ldr	r3, [pc, #152]	; (801d2bc <udp_connect+0xc8>)
 801d224:	f240 4236 	movw	r2, #1078	; 0x436
 801d228:	4927      	ldr	r1, [pc, #156]	; (801d2c8 <udp_connect+0xd4>)
 801d22a:	4826      	ldr	r0, [pc, #152]	; (801d2c4 <udp_connect+0xd0>)
 801d22c:	f009 fe52 	bl	8026ed4 <iprintf>
 801d230:	f06f 030f 	mvn.w	r3, #15
 801d234:	e03e      	b.n	801d2b4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801d236:	68fb      	ldr	r3, [r7, #12]
 801d238:	8a5b      	ldrh	r3, [r3, #18]
 801d23a:	2b00      	cmp	r3, #0
 801d23c:	d10f      	bne.n	801d25e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801d23e:	68f9      	ldr	r1, [r7, #12]
 801d240:	68fb      	ldr	r3, [r7, #12]
 801d242:	8a5b      	ldrh	r3, [r3, #18]
 801d244:	461a      	mov	r2, r3
 801d246:	68f8      	ldr	r0, [r7, #12]
 801d248:	f7ff ff4c 	bl	801d0e4 <udp_bind>
 801d24c:	4603      	mov	r3, r0
 801d24e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801d250:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801d254:	2b00      	cmp	r3, #0
 801d256:	d002      	beq.n	801d25e <udp_connect+0x6a>
      return err;
 801d258:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801d25c:	e02a      	b.n	801d2b4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801d25e:	68bb      	ldr	r3, [r7, #8]
 801d260:	2b00      	cmp	r3, #0
 801d262:	d002      	beq.n	801d26a <udp_connect+0x76>
 801d264:	68bb      	ldr	r3, [r7, #8]
 801d266:	681b      	ldr	r3, [r3, #0]
 801d268:	e000      	b.n	801d26c <udp_connect+0x78>
 801d26a:	2300      	movs	r3, #0
 801d26c:	68fa      	ldr	r2, [r7, #12]
 801d26e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801d270:	68fb      	ldr	r3, [r7, #12]
 801d272:	88fa      	ldrh	r2, [r7, #6]
 801d274:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801d276:	68fb      	ldr	r3, [r7, #12]
 801d278:	7c1b      	ldrb	r3, [r3, #16]
 801d27a:	f043 0304 	orr.w	r3, r3, #4
 801d27e:	b2da      	uxtb	r2, r3
 801d280:	68fb      	ldr	r3, [r7, #12]
 801d282:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d284:	4b11      	ldr	r3, [pc, #68]	; (801d2cc <udp_connect+0xd8>)
 801d286:	681b      	ldr	r3, [r3, #0]
 801d288:	617b      	str	r3, [r7, #20]
 801d28a:	e008      	b.n	801d29e <udp_connect+0xaa>
    if (pcb == ipcb) {
 801d28c:	68fa      	ldr	r2, [r7, #12]
 801d28e:	697b      	ldr	r3, [r7, #20]
 801d290:	429a      	cmp	r2, r3
 801d292:	d101      	bne.n	801d298 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801d294:	2300      	movs	r3, #0
 801d296:	e00d      	b.n	801d2b4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d298:	697b      	ldr	r3, [r7, #20]
 801d29a:	68db      	ldr	r3, [r3, #12]
 801d29c:	617b      	str	r3, [r7, #20]
 801d29e:	697b      	ldr	r3, [r7, #20]
 801d2a0:	2b00      	cmp	r3, #0
 801d2a2:	d1f3      	bne.n	801d28c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801d2a4:	4b09      	ldr	r3, [pc, #36]	; (801d2cc <udp_connect+0xd8>)
 801d2a6:	681a      	ldr	r2, [r3, #0]
 801d2a8:	68fb      	ldr	r3, [r7, #12]
 801d2aa:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801d2ac:	4a07      	ldr	r2, [pc, #28]	; (801d2cc <udp_connect+0xd8>)
 801d2ae:	68fb      	ldr	r3, [r7, #12]
 801d2b0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801d2b2:	2300      	movs	r3, #0
}
 801d2b4:	4618      	mov	r0, r3
 801d2b6:	3718      	adds	r7, #24
 801d2b8:	46bd      	mov	sp, r7
 801d2ba:	bd80      	pop	{r7, pc}
 801d2bc:	0802d504 	.word	0x0802d504
 801d2c0:	0802d7e4 	.word	0x0802d7e4
 801d2c4:	0802d558 	.word	0x0802d558
 801d2c8:	0802d800 	.word	0x0802d800
 801d2cc:	24008680 	.word	0x24008680

0801d2d0 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 801d2d0:	b580      	push	{r7, lr}
 801d2d2:	b082      	sub	sp, #8
 801d2d4:	af00      	add	r7, sp, #0
 801d2d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 801d2d8:	687b      	ldr	r3, [r7, #4]
 801d2da:	2b00      	cmp	r3, #0
 801d2dc:	d107      	bne.n	801d2ee <udp_disconnect+0x1e>
 801d2de:	4b0d      	ldr	r3, [pc, #52]	; (801d314 <udp_disconnect+0x44>)
 801d2e0:	f240 426a 	movw	r2, #1130	; 0x46a
 801d2e4:	490c      	ldr	r1, [pc, #48]	; (801d318 <udp_disconnect+0x48>)
 801d2e6:	480d      	ldr	r0, [pc, #52]	; (801d31c <udp_disconnect+0x4c>)
 801d2e8:	f009 fdf4 	bl	8026ed4 <iprintf>
 801d2ec:	e00f      	b.n	801d30e <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 801d2ee:	687b      	ldr	r3, [r7, #4]
 801d2f0:	2200      	movs	r2, #0
 801d2f2:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 801d2f4:	687b      	ldr	r3, [r7, #4]
 801d2f6:	2200      	movs	r2, #0
 801d2f8:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 801d2fa:	687b      	ldr	r3, [r7, #4]
 801d2fc:	2200      	movs	r2, #0
 801d2fe:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 801d300:	687b      	ldr	r3, [r7, #4]
 801d302:	7c1b      	ldrb	r3, [r3, #16]
 801d304:	f023 0304 	bic.w	r3, r3, #4
 801d308:	b2da      	uxtb	r2, r3
 801d30a:	687b      	ldr	r3, [r7, #4]
 801d30c:	741a      	strb	r2, [r3, #16]
}
 801d30e:	3708      	adds	r7, #8
 801d310:	46bd      	mov	sp, r7
 801d312:	bd80      	pop	{r7, pc}
 801d314:	0802d504 	.word	0x0802d504
 801d318:	0802d81c 	.word	0x0802d81c
 801d31c:	0802d558 	.word	0x0802d558

0801d320 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801d320:	b580      	push	{r7, lr}
 801d322:	b084      	sub	sp, #16
 801d324:	af00      	add	r7, sp, #0
 801d326:	60f8      	str	r0, [r7, #12]
 801d328:	60b9      	str	r1, [r7, #8]
 801d32a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801d32c:	68fb      	ldr	r3, [r7, #12]
 801d32e:	2b00      	cmp	r3, #0
 801d330:	d107      	bne.n	801d342 <udp_recv+0x22>
 801d332:	4b08      	ldr	r3, [pc, #32]	; (801d354 <udp_recv+0x34>)
 801d334:	f240 428a 	movw	r2, #1162	; 0x48a
 801d338:	4907      	ldr	r1, [pc, #28]	; (801d358 <udp_recv+0x38>)
 801d33a:	4808      	ldr	r0, [pc, #32]	; (801d35c <udp_recv+0x3c>)
 801d33c:	f009 fdca 	bl	8026ed4 <iprintf>
 801d340:	e005      	b.n	801d34e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801d342:	68fb      	ldr	r3, [r7, #12]
 801d344:	68ba      	ldr	r2, [r7, #8]
 801d346:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801d348:	68fb      	ldr	r3, [r7, #12]
 801d34a:	687a      	ldr	r2, [r7, #4]
 801d34c:	61da      	str	r2, [r3, #28]
}
 801d34e:	3710      	adds	r7, #16
 801d350:	46bd      	mov	sp, r7
 801d352:	bd80      	pop	{r7, pc}
 801d354:	0802d504 	.word	0x0802d504
 801d358:	0802d838 	.word	0x0802d838
 801d35c:	0802d558 	.word	0x0802d558

0801d360 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801d360:	b580      	push	{r7, lr}
 801d362:	b084      	sub	sp, #16
 801d364:	af00      	add	r7, sp, #0
 801d366:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801d368:	687b      	ldr	r3, [r7, #4]
 801d36a:	2b00      	cmp	r3, #0
 801d36c:	d107      	bne.n	801d37e <udp_remove+0x1e>
 801d36e:	4b19      	ldr	r3, [pc, #100]	; (801d3d4 <udp_remove+0x74>)
 801d370:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801d374:	4918      	ldr	r1, [pc, #96]	; (801d3d8 <udp_remove+0x78>)
 801d376:	4819      	ldr	r0, [pc, #100]	; (801d3dc <udp_remove+0x7c>)
 801d378:	f009 fdac 	bl	8026ed4 <iprintf>
 801d37c:	e026      	b.n	801d3cc <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801d37e:	4b18      	ldr	r3, [pc, #96]	; (801d3e0 <udp_remove+0x80>)
 801d380:	681b      	ldr	r3, [r3, #0]
 801d382:	687a      	ldr	r2, [r7, #4]
 801d384:	429a      	cmp	r2, r3
 801d386:	d105      	bne.n	801d394 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801d388:	4b15      	ldr	r3, [pc, #84]	; (801d3e0 <udp_remove+0x80>)
 801d38a:	681b      	ldr	r3, [r3, #0]
 801d38c:	68db      	ldr	r3, [r3, #12]
 801d38e:	4a14      	ldr	r2, [pc, #80]	; (801d3e0 <udp_remove+0x80>)
 801d390:	6013      	str	r3, [r2, #0]
 801d392:	e017      	b.n	801d3c4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801d394:	4b12      	ldr	r3, [pc, #72]	; (801d3e0 <udp_remove+0x80>)
 801d396:	681b      	ldr	r3, [r3, #0]
 801d398:	60fb      	str	r3, [r7, #12]
 801d39a:	e010      	b.n	801d3be <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801d39c:	68fb      	ldr	r3, [r7, #12]
 801d39e:	68db      	ldr	r3, [r3, #12]
 801d3a0:	2b00      	cmp	r3, #0
 801d3a2:	d009      	beq.n	801d3b8 <udp_remove+0x58>
 801d3a4:	68fb      	ldr	r3, [r7, #12]
 801d3a6:	68db      	ldr	r3, [r3, #12]
 801d3a8:	687a      	ldr	r2, [r7, #4]
 801d3aa:	429a      	cmp	r2, r3
 801d3ac:	d104      	bne.n	801d3b8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801d3ae:	687b      	ldr	r3, [r7, #4]
 801d3b0:	68da      	ldr	r2, [r3, #12]
 801d3b2:	68fb      	ldr	r3, [r7, #12]
 801d3b4:	60da      	str	r2, [r3, #12]
        break;
 801d3b6:	e005      	b.n	801d3c4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801d3b8:	68fb      	ldr	r3, [r7, #12]
 801d3ba:	68db      	ldr	r3, [r3, #12]
 801d3bc:	60fb      	str	r3, [r7, #12]
 801d3be:	68fb      	ldr	r3, [r7, #12]
 801d3c0:	2b00      	cmp	r3, #0
 801d3c2:	d1eb      	bne.n	801d39c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801d3c4:	6879      	ldr	r1, [r7, #4]
 801d3c6:	2000      	movs	r0, #0
 801d3c8:	f7f7 fc72 	bl	8014cb0 <memp_free>
}
 801d3cc:	3710      	adds	r7, #16
 801d3ce:	46bd      	mov	sp, r7
 801d3d0:	bd80      	pop	{r7, pc}
 801d3d2:	bf00      	nop
 801d3d4:	0802d504 	.word	0x0802d504
 801d3d8:	0802d850 	.word	0x0802d850
 801d3dc:	0802d558 	.word	0x0802d558
 801d3e0:	24008680 	.word	0x24008680

0801d3e4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801d3e4:	b580      	push	{r7, lr}
 801d3e6:	b082      	sub	sp, #8
 801d3e8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801d3ea:	2000      	movs	r0, #0
 801d3ec:	f7f7 fbea 	bl	8014bc4 <memp_malloc>
 801d3f0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801d3f2:	687b      	ldr	r3, [r7, #4]
 801d3f4:	2b00      	cmp	r3, #0
 801d3f6:	d007      	beq.n	801d408 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801d3f8:	2220      	movs	r2, #32
 801d3fa:	2100      	movs	r1, #0
 801d3fc:	6878      	ldr	r0, [r7, #4]
 801d3fe:	f008 ff0b 	bl	8026218 <memset>
    pcb->ttl = UDP_TTL;
 801d402:	687b      	ldr	r3, [r7, #4]
 801d404:	22ff      	movs	r2, #255	; 0xff
 801d406:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801d408:	687b      	ldr	r3, [r7, #4]
}
 801d40a:	4618      	mov	r0, r3
 801d40c:	3708      	adds	r7, #8
 801d40e:	46bd      	mov	sp, r7
 801d410:	bd80      	pop	{r7, pc}

0801d412 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801d412:	b580      	push	{r7, lr}
 801d414:	b084      	sub	sp, #16
 801d416:	af00      	add	r7, sp, #0
 801d418:	4603      	mov	r3, r0
 801d41a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801d41c:	f7ff ffe2 	bl	801d3e4 <udp_new>
 801d420:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801d422:	68fb      	ldr	r3, [r7, #12]
}
 801d424:	4618      	mov	r0, r3
 801d426:	3710      	adds	r7, #16
 801d428:	46bd      	mov	sp, r7
 801d42a:	bd80      	pop	{r7, pc}

0801d42c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801d42c:	b480      	push	{r7}
 801d42e:	b085      	sub	sp, #20
 801d430:	af00      	add	r7, sp, #0
 801d432:	6078      	str	r0, [r7, #4]
 801d434:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801d436:	687b      	ldr	r3, [r7, #4]
 801d438:	2b00      	cmp	r3, #0
 801d43a:	d01e      	beq.n	801d47a <udp_netif_ip_addr_changed+0x4e>
 801d43c:	687b      	ldr	r3, [r7, #4]
 801d43e:	681b      	ldr	r3, [r3, #0]
 801d440:	2b00      	cmp	r3, #0
 801d442:	d01a      	beq.n	801d47a <udp_netif_ip_addr_changed+0x4e>
 801d444:	683b      	ldr	r3, [r7, #0]
 801d446:	2b00      	cmp	r3, #0
 801d448:	d017      	beq.n	801d47a <udp_netif_ip_addr_changed+0x4e>
 801d44a:	683b      	ldr	r3, [r7, #0]
 801d44c:	681b      	ldr	r3, [r3, #0]
 801d44e:	2b00      	cmp	r3, #0
 801d450:	d013      	beq.n	801d47a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801d452:	4b0d      	ldr	r3, [pc, #52]	; (801d488 <udp_netif_ip_addr_changed+0x5c>)
 801d454:	681b      	ldr	r3, [r3, #0]
 801d456:	60fb      	str	r3, [r7, #12]
 801d458:	e00c      	b.n	801d474 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801d45a:	68fb      	ldr	r3, [r7, #12]
 801d45c:	681a      	ldr	r2, [r3, #0]
 801d45e:	687b      	ldr	r3, [r7, #4]
 801d460:	681b      	ldr	r3, [r3, #0]
 801d462:	429a      	cmp	r2, r3
 801d464:	d103      	bne.n	801d46e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801d466:	683b      	ldr	r3, [r7, #0]
 801d468:	681a      	ldr	r2, [r3, #0]
 801d46a:	68fb      	ldr	r3, [r7, #12]
 801d46c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801d46e:	68fb      	ldr	r3, [r7, #12]
 801d470:	68db      	ldr	r3, [r3, #12]
 801d472:	60fb      	str	r3, [r7, #12]
 801d474:	68fb      	ldr	r3, [r7, #12]
 801d476:	2b00      	cmp	r3, #0
 801d478:	d1ef      	bne.n	801d45a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801d47a:	bf00      	nop
 801d47c:	3714      	adds	r7, #20
 801d47e:	46bd      	mov	sp, r7
 801d480:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d484:	4770      	bx	lr
 801d486:	bf00      	nop
 801d488:	24008680 	.word	0x24008680

0801d48c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801d48c:	b580      	push	{r7, lr}
 801d48e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801d490:	4b20      	ldr	r3, [pc, #128]	; (801d514 <dhcp_inc_pcb_refcount+0x88>)
 801d492:	781b      	ldrb	r3, [r3, #0]
 801d494:	2b00      	cmp	r3, #0
 801d496:	d133      	bne.n	801d500 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801d498:	4b1f      	ldr	r3, [pc, #124]	; (801d518 <dhcp_inc_pcb_refcount+0x8c>)
 801d49a:	681b      	ldr	r3, [r3, #0]
 801d49c:	2b00      	cmp	r3, #0
 801d49e:	d005      	beq.n	801d4ac <dhcp_inc_pcb_refcount+0x20>
 801d4a0:	4b1e      	ldr	r3, [pc, #120]	; (801d51c <dhcp_inc_pcb_refcount+0x90>)
 801d4a2:	22e5      	movs	r2, #229	; 0xe5
 801d4a4:	491e      	ldr	r1, [pc, #120]	; (801d520 <dhcp_inc_pcb_refcount+0x94>)
 801d4a6:	481f      	ldr	r0, [pc, #124]	; (801d524 <dhcp_inc_pcb_refcount+0x98>)
 801d4a8:	f009 fd14 	bl	8026ed4 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801d4ac:	f7ff ff9a 	bl	801d3e4 <udp_new>
 801d4b0:	4603      	mov	r3, r0
 801d4b2:	4a19      	ldr	r2, [pc, #100]	; (801d518 <dhcp_inc_pcb_refcount+0x8c>)
 801d4b4:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801d4b6:	4b18      	ldr	r3, [pc, #96]	; (801d518 <dhcp_inc_pcb_refcount+0x8c>)
 801d4b8:	681b      	ldr	r3, [r3, #0]
 801d4ba:	2b00      	cmp	r3, #0
 801d4bc:	d102      	bne.n	801d4c4 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801d4be:	f04f 33ff 	mov.w	r3, #4294967295
 801d4c2:	e024      	b.n	801d50e <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801d4c4:	4b14      	ldr	r3, [pc, #80]	; (801d518 <dhcp_inc_pcb_refcount+0x8c>)
 801d4c6:	681b      	ldr	r3, [r3, #0]
 801d4c8:	7a5a      	ldrb	r2, [r3, #9]
 801d4ca:	4b13      	ldr	r3, [pc, #76]	; (801d518 <dhcp_inc_pcb_refcount+0x8c>)
 801d4cc:	681b      	ldr	r3, [r3, #0]
 801d4ce:	f042 0220 	orr.w	r2, r2, #32
 801d4d2:	b2d2      	uxtb	r2, r2
 801d4d4:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801d4d6:	4b10      	ldr	r3, [pc, #64]	; (801d518 <dhcp_inc_pcb_refcount+0x8c>)
 801d4d8:	681b      	ldr	r3, [r3, #0]
 801d4da:	2244      	movs	r2, #68	; 0x44
 801d4dc:	4912      	ldr	r1, [pc, #72]	; (801d528 <dhcp_inc_pcb_refcount+0x9c>)
 801d4de:	4618      	mov	r0, r3
 801d4e0:	f7ff fe00 	bl	801d0e4 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801d4e4:	4b0c      	ldr	r3, [pc, #48]	; (801d518 <dhcp_inc_pcb_refcount+0x8c>)
 801d4e6:	681b      	ldr	r3, [r3, #0]
 801d4e8:	2243      	movs	r2, #67	; 0x43
 801d4ea:	490f      	ldr	r1, [pc, #60]	; (801d528 <dhcp_inc_pcb_refcount+0x9c>)
 801d4ec:	4618      	mov	r0, r3
 801d4ee:	f7ff fe81 	bl	801d1f4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801d4f2:	4b09      	ldr	r3, [pc, #36]	; (801d518 <dhcp_inc_pcb_refcount+0x8c>)
 801d4f4:	681b      	ldr	r3, [r3, #0]
 801d4f6:	2200      	movs	r2, #0
 801d4f8:	490c      	ldr	r1, [pc, #48]	; (801d52c <dhcp_inc_pcb_refcount+0xa0>)
 801d4fa:	4618      	mov	r0, r3
 801d4fc:	f7ff ff10 	bl	801d320 <udp_recv>
  }

  dhcp_pcb_refcount++;
 801d500:	4b04      	ldr	r3, [pc, #16]	; (801d514 <dhcp_inc_pcb_refcount+0x88>)
 801d502:	781b      	ldrb	r3, [r3, #0]
 801d504:	3301      	adds	r3, #1
 801d506:	b2da      	uxtb	r2, r3
 801d508:	4b02      	ldr	r3, [pc, #8]	; (801d514 <dhcp_inc_pcb_refcount+0x88>)
 801d50a:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801d50c:	2300      	movs	r3, #0
}
 801d50e:	4618      	mov	r0, r3
 801d510:	bd80      	pop	{r7, pc}
 801d512:	bf00      	nop
 801d514:	24004fd0 	.word	0x24004fd0
 801d518:	24004fcc 	.word	0x24004fcc
 801d51c:	0802d868 	.word	0x0802d868
 801d520:	0802d8a0 	.word	0x0802d8a0
 801d524:	0802d8c8 	.word	0x0802d8c8
 801d528:	0802ec60 	.word	0x0802ec60
 801d52c:	0801ee65 	.word	0x0801ee65

0801d530 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801d530:	b580      	push	{r7, lr}
 801d532:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801d534:	4b0e      	ldr	r3, [pc, #56]	; (801d570 <dhcp_dec_pcb_refcount+0x40>)
 801d536:	781b      	ldrb	r3, [r3, #0]
 801d538:	2b00      	cmp	r3, #0
 801d53a:	d105      	bne.n	801d548 <dhcp_dec_pcb_refcount+0x18>
 801d53c:	4b0d      	ldr	r3, [pc, #52]	; (801d574 <dhcp_dec_pcb_refcount+0x44>)
 801d53e:	22ff      	movs	r2, #255	; 0xff
 801d540:	490d      	ldr	r1, [pc, #52]	; (801d578 <dhcp_dec_pcb_refcount+0x48>)
 801d542:	480e      	ldr	r0, [pc, #56]	; (801d57c <dhcp_dec_pcb_refcount+0x4c>)
 801d544:	f009 fcc6 	bl	8026ed4 <iprintf>
  dhcp_pcb_refcount--;
 801d548:	4b09      	ldr	r3, [pc, #36]	; (801d570 <dhcp_dec_pcb_refcount+0x40>)
 801d54a:	781b      	ldrb	r3, [r3, #0]
 801d54c:	3b01      	subs	r3, #1
 801d54e:	b2da      	uxtb	r2, r3
 801d550:	4b07      	ldr	r3, [pc, #28]	; (801d570 <dhcp_dec_pcb_refcount+0x40>)
 801d552:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801d554:	4b06      	ldr	r3, [pc, #24]	; (801d570 <dhcp_dec_pcb_refcount+0x40>)
 801d556:	781b      	ldrb	r3, [r3, #0]
 801d558:	2b00      	cmp	r3, #0
 801d55a:	d107      	bne.n	801d56c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801d55c:	4b08      	ldr	r3, [pc, #32]	; (801d580 <dhcp_dec_pcb_refcount+0x50>)
 801d55e:	681b      	ldr	r3, [r3, #0]
 801d560:	4618      	mov	r0, r3
 801d562:	f7ff fefd 	bl	801d360 <udp_remove>
    dhcp_pcb = NULL;
 801d566:	4b06      	ldr	r3, [pc, #24]	; (801d580 <dhcp_dec_pcb_refcount+0x50>)
 801d568:	2200      	movs	r2, #0
 801d56a:	601a      	str	r2, [r3, #0]
  }
}
 801d56c:	bf00      	nop
 801d56e:	bd80      	pop	{r7, pc}
 801d570:	24004fd0 	.word	0x24004fd0
 801d574:	0802d868 	.word	0x0802d868
 801d578:	0802d8f0 	.word	0x0802d8f0
 801d57c:	0802d8c8 	.word	0x0802d8c8
 801d580:	24004fcc 	.word	0x24004fcc

0801d584 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801d584:	b580      	push	{r7, lr}
 801d586:	b084      	sub	sp, #16
 801d588:	af00      	add	r7, sp, #0
 801d58a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d58c:	687b      	ldr	r3, [r7, #4]
 801d58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d590:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801d592:	210c      	movs	r1, #12
 801d594:	68f8      	ldr	r0, [r7, #12]
 801d596:	f001 f877 	bl	801e688 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801d59a:	4b06      	ldr	r3, [pc, #24]	; (801d5b4 <dhcp_handle_nak+0x30>)
 801d59c:	4a05      	ldr	r2, [pc, #20]	; (801d5b4 <dhcp_handle_nak+0x30>)
 801d59e:	4905      	ldr	r1, [pc, #20]	; (801d5b4 <dhcp_handle_nak+0x30>)
 801d5a0:	6878      	ldr	r0, [r7, #4]
 801d5a2:	f7f7 fd27 	bl	8014ff4 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801d5a6:	6878      	ldr	r0, [r7, #4]
 801d5a8:	f000 fc6a 	bl	801de80 <dhcp_discover>
}
 801d5ac:	bf00      	nop
 801d5ae:	3710      	adds	r7, #16
 801d5b0:	46bd      	mov	sp, r7
 801d5b2:	bd80      	pop	{r7, pc}
 801d5b4:	0802ec60 	.word	0x0802ec60

0801d5b8 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801d5b8:	b580      	push	{r7, lr}
 801d5ba:	b084      	sub	sp, #16
 801d5bc:	af00      	add	r7, sp, #0
 801d5be:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d5c0:	687b      	ldr	r3, [r7, #4]
 801d5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d5c4:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801d5c6:	2108      	movs	r1, #8
 801d5c8:	68f8      	ldr	r0, [r7, #12]
 801d5ca:	f001 f85d 	bl	801e688 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801d5ce:	68fb      	ldr	r3, [r7, #12]
 801d5d0:	331c      	adds	r3, #28
 801d5d2:	2200      	movs	r2, #0
 801d5d4:	4619      	mov	r1, r3
 801d5d6:	6878      	ldr	r0, [r7, #4]
 801d5d8:	f002 fb8e 	bl	801fcf8 <etharp_query>
 801d5dc:	4603      	mov	r3, r0
 801d5de:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801d5e0:	68fb      	ldr	r3, [r7, #12]
 801d5e2:	799b      	ldrb	r3, [r3, #6]
 801d5e4:	2bff      	cmp	r3, #255	; 0xff
 801d5e6:	d005      	beq.n	801d5f4 <dhcp_check+0x3c>
    dhcp->tries++;
 801d5e8:	68fb      	ldr	r3, [r7, #12]
 801d5ea:	799b      	ldrb	r3, [r3, #6]
 801d5ec:	3301      	adds	r3, #1
 801d5ee:	b2da      	uxtb	r2, r3
 801d5f0:	68fb      	ldr	r3, [r7, #12]
 801d5f2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 801d5f4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801d5f8:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801d5fa:	893b      	ldrh	r3, [r7, #8]
 801d5fc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801d600:	4a06      	ldr	r2, [pc, #24]	; (801d61c <dhcp_check+0x64>)
 801d602:	fb82 1203 	smull	r1, r2, r2, r3
 801d606:	1152      	asrs	r2, r2, #5
 801d608:	17db      	asrs	r3, r3, #31
 801d60a:	1ad3      	subs	r3, r2, r3
 801d60c:	b29a      	uxth	r2, r3
 801d60e:	68fb      	ldr	r3, [r7, #12]
 801d610:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801d612:	bf00      	nop
 801d614:	3710      	adds	r7, #16
 801d616:	46bd      	mov	sp, r7
 801d618:	bd80      	pop	{r7, pc}
 801d61a:	bf00      	nop
 801d61c:	10624dd3 	.word	0x10624dd3

0801d620 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801d620:	b580      	push	{r7, lr}
 801d622:	b084      	sub	sp, #16
 801d624:	af00      	add	r7, sp, #0
 801d626:	6078      	str	r0, [r7, #4]
 801d628:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d62a:	687b      	ldr	r3, [r7, #4]
 801d62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d62e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801d630:	4b0c      	ldr	r3, [pc, #48]	; (801d664 <dhcp_handle_offer+0x44>)
 801d632:	789b      	ldrb	r3, [r3, #2]
 801d634:	2b00      	cmp	r3, #0
 801d636:	d011      	beq.n	801d65c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801d638:	68fb      	ldr	r3, [r7, #12]
 801d63a:	2200      	movs	r2, #0
 801d63c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801d63e:	4b0a      	ldr	r3, [pc, #40]	; (801d668 <dhcp_handle_offer+0x48>)
 801d640:	689b      	ldr	r3, [r3, #8]
 801d642:	4618      	mov	r0, r3
 801d644:	f7f5 fd59 	bl	80130fa <lwip_htonl>
 801d648:	4602      	mov	r2, r0
 801d64a:	68fb      	ldr	r3, [r7, #12]
 801d64c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801d64e:	683b      	ldr	r3, [r7, #0]
 801d650:	691a      	ldr	r2, [r3, #16]
 801d652:	68fb      	ldr	r3, [r7, #12]
 801d654:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801d656:	6878      	ldr	r0, [r7, #4]
 801d658:	f000 f808 	bl	801d66c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 801d65c:	bf00      	nop
 801d65e:	3710      	adds	r7, #16
 801d660:	46bd      	mov	sp, r7
 801d662:	bd80      	pop	{r7, pc}
 801d664:	24008684 	.word	0x24008684
 801d668:	24008690 	.word	0x24008690

0801d66c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801d66c:	b5b0      	push	{r4, r5, r7, lr}
 801d66e:	b08a      	sub	sp, #40	; 0x28
 801d670:	af02      	add	r7, sp, #8
 801d672:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801d674:	687b      	ldr	r3, [r7, #4]
 801d676:	2b00      	cmp	r3, #0
 801d678:	d109      	bne.n	801d68e <dhcp_select+0x22>
 801d67a:	4b71      	ldr	r3, [pc, #452]	; (801d840 <dhcp_select+0x1d4>)
 801d67c:	f240 1277 	movw	r2, #375	; 0x177
 801d680:	4970      	ldr	r1, [pc, #448]	; (801d844 <dhcp_select+0x1d8>)
 801d682:	4871      	ldr	r0, [pc, #452]	; (801d848 <dhcp_select+0x1dc>)
 801d684:	f009 fc26 	bl	8026ed4 <iprintf>
 801d688:	f06f 030f 	mvn.w	r3, #15
 801d68c:	e0d3      	b.n	801d836 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801d68e:	687b      	ldr	r3, [r7, #4]
 801d690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d692:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801d694:	69bb      	ldr	r3, [r7, #24]
 801d696:	2b00      	cmp	r3, #0
 801d698:	d109      	bne.n	801d6ae <dhcp_select+0x42>
 801d69a:	4b69      	ldr	r3, [pc, #420]	; (801d840 <dhcp_select+0x1d4>)
 801d69c:	f240 1279 	movw	r2, #377	; 0x179
 801d6a0:	496a      	ldr	r1, [pc, #424]	; (801d84c <dhcp_select+0x1e0>)
 801d6a2:	4869      	ldr	r0, [pc, #420]	; (801d848 <dhcp_select+0x1dc>)
 801d6a4:	f009 fc16 	bl	8026ed4 <iprintf>
 801d6a8:	f06f 0305 	mvn.w	r3, #5
 801d6ac:	e0c3      	b.n	801d836 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801d6ae:	2101      	movs	r1, #1
 801d6b0:	69b8      	ldr	r0, [r7, #24]
 801d6b2:	f000 ffe9 	bl	801e688 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801d6b6:	f107 030c 	add.w	r3, r7, #12
 801d6ba:	2203      	movs	r2, #3
 801d6bc:	69b9      	ldr	r1, [r7, #24]
 801d6be:	6878      	ldr	r0, [r7, #4]
 801d6c0:	f001 fc9e 	bl	801f000 <dhcp_create_msg>
 801d6c4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801d6c6:	697b      	ldr	r3, [r7, #20]
 801d6c8:	2b00      	cmp	r3, #0
 801d6ca:	f000 8085 	beq.w	801d7d8 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801d6ce:	697b      	ldr	r3, [r7, #20]
 801d6d0:	685b      	ldr	r3, [r3, #4]
 801d6d2:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d6d4:	89b8      	ldrh	r0, [r7, #12]
 801d6d6:	693b      	ldr	r3, [r7, #16]
 801d6d8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d6dc:	2302      	movs	r3, #2
 801d6de:	2239      	movs	r2, #57	; 0x39
 801d6e0:	f000 ffec 	bl	801e6bc <dhcp_option>
 801d6e4:	4603      	mov	r3, r0
 801d6e6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801d6e8:	89b8      	ldrh	r0, [r7, #12]
 801d6ea:	693b      	ldr	r3, [r7, #16]
 801d6ec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d6f0:	687b      	ldr	r3, [r7, #4]
 801d6f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d6f4:	461a      	mov	r2, r3
 801d6f6:	f001 f83b 	bl	801e770 <dhcp_option_short>
 801d6fa:	4603      	mov	r3, r0
 801d6fc:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801d6fe:	89b8      	ldrh	r0, [r7, #12]
 801d700:	693b      	ldr	r3, [r7, #16]
 801d702:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d706:	2304      	movs	r3, #4
 801d708:	2232      	movs	r2, #50	; 0x32
 801d70a:	f000 ffd7 	bl	801e6bc <dhcp_option>
 801d70e:	4603      	mov	r3, r0
 801d710:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801d712:	89bc      	ldrh	r4, [r7, #12]
 801d714:	693b      	ldr	r3, [r7, #16]
 801d716:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801d71a:	69bb      	ldr	r3, [r7, #24]
 801d71c:	69db      	ldr	r3, [r3, #28]
 801d71e:	4618      	mov	r0, r3
 801d720:	f7f5 fceb 	bl	80130fa <lwip_htonl>
 801d724:	4603      	mov	r3, r0
 801d726:	461a      	mov	r2, r3
 801d728:	4629      	mov	r1, r5
 801d72a:	4620      	mov	r0, r4
 801d72c:	f001 f852 	bl	801e7d4 <dhcp_option_long>
 801d730:	4603      	mov	r3, r0
 801d732:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801d734:	89b8      	ldrh	r0, [r7, #12]
 801d736:	693b      	ldr	r3, [r7, #16]
 801d738:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d73c:	2304      	movs	r3, #4
 801d73e:	2236      	movs	r2, #54	; 0x36
 801d740:	f000 ffbc 	bl	801e6bc <dhcp_option>
 801d744:	4603      	mov	r3, r0
 801d746:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801d748:	89bc      	ldrh	r4, [r7, #12]
 801d74a:	693b      	ldr	r3, [r7, #16]
 801d74c:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801d750:	69bb      	ldr	r3, [r7, #24]
 801d752:	699b      	ldr	r3, [r3, #24]
 801d754:	4618      	mov	r0, r3
 801d756:	f7f5 fcd0 	bl	80130fa <lwip_htonl>
 801d75a:	4603      	mov	r3, r0
 801d75c:	461a      	mov	r2, r3
 801d75e:	4629      	mov	r1, r5
 801d760:	4620      	mov	r0, r4
 801d762:	f001 f837 	bl	801e7d4 <dhcp_option_long>
 801d766:	4603      	mov	r3, r0
 801d768:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d76a:	89b8      	ldrh	r0, [r7, #12]
 801d76c:	693b      	ldr	r3, [r7, #16]
 801d76e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d772:	2304      	movs	r3, #4
 801d774:	2237      	movs	r2, #55	; 0x37
 801d776:	f000 ffa1 	bl	801e6bc <dhcp_option>
 801d77a:	4603      	mov	r3, r0
 801d77c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d77e:	2300      	movs	r3, #0
 801d780:	77bb      	strb	r3, [r7, #30]
 801d782:	e00e      	b.n	801d7a2 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801d784:	89b8      	ldrh	r0, [r7, #12]
 801d786:	693b      	ldr	r3, [r7, #16]
 801d788:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d78c:	7fbb      	ldrb	r3, [r7, #30]
 801d78e:	4a30      	ldr	r2, [pc, #192]	; (801d850 <dhcp_select+0x1e4>)
 801d790:	5cd3      	ldrb	r3, [r2, r3]
 801d792:	461a      	mov	r2, r3
 801d794:	f000 ffc6 	bl	801e724 <dhcp_option_byte>
 801d798:	4603      	mov	r3, r0
 801d79a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d79c:	7fbb      	ldrb	r3, [r7, #30]
 801d79e:	3301      	adds	r3, #1
 801d7a0:	77bb      	strb	r3, [r7, #30]
 801d7a2:	7fbb      	ldrb	r3, [r7, #30]
 801d7a4:	2b03      	cmp	r3, #3
 801d7a6:	d9ed      	bls.n	801d784 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d7a8:	89b8      	ldrh	r0, [r7, #12]
 801d7aa:	693b      	ldr	r3, [r7, #16]
 801d7ac:	33f0      	adds	r3, #240	; 0xf0
 801d7ae:	697a      	ldr	r2, [r7, #20]
 801d7b0:	4619      	mov	r1, r3
 801d7b2:	f001 fcfb 	bl	801f1ac <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801d7b6:	4b27      	ldr	r3, [pc, #156]	; (801d854 <dhcp_select+0x1e8>)
 801d7b8:	6818      	ldr	r0, [r3, #0]
 801d7ba:	4b27      	ldr	r3, [pc, #156]	; (801d858 <dhcp_select+0x1ec>)
 801d7bc:	9301      	str	r3, [sp, #4]
 801d7be:	687b      	ldr	r3, [r7, #4]
 801d7c0:	9300      	str	r3, [sp, #0]
 801d7c2:	2343      	movs	r3, #67	; 0x43
 801d7c4:	4a25      	ldr	r2, [pc, #148]	; (801d85c <dhcp_select+0x1f0>)
 801d7c6:	6979      	ldr	r1, [r7, #20]
 801d7c8:	f7ff fba6 	bl	801cf18 <udp_sendto_if_src>
 801d7cc:	4603      	mov	r3, r0
 801d7ce:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801d7d0:	6978      	ldr	r0, [r7, #20]
 801d7d2:	f7f8 f94f 	bl	8015a74 <pbuf_free>
 801d7d6:	e001      	b.n	801d7dc <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801d7d8:	23ff      	movs	r3, #255	; 0xff
 801d7da:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801d7dc:	69bb      	ldr	r3, [r7, #24]
 801d7de:	799b      	ldrb	r3, [r3, #6]
 801d7e0:	2bff      	cmp	r3, #255	; 0xff
 801d7e2:	d005      	beq.n	801d7f0 <dhcp_select+0x184>
    dhcp->tries++;
 801d7e4:	69bb      	ldr	r3, [r7, #24]
 801d7e6:	799b      	ldrb	r3, [r3, #6]
 801d7e8:	3301      	adds	r3, #1
 801d7ea:	b2da      	uxtb	r2, r3
 801d7ec:	69bb      	ldr	r3, [r7, #24]
 801d7ee:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801d7f0:	69bb      	ldr	r3, [r7, #24]
 801d7f2:	799b      	ldrb	r3, [r3, #6]
 801d7f4:	2b05      	cmp	r3, #5
 801d7f6:	d80d      	bhi.n	801d814 <dhcp_select+0x1a8>
 801d7f8:	69bb      	ldr	r3, [r7, #24]
 801d7fa:	799b      	ldrb	r3, [r3, #6]
 801d7fc:	461a      	mov	r2, r3
 801d7fe:	2301      	movs	r3, #1
 801d800:	4093      	lsls	r3, r2
 801d802:	b29b      	uxth	r3, r3
 801d804:	461a      	mov	r2, r3
 801d806:	0152      	lsls	r2, r2, #5
 801d808:	1ad2      	subs	r2, r2, r3
 801d80a:	0092      	lsls	r2, r2, #2
 801d80c:	4413      	add	r3, r2
 801d80e:	00db      	lsls	r3, r3, #3
 801d810:	b29b      	uxth	r3, r3
 801d812:	e001      	b.n	801d818 <dhcp_select+0x1ac>
 801d814:	f64e 2360 	movw	r3, #60000	; 0xea60
 801d818:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801d81a:	89fb      	ldrh	r3, [r7, #14]
 801d81c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801d820:	4a0f      	ldr	r2, [pc, #60]	; (801d860 <dhcp_select+0x1f4>)
 801d822:	fb82 1203 	smull	r1, r2, r2, r3
 801d826:	1152      	asrs	r2, r2, #5
 801d828:	17db      	asrs	r3, r3, #31
 801d82a:	1ad3      	subs	r3, r2, r3
 801d82c:	b29a      	uxth	r2, r3
 801d82e:	69bb      	ldr	r3, [r7, #24]
 801d830:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801d832:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d836:	4618      	mov	r0, r3
 801d838:	3720      	adds	r7, #32
 801d83a:	46bd      	mov	sp, r7
 801d83c:	bdb0      	pop	{r4, r5, r7, pc}
 801d83e:	bf00      	nop
 801d840:	0802d868 	.word	0x0802d868
 801d844:	0802d914 	.word	0x0802d914
 801d848:	0802d8c8 	.word	0x0802d8c8
 801d84c:	0802d930 	.word	0x0802d930
 801d850:	24000038 	.word	0x24000038
 801d854:	24004fcc 	.word	0x24004fcc
 801d858:	0802ec60 	.word	0x0802ec60
 801d85c:	0802ec64 	.word	0x0802ec64
 801d860:	10624dd3 	.word	0x10624dd3

0801d864 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801d864:	b580      	push	{r7, lr}
 801d866:	b082      	sub	sp, #8
 801d868:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801d86a:	4b27      	ldr	r3, [pc, #156]	; (801d908 <dhcp_coarse_tmr+0xa4>)
 801d86c:	681b      	ldr	r3, [r3, #0]
 801d86e:	607b      	str	r3, [r7, #4]
 801d870:	e042      	b.n	801d8f8 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801d872:	687b      	ldr	r3, [r7, #4]
 801d874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d876:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801d878:	683b      	ldr	r3, [r7, #0]
 801d87a:	2b00      	cmp	r3, #0
 801d87c:	d039      	beq.n	801d8f2 <dhcp_coarse_tmr+0x8e>
 801d87e:	683b      	ldr	r3, [r7, #0]
 801d880:	795b      	ldrb	r3, [r3, #5]
 801d882:	2b00      	cmp	r3, #0
 801d884:	d035      	beq.n	801d8f2 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801d886:	683b      	ldr	r3, [r7, #0]
 801d888:	8a9b      	ldrh	r3, [r3, #20]
 801d88a:	2b00      	cmp	r3, #0
 801d88c:	d012      	beq.n	801d8b4 <dhcp_coarse_tmr+0x50>
 801d88e:	683b      	ldr	r3, [r7, #0]
 801d890:	8a5b      	ldrh	r3, [r3, #18]
 801d892:	3301      	adds	r3, #1
 801d894:	b29a      	uxth	r2, r3
 801d896:	683b      	ldr	r3, [r7, #0]
 801d898:	825a      	strh	r2, [r3, #18]
 801d89a:	683b      	ldr	r3, [r7, #0]
 801d89c:	8a5a      	ldrh	r2, [r3, #18]
 801d89e:	683b      	ldr	r3, [r7, #0]
 801d8a0:	8a9b      	ldrh	r3, [r3, #20]
 801d8a2:	429a      	cmp	r2, r3
 801d8a4:	d106      	bne.n	801d8b4 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801d8a6:	6878      	ldr	r0, [r7, #4]
 801d8a8:	f000 fe54 	bl	801e554 <dhcp_release_and_stop>
        dhcp_start(netif);
 801d8ac:	6878      	ldr	r0, [r7, #4]
 801d8ae:	f000 f98b 	bl	801dbc8 <dhcp_start>
 801d8b2:	e01e      	b.n	801d8f2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801d8b4:	683b      	ldr	r3, [r7, #0]
 801d8b6:	8a1b      	ldrh	r3, [r3, #16]
 801d8b8:	2b00      	cmp	r3, #0
 801d8ba:	d00b      	beq.n	801d8d4 <dhcp_coarse_tmr+0x70>
 801d8bc:	683b      	ldr	r3, [r7, #0]
 801d8be:	8a1b      	ldrh	r3, [r3, #16]
 801d8c0:	1e5a      	subs	r2, r3, #1
 801d8c2:	b291      	uxth	r1, r2
 801d8c4:	683a      	ldr	r2, [r7, #0]
 801d8c6:	8211      	strh	r1, [r2, #16]
 801d8c8:	2b01      	cmp	r3, #1
 801d8ca:	d103      	bne.n	801d8d4 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801d8cc:	6878      	ldr	r0, [r7, #4]
 801d8ce:	f000 f8c7 	bl	801da60 <dhcp_t2_timeout>
 801d8d2:	e00e      	b.n	801d8f2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801d8d4:	683b      	ldr	r3, [r7, #0]
 801d8d6:	89db      	ldrh	r3, [r3, #14]
 801d8d8:	2b00      	cmp	r3, #0
 801d8da:	d00a      	beq.n	801d8f2 <dhcp_coarse_tmr+0x8e>
 801d8dc:	683b      	ldr	r3, [r7, #0]
 801d8de:	89db      	ldrh	r3, [r3, #14]
 801d8e0:	1e5a      	subs	r2, r3, #1
 801d8e2:	b291      	uxth	r1, r2
 801d8e4:	683a      	ldr	r2, [r7, #0]
 801d8e6:	81d1      	strh	r1, [r2, #14]
 801d8e8:	2b01      	cmp	r3, #1
 801d8ea:	d102      	bne.n	801d8f2 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801d8ec:	6878      	ldr	r0, [r7, #4]
 801d8ee:	f000 f888 	bl	801da02 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801d8f2:	687b      	ldr	r3, [r7, #4]
 801d8f4:	681b      	ldr	r3, [r3, #0]
 801d8f6:	607b      	str	r3, [r7, #4]
 801d8f8:	687b      	ldr	r3, [r7, #4]
 801d8fa:	2b00      	cmp	r3, #0
 801d8fc:	d1b9      	bne.n	801d872 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801d8fe:	bf00      	nop
 801d900:	bf00      	nop
 801d902:	3708      	adds	r7, #8
 801d904:	46bd      	mov	sp, r7
 801d906:	bd80      	pop	{r7, pc}
 801d908:	24008658 	.word	0x24008658

0801d90c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801d90c:	b580      	push	{r7, lr}
 801d90e:	b082      	sub	sp, #8
 801d910:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801d912:	4b16      	ldr	r3, [pc, #88]	; (801d96c <dhcp_fine_tmr+0x60>)
 801d914:	681b      	ldr	r3, [r3, #0]
 801d916:	607b      	str	r3, [r7, #4]
 801d918:	e020      	b.n	801d95c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801d91a:	687b      	ldr	r3, [r7, #4]
 801d91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d91e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801d920:	683b      	ldr	r3, [r7, #0]
 801d922:	2b00      	cmp	r3, #0
 801d924:	d017      	beq.n	801d956 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801d926:	683b      	ldr	r3, [r7, #0]
 801d928:	891b      	ldrh	r3, [r3, #8]
 801d92a:	2b01      	cmp	r3, #1
 801d92c:	d906      	bls.n	801d93c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801d92e:	683b      	ldr	r3, [r7, #0]
 801d930:	891b      	ldrh	r3, [r3, #8]
 801d932:	3b01      	subs	r3, #1
 801d934:	b29a      	uxth	r2, r3
 801d936:	683b      	ldr	r3, [r7, #0]
 801d938:	811a      	strh	r2, [r3, #8]
 801d93a:	e00c      	b.n	801d956 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801d93c:	683b      	ldr	r3, [r7, #0]
 801d93e:	891b      	ldrh	r3, [r3, #8]
 801d940:	2b01      	cmp	r3, #1
 801d942:	d108      	bne.n	801d956 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801d944:	683b      	ldr	r3, [r7, #0]
 801d946:	891b      	ldrh	r3, [r3, #8]
 801d948:	3b01      	subs	r3, #1
 801d94a:	b29a      	uxth	r2, r3
 801d94c:	683b      	ldr	r3, [r7, #0]
 801d94e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801d950:	6878      	ldr	r0, [r7, #4]
 801d952:	f000 f80d 	bl	801d970 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801d956:	687b      	ldr	r3, [r7, #4]
 801d958:	681b      	ldr	r3, [r3, #0]
 801d95a:	607b      	str	r3, [r7, #4]
 801d95c:	687b      	ldr	r3, [r7, #4]
 801d95e:	2b00      	cmp	r3, #0
 801d960:	d1db      	bne.n	801d91a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801d962:	bf00      	nop
 801d964:	bf00      	nop
 801d966:	3708      	adds	r7, #8
 801d968:	46bd      	mov	sp, r7
 801d96a:	bd80      	pop	{r7, pc}
 801d96c:	24008658 	.word	0x24008658

0801d970 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801d970:	b580      	push	{r7, lr}
 801d972:	b084      	sub	sp, #16
 801d974:	af00      	add	r7, sp, #0
 801d976:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d978:	687b      	ldr	r3, [r7, #4]
 801d97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d97c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801d97e:	68fb      	ldr	r3, [r7, #12]
 801d980:	795b      	ldrb	r3, [r3, #5]
 801d982:	2b0c      	cmp	r3, #12
 801d984:	d003      	beq.n	801d98e <dhcp_timeout+0x1e>
 801d986:	68fb      	ldr	r3, [r7, #12]
 801d988:	795b      	ldrb	r3, [r3, #5]
 801d98a:	2b06      	cmp	r3, #6
 801d98c:	d103      	bne.n	801d996 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801d98e:	6878      	ldr	r0, [r7, #4]
 801d990:	f000 fa76 	bl	801de80 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801d994:	e031      	b.n	801d9fa <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801d996:	68fb      	ldr	r3, [r7, #12]
 801d998:	795b      	ldrb	r3, [r3, #5]
 801d99a:	2b01      	cmp	r3, #1
 801d99c:	d10e      	bne.n	801d9bc <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801d99e:	68fb      	ldr	r3, [r7, #12]
 801d9a0:	799b      	ldrb	r3, [r3, #6]
 801d9a2:	2b05      	cmp	r3, #5
 801d9a4:	d803      	bhi.n	801d9ae <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801d9a6:	6878      	ldr	r0, [r7, #4]
 801d9a8:	f7ff fe60 	bl	801d66c <dhcp_select>
}
 801d9ac:	e025      	b.n	801d9fa <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801d9ae:	6878      	ldr	r0, [r7, #4]
 801d9b0:	f000 fdd0 	bl	801e554 <dhcp_release_and_stop>
      dhcp_start(netif);
 801d9b4:	6878      	ldr	r0, [r7, #4]
 801d9b6:	f000 f907 	bl	801dbc8 <dhcp_start>
}
 801d9ba:	e01e      	b.n	801d9fa <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801d9bc:	68fb      	ldr	r3, [r7, #12]
 801d9be:	795b      	ldrb	r3, [r3, #5]
 801d9c0:	2b08      	cmp	r3, #8
 801d9c2:	d10b      	bne.n	801d9dc <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801d9c4:	68fb      	ldr	r3, [r7, #12]
 801d9c6:	799b      	ldrb	r3, [r3, #6]
 801d9c8:	2b01      	cmp	r3, #1
 801d9ca:	d803      	bhi.n	801d9d4 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801d9cc:	6878      	ldr	r0, [r7, #4]
 801d9ce:	f7ff fdf3 	bl	801d5b8 <dhcp_check>
}
 801d9d2:	e012      	b.n	801d9fa <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801d9d4:	6878      	ldr	r0, [r7, #4]
 801d9d6:	f000 faf5 	bl	801dfc4 <dhcp_bind>
}
 801d9da:	e00e      	b.n	801d9fa <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801d9dc:	68fb      	ldr	r3, [r7, #12]
 801d9de:	795b      	ldrb	r3, [r3, #5]
 801d9e0:	2b03      	cmp	r3, #3
 801d9e2:	d10a      	bne.n	801d9fa <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801d9e4:	68fb      	ldr	r3, [r7, #12]
 801d9e6:	799b      	ldrb	r3, [r3, #6]
 801d9e8:	2b01      	cmp	r3, #1
 801d9ea:	d803      	bhi.n	801d9f4 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801d9ec:	6878      	ldr	r0, [r7, #4]
 801d9ee:	f000 fcfb 	bl	801e3e8 <dhcp_reboot>
}
 801d9f2:	e002      	b.n	801d9fa <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801d9f4:	6878      	ldr	r0, [r7, #4]
 801d9f6:	f000 fa43 	bl	801de80 <dhcp_discover>
}
 801d9fa:	bf00      	nop
 801d9fc:	3710      	adds	r7, #16
 801d9fe:	46bd      	mov	sp, r7
 801da00:	bd80      	pop	{r7, pc}

0801da02 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801da02:	b580      	push	{r7, lr}
 801da04:	b084      	sub	sp, #16
 801da06:	af00      	add	r7, sp, #0
 801da08:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801da0a:	687b      	ldr	r3, [r7, #4]
 801da0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801da0e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801da10:	68fb      	ldr	r3, [r7, #12]
 801da12:	795b      	ldrb	r3, [r3, #5]
 801da14:	2b01      	cmp	r3, #1
 801da16:	d007      	beq.n	801da28 <dhcp_t1_timeout+0x26>
 801da18:	68fb      	ldr	r3, [r7, #12]
 801da1a:	795b      	ldrb	r3, [r3, #5]
 801da1c:	2b0a      	cmp	r3, #10
 801da1e:	d003      	beq.n	801da28 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801da20:	68fb      	ldr	r3, [r7, #12]
 801da22:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801da24:	2b05      	cmp	r3, #5
 801da26:	d117      	bne.n	801da58 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801da28:	6878      	ldr	r0, [r7, #4]
 801da2a:	f000 fba5 	bl	801e178 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801da2e:	68fb      	ldr	r3, [r7, #12]
 801da30:	899b      	ldrh	r3, [r3, #12]
 801da32:	461a      	mov	r2, r3
 801da34:	68fb      	ldr	r3, [r7, #12]
 801da36:	8a5b      	ldrh	r3, [r3, #18]
 801da38:	1ad3      	subs	r3, r2, r3
 801da3a:	2b01      	cmp	r3, #1
 801da3c:	dd0c      	ble.n	801da58 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801da3e:	68fb      	ldr	r3, [r7, #12]
 801da40:	899b      	ldrh	r3, [r3, #12]
 801da42:	461a      	mov	r2, r3
 801da44:	68fb      	ldr	r3, [r7, #12]
 801da46:	8a5b      	ldrh	r3, [r3, #18]
 801da48:	1ad3      	subs	r3, r2, r3
 801da4a:	2b00      	cmp	r3, #0
 801da4c:	da00      	bge.n	801da50 <dhcp_t1_timeout+0x4e>
 801da4e:	3301      	adds	r3, #1
 801da50:	105b      	asrs	r3, r3, #1
 801da52:	b29a      	uxth	r2, r3
 801da54:	68fb      	ldr	r3, [r7, #12]
 801da56:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801da58:	bf00      	nop
 801da5a:	3710      	adds	r7, #16
 801da5c:	46bd      	mov	sp, r7
 801da5e:	bd80      	pop	{r7, pc}

0801da60 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801da60:	b580      	push	{r7, lr}
 801da62:	b084      	sub	sp, #16
 801da64:	af00      	add	r7, sp, #0
 801da66:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801da68:	687b      	ldr	r3, [r7, #4]
 801da6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801da6c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801da6e:	68fb      	ldr	r3, [r7, #12]
 801da70:	795b      	ldrb	r3, [r3, #5]
 801da72:	2b01      	cmp	r3, #1
 801da74:	d00b      	beq.n	801da8e <dhcp_t2_timeout+0x2e>
 801da76:	68fb      	ldr	r3, [r7, #12]
 801da78:	795b      	ldrb	r3, [r3, #5]
 801da7a:	2b0a      	cmp	r3, #10
 801da7c:	d007      	beq.n	801da8e <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801da7e:	68fb      	ldr	r3, [r7, #12]
 801da80:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801da82:	2b05      	cmp	r3, #5
 801da84:	d003      	beq.n	801da8e <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801da86:	68fb      	ldr	r3, [r7, #12]
 801da88:	795b      	ldrb	r3, [r3, #5]
 801da8a:	2b04      	cmp	r3, #4
 801da8c:	d117      	bne.n	801dabe <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801da8e:	6878      	ldr	r0, [r7, #4]
 801da90:	f000 fc0e 	bl	801e2b0 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801da94:	68fb      	ldr	r3, [r7, #12]
 801da96:	8a9b      	ldrh	r3, [r3, #20]
 801da98:	461a      	mov	r2, r3
 801da9a:	68fb      	ldr	r3, [r7, #12]
 801da9c:	8a5b      	ldrh	r3, [r3, #18]
 801da9e:	1ad3      	subs	r3, r2, r3
 801daa0:	2b01      	cmp	r3, #1
 801daa2:	dd0c      	ble.n	801dabe <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801daa4:	68fb      	ldr	r3, [r7, #12]
 801daa6:	8a9b      	ldrh	r3, [r3, #20]
 801daa8:	461a      	mov	r2, r3
 801daaa:	68fb      	ldr	r3, [r7, #12]
 801daac:	8a5b      	ldrh	r3, [r3, #18]
 801daae:	1ad3      	subs	r3, r2, r3
 801dab0:	2b00      	cmp	r3, #0
 801dab2:	da00      	bge.n	801dab6 <dhcp_t2_timeout+0x56>
 801dab4:	3301      	adds	r3, #1
 801dab6:	105b      	asrs	r3, r3, #1
 801dab8:	b29a      	uxth	r2, r3
 801daba:	68fb      	ldr	r3, [r7, #12]
 801dabc:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801dabe:	bf00      	nop
 801dac0:	3710      	adds	r7, #16
 801dac2:	46bd      	mov	sp, r7
 801dac4:	bd80      	pop	{r7, pc}
	...

0801dac8 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801dac8:	b580      	push	{r7, lr}
 801daca:	b086      	sub	sp, #24
 801dacc:	af00      	add	r7, sp, #0
 801dace:	6078      	str	r0, [r7, #4]
 801dad0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801dad2:	687b      	ldr	r3, [r7, #4]
 801dad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dad6:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801dad8:	693b      	ldr	r3, [r7, #16]
 801dada:	2200      	movs	r2, #0
 801dadc:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801dade:	693b      	ldr	r3, [r7, #16]
 801dae0:	2200      	movs	r2, #0
 801dae2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801dae4:	4b36      	ldr	r3, [pc, #216]	; (801dbc0 <dhcp_handle_ack+0xf8>)
 801dae6:	78db      	ldrb	r3, [r3, #3]
 801dae8:	2b00      	cmp	r3, #0
 801daea:	d003      	beq.n	801daf4 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801daec:	4b35      	ldr	r3, [pc, #212]	; (801dbc4 <dhcp_handle_ack+0xfc>)
 801daee:	68da      	ldr	r2, [r3, #12]
 801daf0:	693b      	ldr	r3, [r7, #16]
 801daf2:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801daf4:	4b32      	ldr	r3, [pc, #200]	; (801dbc0 <dhcp_handle_ack+0xf8>)
 801daf6:	791b      	ldrb	r3, [r3, #4]
 801daf8:	2b00      	cmp	r3, #0
 801dafa:	d004      	beq.n	801db06 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801dafc:	4b31      	ldr	r3, [pc, #196]	; (801dbc4 <dhcp_handle_ack+0xfc>)
 801dafe:	691a      	ldr	r2, [r3, #16]
 801db00:	693b      	ldr	r3, [r7, #16]
 801db02:	62da      	str	r2, [r3, #44]	; 0x2c
 801db04:	e004      	b.n	801db10 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801db06:	693b      	ldr	r3, [r7, #16]
 801db08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801db0a:	085a      	lsrs	r2, r3, #1
 801db0c:	693b      	ldr	r3, [r7, #16]
 801db0e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801db10:	4b2b      	ldr	r3, [pc, #172]	; (801dbc0 <dhcp_handle_ack+0xf8>)
 801db12:	795b      	ldrb	r3, [r3, #5]
 801db14:	2b00      	cmp	r3, #0
 801db16:	d004      	beq.n	801db22 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801db18:	4b2a      	ldr	r3, [pc, #168]	; (801dbc4 <dhcp_handle_ack+0xfc>)
 801db1a:	695a      	ldr	r2, [r3, #20]
 801db1c:	693b      	ldr	r3, [r7, #16]
 801db1e:	631a      	str	r2, [r3, #48]	; 0x30
 801db20:	e007      	b.n	801db32 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801db22:	693b      	ldr	r3, [r7, #16]
 801db24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801db26:	4613      	mov	r3, r2
 801db28:	00db      	lsls	r3, r3, #3
 801db2a:	1a9b      	subs	r3, r3, r2
 801db2c:	08da      	lsrs	r2, r3, #3
 801db2e:	693b      	ldr	r3, [r7, #16]
 801db30:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801db32:	683b      	ldr	r3, [r7, #0]
 801db34:	691a      	ldr	r2, [r3, #16]
 801db36:	693b      	ldr	r3, [r7, #16]
 801db38:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801db3a:	4b21      	ldr	r3, [pc, #132]	; (801dbc0 <dhcp_handle_ack+0xf8>)
 801db3c:	799b      	ldrb	r3, [r3, #6]
 801db3e:	2b00      	cmp	r3, #0
 801db40:	d00b      	beq.n	801db5a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801db42:	4b20      	ldr	r3, [pc, #128]	; (801dbc4 <dhcp_handle_ack+0xfc>)
 801db44:	699b      	ldr	r3, [r3, #24]
 801db46:	4618      	mov	r0, r3
 801db48:	f7f5 fad7 	bl	80130fa <lwip_htonl>
 801db4c:	4602      	mov	r2, r0
 801db4e:	693b      	ldr	r3, [r7, #16]
 801db50:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801db52:	693b      	ldr	r3, [r7, #16]
 801db54:	2201      	movs	r2, #1
 801db56:	71da      	strb	r2, [r3, #7]
 801db58:	e002      	b.n	801db60 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801db5a:	693b      	ldr	r3, [r7, #16]
 801db5c:	2200      	movs	r2, #0
 801db5e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801db60:	4b17      	ldr	r3, [pc, #92]	; (801dbc0 <dhcp_handle_ack+0xf8>)
 801db62:	79db      	ldrb	r3, [r3, #7]
 801db64:	2b00      	cmp	r3, #0
 801db66:	d007      	beq.n	801db78 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801db68:	4b16      	ldr	r3, [pc, #88]	; (801dbc4 <dhcp_handle_ack+0xfc>)
 801db6a:	69db      	ldr	r3, [r3, #28]
 801db6c:	4618      	mov	r0, r3
 801db6e:	f7f5 fac4 	bl	80130fa <lwip_htonl>
 801db72:	4602      	mov	r2, r0
 801db74:	693b      	ldr	r3, [r7, #16]
 801db76:	625a      	str	r2, [r3, #36]	; 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801db78:	2300      	movs	r3, #0
 801db7a:	75fb      	strb	r3, [r7, #23]
 801db7c:	e013      	b.n	801dba6 <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801db7e:	7dfb      	ldrb	r3, [r7, #23]
 801db80:	3308      	adds	r3, #8
 801db82:	4a10      	ldr	r2, [pc, #64]	; (801dbc4 <dhcp_handle_ack+0xfc>)
 801db84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801db88:	4618      	mov	r0, r3
 801db8a:	f7f5 fab6 	bl	80130fa <lwip_htonl>
 801db8e:	4603      	mov	r3, r0
 801db90:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 801db92:	f107 020c 	add.w	r2, r7, #12
 801db96:	7dfb      	ldrb	r3, [r7, #23]
 801db98:	4611      	mov	r1, r2
 801db9a:	4618      	mov	r0, r3
 801db9c:	f7f5 fb08 	bl	80131b0 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801dba0:	7dfb      	ldrb	r3, [r7, #23]
 801dba2:	3301      	adds	r3, #1
 801dba4:	75fb      	strb	r3, [r7, #23]
 801dba6:	7dfb      	ldrb	r3, [r7, #23]
 801dba8:	2b01      	cmp	r3, #1
 801dbaa:	d805      	bhi.n	801dbb8 <dhcp_handle_ack+0xf0>
 801dbac:	7dfb      	ldrb	r3, [r7, #23]
 801dbae:	3308      	adds	r3, #8
 801dbb0:	4a03      	ldr	r2, [pc, #12]	; (801dbc0 <dhcp_handle_ack+0xf8>)
 801dbb2:	5cd3      	ldrb	r3, [r2, r3]
 801dbb4:	2b00      	cmp	r3, #0
 801dbb6:	d1e2      	bne.n	801db7e <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801dbb8:	bf00      	nop
 801dbba:	3718      	adds	r7, #24
 801dbbc:	46bd      	mov	sp, r7
 801dbbe:	bd80      	pop	{r7, pc}
 801dbc0:	24008684 	.word	0x24008684
 801dbc4:	24008690 	.word	0x24008690

0801dbc8 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801dbc8:	b580      	push	{r7, lr}
 801dbca:	b084      	sub	sp, #16
 801dbcc:	af00      	add	r7, sp, #0
 801dbce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801dbd0:	687b      	ldr	r3, [r7, #4]
 801dbd2:	2b00      	cmp	r3, #0
 801dbd4:	d109      	bne.n	801dbea <dhcp_start+0x22>
 801dbd6:	4b37      	ldr	r3, [pc, #220]	; (801dcb4 <dhcp_start+0xec>)
 801dbd8:	f240 22e7 	movw	r2, #743	; 0x2e7
 801dbdc:	4936      	ldr	r1, [pc, #216]	; (801dcb8 <dhcp_start+0xf0>)
 801dbde:	4837      	ldr	r0, [pc, #220]	; (801dcbc <dhcp_start+0xf4>)
 801dbe0:	f009 f978 	bl	8026ed4 <iprintf>
 801dbe4:	f06f 030f 	mvn.w	r3, #15
 801dbe8:	e060      	b.n	801dcac <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801dbea:	687b      	ldr	r3, [r7, #4]
 801dbec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801dbf0:	f003 0301 	and.w	r3, r3, #1
 801dbf4:	2b00      	cmp	r3, #0
 801dbf6:	d109      	bne.n	801dc0c <dhcp_start+0x44>
 801dbf8:	4b2e      	ldr	r3, [pc, #184]	; (801dcb4 <dhcp_start+0xec>)
 801dbfa:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801dbfe:	4930      	ldr	r1, [pc, #192]	; (801dcc0 <dhcp_start+0xf8>)
 801dc00:	482e      	ldr	r0, [pc, #184]	; (801dcbc <dhcp_start+0xf4>)
 801dc02:	f009 f967 	bl	8026ed4 <iprintf>
 801dc06:	f06f 030f 	mvn.w	r3, #15
 801dc0a:	e04f      	b.n	801dcac <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 801dc0c:	687b      	ldr	r3, [r7, #4]
 801dc0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dc10:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801dc12:	687b      	ldr	r3, [r7, #4]
 801dc14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801dc16:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801dc1a:	d202      	bcs.n	801dc22 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801dc1c:	f04f 33ff 	mov.w	r3, #4294967295
 801dc20:	e044      	b.n	801dcac <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801dc22:	68fb      	ldr	r3, [r7, #12]
 801dc24:	2b00      	cmp	r3, #0
 801dc26:	d10d      	bne.n	801dc44 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801dc28:	2034      	movs	r0, #52	; 0x34
 801dc2a:	f7f6 fe27 	bl	801487c <mem_malloc>
 801dc2e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801dc30:	68fb      	ldr	r3, [r7, #12]
 801dc32:	2b00      	cmp	r3, #0
 801dc34:	d102      	bne.n	801dc3c <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801dc36:	f04f 33ff 	mov.w	r3, #4294967295
 801dc3a:	e037      	b.n	801dcac <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801dc3c:	687b      	ldr	r3, [r7, #4]
 801dc3e:	68fa      	ldr	r2, [r7, #12]
 801dc40:	625a      	str	r2, [r3, #36]	; 0x24
 801dc42:	e005      	b.n	801dc50 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801dc44:	68fb      	ldr	r3, [r7, #12]
 801dc46:	791b      	ldrb	r3, [r3, #4]
 801dc48:	2b00      	cmp	r3, #0
 801dc4a:	d001      	beq.n	801dc50 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801dc4c:	f7ff fc70 	bl	801d530 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801dc50:	2234      	movs	r2, #52	; 0x34
 801dc52:	2100      	movs	r1, #0
 801dc54:	68f8      	ldr	r0, [r7, #12]
 801dc56:	f008 fadf 	bl	8026218 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801dc5a:	f7ff fc17 	bl	801d48c <dhcp_inc_pcb_refcount>
 801dc5e:	4603      	mov	r3, r0
 801dc60:	2b00      	cmp	r3, #0
 801dc62:	d002      	beq.n	801dc6a <dhcp_start+0xa2>
    return ERR_MEM;
 801dc64:	f04f 33ff 	mov.w	r3, #4294967295
 801dc68:	e020      	b.n	801dcac <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801dc6a:	68fb      	ldr	r3, [r7, #12]
 801dc6c:	2201      	movs	r2, #1
 801dc6e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801dc70:	687b      	ldr	r3, [r7, #4]
 801dc72:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801dc76:	f003 0304 	and.w	r3, r3, #4
 801dc7a:	2b00      	cmp	r3, #0
 801dc7c:	d105      	bne.n	801dc8a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801dc7e:	2102      	movs	r1, #2
 801dc80:	68f8      	ldr	r0, [r7, #12]
 801dc82:	f000 fd01 	bl	801e688 <dhcp_set_state>
    return ERR_OK;
 801dc86:	2300      	movs	r3, #0
 801dc88:	e010      	b.n	801dcac <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801dc8a:	6878      	ldr	r0, [r7, #4]
 801dc8c:	f000 f8f8 	bl	801de80 <dhcp_discover>
 801dc90:	4603      	mov	r3, r0
 801dc92:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801dc94:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801dc98:	2b00      	cmp	r3, #0
 801dc9a:	d005      	beq.n	801dca8 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801dc9c:	6878      	ldr	r0, [r7, #4]
 801dc9e:	f000 fc59 	bl	801e554 <dhcp_release_and_stop>
    return ERR_MEM;
 801dca2:	f04f 33ff 	mov.w	r3, #4294967295
 801dca6:	e001      	b.n	801dcac <dhcp_start+0xe4>
  }
  return result;
 801dca8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801dcac:	4618      	mov	r0, r3
 801dcae:	3710      	adds	r7, #16
 801dcb0:	46bd      	mov	sp, r7
 801dcb2:	bd80      	pop	{r7, pc}
 801dcb4:	0802d868 	.word	0x0802d868
 801dcb8:	0802d94c 	.word	0x0802d94c
 801dcbc:	0802d8c8 	.word	0x0802d8c8
 801dcc0:	0802d990 	.word	0x0802d990

0801dcc4 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801dcc4:	b580      	push	{r7, lr}
 801dcc6:	b084      	sub	sp, #16
 801dcc8:	af00      	add	r7, sp, #0
 801dcca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801dccc:	687b      	ldr	r3, [r7, #4]
 801dcce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dcd0:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801dcd2:	68fb      	ldr	r3, [r7, #12]
 801dcd4:	2b00      	cmp	r3, #0
 801dcd6:	d025      	beq.n	801dd24 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 801dcd8:	68fb      	ldr	r3, [r7, #12]
 801dcda:	795b      	ldrb	r3, [r3, #5]
 801dcdc:	2b0a      	cmp	r3, #10
 801dcde:	d008      	beq.n	801dcf2 <dhcp_network_changed+0x2e>
 801dce0:	2b0a      	cmp	r3, #10
 801dce2:	dc0d      	bgt.n	801dd00 <dhcp_network_changed+0x3c>
 801dce4:	2b00      	cmp	r3, #0
 801dce6:	d01f      	beq.n	801dd28 <dhcp_network_changed+0x64>
 801dce8:	2b00      	cmp	r3, #0
 801dcea:	db09      	blt.n	801dd00 <dhcp_network_changed+0x3c>
 801dcec:	3b03      	subs	r3, #3
 801dcee:	2b02      	cmp	r3, #2
 801dcf0:	d806      	bhi.n	801dd00 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801dcf2:	68fb      	ldr	r3, [r7, #12]
 801dcf4:	2200      	movs	r2, #0
 801dcf6:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 801dcf8:	6878      	ldr	r0, [r7, #4]
 801dcfa:	f000 fb75 	bl	801e3e8 <dhcp_reboot>
      break;
 801dcfe:	e014      	b.n	801dd2a <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801dd00:	68fb      	ldr	r3, [r7, #12]
 801dd02:	795b      	ldrb	r3, [r3, #5]
 801dd04:	2b0c      	cmp	r3, #12
 801dd06:	d906      	bls.n	801dd16 <dhcp_network_changed+0x52>
 801dd08:	4b09      	ldr	r3, [pc, #36]	; (801dd30 <dhcp_network_changed+0x6c>)
 801dd0a:	f240 326d 	movw	r2, #877	; 0x36d
 801dd0e:	4909      	ldr	r1, [pc, #36]	; (801dd34 <dhcp_network_changed+0x70>)
 801dd10:	4809      	ldr	r0, [pc, #36]	; (801dd38 <dhcp_network_changed+0x74>)
 801dd12:	f009 f8df 	bl	8026ed4 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801dd16:	68fb      	ldr	r3, [r7, #12]
 801dd18:	2200      	movs	r2, #0
 801dd1a:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 801dd1c:	6878      	ldr	r0, [r7, #4]
 801dd1e:	f000 f8af 	bl	801de80 <dhcp_discover>
      break;
 801dd22:	e002      	b.n	801dd2a <dhcp_network_changed+0x66>
    return;
 801dd24:	bf00      	nop
 801dd26:	e000      	b.n	801dd2a <dhcp_network_changed+0x66>
      break;
 801dd28:	bf00      	nop
  }
}
 801dd2a:	3710      	adds	r7, #16
 801dd2c:	46bd      	mov	sp, r7
 801dd2e:	bd80      	pop	{r7, pc}
 801dd30:	0802d868 	.word	0x0802d868
 801dd34:	0802d9b4 	.word	0x0802d9b4
 801dd38:	0802d8c8 	.word	0x0802d8c8

0801dd3c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801dd3c:	b580      	push	{r7, lr}
 801dd3e:	b084      	sub	sp, #16
 801dd40:	af00      	add	r7, sp, #0
 801dd42:	6078      	str	r0, [r7, #4]
 801dd44:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801dd46:	687b      	ldr	r3, [r7, #4]
 801dd48:	2b00      	cmp	r3, #0
 801dd4a:	d107      	bne.n	801dd5c <dhcp_arp_reply+0x20>
 801dd4c:	4b0e      	ldr	r3, [pc, #56]	; (801dd88 <dhcp_arp_reply+0x4c>)
 801dd4e:	f240 328b 	movw	r2, #907	; 0x38b
 801dd52:	490e      	ldr	r1, [pc, #56]	; (801dd8c <dhcp_arp_reply+0x50>)
 801dd54:	480e      	ldr	r0, [pc, #56]	; (801dd90 <dhcp_arp_reply+0x54>)
 801dd56:	f009 f8bd 	bl	8026ed4 <iprintf>
 801dd5a:	e012      	b.n	801dd82 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801dd5c:	687b      	ldr	r3, [r7, #4]
 801dd5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dd60:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801dd62:	68fb      	ldr	r3, [r7, #12]
 801dd64:	2b00      	cmp	r3, #0
 801dd66:	d00c      	beq.n	801dd82 <dhcp_arp_reply+0x46>
 801dd68:	68fb      	ldr	r3, [r7, #12]
 801dd6a:	795b      	ldrb	r3, [r3, #5]
 801dd6c:	2b08      	cmp	r3, #8
 801dd6e:	d108      	bne.n	801dd82 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801dd70:	683b      	ldr	r3, [r7, #0]
 801dd72:	681a      	ldr	r2, [r3, #0]
 801dd74:	68fb      	ldr	r3, [r7, #12]
 801dd76:	69db      	ldr	r3, [r3, #28]
 801dd78:	429a      	cmp	r2, r3
 801dd7a:	d102      	bne.n	801dd82 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801dd7c:	6878      	ldr	r0, [r7, #4]
 801dd7e:	f000 f809 	bl	801dd94 <dhcp_decline>
    }
  }
}
 801dd82:	3710      	adds	r7, #16
 801dd84:	46bd      	mov	sp, r7
 801dd86:	bd80      	pop	{r7, pc}
 801dd88:	0802d868 	.word	0x0802d868
 801dd8c:	0802d94c 	.word	0x0802d94c
 801dd90:	0802d8c8 	.word	0x0802d8c8

0801dd94 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801dd94:	b5b0      	push	{r4, r5, r7, lr}
 801dd96:	b08a      	sub	sp, #40	; 0x28
 801dd98:	af02      	add	r7, sp, #8
 801dd9a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801dd9c:	687b      	ldr	r3, [r7, #4]
 801dd9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dda0:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801dda2:	210c      	movs	r1, #12
 801dda4:	69b8      	ldr	r0, [r7, #24]
 801dda6:	f000 fc6f 	bl	801e688 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801ddaa:	f107 030c 	add.w	r3, r7, #12
 801ddae:	2204      	movs	r2, #4
 801ddb0:	69b9      	ldr	r1, [r7, #24]
 801ddb2:	6878      	ldr	r0, [r7, #4]
 801ddb4:	f001 f924 	bl	801f000 <dhcp_create_msg>
 801ddb8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801ddba:	697b      	ldr	r3, [r7, #20]
 801ddbc:	2b00      	cmp	r3, #0
 801ddbe:	d035      	beq.n	801de2c <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801ddc0:	697b      	ldr	r3, [r7, #20]
 801ddc2:	685b      	ldr	r3, [r3, #4]
 801ddc4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801ddc6:	89b8      	ldrh	r0, [r7, #12]
 801ddc8:	693b      	ldr	r3, [r7, #16]
 801ddca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ddce:	2304      	movs	r3, #4
 801ddd0:	2232      	movs	r2, #50	; 0x32
 801ddd2:	f000 fc73 	bl	801e6bc <dhcp_option>
 801ddd6:	4603      	mov	r3, r0
 801ddd8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801ddda:	89bc      	ldrh	r4, [r7, #12]
 801dddc:	693b      	ldr	r3, [r7, #16]
 801ddde:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801dde2:	69bb      	ldr	r3, [r7, #24]
 801dde4:	69db      	ldr	r3, [r3, #28]
 801dde6:	4618      	mov	r0, r3
 801dde8:	f7f5 f987 	bl	80130fa <lwip_htonl>
 801ddec:	4603      	mov	r3, r0
 801ddee:	461a      	mov	r2, r3
 801ddf0:	4629      	mov	r1, r5
 801ddf2:	4620      	mov	r0, r4
 801ddf4:	f000 fcee 	bl	801e7d4 <dhcp_option_long>
 801ddf8:	4603      	mov	r3, r0
 801ddfa:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801ddfc:	89b8      	ldrh	r0, [r7, #12]
 801ddfe:	693b      	ldr	r3, [r7, #16]
 801de00:	33f0      	adds	r3, #240	; 0xf0
 801de02:	697a      	ldr	r2, [r7, #20]
 801de04:	4619      	mov	r1, r3
 801de06:	f001 f9d1 	bl	801f1ac <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801de0a:	4b19      	ldr	r3, [pc, #100]	; (801de70 <dhcp_decline+0xdc>)
 801de0c:	6818      	ldr	r0, [r3, #0]
 801de0e:	4b19      	ldr	r3, [pc, #100]	; (801de74 <dhcp_decline+0xe0>)
 801de10:	9301      	str	r3, [sp, #4]
 801de12:	687b      	ldr	r3, [r7, #4]
 801de14:	9300      	str	r3, [sp, #0]
 801de16:	2343      	movs	r3, #67	; 0x43
 801de18:	4a17      	ldr	r2, [pc, #92]	; (801de78 <dhcp_decline+0xe4>)
 801de1a:	6979      	ldr	r1, [r7, #20]
 801de1c:	f7ff f87c 	bl	801cf18 <udp_sendto_if_src>
 801de20:	4603      	mov	r3, r0
 801de22:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801de24:	6978      	ldr	r0, [r7, #20]
 801de26:	f7f7 fe25 	bl	8015a74 <pbuf_free>
 801de2a:	e001      	b.n	801de30 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801de2c:	23ff      	movs	r3, #255	; 0xff
 801de2e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801de30:	69bb      	ldr	r3, [r7, #24]
 801de32:	799b      	ldrb	r3, [r3, #6]
 801de34:	2bff      	cmp	r3, #255	; 0xff
 801de36:	d005      	beq.n	801de44 <dhcp_decline+0xb0>
    dhcp->tries++;
 801de38:	69bb      	ldr	r3, [r7, #24]
 801de3a:	799b      	ldrb	r3, [r3, #6]
 801de3c:	3301      	adds	r3, #1
 801de3e:	b2da      	uxtb	r2, r3
 801de40:	69bb      	ldr	r3, [r7, #24]
 801de42:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801de44:	f242 7310 	movw	r3, #10000	; 0x2710
 801de48:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801de4a:	89fb      	ldrh	r3, [r7, #14]
 801de4c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801de50:	4a0a      	ldr	r2, [pc, #40]	; (801de7c <dhcp_decline+0xe8>)
 801de52:	fb82 1203 	smull	r1, r2, r2, r3
 801de56:	1152      	asrs	r2, r2, #5
 801de58:	17db      	asrs	r3, r3, #31
 801de5a:	1ad3      	subs	r3, r2, r3
 801de5c:	b29a      	uxth	r2, r3
 801de5e:	69bb      	ldr	r3, [r7, #24]
 801de60:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801de62:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801de66:	4618      	mov	r0, r3
 801de68:	3720      	adds	r7, #32
 801de6a:	46bd      	mov	sp, r7
 801de6c:	bdb0      	pop	{r4, r5, r7, pc}
 801de6e:	bf00      	nop
 801de70:	24004fcc 	.word	0x24004fcc
 801de74:	0802ec60 	.word	0x0802ec60
 801de78:	0802ec64 	.word	0x0802ec64
 801de7c:	10624dd3 	.word	0x10624dd3

0801de80 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801de80:	b580      	push	{r7, lr}
 801de82:	b08a      	sub	sp, #40	; 0x28
 801de84:	af02      	add	r7, sp, #8
 801de86:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801de88:	687b      	ldr	r3, [r7, #4]
 801de8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801de8c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801de8e:	2300      	movs	r3, #0
 801de90:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801de92:	69bb      	ldr	r3, [r7, #24]
 801de94:	2200      	movs	r2, #0
 801de96:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801de98:	2106      	movs	r1, #6
 801de9a:	69b8      	ldr	r0, [r7, #24]
 801de9c:	f000 fbf4 	bl	801e688 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801dea0:	f107 0308 	add.w	r3, r7, #8
 801dea4:	2201      	movs	r2, #1
 801dea6:	69b9      	ldr	r1, [r7, #24]
 801dea8:	6878      	ldr	r0, [r7, #4]
 801deaa:	f001 f8a9 	bl	801f000 <dhcp_create_msg>
 801deae:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801deb0:	693b      	ldr	r3, [r7, #16]
 801deb2:	2b00      	cmp	r3, #0
 801deb4:	d04b      	beq.n	801df4e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801deb6:	693b      	ldr	r3, [r7, #16]
 801deb8:	685b      	ldr	r3, [r3, #4]
 801deba:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801debc:	8938      	ldrh	r0, [r7, #8]
 801debe:	68fb      	ldr	r3, [r7, #12]
 801dec0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801dec4:	2302      	movs	r3, #2
 801dec6:	2239      	movs	r2, #57	; 0x39
 801dec8:	f000 fbf8 	bl	801e6bc <dhcp_option>
 801decc:	4603      	mov	r3, r0
 801dece:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801ded0:	8938      	ldrh	r0, [r7, #8]
 801ded2:	68fb      	ldr	r3, [r7, #12]
 801ded4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ded8:	687b      	ldr	r3, [r7, #4]
 801deda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801dedc:	461a      	mov	r2, r3
 801dede:	f000 fc47 	bl	801e770 <dhcp_option_short>
 801dee2:	4603      	mov	r3, r0
 801dee4:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801dee6:	8938      	ldrh	r0, [r7, #8]
 801dee8:	68fb      	ldr	r3, [r7, #12]
 801deea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801deee:	2304      	movs	r3, #4
 801def0:	2237      	movs	r2, #55	; 0x37
 801def2:	f000 fbe3 	bl	801e6bc <dhcp_option>
 801def6:	4603      	mov	r3, r0
 801def8:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801defa:	2300      	movs	r3, #0
 801defc:	77fb      	strb	r3, [r7, #31]
 801defe:	e00e      	b.n	801df1e <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801df00:	8938      	ldrh	r0, [r7, #8]
 801df02:	68fb      	ldr	r3, [r7, #12]
 801df04:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801df08:	7ffb      	ldrb	r3, [r7, #31]
 801df0a:	4a29      	ldr	r2, [pc, #164]	; (801dfb0 <dhcp_discover+0x130>)
 801df0c:	5cd3      	ldrb	r3, [r2, r3]
 801df0e:	461a      	mov	r2, r3
 801df10:	f000 fc08 	bl	801e724 <dhcp_option_byte>
 801df14:	4603      	mov	r3, r0
 801df16:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801df18:	7ffb      	ldrb	r3, [r7, #31]
 801df1a:	3301      	adds	r3, #1
 801df1c:	77fb      	strb	r3, [r7, #31]
 801df1e:	7ffb      	ldrb	r3, [r7, #31]
 801df20:	2b03      	cmp	r3, #3
 801df22:	d9ed      	bls.n	801df00 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801df24:	8938      	ldrh	r0, [r7, #8]
 801df26:	68fb      	ldr	r3, [r7, #12]
 801df28:	33f0      	adds	r3, #240	; 0xf0
 801df2a:	693a      	ldr	r2, [r7, #16]
 801df2c:	4619      	mov	r1, r3
 801df2e:	f001 f93d 	bl	801f1ac <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801df32:	4b20      	ldr	r3, [pc, #128]	; (801dfb4 <dhcp_discover+0x134>)
 801df34:	6818      	ldr	r0, [r3, #0]
 801df36:	4b20      	ldr	r3, [pc, #128]	; (801dfb8 <dhcp_discover+0x138>)
 801df38:	9301      	str	r3, [sp, #4]
 801df3a:	687b      	ldr	r3, [r7, #4]
 801df3c:	9300      	str	r3, [sp, #0]
 801df3e:	2343      	movs	r3, #67	; 0x43
 801df40:	4a1e      	ldr	r2, [pc, #120]	; (801dfbc <dhcp_discover+0x13c>)
 801df42:	6939      	ldr	r1, [r7, #16]
 801df44:	f7fe ffe8 	bl	801cf18 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801df48:	6938      	ldr	r0, [r7, #16]
 801df4a:	f7f7 fd93 	bl	8015a74 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801df4e:	69bb      	ldr	r3, [r7, #24]
 801df50:	799b      	ldrb	r3, [r3, #6]
 801df52:	2bff      	cmp	r3, #255	; 0xff
 801df54:	d005      	beq.n	801df62 <dhcp_discover+0xe2>
    dhcp->tries++;
 801df56:	69bb      	ldr	r3, [r7, #24]
 801df58:	799b      	ldrb	r3, [r3, #6]
 801df5a:	3301      	adds	r3, #1
 801df5c:	b2da      	uxtb	r2, r3
 801df5e:	69bb      	ldr	r3, [r7, #24]
 801df60:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801df62:	69bb      	ldr	r3, [r7, #24]
 801df64:	799b      	ldrb	r3, [r3, #6]
 801df66:	2b05      	cmp	r3, #5
 801df68:	d80d      	bhi.n	801df86 <dhcp_discover+0x106>
 801df6a:	69bb      	ldr	r3, [r7, #24]
 801df6c:	799b      	ldrb	r3, [r3, #6]
 801df6e:	461a      	mov	r2, r3
 801df70:	2301      	movs	r3, #1
 801df72:	4093      	lsls	r3, r2
 801df74:	b29b      	uxth	r3, r3
 801df76:	461a      	mov	r2, r3
 801df78:	0152      	lsls	r2, r2, #5
 801df7a:	1ad2      	subs	r2, r2, r3
 801df7c:	0092      	lsls	r2, r2, #2
 801df7e:	4413      	add	r3, r2
 801df80:	00db      	lsls	r3, r3, #3
 801df82:	b29b      	uxth	r3, r3
 801df84:	e001      	b.n	801df8a <dhcp_discover+0x10a>
 801df86:	f64e 2360 	movw	r3, #60000	; 0xea60
 801df8a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801df8c:	897b      	ldrh	r3, [r7, #10]
 801df8e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801df92:	4a0b      	ldr	r2, [pc, #44]	; (801dfc0 <dhcp_discover+0x140>)
 801df94:	fb82 1203 	smull	r1, r2, r2, r3
 801df98:	1152      	asrs	r2, r2, #5
 801df9a:	17db      	asrs	r3, r3, #31
 801df9c:	1ad3      	subs	r3, r2, r3
 801df9e:	b29a      	uxth	r2, r3
 801dfa0:	69bb      	ldr	r3, [r7, #24]
 801dfa2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801dfa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801dfa8:	4618      	mov	r0, r3
 801dfaa:	3720      	adds	r7, #32
 801dfac:	46bd      	mov	sp, r7
 801dfae:	bd80      	pop	{r7, pc}
 801dfb0:	24000038 	.word	0x24000038
 801dfb4:	24004fcc 	.word	0x24004fcc
 801dfb8:	0802ec60 	.word	0x0802ec60
 801dfbc:	0802ec64 	.word	0x0802ec64
 801dfc0:	10624dd3 	.word	0x10624dd3

0801dfc4 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801dfc4:	b580      	push	{r7, lr}
 801dfc6:	b088      	sub	sp, #32
 801dfc8:	af00      	add	r7, sp, #0
 801dfca:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801dfcc:	687b      	ldr	r3, [r7, #4]
 801dfce:	2b00      	cmp	r3, #0
 801dfd0:	d107      	bne.n	801dfe2 <dhcp_bind+0x1e>
 801dfd2:	4b64      	ldr	r3, [pc, #400]	; (801e164 <dhcp_bind+0x1a0>)
 801dfd4:	f240 4215 	movw	r2, #1045	; 0x415
 801dfd8:	4963      	ldr	r1, [pc, #396]	; (801e168 <dhcp_bind+0x1a4>)
 801dfda:	4864      	ldr	r0, [pc, #400]	; (801e16c <dhcp_bind+0x1a8>)
 801dfdc:	f008 ff7a 	bl	8026ed4 <iprintf>
 801dfe0:	e0bc      	b.n	801e15c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801dfe2:	687b      	ldr	r3, [r7, #4]
 801dfe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dfe6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801dfe8:	69bb      	ldr	r3, [r7, #24]
 801dfea:	2b00      	cmp	r3, #0
 801dfec:	d107      	bne.n	801dffe <dhcp_bind+0x3a>
 801dfee:	4b5d      	ldr	r3, [pc, #372]	; (801e164 <dhcp_bind+0x1a0>)
 801dff0:	f240 4217 	movw	r2, #1047	; 0x417
 801dff4:	495e      	ldr	r1, [pc, #376]	; (801e170 <dhcp_bind+0x1ac>)
 801dff6:	485d      	ldr	r0, [pc, #372]	; (801e16c <dhcp_bind+0x1a8>)
 801dff8:	f008 ff6c 	bl	8026ed4 <iprintf>
 801dffc:	e0ae      	b.n	801e15c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801dffe:	69bb      	ldr	r3, [r7, #24]
 801e000:	2200      	movs	r2, #0
 801e002:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801e004:	69bb      	ldr	r3, [r7, #24]
 801e006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e008:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e00c:	d019      	beq.n	801e042 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801e00e:	69bb      	ldr	r3, [r7, #24]
 801e010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e012:	331e      	adds	r3, #30
 801e014:	4a57      	ldr	r2, [pc, #348]	; (801e174 <dhcp_bind+0x1b0>)
 801e016:	fba2 2303 	umull	r2, r3, r2, r3
 801e01a:	095b      	lsrs	r3, r3, #5
 801e01c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801e01e:	69fb      	ldr	r3, [r7, #28]
 801e020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e024:	d302      	bcc.n	801e02c <dhcp_bind+0x68>
      timeout = 0xffff;
 801e026:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e02a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801e02c:	69fb      	ldr	r3, [r7, #28]
 801e02e:	b29a      	uxth	r2, r3
 801e030:	69bb      	ldr	r3, [r7, #24]
 801e032:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801e034:	69bb      	ldr	r3, [r7, #24]
 801e036:	8a9b      	ldrh	r3, [r3, #20]
 801e038:	2b00      	cmp	r3, #0
 801e03a:	d102      	bne.n	801e042 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801e03c:	69bb      	ldr	r3, [r7, #24]
 801e03e:	2201      	movs	r2, #1
 801e040:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801e042:	69bb      	ldr	r3, [r7, #24]
 801e044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e046:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e04a:	d01d      	beq.n	801e088 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801e04c:	69bb      	ldr	r3, [r7, #24]
 801e04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e050:	331e      	adds	r3, #30
 801e052:	4a48      	ldr	r2, [pc, #288]	; (801e174 <dhcp_bind+0x1b0>)
 801e054:	fba2 2303 	umull	r2, r3, r2, r3
 801e058:	095b      	lsrs	r3, r3, #5
 801e05a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801e05c:	69fb      	ldr	r3, [r7, #28]
 801e05e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e062:	d302      	bcc.n	801e06a <dhcp_bind+0xa6>
      timeout = 0xffff;
 801e064:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e068:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801e06a:	69fb      	ldr	r3, [r7, #28]
 801e06c:	b29a      	uxth	r2, r3
 801e06e:	69bb      	ldr	r3, [r7, #24]
 801e070:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801e072:	69bb      	ldr	r3, [r7, #24]
 801e074:	895b      	ldrh	r3, [r3, #10]
 801e076:	2b00      	cmp	r3, #0
 801e078:	d102      	bne.n	801e080 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801e07a:	69bb      	ldr	r3, [r7, #24]
 801e07c:	2201      	movs	r2, #1
 801e07e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801e080:	69bb      	ldr	r3, [r7, #24]
 801e082:	895a      	ldrh	r2, [r3, #10]
 801e084:	69bb      	ldr	r3, [r7, #24]
 801e086:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801e088:	69bb      	ldr	r3, [r7, #24]
 801e08a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e08c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e090:	d01d      	beq.n	801e0ce <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801e092:	69bb      	ldr	r3, [r7, #24]
 801e094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e096:	331e      	adds	r3, #30
 801e098:	4a36      	ldr	r2, [pc, #216]	; (801e174 <dhcp_bind+0x1b0>)
 801e09a:	fba2 2303 	umull	r2, r3, r2, r3
 801e09e:	095b      	lsrs	r3, r3, #5
 801e0a0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801e0a2:	69fb      	ldr	r3, [r7, #28]
 801e0a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e0a8:	d302      	bcc.n	801e0b0 <dhcp_bind+0xec>
      timeout = 0xffff;
 801e0aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e0ae:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801e0b0:	69fb      	ldr	r3, [r7, #28]
 801e0b2:	b29a      	uxth	r2, r3
 801e0b4:	69bb      	ldr	r3, [r7, #24]
 801e0b6:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801e0b8:	69bb      	ldr	r3, [r7, #24]
 801e0ba:	899b      	ldrh	r3, [r3, #12]
 801e0bc:	2b00      	cmp	r3, #0
 801e0be:	d102      	bne.n	801e0c6 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801e0c0:	69bb      	ldr	r3, [r7, #24]
 801e0c2:	2201      	movs	r2, #1
 801e0c4:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801e0c6:	69bb      	ldr	r3, [r7, #24]
 801e0c8:	899a      	ldrh	r2, [r3, #12]
 801e0ca:	69bb      	ldr	r3, [r7, #24]
 801e0cc:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801e0ce:	69bb      	ldr	r3, [r7, #24]
 801e0d0:	895a      	ldrh	r2, [r3, #10]
 801e0d2:	69bb      	ldr	r3, [r7, #24]
 801e0d4:	899b      	ldrh	r3, [r3, #12]
 801e0d6:	429a      	cmp	r2, r3
 801e0d8:	d306      	bcc.n	801e0e8 <dhcp_bind+0x124>
 801e0da:	69bb      	ldr	r3, [r7, #24]
 801e0dc:	899b      	ldrh	r3, [r3, #12]
 801e0de:	2b00      	cmp	r3, #0
 801e0e0:	d002      	beq.n	801e0e8 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801e0e2:	69bb      	ldr	r3, [r7, #24]
 801e0e4:	2200      	movs	r2, #0
 801e0e6:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801e0e8:	69bb      	ldr	r3, [r7, #24]
 801e0ea:	79db      	ldrb	r3, [r3, #7]
 801e0ec:	2b00      	cmp	r3, #0
 801e0ee:	d003      	beq.n	801e0f8 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801e0f0:	69bb      	ldr	r3, [r7, #24]
 801e0f2:	6a1b      	ldr	r3, [r3, #32]
 801e0f4:	613b      	str	r3, [r7, #16]
 801e0f6:	e014      	b.n	801e122 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801e0f8:	69bb      	ldr	r3, [r7, #24]
 801e0fa:	331c      	adds	r3, #28
 801e0fc:	781b      	ldrb	r3, [r3, #0]
 801e0fe:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801e100:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801e104:	2b00      	cmp	r3, #0
 801e106:	db02      	blt.n	801e10e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801e108:	23ff      	movs	r3, #255	; 0xff
 801e10a:	613b      	str	r3, [r7, #16]
 801e10c:	e009      	b.n	801e122 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801e10e:	7dfb      	ldrb	r3, [r7, #23]
 801e110:	2bbf      	cmp	r3, #191	; 0xbf
 801e112:	d903      	bls.n	801e11c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801e114:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801e118:	613b      	str	r3, [r7, #16]
 801e11a:	e002      	b.n	801e122 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801e11c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e120:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801e122:	69bb      	ldr	r3, [r7, #24]
 801e124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e126:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801e128:	68fb      	ldr	r3, [r7, #12]
 801e12a:	2b00      	cmp	r3, #0
 801e12c:	d108      	bne.n	801e140 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801e12e:	69bb      	ldr	r3, [r7, #24]
 801e130:	69da      	ldr	r2, [r3, #28]
 801e132:	693b      	ldr	r3, [r7, #16]
 801e134:	4013      	ands	r3, r2
 801e136:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801e138:	68fb      	ldr	r3, [r7, #12]
 801e13a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801e13e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801e140:	210a      	movs	r1, #10
 801e142:	69b8      	ldr	r0, [r7, #24]
 801e144:	f000 faa0 	bl	801e688 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801e148:	69bb      	ldr	r3, [r7, #24]
 801e14a:	f103 011c 	add.w	r1, r3, #28
 801e14e:	f107 030c 	add.w	r3, r7, #12
 801e152:	f107 0210 	add.w	r2, r7, #16
 801e156:	6878      	ldr	r0, [r7, #4]
 801e158:	f7f6 ff4c 	bl	8014ff4 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801e15c:	3720      	adds	r7, #32
 801e15e:	46bd      	mov	sp, r7
 801e160:	bd80      	pop	{r7, pc}
 801e162:	bf00      	nop
 801e164:	0802d868 	.word	0x0802d868
 801e168:	0802d9c8 	.word	0x0802d9c8
 801e16c:	0802d8c8 	.word	0x0802d8c8
 801e170:	0802d9e4 	.word	0x0802d9e4
 801e174:	88888889 	.word	0x88888889

0801e178 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801e178:	b580      	push	{r7, lr}
 801e17a:	b08a      	sub	sp, #40	; 0x28
 801e17c:	af02      	add	r7, sp, #8
 801e17e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801e180:	687b      	ldr	r3, [r7, #4]
 801e182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e184:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801e186:	2105      	movs	r1, #5
 801e188:	69b8      	ldr	r0, [r7, #24]
 801e18a:	f000 fa7d 	bl	801e688 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801e18e:	f107 030c 	add.w	r3, r7, #12
 801e192:	2203      	movs	r2, #3
 801e194:	69b9      	ldr	r1, [r7, #24]
 801e196:	6878      	ldr	r0, [r7, #4]
 801e198:	f000 ff32 	bl	801f000 <dhcp_create_msg>
 801e19c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801e19e:	697b      	ldr	r3, [r7, #20]
 801e1a0:	2b00      	cmp	r3, #0
 801e1a2:	d04e      	beq.n	801e242 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801e1a4:	697b      	ldr	r3, [r7, #20]
 801e1a6:	685b      	ldr	r3, [r3, #4]
 801e1a8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801e1aa:	89b8      	ldrh	r0, [r7, #12]
 801e1ac:	693b      	ldr	r3, [r7, #16]
 801e1ae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e1b2:	2302      	movs	r3, #2
 801e1b4:	2239      	movs	r2, #57	; 0x39
 801e1b6:	f000 fa81 	bl	801e6bc <dhcp_option>
 801e1ba:	4603      	mov	r3, r0
 801e1bc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801e1be:	89b8      	ldrh	r0, [r7, #12]
 801e1c0:	693b      	ldr	r3, [r7, #16]
 801e1c2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e1c6:	687b      	ldr	r3, [r7, #4]
 801e1c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e1ca:	461a      	mov	r2, r3
 801e1cc:	f000 fad0 	bl	801e770 <dhcp_option_short>
 801e1d0:	4603      	mov	r3, r0
 801e1d2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801e1d4:	89b8      	ldrh	r0, [r7, #12]
 801e1d6:	693b      	ldr	r3, [r7, #16]
 801e1d8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e1dc:	2304      	movs	r3, #4
 801e1de:	2237      	movs	r2, #55	; 0x37
 801e1e0:	f000 fa6c 	bl	801e6bc <dhcp_option>
 801e1e4:	4603      	mov	r3, r0
 801e1e6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801e1e8:	2300      	movs	r3, #0
 801e1ea:	77bb      	strb	r3, [r7, #30]
 801e1ec:	e00e      	b.n	801e20c <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801e1ee:	89b8      	ldrh	r0, [r7, #12]
 801e1f0:	693b      	ldr	r3, [r7, #16]
 801e1f2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e1f6:	7fbb      	ldrb	r3, [r7, #30]
 801e1f8:	4a2a      	ldr	r2, [pc, #168]	; (801e2a4 <dhcp_renew+0x12c>)
 801e1fa:	5cd3      	ldrb	r3, [r2, r3]
 801e1fc:	461a      	mov	r2, r3
 801e1fe:	f000 fa91 	bl	801e724 <dhcp_option_byte>
 801e202:	4603      	mov	r3, r0
 801e204:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801e206:	7fbb      	ldrb	r3, [r7, #30]
 801e208:	3301      	adds	r3, #1
 801e20a:	77bb      	strb	r3, [r7, #30]
 801e20c:	7fbb      	ldrb	r3, [r7, #30]
 801e20e:	2b03      	cmp	r3, #3
 801e210:	d9ed      	bls.n	801e1ee <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801e212:	89b8      	ldrh	r0, [r7, #12]
 801e214:	693b      	ldr	r3, [r7, #16]
 801e216:	33f0      	adds	r3, #240	; 0xf0
 801e218:	697a      	ldr	r2, [r7, #20]
 801e21a:	4619      	mov	r1, r3
 801e21c:	f000 ffc6 	bl	801f1ac <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801e220:	4b21      	ldr	r3, [pc, #132]	; (801e2a8 <dhcp_renew+0x130>)
 801e222:	6818      	ldr	r0, [r3, #0]
 801e224:	69bb      	ldr	r3, [r7, #24]
 801e226:	f103 0218 	add.w	r2, r3, #24
 801e22a:	687b      	ldr	r3, [r7, #4]
 801e22c:	9300      	str	r3, [sp, #0]
 801e22e:	2343      	movs	r3, #67	; 0x43
 801e230:	6979      	ldr	r1, [r7, #20]
 801e232:	f7fe fdfd 	bl	801ce30 <udp_sendto_if>
 801e236:	4603      	mov	r3, r0
 801e238:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801e23a:	6978      	ldr	r0, [r7, #20]
 801e23c:	f7f7 fc1a 	bl	8015a74 <pbuf_free>
 801e240:	e001      	b.n	801e246 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801e242:	23ff      	movs	r3, #255	; 0xff
 801e244:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801e246:	69bb      	ldr	r3, [r7, #24]
 801e248:	799b      	ldrb	r3, [r3, #6]
 801e24a:	2bff      	cmp	r3, #255	; 0xff
 801e24c:	d005      	beq.n	801e25a <dhcp_renew+0xe2>
    dhcp->tries++;
 801e24e:	69bb      	ldr	r3, [r7, #24]
 801e250:	799b      	ldrb	r3, [r3, #6]
 801e252:	3301      	adds	r3, #1
 801e254:	b2da      	uxtb	r2, r3
 801e256:	69bb      	ldr	r3, [r7, #24]
 801e258:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801e25a:	69bb      	ldr	r3, [r7, #24]
 801e25c:	799b      	ldrb	r3, [r3, #6]
 801e25e:	2b09      	cmp	r3, #9
 801e260:	d80a      	bhi.n	801e278 <dhcp_renew+0x100>
 801e262:	69bb      	ldr	r3, [r7, #24]
 801e264:	799b      	ldrb	r3, [r3, #6]
 801e266:	b29b      	uxth	r3, r3
 801e268:	461a      	mov	r2, r3
 801e26a:	0152      	lsls	r2, r2, #5
 801e26c:	1ad2      	subs	r2, r2, r3
 801e26e:	0092      	lsls	r2, r2, #2
 801e270:	4413      	add	r3, r2
 801e272:	011b      	lsls	r3, r3, #4
 801e274:	b29b      	uxth	r3, r3
 801e276:	e001      	b.n	801e27c <dhcp_renew+0x104>
 801e278:	f644 6320 	movw	r3, #20000	; 0x4e20
 801e27c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801e27e:	89fb      	ldrh	r3, [r7, #14]
 801e280:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801e284:	4a09      	ldr	r2, [pc, #36]	; (801e2ac <dhcp_renew+0x134>)
 801e286:	fb82 1203 	smull	r1, r2, r2, r3
 801e28a:	1152      	asrs	r2, r2, #5
 801e28c:	17db      	asrs	r3, r3, #31
 801e28e:	1ad3      	subs	r3, r2, r3
 801e290:	b29a      	uxth	r2, r3
 801e292:	69bb      	ldr	r3, [r7, #24]
 801e294:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801e296:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801e29a:	4618      	mov	r0, r3
 801e29c:	3720      	adds	r7, #32
 801e29e:	46bd      	mov	sp, r7
 801e2a0:	bd80      	pop	{r7, pc}
 801e2a2:	bf00      	nop
 801e2a4:	24000038 	.word	0x24000038
 801e2a8:	24004fcc 	.word	0x24004fcc
 801e2ac:	10624dd3 	.word	0x10624dd3

0801e2b0 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801e2b0:	b580      	push	{r7, lr}
 801e2b2:	b08a      	sub	sp, #40	; 0x28
 801e2b4:	af02      	add	r7, sp, #8
 801e2b6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801e2b8:	687b      	ldr	r3, [r7, #4]
 801e2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e2bc:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801e2be:	2104      	movs	r1, #4
 801e2c0:	69b8      	ldr	r0, [r7, #24]
 801e2c2:	f000 f9e1 	bl	801e688 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801e2c6:	f107 030c 	add.w	r3, r7, #12
 801e2ca:	2203      	movs	r2, #3
 801e2cc:	69b9      	ldr	r1, [r7, #24]
 801e2ce:	6878      	ldr	r0, [r7, #4]
 801e2d0:	f000 fe96 	bl	801f000 <dhcp_create_msg>
 801e2d4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801e2d6:	697b      	ldr	r3, [r7, #20]
 801e2d8:	2b00      	cmp	r3, #0
 801e2da:	d04c      	beq.n	801e376 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801e2dc:	697b      	ldr	r3, [r7, #20]
 801e2de:	685b      	ldr	r3, [r3, #4]
 801e2e0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801e2e2:	89b8      	ldrh	r0, [r7, #12]
 801e2e4:	693b      	ldr	r3, [r7, #16]
 801e2e6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e2ea:	2302      	movs	r3, #2
 801e2ec:	2239      	movs	r2, #57	; 0x39
 801e2ee:	f000 f9e5 	bl	801e6bc <dhcp_option>
 801e2f2:	4603      	mov	r3, r0
 801e2f4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801e2f6:	89b8      	ldrh	r0, [r7, #12]
 801e2f8:	693b      	ldr	r3, [r7, #16]
 801e2fa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e2fe:	687b      	ldr	r3, [r7, #4]
 801e300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e302:	461a      	mov	r2, r3
 801e304:	f000 fa34 	bl	801e770 <dhcp_option_short>
 801e308:	4603      	mov	r3, r0
 801e30a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801e30c:	89b8      	ldrh	r0, [r7, #12]
 801e30e:	693b      	ldr	r3, [r7, #16]
 801e310:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e314:	2304      	movs	r3, #4
 801e316:	2237      	movs	r2, #55	; 0x37
 801e318:	f000 f9d0 	bl	801e6bc <dhcp_option>
 801e31c:	4603      	mov	r3, r0
 801e31e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801e320:	2300      	movs	r3, #0
 801e322:	77bb      	strb	r3, [r7, #30]
 801e324:	e00e      	b.n	801e344 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801e326:	89b8      	ldrh	r0, [r7, #12]
 801e328:	693b      	ldr	r3, [r7, #16]
 801e32a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e32e:	7fbb      	ldrb	r3, [r7, #30]
 801e330:	4a29      	ldr	r2, [pc, #164]	; (801e3d8 <dhcp_rebind+0x128>)
 801e332:	5cd3      	ldrb	r3, [r2, r3]
 801e334:	461a      	mov	r2, r3
 801e336:	f000 f9f5 	bl	801e724 <dhcp_option_byte>
 801e33a:	4603      	mov	r3, r0
 801e33c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801e33e:	7fbb      	ldrb	r3, [r7, #30]
 801e340:	3301      	adds	r3, #1
 801e342:	77bb      	strb	r3, [r7, #30]
 801e344:	7fbb      	ldrb	r3, [r7, #30]
 801e346:	2b03      	cmp	r3, #3
 801e348:	d9ed      	bls.n	801e326 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801e34a:	89b8      	ldrh	r0, [r7, #12]
 801e34c:	693b      	ldr	r3, [r7, #16]
 801e34e:	33f0      	adds	r3, #240	; 0xf0
 801e350:	697a      	ldr	r2, [r7, #20]
 801e352:	4619      	mov	r1, r3
 801e354:	f000 ff2a 	bl	801f1ac <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801e358:	4b20      	ldr	r3, [pc, #128]	; (801e3dc <dhcp_rebind+0x12c>)
 801e35a:	6818      	ldr	r0, [r3, #0]
 801e35c:	687b      	ldr	r3, [r7, #4]
 801e35e:	9300      	str	r3, [sp, #0]
 801e360:	2343      	movs	r3, #67	; 0x43
 801e362:	4a1f      	ldr	r2, [pc, #124]	; (801e3e0 <dhcp_rebind+0x130>)
 801e364:	6979      	ldr	r1, [r7, #20]
 801e366:	f7fe fd63 	bl	801ce30 <udp_sendto_if>
 801e36a:	4603      	mov	r3, r0
 801e36c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801e36e:	6978      	ldr	r0, [r7, #20]
 801e370:	f7f7 fb80 	bl	8015a74 <pbuf_free>
 801e374:	e001      	b.n	801e37a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801e376:	23ff      	movs	r3, #255	; 0xff
 801e378:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801e37a:	69bb      	ldr	r3, [r7, #24]
 801e37c:	799b      	ldrb	r3, [r3, #6]
 801e37e:	2bff      	cmp	r3, #255	; 0xff
 801e380:	d005      	beq.n	801e38e <dhcp_rebind+0xde>
    dhcp->tries++;
 801e382:	69bb      	ldr	r3, [r7, #24]
 801e384:	799b      	ldrb	r3, [r3, #6]
 801e386:	3301      	adds	r3, #1
 801e388:	b2da      	uxtb	r2, r3
 801e38a:	69bb      	ldr	r3, [r7, #24]
 801e38c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801e38e:	69bb      	ldr	r3, [r7, #24]
 801e390:	799b      	ldrb	r3, [r3, #6]
 801e392:	2b09      	cmp	r3, #9
 801e394:	d80a      	bhi.n	801e3ac <dhcp_rebind+0xfc>
 801e396:	69bb      	ldr	r3, [r7, #24]
 801e398:	799b      	ldrb	r3, [r3, #6]
 801e39a:	b29b      	uxth	r3, r3
 801e39c:	461a      	mov	r2, r3
 801e39e:	0152      	lsls	r2, r2, #5
 801e3a0:	1ad2      	subs	r2, r2, r3
 801e3a2:	0092      	lsls	r2, r2, #2
 801e3a4:	4413      	add	r3, r2
 801e3a6:	00db      	lsls	r3, r3, #3
 801e3a8:	b29b      	uxth	r3, r3
 801e3aa:	e001      	b.n	801e3b0 <dhcp_rebind+0x100>
 801e3ac:	f242 7310 	movw	r3, #10000	; 0x2710
 801e3b0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801e3b2:	89fb      	ldrh	r3, [r7, #14]
 801e3b4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801e3b8:	4a0a      	ldr	r2, [pc, #40]	; (801e3e4 <dhcp_rebind+0x134>)
 801e3ba:	fb82 1203 	smull	r1, r2, r2, r3
 801e3be:	1152      	asrs	r2, r2, #5
 801e3c0:	17db      	asrs	r3, r3, #31
 801e3c2:	1ad3      	subs	r3, r2, r3
 801e3c4:	b29a      	uxth	r2, r3
 801e3c6:	69bb      	ldr	r3, [r7, #24]
 801e3c8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801e3ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801e3ce:	4618      	mov	r0, r3
 801e3d0:	3720      	adds	r7, #32
 801e3d2:	46bd      	mov	sp, r7
 801e3d4:	bd80      	pop	{r7, pc}
 801e3d6:	bf00      	nop
 801e3d8:	24000038 	.word	0x24000038
 801e3dc:	24004fcc 	.word	0x24004fcc
 801e3e0:	0802ec64 	.word	0x0802ec64
 801e3e4:	10624dd3 	.word	0x10624dd3

0801e3e8 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801e3e8:	b5b0      	push	{r4, r5, r7, lr}
 801e3ea:	b08a      	sub	sp, #40	; 0x28
 801e3ec:	af02      	add	r7, sp, #8
 801e3ee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801e3f0:	687b      	ldr	r3, [r7, #4]
 801e3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e3f4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801e3f6:	2103      	movs	r1, #3
 801e3f8:	69b8      	ldr	r0, [r7, #24]
 801e3fa:	f000 f945 	bl	801e688 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801e3fe:	f107 030c 	add.w	r3, r7, #12
 801e402:	2203      	movs	r2, #3
 801e404:	69b9      	ldr	r1, [r7, #24]
 801e406:	6878      	ldr	r0, [r7, #4]
 801e408:	f000 fdfa 	bl	801f000 <dhcp_create_msg>
 801e40c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801e40e:	697b      	ldr	r3, [r7, #20]
 801e410:	2b00      	cmp	r3, #0
 801e412:	d066      	beq.n	801e4e2 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801e414:	697b      	ldr	r3, [r7, #20]
 801e416:	685b      	ldr	r3, [r3, #4]
 801e418:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801e41a:	89b8      	ldrh	r0, [r7, #12]
 801e41c:	693b      	ldr	r3, [r7, #16]
 801e41e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e422:	2302      	movs	r3, #2
 801e424:	2239      	movs	r2, #57	; 0x39
 801e426:	f000 f949 	bl	801e6bc <dhcp_option>
 801e42a:	4603      	mov	r3, r0
 801e42c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801e42e:	89b8      	ldrh	r0, [r7, #12]
 801e430:	693b      	ldr	r3, [r7, #16]
 801e432:	33f0      	adds	r3, #240	; 0xf0
 801e434:	f44f 7210 	mov.w	r2, #576	; 0x240
 801e438:	4619      	mov	r1, r3
 801e43a:	f000 f999 	bl	801e770 <dhcp_option_short>
 801e43e:	4603      	mov	r3, r0
 801e440:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801e442:	89b8      	ldrh	r0, [r7, #12]
 801e444:	693b      	ldr	r3, [r7, #16]
 801e446:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e44a:	2304      	movs	r3, #4
 801e44c:	2232      	movs	r2, #50	; 0x32
 801e44e:	f000 f935 	bl	801e6bc <dhcp_option>
 801e452:	4603      	mov	r3, r0
 801e454:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801e456:	89bc      	ldrh	r4, [r7, #12]
 801e458:	693b      	ldr	r3, [r7, #16]
 801e45a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801e45e:	69bb      	ldr	r3, [r7, #24]
 801e460:	69db      	ldr	r3, [r3, #28]
 801e462:	4618      	mov	r0, r3
 801e464:	f7f4 fe49 	bl	80130fa <lwip_htonl>
 801e468:	4603      	mov	r3, r0
 801e46a:	461a      	mov	r2, r3
 801e46c:	4629      	mov	r1, r5
 801e46e:	4620      	mov	r0, r4
 801e470:	f000 f9b0 	bl	801e7d4 <dhcp_option_long>
 801e474:	4603      	mov	r3, r0
 801e476:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801e478:	89b8      	ldrh	r0, [r7, #12]
 801e47a:	693b      	ldr	r3, [r7, #16]
 801e47c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e480:	2304      	movs	r3, #4
 801e482:	2237      	movs	r2, #55	; 0x37
 801e484:	f000 f91a 	bl	801e6bc <dhcp_option>
 801e488:	4603      	mov	r3, r0
 801e48a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801e48c:	2300      	movs	r3, #0
 801e48e:	77bb      	strb	r3, [r7, #30]
 801e490:	e00e      	b.n	801e4b0 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801e492:	89b8      	ldrh	r0, [r7, #12]
 801e494:	693b      	ldr	r3, [r7, #16]
 801e496:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e49a:	7fbb      	ldrb	r3, [r7, #30]
 801e49c:	4a29      	ldr	r2, [pc, #164]	; (801e544 <dhcp_reboot+0x15c>)
 801e49e:	5cd3      	ldrb	r3, [r2, r3]
 801e4a0:	461a      	mov	r2, r3
 801e4a2:	f000 f93f 	bl	801e724 <dhcp_option_byte>
 801e4a6:	4603      	mov	r3, r0
 801e4a8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801e4aa:	7fbb      	ldrb	r3, [r7, #30]
 801e4ac:	3301      	adds	r3, #1
 801e4ae:	77bb      	strb	r3, [r7, #30]
 801e4b0:	7fbb      	ldrb	r3, [r7, #30]
 801e4b2:	2b03      	cmp	r3, #3
 801e4b4:	d9ed      	bls.n	801e492 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801e4b6:	89b8      	ldrh	r0, [r7, #12]
 801e4b8:	693b      	ldr	r3, [r7, #16]
 801e4ba:	33f0      	adds	r3, #240	; 0xf0
 801e4bc:	697a      	ldr	r2, [r7, #20]
 801e4be:	4619      	mov	r1, r3
 801e4c0:	f000 fe74 	bl	801f1ac <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801e4c4:	4b20      	ldr	r3, [pc, #128]	; (801e548 <dhcp_reboot+0x160>)
 801e4c6:	6818      	ldr	r0, [r3, #0]
 801e4c8:	687b      	ldr	r3, [r7, #4]
 801e4ca:	9300      	str	r3, [sp, #0]
 801e4cc:	2343      	movs	r3, #67	; 0x43
 801e4ce:	4a1f      	ldr	r2, [pc, #124]	; (801e54c <dhcp_reboot+0x164>)
 801e4d0:	6979      	ldr	r1, [r7, #20]
 801e4d2:	f7fe fcad 	bl	801ce30 <udp_sendto_if>
 801e4d6:	4603      	mov	r3, r0
 801e4d8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801e4da:	6978      	ldr	r0, [r7, #20]
 801e4dc:	f7f7 faca 	bl	8015a74 <pbuf_free>
 801e4e0:	e001      	b.n	801e4e6 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801e4e2:	23ff      	movs	r3, #255	; 0xff
 801e4e4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801e4e6:	69bb      	ldr	r3, [r7, #24]
 801e4e8:	799b      	ldrb	r3, [r3, #6]
 801e4ea:	2bff      	cmp	r3, #255	; 0xff
 801e4ec:	d005      	beq.n	801e4fa <dhcp_reboot+0x112>
    dhcp->tries++;
 801e4ee:	69bb      	ldr	r3, [r7, #24]
 801e4f0:	799b      	ldrb	r3, [r3, #6]
 801e4f2:	3301      	adds	r3, #1
 801e4f4:	b2da      	uxtb	r2, r3
 801e4f6:	69bb      	ldr	r3, [r7, #24]
 801e4f8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801e4fa:	69bb      	ldr	r3, [r7, #24]
 801e4fc:	799b      	ldrb	r3, [r3, #6]
 801e4fe:	2b09      	cmp	r3, #9
 801e500:	d80a      	bhi.n	801e518 <dhcp_reboot+0x130>
 801e502:	69bb      	ldr	r3, [r7, #24]
 801e504:	799b      	ldrb	r3, [r3, #6]
 801e506:	b29b      	uxth	r3, r3
 801e508:	461a      	mov	r2, r3
 801e50a:	0152      	lsls	r2, r2, #5
 801e50c:	1ad2      	subs	r2, r2, r3
 801e50e:	0092      	lsls	r2, r2, #2
 801e510:	4413      	add	r3, r2
 801e512:	00db      	lsls	r3, r3, #3
 801e514:	b29b      	uxth	r3, r3
 801e516:	e001      	b.n	801e51c <dhcp_reboot+0x134>
 801e518:	f242 7310 	movw	r3, #10000	; 0x2710
 801e51c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801e51e:	89fb      	ldrh	r3, [r7, #14]
 801e520:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801e524:	4a0a      	ldr	r2, [pc, #40]	; (801e550 <dhcp_reboot+0x168>)
 801e526:	fb82 1203 	smull	r1, r2, r2, r3
 801e52a:	1152      	asrs	r2, r2, #5
 801e52c:	17db      	asrs	r3, r3, #31
 801e52e:	1ad3      	subs	r3, r2, r3
 801e530:	b29a      	uxth	r2, r3
 801e532:	69bb      	ldr	r3, [r7, #24]
 801e534:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801e536:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801e53a:	4618      	mov	r0, r3
 801e53c:	3720      	adds	r7, #32
 801e53e:	46bd      	mov	sp, r7
 801e540:	bdb0      	pop	{r4, r5, r7, pc}
 801e542:	bf00      	nop
 801e544:	24000038 	.word	0x24000038
 801e548:	24004fcc 	.word	0x24004fcc
 801e54c:	0802ec64 	.word	0x0802ec64
 801e550:	10624dd3 	.word	0x10624dd3

0801e554 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801e554:	b5b0      	push	{r4, r5, r7, lr}
 801e556:	b08a      	sub	sp, #40	; 0x28
 801e558:	af02      	add	r7, sp, #8
 801e55a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801e55c:	687b      	ldr	r3, [r7, #4]
 801e55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e560:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801e562:	69fb      	ldr	r3, [r7, #28]
 801e564:	2b00      	cmp	r3, #0
 801e566:	f000 8084 	beq.w	801e672 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801e56a:	69fb      	ldr	r3, [r7, #28]
 801e56c:	795b      	ldrb	r3, [r3, #5]
 801e56e:	2b00      	cmp	r3, #0
 801e570:	f000 8081 	beq.w	801e676 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801e574:	69fb      	ldr	r3, [r7, #28]
 801e576:	699b      	ldr	r3, [r3, #24]
 801e578:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801e57a:	69fb      	ldr	r3, [r7, #28]
 801e57c:	2200      	movs	r2, #0
 801e57e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801e580:	69fb      	ldr	r3, [r7, #28]
 801e582:	2200      	movs	r2, #0
 801e584:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801e586:	69fb      	ldr	r3, [r7, #28]
 801e588:	2200      	movs	r2, #0
 801e58a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801e58c:	69fb      	ldr	r3, [r7, #28]
 801e58e:	2200      	movs	r2, #0
 801e590:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801e592:	69fb      	ldr	r3, [r7, #28]
 801e594:	2200      	movs	r2, #0
 801e596:	631a      	str	r2, [r3, #48]	; 0x30
 801e598:	69fb      	ldr	r3, [r7, #28]
 801e59a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801e59c:	69fb      	ldr	r3, [r7, #28]
 801e59e:	62da      	str	r2, [r3, #44]	; 0x2c
 801e5a0:	69fb      	ldr	r3, [r7, #28]
 801e5a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e5a4:	69fb      	ldr	r3, [r7, #28]
 801e5a6:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801e5a8:	69fb      	ldr	r3, [r7, #28]
 801e5aa:	2200      	movs	r2, #0
 801e5ac:	829a      	strh	r2, [r3, #20]
 801e5ae:	69fb      	ldr	r3, [r7, #28]
 801e5b0:	8a9a      	ldrh	r2, [r3, #20]
 801e5b2:	69fb      	ldr	r3, [r7, #28]
 801e5b4:	825a      	strh	r2, [r3, #18]
 801e5b6:	69fb      	ldr	r3, [r7, #28]
 801e5b8:	8a5a      	ldrh	r2, [r3, #18]
 801e5ba:	69fb      	ldr	r3, [r7, #28]
 801e5bc:	821a      	strh	r2, [r3, #16]
 801e5be:	69fb      	ldr	r3, [r7, #28]
 801e5c0:	8a1a      	ldrh	r2, [r3, #16]
 801e5c2:	69fb      	ldr	r3, [r7, #28]
 801e5c4:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801e5c6:	6878      	ldr	r0, [r7, #4]
 801e5c8:	f000 fe1e 	bl	801f208 <dhcp_supplied_address>
 801e5cc:	4603      	mov	r3, r0
 801e5ce:	2b00      	cmp	r3, #0
 801e5d0:	d03b      	beq.n	801e64a <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801e5d2:	f107 030e 	add.w	r3, r7, #14
 801e5d6:	2207      	movs	r2, #7
 801e5d8:	69f9      	ldr	r1, [r7, #28]
 801e5da:	6878      	ldr	r0, [r7, #4]
 801e5dc:	f000 fd10 	bl	801f000 <dhcp_create_msg>
 801e5e0:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801e5e2:	69bb      	ldr	r3, [r7, #24]
 801e5e4:	2b00      	cmp	r3, #0
 801e5e6:	d030      	beq.n	801e64a <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801e5e8:	69bb      	ldr	r3, [r7, #24]
 801e5ea:	685b      	ldr	r3, [r3, #4]
 801e5ec:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801e5ee:	89f8      	ldrh	r0, [r7, #14]
 801e5f0:	697b      	ldr	r3, [r7, #20]
 801e5f2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e5f6:	2304      	movs	r3, #4
 801e5f8:	2236      	movs	r2, #54	; 0x36
 801e5fa:	f000 f85f 	bl	801e6bc <dhcp_option>
 801e5fe:	4603      	mov	r3, r0
 801e600:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801e602:	89fc      	ldrh	r4, [r7, #14]
 801e604:	697b      	ldr	r3, [r7, #20]
 801e606:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801e60a:	693b      	ldr	r3, [r7, #16]
 801e60c:	4618      	mov	r0, r3
 801e60e:	f7f4 fd74 	bl	80130fa <lwip_htonl>
 801e612:	4603      	mov	r3, r0
 801e614:	461a      	mov	r2, r3
 801e616:	4629      	mov	r1, r5
 801e618:	4620      	mov	r0, r4
 801e61a:	f000 f8db 	bl	801e7d4 <dhcp_option_long>
 801e61e:	4603      	mov	r3, r0
 801e620:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801e622:	89f8      	ldrh	r0, [r7, #14]
 801e624:	697b      	ldr	r3, [r7, #20]
 801e626:	33f0      	adds	r3, #240	; 0xf0
 801e628:	69ba      	ldr	r2, [r7, #24]
 801e62a:	4619      	mov	r1, r3
 801e62c:	f000 fdbe 	bl	801f1ac <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801e630:	4b13      	ldr	r3, [pc, #76]	; (801e680 <dhcp_release_and_stop+0x12c>)
 801e632:	6818      	ldr	r0, [r3, #0]
 801e634:	f107 0210 	add.w	r2, r7, #16
 801e638:	687b      	ldr	r3, [r7, #4]
 801e63a:	9300      	str	r3, [sp, #0]
 801e63c:	2343      	movs	r3, #67	; 0x43
 801e63e:	69b9      	ldr	r1, [r7, #24]
 801e640:	f7fe fbf6 	bl	801ce30 <udp_sendto_if>
      pbuf_free(p_out);
 801e644:	69b8      	ldr	r0, [r7, #24]
 801e646:	f7f7 fa15 	bl	8015a74 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801e64a:	4b0e      	ldr	r3, [pc, #56]	; (801e684 <dhcp_release_and_stop+0x130>)
 801e64c:	4a0d      	ldr	r2, [pc, #52]	; (801e684 <dhcp_release_and_stop+0x130>)
 801e64e:	490d      	ldr	r1, [pc, #52]	; (801e684 <dhcp_release_and_stop+0x130>)
 801e650:	6878      	ldr	r0, [r7, #4]
 801e652:	f7f6 fccf 	bl	8014ff4 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801e656:	2100      	movs	r1, #0
 801e658:	69f8      	ldr	r0, [r7, #28]
 801e65a:	f000 f815 	bl	801e688 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801e65e:	69fb      	ldr	r3, [r7, #28]
 801e660:	791b      	ldrb	r3, [r3, #4]
 801e662:	2b00      	cmp	r3, #0
 801e664:	d008      	beq.n	801e678 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801e666:	f7fe ff63 	bl	801d530 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801e66a:	69fb      	ldr	r3, [r7, #28]
 801e66c:	2200      	movs	r2, #0
 801e66e:	711a      	strb	r2, [r3, #4]
 801e670:	e002      	b.n	801e678 <dhcp_release_and_stop+0x124>
    return;
 801e672:	bf00      	nop
 801e674:	e000      	b.n	801e678 <dhcp_release_and_stop+0x124>
    return;
 801e676:	bf00      	nop
  }
}
 801e678:	3720      	adds	r7, #32
 801e67a:	46bd      	mov	sp, r7
 801e67c:	bdb0      	pop	{r4, r5, r7, pc}
 801e67e:	bf00      	nop
 801e680:	24004fcc 	.word	0x24004fcc
 801e684:	0802ec60 	.word	0x0802ec60

0801e688 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801e688:	b480      	push	{r7}
 801e68a:	b083      	sub	sp, #12
 801e68c:	af00      	add	r7, sp, #0
 801e68e:	6078      	str	r0, [r7, #4]
 801e690:	460b      	mov	r3, r1
 801e692:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801e694:	687b      	ldr	r3, [r7, #4]
 801e696:	795b      	ldrb	r3, [r3, #5]
 801e698:	78fa      	ldrb	r2, [r7, #3]
 801e69a:	429a      	cmp	r2, r3
 801e69c:	d008      	beq.n	801e6b0 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801e69e:	687b      	ldr	r3, [r7, #4]
 801e6a0:	78fa      	ldrb	r2, [r7, #3]
 801e6a2:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801e6a4:	687b      	ldr	r3, [r7, #4]
 801e6a6:	2200      	movs	r2, #0
 801e6a8:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801e6aa:	687b      	ldr	r3, [r7, #4]
 801e6ac:	2200      	movs	r2, #0
 801e6ae:	811a      	strh	r2, [r3, #8]
  }
}
 801e6b0:	bf00      	nop
 801e6b2:	370c      	adds	r7, #12
 801e6b4:	46bd      	mov	sp, r7
 801e6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6ba:	4770      	bx	lr

0801e6bc <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801e6bc:	b580      	push	{r7, lr}
 801e6be:	b082      	sub	sp, #8
 801e6c0:	af00      	add	r7, sp, #0
 801e6c2:	6039      	str	r1, [r7, #0]
 801e6c4:	4611      	mov	r1, r2
 801e6c6:	461a      	mov	r2, r3
 801e6c8:	4603      	mov	r3, r0
 801e6ca:	80fb      	strh	r3, [r7, #6]
 801e6cc:	460b      	mov	r3, r1
 801e6ce:	717b      	strb	r3, [r7, #5]
 801e6d0:	4613      	mov	r3, r2
 801e6d2:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801e6d4:	88fa      	ldrh	r2, [r7, #6]
 801e6d6:	793b      	ldrb	r3, [r7, #4]
 801e6d8:	4413      	add	r3, r2
 801e6da:	3302      	adds	r3, #2
 801e6dc:	2b44      	cmp	r3, #68	; 0x44
 801e6de:	d906      	bls.n	801e6ee <dhcp_option+0x32>
 801e6e0:	4b0d      	ldr	r3, [pc, #52]	; (801e718 <dhcp_option+0x5c>)
 801e6e2:	f240 529a 	movw	r2, #1434	; 0x59a
 801e6e6:	490d      	ldr	r1, [pc, #52]	; (801e71c <dhcp_option+0x60>)
 801e6e8:	480d      	ldr	r0, [pc, #52]	; (801e720 <dhcp_option+0x64>)
 801e6ea:	f008 fbf3 	bl	8026ed4 <iprintf>
  options[options_out_len++] = option_type;
 801e6ee:	88fb      	ldrh	r3, [r7, #6]
 801e6f0:	1c5a      	adds	r2, r3, #1
 801e6f2:	80fa      	strh	r2, [r7, #6]
 801e6f4:	461a      	mov	r2, r3
 801e6f6:	683b      	ldr	r3, [r7, #0]
 801e6f8:	4413      	add	r3, r2
 801e6fa:	797a      	ldrb	r2, [r7, #5]
 801e6fc:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801e6fe:	88fb      	ldrh	r3, [r7, #6]
 801e700:	1c5a      	adds	r2, r3, #1
 801e702:	80fa      	strh	r2, [r7, #6]
 801e704:	461a      	mov	r2, r3
 801e706:	683b      	ldr	r3, [r7, #0]
 801e708:	4413      	add	r3, r2
 801e70a:	793a      	ldrb	r2, [r7, #4]
 801e70c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801e70e:	88fb      	ldrh	r3, [r7, #6]
}
 801e710:	4618      	mov	r0, r3
 801e712:	3708      	adds	r7, #8
 801e714:	46bd      	mov	sp, r7
 801e716:	bd80      	pop	{r7, pc}
 801e718:	0802d868 	.word	0x0802d868
 801e71c:	0802d9fc 	.word	0x0802d9fc
 801e720:	0802d8c8 	.word	0x0802d8c8

0801e724 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801e724:	b580      	push	{r7, lr}
 801e726:	b082      	sub	sp, #8
 801e728:	af00      	add	r7, sp, #0
 801e72a:	4603      	mov	r3, r0
 801e72c:	6039      	str	r1, [r7, #0]
 801e72e:	80fb      	strh	r3, [r7, #6]
 801e730:	4613      	mov	r3, r2
 801e732:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801e734:	88fb      	ldrh	r3, [r7, #6]
 801e736:	2b43      	cmp	r3, #67	; 0x43
 801e738:	d906      	bls.n	801e748 <dhcp_option_byte+0x24>
 801e73a:	4b0a      	ldr	r3, [pc, #40]	; (801e764 <dhcp_option_byte+0x40>)
 801e73c:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801e740:	4909      	ldr	r1, [pc, #36]	; (801e768 <dhcp_option_byte+0x44>)
 801e742:	480a      	ldr	r0, [pc, #40]	; (801e76c <dhcp_option_byte+0x48>)
 801e744:	f008 fbc6 	bl	8026ed4 <iprintf>
  options[options_out_len++] = value;
 801e748:	88fb      	ldrh	r3, [r7, #6]
 801e74a:	1c5a      	adds	r2, r3, #1
 801e74c:	80fa      	strh	r2, [r7, #6]
 801e74e:	461a      	mov	r2, r3
 801e750:	683b      	ldr	r3, [r7, #0]
 801e752:	4413      	add	r3, r2
 801e754:	797a      	ldrb	r2, [r7, #5]
 801e756:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801e758:	88fb      	ldrh	r3, [r7, #6]
}
 801e75a:	4618      	mov	r0, r3
 801e75c:	3708      	adds	r7, #8
 801e75e:	46bd      	mov	sp, r7
 801e760:	bd80      	pop	{r7, pc}
 801e762:	bf00      	nop
 801e764:	0802d868 	.word	0x0802d868
 801e768:	0802da40 	.word	0x0802da40
 801e76c:	0802d8c8 	.word	0x0802d8c8

0801e770 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801e770:	b580      	push	{r7, lr}
 801e772:	b082      	sub	sp, #8
 801e774:	af00      	add	r7, sp, #0
 801e776:	4603      	mov	r3, r0
 801e778:	6039      	str	r1, [r7, #0]
 801e77a:	80fb      	strh	r3, [r7, #6]
 801e77c:	4613      	mov	r3, r2
 801e77e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801e780:	88fb      	ldrh	r3, [r7, #6]
 801e782:	3302      	adds	r3, #2
 801e784:	2b44      	cmp	r3, #68	; 0x44
 801e786:	d906      	bls.n	801e796 <dhcp_option_short+0x26>
 801e788:	4b0f      	ldr	r3, [pc, #60]	; (801e7c8 <dhcp_option_short+0x58>)
 801e78a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801e78e:	490f      	ldr	r1, [pc, #60]	; (801e7cc <dhcp_option_short+0x5c>)
 801e790:	480f      	ldr	r0, [pc, #60]	; (801e7d0 <dhcp_option_short+0x60>)
 801e792:	f008 fb9f 	bl	8026ed4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801e796:	88bb      	ldrh	r3, [r7, #4]
 801e798:	0a1b      	lsrs	r3, r3, #8
 801e79a:	b29a      	uxth	r2, r3
 801e79c:	88fb      	ldrh	r3, [r7, #6]
 801e79e:	1c59      	adds	r1, r3, #1
 801e7a0:	80f9      	strh	r1, [r7, #6]
 801e7a2:	4619      	mov	r1, r3
 801e7a4:	683b      	ldr	r3, [r7, #0]
 801e7a6:	440b      	add	r3, r1
 801e7a8:	b2d2      	uxtb	r2, r2
 801e7aa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801e7ac:	88fb      	ldrh	r3, [r7, #6]
 801e7ae:	1c5a      	adds	r2, r3, #1
 801e7b0:	80fa      	strh	r2, [r7, #6]
 801e7b2:	461a      	mov	r2, r3
 801e7b4:	683b      	ldr	r3, [r7, #0]
 801e7b6:	4413      	add	r3, r2
 801e7b8:	88ba      	ldrh	r2, [r7, #4]
 801e7ba:	b2d2      	uxtb	r2, r2
 801e7bc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801e7be:	88fb      	ldrh	r3, [r7, #6]
}
 801e7c0:	4618      	mov	r0, r3
 801e7c2:	3708      	adds	r7, #8
 801e7c4:	46bd      	mov	sp, r7
 801e7c6:	bd80      	pop	{r7, pc}
 801e7c8:	0802d868 	.word	0x0802d868
 801e7cc:	0802da78 	.word	0x0802da78
 801e7d0:	0802d8c8 	.word	0x0802d8c8

0801e7d4 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801e7d4:	b580      	push	{r7, lr}
 801e7d6:	b084      	sub	sp, #16
 801e7d8:	af00      	add	r7, sp, #0
 801e7da:	4603      	mov	r3, r0
 801e7dc:	60b9      	str	r1, [r7, #8]
 801e7de:	607a      	str	r2, [r7, #4]
 801e7e0:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801e7e2:	89fb      	ldrh	r3, [r7, #14]
 801e7e4:	3304      	adds	r3, #4
 801e7e6:	2b44      	cmp	r3, #68	; 0x44
 801e7e8:	d906      	bls.n	801e7f8 <dhcp_option_long+0x24>
 801e7ea:	4b19      	ldr	r3, [pc, #100]	; (801e850 <dhcp_option_long+0x7c>)
 801e7ec:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801e7f0:	4918      	ldr	r1, [pc, #96]	; (801e854 <dhcp_option_long+0x80>)
 801e7f2:	4819      	ldr	r0, [pc, #100]	; (801e858 <dhcp_option_long+0x84>)
 801e7f4:	f008 fb6e 	bl	8026ed4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801e7f8:	687b      	ldr	r3, [r7, #4]
 801e7fa:	0e1a      	lsrs	r2, r3, #24
 801e7fc:	89fb      	ldrh	r3, [r7, #14]
 801e7fe:	1c59      	adds	r1, r3, #1
 801e800:	81f9      	strh	r1, [r7, #14]
 801e802:	4619      	mov	r1, r3
 801e804:	68bb      	ldr	r3, [r7, #8]
 801e806:	440b      	add	r3, r1
 801e808:	b2d2      	uxtb	r2, r2
 801e80a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801e80c:	687b      	ldr	r3, [r7, #4]
 801e80e:	0c1a      	lsrs	r2, r3, #16
 801e810:	89fb      	ldrh	r3, [r7, #14]
 801e812:	1c59      	adds	r1, r3, #1
 801e814:	81f9      	strh	r1, [r7, #14]
 801e816:	4619      	mov	r1, r3
 801e818:	68bb      	ldr	r3, [r7, #8]
 801e81a:	440b      	add	r3, r1
 801e81c:	b2d2      	uxtb	r2, r2
 801e81e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801e820:	687b      	ldr	r3, [r7, #4]
 801e822:	0a1a      	lsrs	r2, r3, #8
 801e824:	89fb      	ldrh	r3, [r7, #14]
 801e826:	1c59      	adds	r1, r3, #1
 801e828:	81f9      	strh	r1, [r7, #14]
 801e82a:	4619      	mov	r1, r3
 801e82c:	68bb      	ldr	r3, [r7, #8]
 801e82e:	440b      	add	r3, r1
 801e830:	b2d2      	uxtb	r2, r2
 801e832:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801e834:	89fb      	ldrh	r3, [r7, #14]
 801e836:	1c5a      	adds	r2, r3, #1
 801e838:	81fa      	strh	r2, [r7, #14]
 801e83a:	461a      	mov	r2, r3
 801e83c:	68bb      	ldr	r3, [r7, #8]
 801e83e:	4413      	add	r3, r2
 801e840:	687a      	ldr	r2, [r7, #4]
 801e842:	b2d2      	uxtb	r2, r2
 801e844:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801e846:	89fb      	ldrh	r3, [r7, #14]
}
 801e848:	4618      	mov	r0, r3
 801e84a:	3710      	adds	r7, #16
 801e84c:	46bd      	mov	sp, r7
 801e84e:	bd80      	pop	{r7, pc}
 801e850:	0802d868 	.word	0x0802d868
 801e854:	0802dab4 	.word	0x0802dab4
 801e858:	0802d8c8 	.word	0x0802d8c8

0801e85c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801e85c:	b580      	push	{r7, lr}
 801e85e:	b090      	sub	sp, #64	; 0x40
 801e860:	af00      	add	r7, sp, #0
 801e862:	6078      	str	r0, [r7, #4]
 801e864:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801e866:	2300      	movs	r3, #0
 801e868:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801e86a:	2300      	movs	r3, #0
 801e86c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801e86e:	220a      	movs	r2, #10
 801e870:	2100      	movs	r1, #0
 801e872:	48ba      	ldr	r0, [pc, #744]	; (801eb5c <dhcp_parse_reply+0x300>)
 801e874:	f007 fcd0 	bl	8026218 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801e878:	687b      	ldr	r3, [r7, #4]
 801e87a:	895b      	ldrh	r3, [r3, #10]
 801e87c:	2b2b      	cmp	r3, #43	; 0x2b
 801e87e:	d802      	bhi.n	801e886 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801e880:	f06f 0301 	mvn.w	r3, #1
 801e884:	e2e9      	b.n	801ee5a <dhcp_parse_reply+0x5fe>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801e886:	687b      	ldr	r3, [r7, #4]
 801e888:	685b      	ldr	r3, [r3, #4]
 801e88a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801e88c:	23f0      	movs	r3, #240	; 0xf0
 801e88e:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801e890:	687b      	ldr	r3, [r7, #4]
 801e892:	891b      	ldrh	r3, [r3, #8]
 801e894:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801e896:	687b      	ldr	r3, [r7, #4]
 801e898:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801e89a:	e00c      	b.n	801e8b6 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801e89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e89e:	895b      	ldrh	r3, [r3, #10]
 801e8a0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801e8a2:	1ad3      	subs	r3, r2, r3
 801e8a4:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801e8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e8a8:	895b      	ldrh	r3, [r3, #10]
 801e8aa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801e8ac:	1ad3      	subs	r3, r2, r3
 801e8ae:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 801e8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e8b2:	681b      	ldr	r3, [r3, #0]
 801e8b4:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801e8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e8b8:	2b00      	cmp	r3, #0
 801e8ba:	d004      	beq.n	801e8c6 <dhcp_parse_reply+0x6a>
 801e8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e8be:	895b      	ldrh	r3, [r3, #10]
 801e8c0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801e8c2:	429a      	cmp	r2, r3
 801e8c4:	d2ea      	bcs.n	801e89c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801e8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e8c8:	2b00      	cmp	r3, #0
 801e8ca:	d102      	bne.n	801e8d2 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801e8cc:	f06f 0301 	mvn.w	r3, #1
 801e8d0:	e2c3      	b.n	801ee5a <dhcp_parse_reply+0x5fe>
  }
  offset = options_idx;
 801e8d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801e8d4:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801e8d6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801e8d8:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 801e8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e8dc:	685b      	ldr	r3, [r3, #4]
 801e8de:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801e8e0:	e267      	b.n	801edb2 <dhcp_parse_reply+0x556>
    u8_t op = options[offset];
 801e8e2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801e8e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e8e6:	4413      	add	r3, r2
 801e8e8:	781b      	ldrb	r3, [r3, #0]
 801e8ea:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801e8ec:	2300      	movs	r3, #0
 801e8ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801e8f2:	f04f 33ff 	mov.w	r3, #4294967295
 801e8f6:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 801e8f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801e8fa:	3302      	adds	r3, #2
 801e8fc:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801e8fe:	8bfa      	ldrh	r2, [r7, #30]
 801e900:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801e902:	429a      	cmp	r2, r3
 801e904:	d202      	bcs.n	801e90c <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801e906:	f06f 0301 	mvn.w	r3, #1
 801e90a:	e2a6      	b.n	801ee5a <dhcp_parse_reply+0x5fe>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801e90c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801e90e:	3301      	adds	r3, #1
 801e910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e912:	8952      	ldrh	r2, [r2, #10]
 801e914:	4293      	cmp	r3, r2
 801e916:	da07      	bge.n	801e928 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 801e918:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801e91a:	3301      	adds	r3, #1
 801e91c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e91e:	4413      	add	r3, r2
 801e920:	781b      	ldrb	r3, [r3, #0]
 801e922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801e926:	e00b      	b.n	801e940 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801e928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e92a:	681b      	ldr	r3, [r3, #0]
 801e92c:	2b00      	cmp	r3, #0
 801e92e:	d004      	beq.n	801e93a <dhcp_parse_reply+0xde>
 801e930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e932:	681b      	ldr	r3, [r3, #0]
 801e934:	685b      	ldr	r3, [r3, #4]
 801e936:	781b      	ldrb	r3, [r3, #0]
 801e938:	e000      	b.n	801e93c <dhcp_parse_reply+0xe0>
 801e93a:	2300      	movs	r3, #0
 801e93c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801e940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e944:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 801e948:	7dfb      	ldrb	r3, [r7, #23]
 801e94a:	2b3b      	cmp	r3, #59	; 0x3b
 801e94c:	f200 815a 	bhi.w	801ec04 <dhcp_parse_reply+0x3a8>
 801e950:	a201      	add	r2, pc, #4	; (adr r2, 801e958 <dhcp_parse_reply+0xfc>)
 801e952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e956:	bf00      	nop
 801e958:	0801ea49 	.word	0x0801ea49
 801e95c:	0801ea59 	.word	0x0801ea59
 801e960:	0801ec05 	.word	0x0801ec05
 801e964:	0801ea7b 	.word	0x0801ea7b
 801e968:	0801ec05 	.word	0x0801ec05
 801e96c:	0801ec05 	.word	0x0801ec05
 801e970:	0801eaa7 	.word	0x0801eaa7
 801e974:	0801ec05 	.word	0x0801ec05
 801e978:	0801ec05 	.word	0x0801ec05
 801e97c:	0801ec05 	.word	0x0801ec05
 801e980:	0801ec05 	.word	0x0801ec05
 801e984:	0801ec05 	.word	0x0801ec05
 801e988:	0801ec05 	.word	0x0801ec05
 801e98c:	0801ec05 	.word	0x0801ec05
 801e990:	0801ec05 	.word	0x0801ec05
 801e994:	0801ec05 	.word	0x0801ec05
 801e998:	0801ec05 	.word	0x0801ec05
 801e99c:	0801ec05 	.word	0x0801ec05
 801e9a0:	0801ec05 	.word	0x0801ec05
 801e9a4:	0801ec05 	.word	0x0801ec05
 801e9a8:	0801ec05 	.word	0x0801ec05
 801e9ac:	0801ec05 	.word	0x0801ec05
 801e9b0:	0801ec05 	.word	0x0801ec05
 801e9b4:	0801ec05 	.word	0x0801ec05
 801e9b8:	0801ec05 	.word	0x0801ec05
 801e9bc:	0801ec05 	.word	0x0801ec05
 801e9c0:	0801ec05 	.word	0x0801ec05
 801e9c4:	0801ec05 	.word	0x0801ec05
 801e9c8:	0801ec05 	.word	0x0801ec05
 801e9cc:	0801ec05 	.word	0x0801ec05
 801e9d0:	0801ec05 	.word	0x0801ec05
 801e9d4:	0801ec05 	.word	0x0801ec05
 801e9d8:	0801ec05 	.word	0x0801ec05
 801e9dc:	0801ec05 	.word	0x0801ec05
 801e9e0:	0801ec05 	.word	0x0801ec05
 801e9e4:	0801ec05 	.word	0x0801ec05
 801e9e8:	0801ec05 	.word	0x0801ec05
 801e9ec:	0801ec05 	.word	0x0801ec05
 801e9f0:	0801ec05 	.word	0x0801ec05
 801e9f4:	0801ec05 	.word	0x0801ec05
 801e9f8:	0801ec05 	.word	0x0801ec05
 801e9fc:	0801ec05 	.word	0x0801ec05
 801ea00:	0801ec05 	.word	0x0801ec05
 801ea04:	0801ec05 	.word	0x0801ec05
 801ea08:	0801ec05 	.word	0x0801ec05
 801ea0c:	0801ec05 	.word	0x0801ec05
 801ea10:	0801ec05 	.word	0x0801ec05
 801ea14:	0801ec05 	.word	0x0801ec05
 801ea18:	0801ec05 	.word	0x0801ec05
 801ea1c:	0801ec05 	.word	0x0801ec05
 801ea20:	0801ec05 	.word	0x0801ec05
 801ea24:	0801eafd 	.word	0x0801eafd
 801ea28:	0801eb1f 	.word	0x0801eb1f
 801ea2c:	0801eb7d 	.word	0x0801eb7d
 801ea30:	0801eb9f 	.word	0x0801eb9f
 801ea34:	0801ec05 	.word	0x0801ec05
 801ea38:	0801ec05 	.word	0x0801ec05
 801ea3c:	0801ec05 	.word	0x0801ec05
 801ea40:	0801ebc1 	.word	0x0801ebc1
 801ea44:	0801ebe3 	.word	0x0801ebe3
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801ea48:	2300      	movs	r3, #0
 801ea4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ea4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ea52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801ea56:	e0d9      	b.n	801ec0c <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801ea58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ea5c:	2b04      	cmp	r3, #4
 801ea5e:	d009      	beq.n	801ea74 <dhcp_parse_reply+0x218>
 801ea60:	4b3f      	ldr	r3, [pc, #252]	; (801eb60 <dhcp_parse_reply+0x304>)
 801ea62:	f240 622e 	movw	r2, #1582	; 0x62e
 801ea66:	493f      	ldr	r1, [pc, #252]	; (801eb64 <dhcp_parse_reply+0x308>)
 801ea68:	483f      	ldr	r0, [pc, #252]	; (801eb68 <dhcp_parse_reply+0x30c>)
 801ea6a:	f008 fa33 	bl	8026ed4 <iprintf>
 801ea6e:	f06f 0305 	mvn.w	r3, #5
 801ea72:	e1f2      	b.n	801ee5a <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801ea74:	2306      	movs	r3, #6
 801ea76:	623b      	str	r3, [r7, #32]
        break;
 801ea78:	e0c8      	b.n	801ec0c <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801ea7a:	2304      	movs	r3, #4
 801ea7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801ea80:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801ea84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801ea88:	429a      	cmp	r2, r3
 801ea8a:	d209      	bcs.n	801eaa0 <dhcp_parse_reply+0x244>
 801ea8c:	4b34      	ldr	r3, [pc, #208]	; (801eb60 <dhcp_parse_reply+0x304>)
 801ea8e:	f240 6233 	movw	r2, #1587	; 0x633
 801ea92:	4936      	ldr	r1, [pc, #216]	; (801eb6c <dhcp_parse_reply+0x310>)
 801ea94:	4834      	ldr	r0, [pc, #208]	; (801eb68 <dhcp_parse_reply+0x30c>)
 801ea96:	f008 fa1d 	bl	8026ed4 <iprintf>
 801ea9a:	f06f 0305 	mvn.w	r3, #5
 801ea9e:	e1dc      	b.n	801ee5a <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801eaa0:	2307      	movs	r3, #7
 801eaa2:	623b      	str	r3, [r7, #32]
        break;
 801eaa4:	e0b2      	b.n	801ec0c <dhcp_parse_reply+0x3b0>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 801eaa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801eaaa:	f003 0303 	and.w	r3, r3, #3
 801eaae:	b2db      	uxtb	r3, r3
 801eab0:	2b00      	cmp	r3, #0
 801eab2:	d009      	beq.n	801eac8 <dhcp_parse_reply+0x26c>
 801eab4:	4b2a      	ldr	r3, [pc, #168]	; (801eb60 <dhcp_parse_reply+0x304>)
 801eab6:	f240 6239 	movw	r2, #1593	; 0x639
 801eaba:	492d      	ldr	r1, [pc, #180]	; (801eb70 <dhcp_parse_reply+0x314>)
 801eabc:	482a      	ldr	r0, [pc, #168]	; (801eb68 <dhcp_parse_reply+0x30c>)
 801eabe:	f008 fa09 	bl	8026ed4 <iprintf>
 801eac2:	f06f 0305 	mvn.w	r3, #5
 801eac6:	e1c8      	b.n	801ee5a <dhcp_parse_reply+0x5fe>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 801eac8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801eacc:	2b08      	cmp	r3, #8
 801eace:	bf28      	it	cs
 801ead0:	2308      	movcs	r3, #8
 801ead2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801ead6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801eada:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801eade:	429a      	cmp	r2, r3
 801eae0:	d209      	bcs.n	801eaf6 <dhcp_parse_reply+0x29a>
 801eae2:	4b1f      	ldr	r3, [pc, #124]	; (801eb60 <dhcp_parse_reply+0x304>)
 801eae4:	f240 623c 	movw	r2, #1596	; 0x63c
 801eae8:	4920      	ldr	r1, [pc, #128]	; (801eb6c <dhcp_parse_reply+0x310>)
 801eaea:	481f      	ldr	r0, [pc, #124]	; (801eb68 <dhcp_parse_reply+0x30c>)
 801eaec:	f008 f9f2 	bl	8026ed4 <iprintf>
 801eaf0:	f06f 0305 	mvn.w	r3, #5
 801eaf4:	e1b1      	b.n	801ee5a <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 801eaf6:	2308      	movs	r3, #8
 801eaf8:	623b      	str	r3, [r7, #32]
        break;
 801eafa:	e087      	b.n	801ec0c <dhcp_parse_reply+0x3b0>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801eafc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801eb00:	2b04      	cmp	r3, #4
 801eb02:	d009      	beq.n	801eb18 <dhcp_parse_reply+0x2bc>
 801eb04:	4b16      	ldr	r3, [pc, #88]	; (801eb60 <dhcp_parse_reply+0x304>)
 801eb06:	f240 6241 	movw	r2, #1601	; 0x641
 801eb0a:	4916      	ldr	r1, [pc, #88]	; (801eb64 <dhcp_parse_reply+0x308>)
 801eb0c:	4816      	ldr	r0, [pc, #88]	; (801eb68 <dhcp_parse_reply+0x30c>)
 801eb0e:	f008 f9e1 	bl	8026ed4 <iprintf>
 801eb12:	f06f 0305 	mvn.w	r3, #5
 801eb16:	e1a0      	b.n	801ee5a <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801eb18:	2303      	movs	r3, #3
 801eb1a:	623b      	str	r3, [r7, #32]
        break;
 801eb1c:	e076      	b.n	801ec0c <dhcp_parse_reply+0x3b0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801eb1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801eb22:	2b01      	cmp	r3, #1
 801eb24:	d009      	beq.n	801eb3a <dhcp_parse_reply+0x2de>
 801eb26:	4b0e      	ldr	r3, [pc, #56]	; (801eb60 <dhcp_parse_reply+0x304>)
 801eb28:	f240 624f 	movw	r2, #1615	; 0x64f
 801eb2c:	4911      	ldr	r1, [pc, #68]	; (801eb74 <dhcp_parse_reply+0x318>)
 801eb2e:	480e      	ldr	r0, [pc, #56]	; (801eb68 <dhcp_parse_reply+0x30c>)
 801eb30:	f008 f9d0 	bl	8026ed4 <iprintf>
 801eb34:	f06f 0305 	mvn.w	r3, #5
 801eb38:	e18f      	b.n	801ee5a <dhcp_parse_reply+0x5fe>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801eb3a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801eb3c:	2bf0      	cmp	r3, #240	; 0xf0
 801eb3e:	d009      	beq.n	801eb54 <dhcp_parse_reply+0x2f8>
 801eb40:	4b07      	ldr	r3, [pc, #28]	; (801eb60 <dhcp_parse_reply+0x304>)
 801eb42:	f240 6251 	movw	r2, #1617	; 0x651
 801eb46:	490c      	ldr	r1, [pc, #48]	; (801eb78 <dhcp_parse_reply+0x31c>)
 801eb48:	4807      	ldr	r0, [pc, #28]	; (801eb68 <dhcp_parse_reply+0x30c>)
 801eb4a:	f008 f9c3 	bl	8026ed4 <iprintf>
 801eb4e:	f06f 0305 	mvn.w	r3, #5
 801eb52:	e182      	b.n	801ee5a <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801eb54:	2300      	movs	r3, #0
 801eb56:	623b      	str	r3, [r7, #32]
        break;
 801eb58:	e058      	b.n	801ec0c <dhcp_parse_reply+0x3b0>
 801eb5a:	bf00      	nop
 801eb5c:	24008684 	.word	0x24008684
 801eb60:	0802d868 	.word	0x0802d868
 801eb64:	0802daf0 	.word	0x0802daf0
 801eb68:	0802d8c8 	.word	0x0802d8c8
 801eb6c:	0802dafc 	.word	0x0802dafc
 801eb70:	0802db10 	.word	0x0802db10
 801eb74:	0802db20 	.word	0x0802db20
 801eb78:	0802db2c 	.word	0x0802db2c
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801eb7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801eb80:	2b01      	cmp	r3, #1
 801eb82:	d009      	beq.n	801eb98 <dhcp_parse_reply+0x33c>
 801eb84:	4ba5      	ldr	r3, [pc, #660]	; (801ee1c <dhcp_parse_reply+0x5c0>)
 801eb86:	f240 6255 	movw	r2, #1621	; 0x655
 801eb8a:	49a5      	ldr	r1, [pc, #660]	; (801ee20 <dhcp_parse_reply+0x5c4>)
 801eb8c:	48a5      	ldr	r0, [pc, #660]	; (801ee24 <dhcp_parse_reply+0x5c8>)
 801eb8e:	f008 f9a1 	bl	8026ed4 <iprintf>
 801eb92:	f06f 0305 	mvn.w	r3, #5
 801eb96:	e160      	b.n	801ee5a <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801eb98:	2301      	movs	r3, #1
 801eb9a:	623b      	str	r3, [r7, #32]
        break;
 801eb9c:	e036      	b.n	801ec0c <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801eb9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801eba2:	2b04      	cmp	r3, #4
 801eba4:	d009      	beq.n	801ebba <dhcp_parse_reply+0x35e>
 801eba6:	4b9d      	ldr	r3, [pc, #628]	; (801ee1c <dhcp_parse_reply+0x5c0>)
 801eba8:	f240 6259 	movw	r2, #1625	; 0x659
 801ebac:	499e      	ldr	r1, [pc, #632]	; (801ee28 <dhcp_parse_reply+0x5cc>)
 801ebae:	489d      	ldr	r0, [pc, #628]	; (801ee24 <dhcp_parse_reply+0x5c8>)
 801ebb0:	f008 f990 	bl	8026ed4 <iprintf>
 801ebb4:	f06f 0305 	mvn.w	r3, #5
 801ebb8:	e14f      	b.n	801ee5a <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801ebba:	2302      	movs	r3, #2
 801ebbc:	623b      	str	r3, [r7, #32]
        break;
 801ebbe:	e025      	b.n	801ec0c <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801ebc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ebc4:	2b04      	cmp	r3, #4
 801ebc6:	d009      	beq.n	801ebdc <dhcp_parse_reply+0x380>
 801ebc8:	4b94      	ldr	r3, [pc, #592]	; (801ee1c <dhcp_parse_reply+0x5c0>)
 801ebca:	f240 625d 	movw	r2, #1629	; 0x65d
 801ebce:	4996      	ldr	r1, [pc, #600]	; (801ee28 <dhcp_parse_reply+0x5cc>)
 801ebd0:	4894      	ldr	r0, [pc, #592]	; (801ee24 <dhcp_parse_reply+0x5c8>)
 801ebd2:	f008 f97f 	bl	8026ed4 <iprintf>
 801ebd6:	f06f 0305 	mvn.w	r3, #5
 801ebda:	e13e      	b.n	801ee5a <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_T1;
 801ebdc:	2304      	movs	r3, #4
 801ebde:	623b      	str	r3, [r7, #32]
        break;
 801ebe0:	e014      	b.n	801ec0c <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801ebe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ebe6:	2b04      	cmp	r3, #4
 801ebe8:	d009      	beq.n	801ebfe <dhcp_parse_reply+0x3a2>
 801ebea:	4b8c      	ldr	r3, [pc, #560]	; (801ee1c <dhcp_parse_reply+0x5c0>)
 801ebec:	f240 6261 	movw	r2, #1633	; 0x661
 801ebf0:	498d      	ldr	r1, [pc, #564]	; (801ee28 <dhcp_parse_reply+0x5cc>)
 801ebf2:	488c      	ldr	r0, [pc, #560]	; (801ee24 <dhcp_parse_reply+0x5c8>)
 801ebf4:	f008 f96e 	bl	8026ed4 <iprintf>
 801ebf8:	f06f 0305 	mvn.w	r3, #5
 801ebfc:	e12d      	b.n	801ee5a <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_T2;
 801ebfe:	2305      	movs	r3, #5
 801ec00:	623b      	str	r3, [r7, #32]
        break;
 801ec02:	e003      	b.n	801ec0c <dhcp_parse_reply+0x3b0>
      default:
        decode_len = 0;
 801ec04:	2300      	movs	r3, #0
 801ec06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801ec0a:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801ec0c:	7dfb      	ldrb	r3, [r7, #23]
 801ec0e:	2b00      	cmp	r3, #0
 801ec10:	d103      	bne.n	801ec1a <dhcp_parse_reply+0x3be>
      offset++;
 801ec12:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ec14:	3301      	adds	r3, #1
 801ec16:	877b      	strh	r3, [r7, #58]	; 0x3a
 801ec18:	e0a1      	b.n	801ed5e <dhcp_parse_reply+0x502>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801ec1a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ec1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ec20:	4413      	add	r3, r2
 801ec22:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801ec26:	4293      	cmp	r3, r2
 801ec28:	dd02      	ble.n	801ec30 <dhcp_parse_reply+0x3d4>
        /* overflow */
        return ERR_BUF;
 801ec2a:	f06f 0301 	mvn.w	r3, #1
 801ec2e:	e114      	b.n	801ee5a <dhcp_parse_reply+0x5fe>
      }
      offset = (u16_t)(offset + len + 2);
 801ec30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ec34:	b29a      	uxth	r2, r3
 801ec36:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ec38:	4413      	add	r3, r2
 801ec3a:	b29b      	uxth	r3, r3
 801ec3c:	3302      	adds	r3, #2
 801ec3e:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801ec40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801ec44:	2b00      	cmp	r3, #0
 801ec46:	f000 808a 	beq.w	801ed5e <dhcp_parse_reply+0x502>
        u32_t value = 0;
 801ec4a:	2300      	movs	r3, #0
 801ec4c:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801ec4e:	6a3b      	ldr	r3, [r7, #32]
 801ec50:	2b00      	cmp	r3, #0
 801ec52:	db02      	blt.n	801ec5a <dhcp_parse_reply+0x3fe>
 801ec54:	6a3b      	ldr	r3, [r7, #32]
 801ec56:	2b09      	cmp	r3, #9
 801ec58:	dd06      	ble.n	801ec68 <dhcp_parse_reply+0x40c>
 801ec5a:	4b70      	ldr	r3, [pc, #448]	; (801ee1c <dhcp_parse_reply+0x5c0>)
 801ec5c:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801ec60:	4972      	ldr	r1, [pc, #456]	; (801ee2c <dhcp_parse_reply+0x5d0>)
 801ec62:	4870      	ldr	r0, [pc, #448]	; (801ee24 <dhcp_parse_reply+0x5c8>)
 801ec64:	f008 f936 	bl	8026ed4 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801ec68:	4a71      	ldr	r2, [pc, #452]	; (801ee30 <dhcp_parse_reply+0x5d4>)
 801ec6a:	6a3b      	ldr	r3, [r7, #32]
 801ec6c:	4413      	add	r3, r2
 801ec6e:	781b      	ldrb	r3, [r3, #0]
 801ec70:	2b00      	cmp	r3, #0
 801ec72:	d174      	bne.n	801ed5e <dhcp_parse_reply+0x502>
          copy_len = LWIP_MIN(decode_len, 4);
 801ec74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801ec78:	2b04      	cmp	r3, #4
 801ec7a:	bf28      	it	cs
 801ec7c:	2304      	movcs	r3, #4
 801ec7e:	b2db      	uxtb	r3, r3
 801ec80:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801ec82:	8bfb      	ldrh	r3, [r7, #30]
 801ec84:	8aba      	ldrh	r2, [r7, #20]
 801ec86:	f107 0108 	add.w	r1, r7, #8
 801ec8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ec8c:	f7f7 f8f8 	bl	8015e80 <pbuf_copy_partial>
 801ec90:	4603      	mov	r3, r0
 801ec92:	461a      	mov	r2, r3
 801ec94:	8abb      	ldrh	r3, [r7, #20]
 801ec96:	4293      	cmp	r3, r2
 801ec98:	d002      	beq.n	801eca0 <dhcp_parse_reply+0x444>
            return ERR_BUF;
 801ec9a:	f06f 0301 	mvn.w	r3, #1
 801ec9e:	e0dc      	b.n	801ee5a <dhcp_parse_reply+0x5fe>
          }
          if (decode_len > 4) {
 801eca0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801eca4:	2b04      	cmp	r3, #4
 801eca6:	d933      	bls.n	801ed10 <dhcp_parse_reply+0x4b4>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801eca8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801ecac:	f003 0303 	and.w	r3, r3, #3
 801ecb0:	b2db      	uxtb	r3, r3
 801ecb2:	2b00      	cmp	r3, #0
 801ecb4:	d009      	beq.n	801ecca <dhcp_parse_reply+0x46e>
 801ecb6:	4b59      	ldr	r3, [pc, #356]	; (801ee1c <dhcp_parse_reply+0x5c0>)
 801ecb8:	f240 6281 	movw	r2, #1665	; 0x681
 801ecbc:	495d      	ldr	r1, [pc, #372]	; (801ee34 <dhcp_parse_reply+0x5d8>)
 801ecbe:	4859      	ldr	r0, [pc, #356]	; (801ee24 <dhcp_parse_reply+0x5c8>)
 801ecc0:	f008 f908 	bl	8026ed4 <iprintf>
 801ecc4:	f06f 0305 	mvn.w	r3, #5
 801ecc8:	e0c7      	b.n	801ee5a <dhcp_parse_reply+0x5fe>
            dhcp_got_option(dhcp, decode_idx);
 801ecca:	4a59      	ldr	r2, [pc, #356]	; (801ee30 <dhcp_parse_reply+0x5d4>)
 801eccc:	6a3b      	ldr	r3, [r7, #32]
 801ecce:	4413      	add	r3, r2
 801ecd0:	2201      	movs	r2, #1
 801ecd2:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801ecd4:	68bb      	ldr	r3, [r7, #8]
 801ecd6:	4618      	mov	r0, r3
 801ecd8:	f7f4 fa0f 	bl	80130fa <lwip_htonl>
 801ecdc:	4602      	mov	r2, r0
 801ecde:	4956      	ldr	r1, [pc, #344]	; (801ee38 <dhcp_parse_reply+0x5dc>)
 801ece0:	6a3b      	ldr	r3, [r7, #32]
 801ece2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801ece6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801ecea:	3b04      	subs	r3, #4
 801ecec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801ecf0:	8bfb      	ldrh	r3, [r7, #30]
 801ecf2:	3304      	adds	r3, #4
 801ecf4:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801ecf6:	8a7a      	ldrh	r2, [r7, #18]
 801ecf8:	8bfb      	ldrh	r3, [r7, #30]
 801ecfa:	429a      	cmp	r2, r3
 801ecfc:	d202      	bcs.n	801ed04 <dhcp_parse_reply+0x4a8>
              /* overflow */
              return ERR_BUF;
 801ecfe:	f06f 0301 	mvn.w	r3, #1
 801ed02:	e0aa      	b.n	801ee5a <dhcp_parse_reply+0x5fe>
            }
            val_offset = next_val_offset;
 801ed04:	8a7b      	ldrh	r3, [r7, #18]
 801ed06:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801ed08:	6a3b      	ldr	r3, [r7, #32]
 801ed0a:	3301      	adds	r3, #1
 801ed0c:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801ed0e:	e79e      	b.n	801ec4e <dhcp_parse_reply+0x3f2>
          } else if (decode_len == 4) {
 801ed10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801ed14:	2b04      	cmp	r3, #4
 801ed16:	d106      	bne.n	801ed26 <dhcp_parse_reply+0x4ca>
            value = lwip_ntohl(value);
 801ed18:	68bb      	ldr	r3, [r7, #8]
 801ed1a:	4618      	mov	r0, r3
 801ed1c:	f7f4 f9ed 	bl	80130fa <lwip_htonl>
 801ed20:	4603      	mov	r3, r0
 801ed22:	60bb      	str	r3, [r7, #8]
 801ed24:	e011      	b.n	801ed4a <dhcp_parse_reply+0x4ee>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801ed26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801ed2a:	2b01      	cmp	r3, #1
 801ed2c:	d009      	beq.n	801ed42 <dhcp_parse_reply+0x4e6>
 801ed2e:	4b3b      	ldr	r3, [pc, #236]	; (801ee1c <dhcp_parse_reply+0x5c0>)
 801ed30:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801ed34:	4941      	ldr	r1, [pc, #260]	; (801ee3c <dhcp_parse_reply+0x5e0>)
 801ed36:	483b      	ldr	r0, [pc, #236]	; (801ee24 <dhcp_parse_reply+0x5c8>)
 801ed38:	f008 f8cc 	bl	8026ed4 <iprintf>
 801ed3c:	f06f 0305 	mvn.w	r3, #5
 801ed40:	e08b      	b.n	801ee5a <dhcp_parse_reply+0x5fe>
            value = ((u8_t *)&value)[0];
 801ed42:	f107 0308 	add.w	r3, r7, #8
 801ed46:	781b      	ldrb	r3, [r3, #0]
 801ed48:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801ed4a:	4a39      	ldr	r2, [pc, #228]	; (801ee30 <dhcp_parse_reply+0x5d4>)
 801ed4c:	6a3b      	ldr	r3, [r7, #32]
 801ed4e:	4413      	add	r3, r2
 801ed50:	2201      	movs	r2, #1
 801ed52:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801ed54:	68ba      	ldr	r2, [r7, #8]
 801ed56:	4938      	ldr	r1, [pc, #224]	; (801ee38 <dhcp_parse_reply+0x5dc>)
 801ed58:	6a3b      	ldr	r3, [r7, #32]
 801ed5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801ed5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ed60:	895b      	ldrh	r3, [r3, #10]
 801ed62:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ed64:	429a      	cmp	r2, r3
 801ed66:	d324      	bcc.n	801edb2 <dhcp_parse_reply+0x556>
      offset = (u16_t)(offset - q->len);
 801ed68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ed6a:	895b      	ldrh	r3, [r3, #10]
 801ed6c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ed6e:	1ad3      	subs	r3, r2, r3
 801ed70:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801ed72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ed74:	895b      	ldrh	r3, [r3, #10]
 801ed76:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801ed78:	1ad3      	subs	r3, r2, r3
 801ed7a:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801ed7c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ed7e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801ed80:	429a      	cmp	r2, r3
 801ed82:	d213      	bcs.n	801edac <dhcp_parse_reply+0x550>
        q = q->next;
 801ed84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ed86:	681b      	ldr	r3, [r3, #0]
 801ed88:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801ed8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ed8c:	2b00      	cmp	r3, #0
 801ed8e:	d109      	bne.n	801eda4 <dhcp_parse_reply+0x548>
 801ed90:	4b22      	ldr	r3, [pc, #136]	; (801ee1c <dhcp_parse_reply+0x5c0>)
 801ed92:	f240 629d 	movw	r2, #1693	; 0x69d
 801ed96:	492a      	ldr	r1, [pc, #168]	; (801ee40 <dhcp_parse_reply+0x5e4>)
 801ed98:	4822      	ldr	r0, [pc, #136]	; (801ee24 <dhcp_parse_reply+0x5c8>)
 801ed9a:	f008 f89b 	bl	8026ed4 <iprintf>
 801ed9e:	f06f 0305 	mvn.w	r3, #5
 801eda2:	e05a      	b.n	801ee5a <dhcp_parse_reply+0x5fe>
        options = (u8_t *)q->payload;
 801eda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eda6:	685b      	ldr	r3, [r3, #4]
 801eda8:	63fb      	str	r3, [r7, #60]	; 0x3c
 801edaa:	e002      	b.n	801edb2 <dhcp_parse_reply+0x556>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801edac:	f06f 0301 	mvn.w	r3, #1
 801edb0:	e053      	b.n	801ee5a <dhcp_parse_reply+0x5fe>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801edb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801edb4:	2b00      	cmp	r3, #0
 801edb6:	d00a      	beq.n	801edce <dhcp_parse_reply+0x572>
 801edb8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801edba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801edbc:	429a      	cmp	r2, r3
 801edbe:	d206      	bcs.n	801edce <dhcp_parse_reply+0x572>
 801edc0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801edc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801edc4:	4413      	add	r3, r2
 801edc6:	781b      	ldrb	r3, [r3, #0]
 801edc8:	2bff      	cmp	r3, #255	; 0xff
 801edca:	f47f ad8a 	bne.w	801e8e2 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801edce:	4b18      	ldr	r3, [pc, #96]	; (801ee30 <dhcp_parse_reply+0x5d4>)
 801edd0:	781b      	ldrb	r3, [r3, #0]
 801edd2:	2b00      	cmp	r3, #0
 801edd4:	d018      	beq.n	801ee08 <dhcp_parse_reply+0x5ac>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801edd6:	4b18      	ldr	r3, [pc, #96]	; (801ee38 <dhcp_parse_reply+0x5dc>)
 801edd8:	681b      	ldr	r3, [r3, #0]
 801edda:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801eddc:	4b14      	ldr	r3, [pc, #80]	; (801ee30 <dhcp_parse_reply+0x5d4>)
 801edde:	2200      	movs	r2, #0
 801ede0:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801ede2:	68fb      	ldr	r3, [r7, #12]
 801ede4:	2b01      	cmp	r3, #1
 801ede6:	d102      	bne.n	801edee <dhcp_parse_reply+0x592>
      parse_file_as_options = 1;
 801ede8:	2301      	movs	r3, #1
 801edea:	62fb      	str	r3, [r7, #44]	; 0x2c
 801edec:	e00c      	b.n	801ee08 <dhcp_parse_reply+0x5ac>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801edee:	68fb      	ldr	r3, [r7, #12]
 801edf0:	2b02      	cmp	r3, #2
 801edf2:	d102      	bne.n	801edfa <dhcp_parse_reply+0x59e>
      parse_sname_as_options = 1;
 801edf4:	2301      	movs	r3, #1
 801edf6:	62bb      	str	r3, [r7, #40]	; 0x28
 801edf8:	e006      	b.n	801ee08 <dhcp_parse_reply+0x5ac>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801edfa:	68fb      	ldr	r3, [r7, #12]
 801edfc:	2b03      	cmp	r3, #3
 801edfe:	d103      	bne.n	801ee08 <dhcp_parse_reply+0x5ac>
      parse_sname_as_options = 1;
 801ee00:	2301      	movs	r3, #1
 801ee02:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801ee04:	2301      	movs	r3, #1
 801ee06:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801ee08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ee0a:	2b00      	cmp	r3, #0
 801ee0c:	d01a      	beq.n	801ee44 <dhcp_parse_reply+0x5e8>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801ee0e:	2300      	movs	r3, #0
 801ee10:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 801ee12:	236c      	movs	r3, #108	; 0x6c
 801ee14:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801ee16:	23ec      	movs	r3, #236	; 0xec
 801ee18:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801ee1a:	e53c      	b.n	801e896 <dhcp_parse_reply+0x3a>
 801ee1c:	0802d868 	.word	0x0802d868
 801ee20:	0802db20 	.word	0x0802db20
 801ee24:	0802d8c8 	.word	0x0802d8c8
 801ee28:	0802daf0 	.word	0x0802daf0
 801ee2c:	0802db44 	.word	0x0802db44
 801ee30:	24008684 	.word	0x24008684
 801ee34:	0802db58 	.word	0x0802db58
 801ee38:	24008690 	.word	0x24008690
 801ee3c:	0802db70 	.word	0x0802db70
 801ee40:	0802db84 	.word	0x0802db84
  } else if (parse_sname_as_options) {
 801ee44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ee46:	2b00      	cmp	r3, #0
 801ee48:	d006      	beq.n	801ee58 <dhcp_parse_reply+0x5fc>
    parse_sname_as_options = 0;
 801ee4a:	2300      	movs	r3, #0
 801ee4c:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801ee4e:	232c      	movs	r3, #44	; 0x2c
 801ee50:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801ee52:	236c      	movs	r3, #108	; 0x6c
 801ee54:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801ee56:	e51e      	b.n	801e896 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801ee58:	2300      	movs	r3, #0
}
 801ee5a:	4618      	mov	r0, r3
 801ee5c:	3740      	adds	r7, #64	; 0x40
 801ee5e:	46bd      	mov	sp, r7
 801ee60:	bd80      	pop	{r7, pc}
 801ee62:	bf00      	nop

0801ee64 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801ee64:	b580      	push	{r7, lr}
 801ee66:	b08a      	sub	sp, #40	; 0x28
 801ee68:	af00      	add	r7, sp, #0
 801ee6a:	60f8      	str	r0, [r7, #12]
 801ee6c:	60b9      	str	r1, [r7, #8]
 801ee6e:	607a      	str	r2, [r7, #4]
 801ee70:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801ee72:	4b60      	ldr	r3, [pc, #384]	; (801eff4 <dhcp_recv+0x190>)
 801ee74:	685b      	ldr	r3, [r3, #4]
 801ee76:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ee78:	6a3b      	ldr	r3, [r7, #32]
 801ee7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ee7c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801ee7e:	687b      	ldr	r3, [r7, #4]
 801ee80:	685b      	ldr	r3, [r3, #4]
 801ee82:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801ee84:	69fb      	ldr	r3, [r7, #28]
 801ee86:	2b00      	cmp	r3, #0
 801ee88:	f000 809d 	beq.w	801efc6 <dhcp_recv+0x162>
 801ee8c:	69fb      	ldr	r3, [r7, #28]
 801ee8e:	791b      	ldrb	r3, [r3, #4]
 801ee90:	2b00      	cmp	r3, #0
 801ee92:	f000 8098 	beq.w	801efc6 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801ee96:	687b      	ldr	r3, [r7, #4]
 801ee98:	895b      	ldrh	r3, [r3, #10]
 801ee9a:	2b2b      	cmp	r3, #43	; 0x2b
 801ee9c:	f240 8095 	bls.w	801efca <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801eea0:	69bb      	ldr	r3, [r7, #24]
 801eea2:	781b      	ldrb	r3, [r3, #0]
 801eea4:	2b02      	cmp	r3, #2
 801eea6:	f040 8092 	bne.w	801efce <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801eeaa:	2300      	movs	r3, #0
 801eeac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801eeb0:	e012      	b.n	801eed8 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801eeb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801eeb6:	6a3a      	ldr	r2, [r7, #32]
 801eeb8:	4413      	add	r3, r2
 801eeba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801eebe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801eec2:	69b9      	ldr	r1, [r7, #24]
 801eec4:	440b      	add	r3, r1
 801eec6:	7f1b      	ldrb	r3, [r3, #28]
 801eec8:	429a      	cmp	r2, r3
 801eeca:	f040 8082 	bne.w	801efd2 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801eece:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801eed2:	3301      	adds	r3, #1
 801eed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801eed8:	6a3b      	ldr	r3, [r7, #32]
 801eeda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801eede:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801eee2:	429a      	cmp	r2, r3
 801eee4:	d203      	bcs.n	801eeee <dhcp_recv+0x8a>
 801eee6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801eeea:	2b05      	cmp	r3, #5
 801eeec:	d9e1      	bls.n	801eeb2 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801eeee:	69bb      	ldr	r3, [r7, #24]
 801eef0:	685b      	ldr	r3, [r3, #4]
 801eef2:	4618      	mov	r0, r3
 801eef4:	f7f4 f901 	bl	80130fa <lwip_htonl>
 801eef8:	4602      	mov	r2, r0
 801eefa:	69fb      	ldr	r3, [r7, #28]
 801eefc:	681b      	ldr	r3, [r3, #0]
 801eefe:	429a      	cmp	r2, r3
 801ef00:	d169      	bne.n	801efd6 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801ef02:	69f9      	ldr	r1, [r7, #28]
 801ef04:	6878      	ldr	r0, [r7, #4]
 801ef06:	f7ff fca9 	bl	801e85c <dhcp_parse_reply>
 801ef0a:	4603      	mov	r3, r0
 801ef0c:	2b00      	cmp	r3, #0
 801ef0e:	d164      	bne.n	801efda <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801ef10:	4b39      	ldr	r3, [pc, #228]	; (801eff8 <dhcp_recv+0x194>)
 801ef12:	785b      	ldrb	r3, [r3, #1]
 801ef14:	2b00      	cmp	r3, #0
 801ef16:	d062      	beq.n	801efde <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801ef18:	687b      	ldr	r3, [r7, #4]
 801ef1a:	685b      	ldr	r3, [r3, #4]
 801ef1c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801ef1e:	4b37      	ldr	r3, [pc, #220]	; (801effc <dhcp_recv+0x198>)
 801ef20:	685b      	ldr	r3, [r3, #4]
 801ef22:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801ef24:	7cfb      	ldrb	r3, [r7, #19]
 801ef26:	2b05      	cmp	r3, #5
 801ef28:	d12a      	bne.n	801ef80 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801ef2a:	69fb      	ldr	r3, [r7, #28]
 801ef2c:	795b      	ldrb	r3, [r3, #5]
 801ef2e:	2b01      	cmp	r3, #1
 801ef30:	d112      	bne.n	801ef58 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801ef32:	6979      	ldr	r1, [r7, #20]
 801ef34:	6a38      	ldr	r0, [r7, #32]
 801ef36:	f7fe fdc7 	bl	801dac8 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801ef3a:	6a3b      	ldr	r3, [r7, #32]
 801ef3c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ef40:	f003 0308 	and.w	r3, r3, #8
 801ef44:	2b00      	cmp	r3, #0
 801ef46:	d003      	beq.n	801ef50 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801ef48:	6a38      	ldr	r0, [r7, #32]
 801ef4a:	f7fe fb35 	bl	801d5b8 <dhcp_check>
 801ef4e:	e049      	b.n	801efe4 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801ef50:	6a38      	ldr	r0, [r7, #32]
 801ef52:	f7ff f837 	bl	801dfc4 <dhcp_bind>
 801ef56:	e045      	b.n	801efe4 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801ef58:	69fb      	ldr	r3, [r7, #28]
 801ef5a:	795b      	ldrb	r3, [r3, #5]
 801ef5c:	2b03      	cmp	r3, #3
 801ef5e:	d007      	beq.n	801ef70 <dhcp_recv+0x10c>
 801ef60:	69fb      	ldr	r3, [r7, #28]
 801ef62:	795b      	ldrb	r3, [r3, #5]
 801ef64:	2b04      	cmp	r3, #4
 801ef66:	d003      	beq.n	801ef70 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801ef68:	69fb      	ldr	r3, [r7, #28]
 801ef6a:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801ef6c:	2b05      	cmp	r3, #5
 801ef6e:	d139      	bne.n	801efe4 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801ef70:	6979      	ldr	r1, [r7, #20]
 801ef72:	6a38      	ldr	r0, [r7, #32]
 801ef74:	f7fe fda8 	bl	801dac8 <dhcp_handle_ack>
      dhcp_bind(netif);
 801ef78:	6a38      	ldr	r0, [r7, #32]
 801ef7a:	f7ff f823 	bl	801dfc4 <dhcp_bind>
 801ef7e:	e031      	b.n	801efe4 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801ef80:	7cfb      	ldrb	r3, [r7, #19]
 801ef82:	2b06      	cmp	r3, #6
 801ef84:	d113      	bne.n	801efae <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801ef86:	69fb      	ldr	r3, [r7, #28]
 801ef88:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801ef8a:	2b03      	cmp	r3, #3
 801ef8c:	d00b      	beq.n	801efa6 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801ef8e:	69fb      	ldr	r3, [r7, #28]
 801ef90:	795b      	ldrb	r3, [r3, #5]
 801ef92:	2b01      	cmp	r3, #1
 801ef94:	d007      	beq.n	801efa6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801ef96:	69fb      	ldr	r3, [r7, #28]
 801ef98:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801ef9a:	2b04      	cmp	r3, #4
 801ef9c:	d003      	beq.n	801efa6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801ef9e:	69fb      	ldr	r3, [r7, #28]
 801efa0:	795b      	ldrb	r3, [r3, #5]
 801efa2:	2b05      	cmp	r3, #5
 801efa4:	d103      	bne.n	801efae <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801efa6:	6a38      	ldr	r0, [r7, #32]
 801efa8:	f7fe faec 	bl	801d584 <dhcp_handle_nak>
 801efac:	e01a      	b.n	801efe4 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801efae:	7cfb      	ldrb	r3, [r7, #19]
 801efb0:	2b02      	cmp	r3, #2
 801efb2:	d116      	bne.n	801efe2 <dhcp_recv+0x17e>
 801efb4:	69fb      	ldr	r3, [r7, #28]
 801efb6:	795b      	ldrb	r3, [r3, #5]
 801efb8:	2b06      	cmp	r3, #6
 801efba:	d112      	bne.n	801efe2 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801efbc:	6979      	ldr	r1, [r7, #20]
 801efbe:	6a38      	ldr	r0, [r7, #32]
 801efc0:	f7fe fb2e 	bl	801d620 <dhcp_handle_offer>
 801efc4:	e00e      	b.n	801efe4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801efc6:	bf00      	nop
 801efc8:	e00c      	b.n	801efe4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801efca:	bf00      	nop
 801efcc:	e00a      	b.n	801efe4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801efce:	bf00      	nop
 801efd0:	e008      	b.n	801efe4 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801efd2:	bf00      	nop
 801efd4:	e006      	b.n	801efe4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801efd6:	bf00      	nop
 801efd8:	e004      	b.n	801efe4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801efda:	bf00      	nop
 801efdc:	e002      	b.n	801efe4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801efde:	bf00      	nop
 801efe0:	e000      	b.n	801efe4 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801efe2:	bf00      	nop
  pbuf_free(p);
 801efe4:	6878      	ldr	r0, [r7, #4]
 801efe6:	f7f6 fd45 	bl	8015a74 <pbuf_free>
}
 801efea:	bf00      	nop
 801efec:	3728      	adds	r7, #40	; 0x28
 801efee:	46bd      	mov	sp, r7
 801eff0:	bd80      	pop	{r7, pc}
 801eff2:	bf00      	nop
 801eff4:	24005400 	.word	0x24005400
 801eff8:	24008684 	.word	0x24008684
 801effc:	24008690 	.word	0x24008690

0801f000 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801f000:	b580      	push	{r7, lr}
 801f002:	b088      	sub	sp, #32
 801f004:	af00      	add	r7, sp, #0
 801f006:	60f8      	str	r0, [r7, #12]
 801f008:	60b9      	str	r1, [r7, #8]
 801f00a:	603b      	str	r3, [r7, #0]
 801f00c:	4613      	mov	r3, r2
 801f00e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801f010:	68fb      	ldr	r3, [r7, #12]
 801f012:	2b00      	cmp	r3, #0
 801f014:	d108      	bne.n	801f028 <dhcp_create_msg+0x28>
 801f016:	4b5f      	ldr	r3, [pc, #380]	; (801f194 <dhcp_create_msg+0x194>)
 801f018:	f240 7269 	movw	r2, #1897	; 0x769
 801f01c:	495e      	ldr	r1, [pc, #376]	; (801f198 <dhcp_create_msg+0x198>)
 801f01e:	485f      	ldr	r0, [pc, #380]	; (801f19c <dhcp_create_msg+0x19c>)
 801f020:	f007 ff58 	bl	8026ed4 <iprintf>
 801f024:	2300      	movs	r3, #0
 801f026:	e0b1      	b.n	801f18c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801f028:	68bb      	ldr	r3, [r7, #8]
 801f02a:	2b00      	cmp	r3, #0
 801f02c:	d108      	bne.n	801f040 <dhcp_create_msg+0x40>
 801f02e:	4b59      	ldr	r3, [pc, #356]	; (801f194 <dhcp_create_msg+0x194>)
 801f030:	f240 726a 	movw	r2, #1898	; 0x76a
 801f034:	495a      	ldr	r1, [pc, #360]	; (801f1a0 <dhcp_create_msg+0x1a0>)
 801f036:	4859      	ldr	r0, [pc, #356]	; (801f19c <dhcp_create_msg+0x19c>)
 801f038:	f007 ff4c 	bl	8026ed4 <iprintf>
 801f03c:	2300      	movs	r3, #0
 801f03e:	e0a5      	b.n	801f18c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801f040:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f044:	f44f 719a 	mov.w	r1, #308	; 0x134
 801f048:	2036      	movs	r0, #54	; 0x36
 801f04a:	f7f6 f9fd 	bl	8015448 <pbuf_alloc>
 801f04e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801f050:	69bb      	ldr	r3, [r7, #24]
 801f052:	2b00      	cmp	r3, #0
 801f054:	d101      	bne.n	801f05a <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801f056:	2300      	movs	r3, #0
 801f058:	e098      	b.n	801f18c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801f05a:	69bb      	ldr	r3, [r7, #24]
 801f05c:	895b      	ldrh	r3, [r3, #10]
 801f05e:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801f062:	d206      	bcs.n	801f072 <dhcp_create_msg+0x72>
 801f064:	4b4b      	ldr	r3, [pc, #300]	; (801f194 <dhcp_create_msg+0x194>)
 801f066:	f240 7271 	movw	r2, #1905	; 0x771
 801f06a:	494e      	ldr	r1, [pc, #312]	; (801f1a4 <dhcp_create_msg+0x1a4>)
 801f06c:	484b      	ldr	r0, [pc, #300]	; (801f19c <dhcp_create_msg+0x19c>)
 801f06e:	f007 ff31 	bl	8026ed4 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801f072:	79fb      	ldrb	r3, [r7, #7]
 801f074:	2b03      	cmp	r3, #3
 801f076:	d103      	bne.n	801f080 <dhcp_create_msg+0x80>
 801f078:	68bb      	ldr	r3, [r7, #8]
 801f07a:	795b      	ldrb	r3, [r3, #5]
 801f07c:	2b03      	cmp	r3, #3
 801f07e:	d10d      	bne.n	801f09c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801f080:	68bb      	ldr	r3, [r7, #8]
 801f082:	799b      	ldrb	r3, [r3, #6]
 801f084:	2b00      	cmp	r3, #0
 801f086:	d105      	bne.n	801f094 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801f088:	f007 ffb2 	bl	8026ff0 <rand>
 801f08c:	4603      	mov	r3, r0
 801f08e:	461a      	mov	r2, r3
 801f090:	4b45      	ldr	r3, [pc, #276]	; (801f1a8 <dhcp_create_msg+0x1a8>)
 801f092:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801f094:	4b44      	ldr	r3, [pc, #272]	; (801f1a8 <dhcp_create_msg+0x1a8>)
 801f096:	681a      	ldr	r2, [r3, #0]
 801f098:	68bb      	ldr	r3, [r7, #8]
 801f09a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801f09c:	69bb      	ldr	r3, [r7, #24]
 801f09e:	685b      	ldr	r3, [r3, #4]
 801f0a0:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801f0a2:	f44f 729a 	mov.w	r2, #308	; 0x134
 801f0a6:	2100      	movs	r1, #0
 801f0a8:	6978      	ldr	r0, [r7, #20]
 801f0aa:	f007 f8b5 	bl	8026218 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801f0ae:	697b      	ldr	r3, [r7, #20]
 801f0b0:	2201      	movs	r2, #1
 801f0b2:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801f0b4:	697b      	ldr	r3, [r7, #20]
 801f0b6:	2201      	movs	r2, #1
 801f0b8:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801f0ba:	68fb      	ldr	r3, [r7, #12]
 801f0bc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801f0c0:	697b      	ldr	r3, [r7, #20]
 801f0c2:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801f0c4:	68bb      	ldr	r3, [r7, #8]
 801f0c6:	681b      	ldr	r3, [r3, #0]
 801f0c8:	4618      	mov	r0, r3
 801f0ca:	f7f4 f816 	bl	80130fa <lwip_htonl>
 801f0ce:	4602      	mov	r2, r0
 801f0d0:	697b      	ldr	r3, [r7, #20]
 801f0d2:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801f0d4:	79fb      	ldrb	r3, [r7, #7]
 801f0d6:	2b08      	cmp	r3, #8
 801f0d8:	d010      	beq.n	801f0fc <dhcp_create_msg+0xfc>
 801f0da:	79fb      	ldrb	r3, [r7, #7]
 801f0dc:	2b04      	cmp	r3, #4
 801f0de:	d00d      	beq.n	801f0fc <dhcp_create_msg+0xfc>
 801f0e0:	79fb      	ldrb	r3, [r7, #7]
 801f0e2:	2b07      	cmp	r3, #7
 801f0e4:	d00a      	beq.n	801f0fc <dhcp_create_msg+0xfc>
 801f0e6:	79fb      	ldrb	r3, [r7, #7]
 801f0e8:	2b03      	cmp	r3, #3
 801f0ea:	d10c      	bne.n	801f106 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801f0ec:	68bb      	ldr	r3, [r7, #8]
 801f0ee:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801f0f0:	2b05      	cmp	r3, #5
 801f0f2:	d003      	beq.n	801f0fc <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801f0f4:	68bb      	ldr	r3, [r7, #8]
 801f0f6:	795b      	ldrb	r3, [r3, #5]
 801f0f8:	2b04      	cmp	r3, #4
 801f0fa:	d104      	bne.n	801f106 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801f0fc:	68fb      	ldr	r3, [r7, #12]
 801f0fe:	3304      	adds	r3, #4
 801f100:	681a      	ldr	r2, [r3, #0]
 801f102:	697b      	ldr	r3, [r7, #20]
 801f104:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801f106:	2300      	movs	r3, #0
 801f108:	83fb      	strh	r3, [r7, #30]
 801f10a:	e00c      	b.n	801f126 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801f10c:	8bfa      	ldrh	r2, [r7, #30]
 801f10e:	8bfb      	ldrh	r3, [r7, #30]
 801f110:	68f9      	ldr	r1, [r7, #12]
 801f112:	440a      	add	r2, r1
 801f114:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 801f118:	697a      	ldr	r2, [r7, #20]
 801f11a:	4413      	add	r3, r2
 801f11c:	460a      	mov	r2, r1
 801f11e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801f120:	8bfb      	ldrh	r3, [r7, #30]
 801f122:	3301      	adds	r3, #1
 801f124:	83fb      	strh	r3, [r7, #30]
 801f126:	8bfb      	ldrh	r3, [r7, #30]
 801f128:	2b05      	cmp	r3, #5
 801f12a:	d9ef      	bls.n	801f10c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801f12c:	697b      	ldr	r3, [r7, #20]
 801f12e:	2200      	movs	r2, #0
 801f130:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801f134:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801f138:	2200      	movs	r2, #0
 801f13a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801f13e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801f142:	2200      	movs	r2, #0
 801f144:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801f148:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801f14c:	2200      	movs	r2, #0
 801f14e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801f152:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801f156:	697b      	ldr	r3, [r7, #20]
 801f158:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801f15c:	2301      	movs	r3, #1
 801f15e:	2235      	movs	r2, #53	; 0x35
 801f160:	2000      	movs	r0, #0
 801f162:	f7ff faab 	bl	801e6bc <dhcp_option>
 801f166:	4603      	mov	r3, r0
 801f168:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801f16a:	697b      	ldr	r3, [r7, #20]
 801f16c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801f170:	79fa      	ldrb	r2, [r7, #7]
 801f172:	8a7b      	ldrh	r3, [r7, #18]
 801f174:	4618      	mov	r0, r3
 801f176:	f7ff fad5 	bl	801e724 <dhcp_option_byte>
 801f17a:	4603      	mov	r3, r0
 801f17c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801f17e:	683b      	ldr	r3, [r7, #0]
 801f180:	2b00      	cmp	r3, #0
 801f182:	d002      	beq.n	801f18a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801f184:	683b      	ldr	r3, [r7, #0]
 801f186:	8a7a      	ldrh	r2, [r7, #18]
 801f188:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801f18a:	69bb      	ldr	r3, [r7, #24]
}
 801f18c:	4618      	mov	r0, r3
 801f18e:	3720      	adds	r7, #32
 801f190:	46bd      	mov	sp, r7
 801f192:	bd80      	pop	{r7, pc}
 801f194:	0802d868 	.word	0x0802d868
 801f198:	0802db98 	.word	0x0802db98
 801f19c:	0802d8c8 	.word	0x0802d8c8
 801f1a0:	0802dbb8 	.word	0x0802dbb8
 801f1a4:	0802dbd8 	.word	0x0802dbd8
 801f1a8:	24004fd4 	.word	0x24004fd4

0801f1ac <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801f1ac:	b580      	push	{r7, lr}
 801f1ae:	b084      	sub	sp, #16
 801f1b0:	af00      	add	r7, sp, #0
 801f1b2:	4603      	mov	r3, r0
 801f1b4:	60b9      	str	r1, [r7, #8]
 801f1b6:	607a      	str	r2, [r7, #4]
 801f1b8:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801f1ba:	89fb      	ldrh	r3, [r7, #14]
 801f1bc:	1c5a      	adds	r2, r3, #1
 801f1be:	81fa      	strh	r2, [r7, #14]
 801f1c0:	461a      	mov	r2, r3
 801f1c2:	68bb      	ldr	r3, [r7, #8]
 801f1c4:	4413      	add	r3, r2
 801f1c6:	22ff      	movs	r2, #255	; 0xff
 801f1c8:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801f1ca:	e007      	b.n	801f1dc <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801f1cc:	89fb      	ldrh	r3, [r7, #14]
 801f1ce:	1c5a      	adds	r2, r3, #1
 801f1d0:	81fa      	strh	r2, [r7, #14]
 801f1d2:	461a      	mov	r2, r3
 801f1d4:	68bb      	ldr	r3, [r7, #8]
 801f1d6:	4413      	add	r3, r2
 801f1d8:	2200      	movs	r2, #0
 801f1da:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801f1dc:	89fb      	ldrh	r3, [r7, #14]
 801f1de:	2b43      	cmp	r3, #67	; 0x43
 801f1e0:	d904      	bls.n	801f1ec <dhcp_option_trailer+0x40>
 801f1e2:	89fb      	ldrh	r3, [r7, #14]
 801f1e4:	f003 0303 	and.w	r3, r3, #3
 801f1e8:	2b00      	cmp	r3, #0
 801f1ea:	d002      	beq.n	801f1f2 <dhcp_option_trailer+0x46>
 801f1ec:	89fb      	ldrh	r3, [r7, #14]
 801f1ee:	2b43      	cmp	r3, #67	; 0x43
 801f1f0:	d9ec      	bls.n	801f1cc <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801f1f2:	89fb      	ldrh	r3, [r7, #14]
 801f1f4:	33f0      	adds	r3, #240	; 0xf0
 801f1f6:	b29b      	uxth	r3, r3
 801f1f8:	4619      	mov	r1, r3
 801f1fa:	6878      	ldr	r0, [r7, #4]
 801f1fc:	f7f6 fa82 	bl	8015704 <pbuf_realloc>
}
 801f200:	bf00      	nop
 801f202:	3710      	adds	r7, #16
 801f204:	46bd      	mov	sp, r7
 801f206:	bd80      	pop	{r7, pc}

0801f208 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801f208:	b480      	push	{r7}
 801f20a:	b085      	sub	sp, #20
 801f20c:	af00      	add	r7, sp, #0
 801f20e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801f210:	687b      	ldr	r3, [r7, #4]
 801f212:	2b00      	cmp	r3, #0
 801f214:	d017      	beq.n	801f246 <dhcp_supplied_address+0x3e>
 801f216:	687b      	ldr	r3, [r7, #4]
 801f218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f21a:	2b00      	cmp	r3, #0
 801f21c:	d013      	beq.n	801f246 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801f21e:	687b      	ldr	r3, [r7, #4]
 801f220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f222:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801f224:	68fb      	ldr	r3, [r7, #12]
 801f226:	795b      	ldrb	r3, [r3, #5]
 801f228:	2b0a      	cmp	r3, #10
 801f22a:	d007      	beq.n	801f23c <dhcp_supplied_address+0x34>
 801f22c:	68fb      	ldr	r3, [r7, #12]
 801f22e:	795b      	ldrb	r3, [r3, #5]
 801f230:	2b05      	cmp	r3, #5
 801f232:	d003      	beq.n	801f23c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801f234:	68fb      	ldr	r3, [r7, #12]
 801f236:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801f238:	2b04      	cmp	r3, #4
 801f23a:	d101      	bne.n	801f240 <dhcp_supplied_address+0x38>
 801f23c:	2301      	movs	r3, #1
 801f23e:	e000      	b.n	801f242 <dhcp_supplied_address+0x3a>
 801f240:	2300      	movs	r3, #0
 801f242:	b2db      	uxtb	r3, r3
 801f244:	e000      	b.n	801f248 <dhcp_supplied_address+0x40>
  }
  return 0;
 801f246:	2300      	movs	r3, #0
}
 801f248:	4618      	mov	r0, r3
 801f24a:	3714      	adds	r7, #20
 801f24c:	46bd      	mov	sp, r7
 801f24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f252:	4770      	bx	lr

0801f254 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801f254:	b580      	push	{r7, lr}
 801f256:	b082      	sub	sp, #8
 801f258:	af00      	add	r7, sp, #0
 801f25a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801f25c:	4915      	ldr	r1, [pc, #84]	; (801f2b4 <etharp_free_entry+0x60>)
 801f25e:	687a      	ldr	r2, [r7, #4]
 801f260:	4613      	mov	r3, r2
 801f262:	005b      	lsls	r3, r3, #1
 801f264:	4413      	add	r3, r2
 801f266:	00db      	lsls	r3, r3, #3
 801f268:	440b      	add	r3, r1
 801f26a:	681b      	ldr	r3, [r3, #0]
 801f26c:	2b00      	cmp	r3, #0
 801f26e:	d013      	beq.n	801f298 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801f270:	4910      	ldr	r1, [pc, #64]	; (801f2b4 <etharp_free_entry+0x60>)
 801f272:	687a      	ldr	r2, [r7, #4]
 801f274:	4613      	mov	r3, r2
 801f276:	005b      	lsls	r3, r3, #1
 801f278:	4413      	add	r3, r2
 801f27a:	00db      	lsls	r3, r3, #3
 801f27c:	440b      	add	r3, r1
 801f27e:	681b      	ldr	r3, [r3, #0]
 801f280:	4618      	mov	r0, r3
 801f282:	f7f6 fbf7 	bl	8015a74 <pbuf_free>
    arp_table[i].q = NULL;
 801f286:	490b      	ldr	r1, [pc, #44]	; (801f2b4 <etharp_free_entry+0x60>)
 801f288:	687a      	ldr	r2, [r7, #4]
 801f28a:	4613      	mov	r3, r2
 801f28c:	005b      	lsls	r3, r3, #1
 801f28e:	4413      	add	r3, r2
 801f290:	00db      	lsls	r3, r3, #3
 801f292:	440b      	add	r3, r1
 801f294:	2200      	movs	r2, #0
 801f296:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801f298:	4906      	ldr	r1, [pc, #24]	; (801f2b4 <etharp_free_entry+0x60>)
 801f29a:	687a      	ldr	r2, [r7, #4]
 801f29c:	4613      	mov	r3, r2
 801f29e:	005b      	lsls	r3, r3, #1
 801f2a0:	4413      	add	r3, r2
 801f2a2:	00db      	lsls	r3, r3, #3
 801f2a4:	440b      	add	r3, r1
 801f2a6:	3314      	adds	r3, #20
 801f2a8:	2200      	movs	r2, #0
 801f2aa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801f2ac:	bf00      	nop
 801f2ae:	3708      	adds	r7, #8
 801f2b0:	46bd      	mov	sp, r7
 801f2b2:	bd80      	pop	{r7, pc}
 801f2b4:	24004fd8 	.word	0x24004fd8

0801f2b8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801f2b8:	b580      	push	{r7, lr}
 801f2ba:	b082      	sub	sp, #8
 801f2bc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801f2be:	2300      	movs	r3, #0
 801f2c0:	607b      	str	r3, [r7, #4]
 801f2c2:	e096      	b.n	801f3f2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801f2c4:	494f      	ldr	r1, [pc, #316]	; (801f404 <etharp_tmr+0x14c>)
 801f2c6:	687a      	ldr	r2, [r7, #4]
 801f2c8:	4613      	mov	r3, r2
 801f2ca:	005b      	lsls	r3, r3, #1
 801f2cc:	4413      	add	r3, r2
 801f2ce:	00db      	lsls	r3, r3, #3
 801f2d0:	440b      	add	r3, r1
 801f2d2:	3314      	adds	r3, #20
 801f2d4:	781b      	ldrb	r3, [r3, #0]
 801f2d6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801f2d8:	78fb      	ldrb	r3, [r7, #3]
 801f2da:	2b00      	cmp	r3, #0
 801f2dc:	f000 8086 	beq.w	801f3ec <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801f2e0:	4948      	ldr	r1, [pc, #288]	; (801f404 <etharp_tmr+0x14c>)
 801f2e2:	687a      	ldr	r2, [r7, #4]
 801f2e4:	4613      	mov	r3, r2
 801f2e6:	005b      	lsls	r3, r3, #1
 801f2e8:	4413      	add	r3, r2
 801f2ea:	00db      	lsls	r3, r3, #3
 801f2ec:	440b      	add	r3, r1
 801f2ee:	3312      	adds	r3, #18
 801f2f0:	881b      	ldrh	r3, [r3, #0]
 801f2f2:	3301      	adds	r3, #1
 801f2f4:	b298      	uxth	r0, r3
 801f2f6:	4943      	ldr	r1, [pc, #268]	; (801f404 <etharp_tmr+0x14c>)
 801f2f8:	687a      	ldr	r2, [r7, #4]
 801f2fa:	4613      	mov	r3, r2
 801f2fc:	005b      	lsls	r3, r3, #1
 801f2fe:	4413      	add	r3, r2
 801f300:	00db      	lsls	r3, r3, #3
 801f302:	440b      	add	r3, r1
 801f304:	3312      	adds	r3, #18
 801f306:	4602      	mov	r2, r0
 801f308:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801f30a:	493e      	ldr	r1, [pc, #248]	; (801f404 <etharp_tmr+0x14c>)
 801f30c:	687a      	ldr	r2, [r7, #4]
 801f30e:	4613      	mov	r3, r2
 801f310:	005b      	lsls	r3, r3, #1
 801f312:	4413      	add	r3, r2
 801f314:	00db      	lsls	r3, r3, #3
 801f316:	440b      	add	r3, r1
 801f318:	3312      	adds	r3, #18
 801f31a:	881b      	ldrh	r3, [r3, #0]
 801f31c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801f320:	d215      	bcs.n	801f34e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801f322:	4938      	ldr	r1, [pc, #224]	; (801f404 <etharp_tmr+0x14c>)
 801f324:	687a      	ldr	r2, [r7, #4]
 801f326:	4613      	mov	r3, r2
 801f328:	005b      	lsls	r3, r3, #1
 801f32a:	4413      	add	r3, r2
 801f32c:	00db      	lsls	r3, r3, #3
 801f32e:	440b      	add	r3, r1
 801f330:	3314      	adds	r3, #20
 801f332:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801f334:	2b01      	cmp	r3, #1
 801f336:	d10e      	bne.n	801f356 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801f338:	4932      	ldr	r1, [pc, #200]	; (801f404 <etharp_tmr+0x14c>)
 801f33a:	687a      	ldr	r2, [r7, #4]
 801f33c:	4613      	mov	r3, r2
 801f33e:	005b      	lsls	r3, r3, #1
 801f340:	4413      	add	r3, r2
 801f342:	00db      	lsls	r3, r3, #3
 801f344:	440b      	add	r3, r1
 801f346:	3312      	adds	r3, #18
 801f348:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801f34a:	2b04      	cmp	r3, #4
 801f34c:	d903      	bls.n	801f356 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801f34e:	6878      	ldr	r0, [r7, #4]
 801f350:	f7ff ff80 	bl	801f254 <etharp_free_entry>
 801f354:	e04a      	b.n	801f3ec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801f356:	492b      	ldr	r1, [pc, #172]	; (801f404 <etharp_tmr+0x14c>)
 801f358:	687a      	ldr	r2, [r7, #4]
 801f35a:	4613      	mov	r3, r2
 801f35c:	005b      	lsls	r3, r3, #1
 801f35e:	4413      	add	r3, r2
 801f360:	00db      	lsls	r3, r3, #3
 801f362:	440b      	add	r3, r1
 801f364:	3314      	adds	r3, #20
 801f366:	781b      	ldrb	r3, [r3, #0]
 801f368:	2b03      	cmp	r3, #3
 801f36a:	d10a      	bne.n	801f382 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801f36c:	4925      	ldr	r1, [pc, #148]	; (801f404 <etharp_tmr+0x14c>)
 801f36e:	687a      	ldr	r2, [r7, #4]
 801f370:	4613      	mov	r3, r2
 801f372:	005b      	lsls	r3, r3, #1
 801f374:	4413      	add	r3, r2
 801f376:	00db      	lsls	r3, r3, #3
 801f378:	440b      	add	r3, r1
 801f37a:	3314      	adds	r3, #20
 801f37c:	2204      	movs	r2, #4
 801f37e:	701a      	strb	r2, [r3, #0]
 801f380:	e034      	b.n	801f3ec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801f382:	4920      	ldr	r1, [pc, #128]	; (801f404 <etharp_tmr+0x14c>)
 801f384:	687a      	ldr	r2, [r7, #4]
 801f386:	4613      	mov	r3, r2
 801f388:	005b      	lsls	r3, r3, #1
 801f38a:	4413      	add	r3, r2
 801f38c:	00db      	lsls	r3, r3, #3
 801f38e:	440b      	add	r3, r1
 801f390:	3314      	adds	r3, #20
 801f392:	781b      	ldrb	r3, [r3, #0]
 801f394:	2b04      	cmp	r3, #4
 801f396:	d10a      	bne.n	801f3ae <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801f398:	491a      	ldr	r1, [pc, #104]	; (801f404 <etharp_tmr+0x14c>)
 801f39a:	687a      	ldr	r2, [r7, #4]
 801f39c:	4613      	mov	r3, r2
 801f39e:	005b      	lsls	r3, r3, #1
 801f3a0:	4413      	add	r3, r2
 801f3a2:	00db      	lsls	r3, r3, #3
 801f3a4:	440b      	add	r3, r1
 801f3a6:	3314      	adds	r3, #20
 801f3a8:	2202      	movs	r2, #2
 801f3aa:	701a      	strb	r2, [r3, #0]
 801f3ac:	e01e      	b.n	801f3ec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801f3ae:	4915      	ldr	r1, [pc, #84]	; (801f404 <etharp_tmr+0x14c>)
 801f3b0:	687a      	ldr	r2, [r7, #4]
 801f3b2:	4613      	mov	r3, r2
 801f3b4:	005b      	lsls	r3, r3, #1
 801f3b6:	4413      	add	r3, r2
 801f3b8:	00db      	lsls	r3, r3, #3
 801f3ba:	440b      	add	r3, r1
 801f3bc:	3314      	adds	r3, #20
 801f3be:	781b      	ldrb	r3, [r3, #0]
 801f3c0:	2b01      	cmp	r3, #1
 801f3c2:	d113      	bne.n	801f3ec <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801f3c4:	490f      	ldr	r1, [pc, #60]	; (801f404 <etharp_tmr+0x14c>)
 801f3c6:	687a      	ldr	r2, [r7, #4]
 801f3c8:	4613      	mov	r3, r2
 801f3ca:	005b      	lsls	r3, r3, #1
 801f3cc:	4413      	add	r3, r2
 801f3ce:	00db      	lsls	r3, r3, #3
 801f3d0:	440b      	add	r3, r1
 801f3d2:	3308      	adds	r3, #8
 801f3d4:	6818      	ldr	r0, [r3, #0]
 801f3d6:	687a      	ldr	r2, [r7, #4]
 801f3d8:	4613      	mov	r3, r2
 801f3da:	005b      	lsls	r3, r3, #1
 801f3dc:	4413      	add	r3, r2
 801f3de:	00db      	lsls	r3, r3, #3
 801f3e0:	4a08      	ldr	r2, [pc, #32]	; (801f404 <etharp_tmr+0x14c>)
 801f3e2:	4413      	add	r3, r2
 801f3e4:	3304      	adds	r3, #4
 801f3e6:	4619      	mov	r1, r3
 801f3e8:	f000 fe72 	bl	80200d0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801f3ec:	687b      	ldr	r3, [r7, #4]
 801f3ee:	3301      	adds	r3, #1
 801f3f0:	607b      	str	r3, [r7, #4]
 801f3f2:	687b      	ldr	r3, [r7, #4]
 801f3f4:	2b09      	cmp	r3, #9
 801f3f6:	f77f af65 	ble.w	801f2c4 <etharp_tmr+0xc>
      }
    }
  }
}
 801f3fa:	bf00      	nop
 801f3fc:	bf00      	nop
 801f3fe:	3708      	adds	r7, #8
 801f400:	46bd      	mov	sp, r7
 801f402:	bd80      	pop	{r7, pc}
 801f404:	24004fd8 	.word	0x24004fd8

0801f408 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801f408:	b580      	push	{r7, lr}
 801f40a:	b08a      	sub	sp, #40	; 0x28
 801f40c:	af00      	add	r7, sp, #0
 801f40e:	60f8      	str	r0, [r7, #12]
 801f410:	460b      	mov	r3, r1
 801f412:	607a      	str	r2, [r7, #4]
 801f414:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801f416:	230a      	movs	r3, #10
 801f418:	84fb      	strh	r3, [r7, #38]	; 0x26
 801f41a:	230a      	movs	r3, #10
 801f41c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801f41e:	230a      	movs	r3, #10
 801f420:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801f422:	2300      	movs	r3, #0
 801f424:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801f426:	230a      	movs	r3, #10
 801f428:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801f42a:	2300      	movs	r3, #0
 801f42c:	83bb      	strh	r3, [r7, #28]
 801f42e:	2300      	movs	r3, #0
 801f430:	837b      	strh	r3, [r7, #26]
 801f432:	2300      	movs	r3, #0
 801f434:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801f436:	2300      	movs	r3, #0
 801f438:	843b      	strh	r3, [r7, #32]
 801f43a:	e0ae      	b.n	801f59a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801f43c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f440:	49a6      	ldr	r1, [pc, #664]	; (801f6dc <etharp_find_entry+0x2d4>)
 801f442:	4613      	mov	r3, r2
 801f444:	005b      	lsls	r3, r3, #1
 801f446:	4413      	add	r3, r2
 801f448:	00db      	lsls	r3, r3, #3
 801f44a:	440b      	add	r3, r1
 801f44c:	3314      	adds	r3, #20
 801f44e:	781b      	ldrb	r3, [r3, #0]
 801f450:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801f452:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801f456:	2b0a      	cmp	r3, #10
 801f458:	d105      	bne.n	801f466 <etharp_find_entry+0x5e>
 801f45a:	7dfb      	ldrb	r3, [r7, #23]
 801f45c:	2b00      	cmp	r3, #0
 801f45e:	d102      	bne.n	801f466 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801f460:	8c3b      	ldrh	r3, [r7, #32]
 801f462:	847b      	strh	r3, [r7, #34]	; 0x22
 801f464:	e095      	b.n	801f592 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801f466:	7dfb      	ldrb	r3, [r7, #23]
 801f468:	2b00      	cmp	r3, #0
 801f46a:	f000 8092 	beq.w	801f592 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801f46e:	7dfb      	ldrb	r3, [r7, #23]
 801f470:	2b01      	cmp	r3, #1
 801f472:	d009      	beq.n	801f488 <etharp_find_entry+0x80>
 801f474:	7dfb      	ldrb	r3, [r7, #23]
 801f476:	2b01      	cmp	r3, #1
 801f478:	d806      	bhi.n	801f488 <etharp_find_entry+0x80>
 801f47a:	4b99      	ldr	r3, [pc, #612]	; (801f6e0 <etharp_find_entry+0x2d8>)
 801f47c:	f240 1223 	movw	r2, #291	; 0x123
 801f480:	4998      	ldr	r1, [pc, #608]	; (801f6e4 <etharp_find_entry+0x2dc>)
 801f482:	4899      	ldr	r0, [pc, #612]	; (801f6e8 <etharp_find_entry+0x2e0>)
 801f484:	f007 fd26 	bl	8026ed4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801f488:	68fb      	ldr	r3, [r7, #12]
 801f48a:	2b00      	cmp	r3, #0
 801f48c:	d020      	beq.n	801f4d0 <etharp_find_entry+0xc8>
 801f48e:	68fb      	ldr	r3, [r7, #12]
 801f490:	6819      	ldr	r1, [r3, #0]
 801f492:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f496:	4891      	ldr	r0, [pc, #580]	; (801f6dc <etharp_find_entry+0x2d4>)
 801f498:	4613      	mov	r3, r2
 801f49a:	005b      	lsls	r3, r3, #1
 801f49c:	4413      	add	r3, r2
 801f49e:	00db      	lsls	r3, r3, #3
 801f4a0:	4403      	add	r3, r0
 801f4a2:	3304      	adds	r3, #4
 801f4a4:	681b      	ldr	r3, [r3, #0]
 801f4a6:	4299      	cmp	r1, r3
 801f4a8:	d112      	bne.n	801f4d0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801f4aa:	687b      	ldr	r3, [r7, #4]
 801f4ac:	2b00      	cmp	r3, #0
 801f4ae:	d00c      	beq.n	801f4ca <etharp_find_entry+0xc2>
 801f4b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f4b4:	4989      	ldr	r1, [pc, #548]	; (801f6dc <etharp_find_entry+0x2d4>)
 801f4b6:	4613      	mov	r3, r2
 801f4b8:	005b      	lsls	r3, r3, #1
 801f4ba:	4413      	add	r3, r2
 801f4bc:	00db      	lsls	r3, r3, #3
 801f4be:	440b      	add	r3, r1
 801f4c0:	3308      	adds	r3, #8
 801f4c2:	681b      	ldr	r3, [r3, #0]
 801f4c4:	687a      	ldr	r2, [r7, #4]
 801f4c6:	429a      	cmp	r2, r3
 801f4c8:	d102      	bne.n	801f4d0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801f4ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801f4ce:	e100      	b.n	801f6d2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801f4d0:	7dfb      	ldrb	r3, [r7, #23]
 801f4d2:	2b01      	cmp	r3, #1
 801f4d4:	d140      	bne.n	801f558 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801f4d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f4da:	4980      	ldr	r1, [pc, #512]	; (801f6dc <etharp_find_entry+0x2d4>)
 801f4dc:	4613      	mov	r3, r2
 801f4de:	005b      	lsls	r3, r3, #1
 801f4e0:	4413      	add	r3, r2
 801f4e2:	00db      	lsls	r3, r3, #3
 801f4e4:	440b      	add	r3, r1
 801f4e6:	681b      	ldr	r3, [r3, #0]
 801f4e8:	2b00      	cmp	r3, #0
 801f4ea:	d01a      	beq.n	801f522 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801f4ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f4f0:	497a      	ldr	r1, [pc, #488]	; (801f6dc <etharp_find_entry+0x2d4>)
 801f4f2:	4613      	mov	r3, r2
 801f4f4:	005b      	lsls	r3, r3, #1
 801f4f6:	4413      	add	r3, r2
 801f4f8:	00db      	lsls	r3, r3, #3
 801f4fa:	440b      	add	r3, r1
 801f4fc:	3312      	adds	r3, #18
 801f4fe:	881b      	ldrh	r3, [r3, #0]
 801f500:	8bba      	ldrh	r2, [r7, #28]
 801f502:	429a      	cmp	r2, r3
 801f504:	d845      	bhi.n	801f592 <etharp_find_entry+0x18a>
            old_queue = i;
 801f506:	8c3b      	ldrh	r3, [r7, #32]
 801f508:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801f50a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f50e:	4973      	ldr	r1, [pc, #460]	; (801f6dc <etharp_find_entry+0x2d4>)
 801f510:	4613      	mov	r3, r2
 801f512:	005b      	lsls	r3, r3, #1
 801f514:	4413      	add	r3, r2
 801f516:	00db      	lsls	r3, r3, #3
 801f518:	440b      	add	r3, r1
 801f51a:	3312      	adds	r3, #18
 801f51c:	881b      	ldrh	r3, [r3, #0]
 801f51e:	83bb      	strh	r3, [r7, #28]
 801f520:	e037      	b.n	801f592 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801f522:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f526:	496d      	ldr	r1, [pc, #436]	; (801f6dc <etharp_find_entry+0x2d4>)
 801f528:	4613      	mov	r3, r2
 801f52a:	005b      	lsls	r3, r3, #1
 801f52c:	4413      	add	r3, r2
 801f52e:	00db      	lsls	r3, r3, #3
 801f530:	440b      	add	r3, r1
 801f532:	3312      	adds	r3, #18
 801f534:	881b      	ldrh	r3, [r3, #0]
 801f536:	8b7a      	ldrh	r2, [r7, #26]
 801f538:	429a      	cmp	r2, r3
 801f53a:	d82a      	bhi.n	801f592 <etharp_find_entry+0x18a>
            old_pending = i;
 801f53c:	8c3b      	ldrh	r3, [r7, #32]
 801f53e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801f540:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f544:	4965      	ldr	r1, [pc, #404]	; (801f6dc <etharp_find_entry+0x2d4>)
 801f546:	4613      	mov	r3, r2
 801f548:	005b      	lsls	r3, r3, #1
 801f54a:	4413      	add	r3, r2
 801f54c:	00db      	lsls	r3, r3, #3
 801f54e:	440b      	add	r3, r1
 801f550:	3312      	adds	r3, #18
 801f552:	881b      	ldrh	r3, [r3, #0]
 801f554:	837b      	strh	r3, [r7, #26]
 801f556:	e01c      	b.n	801f592 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801f558:	7dfb      	ldrb	r3, [r7, #23]
 801f55a:	2b01      	cmp	r3, #1
 801f55c:	d919      	bls.n	801f592 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801f55e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f562:	495e      	ldr	r1, [pc, #376]	; (801f6dc <etharp_find_entry+0x2d4>)
 801f564:	4613      	mov	r3, r2
 801f566:	005b      	lsls	r3, r3, #1
 801f568:	4413      	add	r3, r2
 801f56a:	00db      	lsls	r3, r3, #3
 801f56c:	440b      	add	r3, r1
 801f56e:	3312      	adds	r3, #18
 801f570:	881b      	ldrh	r3, [r3, #0]
 801f572:	8b3a      	ldrh	r2, [r7, #24]
 801f574:	429a      	cmp	r2, r3
 801f576:	d80c      	bhi.n	801f592 <etharp_find_entry+0x18a>
            old_stable = i;
 801f578:	8c3b      	ldrh	r3, [r7, #32]
 801f57a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801f57c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f580:	4956      	ldr	r1, [pc, #344]	; (801f6dc <etharp_find_entry+0x2d4>)
 801f582:	4613      	mov	r3, r2
 801f584:	005b      	lsls	r3, r3, #1
 801f586:	4413      	add	r3, r2
 801f588:	00db      	lsls	r3, r3, #3
 801f58a:	440b      	add	r3, r1
 801f58c:	3312      	adds	r3, #18
 801f58e:	881b      	ldrh	r3, [r3, #0]
 801f590:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801f592:	8c3b      	ldrh	r3, [r7, #32]
 801f594:	3301      	adds	r3, #1
 801f596:	b29b      	uxth	r3, r3
 801f598:	843b      	strh	r3, [r7, #32]
 801f59a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801f59e:	2b09      	cmp	r3, #9
 801f5a0:	f77f af4c 	ble.w	801f43c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801f5a4:	7afb      	ldrb	r3, [r7, #11]
 801f5a6:	f003 0302 	and.w	r3, r3, #2
 801f5aa:	2b00      	cmp	r3, #0
 801f5ac:	d108      	bne.n	801f5c0 <etharp_find_entry+0x1b8>
 801f5ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801f5b2:	2b0a      	cmp	r3, #10
 801f5b4:	d107      	bne.n	801f5c6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801f5b6:	7afb      	ldrb	r3, [r7, #11]
 801f5b8:	f003 0301 	and.w	r3, r3, #1
 801f5bc:	2b00      	cmp	r3, #0
 801f5be:	d102      	bne.n	801f5c6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801f5c0:	f04f 33ff 	mov.w	r3, #4294967295
 801f5c4:	e085      	b.n	801f6d2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801f5c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801f5ca:	2b09      	cmp	r3, #9
 801f5cc:	dc02      	bgt.n	801f5d4 <etharp_find_entry+0x1cc>
    i = empty;
 801f5ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f5d0:	843b      	strh	r3, [r7, #32]
 801f5d2:	e039      	b.n	801f648 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801f5d4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801f5d8:	2b09      	cmp	r3, #9
 801f5da:	dc14      	bgt.n	801f606 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801f5dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f5de:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801f5e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f5e4:	493d      	ldr	r1, [pc, #244]	; (801f6dc <etharp_find_entry+0x2d4>)
 801f5e6:	4613      	mov	r3, r2
 801f5e8:	005b      	lsls	r3, r3, #1
 801f5ea:	4413      	add	r3, r2
 801f5ec:	00db      	lsls	r3, r3, #3
 801f5ee:	440b      	add	r3, r1
 801f5f0:	681b      	ldr	r3, [r3, #0]
 801f5f2:	2b00      	cmp	r3, #0
 801f5f4:	d018      	beq.n	801f628 <etharp_find_entry+0x220>
 801f5f6:	4b3a      	ldr	r3, [pc, #232]	; (801f6e0 <etharp_find_entry+0x2d8>)
 801f5f8:	f240 126d 	movw	r2, #365	; 0x16d
 801f5fc:	493b      	ldr	r1, [pc, #236]	; (801f6ec <etharp_find_entry+0x2e4>)
 801f5fe:	483a      	ldr	r0, [pc, #232]	; (801f6e8 <etharp_find_entry+0x2e0>)
 801f600:	f007 fc68 	bl	8026ed4 <iprintf>
 801f604:	e010      	b.n	801f628 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801f606:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801f60a:	2b09      	cmp	r3, #9
 801f60c:	dc02      	bgt.n	801f614 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801f60e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801f610:	843b      	strh	r3, [r7, #32]
 801f612:	e009      	b.n	801f628 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801f614:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801f618:	2b09      	cmp	r3, #9
 801f61a:	dc02      	bgt.n	801f622 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801f61c:	8bfb      	ldrh	r3, [r7, #30]
 801f61e:	843b      	strh	r3, [r7, #32]
 801f620:	e002      	b.n	801f628 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801f622:	f04f 33ff 	mov.w	r3, #4294967295
 801f626:	e054      	b.n	801f6d2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801f628:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801f62c:	2b09      	cmp	r3, #9
 801f62e:	dd06      	ble.n	801f63e <etharp_find_entry+0x236>
 801f630:	4b2b      	ldr	r3, [pc, #172]	; (801f6e0 <etharp_find_entry+0x2d8>)
 801f632:	f240 127f 	movw	r2, #383	; 0x17f
 801f636:	492e      	ldr	r1, [pc, #184]	; (801f6f0 <etharp_find_entry+0x2e8>)
 801f638:	482b      	ldr	r0, [pc, #172]	; (801f6e8 <etharp_find_entry+0x2e0>)
 801f63a:	f007 fc4b 	bl	8026ed4 <iprintf>
    etharp_free_entry(i);
 801f63e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801f642:	4618      	mov	r0, r3
 801f644:	f7ff fe06 	bl	801f254 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801f648:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801f64c:	2b09      	cmp	r3, #9
 801f64e:	dd06      	ble.n	801f65e <etharp_find_entry+0x256>
 801f650:	4b23      	ldr	r3, [pc, #140]	; (801f6e0 <etharp_find_entry+0x2d8>)
 801f652:	f240 1283 	movw	r2, #387	; 0x183
 801f656:	4926      	ldr	r1, [pc, #152]	; (801f6f0 <etharp_find_entry+0x2e8>)
 801f658:	4823      	ldr	r0, [pc, #140]	; (801f6e8 <etharp_find_entry+0x2e0>)
 801f65a:	f007 fc3b 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801f65e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f662:	491e      	ldr	r1, [pc, #120]	; (801f6dc <etharp_find_entry+0x2d4>)
 801f664:	4613      	mov	r3, r2
 801f666:	005b      	lsls	r3, r3, #1
 801f668:	4413      	add	r3, r2
 801f66a:	00db      	lsls	r3, r3, #3
 801f66c:	440b      	add	r3, r1
 801f66e:	3314      	adds	r3, #20
 801f670:	781b      	ldrb	r3, [r3, #0]
 801f672:	2b00      	cmp	r3, #0
 801f674:	d006      	beq.n	801f684 <etharp_find_entry+0x27c>
 801f676:	4b1a      	ldr	r3, [pc, #104]	; (801f6e0 <etharp_find_entry+0x2d8>)
 801f678:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801f67c:	491d      	ldr	r1, [pc, #116]	; (801f6f4 <etharp_find_entry+0x2ec>)
 801f67e:	481a      	ldr	r0, [pc, #104]	; (801f6e8 <etharp_find_entry+0x2e0>)
 801f680:	f007 fc28 	bl	8026ed4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801f684:	68fb      	ldr	r3, [r7, #12]
 801f686:	2b00      	cmp	r3, #0
 801f688:	d00b      	beq.n	801f6a2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801f68a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f68e:	68fb      	ldr	r3, [r7, #12]
 801f690:	6819      	ldr	r1, [r3, #0]
 801f692:	4812      	ldr	r0, [pc, #72]	; (801f6dc <etharp_find_entry+0x2d4>)
 801f694:	4613      	mov	r3, r2
 801f696:	005b      	lsls	r3, r3, #1
 801f698:	4413      	add	r3, r2
 801f69a:	00db      	lsls	r3, r3, #3
 801f69c:	4403      	add	r3, r0
 801f69e:	3304      	adds	r3, #4
 801f6a0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801f6a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f6a6:	490d      	ldr	r1, [pc, #52]	; (801f6dc <etharp_find_entry+0x2d4>)
 801f6a8:	4613      	mov	r3, r2
 801f6aa:	005b      	lsls	r3, r3, #1
 801f6ac:	4413      	add	r3, r2
 801f6ae:	00db      	lsls	r3, r3, #3
 801f6b0:	440b      	add	r3, r1
 801f6b2:	3312      	adds	r3, #18
 801f6b4:	2200      	movs	r2, #0
 801f6b6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801f6b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f6bc:	4907      	ldr	r1, [pc, #28]	; (801f6dc <etharp_find_entry+0x2d4>)
 801f6be:	4613      	mov	r3, r2
 801f6c0:	005b      	lsls	r3, r3, #1
 801f6c2:	4413      	add	r3, r2
 801f6c4:	00db      	lsls	r3, r3, #3
 801f6c6:	440b      	add	r3, r1
 801f6c8:	3308      	adds	r3, #8
 801f6ca:	687a      	ldr	r2, [r7, #4]
 801f6cc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801f6ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801f6d2:	4618      	mov	r0, r3
 801f6d4:	3728      	adds	r7, #40	; 0x28
 801f6d6:	46bd      	mov	sp, r7
 801f6d8:	bd80      	pop	{r7, pc}
 801f6da:	bf00      	nop
 801f6dc:	24004fd8 	.word	0x24004fd8
 801f6e0:	0802dc18 	.word	0x0802dc18
 801f6e4:	0802dc50 	.word	0x0802dc50
 801f6e8:	0802dc90 	.word	0x0802dc90
 801f6ec:	0802dcb8 	.word	0x0802dcb8
 801f6f0:	0802dcd0 	.word	0x0802dcd0
 801f6f4:	0802dce4 	.word	0x0802dce4

0801f6f8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801f6f8:	b580      	push	{r7, lr}
 801f6fa:	b088      	sub	sp, #32
 801f6fc:	af02      	add	r7, sp, #8
 801f6fe:	60f8      	str	r0, [r7, #12]
 801f700:	60b9      	str	r1, [r7, #8]
 801f702:	607a      	str	r2, [r7, #4]
 801f704:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801f706:	68fb      	ldr	r3, [r7, #12]
 801f708:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801f70c:	2b06      	cmp	r3, #6
 801f70e:	d006      	beq.n	801f71e <etharp_update_arp_entry+0x26>
 801f710:	4b48      	ldr	r3, [pc, #288]	; (801f834 <etharp_update_arp_entry+0x13c>)
 801f712:	f240 12a9 	movw	r2, #425	; 0x1a9
 801f716:	4948      	ldr	r1, [pc, #288]	; (801f838 <etharp_update_arp_entry+0x140>)
 801f718:	4848      	ldr	r0, [pc, #288]	; (801f83c <etharp_update_arp_entry+0x144>)
 801f71a:	f007 fbdb 	bl	8026ed4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801f71e:	68bb      	ldr	r3, [r7, #8]
 801f720:	2b00      	cmp	r3, #0
 801f722:	d012      	beq.n	801f74a <etharp_update_arp_entry+0x52>
 801f724:	68bb      	ldr	r3, [r7, #8]
 801f726:	681b      	ldr	r3, [r3, #0]
 801f728:	2b00      	cmp	r3, #0
 801f72a:	d00e      	beq.n	801f74a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801f72c:	68bb      	ldr	r3, [r7, #8]
 801f72e:	681b      	ldr	r3, [r3, #0]
 801f730:	68f9      	ldr	r1, [r7, #12]
 801f732:	4618      	mov	r0, r3
 801f734:	f001 f946 	bl	80209c4 <ip4_addr_isbroadcast_u32>
 801f738:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801f73a:	2b00      	cmp	r3, #0
 801f73c:	d105      	bne.n	801f74a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801f73e:	68bb      	ldr	r3, [r7, #8]
 801f740:	681b      	ldr	r3, [r3, #0]
 801f742:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801f746:	2be0      	cmp	r3, #224	; 0xe0
 801f748:	d102      	bne.n	801f750 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801f74a:	f06f 030f 	mvn.w	r3, #15
 801f74e:	e06c      	b.n	801f82a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801f750:	78fb      	ldrb	r3, [r7, #3]
 801f752:	68fa      	ldr	r2, [r7, #12]
 801f754:	4619      	mov	r1, r3
 801f756:	68b8      	ldr	r0, [r7, #8]
 801f758:	f7ff fe56 	bl	801f408 <etharp_find_entry>
 801f75c:	4603      	mov	r3, r0
 801f75e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801f760:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801f764:	2b00      	cmp	r3, #0
 801f766:	da02      	bge.n	801f76e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801f768:	8afb      	ldrh	r3, [r7, #22]
 801f76a:	b25b      	sxtb	r3, r3
 801f76c:	e05d      	b.n	801f82a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801f76e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801f772:	4933      	ldr	r1, [pc, #204]	; (801f840 <etharp_update_arp_entry+0x148>)
 801f774:	4613      	mov	r3, r2
 801f776:	005b      	lsls	r3, r3, #1
 801f778:	4413      	add	r3, r2
 801f77a:	00db      	lsls	r3, r3, #3
 801f77c:	440b      	add	r3, r1
 801f77e:	3314      	adds	r3, #20
 801f780:	2202      	movs	r2, #2
 801f782:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801f784:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801f788:	492d      	ldr	r1, [pc, #180]	; (801f840 <etharp_update_arp_entry+0x148>)
 801f78a:	4613      	mov	r3, r2
 801f78c:	005b      	lsls	r3, r3, #1
 801f78e:	4413      	add	r3, r2
 801f790:	00db      	lsls	r3, r3, #3
 801f792:	440b      	add	r3, r1
 801f794:	3308      	adds	r3, #8
 801f796:	68fa      	ldr	r2, [r7, #12]
 801f798:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801f79a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801f79e:	4613      	mov	r3, r2
 801f7a0:	005b      	lsls	r3, r3, #1
 801f7a2:	4413      	add	r3, r2
 801f7a4:	00db      	lsls	r3, r3, #3
 801f7a6:	3308      	adds	r3, #8
 801f7a8:	4a25      	ldr	r2, [pc, #148]	; (801f840 <etharp_update_arp_entry+0x148>)
 801f7aa:	4413      	add	r3, r2
 801f7ac:	3304      	adds	r3, #4
 801f7ae:	2206      	movs	r2, #6
 801f7b0:	6879      	ldr	r1, [r7, #4]
 801f7b2:	4618      	mov	r0, r3
 801f7b4:	f006 fd08 	bl	80261c8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801f7b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801f7bc:	4920      	ldr	r1, [pc, #128]	; (801f840 <etharp_update_arp_entry+0x148>)
 801f7be:	4613      	mov	r3, r2
 801f7c0:	005b      	lsls	r3, r3, #1
 801f7c2:	4413      	add	r3, r2
 801f7c4:	00db      	lsls	r3, r3, #3
 801f7c6:	440b      	add	r3, r1
 801f7c8:	3312      	adds	r3, #18
 801f7ca:	2200      	movs	r2, #0
 801f7cc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801f7ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801f7d2:	491b      	ldr	r1, [pc, #108]	; (801f840 <etharp_update_arp_entry+0x148>)
 801f7d4:	4613      	mov	r3, r2
 801f7d6:	005b      	lsls	r3, r3, #1
 801f7d8:	4413      	add	r3, r2
 801f7da:	00db      	lsls	r3, r3, #3
 801f7dc:	440b      	add	r3, r1
 801f7de:	681b      	ldr	r3, [r3, #0]
 801f7e0:	2b00      	cmp	r3, #0
 801f7e2:	d021      	beq.n	801f828 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801f7e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801f7e8:	4915      	ldr	r1, [pc, #84]	; (801f840 <etharp_update_arp_entry+0x148>)
 801f7ea:	4613      	mov	r3, r2
 801f7ec:	005b      	lsls	r3, r3, #1
 801f7ee:	4413      	add	r3, r2
 801f7f0:	00db      	lsls	r3, r3, #3
 801f7f2:	440b      	add	r3, r1
 801f7f4:	681b      	ldr	r3, [r3, #0]
 801f7f6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801f7f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801f7fc:	4910      	ldr	r1, [pc, #64]	; (801f840 <etharp_update_arp_entry+0x148>)
 801f7fe:	4613      	mov	r3, r2
 801f800:	005b      	lsls	r3, r3, #1
 801f802:	4413      	add	r3, r2
 801f804:	00db      	lsls	r3, r3, #3
 801f806:	440b      	add	r3, r1
 801f808:	2200      	movs	r2, #0
 801f80a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801f80c:	68fb      	ldr	r3, [r7, #12]
 801f80e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801f812:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f816:	9300      	str	r3, [sp, #0]
 801f818:	687b      	ldr	r3, [r7, #4]
 801f81a:	6939      	ldr	r1, [r7, #16]
 801f81c:	68f8      	ldr	r0, [r7, #12]
 801f81e:	f002 f917 	bl	8021a50 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801f822:	6938      	ldr	r0, [r7, #16]
 801f824:	f7f6 f926 	bl	8015a74 <pbuf_free>
  }
  return ERR_OK;
 801f828:	2300      	movs	r3, #0
}
 801f82a:	4618      	mov	r0, r3
 801f82c:	3718      	adds	r7, #24
 801f82e:	46bd      	mov	sp, r7
 801f830:	bd80      	pop	{r7, pc}
 801f832:	bf00      	nop
 801f834:	0802dc18 	.word	0x0802dc18
 801f838:	0802dd10 	.word	0x0802dd10
 801f83c:	0802dc90 	.word	0x0802dc90
 801f840:	24004fd8 	.word	0x24004fd8

0801f844 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801f844:	b580      	push	{r7, lr}
 801f846:	b084      	sub	sp, #16
 801f848:	af00      	add	r7, sp, #0
 801f84a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801f84c:	2300      	movs	r3, #0
 801f84e:	60fb      	str	r3, [r7, #12]
 801f850:	e01e      	b.n	801f890 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801f852:	4913      	ldr	r1, [pc, #76]	; (801f8a0 <etharp_cleanup_netif+0x5c>)
 801f854:	68fa      	ldr	r2, [r7, #12]
 801f856:	4613      	mov	r3, r2
 801f858:	005b      	lsls	r3, r3, #1
 801f85a:	4413      	add	r3, r2
 801f85c:	00db      	lsls	r3, r3, #3
 801f85e:	440b      	add	r3, r1
 801f860:	3314      	adds	r3, #20
 801f862:	781b      	ldrb	r3, [r3, #0]
 801f864:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801f866:	7afb      	ldrb	r3, [r7, #11]
 801f868:	2b00      	cmp	r3, #0
 801f86a:	d00e      	beq.n	801f88a <etharp_cleanup_netif+0x46>
 801f86c:	490c      	ldr	r1, [pc, #48]	; (801f8a0 <etharp_cleanup_netif+0x5c>)
 801f86e:	68fa      	ldr	r2, [r7, #12]
 801f870:	4613      	mov	r3, r2
 801f872:	005b      	lsls	r3, r3, #1
 801f874:	4413      	add	r3, r2
 801f876:	00db      	lsls	r3, r3, #3
 801f878:	440b      	add	r3, r1
 801f87a:	3308      	adds	r3, #8
 801f87c:	681b      	ldr	r3, [r3, #0]
 801f87e:	687a      	ldr	r2, [r7, #4]
 801f880:	429a      	cmp	r2, r3
 801f882:	d102      	bne.n	801f88a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801f884:	68f8      	ldr	r0, [r7, #12]
 801f886:	f7ff fce5 	bl	801f254 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801f88a:	68fb      	ldr	r3, [r7, #12]
 801f88c:	3301      	adds	r3, #1
 801f88e:	60fb      	str	r3, [r7, #12]
 801f890:	68fb      	ldr	r3, [r7, #12]
 801f892:	2b09      	cmp	r3, #9
 801f894:	dddd      	ble.n	801f852 <etharp_cleanup_netif+0xe>
    }
  }
}
 801f896:	bf00      	nop
 801f898:	bf00      	nop
 801f89a:	3710      	adds	r7, #16
 801f89c:	46bd      	mov	sp, r7
 801f89e:	bd80      	pop	{r7, pc}
 801f8a0:	24004fd8 	.word	0x24004fd8

0801f8a4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801f8a4:	b5b0      	push	{r4, r5, r7, lr}
 801f8a6:	b08a      	sub	sp, #40	; 0x28
 801f8a8:	af04      	add	r7, sp, #16
 801f8aa:	6078      	str	r0, [r7, #4]
 801f8ac:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801f8ae:	683b      	ldr	r3, [r7, #0]
 801f8b0:	2b00      	cmp	r3, #0
 801f8b2:	d107      	bne.n	801f8c4 <etharp_input+0x20>
 801f8b4:	4b3f      	ldr	r3, [pc, #252]	; (801f9b4 <etharp_input+0x110>)
 801f8b6:	f240 228a 	movw	r2, #650	; 0x28a
 801f8ba:	493f      	ldr	r1, [pc, #252]	; (801f9b8 <etharp_input+0x114>)
 801f8bc:	483f      	ldr	r0, [pc, #252]	; (801f9bc <etharp_input+0x118>)
 801f8be:	f007 fb09 	bl	8026ed4 <iprintf>
 801f8c2:	e074      	b.n	801f9ae <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801f8c4:	687b      	ldr	r3, [r7, #4]
 801f8c6:	685b      	ldr	r3, [r3, #4]
 801f8c8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801f8ca:	693b      	ldr	r3, [r7, #16]
 801f8cc:	881b      	ldrh	r3, [r3, #0]
 801f8ce:	b29b      	uxth	r3, r3
 801f8d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f8d4:	d10c      	bne.n	801f8f0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801f8d6:	693b      	ldr	r3, [r7, #16]
 801f8d8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801f8da:	2b06      	cmp	r3, #6
 801f8dc:	d108      	bne.n	801f8f0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801f8de:	693b      	ldr	r3, [r7, #16]
 801f8e0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801f8e2:	2b04      	cmp	r3, #4
 801f8e4:	d104      	bne.n	801f8f0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801f8e6:	693b      	ldr	r3, [r7, #16]
 801f8e8:	885b      	ldrh	r3, [r3, #2]
 801f8ea:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801f8ec:	2b08      	cmp	r3, #8
 801f8ee:	d003      	beq.n	801f8f8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801f8f0:	6878      	ldr	r0, [r7, #4]
 801f8f2:	f7f6 f8bf 	bl	8015a74 <pbuf_free>
    return;
 801f8f6:	e05a      	b.n	801f9ae <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801f8f8:	693b      	ldr	r3, [r7, #16]
 801f8fa:	330e      	adds	r3, #14
 801f8fc:	681b      	ldr	r3, [r3, #0]
 801f8fe:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801f900:	693b      	ldr	r3, [r7, #16]
 801f902:	3318      	adds	r3, #24
 801f904:	681b      	ldr	r3, [r3, #0]
 801f906:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801f908:	683b      	ldr	r3, [r7, #0]
 801f90a:	3304      	adds	r3, #4
 801f90c:	681b      	ldr	r3, [r3, #0]
 801f90e:	2b00      	cmp	r3, #0
 801f910:	d102      	bne.n	801f918 <etharp_input+0x74>
    for_us = 0;
 801f912:	2300      	movs	r3, #0
 801f914:	75fb      	strb	r3, [r7, #23]
 801f916:	e009      	b.n	801f92c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801f918:	68ba      	ldr	r2, [r7, #8]
 801f91a:	683b      	ldr	r3, [r7, #0]
 801f91c:	3304      	adds	r3, #4
 801f91e:	681b      	ldr	r3, [r3, #0]
 801f920:	429a      	cmp	r2, r3
 801f922:	bf0c      	ite	eq
 801f924:	2301      	moveq	r3, #1
 801f926:	2300      	movne	r3, #0
 801f928:	b2db      	uxtb	r3, r3
 801f92a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801f92c:	693b      	ldr	r3, [r7, #16]
 801f92e:	f103 0208 	add.w	r2, r3, #8
 801f932:	7dfb      	ldrb	r3, [r7, #23]
 801f934:	2b00      	cmp	r3, #0
 801f936:	d001      	beq.n	801f93c <etharp_input+0x98>
 801f938:	2301      	movs	r3, #1
 801f93a:	e000      	b.n	801f93e <etharp_input+0x9a>
 801f93c:	2302      	movs	r3, #2
 801f93e:	f107 010c 	add.w	r1, r7, #12
 801f942:	6838      	ldr	r0, [r7, #0]
 801f944:	f7ff fed8 	bl	801f6f8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801f948:	693b      	ldr	r3, [r7, #16]
 801f94a:	88db      	ldrh	r3, [r3, #6]
 801f94c:	b29b      	uxth	r3, r3
 801f94e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f952:	d003      	beq.n	801f95c <etharp_input+0xb8>
 801f954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f958:	d01e      	beq.n	801f998 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801f95a:	e025      	b.n	801f9a8 <etharp_input+0x104>
      if (for_us) {
 801f95c:	7dfb      	ldrb	r3, [r7, #23]
 801f95e:	2b00      	cmp	r3, #0
 801f960:	d021      	beq.n	801f9a6 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801f962:	683b      	ldr	r3, [r7, #0]
 801f964:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801f968:	693b      	ldr	r3, [r7, #16]
 801f96a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801f96e:	683b      	ldr	r3, [r7, #0]
 801f970:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801f974:	683b      	ldr	r3, [r7, #0]
 801f976:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801f978:	693a      	ldr	r2, [r7, #16]
 801f97a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801f97c:	2102      	movs	r1, #2
 801f97e:	9103      	str	r1, [sp, #12]
 801f980:	f107 010c 	add.w	r1, r7, #12
 801f984:	9102      	str	r1, [sp, #8]
 801f986:	9201      	str	r2, [sp, #4]
 801f988:	9300      	str	r3, [sp, #0]
 801f98a:	462b      	mov	r3, r5
 801f98c:	4622      	mov	r2, r4
 801f98e:	4601      	mov	r1, r0
 801f990:	6838      	ldr	r0, [r7, #0]
 801f992:	f000 faef 	bl	801ff74 <etharp_raw>
      break;
 801f996:	e006      	b.n	801f9a6 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801f998:	f107 030c 	add.w	r3, r7, #12
 801f99c:	4619      	mov	r1, r3
 801f99e:	6838      	ldr	r0, [r7, #0]
 801f9a0:	f7fe f9cc 	bl	801dd3c <dhcp_arp_reply>
      break;
 801f9a4:	e000      	b.n	801f9a8 <etharp_input+0x104>
      break;
 801f9a6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801f9a8:	6878      	ldr	r0, [r7, #4]
 801f9aa:	f7f6 f863 	bl	8015a74 <pbuf_free>
}
 801f9ae:	3718      	adds	r7, #24
 801f9b0:	46bd      	mov	sp, r7
 801f9b2:	bdb0      	pop	{r4, r5, r7, pc}
 801f9b4:	0802dc18 	.word	0x0802dc18
 801f9b8:	0802dd68 	.word	0x0802dd68
 801f9bc:	0802dc90 	.word	0x0802dc90

0801f9c0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801f9c0:	b580      	push	{r7, lr}
 801f9c2:	b086      	sub	sp, #24
 801f9c4:	af02      	add	r7, sp, #8
 801f9c6:	60f8      	str	r0, [r7, #12]
 801f9c8:	60b9      	str	r1, [r7, #8]
 801f9ca:	4613      	mov	r3, r2
 801f9cc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801f9ce:	79fa      	ldrb	r2, [r7, #7]
 801f9d0:	4944      	ldr	r1, [pc, #272]	; (801fae4 <etharp_output_to_arp_index+0x124>)
 801f9d2:	4613      	mov	r3, r2
 801f9d4:	005b      	lsls	r3, r3, #1
 801f9d6:	4413      	add	r3, r2
 801f9d8:	00db      	lsls	r3, r3, #3
 801f9da:	440b      	add	r3, r1
 801f9dc:	3314      	adds	r3, #20
 801f9de:	781b      	ldrb	r3, [r3, #0]
 801f9e0:	2b01      	cmp	r3, #1
 801f9e2:	d806      	bhi.n	801f9f2 <etharp_output_to_arp_index+0x32>
 801f9e4:	4b40      	ldr	r3, [pc, #256]	; (801fae8 <etharp_output_to_arp_index+0x128>)
 801f9e6:	f240 22ee 	movw	r2, #750	; 0x2ee
 801f9ea:	4940      	ldr	r1, [pc, #256]	; (801faec <etharp_output_to_arp_index+0x12c>)
 801f9ec:	4840      	ldr	r0, [pc, #256]	; (801faf0 <etharp_output_to_arp_index+0x130>)
 801f9ee:	f007 fa71 	bl	8026ed4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801f9f2:	79fa      	ldrb	r2, [r7, #7]
 801f9f4:	493b      	ldr	r1, [pc, #236]	; (801fae4 <etharp_output_to_arp_index+0x124>)
 801f9f6:	4613      	mov	r3, r2
 801f9f8:	005b      	lsls	r3, r3, #1
 801f9fa:	4413      	add	r3, r2
 801f9fc:	00db      	lsls	r3, r3, #3
 801f9fe:	440b      	add	r3, r1
 801fa00:	3314      	adds	r3, #20
 801fa02:	781b      	ldrb	r3, [r3, #0]
 801fa04:	2b02      	cmp	r3, #2
 801fa06:	d153      	bne.n	801fab0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801fa08:	79fa      	ldrb	r2, [r7, #7]
 801fa0a:	4936      	ldr	r1, [pc, #216]	; (801fae4 <etharp_output_to_arp_index+0x124>)
 801fa0c:	4613      	mov	r3, r2
 801fa0e:	005b      	lsls	r3, r3, #1
 801fa10:	4413      	add	r3, r2
 801fa12:	00db      	lsls	r3, r3, #3
 801fa14:	440b      	add	r3, r1
 801fa16:	3312      	adds	r3, #18
 801fa18:	881b      	ldrh	r3, [r3, #0]
 801fa1a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801fa1e:	d919      	bls.n	801fa54 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801fa20:	79fa      	ldrb	r2, [r7, #7]
 801fa22:	4613      	mov	r3, r2
 801fa24:	005b      	lsls	r3, r3, #1
 801fa26:	4413      	add	r3, r2
 801fa28:	00db      	lsls	r3, r3, #3
 801fa2a:	4a2e      	ldr	r2, [pc, #184]	; (801fae4 <etharp_output_to_arp_index+0x124>)
 801fa2c:	4413      	add	r3, r2
 801fa2e:	3304      	adds	r3, #4
 801fa30:	4619      	mov	r1, r3
 801fa32:	68f8      	ldr	r0, [r7, #12]
 801fa34:	f000 fb4c 	bl	80200d0 <etharp_request>
 801fa38:	4603      	mov	r3, r0
 801fa3a:	2b00      	cmp	r3, #0
 801fa3c:	d138      	bne.n	801fab0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801fa3e:	79fa      	ldrb	r2, [r7, #7]
 801fa40:	4928      	ldr	r1, [pc, #160]	; (801fae4 <etharp_output_to_arp_index+0x124>)
 801fa42:	4613      	mov	r3, r2
 801fa44:	005b      	lsls	r3, r3, #1
 801fa46:	4413      	add	r3, r2
 801fa48:	00db      	lsls	r3, r3, #3
 801fa4a:	440b      	add	r3, r1
 801fa4c:	3314      	adds	r3, #20
 801fa4e:	2203      	movs	r2, #3
 801fa50:	701a      	strb	r2, [r3, #0]
 801fa52:	e02d      	b.n	801fab0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801fa54:	79fa      	ldrb	r2, [r7, #7]
 801fa56:	4923      	ldr	r1, [pc, #140]	; (801fae4 <etharp_output_to_arp_index+0x124>)
 801fa58:	4613      	mov	r3, r2
 801fa5a:	005b      	lsls	r3, r3, #1
 801fa5c:	4413      	add	r3, r2
 801fa5e:	00db      	lsls	r3, r3, #3
 801fa60:	440b      	add	r3, r1
 801fa62:	3312      	adds	r3, #18
 801fa64:	881b      	ldrh	r3, [r3, #0]
 801fa66:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801fa6a:	d321      	bcc.n	801fab0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801fa6c:	79fa      	ldrb	r2, [r7, #7]
 801fa6e:	4613      	mov	r3, r2
 801fa70:	005b      	lsls	r3, r3, #1
 801fa72:	4413      	add	r3, r2
 801fa74:	00db      	lsls	r3, r3, #3
 801fa76:	4a1b      	ldr	r2, [pc, #108]	; (801fae4 <etharp_output_to_arp_index+0x124>)
 801fa78:	4413      	add	r3, r2
 801fa7a:	1d19      	adds	r1, r3, #4
 801fa7c:	79fa      	ldrb	r2, [r7, #7]
 801fa7e:	4613      	mov	r3, r2
 801fa80:	005b      	lsls	r3, r3, #1
 801fa82:	4413      	add	r3, r2
 801fa84:	00db      	lsls	r3, r3, #3
 801fa86:	3308      	adds	r3, #8
 801fa88:	4a16      	ldr	r2, [pc, #88]	; (801fae4 <etharp_output_to_arp_index+0x124>)
 801fa8a:	4413      	add	r3, r2
 801fa8c:	3304      	adds	r3, #4
 801fa8e:	461a      	mov	r2, r3
 801fa90:	68f8      	ldr	r0, [r7, #12]
 801fa92:	f000 fafb 	bl	802008c <etharp_request_dst>
 801fa96:	4603      	mov	r3, r0
 801fa98:	2b00      	cmp	r3, #0
 801fa9a:	d109      	bne.n	801fab0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801fa9c:	79fa      	ldrb	r2, [r7, #7]
 801fa9e:	4911      	ldr	r1, [pc, #68]	; (801fae4 <etharp_output_to_arp_index+0x124>)
 801faa0:	4613      	mov	r3, r2
 801faa2:	005b      	lsls	r3, r3, #1
 801faa4:	4413      	add	r3, r2
 801faa6:	00db      	lsls	r3, r3, #3
 801faa8:	440b      	add	r3, r1
 801faaa:	3314      	adds	r3, #20
 801faac:	2203      	movs	r2, #3
 801faae:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801fab0:	68fb      	ldr	r3, [r7, #12]
 801fab2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801fab6:	79fa      	ldrb	r2, [r7, #7]
 801fab8:	4613      	mov	r3, r2
 801faba:	005b      	lsls	r3, r3, #1
 801fabc:	4413      	add	r3, r2
 801fabe:	00db      	lsls	r3, r3, #3
 801fac0:	3308      	adds	r3, #8
 801fac2:	4a08      	ldr	r2, [pc, #32]	; (801fae4 <etharp_output_to_arp_index+0x124>)
 801fac4:	4413      	add	r3, r2
 801fac6:	3304      	adds	r3, #4
 801fac8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801facc:	9200      	str	r2, [sp, #0]
 801face:	460a      	mov	r2, r1
 801fad0:	68b9      	ldr	r1, [r7, #8]
 801fad2:	68f8      	ldr	r0, [r7, #12]
 801fad4:	f001 ffbc 	bl	8021a50 <ethernet_output>
 801fad8:	4603      	mov	r3, r0
}
 801fada:	4618      	mov	r0, r3
 801fadc:	3710      	adds	r7, #16
 801fade:	46bd      	mov	sp, r7
 801fae0:	bd80      	pop	{r7, pc}
 801fae2:	bf00      	nop
 801fae4:	24004fd8 	.word	0x24004fd8
 801fae8:	0802dc18 	.word	0x0802dc18
 801faec:	0802dd88 	.word	0x0802dd88
 801faf0:	0802dc90 	.word	0x0802dc90

0801faf4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801faf4:	b580      	push	{r7, lr}
 801faf6:	b08a      	sub	sp, #40	; 0x28
 801faf8:	af02      	add	r7, sp, #8
 801fafa:	60f8      	str	r0, [r7, #12]
 801fafc:	60b9      	str	r1, [r7, #8]
 801fafe:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801fb00:	687b      	ldr	r3, [r7, #4]
 801fb02:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801fb04:	68fb      	ldr	r3, [r7, #12]
 801fb06:	2b00      	cmp	r3, #0
 801fb08:	d106      	bne.n	801fb18 <etharp_output+0x24>
 801fb0a:	4b73      	ldr	r3, [pc, #460]	; (801fcd8 <etharp_output+0x1e4>)
 801fb0c:	f240 321e 	movw	r2, #798	; 0x31e
 801fb10:	4972      	ldr	r1, [pc, #456]	; (801fcdc <etharp_output+0x1e8>)
 801fb12:	4873      	ldr	r0, [pc, #460]	; (801fce0 <etharp_output+0x1ec>)
 801fb14:	f007 f9de 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801fb18:	68bb      	ldr	r3, [r7, #8]
 801fb1a:	2b00      	cmp	r3, #0
 801fb1c:	d106      	bne.n	801fb2c <etharp_output+0x38>
 801fb1e:	4b6e      	ldr	r3, [pc, #440]	; (801fcd8 <etharp_output+0x1e4>)
 801fb20:	f240 321f 	movw	r2, #799	; 0x31f
 801fb24:	496f      	ldr	r1, [pc, #444]	; (801fce4 <etharp_output+0x1f0>)
 801fb26:	486e      	ldr	r0, [pc, #440]	; (801fce0 <etharp_output+0x1ec>)
 801fb28:	f007 f9d4 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801fb2c:	687b      	ldr	r3, [r7, #4]
 801fb2e:	2b00      	cmp	r3, #0
 801fb30:	d106      	bne.n	801fb40 <etharp_output+0x4c>
 801fb32:	4b69      	ldr	r3, [pc, #420]	; (801fcd8 <etharp_output+0x1e4>)
 801fb34:	f44f 7248 	mov.w	r2, #800	; 0x320
 801fb38:	496b      	ldr	r1, [pc, #428]	; (801fce8 <etharp_output+0x1f4>)
 801fb3a:	4869      	ldr	r0, [pc, #420]	; (801fce0 <etharp_output+0x1ec>)
 801fb3c:	f007 f9ca 	bl	8026ed4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801fb40:	687b      	ldr	r3, [r7, #4]
 801fb42:	681b      	ldr	r3, [r3, #0]
 801fb44:	68f9      	ldr	r1, [r7, #12]
 801fb46:	4618      	mov	r0, r3
 801fb48:	f000 ff3c 	bl	80209c4 <ip4_addr_isbroadcast_u32>
 801fb4c:	4603      	mov	r3, r0
 801fb4e:	2b00      	cmp	r3, #0
 801fb50:	d002      	beq.n	801fb58 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801fb52:	4b66      	ldr	r3, [pc, #408]	; (801fcec <etharp_output+0x1f8>)
 801fb54:	61fb      	str	r3, [r7, #28]
 801fb56:	e0af      	b.n	801fcb8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801fb58:	687b      	ldr	r3, [r7, #4]
 801fb5a:	681b      	ldr	r3, [r3, #0]
 801fb5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801fb60:	2be0      	cmp	r3, #224	; 0xe0
 801fb62:	d118      	bne.n	801fb96 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801fb64:	2301      	movs	r3, #1
 801fb66:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801fb68:	2300      	movs	r3, #0
 801fb6a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801fb6c:	235e      	movs	r3, #94	; 0x5e
 801fb6e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801fb70:	687b      	ldr	r3, [r7, #4]
 801fb72:	3301      	adds	r3, #1
 801fb74:	781b      	ldrb	r3, [r3, #0]
 801fb76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801fb7a:	b2db      	uxtb	r3, r3
 801fb7c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801fb7e:	687b      	ldr	r3, [r7, #4]
 801fb80:	3302      	adds	r3, #2
 801fb82:	781b      	ldrb	r3, [r3, #0]
 801fb84:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801fb86:	687b      	ldr	r3, [r7, #4]
 801fb88:	3303      	adds	r3, #3
 801fb8a:	781b      	ldrb	r3, [r3, #0]
 801fb8c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801fb8e:	f107 0310 	add.w	r3, r7, #16
 801fb92:	61fb      	str	r3, [r7, #28]
 801fb94:	e090      	b.n	801fcb8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801fb96:	687b      	ldr	r3, [r7, #4]
 801fb98:	681a      	ldr	r2, [r3, #0]
 801fb9a:	68fb      	ldr	r3, [r7, #12]
 801fb9c:	3304      	adds	r3, #4
 801fb9e:	681b      	ldr	r3, [r3, #0]
 801fba0:	405a      	eors	r2, r3
 801fba2:	68fb      	ldr	r3, [r7, #12]
 801fba4:	3308      	adds	r3, #8
 801fba6:	681b      	ldr	r3, [r3, #0]
 801fba8:	4013      	ands	r3, r2
 801fbaa:	2b00      	cmp	r3, #0
 801fbac:	d012      	beq.n	801fbd4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801fbae:	687b      	ldr	r3, [r7, #4]
 801fbb0:	681b      	ldr	r3, [r3, #0]
 801fbb2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801fbb4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801fbb8:	4293      	cmp	r3, r2
 801fbba:	d00b      	beq.n	801fbd4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801fbbc:	68fb      	ldr	r3, [r7, #12]
 801fbbe:	330c      	adds	r3, #12
 801fbc0:	681b      	ldr	r3, [r3, #0]
 801fbc2:	2b00      	cmp	r3, #0
 801fbc4:	d003      	beq.n	801fbce <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801fbc6:	68fb      	ldr	r3, [r7, #12]
 801fbc8:	330c      	adds	r3, #12
 801fbca:	61bb      	str	r3, [r7, #24]
 801fbcc:	e002      	b.n	801fbd4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801fbce:	f06f 0303 	mvn.w	r3, #3
 801fbd2:	e07d      	b.n	801fcd0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801fbd4:	4b46      	ldr	r3, [pc, #280]	; (801fcf0 <etharp_output+0x1fc>)
 801fbd6:	781b      	ldrb	r3, [r3, #0]
 801fbd8:	4619      	mov	r1, r3
 801fbda:	4a46      	ldr	r2, [pc, #280]	; (801fcf4 <etharp_output+0x200>)
 801fbdc:	460b      	mov	r3, r1
 801fbde:	005b      	lsls	r3, r3, #1
 801fbe0:	440b      	add	r3, r1
 801fbe2:	00db      	lsls	r3, r3, #3
 801fbe4:	4413      	add	r3, r2
 801fbe6:	3314      	adds	r3, #20
 801fbe8:	781b      	ldrb	r3, [r3, #0]
 801fbea:	2b01      	cmp	r3, #1
 801fbec:	d925      	bls.n	801fc3a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801fbee:	4b40      	ldr	r3, [pc, #256]	; (801fcf0 <etharp_output+0x1fc>)
 801fbf0:	781b      	ldrb	r3, [r3, #0]
 801fbf2:	4619      	mov	r1, r3
 801fbf4:	4a3f      	ldr	r2, [pc, #252]	; (801fcf4 <etharp_output+0x200>)
 801fbf6:	460b      	mov	r3, r1
 801fbf8:	005b      	lsls	r3, r3, #1
 801fbfa:	440b      	add	r3, r1
 801fbfc:	00db      	lsls	r3, r3, #3
 801fbfe:	4413      	add	r3, r2
 801fc00:	3308      	adds	r3, #8
 801fc02:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801fc04:	68fa      	ldr	r2, [r7, #12]
 801fc06:	429a      	cmp	r2, r3
 801fc08:	d117      	bne.n	801fc3a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801fc0a:	69bb      	ldr	r3, [r7, #24]
 801fc0c:	681a      	ldr	r2, [r3, #0]
 801fc0e:	4b38      	ldr	r3, [pc, #224]	; (801fcf0 <etharp_output+0x1fc>)
 801fc10:	781b      	ldrb	r3, [r3, #0]
 801fc12:	4618      	mov	r0, r3
 801fc14:	4937      	ldr	r1, [pc, #220]	; (801fcf4 <etharp_output+0x200>)
 801fc16:	4603      	mov	r3, r0
 801fc18:	005b      	lsls	r3, r3, #1
 801fc1a:	4403      	add	r3, r0
 801fc1c:	00db      	lsls	r3, r3, #3
 801fc1e:	440b      	add	r3, r1
 801fc20:	3304      	adds	r3, #4
 801fc22:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801fc24:	429a      	cmp	r2, r3
 801fc26:	d108      	bne.n	801fc3a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801fc28:	4b31      	ldr	r3, [pc, #196]	; (801fcf0 <etharp_output+0x1fc>)
 801fc2a:	781b      	ldrb	r3, [r3, #0]
 801fc2c:	461a      	mov	r2, r3
 801fc2e:	68b9      	ldr	r1, [r7, #8]
 801fc30:	68f8      	ldr	r0, [r7, #12]
 801fc32:	f7ff fec5 	bl	801f9c0 <etharp_output_to_arp_index>
 801fc36:	4603      	mov	r3, r0
 801fc38:	e04a      	b.n	801fcd0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801fc3a:	2300      	movs	r3, #0
 801fc3c:	75fb      	strb	r3, [r7, #23]
 801fc3e:	e031      	b.n	801fca4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801fc40:	7dfa      	ldrb	r2, [r7, #23]
 801fc42:	492c      	ldr	r1, [pc, #176]	; (801fcf4 <etharp_output+0x200>)
 801fc44:	4613      	mov	r3, r2
 801fc46:	005b      	lsls	r3, r3, #1
 801fc48:	4413      	add	r3, r2
 801fc4a:	00db      	lsls	r3, r3, #3
 801fc4c:	440b      	add	r3, r1
 801fc4e:	3314      	adds	r3, #20
 801fc50:	781b      	ldrb	r3, [r3, #0]
 801fc52:	2b01      	cmp	r3, #1
 801fc54:	d923      	bls.n	801fc9e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801fc56:	7dfa      	ldrb	r2, [r7, #23]
 801fc58:	4926      	ldr	r1, [pc, #152]	; (801fcf4 <etharp_output+0x200>)
 801fc5a:	4613      	mov	r3, r2
 801fc5c:	005b      	lsls	r3, r3, #1
 801fc5e:	4413      	add	r3, r2
 801fc60:	00db      	lsls	r3, r3, #3
 801fc62:	440b      	add	r3, r1
 801fc64:	3308      	adds	r3, #8
 801fc66:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801fc68:	68fa      	ldr	r2, [r7, #12]
 801fc6a:	429a      	cmp	r2, r3
 801fc6c:	d117      	bne.n	801fc9e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801fc6e:	69bb      	ldr	r3, [r7, #24]
 801fc70:	6819      	ldr	r1, [r3, #0]
 801fc72:	7dfa      	ldrb	r2, [r7, #23]
 801fc74:	481f      	ldr	r0, [pc, #124]	; (801fcf4 <etharp_output+0x200>)
 801fc76:	4613      	mov	r3, r2
 801fc78:	005b      	lsls	r3, r3, #1
 801fc7a:	4413      	add	r3, r2
 801fc7c:	00db      	lsls	r3, r3, #3
 801fc7e:	4403      	add	r3, r0
 801fc80:	3304      	adds	r3, #4
 801fc82:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801fc84:	4299      	cmp	r1, r3
 801fc86:	d10a      	bne.n	801fc9e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801fc88:	4a19      	ldr	r2, [pc, #100]	; (801fcf0 <etharp_output+0x1fc>)
 801fc8a:	7dfb      	ldrb	r3, [r7, #23]
 801fc8c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801fc8e:	7dfb      	ldrb	r3, [r7, #23]
 801fc90:	461a      	mov	r2, r3
 801fc92:	68b9      	ldr	r1, [r7, #8]
 801fc94:	68f8      	ldr	r0, [r7, #12]
 801fc96:	f7ff fe93 	bl	801f9c0 <etharp_output_to_arp_index>
 801fc9a:	4603      	mov	r3, r0
 801fc9c:	e018      	b.n	801fcd0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801fc9e:	7dfb      	ldrb	r3, [r7, #23]
 801fca0:	3301      	adds	r3, #1
 801fca2:	75fb      	strb	r3, [r7, #23]
 801fca4:	7dfb      	ldrb	r3, [r7, #23]
 801fca6:	2b09      	cmp	r3, #9
 801fca8:	d9ca      	bls.n	801fc40 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801fcaa:	68ba      	ldr	r2, [r7, #8]
 801fcac:	69b9      	ldr	r1, [r7, #24]
 801fcae:	68f8      	ldr	r0, [r7, #12]
 801fcb0:	f000 f822 	bl	801fcf8 <etharp_query>
 801fcb4:	4603      	mov	r3, r0
 801fcb6:	e00b      	b.n	801fcd0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801fcb8:	68fb      	ldr	r3, [r7, #12]
 801fcba:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801fcbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801fcc2:	9300      	str	r3, [sp, #0]
 801fcc4:	69fb      	ldr	r3, [r7, #28]
 801fcc6:	68b9      	ldr	r1, [r7, #8]
 801fcc8:	68f8      	ldr	r0, [r7, #12]
 801fcca:	f001 fec1 	bl	8021a50 <ethernet_output>
 801fcce:	4603      	mov	r3, r0
}
 801fcd0:	4618      	mov	r0, r3
 801fcd2:	3720      	adds	r7, #32
 801fcd4:	46bd      	mov	sp, r7
 801fcd6:	bd80      	pop	{r7, pc}
 801fcd8:	0802dc18 	.word	0x0802dc18
 801fcdc:	0802dd68 	.word	0x0802dd68
 801fce0:	0802dc90 	.word	0x0802dc90
 801fce4:	0802ddb8 	.word	0x0802ddb8
 801fce8:	0802dd58 	.word	0x0802dd58
 801fcec:	0802ec68 	.word	0x0802ec68
 801fcf0:	240050c8 	.word	0x240050c8
 801fcf4:	24004fd8 	.word	0x24004fd8

0801fcf8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801fcf8:	b580      	push	{r7, lr}
 801fcfa:	b08c      	sub	sp, #48	; 0x30
 801fcfc:	af02      	add	r7, sp, #8
 801fcfe:	60f8      	str	r0, [r7, #12]
 801fd00:	60b9      	str	r1, [r7, #8]
 801fd02:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801fd04:	68fb      	ldr	r3, [r7, #12]
 801fd06:	332a      	adds	r3, #42	; 0x2a
 801fd08:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801fd0a:	23ff      	movs	r3, #255	; 0xff
 801fd0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801fd10:	2300      	movs	r3, #0
 801fd12:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801fd14:	68bb      	ldr	r3, [r7, #8]
 801fd16:	681b      	ldr	r3, [r3, #0]
 801fd18:	68f9      	ldr	r1, [r7, #12]
 801fd1a:	4618      	mov	r0, r3
 801fd1c:	f000 fe52 	bl	80209c4 <ip4_addr_isbroadcast_u32>
 801fd20:	4603      	mov	r3, r0
 801fd22:	2b00      	cmp	r3, #0
 801fd24:	d10c      	bne.n	801fd40 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801fd26:	68bb      	ldr	r3, [r7, #8]
 801fd28:	681b      	ldr	r3, [r3, #0]
 801fd2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801fd2e:	2be0      	cmp	r3, #224	; 0xe0
 801fd30:	d006      	beq.n	801fd40 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801fd32:	68bb      	ldr	r3, [r7, #8]
 801fd34:	2b00      	cmp	r3, #0
 801fd36:	d003      	beq.n	801fd40 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801fd38:	68bb      	ldr	r3, [r7, #8]
 801fd3a:	681b      	ldr	r3, [r3, #0]
 801fd3c:	2b00      	cmp	r3, #0
 801fd3e:	d102      	bne.n	801fd46 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801fd40:	f06f 030f 	mvn.w	r3, #15
 801fd44:	e101      	b.n	801ff4a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801fd46:	68fa      	ldr	r2, [r7, #12]
 801fd48:	2101      	movs	r1, #1
 801fd4a:	68b8      	ldr	r0, [r7, #8]
 801fd4c:	f7ff fb5c 	bl	801f408 <etharp_find_entry>
 801fd50:	4603      	mov	r3, r0
 801fd52:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801fd54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801fd58:	2b00      	cmp	r3, #0
 801fd5a:	da02      	bge.n	801fd62 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801fd5c:	8a7b      	ldrh	r3, [r7, #18]
 801fd5e:	b25b      	sxtb	r3, r3
 801fd60:	e0f3      	b.n	801ff4a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801fd62:	8a7b      	ldrh	r3, [r7, #18]
 801fd64:	2b7e      	cmp	r3, #126	; 0x7e
 801fd66:	d906      	bls.n	801fd76 <etharp_query+0x7e>
 801fd68:	4b7a      	ldr	r3, [pc, #488]	; (801ff54 <etharp_query+0x25c>)
 801fd6a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801fd6e:	497a      	ldr	r1, [pc, #488]	; (801ff58 <etharp_query+0x260>)
 801fd70:	487a      	ldr	r0, [pc, #488]	; (801ff5c <etharp_query+0x264>)
 801fd72:	f007 f8af 	bl	8026ed4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801fd76:	8a7b      	ldrh	r3, [r7, #18]
 801fd78:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801fd7a:	7c7a      	ldrb	r2, [r7, #17]
 801fd7c:	4978      	ldr	r1, [pc, #480]	; (801ff60 <etharp_query+0x268>)
 801fd7e:	4613      	mov	r3, r2
 801fd80:	005b      	lsls	r3, r3, #1
 801fd82:	4413      	add	r3, r2
 801fd84:	00db      	lsls	r3, r3, #3
 801fd86:	440b      	add	r3, r1
 801fd88:	3314      	adds	r3, #20
 801fd8a:	781b      	ldrb	r3, [r3, #0]
 801fd8c:	2b00      	cmp	r3, #0
 801fd8e:	d115      	bne.n	801fdbc <etharp_query+0xc4>
    is_new_entry = 1;
 801fd90:	2301      	movs	r3, #1
 801fd92:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801fd94:	7c7a      	ldrb	r2, [r7, #17]
 801fd96:	4972      	ldr	r1, [pc, #456]	; (801ff60 <etharp_query+0x268>)
 801fd98:	4613      	mov	r3, r2
 801fd9a:	005b      	lsls	r3, r3, #1
 801fd9c:	4413      	add	r3, r2
 801fd9e:	00db      	lsls	r3, r3, #3
 801fda0:	440b      	add	r3, r1
 801fda2:	3314      	adds	r3, #20
 801fda4:	2201      	movs	r2, #1
 801fda6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801fda8:	7c7a      	ldrb	r2, [r7, #17]
 801fdaa:	496d      	ldr	r1, [pc, #436]	; (801ff60 <etharp_query+0x268>)
 801fdac:	4613      	mov	r3, r2
 801fdae:	005b      	lsls	r3, r3, #1
 801fdb0:	4413      	add	r3, r2
 801fdb2:	00db      	lsls	r3, r3, #3
 801fdb4:	440b      	add	r3, r1
 801fdb6:	3308      	adds	r3, #8
 801fdb8:	68fa      	ldr	r2, [r7, #12]
 801fdba:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801fdbc:	7c7a      	ldrb	r2, [r7, #17]
 801fdbe:	4968      	ldr	r1, [pc, #416]	; (801ff60 <etharp_query+0x268>)
 801fdc0:	4613      	mov	r3, r2
 801fdc2:	005b      	lsls	r3, r3, #1
 801fdc4:	4413      	add	r3, r2
 801fdc6:	00db      	lsls	r3, r3, #3
 801fdc8:	440b      	add	r3, r1
 801fdca:	3314      	adds	r3, #20
 801fdcc:	781b      	ldrb	r3, [r3, #0]
 801fdce:	2b01      	cmp	r3, #1
 801fdd0:	d011      	beq.n	801fdf6 <etharp_query+0xfe>
 801fdd2:	7c7a      	ldrb	r2, [r7, #17]
 801fdd4:	4962      	ldr	r1, [pc, #392]	; (801ff60 <etharp_query+0x268>)
 801fdd6:	4613      	mov	r3, r2
 801fdd8:	005b      	lsls	r3, r3, #1
 801fdda:	4413      	add	r3, r2
 801fddc:	00db      	lsls	r3, r3, #3
 801fdde:	440b      	add	r3, r1
 801fde0:	3314      	adds	r3, #20
 801fde2:	781b      	ldrb	r3, [r3, #0]
 801fde4:	2b01      	cmp	r3, #1
 801fde6:	d806      	bhi.n	801fdf6 <etharp_query+0xfe>
 801fde8:	4b5a      	ldr	r3, [pc, #360]	; (801ff54 <etharp_query+0x25c>)
 801fdea:	f240 32cd 	movw	r2, #973	; 0x3cd
 801fdee:	495d      	ldr	r1, [pc, #372]	; (801ff64 <etharp_query+0x26c>)
 801fdf0:	485a      	ldr	r0, [pc, #360]	; (801ff5c <etharp_query+0x264>)
 801fdf2:	f007 f86f 	bl	8026ed4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801fdf6:	6a3b      	ldr	r3, [r7, #32]
 801fdf8:	2b00      	cmp	r3, #0
 801fdfa:	d102      	bne.n	801fe02 <etharp_query+0x10a>
 801fdfc:	687b      	ldr	r3, [r7, #4]
 801fdfe:	2b00      	cmp	r3, #0
 801fe00:	d10c      	bne.n	801fe1c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801fe02:	68b9      	ldr	r1, [r7, #8]
 801fe04:	68f8      	ldr	r0, [r7, #12]
 801fe06:	f000 f963 	bl	80200d0 <etharp_request>
 801fe0a:	4603      	mov	r3, r0
 801fe0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801fe10:	687b      	ldr	r3, [r7, #4]
 801fe12:	2b00      	cmp	r3, #0
 801fe14:	d102      	bne.n	801fe1c <etharp_query+0x124>
      return result;
 801fe16:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801fe1a:	e096      	b.n	801ff4a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801fe1c:	687b      	ldr	r3, [r7, #4]
 801fe1e:	2b00      	cmp	r3, #0
 801fe20:	d106      	bne.n	801fe30 <etharp_query+0x138>
 801fe22:	4b4c      	ldr	r3, [pc, #304]	; (801ff54 <etharp_query+0x25c>)
 801fe24:	f240 32e1 	movw	r2, #993	; 0x3e1
 801fe28:	494f      	ldr	r1, [pc, #316]	; (801ff68 <etharp_query+0x270>)
 801fe2a:	484c      	ldr	r0, [pc, #304]	; (801ff5c <etharp_query+0x264>)
 801fe2c:	f007 f852 	bl	8026ed4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801fe30:	7c7a      	ldrb	r2, [r7, #17]
 801fe32:	494b      	ldr	r1, [pc, #300]	; (801ff60 <etharp_query+0x268>)
 801fe34:	4613      	mov	r3, r2
 801fe36:	005b      	lsls	r3, r3, #1
 801fe38:	4413      	add	r3, r2
 801fe3a:	00db      	lsls	r3, r3, #3
 801fe3c:	440b      	add	r3, r1
 801fe3e:	3314      	adds	r3, #20
 801fe40:	781b      	ldrb	r3, [r3, #0]
 801fe42:	2b01      	cmp	r3, #1
 801fe44:	d917      	bls.n	801fe76 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801fe46:	4a49      	ldr	r2, [pc, #292]	; (801ff6c <etharp_query+0x274>)
 801fe48:	7c7b      	ldrb	r3, [r7, #17]
 801fe4a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801fe4c:	7c7a      	ldrb	r2, [r7, #17]
 801fe4e:	4613      	mov	r3, r2
 801fe50:	005b      	lsls	r3, r3, #1
 801fe52:	4413      	add	r3, r2
 801fe54:	00db      	lsls	r3, r3, #3
 801fe56:	3308      	adds	r3, #8
 801fe58:	4a41      	ldr	r2, [pc, #260]	; (801ff60 <etharp_query+0x268>)
 801fe5a:	4413      	add	r3, r2
 801fe5c:	3304      	adds	r3, #4
 801fe5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801fe62:	9200      	str	r2, [sp, #0]
 801fe64:	697a      	ldr	r2, [r7, #20]
 801fe66:	6879      	ldr	r1, [r7, #4]
 801fe68:	68f8      	ldr	r0, [r7, #12]
 801fe6a:	f001 fdf1 	bl	8021a50 <ethernet_output>
 801fe6e:	4603      	mov	r3, r0
 801fe70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801fe74:	e067      	b.n	801ff46 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801fe76:	7c7a      	ldrb	r2, [r7, #17]
 801fe78:	4939      	ldr	r1, [pc, #228]	; (801ff60 <etharp_query+0x268>)
 801fe7a:	4613      	mov	r3, r2
 801fe7c:	005b      	lsls	r3, r3, #1
 801fe7e:	4413      	add	r3, r2
 801fe80:	00db      	lsls	r3, r3, #3
 801fe82:	440b      	add	r3, r1
 801fe84:	3314      	adds	r3, #20
 801fe86:	781b      	ldrb	r3, [r3, #0]
 801fe88:	2b01      	cmp	r3, #1
 801fe8a:	d15c      	bne.n	801ff46 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801fe8c:	2300      	movs	r3, #0
 801fe8e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801fe90:	687b      	ldr	r3, [r7, #4]
 801fe92:	61fb      	str	r3, [r7, #28]
    while (p) {
 801fe94:	e01c      	b.n	801fed0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801fe96:	69fb      	ldr	r3, [r7, #28]
 801fe98:	895a      	ldrh	r2, [r3, #10]
 801fe9a:	69fb      	ldr	r3, [r7, #28]
 801fe9c:	891b      	ldrh	r3, [r3, #8]
 801fe9e:	429a      	cmp	r2, r3
 801fea0:	d10a      	bne.n	801feb8 <etharp_query+0x1c0>
 801fea2:	69fb      	ldr	r3, [r7, #28]
 801fea4:	681b      	ldr	r3, [r3, #0]
 801fea6:	2b00      	cmp	r3, #0
 801fea8:	d006      	beq.n	801feb8 <etharp_query+0x1c0>
 801feaa:	4b2a      	ldr	r3, [pc, #168]	; (801ff54 <etharp_query+0x25c>)
 801feac:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801feb0:	492f      	ldr	r1, [pc, #188]	; (801ff70 <etharp_query+0x278>)
 801feb2:	482a      	ldr	r0, [pc, #168]	; (801ff5c <etharp_query+0x264>)
 801feb4:	f007 f80e 	bl	8026ed4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801feb8:	69fb      	ldr	r3, [r7, #28]
 801feba:	7b1b      	ldrb	r3, [r3, #12]
 801febc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fec0:	2b00      	cmp	r3, #0
 801fec2:	d002      	beq.n	801feca <etharp_query+0x1d2>
        copy_needed = 1;
 801fec4:	2301      	movs	r3, #1
 801fec6:	61bb      	str	r3, [r7, #24]
        break;
 801fec8:	e005      	b.n	801fed6 <etharp_query+0x1de>
      }
      p = p->next;
 801feca:	69fb      	ldr	r3, [r7, #28]
 801fecc:	681b      	ldr	r3, [r3, #0]
 801fece:	61fb      	str	r3, [r7, #28]
    while (p) {
 801fed0:	69fb      	ldr	r3, [r7, #28]
 801fed2:	2b00      	cmp	r3, #0
 801fed4:	d1df      	bne.n	801fe96 <etharp_query+0x19e>
    }
    if (copy_needed) {
 801fed6:	69bb      	ldr	r3, [r7, #24]
 801fed8:	2b00      	cmp	r3, #0
 801feda:	d007      	beq.n	801feec <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801fedc:	687a      	ldr	r2, [r7, #4]
 801fede:	f44f 7120 	mov.w	r1, #640	; 0x280
 801fee2:	200e      	movs	r0, #14
 801fee4:	f7f6 f976 	bl	80161d4 <pbuf_clone>
 801fee8:	61f8      	str	r0, [r7, #28]
 801feea:	e004      	b.n	801fef6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801feec:	687b      	ldr	r3, [r7, #4]
 801feee:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801fef0:	69f8      	ldr	r0, [r7, #28]
 801fef2:	f7f5 fe65 	bl	8015bc0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801fef6:	69fb      	ldr	r3, [r7, #28]
 801fef8:	2b00      	cmp	r3, #0
 801fefa:	d021      	beq.n	801ff40 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801fefc:	7c7a      	ldrb	r2, [r7, #17]
 801fefe:	4918      	ldr	r1, [pc, #96]	; (801ff60 <etharp_query+0x268>)
 801ff00:	4613      	mov	r3, r2
 801ff02:	005b      	lsls	r3, r3, #1
 801ff04:	4413      	add	r3, r2
 801ff06:	00db      	lsls	r3, r3, #3
 801ff08:	440b      	add	r3, r1
 801ff0a:	681b      	ldr	r3, [r3, #0]
 801ff0c:	2b00      	cmp	r3, #0
 801ff0e:	d00a      	beq.n	801ff26 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801ff10:	7c7a      	ldrb	r2, [r7, #17]
 801ff12:	4913      	ldr	r1, [pc, #76]	; (801ff60 <etharp_query+0x268>)
 801ff14:	4613      	mov	r3, r2
 801ff16:	005b      	lsls	r3, r3, #1
 801ff18:	4413      	add	r3, r2
 801ff1a:	00db      	lsls	r3, r3, #3
 801ff1c:	440b      	add	r3, r1
 801ff1e:	681b      	ldr	r3, [r3, #0]
 801ff20:	4618      	mov	r0, r3
 801ff22:	f7f5 fda7 	bl	8015a74 <pbuf_free>
      }
      arp_table[i].q = p;
 801ff26:	7c7a      	ldrb	r2, [r7, #17]
 801ff28:	490d      	ldr	r1, [pc, #52]	; (801ff60 <etharp_query+0x268>)
 801ff2a:	4613      	mov	r3, r2
 801ff2c:	005b      	lsls	r3, r3, #1
 801ff2e:	4413      	add	r3, r2
 801ff30:	00db      	lsls	r3, r3, #3
 801ff32:	440b      	add	r3, r1
 801ff34:	69fa      	ldr	r2, [r7, #28]
 801ff36:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801ff38:	2300      	movs	r3, #0
 801ff3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ff3e:	e002      	b.n	801ff46 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801ff40:	23ff      	movs	r3, #255	; 0xff
 801ff42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801ff46:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801ff4a:	4618      	mov	r0, r3
 801ff4c:	3728      	adds	r7, #40	; 0x28
 801ff4e:	46bd      	mov	sp, r7
 801ff50:	bd80      	pop	{r7, pc}
 801ff52:	bf00      	nop
 801ff54:	0802dc18 	.word	0x0802dc18
 801ff58:	0802ddc4 	.word	0x0802ddc4
 801ff5c:	0802dc90 	.word	0x0802dc90
 801ff60:	24004fd8 	.word	0x24004fd8
 801ff64:	0802ddd4 	.word	0x0802ddd4
 801ff68:	0802ddb8 	.word	0x0802ddb8
 801ff6c:	240050c8 	.word	0x240050c8
 801ff70:	0802ddfc 	.word	0x0802ddfc

0801ff74 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801ff74:	b580      	push	{r7, lr}
 801ff76:	b08a      	sub	sp, #40	; 0x28
 801ff78:	af02      	add	r7, sp, #8
 801ff7a:	60f8      	str	r0, [r7, #12]
 801ff7c:	60b9      	str	r1, [r7, #8]
 801ff7e:	607a      	str	r2, [r7, #4]
 801ff80:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801ff82:	2300      	movs	r3, #0
 801ff84:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ff86:	68fb      	ldr	r3, [r7, #12]
 801ff88:	2b00      	cmp	r3, #0
 801ff8a:	d106      	bne.n	801ff9a <etharp_raw+0x26>
 801ff8c:	4b3a      	ldr	r3, [pc, #232]	; (8020078 <etharp_raw+0x104>)
 801ff8e:	f240 4257 	movw	r2, #1111	; 0x457
 801ff92:	493a      	ldr	r1, [pc, #232]	; (802007c <etharp_raw+0x108>)
 801ff94:	483a      	ldr	r0, [pc, #232]	; (8020080 <etharp_raw+0x10c>)
 801ff96:	f006 ff9d 	bl	8026ed4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801ff9a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ff9e:	211c      	movs	r1, #28
 801ffa0:	200e      	movs	r0, #14
 801ffa2:	f7f5 fa51 	bl	8015448 <pbuf_alloc>
 801ffa6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801ffa8:	69bb      	ldr	r3, [r7, #24]
 801ffaa:	2b00      	cmp	r3, #0
 801ffac:	d102      	bne.n	801ffb4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801ffae:	f04f 33ff 	mov.w	r3, #4294967295
 801ffb2:	e05d      	b.n	8020070 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801ffb4:	69bb      	ldr	r3, [r7, #24]
 801ffb6:	895b      	ldrh	r3, [r3, #10]
 801ffb8:	2b1b      	cmp	r3, #27
 801ffba:	d806      	bhi.n	801ffca <etharp_raw+0x56>
 801ffbc:	4b2e      	ldr	r3, [pc, #184]	; (8020078 <etharp_raw+0x104>)
 801ffbe:	f240 4262 	movw	r2, #1122	; 0x462
 801ffc2:	4930      	ldr	r1, [pc, #192]	; (8020084 <etharp_raw+0x110>)
 801ffc4:	482e      	ldr	r0, [pc, #184]	; (8020080 <etharp_raw+0x10c>)
 801ffc6:	f006 ff85 	bl	8026ed4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801ffca:	69bb      	ldr	r3, [r7, #24]
 801ffcc:	685b      	ldr	r3, [r3, #4]
 801ffce:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801ffd0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801ffd2:	4618      	mov	r0, r3
 801ffd4:	f7f3 f87c 	bl	80130d0 <lwip_htons>
 801ffd8:	4603      	mov	r3, r0
 801ffda:	461a      	mov	r2, r3
 801ffdc:	697b      	ldr	r3, [r7, #20]
 801ffde:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801ffe0:	68fb      	ldr	r3, [r7, #12]
 801ffe2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801ffe6:	2b06      	cmp	r3, #6
 801ffe8:	d006      	beq.n	801fff8 <etharp_raw+0x84>
 801ffea:	4b23      	ldr	r3, [pc, #140]	; (8020078 <etharp_raw+0x104>)
 801ffec:	f240 4269 	movw	r2, #1129	; 0x469
 801fff0:	4925      	ldr	r1, [pc, #148]	; (8020088 <etharp_raw+0x114>)
 801fff2:	4823      	ldr	r0, [pc, #140]	; (8020080 <etharp_raw+0x10c>)
 801fff4:	f006 ff6e 	bl	8026ed4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801fff8:	697b      	ldr	r3, [r7, #20]
 801fffa:	3308      	adds	r3, #8
 801fffc:	2206      	movs	r2, #6
 801fffe:	6839      	ldr	r1, [r7, #0]
 8020000:	4618      	mov	r0, r3
 8020002:	f006 f8e1 	bl	80261c8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8020006:	697b      	ldr	r3, [r7, #20]
 8020008:	3312      	adds	r3, #18
 802000a:	2206      	movs	r2, #6
 802000c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802000e:	4618      	mov	r0, r3
 8020010:	f006 f8da 	bl	80261c8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8020014:	697b      	ldr	r3, [r7, #20]
 8020016:	330e      	adds	r3, #14
 8020018:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802001a:	6812      	ldr	r2, [r2, #0]
 802001c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 802001e:	697b      	ldr	r3, [r7, #20]
 8020020:	3318      	adds	r3, #24
 8020022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020024:	6812      	ldr	r2, [r2, #0]
 8020026:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8020028:	697b      	ldr	r3, [r7, #20]
 802002a:	2200      	movs	r2, #0
 802002c:	701a      	strb	r2, [r3, #0]
 802002e:	2200      	movs	r2, #0
 8020030:	f042 0201 	orr.w	r2, r2, #1
 8020034:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8020036:	697b      	ldr	r3, [r7, #20]
 8020038:	2200      	movs	r2, #0
 802003a:	f042 0208 	orr.w	r2, r2, #8
 802003e:	709a      	strb	r2, [r3, #2]
 8020040:	2200      	movs	r2, #0
 8020042:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8020044:	697b      	ldr	r3, [r7, #20]
 8020046:	2206      	movs	r2, #6
 8020048:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 802004a:	697b      	ldr	r3, [r7, #20]
 802004c:	2204      	movs	r2, #4
 802004e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8020050:	f640 0306 	movw	r3, #2054	; 0x806
 8020054:	9300      	str	r3, [sp, #0]
 8020056:	687b      	ldr	r3, [r7, #4]
 8020058:	68ba      	ldr	r2, [r7, #8]
 802005a:	69b9      	ldr	r1, [r7, #24]
 802005c:	68f8      	ldr	r0, [r7, #12]
 802005e:	f001 fcf7 	bl	8021a50 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8020062:	69b8      	ldr	r0, [r7, #24]
 8020064:	f7f5 fd06 	bl	8015a74 <pbuf_free>
  p = NULL;
 8020068:	2300      	movs	r3, #0
 802006a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 802006c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8020070:	4618      	mov	r0, r3
 8020072:	3720      	adds	r7, #32
 8020074:	46bd      	mov	sp, r7
 8020076:	bd80      	pop	{r7, pc}
 8020078:	0802dc18 	.word	0x0802dc18
 802007c:	0802dd68 	.word	0x0802dd68
 8020080:	0802dc90 	.word	0x0802dc90
 8020084:	0802de18 	.word	0x0802de18
 8020088:	0802de4c 	.word	0x0802de4c

0802008c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 802008c:	b580      	push	{r7, lr}
 802008e:	b088      	sub	sp, #32
 8020090:	af04      	add	r7, sp, #16
 8020092:	60f8      	str	r0, [r7, #12]
 8020094:	60b9      	str	r1, [r7, #8]
 8020096:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8020098:	68fb      	ldr	r3, [r7, #12]
 802009a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 802009e:	68fb      	ldr	r3, [r7, #12]
 80200a0:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80200a4:	68fb      	ldr	r3, [r7, #12]
 80200a6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80200a8:	2201      	movs	r2, #1
 80200aa:	9203      	str	r2, [sp, #12]
 80200ac:	68ba      	ldr	r2, [r7, #8]
 80200ae:	9202      	str	r2, [sp, #8]
 80200b0:	4a06      	ldr	r2, [pc, #24]	; (80200cc <etharp_request_dst+0x40>)
 80200b2:	9201      	str	r2, [sp, #4]
 80200b4:	9300      	str	r3, [sp, #0]
 80200b6:	4603      	mov	r3, r0
 80200b8:	687a      	ldr	r2, [r7, #4]
 80200ba:	68f8      	ldr	r0, [r7, #12]
 80200bc:	f7ff ff5a 	bl	801ff74 <etharp_raw>
 80200c0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80200c2:	4618      	mov	r0, r3
 80200c4:	3710      	adds	r7, #16
 80200c6:	46bd      	mov	sp, r7
 80200c8:	bd80      	pop	{r7, pc}
 80200ca:	bf00      	nop
 80200cc:	0802ec70 	.word	0x0802ec70

080200d0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80200d0:	b580      	push	{r7, lr}
 80200d2:	b082      	sub	sp, #8
 80200d4:	af00      	add	r7, sp, #0
 80200d6:	6078      	str	r0, [r7, #4]
 80200d8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80200da:	4a05      	ldr	r2, [pc, #20]	; (80200f0 <etharp_request+0x20>)
 80200dc:	6839      	ldr	r1, [r7, #0]
 80200de:	6878      	ldr	r0, [r7, #4]
 80200e0:	f7ff ffd4 	bl	802008c <etharp_request_dst>
 80200e4:	4603      	mov	r3, r0
}
 80200e6:	4618      	mov	r0, r3
 80200e8:	3708      	adds	r7, #8
 80200ea:	46bd      	mov	sp, r7
 80200ec:	bd80      	pop	{r7, pc}
 80200ee:	bf00      	nop
 80200f0:	0802ec68 	.word	0x0802ec68

080200f4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80200f4:	b580      	push	{r7, lr}
 80200f6:	b08e      	sub	sp, #56	; 0x38
 80200f8:	af04      	add	r7, sp, #16
 80200fa:	6078      	str	r0, [r7, #4]
 80200fc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80200fe:	4b87      	ldr	r3, [pc, #540]	; (802031c <icmp_input+0x228>)
 8020100:	689b      	ldr	r3, [r3, #8]
 8020102:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8020104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020106:	781b      	ldrb	r3, [r3, #0]
 8020108:	f003 030f 	and.w	r3, r3, #15
 802010c:	b2db      	uxtb	r3, r3
 802010e:	009b      	lsls	r3, r3, #2
 8020110:	b2db      	uxtb	r3, r3
 8020112:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8020114:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020116:	2b13      	cmp	r3, #19
 8020118:	f240 80e8 	bls.w	80202ec <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 802011c:	687b      	ldr	r3, [r7, #4]
 802011e:	895b      	ldrh	r3, [r3, #10]
 8020120:	2b03      	cmp	r3, #3
 8020122:	f240 80e5 	bls.w	80202f0 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8020126:	687b      	ldr	r3, [r7, #4]
 8020128:	685b      	ldr	r3, [r3, #4]
 802012a:	781b      	ldrb	r3, [r3, #0]
 802012c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8020130:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8020134:	2b00      	cmp	r3, #0
 8020136:	f000 80d2 	beq.w	80202de <icmp_input+0x1ea>
 802013a:	2b08      	cmp	r3, #8
 802013c:	f040 80d2 	bne.w	80202e4 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8020140:	4b77      	ldr	r3, [pc, #476]	; (8020320 <icmp_input+0x22c>)
 8020142:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8020144:	4b75      	ldr	r3, [pc, #468]	; (802031c <icmp_input+0x228>)
 8020146:	695b      	ldr	r3, [r3, #20]
 8020148:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802014c:	2be0      	cmp	r3, #224	; 0xe0
 802014e:	f000 80d6 	beq.w	80202fe <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8020152:	4b72      	ldr	r3, [pc, #456]	; (802031c <icmp_input+0x228>)
 8020154:	695b      	ldr	r3, [r3, #20]
 8020156:	4a71      	ldr	r2, [pc, #452]	; (802031c <icmp_input+0x228>)
 8020158:	6812      	ldr	r2, [r2, #0]
 802015a:	4611      	mov	r1, r2
 802015c:	4618      	mov	r0, r3
 802015e:	f000 fc31 	bl	80209c4 <ip4_addr_isbroadcast_u32>
 8020162:	4603      	mov	r3, r0
 8020164:	2b00      	cmp	r3, #0
 8020166:	f040 80cc 	bne.w	8020302 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 802016a:	687b      	ldr	r3, [r7, #4]
 802016c:	891b      	ldrh	r3, [r3, #8]
 802016e:	2b07      	cmp	r3, #7
 8020170:	f240 80c0 	bls.w	80202f4 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8020174:	6878      	ldr	r0, [r7, #4]
 8020176:	f7f4 f830 	bl	80141da <inet_chksum_pbuf>
 802017a:	4603      	mov	r3, r0
 802017c:	2b00      	cmp	r3, #0
 802017e:	d003      	beq.n	8020188 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8020180:	6878      	ldr	r0, [r7, #4]
 8020182:	f7f5 fc77 	bl	8015a74 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8020186:	e0c5      	b.n	8020314 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8020188:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802018a:	330e      	adds	r3, #14
 802018c:	4619      	mov	r1, r3
 802018e:	6878      	ldr	r0, [r7, #4]
 8020190:	f7f5 fba8 	bl	80158e4 <pbuf_add_header>
 8020194:	4603      	mov	r3, r0
 8020196:	2b00      	cmp	r3, #0
 8020198:	d04b      	beq.n	8020232 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 802019a:	687b      	ldr	r3, [r7, #4]
 802019c:	891a      	ldrh	r2, [r3, #8]
 802019e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80201a0:	4413      	add	r3, r2
 80201a2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80201a4:	687b      	ldr	r3, [r7, #4]
 80201a6:	891b      	ldrh	r3, [r3, #8]
 80201a8:	8b7a      	ldrh	r2, [r7, #26]
 80201aa:	429a      	cmp	r2, r3
 80201ac:	f0c0 80ab 	bcc.w	8020306 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80201b0:	8b7b      	ldrh	r3, [r7, #26]
 80201b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80201b6:	4619      	mov	r1, r3
 80201b8:	200e      	movs	r0, #14
 80201ba:	f7f5 f945 	bl	8015448 <pbuf_alloc>
 80201be:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80201c0:	697b      	ldr	r3, [r7, #20]
 80201c2:	2b00      	cmp	r3, #0
 80201c4:	f000 80a1 	beq.w	802030a <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80201c8:	697b      	ldr	r3, [r7, #20]
 80201ca:	895b      	ldrh	r3, [r3, #10]
 80201cc:	461a      	mov	r2, r3
 80201ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80201d0:	3308      	adds	r3, #8
 80201d2:	429a      	cmp	r2, r3
 80201d4:	d203      	bcs.n	80201de <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80201d6:	6978      	ldr	r0, [r7, #20]
 80201d8:	f7f5 fc4c 	bl	8015a74 <pbuf_free>
          goto icmperr;
 80201dc:	e096      	b.n	802030c <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80201de:	697b      	ldr	r3, [r7, #20]
 80201e0:	685b      	ldr	r3, [r3, #4]
 80201e2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80201e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80201e6:	4618      	mov	r0, r3
 80201e8:	f005 ffee 	bl	80261c8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80201ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80201ee:	4619      	mov	r1, r3
 80201f0:	6978      	ldr	r0, [r7, #20]
 80201f2:	f7f5 fb87 	bl	8015904 <pbuf_remove_header>
 80201f6:	4603      	mov	r3, r0
 80201f8:	2b00      	cmp	r3, #0
 80201fa:	d009      	beq.n	8020210 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80201fc:	4b49      	ldr	r3, [pc, #292]	; (8020324 <icmp_input+0x230>)
 80201fe:	22b6      	movs	r2, #182	; 0xb6
 8020200:	4949      	ldr	r1, [pc, #292]	; (8020328 <icmp_input+0x234>)
 8020202:	484a      	ldr	r0, [pc, #296]	; (802032c <icmp_input+0x238>)
 8020204:	f006 fe66 	bl	8026ed4 <iprintf>
          pbuf_free(r);
 8020208:	6978      	ldr	r0, [r7, #20]
 802020a:	f7f5 fc33 	bl	8015a74 <pbuf_free>
          goto icmperr;
 802020e:	e07d      	b.n	802030c <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8020210:	6879      	ldr	r1, [r7, #4]
 8020212:	6978      	ldr	r0, [r7, #20]
 8020214:	f7f5 fd62 	bl	8015cdc <pbuf_copy>
 8020218:	4603      	mov	r3, r0
 802021a:	2b00      	cmp	r3, #0
 802021c:	d003      	beq.n	8020226 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 802021e:	6978      	ldr	r0, [r7, #20]
 8020220:	f7f5 fc28 	bl	8015a74 <pbuf_free>
          goto icmperr;
 8020224:	e072      	b.n	802030c <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8020226:	6878      	ldr	r0, [r7, #4]
 8020228:	f7f5 fc24 	bl	8015a74 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 802022c:	697b      	ldr	r3, [r7, #20]
 802022e:	607b      	str	r3, [r7, #4]
 8020230:	e00f      	b.n	8020252 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8020232:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020234:	330e      	adds	r3, #14
 8020236:	4619      	mov	r1, r3
 8020238:	6878      	ldr	r0, [r7, #4]
 802023a:	f7f5 fb63 	bl	8015904 <pbuf_remove_header>
 802023e:	4603      	mov	r3, r0
 8020240:	2b00      	cmp	r3, #0
 8020242:	d006      	beq.n	8020252 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8020244:	4b37      	ldr	r3, [pc, #220]	; (8020324 <icmp_input+0x230>)
 8020246:	22c7      	movs	r2, #199	; 0xc7
 8020248:	4939      	ldr	r1, [pc, #228]	; (8020330 <icmp_input+0x23c>)
 802024a:	4838      	ldr	r0, [pc, #224]	; (802032c <icmp_input+0x238>)
 802024c:	f006 fe42 	bl	8026ed4 <iprintf>
          goto icmperr;
 8020250:	e05c      	b.n	802030c <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8020252:	687b      	ldr	r3, [r7, #4]
 8020254:	685b      	ldr	r3, [r3, #4]
 8020256:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8020258:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802025a:	4619      	mov	r1, r3
 802025c:	6878      	ldr	r0, [r7, #4]
 802025e:	f7f5 fb41 	bl	80158e4 <pbuf_add_header>
 8020262:	4603      	mov	r3, r0
 8020264:	2b00      	cmp	r3, #0
 8020266:	d13c      	bne.n	80202e2 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8020268:	687b      	ldr	r3, [r7, #4]
 802026a:	685b      	ldr	r3, [r3, #4]
 802026c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 802026e:	69fb      	ldr	r3, [r7, #28]
 8020270:	681a      	ldr	r2, [r3, #0]
 8020272:	68fb      	ldr	r3, [r7, #12]
 8020274:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8020276:	4b29      	ldr	r3, [pc, #164]	; (802031c <icmp_input+0x228>)
 8020278:	691a      	ldr	r2, [r3, #16]
 802027a:	68fb      	ldr	r3, [r7, #12]
 802027c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 802027e:	693b      	ldr	r3, [r7, #16]
 8020280:	2200      	movs	r2, #0
 8020282:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8020284:	693b      	ldr	r3, [r7, #16]
 8020286:	885b      	ldrh	r3, [r3, #2]
 8020288:	b29b      	uxth	r3, r3
 802028a:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 802028e:	4293      	cmp	r3, r2
 8020290:	d907      	bls.n	80202a2 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8020292:	693b      	ldr	r3, [r7, #16]
 8020294:	885b      	ldrh	r3, [r3, #2]
 8020296:	b29b      	uxth	r3, r3
 8020298:	3309      	adds	r3, #9
 802029a:	b29a      	uxth	r2, r3
 802029c:	693b      	ldr	r3, [r7, #16]
 802029e:	805a      	strh	r2, [r3, #2]
 80202a0:	e006      	b.n	80202b0 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80202a2:	693b      	ldr	r3, [r7, #16]
 80202a4:	885b      	ldrh	r3, [r3, #2]
 80202a6:	b29b      	uxth	r3, r3
 80202a8:	3308      	adds	r3, #8
 80202aa:	b29a      	uxth	r2, r3
 80202ac:	693b      	ldr	r3, [r7, #16]
 80202ae:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80202b0:	68fb      	ldr	r3, [r7, #12]
 80202b2:	22ff      	movs	r2, #255	; 0xff
 80202b4:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80202b6:	68fb      	ldr	r3, [r7, #12]
 80202b8:	2200      	movs	r2, #0
 80202ba:	729a      	strb	r2, [r3, #10]
 80202bc:	2200      	movs	r2, #0
 80202be:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80202c0:	683b      	ldr	r3, [r7, #0]
 80202c2:	9302      	str	r3, [sp, #8]
 80202c4:	2301      	movs	r3, #1
 80202c6:	9301      	str	r3, [sp, #4]
 80202c8:	2300      	movs	r3, #0
 80202ca:	9300      	str	r3, [sp, #0]
 80202cc:	23ff      	movs	r3, #255	; 0xff
 80202ce:	2200      	movs	r2, #0
 80202d0:	69f9      	ldr	r1, [r7, #28]
 80202d2:	6878      	ldr	r0, [r7, #4]
 80202d4:	f000 fa9e 	bl	8020814 <ip4_output_if>
 80202d8:	4603      	mov	r3, r0
 80202da:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80202dc:	e001      	b.n	80202e2 <icmp_input+0x1ee>
      break;
 80202de:	bf00      	nop
 80202e0:	e000      	b.n	80202e4 <icmp_input+0x1f0>
      break;
 80202e2:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80202e4:	6878      	ldr	r0, [r7, #4]
 80202e6:	f7f5 fbc5 	bl	8015a74 <pbuf_free>
  return;
 80202ea:	e013      	b.n	8020314 <icmp_input+0x220>
    goto lenerr;
 80202ec:	bf00      	nop
 80202ee:	e002      	b.n	80202f6 <icmp_input+0x202>
    goto lenerr;
 80202f0:	bf00      	nop
 80202f2:	e000      	b.n	80202f6 <icmp_input+0x202>
        goto lenerr;
 80202f4:	bf00      	nop
lenerr:
  pbuf_free(p);
 80202f6:	6878      	ldr	r0, [r7, #4]
 80202f8:	f7f5 fbbc 	bl	8015a74 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80202fc:	e00a      	b.n	8020314 <icmp_input+0x220>
        goto icmperr;
 80202fe:	bf00      	nop
 8020300:	e004      	b.n	802030c <icmp_input+0x218>
        goto icmperr;
 8020302:	bf00      	nop
 8020304:	e002      	b.n	802030c <icmp_input+0x218>
          goto icmperr;
 8020306:	bf00      	nop
 8020308:	e000      	b.n	802030c <icmp_input+0x218>
          goto icmperr;
 802030a:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 802030c:	6878      	ldr	r0, [r7, #4]
 802030e:	f7f5 fbb1 	bl	8015a74 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8020312:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8020314:	3728      	adds	r7, #40	; 0x28
 8020316:	46bd      	mov	sp, r7
 8020318:	bd80      	pop	{r7, pc}
 802031a:	bf00      	nop
 802031c:	24005400 	.word	0x24005400
 8020320:	24005414 	.word	0x24005414
 8020324:	0802de90 	.word	0x0802de90
 8020328:	0802dec8 	.word	0x0802dec8
 802032c:	0802df00 	.word	0x0802df00
 8020330:	0802df28 	.word	0x0802df28

08020334 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8020334:	b580      	push	{r7, lr}
 8020336:	b082      	sub	sp, #8
 8020338:	af00      	add	r7, sp, #0
 802033a:	6078      	str	r0, [r7, #4]
 802033c:	460b      	mov	r3, r1
 802033e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8020340:	78fb      	ldrb	r3, [r7, #3]
 8020342:	461a      	mov	r2, r3
 8020344:	2103      	movs	r1, #3
 8020346:	6878      	ldr	r0, [r7, #4]
 8020348:	f000 f814 	bl	8020374 <icmp_send_response>
}
 802034c:	bf00      	nop
 802034e:	3708      	adds	r7, #8
 8020350:	46bd      	mov	sp, r7
 8020352:	bd80      	pop	{r7, pc}

08020354 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8020354:	b580      	push	{r7, lr}
 8020356:	b082      	sub	sp, #8
 8020358:	af00      	add	r7, sp, #0
 802035a:	6078      	str	r0, [r7, #4]
 802035c:	460b      	mov	r3, r1
 802035e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8020360:	78fb      	ldrb	r3, [r7, #3]
 8020362:	461a      	mov	r2, r3
 8020364:	210b      	movs	r1, #11
 8020366:	6878      	ldr	r0, [r7, #4]
 8020368:	f000 f804 	bl	8020374 <icmp_send_response>
}
 802036c:	bf00      	nop
 802036e:	3708      	adds	r7, #8
 8020370:	46bd      	mov	sp, r7
 8020372:	bd80      	pop	{r7, pc}

08020374 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8020374:	b580      	push	{r7, lr}
 8020376:	b08c      	sub	sp, #48	; 0x30
 8020378:	af04      	add	r7, sp, #16
 802037a:	6078      	str	r0, [r7, #4]
 802037c:	460b      	mov	r3, r1
 802037e:	70fb      	strb	r3, [r7, #3]
 8020380:	4613      	mov	r3, r2
 8020382:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8020384:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020388:	2124      	movs	r1, #36	; 0x24
 802038a:	2022      	movs	r0, #34	; 0x22
 802038c:	f7f5 f85c 	bl	8015448 <pbuf_alloc>
 8020390:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8020392:	69fb      	ldr	r3, [r7, #28]
 8020394:	2b00      	cmp	r3, #0
 8020396:	d056      	beq.n	8020446 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8020398:	69fb      	ldr	r3, [r7, #28]
 802039a:	895b      	ldrh	r3, [r3, #10]
 802039c:	2b23      	cmp	r3, #35	; 0x23
 802039e:	d806      	bhi.n	80203ae <icmp_send_response+0x3a>
 80203a0:	4b2b      	ldr	r3, [pc, #172]	; (8020450 <icmp_send_response+0xdc>)
 80203a2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80203a6:	492b      	ldr	r1, [pc, #172]	; (8020454 <icmp_send_response+0xe0>)
 80203a8:	482b      	ldr	r0, [pc, #172]	; (8020458 <icmp_send_response+0xe4>)
 80203aa:	f006 fd93 	bl	8026ed4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80203ae:	687b      	ldr	r3, [r7, #4]
 80203b0:	685b      	ldr	r3, [r3, #4]
 80203b2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80203b4:	69fb      	ldr	r3, [r7, #28]
 80203b6:	685b      	ldr	r3, [r3, #4]
 80203b8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80203ba:	697b      	ldr	r3, [r7, #20]
 80203bc:	78fa      	ldrb	r2, [r7, #3]
 80203be:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80203c0:	697b      	ldr	r3, [r7, #20]
 80203c2:	78ba      	ldrb	r2, [r7, #2]
 80203c4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80203c6:	697b      	ldr	r3, [r7, #20]
 80203c8:	2200      	movs	r2, #0
 80203ca:	711a      	strb	r2, [r3, #4]
 80203cc:	2200      	movs	r2, #0
 80203ce:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80203d0:	697b      	ldr	r3, [r7, #20]
 80203d2:	2200      	movs	r2, #0
 80203d4:	719a      	strb	r2, [r3, #6]
 80203d6:	2200      	movs	r2, #0
 80203d8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80203da:	69fb      	ldr	r3, [r7, #28]
 80203dc:	685b      	ldr	r3, [r3, #4]
 80203de:	f103 0008 	add.w	r0, r3, #8
 80203e2:	687b      	ldr	r3, [r7, #4]
 80203e4:	685b      	ldr	r3, [r3, #4]
 80203e6:	221c      	movs	r2, #28
 80203e8:	4619      	mov	r1, r3
 80203ea:	f005 feed 	bl	80261c8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80203ee:	69bb      	ldr	r3, [r7, #24]
 80203f0:	68db      	ldr	r3, [r3, #12]
 80203f2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80203f4:	f107 030c 	add.w	r3, r7, #12
 80203f8:	4618      	mov	r0, r3
 80203fa:	f000 f82f 	bl	802045c <ip4_route>
 80203fe:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8020400:	693b      	ldr	r3, [r7, #16]
 8020402:	2b00      	cmp	r3, #0
 8020404:	d01b      	beq.n	802043e <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8020406:	697b      	ldr	r3, [r7, #20]
 8020408:	2200      	movs	r2, #0
 802040a:	709a      	strb	r2, [r3, #2]
 802040c:	2200      	movs	r2, #0
 802040e:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8020410:	69fb      	ldr	r3, [r7, #28]
 8020412:	895b      	ldrh	r3, [r3, #10]
 8020414:	4619      	mov	r1, r3
 8020416:	6978      	ldr	r0, [r7, #20]
 8020418:	f7f3 fecd 	bl	80141b6 <inet_chksum>
 802041c:	4603      	mov	r3, r0
 802041e:	461a      	mov	r2, r3
 8020420:	697b      	ldr	r3, [r7, #20]
 8020422:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8020424:	f107 020c 	add.w	r2, r7, #12
 8020428:	693b      	ldr	r3, [r7, #16]
 802042a:	9302      	str	r3, [sp, #8]
 802042c:	2301      	movs	r3, #1
 802042e:	9301      	str	r3, [sp, #4]
 8020430:	2300      	movs	r3, #0
 8020432:	9300      	str	r3, [sp, #0]
 8020434:	23ff      	movs	r3, #255	; 0xff
 8020436:	2100      	movs	r1, #0
 8020438:	69f8      	ldr	r0, [r7, #28]
 802043a:	f000 f9eb 	bl	8020814 <ip4_output_if>
  }
  pbuf_free(q);
 802043e:	69f8      	ldr	r0, [r7, #28]
 8020440:	f7f5 fb18 	bl	8015a74 <pbuf_free>
 8020444:	e000      	b.n	8020448 <icmp_send_response+0xd4>
    return;
 8020446:	bf00      	nop
}
 8020448:	3720      	adds	r7, #32
 802044a:	46bd      	mov	sp, r7
 802044c:	bd80      	pop	{r7, pc}
 802044e:	bf00      	nop
 8020450:	0802de90 	.word	0x0802de90
 8020454:	0802df5c 	.word	0x0802df5c
 8020458:	0802df00 	.word	0x0802df00

0802045c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 802045c:	b480      	push	{r7}
 802045e:	b085      	sub	sp, #20
 8020460:	af00      	add	r7, sp, #0
 8020462:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8020464:	4b33      	ldr	r3, [pc, #204]	; (8020534 <ip4_route+0xd8>)
 8020466:	681b      	ldr	r3, [r3, #0]
 8020468:	60fb      	str	r3, [r7, #12]
 802046a:	e036      	b.n	80204da <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 802046c:	68fb      	ldr	r3, [r7, #12]
 802046e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020472:	f003 0301 	and.w	r3, r3, #1
 8020476:	b2db      	uxtb	r3, r3
 8020478:	2b00      	cmp	r3, #0
 802047a:	d02b      	beq.n	80204d4 <ip4_route+0x78>
 802047c:	68fb      	ldr	r3, [r7, #12]
 802047e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020482:	089b      	lsrs	r3, r3, #2
 8020484:	f003 0301 	and.w	r3, r3, #1
 8020488:	b2db      	uxtb	r3, r3
 802048a:	2b00      	cmp	r3, #0
 802048c:	d022      	beq.n	80204d4 <ip4_route+0x78>
 802048e:	68fb      	ldr	r3, [r7, #12]
 8020490:	3304      	adds	r3, #4
 8020492:	681b      	ldr	r3, [r3, #0]
 8020494:	2b00      	cmp	r3, #0
 8020496:	d01d      	beq.n	80204d4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8020498:	687b      	ldr	r3, [r7, #4]
 802049a:	681a      	ldr	r2, [r3, #0]
 802049c:	68fb      	ldr	r3, [r7, #12]
 802049e:	3304      	adds	r3, #4
 80204a0:	681b      	ldr	r3, [r3, #0]
 80204a2:	405a      	eors	r2, r3
 80204a4:	68fb      	ldr	r3, [r7, #12]
 80204a6:	3308      	adds	r3, #8
 80204a8:	681b      	ldr	r3, [r3, #0]
 80204aa:	4013      	ands	r3, r2
 80204ac:	2b00      	cmp	r3, #0
 80204ae:	d101      	bne.n	80204b4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80204b0:	68fb      	ldr	r3, [r7, #12]
 80204b2:	e038      	b.n	8020526 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80204b4:	68fb      	ldr	r3, [r7, #12]
 80204b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80204ba:	f003 0302 	and.w	r3, r3, #2
 80204be:	2b00      	cmp	r3, #0
 80204c0:	d108      	bne.n	80204d4 <ip4_route+0x78>
 80204c2:	687b      	ldr	r3, [r7, #4]
 80204c4:	681a      	ldr	r2, [r3, #0]
 80204c6:	68fb      	ldr	r3, [r7, #12]
 80204c8:	330c      	adds	r3, #12
 80204ca:	681b      	ldr	r3, [r3, #0]
 80204cc:	429a      	cmp	r2, r3
 80204ce:	d101      	bne.n	80204d4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80204d0:	68fb      	ldr	r3, [r7, #12]
 80204d2:	e028      	b.n	8020526 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80204d4:	68fb      	ldr	r3, [r7, #12]
 80204d6:	681b      	ldr	r3, [r3, #0]
 80204d8:	60fb      	str	r3, [r7, #12]
 80204da:	68fb      	ldr	r3, [r7, #12]
 80204dc:	2b00      	cmp	r3, #0
 80204de:	d1c5      	bne.n	802046c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80204e0:	4b15      	ldr	r3, [pc, #84]	; (8020538 <ip4_route+0xdc>)
 80204e2:	681b      	ldr	r3, [r3, #0]
 80204e4:	2b00      	cmp	r3, #0
 80204e6:	d01a      	beq.n	802051e <ip4_route+0xc2>
 80204e8:	4b13      	ldr	r3, [pc, #76]	; (8020538 <ip4_route+0xdc>)
 80204ea:	681b      	ldr	r3, [r3, #0]
 80204ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80204f0:	f003 0301 	and.w	r3, r3, #1
 80204f4:	2b00      	cmp	r3, #0
 80204f6:	d012      	beq.n	802051e <ip4_route+0xc2>
 80204f8:	4b0f      	ldr	r3, [pc, #60]	; (8020538 <ip4_route+0xdc>)
 80204fa:	681b      	ldr	r3, [r3, #0]
 80204fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020500:	f003 0304 	and.w	r3, r3, #4
 8020504:	2b00      	cmp	r3, #0
 8020506:	d00a      	beq.n	802051e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8020508:	4b0b      	ldr	r3, [pc, #44]	; (8020538 <ip4_route+0xdc>)
 802050a:	681b      	ldr	r3, [r3, #0]
 802050c:	3304      	adds	r3, #4
 802050e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8020510:	2b00      	cmp	r3, #0
 8020512:	d004      	beq.n	802051e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8020514:	687b      	ldr	r3, [r7, #4]
 8020516:	681b      	ldr	r3, [r3, #0]
 8020518:	b2db      	uxtb	r3, r3
 802051a:	2b7f      	cmp	r3, #127	; 0x7f
 802051c:	d101      	bne.n	8020522 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 802051e:	2300      	movs	r3, #0
 8020520:	e001      	b.n	8020526 <ip4_route+0xca>
  }

  return netif_default;
 8020522:	4b05      	ldr	r3, [pc, #20]	; (8020538 <ip4_route+0xdc>)
 8020524:	681b      	ldr	r3, [r3, #0]
}
 8020526:	4618      	mov	r0, r3
 8020528:	3714      	adds	r7, #20
 802052a:	46bd      	mov	sp, r7
 802052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020530:	4770      	bx	lr
 8020532:	bf00      	nop
 8020534:	24008658 	.word	0x24008658
 8020538:	2400865c 	.word	0x2400865c

0802053c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 802053c:	b580      	push	{r7, lr}
 802053e:	b082      	sub	sp, #8
 8020540:	af00      	add	r7, sp, #0
 8020542:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8020544:	687b      	ldr	r3, [r7, #4]
 8020546:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802054a:	f003 0301 	and.w	r3, r3, #1
 802054e:	b2db      	uxtb	r3, r3
 8020550:	2b00      	cmp	r3, #0
 8020552:	d016      	beq.n	8020582 <ip4_input_accept+0x46>
 8020554:	687b      	ldr	r3, [r7, #4]
 8020556:	3304      	adds	r3, #4
 8020558:	681b      	ldr	r3, [r3, #0]
 802055a:	2b00      	cmp	r3, #0
 802055c:	d011      	beq.n	8020582 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 802055e:	4b0b      	ldr	r3, [pc, #44]	; (802058c <ip4_input_accept+0x50>)
 8020560:	695a      	ldr	r2, [r3, #20]
 8020562:	687b      	ldr	r3, [r7, #4]
 8020564:	3304      	adds	r3, #4
 8020566:	681b      	ldr	r3, [r3, #0]
 8020568:	429a      	cmp	r2, r3
 802056a:	d008      	beq.n	802057e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 802056c:	4b07      	ldr	r3, [pc, #28]	; (802058c <ip4_input_accept+0x50>)
 802056e:	695b      	ldr	r3, [r3, #20]
 8020570:	6879      	ldr	r1, [r7, #4]
 8020572:	4618      	mov	r0, r3
 8020574:	f000 fa26 	bl	80209c4 <ip4_addr_isbroadcast_u32>
 8020578:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 802057a:	2b00      	cmp	r3, #0
 802057c:	d001      	beq.n	8020582 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 802057e:	2301      	movs	r3, #1
 8020580:	e000      	b.n	8020584 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8020582:	2300      	movs	r3, #0
}
 8020584:	4618      	mov	r0, r3
 8020586:	3708      	adds	r7, #8
 8020588:	46bd      	mov	sp, r7
 802058a:	bd80      	pop	{r7, pc}
 802058c:	24005400 	.word	0x24005400

08020590 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8020590:	b580      	push	{r7, lr}
 8020592:	b088      	sub	sp, #32
 8020594:	af00      	add	r7, sp, #0
 8020596:	6078      	str	r0, [r7, #4]
 8020598:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 802059a:	2301      	movs	r3, #1
 802059c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 802059e:	687b      	ldr	r3, [r7, #4]
 80205a0:	685b      	ldr	r3, [r3, #4]
 80205a2:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80205a4:	69fb      	ldr	r3, [r7, #28]
 80205a6:	781b      	ldrb	r3, [r3, #0]
 80205a8:	091b      	lsrs	r3, r3, #4
 80205aa:	b2db      	uxtb	r3, r3
 80205ac:	2b04      	cmp	r3, #4
 80205ae:	d004      	beq.n	80205ba <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80205b0:	6878      	ldr	r0, [r7, #4]
 80205b2:	f7f5 fa5f 	bl	8015a74 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80205b6:	2300      	movs	r3, #0
 80205b8:	e123      	b.n	8020802 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80205ba:	69fb      	ldr	r3, [r7, #28]
 80205bc:	781b      	ldrb	r3, [r3, #0]
 80205be:	f003 030f 	and.w	r3, r3, #15
 80205c2:	b2db      	uxtb	r3, r3
 80205c4:	009b      	lsls	r3, r3, #2
 80205c6:	b2db      	uxtb	r3, r3
 80205c8:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80205ca:	69fb      	ldr	r3, [r7, #28]
 80205cc:	885b      	ldrh	r3, [r3, #2]
 80205ce:	b29b      	uxth	r3, r3
 80205d0:	4618      	mov	r0, r3
 80205d2:	f7f2 fd7d 	bl	80130d0 <lwip_htons>
 80205d6:	4603      	mov	r3, r0
 80205d8:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80205da:	687b      	ldr	r3, [r7, #4]
 80205dc:	891b      	ldrh	r3, [r3, #8]
 80205de:	8a3a      	ldrh	r2, [r7, #16]
 80205e0:	429a      	cmp	r2, r3
 80205e2:	d204      	bcs.n	80205ee <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80205e4:	8a3b      	ldrh	r3, [r7, #16]
 80205e6:	4619      	mov	r1, r3
 80205e8:	6878      	ldr	r0, [r7, #4]
 80205ea:	f7f5 f88b 	bl	8015704 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80205ee:	687b      	ldr	r3, [r7, #4]
 80205f0:	895b      	ldrh	r3, [r3, #10]
 80205f2:	8a7a      	ldrh	r2, [r7, #18]
 80205f4:	429a      	cmp	r2, r3
 80205f6:	d807      	bhi.n	8020608 <ip4_input+0x78>
 80205f8:	687b      	ldr	r3, [r7, #4]
 80205fa:	891b      	ldrh	r3, [r3, #8]
 80205fc:	8a3a      	ldrh	r2, [r7, #16]
 80205fe:	429a      	cmp	r2, r3
 8020600:	d802      	bhi.n	8020608 <ip4_input+0x78>
 8020602:	8a7b      	ldrh	r3, [r7, #18]
 8020604:	2b13      	cmp	r3, #19
 8020606:	d804      	bhi.n	8020612 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8020608:	6878      	ldr	r0, [r7, #4]
 802060a:	f7f5 fa33 	bl	8015a74 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 802060e:	2300      	movs	r3, #0
 8020610:	e0f7      	b.n	8020802 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8020612:	69fb      	ldr	r3, [r7, #28]
 8020614:	691b      	ldr	r3, [r3, #16]
 8020616:	4a7d      	ldr	r2, [pc, #500]	; (802080c <ip4_input+0x27c>)
 8020618:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 802061a:	69fb      	ldr	r3, [r7, #28]
 802061c:	68db      	ldr	r3, [r3, #12]
 802061e:	4a7b      	ldr	r2, [pc, #492]	; (802080c <ip4_input+0x27c>)
 8020620:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8020622:	4b7a      	ldr	r3, [pc, #488]	; (802080c <ip4_input+0x27c>)
 8020624:	695b      	ldr	r3, [r3, #20]
 8020626:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802062a:	2be0      	cmp	r3, #224	; 0xe0
 802062c:	d112      	bne.n	8020654 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 802062e:	683b      	ldr	r3, [r7, #0]
 8020630:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020634:	f003 0301 	and.w	r3, r3, #1
 8020638:	b2db      	uxtb	r3, r3
 802063a:	2b00      	cmp	r3, #0
 802063c:	d007      	beq.n	802064e <ip4_input+0xbe>
 802063e:	683b      	ldr	r3, [r7, #0]
 8020640:	3304      	adds	r3, #4
 8020642:	681b      	ldr	r3, [r3, #0]
 8020644:	2b00      	cmp	r3, #0
 8020646:	d002      	beq.n	802064e <ip4_input+0xbe>
      netif = inp;
 8020648:	683b      	ldr	r3, [r7, #0]
 802064a:	61bb      	str	r3, [r7, #24]
 802064c:	e02a      	b.n	80206a4 <ip4_input+0x114>
    } else {
      netif = NULL;
 802064e:	2300      	movs	r3, #0
 8020650:	61bb      	str	r3, [r7, #24]
 8020652:	e027      	b.n	80206a4 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8020654:	6838      	ldr	r0, [r7, #0]
 8020656:	f7ff ff71 	bl	802053c <ip4_input_accept>
 802065a:	4603      	mov	r3, r0
 802065c:	2b00      	cmp	r3, #0
 802065e:	d002      	beq.n	8020666 <ip4_input+0xd6>
      netif = inp;
 8020660:	683b      	ldr	r3, [r7, #0]
 8020662:	61bb      	str	r3, [r7, #24]
 8020664:	e01e      	b.n	80206a4 <ip4_input+0x114>
    } else {
      netif = NULL;
 8020666:	2300      	movs	r3, #0
 8020668:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 802066a:	4b68      	ldr	r3, [pc, #416]	; (802080c <ip4_input+0x27c>)
 802066c:	695b      	ldr	r3, [r3, #20]
 802066e:	b2db      	uxtb	r3, r3
 8020670:	2b7f      	cmp	r3, #127	; 0x7f
 8020672:	d017      	beq.n	80206a4 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8020674:	4b66      	ldr	r3, [pc, #408]	; (8020810 <ip4_input+0x280>)
 8020676:	681b      	ldr	r3, [r3, #0]
 8020678:	61bb      	str	r3, [r7, #24]
 802067a:	e00e      	b.n	802069a <ip4_input+0x10a>
          if (netif == inp) {
 802067c:	69ba      	ldr	r2, [r7, #24]
 802067e:	683b      	ldr	r3, [r7, #0]
 8020680:	429a      	cmp	r2, r3
 8020682:	d006      	beq.n	8020692 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8020684:	69b8      	ldr	r0, [r7, #24]
 8020686:	f7ff ff59 	bl	802053c <ip4_input_accept>
 802068a:	4603      	mov	r3, r0
 802068c:	2b00      	cmp	r3, #0
 802068e:	d108      	bne.n	80206a2 <ip4_input+0x112>
 8020690:	e000      	b.n	8020694 <ip4_input+0x104>
            continue;
 8020692:	bf00      	nop
        NETIF_FOREACH(netif) {
 8020694:	69bb      	ldr	r3, [r7, #24]
 8020696:	681b      	ldr	r3, [r3, #0]
 8020698:	61bb      	str	r3, [r7, #24]
 802069a:	69bb      	ldr	r3, [r7, #24]
 802069c:	2b00      	cmp	r3, #0
 802069e:	d1ed      	bne.n	802067c <ip4_input+0xec>
 80206a0:	e000      	b.n	80206a4 <ip4_input+0x114>
            break;
 80206a2:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80206a4:	69bb      	ldr	r3, [r7, #24]
 80206a6:	2b00      	cmp	r3, #0
 80206a8:	d111      	bne.n	80206ce <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80206aa:	69fb      	ldr	r3, [r7, #28]
 80206ac:	7a5b      	ldrb	r3, [r3, #9]
 80206ae:	2b11      	cmp	r3, #17
 80206b0:	d10d      	bne.n	80206ce <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80206b2:	8a7b      	ldrh	r3, [r7, #18]
 80206b4:	69fa      	ldr	r2, [r7, #28]
 80206b6:	4413      	add	r3, r2
 80206b8:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80206ba:	68fb      	ldr	r3, [r7, #12]
 80206bc:	885b      	ldrh	r3, [r3, #2]
 80206be:	b29b      	uxth	r3, r3
 80206c0:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80206c4:	d103      	bne.n	80206ce <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80206c6:	683b      	ldr	r3, [r7, #0]
 80206c8:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80206ca:	2300      	movs	r3, #0
 80206cc:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80206ce:	697b      	ldr	r3, [r7, #20]
 80206d0:	2b00      	cmp	r3, #0
 80206d2:	d017      	beq.n	8020704 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80206d4:	4b4d      	ldr	r3, [pc, #308]	; (802080c <ip4_input+0x27c>)
 80206d6:	691b      	ldr	r3, [r3, #16]
 80206d8:	2b00      	cmp	r3, #0
 80206da:	d013      	beq.n	8020704 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80206dc:	4b4b      	ldr	r3, [pc, #300]	; (802080c <ip4_input+0x27c>)
 80206de:	691b      	ldr	r3, [r3, #16]
 80206e0:	6839      	ldr	r1, [r7, #0]
 80206e2:	4618      	mov	r0, r3
 80206e4:	f000 f96e 	bl	80209c4 <ip4_addr_isbroadcast_u32>
 80206e8:	4603      	mov	r3, r0
 80206ea:	2b00      	cmp	r3, #0
 80206ec:	d105      	bne.n	80206fa <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80206ee:	4b47      	ldr	r3, [pc, #284]	; (802080c <ip4_input+0x27c>)
 80206f0:	691b      	ldr	r3, [r3, #16]
 80206f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80206f6:	2be0      	cmp	r3, #224	; 0xe0
 80206f8:	d104      	bne.n	8020704 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80206fa:	6878      	ldr	r0, [r7, #4]
 80206fc:	f7f5 f9ba 	bl	8015a74 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8020700:	2300      	movs	r3, #0
 8020702:	e07e      	b.n	8020802 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8020704:	69bb      	ldr	r3, [r7, #24]
 8020706:	2b00      	cmp	r3, #0
 8020708:	d104      	bne.n	8020714 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 802070a:	6878      	ldr	r0, [r7, #4]
 802070c:	f7f5 f9b2 	bl	8015a74 <pbuf_free>
    return ERR_OK;
 8020710:	2300      	movs	r3, #0
 8020712:	e076      	b.n	8020802 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8020714:	69fb      	ldr	r3, [r7, #28]
 8020716:	88db      	ldrh	r3, [r3, #6]
 8020718:	b29b      	uxth	r3, r3
 802071a:	461a      	mov	r2, r3
 802071c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8020720:	4013      	ands	r3, r2
 8020722:	2b00      	cmp	r3, #0
 8020724:	d00b      	beq.n	802073e <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8020726:	6878      	ldr	r0, [r7, #4]
 8020728:	f000 fdd0 	bl	80212cc <ip4_reass>
 802072c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 802072e:	687b      	ldr	r3, [r7, #4]
 8020730:	2b00      	cmp	r3, #0
 8020732:	d101      	bne.n	8020738 <ip4_input+0x1a8>
      return ERR_OK;
 8020734:	2300      	movs	r3, #0
 8020736:	e064      	b.n	8020802 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8020738:	687b      	ldr	r3, [r7, #4]
 802073a:	685b      	ldr	r3, [r3, #4]
 802073c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 802073e:	4a33      	ldr	r2, [pc, #204]	; (802080c <ip4_input+0x27c>)
 8020740:	69bb      	ldr	r3, [r7, #24]
 8020742:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8020744:	4a31      	ldr	r2, [pc, #196]	; (802080c <ip4_input+0x27c>)
 8020746:	683b      	ldr	r3, [r7, #0]
 8020748:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 802074a:	4a30      	ldr	r2, [pc, #192]	; (802080c <ip4_input+0x27c>)
 802074c:	69fb      	ldr	r3, [r7, #28]
 802074e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8020750:	69fb      	ldr	r3, [r7, #28]
 8020752:	781b      	ldrb	r3, [r3, #0]
 8020754:	f003 030f 	and.w	r3, r3, #15
 8020758:	b2db      	uxtb	r3, r3
 802075a:	009b      	lsls	r3, r3, #2
 802075c:	b2db      	uxtb	r3, r3
 802075e:	b29a      	uxth	r2, r3
 8020760:	4b2a      	ldr	r3, [pc, #168]	; (802080c <ip4_input+0x27c>)
 8020762:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8020764:	8a7b      	ldrh	r3, [r7, #18]
 8020766:	4619      	mov	r1, r3
 8020768:	6878      	ldr	r0, [r7, #4]
 802076a:	f7f5 f8cb 	bl	8015904 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 802076e:	69fb      	ldr	r3, [r7, #28]
 8020770:	7a5b      	ldrb	r3, [r3, #9]
 8020772:	2b11      	cmp	r3, #17
 8020774:	d006      	beq.n	8020784 <ip4_input+0x1f4>
 8020776:	2b11      	cmp	r3, #17
 8020778:	dc13      	bgt.n	80207a2 <ip4_input+0x212>
 802077a:	2b01      	cmp	r3, #1
 802077c:	d00c      	beq.n	8020798 <ip4_input+0x208>
 802077e:	2b06      	cmp	r3, #6
 8020780:	d005      	beq.n	802078e <ip4_input+0x1fe>
 8020782:	e00e      	b.n	80207a2 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8020784:	6839      	ldr	r1, [r7, #0]
 8020786:	6878      	ldr	r0, [r7, #4]
 8020788:	f7fc f9ae 	bl	801cae8 <udp_input>
        break;
 802078c:	e026      	b.n	80207dc <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 802078e:	6839      	ldr	r1, [r7, #0]
 8020790:	6878      	ldr	r0, [r7, #4]
 8020792:	f7f7 fd31 	bl	80181f8 <tcp_input>
        break;
 8020796:	e021      	b.n	80207dc <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8020798:	6839      	ldr	r1, [r7, #0]
 802079a:	6878      	ldr	r0, [r7, #4]
 802079c:	f7ff fcaa 	bl	80200f4 <icmp_input>
        break;
 80207a0:	e01c      	b.n	80207dc <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80207a2:	4b1a      	ldr	r3, [pc, #104]	; (802080c <ip4_input+0x27c>)
 80207a4:	695b      	ldr	r3, [r3, #20]
 80207a6:	69b9      	ldr	r1, [r7, #24]
 80207a8:	4618      	mov	r0, r3
 80207aa:	f000 f90b 	bl	80209c4 <ip4_addr_isbroadcast_u32>
 80207ae:	4603      	mov	r3, r0
 80207b0:	2b00      	cmp	r3, #0
 80207b2:	d10f      	bne.n	80207d4 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80207b4:	4b15      	ldr	r3, [pc, #84]	; (802080c <ip4_input+0x27c>)
 80207b6:	695b      	ldr	r3, [r3, #20]
 80207b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80207bc:	2be0      	cmp	r3, #224	; 0xe0
 80207be:	d009      	beq.n	80207d4 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80207c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80207c4:	4619      	mov	r1, r3
 80207c6:	6878      	ldr	r0, [r7, #4]
 80207c8:	f7f5 f90f 	bl	80159ea <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80207cc:	2102      	movs	r1, #2
 80207ce:	6878      	ldr	r0, [r7, #4]
 80207d0:	f7ff fdb0 	bl	8020334 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80207d4:	6878      	ldr	r0, [r7, #4]
 80207d6:	f7f5 f94d 	bl	8015a74 <pbuf_free>
        break;
 80207da:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80207dc:	4b0b      	ldr	r3, [pc, #44]	; (802080c <ip4_input+0x27c>)
 80207de:	2200      	movs	r2, #0
 80207e0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80207e2:	4b0a      	ldr	r3, [pc, #40]	; (802080c <ip4_input+0x27c>)
 80207e4:	2200      	movs	r2, #0
 80207e6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80207e8:	4b08      	ldr	r3, [pc, #32]	; (802080c <ip4_input+0x27c>)
 80207ea:	2200      	movs	r2, #0
 80207ec:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80207ee:	4b07      	ldr	r3, [pc, #28]	; (802080c <ip4_input+0x27c>)
 80207f0:	2200      	movs	r2, #0
 80207f2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80207f4:	4b05      	ldr	r3, [pc, #20]	; (802080c <ip4_input+0x27c>)
 80207f6:	2200      	movs	r2, #0
 80207f8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80207fa:	4b04      	ldr	r3, [pc, #16]	; (802080c <ip4_input+0x27c>)
 80207fc:	2200      	movs	r2, #0
 80207fe:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8020800:	2300      	movs	r3, #0
}
 8020802:	4618      	mov	r0, r3
 8020804:	3720      	adds	r7, #32
 8020806:	46bd      	mov	sp, r7
 8020808:	bd80      	pop	{r7, pc}
 802080a:	bf00      	nop
 802080c:	24005400 	.word	0x24005400
 8020810:	24008658 	.word	0x24008658

08020814 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8020814:	b580      	push	{r7, lr}
 8020816:	b08a      	sub	sp, #40	; 0x28
 8020818:	af04      	add	r7, sp, #16
 802081a:	60f8      	str	r0, [r7, #12]
 802081c:	60b9      	str	r1, [r7, #8]
 802081e:	607a      	str	r2, [r7, #4]
 8020820:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8020822:	68bb      	ldr	r3, [r7, #8]
 8020824:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8020826:	687b      	ldr	r3, [r7, #4]
 8020828:	2b00      	cmp	r3, #0
 802082a:	d009      	beq.n	8020840 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 802082c:	68bb      	ldr	r3, [r7, #8]
 802082e:	2b00      	cmp	r3, #0
 8020830:	d003      	beq.n	802083a <ip4_output_if+0x26>
 8020832:	68bb      	ldr	r3, [r7, #8]
 8020834:	681b      	ldr	r3, [r3, #0]
 8020836:	2b00      	cmp	r3, #0
 8020838:	d102      	bne.n	8020840 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 802083a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802083c:	3304      	adds	r3, #4
 802083e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8020840:	78fa      	ldrb	r2, [r7, #3]
 8020842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020844:	9302      	str	r3, [sp, #8]
 8020846:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802084a:	9301      	str	r3, [sp, #4]
 802084c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8020850:	9300      	str	r3, [sp, #0]
 8020852:	4613      	mov	r3, r2
 8020854:	687a      	ldr	r2, [r7, #4]
 8020856:	6979      	ldr	r1, [r7, #20]
 8020858:	68f8      	ldr	r0, [r7, #12]
 802085a:	f000 f805 	bl	8020868 <ip4_output_if_src>
 802085e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8020860:	4618      	mov	r0, r3
 8020862:	3718      	adds	r7, #24
 8020864:	46bd      	mov	sp, r7
 8020866:	bd80      	pop	{r7, pc}

08020868 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8020868:	b580      	push	{r7, lr}
 802086a:	b088      	sub	sp, #32
 802086c:	af00      	add	r7, sp, #0
 802086e:	60f8      	str	r0, [r7, #12]
 8020870:	60b9      	str	r1, [r7, #8]
 8020872:	607a      	str	r2, [r7, #4]
 8020874:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8020876:	68fb      	ldr	r3, [r7, #12]
 8020878:	7b9b      	ldrb	r3, [r3, #14]
 802087a:	2b01      	cmp	r3, #1
 802087c:	d006      	beq.n	802088c <ip4_output_if_src+0x24>
 802087e:	4b4b      	ldr	r3, [pc, #300]	; (80209ac <ip4_output_if_src+0x144>)
 8020880:	f44f 7255 	mov.w	r2, #852	; 0x354
 8020884:	494a      	ldr	r1, [pc, #296]	; (80209b0 <ip4_output_if_src+0x148>)
 8020886:	484b      	ldr	r0, [pc, #300]	; (80209b4 <ip4_output_if_src+0x14c>)
 8020888:	f006 fb24 	bl	8026ed4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 802088c:	687b      	ldr	r3, [r7, #4]
 802088e:	2b00      	cmp	r3, #0
 8020890:	d060      	beq.n	8020954 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8020892:	2314      	movs	r3, #20
 8020894:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8020896:	2114      	movs	r1, #20
 8020898:	68f8      	ldr	r0, [r7, #12]
 802089a:	f7f5 f823 	bl	80158e4 <pbuf_add_header>
 802089e:	4603      	mov	r3, r0
 80208a0:	2b00      	cmp	r3, #0
 80208a2:	d002      	beq.n	80208aa <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80208a4:	f06f 0301 	mvn.w	r3, #1
 80208a8:	e07c      	b.n	80209a4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80208aa:	68fb      	ldr	r3, [r7, #12]
 80208ac:	685b      	ldr	r3, [r3, #4]
 80208ae:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80208b0:	68fb      	ldr	r3, [r7, #12]
 80208b2:	895b      	ldrh	r3, [r3, #10]
 80208b4:	2b13      	cmp	r3, #19
 80208b6:	d806      	bhi.n	80208c6 <ip4_output_if_src+0x5e>
 80208b8:	4b3c      	ldr	r3, [pc, #240]	; (80209ac <ip4_output_if_src+0x144>)
 80208ba:	f44f 7262 	mov.w	r2, #904	; 0x388
 80208be:	493e      	ldr	r1, [pc, #248]	; (80209b8 <ip4_output_if_src+0x150>)
 80208c0:	483c      	ldr	r0, [pc, #240]	; (80209b4 <ip4_output_if_src+0x14c>)
 80208c2:	f006 fb07 	bl	8026ed4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80208c6:	69fb      	ldr	r3, [r7, #28]
 80208c8:	78fa      	ldrb	r2, [r7, #3]
 80208ca:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80208cc:	69fb      	ldr	r3, [r7, #28]
 80208ce:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80208d2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80208d4:	687b      	ldr	r3, [r7, #4]
 80208d6:	681a      	ldr	r2, [r3, #0]
 80208d8:	69fb      	ldr	r3, [r7, #28]
 80208da:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80208dc:	8b7b      	ldrh	r3, [r7, #26]
 80208de:	089b      	lsrs	r3, r3, #2
 80208e0:	b29b      	uxth	r3, r3
 80208e2:	b2db      	uxtb	r3, r3
 80208e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80208e8:	b2da      	uxtb	r2, r3
 80208ea:	69fb      	ldr	r3, [r7, #28]
 80208ec:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80208ee:	69fb      	ldr	r3, [r7, #28]
 80208f0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80208f4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80208f6:	68fb      	ldr	r3, [r7, #12]
 80208f8:	891b      	ldrh	r3, [r3, #8]
 80208fa:	4618      	mov	r0, r3
 80208fc:	f7f2 fbe8 	bl	80130d0 <lwip_htons>
 8020900:	4603      	mov	r3, r0
 8020902:	461a      	mov	r2, r3
 8020904:	69fb      	ldr	r3, [r7, #28]
 8020906:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8020908:	69fb      	ldr	r3, [r7, #28]
 802090a:	2200      	movs	r2, #0
 802090c:	719a      	strb	r2, [r3, #6]
 802090e:	2200      	movs	r2, #0
 8020910:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8020912:	4b2a      	ldr	r3, [pc, #168]	; (80209bc <ip4_output_if_src+0x154>)
 8020914:	881b      	ldrh	r3, [r3, #0]
 8020916:	4618      	mov	r0, r3
 8020918:	f7f2 fbda 	bl	80130d0 <lwip_htons>
 802091c:	4603      	mov	r3, r0
 802091e:	461a      	mov	r2, r3
 8020920:	69fb      	ldr	r3, [r7, #28]
 8020922:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8020924:	4b25      	ldr	r3, [pc, #148]	; (80209bc <ip4_output_if_src+0x154>)
 8020926:	881b      	ldrh	r3, [r3, #0]
 8020928:	3301      	adds	r3, #1
 802092a:	b29a      	uxth	r2, r3
 802092c:	4b23      	ldr	r3, [pc, #140]	; (80209bc <ip4_output_if_src+0x154>)
 802092e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8020930:	68bb      	ldr	r3, [r7, #8]
 8020932:	2b00      	cmp	r3, #0
 8020934:	d104      	bne.n	8020940 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8020936:	4b22      	ldr	r3, [pc, #136]	; (80209c0 <ip4_output_if_src+0x158>)
 8020938:	681a      	ldr	r2, [r3, #0]
 802093a:	69fb      	ldr	r3, [r7, #28]
 802093c:	60da      	str	r2, [r3, #12]
 802093e:	e003      	b.n	8020948 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8020940:	68bb      	ldr	r3, [r7, #8]
 8020942:	681a      	ldr	r2, [r3, #0]
 8020944:	69fb      	ldr	r3, [r7, #28]
 8020946:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8020948:	69fb      	ldr	r3, [r7, #28]
 802094a:	2200      	movs	r2, #0
 802094c:	729a      	strb	r2, [r3, #10]
 802094e:	2200      	movs	r2, #0
 8020950:	72da      	strb	r2, [r3, #11]
 8020952:	e00f      	b.n	8020974 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8020954:	68fb      	ldr	r3, [r7, #12]
 8020956:	895b      	ldrh	r3, [r3, #10]
 8020958:	2b13      	cmp	r3, #19
 802095a:	d802      	bhi.n	8020962 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 802095c:	f06f 0301 	mvn.w	r3, #1
 8020960:	e020      	b.n	80209a4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8020962:	68fb      	ldr	r3, [r7, #12]
 8020964:	685b      	ldr	r3, [r3, #4]
 8020966:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8020968:	69fb      	ldr	r3, [r7, #28]
 802096a:	691b      	ldr	r3, [r3, #16]
 802096c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 802096e:	f107 0314 	add.w	r3, r7, #20
 8020972:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8020974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8020978:	2b00      	cmp	r3, #0
 802097a:	d00c      	beq.n	8020996 <ip4_output_if_src+0x12e>
 802097c:	68fb      	ldr	r3, [r7, #12]
 802097e:	891a      	ldrh	r2, [r3, #8]
 8020980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8020984:	429a      	cmp	r2, r3
 8020986:	d906      	bls.n	8020996 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8020988:	687a      	ldr	r2, [r7, #4]
 802098a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802098c:	68f8      	ldr	r0, [r7, #12]
 802098e:	f000 fe8b 	bl	80216a8 <ip4_frag>
 8020992:	4603      	mov	r3, r0
 8020994:	e006      	b.n	80209a4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8020996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020998:	695b      	ldr	r3, [r3, #20]
 802099a:	687a      	ldr	r2, [r7, #4]
 802099c:	68f9      	ldr	r1, [r7, #12]
 802099e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80209a0:	4798      	blx	r3
 80209a2:	4603      	mov	r3, r0
}
 80209a4:	4618      	mov	r0, r3
 80209a6:	3720      	adds	r7, #32
 80209a8:	46bd      	mov	sp, r7
 80209aa:	bd80      	pop	{r7, pc}
 80209ac:	0802df88 	.word	0x0802df88
 80209b0:	0802dfbc 	.word	0x0802dfbc
 80209b4:	0802dfc8 	.word	0x0802dfc8
 80209b8:	0802dff0 	.word	0x0802dff0
 80209bc:	240050ca 	.word	0x240050ca
 80209c0:	0802ec60 	.word	0x0802ec60

080209c4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80209c4:	b480      	push	{r7}
 80209c6:	b085      	sub	sp, #20
 80209c8:	af00      	add	r7, sp, #0
 80209ca:	6078      	str	r0, [r7, #4]
 80209cc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80209ce:	687b      	ldr	r3, [r7, #4]
 80209d0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80209d2:	687b      	ldr	r3, [r7, #4]
 80209d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80209d8:	d002      	beq.n	80209e0 <ip4_addr_isbroadcast_u32+0x1c>
 80209da:	687b      	ldr	r3, [r7, #4]
 80209dc:	2b00      	cmp	r3, #0
 80209de:	d101      	bne.n	80209e4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80209e0:	2301      	movs	r3, #1
 80209e2:	e02a      	b.n	8020a3a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80209e4:	683b      	ldr	r3, [r7, #0]
 80209e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80209ea:	f003 0302 	and.w	r3, r3, #2
 80209ee:	2b00      	cmp	r3, #0
 80209f0:	d101      	bne.n	80209f6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80209f2:	2300      	movs	r3, #0
 80209f4:	e021      	b.n	8020a3a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80209f6:	683b      	ldr	r3, [r7, #0]
 80209f8:	3304      	adds	r3, #4
 80209fa:	681b      	ldr	r3, [r3, #0]
 80209fc:	687a      	ldr	r2, [r7, #4]
 80209fe:	429a      	cmp	r2, r3
 8020a00:	d101      	bne.n	8020a06 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8020a02:	2300      	movs	r3, #0
 8020a04:	e019      	b.n	8020a3a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8020a06:	68fa      	ldr	r2, [r7, #12]
 8020a08:	683b      	ldr	r3, [r7, #0]
 8020a0a:	3304      	adds	r3, #4
 8020a0c:	681b      	ldr	r3, [r3, #0]
 8020a0e:	405a      	eors	r2, r3
 8020a10:	683b      	ldr	r3, [r7, #0]
 8020a12:	3308      	adds	r3, #8
 8020a14:	681b      	ldr	r3, [r3, #0]
 8020a16:	4013      	ands	r3, r2
 8020a18:	2b00      	cmp	r3, #0
 8020a1a:	d10d      	bne.n	8020a38 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8020a1c:	683b      	ldr	r3, [r7, #0]
 8020a1e:	3308      	adds	r3, #8
 8020a20:	681b      	ldr	r3, [r3, #0]
 8020a22:	43da      	mvns	r2, r3
 8020a24:	687b      	ldr	r3, [r7, #4]
 8020a26:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8020a28:	683b      	ldr	r3, [r7, #0]
 8020a2a:	3308      	adds	r3, #8
 8020a2c:	681b      	ldr	r3, [r3, #0]
 8020a2e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8020a30:	429a      	cmp	r2, r3
 8020a32:	d101      	bne.n	8020a38 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8020a34:	2301      	movs	r3, #1
 8020a36:	e000      	b.n	8020a3a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8020a38:	2300      	movs	r3, #0
  }
}
 8020a3a:	4618      	mov	r0, r3
 8020a3c:	3714      	adds	r7, #20
 8020a3e:	46bd      	mov	sp, r7
 8020a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a44:	4770      	bx	lr

08020a46 <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 8020a46:	b580      	push	{r7, lr}
 8020a48:	b084      	sub	sp, #16
 8020a4a:	af00      	add	r7, sp, #0
 8020a4c:	6078      	str	r0, [r7, #4]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
 8020a4e:	f107 030c 	add.w	r3, r7, #12
 8020a52:	4619      	mov	r1, r3
 8020a54:	6878      	ldr	r0, [r7, #4]
 8020a56:	f000 f80b 	bl	8020a70 <ip4addr_aton>
 8020a5a:	4603      	mov	r3, r0
 8020a5c:	2b00      	cmp	r3, #0
 8020a5e:	d001      	beq.n	8020a64 <ipaddr_addr+0x1e>
    return ip4_addr_get_u32(&val);
 8020a60:	68fb      	ldr	r3, [r7, #12]
 8020a62:	e001      	b.n	8020a68 <ipaddr_addr+0x22>
  }
  return (IPADDR_NONE);
 8020a64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8020a68:	4618      	mov	r0, r3
 8020a6a:	3710      	adds	r7, #16
 8020a6c:	46bd      	mov	sp, r7
 8020a6e:	bd80      	pop	{r7, pc}

08020a70 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8020a70:	b580      	push	{r7, lr}
 8020a72:	b08a      	sub	sp, #40	; 0x28
 8020a74:	af00      	add	r7, sp, #0
 8020a76:	6078      	str	r0, [r7, #4]
 8020a78:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8020a7a:	f107 030c 	add.w	r3, r7, #12
 8020a7e:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8020a80:	687b      	ldr	r3, [r7, #4]
 8020a82:	781b      	ldrb	r3, [r3, #0]
 8020a84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8020a88:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8020a8c:	3301      	adds	r3, #1
 8020a8e:	4a89      	ldr	r2, [pc, #548]	; (8020cb4 <ip4addr_aton+0x244>)
 8020a90:	4413      	add	r3, r2
 8020a92:	781b      	ldrb	r3, [r3, #0]
 8020a94:	f003 0304 	and.w	r3, r3, #4
 8020a98:	2b00      	cmp	r3, #0
 8020a9a:	d101      	bne.n	8020aa0 <ip4addr_aton+0x30>
      return 0;
 8020a9c:	2300      	movs	r3, #0
 8020a9e:	e105      	b.n	8020cac <ip4addr_aton+0x23c>
    }
    val = 0;
 8020aa0:	2300      	movs	r3, #0
 8020aa2:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 8020aa4:	230a      	movs	r3, #10
 8020aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 8020aaa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8020aae:	2b30      	cmp	r3, #48	; 0x30
 8020ab0:	d11c      	bne.n	8020aec <ip4addr_aton+0x7c>
      c = *++cp;
 8020ab2:	687b      	ldr	r3, [r7, #4]
 8020ab4:	3301      	adds	r3, #1
 8020ab6:	607b      	str	r3, [r7, #4]
 8020ab8:	687b      	ldr	r3, [r7, #4]
 8020aba:	781b      	ldrb	r3, [r3, #0]
 8020abc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 8020ac0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8020ac4:	2b78      	cmp	r3, #120	; 0x78
 8020ac6:	d003      	beq.n	8020ad0 <ip4addr_aton+0x60>
 8020ac8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8020acc:	2b58      	cmp	r3, #88	; 0x58
 8020ace:	d10a      	bne.n	8020ae6 <ip4addr_aton+0x76>
        base = 16;
 8020ad0:	2310      	movs	r3, #16
 8020ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 8020ad6:	687b      	ldr	r3, [r7, #4]
 8020ad8:	3301      	adds	r3, #1
 8020ada:	607b      	str	r3, [r7, #4]
 8020adc:	687b      	ldr	r3, [r7, #4]
 8020ade:	781b      	ldrb	r3, [r3, #0]
 8020ae0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8020ae4:	e002      	b.n	8020aec <ip4addr_aton+0x7c>
      } else {
        base = 8;
 8020ae6:	2308      	movs	r3, #8
 8020ae8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8020aec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8020af0:	3301      	adds	r3, #1
 8020af2:	4a70      	ldr	r2, [pc, #448]	; (8020cb4 <ip4addr_aton+0x244>)
 8020af4:	4413      	add	r3, r2
 8020af6:	781b      	ldrb	r3, [r3, #0]
 8020af8:	f003 0304 	and.w	r3, r3, #4
 8020afc:	2b00      	cmp	r3, #0
 8020afe:	d011      	beq.n	8020b24 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 8020b00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8020b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020b06:	fb02 f203 	mul.w	r2, r2, r3
 8020b0a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8020b0e:	4413      	add	r3, r2
 8020b10:	3b30      	subs	r3, #48	; 0x30
 8020b12:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8020b14:	687b      	ldr	r3, [r7, #4]
 8020b16:	3301      	adds	r3, #1
 8020b18:	607b      	str	r3, [r7, #4]
 8020b1a:	687b      	ldr	r3, [r7, #4]
 8020b1c:	781b      	ldrb	r3, [r3, #0]
 8020b1e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8020b22:	e7e3      	b.n	8020aec <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8020b24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8020b28:	2b10      	cmp	r3, #16
 8020b2a:	d127      	bne.n	8020b7c <ip4addr_aton+0x10c>
 8020b2c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8020b30:	3301      	adds	r3, #1
 8020b32:	4a60      	ldr	r2, [pc, #384]	; (8020cb4 <ip4addr_aton+0x244>)
 8020b34:	4413      	add	r3, r2
 8020b36:	781b      	ldrb	r3, [r3, #0]
 8020b38:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8020b3c:	2b00      	cmp	r3, #0
 8020b3e:	d01d      	beq.n	8020b7c <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8020b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020b42:	011b      	lsls	r3, r3, #4
 8020b44:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8020b48:	f102 010a 	add.w	r1, r2, #10
 8020b4c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8020b50:	3201      	adds	r2, #1
 8020b52:	4858      	ldr	r0, [pc, #352]	; (8020cb4 <ip4addr_aton+0x244>)
 8020b54:	4402      	add	r2, r0
 8020b56:	7812      	ldrb	r2, [r2, #0]
 8020b58:	f002 0203 	and.w	r2, r2, #3
 8020b5c:	2a02      	cmp	r2, #2
 8020b5e:	d101      	bne.n	8020b64 <ip4addr_aton+0xf4>
 8020b60:	2261      	movs	r2, #97	; 0x61
 8020b62:	e000      	b.n	8020b66 <ip4addr_aton+0xf6>
 8020b64:	2241      	movs	r2, #65	; 0x41
 8020b66:	1a8a      	subs	r2, r1, r2
 8020b68:	4313      	orrs	r3, r2
 8020b6a:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8020b6c:	687b      	ldr	r3, [r7, #4]
 8020b6e:	3301      	adds	r3, #1
 8020b70:	607b      	str	r3, [r7, #4]
 8020b72:	687b      	ldr	r3, [r7, #4]
 8020b74:	781b      	ldrb	r3, [r3, #0]
 8020b76:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 8020b7a:	e7b7      	b.n	8020aec <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 8020b7c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8020b80:	2b2e      	cmp	r3, #46	; 0x2e
 8020b82:	d114      	bne.n	8020bae <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8020b84:	f107 030c 	add.w	r3, r7, #12
 8020b88:	330c      	adds	r3, #12
 8020b8a:	69fa      	ldr	r2, [r7, #28]
 8020b8c:	429a      	cmp	r2, r3
 8020b8e:	d301      	bcc.n	8020b94 <ip4addr_aton+0x124>
        return 0;
 8020b90:	2300      	movs	r3, #0
 8020b92:	e08b      	b.n	8020cac <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 8020b94:	69fb      	ldr	r3, [r7, #28]
 8020b96:	1d1a      	adds	r2, r3, #4
 8020b98:	61fa      	str	r2, [r7, #28]
 8020b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020b9c:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8020b9e:	687b      	ldr	r3, [r7, #4]
 8020ba0:	3301      	adds	r3, #1
 8020ba2:	607b      	str	r3, [r7, #4]
 8020ba4:	687b      	ldr	r3, [r7, #4]
 8020ba6:	781b      	ldrb	r3, [r3, #0]
 8020ba8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 8020bac:	e76c      	b.n	8020a88 <ip4addr_aton+0x18>
    } else {
      break;
 8020bae:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8020bb0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8020bb4:	2b00      	cmp	r3, #0
 8020bb6:	d00b      	beq.n	8020bd0 <ip4addr_aton+0x160>
 8020bb8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8020bbc:	3301      	adds	r3, #1
 8020bbe:	4a3d      	ldr	r2, [pc, #244]	; (8020cb4 <ip4addr_aton+0x244>)
 8020bc0:	4413      	add	r3, r2
 8020bc2:	781b      	ldrb	r3, [r3, #0]
 8020bc4:	f003 0308 	and.w	r3, r3, #8
 8020bc8:	2b00      	cmp	r3, #0
 8020bca:	d101      	bne.n	8020bd0 <ip4addr_aton+0x160>
    return 0;
 8020bcc:	2300      	movs	r3, #0
 8020bce:	e06d      	b.n	8020cac <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8020bd0:	f107 030c 	add.w	r3, r7, #12
 8020bd4:	69fa      	ldr	r2, [r7, #28]
 8020bd6:	1ad3      	subs	r3, r2, r3
 8020bd8:	109b      	asrs	r3, r3, #2
 8020bda:	3301      	adds	r3, #1
 8020bdc:	2b04      	cmp	r3, #4
 8020bde:	d853      	bhi.n	8020c88 <ip4addr_aton+0x218>
 8020be0:	a201      	add	r2, pc, #4	; (adr r2, 8020be8 <ip4addr_aton+0x178>)
 8020be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020be6:	bf00      	nop
 8020be8:	08020bfd 	.word	0x08020bfd
 8020bec:	08020c97 	.word	0x08020c97
 8020bf0:	08020c01 	.word	0x08020c01
 8020bf4:	08020c23 	.word	0x08020c23
 8020bf8:	08020c51 	.word	0x08020c51

    case 0:
      return 0;       /* initial nondigit */
 8020bfc:	2300      	movs	r3, #0
 8020bfe:	e055      	b.n	8020cac <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 8020c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020c02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8020c06:	d301      	bcc.n	8020c0c <ip4addr_aton+0x19c>
        return 0;
 8020c08:	2300      	movs	r3, #0
 8020c0a:	e04f      	b.n	8020cac <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 8020c0c:	68fb      	ldr	r3, [r7, #12]
 8020c0e:	2bff      	cmp	r3, #255	; 0xff
 8020c10:	d901      	bls.n	8020c16 <ip4addr_aton+0x1a6>
        return 0;
 8020c12:	2300      	movs	r3, #0
 8020c14:	e04a      	b.n	8020cac <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 8020c16:	68fb      	ldr	r3, [r7, #12]
 8020c18:	061b      	lsls	r3, r3, #24
 8020c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020c1c:	4313      	orrs	r3, r2
 8020c1e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8020c20:	e03a      	b.n	8020c98 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 8020c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8020c28:	d301      	bcc.n	8020c2e <ip4addr_aton+0x1be>
        return 0;
 8020c2a:	2300      	movs	r3, #0
 8020c2c:	e03e      	b.n	8020cac <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8020c2e:	68fb      	ldr	r3, [r7, #12]
 8020c30:	2bff      	cmp	r3, #255	; 0xff
 8020c32:	d802      	bhi.n	8020c3a <ip4addr_aton+0x1ca>
 8020c34:	693b      	ldr	r3, [r7, #16]
 8020c36:	2bff      	cmp	r3, #255	; 0xff
 8020c38:	d901      	bls.n	8020c3e <ip4addr_aton+0x1ce>
        return 0;
 8020c3a:	2300      	movs	r3, #0
 8020c3c:	e036      	b.n	8020cac <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 8020c3e:	68fb      	ldr	r3, [r7, #12]
 8020c40:	061a      	lsls	r2, r3, #24
 8020c42:	693b      	ldr	r3, [r7, #16]
 8020c44:	041b      	lsls	r3, r3, #16
 8020c46:	4313      	orrs	r3, r2
 8020c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020c4a:	4313      	orrs	r3, r2
 8020c4c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8020c4e:	e023      	b.n	8020c98 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8020c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020c52:	2bff      	cmp	r3, #255	; 0xff
 8020c54:	d901      	bls.n	8020c5a <ip4addr_aton+0x1ea>
        return 0;
 8020c56:	2300      	movs	r3, #0
 8020c58:	e028      	b.n	8020cac <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8020c5a:	68fb      	ldr	r3, [r7, #12]
 8020c5c:	2bff      	cmp	r3, #255	; 0xff
 8020c5e:	d805      	bhi.n	8020c6c <ip4addr_aton+0x1fc>
 8020c60:	693b      	ldr	r3, [r7, #16]
 8020c62:	2bff      	cmp	r3, #255	; 0xff
 8020c64:	d802      	bhi.n	8020c6c <ip4addr_aton+0x1fc>
 8020c66:	697b      	ldr	r3, [r7, #20]
 8020c68:	2bff      	cmp	r3, #255	; 0xff
 8020c6a:	d901      	bls.n	8020c70 <ip4addr_aton+0x200>
        return 0;
 8020c6c:	2300      	movs	r3, #0
 8020c6e:	e01d      	b.n	8020cac <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8020c70:	68fb      	ldr	r3, [r7, #12]
 8020c72:	061a      	lsls	r2, r3, #24
 8020c74:	693b      	ldr	r3, [r7, #16]
 8020c76:	041b      	lsls	r3, r3, #16
 8020c78:	431a      	orrs	r2, r3
 8020c7a:	697b      	ldr	r3, [r7, #20]
 8020c7c:	021b      	lsls	r3, r3, #8
 8020c7e:	4313      	orrs	r3, r2
 8020c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020c82:	4313      	orrs	r3, r2
 8020c84:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8020c86:	e007      	b.n	8020c98 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 8020c88:	4b0b      	ldr	r3, [pc, #44]	; (8020cb8 <ip4addr_aton+0x248>)
 8020c8a:	22f9      	movs	r2, #249	; 0xf9
 8020c8c:	490b      	ldr	r1, [pc, #44]	; (8020cbc <ip4addr_aton+0x24c>)
 8020c8e:	480c      	ldr	r0, [pc, #48]	; (8020cc0 <ip4addr_aton+0x250>)
 8020c90:	f006 f920 	bl	8026ed4 <iprintf>
      break;
 8020c94:	e000      	b.n	8020c98 <ip4addr_aton+0x228>
      break;
 8020c96:	bf00      	nop
  }
  if (addr) {
 8020c98:	683b      	ldr	r3, [r7, #0]
 8020c9a:	2b00      	cmp	r3, #0
 8020c9c:	d005      	beq.n	8020caa <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8020c9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020ca0:	f7f2 fa2b 	bl	80130fa <lwip_htonl>
 8020ca4:	4602      	mov	r2, r0
 8020ca6:	683b      	ldr	r3, [r7, #0]
 8020ca8:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8020caa:	2301      	movs	r3, #1
}
 8020cac:	4618      	mov	r0, r3
 8020cae:	3728      	adds	r7, #40	; 0x28
 8020cb0:	46bd      	mov	sp, r7
 8020cb2:	bd80      	pop	{r7, pc}
 8020cb4:	0802ec80 	.word	0x0802ec80
 8020cb8:	0802e020 	.word	0x0802e020
 8020cbc:	0802e05c 	.word	0x0802e05c
 8020cc0:	0802e068 	.word	0x0802e068

08020cc4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8020cc4:	b580      	push	{r7, lr}
 8020cc6:	b084      	sub	sp, #16
 8020cc8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8020cca:	2300      	movs	r3, #0
 8020ccc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8020cce:	4b12      	ldr	r3, [pc, #72]	; (8020d18 <ip_reass_tmr+0x54>)
 8020cd0:	681b      	ldr	r3, [r3, #0]
 8020cd2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8020cd4:	e018      	b.n	8020d08 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8020cd6:	68fb      	ldr	r3, [r7, #12]
 8020cd8:	7fdb      	ldrb	r3, [r3, #31]
 8020cda:	2b00      	cmp	r3, #0
 8020cdc:	d00b      	beq.n	8020cf6 <ip_reass_tmr+0x32>
      r->timer--;
 8020cde:	68fb      	ldr	r3, [r7, #12]
 8020ce0:	7fdb      	ldrb	r3, [r3, #31]
 8020ce2:	3b01      	subs	r3, #1
 8020ce4:	b2da      	uxtb	r2, r3
 8020ce6:	68fb      	ldr	r3, [r7, #12]
 8020ce8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8020cea:	68fb      	ldr	r3, [r7, #12]
 8020cec:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8020cee:	68fb      	ldr	r3, [r7, #12]
 8020cf0:	681b      	ldr	r3, [r3, #0]
 8020cf2:	60fb      	str	r3, [r7, #12]
 8020cf4:	e008      	b.n	8020d08 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8020cf6:	68fb      	ldr	r3, [r7, #12]
 8020cf8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8020cfa:	68fb      	ldr	r3, [r7, #12]
 8020cfc:	681b      	ldr	r3, [r3, #0]
 8020cfe:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8020d00:	68b9      	ldr	r1, [r7, #8]
 8020d02:	6878      	ldr	r0, [r7, #4]
 8020d04:	f000 f80a 	bl	8020d1c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8020d08:	68fb      	ldr	r3, [r7, #12]
 8020d0a:	2b00      	cmp	r3, #0
 8020d0c:	d1e3      	bne.n	8020cd6 <ip_reass_tmr+0x12>
    }
  }
}
 8020d0e:	bf00      	nop
 8020d10:	bf00      	nop
 8020d12:	3710      	adds	r7, #16
 8020d14:	46bd      	mov	sp, r7
 8020d16:	bd80      	pop	{r7, pc}
 8020d18:	240050cc 	.word	0x240050cc

08020d1c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8020d1c:	b580      	push	{r7, lr}
 8020d1e:	b088      	sub	sp, #32
 8020d20:	af00      	add	r7, sp, #0
 8020d22:	6078      	str	r0, [r7, #4]
 8020d24:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8020d26:	2300      	movs	r3, #0
 8020d28:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8020d2a:	683a      	ldr	r2, [r7, #0]
 8020d2c:	687b      	ldr	r3, [r7, #4]
 8020d2e:	429a      	cmp	r2, r3
 8020d30:	d105      	bne.n	8020d3e <ip_reass_free_complete_datagram+0x22>
 8020d32:	4b45      	ldr	r3, [pc, #276]	; (8020e48 <ip_reass_free_complete_datagram+0x12c>)
 8020d34:	22ab      	movs	r2, #171	; 0xab
 8020d36:	4945      	ldr	r1, [pc, #276]	; (8020e4c <ip_reass_free_complete_datagram+0x130>)
 8020d38:	4845      	ldr	r0, [pc, #276]	; (8020e50 <ip_reass_free_complete_datagram+0x134>)
 8020d3a:	f006 f8cb 	bl	8026ed4 <iprintf>
  if (prev != NULL) {
 8020d3e:	683b      	ldr	r3, [r7, #0]
 8020d40:	2b00      	cmp	r3, #0
 8020d42:	d00a      	beq.n	8020d5a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8020d44:	683b      	ldr	r3, [r7, #0]
 8020d46:	681b      	ldr	r3, [r3, #0]
 8020d48:	687a      	ldr	r2, [r7, #4]
 8020d4a:	429a      	cmp	r2, r3
 8020d4c:	d005      	beq.n	8020d5a <ip_reass_free_complete_datagram+0x3e>
 8020d4e:	4b3e      	ldr	r3, [pc, #248]	; (8020e48 <ip_reass_free_complete_datagram+0x12c>)
 8020d50:	22ad      	movs	r2, #173	; 0xad
 8020d52:	4940      	ldr	r1, [pc, #256]	; (8020e54 <ip_reass_free_complete_datagram+0x138>)
 8020d54:	483e      	ldr	r0, [pc, #248]	; (8020e50 <ip_reass_free_complete_datagram+0x134>)
 8020d56:	f006 f8bd 	bl	8026ed4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8020d5a:	687b      	ldr	r3, [r7, #4]
 8020d5c:	685b      	ldr	r3, [r3, #4]
 8020d5e:	685b      	ldr	r3, [r3, #4]
 8020d60:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8020d62:	697b      	ldr	r3, [r7, #20]
 8020d64:	889b      	ldrh	r3, [r3, #4]
 8020d66:	b29b      	uxth	r3, r3
 8020d68:	2b00      	cmp	r3, #0
 8020d6a:	d12a      	bne.n	8020dc2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8020d6c:	687b      	ldr	r3, [r7, #4]
 8020d6e:	685b      	ldr	r3, [r3, #4]
 8020d70:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8020d72:	697b      	ldr	r3, [r7, #20]
 8020d74:	681a      	ldr	r2, [r3, #0]
 8020d76:	687b      	ldr	r3, [r7, #4]
 8020d78:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8020d7a:	69bb      	ldr	r3, [r7, #24]
 8020d7c:	6858      	ldr	r0, [r3, #4]
 8020d7e:	687b      	ldr	r3, [r7, #4]
 8020d80:	3308      	adds	r3, #8
 8020d82:	2214      	movs	r2, #20
 8020d84:	4619      	mov	r1, r3
 8020d86:	f005 fa1f 	bl	80261c8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8020d8a:	2101      	movs	r1, #1
 8020d8c:	69b8      	ldr	r0, [r7, #24]
 8020d8e:	f7ff fae1 	bl	8020354 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8020d92:	69b8      	ldr	r0, [r7, #24]
 8020d94:	f7f4 fefc 	bl	8015b90 <pbuf_clen>
 8020d98:	4603      	mov	r3, r0
 8020d9a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8020d9c:	8bfa      	ldrh	r2, [r7, #30]
 8020d9e:	8a7b      	ldrh	r3, [r7, #18]
 8020da0:	4413      	add	r3, r2
 8020da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8020da6:	db05      	blt.n	8020db4 <ip_reass_free_complete_datagram+0x98>
 8020da8:	4b27      	ldr	r3, [pc, #156]	; (8020e48 <ip_reass_free_complete_datagram+0x12c>)
 8020daa:	22bc      	movs	r2, #188	; 0xbc
 8020dac:	492a      	ldr	r1, [pc, #168]	; (8020e58 <ip_reass_free_complete_datagram+0x13c>)
 8020dae:	4828      	ldr	r0, [pc, #160]	; (8020e50 <ip_reass_free_complete_datagram+0x134>)
 8020db0:	f006 f890 	bl	8026ed4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8020db4:	8bfa      	ldrh	r2, [r7, #30]
 8020db6:	8a7b      	ldrh	r3, [r7, #18]
 8020db8:	4413      	add	r3, r2
 8020dba:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8020dbc:	69b8      	ldr	r0, [r7, #24]
 8020dbe:	f7f4 fe59 	bl	8015a74 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8020dc2:	687b      	ldr	r3, [r7, #4]
 8020dc4:	685b      	ldr	r3, [r3, #4]
 8020dc6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8020dc8:	e01f      	b.n	8020e0a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8020dca:	69bb      	ldr	r3, [r7, #24]
 8020dcc:	685b      	ldr	r3, [r3, #4]
 8020dce:	617b      	str	r3, [r7, #20]
    pcur = p;
 8020dd0:	69bb      	ldr	r3, [r7, #24]
 8020dd2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8020dd4:	697b      	ldr	r3, [r7, #20]
 8020dd6:	681b      	ldr	r3, [r3, #0]
 8020dd8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8020dda:	68f8      	ldr	r0, [r7, #12]
 8020ddc:	f7f4 fed8 	bl	8015b90 <pbuf_clen>
 8020de0:	4603      	mov	r3, r0
 8020de2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8020de4:	8bfa      	ldrh	r2, [r7, #30]
 8020de6:	8a7b      	ldrh	r3, [r7, #18]
 8020de8:	4413      	add	r3, r2
 8020dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8020dee:	db05      	blt.n	8020dfc <ip_reass_free_complete_datagram+0xe0>
 8020df0:	4b15      	ldr	r3, [pc, #84]	; (8020e48 <ip_reass_free_complete_datagram+0x12c>)
 8020df2:	22cc      	movs	r2, #204	; 0xcc
 8020df4:	4918      	ldr	r1, [pc, #96]	; (8020e58 <ip_reass_free_complete_datagram+0x13c>)
 8020df6:	4816      	ldr	r0, [pc, #88]	; (8020e50 <ip_reass_free_complete_datagram+0x134>)
 8020df8:	f006 f86c 	bl	8026ed4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8020dfc:	8bfa      	ldrh	r2, [r7, #30]
 8020dfe:	8a7b      	ldrh	r3, [r7, #18]
 8020e00:	4413      	add	r3, r2
 8020e02:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8020e04:	68f8      	ldr	r0, [r7, #12]
 8020e06:	f7f4 fe35 	bl	8015a74 <pbuf_free>
  while (p != NULL) {
 8020e0a:	69bb      	ldr	r3, [r7, #24]
 8020e0c:	2b00      	cmp	r3, #0
 8020e0e:	d1dc      	bne.n	8020dca <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8020e10:	6839      	ldr	r1, [r7, #0]
 8020e12:	6878      	ldr	r0, [r7, #4]
 8020e14:	f000 f8c2 	bl	8020f9c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8020e18:	4b10      	ldr	r3, [pc, #64]	; (8020e5c <ip_reass_free_complete_datagram+0x140>)
 8020e1a:	881b      	ldrh	r3, [r3, #0]
 8020e1c:	8bfa      	ldrh	r2, [r7, #30]
 8020e1e:	429a      	cmp	r2, r3
 8020e20:	d905      	bls.n	8020e2e <ip_reass_free_complete_datagram+0x112>
 8020e22:	4b09      	ldr	r3, [pc, #36]	; (8020e48 <ip_reass_free_complete_datagram+0x12c>)
 8020e24:	22d2      	movs	r2, #210	; 0xd2
 8020e26:	490e      	ldr	r1, [pc, #56]	; (8020e60 <ip_reass_free_complete_datagram+0x144>)
 8020e28:	4809      	ldr	r0, [pc, #36]	; (8020e50 <ip_reass_free_complete_datagram+0x134>)
 8020e2a:	f006 f853 	bl	8026ed4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8020e2e:	4b0b      	ldr	r3, [pc, #44]	; (8020e5c <ip_reass_free_complete_datagram+0x140>)
 8020e30:	881a      	ldrh	r2, [r3, #0]
 8020e32:	8bfb      	ldrh	r3, [r7, #30]
 8020e34:	1ad3      	subs	r3, r2, r3
 8020e36:	b29a      	uxth	r2, r3
 8020e38:	4b08      	ldr	r3, [pc, #32]	; (8020e5c <ip_reass_free_complete_datagram+0x140>)
 8020e3a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8020e3c:	8bfb      	ldrh	r3, [r7, #30]
}
 8020e3e:	4618      	mov	r0, r3
 8020e40:	3720      	adds	r7, #32
 8020e42:	46bd      	mov	sp, r7
 8020e44:	bd80      	pop	{r7, pc}
 8020e46:	bf00      	nop
 8020e48:	0802e090 	.word	0x0802e090
 8020e4c:	0802e0cc 	.word	0x0802e0cc
 8020e50:	0802e0d8 	.word	0x0802e0d8
 8020e54:	0802e100 	.word	0x0802e100
 8020e58:	0802e114 	.word	0x0802e114
 8020e5c:	240050d0 	.word	0x240050d0
 8020e60:	0802e134 	.word	0x0802e134

08020e64 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8020e64:	b580      	push	{r7, lr}
 8020e66:	b08a      	sub	sp, #40	; 0x28
 8020e68:	af00      	add	r7, sp, #0
 8020e6a:	6078      	str	r0, [r7, #4]
 8020e6c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8020e6e:	2300      	movs	r3, #0
 8020e70:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8020e72:	2300      	movs	r3, #0
 8020e74:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8020e76:	2300      	movs	r3, #0
 8020e78:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8020e7a:	2300      	movs	r3, #0
 8020e7c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8020e7e:	2300      	movs	r3, #0
 8020e80:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8020e82:	4b28      	ldr	r3, [pc, #160]	; (8020f24 <ip_reass_remove_oldest_datagram+0xc0>)
 8020e84:	681b      	ldr	r3, [r3, #0]
 8020e86:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8020e88:	e030      	b.n	8020eec <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8020e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020e8c:	695a      	ldr	r2, [r3, #20]
 8020e8e:	687b      	ldr	r3, [r7, #4]
 8020e90:	68db      	ldr	r3, [r3, #12]
 8020e92:	429a      	cmp	r2, r3
 8020e94:	d10c      	bne.n	8020eb0 <ip_reass_remove_oldest_datagram+0x4c>
 8020e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020e98:	699a      	ldr	r2, [r3, #24]
 8020e9a:	687b      	ldr	r3, [r7, #4]
 8020e9c:	691b      	ldr	r3, [r3, #16]
 8020e9e:	429a      	cmp	r2, r3
 8020ea0:	d106      	bne.n	8020eb0 <ip_reass_remove_oldest_datagram+0x4c>
 8020ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020ea4:	899a      	ldrh	r2, [r3, #12]
 8020ea6:	687b      	ldr	r3, [r7, #4]
 8020ea8:	889b      	ldrh	r3, [r3, #4]
 8020eaa:	b29b      	uxth	r3, r3
 8020eac:	429a      	cmp	r2, r3
 8020eae:	d014      	beq.n	8020eda <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8020eb0:	693b      	ldr	r3, [r7, #16]
 8020eb2:	3301      	adds	r3, #1
 8020eb4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8020eb6:	6a3b      	ldr	r3, [r7, #32]
 8020eb8:	2b00      	cmp	r3, #0
 8020eba:	d104      	bne.n	8020ec6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8020ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020ebe:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8020ec0:	69fb      	ldr	r3, [r7, #28]
 8020ec2:	61bb      	str	r3, [r7, #24]
 8020ec4:	e009      	b.n	8020eda <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8020ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020ec8:	7fda      	ldrb	r2, [r3, #31]
 8020eca:	6a3b      	ldr	r3, [r7, #32]
 8020ecc:	7fdb      	ldrb	r3, [r3, #31]
 8020ece:	429a      	cmp	r2, r3
 8020ed0:	d803      	bhi.n	8020eda <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8020ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020ed4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8020ed6:	69fb      	ldr	r3, [r7, #28]
 8020ed8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8020eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020edc:	681b      	ldr	r3, [r3, #0]
 8020ede:	2b00      	cmp	r3, #0
 8020ee0:	d001      	beq.n	8020ee6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8020ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020ee4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8020ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020ee8:	681b      	ldr	r3, [r3, #0]
 8020eea:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8020eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020eee:	2b00      	cmp	r3, #0
 8020ef0:	d1cb      	bne.n	8020e8a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8020ef2:	6a3b      	ldr	r3, [r7, #32]
 8020ef4:	2b00      	cmp	r3, #0
 8020ef6:	d008      	beq.n	8020f0a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8020ef8:	69b9      	ldr	r1, [r7, #24]
 8020efa:	6a38      	ldr	r0, [r7, #32]
 8020efc:	f7ff ff0e 	bl	8020d1c <ip_reass_free_complete_datagram>
 8020f00:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8020f02:	697a      	ldr	r2, [r7, #20]
 8020f04:	68fb      	ldr	r3, [r7, #12]
 8020f06:	4413      	add	r3, r2
 8020f08:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8020f0a:	697a      	ldr	r2, [r7, #20]
 8020f0c:	683b      	ldr	r3, [r7, #0]
 8020f0e:	429a      	cmp	r2, r3
 8020f10:	da02      	bge.n	8020f18 <ip_reass_remove_oldest_datagram+0xb4>
 8020f12:	693b      	ldr	r3, [r7, #16]
 8020f14:	2b01      	cmp	r3, #1
 8020f16:	dcac      	bgt.n	8020e72 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8020f18:	697b      	ldr	r3, [r7, #20]
}
 8020f1a:	4618      	mov	r0, r3
 8020f1c:	3728      	adds	r7, #40	; 0x28
 8020f1e:	46bd      	mov	sp, r7
 8020f20:	bd80      	pop	{r7, pc}
 8020f22:	bf00      	nop
 8020f24:	240050cc 	.word	0x240050cc

08020f28 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8020f28:	b580      	push	{r7, lr}
 8020f2a:	b084      	sub	sp, #16
 8020f2c:	af00      	add	r7, sp, #0
 8020f2e:	6078      	str	r0, [r7, #4]
 8020f30:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8020f32:	2004      	movs	r0, #4
 8020f34:	f7f3 fe46 	bl	8014bc4 <memp_malloc>
 8020f38:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8020f3a:	68fb      	ldr	r3, [r7, #12]
 8020f3c:	2b00      	cmp	r3, #0
 8020f3e:	d110      	bne.n	8020f62 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8020f40:	6839      	ldr	r1, [r7, #0]
 8020f42:	6878      	ldr	r0, [r7, #4]
 8020f44:	f7ff ff8e 	bl	8020e64 <ip_reass_remove_oldest_datagram>
 8020f48:	4602      	mov	r2, r0
 8020f4a:	683b      	ldr	r3, [r7, #0]
 8020f4c:	4293      	cmp	r3, r2
 8020f4e:	dc03      	bgt.n	8020f58 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8020f50:	2004      	movs	r0, #4
 8020f52:	f7f3 fe37 	bl	8014bc4 <memp_malloc>
 8020f56:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8020f58:	68fb      	ldr	r3, [r7, #12]
 8020f5a:	2b00      	cmp	r3, #0
 8020f5c:	d101      	bne.n	8020f62 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8020f5e:	2300      	movs	r3, #0
 8020f60:	e016      	b.n	8020f90 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8020f62:	2220      	movs	r2, #32
 8020f64:	2100      	movs	r1, #0
 8020f66:	68f8      	ldr	r0, [r7, #12]
 8020f68:	f005 f956 	bl	8026218 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8020f6c:	68fb      	ldr	r3, [r7, #12]
 8020f6e:	220f      	movs	r2, #15
 8020f70:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8020f72:	4b09      	ldr	r3, [pc, #36]	; (8020f98 <ip_reass_enqueue_new_datagram+0x70>)
 8020f74:	681a      	ldr	r2, [r3, #0]
 8020f76:	68fb      	ldr	r3, [r7, #12]
 8020f78:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8020f7a:	4a07      	ldr	r2, [pc, #28]	; (8020f98 <ip_reass_enqueue_new_datagram+0x70>)
 8020f7c:	68fb      	ldr	r3, [r7, #12]
 8020f7e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8020f80:	68fb      	ldr	r3, [r7, #12]
 8020f82:	3308      	adds	r3, #8
 8020f84:	2214      	movs	r2, #20
 8020f86:	6879      	ldr	r1, [r7, #4]
 8020f88:	4618      	mov	r0, r3
 8020f8a:	f005 f91d 	bl	80261c8 <memcpy>
  return ipr;
 8020f8e:	68fb      	ldr	r3, [r7, #12]
}
 8020f90:	4618      	mov	r0, r3
 8020f92:	3710      	adds	r7, #16
 8020f94:	46bd      	mov	sp, r7
 8020f96:	bd80      	pop	{r7, pc}
 8020f98:	240050cc 	.word	0x240050cc

08020f9c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8020f9c:	b580      	push	{r7, lr}
 8020f9e:	b082      	sub	sp, #8
 8020fa0:	af00      	add	r7, sp, #0
 8020fa2:	6078      	str	r0, [r7, #4]
 8020fa4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8020fa6:	4b10      	ldr	r3, [pc, #64]	; (8020fe8 <ip_reass_dequeue_datagram+0x4c>)
 8020fa8:	681b      	ldr	r3, [r3, #0]
 8020faa:	687a      	ldr	r2, [r7, #4]
 8020fac:	429a      	cmp	r2, r3
 8020fae:	d104      	bne.n	8020fba <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8020fb0:	687b      	ldr	r3, [r7, #4]
 8020fb2:	681b      	ldr	r3, [r3, #0]
 8020fb4:	4a0c      	ldr	r2, [pc, #48]	; (8020fe8 <ip_reass_dequeue_datagram+0x4c>)
 8020fb6:	6013      	str	r3, [r2, #0]
 8020fb8:	e00d      	b.n	8020fd6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8020fba:	683b      	ldr	r3, [r7, #0]
 8020fbc:	2b00      	cmp	r3, #0
 8020fbe:	d106      	bne.n	8020fce <ip_reass_dequeue_datagram+0x32>
 8020fc0:	4b0a      	ldr	r3, [pc, #40]	; (8020fec <ip_reass_dequeue_datagram+0x50>)
 8020fc2:	f240 1245 	movw	r2, #325	; 0x145
 8020fc6:	490a      	ldr	r1, [pc, #40]	; (8020ff0 <ip_reass_dequeue_datagram+0x54>)
 8020fc8:	480a      	ldr	r0, [pc, #40]	; (8020ff4 <ip_reass_dequeue_datagram+0x58>)
 8020fca:	f005 ff83 	bl	8026ed4 <iprintf>
    prev->next = ipr->next;
 8020fce:	687b      	ldr	r3, [r7, #4]
 8020fd0:	681a      	ldr	r2, [r3, #0]
 8020fd2:	683b      	ldr	r3, [r7, #0]
 8020fd4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8020fd6:	6879      	ldr	r1, [r7, #4]
 8020fd8:	2004      	movs	r0, #4
 8020fda:	f7f3 fe69 	bl	8014cb0 <memp_free>
}
 8020fde:	bf00      	nop
 8020fe0:	3708      	adds	r7, #8
 8020fe2:	46bd      	mov	sp, r7
 8020fe4:	bd80      	pop	{r7, pc}
 8020fe6:	bf00      	nop
 8020fe8:	240050cc 	.word	0x240050cc
 8020fec:	0802e090 	.word	0x0802e090
 8020ff0:	0802e158 	.word	0x0802e158
 8020ff4:	0802e0d8 	.word	0x0802e0d8

08020ff8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8020ff8:	b580      	push	{r7, lr}
 8020ffa:	b08c      	sub	sp, #48	; 0x30
 8020ffc:	af00      	add	r7, sp, #0
 8020ffe:	60f8      	str	r0, [r7, #12]
 8021000:	60b9      	str	r1, [r7, #8]
 8021002:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8021004:	2300      	movs	r3, #0
 8021006:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8021008:	2301      	movs	r3, #1
 802100a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 802100c:	68bb      	ldr	r3, [r7, #8]
 802100e:	685b      	ldr	r3, [r3, #4]
 8021010:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8021012:	69fb      	ldr	r3, [r7, #28]
 8021014:	885b      	ldrh	r3, [r3, #2]
 8021016:	b29b      	uxth	r3, r3
 8021018:	4618      	mov	r0, r3
 802101a:	f7f2 f859 	bl	80130d0 <lwip_htons>
 802101e:	4603      	mov	r3, r0
 8021020:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8021022:	69fb      	ldr	r3, [r7, #28]
 8021024:	781b      	ldrb	r3, [r3, #0]
 8021026:	f003 030f 	and.w	r3, r3, #15
 802102a:	b2db      	uxtb	r3, r3
 802102c:	009b      	lsls	r3, r3, #2
 802102e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8021030:	7e7b      	ldrb	r3, [r7, #25]
 8021032:	b29b      	uxth	r3, r3
 8021034:	8b7a      	ldrh	r2, [r7, #26]
 8021036:	429a      	cmp	r2, r3
 8021038:	d202      	bcs.n	8021040 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 802103a:	f04f 33ff 	mov.w	r3, #4294967295
 802103e:	e135      	b.n	80212ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8021040:	7e7b      	ldrb	r3, [r7, #25]
 8021042:	b29b      	uxth	r3, r3
 8021044:	8b7a      	ldrh	r2, [r7, #26]
 8021046:	1ad3      	subs	r3, r2, r3
 8021048:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 802104a:	69fb      	ldr	r3, [r7, #28]
 802104c:	88db      	ldrh	r3, [r3, #6]
 802104e:	b29b      	uxth	r3, r3
 8021050:	4618      	mov	r0, r3
 8021052:	f7f2 f83d 	bl	80130d0 <lwip_htons>
 8021056:	4603      	mov	r3, r0
 8021058:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802105c:	b29b      	uxth	r3, r3
 802105e:	00db      	lsls	r3, r3, #3
 8021060:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8021062:	68bb      	ldr	r3, [r7, #8]
 8021064:	685b      	ldr	r3, [r3, #4]
 8021066:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8021068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802106a:	2200      	movs	r2, #0
 802106c:	701a      	strb	r2, [r3, #0]
 802106e:	2200      	movs	r2, #0
 8021070:	705a      	strb	r2, [r3, #1]
 8021072:	2200      	movs	r2, #0
 8021074:	709a      	strb	r2, [r3, #2]
 8021076:	2200      	movs	r2, #0
 8021078:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 802107a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802107c:	8afa      	ldrh	r2, [r7, #22]
 802107e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8021080:	8afa      	ldrh	r2, [r7, #22]
 8021082:	8b7b      	ldrh	r3, [r7, #26]
 8021084:	4413      	add	r3, r2
 8021086:	b29a      	uxth	r2, r3
 8021088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802108a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 802108c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802108e:	88db      	ldrh	r3, [r3, #6]
 8021090:	b29b      	uxth	r3, r3
 8021092:	8afa      	ldrh	r2, [r7, #22]
 8021094:	429a      	cmp	r2, r3
 8021096:	d902      	bls.n	802109e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021098:	f04f 33ff 	mov.w	r3, #4294967295
 802109c:	e106      	b.n	80212ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 802109e:	68fb      	ldr	r3, [r7, #12]
 80210a0:	685b      	ldr	r3, [r3, #4]
 80210a2:	627b      	str	r3, [r7, #36]	; 0x24
 80210a4:	e068      	b.n	8021178 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80210a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80210a8:	685b      	ldr	r3, [r3, #4]
 80210aa:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80210ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80210ae:	889b      	ldrh	r3, [r3, #4]
 80210b0:	b29a      	uxth	r2, r3
 80210b2:	693b      	ldr	r3, [r7, #16]
 80210b4:	889b      	ldrh	r3, [r3, #4]
 80210b6:	b29b      	uxth	r3, r3
 80210b8:	429a      	cmp	r2, r3
 80210ba:	d235      	bcs.n	8021128 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80210bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80210be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80210c0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80210c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80210c4:	2b00      	cmp	r3, #0
 80210c6:	d020      	beq.n	802110a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80210c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80210ca:	889b      	ldrh	r3, [r3, #4]
 80210cc:	b29a      	uxth	r2, r3
 80210ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80210d0:	88db      	ldrh	r3, [r3, #6]
 80210d2:	b29b      	uxth	r3, r3
 80210d4:	429a      	cmp	r2, r3
 80210d6:	d307      	bcc.n	80210e8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80210d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80210da:	88db      	ldrh	r3, [r3, #6]
 80210dc:	b29a      	uxth	r2, r3
 80210de:	693b      	ldr	r3, [r7, #16]
 80210e0:	889b      	ldrh	r3, [r3, #4]
 80210e2:	b29b      	uxth	r3, r3
 80210e4:	429a      	cmp	r2, r3
 80210e6:	d902      	bls.n	80210ee <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80210e8:	f04f 33ff 	mov.w	r3, #4294967295
 80210ec:	e0de      	b.n	80212ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80210ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80210f0:	68ba      	ldr	r2, [r7, #8]
 80210f2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80210f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80210f6:	88db      	ldrh	r3, [r3, #6]
 80210f8:	b29a      	uxth	r2, r3
 80210fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80210fc:	889b      	ldrh	r3, [r3, #4]
 80210fe:	b29b      	uxth	r3, r3
 8021100:	429a      	cmp	r2, r3
 8021102:	d03d      	beq.n	8021180 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8021104:	2300      	movs	r3, #0
 8021106:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8021108:	e03a      	b.n	8021180 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 802110a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802110c:	88db      	ldrh	r3, [r3, #6]
 802110e:	b29a      	uxth	r2, r3
 8021110:	693b      	ldr	r3, [r7, #16]
 8021112:	889b      	ldrh	r3, [r3, #4]
 8021114:	b29b      	uxth	r3, r3
 8021116:	429a      	cmp	r2, r3
 8021118:	d902      	bls.n	8021120 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 802111a:	f04f 33ff 	mov.w	r3, #4294967295
 802111e:	e0c5      	b.n	80212ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8021120:	68fb      	ldr	r3, [r7, #12]
 8021122:	68ba      	ldr	r2, [r7, #8]
 8021124:	605a      	str	r2, [r3, #4]
      break;
 8021126:	e02b      	b.n	8021180 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8021128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802112a:	889b      	ldrh	r3, [r3, #4]
 802112c:	b29a      	uxth	r2, r3
 802112e:	693b      	ldr	r3, [r7, #16]
 8021130:	889b      	ldrh	r3, [r3, #4]
 8021132:	b29b      	uxth	r3, r3
 8021134:	429a      	cmp	r2, r3
 8021136:	d102      	bne.n	802113e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021138:	f04f 33ff 	mov.w	r3, #4294967295
 802113c:	e0b6      	b.n	80212ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 802113e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021140:	889b      	ldrh	r3, [r3, #4]
 8021142:	b29a      	uxth	r2, r3
 8021144:	693b      	ldr	r3, [r7, #16]
 8021146:	88db      	ldrh	r3, [r3, #6]
 8021148:	b29b      	uxth	r3, r3
 802114a:	429a      	cmp	r2, r3
 802114c:	d202      	bcs.n	8021154 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 802114e:	f04f 33ff 	mov.w	r3, #4294967295
 8021152:	e0ab      	b.n	80212ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8021154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021156:	2b00      	cmp	r3, #0
 8021158:	d009      	beq.n	802116e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 802115a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802115c:	88db      	ldrh	r3, [r3, #6]
 802115e:	b29a      	uxth	r2, r3
 8021160:	693b      	ldr	r3, [r7, #16]
 8021162:	889b      	ldrh	r3, [r3, #4]
 8021164:	b29b      	uxth	r3, r3
 8021166:	429a      	cmp	r2, r3
 8021168:	d001      	beq.n	802116e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 802116a:	2300      	movs	r3, #0
 802116c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 802116e:	693b      	ldr	r3, [r7, #16]
 8021170:	681b      	ldr	r3, [r3, #0]
 8021172:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8021174:	693b      	ldr	r3, [r7, #16]
 8021176:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8021178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802117a:	2b00      	cmp	r3, #0
 802117c:	d193      	bne.n	80210a6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 802117e:	e000      	b.n	8021182 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8021180:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8021182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021184:	2b00      	cmp	r3, #0
 8021186:	d12d      	bne.n	80211e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8021188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802118a:	2b00      	cmp	r3, #0
 802118c:	d01c      	beq.n	80211c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 802118e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021190:	88db      	ldrh	r3, [r3, #6]
 8021192:	b29a      	uxth	r2, r3
 8021194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021196:	889b      	ldrh	r3, [r3, #4]
 8021198:	b29b      	uxth	r3, r3
 802119a:	429a      	cmp	r2, r3
 802119c:	d906      	bls.n	80211ac <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 802119e:	4b45      	ldr	r3, [pc, #276]	; (80212b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80211a0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80211a4:	4944      	ldr	r1, [pc, #272]	; (80212b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80211a6:	4845      	ldr	r0, [pc, #276]	; (80212bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80211a8:	f005 fe94 	bl	8026ed4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80211ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80211ae:	68ba      	ldr	r2, [r7, #8]
 80211b0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80211b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80211b4:	88db      	ldrh	r3, [r3, #6]
 80211b6:	b29a      	uxth	r2, r3
 80211b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80211ba:	889b      	ldrh	r3, [r3, #4]
 80211bc:	b29b      	uxth	r3, r3
 80211be:	429a      	cmp	r2, r3
 80211c0:	d010      	beq.n	80211e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80211c2:	2300      	movs	r3, #0
 80211c4:	623b      	str	r3, [r7, #32]
 80211c6:	e00d      	b.n	80211e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80211c8:	68fb      	ldr	r3, [r7, #12]
 80211ca:	685b      	ldr	r3, [r3, #4]
 80211cc:	2b00      	cmp	r3, #0
 80211ce:	d006      	beq.n	80211de <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80211d0:	4b38      	ldr	r3, [pc, #224]	; (80212b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80211d2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80211d6:	493a      	ldr	r1, [pc, #232]	; (80212c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80211d8:	4838      	ldr	r0, [pc, #224]	; (80212bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80211da:	f005 fe7b 	bl	8026ed4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80211de:	68fb      	ldr	r3, [r7, #12]
 80211e0:	68ba      	ldr	r2, [r7, #8]
 80211e2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80211e4:	687b      	ldr	r3, [r7, #4]
 80211e6:	2b00      	cmp	r3, #0
 80211e8:	d105      	bne.n	80211f6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80211ea:	68fb      	ldr	r3, [r7, #12]
 80211ec:	7f9b      	ldrb	r3, [r3, #30]
 80211ee:	f003 0301 	and.w	r3, r3, #1
 80211f2:	2b00      	cmp	r3, #0
 80211f4:	d059      	beq.n	80212aa <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80211f6:	6a3b      	ldr	r3, [r7, #32]
 80211f8:	2b00      	cmp	r3, #0
 80211fa:	d04f      	beq.n	802129c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80211fc:	68fb      	ldr	r3, [r7, #12]
 80211fe:	685b      	ldr	r3, [r3, #4]
 8021200:	2b00      	cmp	r3, #0
 8021202:	d006      	beq.n	8021212 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8021204:	68fb      	ldr	r3, [r7, #12]
 8021206:	685b      	ldr	r3, [r3, #4]
 8021208:	685b      	ldr	r3, [r3, #4]
 802120a:	889b      	ldrh	r3, [r3, #4]
 802120c:	b29b      	uxth	r3, r3
 802120e:	2b00      	cmp	r3, #0
 8021210:	d002      	beq.n	8021218 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8021212:	2300      	movs	r3, #0
 8021214:	623b      	str	r3, [r7, #32]
 8021216:	e041      	b.n	802129c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8021218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802121a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 802121c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802121e:	681b      	ldr	r3, [r3, #0]
 8021220:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8021222:	e012      	b.n	802124a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8021224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021226:	685b      	ldr	r3, [r3, #4]
 8021228:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 802122a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802122c:	88db      	ldrh	r3, [r3, #6]
 802122e:	b29a      	uxth	r2, r3
 8021230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021232:	889b      	ldrh	r3, [r3, #4]
 8021234:	b29b      	uxth	r3, r3
 8021236:	429a      	cmp	r2, r3
 8021238:	d002      	beq.n	8021240 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 802123a:	2300      	movs	r3, #0
 802123c:	623b      	str	r3, [r7, #32]
            break;
 802123e:	e007      	b.n	8021250 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8021240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021242:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8021244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021246:	681b      	ldr	r3, [r3, #0]
 8021248:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 802124a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802124c:	2b00      	cmp	r3, #0
 802124e:	d1e9      	bne.n	8021224 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8021250:	6a3b      	ldr	r3, [r7, #32]
 8021252:	2b00      	cmp	r3, #0
 8021254:	d022      	beq.n	802129c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8021256:	68fb      	ldr	r3, [r7, #12]
 8021258:	685b      	ldr	r3, [r3, #4]
 802125a:	2b00      	cmp	r3, #0
 802125c:	d106      	bne.n	802126c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 802125e:	4b15      	ldr	r3, [pc, #84]	; (80212b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021260:	f240 12df 	movw	r2, #479	; 0x1df
 8021264:	4917      	ldr	r1, [pc, #92]	; (80212c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8021266:	4815      	ldr	r0, [pc, #84]	; (80212bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021268:	f005 fe34 	bl	8026ed4 <iprintf>
          LWIP_ASSERT("sanity check",
 802126c:	68fb      	ldr	r3, [r7, #12]
 802126e:	685b      	ldr	r3, [r3, #4]
 8021270:	685b      	ldr	r3, [r3, #4]
 8021272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021274:	429a      	cmp	r2, r3
 8021276:	d106      	bne.n	8021286 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8021278:	4b0e      	ldr	r3, [pc, #56]	; (80212b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 802127a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 802127e:	4911      	ldr	r1, [pc, #68]	; (80212c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8021280:	480e      	ldr	r0, [pc, #56]	; (80212bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021282:	f005 fe27 	bl	8026ed4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8021286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021288:	681b      	ldr	r3, [r3, #0]
 802128a:	2b00      	cmp	r3, #0
 802128c:	d006      	beq.n	802129c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 802128e:	4b09      	ldr	r3, [pc, #36]	; (80212b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021290:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8021294:	490c      	ldr	r1, [pc, #48]	; (80212c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8021296:	4809      	ldr	r0, [pc, #36]	; (80212bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021298:	f005 fe1c 	bl	8026ed4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 802129c:	6a3b      	ldr	r3, [r7, #32]
 802129e:	2b00      	cmp	r3, #0
 80212a0:	bf14      	ite	ne
 80212a2:	2301      	movne	r3, #1
 80212a4:	2300      	moveq	r3, #0
 80212a6:	b2db      	uxtb	r3, r3
 80212a8:	e000      	b.n	80212ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80212aa:	2300      	movs	r3, #0
}
 80212ac:	4618      	mov	r0, r3
 80212ae:	3730      	adds	r7, #48	; 0x30
 80212b0:	46bd      	mov	sp, r7
 80212b2:	bd80      	pop	{r7, pc}
 80212b4:	0802e090 	.word	0x0802e090
 80212b8:	0802e174 	.word	0x0802e174
 80212bc:	0802e0d8 	.word	0x0802e0d8
 80212c0:	0802e194 	.word	0x0802e194
 80212c4:	0802e1cc 	.word	0x0802e1cc
 80212c8:	0802e1dc 	.word	0x0802e1dc

080212cc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80212cc:	b580      	push	{r7, lr}
 80212ce:	b08e      	sub	sp, #56	; 0x38
 80212d0:	af00      	add	r7, sp, #0
 80212d2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80212d4:	687b      	ldr	r3, [r7, #4]
 80212d6:	685b      	ldr	r3, [r3, #4]
 80212d8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80212da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80212dc:	781b      	ldrb	r3, [r3, #0]
 80212de:	f003 030f 	and.w	r3, r3, #15
 80212e2:	b2db      	uxtb	r3, r3
 80212e4:	009b      	lsls	r3, r3, #2
 80212e6:	b2db      	uxtb	r3, r3
 80212e8:	2b14      	cmp	r3, #20
 80212ea:	f040 8167 	bne.w	80215bc <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80212ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80212f0:	88db      	ldrh	r3, [r3, #6]
 80212f2:	b29b      	uxth	r3, r3
 80212f4:	4618      	mov	r0, r3
 80212f6:	f7f1 feeb 	bl	80130d0 <lwip_htons>
 80212fa:	4603      	mov	r3, r0
 80212fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021300:	b29b      	uxth	r3, r3
 8021302:	00db      	lsls	r3, r3, #3
 8021304:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8021306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021308:	885b      	ldrh	r3, [r3, #2]
 802130a:	b29b      	uxth	r3, r3
 802130c:	4618      	mov	r0, r3
 802130e:	f7f1 fedf 	bl	80130d0 <lwip_htons>
 8021312:	4603      	mov	r3, r0
 8021314:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8021316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021318:	781b      	ldrb	r3, [r3, #0]
 802131a:	f003 030f 	and.w	r3, r3, #15
 802131e:	b2db      	uxtb	r3, r3
 8021320:	009b      	lsls	r3, r3, #2
 8021322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8021326:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802132a:	b29b      	uxth	r3, r3
 802132c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802132e:	429a      	cmp	r2, r3
 8021330:	f0c0 8146 	bcc.w	80215c0 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8021334:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8021338:	b29b      	uxth	r3, r3
 802133a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802133c:	1ad3      	subs	r3, r2, r3
 802133e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8021340:	6878      	ldr	r0, [r7, #4]
 8021342:	f7f4 fc25 	bl	8015b90 <pbuf_clen>
 8021346:	4603      	mov	r3, r0
 8021348:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 802134a:	4b9f      	ldr	r3, [pc, #636]	; (80215c8 <ip4_reass+0x2fc>)
 802134c:	881b      	ldrh	r3, [r3, #0]
 802134e:	461a      	mov	r2, r3
 8021350:	8c3b      	ldrh	r3, [r7, #32]
 8021352:	4413      	add	r3, r2
 8021354:	2b0a      	cmp	r3, #10
 8021356:	dd10      	ble.n	802137a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8021358:	8c3b      	ldrh	r3, [r7, #32]
 802135a:	4619      	mov	r1, r3
 802135c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802135e:	f7ff fd81 	bl	8020e64 <ip_reass_remove_oldest_datagram>
 8021362:	4603      	mov	r3, r0
 8021364:	2b00      	cmp	r3, #0
 8021366:	f000 812d 	beq.w	80215c4 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 802136a:	4b97      	ldr	r3, [pc, #604]	; (80215c8 <ip4_reass+0x2fc>)
 802136c:	881b      	ldrh	r3, [r3, #0]
 802136e:	461a      	mov	r2, r3
 8021370:	8c3b      	ldrh	r3, [r7, #32]
 8021372:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8021374:	2b0a      	cmp	r3, #10
 8021376:	f300 8125 	bgt.w	80215c4 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 802137a:	4b94      	ldr	r3, [pc, #592]	; (80215cc <ip4_reass+0x300>)
 802137c:	681b      	ldr	r3, [r3, #0]
 802137e:	633b      	str	r3, [r7, #48]	; 0x30
 8021380:	e015      	b.n	80213ae <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8021382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021384:	695a      	ldr	r2, [r3, #20]
 8021386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021388:	68db      	ldr	r3, [r3, #12]
 802138a:	429a      	cmp	r2, r3
 802138c:	d10c      	bne.n	80213a8 <ip4_reass+0xdc>
 802138e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021390:	699a      	ldr	r2, [r3, #24]
 8021392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021394:	691b      	ldr	r3, [r3, #16]
 8021396:	429a      	cmp	r2, r3
 8021398:	d106      	bne.n	80213a8 <ip4_reass+0xdc>
 802139a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802139c:	899a      	ldrh	r2, [r3, #12]
 802139e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80213a0:	889b      	ldrh	r3, [r3, #4]
 80213a2:	b29b      	uxth	r3, r3
 80213a4:	429a      	cmp	r2, r3
 80213a6:	d006      	beq.n	80213b6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80213a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80213aa:	681b      	ldr	r3, [r3, #0]
 80213ac:	633b      	str	r3, [r7, #48]	; 0x30
 80213ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80213b0:	2b00      	cmp	r3, #0
 80213b2:	d1e6      	bne.n	8021382 <ip4_reass+0xb6>
 80213b4:	e000      	b.n	80213b8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80213b6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80213b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80213ba:	2b00      	cmp	r3, #0
 80213bc:	d109      	bne.n	80213d2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80213be:	8c3b      	ldrh	r3, [r7, #32]
 80213c0:	4619      	mov	r1, r3
 80213c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80213c4:	f7ff fdb0 	bl	8020f28 <ip_reass_enqueue_new_datagram>
 80213c8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80213ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80213cc:	2b00      	cmp	r3, #0
 80213ce:	d11c      	bne.n	802140a <ip4_reass+0x13e>
      goto nullreturn;
 80213d0:	e109      	b.n	80215e6 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80213d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80213d4:	88db      	ldrh	r3, [r3, #6]
 80213d6:	b29b      	uxth	r3, r3
 80213d8:	4618      	mov	r0, r3
 80213da:	f7f1 fe79 	bl	80130d0 <lwip_htons>
 80213de:	4603      	mov	r3, r0
 80213e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80213e4:	2b00      	cmp	r3, #0
 80213e6:	d110      	bne.n	802140a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80213e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80213ea:	89db      	ldrh	r3, [r3, #14]
 80213ec:	4618      	mov	r0, r3
 80213ee:	f7f1 fe6f 	bl	80130d0 <lwip_htons>
 80213f2:	4603      	mov	r3, r0
 80213f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80213f8:	2b00      	cmp	r3, #0
 80213fa:	d006      	beq.n	802140a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80213fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80213fe:	3308      	adds	r3, #8
 8021400:	2214      	movs	r2, #20
 8021402:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8021404:	4618      	mov	r0, r3
 8021406:	f004 fedf 	bl	80261c8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 802140a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802140c:	88db      	ldrh	r3, [r3, #6]
 802140e:	b29b      	uxth	r3, r3
 8021410:	f003 0320 	and.w	r3, r3, #32
 8021414:	2b00      	cmp	r3, #0
 8021416:	bf0c      	ite	eq
 8021418:	2301      	moveq	r3, #1
 802141a:	2300      	movne	r3, #0
 802141c:	b2db      	uxtb	r3, r3
 802141e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8021420:	69fb      	ldr	r3, [r7, #28]
 8021422:	2b00      	cmp	r3, #0
 8021424:	d00e      	beq.n	8021444 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8021426:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8021428:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802142a:	4413      	add	r3, r2
 802142c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 802142e:	8b7a      	ldrh	r2, [r7, #26]
 8021430:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8021432:	429a      	cmp	r2, r3
 8021434:	f0c0 80a0 	bcc.w	8021578 <ip4_reass+0x2ac>
 8021438:	8b7b      	ldrh	r3, [r7, #26]
 802143a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 802143e:	4293      	cmp	r3, r2
 8021440:	f200 809a 	bhi.w	8021578 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8021444:	69fa      	ldr	r2, [r7, #28]
 8021446:	6879      	ldr	r1, [r7, #4]
 8021448:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802144a:	f7ff fdd5 	bl	8020ff8 <ip_reass_chain_frag_into_datagram_and_validate>
 802144e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8021450:	697b      	ldr	r3, [r7, #20]
 8021452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021456:	f000 8091 	beq.w	802157c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 802145a:	4b5b      	ldr	r3, [pc, #364]	; (80215c8 <ip4_reass+0x2fc>)
 802145c:	881a      	ldrh	r2, [r3, #0]
 802145e:	8c3b      	ldrh	r3, [r7, #32]
 8021460:	4413      	add	r3, r2
 8021462:	b29a      	uxth	r2, r3
 8021464:	4b58      	ldr	r3, [pc, #352]	; (80215c8 <ip4_reass+0x2fc>)
 8021466:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8021468:	69fb      	ldr	r3, [r7, #28]
 802146a:	2b00      	cmp	r3, #0
 802146c:	d00d      	beq.n	802148a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 802146e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8021470:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021472:	4413      	add	r3, r2
 8021474:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8021476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021478:	8a7a      	ldrh	r2, [r7, #18]
 802147a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 802147c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802147e:	7f9b      	ldrb	r3, [r3, #30]
 8021480:	f043 0301 	orr.w	r3, r3, #1
 8021484:	b2da      	uxtb	r2, r3
 8021486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021488:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 802148a:	697b      	ldr	r3, [r7, #20]
 802148c:	2b01      	cmp	r3, #1
 802148e:	d171      	bne.n	8021574 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8021490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021492:	8b9b      	ldrh	r3, [r3, #28]
 8021494:	3314      	adds	r3, #20
 8021496:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8021498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802149a:	685b      	ldr	r3, [r3, #4]
 802149c:	685b      	ldr	r3, [r3, #4]
 802149e:	681b      	ldr	r3, [r3, #0]
 80214a0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80214a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80214a4:	685b      	ldr	r3, [r3, #4]
 80214a6:	685b      	ldr	r3, [r3, #4]
 80214a8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80214aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80214ac:	3308      	adds	r3, #8
 80214ae:	2214      	movs	r2, #20
 80214b0:	4619      	mov	r1, r3
 80214b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80214b4:	f004 fe88 	bl	80261c8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80214b8:	8a3b      	ldrh	r3, [r7, #16]
 80214ba:	4618      	mov	r0, r3
 80214bc:	f7f1 fe08 	bl	80130d0 <lwip_htons>
 80214c0:	4603      	mov	r3, r0
 80214c2:	461a      	mov	r2, r3
 80214c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80214c6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80214c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80214ca:	2200      	movs	r2, #0
 80214cc:	719a      	strb	r2, [r3, #6]
 80214ce:	2200      	movs	r2, #0
 80214d0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80214d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80214d4:	2200      	movs	r2, #0
 80214d6:	729a      	strb	r2, [r3, #10]
 80214d8:	2200      	movs	r2, #0
 80214da:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80214dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80214de:	685b      	ldr	r3, [r3, #4]
 80214e0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80214e2:	e00d      	b.n	8021500 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80214e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80214e6:	685b      	ldr	r3, [r3, #4]
 80214e8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80214ea:	2114      	movs	r1, #20
 80214ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80214ee:	f7f4 fa09 	bl	8015904 <pbuf_remove_header>
      pbuf_cat(p, r);
 80214f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80214f4:	6878      	ldr	r0, [r7, #4]
 80214f6:	f7f4 fb8b 	bl	8015c10 <pbuf_cat>
      r = iprh->next_pbuf;
 80214fa:	68fb      	ldr	r3, [r7, #12]
 80214fc:	681b      	ldr	r3, [r3, #0]
 80214fe:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8021500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021502:	2b00      	cmp	r3, #0
 8021504:	d1ee      	bne.n	80214e4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8021506:	4b31      	ldr	r3, [pc, #196]	; (80215cc <ip4_reass+0x300>)
 8021508:	681b      	ldr	r3, [r3, #0]
 802150a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802150c:	429a      	cmp	r2, r3
 802150e:	d102      	bne.n	8021516 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8021510:	2300      	movs	r3, #0
 8021512:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021514:	e010      	b.n	8021538 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8021516:	4b2d      	ldr	r3, [pc, #180]	; (80215cc <ip4_reass+0x300>)
 8021518:	681b      	ldr	r3, [r3, #0]
 802151a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802151c:	e007      	b.n	802152e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 802151e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021520:	681b      	ldr	r3, [r3, #0]
 8021522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021524:	429a      	cmp	r2, r3
 8021526:	d006      	beq.n	8021536 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8021528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802152a:	681b      	ldr	r3, [r3, #0]
 802152c:	62fb      	str	r3, [r7, #44]	; 0x2c
 802152e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021530:	2b00      	cmp	r3, #0
 8021532:	d1f4      	bne.n	802151e <ip4_reass+0x252>
 8021534:	e000      	b.n	8021538 <ip4_reass+0x26c>
          break;
 8021536:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8021538:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802153a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802153c:	f7ff fd2e 	bl	8020f9c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8021540:	6878      	ldr	r0, [r7, #4]
 8021542:	f7f4 fb25 	bl	8015b90 <pbuf_clen>
 8021546:	4603      	mov	r3, r0
 8021548:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 802154a:	4b1f      	ldr	r3, [pc, #124]	; (80215c8 <ip4_reass+0x2fc>)
 802154c:	881b      	ldrh	r3, [r3, #0]
 802154e:	8c3a      	ldrh	r2, [r7, #32]
 8021550:	429a      	cmp	r2, r3
 8021552:	d906      	bls.n	8021562 <ip4_reass+0x296>
 8021554:	4b1e      	ldr	r3, [pc, #120]	; (80215d0 <ip4_reass+0x304>)
 8021556:	f240 229b 	movw	r2, #667	; 0x29b
 802155a:	491e      	ldr	r1, [pc, #120]	; (80215d4 <ip4_reass+0x308>)
 802155c:	481e      	ldr	r0, [pc, #120]	; (80215d8 <ip4_reass+0x30c>)
 802155e:	f005 fcb9 	bl	8026ed4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8021562:	4b19      	ldr	r3, [pc, #100]	; (80215c8 <ip4_reass+0x2fc>)
 8021564:	881a      	ldrh	r2, [r3, #0]
 8021566:	8c3b      	ldrh	r3, [r7, #32]
 8021568:	1ad3      	subs	r3, r2, r3
 802156a:	b29a      	uxth	r2, r3
 802156c:	4b16      	ldr	r3, [pc, #88]	; (80215c8 <ip4_reass+0x2fc>)
 802156e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8021570:	687b      	ldr	r3, [r7, #4]
 8021572:	e03c      	b.n	80215ee <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8021574:	2300      	movs	r3, #0
 8021576:	e03a      	b.n	80215ee <ip4_reass+0x322>
      goto nullreturn_ipr;
 8021578:	bf00      	nop
 802157a:	e000      	b.n	802157e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 802157c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 802157e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021580:	2b00      	cmp	r3, #0
 8021582:	d106      	bne.n	8021592 <ip4_reass+0x2c6>
 8021584:	4b12      	ldr	r3, [pc, #72]	; (80215d0 <ip4_reass+0x304>)
 8021586:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 802158a:	4914      	ldr	r1, [pc, #80]	; (80215dc <ip4_reass+0x310>)
 802158c:	4812      	ldr	r0, [pc, #72]	; (80215d8 <ip4_reass+0x30c>)
 802158e:	f005 fca1 	bl	8026ed4 <iprintf>
  if (ipr->p == NULL) {
 8021592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021594:	685b      	ldr	r3, [r3, #4]
 8021596:	2b00      	cmp	r3, #0
 8021598:	d124      	bne.n	80215e4 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 802159a:	4b0c      	ldr	r3, [pc, #48]	; (80215cc <ip4_reass+0x300>)
 802159c:	681b      	ldr	r3, [r3, #0]
 802159e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80215a0:	429a      	cmp	r2, r3
 80215a2:	d006      	beq.n	80215b2 <ip4_reass+0x2e6>
 80215a4:	4b0a      	ldr	r3, [pc, #40]	; (80215d0 <ip4_reass+0x304>)
 80215a6:	f240 22ab 	movw	r2, #683	; 0x2ab
 80215aa:	490d      	ldr	r1, [pc, #52]	; (80215e0 <ip4_reass+0x314>)
 80215ac:	480a      	ldr	r0, [pc, #40]	; (80215d8 <ip4_reass+0x30c>)
 80215ae:	f005 fc91 	bl	8026ed4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80215b2:	2100      	movs	r1, #0
 80215b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80215b6:	f7ff fcf1 	bl	8020f9c <ip_reass_dequeue_datagram>
 80215ba:	e014      	b.n	80215e6 <ip4_reass+0x31a>
    goto nullreturn;
 80215bc:	bf00      	nop
 80215be:	e012      	b.n	80215e6 <ip4_reass+0x31a>
    goto nullreturn;
 80215c0:	bf00      	nop
 80215c2:	e010      	b.n	80215e6 <ip4_reass+0x31a>
      goto nullreturn;
 80215c4:	bf00      	nop
 80215c6:	e00e      	b.n	80215e6 <ip4_reass+0x31a>
 80215c8:	240050d0 	.word	0x240050d0
 80215cc:	240050cc 	.word	0x240050cc
 80215d0:	0802e090 	.word	0x0802e090
 80215d4:	0802e200 	.word	0x0802e200
 80215d8:	0802e0d8 	.word	0x0802e0d8
 80215dc:	0802e21c 	.word	0x0802e21c
 80215e0:	0802e228 	.word	0x0802e228
  }

nullreturn:
 80215e4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80215e6:	6878      	ldr	r0, [r7, #4]
 80215e8:	f7f4 fa44 	bl	8015a74 <pbuf_free>
  return NULL;
 80215ec:	2300      	movs	r3, #0
}
 80215ee:	4618      	mov	r0, r3
 80215f0:	3738      	adds	r7, #56	; 0x38
 80215f2:	46bd      	mov	sp, r7
 80215f4:	bd80      	pop	{r7, pc}
 80215f6:	bf00      	nop

080215f8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80215f8:	b580      	push	{r7, lr}
 80215fa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80215fc:	2005      	movs	r0, #5
 80215fe:	f7f3 fae1 	bl	8014bc4 <memp_malloc>
 8021602:	4603      	mov	r3, r0
}
 8021604:	4618      	mov	r0, r3
 8021606:	bd80      	pop	{r7, pc}

08021608 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8021608:	b580      	push	{r7, lr}
 802160a:	b082      	sub	sp, #8
 802160c:	af00      	add	r7, sp, #0
 802160e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8021610:	687b      	ldr	r3, [r7, #4]
 8021612:	2b00      	cmp	r3, #0
 8021614:	d106      	bne.n	8021624 <ip_frag_free_pbuf_custom_ref+0x1c>
 8021616:	4b07      	ldr	r3, [pc, #28]	; (8021634 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8021618:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 802161c:	4906      	ldr	r1, [pc, #24]	; (8021638 <ip_frag_free_pbuf_custom_ref+0x30>)
 802161e:	4807      	ldr	r0, [pc, #28]	; (802163c <ip_frag_free_pbuf_custom_ref+0x34>)
 8021620:	f005 fc58 	bl	8026ed4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8021624:	6879      	ldr	r1, [r7, #4]
 8021626:	2005      	movs	r0, #5
 8021628:	f7f3 fb42 	bl	8014cb0 <memp_free>
}
 802162c:	bf00      	nop
 802162e:	3708      	adds	r7, #8
 8021630:	46bd      	mov	sp, r7
 8021632:	bd80      	pop	{r7, pc}
 8021634:	0802e090 	.word	0x0802e090
 8021638:	0802e248 	.word	0x0802e248
 802163c:	0802e0d8 	.word	0x0802e0d8

08021640 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8021640:	b580      	push	{r7, lr}
 8021642:	b084      	sub	sp, #16
 8021644:	af00      	add	r7, sp, #0
 8021646:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8021648:	687b      	ldr	r3, [r7, #4]
 802164a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 802164c:	68fb      	ldr	r3, [r7, #12]
 802164e:	2b00      	cmp	r3, #0
 8021650:	d106      	bne.n	8021660 <ipfrag_free_pbuf_custom+0x20>
 8021652:	4b11      	ldr	r3, [pc, #68]	; (8021698 <ipfrag_free_pbuf_custom+0x58>)
 8021654:	f240 22ce 	movw	r2, #718	; 0x2ce
 8021658:	4910      	ldr	r1, [pc, #64]	; (802169c <ipfrag_free_pbuf_custom+0x5c>)
 802165a:	4811      	ldr	r0, [pc, #68]	; (80216a0 <ipfrag_free_pbuf_custom+0x60>)
 802165c:	f005 fc3a 	bl	8026ed4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8021660:	68fa      	ldr	r2, [r7, #12]
 8021662:	687b      	ldr	r3, [r7, #4]
 8021664:	429a      	cmp	r2, r3
 8021666:	d006      	beq.n	8021676 <ipfrag_free_pbuf_custom+0x36>
 8021668:	4b0b      	ldr	r3, [pc, #44]	; (8021698 <ipfrag_free_pbuf_custom+0x58>)
 802166a:	f240 22cf 	movw	r2, #719	; 0x2cf
 802166e:	490d      	ldr	r1, [pc, #52]	; (80216a4 <ipfrag_free_pbuf_custom+0x64>)
 8021670:	480b      	ldr	r0, [pc, #44]	; (80216a0 <ipfrag_free_pbuf_custom+0x60>)
 8021672:	f005 fc2f 	bl	8026ed4 <iprintf>
  if (pcr->original != NULL) {
 8021676:	68fb      	ldr	r3, [r7, #12]
 8021678:	695b      	ldr	r3, [r3, #20]
 802167a:	2b00      	cmp	r3, #0
 802167c:	d004      	beq.n	8021688 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 802167e:	68fb      	ldr	r3, [r7, #12]
 8021680:	695b      	ldr	r3, [r3, #20]
 8021682:	4618      	mov	r0, r3
 8021684:	f7f4 f9f6 	bl	8015a74 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8021688:	68f8      	ldr	r0, [r7, #12]
 802168a:	f7ff ffbd 	bl	8021608 <ip_frag_free_pbuf_custom_ref>
}
 802168e:	bf00      	nop
 8021690:	3710      	adds	r7, #16
 8021692:	46bd      	mov	sp, r7
 8021694:	bd80      	pop	{r7, pc}
 8021696:	bf00      	nop
 8021698:	0802e090 	.word	0x0802e090
 802169c:	0802e254 	.word	0x0802e254
 80216a0:	0802e0d8 	.word	0x0802e0d8
 80216a4:	0802e260 	.word	0x0802e260

080216a8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80216a8:	b580      	push	{r7, lr}
 80216aa:	b094      	sub	sp, #80	; 0x50
 80216ac:	af02      	add	r7, sp, #8
 80216ae:	60f8      	str	r0, [r7, #12]
 80216b0:	60b9      	str	r1, [r7, #8]
 80216b2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80216b4:	2300      	movs	r3, #0
 80216b6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80216ba:	68bb      	ldr	r3, [r7, #8]
 80216bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80216be:	3b14      	subs	r3, #20
 80216c0:	2b00      	cmp	r3, #0
 80216c2:	da00      	bge.n	80216c6 <ip4_frag+0x1e>
 80216c4:	3307      	adds	r3, #7
 80216c6:	10db      	asrs	r3, r3, #3
 80216c8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80216ca:	2314      	movs	r3, #20
 80216cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80216ce:	68fb      	ldr	r3, [r7, #12]
 80216d0:	685b      	ldr	r3, [r3, #4]
 80216d2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80216d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80216d6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80216d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80216da:	781b      	ldrb	r3, [r3, #0]
 80216dc:	f003 030f 	and.w	r3, r3, #15
 80216e0:	b2db      	uxtb	r3, r3
 80216e2:	009b      	lsls	r3, r3, #2
 80216e4:	b2db      	uxtb	r3, r3
 80216e6:	2b14      	cmp	r3, #20
 80216e8:	d002      	beq.n	80216f0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80216ea:	f06f 0305 	mvn.w	r3, #5
 80216ee:	e110      	b.n	8021912 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80216f0:	68fb      	ldr	r3, [r7, #12]
 80216f2:	895b      	ldrh	r3, [r3, #10]
 80216f4:	2b13      	cmp	r3, #19
 80216f6:	d809      	bhi.n	802170c <ip4_frag+0x64>
 80216f8:	4b88      	ldr	r3, [pc, #544]	; (802191c <ip4_frag+0x274>)
 80216fa:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80216fe:	4988      	ldr	r1, [pc, #544]	; (8021920 <ip4_frag+0x278>)
 8021700:	4888      	ldr	r0, [pc, #544]	; (8021924 <ip4_frag+0x27c>)
 8021702:	f005 fbe7 	bl	8026ed4 <iprintf>
 8021706:	f06f 0305 	mvn.w	r3, #5
 802170a:	e102      	b.n	8021912 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 802170c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802170e:	88db      	ldrh	r3, [r3, #6]
 8021710:	b29b      	uxth	r3, r3
 8021712:	4618      	mov	r0, r3
 8021714:	f7f1 fcdc 	bl	80130d0 <lwip_htons>
 8021718:	4603      	mov	r3, r0
 802171a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 802171c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802171e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021722:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8021726:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8021728:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802172c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 802172e:	68fb      	ldr	r3, [r7, #12]
 8021730:	891b      	ldrh	r3, [r3, #8]
 8021732:	3b14      	subs	r3, #20
 8021734:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8021738:	e0e1      	b.n	80218fe <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 802173a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802173c:	00db      	lsls	r3, r3, #3
 802173e:	b29b      	uxth	r3, r3
 8021740:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8021744:	4293      	cmp	r3, r2
 8021746:	bf28      	it	cs
 8021748:	4613      	movcs	r3, r2
 802174a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 802174c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021750:	2114      	movs	r1, #20
 8021752:	200e      	movs	r0, #14
 8021754:	f7f3 fe78 	bl	8015448 <pbuf_alloc>
 8021758:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 802175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802175c:	2b00      	cmp	r3, #0
 802175e:	f000 80d5 	beq.w	802190c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8021762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021764:	895b      	ldrh	r3, [r3, #10]
 8021766:	2b13      	cmp	r3, #19
 8021768:	d806      	bhi.n	8021778 <ip4_frag+0xd0>
 802176a:	4b6c      	ldr	r3, [pc, #432]	; (802191c <ip4_frag+0x274>)
 802176c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8021770:	496d      	ldr	r1, [pc, #436]	; (8021928 <ip4_frag+0x280>)
 8021772:	486c      	ldr	r0, [pc, #432]	; (8021924 <ip4_frag+0x27c>)
 8021774:	f005 fbae 	bl	8026ed4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8021778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802177a:	685b      	ldr	r3, [r3, #4]
 802177c:	2214      	movs	r2, #20
 802177e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8021780:	4618      	mov	r0, r3
 8021782:	f004 fd21 	bl	80261c8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8021786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021788:	685b      	ldr	r3, [r3, #4]
 802178a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 802178c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 802178e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8021792:	e064      	b.n	802185e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8021794:	68fb      	ldr	r3, [r7, #12]
 8021796:	895a      	ldrh	r2, [r3, #10]
 8021798:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802179a:	1ad3      	subs	r3, r2, r3
 802179c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 802179e:	68fb      	ldr	r3, [r7, #12]
 80217a0:	895b      	ldrh	r3, [r3, #10]
 80217a2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80217a4:	429a      	cmp	r2, r3
 80217a6:	d906      	bls.n	80217b6 <ip4_frag+0x10e>
 80217a8:	4b5c      	ldr	r3, [pc, #368]	; (802191c <ip4_frag+0x274>)
 80217aa:	f240 322d 	movw	r2, #813	; 0x32d
 80217ae:	495f      	ldr	r1, [pc, #380]	; (802192c <ip4_frag+0x284>)
 80217b0:	485c      	ldr	r0, [pc, #368]	; (8021924 <ip4_frag+0x27c>)
 80217b2:	f005 fb8f 	bl	8026ed4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80217b6:	8bfa      	ldrh	r2, [r7, #30]
 80217b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80217bc:	4293      	cmp	r3, r2
 80217be:	bf28      	it	cs
 80217c0:	4613      	movcs	r3, r2
 80217c2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80217c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80217ca:	2b00      	cmp	r3, #0
 80217cc:	d105      	bne.n	80217da <ip4_frag+0x132>
        poff = 0;
 80217ce:	2300      	movs	r3, #0
 80217d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80217d2:	68fb      	ldr	r3, [r7, #12]
 80217d4:	681b      	ldr	r3, [r3, #0]
 80217d6:	60fb      	str	r3, [r7, #12]
        continue;
 80217d8:	e041      	b.n	802185e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80217da:	f7ff ff0d 	bl	80215f8 <ip_frag_alloc_pbuf_custom_ref>
 80217de:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80217e0:	69bb      	ldr	r3, [r7, #24]
 80217e2:	2b00      	cmp	r3, #0
 80217e4:	d103      	bne.n	80217ee <ip4_frag+0x146>
        pbuf_free(rambuf);
 80217e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80217e8:	f7f4 f944 	bl	8015a74 <pbuf_free>
        goto memerr;
 80217ec:	e08f      	b.n	802190e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80217ee:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80217f0:	68fb      	ldr	r3, [r7, #12]
 80217f2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80217f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80217f6:	4413      	add	r3, r2
 80217f8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80217fc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8021800:	9201      	str	r2, [sp, #4]
 8021802:	9300      	str	r3, [sp, #0]
 8021804:	4603      	mov	r3, r0
 8021806:	2241      	movs	r2, #65	; 0x41
 8021808:	2000      	movs	r0, #0
 802180a:	f7f3 ff47 	bl	801569c <pbuf_alloced_custom>
 802180e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8021810:	697b      	ldr	r3, [r7, #20]
 8021812:	2b00      	cmp	r3, #0
 8021814:	d106      	bne.n	8021824 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8021816:	69b8      	ldr	r0, [r7, #24]
 8021818:	f7ff fef6 	bl	8021608 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 802181c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802181e:	f7f4 f929 	bl	8015a74 <pbuf_free>
        goto memerr;
 8021822:	e074      	b.n	802190e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8021824:	68f8      	ldr	r0, [r7, #12]
 8021826:	f7f4 f9cb 	bl	8015bc0 <pbuf_ref>
      pcr->original = p;
 802182a:	69bb      	ldr	r3, [r7, #24]
 802182c:	68fa      	ldr	r2, [r7, #12]
 802182e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8021830:	69bb      	ldr	r3, [r7, #24]
 8021832:	4a3f      	ldr	r2, [pc, #252]	; (8021930 <ip4_frag+0x288>)
 8021834:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8021836:	6979      	ldr	r1, [r7, #20]
 8021838:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802183a:	f7f4 f9e9 	bl	8015c10 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 802183e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8021842:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8021846:	1ad3      	subs	r3, r2, r3
 8021848:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 802184c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8021850:	2b00      	cmp	r3, #0
 8021852:	d004      	beq.n	802185e <ip4_frag+0x1b6>
        poff = 0;
 8021854:	2300      	movs	r3, #0
 8021856:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8021858:	68fb      	ldr	r3, [r7, #12]
 802185a:	681b      	ldr	r3, [r3, #0]
 802185c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 802185e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8021862:	2b00      	cmp	r3, #0
 8021864:	d196      	bne.n	8021794 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8021866:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8021868:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 802186c:	4413      	add	r3, r2
 802186e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8021870:	68bb      	ldr	r3, [r7, #8]
 8021872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8021874:	f1a3 0213 	sub.w	r2, r3, #19
 8021878:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 802187c:	429a      	cmp	r2, r3
 802187e:	bfcc      	ite	gt
 8021880:	2301      	movgt	r3, #1
 8021882:	2300      	movle	r3, #0
 8021884:	b2db      	uxtb	r3, r3
 8021886:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8021888:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 802188c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021890:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8021892:	6a3b      	ldr	r3, [r7, #32]
 8021894:	2b00      	cmp	r3, #0
 8021896:	d002      	beq.n	802189e <ip4_frag+0x1f6>
 8021898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802189a:	2b00      	cmp	r3, #0
 802189c:	d003      	beq.n	80218a6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 802189e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80218a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80218a4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80218a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80218a8:	4618      	mov	r0, r3
 80218aa:	f7f1 fc11 	bl	80130d0 <lwip_htons>
 80218ae:	4603      	mov	r3, r0
 80218b0:	461a      	mov	r2, r3
 80218b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80218b4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80218b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80218b8:	3314      	adds	r3, #20
 80218ba:	b29b      	uxth	r3, r3
 80218bc:	4618      	mov	r0, r3
 80218be:	f7f1 fc07 	bl	80130d0 <lwip_htons>
 80218c2:	4603      	mov	r3, r0
 80218c4:	461a      	mov	r2, r3
 80218c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80218c8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80218ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80218cc:	2200      	movs	r2, #0
 80218ce:	729a      	strb	r2, [r3, #10]
 80218d0:	2200      	movs	r2, #0
 80218d2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80218d4:	68bb      	ldr	r3, [r7, #8]
 80218d6:	695b      	ldr	r3, [r3, #20]
 80218d8:	687a      	ldr	r2, [r7, #4]
 80218da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80218dc:	68b8      	ldr	r0, [r7, #8]
 80218de:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80218e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80218e2:	f7f4 f8c7 	bl	8015a74 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80218e6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80218ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80218ec:	1ad3      	subs	r3, r2, r3
 80218ee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80218f2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80218f6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80218f8:	4413      	add	r3, r2
 80218fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80218fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8021902:	2b00      	cmp	r3, #0
 8021904:	f47f af19 	bne.w	802173a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8021908:	2300      	movs	r3, #0
 802190a:	e002      	b.n	8021912 <ip4_frag+0x26a>
      goto memerr;
 802190c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 802190e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8021912:	4618      	mov	r0, r3
 8021914:	3748      	adds	r7, #72	; 0x48
 8021916:	46bd      	mov	sp, r7
 8021918:	bd80      	pop	{r7, pc}
 802191a:	bf00      	nop
 802191c:	0802e090 	.word	0x0802e090
 8021920:	0802e26c 	.word	0x0802e26c
 8021924:	0802e0d8 	.word	0x0802e0d8
 8021928:	0802e288 	.word	0x0802e288
 802192c:	0802e2a8 	.word	0x0802e2a8
 8021930:	08021641 	.word	0x08021641

08021934 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8021934:	b580      	push	{r7, lr}
 8021936:	b086      	sub	sp, #24
 8021938:	af00      	add	r7, sp, #0
 802193a:	6078      	str	r0, [r7, #4]
 802193c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 802193e:	230e      	movs	r3, #14
 8021940:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8021942:	687b      	ldr	r3, [r7, #4]
 8021944:	895b      	ldrh	r3, [r3, #10]
 8021946:	2b0e      	cmp	r3, #14
 8021948:	d96e      	bls.n	8021a28 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 802194a:	687b      	ldr	r3, [r7, #4]
 802194c:	7bdb      	ldrb	r3, [r3, #15]
 802194e:	2b00      	cmp	r3, #0
 8021950:	d106      	bne.n	8021960 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8021952:	683b      	ldr	r3, [r7, #0]
 8021954:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8021958:	3301      	adds	r3, #1
 802195a:	b2da      	uxtb	r2, r3
 802195c:	687b      	ldr	r3, [r7, #4]
 802195e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8021960:	687b      	ldr	r3, [r7, #4]
 8021962:	685b      	ldr	r3, [r3, #4]
 8021964:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8021966:	693b      	ldr	r3, [r7, #16]
 8021968:	7b1a      	ldrb	r2, [r3, #12]
 802196a:	7b5b      	ldrb	r3, [r3, #13]
 802196c:	021b      	lsls	r3, r3, #8
 802196e:	4313      	orrs	r3, r2
 8021970:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8021972:	693b      	ldr	r3, [r7, #16]
 8021974:	781b      	ldrb	r3, [r3, #0]
 8021976:	f003 0301 	and.w	r3, r3, #1
 802197a:	2b00      	cmp	r3, #0
 802197c:	d023      	beq.n	80219c6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 802197e:	693b      	ldr	r3, [r7, #16]
 8021980:	781b      	ldrb	r3, [r3, #0]
 8021982:	2b01      	cmp	r3, #1
 8021984:	d10f      	bne.n	80219a6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8021986:	693b      	ldr	r3, [r7, #16]
 8021988:	785b      	ldrb	r3, [r3, #1]
 802198a:	2b00      	cmp	r3, #0
 802198c:	d11b      	bne.n	80219c6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 802198e:	693b      	ldr	r3, [r7, #16]
 8021990:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8021992:	2b5e      	cmp	r3, #94	; 0x5e
 8021994:	d117      	bne.n	80219c6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8021996:	687b      	ldr	r3, [r7, #4]
 8021998:	7b5b      	ldrb	r3, [r3, #13]
 802199a:	f043 0310 	orr.w	r3, r3, #16
 802199e:	b2da      	uxtb	r2, r3
 80219a0:	687b      	ldr	r3, [r7, #4]
 80219a2:	735a      	strb	r2, [r3, #13]
 80219a4:	e00f      	b.n	80219c6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80219a6:	693b      	ldr	r3, [r7, #16]
 80219a8:	2206      	movs	r2, #6
 80219aa:	4928      	ldr	r1, [pc, #160]	; (8021a4c <ethernet_input+0x118>)
 80219ac:	4618      	mov	r0, r3
 80219ae:	f004 fbfd 	bl	80261ac <memcmp>
 80219b2:	4603      	mov	r3, r0
 80219b4:	2b00      	cmp	r3, #0
 80219b6:	d106      	bne.n	80219c6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80219b8:	687b      	ldr	r3, [r7, #4]
 80219ba:	7b5b      	ldrb	r3, [r3, #13]
 80219bc:	f043 0308 	orr.w	r3, r3, #8
 80219c0:	b2da      	uxtb	r2, r3
 80219c2:	687b      	ldr	r3, [r7, #4]
 80219c4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80219c6:	89fb      	ldrh	r3, [r7, #14]
 80219c8:	2b08      	cmp	r3, #8
 80219ca:	d003      	beq.n	80219d4 <ethernet_input+0xa0>
 80219cc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80219d0:	d014      	beq.n	80219fc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80219d2:	e032      	b.n	8021a3a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80219d4:	683b      	ldr	r3, [r7, #0]
 80219d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80219da:	f003 0308 	and.w	r3, r3, #8
 80219de:	2b00      	cmp	r3, #0
 80219e0:	d024      	beq.n	8021a2c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80219e2:	8afb      	ldrh	r3, [r7, #22]
 80219e4:	4619      	mov	r1, r3
 80219e6:	6878      	ldr	r0, [r7, #4]
 80219e8:	f7f3 ff8c 	bl	8015904 <pbuf_remove_header>
 80219ec:	4603      	mov	r3, r0
 80219ee:	2b00      	cmp	r3, #0
 80219f0:	d11e      	bne.n	8021a30 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80219f2:	6839      	ldr	r1, [r7, #0]
 80219f4:	6878      	ldr	r0, [r7, #4]
 80219f6:	f7fe fdcb 	bl	8020590 <ip4_input>
      break;
 80219fa:	e013      	b.n	8021a24 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80219fc:	683b      	ldr	r3, [r7, #0]
 80219fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021a02:	f003 0308 	and.w	r3, r3, #8
 8021a06:	2b00      	cmp	r3, #0
 8021a08:	d014      	beq.n	8021a34 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8021a0a:	8afb      	ldrh	r3, [r7, #22]
 8021a0c:	4619      	mov	r1, r3
 8021a0e:	6878      	ldr	r0, [r7, #4]
 8021a10:	f7f3 ff78 	bl	8015904 <pbuf_remove_header>
 8021a14:	4603      	mov	r3, r0
 8021a16:	2b00      	cmp	r3, #0
 8021a18:	d10e      	bne.n	8021a38 <ethernet_input+0x104>
        etharp_input(p, netif);
 8021a1a:	6839      	ldr	r1, [r7, #0]
 8021a1c:	6878      	ldr	r0, [r7, #4]
 8021a1e:	f7fd ff41 	bl	801f8a4 <etharp_input>
      break;
 8021a22:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8021a24:	2300      	movs	r3, #0
 8021a26:	e00c      	b.n	8021a42 <ethernet_input+0x10e>
    goto free_and_return;
 8021a28:	bf00      	nop
 8021a2a:	e006      	b.n	8021a3a <ethernet_input+0x106>
        goto free_and_return;
 8021a2c:	bf00      	nop
 8021a2e:	e004      	b.n	8021a3a <ethernet_input+0x106>
        goto free_and_return;
 8021a30:	bf00      	nop
 8021a32:	e002      	b.n	8021a3a <ethernet_input+0x106>
        goto free_and_return;
 8021a34:	bf00      	nop
 8021a36:	e000      	b.n	8021a3a <ethernet_input+0x106>
        goto free_and_return;
 8021a38:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8021a3a:	6878      	ldr	r0, [r7, #4]
 8021a3c:	f7f4 f81a 	bl	8015a74 <pbuf_free>
  return ERR_OK;
 8021a40:	2300      	movs	r3, #0
}
 8021a42:	4618      	mov	r0, r3
 8021a44:	3718      	adds	r7, #24
 8021a46:	46bd      	mov	sp, r7
 8021a48:	bd80      	pop	{r7, pc}
 8021a4a:	bf00      	nop
 8021a4c:	0802ec68 	.word	0x0802ec68

08021a50 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8021a50:	b580      	push	{r7, lr}
 8021a52:	b086      	sub	sp, #24
 8021a54:	af00      	add	r7, sp, #0
 8021a56:	60f8      	str	r0, [r7, #12]
 8021a58:	60b9      	str	r1, [r7, #8]
 8021a5a:	607a      	str	r2, [r7, #4]
 8021a5c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8021a5e:	8c3b      	ldrh	r3, [r7, #32]
 8021a60:	4618      	mov	r0, r3
 8021a62:	f7f1 fb35 	bl	80130d0 <lwip_htons>
 8021a66:	4603      	mov	r3, r0
 8021a68:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8021a6a:	210e      	movs	r1, #14
 8021a6c:	68b8      	ldr	r0, [r7, #8]
 8021a6e:	f7f3 ff39 	bl	80158e4 <pbuf_add_header>
 8021a72:	4603      	mov	r3, r0
 8021a74:	2b00      	cmp	r3, #0
 8021a76:	d125      	bne.n	8021ac4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8021a78:	68bb      	ldr	r3, [r7, #8]
 8021a7a:	685b      	ldr	r3, [r3, #4]
 8021a7c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8021a7e:	693b      	ldr	r3, [r7, #16]
 8021a80:	8afa      	ldrh	r2, [r7, #22]
 8021a82:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8021a84:	693b      	ldr	r3, [r7, #16]
 8021a86:	2206      	movs	r2, #6
 8021a88:	6839      	ldr	r1, [r7, #0]
 8021a8a:	4618      	mov	r0, r3
 8021a8c:	f004 fb9c 	bl	80261c8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8021a90:	693b      	ldr	r3, [r7, #16]
 8021a92:	3306      	adds	r3, #6
 8021a94:	2206      	movs	r2, #6
 8021a96:	6879      	ldr	r1, [r7, #4]
 8021a98:	4618      	mov	r0, r3
 8021a9a:	f004 fb95 	bl	80261c8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8021a9e:	68fb      	ldr	r3, [r7, #12]
 8021aa0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8021aa4:	2b06      	cmp	r3, #6
 8021aa6:	d006      	beq.n	8021ab6 <ethernet_output+0x66>
 8021aa8:	4b0a      	ldr	r3, [pc, #40]	; (8021ad4 <ethernet_output+0x84>)
 8021aaa:	f44f 7299 	mov.w	r2, #306	; 0x132
 8021aae:	490a      	ldr	r1, [pc, #40]	; (8021ad8 <ethernet_output+0x88>)
 8021ab0:	480a      	ldr	r0, [pc, #40]	; (8021adc <ethernet_output+0x8c>)
 8021ab2:	f005 fa0f 	bl	8026ed4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8021ab6:	68fb      	ldr	r3, [r7, #12]
 8021ab8:	699b      	ldr	r3, [r3, #24]
 8021aba:	68b9      	ldr	r1, [r7, #8]
 8021abc:	68f8      	ldr	r0, [r7, #12]
 8021abe:	4798      	blx	r3
 8021ac0:	4603      	mov	r3, r0
 8021ac2:	e002      	b.n	8021aca <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8021ac4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8021ac6:	f06f 0301 	mvn.w	r3, #1
}
 8021aca:	4618      	mov	r0, r3
 8021acc:	3718      	adds	r7, #24
 8021ace:	46bd      	mov	sp, r7
 8021ad0:	bd80      	pop	{r7, pc}
 8021ad2:	bf00      	nop
 8021ad4:	0802e2b8 	.word	0x0802e2b8
 8021ad8:	0802e2f0 	.word	0x0802e2f0
 8021adc:	0802e324 	.word	0x0802e324

08021ae0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8021ae0:	b580      	push	{r7, lr}
 8021ae2:	b086      	sub	sp, #24
 8021ae4:	af00      	add	r7, sp, #0
 8021ae6:	6078      	str	r0, [r7, #4]
 8021ae8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8021aea:	683b      	ldr	r3, [r7, #0]
 8021aec:	60bb      	str	r3, [r7, #8]
 8021aee:	2304      	movs	r3, #4
 8021af0:	60fb      	str	r3, [r7, #12]
 8021af2:	2300      	movs	r3, #0
 8021af4:	613b      	str	r3, [r7, #16]
 8021af6:	2300      	movs	r3, #0
 8021af8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8021afa:	f107 0308 	add.w	r3, r7, #8
 8021afe:	2100      	movs	r1, #0
 8021b00:	4618      	mov	r0, r3
 8021b02:	f7e9 fcb6 	bl	800b472 <osMessageCreate>
 8021b06:	4602      	mov	r2, r0
 8021b08:	687b      	ldr	r3, [r7, #4]
 8021b0a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8021b0c:	687b      	ldr	r3, [r7, #4]
 8021b0e:	681b      	ldr	r3, [r3, #0]
 8021b10:	2b00      	cmp	r3, #0
 8021b12:	d102      	bne.n	8021b1a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8021b14:	f04f 33ff 	mov.w	r3, #4294967295
 8021b18:	e000      	b.n	8021b1c <sys_mbox_new+0x3c>

  return ERR_OK;
 8021b1a:	2300      	movs	r3, #0
}
 8021b1c:	4618      	mov	r0, r3
 8021b1e:	3718      	adds	r7, #24
 8021b20:	46bd      	mov	sp, r7
 8021b22:	bd80      	pop	{r7, pc}

08021b24 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8021b24:	b580      	push	{r7, lr}
 8021b26:	b082      	sub	sp, #8
 8021b28:	af00      	add	r7, sp, #0
 8021b2a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8021b2c:	687b      	ldr	r3, [r7, #4]
 8021b2e:	681b      	ldr	r3, [r3, #0]
 8021b30:	4618      	mov	r0, r3
 8021b32:	f7e9 fd7b 	bl	800b62c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8021b36:	687b      	ldr	r3, [r7, #4]
 8021b38:	681b      	ldr	r3, [r3, #0]
 8021b3a:	4618      	mov	r0, r3
 8021b3c:	f7e9 fd8c 	bl	800b658 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8021b40:	bf00      	nop
 8021b42:	3708      	adds	r7, #8
 8021b44:	46bd      	mov	sp, r7
 8021b46:	bd80      	pop	{r7, pc}

08021b48 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8021b48:	b580      	push	{r7, lr}
 8021b4a:	b084      	sub	sp, #16
 8021b4c:	af00      	add	r7, sp, #0
 8021b4e:	6078      	str	r0, [r7, #4]
 8021b50:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8021b52:	687b      	ldr	r3, [r7, #4]
 8021b54:	681b      	ldr	r3, [r3, #0]
 8021b56:	6839      	ldr	r1, [r7, #0]
 8021b58:	2200      	movs	r2, #0
 8021b5a:	4618      	mov	r0, r3
 8021b5c:	f7e9 fcb2 	bl	800b4c4 <osMessagePut>
 8021b60:	4603      	mov	r3, r0
 8021b62:	2b00      	cmp	r3, #0
 8021b64:	d102      	bne.n	8021b6c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8021b66:	2300      	movs	r3, #0
 8021b68:	73fb      	strb	r3, [r7, #15]
 8021b6a:	e001      	b.n	8021b70 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8021b6c:	23ff      	movs	r3, #255	; 0xff
 8021b6e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8021b70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8021b74:	4618      	mov	r0, r3
 8021b76:	3710      	adds	r7, #16
 8021b78:	46bd      	mov	sp, r7
 8021b7a:	bd80      	pop	{r7, pc}

08021b7c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8021b7c:	b580      	push	{r7, lr}
 8021b7e:	b08c      	sub	sp, #48	; 0x30
 8021b80:	af00      	add	r7, sp, #0
 8021b82:	61f8      	str	r0, [r7, #28]
 8021b84:	61b9      	str	r1, [r7, #24]
 8021b86:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8021b88:	f7e9 fa9d 	bl	800b0c6 <osKernelSysTick>
 8021b8c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8021b8e:	697b      	ldr	r3, [r7, #20]
 8021b90:	2b00      	cmp	r3, #0
 8021b92:	d017      	beq.n	8021bc4 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8021b94:	69fb      	ldr	r3, [r7, #28]
 8021b96:	6819      	ldr	r1, [r3, #0]
 8021b98:	f107 0320 	add.w	r3, r7, #32
 8021b9c:	697a      	ldr	r2, [r7, #20]
 8021b9e:	4618      	mov	r0, r3
 8021ba0:	f7e9 fcd0 	bl	800b544 <osMessageGet>

    if(event.status == osEventMessage)
 8021ba4:	6a3b      	ldr	r3, [r7, #32]
 8021ba6:	2b10      	cmp	r3, #16
 8021ba8:	d109      	bne.n	8021bbe <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8021baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021bac:	461a      	mov	r2, r3
 8021bae:	69bb      	ldr	r3, [r7, #24]
 8021bb0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8021bb2:	f7e9 fa88 	bl	800b0c6 <osKernelSysTick>
 8021bb6:	4602      	mov	r2, r0
 8021bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021bba:	1ad3      	subs	r3, r2, r3
 8021bbc:	e019      	b.n	8021bf2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8021bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8021bc2:	e016      	b.n	8021bf2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8021bc4:	69fb      	ldr	r3, [r7, #28]
 8021bc6:	6819      	ldr	r1, [r3, #0]
 8021bc8:	463b      	mov	r3, r7
 8021bca:	f04f 32ff 	mov.w	r2, #4294967295
 8021bce:	4618      	mov	r0, r3
 8021bd0:	f7e9 fcb8 	bl	800b544 <osMessageGet>
 8021bd4:	f107 0320 	add.w	r3, r7, #32
 8021bd8:	463a      	mov	r2, r7
 8021bda:	ca07      	ldmia	r2, {r0, r1, r2}
 8021bdc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8021be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021be2:	461a      	mov	r2, r3
 8021be4:	69bb      	ldr	r3, [r7, #24]
 8021be6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8021be8:	f7e9 fa6d 	bl	800b0c6 <osKernelSysTick>
 8021bec:	4602      	mov	r2, r0
 8021bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021bf0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8021bf2:	4618      	mov	r0, r3
 8021bf4:	3730      	adds	r7, #48	; 0x30
 8021bf6:	46bd      	mov	sp, r7
 8021bf8:	bd80      	pop	{r7, pc}

08021bfa <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8021bfa:	b580      	push	{r7, lr}
 8021bfc:	b086      	sub	sp, #24
 8021bfe:	af00      	add	r7, sp, #0
 8021c00:	6078      	str	r0, [r7, #4]
 8021c02:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8021c04:	687b      	ldr	r3, [r7, #4]
 8021c06:	6819      	ldr	r1, [r3, #0]
 8021c08:	f107 030c 	add.w	r3, r7, #12
 8021c0c:	2200      	movs	r2, #0
 8021c0e:	4618      	mov	r0, r3
 8021c10:	f7e9 fc98 	bl	800b544 <osMessageGet>

  if(event.status == osEventMessage)
 8021c14:	68fb      	ldr	r3, [r7, #12]
 8021c16:	2b10      	cmp	r3, #16
 8021c18:	d105      	bne.n	8021c26 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8021c1a:	693b      	ldr	r3, [r7, #16]
 8021c1c:	461a      	mov	r2, r3
 8021c1e:	683b      	ldr	r3, [r7, #0]
 8021c20:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8021c22:	2300      	movs	r3, #0
 8021c24:	e001      	b.n	8021c2a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8021c26:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8021c2a:	4618      	mov	r0, r3
 8021c2c:	3718      	adds	r7, #24
 8021c2e:	46bd      	mov	sp, r7
 8021c30:	bd80      	pop	{r7, pc}

08021c32 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8021c32:	b480      	push	{r7}
 8021c34:	b083      	sub	sp, #12
 8021c36:	af00      	add	r7, sp, #0
 8021c38:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8021c3a:	687b      	ldr	r3, [r7, #4]
 8021c3c:	681b      	ldr	r3, [r3, #0]
 8021c3e:	2b00      	cmp	r3, #0
 8021c40:	d101      	bne.n	8021c46 <sys_mbox_valid+0x14>
    return 0;
 8021c42:	2300      	movs	r3, #0
 8021c44:	e000      	b.n	8021c48 <sys_mbox_valid+0x16>
  else
    return 1;
 8021c46:	2301      	movs	r3, #1
}
 8021c48:	4618      	mov	r0, r3
 8021c4a:	370c      	adds	r7, #12
 8021c4c:	46bd      	mov	sp, r7
 8021c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c52:	4770      	bx	lr

08021c54 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8021c54:	b480      	push	{r7}
 8021c56:	b083      	sub	sp, #12
 8021c58:	af00      	add	r7, sp, #0
 8021c5a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8021c5c:	687b      	ldr	r3, [r7, #4]
 8021c5e:	2200      	movs	r2, #0
 8021c60:	601a      	str	r2, [r3, #0]
}
 8021c62:	bf00      	nop
 8021c64:	370c      	adds	r7, #12
 8021c66:	46bd      	mov	sp, r7
 8021c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c6c:	4770      	bx	lr

08021c6e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8021c6e:	b580      	push	{r7, lr}
 8021c70:	b084      	sub	sp, #16
 8021c72:	af00      	add	r7, sp, #0
 8021c74:	6078      	str	r0, [r7, #4]
 8021c76:	460b      	mov	r3, r1
 8021c78:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8021c7a:	2300      	movs	r3, #0
 8021c7c:	60bb      	str	r3, [r7, #8]
 8021c7e:	2300      	movs	r3, #0
 8021c80:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8021c82:	f107 0308 	add.w	r3, r7, #8
 8021c86:	2101      	movs	r1, #1
 8021c88:	4618      	mov	r0, r3
 8021c8a:	f7e9 fb29 	bl	800b2e0 <osSemaphoreCreate>
 8021c8e:	4602      	mov	r2, r0
 8021c90:	687b      	ldr	r3, [r7, #4]
 8021c92:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8021c94:	687b      	ldr	r3, [r7, #4]
 8021c96:	681b      	ldr	r3, [r3, #0]
 8021c98:	2b00      	cmp	r3, #0
 8021c9a:	d102      	bne.n	8021ca2 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8021c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8021ca0:	e009      	b.n	8021cb6 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8021ca2:	78fb      	ldrb	r3, [r7, #3]
 8021ca4:	2b00      	cmp	r3, #0
 8021ca6:	d105      	bne.n	8021cb4 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8021ca8:	687b      	ldr	r3, [r7, #4]
 8021caa:	681b      	ldr	r3, [r3, #0]
 8021cac:	2100      	movs	r1, #0
 8021cae:	4618      	mov	r0, r3
 8021cb0:	f7e9 fb48 	bl	800b344 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8021cb4:	2300      	movs	r3, #0
}
 8021cb6:	4618      	mov	r0, r3
 8021cb8:	3710      	adds	r7, #16
 8021cba:	46bd      	mov	sp, r7
 8021cbc:	bd80      	pop	{r7, pc}

08021cbe <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8021cbe:	b580      	push	{r7, lr}
 8021cc0:	b084      	sub	sp, #16
 8021cc2:	af00      	add	r7, sp, #0
 8021cc4:	6078      	str	r0, [r7, #4]
 8021cc6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8021cc8:	f7e9 f9fd 	bl	800b0c6 <osKernelSysTick>
 8021ccc:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8021cce:	683b      	ldr	r3, [r7, #0]
 8021cd0:	2b00      	cmp	r3, #0
 8021cd2:	d011      	beq.n	8021cf8 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8021cd4:	687b      	ldr	r3, [r7, #4]
 8021cd6:	681b      	ldr	r3, [r3, #0]
 8021cd8:	6839      	ldr	r1, [r7, #0]
 8021cda:	4618      	mov	r0, r3
 8021cdc:	f7e9 fb32 	bl	800b344 <osSemaphoreWait>
 8021ce0:	4603      	mov	r3, r0
 8021ce2:	2b00      	cmp	r3, #0
 8021ce4:	d105      	bne.n	8021cf2 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8021ce6:	f7e9 f9ee 	bl	800b0c6 <osKernelSysTick>
 8021cea:	4602      	mov	r2, r0
 8021cec:	68fb      	ldr	r3, [r7, #12]
 8021cee:	1ad3      	subs	r3, r2, r3
 8021cf0:	e012      	b.n	8021d18 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8021cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8021cf6:	e00f      	b.n	8021d18 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8021cf8:	bf00      	nop
 8021cfa:	687b      	ldr	r3, [r7, #4]
 8021cfc:	681b      	ldr	r3, [r3, #0]
 8021cfe:	f04f 31ff 	mov.w	r1, #4294967295
 8021d02:	4618      	mov	r0, r3
 8021d04:	f7e9 fb1e 	bl	800b344 <osSemaphoreWait>
 8021d08:	4603      	mov	r3, r0
 8021d0a:	2b00      	cmp	r3, #0
 8021d0c:	d1f5      	bne.n	8021cfa <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8021d0e:	f7e9 f9da 	bl	800b0c6 <osKernelSysTick>
 8021d12:	4602      	mov	r2, r0
 8021d14:	68fb      	ldr	r3, [r7, #12]
 8021d16:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8021d18:	4618      	mov	r0, r3
 8021d1a:	3710      	adds	r7, #16
 8021d1c:	46bd      	mov	sp, r7
 8021d1e:	bd80      	pop	{r7, pc}

08021d20 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8021d20:	b580      	push	{r7, lr}
 8021d22:	b082      	sub	sp, #8
 8021d24:	af00      	add	r7, sp, #0
 8021d26:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8021d28:	687b      	ldr	r3, [r7, #4]
 8021d2a:	681b      	ldr	r3, [r3, #0]
 8021d2c:	4618      	mov	r0, r3
 8021d2e:	f7e9 fb57 	bl	800b3e0 <osSemaphoreRelease>
}
 8021d32:	bf00      	nop
 8021d34:	3708      	adds	r7, #8
 8021d36:	46bd      	mov	sp, r7
 8021d38:	bd80      	pop	{r7, pc}

08021d3a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8021d3a:	b580      	push	{r7, lr}
 8021d3c:	b082      	sub	sp, #8
 8021d3e:	af00      	add	r7, sp, #0
 8021d40:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8021d42:	687b      	ldr	r3, [r7, #4]
 8021d44:	681b      	ldr	r3, [r3, #0]
 8021d46:	4618      	mov	r0, r3
 8021d48:	f7e9 fb80 	bl	800b44c <osSemaphoreDelete>
}
 8021d4c:	bf00      	nop
 8021d4e:	3708      	adds	r7, #8
 8021d50:	46bd      	mov	sp, r7
 8021d52:	bd80      	pop	{r7, pc}

08021d54 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8021d54:	b480      	push	{r7}
 8021d56:	b083      	sub	sp, #12
 8021d58:	af00      	add	r7, sp, #0
 8021d5a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8021d5c:	687b      	ldr	r3, [r7, #4]
 8021d5e:	681b      	ldr	r3, [r3, #0]
 8021d60:	2b00      	cmp	r3, #0
 8021d62:	d101      	bne.n	8021d68 <sys_sem_valid+0x14>
    return 0;
 8021d64:	2300      	movs	r3, #0
 8021d66:	e000      	b.n	8021d6a <sys_sem_valid+0x16>
  else
    return 1;
 8021d68:	2301      	movs	r3, #1
}
 8021d6a:	4618      	mov	r0, r3
 8021d6c:	370c      	adds	r7, #12
 8021d6e:	46bd      	mov	sp, r7
 8021d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d74:	4770      	bx	lr

08021d76 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8021d76:	b480      	push	{r7}
 8021d78:	b083      	sub	sp, #12
 8021d7a:	af00      	add	r7, sp, #0
 8021d7c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8021d7e:	687b      	ldr	r3, [r7, #4]
 8021d80:	2200      	movs	r2, #0
 8021d82:	601a      	str	r2, [r3, #0]
}
 8021d84:	bf00      	nop
 8021d86:	370c      	adds	r7, #12
 8021d88:	46bd      	mov	sp, r7
 8021d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d8e:	4770      	bx	lr

08021d90 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8021d90:	b580      	push	{r7, lr}
 8021d92:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8021d94:	4803      	ldr	r0, [pc, #12]	; (8021da4 <sys_init+0x14>)
 8021d96:	f7e9 fa06 	bl	800b1a6 <osMutexCreate>
 8021d9a:	4603      	mov	r3, r0
 8021d9c:	4a02      	ldr	r2, [pc, #8]	; (8021da8 <sys_init+0x18>)
 8021d9e:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8021da0:	bf00      	nop
 8021da2:	bd80      	pop	{r7, pc}
 8021da4:	0802ec78 	.word	0x0802ec78
 8021da8:	240086bc 	.word	0x240086bc

08021dac <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8021dac:	b580      	push	{r7, lr}
 8021dae:	b084      	sub	sp, #16
 8021db0:	af00      	add	r7, sp, #0
 8021db2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8021db4:	2300      	movs	r3, #0
 8021db6:	60bb      	str	r3, [r7, #8]
 8021db8:	2300      	movs	r3, #0
 8021dba:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8021dbc:	f107 0308 	add.w	r3, r7, #8
 8021dc0:	4618      	mov	r0, r3
 8021dc2:	f7e9 f9f0 	bl	800b1a6 <osMutexCreate>
 8021dc6:	4602      	mov	r2, r0
 8021dc8:	687b      	ldr	r3, [r7, #4]
 8021dca:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8021dcc:	687b      	ldr	r3, [r7, #4]
 8021dce:	681b      	ldr	r3, [r3, #0]
 8021dd0:	2b00      	cmp	r3, #0
 8021dd2:	d102      	bne.n	8021dda <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8021dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8021dd8:	e000      	b.n	8021ddc <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8021dda:	2300      	movs	r3, #0
}
 8021ddc:	4618      	mov	r0, r3
 8021dde:	3710      	adds	r7, #16
 8021de0:	46bd      	mov	sp, r7
 8021de2:	bd80      	pop	{r7, pc}

08021de4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8021de4:	b580      	push	{r7, lr}
 8021de6:	b082      	sub	sp, #8
 8021de8:	af00      	add	r7, sp, #0
 8021dea:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8021dec:	687b      	ldr	r3, [r7, #4]
 8021dee:	681b      	ldr	r3, [r3, #0]
 8021df0:	f04f 31ff 	mov.w	r1, #4294967295
 8021df4:	4618      	mov	r0, r3
 8021df6:	f7e9 f9ef 	bl	800b1d8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8021dfa:	bf00      	nop
 8021dfc:	3708      	adds	r7, #8
 8021dfe:	46bd      	mov	sp, r7
 8021e00:	bd80      	pop	{r7, pc}

08021e02 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8021e02:	b580      	push	{r7, lr}
 8021e04:	b082      	sub	sp, #8
 8021e06:	af00      	add	r7, sp, #0
 8021e08:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8021e0a:	687b      	ldr	r3, [r7, #4]
 8021e0c:	681b      	ldr	r3, [r3, #0]
 8021e0e:	4618      	mov	r0, r3
 8021e10:	f7e9 fa30 	bl	800b274 <osMutexRelease>
}
 8021e14:	bf00      	nop
 8021e16:	3708      	adds	r7, #8
 8021e18:	46bd      	mov	sp, r7
 8021e1a:	bd80      	pop	{r7, pc}

08021e1c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8021e1c:	b580      	push	{r7, lr}
 8021e1e:	b08c      	sub	sp, #48	; 0x30
 8021e20:	af00      	add	r7, sp, #0
 8021e22:	60f8      	str	r0, [r7, #12]
 8021e24:	60b9      	str	r1, [r7, #8]
 8021e26:	607a      	str	r2, [r7, #4]
 8021e28:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8021e2a:	f107 0314 	add.w	r3, r7, #20
 8021e2e:	2200      	movs	r2, #0
 8021e30:	601a      	str	r2, [r3, #0]
 8021e32:	605a      	str	r2, [r3, #4]
 8021e34:	609a      	str	r2, [r3, #8]
 8021e36:	60da      	str	r2, [r3, #12]
 8021e38:	611a      	str	r2, [r3, #16]
 8021e3a:	615a      	str	r2, [r3, #20]
 8021e3c:	619a      	str	r2, [r3, #24]
 8021e3e:	68fb      	ldr	r3, [r7, #12]
 8021e40:	617b      	str	r3, [r7, #20]
 8021e42:	68bb      	ldr	r3, [r7, #8]
 8021e44:	61bb      	str	r3, [r7, #24]
 8021e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021e48:	b21b      	sxth	r3, r3
 8021e4a:	83bb      	strh	r3, [r7, #28]
 8021e4c:	683b      	ldr	r3, [r7, #0]
 8021e4e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8021e50:	f107 0314 	add.w	r3, r7, #20
 8021e54:	6879      	ldr	r1, [r7, #4]
 8021e56:	4618      	mov	r0, r3
 8021e58:	f7e9 f945 	bl	800b0e6 <osThreadCreate>
 8021e5c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8021e5e:	4618      	mov	r0, r3
 8021e60:	3730      	adds	r7, #48	; 0x30
 8021e62:	46bd      	mov	sp, r7
 8021e64:	bd80      	pop	{r7, pc}
	...

08021e68 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8021e68:	b580      	push	{r7, lr}
 8021e6a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8021e6c:	4b04      	ldr	r3, [pc, #16]	; (8021e80 <sys_arch_protect+0x18>)
 8021e6e:	681b      	ldr	r3, [r3, #0]
 8021e70:	f04f 31ff 	mov.w	r1, #4294967295
 8021e74:	4618      	mov	r0, r3
 8021e76:	f7e9 f9af 	bl	800b1d8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8021e7a:	2301      	movs	r3, #1
}
 8021e7c:	4618      	mov	r0, r3
 8021e7e:	bd80      	pop	{r7, pc}
 8021e80:	240086bc 	.word	0x240086bc

08021e84 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8021e84:	b580      	push	{r7, lr}
 8021e86:	b082      	sub	sp, #8
 8021e88:	af00      	add	r7, sp, #0
 8021e8a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8021e8c:	4b04      	ldr	r3, [pc, #16]	; (8021ea0 <sys_arch_unprotect+0x1c>)
 8021e8e:	681b      	ldr	r3, [r3, #0]
 8021e90:	4618      	mov	r0, r3
 8021e92:	f7e9 f9ef 	bl	800b274 <osMutexRelease>
}
 8021e96:	bf00      	nop
 8021e98:	3708      	adds	r7, #8
 8021e9a:	46bd      	mov	sp, r7
 8021e9c:	bd80      	pop	{r7, pc}
 8021e9e:	bf00      	nop
 8021ea0:	240086bc 	.word	0x240086bc

08021ea4 <HAL_QSPI_RxCpltCallback>:
 * @brief  Rx Transfer completed callbacks.
 * @param  hqspi: QSPI handle
 * @retval None
 */
void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8021ea4:	b480      	push	{r7}
 8021ea6:	b083      	sub	sp, #12
 8021ea8:	af00      	add	r7, sp, #0
 8021eaa:	6078      	str	r0, [r7, #4]
	rx_complete = 1;
 8021eac:	4b04      	ldr	r3, [pc, #16]	; (8021ec0 <HAL_QSPI_RxCpltCallback+0x1c>)
 8021eae:	2201      	movs	r2, #1
 8021eb0:	701a      	strb	r2, [r3, #0]
}
 8021eb2:	bf00      	nop
 8021eb4:	370c      	adds	r7, #12
 8021eb6:	46bd      	mov	sp, r7
 8021eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ebc:	4770      	bx	lr
 8021ebe:	bf00      	nop
 8021ec0:	240050d2 	.word	0x240050d2

08021ec4 <HAL_QSPI_TxCpltCallback>:
 * @brief  Rx Transfer completed callbacks.
 * @param  hqspi: QSPI handle
 * @retval None
 */
void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8021ec4:	b480      	push	{r7}
 8021ec6:	b083      	sub	sp, #12
 8021ec8:	af00      	add	r7, sp, #0
 8021eca:	6078      	str	r0, [r7, #4]
	tx_complete = 1;
 8021ecc:	4b04      	ldr	r3, [pc, #16]	; (8021ee0 <HAL_QSPI_TxCpltCallback+0x1c>)
 8021ece:	2201      	movs	r2, #1
 8021ed0:	701a      	strb	r2, [r3, #0]
}
 8021ed2:	bf00      	nop
 8021ed4:	370c      	adds	r7, #12
 8021ed6:	46bd      	mov	sp, r7
 8021ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021edc:	4770      	bx	lr
 8021ede:	bf00      	nop
 8021ee0:	240050d3 	.word	0x240050d3

08021ee4 <HAL_QSPI_StatusMatchCallback>:
 * @brief  Status Match callback.
 * @param  hqspi: QSPI handle
 * @retval None
 */
void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8021ee4:	b480      	push	{r7}
 8021ee6:	b083      	sub	sp, #12
 8021ee8:	af00      	add	r7, sp, #0
 8021eea:	6078      	str	r0, [r7, #4]
	status_matched = 1;
 8021eec:	4b04      	ldr	r3, [pc, #16]	; (8021f00 <HAL_QSPI_StatusMatchCallback+0x1c>)
 8021eee:	2201      	movs	r2, #1
 8021ef0:	701a      	strb	r2, [r3, #0]
}
 8021ef2:	bf00      	nop
 8021ef4:	370c      	adds	r7, #12
 8021ef6:	46bd      	mov	sp, r7
 8021ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021efc:	4770      	bx	lr
 8021efe:	bf00      	nop
 8021f00:	240050d4 	.word	0x240050d4

08021f04 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callbacks.
  * @param  hqspi: QSPI handle
  * @retval None
  */
void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8021f04:	b480      	push	{r7}
 8021f06:	b083      	sub	sp, #12
 8021f08:	af00      	add	r7, sp, #0
 8021f0a:	6078      	str	r0, [r7, #4]
	command_complete = 1;
 8021f0c:	4b04      	ldr	r3, [pc, #16]	; (8021f20 <HAL_QSPI_CmdCpltCallback+0x1c>)
 8021f0e:	2201      	movs	r2, #1
 8021f10:	701a      	strb	r2, [r3, #0]
}
 8021f12:	bf00      	nop
 8021f14:	370c      	adds	r7, #12
 8021f16:	46bd      	mov	sp, r7
 8021f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f1c:	4770      	bx	lr
 8021f1e:	bf00      	nop
 8021f20:	240050d5 	.word	0x240050d5

08021f24 <QUADSPI_IRQHandler>:

void QUADSPI_IRQHandler(void)
{
 8021f24:	b580      	push	{r7, lr}
 8021f26:	af00      	add	r7, sp, #0
  HAL_QSPI_IRQHandler(&hqspi);
 8021f28:	4802      	ldr	r0, [pc, #8]	; (8021f34 <QUADSPI_IRQHandler+0x10>)
 8021f2a:	f7e2 fad9 	bl	80044e0 <HAL_QSPI_IRQHandler>
}
 8021f2e:	bf00      	nop
 8021f30:	bd80      	pop	{r7, pc}
 8021f32:	bf00      	nop
 8021f34:	240086c4 	.word	0x240086c4

08021f38 <Error_Handler>:
#include "rtc.h"

RTC_HandleTypeDef hrtc;

static void Error_Handler(void)
{
 8021f38:	b480      	push	{r7}
 8021f3a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8021f3c:	b672      	cpsid	i
}
 8021f3e:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1){}
 8021f40:	e7fe      	b.n	8021f40 <Error_Handler+0x8>
	...

08021f44 <MX_RTC_Init>:
}

void MX_RTC_Init(void)
{
 8021f44:	b580      	push	{r7, lr}
 8021f46:	af00      	add	r7, sp, #0
//  RTC_TimeTypeDef sTime = {0};
//  RTC_DateTypeDef sDate = {0};

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8021f48:	4b10      	ldr	r3, [pc, #64]	; (8021f8c <MX_RTC_Init+0x48>)
 8021f4a:	4a11      	ldr	r2, [pc, #68]	; (8021f90 <MX_RTC_Init+0x4c>)
 8021f4c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8021f4e:	4b0f      	ldr	r3, [pc, #60]	; (8021f8c <MX_RTC_Init+0x48>)
 8021f50:	2200      	movs	r2, #0
 8021f52:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8021f54:	4b0d      	ldr	r3, [pc, #52]	; (8021f8c <MX_RTC_Init+0x48>)
 8021f56:	227f      	movs	r2, #127	; 0x7f
 8021f58:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8021f5a:	4b0c      	ldr	r3, [pc, #48]	; (8021f8c <MX_RTC_Init+0x48>)
 8021f5c:	22ff      	movs	r2, #255	; 0xff
 8021f5e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8021f60:	4b0a      	ldr	r3, [pc, #40]	; (8021f8c <MX_RTC_Init+0x48>)
 8021f62:	2200      	movs	r2, #0
 8021f64:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8021f66:	4b09      	ldr	r3, [pc, #36]	; (8021f8c <MX_RTC_Init+0x48>)
 8021f68:	2200      	movs	r2, #0
 8021f6a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8021f6c:	4b07      	ldr	r3, [pc, #28]	; (8021f8c <MX_RTC_Init+0x48>)
 8021f6e:	2200      	movs	r2, #0
 8021f70:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8021f72:	4b06      	ldr	r3, [pc, #24]	; (8021f8c <MX_RTC_Init+0x48>)
 8021f74:	2200      	movs	r2, #0
 8021f76:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8021f78:	4804      	ldr	r0, [pc, #16]	; (8021f8c <MX_RTC_Init+0x48>)
 8021f7a:	f7e5 f853 	bl	8007024 <HAL_RTC_Init>
 8021f7e:	4603      	mov	r3, r0
 8021f80:	2b00      	cmp	r3, #0
 8021f82:	d001      	beq.n	8021f88 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8021f84:	f7ff ffd8 	bl	8021f38 <Error_Handler>
//
//  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
//  {
//    Error_Handler();
//  }
}
 8021f88:	bf00      	nop
 8021f8a:	bd80      	pop	{r7, pc}
 8021f8c:	24008710 	.word	0x24008710
 8021f90:	58004000 	.word	0x58004000

08021f94 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8021f94:	b580      	push	{r7, lr}
 8021f96:	b0b2      	sub	sp, #200	; 0xc8
 8021f98:	af00      	add	r7, sp, #0
 8021f9a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8021f9c:	f107 0308 	add.w	r3, r7, #8
 8021fa0:	22c0      	movs	r2, #192	; 0xc0
 8021fa2:	2100      	movs	r1, #0
 8021fa4:	4618      	mov	r0, r3
 8021fa6:	f004 f937 	bl	8026218 <memset>
  if(hrtc->Instance==RTC)
 8021faa:	687b      	ldr	r3, [r7, #4]
 8021fac:	681b      	ldr	r3, [r3, #0]
 8021fae:	4a0f      	ldr	r2, [pc, #60]	; (8021fec <HAL_RTC_MspInit+0x58>)
 8021fb0:	4293      	cmp	r3, r2
 8021fb2:	d116      	bne.n	8021fe2 <HAL_RTC_MspInit+0x4e>
  {
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8021fb4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8021fb8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8021fba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021fbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8021fc2:	f107 0308 	add.w	r3, r7, #8
 8021fc6:	4618      	mov	r0, r3
 8021fc8:	f7e3 fc9a 	bl	8005900 <HAL_RCCEx_PeriphCLKConfig>
 8021fcc:	4603      	mov	r3, r0
 8021fce:	2b00      	cmp	r3, #0
 8021fd0:	d001      	beq.n	8021fd6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8021fd2:	f7ff ffb1 	bl	8021f38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8021fd6:	4b06      	ldr	r3, [pc, #24]	; (8021ff0 <HAL_RTC_MspInit+0x5c>)
 8021fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021fda:	4a05      	ldr	r2, [pc, #20]	; (8021ff0 <HAL_RTC_MspInit+0x5c>)
 8021fdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8021fe0:	6713      	str	r3, [r2, #112]	; 0x70
  }

}
 8021fe2:	bf00      	nop
 8021fe4:	37c8      	adds	r7, #200	; 0xc8
 8021fe6:	46bd      	mov	sp, r7
 8021fe8:	bd80      	pop	{r7, pc}
 8021fea:	bf00      	nop
 8021fec:	58004000 	.word	0x58004000
 8021ff0:	58024400 	.word	0x58024400

08021ff4 <Error_Handler>:

TIM_HandleTypeDef htim2;
extern osMessageQId NetworkQueueHandle;

static void Error_Handler(void)
{
 8021ff4:	b480      	push	{r7}
 8021ff6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8021ff8:	b672      	cpsid	i
}
 8021ffa:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1){}
 8021ffc:	e7fe      	b.n	8021ffc <Error_Handler+0x8>
	...

08022000 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8022000:	b580      	push	{r7, lr}
 8022002:	b082      	sub	sp, #8
 8022004:	af00      	add	r7, sp, #0
 8022006:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6)
 8022008:	687b      	ldr	r3, [r7, #4]
 802200a:	681b      	ldr	r3, [r3, #0]
 802200c:	4a0a      	ldr	r2, [pc, #40]	; (8022038 <HAL_TIM_PeriodElapsedCallback+0x38>)
 802200e:	4293      	cmp	r3, r2
 8022010:	d101      	bne.n	8022016 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 8022012:	f7df f9ff 	bl	8001414 <HAL_IncTick>
	}

	if(htim->Instance == htim2.Instance)
 8022016:	687b      	ldr	r3, [r7, #4]
 8022018:	681a      	ldr	r2, [r3, #0]
 802201a:	4b08      	ldr	r3, [pc, #32]	; (802203c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 802201c:	681b      	ldr	r3, [r3, #0]
 802201e:	429a      	cmp	r2, r3
 8022020:	d106      	bne.n	8022030 <HAL_TIM_PeriodElapsedCallback+0x30>
	{
		osMessagePut(NetworkQueueHandle, APP_E_NETWORK_SEND_DATA, 0);
 8022022:	4b07      	ldr	r3, [pc, #28]	; (8022040 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8022024:	681b      	ldr	r3, [r3, #0]
 8022026:	2200      	movs	r2, #0
 8022028:	2101      	movs	r1, #1
 802202a:	4618      	mov	r0, r3
 802202c:	f7e9 fa4a 	bl	800b4c4 <osMessagePut>
	}
}
 8022030:	bf00      	nop
 8022032:	3708      	adds	r7, #8
 8022034:	46bd      	mov	sp, r7
 8022036:	bd80      	pop	{r7, pc}
 8022038:	40001000 	.word	0x40001000
 802203c:	24008734 	.word	0x24008734
 8022040:	240088b0 	.word	0x240088b0

08022044 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8022044:	b580      	push	{r7, lr}
 8022046:	b088      	sub	sp, #32
 8022048:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802204a:	f107 0310 	add.w	r3, r7, #16
 802204e:	2200      	movs	r2, #0
 8022050:	601a      	str	r2, [r3, #0]
 8022052:	605a      	str	r2, [r3, #4]
 8022054:	609a      	str	r2, [r3, #8]
 8022056:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8022058:	1d3b      	adds	r3, r7, #4
 802205a:	2200      	movs	r2, #0
 802205c:	601a      	str	r2, [r3, #0]
 802205e:	605a      	str	r2, [r3, #4]
 8022060:	609a      	str	r2, [r3, #8]

	htim2.Instance = TIM2;
 8022062:	4b1e      	ldr	r3, [pc, #120]	; (80220dc <MX_TIM2_Init+0x98>)
 8022064:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022068:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 40000;
 802206a:	4b1c      	ldr	r3, [pc, #112]	; (80220dc <MX_TIM2_Init+0x98>)
 802206c:	f649 4240 	movw	r2, #40000	; 0x9c40
 8022070:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8022072:	4b1a      	ldr	r3, [pc, #104]	; (80220dc <MX_TIM2_Init+0x98>)
 8022074:	2200      	movs	r2, #0
 8022076:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 100000;
 8022078:	4b18      	ldr	r3, [pc, #96]	; (80220dc <MX_TIM2_Init+0x98>)
 802207a:	4a19      	ldr	r2, [pc, #100]	; (80220e0 <MX_TIM2_Init+0x9c>)
 802207c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802207e:	4b17      	ldr	r3, [pc, #92]	; (80220dc <MX_TIM2_Init+0x98>)
 8022080:	2200      	movs	r2, #0
 8022082:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8022084:	4b15      	ldr	r3, [pc, #84]	; (80220dc <MX_TIM2_Init+0x98>)
 8022086:	2200      	movs	r2, #0
 8022088:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 802208a:	4814      	ldr	r0, [pc, #80]	; (80220dc <MX_TIM2_Init+0x98>)
 802208c:	f7e5 fae4 	bl	8007658 <HAL_TIM_Base_Init>
 8022090:	4603      	mov	r3, r0
 8022092:	2b00      	cmp	r3, #0
 8022094:	d001      	beq.n	802209a <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 8022096:	f7ff ffad 	bl	8021ff4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802209a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802209e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80220a0:	f107 0310 	add.w	r3, r7, #16
 80220a4:	4619      	mov	r1, r3
 80220a6:	480d      	ldr	r0, [pc, #52]	; (80220dc <MX_TIM2_Init+0x98>)
 80220a8:	f7e5 fcc6 	bl	8007a38 <HAL_TIM_ConfigClockSource>
 80220ac:	4603      	mov	r3, r0
 80220ae:	2b00      	cmp	r3, #0
 80220b0:	d001      	beq.n	80220b6 <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 80220b2:	f7ff ff9f 	bl	8021ff4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80220b6:	2300      	movs	r3, #0
 80220b8:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80220ba:	2300      	movs	r3, #0
 80220bc:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80220be:	1d3b      	adds	r3, r7, #4
 80220c0:	4619      	mov	r1, r3
 80220c2:	4806      	ldr	r0, [pc, #24]	; (80220dc <MX_TIM2_Init+0x98>)
 80220c4:	f7e5 ff10 	bl	8007ee8 <HAL_TIMEx_MasterConfigSynchronization>
 80220c8:	4603      	mov	r3, r0
 80220ca:	2b00      	cmp	r3, #0
 80220cc:	d001      	beq.n	80220d2 <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 80220ce:	f7ff ff91 	bl	8021ff4 <Error_Handler>
	}
}
 80220d2:	bf00      	nop
 80220d4:	3720      	adds	r7, #32
 80220d6:	46bd      	mov	sp, r7
 80220d8:	bd80      	pop	{r7, pc}
 80220da:	bf00      	nop
 80220dc:	24008734 	.word	0x24008734
 80220e0:	000186a0 	.word	0x000186a0

080220e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80220e4:	b580      	push	{r7, lr}
 80220e6:	b084      	sub	sp, #16
 80220e8:	af00      	add	r7, sp, #0
 80220ea:	6078      	str	r0, [r7, #4]
	if(htim_base->Instance==TIM2)
 80220ec:	687b      	ldr	r3, [r7, #4]
 80220ee:	681b      	ldr	r3, [r3, #0]
 80220f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80220f4:	d116      	bne.n	8022124 <HAL_TIM_Base_MspInit+0x40>
	{
		/* Peripheral clock enable */
		__HAL_RCC_TIM2_CLK_ENABLE();
 80220f6:	4b0d      	ldr	r3, [pc, #52]	; (802212c <HAL_TIM_Base_MspInit+0x48>)
 80220f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80220fc:	4a0b      	ldr	r2, [pc, #44]	; (802212c <HAL_TIM_Base_MspInit+0x48>)
 80220fe:	f043 0301 	orr.w	r3, r3, #1
 8022102:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8022106:	4b09      	ldr	r3, [pc, #36]	; (802212c <HAL_TIM_Base_MspInit+0x48>)
 8022108:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802210c:	f003 0301 	and.w	r3, r3, #1
 8022110:	60fb      	str	r3, [r7, #12]
 8022112:	68fb      	ldr	r3, [r7, #12]
		/* TIM2 interrupt Init */
		HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8022114:	2200      	movs	r2, #0
 8022116:	2105      	movs	r1, #5
 8022118:	201c      	movs	r0, #28
 802211a:	f7df fa73 	bl	8001604 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 802211e:	201c      	movs	r0, #28
 8022120:	f7df fa8a 	bl	8001638 <HAL_NVIC_EnableIRQ>
	}
}
 8022124:	bf00      	nop
 8022126:	3710      	adds	r7, #16
 8022128:	46bd      	mov	sp, r7
 802212a:	bd80      	pop	{r7, pc}
 802212c:	58024400 	.word	0x58024400

08022130 <__io_putchar>:

UART_HandleTypeDef huart8;
UART_HandleTypeDef huart1;

int __io_putchar(int ch)
{
 8022130:	b580      	push	{r7, lr}
 8022132:	b084      	sub	sp, #16
 8022134:	af00      	add	r7, sp, #0
 8022136:	6078      	str	r0, [r7, #4]
	uint8_t c = ch;
 8022138:	687b      	ldr	r3, [r7, #4]
 802213a:	b2db      	uxtb	r3, r3
 802213c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &c, 1, HAL_MAX_DELAY);
 802213e:	f107 010f 	add.w	r1, r7, #15
 8022142:	f04f 33ff 	mov.w	r3, #4294967295
 8022146:	2201      	movs	r2, #1
 8022148:	4803      	ldr	r0, [pc, #12]	; (8022158 <__io_putchar+0x28>)
 802214a:	f7e5 ffc9 	bl	80080e0 <HAL_UART_Transmit>
	return ch;
 802214e:	687b      	ldr	r3, [r7, #4]
}
 8022150:	4618      	mov	r0, r3
 8022152:	3710      	adds	r7, #16
 8022154:	46bd      	mov	sp, r7
 8022156:	bd80      	pop	{r7, pc}
 8022158:	24008780 	.word	0x24008780

0802215c <Error_Handler>:

static void Error_Handler(void)
{
 802215c:	b480      	push	{r7}
 802215e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8022160:	b672      	cpsid	i
}
 8022162:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1){}
 8022164:	e7fe      	b.n	8022164 <Error_Handler+0x8>
	...

08022168 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
void MX_UART8_Init(void)
{
 8022168:	b580      	push	{r7, lr}
 802216a:	af00      	add	r7, sp, #0
  huart8.Instance = UART8;
 802216c:	4b22      	ldr	r3, [pc, #136]	; (80221f8 <MX_UART8_Init+0x90>)
 802216e:	4a23      	ldr	r2, [pc, #140]	; (80221fc <MX_UART8_Init+0x94>)
 8022170:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8022172:	4b21      	ldr	r3, [pc, #132]	; (80221f8 <MX_UART8_Init+0x90>)
 8022174:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8022178:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 802217a:	4b1f      	ldr	r3, [pc, #124]	; (80221f8 <MX_UART8_Init+0x90>)
 802217c:	2200      	movs	r2, #0
 802217e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8022180:	4b1d      	ldr	r3, [pc, #116]	; (80221f8 <MX_UART8_Init+0x90>)
 8022182:	2200      	movs	r2, #0
 8022184:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8022186:	4b1c      	ldr	r3, [pc, #112]	; (80221f8 <MX_UART8_Init+0x90>)
 8022188:	2200      	movs	r2, #0
 802218a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 802218c:	4b1a      	ldr	r3, [pc, #104]	; (80221f8 <MX_UART8_Init+0x90>)
 802218e:	220c      	movs	r2, #12
 8022190:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8022192:	4b19      	ldr	r3, [pc, #100]	; (80221f8 <MX_UART8_Init+0x90>)
 8022194:	2200      	movs	r2, #0
 8022196:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8022198:	4b17      	ldr	r3, [pc, #92]	; (80221f8 <MX_UART8_Init+0x90>)
 802219a:	2200      	movs	r2, #0
 802219c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802219e:	4b16      	ldr	r3, [pc, #88]	; (80221f8 <MX_UART8_Init+0x90>)
 80221a0:	2200      	movs	r2, #0
 80221a2:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80221a4:	4b14      	ldr	r3, [pc, #80]	; (80221f8 <MX_UART8_Init+0x90>)
 80221a6:	2200      	movs	r2, #0
 80221a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80221aa:	4b13      	ldr	r3, [pc, #76]	; (80221f8 <MX_UART8_Init+0x90>)
 80221ac:	2200      	movs	r2, #0
 80221ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80221b0:	4811      	ldr	r0, [pc, #68]	; (80221f8 <MX_UART8_Init+0x90>)
 80221b2:	f7e5 ff45 	bl	8008040 <HAL_UART_Init>
 80221b6:	4603      	mov	r3, r0
 80221b8:	2b00      	cmp	r3, #0
 80221ba:	d001      	beq.n	80221c0 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80221bc:	f7ff ffce 	bl	802215c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80221c0:	2100      	movs	r1, #0
 80221c2:	480d      	ldr	r0, [pc, #52]	; (80221f8 <MX_UART8_Init+0x90>)
 80221c4:	f7e8 f9d1 	bl	800a56a <HAL_UARTEx_SetTxFifoThreshold>
 80221c8:	4603      	mov	r3, r0
 80221ca:	2b00      	cmp	r3, #0
 80221cc:	d001      	beq.n	80221d2 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80221ce:	f7ff ffc5 	bl	802215c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80221d2:	2100      	movs	r1, #0
 80221d4:	4808      	ldr	r0, [pc, #32]	; (80221f8 <MX_UART8_Init+0x90>)
 80221d6:	f7e8 fa06 	bl	800a5e6 <HAL_UARTEx_SetRxFifoThreshold>
 80221da:	4603      	mov	r3, r0
 80221dc:	2b00      	cmp	r3, #0
 80221de:	d001      	beq.n	80221e4 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80221e0:	f7ff ffbc 	bl	802215c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80221e4:	4804      	ldr	r0, [pc, #16]	; (80221f8 <MX_UART8_Init+0x90>)
 80221e6:	f7e8 f987 	bl	800a4f8 <HAL_UARTEx_DisableFifoMode>
 80221ea:	4603      	mov	r3, r0
 80221ec:	2b00      	cmp	r3, #0
 80221ee:	d001      	beq.n	80221f4 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 80221f0:	f7ff ffb4 	bl	802215c <Error_Handler>
  }
}
 80221f4:	bf00      	nop
 80221f6:	bd80      	pop	{r7, pc}
 80221f8:	24008810 	.word	0x24008810
 80221fc:	40007c00 	.word	0x40007c00

08022200 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8022200:	b580      	push	{r7, lr}
 8022202:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8022204:	4b22      	ldr	r3, [pc, #136]	; (8022290 <MX_USART1_UART_Init+0x90>)
 8022206:	4a23      	ldr	r2, [pc, #140]	; (8022294 <MX_USART1_UART_Init+0x94>)
 8022208:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 802220a:	4b21      	ldr	r3, [pc, #132]	; (8022290 <MX_USART1_UART_Init+0x90>)
 802220c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8022210:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8022212:	4b1f      	ldr	r3, [pc, #124]	; (8022290 <MX_USART1_UART_Init+0x90>)
 8022214:	2200      	movs	r2, #0
 8022216:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8022218:	4b1d      	ldr	r3, [pc, #116]	; (8022290 <MX_USART1_UART_Init+0x90>)
 802221a:	2200      	movs	r2, #0
 802221c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 802221e:	4b1c      	ldr	r3, [pc, #112]	; (8022290 <MX_USART1_UART_Init+0x90>)
 8022220:	2200      	movs	r2, #0
 8022222:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8022224:	4b1a      	ldr	r3, [pc, #104]	; (8022290 <MX_USART1_UART_Init+0x90>)
 8022226:	220c      	movs	r2, #12
 8022228:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802222a:	4b19      	ldr	r3, [pc, #100]	; (8022290 <MX_USART1_UART_Init+0x90>)
 802222c:	2200      	movs	r2, #0
 802222e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8022230:	4b17      	ldr	r3, [pc, #92]	; (8022290 <MX_USART1_UART_Init+0x90>)
 8022232:	2200      	movs	r2, #0
 8022234:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8022236:	4b16      	ldr	r3, [pc, #88]	; (8022290 <MX_USART1_UART_Init+0x90>)
 8022238:	2200      	movs	r2, #0
 802223a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802223c:	4b14      	ldr	r3, [pc, #80]	; (8022290 <MX_USART1_UART_Init+0x90>)
 802223e:	2200      	movs	r2, #0
 8022240:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8022242:	4b13      	ldr	r3, [pc, #76]	; (8022290 <MX_USART1_UART_Init+0x90>)
 8022244:	2200      	movs	r2, #0
 8022246:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8022248:	4811      	ldr	r0, [pc, #68]	; (8022290 <MX_USART1_UART_Init+0x90>)
 802224a:	f7e5 fef9 	bl	8008040 <HAL_UART_Init>
 802224e:	4603      	mov	r3, r0
 8022250:	2b00      	cmp	r3, #0
 8022252:	d001      	beq.n	8022258 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8022254:	f7ff ff82 	bl	802215c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8022258:	2100      	movs	r1, #0
 802225a:	480d      	ldr	r0, [pc, #52]	; (8022290 <MX_USART1_UART_Init+0x90>)
 802225c:	f7e8 f985 	bl	800a56a <HAL_UARTEx_SetTxFifoThreshold>
 8022260:	4603      	mov	r3, r0
 8022262:	2b00      	cmp	r3, #0
 8022264:	d001      	beq.n	802226a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8022266:	f7ff ff79 	bl	802215c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802226a:	2100      	movs	r1, #0
 802226c:	4808      	ldr	r0, [pc, #32]	; (8022290 <MX_USART1_UART_Init+0x90>)
 802226e:	f7e8 f9ba 	bl	800a5e6 <HAL_UARTEx_SetRxFifoThreshold>
 8022272:	4603      	mov	r3, r0
 8022274:	2b00      	cmp	r3, #0
 8022276:	d001      	beq.n	802227c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8022278:	f7ff ff70 	bl	802215c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 802227c:	4804      	ldr	r0, [pc, #16]	; (8022290 <MX_USART1_UART_Init+0x90>)
 802227e:	f7e8 f93b 	bl	800a4f8 <HAL_UARTEx_DisableFifoMode>
 8022282:	4603      	mov	r3, r0
 8022284:	2b00      	cmp	r3, #0
 8022286:	d001      	beq.n	802228c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8022288:	f7ff ff68 	bl	802215c <Error_Handler>
  }
}
 802228c:	bf00      	nop
 802228e:	bd80      	pop	{r7, pc}
 8022290:	24008780 	.word	0x24008780
 8022294:	40011000 	.word	0x40011000

08022298 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8022298:	b580      	push	{r7, lr}
 802229a:	b0bc      	sub	sp, #240	; 0xf0
 802229c:	af00      	add	r7, sp, #0
 802229e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80222a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80222a4:	2200      	movs	r2, #0
 80222a6:	601a      	str	r2, [r3, #0]
 80222a8:	605a      	str	r2, [r3, #4]
 80222aa:	609a      	str	r2, [r3, #8]
 80222ac:	60da      	str	r2, [r3, #12]
 80222ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80222b0:	f107 031c 	add.w	r3, r7, #28
 80222b4:	22c0      	movs	r2, #192	; 0xc0
 80222b6:	2100      	movs	r1, #0
 80222b8:	4618      	mov	r0, r3
 80222ba:	f003 ffad 	bl	8026218 <memset>
  if(huart->Instance==UART8)
 80222be:	687b      	ldr	r3, [r7, #4]
 80222c0:	681b      	ldr	r3, [r3, #0]
 80222c2:	4a51      	ldr	r2, [pc, #324]	; (8022408 <HAL_UART_MspInit+0x170>)
 80222c4:	4293      	cmp	r3, r2
 80222c6:	d14b      	bne.n	8022360 <HAL_UART_MspInit+0xc8>
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80222c8:	2302      	movs	r3, #2
 80222ca:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80222cc:	2300      	movs	r3, #0
 80222ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80222d2:	f107 031c 	add.w	r3, r7, #28
 80222d6:	4618      	mov	r0, r3
 80222d8:	f7e3 fb12 	bl	8005900 <HAL_RCCEx_PeriphCLKConfig>
 80222dc:	4603      	mov	r3, r0
 80222de:	2b00      	cmp	r3, #0
 80222e0:	d001      	beq.n	80222e6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80222e2:	f7ff ff3b 	bl	802215c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80222e6:	4b49      	ldr	r3, [pc, #292]	; (802240c <HAL_UART_MspInit+0x174>)
 80222e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80222ec:	4a47      	ldr	r2, [pc, #284]	; (802240c <HAL_UART_MspInit+0x174>)
 80222ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80222f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80222f6:	4b45      	ldr	r3, [pc, #276]	; (802240c <HAL_UART_MspInit+0x174>)
 80222f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80222fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8022300:	61bb      	str	r3, [r7, #24]
 8022302:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8022304:	4b41      	ldr	r3, [pc, #260]	; (802240c <HAL_UART_MspInit+0x174>)
 8022306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802230a:	4a40      	ldr	r2, [pc, #256]	; (802240c <HAL_UART_MspInit+0x174>)
 802230c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8022310:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8022314:	4b3d      	ldr	r3, [pc, #244]	; (802240c <HAL_UART_MspInit+0x174>)
 8022316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802231a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802231e:	617b      	str	r3, [r7, #20]
 8022320:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8022322:	f44f 7340 	mov.w	r3, #768	; 0x300
 8022326:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802232a:	2302      	movs	r3, #2
 802232c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022330:	2300      	movs	r3, #0
 8022332:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8022336:	2302      	movs	r3, #2
 8022338:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 802233c:	2308      	movs	r3, #8
 802233e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8022342:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8022346:	4619      	mov	r1, r3
 8022348:	4831      	ldr	r0, [pc, #196]	; (8022410 <HAL_UART_MspInit+0x178>)
 802234a:	f7e1 fe35 	bl	8003fb8 <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 802234e:	2200      	movs	r2, #0
 8022350:	2105      	movs	r1, #5
 8022352:	2053      	movs	r0, #83	; 0x53
 8022354:	f7df f956 	bl	8001604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8022358:	2053      	movs	r0, #83	; 0x53
 802235a:	f7df f96d 	bl	8001638 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 802235e:	e04f      	b.n	8022400 <HAL_UART_MspInit+0x168>
  else if(huart->Instance==USART1)
 8022360:	687b      	ldr	r3, [r7, #4]
 8022362:	681b      	ldr	r3, [r3, #0]
 8022364:	4a2b      	ldr	r2, [pc, #172]	; (8022414 <HAL_UART_MspInit+0x17c>)
 8022366:	4293      	cmp	r3, r2
 8022368:	d14a      	bne.n	8022400 <HAL_UART_MspInit+0x168>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 802236a:	2301      	movs	r3, #1
 802236c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 802236e:	2300      	movs	r3, #0
 8022370:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8022374:	f107 031c 	add.w	r3, r7, #28
 8022378:	4618      	mov	r0, r3
 802237a:	f7e3 fac1 	bl	8005900 <HAL_RCCEx_PeriphCLKConfig>
 802237e:	4603      	mov	r3, r0
 8022380:	2b00      	cmp	r3, #0
 8022382:	d001      	beq.n	8022388 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8022384:	f7ff feea 	bl	802215c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8022388:	4b20      	ldr	r3, [pc, #128]	; (802240c <HAL_UART_MspInit+0x174>)
 802238a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 802238e:	4a1f      	ldr	r2, [pc, #124]	; (802240c <HAL_UART_MspInit+0x174>)
 8022390:	f043 0310 	orr.w	r3, r3, #16
 8022394:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8022398:	4b1c      	ldr	r3, [pc, #112]	; (802240c <HAL_UART_MspInit+0x174>)
 802239a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 802239e:	f003 0310 	and.w	r3, r3, #16
 80223a2:	613b      	str	r3, [r7, #16]
 80223a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80223a6:	4b19      	ldr	r3, [pc, #100]	; (802240c <HAL_UART_MspInit+0x174>)
 80223a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80223ac:	4a17      	ldr	r2, [pc, #92]	; (802240c <HAL_UART_MspInit+0x174>)
 80223ae:	f043 0301 	orr.w	r3, r3, #1
 80223b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80223b6:	4b15      	ldr	r3, [pc, #84]	; (802240c <HAL_UART_MspInit+0x174>)
 80223b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80223bc:	f003 0301 	and.w	r3, r3, #1
 80223c0:	60fb      	str	r3, [r7, #12]
 80223c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80223c4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80223c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80223cc:	2302      	movs	r3, #2
 80223ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80223d2:	2300      	movs	r3, #0
 80223d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80223d8:	2302      	movs	r3, #2
 80223da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80223de:	2307      	movs	r3, #7
 80223e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80223e4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80223e8:	4619      	mov	r1, r3
 80223ea:	480b      	ldr	r0, [pc, #44]	; (8022418 <HAL_UART_MspInit+0x180>)
 80223ec:	f7e1 fde4 	bl	8003fb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80223f0:	2200      	movs	r2, #0
 80223f2:	2105      	movs	r1, #5
 80223f4:	2025      	movs	r0, #37	; 0x25
 80223f6:	f7df f905 	bl	8001604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80223fa:	2025      	movs	r0, #37	; 0x25
 80223fc:	f7df f91c 	bl	8001638 <HAL_NVIC_EnableIRQ>
}
 8022400:	bf00      	nop
 8022402:	37f0      	adds	r7, #240	; 0xf0
 8022404:	46bd      	mov	sp, r7
 8022406:	bd80      	pop	{r7, pc}
 8022408:	40007c00 	.word	0x40007c00
 802240c:	58024400 	.word	0x58024400
 8022410:	58022400 	.word	0x58022400
 8022414:	40011000 	.word	0x40011000
 8022418:	58020000 	.word	0x58020000

0802241c <memccpy>:

/*
 * VAX C does not supply a memccpy routine so I provide my own
 */
void *memccpy(void *dest, const void *src, int c, size_t n)
{
 802241c:	b480      	push	{r7}
 802241e:	b089      	sub	sp, #36	; 0x24
 8022420:	af00      	add	r7, sp, #0
 8022422:	60f8      	str	r0, [r7, #12]
 8022424:	60b9      	str	r1, [r7, #8]
 8022426:	607a      	str	r2, [r7, #4]
 8022428:	603b      	str	r3, [r7, #0]
    int i=0;
 802242a:	2300      	movs	r3, #0
 802242c:	61fb      	str	r3, [r7, #28]
    const unsigned char *ip=src;
 802242e:	68bb      	ldr	r3, [r7, #8]
 8022430:	61bb      	str	r3, [r7, #24]
    unsigned char *op=dest;
 8022432:	68fb      	ldr	r3, [r7, #12]
 8022434:	617b      	str	r3, [r7, #20]

    while (i < n)
 8022436:	e00f      	b.n	8022458 <memccpy+0x3c>
    {
	if ((*op++ = *ip++) == c)
 8022438:	69ba      	ldr	r2, [r7, #24]
 802243a:	1c53      	adds	r3, r2, #1
 802243c:	61bb      	str	r3, [r7, #24]
 802243e:	697b      	ldr	r3, [r7, #20]
 8022440:	1c59      	adds	r1, r3, #1
 8022442:	6179      	str	r1, [r7, #20]
 8022444:	7812      	ldrb	r2, [r2, #0]
 8022446:	701a      	strb	r2, [r3, #0]
 8022448:	781b      	ldrb	r3, [r3, #0]
 802244a:	461a      	mov	r2, r3
 802244c:	687b      	ldr	r3, [r7, #4]
 802244e:	4293      	cmp	r3, r2
 8022450:	d007      	beq.n	8022462 <memccpy+0x46>
	    break;
	i++;
 8022452:	69fb      	ldr	r3, [r7, #28]
 8022454:	3301      	adds	r3, #1
 8022456:	61fb      	str	r3, [r7, #28]
    while (i < n)
 8022458:	69fb      	ldr	r3, [r7, #28]
 802245a:	683a      	ldr	r2, [r7, #0]
 802245c:	429a      	cmp	r2, r3
 802245e:	d8eb      	bhi.n	8022438 <memccpy+0x1c>
 8022460:	e000      	b.n	8022464 <memccpy+0x48>
	    break;
 8022462:	bf00      	nop
    }
    if (i == n)
 8022464:	69fb      	ldr	r3, [r7, #28]
 8022466:	683a      	ldr	r2, [r7, #0]
 8022468:	429a      	cmp	r2, r3
 802246a:	d101      	bne.n	8022470 <memccpy+0x54>
	return NULL;
 802246c:	2300      	movs	r3, #0
 802246e:	e000      	b.n	8022472 <memccpy+0x56>
    return op;
 8022470:	697b      	ldr	r3, [r7, #20]
}
 8022472:	4618      	mov	r0, r3
 8022474:	3724      	adds	r7, #36	; 0x24
 8022476:	46bd      	mov	sp, r7
 8022478:	f85d 7b04 	ldr.w	r7, [sp], #4
 802247c:	4770      	bx	lr

0802247e <strdup>:
/*
 * strdup - return a malloc'ed copy of a string
 */
char *strdup(const char *src)
{
 802247e:	b580      	push	{r7, lr}
 8022480:	b084      	sub	sp, #16
 8022482:	af00      	add	r7, sp, #0
 8022484:	6078      	str	r0, [r7, #4]
    int l = strlen(src) + 1;
 8022486:	6878      	ldr	r0, [r7, #4]
 8022488:	f7dd ff34 	bl	80002f4 <strlen>
 802248c:	4603      	mov	r3, r0
 802248e:	3301      	adds	r3, #1
 8022490:	60fb      	str	r3, [r7, #12]
    char *dst = malloc(l);
 8022492:	68fb      	ldr	r3, [r7, #12]
 8022494:	4618      	mov	r0, r3
 8022496:	f003 fe79 	bl	802618c <malloc>
 802249a:	4603      	mov	r3, r0
 802249c:	60bb      	str	r3, [r7, #8]
    if (dst)
 802249e:	68bb      	ldr	r3, [r7, #8]
 80224a0:	2b00      	cmp	r3, #0
 80224a2:	d003      	beq.n	80224ac <strdup+0x2e>
        strcpy(dst,src);
 80224a4:	6879      	ldr	r1, [r7, #4]
 80224a6:	68b8      	ldr	r0, [r7, #8]
 80224a8:	f004 fefa 	bl	80272a0 <strcpy>
    return dst;
 80224ac:	68bb      	ldr	r3, [r7, #8]
}
 80224ae:	4618      	mov	r0, r3
 80224b0:	3710      	adds	r7, #16
 80224b2:	46bd      	mov	sp, r7
 80224b4:	bd80      	pop	{r7, pc}
	...

080224b8 <socket_wait>:
 *
 * return 1 if no user callback, otherwise, return value returned by
 * user callback
 */
static int socket_wait(netbuf *ctl)
{
 80224b8:	b590      	push	{r4, r7, lr}
 80224ba:	b091      	sub	sp, #68	; 0x44
 80224bc:	af02      	add	r7, sp, #8
 80224be:	6078      	str	r0, [r7, #4]
    fd_set fd,*rfd = NULL,*wfd = NULL;
 80224c0:	2300      	movs	r3, #0
 80224c2:	637b      	str	r3, [r7, #52]	; 0x34
 80224c4:	2300      	movs	r3, #0
 80224c6:	633b      	str	r3, [r7, #48]	; 0x30
    struct timeval tv;
    int rv = 0;
 80224c8:	2300      	movs	r3, #0
 80224ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    if ((ctl->dir == FTPLIB_CONTROL) || (ctl->idlecb == NULL))
 80224cc:	687b      	ldr	r3, [r7, #4]
 80224ce:	699b      	ldr	r3, [r3, #24]
 80224d0:	2b00      	cmp	r3, #0
 80224d2:	d003      	beq.n	80224dc <socket_wait+0x24>
 80224d4:	687b      	ldr	r3, [r7, #4]
 80224d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80224d8:	2b00      	cmp	r3, #0
 80224da:	d101      	bne.n	80224e0 <socket_wait+0x28>
	return 1;
 80224dc:	2301      	movs	r3, #1
 80224de:	e06f      	b.n	80225c0 <socket_wait+0x108>
    if (ctl->dir == FTPLIB_WRITE)
 80224e0:	687b      	ldr	r3, [r7, #4]
 80224e2:	699b      	ldr	r3, [r3, #24]
 80224e4:	2b02      	cmp	r3, #2
 80224e6:	d103      	bne.n	80224f0 <socket_wait+0x38>
	wfd = &fd;
 80224e8:	f107 031c 	add.w	r3, r7, #28
 80224ec:	633b      	str	r3, [r7, #48]	; 0x30
 80224ee:	e002      	b.n	80224f6 <socket_wait+0x3e>
    else
	rfd = &fd;
 80224f0:	f107 031c 	add.w	r3, r7, #28
 80224f4:	637b      	str	r3, [r7, #52]	; 0x34
    FD_ZERO(&fd);
 80224f6:	f107 031c 	add.w	r3, r7, #28
 80224fa:	627b      	str	r3, [r7, #36]	; 0x24
 80224fc:	2300      	movs	r3, #0
 80224fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8022500:	e007      	b.n	8022512 <socket_wait+0x5a>
 8022502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022504:	1c5a      	adds	r2, r3, #1
 8022506:	627a      	str	r2, [r7, #36]	; 0x24
 8022508:	2200      	movs	r2, #0
 802250a:	701a      	strb	r2, [r3, #0]
 802250c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802250e:	3301      	adds	r3, #1
 8022510:	62bb      	str	r3, [r7, #40]	; 0x28
 8022512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022514:	2b07      	cmp	r3, #7
 8022516:	d9f4      	bls.n	8022502 <socket_wait+0x4a>
    do
    {
	FD_SET(ctl->handle,&fd);
 8022518:	687b      	ldr	r3, [r7, #4]
 802251a:	689b      	ldr	r3, [r3, #8]
 802251c:	095a      	lsrs	r2, r3, #5
 802251e:	0093      	lsls	r3, r2, #2
 8022520:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8022524:	440b      	add	r3, r1
 8022526:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 802252a:	6879      	ldr	r1, [r7, #4]
 802252c:	6889      	ldr	r1, [r1, #8]
 802252e:	f001 011f 	and.w	r1, r1, #31
 8022532:	2001      	movs	r0, #1
 8022534:	fa00 f101 	lsl.w	r1, r0, r1
 8022538:	4319      	orrs	r1, r3
 802253a:	0093      	lsls	r3, r2, #2
 802253c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8022540:	4413      	add	r3, r2
 8022542:	f843 1c1c 	str.w	r1, [r3, #-28]
	tv = ctl->idletime;
 8022546:	687b      	ldr	r3, [r7, #4]
 8022548:	f107 0408 	add.w	r4, r7, #8
 802254c:	3328      	adds	r3, #40	; 0x28
 802254e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8022550:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	rv = select(ctl->handle+1, rfd, wfd, NULL, &tv);
 8022554:	687b      	ldr	r3, [r7, #4]
 8022556:	689b      	ldr	r3, [r3, #8]
 8022558:	1c58      	adds	r0, r3, #1
 802255a:	f107 0308 	add.w	r3, r7, #8
 802255e:	9300      	str	r3, [sp, #0]
 8022560:	2300      	movs	r3, #0
 8022562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022564:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8022566:	f7ef fd6f 	bl	8012048 <lwip_select>
 802256a:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (rv == -1)
 802256c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802256e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022572:	d112      	bne.n	802259a <socket_wait+0xe2>
	{
	    rv = 0;
 8022574:	2300      	movs	r3, #0
 8022576:	62fb      	str	r3, [r7, #44]	; 0x2c
	    strncpy(ctl->ctrl->response, strerror(errno),
 8022578:	687b      	ldr	r3, [r7, #4]
 802257a:	69db      	ldr	r3, [r3, #28]
 802257c:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8022580:	4b11      	ldr	r3, [pc, #68]	; (80225c8 <socket_wait+0x110>)
 8022582:	681b      	ldr	r3, [r3, #0]
 8022584:	4618      	mov	r0, r3
 8022586:	f005 f879 	bl	802767c <strerror>
 802258a:	4603      	mov	r3, r0
 802258c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8022590:	4619      	mov	r1, r3
 8022592:	4620      	mov	r0, r4
 8022594:	f005 f88e 	bl	80276b4 <strncpy>
                    sizeof(ctl->ctrl->response));
	    break;
 8022598:	e011      	b.n	80225be <socket_wait+0x106>
	}
	else if (rv > 0)
 802259a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802259c:	2b00      	cmp	r3, #0
 802259e:	dd02      	ble.n	80225a6 <socket_wait+0xee>
	{
	    rv = 1;
 80225a0:	2301      	movs	r3, #1
 80225a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	    break;
 80225a4:	e00b      	b.n	80225be <socket_wait+0x106>
	}
    }
    while ((rv = ctl->idlecb(ctl, ctl->xfered, ctl->idlearg)));
 80225a6:	687b      	ldr	r3, [r7, #4]
 80225a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80225aa:	687a      	ldr	r2, [r7, #4]
 80225ac:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80225ae:	687a      	ldr	r2, [r7, #4]
 80225b0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80225b2:	6878      	ldr	r0, [r7, #4]
 80225b4:	4798      	blx	r3
 80225b6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80225b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80225ba:	2b00      	cmp	r3, #0
 80225bc:	d1ac      	bne.n	8022518 <socket_wait+0x60>
    return rv;
 80225be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80225c0:	4618      	mov	r0, r3
 80225c2:	373c      	adds	r7, #60	; 0x3c
 80225c4:	46bd      	mov	sp, r7
 80225c6:	bd90      	pop	{r4, r7, pc}
 80225c8:	240086b8 	.word	0x240086b8

080225cc <readline>:
 * read a line of text
 *
 * return -1 on error or bytecount
 */
static int readline(char *buf,int max,netbuf *ctl)
{
 80225cc:	b580      	push	{r7, lr}
 80225ce:	b08a      	sub	sp, #40	; 0x28
 80225d0:	af00      	add	r7, sp, #0
 80225d2:	60f8      	str	r0, [r7, #12]
 80225d4:	60b9      	str	r1, [r7, #8]
 80225d6:	607a      	str	r2, [r7, #4]
    int x,retval = 0;
 80225d8:	2300      	movs	r3, #0
 80225da:	623b      	str	r3, [r7, #32]
    char *end,*bp=buf;
 80225dc:	68fb      	ldr	r3, [r7, #12]
 80225de:	61fb      	str	r3, [r7, #28]
    int eof = 0;
 80225e0:	2300      	movs	r3, #0
 80225e2:	61bb      	str	r3, [r7, #24]

    if ((ctl->dir != FTPLIB_CONTROL) && (ctl->dir != FTPLIB_READ))
 80225e4:	687b      	ldr	r3, [r7, #4]
 80225e6:	699b      	ldr	r3, [r3, #24]
 80225e8:	2b00      	cmp	r3, #0
 80225ea:	d006      	beq.n	80225fa <readline+0x2e>
 80225ec:	687b      	ldr	r3, [r7, #4]
 80225ee:	699b      	ldr	r3, [r3, #24]
 80225f0:	2b01      	cmp	r3, #1
 80225f2:	d002      	beq.n	80225fa <readline+0x2e>
	return -1;
 80225f4:	f04f 33ff 	mov.w	r3, #4294967295
 80225f8:	e0b4      	b.n	8022764 <readline+0x198>
    if (max == 0)
 80225fa:	68bb      	ldr	r3, [r7, #8]
 80225fc:	2b00      	cmp	r3, #0
 80225fe:	d101      	bne.n	8022604 <readline+0x38>
	return 0;
 8022600:	2300      	movs	r3, #0
 8022602:	e0af      	b.n	8022764 <readline+0x198>
    do
    {
    	if (ctl->cavail > 0)
 8022604:	687b      	ldr	r3, [r7, #4]
 8022606:	68db      	ldr	r3, [r3, #12]
 8022608:	2b00      	cmp	r3, #0
 802260a:	dd4f      	ble.n	80226ac <readline+0xe0>
    	{
	    x = (max >= ctl->cavail) ? ctl->cavail : max-1;
 802260c:	687b      	ldr	r3, [r7, #4]
 802260e:	68db      	ldr	r3, [r3, #12]
 8022610:	68ba      	ldr	r2, [r7, #8]
 8022612:	429a      	cmp	r2, r3
 8022614:	db02      	blt.n	802261c <readline+0x50>
 8022616:	687b      	ldr	r3, [r7, #4]
 8022618:	68db      	ldr	r3, [r3, #12]
 802261a:	e001      	b.n	8022620 <readline+0x54>
 802261c:	68bb      	ldr	r3, [r7, #8]
 802261e:	3b01      	subs	r3, #1
 8022620:	627b      	str	r3, [r7, #36]	; 0x24
	    end = memccpy(bp,ctl->cget,'\n',x);
 8022622:	687b      	ldr	r3, [r7, #4]
 8022624:	6859      	ldr	r1, [r3, #4]
 8022626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022628:	220a      	movs	r2, #10
 802262a:	69f8      	ldr	r0, [r7, #28]
 802262c:	f7ff fef6 	bl	802241c <memccpy>
 8022630:	6178      	str	r0, [r7, #20]
	    if (end != NULL)
 8022632:	697b      	ldr	r3, [r7, #20]
 8022634:	2b00      	cmp	r3, #0
 8022636:	d003      	beq.n	8022640 <readline+0x74>
		x = end - bp;
 8022638:	697a      	ldr	r2, [r7, #20]
 802263a:	69fb      	ldr	r3, [r7, #28]
 802263c:	1ad3      	subs	r3, r2, r3
 802263e:	627b      	str	r3, [r7, #36]	; 0x24
	    retval += x;
 8022640:	6a3a      	ldr	r2, [r7, #32]
 8022642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022644:	4413      	add	r3, r2
 8022646:	623b      	str	r3, [r7, #32]
	    bp += x;
 8022648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802264a:	69fa      	ldr	r2, [r7, #28]
 802264c:	4413      	add	r3, r2
 802264e:	61fb      	str	r3, [r7, #28]
	    *bp = '\0';
 8022650:	69fb      	ldr	r3, [r7, #28]
 8022652:	2200      	movs	r2, #0
 8022654:	701a      	strb	r2, [r3, #0]
	    max -= x;
 8022656:	68ba      	ldr	r2, [r7, #8]
 8022658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802265a:	1ad3      	subs	r3, r2, r3
 802265c:	60bb      	str	r3, [r7, #8]
	    ctl->cget += x;
 802265e:	687b      	ldr	r3, [r7, #4]
 8022660:	685a      	ldr	r2, [r3, #4]
 8022662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022664:	441a      	add	r2, r3
 8022666:	687b      	ldr	r3, [r7, #4]
 8022668:	605a      	str	r2, [r3, #4]
	    ctl->cavail -= x;
 802266a:	687b      	ldr	r3, [r7, #4]
 802266c:	68da      	ldr	r2, [r3, #12]
 802266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022670:	1ad2      	subs	r2, r2, r3
 8022672:	687b      	ldr	r3, [r7, #4]
 8022674:	60da      	str	r2, [r3, #12]
	    if (end != NULL)
 8022676:	697b      	ldr	r3, [r7, #20]
 8022678:	2b00      	cmp	r3, #0
 802267a:	d017      	beq.n	80226ac <readline+0xe0>
	    {
		bp -= 2;
 802267c:	69fb      	ldr	r3, [r7, #28]
 802267e:	3b02      	subs	r3, #2
 8022680:	61fb      	str	r3, [r7, #28]
		if (strcmp(bp,"\r\n") == 0)
 8022682:	493a      	ldr	r1, [pc, #232]	; (802276c <readline+0x1a0>)
 8022684:	69f8      	ldr	r0, [r7, #28]
 8022686:	f7dd fe2b 	bl	80002e0 <strcmp>
 802268a:	4603      	mov	r3, r0
 802268c:	2b00      	cmp	r3, #0
 802268e:	d165      	bne.n	802275c <readline+0x190>
		{
		    *bp++ = '\n';
 8022690:	69fb      	ldr	r3, [r7, #28]
 8022692:	1c5a      	adds	r2, r3, #1
 8022694:	61fa      	str	r2, [r7, #28]
 8022696:	220a      	movs	r2, #10
 8022698:	701a      	strb	r2, [r3, #0]
		    *bp++ = '\0';
 802269a:	69fb      	ldr	r3, [r7, #28]
 802269c:	1c5a      	adds	r2, r3, #1
 802269e:	61fa      	str	r2, [r7, #28]
 80226a0:	2200      	movs	r2, #0
 80226a2:	701a      	strb	r2, [r3, #0]
		    --retval;
 80226a4:	6a3b      	ldr	r3, [r7, #32]
 80226a6:	3b01      	subs	r3, #1
 80226a8:	623b      	str	r3, [r7, #32]
		}
	    	break;
 80226aa:	e057      	b.n	802275c <readline+0x190>
	    }
    	}
    	if (max == 1)
 80226ac:	68bb      	ldr	r3, [r7, #8]
 80226ae:	2b01      	cmp	r3, #1
 80226b0:	d103      	bne.n	80226ba <readline+0xee>
    	{
	    *buf = '\0';
 80226b2:	68fb      	ldr	r3, [r7, #12]
 80226b4:	2200      	movs	r2, #0
 80226b6:	701a      	strb	r2, [r3, #0]
	    break;
 80226b8:	e053      	b.n	8022762 <readline+0x196>
    	}
    	if (ctl->cput == ctl->cget)
 80226ba:	687b      	ldr	r3, [r7, #4]
 80226bc:	681a      	ldr	r2, [r3, #0]
 80226be:	687b      	ldr	r3, [r7, #4]
 80226c0:	685b      	ldr	r3, [r3, #4]
 80226c2:	429a      	cmp	r2, r3
 80226c4:	d10d      	bne.n	80226e2 <readline+0x116>
    	{
	    ctl->cput = ctl->cget = ctl->buf;
 80226c6:	687b      	ldr	r3, [r7, #4]
 80226c8:	695a      	ldr	r2, [r3, #20]
 80226ca:	687b      	ldr	r3, [r7, #4]
 80226cc:	605a      	str	r2, [r3, #4]
 80226ce:	687b      	ldr	r3, [r7, #4]
 80226d0:	685a      	ldr	r2, [r3, #4]
 80226d2:	687b      	ldr	r3, [r7, #4]
 80226d4:	601a      	str	r2, [r3, #0]
	    ctl->cavail = 0;
 80226d6:	687b      	ldr	r3, [r7, #4]
 80226d8:	2200      	movs	r2, #0
 80226da:	60da      	str	r2, [r3, #12]
	    ctl->cleft = FTPLIB_BUFSIZ;
 80226dc:	687b      	ldr	r3, [r7, #4]
 80226de:	22c8      	movs	r2, #200	; 0xc8
 80226e0:	611a      	str	r2, [r3, #16]
    	}
	if (eof)
 80226e2:	69bb      	ldr	r3, [r7, #24]
 80226e4:	2b00      	cmp	r3, #0
 80226e6:	d006      	beq.n	80226f6 <readline+0x12a>
	{
	    if (retval == 0)
 80226e8:	6a3b      	ldr	r3, [r7, #32]
 80226ea:	2b00      	cmp	r3, #0
 80226ec:	d138      	bne.n	8022760 <readline+0x194>
		retval = -1;
 80226ee:	f04f 33ff 	mov.w	r3, #4294967295
 80226f2:	623b      	str	r3, [r7, #32]
	    break;
 80226f4:	e034      	b.n	8022760 <readline+0x194>
	}
	if (!socket_wait(ctl))
 80226f6:	6878      	ldr	r0, [r7, #4]
 80226f8:	f7ff fede 	bl	80224b8 <socket_wait>
 80226fc:	4603      	mov	r3, r0
 80226fe:	2b00      	cmp	r3, #0
 8022700:	d101      	bne.n	8022706 <readline+0x13a>
	    return retval;
 8022702:	6a3b      	ldr	r3, [r7, #32]
 8022704:	e02e      	b.n	8022764 <readline+0x198>
    	if ((x = net_read(ctl->handle,ctl->cput,ctl->cleft)) == -1) ////////////////////////////////////////////////////////////////
 8022706:	687b      	ldr	r3, [r7, #4]
 8022708:	6898      	ldr	r0, [r3, #8]
 802270a:	687b      	ldr	r3, [r7, #4]
 802270c:	6819      	ldr	r1, [r3, #0]
 802270e:	687b      	ldr	r3, [r7, #4]
 8022710:	691b      	ldr	r3, [r3, #16]
 8022712:	461a      	mov	r2, r3
 8022714:	2300      	movs	r3, #0
 8022716:	f7ef f955 	bl	80119c4 <lwip_recv>
 802271a:	6278      	str	r0, [r7, #36]	; 0x24
 802271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802271e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022722:	d103      	bne.n	802272c <readline+0x160>
    	{
	    retval = -1;
 8022724:	f04f 33ff 	mov.w	r3, #4294967295
 8022728:	623b      	str	r3, [r7, #32]
	    break;
 802272a:	e01a      	b.n	8022762 <readline+0x196>
    	}
	if (x == 0)
 802272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802272e:	2b00      	cmp	r3, #0
 8022730:	d101      	bne.n	8022736 <readline+0x16a>
	    eof = 1;
 8022732:	2301      	movs	r3, #1
 8022734:	61bb      	str	r3, [r7, #24]
    	ctl->cleft -= x;
 8022736:	687b      	ldr	r3, [r7, #4]
 8022738:	691a      	ldr	r2, [r3, #16]
 802273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802273c:	1ad2      	subs	r2, r2, r3
 802273e:	687b      	ldr	r3, [r7, #4]
 8022740:	611a      	str	r2, [r3, #16]
    	ctl->cavail += x;
 8022742:	687b      	ldr	r3, [r7, #4]
 8022744:	68da      	ldr	r2, [r3, #12]
 8022746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022748:	441a      	add	r2, r3
 802274a:	687b      	ldr	r3, [r7, #4]
 802274c:	60da      	str	r2, [r3, #12]
    	ctl->cput += x;
 802274e:	687b      	ldr	r3, [r7, #4]
 8022750:	681a      	ldr	r2, [r3, #0]
 8022752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022754:	441a      	add	r2, r3
 8022756:	687b      	ldr	r3, [r7, #4]
 8022758:	601a      	str	r2, [r3, #0]
    	if (ctl->cavail > 0)
 802275a:	e753      	b.n	8022604 <readline+0x38>
	    	break;
 802275c:	bf00      	nop
 802275e:	e000      	b.n	8022762 <readline+0x196>
	    break;
 8022760:	bf00      	nop
    }
    while (1);
    return retval;
 8022762:	6a3b      	ldr	r3, [r7, #32]
}
 8022764:	4618      	mov	r0, r3
 8022766:	3728      	adds	r7, #40	; 0x28
 8022768:	46bd      	mov	sp, r7
 802276a:	bd80      	pop	{r7, pc}
 802276c:	0802e34c 	.word	0x0802e34c

08022770 <writeline>:
 * write lines of text
 *
 * return -1 on error or bytecount
 */
static int writeline(const char *buf, int len, netbuf *nData)
{
 8022770:	b580      	push	{r7, lr}
 8022772:	b08a      	sub	sp, #40	; 0x28
 8022774:	af00      	add	r7, sp, #0
 8022776:	60f8      	str	r0, [r7, #12]
 8022778:	60b9      	str	r1, [r7, #8]
 802277a:	607a      	str	r2, [r7, #4]
    int x, nb=0, w;
 802277c:	2300      	movs	r3, #0
 802277e:	623b      	str	r3, [r7, #32]
    char *ubp = buf, *nbp;
 8022780:	68fb      	ldr	r3, [r7, #12]
 8022782:	61fb      	str	r3, [r7, #28]
    char lc=0;
 8022784:	2300      	movs	r3, #0
 8022786:	76fb      	strb	r3, [r7, #27]

    if (nData->dir != FTPLIB_WRITE)
 8022788:	687b      	ldr	r3, [r7, #4]
 802278a:	699b      	ldr	r3, [r3, #24]
 802278c:	2b02      	cmp	r3, #2
 802278e:	d002      	beq.n	8022796 <writeline+0x26>
	return -1;
 8022790:	f04f 33ff 	mov.w	r3, #4294967295
 8022794:	e079      	b.n	802288a <writeline+0x11a>
    nbp = nData->buf;
 8022796:	687b      	ldr	r3, [r7, #4]
 8022798:	695b      	ldr	r3, [r3, #20]
 802279a:	617b      	str	r3, [r7, #20]
    for (x=0; x < len; x++)
 802279c:	2300      	movs	r3, #0
 802279e:	627b      	str	r3, [r7, #36]	; 0x24
 80227a0:	e054      	b.n	802284c <writeline+0xdc>
    {
	if ((*ubp == '\n') && (lc != '\r'))
 80227a2:	69fb      	ldr	r3, [r7, #28]
 80227a4:	781b      	ldrb	r3, [r3, #0]
 80227a6:	2b0a      	cmp	r3, #10
 80227a8:	d125      	bne.n	80227f6 <writeline+0x86>
 80227aa:	7efb      	ldrb	r3, [r7, #27]
 80227ac:	2b0d      	cmp	r3, #13
 80227ae:	d022      	beq.n	80227f6 <writeline+0x86>
	{
	    if (nb == FTPLIB_BUFSIZ)
 80227b0:	6a3b      	ldr	r3, [r7, #32]
 80227b2:	2bc8      	cmp	r3, #200	; 0xc8
 80227b4:	d117      	bne.n	80227e6 <writeline+0x76>
	    {
		if (!socket_wait(nData))
 80227b6:	6878      	ldr	r0, [r7, #4]
 80227b8:	f7ff fe7e 	bl	80224b8 <socket_wait>
 80227bc:	4603      	mov	r3, r0
 80227be:	2b00      	cmp	r3, #0
 80227c0:	d101      	bne.n	80227c6 <writeline+0x56>
		    return x;
 80227c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80227c4:	e061      	b.n	802288a <writeline+0x11a>
		w = net_write(nData->handle, nbp, FTPLIB_BUFSIZ);
 80227c6:	687b      	ldr	r3, [r7, #4]
 80227c8:	6898      	ldr	r0, [r3, #8]
 80227ca:	2300      	movs	r3, #0
 80227cc:	22c8      	movs	r2, #200	; 0xc8
 80227ce:	6979      	ldr	r1, [r7, #20]
 80227d0:	f7ef f90e 	bl	80119f0 <lwip_send>
 80227d4:	6138      	str	r0, [r7, #16]
		if (w != FTPLIB_BUFSIZ)
 80227d6:	693b      	ldr	r3, [r7, #16]
 80227d8:	2bc8      	cmp	r3, #200	; 0xc8
 80227da:	d002      	beq.n	80227e2 <writeline+0x72>
		{
		    return(-1);
 80227dc:	f04f 33ff 	mov.w	r3, #4294967295
 80227e0:	e053      	b.n	802288a <writeline+0x11a>
		}
		nb = 0;
 80227e2:	2300      	movs	r3, #0
 80227e4:	623b      	str	r3, [r7, #32]
	    }
	    nbp[nb++] = '\r';
 80227e6:	6a3b      	ldr	r3, [r7, #32]
 80227e8:	1c5a      	adds	r2, r3, #1
 80227ea:	623a      	str	r2, [r7, #32]
 80227ec:	461a      	mov	r2, r3
 80227ee:	697b      	ldr	r3, [r7, #20]
 80227f0:	4413      	add	r3, r2
 80227f2:	220d      	movs	r2, #13
 80227f4:	701a      	strb	r2, [r3, #0]
	}
	if (nb == FTPLIB_BUFSIZ)
 80227f6:	6a3b      	ldr	r3, [r7, #32]
 80227f8:	2bc8      	cmp	r3, #200	; 0xc8
 80227fa:	d117      	bne.n	802282c <writeline+0xbc>
	{
	    if (!socket_wait(nData))
 80227fc:	6878      	ldr	r0, [r7, #4]
 80227fe:	f7ff fe5b 	bl	80224b8 <socket_wait>
 8022802:	4603      	mov	r3, r0
 8022804:	2b00      	cmp	r3, #0
 8022806:	d101      	bne.n	802280c <writeline+0x9c>
		return x;
 8022808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802280a:	e03e      	b.n	802288a <writeline+0x11a>
	    w = net_write(nData->handle, nbp, FTPLIB_BUFSIZ);
 802280c:	687b      	ldr	r3, [r7, #4]
 802280e:	6898      	ldr	r0, [r3, #8]
 8022810:	2300      	movs	r3, #0
 8022812:	22c8      	movs	r2, #200	; 0xc8
 8022814:	6979      	ldr	r1, [r7, #20]
 8022816:	f7ef f8eb 	bl	80119f0 <lwip_send>
 802281a:	6138      	str	r0, [r7, #16]
	    if (w != FTPLIB_BUFSIZ)
 802281c:	693b      	ldr	r3, [r7, #16]
 802281e:	2bc8      	cmp	r3, #200	; 0xc8
 8022820:	d002      	beq.n	8022828 <writeline+0xb8>
	    {
		return(-1);
 8022822:	f04f 33ff 	mov.w	r3, #4294967295
 8022826:	e030      	b.n	802288a <writeline+0x11a>
	    }
	    nb = 0;
 8022828:	2300      	movs	r3, #0
 802282a:	623b      	str	r3, [r7, #32]
	}
	nbp[nb++] = lc = *ubp++;
 802282c:	69fb      	ldr	r3, [r7, #28]
 802282e:	1c5a      	adds	r2, r3, #1
 8022830:	61fa      	str	r2, [r7, #28]
 8022832:	781b      	ldrb	r3, [r3, #0]
 8022834:	76fb      	strb	r3, [r7, #27]
 8022836:	6a3b      	ldr	r3, [r7, #32]
 8022838:	1c5a      	adds	r2, r3, #1
 802283a:	623a      	str	r2, [r7, #32]
 802283c:	461a      	mov	r2, r3
 802283e:	697b      	ldr	r3, [r7, #20]
 8022840:	4413      	add	r3, r2
 8022842:	7efa      	ldrb	r2, [r7, #27]
 8022844:	701a      	strb	r2, [r3, #0]
    for (x=0; x < len; x++)
 8022846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022848:	3301      	adds	r3, #1
 802284a:	627b      	str	r3, [r7, #36]	; 0x24
 802284c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802284e:	68bb      	ldr	r3, [r7, #8]
 8022850:	429a      	cmp	r2, r3
 8022852:	dba6      	blt.n	80227a2 <writeline+0x32>
    }
    if (nb)
 8022854:	6a3b      	ldr	r3, [r7, #32]
 8022856:	2b00      	cmp	r3, #0
 8022858:	d016      	beq.n	8022888 <writeline+0x118>
    {
	if (!socket_wait(nData))
 802285a:	6878      	ldr	r0, [r7, #4]
 802285c:	f7ff fe2c 	bl	80224b8 <socket_wait>
 8022860:	4603      	mov	r3, r0
 8022862:	2b00      	cmp	r3, #0
 8022864:	d101      	bne.n	802286a <writeline+0xfa>
	    return x;
 8022866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022868:	e00f      	b.n	802288a <writeline+0x11a>
	w = net_write(nData->handle, nbp, nb);
 802286a:	687b      	ldr	r3, [r7, #4]
 802286c:	6898      	ldr	r0, [r3, #8]
 802286e:	6a3a      	ldr	r2, [r7, #32]
 8022870:	2300      	movs	r3, #0
 8022872:	6979      	ldr	r1, [r7, #20]
 8022874:	f7ef f8bc 	bl	80119f0 <lwip_send>
 8022878:	6138      	str	r0, [r7, #16]
	if (w != nb)
 802287a:	693a      	ldr	r2, [r7, #16]
 802287c:	6a3b      	ldr	r3, [r7, #32]
 802287e:	429a      	cmp	r2, r3
 8022880:	d002      	beq.n	8022888 <writeline+0x118>
	{
	    return(-1);
 8022882:	f04f 33ff 	mov.w	r3, #4294967295
 8022886:	e000      	b.n	802288a <writeline+0x11a>
	}
    }
    return len;
 8022888:	68bb      	ldr	r3, [r7, #8]
}
 802288a:	4618      	mov	r0, r3
 802288c:	3728      	adds	r7, #40	; 0x28
 802288e:	46bd      	mov	sp, r7
 8022890:	bd80      	pop	{r7, pc}
	...

08022894 <readresp>:
 *
 * return 0 if first char doesn't match
 * return 1 if first char matches
 */
static int readresp(char c, netbuf *nControl)
{
 8022894:	b580      	push	{r7, lr}
 8022896:	b084      	sub	sp, #16
 8022898:	af00      	add	r7, sp, #0
 802289a:	4603      	mov	r3, r0
 802289c:	6039      	str	r1, [r7, #0]
 802289e:	71fb      	strb	r3, [r7, #7]
    char match[5];
    if (readline(nControl->response,256,nControl) == -1)
 80228a0:	683b      	ldr	r3, [r7, #0]
 80228a2:	334c      	adds	r3, #76	; 0x4c
 80228a4:	683a      	ldr	r2, [r7, #0]
 80228a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80228aa:	4618      	mov	r0, r3
 80228ac:	f7ff fe8e 	bl	80225cc <readline>
 80228b0:	4603      	mov	r3, r0
 80228b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80228b6:	d101      	bne.n	80228bc <readresp+0x28>
    {
	return 0;
 80228b8:	2300      	movs	r3, #0
 80228ba:	e04d      	b.n	8022958 <readresp+0xc4>
    }
    if (ftplib_debug > 1)
 80228bc:	4b28      	ldr	r3, [pc, #160]	; (8022960 <readresp+0xcc>)
 80228be:	681b      	ldr	r3, [r3, #0]
 80228c0:	2b01      	cmp	r3, #1
 80228c2:	dd08      	ble.n	80228d6 <readresp+0x42>
	fprintf(stderr,"%s",nControl->response);
 80228c4:	4b27      	ldr	r3, [pc, #156]	; (8022964 <readresp+0xd0>)
 80228c6:	681b      	ldr	r3, [r3, #0]
 80228c8:	68da      	ldr	r2, [r3, #12]
 80228ca:	683b      	ldr	r3, [r7, #0]
 80228cc:	334c      	adds	r3, #76	; 0x4c
 80228ce:	4611      	mov	r1, r2
 80228d0:	4618      	mov	r0, r3
 80228d2:	f003 faf5 	bl	8025ec0 <fputs>
    if (nControl->response[3] == '-')
 80228d6:	683b      	ldr	r3, [r7, #0]
 80228d8:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 80228dc:	2b2d      	cmp	r3, #45	; 0x2d
 80228de:	d132      	bne.n	8022946 <readresp+0xb2>
    {
	strncpy(match,nControl->response,3);
 80228e0:	683b      	ldr	r3, [r7, #0]
 80228e2:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 80228e6:	f107 0308 	add.w	r3, r7, #8
 80228ea:	2203      	movs	r2, #3
 80228ec:	4618      	mov	r0, r3
 80228ee:	f004 fee1 	bl	80276b4 <strncpy>
	match[3] = ' ';
 80228f2:	2320      	movs	r3, #32
 80228f4:	72fb      	strb	r3, [r7, #11]
	match[4] = '\0';
 80228f6:	2300      	movs	r3, #0
 80228f8:	733b      	strb	r3, [r7, #12]
	do
	{
	    if (readline(nControl->response,256,nControl) == -1)
 80228fa:	683b      	ldr	r3, [r7, #0]
 80228fc:	334c      	adds	r3, #76	; 0x4c
 80228fe:	683a      	ldr	r2, [r7, #0]
 8022900:	f44f 7180 	mov.w	r1, #256	; 0x100
 8022904:	4618      	mov	r0, r3
 8022906:	f7ff fe61 	bl	80225cc <readline>
 802290a:	4603      	mov	r3, r0
 802290c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022910:	d101      	bne.n	8022916 <readresp+0x82>
	    {
		return 0;
 8022912:	2300      	movs	r3, #0
 8022914:	e020      	b.n	8022958 <readresp+0xc4>
	    }
	    if (ftplib_debug > 1)
 8022916:	4b12      	ldr	r3, [pc, #72]	; (8022960 <readresp+0xcc>)
 8022918:	681b      	ldr	r3, [r3, #0]
 802291a:	2b01      	cmp	r3, #1
 802291c:	dd08      	ble.n	8022930 <readresp+0x9c>
		fprintf(stderr,"%s",nControl->response);
 802291e:	4b11      	ldr	r3, [pc, #68]	; (8022964 <readresp+0xd0>)
 8022920:	681b      	ldr	r3, [r3, #0]
 8022922:	68da      	ldr	r2, [r3, #12]
 8022924:	683b      	ldr	r3, [r7, #0]
 8022926:	334c      	adds	r3, #76	; 0x4c
 8022928:	4611      	mov	r1, r2
 802292a:	4618      	mov	r0, r3
 802292c:	f003 fac8 	bl	8025ec0 <fputs>
	}
	while (strncmp(nControl->response,match,4));
 8022930:	683b      	ldr	r3, [r7, #0]
 8022932:	334c      	adds	r3, #76	; 0x4c
 8022934:	f107 0108 	add.w	r1, r7, #8
 8022938:	2204      	movs	r2, #4
 802293a:	4618      	mov	r0, r3
 802293c:	f004 fea8 	bl	8027690 <strncmp>
 8022940:	4603      	mov	r3, r0
 8022942:	2b00      	cmp	r3, #0
 8022944:	d1d9      	bne.n	80228fa <readresp+0x66>
    }
    if (nControl->response[0] == c)
 8022946:	683b      	ldr	r3, [r7, #0]
 8022948:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 802294c:	79fa      	ldrb	r2, [r7, #7]
 802294e:	429a      	cmp	r2, r3
 8022950:	d101      	bne.n	8022956 <readresp+0xc2>
	return 1;
 8022952:	2301      	movs	r3, #1
 8022954:	e000      	b.n	8022958 <readresp+0xc4>
    return 0;
 8022956:	2300      	movs	r3, #0
}
 8022958:	4618      	mov	r0, r3
 802295a:	3710      	adds	r7, #16
 802295c:	46bd      	mov	sp, r7
 802295e:	bd80      	pop	{r7, pc}
 8022960:	240050d8 	.word	0x240050d8
 8022964:	240000bc 	.word	0x240000bc

08022968 <FtpConnect>:
 * FtpConnect - connect to remote server
 *
 * return 1 if connected, 0 if not
 */
 int FtpConnect(const char *host, netbuf **nControl)
{
 8022968:	b580      	push	{r7, lr}
 802296a:	b08c      	sub	sp, #48	; 0x30
 802296c:	af00      	add	r7, sp, #0
 802296e:	6078      	str	r0, [r7, #4]
 8022970:	6039      	str	r1, [r7, #0]
    struct sockaddr_in sin;
    struct hostent *phe;
    netbuf *ctrl;
    char *lhost;
    char *pnum;
    memset(&sin,0,sizeof(sin));
 8022972:	f107 0308 	add.w	r3, r7, #8
 8022976:	2210      	movs	r2, #16
 8022978:	2100      	movs	r1, #0
 802297a:	4618      	mov	r0, r3
 802297c:	f003 fc4c 	bl	8026218 <memset>
    sin.sin_family = AF_INET;
 8022980:	2302      	movs	r3, #2
 8022982:	727b      	strb	r3, [r7, #9]
    lhost = strdup(host);
 8022984:	6878      	ldr	r0, [r7, #4]
 8022986:	f7ff fd7a 	bl	802247e <strdup>
 802298a:	4603      	mov	r3, r0
 802298c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pnum = strchr(lhost,':');
 802298e:	213a      	movs	r1, #58	; 0x3a
 8022990:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8022992:	f004 fc78 	bl	8027286 <strchr>
 8022996:	62b8      	str	r0, [r7, #40]	; 0x28
    if (pnum == NULL)
 8022998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802299a:	2b00      	cmp	r3, #0
 802299c:	d10a      	bne.n	80229b4 <FtpConnect+0x4c>
    {
    	nport = ftp_set.port_n;
 802299e:	4b65      	ldr	r3, [pc, #404]	; (8022b34 <FtpConnect+0x1cc>)
 80229a0:	695b      	ldr	r3, [r3, #20]
 80229a2:	627b      	str	r3, [r7, #36]	; 0x24
    	sin.sin_port = htons(nport);
 80229a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80229a6:	b29b      	uxth	r3, r3
 80229a8:	4618      	mov	r0, r3
 80229aa:	f7f0 fb91 	bl	80130d0 <lwip_htons>
 80229ae:	4603      	mov	r3, r0
 80229b0:	817b      	strh	r3, [r7, #10]
 80229b2:	e01e      	b.n	80229f2 <FtpConnect+0x8a>
    }
    else
    {
	*pnum++ = '\0';
 80229b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80229b6:	1c5a      	adds	r2, r3, #1
 80229b8:	62ba      	str	r2, [r7, #40]	; 0x28
 80229ba:	2200      	movs	r2, #0
 80229bc:	701a      	strb	r2, [r3, #0]
	if (isdigit(*pnum))
 80229be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80229c0:	781b      	ldrb	r3, [r3, #0]
 80229c2:	3301      	adds	r3, #1
 80229c4:	4a5c      	ldr	r2, [pc, #368]	; (8022b38 <FtpConnect+0x1d0>)
 80229c6:	4413      	add	r3, r2
 80229c8:	781b      	ldrb	r3, [r3, #0]
 80229ca:	f003 0304 	and.w	r3, r3, #4
 80229ce:	2b00      	cmp	r3, #0
 80229d0:	d00a      	beq.n	80229e8 <FtpConnect+0x80>
	    sin.sin_port = htons((short)atoi(pnum));
 80229d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80229d4:	f003 f91a 	bl	8025c0c <atoi>
 80229d8:	4603      	mov	r3, r0
 80229da:	b29b      	uxth	r3, r3
 80229dc:	4618      	mov	r0, r3
 80229de:	f7f0 fb77 	bl	80130d0 <lwip_htons>
 80229e2:	4603      	mov	r3, r0
 80229e4:	817b      	strh	r3, [r7, #10]
 80229e6:	e004      	b.n	80229f2 <FtpConnect+0x8a>
	else
	{
	    sin.sin_port = htons(21);
 80229e8:	2015      	movs	r0, #21
 80229ea:	f7f0 fb71 	bl	80130d0 <lwip_htons>
 80229ee:	4603      	mov	r3, r0
 80229f0:	817b      	strh	r3, [r7, #10]
	}
    }
    if ((sin.sin_addr.s_addr = inet_addr(lhost)) == -1)
 80229f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80229f4:	f7fe f827 	bl	8020a46 <ipaddr_addr>
 80229f8:	4603      	mov	r3, r0
 80229fa:	60fb      	str	r3, [r7, #12]
 80229fc:	68fb      	ldr	r3, [r7, #12]
 80229fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022a02:	d114      	bne.n	8022a2e <FtpConnect+0xc6>
    {
    	if ((phe = gethostbyname(lhost)) == NULL)
 8022a04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8022a06:	f7ee f897 	bl	8010b38 <lwip_gethostbyname>
 8022a0a:	6238      	str	r0, [r7, #32]
 8022a0c:	6a3b      	ldr	r3, [r7, #32]
 8022a0e:	2b00      	cmp	r3, #0
 8022a10:	d101      	bne.n	8022a16 <FtpConnect+0xae>
    	{
	    return 0;
 8022a12:	2300      	movs	r3, #0
 8022a14:	e089      	b.n	8022b2a <FtpConnect+0x1c2>
    	}
    	memcpy((char *)&sin.sin_addr, phe->h_addr, phe->h_length);
 8022a16:	6a3b      	ldr	r3, [r7, #32]
 8022a18:	691b      	ldr	r3, [r3, #16]
 8022a1a:	6819      	ldr	r1, [r3, #0]
 8022a1c:	6a3b      	ldr	r3, [r7, #32]
 8022a1e:	68db      	ldr	r3, [r3, #12]
 8022a20:	461a      	mov	r2, r3
 8022a22:	f107 0308 	add.w	r3, r7, #8
 8022a26:	3304      	adds	r3, #4
 8022a28:	4618      	mov	r0, r3
 8022a2a:	f003 fbcd 	bl	80261c8 <memcpy>
    }

    free(lhost);
 8022a2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8022a30:	f003 fbb4 	bl	802619c <free>
    sControl = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);
 8022a34:	2206      	movs	r2, #6
 8022a36:	2101      	movs	r1, #1
 8022a38:	2002      	movs	r0, #2
 8022a3a:	f7ef f8e9 	bl	8011c10 <lwip_socket>
 8022a3e:	61f8      	str	r0, [r7, #28]
    if (sControl == -1)
 8022a40:	69fb      	ldr	r3, [r7, #28]
 8022a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022a46:	d101      	bne.n	8022a4c <FtpConnect+0xe4>
    {
	return 0;
 8022a48:	2300      	movs	r3, #0
 8022a4a:	e06e      	b.n	8022b2a <FtpConnect+0x1c2>
    }

    if (connect(sControl, (struct sockaddr *)&sin, sizeof(sin)) == -1)
 8022a4c:	f107 0308 	add.w	r3, r7, #8
 8022a50:	2210      	movs	r2, #16
 8022a52:	4619      	mov	r1, r3
 8022a54:	69f8      	ldr	r0, [r7, #28]
 8022a56:	f7ee fbcb 	bl	80111f0 <lwip_connect>
 8022a5a:	4603      	mov	r3, r0
 8022a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022a60:	d104      	bne.n	8022a6c <FtpConnect+0x104>
    {
	net_close(sControl);
 8022a62:	69f8      	ldr	r0, [r7, #28]
 8022a64:	f7ee fb6e 	bl	8011144 <lwip_close>
	return 0;
 8022a68:	2300      	movs	r3, #0
 8022a6a:	e05e      	b.n	8022b2a <FtpConnect+0x1c2>
    }


    ctrl = calloc(1,sizeof(netbuf));
 8022a6c:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8022a70:	2001      	movs	r0, #1
 8022a72:	f003 f8cf 	bl	8025c14 <calloc>
 8022a76:	4603      	mov	r3, r0
 8022a78:	61bb      	str	r3, [r7, #24]
    if (ctrl == NULL)
 8022a7a:	69bb      	ldr	r3, [r7, #24]
 8022a7c:	2b00      	cmp	r3, #0
 8022a7e:	d104      	bne.n	8022a8a <FtpConnect+0x122>
    {
	net_close(sControl);
 8022a80:	69f8      	ldr	r0, [r7, #28]
 8022a82:	f7ee fb5f 	bl	8011144 <lwip_close>
	return 0;
 8022a86:	2300      	movs	r3, #0
 8022a88:	e04f      	b.n	8022b2a <FtpConnect+0x1c2>
    }
    ctrl->buf = malloc(FTPLIB_BUFSIZ);
 8022a8a:	20c8      	movs	r0, #200	; 0xc8
 8022a8c:	f003 fb7e 	bl	802618c <malloc>
 8022a90:	4603      	mov	r3, r0
 8022a92:	461a      	mov	r2, r3
 8022a94:	69bb      	ldr	r3, [r7, #24]
 8022a96:	615a      	str	r2, [r3, #20]
    if (ctrl->buf == NULL)
 8022a98:	69bb      	ldr	r3, [r7, #24]
 8022a9a:	695b      	ldr	r3, [r3, #20]
 8022a9c:	2b00      	cmp	r3, #0
 8022a9e:	d107      	bne.n	8022ab0 <FtpConnect+0x148>
    {
	net_close(sControl);
 8022aa0:	69f8      	ldr	r0, [r7, #28]
 8022aa2:	f7ee fb4f 	bl	8011144 <lwip_close>
	free(ctrl);
 8022aa6:	69b8      	ldr	r0, [r7, #24]
 8022aa8:	f003 fb78 	bl	802619c <free>
	return 0;
 8022aac:	2300      	movs	r3, #0
 8022aae:	e03c      	b.n	8022b2a <FtpConnect+0x1c2>
    }



    ctrl->handle = sControl;
 8022ab0:	69bb      	ldr	r3, [r7, #24]
 8022ab2:	69fa      	ldr	r2, [r7, #28]
 8022ab4:	609a      	str	r2, [r3, #8]
    ctrl->dir = FTPLIB_CONTROL;
 8022ab6:	69bb      	ldr	r3, [r7, #24]
 8022ab8:	2200      	movs	r2, #0
 8022aba:	619a      	str	r2, [r3, #24]
    ctrl->ctrl = NULL;
 8022abc:	69bb      	ldr	r3, [r7, #24]
 8022abe:	2200      	movs	r2, #0
 8022ac0:	61da      	str	r2, [r3, #28]
    ctrl->cmode = FTPLIB_DEFMODE;
 8022ac2:	69bb      	ldr	r3, [r7, #24]
 8022ac4:	2201      	movs	r2, #1
 8022ac6:	625a      	str	r2, [r3, #36]	; 0x24
    ctrl->idlecb = NULL;
 8022ac8:	69bb      	ldr	r3, [r7, #24]
 8022aca:	2200      	movs	r2, #0
 8022acc:	639a      	str	r2, [r3, #56]	; 0x38
    ctrl->idletime.tv_sec = ctrl->idletime.tv_usec = 0;
 8022ace:	69bb      	ldr	r3, [r7, #24]
 8022ad0:	2200      	movs	r2, #0
 8022ad2:	631a      	str	r2, [r3, #48]	; 0x30
 8022ad4:	69b9      	ldr	r1, [r7, #24]
 8022ad6:	f04f 0200 	mov.w	r2, #0
 8022ada:	f04f 0300 	mov.w	r3, #0
 8022ade:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    ctrl->idlearg = NULL;
 8022ae2:	69bb      	ldr	r3, [r7, #24]
 8022ae4:	2200      	movs	r2, #0
 8022ae6:	63da      	str	r2, [r3, #60]	; 0x3c
    ctrl->xfered = 0;
 8022ae8:	69bb      	ldr	r3, [r7, #24]
 8022aea:	2200      	movs	r2, #0
 8022aec:	641a      	str	r2, [r3, #64]	; 0x40
    ctrl->xfered1 = 0;
 8022aee:	69bb      	ldr	r3, [r7, #24]
 8022af0:	2200      	movs	r2, #0
 8022af2:	649a      	str	r2, [r3, #72]	; 0x48
    ctrl->cbbytes = 0;
 8022af4:	69bb      	ldr	r3, [r7, #24]
 8022af6:	2200      	movs	r2, #0
 8022af8:	645a      	str	r2, [r3, #68]	; 0x44
    if (readresp('2', ctrl) == 0)
 8022afa:	69b9      	ldr	r1, [r7, #24]
 8022afc:	2032      	movs	r0, #50	; 0x32
 8022afe:	f7ff fec9 	bl	8022894 <readresp>
 8022b02:	4603      	mov	r3, r0
 8022b04:	2b00      	cmp	r3, #0
 8022b06:	d10c      	bne.n	8022b22 <FtpConnect+0x1ba>
    {
	net_close(sControl);
 8022b08:	69f8      	ldr	r0, [r7, #28]
 8022b0a:	f7ee fb1b 	bl	8011144 <lwip_close>
	free(ctrl->buf);
 8022b0e:	69bb      	ldr	r3, [r7, #24]
 8022b10:	695b      	ldr	r3, [r3, #20]
 8022b12:	4618      	mov	r0, r3
 8022b14:	f003 fb42 	bl	802619c <free>
	free(ctrl);
 8022b18:	69b8      	ldr	r0, [r7, #24]
 8022b1a:	f003 fb3f 	bl	802619c <free>
	return 0;
 8022b1e:	2300      	movs	r3, #0
 8022b20:	e003      	b.n	8022b2a <FtpConnect+0x1c2>
    }

    *nControl = ctrl;
 8022b22:	683b      	ldr	r3, [r7, #0]
 8022b24:	69ba      	ldr	r2, [r7, #24]
 8022b26:	601a      	str	r2, [r3, #0]
    return 1;
 8022b28:	2301      	movs	r3, #1
}
 8022b2a:	4618      	mov	r0, r3
 8022b2c:	3730      	adds	r7, #48	; 0x30
 8022b2e:	46bd      	mov	sp, r7
 8022b30:	bd80      	pop	{r7, pc}
 8022b32:	bf00      	nop
 8022b34:	240050e0 	.word	0x240050e0
 8022b38:	0802ec80 	.word	0x0802ec80

08022b3c <FtpSendCmd>:
 * FtpSendCmd - send a command and wait for expected response
 *
 * return 1 if proper response received, 0 otherwise
 */
static int FtpSendCmd(const char *cmd, char expresp, netbuf *nControl)
{
 8022b3c:	b590      	push	{r4, r7, lr}
 8022b3e:	b0c5      	sub	sp, #276	; 0x114
 8022b40:	af00      	add	r7, sp, #0
 8022b42:	f107 030c 	add.w	r3, r7, #12
 8022b46:	6018      	str	r0, [r3, #0]
 8022b48:	1d3b      	adds	r3, r7, #4
 8022b4a:	601a      	str	r2, [r3, #0]
 8022b4c:	f107 030b 	add.w	r3, r7, #11
 8022b50:	460a      	mov	r2, r1
 8022b52:	701a      	strb	r2, [r3, #0]
    char buf[256];
    if (nControl->dir != FTPLIB_CONTROL)
 8022b54:	1d3b      	adds	r3, r7, #4
 8022b56:	681b      	ldr	r3, [r3, #0]
 8022b58:	699b      	ldr	r3, [r3, #24]
 8022b5a:	2b00      	cmp	r3, #0
 8022b5c:	d001      	beq.n	8022b62 <FtpSendCmd+0x26>
    {
    	return 0;
 8022b5e:	2300      	movs	r3, #0
 8022b60:	e03d      	b.n	8022bde <FtpSendCmd+0xa2>

    }
    if (ftplib_debug > 2)
 8022b62:	4b21      	ldr	r3, [pc, #132]	; (8022be8 <FtpSendCmd+0xac>)
 8022b64:	681b      	ldr	r3, [r3, #0]
 8022b66:	2b02      	cmp	r3, #2
 8022b68:	dd08      	ble.n	8022b7c <FtpSendCmd+0x40>
	fprintf(stderr,"%s\n",cmd);
 8022b6a:	4b20      	ldr	r3, [pc, #128]	; (8022bec <FtpSendCmd+0xb0>)
 8022b6c:	681b      	ldr	r3, [r3, #0]
 8022b6e:	68d8      	ldr	r0, [r3, #12]
 8022b70:	f107 030c 	add.w	r3, r7, #12
 8022b74:	681a      	ldr	r2, [r3, #0]
 8022b76:	491e      	ldr	r1, [pc, #120]	; (8022bf0 <FtpSendCmd+0xb4>)
 8022b78:	f003 f92a 	bl	8025dd0 <fiprintf>
    if ((strlen(cmd) + 3) > sizeof(buf))
 8022b7c:	f107 030c 	add.w	r3, r7, #12
 8022b80:	6818      	ldr	r0, [r3, #0]
 8022b82:	f7dd fbb7 	bl	80002f4 <strlen>
 8022b86:	4603      	mov	r3, r0
 8022b88:	3303      	adds	r3, #3
 8022b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8022b8e:	d901      	bls.n	8022b94 <FtpSendCmd+0x58>
        return 0;
 8022b90:	2300      	movs	r3, #0
 8022b92:	e024      	b.n	8022bde <FtpSendCmd+0xa2>
    sprintf(buf,"%s\r\n",cmd);
 8022b94:	f107 030c 	add.w	r3, r7, #12
 8022b98:	f107 0010 	add.w	r0, r7, #16
 8022b9c:	681a      	ldr	r2, [r3, #0]
 8022b9e:	4915      	ldr	r1, [pc, #84]	; (8022bf4 <FtpSendCmd+0xb8>)
 8022ba0:	f004 fae0 	bl	8027164 <siprintf>
    if (net_write(nControl->handle,buf,strlen(buf)) <= 0)
 8022ba4:	1d3b      	adds	r3, r7, #4
 8022ba6:	681b      	ldr	r3, [r3, #0]
 8022ba8:	689c      	ldr	r4, [r3, #8]
 8022baa:	f107 0310 	add.w	r3, r7, #16
 8022bae:	4618      	mov	r0, r3
 8022bb0:	f7dd fba0 	bl	80002f4 <strlen>
 8022bb4:	4602      	mov	r2, r0
 8022bb6:	f107 0110 	add.w	r1, r7, #16
 8022bba:	2300      	movs	r3, #0
 8022bbc:	4620      	mov	r0, r4
 8022bbe:	f7ee ff17 	bl	80119f0 <lwip_send>
 8022bc2:	4603      	mov	r3, r0
 8022bc4:	2b00      	cmp	r3, #0
 8022bc6:	dc01      	bgt.n	8022bcc <FtpSendCmd+0x90>
    {
	return 0;
 8022bc8:	2300      	movs	r3, #0
 8022bca:	e008      	b.n	8022bde <FtpSendCmd+0xa2>
    }
    return readresp(expresp, nControl);
 8022bcc:	1d3b      	adds	r3, r7, #4
 8022bce:	f107 020b 	add.w	r2, r7, #11
 8022bd2:	7812      	ldrb	r2, [r2, #0]
 8022bd4:	6819      	ldr	r1, [r3, #0]
 8022bd6:	4610      	mov	r0, r2
 8022bd8:	f7ff fe5c 	bl	8022894 <readresp>
 8022bdc:	4603      	mov	r3, r0
}
 8022bde:	4618      	mov	r0, r3
 8022be0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8022be4:	46bd      	mov	sp, r7
 8022be6:	bd90      	pop	{r4, r7, pc}
 8022be8:	240050d8 	.word	0x240050d8
 8022bec:	240000bc 	.word	0x240000bc
 8022bf0:	0802e350 	.word	0x0802e350
 8022bf4:	0802e354 	.word	0x0802e354

08022bf8 <FtpLogin>:
 *
 * return 1 if logged in, 0 otherwise
 */

 int FtpLogin(const char *user,const char *pass, netbuf *nControl)
{
 8022bf8:	b580      	push	{r7, lr}
 8022bfa:	b094      	sub	sp, #80	; 0x50
 8022bfc:	af00      	add	r7, sp, #0
 8022bfe:	60f8      	str	r0, [r7, #12]
 8022c00:	60b9      	str	r1, [r7, #8]
 8022c02:	607a      	str	r2, [r7, #4]
    char tempbuf[64];

    if (((strlen(user) + 7) > sizeof(tempbuf)) ||
 8022c04:	68f8      	ldr	r0, [r7, #12]
 8022c06:	f7dd fb75 	bl	80002f4 <strlen>
 8022c0a:	4603      	mov	r3, r0
 8022c0c:	3307      	adds	r3, #7
 8022c0e:	2b40      	cmp	r3, #64	; 0x40
 8022c10:	d806      	bhi.n	8022c20 <FtpLogin+0x28>
        ((strlen(pass) + 7) > sizeof(tempbuf)))
 8022c12:	68b8      	ldr	r0, [r7, #8]
 8022c14:	f7dd fb6e 	bl	80002f4 <strlen>
 8022c18:	4603      	mov	r3, r0
 8022c1a:	3307      	adds	r3, #7
    if (((strlen(user) + 7) > sizeof(tempbuf)) ||
 8022c1c:	2b40      	cmp	r3, #64	; 0x40
 8022c1e:	d901      	bls.n	8022c24 <FtpLogin+0x2c>
        return 0;
 8022c20:	2300      	movs	r3, #0
 8022c22:	e028      	b.n	8022c76 <FtpLogin+0x7e>
    sprintf(tempbuf,"USER %s",user);
 8022c24:	f107 0310 	add.w	r3, r7, #16
 8022c28:	68fa      	ldr	r2, [r7, #12]
 8022c2a:	4915      	ldr	r1, [pc, #84]	; (8022c80 <FtpLogin+0x88>)
 8022c2c:	4618      	mov	r0, r3
 8022c2e:	f004 fa99 	bl	8027164 <siprintf>
    if (!FtpSendCmd(tempbuf,'3',nControl))
 8022c32:	f107 0310 	add.w	r3, r7, #16
 8022c36:	687a      	ldr	r2, [r7, #4]
 8022c38:	2133      	movs	r1, #51	; 0x33
 8022c3a:	4618      	mov	r0, r3
 8022c3c:	f7ff ff7e 	bl	8022b3c <FtpSendCmd>
 8022c40:	4603      	mov	r3, r0
 8022c42:	2b00      	cmp	r3, #0
 8022c44:	d108      	bne.n	8022c58 <FtpLogin+0x60>
    {
	if (nControl->response[0] == '2')
 8022c46:	687b      	ldr	r3, [r7, #4]
 8022c48:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8022c4c:	2b32      	cmp	r3, #50	; 0x32
 8022c4e:	d101      	bne.n	8022c54 <FtpLogin+0x5c>
	    return 1;
 8022c50:	2301      	movs	r3, #1
 8022c52:	e010      	b.n	8022c76 <FtpLogin+0x7e>
	return 0;
 8022c54:	2300      	movs	r3, #0
 8022c56:	e00e      	b.n	8022c76 <FtpLogin+0x7e>
    }
    sprintf(tempbuf,"PASS %s",pass);
 8022c58:	f107 0310 	add.w	r3, r7, #16
 8022c5c:	68ba      	ldr	r2, [r7, #8]
 8022c5e:	4909      	ldr	r1, [pc, #36]	; (8022c84 <FtpLogin+0x8c>)
 8022c60:	4618      	mov	r0, r3
 8022c62:	f004 fa7f 	bl	8027164 <siprintf>
    return FtpSendCmd(tempbuf,'2',nControl);
 8022c66:	f107 0310 	add.w	r3, r7, #16
 8022c6a:	687a      	ldr	r2, [r7, #4]
 8022c6c:	2132      	movs	r1, #50	; 0x32
 8022c6e:	4618      	mov	r0, r3
 8022c70:	f7ff ff64 	bl	8022b3c <FtpSendCmd>
 8022c74:	4603      	mov	r3, r0
}
 8022c76:	4618      	mov	r0, r3
 8022c78:	3750      	adds	r7, #80	; 0x50
 8022c7a:	46bd      	mov	sp, r7
 8022c7c:	bd80      	pop	{r7, pc}
 8022c7e:	bf00      	nop
 8022c80:	0802e35c 	.word	0x0802e35c
 8022c84:	0802e364 	.word	0x0802e364

08022c88 <FtpOpenPort>:
 * FtpOpenPort - set up data connection
 *
 * return 1 if successful, 0 otherwise
 */
static int FtpOpenPort(netbuf *nControl, netbuf **nData, int mode, int dir)
{
 8022c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022c8a:	b0d7      	sub	sp, #348	; 0x15c
 8022c8c:	af04      	add	r7, sp, #16
 8022c8e:	f107 040c 	add.w	r4, r7, #12
 8022c92:	6020      	str	r0, [r4, #0]
 8022c94:	f107 0008 	add.w	r0, r7, #8
 8022c98:	6001      	str	r1, [r0, #0]
 8022c9a:	1d39      	adds	r1, r7, #4
 8022c9c:	600a      	str	r2, [r1, #0]
 8022c9e:	463a      	mov	r2, r7
 8022ca0:	6013      	str	r3, [r2, #0]
    unsigned int l;
    netbuf *ctrl;
    char *cp;
    unsigned int v[6];
    char buf[256];
    if (nControl->dir != FTPLIB_CONTROL)
 8022ca2:	f107 030c 	add.w	r3, r7, #12
 8022ca6:	681b      	ldr	r3, [r3, #0]
 8022ca8:	699b      	ldr	r3, [r3, #24]
 8022caa:	2b00      	cmp	r3, #0
 8022cac:	d002      	beq.n	8022cb4 <FtpOpenPort+0x2c>
	return -1;
 8022cae:	f04f 33ff 	mov.w	r3, #4294967295
 8022cb2:	e1b8      	b.n	8023026 <FtpOpenPort+0x39e>
    if ((dir != FTPLIB_READ) && (dir != FTPLIB_WRITE))
 8022cb4:	463b      	mov	r3, r7
 8022cb6:	681b      	ldr	r3, [r3, #0]
 8022cb8:	2b01      	cmp	r3, #1
 8022cba:	d010      	beq.n	8022cde <FtpOpenPort+0x56>
 8022cbc:	463b      	mov	r3, r7
 8022cbe:	681b      	ldr	r3, [r3, #0]
 8022cc0:	2b02      	cmp	r3, #2
 8022cc2:	d00c      	beq.n	8022cde <FtpOpenPort+0x56>
    {
	sprintf(nControl->response, "Invalid direction %d\n", dir);
 8022cc4:	f107 030c 	add.w	r3, r7, #12
 8022cc8:	681b      	ldr	r3, [r3, #0]
 8022cca:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 8022cce:	463b      	mov	r3, r7
 8022cd0:	681a      	ldr	r2, [r3, #0]
 8022cd2:	49ca      	ldr	r1, [pc, #808]	; (8022ffc <FtpOpenPort+0x374>)
 8022cd4:	f004 fa46 	bl	8027164 <siprintf>
	return -1;
 8022cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8022cdc:	e1a3      	b.n	8023026 <FtpOpenPort+0x39e>
    }
    if ((mode != FTPLIB_ASCII) && (mode != FTPLIB_IMAGE))
 8022cde:	1d3b      	adds	r3, r7, #4
 8022ce0:	681b      	ldr	r3, [r3, #0]
 8022ce2:	2b41      	cmp	r3, #65	; 0x41
 8022ce4:	d010      	beq.n	8022d08 <FtpOpenPort+0x80>
 8022ce6:	1d3b      	adds	r3, r7, #4
 8022ce8:	681b      	ldr	r3, [r3, #0]
 8022cea:	2b49      	cmp	r3, #73	; 0x49
 8022cec:	d00c      	beq.n	8022d08 <FtpOpenPort+0x80>
    {
	sprintf(nControl->response, "Invalid mode %c\n", mode);
 8022cee:	f107 030c 	add.w	r3, r7, #12
 8022cf2:	681b      	ldr	r3, [r3, #0]
 8022cf4:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 8022cf8:	1d3b      	adds	r3, r7, #4
 8022cfa:	681a      	ldr	r2, [r3, #0]
 8022cfc:	49c0      	ldr	r1, [pc, #768]	; (8023000 <FtpOpenPort+0x378>)
 8022cfe:	f004 fa31 	bl	8027164 <siprintf>
	return -1;
 8022d02:	f04f 33ff 	mov.w	r3, #4294967295
 8022d06:	e18e      	b.n	8023026 <FtpOpenPort+0x39e>
    }
    l = sizeof(sin);
 8022d08:	2310      	movs	r3, #16
 8022d0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    if (nControl->cmode == FTPLIB_PASSIVE)
 8022d0e:	f107 030c 	add.w	r3, r7, #12
 8022d12:	681b      	ldr	r3, [r3, #0]
 8022d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022d16:	2b01      	cmp	r3, #1
 8022d18:	d169      	bne.n	8022dee <FtpOpenPort+0x166>
    {
	memset(&sin, 0, l);
 8022d1a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8022d1e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8022d22:	2100      	movs	r1, #0
 8022d24:	4618      	mov	r0, r3
 8022d26:	f003 fa77 	bl	8026218 <memset>
	sin.in.sin_family = AF_INET;
 8022d2a:	2302      	movs	r3, #2
 8022d2c:	f887 312d 	strb.w	r3, [r7, #301]	; 0x12d

	if (!FtpSendCmd("PASV",'2',nControl))	////////////////////////////////////////////////////////////////
 8022d30:	f107 030c 	add.w	r3, r7, #12
 8022d34:	681a      	ldr	r2, [r3, #0]
 8022d36:	2132      	movs	r1, #50	; 0x32
 8022d38:	48b2      	ldr	r0, [pc, #712]	; (8023004 <FtpOpenPort+0x37c>)
 8022d3a:	f7ff feff 	bl	8022b3c <FtpSendCmd>
 8022d3e:	4603      	mov	r3, r0
 8022d40:	2b00      	cmp	r3, #0
 8022d42:	d102      	bne.n	8022d4a <FtpOpenPort+0xc2>
	    return -1;
 8022d44:	f04f 33ff 	mov.w	r3, #4294967295
 8022d48:	e16d      	b.n	8023026 <FtpOpenPort+0x39e>
	cp = strchr(nControl->response,'(');
 8022d4a:	f107 030c 	add.w	r3, r7, #12
 8022d4e:	681b      	ldr	r3, [r3, #0]
 8022d50:	334c      	adds	r3, #76	; 0x4c
 8022d52:	2128      	movs	r1, #40	; 0x28
 8022d54:	4618      	mov	r0, r3
 8022d56:	f004 fa96 	bl	8027286 <strchr>
 8022d5a:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
	if (cp == NULL)
 8022d5e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8022d62:	2b00      	cmp	r3, #0
 8022d64:	d102      	bne.n	8022d6c <FtpOpenPort+0xe4>
	    return -1;
 8022d66:	f04f 33ff 	mov.w	r3, #4294967295
 8022d6a:	e15c      	b.n	8023026 <FtpOpenPort+0x39e>
	cp++;
 8022d6c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8022d70:	3301      	adds	r3, #1
 8022d72:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	sscanf(cp,"%u,%u,%u,%u,%u,%u",&v[2],&v[3],&v[4],&v[5],&v[0],&v[1]);
 8022d76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8022d7a:	f103 010c 	add.w	r1, r3, #12
 8022d7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8022d82:	f103 0208 	add.w	r2, r3, #8
 8022d86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8022d8a:	3304      	adds	r3, #4
 8022d8c:	9303      	str	r3, [sp, #12]
 8022d8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8022d92:	9302      	str	r3, [sp, #8]
 8022d94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8022d98:	3314      	adds	r3, #20
 8022d9a:	9301      	str	r3, [sp, #4]
 8022d9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8022da0:	3310      	adds	r3, #16
 8022da2:	9300      	str	r3, [sp, #0]
 8022da4:	460b      	mov	r3, r1
 8022da6:	4998      	ldr	r1, [pc, #608]	; (8023008 <FtpOpenPort+0x380>)
 8022da8:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 8022dac:	f004 f9fa 	bl	80271a4 <siscanf>
	sin.sa.sa_data[2] = v[2];
 8022db0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8022db4:	b2db      	uxtb	r3, r3
 8022db6:	f887 3130 	strb.w	r3, [r7, #304]	; 0x130
	sin.sa.sa_data[3] = v[3];
 8022dba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8022dbe:	b2db      	uxtb	r3, r3
 8022dc0:	f887 3131 	strb.w	r3, [r7, #305]	; 0x131
	sin.sa.sa_data[4] = v[4];
 8022dc4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8022dc8:	b2db      	uxtb	r3, r3
 8022dca:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132
	sin.sa.sa_data[5] = v[5];
 8022dce:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8022dd2:	b2db      	uxtb	r3, r3
 8022dd4:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
	sin.sa.sa_data[0] = v[0];
 8022dd8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8022ddc:	b2db      	uxtb	r3, r3
 8022dde:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
	sin.sa.sa_data[1] = v[1];
 8022de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8022de6:	b2db      	uxtb	r3, r3
 8022de8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 8022dec:	e00f      	b.n	8022e0e <FtpOpenPort+0x186>
    }
    else
    {
	if (getsockname(nControl->handle, &sin.sa, &l) < 0)
 8022dee:	f107 030c 	add.w	r3, r7, #12
 8022df2:	681b      	ldr	r3, [r3, #0]
 8022df4:	689b      	ldr	r3, [r3, #8]
 8022df6:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8022dfa:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 8022dfe:	4618      	mov	r0, r3
 8022e00:	f7ef fd68 	bl	80128d4 <lwip_getsockname>
 8022e04:	4603      	mov	r3, r0
 8022e06:	2b00      	cmp	r3, #0
 8022e08:	da01      	bge.n	8022e0e <FtpOpenPort+0x186>
	{
	    return 0;
 8022e0a:	2300      	movs	r3, #0
 8022e0c:	e10b      	b.n	8023026 <FtpOpenPort+0x39e>
	}
    }
    sData = socket(PF_INET,SOCK_STREAM,IPPROTO_TCP);
 8022e0e:	2206      	movs	r2, #6
 8022e10:	2101      	movs	r1, #1
 8022e12:	2002      	movs	r0, #2
 8022e14:	f7ee fefc 	bl	8011c10 <lwip_socket>
 8022e18:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140

    if (sData == -1)
 8022e1c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8022e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022e24:	d102      	bne.n	8022e2c <FtpOpenPort+0x1a4>
    {
	return -1;
 8022e26:	f04f 33ff 	mov.w	r3, #4294967295
 8022e2a:	e0fc      	b.n	8023026 <FtpOpenPort+0x39e>
    }

    if (nControl->cmode == FTPLIB_PASSIVE)
 8022e2c:	f107 030c 	add.w	r3, r7, #12
 8022e30:	681b      	ldr	r3, [r3, #0]
 8022e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022e34:	2b01      	cmp	r3, #1
 8022e36:	d112      	bne.n	8022e5e <FtpOpenPort+0x1d6>
    {
	if (connect(sData, &sin.sa, sizeof(sin.sa)) == -1)
 8022e38:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8022e3c:	2210      	movs	r2, #16
 8022e3e:	4619      	mov	r1, r3
 8022e40:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8022e44:	f7ee f9d4 	bl	80111f0 <lwip_connect>
 8022e48:	4603      	mov	r3, r0
 8022e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022e4e:	d162      	bne.n	8022f16 <FtpOpenPort+0x28e>
	{
	    net_close(sData);
 8022e50:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8022e54:	f7ee f976 	bl	8011144 <lwip_close>

	    return -1;
 8022e58:	f04f 33ff 	mov.w	r3, #4294967295
 8022e5c:	e0e3      	b.n	8023026 <FtpOpenPort+0x39e>
	}
    }
    else
    {
	sin.in.sin_port = 0;
 8022e5e:	2300      	movs	r3, #0
 8022e60:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
	if (bind(sData, &sin.sa, sizeof(sin)) == -1)
 8022e64:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8022e68:	2210      	movs	r2, #16
 8022e6a:	4619      	mov	r1, r3
 8022e6c:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8022e70:	f7ee f8fa 	bl	8011068 <lwip_bind>
 8022e74:	4603      	mov	r3, r0
 8022e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022e7a:	d105      	bne.n	8022e88 <FtpOpenPort+0x200>
	{
	    net_close(sData);
 8022e7c:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8022e80:	f7ee f960 	bl	8011144 <lwip_close>
	    return 0;
 8022e84:	2300      	movs	r3, #0
 8022e86:	e0ce      	b.n	8023026 <FtpOpenPort+0x39e>
	}
	if (listen(sData, 1) < 0)
 8022e88:	2101      	movs	r1, #1
 8022e8a:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8022e8e:	f7ee fa2f 	bl	80112f0 <lwip_listen>
 8022e92:	4603      	mov	r3, r0
 8022e94:	2b00      	cmp	r3, #0
 8022e96:	da05      	bge.n	8022ea4 <FtpOpenPort+0x21c>
	{
	    net_close(sData);
 8022e98:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8022e9c:	f7ee f952 	bl	8011144 <lwip_close>
	    return 0;
 8022ea0:	2300      	movs	r3, #0
 8022ea2:	e0c0      	b.n	8023026 <FtpOpenPort+0x39e>
	}
	if (getsockname(sData, &sin.sa, &l) < 0)
 8022ea4:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8022ea8:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8022eac:	4619      	mov	r1, r3
 8022eae:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8022eb2:	f7ef fd0f 	bl	80128d4 <lwip_getsockname>
 8022eb6:	4603      	mov	r3, r0
 8022eb8:	2b00      	cmp	r3, #0
 8022eba:	da01      	bge.n	8022ec0 <FtpOpenPort+0x238>
	    return 0;
 8022ebc:	2300      	movs	r3, #0
 8022ebe:	e0b2      	b.n	8023026 <FtpOpenPort+0x39e>
	sprintf(buf, "PORT %d,%d,%d,%d,%d,%d",
		(unsigned char) sin.sa.sa_data[2],
 8022ec0:	f897 3130 	ldrb.w	r3, [r7, #304]	; 0x130
	sprintf(buf, "PORT %d,%d,%d,%d,%d,%d",
 8022ec4:	461d      	mov	r5, r3
		(unsigned char) sin.sa.sa_data[3],
 8022ec6:	f897 3131 	ldrb.w	r3, [r7, #305]	; 0x131
	sprintf(buf, "PORT %d,%d,%d,%d,%d,%d",
 8022eca:	461e      	mov	r6, r3
		(unsigned char) sin.sa.sa_data[4],
 8022ecc:	f897 3132 	ldrb.w	r3, [r7, #306]	; 0x132
		(unsigned char) sin.sa.sa_data[5],
 8022ed0:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
		(unsigned char) sin.sa.sa_data[0],
 8022ed4:	f897 112e 	ldrb.w	r1, [r7, #302]	; 0x12e
		(unsigned char) sin.sa.sa_data[1]);
 8022ed8:	f897 012f 	ldrb.w	r0, [r7, #303]	; 0x12f
	sprintf(buf, "PORT %d,%d,%d,%d,%d,%d",
 8022edc:	4604      	mov	r4, r0
 8022ede:	f107 0010 	add.w	r0, r7, #16
 8022ee2:	9403      	str	r4, [sp, #12]
 8022ee4:	9102      	str	r1, [sp, #8]
 8022ee6:	9201      	str	r2, [sp, #4]
 8022ee8:	9300      	str	r3, [sp, #0]
 8022eea:	4633      	mov	r3, r6
 8022eec:	462a      	mov	r2, r5
 8022eee:	4947      	ldr	r1, [pc, #284]	; (802300c <FtpOpenPort+0x384>)
 8022ef0:	f004 f938 	bl	8027164 <siprintf>
	if (!FtpSendCmd(buf,'2',nControl))
 8022ef4:	f107 030c 	add.w	r3, r7, #12
 8022ef8:	f107 0010 	add.w	r0, r7, #16
 8022efc:	681a      	ldr	r2, [r3, #0]
 8022efe:	2132      	movs	r1, #50	; 0x32
 8022f00:	f7ff fe1c 	bl	8022b3c <FtpSendCmd>
 8022f04:	4603      	mov	r3, r0
 8022f06:	2b00      	cmp	r3, #0
 8022f08:	d105      	bne.n	8022f16 <FtpOpenPort+0x28e>
	{
	    net_close(sData);
 8022f0a:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8022f0e:	f7ee f919 	bl	8011144 <lwip_close>
	    return 0;
 8022f12:	2300      	movs	r3, #0
 8022f14:	e087      	b.n	8023026 <FtpOpenPort+0x39e>
	}
    }
    ctrl = calloc(1,sizeof(netbuf));
 8022f16:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8022f1a:	2001      	movs	r0, #1
 8022f1c:	f002 fe7a 	bl	8025c14 <calloc>
 8022f20:	4603      	mov	r3, r0
 8022f22:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    if (ctrl == NULL)
 8022f26:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8022f2a:	2b00      	cmp	r3, #0
 8022f2c:	d106      	bne.n	8022f3c <FtpOpenPort+0x2b4>
    {
	net_close(sData);
 8022f2e:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8022f32:	f7ee f907 	bl	8011144 <lwip_close>

	return -1;
 8022f36:	f04f 33ff 	mov.w	r3, #4294967295
 8022f3a:	e074      	b.n	8023026 <FtpOpenPort+0x39e>
    }
    if ((mode == 'A') && ((ctrl->buf = malloc(FTPLIB_BUFSIZ)) == NULL))
 8022f3c:	1d3b      	adds	r3, r7, #4
 8022f3e:	681b      	ldr	r3, [r3, #0]
 8022f40:	2b41      	cmp	r3, #65	; 0x41
 8022f42:	d117      	bne.n	8022f74 <FtpOpenPort+0x2ec>
 8022f44:	20c8      	movs	r0, #200	; 0xc8
 8022f46:	f003 f921 	bl	802618c <malloc>
 8022f4a:	4603      	mov	r3, r0
 8022f4c:	461a      	mov	r2, r3
 8022f4e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8022f52:	615a      	str	r2, [r3, #20]
 8022f54:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8022f58:	695b      	ldr	r3, [r3, #20]
 8022f5a:	2b00      	cmp	r3, #0
 8022f5c:	d10a      	bne.n	8022f74 <FtpOpenPort+0x2ec>
    {
	net_close(sData);
 8022f5e:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8022f62:	f7ee f8ef 	bl	8011144 <lwip_close>
	free(ctrl);
 8022f66:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8022f6a:	f003 f917 	bl	802619c <free>
	return -1;
 8022f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8022f72:	e058      	b.n	8023026 <FtpOpenPort+0x39e>
    }
    ctrl->handle = sData;
 8022f74:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8022f78:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8022f7c:	609a      	str	r2, [r3, #8]
    ctrl->dir = dir;
 8022f7e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8022f82:	463a      	mov	r2, r7
 8022f84:	6812      	ldr	r2, [r2, #0]
 8022f86:	619a      	str	r2, [r3, #24]
    ctrl->idletime = nControl->idletime;
 8022f88:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8022f8c:	f107 030c 	add.w	r3, r7, #12
 8022f90:	681b      	ldr	r3, [r3, #0]
 8022f92:	f102 0428 	add.w	r4, r2, #40	; 0x28
 8022f96:	3328      	adds	r3, #40	; 0x28
 8022f98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8022f9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    ctrl->idlearg = nControl->idlearg;
 8022f9e:	f107 030c 	add.w	r3, r7, #12
 8022fa2:	681b      	ldr	r3, [r3, #0]
 8022fa4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8022fa6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8022faa:	63da      	str	r2, [r3, #60]	; 0x3c
    ctrl->xfered = 0;
 8022fac:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8022fb0:	2200      	movs	r2, #0
 8022fb2:	641a      	str	r2, [r3, #64]	; 0x40
    ctrl->xfered1 = 0;
 8022fb4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8022fb8:	2200      	movs	r2, #0
 8022fba:	649a      	str	r2, [r3, #72]	; 0x48
    ctrl->cbbytes = nControl->cbbytes;
 8022fbc:	f107 030c 	add.w	r3, r7, #12
 8022fc0:	681b      	ldr	r3, [r3, #0]
 8022fc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8022fc4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8022fc8:	645a      	str	r2, [r3, #68]	; 0x44
    if (ctrl->idletime.tv_sec || ctrl->idletime.tv_usec || ctrl->cbbytes)
 8022fca:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8022fce:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8022fd2:	4313      	orrs	r3, r2
 8022fd4:	d109      	bne.n	8022fea <FtpOpenPort+0x362>
 8022fd6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8022fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022fdc:	2b00      	cmp	r3, #0
 8022fde:	d104      	bne.n	8022fea <FtpOpenPort+0x362>
 8022fe0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8022fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022fe6:	2b00      	cmp	r3, #0
 8022fe8:	d012      	beq.n	8023010 <FtpOpenPort+0x388>
	ctrl->idlecb = nControl->idlecb;
 8022fea:	f107 030c 	add.w	r3, r7, #12
 8022fee:	681b      	ldr	r3, [r3, #0]
 8022ff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8022ff2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8022ff6:	639a      	str	r2, [r3, #56]	; 0x38
 8022ff8:	e00e      	b.n	8023018 <FtpOpenPort+0x390>
 8022ffa:	bf00      	nop
 8022ffc:	0802e36c 	.word	0x0802e36c
 8023000:	0802e384 	.word	0x0802e384
 8023004:	0802e398 	.word	0x0802e398
 8023008:	0802e3a0 	.word	0x0802e3a0
 802300c:	0802e3b4 	.word	0x0802e3b4
    else
	ctrl->idlecb = NULL;
 8023010:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8023014:	2200      	movs	r2, #0
 8023016:	639a      	str	r2, [r3, #56]	; 0x38
    *nData = ctrl;
 8023018:	f107 0308 	add.w	r3, r7, #8
 802301c:	681b      	ldr	r3, [r3, #0]
 802301e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8023022:	601a      	str	r2, [r3, #0]
    return 1;
 8023024:	2301      	movs	r3, #1
}
 8023026:	4618      	mov	r0, r3
 8023028:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 802302c:	46bd      	mov	sp, r7
 802302e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023030 <FtpAcceptConnection>:
 * FtpAcceptConnection - accept connection from server
 *
 * return 1 if successful, 0 otherwise
 */
static int FtpAcceptConnection(netbuf *nData, netbuf *nControl)
{
 8023030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023032:	b095      	sub	sp, #84	; 0x54
 8023034:	af02      	add	r7, sp, #8
 8023036:	6078      	str	r0, [r7, #4]
 8023038:	6039      	str	r1, [r7, #0]
    int i;
    struct timeval tv;
    fd_set mask;
    int rv;

    FD_ZERO(&mask);
 802303a:	f107 0308 	add.w	r3, r7, #8
 802303e:	63bb      	str	r3, [r7, #56]	; 0x38
 8023040:	2300      	movs	r3, #0
 8023042:	63fb      	str	r3, [r7, #60]	; 0x3c
 8023044:	e007      	b.n	8023056 <FtpAcceptConnection+0x26>
 8023046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023048:	1c5a      	adds	r2, r3, #1
 802304a:	63ba      	str	r2, [r7, #56]	; 0x38
 802304c:	2200      	movs	r2, #0
 802304e:	701a      	strb	r2, [r3, #0]
 8023050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023052:	3301      	adds	r3, #1
 8023054:	63fb      	str	r3, [r7, #60]	; 0x3c
 8023056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023058:	2b07      	cmp	r3, #7
 802305a:	d9f4      	bls.n	8023046 <FtpAcceptConnection+0x16>
    FD_SET(nControl->handle, &mask);
 802305c:	683b      	ldr	r3, [r7, #0]
 802305e:	689b      	ldr	r3, [r3, #8]
 8023060:	095a      	lsrs	r2, r3, #5
 8023062:	0093      	lsls	r3, r2, #2
 8023064:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8023068:	440b      	add	r3, r1
 802306a:	f853 3c40 	ldr.w	r3, [r3, #-64]
 802306e:	6839      	ldr	r1, [r7, #0]
 8023070:	6889      	ldr	r1, [r1, #8]
 8023072:	f001 011f 	and.w	r1, r1, #31
 8023076:	2001      	movs	r0, #1
 8023078:	fa00 f101 	lsl.w	r1, r0, r1
 802307c:	4319      	orrs	r1, r3
 802307e:	0093      	lsls	r3, r2, #2
 8023080:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8023084:	4413      	add	r3, r2
 8023086:	f843 1c40 	str.w	r1, [r3, #-64]
    FD_SET(nData->handle, &mask);
 802308a:	687b      	ldr	r3, [r7, #4]
 802308c:	689b      	ldr	r3, [r3, #8]
 802308e:	095a      	lsrs	r2, r3, #5
 8023090:	0093      	lsls	r3, r2, #2
 8023092:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8023096:	440b      	add	r3, r1
 8023098:	f853 3c40 	ldr.w	r3, [r3, #-64]
 802309c:	6879      	ldr	r1, [r7, #4]
 802309e:	6889      	ldr	r1, [r1, #8]
 80230a0:	f001 011f 	and.w	r1, r1, #31
 80230a4:	2001      	movs	r0, #1
 80230a6:	fa00 f101 	lsl.w	r1, r0, r1
 80230aa:	4319      	orrs	r1, r3
 80230ac:	0093      	lsls	r3, r2, #2
 80230ae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80230b2:	4413      	add	r3, r2
 80230b4:	f843 1c40 	str.w	r1, [r3, #-64]
    tv.tv_usec = 0;
 80230b8:	2300      	movs	r3, #0
 80230ba:	61bb      	str	r3, [r7, #24]
    tv.tv_sec = ACCEPT_TIMEOUT;
 80230bc:	f04f 021e 	mov.w	r2, #30
 80230c0:	f04f 0300 	mov.w	r3, #0
 80230c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    i = nControl->handle;
 80230c8:	683b      	ldr	r3, [r7, #0]
 80230ca:	689b      	ldr	r3, [r3, #8]
 80230cc:	647b      	str	r3, [r7, #68]	; 0x44
    if (i < nData->handle)
 80230ce:	687b      	ldr	r3, [r7, #4]
 80230d0:	689b      	ldr	r3, [r3, #8]
 80230d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80230d4:	429a      	cmp	r2, r3
 80230d6:	da02      	bge.n	80230de <FtpAcceptConnection+0xae>
	i = nData->handle;
 80230d8:	687b      	ldr	r3, [r7, #4]
 80230da:	689b      	ldr	r3, [r3, #8]
 80230dc:	647b      	str	r3, [r7, #68]	; 0x44
    i = select(i+1, &mask, NULL, NULL, &tv);
 80230de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80230e0:	1c58      	adds	r0, r3, #1
 80230e2:	f107 0108 	add.w	r1, r7, #8
 80230e6:	f107 0310 	add.w	r3, r7, #16
 80230ea:	9300      	str	r3, [sp, #0]
 80230ec:	2300      	movs	r3, #0
 80230ee:	2200      	movs	r2, #0
 80230f0:	f7ee ffaa 	bl	8012048 <lwip_select>
 80230f4:	6478      	str	r0, [r7, #68]	; 0x44
    if (i == -1)
 80230f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80230f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80230fc:	d119      	bne.n	8023132 <FtpAcceptConnection+0x102>
    {
        strncpy(nControl->response, strerror(errno),
 80230fe:	683b      	ldr	r3, [r7, #0]
 8023100:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8023104:	4b52      	ldr	r3, [pc, #328]	; (8023250 <FtpAcceptConnection+0x220>)
 8023106:	681b      	ldr	r3, [r3, #0]
 8023108:	4618      	mov	r0, r3
 802310a:	f004 fab7 	bl	802767c <strerror>
 802310e:	4603      	mov	r3, r0
 8023110:	f44f 7280 	mov.w	r2, #256	; 0x100
 8023114:	4619      	mov	r1, r3
 8023116:	4620      	mov	r0, r4
 8023118:	f004 facc 	bl	80276b4 <strncpy>
                sizeof(nControl->response));
        net_close(nData->handle);
 802311c:	687b      	ldr	r3, [r7, #4]
 802311e:	689b      	ldr	r3, [r3, #8]
 8023120:	4618      	mov	r0, r3
 8023122:	f7ee f80f 	bl	8011144 <lwip_close>
        nData->handle = 0;
 8023126:	687b      	ldr	r3, [r7, #4]
 8023128:	2200      	movs	r2, #0
 802312a:	609a      	str	r2, [r3, #8]
        rv = 0;
 802312c:	2300      	movs	r3, #0
 802312e:	643b      	str	r3, [r7, #64]	; 0x40
 8023130:	e088      	b.n	8023244 <FtpAcceptConnection+0x214>
    }
    else if (i == 0)
 8023132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023134:	2b00      	cmp	r3, #0
 8023136:	d121      	bne.n	802317c <FtpAcceptConnection+0x14c>
    {
	strcpy(nControl->response, "timed out waiting for connection");
 8023138:	683b      	ldr	r3, [r7, #0]
 802313a:	334c      	adds	r3, #76	; 0x4c
 802313c:	4a45      	ldr	r2, [pc, #276]	; (8023254 <FtpAcceptConnection+0x224>)
 802313e:	4614      	mov	r4, r2
 8023140:	469c      	mov	ip, r3
 8023142:	f104 0e20 	add.w	lr, r4, #32
 8023146:	4665      	mov	r5, ip
 8023148:	4626      	mov	r6, r4
 802314a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 802314c:	6028      	str	r0, [r5, #0]
 802314e:	6069      	str	r1, [r5, #4]
 8023150:	60aa      	str	r2, [r5, #8]
 8023152:	60eb      	str	r3, [r5, #12]
 8023154:	3410      	adds	r4, #16
 8023156:	f10c 0c10 	add.w	ip, ip, #16
 802315a:	4574      	cmp	r4, lr
 802315c:	d1f3      	bne.n	8023146 <FtpAcceptConnection+0x116>
 802315e:	4663      	mov	r3, ip
 8023160:	4622      	mov	r2, r4
 8023162:	7812      	ldrb	r2, [r2, #0]
 8023164:	701a      	strb	r2, [r3, #0]
	net_close(nData->handle);
 8023166:	687b      	ldr	r3, [r7, #4]
 8023168:	689b      	ldr	r3, [r3, #8]
 802316a:	4618      	mov	r0, r3
 802316c:	f7ed ffea 	bl	8011144 <lwip_close>
	nData->handle = 0;
 8023170:	687b      	ldr	r3, [r7, #4]
 8023172:	2200      	movs	r2, #0
 8023174:	609a      	str	r2, [r3, #8]
	rv = 0;
 8023176:	2300      	movs	r3, #0
 8023178:	643b      	str	r3, [r7, #64]	; 0x40
 802317a:	e063      	b.n	8023244 <FtpAcceptConnection+0x214>
    }
    else
    {
	if (FD_ISSET(nData->handle, &mask))
 802317c:	687b      	ldr	r3, [r7, #4]
 802317e:	689b      	ldr	r3, [r3, #8]
 8023180:	095b      	lsrs	r3, r3, #5
 8023182:	009b      	lsls	r3, r3, #2
 8023184:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8023188:	4413      	add	r3, r2
 802318a:	f853 3c40 	ldr.w	r3, [r3, #-64]
 802318e:	687a      	ldr	r2, [r7, #4]
 8023190:	6892      	ldr	r2, [r2, #8]
 8023192:	f002 021f 	and.w	r2, r2, #31
 8023196:	2101      	movs	r1, #1
 8023198:	fa01 f202 	lsl.w	r2, r1, r2
 802319c:	4013      	ands	r3, r2
 802319e:	2b00      	cmp	r3, #0
 80231a0:	d02f      	beq.n	8023202 <FtpAcceptConnection+0x1d2>
	{
	    l = sizeof(addr);
 80231a2:	2310      	movs	r3, #16
 80231a4:	623b      	str	r3, [r7, #32]
	    sData = accept(nData->handle, &addr, &l);
 80231a6:	687b      	ldr	r3, [r7, #4]
 80231a8:	689b      	ldr	r3, [r3, #8]
 80231aa:	f107 0220 	add.w	r2, r7, #32
 80231ae:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80231b2:	4618      	mov	r0, r3
 80231b4:	f7ed fe3a 	bl	8010e2c <lwip_accept>
 80231b8:	6378      	str	r0, [r7, #52]	; 0x34
	    i = errno;
 80231ba:	4b25      	ldr	r3, [pc, #148]	; (8023250 <FtpAcceptConnection+0x220>)
 80231bc:	681b      	ldr	r3, [r3, #0]
 80231be:	647b      	str	r3, [r7, #68]	; 0x44
	    net_close(nData->handle);
 80231c0:	687b      	ldr	r3, [r7, #4]
 80231c2:	689b      	ldr	r3, [r3, #8]
 80231c4:	4618      	mov	r0, r3
 80231c6:	f7ed ffbd 	bl	8011144 <lwip_close>
	    if (sData > 0)
 80231ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80231cc:	2b00      	cmp	r3, #0
 80231ce:	dd05      	ble.n	80231dc <FtpAcceptConnection+0x1ac>
	    {
		rv = 1;
 80231d0:	2301      	movs	r3, #1
 80231d2:	643b      	str	r3, [r7, #64]	; 0x40
		nData->handle = sData;
 80231d4:	687b      	ldr	r3, [r7, #4]
 80231d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80231d8:	609a      	str	r2, [r3, #8]
 80231da:	e033      	b.n	8023244 <FtpAcceptConnection+0x214>
	    }
	    else
	    {
		strncpy(nControl->response, strerror(i),
 80231dc:	683b      	ldr	r3, [r7, #0]
 80231de:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 80231e2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80231e4:	f004 fa4a 	bl	802767c <strerror>
 80231e8:	4603      	mov	r3, r0
 80231ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80231ee:	4619      	mov	r1, r3
 80231f0:	4620      	mov	r0, r4
 80231f2:	f004 fa5f 	bl	80276b4 <strncpy>
                        sizeof(nControl->response));
		nData->handle = 0;
 80231f6:	687b      	ldr	r3, [r7, #4]
 80231f8:	2200      	movs	r2, #0
 80231fa:	609a      	str	r2, [r3, #8]
		rv = 0;
 80231fc:	2300      	movs	r3, #0
 80231fe:	643b      	str	r3, [r7, #64]	; 0x40
 8023200:	e020      	b.n	8023244 <FtpAcceptConnection+0x214>
	    }
	}
	else if (FD_ISSET(nControl->handle, &mask))
 8023202:	683b      	ldr	r3, [r7, #0]
 8023204:	689b      	ldr	r3, [r3, #8]
 8023206:	095b      	lsrs	r3, r3, #5
 8023208:	009b      	lsls	r3, r3, #2
 802320a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 802320e:	4413      	add	r3, r2
 8023210:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8023214:	683a      	ldr	r2, [r7, #0]
 8023216:	6892      	ldr	r2, [r2, #8]
 8023218:	f002 021f 	and.w	r2, r2, #31
 802321c:	2101      	movs	r1, #1
 802321e:	fa01 f202 	lsl.w	r2, r1, r2
 8023222:	4013      	ands	r3, r2
 8023224:	2b00      	cmp	r3, #0
 8023226:	d00d      	beq.n	8023244 <FtpAcceptConnection+0x214>
	{
	    net_close(nData->handle);
 8023228:	687b      	ldr	r3, [r7, #4]
 802322a:	689b      	ldr	r3, [r3, #8]
 802322c:	4618      	mov	r0, r3
 802322e:	f7ed ff89 	bl	8011144 <lwip_close>
	    nData->handle = 0;
 8023232:	687b      	ldr	r3, [r7, #4]
 8023234:	2200      	movs	r2, #0
 8023236:	609a      	str	r2, [r3, #8]
	    readresp('2', nControl);
 8023238:	6839      	ldr	r1, [r7, #0]
 802323a:	2032      	movs	r0, #50	; 0x32
 802323c:	f7ff fb2a 	bl	8022894 <readresp>
	    rv = 0;
 8023240:	2300      	movs	r3, #0
 8023242:	643b      	str	r3, [r7, #64]	; 0x40
	}
    }
    return rv;
 8023244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8023246:	4618      	mov	r0, r3
 8023248:	374c      	adds	r7, #76	; 0x4c
 802324a:	46bd      	mov	sp, r7
 802324c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802324e:	bf00      	nop
 8023250:	240086b8 	.word	0x240086b8
 8023254:	0802e3cc 	.word	0x0802e3cc

08023258 <FtpAccess>:
 *
 * return 1 if successful, 0 otherwise
 */
 int FtpAccess(const char *path, int typ, int mode, netbuf *nControl,
    netbuf **nData)
{
 8023258:	b590      	push	{r4, r7, lr}
 802325a:	b0c7      	sub	sp, #284	; 0x11c
 802325c:	af00      	add	r7, sp, #0
 802325e:	f107 040c 	add.w	r4, r7, #12
 8023262:	6020      	str	r0, [r4, #0]
 8023264:	f107 0008 	add.w	r0, r7, #8
 8023268:	6001      	str	r1, [r0, #0]
 802326a:	1d39      	adds	r1, r7, #4
 802326c:	600a      	str	r2, [r1, #0]
 802326e:	463a      	mov	r2, r7
 8023270:	6013      	str	r3, [r2, #0]
    char buf[256];
    int dir;
    if ((path == NULL) &&
 8023272:	f107 030c 	add.w	r3, r7, #12
 8023276:	681b      	ldr	r3, [r3, #0]
 8023278:	2b00      	cmp	r3, #0
 802327a:	d112      	bne.n	80232a2 <FtpAccess+0x4a>
 802327c:	f107 0308 	add.w	r3, r7, #8
 8023280:	681b      	ldr	r3, [r3, #0]
 8023282:	2b04      	cmp	r3, #4
 8023284:	d004      	beq.n	8023290 <FtpAccess+0x38>
        ((typ == FTPLIB_FILE_WRITE) || (typ == FTPLIB_FILE_READ)))
 8023286:	f107 0308 	add.w	r3, r7, #8
 802328a:	681b      	ldr	r3, [r3, #0]
 802328c:	2b03      	cmp	r3, #3
 802328e:	d108      	bne.n	80232a2 <FtpAccess+0x4a>
    {
	sprintf(nControl->response,
 8023290:	463b      	mov	r3, r7
 8023292:	681b      	ldr	r3, [r3, #0]
 8023294:	334c      	adds	r3, #76	; 0x4c
 8023296:	4976      	ldr	r1, [pc, #472]	; (8023470 <FtpAccess+0x218>)
 8023298:	4618      	mov	r0, r3
 802329a:	f003 ff63 	bl	8027164 <siprintf>
                "Missing path argument for file transfer\n");
	return 0;
 802329e:	2300      	movs	r3, #0
 80232a0:	e0e1      	b.n	8023466 <FtpAccess+0x20e>
    }
    sprintf(buf, "TYPE %c", mode);
 80232a2:	1d3b      	adds	r3, r7, #4
 80232a4:	f107 0010 	add.w	r0, r7, #16
 80232a8:	681a      	ldr	r2, [r3, #0]
 80232aa:	4972      	ldr	r1, [pc, #456]	; (8023474 <FtpAccess+0x21c>)
 80232ac:	f003 ff5a 	bl	8027164 <siprintf>
    if (!FtpSendCmd(buf, '2', nControl))	//////////////////////////////////////////////
 80232b0:	463b      	mov	r3, r7
 80232b2:	f107 0010 	add.w	r0, r7, #16
 80232b6:	681a      	ldr	r2, [r3, #0]
 80232b8:	2132      	movs	r1, #50	; 0x32
 80232ba:	f7ff fc3f 	bl	8022b3c <FtpSendCmd>
 80232be:	4603      	mov	r3, r0
 80232c0:	2b00      	cmp	r3, #0
 80232c2:	d101      	bne.n	80232c8 <FtpAccess+0x70>
	return 0;
 80232c4:	2300      	movs	r3, #0
 80232c6:	e0ce      	b.n	8023466 <FtpAccess+0x20e>
 80232c8:	f107 0308 	add.w	r3, r7, #8
 80232cc:	681b      	ldr	r3, [r3, #0]
 80232ce:	3b01      	subs	r3, #1
 80232d0:	2b03      	cmp	r3, #3
 80232d2:	d83b      	bhi.n	802334c <FtpAccess+0xf4>
 80232d4:	a201      	add	r2, pc, #4	; (adr r2, 80232dc <FtpAccess+0x84>)
 80232d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80232da:	bf00      	nop
 80232dc:	080232ed 	.word	0x080232ed
 80232e0:	08023305 	.word	0x08023305
 80232e4:	0802331d 	.word	0x0802331d
 80232e8:	08023335 	.word	0x08023335
    switch (typ)
    {
      case FTPLIB_DIR:
	strcpy(buf,"NLST");
 80232ec:	f107 0310 	add.w	r3, r7, #16
 80232f0:	4a61      	ldr	r2, [pc, #388]	; (8023478 <FtpAccess+0x220>)
 80232f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80232f6:	6018      	str	r0, [r3, #0]
 80232f8:	3304      	adds	r3, #4
 80232fa:	7019      	strb	r1, [r3, #0]
	dir = FTPLIB_READ;
 80232fc:	2301      	movs	r3, #1
 80232fe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	break;
 8023302:	e02f      	b.n	8023364 <FtpAccess+0x10c>
      case FTPLIB_DIR_VERBOSE:
	strcpy(buf,"LIST");
 8023304:	f107 0310 	add.w	r3, r7, #16
 8023308:	4a5c      	ldr	r2, [pc, #368]	; (802347c <FtpAccess+0x224>)
 802330a:	e892 0003 	ldmia.w	r2, {r0, r1}
 802330e:	6018      	str	r0, [r3, #0]
 8023310:	3304      	adds	r3, #4
 8023312:	7019      	strb	r1, [r3, #0]
	dir = FTPLIB_READ;
 8023314:	2301      	movs	r3, #1
 8023316:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	break;
 802331a:	e023      	b.n	8023364 <FtpAccess+0x10c>
      case FTPLIB_FILE_READ:
	strcpy(buf,"RETR");
 802331c:	f107 0310 	add.w	r3, r7, #16
 8023320:	4a57      	ldr	r2, [pc, #348]	; (8023480 <FtpAccess+0x228>)
 8023322:	e892 0003 	ldmia.w	r2, {r0, r1}
 8023326:	6018      	str	r0, [r3, #0]
 8023328:	3304      	adds	r3, #4
 802332a:	7019      	strb	r1, [r3, #0]
	dir = FTPLIB_READ;
 802332c:	2301      	movs	r3, #1
 802332e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	break;
 8023332:	e017      	b.n	8023364 <FtpAccess+0x10c>
      case FTPLIB_FILE_WRITE:       /* STOR update data, If the file already exists on the server, it is replaced by the uploaded file. If the file does not exist, it is created  */
	strcpy(buf,"APPE");				/* This command behaves like STOR If the file already exists on the server, the data is appended to the existing file. If the file does not exist, it is created.*/
 8023334:	f107 0310 	add.w	r3, r7, #16
 8023338:	4a52      	ldr	r2, [pc, #328]	; (8023484 <FtpAccess+0x22c>)
 802333a:	e892 0003 	ldmia.w	r2, {r0, r1}
 802333e:	6018      	str	r0, [r3, #0]
 8023340:	3304      	adds	r3, #4
 8023342:	7019      	strb	r1, [r3, #0]
	dir = FTPLIB_WRITE;
 8023344:	2302      	movs	r3, #2
 8023346:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	break;
 802334a:	e00b      	b.n	8023364 <FtpAccess+0x10c>
      default:
	sprintf(nControl->response, "Invalid open type %d\n", typ);
 802334c:	463b      	mov	r3, r7
 802334e:	681b      	ldr	r3, [r3, #0]
 8023350:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 8023354:	f107 0308 	add.w	r3, r7, #8
 8023358:	681a      	ldr	r2, [r3, #0]
 802335a:	494b      	ldr	r1, [pc, #300]	; (8023488 <FtpAccess+0x230>)
 802335c:	f003 ff02 	bl	8027164 <siprintf>
	return 0;
 8023360:	2300      	movs	r3, #0
 8023362:	e080      	b.n	8023466 <FtpAccess+0x20e>
    }
    if (path != NULL)
 8023364:	f107 030c 	add.w	r3, r7, #12
 8023368:	681b      	ldr	r3, [r3, #0]
 802336a:	2b00      	cmp	r3, #0
 802336c:	d028      	beq.n	80233c0 <FtpAccess+0x168>
    {
        int i = strlen(buf);
 802336e:	f107 0310 	add.w	r3, r7, #16
 8023372:	4618      	mov	r0, r3
 8023374:	f7dc ffbe 	bl	80002f4 <strlen>
 8023378:	4603      	mov	r3, r0
 802337a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
        buf[i++] = ' ';
 802337e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8023382:	1c5a      	adds	r2, r3, #1
 8023384:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8023388:	f107 0210 	add.w	r2, r7, #16
 802338c:	2120      	movs	r1, #32
 802338e:	54d1      	strb	r1, [r2, r3]
        if ((strlen(path) + i) >= sizeof(buf))
 8023390:	f107 030c 	add.w	r3, r7, #12
 8023394:	6818      	ldr	r0, [r3, #0]
 8023396:	f7dc ffad 	bl	80002f4 <strlen>
 802339a:	4602      	mov	r2, r0
 802339c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80233a0:	4413      	add	r3, r2
 80233a2:	2bff      	cmp	r3, #255	; 0xff
 80233a4:	d901      	bls.n	80233aa <FtpAccess+0x152>
            return 0;
 80233a6:	2300      	movs	r3, #0
 80233a8:	e05d      	b.n	8023466 <FtpAccess+0x20e>
        strcpy(&buf[i],path);
 80233aa:	f107 0210 	add.w	r2, r7, #16
 80233ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80233b2:	441a      	add	r2, r3
 80233b4:	f107 030c 	add.w	r3, r7, #12
 80233b8:	6819      	ldr	r1, [r3, #0]
 80233ba:	4610      	mov	r0, r2
 80233bc:	f003 ff70 	bl	80272a0 <strcpy>
    }
    if (FtpOpenPort(nControl, nData, mode, dir) == -1)
 80233c0:	1d3a      	adds	r2, r7, #4
 80233c2:	4638      	mov	r0, r7
 80233c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80233c8:	6812      	ldr	r2, [r2, #0]
 80233ca:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80233ce:	6800      	ldr	r0, [r0, #0]
 80233d0:	f7ff fc5a 	bl	8022c88 <FtpOpenPort>
 80233d4:	4603      	mov	r3, r0
 80233d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80233da:	d101      	bne.n	80233e0 <FtpAccess+0x188>
	return 0;
 80233dc:	2300      	movs	r3, #0
 80233de:	e042      	b.n	8023466 <FtpAccess+0x20e>
    if (!FtpSendCmd(buf, '1', nControl))
 80233e0:	463b      	mov	r3, r7
 80233e2:	f107 0010 	add.w	r0, r7, #16
 80233e6:	681a      	ldr	r2, [r3, #0]
 80233e8:	2131      	movs	r1, #49	; 0x31
 80233ea:	f7ff fba7 	bl	8022b3c <FtpSendCmd>
 80233ee:	4603      	mov	r3, r0
 80233f0:	2b00      	cmp	r3, #0
 80233f2:	d10b      	bne.n	802340c <FtpAccess+0x1b4>
    {
	FtpClose(*nData);
 80233f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80233f8:	681b      	ldr	r3, [r3, #0]
 80233fa:	4618      	mov	r0, r3
 80233fc:	f000 f8f5 	bl	80235ea <FtpClose>
	*nData = NULL;
 8023400:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8023404:	2200      	movs	r2, #0
 8023406:	601a      	str	r2, [r3, #0]
	return 0;
 8023408:	2300      	movs	r3, #0
 802340a:	e02c      	b.n	8023466 <FtpAccess+0x20e>
    }
    (*nData)->ctrl = nControl;
 802340c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8023410:	681b      	ldr	r3, [r3, #0]
 8023412:	463a      	mov	r2, r7
 8023414:	6812      	ldr	r2, [r2, #0]
 8023416:	61da      	str	r2, [r3, #28]
    nControl->data = *nData;
 8023418:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802341c:	681a      	ldr	r2, [r3, #0]
 802341e:	463b      	mov	r3, r7
 8023420:	681b      	ldr	r3, [r3, #0]
 8023422:	621a      	str	r2, [r3, #32]
    if (nControl->cmode == FTPLIB_PORT)
 8023424:	463b      	mov	r3, r7
 8023426:	681b      	ldr	r3, [r3, #0]
 8023428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802342a:	2b02      	cmp	r3, #2
 802342c:	d11a      	bne.n	8023464 <FtpAccess+0x20c>
    {
	if (!FtpAcceptConnection(*nData,nControl))
 802342e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8023432:	681a      	ldr	r2, [r3, #0]
 8023434:	463b      	mov	r3, r7
 8023436:	6819      	ldr	r1, [r3, #0]
 8023438:	4610      	mov	r0, r2
 802343a:	f7ff fdf9 	bl	8023030 <FtpAcceptConnection>
 802343e:	4603      	mov	r3, r0
 8023440:	2b00      	cmp	r3, #0
 8023442:	d10f      	bne.n	8023464 <FtpAccess+0x20c>
	{
	    FtpClose(*nData);
 8023444:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8023448:	681b      	ldr	r3, [r3, #0]
 802344a:	4618      	mov	r0, r3
 802344c:	f000 f8cd 	bl	80235ea <FtpClose>
	    *nData = NULL;
 8023450:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8023454:	2200      	movs	r2, #0
 8023456:	601a      	str	r2, [r3, #0]
	    nControl->data = NULL;
 8023458:	463b      	mov	r3, r7
 802345a:	681b      	ldr	r3, [r3, #0]
 802345c:	2200      	movs	r2, #0
 802345e:	621a      	str	r2, [r3, #32]
	    return 0;
 8023460:	2300      	movs	r3, #0
 8023462:	e000      	b.n	8023466 <FtpAccess+0x20e>
	}
    }
    return 1;
 8023464:	2301      	movs	r3, #1
}
 8023466:	4618      	mov	r0, r3
 8023468:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 802346c:	46bd      	mov	sp, r7
 802346e:	bd90      	pop	{r4, r7, pc}
 8023470:	0802e3f0 	.word	0x0802e3f0
 8023474:	0802e41c 	.word	0x0802e41c
 8023478:	0802e424 	.word	0x0802e424
 802347c:	0802e42c 	.word	0x0802e42c
 8023480:	0802e434 	.word	0x0802e434
 8023484:	0802e43c 	.word	0x0802e43c
 8023488:	0802e444 	.word	0x0802e444

0802348c <FtpRead>:

/*
 * FtpRead - read from a data connection
 */
 int FtpRead(void *buf, int max, netbuf *nData)
{
 802348c:	b580      	push	{r7, lr}
 802348e:	b086      	sub	sp, #24
 8023490:	af00      	add	r7, sp, #0
 8023492:	60f8      	str	r0, [r7, #12]
 8023494:	60b9      	str	r1, [r7, #8]
 8023496:	607a      	str	r2, [r7, #4]
    int i;
    if (nData->dir != FTPLIB_READ)
 8023498:	687b      	ldr	r3, [r7, #4]
 802349a:	699b      	ldr	r3, [r3, #24]
 802349c:	2b01      	cmp	r3, #1
 802349e:	d001      	beq.n	80234a4 <FtpRead+0x18>
	return 0;
 80234a0:	2300      	movs	r3, #0
 80234a2:	e04c      	b.n	802353e <FtpRead+0xb2>
    if (nData->buf)
 80234a4:	687b      	ldr	r3, [r7, #4]
 80234a6:	695b      	ldr	r3, [r3, #20]
 80234a8:	2b00      	cmp	r3, #0
 80234aa:	d006      	beq.n	80234ba <FtpRead+0x2e>
        i = readline(buf, max, nData);
 80234ac:	687a      	ldr	r2, [r7, #4]
 80234ae:	68b9      	ldr	r1, [r7, #8]
 80234b0:	68f8      	ldr	r0, [r7, #12]
 80234b2:	f7ff f88b 	bl	80225cc <readline>
 80234b6:	6178      	str	r0, [r7, #20]
 80234b8:	e010      	b.n	80234dc <FtpRead+0x50>
    else
    {
        i = socket_wait(nData);
 80234ba:	6878      	ldr	r0, [r7, #4]
 80234bc:	f7fe fffc 	bl	80224b8 <socket_wait>
 80234c0:	6178      	str	r0, [r7, #20]
	if (i != 1)
 80234c2:	697b      	ldr	r3, [r7, #20]
 80234c4:	2b01      	cmp	r3, #1
 80234c6:	d001      	beq.n	80234cc <FtpRead+0x40>
	    return 0;
 80234c8:	2300      	movs	r3, #0
 80234ca:	e038      	b.n	802353e <FtpRead+0xb2>
        i = net_read(nData->handle, buf, max);
 80234cc:	687b      	ldr	r3, [r7, #4]
 80234ce:	6898      	ldr	r0, [r3, #8]
 80234d0:	68ba      	ldr	r2, [r7, #8]
 80234d2:	2300      	movs	r3, #0
 80234d4:	68f9      	ldr	r1, [r7, #12]
 80234d6:	f7ee fa75 	bl	80119c4 <lwip_recv>
 80234da:	6178      	str	r0, [r7, #20]
    }
    if (i == -1)
 80234dc:	697b      	ldr	r3, [r7, #20]
 80234de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80234e2:	d101      	bne.n	80234e8 <FtpRead+0x5c>
	return 0;
 80234e4:	2300      	movs	r3, #0
 80234e6:	e02a      	b.n	802353e <FtpRead+0xb2>
    nData->xfered += i;
 80234e8:	687b      	ldr	r3, [r7, #4]
 80234ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80234ec:	697b      	ldr	r3, [r7, #20]
 80234ee:	441a      	add	r2, r3
 80234f0:	687b      	ldr	r3, [r7, #4]
 80234f2:	641a      	str	r2, [r3, #64]	; 0x40
    if (nData->idlecb && nData->cbbytes)
 80234f4:	687b      	ldr	r3, [r7, #4]
 80234f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80234f8:	2b00      	cmp	r3, #0
 80234fa:	d01f      	beq.n	802353c <FtpRead+0xb0>
 80234fc:	687b      	ldr	r3, [r7, #4]
 80234fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023500:	2b00      	cmp	r3, #0
 8023502:	d01b      	beq.n	802353c <FtpRead+0xb0>
    {
        nData->xfered1 += i;
 8023504:	687b      	ldr	r3, [r7, #4]
 8023506:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8023508:	697b      	ldr	r3, [r7, #20]
 802350a:	441a      	add	r2, r3
 802350c:	687b      	ldr	r3, [r7, #4]
 802350e:	649a      	str	r2, [r3, #72]	; 0x48
        if (nData->xfered1 > nData->cbbytes)
 8023510:	687b      	ldr	r3, [r7, #4]
 8023512:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8023514:	687b      	ldr	r3, [r7, #4]
 8023516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023518:	429a      	cmp	r2, r3
 802351a:	dd0f      	ble.n	802353c <FtpRead+0xb0>
        {
	    if (nData->idlecb(nData, nData->xfered, nData->idlearg) == 0)
 802351c:	687b      	ldr	r3, [r7, #4]
 802351e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023520:	687a      	ldr	r2, [r7, #4]
 8023522:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8023524:	687a      	ldr	r2, [r7, #4]
 8023526:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8023528:	6878      	ldr	r0, [r7, #4]
 802352a:	4798      	blx	r3
 802352c:	4603      	mov	r3, r0
 802352e:	2b00      	cmp	r3, #0
 8023530:	d101      	bne.n	8023536 <FtpRead+0xaa>
		return 0;
 8023532:	2300      	movs	r3, #0
 8023534:	e003      	b.n	802353e <FtpRead+0xb2>
            nData->xfered1 = 0;
 8023536:	687b      	ldr	r3, [r7, #4]
 8023538:	2200      	movs	r2, #0
 802353a:	649a      	str	r2, [r3, #72]	; 0x48
        }
    }
    return i;
 802353c:	697b      	ldr	r3, [r7, #20]
}
 802353e:	4618      	mov	r0, r3
 8023540:	3718      	adds	r7, #24
 8023542:	46bd      	mov	sp, r7
 8023544:	bd80      	pop	{r7, pc}

08023546 <FtpWrite>:

/*
 * FtpWrite - write to a data connection
 */
 int FtpWrite(void *buf, int len, netbuf *nData)
{
 8023546:	b580      	push	{r7, lr}
 8023548:	b086      	sub	sp, #24
 802354a:	af00      	add	r7, sp, #0
 802354c:	60f8      	str	r0, [r7, #12]
 802354e:	60b9      	str	r1, [r7, #8]
 8023550:	607a      	str	r2, [r7, #4]
    int i;
    if (nData->dir != FTPLIB_WRITE)
 8023552:	687b      	ldr	r3, [r7, #4]
 8023554:	699b      	ldr	r3, [r3, #24]
 8023556:	2b02      	cmp	r3, #2
 8023558:	d001      	beq.n	802355e <FtpWrite+0x18>
	return 0;
 802355a:	2300      	movs	r3, #0
 802355c:	e041      	b.n	80235e2 <FtpWrite+0x9c>
    if (nData->buf)
 802355e:	687b      	ldr	r3, [r7, #4]
 8023560:	695b      	ldr	r3, [r3, #20]
 8023562:	2b00      	cmp	r3, #0
 8023564:	d006      	beq.n	8023574 <FtpWrite+0x2e>
    	i = writeline(buf, len, nData);
 8023566:	687a      	ldr	r2, [r7, #4]
 8023568:	68b9      	ldr	r1, [r7, #8]
 802356a:	68f8      	ldr	r0, [r7, #12]
 802356c:	f7ff f900 	bl	8022770 <writeline>
 8023570:	6178      	str	r0, [r7, #20]
 8023572:	e00a      	b.n	802358a <FtpWrite+0x44>
    else
    {
        socket_wait(nData);
 8023574:	6878      	ldr	r0, [r7, #4]
 8023576:	f7fe ff9f 	bl	80224b8 <socket_wait>
        i = net_write(nData->handle, buf, len);
 802357a:	687b      	ldr	r3, [r7, #4]
 802357c:	6898      	ldr	r0, [r3, #8]
 802357e:	68ba      	ldr	r2, [r7, #8]
 8023580:	2300      	movs	r3, #0
 8023582:	68f9      	ldr	r1, [r7, #12]
 8023584:	f7ee fa34 	bl	80119f0 <lwip_send>
 8023588:	6178      	str	r0, [r7, #20]
    }
    if (i == -1)
 802358a:	697b      	ldr	r3, [r7, #20]
 802358c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023590:	d101      	bne.n	8023596 <FtpWrite+0x50>
	return 0;
 8023592:	2300      	movs	r3, #0
 8023594:	e025      	b.n	80235e2 <FtpWrite+0x9c>
    nData->xfered += i;
 8023596:	687b      	ldr	r3, [r7, #4]
 8023598:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802359a:	697b      	ldr	r3, [r7, #20]
 802359c:	441a      	add	r2, r3
 802359e:	687b      	ldr	r3, [r7, #4]
 80235a0:	641a      	str	r2, [r3, #64]	; 0x40
    if (nData->idlecb && nData->cbbytes)
 80235a2:	687b      	ldr	r3, [r7, #4]
 80235a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80235a6:	2b00      	cmp	r3, #0
 80235a8:	d01a      	beq.n	80235e0 <FtpWrite+0x9a>
 80235aa:	687b      	ldr	r3, [r7, #4]
 80235ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80235ae:	2b00      	cmp	r3, #0
 80235b0:	d016      	beq.n	80235e0 <FtpWrite+0x9a>
    {
        nData->xfered1 += i;
 80235b2:	687b      	ldr	r3, [r7, #4]
 80235b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80235b6:	697b      	ldr	r3, [r7, #20]
 80235b8:	441a      	add	r2, r3
 80235ba:	687b      	ldr	r3, [r7, #4]
 80235bc:	649a      	str	r2, [r3, #72]	; 0x48
        if (nData->xfered1 > nData->cbbytes)
 80235be:	687b      	ldr	r3, [r7, #4]
 80235c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80235c2:	687b      	ldr	r3, [r7, #4]
 80235c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80235c6:	429a      	cmp	r2, r3
 80235c8:	dd0a      	ble.n	80235e0 <FtpWrite+0x9a>
        {
            nData->idlecb(nData, nData->xfered, nData->idlearg);
 80235ca:	687b      	ldr	r3, [r7, #4]
 80235cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80235ce:	687a      	ldr	r2, [r7, #4]
 80235d0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80235d2:	687a      	ldr	r2, [r7, #4]
 80235d4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80235d6:	6878      	ldr	r0, [r7, #4]
 80235d8:	4798      	blx	r3
            nData->xfered1 = 0;
 80235da:	687b      	ldr	r3, [r7, #4]
 80235dc:	2200      	movs	r2, #0
 80235de:	649a      	str	r2, [r3, #72]	; 0x48
        }
    }
    return i;
 80235e0:	697b      	ldr	r3, [r7, #20]
}
 80235e2:	4618      	mov	r0, r3
 80235e4:	3718      	adds	r7, #24
 80235e6:	46bd      	mov	sp, r7
 80235e8:	bd80      	pop	{r7, pc}

080235ea <FtpClose>:

/*
 * FtpClose - close a data connection
 */
 int FtpClose(netbuf *nData)
{
 80235ea:	b580      	push	{r7, lr}
 80235ec:	b084      	sub	sp, #16
 80235ee:	af00      	add	r7, sp, #0
 80235f0:	6078      	str	r0, [r7, #4]
    netbuf *ctrl;
    switch (nData->dir)
 80235f2:	687b      	ldr	r3, [r7, #4]
 80235f4:	699b      	ldr	r3, [r3, #24]
 80235f6:	2b02      	cmp	r3, #2
 80235f8:	d006      	beq.n	8023608 <FtpClose+0x1e>
 80235fa:	2b02      	cmp	r3, #2
 80235fc:	dc49      	bgt.n	8023692 <FtpClose+0xa8>
 80235fe:	2b00      	cmp	r3, #0
 8023600:	d033      	beq.n	802366a <FtpClose+0x80>
 8023602:	2b01      	cmp	r3, #1
 8023604:	d009      	beq.n	802361a <FtpClose+0x30>
 8023606:	e044      	b.n	8023692 <FtpClose+0xa8>
    {
      case FTPLIB_WRITE:
	/* potential problem - if buffer flush fails, how to notify user? */
	if (nData->buf != NULL)
 8023608:	687b      	ldr	r3, [r7, #4]
 802360a:	695b      	ldr	r3, [r3, #20]
 802360c:	2b00      	cmp	r3, #0
 802360e:	d004      	beq.n	802361a <FtpClose+0x30>
	    writeline(NULL, 0, nData);
 8023610:	687a      	ldr	r2, [r7, #4]
 8023612:	2100      	movs	r1, #0
 8023614:	2000      	movs	r0, #0
 8023616:	f7ff f8ab 	bl	8022770 <writeline>
      case FTPLIB_READ:
	if (nData->buf)
 802361a:	687b      	ldr	r3, [r7, #4]
 802361c:	695b      	ldr	r3, [r3, #20]
 802361e:	2b00      	cmp	r3, #0
 8023620:	d004      	beq.n	802362c <FtpClose+0x42>
	    free(nData->buf);
 8023622:	687b      	ldr	r3, [r7, #4]
 8023624:	695b      	ldr	r3, [r3, #20]
 8023626:	4618      	mov	r0, r3
 8023628:	f002 fdb8 	bl	802619c <free>
	shutdown(nData->handle,2);
 802362c:	687b      	ldr	r3, [r7, #4]
 802362e:	689b      	ldr	r3, [r3, #8]
 8023630:	2102      	movs	r1, #2
 8023632:	4618      	mov	r0, r3
 8023634:	f7ef f864 	bl	8012700 <lwip_shutdown>
	net_close(nData->handle);
 8023638:	687b      	ldr	r3, [r7, #4]
 802363a:	689b      	ldr	r3, [r3, #8]
 802363c:	4618      	mov	r0, r3
 802363e:	f7ed fd81 	bl	8011144 <lwip_close>
	ctrl = nData->ctrl;
 8023642:	687b      	ldr	r3, [r7, #4]
 8023644:	69db      	ldr	r3, [r3, #28]
 8023646:	60fb      	str	r3, [r7, #12]
	free(nData);
 8023648:	6878      	ldr	r0, [r7, #4]
 802364a:	f002 fda7 	bl	802619c <free>
	if (ctrl)
 802364e:	68fb      	ldr	r3, [r7, #12]
 8023650:	2b00      	cmp	r3, #0
 8023652:	d008      	beq.n	8023666 <FtpClose+0x7c>
	{
	    ctrl->data = NULL;
 8023654:	68fb      	ldr	r3, [r7, #12]
 8023656:	2200      	movs	r2, #0
 8023658:	621a      	str	r2, [r3, #32]
	    return(readresp('2', ctrl));
 802365a:	68f9      	ldr	r1, [r7, #12]
 802365c:	2032      	movs	r0, #50	; 0x32
 802365e:	f7ff f919 	bl	8022894 <readresp>
 8023662:	4603      	mov	r3, r0
 8023664:	e016      	b.n	8023694 <FtpClose+0xaa>
	}
	return 1;
 8023666:	2301      	movs	r3, #1
 8023668:	e014      	b.n	8023694 <FtpClose+0xaa>
      case FTPLIB_CONTROL:
	if (nData->data)
 802366a:	687b      	ldr	r3, [r7, #4]
 802366c:	6a1b      	ldr	r3, [r3, #32]
 802366e:	2b00      	cmp	r3, #0
 8023670:	d005      	beq.n	802367e <FtpClose+0x94>
	{
	    nData->ctrl = NULL;
 8023672:	687b      	ldr	r3, [r7, #4]
 8023674:	2200      	movs	r2, #0
 8023676:	61da      	str	r2, [r3, #28]
	    FtpClose(nData);
 8023678:	6878      	ldr	r0, [r7, #4]
 802367a:	f7ff ffb6 	bl	80235ea <FtpClose>
	}
	net_close(nData->handle);
 802367e:	687b      	ldr	r3, [r7, #4]
 8023680:	689b      	ldr	r3, [r3, #8]
 8023682:	4618      	mov	r0, r3
 8023684:	f7ed fd5e 	bl	8011144 <lwip_close>
	free(nData);
 8023688:	6878      	ldr	r0, [r7, #4]
 802368a:	f002 fd87 	bl	802619c <free>
	return 0;
 802368e:	2300      	movs	r3, #0
 8023690:	e000      	b.n	8023694 <FtpClose+0xaa>
    }
    return 1;
 8023692:	2301      	movs	r3, #1
}
 8023694:	4618      	mov	r0, r3
 8023696:	3710      	adds	r7, #16
 8023698:	46bd      	mov	sp, r7
 802369a:	bd80      	pop	{r7, pc}

0802369c <FtpXfer>:
 *
 * return 1 if successful, 0 otherwise
 */
static int FtpXfer(const char *localfile,const  char *path,
	netbuf *nControl, int typ, int mode)
{
 802369c:	b580      	push	{r7, lr}
 802369e:	b08a      	sub	sp, #40	; 0x28
 80236a0:	af02      	add	r7, sp, #8
 80236a2:	60f8      	str	r0, [r7, #12]
 80236a4:	60b9      	str	r1, [r7, #8]
 80236a6:	607a      	str	r2, [r7, #4]
 80236a8:	603b      	str	r3, [r7, #0]
    int l;
    netbuf *nData;
    int rv=1;
 80236aa:	2301      	movs	r3, #1
 80236ac:	61fb      	str	r3, [r7, #28]
    char *dbuf;
    dbuf = malloc(FTPLIB_BUFSIZ*sizeof(char));
 80236ae:	20c8      	movs	r0, #200	; 0xc8
 80236b0:	f002 fd6c 	bl	802618c <malloc>
 80236b4:	4603      	mov	r3, r0
 80236b6:	61bb      	str	r3, [r7, #24]

    if (!FtpAccess(path, typ, mode, nControl, &nData))
 80236b8:	f107 0310 	add.w	r3, r7, #16
 80236bc:	9300      	str	r3, [sp, #0]
 80236be:	687b      	ldr	r3, [r7, #4]
 80236c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80236c2:	6839      	ldr	r1, [r7, #0]
 80236c4:	68b8      	ldr	r0, [r7, #8]
 80236c6:	f7ff fdc7 	bl	8023258 <FtpAccess>
 80236ca:	4603      	mov	r3, r0
 80236cc:	2b00      	cmp	r3, #0
 80236ce:	d101      	bne.n	80236d4 <FtpXfer+0x38>
    {
        return 0;
 80236d0:	2300      	movs	r3, #0
 80236d2:	e03a      	b.n	802374a <FtpXfer+0xae>
    }
	l = strlen(localfile);						// size of str
 80236d4:	68f8      	ldr	r0, [r7, #12]
 80236d6:	f7dc fe0d 	bl	80002f4 <strlen>
 80236da:	4603      	mov	r3, r0
 80236dc:	617b      	str	r3, [r7, #20]

    if (typ == FTPLIB_FILE_WRITE)
 80236de:	683b      	ldr	r3, [r7, #0]
 80236e0:	2b04      	cmp	r3, #4
 80236e2:	d10b      	bne.n	80236fc <FtpXfer+0x60>
    {
	    if (FtpWrite(localfile, l , nData) == 0)
 80236e4:	693b      	ldr	r3, [r7, #16]
 80236e6:	461a      	mov	r2, r3
 80236e8:	6979      	ldr	r1, [r7, #20]
 80236ea:	68f8      	ldr	r0, [r7, #12]
 80236ec:	f7ff ff2b 	bl	8023546 <FtpWrite>
 80236f0:	4603      	mov	r3, r0
 80236f2:	2b00      	cmp	r3, #0
 80236f4:	d121      	bne.n	802373a <FtpXfer+0x9e>
			rv = 0;
 80236f6:	2300      	movs	r3, #0
 80236f8:	61fb      	str	r3, [r7, #28]
 80236fa:	e01e      	b.n	802373a <FtpXfer+0x9e>
    }
    else if(typ == FTPLIB_DIR_VERBOSE)
 80236fc:	683b      	ldr	r3, [r7, #0]
 80236fe:	2b02      	cmp	r3, #2
 8023700:	d110      	bne.n	8023724 <FtpXfer+0x88>
    {

    	if( FtpRead(dbuf, FTPLIB_BUFSIZ, nData) == 0)
 8023702:	693b      	ldr	r3, [r7, #16]
 8023704:	461a      	mov	r2, r3
 8023706:	21c8      	movs	r1, #200	; 0xc8
 8023708:	69b8      	ldr	r0, [r7, #24]
 802370a:	f7ff febf 	bl	802348c <FtpRead>
 802370e:	4603      	mov	r3, r0
 8023710:	2b00      	cmp	r3, #0
 8023712:	d101      	bne.n	8023718 <FtpXfer+0x7c>
    		rv = 0;
 8023714:	2300      	movs	r3, #0
 8023716:	61fb      	str	r3, [r7, #28]

    	memcpy(localfile, dbuf, SIZE_VERBOSE);
 8023718:	2211      	movs	r2, #17
 802371a:	69b9      	ldr	r1, [r7, #24]
 802371c:	68f8      	ldr	r0, [r7, #12]
 802371e:	f002 fd53 	bl	80261c8 <memcpy>
 8023722:	e00a      	b.n	802373a <FtpXfer+0x9e>

    }
    else
    {
    	if( FtpRead(dbuf, FTPLIB_BUFSIZ, nData) == 0)
 8023724:	693b      	ldr	r3, [r7, #16]
 8023726:	461a      	mov	r2, r3
 8023728:	21c8      	movs	r1, #200	; 0xc8
 802372a:	69b8      	ldr	r0, [r7, #24]
 802372c:	f7ff feae 	bl	802348c <FtpRead>
 8023730:	4603      	mov	r3, r0
 8023732:	2b00      	cmp	r3, #0
 8023734:	d101      	bne.n	802373a <FtpXfer+0x9e>
    		rv = 0;
 8023736:	2300      	movs	r3, #0
 8023738:	61fb      	str	r3, [r7, #28]
    }
    free(dbuf);
 802373a:	69b8      	ldr	r0, [r7, #24]
 802373c:	f002 fd2e 	bl	802619c <free>
    FtpClose(nData);
 8023740:	693b      	ldr	r3, [r7, #16]
 8023742:	4618      	mov	r0, r3
 8023744:	f7ff ff51 	bl	80235ea <FtpClose>
    return rv;
 8023748:	69fb      	ldr	r3, [r7, #28]
}
 802374a:	4618      	mov	r0, r3
 802374c:	3720      	adds	r7, #32
 802374e:	46bd      	mov	sp, r7
 8023750:	bd80      	pop	{r7, pc}

08023752 <FtpPut>:
 *
 * return 1 if successful, 0 otherwise
 */
 int FtpPut(const char *inputfile,const char *path, char mode,
	netbuf *nControl)
{
 8023752:	b580      	push	{r7, lr}
 8023754:	b086      	sub	sp, #24
 8023756:	af02      	add	r7, sp, #8
 8023758:	60f8      	str	r0, [r7, #12]
 802375a:	60b9      	str	r1, [r7, #8]
 802375c:	603b      	str	r3, [r7, #0]
 802375e:	4613      	mov	r3, r2
 8023760:	71fb      	strb	r3, [r7, #7]
    return FtpXfer(inputfile, path, nControl, FTPLIB_FILE_WRITE, mode);
 8023762:	79fb      	ldrb	r3, [r7, #7]
 8023764:	9300      	str	r3, [sp, #0]
 8023766:	2304      	movs	r3, #4
 8023768:	683a      	ldr	r2, [r7, #0]
 802376a:	68b9      	ldr	r1, [r7, #8]
 802376c:	68f8      	ldr	r0, [r7, #12]
 802376e:	f7ff ff95 	bl	802369c <FtpXfer>
 8023772:	4603      	mov	r3, r0
}
 8023774:	4618      	mov	r0, r3
 8023776:	3710      	adds	r7, #16
 8023778:	46bd      	mov	sp, r7
 802377a:	bd80      	pop	{r7, pc}

0802377c <FtpQuit>:
 * FtpQuit - disconnect from remote
 *
 * return 1 if successful, 0 otherwise
 */
 void FtpQuit(netbuf *nControl)
{
 802377c:	b580      	push	{r7, lr}
 802377e:	b082      	sub	sp, #8
 8023780:	af00      	add	r7, sp, #0
 8023782:	6078      	str	r0, [r7, #4]
    if (nControl->dir != FTPLIB_CONTROL)
 8023784:	687b      	ldr	r3, [r7, #4]
 8023786:	699b      	ldr	r3, [r3, #24]
 8023788:	2b00      	cmp	r3, #0
 802378a:	d112      	bne.n	80237b2 <FtpQuit+0x36>
	return;
    FtpSendCmd("QUIT",'2',nControl);
 802378c:	687a      	ldr	r2, [r7, #4]
 802378e:	2132      	movs	r1, #50	; 0x32
 8023790:	480a      	ldr	r0, [pc, #40]	; (80237bc <FtpQuit+0x40>)
 8023792:	f7ff f9d3 	bl	8022b3c <FtpSendCmd>
    net_close(nControl->handle);
 8023796:	687b      	ldr	r3, [r7, #4]
 8023798:	689b      	ldr	r3, [r3, #8]
 802379a:	4618      	mov	r0, r3
 802379c:	f7ed fcd2 	bl	8011144 <lwip_close>
    free(nControl->buf);
 80237a0:	687b      	ldr	r3, [r7, #4]
 80237a2:	695b      	ldr	r3, [r3, #20]
 80237a4:	4618      	mov	r0, r3
 80237a6:	f002 fcf9 	bl	802619c <free>
    free(nControl);
 80237aa:	6878      	ldr	r0, [r7, #4]
 80237ac:	f002 fcf6 	bl	802619c <free>
 80237b0:	e000      	b.n	80237b4 <FtpQuit+0x38>
	return;
 80237b2:	bf00      	nop
}
 80237b4:	3708      	adds	r7, #8
 80237b6:	46bd      	mov	sp, r7
 80237b8:	bd80      	pop	{r7, pc}
 80237ba:	bf00      	nop
 80237bc:	0802e4c0 	.word	0x0802e4c0

080237c0 <String_FTP>:

static void String_FTP()
{
 80237c0:	b480      	push	{r7}
 80237c2:	af00      	add	r7, sp, #0
	ftp_set.s_time = "10:15";
 80237c4:	4b0e      	ldr	r3, [pc, #56]	; (8023800 <String_FTP+0x40>)
 80237c6:	4a0f      	ldr	r2, [pc, #60]	; (8023804 <String_FTP+0x44>)
 80237c8:	601a      	str	r2, [r3, #0]
	ftp_set.Interval = 1;
 80237ca:	4b0d      	ldr	r3, [pc, #52]	; (8023800 <String_FTP+0x40>)
 80237cc:	2201      	movs	r2, #1
 80237ce:	61da      	str	r2, [r3, #28]
	ftp_set.url = "192.168.2.104" ;
 80237d0:	4b0b      	ldr	r3, [pc, #44]	; (8023800 <String_FTP+0x40>)
 80237d2:	4a0d      	ldr	r2, [pc, #52]	; (8023808 <String_FTP+0x48>)
 80237d4:	605a      	str	r2, [r3, #4]
	ftp_set.port_n = 21;
 80237d6:	4b0a      	ldr	r3, [pc, #40]	; (8023800 <String_FTP+0x40>)
 80237d8:	2215      	movs	r2, #21
 80237da:	615a      	str	r2, [r3, #20]
	ftp_set.user = "test";
 80237dc:	4b08      	ldr	r3, [pc, #32]	; (8023800 <String_FTP+0x40>)
 80237de:	4a0b      	ldr	r2, [pc, #44]	; (802380c <String_FTP+0x4c>)
 80237e0:	609a      	str	r2, [r3, #8]
	ftp_set.pass = "1";
 80237e2:	4b07      	ldr	r3, [pc, #28]	; (8023800 <String_FTP+0x40>)
 80237e4:	4a0a      	ldr	r2, [pc, #40]	; (8023810 <String_FTP+0x50>)
 80237e6:	60da      	str	r2, [r3, #12]
	ftp_set.file_name = "vuighe.txt";
 80237e8:	4b05      	ldr	r3, [pc, #20]	; (8023800 <String_FTP+0x40>)
 80237ea:	4a0a      	ldr	r2, [pc, #40]	; (8023814 <String_FTP+0x54>)
 80237ec:	611a      	str	r2, [r3, #16]
	ftp_set.h_interval = 2;
 80237ee:	4b04      	ldr	r3, [pc, #16]	; (8023800 <String_FTP+0x40>)
 80237f0:	2202      	movs	r2, #2
 80237f2:	619a      	str	r2, [r3, #24]
}
 80237f4:	bf00      	nop
 80237f6:	46bd      	mov	sp, r7
 80237f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237fc:	4770      	bx	lr
 80237fe:	bf00      	nop
 8023800:	240050e0 	.word	0x240050e0
 8023804:	0802e4c8 	.word	0x0802e4c8
 8023808:	0802e4d0 	.word	0x0802e4d0
 802380c:	0802e4e0 	.word	0x0802e4e0
 8023810:	0802e4e8 	.word	0x0802e4e8
 8023814:	0802e4ec 	.word	0x0802e4ec

08023818 <Init_FTP>:

static HAL_StatusTypeDef Init_FTP()
{
 8023818:	b580      	push	{r7, lr}
 802381a:	b082      	sub	sp, #8
 802381c:	af00      	add	r7, sp, #0
  uint8_t ret = 0;
 802381e:	2300      	movs	r3, #0
 8023820:	71fb      	strb	r3, [r7, #7]

  /* Connect to ftp server */
  ret = FtpConnect(ftp_set.url, &FTP_Control);
 8023822:	4b11      	ldr	r3, [pc, #68]	; (8023868 <Init_FTP+0x50>)
 8023824:	685b      	ldr	r3, [r3, #4]
 8023826:	4911      	ldr	r1, [pc, #68]	; (802386c <Init_FTP+0x54>)
 8023828:	4618      	mov	r0, r3
 802382a:	f7ff f89d 	bl	8022968 <FtpConnect>
 802382e:	4603      	mov	r3, r0
 8023830:	71fb      	strb	r3, [r7, #7]
  if (ret != 1)
 8023832:	79fb      	ldrb	r3, [r7, #7]
 8023834:	2b01      	cmp	r3, #1
 8023836:	d001      	beq.n	802383c <Init_FTP+0x24>
	  return HAL_ERROR;
 8023838:	2301      	movs	r3, #1
 802383a:	e010      	b.n	802385e <Init_FTP+0x46>

  /* Login to ftp server */
  ret = FtpLogin(ftp_set.user, ftp_set.pass, FTP_Control);
 802383c:	4b0a      	ldr	r3, [pc, #40]	; (8023868 <Init_FTP+0x50>)
 802383e:	689b      	ldr	r3, [r3, #8]
 8023840:	4a09      	ldr	r2, [pc, #36]	; (8023868 <Init_FTP+0x50>)
 8023842:	68d1      	ldr	r1, [r2, #12]
 8023844:	4a09      	ldr	r2, [pc, #36]	; (802386c <Init_FTP+0x54>)
 8023846:	6812      	ldr	r2, [r2, #0]
 8023848:	4618      	mov	r0, r3
 802384a:	f7ff f9d5 	bl	8022bf8 <FtpLogin>
 802384e:	4603      	mov	r3, r0
 8023850:	71fb      	strb	r3, [r7, #7]
  if (ret != 1)
 8023852:	79fb      	ldrb	r3, [r7, #7]
 8023854:	2b01      	cmp	r3, #1
 8023856:	d001      	beq.n	802385c <Init_FTP+0x44>
	  return HAL_ERROR;
 8023858:	2301      	movs	r3, #1
 802385a:	e000      	b.n	802385e <Init_FTP+0x46>

  return HAL_OK;
 802385c:	2300      	movs	r3, #0
 }
 802385e:	4618      	mov	r0, r3
 8023860:	3708      	adds	r7, #8
 8023862:	46bd      	mov	sp, r7
 8023864:	bd80      	pop	{r7, pc}
 8023866:	bf00      	nop
 8023868:	240050e0 	.word	0x240050e0
 802386c:	240050dc 	.word	0x240050dc

08023870 <App_Ftp>:


void App_Ftp(char* data) {
 8023870:	b580      	push	{r7, lr}
 8023872:	b082      	sub	sp, #8
 8023874:	af00      	add	r7, sp, #0
 8023876:	6078      	str	r0, [r7, #4]

	String_FTP();
 8023878:	f7ff ffa2 	bl	80237c0 <String_FTP>
	osDelay(1000);
 802387c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8023880:	f7e7 fc7d 	bl	800b17e <osDelay>

	FTP_Control = calloc(1,sizeof(netbuf));
 8023884:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8023888:	2001      	movs	r0, #1
 802388a:	f002 f9c3 	bl	8025c14 <calloc>
 802388e:	4603      	mov	r3, r0
 8023890:	461a      	mov	r2, r3
 8023892:	4b13      	ldr	r3, [pc, #76]	; (80238e0 <App_Ftp+0x70>)
 8023894:	601a      	str	r2, [r3, #0]

	Init_FTP();
 8023896:	f7ff ffbf 	bl	8023818 <Init_FTP>
	osDelay(1000);
 802389a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 802389e:	f7e7 fc6e 	bl	800b17e <osDelay>
	FtpPut(data, ftp_set.file_name, FTPLIB_BINARY, FTP_Control);
 80238a2:	4b10      	ldr	r3, [pc, #64]	; (80238e4 <App_Ftp+0x74>)
 80238a4:	6919      	ldr	r1, [r3, #16]
 80238a6:	4b0e      	ldr	r3, [pc, #56]	; (80238e0 <App_Ftp+0x70>)
 80238a8:	681b      	ldr	r3, [r3, #0]
 80238aa:	2249      	movs	r2, #73	; 0x49
 80238ac:	6878      	ldr	r0, [r7, #4]
 80238ae:	f7ff ff50 	bl	8023752 <FtpPut>
	osDelay(1000);
 80238b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80238b6:	f7e7 fc62 	bl	800b17e <osDelay>
	FtpQuit(FTP_Control);
 80238ba:	4b09      	ldr	r3, [pc, #36]	; (80238e0 <App_Ftp+0x70>)
 80238bc:	681b      	ldr	r3, [r3, #0]
 80238be:	4618      	mov	r0, r3
 80238c0:	f7ff ff5c 	bl	802377c <FtpQuit>
	osDelay(1000);
 80238c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80238c8:	f7e7 fc59 	bl	800b17e <osDelay>
	free(FTP_Control);
 80238cc:	4b04      	ldr	r3, [pc, #16]	; (80238e0 <App_Ftp+0x70>)
 80238ce:	681b      	ldr	r3, [r3, #0]
 80238d0:	4618      	mov	r0, r3
 80238d2:	f002 fc63 	bl	802619c <free>
 }
 80238d6:	bf00      	nop
 80238d8:	3708      	adds	r7, #8
 80238da:	46bd      	mov	sp, r7
 80238dc:	bd80      	pop	{r7, pc}
 80238de:	bf00      	nop
 80238e0:	240050dc 	.word	0x240050dc
 80238e4:	240050e0 	.word	0x240050e0

080238e8 <Network_Task>:
osMessageQId NetworkQueueHandle;

volatile time_t sys_time;

void Network_Task(void const *argument)
{
 80238e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80238ea:	b097      	sub	sp, #92	; 0x5c
 80238ec:	af04      	add	r7, sp, #16
 80238ee:	6078      	str	r0, [r7, #4]
	osEvent event;
	osMessageQDef(myQueue02, 32, uint16_t);
 80238f0:	4b59      	ldr	r3, [pc, #356]	; (8023a58 <Network_Task+0x170>)
 80238f2:	f107 0628 	add.w	r6, r7, #40	; 0x28
 80238f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80238f8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	NetworkQueueHandle = osMessageCreate(osMessageQ(myQueue02), NULL);
 80238fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8023900:	2100      	movs	r1, #0
 8023902:	4618      	mov	r0, r3
 8023904:	f7e7 fdb5 	bl	800b472 <osMessageCreate>
 8023908:	4603      	mov	r3, r0
 802390a:	4a54      	ldr	r2, [pc, #336]	; (8023a5c <Network_Task+0x174>)
 802390c:	6013      	str	r3, [r2, #0]

	/* init code for LWIP */
	MX_LWIP_Init();
 802390e:	f7e6 fef7 	bl	800a700 <MX_LWIP_Init>
	osDelay(1000);
 8023912:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8023916:	f7e7 fc32 	bl	800b17e <osDelay>
	//tcp_echoserver_init();
	HAL_TIM_Base_Start_IT(&htim2);
 802391a:	4851      	ldr	r0, [pc, #324]	; (8023a60 <Network_Task+0x178>)
 802391c:	f7e3 fef4 	bl	8007708 <HAL_TIM_Base_Start_IT>

    sntp_setoperatingmode(SNTP_OPMODE_POLL);
 8023920:	2000      	movs	r0, #0
 8023922:	f7ef fb8d 	bl	8013040 <sntp_setoperatingmode>
    sntp_setservername(0, "pool.ntp.org");
 8023926:	494f      	ldr	r1, [pc, #316]	; (8023a64 <Network_Task+0x17c>)
 8023928:	2000      	movs	r0, #0
 802392a:	f7ef fbb7 	bl	801309c <sntp_setservername>
    sntp_init();
 802392e:	f7ef fb1f 	bl	8012f70 <sntp_init>

	while(1)
	{
		event = osMessageGet(NetworkQueueHandle, 10);
 8023932:	4b4a      	ldr	r3, [pc, #296]	; (8023a5c <Network_Task+0x174>)
 8023934:	6819      	ldr	r1, [r3, #0]
 8023936:	f107 0338 	add.w	r3, r7, #56	; 0x38
 802393a:	220a      	movs	r2, #10
 802393c:	4618      	mov	r0, r3
 802393e:	f7e7 fe01 	bl	800b544 <osMessageGet>
		if( event.status == osEventMessage )
 8023942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023944:	2b10      	cmp	r3, #16
 8023946:	f040 8081 	bne.w	8023a4c <Network_Task+0x164>
		{
			switch(event.value.v)
 802394a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802394c:	2b01      	cmp	r3, #1
 802394e:	d002      	beq.n	8023956 <Network_Task+0x6e>
 8023950:	2b02      	cmp	r3, #2
 8023952:	d032      	beq.n	80239ba <Network_Task+0xd2>
					sDateSys.Year = (curDate->tm_year) + 1900 - 2000;
					HAL_RTC_SetDate(&hrtc, &sDateSys, RTC_FORMAT_BIN);
				}
				break;
				default:
					break;
 8023954:	e07b      	b.n	8023a4e <Network_Task+0x166>
					HAL_RTC_GetTime(&hrtc,&sTimeSys,RTC_FORMAT_BIN);
 8023956:	2200      	movs	r2, #0
 8023958:	4943      	ldr	r1, [pc, #268]	; (8023a68 <Network_Task+0x180>)
 802395a:	4844      	ldr	r0, [pc, #272]	; (8023a6c <Network_Task+0x184>)
 802395c:	f7e3 fc78 	bl	8007250 <HAL_RTC_GetTime>
					HAL_RTC_GetDate(&hrtc,&sDateSys,RTC_FORMAT_BIN);
 8023960:	2200      	movs	r2, #0
 8023962:	4943      	ldr	r1, [pc, #268]	; (8023a70 <Network_Task+0x188>)
 8023964:	4841      	ldr	r0, [pc, #260]	; (8023a6c <Network_Task+0x184>)
 8023966:	f7e3 fd57 	bl	8007418 <HAL_RTC_GetDate>
					sprintf(dateTime,"%02d:%02d:%02d - %d/%d/%d\r\n", sTimeSys.Hours, sTimeSys.Minutes, sTimeSys.Seconds, sDateSys.Date, sDateSys.Month, sDateSys.Year);
 802396a:	4b3f      	ldr	r3, [pc, #252]	; (8023a68 <Network_Task+0x180>)
 802396c:	781b      	ldrb	r3, [r3, #0]
 802396e:	469c      	mov	ip, r3
 8023970:	4b3d      	ldr	r3, [pc, #244]	; (8023a68 <Network_Task+0x180>)
 8023972:	785b      	ldrb	r3, [r3, #1]
 8023974:	469e      	mov	lr, r3
 8023976:	4b3c      	ldr	r3, [pc, #240]	; (8023a68 <Network_Task+0x180>)
 8023978:	789b      	ldrb	r3, [r3, #2]
 802397a:	461a      	mov	r2, r3
 802397c:	4b3c      	ldr	r3, [pc, #240]	; (8023a70 <Network_Task+0x188>)
 802397e:	789b      	ldrb	r3, [r3, #2]
 8023980:	4619      	mov	r1, r3
 8023982:	4b3b      	ldr	r3, [pc, #236]	; (8023a70 <Network_Task+0x188>)
 8023984:	785b      	ldrb	r3, [r3, #1]
 8023986:	461e      	mov	r6, r3
 8023988:	4b39      	ldr	r3, [pc, #228]	; (8023a70 <Network_Task+0x188>)
 802398a:	78db      	ldrb	r3, [r3, #3]
 802398c:	f107 0008 	add.w	r0, r7, #8
 8023990:	9303      	str	r3, [sp, #12]
 8023992:	9602      	str	r6, [sp, #8]
 8023994:	9101      	str	r1, [sp, #4]
 8023996:	9200      	str	r2, [sp, #0]
 8023998:	4673      	mov	r3, lr
 802399a:	4662      	mov	r2, ip
 802399c:	4935      	ldr	r1, [pc, #212]	; (8023a74 <Network_Task+0x18c>)
 802399e:	f003 fbe1 	bl	8027164 <siprintf>
					printf("%s",dateTime);
 80239a2:	f107 0308 	add.w	r3, r7, #8
 80239a6:	4619      	mov	r1, r3
 80239a8:	4833      	ldr	r0, [pc, #204]	; (8023a78 <Network_Task+0x190>)
 80239aa:	f003 fa93 	bl	8026ed4 <iprintf>
					App_Ftp(dateTime);
 80239ae:	f107 0308 	add.w	r3, r7, #8
 80239b2:	4618      	mov	r0, r3
 80239b4:	f7ff ff5c 	bl	8023870 <App_Ftp>
				break;
 80239b8:	e049      	b.n	8023a4e <Network_Task+0x166>
			        sys_time += (7 * 60 * 60);
 80239ba:	4b30      	ldr	r3, [pc, #192]	; (8023a7c <Network_Task+0x194>)
 80239bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80239c0:	f246 2070 	movw	r0, #25200	; 0x6270
 80239c4:	f04f 0100 	mov.w	r1, #0
 80239c8:	1814      	adds	r4, r2, r0
 80239ca:	eb43 0501 	adc.w	r5, r3, r1
 80239ce:	4b2b      	ldr	r3, [pc, #172]	; (8023a7c <Network_Task+0x194>)
 80239d0:	e9c3 4500 	strd	r4, r5, [r3]
			        curDate = localtime(&sys_time);
 80239d4:	4829      	ldr	r0, [pc, #164]	; (8023a7c <Network_Task+0x194>)
 80239d6:	f002 fabf 	bl	8025f58 <localtime>
 80239da:	6478      	str	r0, [r7, #68]	; 0x44
					sTimeSys.Hours = curDate->tm_hour;
 80239dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80239de:	689b      	ldr	r3, [r3, #8]
 80239e0:	b2da      	uxtb	r2, r3
 80239e2:	4b21      	ldr	r3, [pc, #132]	; (8023a68 <Network_Task+0x180>)
 80239e4:	701a      	strb	r2, [r3, #0]
					sTimeSys.Minutes = curDate->tm_min;
 80239e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80239e8:	685b      	ldr	r3, [r3, #4]
 80239ea:	b2da      	uxtb	r2, r3
 80239ec:	4b1e      	ldr	r3, [pc, #120]	; (8023a68 <Network_Task+0x180>)
 80239ee:	705a      	strb	r2, [r3, #1]
					sTimeSys.Seconds = curDate->tm_sec;
 80239f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80239f2:	681b      	ldr	r3, [r3, #0]
 80239f4:	b2da      	uxtb	r2, r3
 80239f6:	4b1c      	ldr	r3, [pc, #112]	; (8023a68 <Network_Task+0x180>)
 80239f8:	709a      	strb	r2, [r3, #2]
					sTimeSys.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80239fa:	4b1b      	ldr	r3, [pc, #108]	; (8023a68 <Network_Task+0x180>)
 80239fc:	2200      	movs	r2, #0
 80239fe:	60da      	str	r2, [r3, #12]
					sTimeSys.StoreOperation = RTC_STOREOPERATION_RESET;
 8023a00:	4b19      	ldr	r3, [pc, #100]	; (8023a68 <Network_Task+0x180>)
 8023a02:	2200      	movs	r2, #0
 8023a04:	611a      	str	r2, [r3, #16]
					HAL_RTC_SetTime(&hrtc, &sTimeSys, RTC_FORMAT_BIN);
 8023a06:	2200      	movs	r2, #0
 8023a08:	4917      	ldr	r1, [pc, #92]	; (8023a68 <Network_Task+0x180>)
 8023a0a:	4818      	ldr	r0, [pc, #96]	; (8023a6c <Network_Task+0x184>)
 8023a0c:	f7e3 fb82 	bl	8007114 <HAL_RTC_SetTime>
					sDateSys.WeekDay = curDate->tm_wday;
 8023a10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023a12:	699b      	ldr	r3, [r3, #24]
 8023a14:	b2da      	uxtb	r2, r3
 8023a16:	4b16      	ldr	r3, [pc, #88]	; (8023a70 <Network_Task+0x188>)
 8023a18:	701a      	strb	r2, [r3, #0]
					sDateSys.Month = (curDate->tm_mon) + 1;
 8023a1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023a1c:	691b      	ldr	r3, [r3, #16]
 8023a1e:	b2db      	uxtb	r3, r3
 8023a20:	3301      	adds	r3, #1
 8023a22:	b2da      	uxtb	r2, r3
 8023a24:	4b12      	ldr	r3, [pc, #72]	; (8023a70 <Network_Task+0x188>)
 8023a26:	705a      	strb	r2, [r3, #1]
					sDateSys.Date = curDate->tm_mday;
 8023a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023a2a:	68db      	ldr	r3, [r3, #12]
 8023a2c:	b2da      	uxtb	r2, r3
 8023a2e:	4b10      	ldr	r3, [pc, #64]	; (8023a70 <Network_Task+0x188>)
 8023a30:	709a      	strb	r2, [r3, #2]
					sDateSys.Year = (curDate->tm_year) + 1900 - 2000;
 8023a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023a34:	695b      	ldr	r3, [r3, #20]
 8023a36:	b2db      	uxtb	r3, r3
 8023a38:	3b64      	subs	r3, #100	; 0x64
 8023a3a:	b2da      	uxtb	r2, r3
 8023a3c:	4b0c      	ldr	r3, [pc, #48]	; (8023a70 <Network_Task+0x188>)
 8023a3e:	70da      	strb	r2, [r3, #3]
					HAL_RTC_SetDate(&hrtc, &sDateSys, RTC_FORMAT_BIN);
 8023a40:	2200      	movs	r2, #0
 8023a42:	490b      	ldr	r1, [pc, #44]	; (8023a70 <Network_Task+0x188>)
 8023a44:	4809      	ldr	r0, [pc, #36]	; (8023a6c <Network_Task+0x184>)
 8023a46:	f7e3 fc5f 	bl	8007308 <HAL_RTC_SetDate>
				break;
 8023a4a:	e000      	b.n	8023a4e <Network_Task+0x166>
			}
		}
 8023a4c:	bf00      	nop
		osDelay(1);
 8023a4e:	2001      	movs	r0, #1
 8023a50:	f7e7 fb95 	bl	800b17e <osDelay>
		event = osMessageGet(NetworkQueueHandle, 10);
 8023a54:	e76d      	b.n	8023932 <Network_Task+0x4a>
 8023a56:	bf00      	nop
 8023a58:	0802e56c 	.word	0x0802e56c
 8023a5c:	240088b0 	.word	0x240088b0
 8023a60:	24008734 	.word	0x24008734
 8023a64:	0802e53c 	.word	0x0802e53c
 8023a68:	240088b4 	.word	0x240088b4
 8023a6c:	24008710 	.word	0x24008710
 8023a70:	240088a0 	.word	0x240088a0
 8023a74:	0802e54c 	.word	0x0802e54c
 8023a78:	0802e568 	.word	0x0802e568
 8023a7c:	240088a8 	.word	0x240088a8

08023a80 <lwip_sntp_recv_callback>:
	}
}

void lwip_sntp_recv_callback(uint32_t time)
{
 8023a80:	b580      	push	{r7, lr}
 8023a82:	b082      	sub	sp, #8
 8023a84:	af00      	add	r7, sp, #0
 8023a86:	6078      	str	r0, [r7, #4]
    if (time == 0)
 8023a88:	687b      	ldr	r3, [r7, #4]
 8023a8a:	2b00      	cmp	r3, #0
 8023a8c:	d103      	bne.n	8023a96 <lwip_sntp_recv_callback+0x16>
    {
    	printf("NTP: Error, server not responding or bad response\r\n");
 8023a8e:	480b      	ldr	r0, [pc, #44]	; (8023abc <lwip_sntp_recv_callback+0x3c>)
 8023a90:	f003 faa6 	bl	8026fe0 <puts>
    else
    {
    	sys_time = time;
    	osMessagePut(NetworkQueueHandle, APP_E_NETWORK_GET_TIME, 0);
    }
}
 8023a94:	e00d      	b.n	8023ab2 <lwip_sntp_recv_callback+0x32>
    	sys_time = time;
 8023a96:	687b      	ldr	r3, [r7, #4]
 8023a98:	461a      	mov	r2, r3
 8023a9a:	f04f 0300 	mov.w	r3, #0
 8023a9e:	4908      	ldr	r1, [pc, #32]	; (8023ac0 <lwip_sntp_recv_callback+0x40>)
 8023aa0:	e9c1 2300 	strd	r2, r3, [r1]
    	osMessagePut(NetworkQueueHandle, APP_E_NETWORK_GET_TIME, 0);
 8023aa4:	4b07      	ldr	r3, [pc, #28]	; (8023ac4 <lwip_sntp_recv_callback+0x44>)
 8023aa6:	681b      	ldr	r3, [r3, #0]
 8023aa8:	2200      	movs	r2, #0
 8023aaa:	2102      	movs	r1, #2
 8023aac:	4618      	mov	r0, r3
 8023aae:	f7e7 fd09 	bl	800b4c4 <osMessagePut>
}
 8023ab2:	bf00      	nop
 8023ab4:	3708      	adds	r7, #8
 8023ab6:	46bd      	mov	sp, r7
 8023ab8:	bd80      	pop	{r7, pc}
 8023aba:	bf00      	nop
 8023abc:	0802e57c 	.word	0x0802e57c
 8023ac0:	240088a8 	.word	0x240088a8
 8023ac4:	240088b0 	.word	0x240088b0

08023ac8 <appStartRountine>:
tsCellular_t cellular;
tsVirtualSensor_t virtualSensorList[15];
uint8_t u8SorttingChannel[50];

void appStartRountine(void)
{
 8023ac8:	b5b0      	push	{r4, r5, r7, lr}
 8023aca:	b082      	sub	sp, #8
 8023acc:	af00      	add	r7, sp, #0
	/* Init overview info */
	strcpy((char*)overview.modelName, "DSL-21");
 8023ace:	4bc2      	ldr	r3, [pc, #776]	; (8023dd8 <appStartRountine+0x310>)
 8023ad0:	4ac2      	ldr	r2, [pc, #776]	; (8023ddc <appStartRountine+0x314>)
 8023ad2:	6810      	ldr	r0, [r2, #0]
 8023ad4:	6018      	str	r0, [r3, #0]
 8023ad6:	8891      	ldrh	r1, [r2, #4]
 8023ad8:	7992      	ldrb	r2, [r2, #6]
 8023ada:	8099      	strh	r1, [r3, #4]
 8023adc:	719a      	strb	r2, [r3, #6]
	strcpy((char*)overview.serialNumber, "SR6868");
 8023ade:	4bc0      	ldr	r3, [pc, #768]	; (8023de0 <appStartRountine+0x318>)
 8023ae0:	4ac0      	ldr	r2, [pc, #768]	; (8023de4 <appStartRountine+0x31c>)
 8023ae2:	6810      	ldr	r0, [r2, #0]
 8023ae4:	6018      	str	r0, [r3, #0]
 8023ae6:	8891      	ldrh	r1, [r2, #4]
 8023ae8:	7992      	ldrb	r2, [r2, #6]
 8023aea:	8099      	strh	r1, [r3, #4]
 8023aec:	719a      	strb	r2, [r3, #6]
	strcpy((char*)overview.firmwareVer, "REV 1.1");
 8023aee:	4bba      	ldr	r3, [pc, #744]	; (8023dd8 <appStartRountine+0x310>)
 8023af0:	49bd      	ldr	r1, [pc, #756]	; (8023de8 <appStartRountine+0x320>)
 8023af2:	f103 0210 	add.w	r2, r3, #16
 8023af6:	460b      	mov	r3, r1
 8023af8:	cb03      	ldmia	r3!, {r0, r1}
 8023afa:	6010      	str	r0, [r2, #0]
 8023afc:	6051      	str	r1, [r2, #4]
	strcpy((char*)overview.macAddress, "AA:BB:CC:DD:EE:FF");
 8023afe:	4abb      	ldr	r2, [pc, #748]	; (8023dec <appStartRountine+0x324>)
 8023b00:	4bbb      	ldr	r3, [pc, #748]	; (8023df0 <appStartRountine+0x328>)
 8023b02:	4615      	mov	r5, r2
 8023b04:	461c      	mov	r4, r3
 8023b06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8023b08:	6028      	str	r0, [r5, #0]
 8023b0a:	6069      	str	r1, [r5, #4]
 8023b0c:	60aa      	str	r2, [r5, #8]
 8023b0e:	60eb      	str	r3, [r5, #12]
 8023b10:	8823      	ldrh	r3, [r4, #0]
 8023b12:	822b      	strh	r3, [r5, #16]
	strcpy((char*)overview.batteryVolt, "12V");
 8023b14:	4bb7      	ldr	r3, [pc, #732]	; (8023df4 <appStartRountine+0x32c>)
 8023b16:	4ab8      	ldr	r2, [pc, #736]	; (8023df8 <appStartRountine+0x330>)
 8023b18:	6810      	ldr	r0, [r2, #0]
 8023b1a:	6018      	str	r0, [r3, #0]

	/* Init setting info */
	strcpy((char*)setting.stationName, "HaNoi");
 8023b1c:	4bb7      	ldr	r3, [pc, #732]	; (8023dfc <appStartRountine+0x334>)
 8023b1e:	4ab8      	ldr	r2, [pc, #736]	; (8023e00 <appStartRountine+0x338>)
 8023b20:	6810      	ldr	r0, [r2, #0]
 8023b22:	6018      	str	r0, [r3, #0]
 8023b24:	8892      	ldrh	r2, [r2, #4]
 8023b26:	809a      	strh	r2, [r3, #4]
	strcpy((char*)setting.stationID, "2930");
 8023b28:	4bb6      	ldr	r3, [pc, #728]	; (8023e04 <appStartRountine+0x33c>)
 8023b2a:	4ab7      	ldr	r2, [pc, #732]	; (8023e08 <appStartRountine+0x340>)
 8023b2c:	6810      	ldr	r0, [r2, #0]
 8023b2e:	6018      	str	r0, [r3, #0]
 8023b30:	7912      	ldrb	r2, [r2, #4]
 8023b32:	711a      	strb	r2, [r3, #4]
	strcpy((char*)setting.dateTime, "2022/01/01 00:00:00");
 8023b34:	4ab5      	ldr	r2, [pc, #724]	; (8023e0c <appStartRountine+0x344>)
 8023b36:	4bb6      	ldr	r3, [pc, #728]	; (8023e10 <appStartRountine+0x348>)
 8023b38:	4615      	mov	r5, r2
 8023b3a:	461c      	mov	r4, r3
 8023b3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8023b3e:	6028      	str	r0, [r5, #0]
 8023b40:	6069      	str	r1, [r5, #4]
 8023b42:	60aa      	str	r2, [r5, #8]
 8023b44:	60eb      	str	r3, [r5, #12]
 8023b46:	6820      	ldr	r0, [r4, #0]
 8023b48:	6128      	str	r0, [r5, #16]
	strcpy((char*)setting.ipAddress, "172.36.17.88");
 8023b4a:	4ab2      	ldr	r2, [pc, #712]	; (8023e14 <appStartRountine+0x34c>)
 8023b4c:	4bb2      	ldr	r3, [pc, #712]	; (8023e18 <appStartRountine+0x350>)
 8023b4e:	4614      	mov	r4, r2
 8023b50:	cb07      	ldmia	r3!, {r0, r1, r2}
 8023b52:	6020      	str	r0, [r4, #0]
 8023b54:	6061      	str	r1, [r4, #4]
 8023b56:	60a2      	str	r2, [r4, #8]
 8023b58:	781b      	ldrb	r3, [r3, #0]
 8023b5a:	7323      	strb	r3, [r4, #12]
	strcpy((char*)setting.subnetMask, "255.255.255.0");
 8023b5c:	4aaf      	ldr	r2, [pc, #700]	; (8023e1c <appStartRountine+0x354>)
 8023b5e:	4bb0      	ldr	r3, [pc, #704]	; (8023e20 <appStartRountine+0x358>)
 8023b60:	4614      	mov	r4, r2
 8023b62:	cb07      	ldmia	r3!, {r0, r1, r2}
 8023b64:	6020      	str	r0, [r4, #0]
 8023b66:	6061      	str	r1, [r4, #4]
 8023b68:	60a2      	str	r2, [r4, #8]
 8023b6a:	881b      	ldrh	r3, [r3, #0]
 8023b6c:	81a3      	strh	r3, [r4, #12]
	strcpy((char*)setting.gateway, "172.36.17.1");
 8023b6e:	4aad      	ldr	r2, [pc, #692]	; (8023e24 <appStartRountine+0x35c>)
 8023b70:	4bad      	ldr	r3, [pc, #692]	; (8023e28 <appStartRountine+0x360>)
 8023b72:	4614      	mov	r4, r2
 8023b74:	cb07      	ldmia	r3!, {r0, r1, r2}
 8023b76:	6020      	str	r0, [r4, #0]
 8023b78:	6061      	str	r1, [r4, #4]
 8023b7a:	60a2      	str	r2, [r4, #8]

	/* Init analog info */
	uint8_t u8Index, u8Channel[6];

	for (u8Index = 0; u8Index < 12; u8Index++)
 8023b7c:	2300      	movs	r3, #0
 8023b7e:	71fb      	strb	r3, [r7, #7]
 8023b80:	e089      	b.n	8023c96 <appStartRountine+0x1ce>
	{
		sprintf(u8Channel, "AI%d", u8Index+1);
 8023b82:	79fb      	ldrb	r3, [r7, #7]
 8023b84:	1c5a      	adds	r2, r3, #1
 8023b86:	463b      	mov	r3, r7
 8023b88:	49a8      	ldr	r1, [pc, #672]	; (8023e2c <appStartRountine+0x364>)
 8023b8a:	4618      	mov	r0, r3
 8023b8c:	f003 faea 	bl	8027164 <siprintf>
		strcpy((char*)analogSettingList[u8Index].channel, u8Channel);
 8023b90:	79fa      	ldrb	r2, [r7, #7]
 8023b92:	4613      	mov	r3, r2
 8023b94:	015b      	lsls	r3, r3, #5
 8023b96:	1a9b      	subs	r3, r3, r2
 8023b98:	005b      	lsls	r3, r3, #1
 8023b9a:	4aa5      	ldr	r2, [pc, #660]	; (8023e30 <appStartRountine+0x368>)
 8023b9c:	4413      	add	r3, r2
 8023b9e:	463a      	mov	r2, r7
 8023ba0:	4611      	mov	r1, r2
 8023ba2:	4618      	mov	r0, r3
 8023ba4:	f003 fb7c 	bl	80272a0 <strcpy>
		strcpy((char*)analogSettingList[u8Index].name, "Analog");
 8023ba8:	79fa      	ldrb	r2, [r7, #7]
 8023baa:	4613      	mov	r3, r2
 8023bac:	015b      	lsls	r3, r3, #5
 8023bae:	1a9b      	subs	r3, r3, r2
 8023bb0:	005b      	lsls	r3, r3, #1
 8023bb2:	3310      	adds	r3, #16
 8023bb4:	4a9e      	ldr	r2, [pc, #632]	; (8023e30 <appStartRountine+0x368>)
 8023bb6:	4413      	add	r3, r2
 8023bb8:	4a9e      	ldr	r2, [pc, #632]	; (8023e34 <appStartRountine+0x36c>)
 8023bba:	6810      	ldr	r0, [r2, #0]
 8023bbc:	6018      	str	r0, [r3, #0]
 8023bbe:	8891      	ldrh	r1, [r2, #4]
 8023bc0:	7992      	ldrb	r2, [r2, #6]
 8023bc2:	8099      	strh	r1, [r3, #4]
 8023bc4:	719a      	strb	r2, [r3, #6]
		strcpy((char*)analogSettingList[u8Index].status, "Disabled");
 8023bc6:	79fa      	ldrb	r2, [r7, #7]
 8023bc8:	4613      	mov	r3, r2
 8023bca:	015b      	lsls	r3, r3, #5
 8023bcc:	1a9b      	subs	r3, r3, r2
 8023bce:	005b      	lsls	r3, r3, #1
 8023bd0:	4a97      	ldr	r2, [pc, #604]	; (8023e30 <appStartRountine+0x368>)
 8023bd2:	4413      	add	r3, r2
 8023bd4:	3306      	adds	r3, #6
 8023bd6:	4998      	ldr	r1, [pc, #608]	; (8023e38 <appStartRountine+0x370>)
 8023bd8:	461a      	mov	r2, r3
 8023bda:	460b      	mov	r3, r1
 8023bdc:	cb03      	ldmia	r3!, {r0, r1}
 8023bde:	6010      	str	r0, [r2, #0]
 8023be0:	6051      	str	r1, [r2, #4]
 8023be2:	781b      	ldrb	r3, [r3, #0]
 8023be4:	7213      	strb	r3, [r2, #8]
		strcpy((char*)analogSettingList[u8Index].inputRange, "0 - 1 VDC");
 8023be6:	79fa      	ldrb	r2, [r7, #7]
 8023be8:	4613      	mov	r3, r2
 8023bea:	015b      	lsls	r3, r3, #5
 8023bec:	1a9b      	subs	r3, r3, r2
 8023bee:	005b      	lsls	r3, r3, #1
 8023bf0:	3318      	adds	r3, #24
 8023bf2:	4a8f      	ldr	r2, [pc, #572]	; (8023e30 <appStartRountine+0x368>)
 8023bf4:	4413      	add	r3, r2
 8023bf6:	3302      	adds	r3, #2
 8023bf8:	4990      	ldr	r1, [pc, #576]	; (8023e3c <appStartRountine+0x374>)
 8023bfa:	461a      	mov	r2, r3
 8023bfc:	460b      	mov	r3, r1
 8023bfe:	cb03      	ldmia	r3!, {r0, r1}
 8023c00:	6010      	str	r0, [r2, #0]
 8023c02:	6051      	str	r1, [r2, #4]
 8023c04:	881b      	ldrh	r3, [r3, #0]
 8023c06:	8113      	strh	r3, [r2, #8]
		strcpy((char*)analogSettingList[u8Index].interval, "0");
 8023c08:	79fa      	ldrb	r2, [r7, #7]
 8023c0a:	4613      	mov	r3, r2
 8023c0c:	015b      	lsls	r3, r3, #5
 8023c0e:	1a9b      	subs	r3, r3, r2
 8023c10:	005b      	lsls	r3, r3, #1
 8023c12:	3320      	adds	r3, #32
 8023c14:	4a86      	ldr	r2, [pc, #536]	; (8023e30 <appStartRountine+0x368>)
 8023c16:	4413      	add	r3, r2
 8023c18:	3304      	adds	r3, #4
 8023c1a:	4989      	ldr	r1, [pc, #548]	; (8023e40 <appStartRountine+0x378>)
 8023c1c:	461a      	mov	r2, r3
 8023c1e:	460b      	mov	r3, r1
 8023c20:	881b      	ldrh	r3, [r3, #0]
 8023c22:	8013      	strh	r3, [r2, #0]
		strcpy((char*)analogSettingList[u8Index].slope, "0");
 8023c24:	79fa      	ldrb	r2, [r7, #7]
 8023c26:	4613      	mov	r3, r2
 8023c28:	015b      	lsls	r3, r3, #5
 8023c2a:	1a9b      	subs	r3, r3, r2
 8023c2c:	005b      	lsls	r3, r3, #1
 8023c2e:	3328      	adds	r3, #40	; 0x28
 8023c30:	4a7f      	ldr	r2, [pc, #508]	; (8023e30 <appStartRountine+0x368>)
 8023c32:	4413      	add	r3, r2
 8023c34:	3302      	adds	r3, #2
 8023c36:	4982      	ldr	r1, [pc, #520]	; (8023e40 <appStartRountine+0x378>)
 8023c38:	461a      	mov	r2, r3
 8023c3a:	460b      	mov	r3, r1
 8023c3c:	881b      	ldrh	r3, [r3, #0]
 8023c3e:	8013      	strh	r3, [r2, #0]
		strcpy((char*)analogSettingList[u8Index].offset, "0");
 8023c40:	79fa      	ldrb	r2, [r7, #7]
 8023c42:	4613      	mov	r3, r2
 8023c44:	015b      	lsls	r3, r3, #5
 8023c46:	1a9b      	subs	r3, r3, r2
 8023c48:	005b      	lsls	r3, r3, #1
 8023c4a:	3330      	adds	r3, #48	; 0x30
 8023c4c:	4a78      	ldr	r2, [pc, #480]	; (8023e30 <appStartRountine+0x368>)
 8023c4e:	4413      	add	r3, r2
 8023c50:	497b      	ldr	r1, [pc, #492]	; (8023e40 <appStartRountine+0x378>)
 8023c52:	461a      	mov	r2, r3
 8023c54:	460b      	mov	r3, r1
 8023c56:	881b      	ldrh	r3, [r3, #0]
 8023c58:	8013      	strh	r3, [r2, #0]
		strcpy((char*)analogSettingList[u8Index].rightDigit, "0");
 8023c5a:	79fa      	ldrb	r2, [r7, #7]
 8023c5c:	4613      	mov	r3, r2
 8023c5e:	015b      	lsls	r3, r3, #5
 8023c60:	1a9b      	subs	r3, r3, r2
 8023c62:	005b      	lsls	r3, r3, #1
 8023c64:	3330      	adds	r3, #48	; 0x30
 8023c66:	4a72      	ldr	r2, [pc, #456]	; (8023e30 <appStartRountine+0x368>)
 8023c68:	4413      	add	r3, r2
 8023c6a:	3306      	adds	r3, #6
 8023c6c:	4974      	ldr	r1, [pc, #464]	; (8023e40 <appStartRountine+0x378>)
 8023c6e:	461a      	mov	r2, r3
 8023c70:	460b      	mov	r3, r1
 8023c72:	881b      	ldrh	r3, [r3, #0]
 8023c74:	8013      	strh	r3, [r2, #0]
		strcpy((char*)analogSettingList[u8Index].unit, "m");
 8023c76:	79fa      	ldrb	r2, [r7, #7]
 8023c78:	4613      	mov	r3, r2
 8023c7a:	015b      	lsls	r3, r3, #5
 8023c7c:	1a9b      	subs	r3, r3, r2
 8023c7e:	005b      	lsls	r3, r3, #1
 8023c80:	3338      	adds	r3, #56	; 0x38
 8023c82:	4a6b      	ldr	r2, [pc, #428]	; (8023e30 <appStartRountine+0x368>)
 8023c84:	4413      	add	r3, r2
 8023c86:	496f      	ldr	r1, [pc, #444]	; (8023e44 <appStartRountine+0x37c>)
 8023c88:	461a      	mov	r2, r3
 8023c8a:	460b      	mov	r3, r1
 8023c8c:	881b      	ldrh	r3, [r3, #0]
 8023c8e:	8013      	strh	r3, [r2, #0]
	for (u8Index = 0; u8Index < 12; u8Index++)
 8023c90:	79fb      	ldrb	r3, [r7, #7]
 8023c92:	3301      	adds	r3, #1
 8023c94:	71fb      	strb	r3, [r7, #7]
 8023c96:	79fb      	ldrb	r3, [r7, #7]
 8023c98:	2b0b      	cmp	r3, #11
 8023c9a:	f67f af72 	bls.w	8023b82 <appStartRountine+0xba>
	}

	/* Init digital info */
	for (u8Index = 0; u8Index < 6; u8Index++)
 8023c9e:	2300      	movs	r3, #0
 8023ca0:	71fb      	strb	r3, [r7, #7]
 8023ca2:	e086      	b.n	8023db2 <appStartRountine+0x2ea>
	{
		sprintf(u8Channel, "DI%d", u8Index+1);
 8023ca4:	79fb      	ldrb	r3, [r7, #7]
 8023ca6:	1c5a      	adds	r2, r3, #1
 8023ca8:	463b      	mov	r3, r7
 8023caa:	4967      	ldr	r1, [pc, #412]	; (8023e48 <appStartRountine+0x380>)
 8023cac:	4618      	mov	r0, r3
 8023cae:	f003 fa59 	bl	8027164 <siprintf>
		strcpy((char*)digitalSettingList[u8Index].channel, u8Channel);
 8023cb2:	79fa      	ldrb	r2, [r7, #7]
 8023cb4:	4613      	mov	r3, r2
 8023cb6:	015b      	lsls	r3, r3, #5
 8023cb8:	1a9b      	subs	r3, r3, r2
 8023cba:	005b      	lsls	r3, r3, #1
 8023cbc:	4a63      	ldr	r2, [pc, #396]	; (8023e4c <appStartRountine+0x384>)
 8023cbe:	4413      	add	r3, r2
 8023cc0:	463a      	mov	r2, r7
 8023cc2:	4611      	mov	r1, r2
 8023cc4:	4618      	mov	r0, r3
 8023cc6:	f003 faeb 	bl	80272a0 <strcpy>
		strcpy((char*)digitalSettingList[u8Index].name, "Digital");
 8023cca:	79fa      	ldrb	r2, [r7, #7]
 8023ccc:	4613      	mov	r3, r2
 8023cce:	015b      	lsls	r3, r3, #5
 8023cd0:	1a9b      	subs	r3, r3, r2
 8023cd2:	005b      	lsls	r3, r3, #1
 8023cd4:	3310      	adds	r3, #16
 8023cd6:	4a5d      	ldr	r2, [pc, #372]	; (8023e4c <appStartRountine+0x384>)
 8023cd8:	4413      	add	r3, r2
 8023cda:	495d      	ldr	r1, [pc, #372]	; (8023e50 <appStartRountine+0x388>)
 8023cdc:	461a      	mov	r2, r3
 8023cde:	460b      	mov	r3, r1
 8023ce0:	cb03      	ldmia	r3!, {r0, r1}
 8023ce2:	6010      	str	r0, [r2, #0]
 8023ce4:	6051      	str	r1, [r2, #4]
		strcpy((char*)digitalSettingList[u8Index].status, "Disabled");
 8023ce6:	79fa      	ldrb	r2, [r7, #7]
 8023ce8:	4613      	mov	r3, r2
 8023cea:	015b      	lsls	r3, r3, #5
 8023cec:	1a9b      	subs	r3, r3, r2
 8023cee:	005b      	lsls	r3, r3, #1
 8023cf0:	4a56      	ldr	r2, [pc, #344]	; (8023e4c <appStartRountine+0x384>)
 8023cf2:	4413      	add	r3, r2
 8023cf4:	3306      	adds	r3, #6
 8023cf6:	4950      	ldr	r1, [pc, #320]	; (8023e38 <appStartRountine+0x370>)
 8023cf8:	461a      	mov	r2, r3
 8023cfa:	460b      	mov	r3, r1
 8023cfc:	cb03      	ldmia	r3!, {r0, r1}
 8023cfe:	6010      	str	r0, [r2, #0]
 8023d00:	6051      	str	r1, [r2, #4]
 8023d02:	781b      	ldrb	r3, [r3, #0]
 8023d04:	7213      	strb	r3, [r2, #8]
		strcpy((char*)digitalSettingList[u8Index].mode, "Counter");
 8023d06:	79fa      	ldrb	r2, [r7, #7]
 8023d08:	4613      	mov	r3, r2
 8023d0a:	015b      	lsls	r3, r3, #5
 8023d0c:	1a9b      	subs	r3, r3, r2
 8023d0e:	005b      	lsls	r3, r3, #1
 8023d10:	3318      	adds	r3, #24
 8023d12:	4a4e      	ldr	r2, [pc, #312]	; (8023e4c <appStartRountine+0x384>)
 8023d14:	4413      	add	r3, r2
 8023d16:	3302      	adds	r3, #2
 8023d18:	494e      	ldr	r1, [pc, #312]	; (8023e54 <appStartRountine+0x38c>)
 8023d1a:	461a      	mov	r2, r3
 8023d1c:	460b      	mov	r3, r1
 8023d1e:	cb03      	ldmia	r3!, {r0, r1}
 8023d20:	6010      	str	r0, [r2, #0]
 8023d22:	6051      	str	r1, [r2, #4]
		strcpy((char*)digitalSettingList[u8Index].interval, "0");
 8023d24:	79fa      	ldrb	r2, [r7, #7]
 8023d26:	4613      	mov	r3, r2
 8023d28:	015b      	lsls	r3, r3, #5
 8023d2a:	1a9b      	subs	r3, r3, r2
 8023d2c:	005b      	lsls	r3, r3, #1
 8023d2e:	3320      	adds	r3, #32
 8023d30:	4a46      	ldr	r2, [pc, #280]	; (8023e4c <appStartRountine+0x384>)
 8023d32:	4413      	add	r3, r2
 8023d34:	3304      	adds	r3, #4
 8023d36:	4942      	ldr	r1, [pc, #264]	; (8023e40 <appStartRountine+0x378>)
 8023d38:	461a      	mov	r2, r3
 8023d3a:	460b      	mov	r3, r1
 8023d3c:	881b      	ldrh	r3, [r3, #0]
 8023d3e:	8013      	strh	r3, [r2, #0]
		strcpy((char*)digitalSettingList[u8Index].slope, "0");
 8023d40:	79fa      	ldrb	r2, [r7, #7]
 8023d42:	4613      	mov	r3, r2
 8023d44:	015b      	lsls	r3, r3, #5
 8023d46:	1a9b      	subs	r3, r3, r2
 8023d48:	005b      	lsls	r3, r3, #1
 8023d4a:	3328      	adds	r3, #40	; 0x28
 8023d4c:	4a3f      	ldr	r2, [pc, #252]	; (8023e4c <appStartRountine+0x384>)
 8023d4e:	4413      	add	r3, r2
 8023d50:	3302      	adds	r3, #2
 8023d52:	493b      	ldr	r1, [pc, #236]	; (8023e40 <appStartRountine+0x378>)
 8023d54:	461a      	mov	r2, r3
 8023d56:	460b      	mov	r3, r1
 8023d58:	881b      	ldrh	r3, [r3, #0]
 8023d5a:	8013      	strh	r3, [r2, #0]
		strcpy((char*)digitalSettingList[u8Index].offset, "0");
 8023d5c:	79fa      	ldrb	r2, [r7, #7]
 8023d5e:	4613      	mov	r3, r2
 8023d60:	015b      	lsls	r3, r3, #5
 8023d62:	1a9b      	subs	r3, r3, r2
 8023d64:	005b      	lsls	r3, r3, #1
 8023d66:	3330      	adds	r3, #48	; 0x30
 8023d68:	4a38      	ldr	r2, [pc, #224]	; (8023e4c <appStartRountine+0x384>)
 8023d6a:	4413      	add	r3, r2
 8023d6c:	4934      	ldr	r1, [pc, #208]	; (8023e40 <appStartRountine+0x378>)
 8023d6e:	461a      	mov	r2, r3
 8023d70:	460b      	mov	r3, r1
 8023d72:	881b      	ldrh	r3, [r3, #0]
 8023d74:	8013      	strh	r3, [r2, #0]
		strcpy((char*)digitalSettingList[u8Index].rightDigit, "0");
 8023d76:	79fa      	ldrb	r2, [r7, #7]
 8023d78:	4613      	mov	r3, r2
 8023d7a:	015b      	lsls	r3, r3, #5
 8023d7c:	1a9b      	subs	r3, r3, r2
 8023d7e:	005b      	lsls	r3, r3, #1
 8023d80:	3330      	adds	r3, #48	; 0x30
 8023d82:	4a32      	ldr	r2, [pc, #200]	; (8023e4c <appStartRountine+0x384>)
 8023d84:	4413      	add	r3, r2
 8023d86:	3306      	adds	r3, #6
 8023d88:	492d      	ldr	r1, [pc, #180]	; (8023e40 <appStartRountine+0x378>)
 8023d8a:	461a      	mov	r2, r3
 8023d8c:	460b      	mov	r3, r1
 8023d8e:	881b      	ldrh	r3, [r3, #0]
 8023d90:	8013      	strh	r3, [r2, #0]
		strcpy((char*)digitalSettingList[u8Index].unit, "m");
 8023d92:	79fa      	ldrb	r2, [r7, #7]
 8023d94:	4613      	mov	r3, r2
 8023d96:	015b      	lsls	r3, r3, #5
 8023d98:	1a9b      	subs	r3, r3, r2
 8023d9a:	005b      	lsls	r3, r3, #1
 8023d9c:	3338      	adds	r3, #56	; 0x38
 8023d9e:	4a2b      	ldr	r2, [pc, #172]	; (8023e4c <appStartRountine+0x384>)
 8023da0:	4413      	add	r3, r2
 8023da2:	4928      	ldr	r1, [pc, #160]	; (8023e44 <appStartRountine+0x37c>)
 8023da4:	461a      	mov	r2, r3
 8023da6:	460b      	mov	r3, r1
 8023da8:	881b      	ldrh	r3, [r3, #0]
 8023daa:	8013      	strh	r3, [r2, #0]
	for (u8Index = 0; u8Index < 6; u8Index++)
 8023dac:	79fb      	ldrb	r3, [r7, #7]
 8023dae:	3301      	adds	r3, #1
 8023db0:	71fb      	strb	r3, [r7, #7]
 8023db2:	79fb      	ldrb	r3, [r7, #7]
 8023db4:	2b05      	cmp	r3, #5
 8023db6:	f67f af75 	bls.w	8023ca4 <appStartRountine+0x1dc>
	}

	/* Init serital info */
	for (u8Index = 0; u8Index < 6; u8Index++)
 8023dba:	2300      	movs	r3, #0
 8023dbc:	71fb      	strb	r3, [r7, #7]
 8023dbe:	e123      	b.n	8024008 <appStartRountine+0x540>
	{
		if (u8Index < 4) {
 8023dc0:	79fb      	ldrb	r3, [r7, #7]
 8023dc2:	2b03      	cmp	r3, #3
 8023dc4:	d84a      	bhi.n	8023e5c <appStartRountine+0x394>
			sprintf(u8Channel, "COM%d", u8Index+1);
 8023dc6:	79fb      	ldrb	r3, [r7, #7]
 8023dc8:	1c5a      	adds	r2, r3, #1
 8023dca:	463b      	mov	r3, r7
 8023dcc:	4922      	ldr	r1, [pc, #136]	; (8023e58 <appStartRountine+0x390>)
 8023dce:	4618      	mov	r0, r3
 8023dd0:	f003 f9c8 	bl	8027164 <siprintf>
 8023dd4:	e053      	b.n	8023e7e <appStartRountine+0x3b6>
 8023dd6:	bf00      	nop
 8023dd8:	24009d74 	.word	0x24009d74
 8023ddc:	0802e5b0 	.word	0x0802e5b0
 8023de0:	24009d7c 	.word	0x24009d7c
 8023de4:	0802e5b8 	.word	0x0802e5b8
 8023de8:	0802e5c0 	.word	0x0802e5c0
 8023dec:	24009d8c 	.word	0x24009d8c
 8023df0:	0802e5c8 	.word	0x0802e5c8
 8023df4:	24009da0 	.word	0x24009da0
 8023df8:	0802e5dc 	.word	0x0802e5dc
 8023dfc:	2400911c 	.word	0x2400911c
 8023e00:	0802e5e0 	.word	0x0802e5e0
 8023e04:	2400912a 	.word	0x2400912a
 8023e08:	0802e5e8 	.word	0x0802e5e8
 8023e0c:	24009132 	.word	0x24009132
 8023e10:	0802e5f0 	.word	0x0802e5f0
 8023e14:	2400914a 	.word	0x2400914a
 8023e18:	0802e604 	.word	0x0802e604
 8023e1c:	2400915e 	.word	0x2400915e
 8023e20:	0802e614 	.word	0x0802e614
 8023e24:	24009172 	.word	0x24009172
 8023e28:	0802e624 	.word	0x0802e624
 8023e2c:	0802e630 	.word	0x0802e630
 8023e30:	24008960 	.word	0x24008960
 8023e34:	0802e638 	.word	0x0802e638
 8023e38:	0802e640 	.word	0x0802e640
 8023e3c:	0802e64c 	.word	0x0802e64c
 8023e40:	0802e658 	.word	0x0802e658
 8023e44:	0802e65c 	.word	0x0802e65c
 8023e48:	0802e660 	.word	0x0802e660
 8023e4c:	24008c48 	.word	0x24008c48
 8023e50:	0802e668 	.word	0x0802e668
 8023e54:	0802e670 	.word	0x0802e670
 8023e58:	0802e678 	.word	0x0802e678
		} else if (u8Index == 4) {
 8023e5c:	79fb      	ldrb	r3, [r7, #7]
 8023e5e:	2b04      	cmp	r3, #4
 8023e60:	d105      	bne.n	8023e6e <appStartRountine+0x3a6>
			sprintf(u8Channel, "RS485");
 8023e62:	463b      	mov	r3, r7
 8023e64:	49aa      	ldr	r1, [pc, #680]	; (8024110 <appStartRountine+0x648>)
 8023e66:	4618      	mov	r0, r3
 8023e68:	f003 f97c 	bl	8027164 <siprintf>
 8023e6c:	e007      	b.n	8023e7e <appStartRountine+0x3b6>
		} else if (u8Index == 5) {
 8023e6e:	79fb      	ldrb	r3, [r7, #7]
 8023e70:	2b05      	cmp	r3, #5
 8023e72:	d104      	bne.n	8023e7e <appStartRountine+0x3b6>
			sprintf(u8Channel, "SDI-12");
 8023e74:	463b      	mov	r3, r7
 8023e76:	49a7      	ldr	r1, [pc, #668]	; (8024114 <appStartRountine+0x64c>)
 8023e78:	4618      	mov	r0, r3
 8023e7a:	f003 f973 	bl	8027164 <siprintf>
		}

		strcpy((char*)serialSettingList[u8Index].channel, u8Channel);
 8023e7e:	79fa      	ldrb	r2, [r7, #7]
 8023e80:	4613      	mov	r3, r2
 8023e82:	00db      	lsls	r3, r3, #3
 8023e84:	4413      	add	r3, r2
 8023e86:	011b      	lsls	r3, r3, #4
 8023e88:	4aa3      	ldr	r2, [pc, #652]	; (8024118 <appStartRountine+0x650>)
 8023e8a:	4413      	add	r3, r2
 8023e8c:	463a      	mov	r2, r7
 8023e8e:	4611      	mov	r1, r2
 8023e90:	4618      	mov	r0, r3
 8023e92:	f003 fa05 	bl	80272a0 <strcpy>
		strcpy((char*)serialSettingList[u8Index].name, "serial");
 8023e96:	79fa      	ldrb	r2, [r7, #7]
 8023e98:	4613      	mov	r3, r2
 8023e9a:	00db      	lsls	r3, r3, #3
 8023e9c:	4413      	add	r3, r2
 8023e9e:	011b      	lsls	r3, r3, #4
 8023ea0:	3308      	adds	r3, #8
 8023ea2:	4a9d      	ldr	r2, [pc, #628]	; (8024118 <appStartRountine+0x650>)
 8023ea4:	4413      	add	r3, r2
 8023ea6:	3306      	adds	r3, #6
 8023ea8:	4a9c      	ldr	r2, [pc, #624]	; (802411c <appStartRountine+0x654>)
 8023eaa:	6810      	ldr	r0, [r2, #0]
 8023eac:	6018      	str	r0, [r3, #0]
 8023eae:	8891      	ldrh	r1, [r2, #4]
 8023eb0:	7992      	ldrb	r2, [r2, #6]
 8023eb2:	8099      	strh	r1, [r3, #4]
 8023eb4:	719a      	strb	r2, [r3, #6]
		strcpy((char*)serialSettingList[u8Index].status, "Disabled");
 8023eb6:	79fa      	ldrb	r2, [r7, #7]
 8023eb8:	4613      	mov	r3, r2
 8023eba:	00db      	lsls	r3, r3, #3
 8023ebc:	4413      	add	r3, r2
 8023ebe:	011b      	lsls	r3, r3, #4
 8023ec0:	4a95      	ldr	r2, [pc, #596]	; (8024118 <appStartRountine+0x650>)
 8023ec2:	4413      	add	r3, r2
 8023ec4:	3306      	adds	r3, #6
 8023ec6:	4996      	ldr	r1, [pc, #600]	; (8024120 <appStartRountine+0x658>)
 8023ec8:	461a      	mov	r2, r3
 8023eca:	460b      	mov	r3, r1
 8023ecc:	cb03      	ldmia	r3!, {r0, r1}
 8023ece:	6010      	str	r0, [r2, #0]
 8023ed0:	6051      	str	r1, [r2, #4]
 8023ed2:	781b      	ldrb	r3, [r3, #0]
 8023ed4:	7213      	strb	r3, [r2, #8]
		strcpy((char*)serialSettingList[u8Index].baudrate, "9600");
 8023ed6:	79fa      	ldrb	r2, [r7, #7]
 8023ed8:	4613      	mov	r3, r2
 8023eda:	00db      	lsls	r3, r3, #3
 8023edc:	4413      	add	r3, r2
 8023ede:	011b      	lsls	r3, r3, #4
 8023ee0:	3318      	adds	r3, #24
 8023ee2:	4a8d      	ldr	r2, [pc, #564]	; (8024118 <appStartRountine+0x650>)
 8023ee4:	4413      	add	r3, r2
 8023ee6:	4a8f      	ldr	r2, [pc, #572]	; (8024124 <appStartRountine+0x65c>)
 8023ee8:	6810      	ldr	r0, [r2, #0]
 8023eea:	6018      	str	r0, [r3, #0]
 8023eec:	7912      	ldrb	r2, [r2, #4]
 8023eee:	711a      	strb	r2, [r3, #4]
		strcpy((char*)serialSettingList[u8Index].dataBit, "8");
 8023ef0:	79fa      	ldrb	r2, [r7, #7]
 8023ef2:	4613      	mov	r3, r2
 8023ef4:	00db      	lsls	r3, r3, #3
 8023ef6:	4413      	add	r3, r2
 8023ef8:	011b      	lsls	r3, r3, #4
 8023efa:	3318      	adds	r3, #24
 8023efc:	4a86      	ldr	r2, [pc, #536]	; (8024118 <appStartRountine+0x650>)
 8023efe:	4413      	add	r3, r2
 8023f00:	3306      	adds	r3, #6
 8023f02:	4989      	ldr	r1, [pc, #548]	; (8024128 <appStartRountine+0x660>)
 8023f04:	461a      	mov	r2, r3
 8023f06:	460b      	mov	r3, r1
 8023f08:	881b      	ldrh	r3, [r3, #0]
 8023f0a:	8013      	strh	r3, [r2, #0]
		strcpy((char*)serialSettingList[u8Index].parity, "None");
 8023f0c:	79fa      	ldrb	r2, [r7, #7]
 8023f0e:	4613      	mov	r3, r2
 8023f10:	00db      	lsls	r3, r3, #3
 8023f12:	4413      	add	r3, r2
 8023f14:	011b      	lsls	r3, r3, #4
 8023f16:	3320      	adds	r3, #32
 8023f18:	4a7f      	ldr	r2, [pc, #508]	; (8024118 <appStartRountine+0x650>)
 8023f1a:	4413      	add	r3, r2
 8023f1c:	4a83      	ldr	r2, [pc, #524]	; (802412c <appStartRountine+0x664>)
 8023f1e:	6810      	ldr	r0, [r2, #0]
 8023f20:	6018      	str	r0, [r3, #0]
 8023f22:	7912      	ldrb	r2, [r2, #4]
 8023f24:	711a      	strb	r2, [r3, #4]
		strcpy((char*)serialSettingList[u8Index].stopBit, "0");
 8023f26:	79fa      	ldrb	r2, [r7, #7]
 8023f28:	4613      	mov	r3, r2
 8023f2a:	00db      	lsls	r3, r3, #3
 8023f2c:	4413      	add	r3, r2
 8023f2e:	011b      	lsls	r3, r3, #4
 8023f30:	3320      	adds	r3, #32
 8023f32:	4a79      	ldr	r2, [pc, #484]	; (8024118 <appStartRountine+0x650>)
 8023f34:	4413      	add	r3, r2
 8023f36:	3306      	adds	r3, #6
 8023f38:	497d      	ldr	r1, [pc, #500]	; (8024130 <appStartRountine+0x668>)
 8023f3a:	461a      	mov	r2, r3
 8023f3c:	460b      	mov	r3, r1
 8023f3e:	881b      	ldrh	r3, [r3, #0]
 8023f40:	8013      	strh	r3, [r2, #0]
		strcpy((char*)serialSettingList[u8Index].flowControl, "None");
 8023f42:	79fa      	ldrb	r2, [r7, #7]
 8023f44:	4613      	mov	r3, r2
 8023f46:	00db      	lsls	r3, r3, #3
 8023f48:	4413      	add	r3, r2
 8023f4a:	011b      	lsls	r3, r3, #4
 8023f4c:	3328      	adds	r3, #40	; 0x28
 8023f4e:	4a72      	ldr	r2, [pc, #456]	; (8024118 <appStartRountine+0x650>)
 8023f50:	4413      	add	r3, r2
 8023f52:	4a76      	ldr	r2, [pc, #472]	; (802412c <appStartRountine+0x664>)
 8023f54:	6810      	ldr	r0, [r2, #0]
 8023f56:	6018      	str	r0, [r3, #0]
 8023f58:	7912      	ldrb	r2, [r2, #4]
 8023f5a:	711a      	strb	r2, [r3, #4]
		strcpy((char*)serialSettingList[u8Index].leadChar, "None");
 8023f5c:	79fa      	ldrb	r2, [r7, #7]
 8023f5e:	4613      	mov	r3, r2
 8023f60:	00db      	lsls	r3, r3, #3
 8023f62:	4413      	add	r3, r2
 8023f64:	011b      	lsls	r3, r3, #4
 8023f66:	3328      	adds	r3, #40	; 0x28
 8023f68:	4a6b      	ldr	r2, [pc, #428]	; (8024118 <appStartRountine+0x650>)
 8023f6a:	4413      	add	r3, r2
 8023f6c:	3306      	adds	r3, #6
 8023f6e:	4a6f      	ldr	r2, [pc, #444]	; (802412c <appStartRountine+0x664>)
 8023f70:	6810      	ldr	r0, [r2, #0]
 8023f72:	6018      	str	r0, [r3, #0]
 8023f74:	7912      	ldrb	r2, [r2, #4]
 8023f76:	711a      	strb	r2, [r3, #4]
		strcpy((char*)serialSettingList[u8Index].endOfLine, "None");
 8023f78:	79fa      	ldrb	r2, [r7, #7]
 8023f7a:	4613      	mov	r3, r2
 8023f7c:	00db      	lsls	r3, r3, #3
 8023f7e:	4413      	add	r3, r2
 8023f80:	011b      	lsls	r3, r3, #4
 8023f82:	3338      	adds	r3, #56	; 0x38
 8023f84:	4a64      	ldr	r2, [pc, #400]	; (8024118 <appStartRountine+0x650>)
 8023f86:	4413      	add	r3, r2
 8023f88:	3302      	adds	r3, #2
 8023f8a:	4a68      	ldr	r2, [pc, #416]	; (802412c <appStartRountine+0x664>)
 8023f8c:	6810      	ldr	r0, [r2, #0]
 8023f8e:	6018      	str	r0, [r3, #0]
 8023f90:	7912      	ldrb	r2, [r2, #4]
 8023f92:	711a      	strb	r2, [r3, #4]
		strcpy((char*)serialSettingList[u8Index].interval, "0");
 8023f94:	79fa      	ldrb	r2, [r7, #7]
 8023f96:	4613      	mov	r3, r2
 8023f98:	00db      	lsls	r3, r3, #3
 8023f9a:	4413      	add	r3, r2
 8023f9c:	011b      	lsls	r3, r3, #4
 8023f9e:	3340      	adds	r3, #64	; 0x40
 8023fa0:	4a5d      	ldr	r2, [pc, #372]	; (8024118 <appStartRountine+0x650>)
 8023fa2:	4413      	add	r3, r2
 8023fa4:	3306      	adds	r3, #6
 8023fa6:	4962      	ldr	r1, [pc, #392]	; (8024130 <appStartRountine+0x668>)
 8023fa8:	461a      	mov	r2, r3
 8023faa:	460b      	mov	r3, r1
 8023fac:	881b      	ldrh	r3, [r3, #0]
 8023fae:	8013      	strh	r3, [r2, #0]
		strcpy((char*)serialSettingList[u8Index].getDataCmd, "CMD");
 8023fb0:	79fa      	ldrb	r2, [r7, #7]
 8023fb2:	4613      	mov	r3, r2
 8023fb4:	00db      	lsls	r3, r3, #3
 8023fb6:	4413      	add	r3, r2
 8023fb8:	011b      	lsls	r3, r3, #4
 8023fba:	3348      	adds	r3, #72	; 0x48
 8023fbc:	4a56      	ldr	r2, [pc, #344]	; (8024118 <appStartRountine+0x650>)
 8023fbe:	4413      	add	r3, r2
 8023fc0:	3304      	adds	r3, #4
 8023fc2:	4a5c      	ldr	r2, [pc, #368]	; (8024134 <appStartRountine+0x66c>)
 8023fc4:	6810      	ldr	r0, [r2, #0]
 8023fc6:	6018      	str	r0, [r3, #0]
		strcpy((char*)serialSettingList[u8Index].unit, "mm");
 8023fc8:	79fa      	ldrb	r2, [r7, #7]
 8023fca:	4613      	mov	r3, r2
 8023fcc:	00db      	lsls	r3, r3, #3
 8023fce:	4413      	add	r3, r2
 8023fd0:	011b      	lsls	r3, r3, #4
 8023fd2:	3358      	adds	r3, #88	; 0x58
 8023fd4:	4a50      	ldr	r2, [pc, #320]	; (8024118 <appStartRountine+0x650>)
 8023fd6:	4413      	add	r3, r2
 8023fd8:	4a57      	ldr	r2, [pc, #348]	; (8024138 <appStartRountine+0x670>)
 8023fda:	8811      	ldrh	r1, [r2, #0]
 8023fdc:	7892      	ldrb	r2, [r2, #2]
 8023fde:	8019      	strh	r1, [r3, #0]
 8023fe0:	709a      	strb	r2, [r3, #2]
		strcpy((char*)serialSettingList[u8Index].dataSequence, "NA=1=m");
 8023fe2:	79fa      	ldrb	r2, [r7, #7]
 8023fe4:	4613      	mov	r3, r2
 8023fe6:	00db      	lsls	r3, r3, #3
 8023fe8:	4413      	add	r3, r2
 8023fea:	011b      	lsls	r3, r3, #4
 8023fec:	3358      	adds	r3, #88	; 0x58
 8023fee:	4a4a      	ldr	r2, [pc, #296]	; (8024118 <appStartRountine+0x650>)
 8023ff0:	4413      	add	r3, r2
 8023ff2:	3306      	adds	r3, #6
 8023ff4:	4a51      	ldr	r2, [pc, #324]	; (802413c <appStartRountine+0x674>)
 8023ff6:	6810      	ldr	r0, [r2, #0]
 8023ff8:	6018      	str	r0, [r3, #0]
 8023ffa:	8891      	ldrh	r1, [r2, #4]
 8023ffc:	7992      	ldrb	r2, [r2, #6]
 8023ffe:	8099      	strh	r1, [r3, #4]
 8024000:	719a      	strb	r2, [r3, #6]
	for (u8Index = 0; u8Index < 6; u8Index++)
 8024002:	79fb      	ldrb	r3, [r7, #7]
 8024004:	3301      	adds	r3, #1
 8024006:	71fb      	strb	r3, [r7, #7]
 8024008:	79fb      	ldrb	r3, [r7, #7]
 802400a:	2b05      	cmp	r3, #5
 802400c:	f67f aed8 	bls.w	8023dc0 <appStartRountine+0x2f8>
	}

	/* Init transmission info */
	strcpy((char*)transmission.startTime, "00:00:00");
 8024010:	4a4b      	ldr	r2, [pc, #300]	; (8024140 <appStartRountine+0x678>)
 8024012:	4b4c      	ldr	r3, [pc, #304]	; (8024144 <appStartRountine+0x67c>)
 8024014:	cb03      	ldmia	r3!, {r0, r1}
 8024016:	6010      	str	r0, [r2, #0]
 8024018:	6051      	str	r1, [r2, #4]
 802401a:	781b      	ldrb	r3, [r3, #0]
 802401c:	7213      	strb	r3, [r2, #8]
	strcpy((char*)transmission.interval, "60");
 802401e:	4b4a      	ldr	r3, [pc, #296]	; (8024148 <appStartRountine+0x680>)
 8024020:	4a4a      	ldr	r2, [pc, #296]	; (802414c <appStartRountine+0x684>)
 8024022:	8811      	ldrh	r1, [r2, #0]
 8024024:	7892      	ldrb	r2, [r2, #2]
 8024026:	8019      	strh	r1, [r3, #0]
 8024028:	709a      	strb	r2, [r3, #2]
	strcpy((char*)transmission.URL, "localhost");
 802402a:	4a49      	ldr	r2, [pc, #292]	; (8024150 <appStartRountine+0x688>)
 802402c:	4b49      	ldr	r3, [pc, #292]	; (8024154 <appStartRountine+0x68c>)
 802402e:	cb03      	ldmia	r3!, {r0, r1}
 8024030:	6010      	str	r0, [r2, #0]
 8024032:	6051      	str	r1, [r2, #4]
 8024034:	881b      	ldrh	r3, [r3, #0]
 8024036:	8113      	strh	r3, [r2, #8]
	strcpy((char*)transmission.port, "8080");
 8024038:	4b47      	ldr	r3, [pc, #284]	; (8024158 <appStartRountine+0x690>)
 802403a:	4a48      	ldr	r2, [pc, #288]	; (802415c <appStartRountine+0x694>)
 802403c:	6810      	ldr	r0, [r2, #0]
 802403e:	6018      	str	r0, [r3, #0]
 8024040:	7912      	ldrb	r2, [r2, #4]
 8024042:	711a      	strb	r2, [r3, #4]
	strcpy((char*)transmission.useName, "admin");
 8024044:	4b46      	ldr	r3, [pc, #280]	; (8024160 <appStartRountine+0x698>)
 8024046:	4a47      	ldr	r2, [pc, #284]	; (8024164 <appStartRountine+0x69c>)
 8024048:	6810      	ldr	r0, [r2, #0]
 802404a:	6018      	str	r0, [r3, #0]
 802404c:	8892      	ldrh	r2, [r2, #4]
 802404e:	809a      	strh	r2, [r3, #4]
	strcpy((char*)transmission.passWord, "1234");
 8024050:	4b45      	ldr	r3, [pc, #276]	; (8024168 <appStartRountine+0x6a0>)
 8024052:	4a46      	ldr	r2, [pc, #280]	; (802416c <appStartRountine+0x6a4>)
 8024054:	6810      	ldr	r0, [r2, #0]
 8024056:	6018      	str	r0, [r3, #0]
 8024058:	7912      	ldrb	r2, [r2, #4]
 802405a:	711a      	strb	r2, [r3, #4]
	strcpy((char*)transmission.fileName, "log.txt");
 802405c:	4a44      	ldr	r2, [pc, #272]	; (8024170 <appStartRountine+0x6a8>)
 802405e:	4b45      	ldr	r3, [pc, #276]	; (8024174 <appStartRountine+0x6ac>)
 8024060:	cb03      	ldmia	r3!, {r0, r1}
 8024062:	6010      	str	r0, [r2, #0]
 8024064:	6051      	str	r1, [r2, #4]
	strcpy((char*)transmission.headerInterval, "60");
 8024066:	4b44      	ldr	r3, [pc, #272]	; (8024178 <appStartRountine+0x6b0>)
 8024068:	4a38      	ldr	r2, [pc, #224]	; (802414c <appStartRountine+0x684>)
 802406a:	8811      	ldrh	r1, [r2, #0]
 802406c:	7892      	ldrb	r2, [r2, #2]
 802406e:	8019      	strh	r1, [r3, #0]
 8024070:	709a      	strb	r2, [r3, #2]
	strcpy((char*)transmission.tcp_ip, "80");
 8024072:	4b42      	ldr	r3, [pc, #264]	; (802417c <appStartRountine+0x6b4>)
 8024074:	4a42      	ldr	r2, [pc, #264]	; (8024180 <appStartRountine+0x6b8>)
 8024076:	8811      	ldrh	r1, [r2, #0]
 8024078:	7892      	ldrb	r2, [r2, #2]
 802407a:	8019      	strh	r1, [r3, #0]
 802407c:	709a      	strb	r2, [r3, #2]

	/* Init cellular info */
	strcpy((char*)cellular.cellularMode, "Disabled");
 802407e:	4a41      	ldr	r2, [pc, #260]	; (8024184 <appStartRountine+0x6bc>)
 8024080:	4b27      	ldr	r3, [pc, #156]	; (8024120 <appStartRountine+0x658>)
 8024082:	cb03      	ldmia	r3!, {r0, r1}
 8024084:	6010      	str	r0, [r2, #0]
 8024086:	6051      	str	r1, [r2, #4]
 8024088:	781b      	ldrb	r3, [r3, #0]
 802408a:	7213      	strb	r3, [r2, #8]
	strcpy((char*)cellular.modemStatus, "Ready");
 802408c:	4b3e      	ldr	r3, [pc, #248]	; (8024188 <appStartRountine+0x6c0>)
 802408e:	4a3f      	ldr	r2, [pc, #252]	; (802418c <appStartRountine+0x6c4>)
 8024090:	6810      	ldr	r0, [r2, #0]
 8024092:	6018      	str	r0, [r3, #0]
 8024094:	8892      	ldrh	r2, [r2, #4]
 8024096:	809a      	strh	r2, [r3, #4]
	strcpy((char*)cellular.operator, "Viettel");
 8024098:	4a3d      	ldr	r2, [pc, #244]	; (8024190 <appStartRountine+0x6c8>)
 802409a:	4b3e      	ldr	r3, [pc, #248]	; (8024194 <appStartRountine+0x6cc>)
 802409c:	cb03      	ldmia	r3!, {r0, r1}
 802409e:	6010      	str	r0, [r2, #0]
 80240a0:	6051      	str	r1, [r2, #4]
	strcpy((char*)cellular.modemAccess, "HSPA");
 80240a2:	4b3d      	ldr	r3, [pc, #244]	; (8024198 <appStartRountine+0x6d0>)
 80240a4:	4a3d      	ldr	r2, [pc, #244]	; (802419c <appStartRountine+0x6d4>)
 80240a6:	6810      	ldr	r0, [r2, #0]
 80240a8:	6018      	str	r0, [r3, #0]
 80240aa:	7912      	ldrb	r2, [r2, #4]
 80240ac:	711a      	strb	r2, [r3, #4]
	strcpy((char*)cellular.Band, "Band 3");
 80240ae:	4b3c      	ldr	r3, [pc, #240]	; (80241a0 <appStartRountine+0x6d8>)
 80240b0:	4a3c      	ldr	r2, [pc, #240]	; (80241a4 <appStartRountine+0x6dc>)
 80240b2:	6810      	ldr	r0, [r2, #0]
 80240b4:	6018      	str	r0, [r3, #0]
 80240b6:	8891      	ldrh	r1, [r2, #4]
 80240b8:	7992      	ldrb	r2, [r2, #6]
 80240ba:	8099      	strh	r1, [r3, #4]
 80240bc:	719a      	strb	r2, [r3, #6]
	strcpy((char*)cellular.phoneNumber, "0912345678");
 80240be:	4a3a      	ldr	r2, [pc, #232]	; (80241a8 <appStartRountine+0x6e0>)
 80240c0:	4b3a      	ldr	r3, [pc, #232]	; (80241ac <appStartRountine+0x6e4>)
 80240c2:	cb03      	ldmia	r3!, {r0, r1}
 80240c4:	6010      	str	r0, [r2, #0]
 80240c6:	6051      	str	r1, [r2, #4]
 80240c8:	8819      	ldrh	r1, [r3, #0]
 80240ca:	789b      	ldrb	r3, [r3, #2]
 80240cc:	8111      	strh	r1, [r2, #8]
 80240ce:	7293      	strb	r3, [r2, #10]
	strcpy((char*)cellular.ipV4, "27.72.56.21");
 80240d0:	4a37      	ldr	r2, [pc, #220]	; (80241b0 <appStartRountine+0x6e8>)
 80240d2:	4b38      	ldr	r3, [pc, #224]	; (80241b4 <appStartRountine+0x6ec>)
 80240d4:	4614      	mov	r4, r2
 80240d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80240d8:	6020      	str	r0, [r4, #0]
 80240da:	6061      	str	r1, [r4, #4]
 80240dc:	60a2      	str	r2, [r4, #8]
	strcpy((char*)cellular.signalLevel, "Strong");
 80240de:	4b36      	ldr	r3, [pc, #216]	; (80241b8 <appStartRountine+0x6f0>)
 80240e0:	4a36      	ldr	r2, [pc, #216]	; (80241bc <appStartRountine+0x6f4>)
 80240e2:	6810      	ldr	r0, [r2, #0]
 80240e4:	6018      	str	r0, [r3, #0]
 80240e6:	8891      	ldrh	r1, [r2, #4]
 80240e8:	7992      	ldrb	r2, [r2, #6]
 80240ea:	8099      	strh	r1, [r3, #4]
 80240ec:	719a      	strb	r2, [r3, #6]

	/* Init sort channel info */
	strcpy((char*)u8SorttingChannel, "DI2&0&1;AI1&0&2;COM1&2&3");
 80240ee:	4a34      	ldr	r2, [pc, #208]	; (80241c0 <appStartRountine+0x6f8>)
 80240f0:	4b34      	ldr	r3, [pc, #208]	; (80241c4 <appStartRountine+0x6fc>)
 80240f2:	4615      	mov	r5, r2
 80240f4:	461c      	mov	r4, r3
 80240f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80240f8:	6028      	str	r0, [r5, #0]
 80240fa:	6069      	str	r1, [r5, #4]
 80240fc:	60aa      	str	r2, [r5, #8]
 80240fe:	60eb      	str	r3, [r5, #12]
 8024100:	cc03      	ldmia	r4!, {r0, r1}
 8024102:	6128      	str	r0, [r5, #16]
 8024104:	6169      	str	r1, [r5, #20]
 8024106:	7823      	ldrb	r3, [r4, #0]
 8024108:	762b      	strb	r3, [r5, #24]

	/* Init virtual sensor info */
	for (u8Index = 0; u8Index < 15; u8Index++)
 802410a:	2300      	movs	r3, #0
 802410c:	71fb      	strb	r3, [r7, #7]
 802410e:	e10c      	b.n	802432a <appStartRountine+0x862>
 8024110:	0802e680 	.word	0x0802e680
 8024114:	0802e688 	.word	0x0802e688
 8024118:	24008dbc 	.word	0x24008dbc
 802411c:	0802e690 	.word	0x0802e690
 8024120:	0802e640 	.word	0x0802e640
 8024124:	0802e698 	.word	0x0802e698
 8024128:	0802e6a0 	.word	0x0802e6a0
 802412c:	0802e6a4 	.word	0x0802e6a4
 8024130:	0802e658 	.word	0x0802e658
 8024134:	0802e6ac 	.word	0x0802e6ac
 8024138:	0802e6b0 	.word	0x0802e6b0
 802413c:	0802e6b4 	.word	0x0802e6b4
 8024140:	240088c8 	.word	0x240088c8
 8024144:	0802e6bc 	.word	0x0802e6bc
 8024148:	240088d7 	.word	0x240088d7
 802414c:	0802e6c8 	.word	0x0802e6c8
 8024150:	240088dd 	.word	0x240088dd
 8024154:	0802e6cc 	.word	0x0802e6cc
 8024158:	240088fb 	.word	0x240088fb
 802415c:	0802e6d8 	.word	0x0802e6d8
 8024160:	24008901 	.word	0x24008901
 8024164:	0802e6e0 	.word	0x0802e6e0
 8024168:	2400891f 	.word	0x2400891f
 802416c:	0802e6e8 	.word	0x0802e6e8
 8024170:	2400893d 	.word	0x2400893d
 8024174:	0802e6f0 	.word	0x0802e6f0
 8024178:	24008951 	.word	0x24008951
 802417c:	24008957 	.word	0x24008957
 8024180:	0802e6f8 	.word	0x0802e6f8
 8024184:	24009d0c 	.word	0x24009d0c
 8024188:	24009d16 	.word	0x24009d16
 802418c:	0802e6fc 	.word	0x0802e6fc
 8024190:	24009d20 	.word	0x24009d20
 8024194:	0802e704 	.word	0x0802e704
 8024198:	24009d2a 	.word	0x24009d2a
 802419c:	0802e70c 	.word	0x0802e70c
 80241a0:	24009d34 	.word	0x24009d34
 80241a4:	0802e714 	.word	0x0802e714
 80241a8:	24009d48 	.word	0x24009d48
 80241ac:	0802e71c 	.word	0x0802e71c
 80241b0:	24009d54 	.word	0x24009d54
 80241b4:	0802e728 	.word	0x0802e728
 80241b8:	24009d68 	.word	0x24009d68
 80241bc:	0802e734 	.word	0x0802e734
 80241c0:	24009188 	.word	0x24009188
 80241c4:	0802e73c 	.word	0x0802e73c
	{
		sprintf(u8Channel, "VS%d", u8Index+1);
 80241c8:	79fb      	ldrb	r3, [r7, #7]
 80241ca:	1c5a      	adds	r2, r3, #1
 80241cc:	463b      	mov	r3, r7
 80241ce:	495b      	ldr	r1, [pc, #364]	; (802433c <appStartRountine+0x874>)
 80241d0:	4618      	mov	r0, r3
 80241d2:	f002 ffc7 	bl	8027164 <siprintf>
		strcpy((char*)virtualSensorList[u8Index].channel, u8Channel);
 80241d6:	79fa      	ldrb	r2, [r7, #7]
 80241d8:	4613      	mov	r3, r2
 80241da:	005b      	lsls	r3, r3, #1
 80241dc:	4413      	add	r3, r2
 80241de:	019b      	lsls	r3, r3, #6
 80241e0:	4413      	add	r3, r2
 80241e2:	4a57      	ldr	r2, [pc, #348]	; (8024340 <appStartRountine+0x878>)
 80241e4:	4413      	add	r3, r2
 80241e6:	463a      	mov	r2, r7
 80241e8:	4611      	mov	r1, r2
 80241ea:	4618      	mov	r0, r3
 80241ec:	f003 f858 	bl	80272a0 <strcpy>
		strcpy((char*)virtualSensorList[u8Index].name, "NA");
 80241f0:	79fa      	ldrb	r2, [r7, #7]
 80241f2:	4613      	mov	r3, r2
 80241f4:	005b      	lsls	r3, r3, #1
 80241f6:	4413      	add	r3, r2
 80241f8:	019b      	lsls	r3, r3, #6
 80241fa:	4413      	add	r3, r2
 80241fc:	4a50      	ldr	r2, [pc, #320]	; (8024340 <appStartRountine+0x878>)
 80241fe:	4413      	add	r3, r2
 8024200:	3306      	adds	r3, #6
 8024202:	4a50      	ldr	r2, [pc, #320]	; (8024344 <appStartRountine+0x87c>)
 8024204:	8811      	ldrh	r1, [r2, #0]
 8024206:	7892      	ldrb	r2, [r2, #2]
 8024208:	8019      	strh	r1, [r3, #0]
 802420a:	709a      	strb	r2, [r3, #2]
		strcpy((char*)virtualSensorList[u8Index].status, "Disabled");
 802420c:	79fa      	ldrb	r2, [r7, #7]
 802420e:	4613      	mov	r3, r2
 8024210:	005b      	lsls	r3, r3, #1
 8024212:	4413      	add	r3, r2
 8024214:	019b      	lsls	r3, r3, #6
 8024216:	4413      	add	r3, r2
 8024218:	3308      	adds	r3, #8
 802421a:	4a49      	ldr	r2, [pc, #292]	; (8024340 <appStartRountine+0x878>)
 802421c:	4413      	add	r3, r2
 802421e:	3302      	adds	r3, #2
 8024220:	4949      	ldr	r1, [pc, #292]	; (8024348 <appStartRountine+0x880>)
 8024222:	461a      	mov	r2, r3
 8024224:	460b      	mov	r3, r1
 8024226:	cb03      	ldmia	r3!, {r0, r1}
 8024228:	6010      	str	r0, [r2, #0]
 802422a:	6051      	str	r1, [r2, #4]
 802422c:	781b      	ldrb	r3, [r3, #0]
 802422e:	7213      	strb	r3, [r2, #8]
		strcpy((char*)virtualSensorList[u8Index].vsType, "1");
 8024230:	79fa      	ldrb	r2, [r7, #7]
 8024232:	4613      	mov	r3, r2
 8024234:	005b      	lsls	r3, r3, #1
 8024236:	4413      	add	r3, r2
 8024238:	019b      	lsls	r3, r3, #6
 802423a:	4413      	add	r3, r2
 802423c:	3310      	adds	r3, #16
 802423e:	4a40      	ldr	r2, [pc, #256]	; (8024340 <appStartRountine+0x878>)
 8024240:	4413      	add	r3, r2
 8024242:	3304      	adds	r3, #4
 8024244:	4941      	ldr	r1, [pc, #260]	; (802434c <appStartRountine+0x884>)
 8024246:	461a      	mov	r2, r3
 8024248:	460b      	mov	r3, r1
 802424a:	881b      	ldrh	r3, [r3, #0]
 802424c:	8013      	strh	r3, [r2, #0]
		strcpy((char*)virtualSensorList[u8Index].inputSensor1, "AI1");
 802424e:	79fa      	ldrb	r2, [r7, #7]
 8024250:	4613      	mov	r3, r2
 8024252:	005b      	lsls	r3, r3, #1
 8024254:	4413      	add	r3, r2
 8024256:	019b      	lsls	r3, r3, #6
 8024258:	4413      	add	r3, r2
 802425a:	3310      	adds	r3, #16
 802425c:	4a38      	ldr	r2, [pc, #224]	; (8024340 <appStartRountine+0x878>)
 802425e:	4413      	add	r3, r2
 8024260:	3306      	adds	r3, #6
 8024262:	4a3b      	ldr	r2, [pc, #236]	; (8024350 <appStartRountine+0x888>)
 8024264:	6810      	ldr	r0, [r2, #0]
 8024266:	6018      	str	r0, [r3, #0]
		strcpy((char*)virtualSensorList[u8Index].index1, "0");
 8024268:	79fa      	ldrb	r2, [r7, #7]
 802426a:	4613      	mov	r3, r2
 802426c:	005b      	lsls	r3, r3, #1
 802426e:	4413      	add	r3, r2
 8024270:	019b      	lsls	r3, r3, #6
 8024272:	4413      	add	r3, r2
 8024274:	3318      	adds	r3, #24
 8024276:	4a32      	ldr	r2, [pc, #200]	; (8024340 <appStartRountine+0x878>)
 8024278:	4413      	add	r3, r2
 802427a:	3304      	adds	r3, #4
 802427c:	4935      	ldr	r1, [pc, #212]	; (8024354 <appStartRountine+0x88c>)
 802427e:	461a      	mov	r2, r3
 8024280:	460b      	mov	r3, r1
 8024282:	881b      	ldrh	r3, [r3, #0]
 8024284:	8013      	strh	r3, [r2, #0]
		strcpy((char*)virtualSensorList[u8Index].inputSensor2, "AI2");
 8024286:	79fa      	ldrb	r2, [r7, #7]
 8024288:	4613      	mov	r3, r2
 802428a:	005b      	lsls	r3, r3, #1
 802428c:	4413      	add	r3, r2
 802428e:	019b      	lsls	r3, r3, #6
 8024290:	4413      	add	r3, r2
 8024292:	3318      	adds	r3, #24
 8024294:	4a2a      	ldr	r2, [pc, #168]	; (8024340 <appStartRountine+0x878>)
 8024296:	4413      	add	r3, r2
 8024298:	3306      	adds	r3, #6
 802429a:	4a2f      	ldr	r2, [pc, #188]	; (8024358 <appStartRountine+0x890>)
 802429c:	6810      	ldr	r0, [r2, #0]
 802429e:	6018      	str	r0, [r3, #0]
		strcpy((char*)virtualSensorList[u8Index].index2, "0");
 80242a0:	79fa      	ldrb	r2, [r7, #7]
 80242a2:	4613      	mov	r3, r2
 80242a4:	005b      	lsls	r3, r3, #1
 80242a6:	4413      	add	r3, r2
 80242a8:	019b      	lsls	r3, r3, #6
 80242aa:	4413      	add	r3, r2
 80242ac:	3320      	adds	r3, #32
 80242ae:	4a24      	ldr	r2, [pc, #144]	; (8024340 <appStartRountine+0x878>)
 80242b0:	4413      	add	r3, r2
 80242b2:	3304      	adds	r3, #4
 80242b4:	4927      	ldr	r1, [pc, #156]	; (8024354 <appStartRountine+0x88c>)
 80242b6:	461a      	mov	r2, r3
 80242b8:	460b      	mov	r3, r1
 80242ba:	881b      	ldrh	r3, [r3, #0]
 80242bc:	8013      	strh	r3, [r2, #0]
		strcpy((char*)virtualSensorList[u8Index].startTime, "00:00:00");
 80242be:	79fa      	ldrb	r2, [r7, #7]
 80242c0:	4613      	mov	r3, r2
 80242c2:	005b      	lsls	r3, r3, #1
 80242c4:	4413      	add	r3, r2
 80242c6:	019b      	lsls	r3, r3, #6
 80242c8:	4413      	add	r3, r2
 80242ca:	3320      	adds	r3, #32
 80242cc:	4a1c      	ldr	r2, [pc, #112]	; (8024340 <appStartRountine+0x878>)
 80242ce:	4413      	add	r3, r2
 80242d0:	3306      	adds	r3, #6
 80242d2:	4922      	ldr	r1, [pc, #136]	; (802435c <appStartRountine+0x894>)
 80242d4:	461a      	mov	r2, r3
 80242d6:	460b      	mov	r3, r1
 80242d8:	cb03      	ldmia	r3!, {r0, r1}
 80242da:	6010      	str	r0, [r2, #0]
 80242dc:	6051      	str	r1, [r2, #4]
 80242de:	781b      	ldrb	r3, [r3, #0]
 80242e0:	7213      	strb	r3, [r2, #8]
		strcpy((char*)virtualSensorList[u8Index].sensorHeight, "0");
 80242e2:	79fa      	ldrb	r2, [r7, #7]
 80242e4:	4613      	mov	r3, r2
 80242e6:	005b      	lsls	r3, r3, #1
 80242e8:	4413      	add	r3, r2
 80242ea:	019b      	lsls	r3, r3, #6
 80242ec:	4413      	add	r3, r2
 80242ee:	3338      	adds	r3, #56	; 0x38
 80242f0:	4a13      	ldr	r2, [pc, #76]	; (8024340 <appStartRountine+0x878>)
 80242f2:	4413      	add	r3, r2
 80242f4:	3303      	adds	r3, #3
 80242f6:	4917      	ldr	r1, [pc, #92]	; (8024354 <appStartRountine+0x88c>)
 80242f8:	461a      	mov	r2, r3
 80242fa:	460b      	mov	r3, r1
 80242fc:	881b      	ldrh	r3, [r3, #0]
 80242fe:	8013      	strh	r3, [r2, #0]
		strcpy((char*)virtualSensorList[u8Index].dataSequence, "NA=NA=NA");
 8024300:	79fa      	ldrb	r2, [r7, #7]
 8024302:	4613      	mov	r3, r2
 8024304:	005b      	lsls	r3, r3, #1
 8024306:	4413      	add	r3, r2
 8024308:	019b      	lsls	r3, r3, #6
 802430a:	4413      	add	r3, r2
 802430c:	3340      	adds	r3, #64	; 0x40
 802430e:	4a0c      	ldr	r2, [pc, #48]	; (8024340 <appStartRountine+0x878>)
 8024310:	4413      	add	r3, r2
 8024312:	3301      	adds	r3, #1
 8024314:	4912      	ldr	r1, [pc, #72]	; (8024360 <appStartRountine+0x898>)
 8024316:	461a      	mov	r2, r3
 8024318:	460b      	mov	r3, r1
 802431a:	cb03      	ldmia	r3!, {r0, r1}
 802431c:	6010      	str	r0, [r2, #0]
 802431e:	6051      	str	r1, [r2, #4]
 8024320:	781b      	ldrb	r3, [r3, #0]
 8024322:	7213      	strb	r3, [r2, #8]
	for (u8Index = 0; u8Index < 15; u8Index++)
 8024324:	79fb      	ldrb	r3, [r7, #7]
 8024326:	3301      	adds	r3, #1
 8024328:	71fb      	strb	r3, [r7, #7]
 802432a:	79fb      	ldrb	r3, [r7, #7]
 802432c:	2b0e      	cmp	r3, #14
 802432e:	f67f af4b 	bls.w	80241c8 <appStartRountine+0x700>
	}
}
 8024332:	bf00      	nop
 8024334:	bf00      	nop
 8024336:	3708      	adds	r7, #8
 8024338:	46bd      	mov	sp, r7
 802433a:	bdb0      	pop	{r4, r5, r7, pc}
 802433c:	0802e758 	.word	0x0802e758
 8024340:	240091bc 	.word	0x240091bc
 8024344:	0802e760 	.word	0x0802e760
 8024348:	0802e640 	.word	0x0802e640
 802434c:	0802e764 	.word	0x0802e764
 8024350:	0802e768 	.word	0x0802e768
 8024354:	0802e658 	.word	0x0802e658
 8024358:	0802e76c 	.word	0x0802e76c
 802435c:	0802e6bc 	.word	0x0802e6bc
 8024360:	0802e770 	.word	0x0802e770

08024364 <appProcessCommand>:

void appProcessCommand(uint8_t *pInputData)
{
 8024364:	b580      	push	{r7, lr}
 8024366:	b086      	sub	sp, #24
 8024368:	af00      	add	r7, sp, #0
 802436a:	6078      	str	r0, [r7, #4]
	char *command;
	char delimiter[] = ";";
 802436c:	233b      	movs	r3, #59	; 0x3b
 802436e:	81bb      	strh	r3, [r7, #12]
	command = strtok((char*)pInputData, delimiter);
 8024370:	f107 030c 	add.w	r3, r7, #12
 8024374:	4619      	mov	r1, r3
 8024376:	6878      	ldr	r0, [r7, #4]
 8024378:	f003 f9b0 	bl	80276dc <strtok>
 802437c:	4603      	mov	r3, r0
 802437e:	613b      	str	r3, [r7, #16]
	uint8_t i;
	uint8_t u8Index = 0;
 8024380:	2300      	movs	r3, #0
 8024382:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < 16; i++) {
 8024384:	2300      	movs	r3, #0
 8024386:	75fb      	strb	r3, [r7, #23]
 8024388:	e011      	b.n	80243ae <appProcessCommand+0x4a>
	    if (0 != strcmp (command, (char*)u8CommandConfig[i])) {
 802438a:	7dfb      	ldrb	r3, [r7, #23]
 802438c:	00db      	lsls	r3, r3, #3
 802438e:	4a35      	ldr	r2, [pc, #212]	; (8024464 <appProcessCommand+0x100>)
 8024390:	4413      	add	r3, r2
 8024392:	4619      	mov	r1, r3
 8024394:	6938      	ldr	r0, [r7, #16]
 8024396:	f7db ffa3 	bl	80002e0 <strcmp>
 802439a:	4603      	mov	r3, r0
 802439c:	2b00      	cmp	r3, #0
 802439e:	d003      	beq.n	80243a8 <appProcessCommand+0x44>
	for (i = 0; i < 16; i++) {
 80243a0:	7dfb      	ldrb	r3, [r7, #23]
 80243a2:	3301      	adds	r3, #1
 80243a4:	75fb      	strb	r3, [r7, #23]
 80243a6:	e002      	b.n	80243ae <appProcessCommand+0x4a>
	        continue;
	    }
		/* get command function */
		u8Index = i;
 80243a8:	7dfb      	ldrb	r3, [r7, #23]
 80243aa:	75bb      	strb	r3, [r7, #22]
		break;
 80243ac:	e002      	b.n	80243b4 <appProcessCommand+0x50>
	for (i = 0; i < 16; i++) {
 80243ae:	7dfb      	ldrb	r3, [r7, #23]
 80243b0:	2b0f      	cmp	r3, #15
 80243b2:	d9ea      	bls.n	802438a <appProcessCommand+0x26>
	}

    switch(u8Index)
 80243b4:	7dbb      	ldrb	r3, [r7, #22]
 80243b6:	2b0f      	cmp	r3, #15
 80243b8:	d84f      	bhi.n	802445a <appProcessCommand+0xf6>
 80243ba:	a201      	add	r2, pc, #4	; (adr r2, 80243c0 <appProcessCommand+0x5c>)
 80243bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80243c0:	08024401 	.word	0x08024401
 80243c4:	08024407 	.word	0x08024407
 80243c8:	0802440d 	.word	0x0802440d
 80243cc:	08024413 	.word	0x08024413
 80243d0:	08024419 	.word	0x08024419
 80243d4:	0802441f 	.word	0x0802441f
 80243d8:	08024425 	.word	0x08024425
 80243dc:	0802442b 	.word	0x0802442b
 80243e0:	08024431 	.word	0x08024431
 80243e4:	08024437 	.word	0x08024437
 80243e8:	0802445b 	.word	0x0802445b
 80243ec:	0802443d 	.word	0x0802443d
 80243f0:	08024443 	.word	0x08024443
 80243f4:	08024449 	.word	0x08024449
 80243f8:	0802444f 	.word	0x0802444f
 80243fc:	08024455 	.word	0x08024455
    {
        case 0:
            /* Command = "LN" -> Screen 5 */
            appLogin();
 8024400:	f000 f832 	bl	8024468 <appLogin>
            break;
 8024404:	e02a      	b.n	802445c <appProcessCommand+0xf8>
	    case 1:
	        /* Command = "S7" -> Screen 7 */
	        appOverView();
 8024406:	f000 f83d 	bl	8024484 <appOverView>
	        break;
 802440a:	e027      	b.n	802445c <appProcessCommand+0xf8>
	    case 2:
	        /* Command = "S8" -> Screen 8 */
			appSetting();
 802440c:	f000 f886 	bl	802451c <appSetting>
	        break;
 8024410:	e024      	b.n	802445c <appProcessCommand+0xf8>
	    case 3:
	        /* Command = "S91" -> Screen 9.1 */
	        appAnalogSetting();
 8024412:	f000 f8e5 	bl	80245e0 <appAnalogSetting>
	        break;
 8024416:	e021      	b.n	802445c <appProcessCommand+0xf8>
	    case 4:
	        /* Command = "S92" -> Screen 9.2 */
	        appDigitalSetting();
 8024418:	f000 f9dc 	bl	80247d4 <appDigitalSetting>
	        break;
 802441c:	e01e      	b.n	802445c <appProcessCommand+0xf8>
	    case 5:
	        /* Command = "S9R" -> Screen 9.3 */
	        appSerialSetting();
 802441e:	f000 fad1 	bl	80249c4 <appSerialSetting>
	        break;
 8024422:	e01b      	b.n	802445c <appProcessCommand+0xf8>
	    case 6:
	        /* Command = "RSS;0x" -> Screen 10 */
	        appSensorStatus();
 8024424:	f001 fa88 	bl	8025938 <appSensorStatus>
	        break;
 8024428:	e018      	b.n	802445c <appProcessCommand+0xf8>
	    case 7:
	        /* Command = "RSSDATA;xx" */
	        /* To do: send data from serial sensor to app */
	        appGetDataSequence();
 802442a:	f000 fe5b 	bl	80250e4 <appGetDataSequence>
	        break;
 802442e:	e015      	b.n	802445c <appProcessCommand+0xf8>
	    case 8:
	        /* Command = "RS11" */
	        /* To do: send parameter transmission setting to app */
	        appTransmissionStatus();
 8024430:	f001 f9e2 	bl	80257f8 <appTransmissionStatus>
	        break;
 8024434:	e012      	b.n	802445c <appProcessCommand+0xf8>
	    case 9:
	        /* Command = "S11" -> Screen 11 */
	        /* To do: save parameter transmission setting */
	        appTransmissionSetting();
 8024436:	f000 fc31 	bl	8024c9c <appTransmissionSetting>
	        break;
 802443a:	e00f      	b.n	802445c <appProcessCommand+0xf8>
	        /* Command = "S12" -> Show Log Message */
	        // HME_Logs_Status((uint8_t*)&dts_t[sizeCmd+1]);
	        break;
	    case 11:
	        /* S13 -> Setting Virtual Sensor */
	        appVirtualSetting();
 802443c:	f000 fd18 	bl	8024e70 <appVirtualSetting>
	        break;
 8024440:	e00c      	b.n	802445c <appProcessCommand+0xf8>
	    case 12:
	        /* Command = "S14" -> save sorting channel */
	        appSortSetting();
 8024442:	f000 fcef 	bl	8024e24 <appSortSetting>
	        break;
 8024446:	e009      	b.n	802445c <appProcessCommand+0xf8>
	    case 13:
	        /* Command = "RS14" -> show sorting channel */
	        appSortStatus();
 8024448:	f001 fa5a 	bl	8025900 <appSortStatus>
	        break;
 802444c:	e006      	b.n	802445c <appProcessCommand+0xf8>
	    case 14:
	        /* Command = "S15" -> save cellular setting */
	        appCellularSetting();
 802444e:	f000 fcb3 	bl	8024db8 <appCellularSetting>
	        break;
 8024452:	e003      	b.n	802445c <appProcessCommand+0xf8>
	    case 15:
	        /* Command = "RS15" -> show cellular setting */
	        appCellularStatus();
 8024454:	f001 fa14 	bl	8025880 <appCellularStatus>
	        break;
 8024458:	e000      	b.n	802445c <appProcessCommand+0xf8>
	    default:
	        break;
 802445a:	bf00      	nop
	}
}
 802445c:	bf00      	nop
 802445e:	3718      	adds	r7, #24
 8024460:	46bd      	mov	sp, r7
 8024462:	bd80      	pop	{r7, pc}
 8024464:	2400003c 	.word	0x2400003c

08024468 <appLogin>:

static void appLogin(void)
{
 8024468:	b580      	push	{r7, lr}
 802446a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)"OK!", 3, 10);
 802446c:	230a      	movs	r3, #10
 802446e:	2203      	movs	r2, #3
 8024470:	4902      	ldr	r1, [pc, #8]	; (802447c <appLogin+0x14>)
 8024472:	4803      	ldr	r0, [pc, #12]	; (8024480 <appLogin+0x18>)
 8024474:	f7e3 fe34 	bl	80080e0 <HAL_UART_Transmit>
}
 8024478:	bf00      	nop
 802447a:	bd80      	pop	{r7, pc}
 802447c:	0802e77c 	.word	0x0802e77c
 8024480:	24008780 	.word	0x24008780

08024484 <appOverView>:

static void appOverView(void)
{
 8024484:	b580      	push	{r7, lr}
 8024486:	b08c      	sub	sp, #48	; 0x30
 8024488:	af0a      	add	r7, sp, #40	; 0x28
	uint8_t *pMessage = malloc(COMMAND_BUF_SIZE);
 802448a:	f44f 7080 	mov.w	r0, #256	; 0x100
 802448e:	f001 fe7d 	bl	802618c <malloc>
 8024492:	4603      	mov	r3, r0
 8024494:	607b      	str	r3, [r7, #4]
	uint8_t u8Lenght;
	u8Lenght = sprintf((char*)pMessage, "%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;%s!", &overview.modelName[0], &setting.stationName[0], \
 8024496:	4b14      	ldr	r3, [pc, #80]	; (80244e8 <appOverView+0x64>)
 8024498:	9308      	str	r3, [sp, #32]
 802449a:	4b14      	ldr	r3, [pc, #80]	; (80244ec <appOverView+0x68>)
 802449c:	9307      	str	r3, [sp, #28]
 802449e:	4b14      	ldr	r3, [pc, #80]	; (80244f0 <appOverView+0x6c>)
 80244a0:	9306      	str	r3, [sp, #24]
 80244a2:	4b14      	ldr	r3, [pc, #80]	; (80244f4 <appOverView+0x70>)
 80244a4:	9305      	str	r3, [sp, #20]
 80244a6:	4b14      	ldr	r3, [pc, #80]	; (80244f8 <appOverView+0x74>)
 80244a8:	9304      	str	r3, [sp, #16]
 80244aa:	4b14      	ldr	r3, [pc, #80]	; (80244fc <appOverView+0x78>)
 80244ac:	9303      	str	r3, [sp, #12]
 80244ae:	4b14      	ldr	r3, [pc, #80]	; (8024500 <appOverView+0x7c>)
 80244b0:	9302      	str	r3, [sp, #8]
 80244b2:	4b14      	ldr	r3, [pc, #80]	; (8024504 <appOverView+0x80>)
 80244b4:	9301      	str	r3, [sp, #4]
 80244b6:	4b14      	ldr	r3, [pc, #80]	; (8024508 <appOverView+0x84>)
 80244b8:	9300      	str	r3, [sp, #0]
 80244ba:	4b14      	ldr	r3, [pc, #80]	; (802450c <appOverView+0x88>)
 80244bc:	4a14      	ldr	r2, [pc, #80]	; (8024510 <appOverView+0x8c>)
 80244be:	4915      	ldr	r1, [pc, #84]	; (8024514 <appOverView+0x90>)
 80244c0:	6878      	ldr	r0, [r7, #4]
 80244c2:	f002 fe4f 	bl	8027164 <siprintf>
 80244c6:	4603      	mov	r3, r0
 80244c8:	70fb      	strb	r3, [r7, #3]
	                          &setting.stationID[0], &overview.serialNumber[0], &overview.firmwareVer[0], &overview.macAddress[0], \
							  &setting.ipAddress[0], &setting.subnetMask[0], &setting.gateway[0], &overview.batteryVolt[0], &setting.dateTime[0]);
	HAL_UART_Transmit(&huart1, pMessage, u8Lenght, 10);
 80244ca:	78fb      	ldrb	r3, [r7, #3]
 80244cc:	b29a      	uxth	r2, r3
 80244ce:	230a      	movs	r3, #10
 80244d0:	6879      	ldr	r1, [r7, #4]
 80244d2:	4811      	ldr	r0, [pc, #68]	; (8024518 <appOverView+0x94>)
 80244d4:	f7e3 fe04 	bl	80080e0 <HAL_UART_Transmit>
	free(pMessage);
 80244d8:	6878      	ldr	r0, [r7, #4]
 80244da:	f001 fe5f 	bl	802619c <free>
}
 80244de:	bf00      	nop
 80244e0:	3708      	adds	r7, #8
 80244e2:	46bd      	mov	sp, r7
 80244e4:	bd80      	pop	{r7, pc}
 80244e6:	bf00      	nop
 80244e8:	24009132 	.word	0x24009132
 80244ec:	24009da0 	.word	0x24009da0
 80244f0:	24009172 	.word	0x24009172
 80244f4:	2400915e 	.word	0x2400915e
 80244f8:	2400914a 	.word	0x2400914a
 80244fc:	24009d8c 	.word	0x24009d8c
 8024500:	24009d84 	.word	0x24009d84
 8024504:	24009d7c 	.word	0x24009d7c
 8024508:	2400912a 	.word	0x2400912a
 802450c:	2400911c 	.word	0x2400911c
 8024510:	24009d74 	.word	0x24009d74
 8024514:	0802e780 	.word	0x0802e780
 8024518:	24008780 	.word	0x24008780

0802451c <appSetting>:

static void appSetting(void)
{
 802451c:	b580      	push	{r7, lr}
 802451e:	b082      	sub	sp, #8
 8024520:	af00      	add	r7, sp, #0
	char *token;
	char delimiter[2] = ";";
 8024522:	233b      	movs	r3, #59	; 0x3b
 8024524:	803b      	strh	r3, [r7, #0]

	token = strtok(NULL, delimiter);
 8024526:	463b      	mov	r3, r7
 8024528:	4619      	mov	r1, r3
 802452a:	2000      	movs	r0, #0
 802452c:	f003 f8d6 	bl	80276dc <strtok>
 8024530:	4603      	mov	r3, r0
 8024532:	607b      	str	r3, [r7, #4]
	strcpy(&setting.stationName[0], token);
 8024534:	6879      	ldr	r1, [r7, #4]
 8024536:	4822      	ldr	r0, [pc, #136]	; (80245c0 <appSetting+0xa4>)
 8024538:	f002 feb2 	bl	80272a0 <strcpy>
	token = strtok(NULL, delimiter);
 802453c:	463b      	mov	r3, r7
 802453e:	4619      	mov	r1, r3
 8024540:	2000      	movs	r0, #0
 8024542:	f003 f8cb 	bl	80276dc <strtok>
 8024546:	4603      	mov	r3, r0
 8024548:	607b      	str	r3, [r7, #4]
	strcpy(&setting.stationID[0], token);
 802454a:	6879      	ldr	r1, [r7, #4]
 802454c:	481d      	ldr	r0, [pc, #116]	; (80245c4 <appSetting+0xa8>)
 802454e:	f002 fea7 	bl	80272a0 <strcpy>
	token = strtok(NULL, delimiter);
 8024552:	463b      	mov	r3, r7
 8024554:	4619      	mov	r1, r3
 8024556:	2000      	movs	r0, #0
 8024558:	f003 f8c0 	bl	80276dc <strtok>
 802455c:	4603      	mov	r3, r0
 802455e:	607b      	str	r3, [r7, #4]
	strcpy(&setting.dateTime[0], token);
 8024560:	6879      	ldr	r1, [r7, #4]
 8024562:	4819      	ldr	r0, [pc, #100]	; (80245c8 <appSetting+0xac>)
 8024564:	f002 fe9c 	bl	80272a0 <strcpy>
	token = strtok(NULL, delimiter);
 8024568:	463b      	mov	r3, r7
 802456a:	4619      	mov	r1, r3
 802456c:	2000      	movs	r0, #0
 802456e:	f003 f8b5 	bl	80276dc <strtok>
 8024572:	4603      	mov	r3, r0
 8024574:	607b      	str	r3, [r7, #4]
	strcpy(&setting.ipAddress[0], token);
 8024576:	6879      	ldr	r1, [r7, #4]
 8024578:	4814      	ldr	r0, [pc, #80]	; (80245cc <appSetting+0xb0>)
 802457a:	f002 fe91 	bl	80272a0 <strcpy>
	token = strtok(NULL, delimiter);
 802457e:	463b      	mov	r3, r7
 8024580:	4619      	mov	r1, r3
 8024582:	2000      	movs	r0, #0
 8024584:	f003 f8aa 	bl	80276dc <strtok>
 8024588:	4603      	mov	r3, r0
 802458a:	607b      	str	r3, [r7, #4]
	strcpy(&setting.subnetMask[0], token);
 802458c:	6879      	ldr	r1, [r7, #4]
 802458e:	4810      	ldr	r0, [pc, #64]	; (80245d0 <appSetting+0xb4>)
 8024590:	f002 fe86 	bl	80272a0 <strcpy>
	token = strtok(NULL, delimiter);
 8024594:	463b      	mov	r3, r7
 8024596:	4619      	mov	r1, r3
 8024598:	2000      	movs	r0, #0
 802459a:	f003 f89f 	bl	80276dc <strtok>
 802459e:	4603      	mov	r3, r0
 80245a0:	607b      	str	r3, [r7, #4]
	strcpy(&setting.gateway[0], token);
 80245a2:	6879      	ldr	r1, [r7, #4]
 80245a4:	480b      	ldr	r0, [pc, #44]	; (80245d4 <appSetting+0xb8>)
 80245a6:	f002 fe7b 	bl	80272a0 <strcpy>

	HAL_UART_Transmit(&huart1, (uint8_t*)"8_OK!", 5, 10);
 80245aa:	230a      	movs	r3, #10
 80245ac:	2205      	movs	r2, #5
 80245ae:	490a      	ldr	r1, [pc, #40]	; (80245d8 <appSetting+0xbc>)
 80245b0:	480a      	ldr	r0, [pc, #40]	; (80245dc <appSetting+0xc0>)
 80245b2:	f7e3 fd95 	bl	80080e0 <HAL_UART_Transmit>
}
 80245b6:	bf00      	nop
 80245b8:	3708      	adds	r7, #8
 80245ba:	46bd      	mov	sp, r7
 80245bc:	bd80      	pop	{r7, pc}
 80245be:	bf00      	nop
 80245c0:	2400911c 	.word	0x2400911c
 80245c4:	2400912a 	.word	0x2400912a
 80245c8:	24009132 	.word	0x24009132
 80245cc:	2400914a 	.word	0x2400914a
 80245d0:	2400915e 	.word	0x2400915e
 80245d4:	24009172 	.word	0x24009172
 80245d8:	0802e7a4 	.word	0x0802e7a4
 80245dc:	24008780 	.word	0x24008780

080245e0 <appAnalogSetting>:

static void appAnalogSetting(void)
{
 80245e0:	b5b0      	push	{r4, r5, r7, lr}
 80245e2:	b092      	sub	sp, #72	; 0x48
 80245e4:	af00      	add	r7, sp, #0
	uint8_t u8Index;
    char cAnalogChannel[][5] = {"AI1", "AI2", "AI3", "AI4", "AI5", "AI6",\
 80245e6:	4b77      	ldr	r3, [pc, #476]	; (80247c4 <appAnalogSetting+0x1e4>)
 80245e8:	1d3c      	adds	r4, r7, #4
 80245ea:	461d      	mov	r5, r3
 80245ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80245ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80245f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80245f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80245f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80245f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80245f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80245fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                	           "AI7", "AI8", "AI9", "AI10", "AI11", "AI12"};

	char *token;
	char delimiter[2] = ";";
 8024600:	233b      	movs	r3, #59	; 0x3b
 8024602:	803b      	strh	r3, [r7, #0]

	token = strtok(NULL, delimiter);
 8024604:	463b      	mov	r3, r7
 8024606:	4619      	mov	r1, r3
 8024608:	2000      	movs	r0, #0
 802460a:	f003 f867 	bl	80276dc <strtok>
 802460e:	4603      	mov	r3, r0
 8024610:	643b      	str	r3, [r7, #64]	; 0x40
	/* Find analog channel corresponding */
	for (u8Index = 0; u8Index < 12; u8Index++)
 8024612:	2300      	movs	r3, #0
 8024614:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8024618:	e0ca      	b.n	80247b0 <appAnalogSetting+0x1d0>
	{
		if (0 == strcmp(token, cAnalogChannel[u8Index]))
 802461a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 802461e:	1d39      	adds	r1, r7, #4
 8024620:	4613      	mov	r3, r2
 8024622:	009b      	lsls	r3, r3, #2
 8024624:	4413      	add	r3, r2
 8024626:	440b      	add	r3, r1
 8024628:	4619      	mov	r1, r3
 802462a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 802462c:	f7db fe58 	bl	80002e0 <strcmp>
 8024630:	4603      	mov	r3, r0
 8024632:	2b00      	cmp	r3, #0
 8024634:	f040 80b7 	bne.w	80247a6 <appAnalogSetting+0x1c6>
		{
			strcpy((char*)analogSettingList[u8Index].channel, token);
 8024638:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 802463c:	4613      	mov	r3, r2
 802463e:	015b      	lsls	r3, r3, #5
 8024640:	1a9b      	subs	r3, r3, r2
 8024642:	005b      	lsls	r3, r3, #1
 8024644:	4a60      	ldr	r2, [pc, #384]	; (80247c8 <appAnalogSetting+0x1e8>)
 8024646:	4413      	add	r3, r2
 8024648:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802464a:	4618      	mov	r0, r3
 802464c:	f002 fe28 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter);
 8024650:	463b      	mov	r3, r7
 8024652:	4619      	mov	r1, r3
 8024654:	2000      	movs	r0, #0
 8024656:	f003 f841 	bl	80276dc <strtok>
 802465a:	4603      	mov	r3, r0
 802465c:	643b      	str	r3, [r7, #64]	; 0x40
			strcpy((char*)analogSettingList[u8Index].name, token);
 802465e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8024662:	4613      	mov	r3, r2
 8024664:	015b      	lsls	r3, r3, #5
 8024666:	1a9b      	subs	r3, r3, r2
 8024668:	005b      	lsls	r3, r3, #1
 802466a:	3310      	adds	r3, #16
 802466c:	4a56      	ldr	r2, [pc, #344]	; (80247c8 <appAnalogSetting+0x1e8>)
 802466e:	4413      	add	r3, r2
 8024670:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8024672:	4618      	mov	r0, r3
 8024674:	f002 fe14 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter);
 8024678:	463b      	mov	r3, r7
 802467a:	4619      	mov	r1, r3
 802467c:	2000      	movs	r0, #0
 802467e:	f003 f82d 	bl	80276dc <strtok>
 8024682:	4603      	mov	r3, r0
 8024684:	643b      	str	r3, [r7, #64]	; 0x40
			strcpy((char*)analogSettingList[u8Index].status, token);
 8024686:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 802468a:	4613      	mov	r3, r2
 802468c:	015b      	lsls	r3, r3, #5
 802468e:	1a9b      	subs	r3, r3, r2
 8024690:	005b      	lsls	r3, r3, #1
 8024692:	4a4d      	ldr	r2, [pc, #308]	; (80247c8 <appAnalogSetting+0x1e8>)
 8024694:	4413      	add	r3, r2
 8024696:	3306      	adds	r3, #6
 8024698:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802469a:	4618      	mov	r0, r3
 802469c:	f002 fe00 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter);
 80246a0:	463b      	mov	r3, r7
 80246a2:	4619      	mov	r1, r3
 80246a4:	2000      	movs	r0, #0
 80246a6:	f003 f819 	bl	80276dc <strtok>
 80246aa:	4603      	mov	r3, r0
 80246ac:	643b      	str	r3, [r7, #64]	; 0x40
			strcpy((char*)analogSettingList[u8Index].inputRange, token);
 80246ae:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80246b2:	4613      	mov	r3, r2
 80246b4:	015b      	lsls	r3, r3, #5
 80246b6:	1a9b      	subs	r3, r3, r2
 80246b8:	005b      	lsls	r3, r3, #1
 80246ba:	3318      	adds	r3, #24
 80246bc:	4a42      	ldr	r2, [pc, #264]	; (80247c8 <appAnalogSetting+0x1e8>)
 80246be:	4413      	add	r3, r2
 80246c0:	3302      	adds	r3, #2
 80246c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80246c4:	4618      	mov	r0, r3
 80246c6:	f002 fdeb 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter);
 80246ca:	463b      	mov	r3, r7
 80246cc:	4619      	mov	r1, r3
 80246ce:	2000      	movs	r0, #0
 80246d0:	f003 f804 	bl	80276dc <strtok>
 80246d4:	4603      	mov	r3, r0
 80246d6:	643b      	str	r3, [r7, #64]	; 0x40
			strcpy((char*)analogSettingList[u8Index].interval, token);
 80246d8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80246dc:	4613      	mov	r3, r2
 80246de:	015b      	lsls	r3, r3, #5
 80246e0:	1a9b      	subs	r3, r3, r2
 80246e2:	005b      	lsls	r3, r3, #1
 80246e4:	3320      	adds	r3, #32
 80246e6:	4a38      	ldr	r2, [pc, #224]	; (80247c8 <appAnalogSetting+0x1e8>)
 80246e8:	4413      	add	r3, r2
 80246ea:	3304      	adds	r3, #4
 80246ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80246ee:	4618      	mov	r0, r3
 80246f0:	f002 fdd6 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter);
 80246f4:	463b      	mov	r3, r7
 80246f6:	4619      	mov	r1, r3
 80246f8:	2000      	movs	r0, #0
 80246fa:	f002 ffef 	bl	80276dc <strtok>
 80246fe:	4603      	mov	r3, r0
 8024700:	643b      	str	r3, [r7, #64]	; 0x40
			strcpy((char*)analogSettingList[u8Index].slope, token);
 8024702:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8024706:	4613      	mov	r3, r2
 8024708:	015b      	lsls	r3, r3, #5
 802470a:	1a9b      	subs	r3, r3, r2
 802470c:	005b      	lsls	r3, r3, #1
 802470e:	3328      	adds	r3, #40	; 0x28
 8024710:	4a2d      	ldr	r2, [pc, #180]	; (80247c8 <appAnalogSetting+0x1e8>)
 8024712:	4413      	add	r3, r2
 8024714:	3302      	adds	r3, #2
 8024716:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8024718:	4618      	mov	r0, r3
 802471a:	f002 fdc1 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter);
 802471e:	463b      	mov	r3, r7
 8024720:	4619      	mov	r1, r3
 8024722:	2000      	movs	r0, #0
 8024724:	f002 ffda 	bl	80276dc <strtok>
 8024728:	4603      	mov	r3, r0
 802472a:	643b      	str	r3, [r7, #64]	; 0x40
			strcpy((char*)analogSettingList[u8Index].offset, token);
 802472c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8024730:	4613      	mov	r3, r2
 8024732:	015b      	lsls	r3, r3, #5
 8024734:	1a9b      	subs	r3, r3, r2
 8024736:	005b      	lsls	r3, r3, #1
 8024738:	3330      	adds	r3, #48	; 0x30
 802473a:	4a23      	ldr	r2, [pc, #140]	; (80247c8 <appAnalogSetting+0x1e8>)
 802473c:	4413      	add	r3, r2
 802473e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8024740:	4618      	mov	r0, r3
 8024742:	f002 fdad 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter);
 8024746:	463b      	mov	r3, r7
 8024748:	4619      	mov	r1, r3
 802474a:	2000      	movs	r0, #0
 802474c:	f002 ffc6 	bl	80276dc <strtok>
 8024750:	4603      	mov	r3, r0
 8024752:	643b      	str	r3, [r7, #64]	; 0x40
			strcpy((char*)analogSettingList[u8Index].rightDigit, token);
 8024754:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8024758:	4613      	mov	r3, r2
 802475a:	015b      	lsls	r3, r3, #5
 802475c:	1a9b      	subs	r3, r3, r2
 802475e:	005b      	lsls	r3, r3, #1
 8024760:	3330      	adds	r3, #48	; 0x30
 8024762:	4a19      	ldr	r2, [pc, #100]	; (80247c8 <appAnalogSetting+0x1e8>)
 8024764:	4413      	add	r3, r2
 8024766:	3306      	adds	r3, #6
 8024768:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802476a:	4618      	mov	r0, r3
 802476c:	f002 fd98 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter);
 8024770:	463b      	mov	r3, r7
 8024772:	4619      	mov	r1, r3
 8024774:	2000      	movs	r0, #0
 8024776:	f002 ffb1 	bl	80276dc <strtok>
 802477a:	4603      	mov	r3, r0
 802477c:	643b      	str	r3, [r7, #64]	; 0x40
			strcpy((char*)analogSettingList[u8Index].unit, token);
 802477e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8024782:	4613      	mov	r3, r2
 8024784:	015b      	lsls	r3, r3, #5
 8024786:	1a9b      	subs	r3, r3, r2
 8024788:	005b      	lsls	r3, r3, #1
 802478a:	3338      	adds	r3, #56	; 0x38
 802478c:	4a0e      	ldr	r2, [pc, #56]	; (80247c8 <appAnalogSetting+0x1e8>)
 802478e:	4413      	add	r3, r2
 8024790:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8024792:	4618      	mov	r0, r3
 8024794:	f002 fd84 	bl	80272a0 <strcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*)"91_OK!", 6, 10);
 8024798:	230a      	movs	r3, #10
 802479a:	2206      	movs	r2, #6
 802479c:	490b      	ldr	r1, [pc, #44]	; (80247cc <appAnalogSetting+0x1ec>)
 802479e:	480c      	ldr	r0, [pc, #48]	; (80247d0 <appAnalogSetting+0x1f0>)
 80247a0:	f7e3 fc9e 	bl	80080e0 <HAL_UART_Transmit>
			break;
 80247a4:	e00a      	b.n	80247bc <appAnalogSetting+0x1dc>
	for (u8Index = 0; u8Index < 12; u8Index++)
 80247a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80247aa:	3301      	adds	r3, #1
 80247ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80247b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80247b4:	2b0b      	cmp	r3, #11
 80247b6:	f67f af30 	bls.w	802461a <appAnalogSetting+0x3a>
		}
	}
}
 80247ba:	bf00      	nop
 80247bc:	bf00      	nop
 80247be:	3748      	adds	r7, #72	; 0x48
 80247c0:	46bd      	mov	sp, r7
 80247c2:	bdb0      	pop	{r4, r5, r7, pc}
 80247c4:	0802e7b4 	.word	0x0802e7b4
 80247c8:	24008960 	.word	0x24008960
 80247cc:	0802e7ac 	.word	0x0802e7ac
 80247d0:	24008780 	.word	0x24008780

080247d4 <appDigitalSetting>:

static void appDigitalSetting(void)
{
 80247d4:	b5b0      	push	{r4, r5, r7, lr}
 80247d6:	b08c      	sub	sp, #48	; 0x30
 80247d8:	af00      	add	r7, sp, #0
	uint8_t u8Index;
    char cDigitalChannel[][5] = {"DI1", "DI2", "DI3", "DI4", "DI5", "DI6"};
 80247da:	4b76      	ldr	r3, [pc, #472]	; (80249b4 <appDigitalSetting+0x1e0>)
 80247dc:	f107 0408 	add.w	r4, r7, #8
 80247e0:	461d      	mov	r5, r3
 80247e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80247e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80247e6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80247ea:	c407      	stmia	r4!, {r0, r1, r2}
 80247ec:	8023      	strh	r3, [r4, #0]

	char *token;
	char delimiter[2] = ";";
 80247ee:	233b      	movs	r3, #59	; 0x3b
 80247f0:	80bb      	strh	r3, [r7, #4]

	token = strtok(NULL, delimiter);
 80247f2:	1d3b      	adds	r3, r7, #4
 80247f4:	4619      	mov	r1, r3
 80247f6:	2000      	movs	r0, #0
 80247f8:	f002 ff70 	bl	80276dc <strtok>
 80247fc:	4603      	mov	r3, r0
 80247fe:	62bb      	str	r3, [r7, #40]	; 0x28
	/* Find analog channel corresponding */
	for (u8Index = 0; u8Index < 6; u8Index++)
 8024800:	2300      	movs	r3, #0
 8024802:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8024806:	e0cb      	b.n	80249a0 <appDigitalSetting+0x1cc>
	{
		if (0 == strcmp(token, cDigitalChannel[u8Index]))
 8024808:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 802480c:	f107 0108 	add.w	r1, r7, #8
 8024810:	4613      	mov	r3, r2
 8024812:	009b      	lsls	r3, r3, #2
 8024814:	4413      	add	r3, r2
 8024816:	440b      	add	r3, r1
 8024818:	4619      	mov	r1, r3
 802481a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802481c:	f7db fd60 	bl	80002e0 <strcmp>
 8024820:	4603      	mov	r3, r0
 8024822:	2b00      	cmp	r3, #0
 8024824:	f040 80b7 	bne.w	8024996 <appDigitalSetting+0x1c2>
		{
			strcpy((char*)digitalSettingList[u8Index].channel, token);
 8024828:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 802482c:	4613      	mov	r3, r2
 802482e:	015b      	lsls	r3, r3, #5
 8024830:	1a9b      	subs	r3, r3, r2
 8024832:	005b      	lsls	r3, r3, #1
 8024834:	4a60      	ldr	r2, [pc, #384]	; (80249b8 <appDigitalSetting+0x1e4>)
 8024836:	4413      	add	r3, r2
 8024838:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802483a:	4618      	mov	r0, r3
 802483c:	f002 fd30 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter);
 8024840:	1d3b      	adds	r3, r7, #4
 8024842:	4619      	mov	r1, r3
 8024844:	2000      	movs	r0, #0
 8024846:	f002 ff49 	bl	80276dc <strtok>
 802484a:	4603      	mov	r3, r0
 802484c:	62bb      	str	r3, [r7, #40]	; 0x28
			strcpy((char*)digitalSettingList[u8Index].name, token);
 802484e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8024852:	4613      	mov	r3, r2
 8024854:	015b      	lsls	r3, r3, #5
 8024856:	1a9b      	subs	r3, r3, r2
 8024858:	005b      	lsls	r3, r3, #1
 802485a:	3310      	adds	r3, #16
 802485c:	4a56      	ldr	r2, [pc, #344]	; (80249b8 <appDigitalSetting+0x1e4>)
 802485e:	4413      	add	r3, r2
 8024860:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8024862:	4618      	mov	r0, r3
 8024864:	f002 fd1c 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter);
 8024868:	1d3b      	adds	r3, r7, #4
 802486a:	4619      	mov	r1, r3
 802486c:	2000      	movs	r0, #0
 802486e:	f002 ff35 	bl	80276dc <strtok>
 8024872:	4603      	mov	r3, r0
 8024874:	62bb      	str	r3, [r7, #40]	; 0x28
			strcpy((char*)digitalSettingList[u8Index].status, token);
 8024876:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 802487a:	4613      	mov	r3, r2
 802487c:	015b      	lsls	r3, r3, #5
 802487e:	1a9b      	subs	r3, r3, r2
 8024880:	005b      	lsls	r3, r3, #1
 8024882:	4a4d      	ldr	r2, [pc, #308]	; (80249b8 <appDigitalSetting+0x1e4>)
 8024884:	4413      	add	r3, r2
 8024886:	3306      	adds	r3, #6
 8024888:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802488a:	4618      	mov	r0, r3
 802488c:	f002 fd08 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter);
 8024890:	1d3b      	adds	r3, r7, #4
 8024892:	4619      	mov	r1, r3
 8024894:	2000      	movs	r0, #0
 8024896:	f002 ff21 	bl	80276dc <strtok>
 802489a:	4603      	mov	r3, r0
 802489c:	62bb      	str	r3, [r7, #40]	; 0x28
			strcpy((char*)digitalSettingList[u8Index].mode, token);
 802489e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80248a2:	4613      	mov	r3, r2
 80248a4:	015b      	lsls	r3, r3, #5
 80248a6:	1a9b      	subs	r3, r3, r2
 80248a8:	005b      	lsls	r3, r3, #1
 80248aa:	3318      	adds	r3, #24
 80248ac:	4a42      	ldr	r2, [pc, #264]	; (80249b8 <appDigitalSetting+0x1e4>)
 80248ae:	4413      	add	r3, r2
 80248b0:	3302      	adds	r3, #2
 80248b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80248b4:	4618      	mov	r0, r3
 80248b6:	f002 fcf3 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter);
 80248ba:	1d3b      	adds	r3, r7, #4
 80248bc:	4619      	mov	r1, r3
 80248be:	2000      	movs	r0, #0
 80248c0:	f002 ff0c 	bl	80276dc <strtok>
 80248c4:	4603      	mov	r3, r0
 80248c6:	62bb      	str	r3, [r7, #40]	; 0x28
			strcpy((char*)digitalSettingList[u8Index].interval, token);
 80248c8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80248cc:	4613      	mov	r3, r2
 80248ce:	015b      	lsls	r3, r3, #5
 80248d0:	1a9b      	subs	r3, r3, r2
 80248d2:	005b      	lsls	r3, r3, #1
 80248d4:	3320      	adds	r3, #32
 80248d6:	4a38      	ldr	r2, [pc, #224]	; (80249b8 <appDigitalSetting+0x1e4>)
 80248d8:	4413      	add	r3, r2
 80248da:	3304      	adds	r3, #4
 80248dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80248de:	4618      	mov	r0, r3
 80248e0:	f002 fcde 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter);
 80248e4:	1d3b      	adds	r3, r7, #4
 80248e6:	4619      	mov	r1, r3
 80248e8:	2000      	movs	r0, #0
 80248ea:	f002 fef7 	bl	80276dc <strtok>
 80248ee:	4603      	mov	r3, r0
 80248f0:	62bb      	str	r3, [r7, #40]	; 0x28
			strcpy((char*)digitalSettingList[u8Index].slope, token);
 80248f2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80248f6:	4613      	mov	r3, r2
 80248f8:	015b      	lsls	r3, r3, #5
 80248fa:	1a9b      	subs	r3, r3, r2
 80248fc:	005b      	lsls	r3, r3, #1
 80248fe:	3328      	adds	r3, #40	; 0x28
 8024900:	4a2d      	ldr	r2, [pc, #180]	; (80249b8 <appDigitalSetting+0x1e4>)
 8024902:	4413      	add	r3, r2
 8024904:	3302      	adds	r3, #2
 8024906:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8024908:	4618      	mov	r0, r3
 802490a:	f002 fcc9 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter);
 802490e:	1d3b      	adds	r3, r7, #4
 8024910:	4619      	mov	r1, r3
 8024912:	2000      	movs	r0, #0
 8024914:	f002 fee2 	bl	80276dc <strtok>
 8024918:	4603      	mov	r3, r0
 802491a:	62bb      	str	r3, [r7, #40]	; 0x28
			strcpy((char*)digitalSettingList[u8Index].offset, token);
 802491c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8024920:	4613      	mov	r3, r2
 8024922:	015b      	lsls	r3, r3, #5
 8024924:	1a9b      	subs	r3, r3, r2
 8024926:	005b      	lsls	r3, r3, #1
 8024928:	3330      	adds	r3, #48	; 0x30
 802492a:	4a23      	ldr	r2, [pc, #140]	; (80249b8 <appDigitalSetting+0x1e4>)
 802492c:	4413      	add	r3, r2
 802492e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8024930:	4618      	mov	r0, r3
 8024932:	f002 fcb5 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter);
 8024936:	1d3b      	adds	r3, r7, #4
 8024938:	4619      	mov	r1, r3
 802493a:	2000      	movs	r0, #0
 802493c:	f002 fece 	bl	80276dc <strtok>
 8024940:	4603      	mov	r3, r0
 8024942:	62bb      	str	r3, [r7, #40]	; 0x28
			strcpy((char*)digitalSettingList[u8Index].rightDigit, token);
 8024944:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8024948:	4613      	mov	r3, r2
 802494a:	015b      	lsls	r3, r3, #5
 802494c:	1a9b      	subs	r3, r3, r2
 802494e:	005b      	lsls	r3, r3, #1
 8024950:	3330      	adds	r3, #48	; 0x30
 8024952:	4a19      	ldr	r2, [pc, #100]	; (80249b8 <appDigitalSetting+0x1e4>)
 8024954:	4413      	add	r3, r2
 8024956:	3306      	adds	r3, #6
 8024958:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802495a:	4618      	mov	r0, r3
 802495c:	f002 fca0 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter);
 8024960:	1d3b      	adds	r3, r7, #4
 8024962:	4619      	mov	r1, r3
 8024964:	2000      	movs	r0, #0
 8024966:	f002 feb9 	bl	80276dc <strtok>
 802496a:	4603      	mov	r3, r0
 802496c:	62bb      	str	r3, [r7, #40]	; 0x28
			strcpy((char*)digitalSettingList[u8Index].unit, token);
 802496e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8024972:	4613      	mov	r3, r2
 8024974:	015b      	lsls	r3, r3, #5
 8024976:	1a9b      	subs	r3, r3, r2
 8024978:	005b      	lsls	r3, r3, #1
 802497a:	3338      	adds	r3, #56	; 0x38
 802497c:	4a0e      	ldr	r2, [pc, #56]	; (80249b8 <appDigitalSetting+0x1e4>)
 802497e:	4413      	add	r3, r2
 8024980:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8024982:	4618      	mov	r0, r3
 8024984:	f002 fc8c 	bl	80272a0 <strcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*)"92_OK!", 6, 10);
 8024988:	230a      	movs	r3, #10
 802498a:	2206      	movs	r2, #6
 802498c:	490b      	ldr	r1, [pc, #44]	; (80249bc <appDigitalSetting+0x1e8>)
 802498e:	480c      	ldr	r0, [pc, #48]	; (80249c0 <appDigitalSetting+0x1ec>)
 8024990:	f7e3 fba6 	bl	80080e0 <HAL_UART_Transmit>
			break;
 8024994:	e00a      	b.n	80249ac <appDigitalSetting+0x1d8>
	for (u8Index = 0; u8Index < 6; u8Index++)
 8024996:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802499a:	3301      	adds	r3, #1
 802499c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80249a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80249a4:	2b05      	cmp	r3, #5
 80249a6:	f67f af2f 	bls.w	8024808 <appDigitalSetting+0x34>
		}
	}
}
 80249aa:	bf00      	nop
 80249ac:	bf00      	nop
 80249ae:	3730      	adds	r7, #48	; 0x30
 80249b0:	46bd      	mov	sp, r7
 80249b2:	bdb0      	pop	{r4, r5, r7, pc}
 80249b4:	0802e7f8 	.word	0x0802e7f8
 80249b8:	24008c48 	.word	0x24008c48
 80249bc:	0802e7f0 	.word	0x0802e7f0
 80249c0:	24008780 	.word	0x24008780

080249c4 <appSerialSetting>:

static void appSerialSetting(void)
{
 80249c4:	b5b0      	push	{r4, r5, r7, lr}
 80249c6:	b08e      	sub	sp, #56	; 0x38
 80249c8:	af00      	add	r7, sp, #0
	uint8_t u8Index;
    char cSerialChannel[][7] = {"COM1", "COM2", "COM3", "COM4", "RS485", "SDI-12"};
 80249ca:	4bb0      	ldr	r3, [pc, #704]	; (8024c8c <appSerialSetting+0x2c8>)
 80249cc:	1d3c      	adds	r4, r7, #4
 80249ce:	461d      	mov	r5, r3
 80249d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80249d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80249d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80249d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80249d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80249dc:	c403      	stmia	r4!, {r0, r1}
 80249de:	8022      	strh	r2, [r4, #0]

	char *token;
	char delimiter1[2] = ";";
 80249e0:	233b      	movs	r3, #59	; 0x3b
 80249e2:	803b      	strh	r3, [r7, #0]

	token = strtok(NULL, delimiter1);
 80249e4:	463b      	mov	r3, r7
 80249e6:	4619      	mov	r1, r3
 80249e8:	2000      	movs	r0, #0
 80249ea:	f002 fe77 	bl	80276dc <strtok>
 80249ee:	4603      	mov	r3, r0
 80249f0:	633b      	str	r3, [r7, #48]	; 0x30
	/* Find serial channel corresponding */
	for (u8Index = 0; u8Index < 6; u8Index++)
 80249f2:	2300      	movs	r3, #0
 80249f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80249f8:	e13e      	b.n	8024c78 <appSerialSetting+0x2b4>
	{
		if (0 == strcmp(token, cSerialChannel[u8Index]))
 80249fa:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80249fe:	1d39      	adds	r1, r7, #4
 8024a00:	4613      	mov	r3, r2
 8024a02:	00db      	lsls	r3, r3, #3
 8024a04:	1a9b      	subs	r3, r3, r2
 8024a06:	440b      	add	r3, r1
 8024a08:	4619      	mov	r1, r3
 8024a0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8024a0c:	f7db fc68 	bl	80002e0 <strcmp>
 8024a10:	4603      	mov	r3, r0
 8024a12:	2b00      	cmp	r3, #0
 8024a14:	f040 812b 	bne.w	8024c6e <appSerialSetting+0x2aa>
		{
			memset(&serialSettingList[u8Index], 0, sizeof(tsSerial_t));
 8024a18:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8024a1c:	4613      	mov	r3, r2
 8024a1e:	00db      	lsls	r3, r3, #3
 8024a20:	4413      	add	r3, r2
 8024a22:	011b      	lsls	r3, r3, #4
 8024a24:	4a9a      	ldr	r2, [pc, #616]	; (8024c90 <appSerialSetting+0x2cc>)
 8024a26:	4413      	add	r3, r2
 8024a28:	2290      	movs	r2, #144	; 0x90
 8024a2a:	2100      	movs	r1, #0
 8024a2c:	4618      	mov	r0, r3
 8024a2e:	f001 fbf3 	bl	8026218 <memset>
			strcpy((char*)serialSettingList[u8Index].channel, token);
 8024a32:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8024a36:	4613      	mov	r3, r2
 8024a38:	00db      	lsls	r3, r3, #3
 8024a3a:	4413      	add	r3, r2
 8024a3c:	011b      	lsls	r3, r3, #4
 8024a3e:	4a94      	ldr	r2, [pc, #592]	; (8024c90 <appSerialSetting+0x2cc>)
 8024a40:	4413      	add	r3, r2
 8024a42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8024a44:	4618      	mov	r0, r3
 8024a46:	f002 fc2b 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter1);
 8024a4a:	463b      	mov	r3, r7
 8024a4c:	4619      	mov	r1, r3
 8024a4e:	2000      	movs	r0, #0
 8024a50:	f002 fe44 	bl	80276dc <strtok>
 8024a54:	4603      	mov	r3, r0
 8024a56:	633b      	str	r3, [r7, #48]	; 0x30
			strcpy((char*)serialSettingList[u8Index].name, token);
 8024a58:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8024a5c:	4613      	mov	r3, r2
 8024a5e:	00db      	lsls	r3, r3, #3
 8024a60:	4413      	add	r3, r2
 8024a62:	011b      	lsls	r3, r3, #4
 8024a64:	3308      	adds	r3, #8
 8024a66:	4a8a      	ldr	r2, [pc, #552]	; (8024c90 <appSerialSetting+0x2cc>)
 8024a68:	4413      	add	r3, r2
 8024a6a:	3306      	adds	r3, #6
 8024a6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8024a6e:	4618      	mov	r0, r3
 8024a70:	f002 fc16 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter1);
 8024a74:	463b      	mov	r3, r7
 8024a76:	4619      	mov	r1, r3
 8024a78:	2000      	movs	r0, #0
 8024a7a:	f002 fe2f 	bl	80276dc <strtok>
 8024a7e:	4603      	mov	r3, r0
 8024a80:	633b      	str	r3, [r7, #48]	; 0x30
			strcpy((char*)serialSettingList[u8Index].status, token);
 8024a82:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8024a86:	4613      	mov	r3, r2
 8024a88:	00db      	lsls	r3, r3, #3
 8024a8a:	4413      	add	r3, r2
 8024a8c:	011b      	lsls	r3, r3, #4
 8024a8e:	4a80      	ldr	r2, [pc, #512]	; (8024c90 <appSerialSetting+0x2cc>)
 8024a90:	4413      	add	r3, r2
 8024a92:	3306      	adds	r3, #6
 8024a94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8024a96:	4618      	mov	r0, r3
 8024a98:	f002 fc02 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter1);
 8024a9c:	463b      	mov	r3, r7
 8024a9e:	4619      	mov	r1, r3
 8024aa0:	2000      	movs	r0, #0
 8024aa2:	f002 fe1b 	bl	80276dc <strtok>
 8024aa6:	4603      	mov	r3, r0
 8024aa8:	633b      	str	r3, [r7, #48]	; 0x30
			strcpy((char*)serialSettingList[u8Index].baudrate, token);
 8024aaa:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8024aae:	4613      	mov	r3, r2
 8024ab0:	00db      	lsls	r3, r3, #3
 8024ab2:	4413      	add	r3, r2
 8024ab4:	011b      	lsls	r3, r3, #4
 8024ab6:	3318      	adds	r3, #24
 8024ab8:	4a75      	ldr	r2, [pc, #468]	; (8024c90 <appSerialSetting+0x2cc>)
 8024aba:	4413      	add	r3, r2
 8024abc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8024abe:	4618      	mov	r0, r3
 8024ac0:	f002 fbee 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter1);
 8024ac4:	463b      	mov	r3, r7
 8024ac6:	4619      	mov	r1, r3
 8024ac8:	2000      	movs	r0, #0
 8024aca:	f002 fe07 	bl	80276dc <strtok>
 8024ace:	4603      	mov	r3, r0
 8024ad0:	633b      	str	r3, [r7, #48]	; 0x30
			strcpy((char*)serialSettingList[u8Index].dataBit, token);
 8024ad2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8024ad6:	4613      	mov	r3, r2
 8024ad8:	00db      	lsls	r3, r3, #3
 8024ada:	4413      	add	r3, r2
 8024adc:	011b      	lsls	r3, r3, #4
 8024ade:	3318      	adds	r3, #24
 8024ae0:	4a6b      	ldr	r2, [pc, #428]	; (8024c90 <appSerialSetting+0x2cc>)
 8024ae2:	4413      	add	r3, r2
 8024ae4:	3306      	adds	r3, #6
 8024ae6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8024ae8:	4618      	mov	r0, r3
 8024aea:	f002 fbd9 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter1);
 8024aee:	463b      	mov	r3, r7
 8024af0:	4619      	mov	r1, r3
 8024af2:	2000      	movs	r0, #0
 8024af4:	f002 fdf2 	bl	80276dc <strtok>
 8024af8:	4603      	mov	r3, r0
 8024afa:	633b      	str	r3, [r7, #48]	; 0x30
			strcpy((char*)serialSettingList[u8Index].parity, token);
 8024afc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8024b00:	4613      	mov	r3, r2
 8024b02:	00db      	lsls	r3, r3, #3
 8024b04:	4413      	add	r3, r2
 8024b06:	011b      	lsls	r3, r3, #4
 8024b08:	3320      	adds	r3, #32
 8024b0a:	4a61      	ldr	r2, [pc, #388]	; (8024c90 <appSerialSetting+0x2cc>)
 8024b0c:	4413      	add	r3, r2
 8024b0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8024b10:	4618      	mov	r0, r3
 8024b12:	f002 fbc5 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter1);
 8024b16:	463b      	mov	r3, r7
 8024b18:	4619      	mov	r1, r3
 8024b1a:	2000      	movs	r0, #0
 8024b1c:	f002 fdde 	bl	80276dc <strtok>
 8024b20:	4603      	mov	r3, r0
 8024b22:	633b      	str	r3, [r7, #48]	; 0x30
			strcpy((char*)serialSettingList[u8Index].stopBit, token);
 8024b24:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8024b28:	4613      	mov	r3, r2
 8024b2a:	00db      	lsls	r3, r3, #3
 8024b2c:	4413      	add	r3, r2
 8024b2e:	011b      	lsls	r3, r3, #4
 8024b30:	3320      	adds	r3, #32
 8024b32:	4a57      	ldr	r2, [pc, #348]	; (8024c90 <appSerialSetting+0x2cc>)
 8024b34:	4413      	add	r3, r2
 8024b36:	3306      	adds	r3, #6
 8024b38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8024b3a:	4618      	mov	r0, r3
 8024b3c:	f002 fbb0 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter1);
 8024b40:	463b      	mov	r3, r7
 8024b42:	4619      	mov	r1, r3
 8024b44:	2000      	movs	r0, #0
 8024b46:	f002 fdc9 	bl	80276dc <strtok>
 8024b4a:	4603      	mov	r3, r0
 8024b4c:	633b      	str	r3, [r7, #48]	; 0x30
			strcpy((char*)serialSettingList[u8Index].flowControl, token);
 8024b4e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8024b52:	4613      	mov	r3, r2
 8024b54:	00db      	lsls	r3, r3, #3
 8024b56:	4413      	add	r3, r2
 8024b58:	011b      	lsls	r3, r3, #4
 8024b5a:	3328      	adds	r3, #40	; 0x28
 8024b5c:	4a4c      	ldr	r2, [pc, #304]	; (8024c90 <appSerialSetting+0x2cc>)
 8024b5e:	4413      	add	r3, r2
 8024b60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8024b62:	4618      	mov	r0, r3
 8024b64:	f002 fb9c 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter1);
 8024b68:	463b      	mov	r3, r7
 8024b6a:	4619      	mov	r1, r3
 8024b6c:	2000      	movs	r0, #0
 8024b6e:	f002 fdb5 	bl	80276dc <strtok>
 8024b72:	4603      	mov	r3, r0
 8024b74:	633b      	str	r3, [r7, #48]	; 0x30
			strcpy((char*)serialSettingList[u8Index].leadChar, token);
 8024b76:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8024b7a:	4613      	mov	r3, r2
 8024b7c:	00db      	lsls	r3, r3, #3
 8024b7e:	4413      	add	r3, r2
 8024b80:	011b      	lsls	r3, r3, #4
 8024b82:	3328      	adds	r3, #40	; 0x28
 8024b84:	4a42      	ldr	r2, [pc, #264]	; (8024c90 <appSerialSetting+0x2cc>)
 8024b86:	4413      	add	r3, r2
 8024b88:	3306      	adds	r3, #6
 8024b8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8024b8c:	4618      	mov	r0, r3
 8024b8e:	f002 fb87 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter1);
 8024b92:	463b      	mov	r3, r7
 8024b94:	4619      	mov	r1, r3
 8024b96:	2000      	movs	r0, #0
 8024b98:	f002 fda0 	bl	80276dc <strtok>
 8024b9c:	4603      	mov	r3, r0
 8024b9e:	633b      	str	r3, [r7, #48]	; 0x30
			strcpy((char*)serialSettingList[u8Index].endOfLine, token);
 8024ba0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8024ba4:	4613      	mov	r3, r2
 8024ba6:	00db      	lsls	r3, r3, #3
 8024ba8:	4413      	add	r3, r2
 8024baa:	011b      	lsls	r3, r3, #4
 8024bac:	3338      	adds	r3, #56	; 0x38
 8024bae:	4a38      	ldr	r2, [pc, #224]	; (8024c90 <appSerialSetting+0x2cc>)
 8024bb0:	4413      	add	r3, r2
 8024bb2:	3302      	adds	r3, #2
 8024bb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8024bb6:	4618      	mov	r0, r3
 8024bb8:	f002 fb72 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter1);
 8024bbc:	463b      	mov	r3, r7
 8024bbe:	4619      	mov	r1, r3
 8024bc0:	2000      	movs	r0, #0
 8024bc2:	f002 fd8b 	bl	80276dc <strtok>
 8024bc6:	4603      	mov	r3, r0
 8024bc8:	633b      	str	r3, [r7, #48]	; 0x30
			strcpy((char*)serialSettingList[u8Index].interval, token);
 8024bca:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8024bce:	4613      	mov	r3, r2
 8024bd0:	00db      	lsls	r3, r3, #3
 8024bd2:	4413      	add	r3, r2
 8024bd4:	011b      	lsls	r3, r3, #4
 8024bd6:	3340      	adds	r3, #64	; 0x40
 8024bd8:	4a2d      	ldr	r2, [pc, #180]	; (8024c90 <appSerialSetting+0x2cc>)
 8024bda:	4413      	add	r3, r2
 8024bdc:	3306      	adds	r3, #6
 8024bde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8024be0:	4618      	mov	r0, r3
 8024be2:	f002 fb5d 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter1);
 8024be6:	463b      	mov	r3, r7
 8024be8:	4619      	mov	r1, r3
 8024bea:	2000      	movs	r0, #0
 8024bec:	f002 fd76 	bl	80276dc <strtok>
 8024bf0:	4603      	mov	r3, r0
 8024bf2:	633b      	str	r3, [r7, #48]	; 0x30
			strcpy((char*)serialSettingList[u8Index].getDataCmd, token);
 8024bf4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8024bf8:	4613      	mov	r3, r2
 8024bfa:	00db      	lsls	r3, r3, #3
 8024bfc:	4413      	add	r3, r2
 8024bfe:	011b      	lsls	r3, r3, #4
 8024c00:	3348      	adds	r3, #72	; 0x48
 8024c02:	4a23      	ldr	r2, [pc, #140]	; (8024c90 <appSerialSetting+0x2cc>)
 8024c04:	4413      	add	r3, r2
 8024c06:	3304      	adds	r3, #4
 8024c08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8024c0a:	4618      	mov	r0, r3
 8024c0c:	f002 fb48 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter1);
 8024c10:	463b      	mov	r3, r7
 8024c12:	4619      	mov	r1, r3
 8024c14:	2000      	movs	r0, #0
 8024c16:	f002 fd61 	bl	80276dc <strtok>
 8024c1a:	4603      	mov	r3, r0
 8024c1c:	633b      	str	r3, [r7, #48]	; 0x30
			strcpy((char*)serialSettingList[u8Index].unit, token);
 8024c1e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8024c22:	4613      	mov	r3, r2
 8024c24:	00db      	lsls	r3, r3, #3
 8024c26:	4413      	add	r3, r2
 8024c28:	011b      	lsls	r3, r3, #4
 8024c2a:	3358      	adds	r3, #88	; 0x58
 8024c2c:	4a18      	ldr	r2, [pc, #96]	; (8024c90 <appSerialSetting+0x2cc>)
 8024c2e:	4413      	add	r3, r2
 8024c30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8024c32:	4618      	mov	r0, r3
 8024c34:	f002 fb34 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter1);
 8024c38:	463b      	mov	r3, r7
 8024c3a:	4619      	mov	r1, r3
 8024c3c:	2000      	movs	r0, #0
 8024c3e:	f002 fd4d 	bl	80276dc <strtok>
 8024c42:	4603      	mov	r3, r0
 8024c44:	633b      	str	r3, [r7, #48]	; 0x30
			strcpy((char*)serialSettingList[u8Index].dataSequence, token);
 8024c46:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8024c4a:	4613      	mov	r3, r2
 8024c4c:	00db      	lsls	r3, r3, #3
 8024c4e:	4413      	add	r3, r2
 8024c50:	011b      	lsls	r3, r3, #4
 8024c52:	3358      	adds	r3, #88	; 0x58
 8024c54:	4a0e      	ldr	r2, [pc, #56]	; (8024c90 <appSerialSetting+0x2cc>)
 8024c56:	4413      	add	r3, r2
 8024c58:	3306      	adds	r3, #6
 8024c5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8024c5c:	4618      	mov	r0, r3
 8024c5e:	f002 fb1f 	bl	80272a0 <strcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*)"9R_OK!", 6, 10);
 8024c62:	230a      	movs	r3, #10
 8024c64:	2206      	movs	r2, #6
 8024c66:	490b      	ldr	r1, [pc, #44]	; (8024c94 <appSerialSetting+0x2d0>)
 8024c68:	480b      	ldr	r0, [pc, #44]	; (8024c98 <appSerialSetting+0x2d4>)
 8024c6a:	f7e3 fa39 	bl	80080e0 <HAL_UART_Transmit>
	for (u8Index = 0; u8Index < 6; u8Index++)
 8024c6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8024c72:	3301      	adds	r3, #1
 8024c74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8024c78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8024c7c:	2b05      	cmp	r3, #5
 8024c7e:	f67f aebc 	bls.w	80249fa <appSerialSetting+0x36>
		}
	}
}
 8024c82:	bf00      	nop
 8024c84:	bf00      	nop
 8024c86:	3738      	adds	r7, #56	; 0x38
 8024c88:	46bd      	mov	sp, r7
 8024c8a:	bdb0      	pop	{r4, r5, r7, pc}
 8024c8c:	0802e820 	.word	0x0802e820
 8024c90:	24008dbc 	.word	0x24008dbc
 8024c94:	0802e818 	.word	0x0802e818
 8024c98:	24008780 	.word	0x24008780

08024c9c <appTransmissionSetting>:

static void appTransmissionSetting(void)
{
 8024c9c:	b580      	push	{r7, lr}
 8024c9e:	b082      	sub	sp, #8
 8024ca0:	af00      	add	r7, sp, #0
	char *token;
	char delimiter[2] = ";";
 8024ca2:	233b      	movs	r3, #59	; 0x3b
 8024ca4:	803b      	strh	r3, [r7, #0]

	memset(&transmission, 0, sizeof(tsTransmission_t));
 8024ca6:	2295      	movs	r2, #149	; 0x95
 8024ca8:	2100      	movs	r1, #0
 8024caa:	4838      	ldr	r0, [pc, #224]	; (8024d8c <appTransmissionSetting+0xf0>)
 8024cac:	f001 fab4 	bl	8026218 <memset>
	token = strtok(NULL, delimiter);
 8024cb0:	463b      	mov	r3, r7
 8024cb2:	4619      	mov	r1, r3
 8024cb4:	2000      	movs	r0, #0
 8024cb6:	f002 fd11 	bl	80276dc <strtok>
 8024cba:	4603      	mov	r3, r0
 8024cbc:	607b      	str	r3, [r7, #4]
	strcpy(&transmission.startTime[0], token);
 8024cbe:	6879      	ldr	r1, [r7, #4]
 8024cc0:	4832      	ldr	r0, [pc, #200]	; (8024d8c <appTransmissionSetting+0xf0>)
 8024cc2:	f002 faed 	bl	80272a0 <strcpy>
	token = strtok(NULL, delimiter);
 8024cc6:	463b      	mov	r3, r7
 8024cc8:	4619      	mov	r1, r3
 8024cca:	2000      	movs	r0, #0
 8024ccc:	f002 fd06 	bl	80276dc <strtok>
 8024cd0:	4603      	mov	r3, r0
 8024cd2:	607b      	str	r3, [r7, #4]
	strcpy(&transmission.interval[0], token);
 8024cd4:	6879      	ldr	r1, [r7, #4]
 8024cd6:	482e      	ldr	r0, [pc, #184]	; (8024d90 <appTransmissionSetting+0xf4>)
 8024cd8:	f002 fae2 	bl	80272a0 <strcpy>
	token = strtok(NULL, delimiter);
 8024cdc:	463b      	mov	r3, r7
 8024cde:	4619      	mov	r1, r3
 8024ce0:	2000      	movs	r0, #0
 8024ce2:	f002 fcfb 	bl	80276dc <strtok>
 8024ce6:	4603      	mov	r3, r0
 8024ce8:	607b      	str	r3, [r7, #4]
	strcpy(&transmission.URL[0], token);
 8024cea:	6879      	ldr	r1, [r7, #4]
 8024cec:	4829      	ldr	r0, [pc, #164]	; (8024d94 <appTransmissionSetting+0xf8>)
 8024cee:	f002 fad7 	bl	80272a0 <strcpy>
	token = strtok(NULL, delimiter);
 8024cf2:	463b      	mov	r3, r7
 8024cf4:	4619      	mov	r1, r3
 8024cf6:	2000      	movs	r0, #0
 8024cf8:	f002 fcf0 	bl	80276dc <strtok>
 8024cfc:	4603      	mov	r3, r0
 8024cfe:	607b      	str	r3, [r7, #4]
	strcpy(&transmission.port[0], token);
 8024d00:	6879      	ldr	r1, [r7, #4]
 8024d02:	4825      	ldr	r0, [pc, #148]	; (8024d98 <appTransmissionSetting+0xfc>)
 8024d04:	f002 facc 	bl	80272a0 <strcpy>
	token = strtok(NULL, delimiter);
 8024d08:	463b      	mov	r3, r7
 8024d0a:	4619      	mov	r1, r3
 8024d0c:	2000      	movs	r0, #0
 8024d0e:	f002 fce5 	bl	80276dc <strtok>
 8024d12:	4603      	mov	r3, r0
 8024d14:	607b      	str	r3, [r7, #4]
	strcpy(&transmission.useName[0], token);
 8024d16:	6879      	ldr	r1, [r7, #4]
 8024d18:	4820      	ldr	r0, [pc, #128]	; (8024d9c <appTransmissionSetting+0x100>)
 8024d1a:	f002 fac1 	bl	80272a0 <strcpy>
	token = strtok(NULL, delimiter);
 8024d1e:	463b      	mov	r3, r7
 8024d20:	4619      	mov	r1, r3
 8024d22:	2000      	movs	r0, #0
 8024d24:	f002 fcda 	bl	80276dc <strtok>
 8024d28:	4603      	mov	r3, r0
 8024d2a:	607b      	str	r3, [r7, #4]
	strcpy(&transmission.passWord[0], token);
 8024d2c:	6879      	ldr	r1, [r7, #4]
 8024d2e:	481c      	ldr	r0, [pc, #112]	; (8024da0 <appTransmissionSetting+0x104>)
 8024d30:	f002 fab6 	bl	80272a0 <strcpy>
	token = strtok(NULL, delimiter);
 8024d34:	463b      	mov	r3, r7
 8024d36:	4619      	mov	r1, r3
 8024d38:	2000      	movs	r0, #0
 8024d3a:	f002 fccf 	bl	80276dc <strtok>
 8024d3e:	4603      	mov	r3, r0
 8024d40:	607b      	str	r3, [r7, #4]
	strcpy(&transmission.fileName[0], token);
 8024d42:	6879      	ldr	r1, [r7, #4]
 8024d44:	4817      	ldr	r0, [pc, #92]	; (8024da4 <appTransmissionSetting+0x108>)
 8024d46:	f002 faab 	bl	80272a0 <strcpy>
	token = strtok(NULL, delimiter);
 8024d4a:	463b      	mov	r3, r7
 8024d4c:	4619      	mov	r1, r3
 8024d4e:	2000      	movs	r0, #0
 8024d50:	f002 fcc4 	bl	80276dc <strtok>
 8024d54:	4603      	mov	r3, r0
 8024d56:	607b      	str	r3, [r7, #4]
	strcpy(&transmission.headerInterval[0], token);
 8024d58:	6879      	ldr	r1, [r7, #4]
 8024d5a:	4813      	ldr	r0, [pc, #76]	; (8024da8 <appTransmissionSetting+0x10c>)
 8024d5c:	f002 faa0 	bl	80272a0 <strcpy>
	token = strtok(NULL, delimiter);
 8024d60:	463b      	mov	r3, r7
 8024d62:	4619      	mov	r1, r3
 8024d64:	2000      	movs	r0, #0
 8024d66:	f002 fcb9 	bl	80276dc <strtok>
 8024d6a:	4603      	mov	r3, r0
 8024d6c:	607b      	str	r3, [r7, #4]
	strcpy(&transmission.tcp_ip[0], token);
 8024d6e:	6879      	ldr	r1, [r7, #4]
 8024d70:	480e      	ldr	r0, [pc, #56]	; (8024dac <appTransmissionSetting+0x110>)
 8024d72:	f002 fa95 	bl	80272a0 <strcpy>
	HAL_UART_Transmit(&huart1, (uint8_t*)"11_OK!", 6, 10);
 8024d76:	230a      	movs	r3, #10
 8024d78:	2206      	movs	r2, #6
 8024d7a:	490d      	ldr	r1, [pc, #52]	; (8024db0 <appTransmissionSetting+0x114>)
 8024d7c:	480d      	ldr	r0, [pc, #52]	; (8024db4 <appTransmissionSetting+0x118>)
 8024d7e:	f7e3 f9af 	bl	80080e0 <HAL_UART_Transmit>
}
 8024d82:	bf00      	nop
 8024d84:	3708      	adds	r7, #8
 8024d86:	46bd      	mov	sp, r7
 8024d88:	bd80      	pop	{r7, pc}
 8024d8a:	bf00      	nop
 8024d8c:	240088c8 	.word	0x240088c8
 8024d90:	240088d7 	.word	0x240088d7
 8024d94:	240088dd 	.word	0x240088dd
 8024d98:	240088fb 	.word	0x240088fb
 8024d9c:	24008901 	.word	0x24008901
 8024da0:	2400891f 	.word	0x2400891f
 8024da4:	2400893d 	.word	0x2400893d
 8024da8:	24008951 	.word	0x24008951
 8024dac:	24008957 	.word	0x24008957
 8024db0:	0802e84c 	.word	0x0802e84c
 8024db4:	24008780 	.word	0x24008780

08024db8 <appCellularSetting>:

static void appCellularSetting(void)
{
 8024db8:	b580      	push	{r7, lr}
 8024dba:	b082      	sub	sp, #8
 8024dbc:	af00      	add	r7, sp, #0
	char *token;
	char delimiter[2] = ";";
 8024dbe:	233b      	movs	r3, #59	; 0x3b
 8024dc0:	803b      	strh	r3, [r7, #0]

	token = strtok(NULL, delimiter);
 8024dc2:	463b      	mov	r3, r7
 8024dc4:	4619      	mov	r1, r3
 8024dc6:	2000      	movs	r0, #0
 8024dc8:	f002 fc88 	bl	80276dc <strtok>
 8024dcc:	4603      	mov	r3, r0
 8024dce:	607b      	str	r3, [r7, #4]
	if (0 == strcmp(token, "true"))
 8024dd0:	490e      	ldr	r1, [pc, #56]	; (8024e0c <appCellularSetting+0x54>)
 8024dd2:	6878      	ldr	r0, [r7, #4]
 8024dd4:	f7db fa84 	bl	80002e0 <strcmp>
 8024dd8:	4603      	mov	r3, r0
 8024dda:	2b00      	cmp	r3, #0
 8024ddc:	d105      	bne.n	8024dea <appCellularSetting+0x32>
		strcpy(&cellular.cellularMode[0], "Enabled");
 8024dde:	4a0c      	ldr	r2, [pc, #48]	; (8024e10 <appCellularSetting+0x58>)
 8024de0:	4b0c      	ldr	r3, [pc, #48]	; (8024e14 <appCellularSetting+0x5c>)
 8024de2:	cb03      	ldmia	r3!, {r0, r1}
 8024de4:	6010      	str	r0, [r2, #0]
 8024de6:	6051      	str	r1, [r2, #4]
 8024de8:	e006      	b.n	8024df8 <appCellularSetting+0x40>
	else
		strcpy(&cellular.cellularMode[0], "Disabled");
 8024dea:	4a09      	ldr	r2, [pc, #36]	; (8024e10 <appCellularSetting+0x58>)
 8024dec:	4b0a      	ldr	r3, [pc, #40]	; (8024e18 <appCellularSetting+0x60>)
 8024dee:	cb03      	ldmia	r3!, {r0, r1}
 8024df0:	6010      	str	r0, [r2, #0]
 8024df2:	6051      	str	r1, [r2, #4]
 8024df4:	781b      	ldrb	r3, [r3, #0]
 8024df6:	7213      	strb	r3, [r2, #8]

	HAL_UART_Transmit(&huart1, (uint8_t*)"15_OK!", 6, 10);
 8024df8:	230a      	movs	r3, #10
 8024dfa:	2206      	movs	r2, #6
 8024dfc:	4907      	ldr	r1, [pc, #28]	; (8024e1c <appCellularSetting+0x64>)
 8024dfe:	4808      	ldr	r0, [pc, #32]	; (8024e20 <appCellularSetting+0x68>)
 8024e00:	f7e3 f96e 	bl	80080e0 <HAL_UART_Transmit>
}
 8024e04:	bf00      	nop
 8024e06:	3708      	adds	r7, #8
 8024e08:	46bd      	mov	sp, r7
 8024e0a:	bd80      	pop	{r7, pc}
 8024e0c:	0802e854 	.word	0x0802e854
 8024e10:	24009d0c 	.word	0x24009d0c
 8024e14:	0802e85c 	.word	0x0802e85c
 8024e18:	0802e640 	.word	0x0802e640
 8024e1c:	0802e864 	.word	0x0802e864
 8024e20:	24008780 	.word	0x24008780

08024e24 <appSortSetting>:

static void appSortSetting(void)
{
 8024e24:	b580      	push	{r7, lr}
 8024e26:	b082      	sub	sp, #8
 8024e28:	af00      	add	r7, sp, #0
	char *token;
	char delimiter[2] = "!";
 8024e2a:	2321      	movs	r3, #33	; 0x21
 8024e2c:	803b      	strh	r3, [r7, #0]

	memset(&u8SorttingChannel[0], 0, 50);
 8024e2e:	2232      	movs	r2, #50	; 0x32
 8024e30:	2100      	movs	r1, #0
 8024e32:	480c      	ldr	r0, [pc, #48]	; (8024e64 <appSortSetting+0x40>)
 8024e34:	f001 f9f0 	bl	8026218 <memset>
	token = strtok(NULL, delimiter);
 8024e38:	463b      	mov	r3, r7
 8024e3a:	4619      	mov	r1, r3
 8024e3c:	2000      	movs	r0, #0
 8024e3e:	f002 fc4d 	bl	80276dc <strtok>
 8024e42:	4603      	mov	r3, r0
 8024e44:	607b      	str	r3, [r7, #4]
	strcpy((char*)u8SorttingChannel, token);
 8024e46:	6879      	ldr	r1, [r7, #4]
 8024e48:	4806      	ldr	r0, [pc, #24]	; (8024e64 <appSortSetting+0x40>)
 8024e4a:	f002 fa29 	bl	80272a0 <strcpy>
	HAL_UART_Transmit(&huart1, (uint8_t*)"14_OK!", 6, 10);
 8024e4e:	230a      	movs	r3, #10
 8024e50:	2206      	movs	r2, #6
 8024e52:	4905      	ldr	r1, [pc, #20]	; (8024e68 <appSortSetting+0x44>)
 8024e54:	4805      	ldr	r0, [pc, #20]	; (8024e6c <appSortSetting+0x48>)
 8024e56:	f7e3 f943 	bl	80080e0 <HAL_UART_Transmit>
}
 8024e5a:	bf00      	nop
 8024e5c:	3708      	adds	r7, #8
 8024e5e:	46bd      	mov	sp, r7
 8024e60:	bd80      	pop	{r7, pc}
 8024e62:	bf00      	nop
 8024e64:	24009188 	.word	0x24009188
 8024e68:	0802e86c 	.word	0x0802e86c
 8024e6c:	24008780 	.word	0x24008780

08024e70 <appVirtualSetting>:

static void appVirtualSetting(void)
{
 8024e70:	b580      	push	{r7, lr}
 8024e72:	b096      	sub	sp, #88	; 0x58
 8024e74:	af00      	add	r7, sp, #0
	uint8_t u8Index;
    char cVirtualChannel[][5] = {"VS1", "VS2", "VS3", "VS4", "VS5", "VS6", "VS7", "VS8",\
 8024e76:	4a97      	ldr	r2, [pc, #604]	; (80250d4 <appVirtualSetting+0x264>)
 8024e78:	1d3b      	adds	r3, r7, #4
 8024e7a:	4611      	mov	r1, r2
 8024e7c:	224b      	movs	r2, #75	; 0x4b
 8024e7e:	4618      	mov	r0, r3
 8024e80:	f001 f9a2 	bl	80261c8 <memcpy>
								"VS9", "VS10", "VS11", "VS12", "VS13", "VS14", "VS15"};

	char *token;
	char delimiter[2] = ";";
 8024e84:	233b      	movs	r3, #59	; 0x3b
 8024e86:	803b      	strh	r3, [r7, #0]

	token = strtok(NULL, delimiter);
 8024e88:	463b      	mov	r3, r7
 8024e8a:	4619      	mov	r1, r3
 8024e8c:	2000      	movs	r0, #0
 8024e8e:	f002 fc25 	bl	80276dc <strtok>
 8024e92:	4603      	mov	r3, r0
 8024e94:	653b      	str	r3, [r7, #80]	; 0x50
	/* Find virtual channel corresponding */
	for (u8Index = 0; u8Index < 15; u8Index++)
 8024e96:	2300      	movs	r3, #0
 8024e98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8024e9c:	e110      	b.n	80250c0 <appVirtualSetting+0x250>
	{
		if (0 == strcmp(token, cVirtualChannel[u8Index]))
 8024e9e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8024ea2:	1d39      	adds	r1, r7, #4
 8024ea4:	4613      	mov	r3, r2
 8024ea6:	009b      	lsls	r3, r3, #2
 8024ea8:	4413      	add	r3, r2
 8024eaa:	440b      	add	r3, r1
 8024eac:	4619      	mov	r1, r3
 8024eae:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8024eb0:	f7db fa16 	bl	80002e0 <strcmp>
 8024eb4:	4603      	mov	r3, r0
 8024eb6:	2b00      	cmp	r3, #0
 8024eb8:	f040 80fd 	bne.w	80250b6 <appVirtualSetting+0x246>
		{
			memset(&virtualSensorList[u8Index], 0, sizeof(tsVirtualSensor_t));
 8024ebc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8024ec0:	4613      	mov	r3, r2
 8024ec2:	005b      	lsls	r3, r3, #1
 8024ec4:	4413      	add	r3, r2
 8024ec6:	019b      	lsls	r3, r3, #6
 8024ec8:	4413      	add	r3, r2
 8024eca:	4a83      	ldr	r2, [pc, #524]	; (80250d8 <appVirtualSetting+0x268>)
 8024ecc:	4413      	add	r3, r2
 8024ece:	22c1      	movs	r2, #193	; 0xc1
 8024ed0:	2100      	movs	r1, #0
 8024ed2:	4618      	mov	r0, r3
 8024ed4:	f001 f9a0 	bl	8026218 <memset>
			strcpy((char*)virtualSensorList[u8Index].channel, token);
 8024ed8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8024edc:	4613      	mov	r3, r2
 8024ede:	005b      	lsls	r3, r3, #1
 8024ee0:	4413      	add	r3, r2
 8024ee2:	019b      	lsls	r3, r3, #6
 8024ee4:	4413      	add	r3, r2
 8024ee6:	4a7c      	ldr	r2, [pc, #496]	; (80250d8 <appVirtualSetting+0x268>)
 8024ee8:	4413      	add	r3, r2
 8024eea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8024eec:	4618      	mov	r0, r3
 8024eee:	f002 f9d7 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter);
 8024ef2:	463b      	mov	r3, r7
 8024ef4:	4619      	mov	r1, r3
 8024ef6:	2000      	movs	r0, #0
 8024ef8:	f002 fbf0 	bl	80276dc <strtok>
 8024efc:	4603      	mov	r3, r0
 8024efe:	653b      	str	r3, [r7, #80]	; 0x50
			strcpy((char*)virtualSensorList[u8Index].name, token);
 8024f00:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8024f04:	4613      	mov	r3, r2
 8024f06:	005b      	lsls	r3, r3, #1
 8024f08:	4413      	add	r3, r2
 8024f0a:	019b      	lsls	r3, r3, #6
 8024f0c:	4413      	add	r3, r2
 8024f0e:	4a72      	ldr	r2, [pc, #456]	; (80250d8 <appVirtualSetting+0x268>)
 8024f10:	4413      	add	r3, r2
 8024f12:	3306      	adds	r3, #6
 8024f14:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8024f16:	4618      	mov	r0, r3
 8024f18:	f002 f9c2 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter);
 8024f1c:	463b      	mov	r3, r7
 8024f1e:	4619      	mov	r1, r3
 8024f20:	2000      	movs	r0, #0
 8024f22:	f002 fbdb 	bl	80276dc <strtok>
 8024f26:	4603      	mov	r3, r0
 8024f28:	653b      	str	r3, [r7, #80]	; 0x50
			strcpy((char*)virtualSensorList[u8Index].status, token);
 8024f2a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8024f2e:	4613      	mov	r3, r2
 8024f30:	005b      	lsls	r3, r3, #1
 8024f32:	4413      	add	r3, r2
 8024f34:	019b      	lsls	r3, r3, #6
 8024f36:	4413      	add	r3, r2
 8024f38:	3308      	adds	r3, #8
 8024f3a:	4a67      	ldr	r2, [pc, #412]	; (80250d8 <appVirtualSetting+0x268>)
 8024f3c:	4413      	add	r3, r2
 8024f3e:	3302      	adds	r3, #2
 8024f40:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8024f42:	4618      	mov	r0, r3
 8024f44:	f002 f9ac 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter);
 8024f48:	463b      	mov	r3, r7
 8024f4a:	4619      	mov	r1, r3
 8024f4c:	2000      	movs	r0, #0
 8024f4e:	f002 fbc5 	bl	80276dc <strtok>
 8024f52:	4603      	mov	r3, r0
 8024f54:	653b      	str	r3, [r7, #80]	; 0x50
			strcpy((char*)virtualSensorList[u8Index].vsType, token);
 8024f56:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8024f5a:	4613      	mov	r3, r2
 8024f5c:	005b      	lsls	r3, r3, #1
 8024f5e:	4413      	add	r3, r2
 8024f60:	019b      	lsls	r3, r3, #6
 8024f62:	4413      	add	r3, r2
 8024f64:	3310      	adds	r3, #16
 8024f66:	4a5c      	ldr	r2, [pc, #368]	; (80250d8 <appVirtualSetting+0x268>)
 8024f68:	4413      	add	r3, r2
 8024f6a:	3304      	adds	r3, #4
 8024f6c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8024f6e:	4618      	mov	r0, r3
 8024f70:	f002 f996 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter);
 8024f74:	463b      	mov	r3, r7
 8024f76:	4619      	mov	r1, r3
 8024f78:	2000      	movs	r0, #0
 8024f7a:	f002 fbaf 	bl	80276dc <strtok>
 8024f7e:	4603      	mov	r3, r0
 8024f80:	653b      	str	r3, [r7, #80]	; 0x50
			strcpy((char*)virtualSensorList[u8Index].inputSensor1, token);
 8024f82:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8024f86:	4613      	mov	r3, r2
 8024f88:	005b      	lsls	r3, r3, #1
 8024f8a:	4413      	add	r3, r2
 8024f8c:	019b      	lsls	r3, r3, #6
 8024f8e:	4413      	add	r3, r2
 8024f90:	3310      	adds	r3, #16
 8024f92:	4a51      	ldr	r2, [pc, #324]	; (80250d8 <appVirtualSetting+0x268>)
 8024f94:	4413      	add	r3, r2
 8024f96:	3306      	adds	r3, #6
 8024f98:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8024f9a:	4618      	mov	r0, r3
 8024f9c:	f002 f980 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter);
 8024fa0:	463b      	mov	r3, r7
 8024fa2:	4619      	mov	r1, r3
 8024fa4:	2000      	movs	r0, #0
 8024fa6:	f002 fb99 	bl	80276dc <strtok>
 8024faa:	4603      	mov	r3, r0
 8024fac:	653b      	str	r3, [r7, #80]	; 0x50
			strcpy((char*)virtualSensorList[u8Index].index1, token);
 8024fae:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8024fb2:	4613      	mov	r3, r2
 8024fb4:	005b      	lsls	r3, r3, #1
 8024fb6:	4413      	add	r3, r2
 8024fb8:	019b      	lsls	r3, r3, #6
 8024fba:	4413      	add	r3, r2
 8024fbc:	3318      	adds	r3, #24
 8024fbe:	4a46      	ldr	r2, [pc, #280]	; (80250d8 <appVirtualSetting+0x268>)
 8024fc0:	4413      	add	r3, r2
 8024fc2:	3304      	adds	r3, #4
 8024fc4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8024fc6:	4618      	mov	r0, r3
 8024fc8:	f002 f96a 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter);
 8024fcc:	463b      	mov	r3, r7
 8024fce:	4619      	mov	r1, r3
 8024fd0:	2000      	movs	r0, #0
 8024fd2:	f002 fb83 	bl	80276dc <strtok>
 8024fd6:	4603      	mov	r3, r0
 8024fd8:	653b      	str	r3, [r7, #80]	; 0x50
			strcpy((char*)virtualSensorList[u8Index].inputSensor2, token);
 8024fda:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8024fde:	4613      	mov	r3, r2
 8024fe0:	005b      	lsls	r3, r3, #1
 8024fe2:	4413      	add	r3, r2
 8024fe4:	019b      	lsls	r3, r3, #6
 8024fe6:	4413      	add	r3, r2
 8024fe8:	3318      	adds	r3, #24
 8024fea:	4a3b      	ldr	r2, [pc, #236]	; (80250d8 <appVirtualSetting+0x268>)
 8024fec:	4413      	add	r3, r2
 8024fee:	3306      	adds	r3, #6
 8024ff0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8024ff2:	4618      	mov	r0, r3
 8024ff4:	f002 f954 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter);
 8024ff8:	463b      	mov	r3, r7
 8024ffa:	4619      	mov	r1, r3
 8024ffc:	2000      	movs	r0, #0
 8024ffe:	f002 fb6d 	bl	80276dc <strtok>
 8025002:	4603      	mov	r3, r0
 8025004:	653b      	str	r3, [r7, #80]	; 0x50
			strcpy((char*)virtualSensorList[u8Index].index2, token);
 8025006:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 802500a:	4613      	mov	r3, r2
 802500c:	005b      	lsls	r3, r3, #1
 802500e:	4413      	add	r3, r2
 8025010:	019b      	lsls	r3, r3, #6
 8025012:	4413      	add	r3, r2
 8025014:	3320      	adds	r3, #32
 8025016:	4a30      	ldr	r2, [pc, #192]	; (80250d8 <appVirtualSetting+0x268>)
 8025018:	4413      	add	r3, r2
 802501a:	3304      	adds	r3, #4
 802501c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 802501e:	4618      	mov	r0, r3
 8025020:	f002 f93e 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter);
 8025024:	463b      	mov	r3, r7
 8025026:	4619      	mov	r1, r3
 8025028:	2000      	movs	r0, #0
 802502a:	f002 fb57 	bl	80276dc <strtok>
 802502e:	4603      	mov	r3, r0
 8025030:	653b      	str	r3, [r7, #80]	; 0x50
			strcpy((char*)virtualSensorList[u8Index].startTime, token);
 8025032:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8025036:	4613      	mov	r3, r2
 8025038:	005b      	lsls	r3, r3, #1
 802503a:	4413      	add	r3, r2
 802503c:	019b      	lsls	r3, r3, #6
 802503e:	4413      	add	r3, r2
 8025040:	3320      	adds	r3, #32
 8025042:	4a25      	ldr	r2, [pc, #148]	; (80250d8 <appVirtualSetting+0x268>)
 8025044:	4413      	add	r3, r2
 8025046:	3306      	adds	r3, #6
 8025048:	6d39      	ldr	r1, [r7, #80]	; 0x50
 802504a:	4618      	mov	r0, r3
 802504c:	f002 f928 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter);
 8025050:	463b      	mov	r3, r7
 8025052:	4619      	mov	r1, r3
 8025054:	2000      	movs	r0, #0
 8025056:	f002 fb41 	bl	80276dc <strtok>
 802505a:	4603      	mov	r3, r0
 802505c:	653b      	str	r3, [r7, #80]	; 0x50
			strcpy((char*)virtualSensorList[u8Index].sensorHeight, token);
 802505e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8025062:	4613      	mov	r3, r2
 8025064:	005b      	lsls	r3, r3, #1
 8025066:	4413      	add	r3, r2
 8025068:	019b      	lsls	r3, r3, #6
 802506a:	4413      	add	r3, r2
 802506c:	3338      	adds	r3, #56	; 0x38
 802506e:	4a1a      	ldr	r2, [pc, #104]	; (80250d8 <appVirtualSetting+0x268>)
 8025070:	4413      	add	r3, r2
 8025072:	3303      	adds	r3, #3
 8025074:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8025076:	4618      	mov	r0, r3
 8025078:	f002 f912 	bl	80272a0 <strcpy>
			token = strtok(NULL, delimiter);
 802507c:	463b      	mov	r3, r7
 802507e:	4619      	mov	r1, r3
 8025080:	2000      	movs	r0, #0
 8025082:	f002 fb2b 	bl	80276dc <strtok>
 8025086:	4603      	mov	r3, r0
 8025088:	653b      	str	r3, [r7, #80]	; 0x50
			strcpy((char*)virtualSensorList[u8Index].dataSequence, token);
 802508a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 802508e:	4613      	mov	r3, r2
 8025090:	005b      	lsls	r3, r3, #1
 8025092:	4413      	add	r3, r2
 8025094:	019b      	lsls	r3, r3, #6
 8025096:	4413      	add	r3, r2
 8025098:	3340      	adds	r3, #64	; 0x40
 802509a:	4a0f      	ldr	r2, [pc, #60]	; (80250d8 <appVirtualSetting+0x268>)
 802509c:	4413      	add	r3, r2
 802509e:	3301      	adds	r3, #1
 80250a0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80250a2:	4618      	mov	r0, r3
 80250a4:	f002 f8fc 	bl	80272a0 <strcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*)"13_OK!", 6, 10);
 80250a8:	230a      	movs	r3, #10
 80250aa:	2206      	movs	r2, #6
 80250ac:	490b      	ldr	r1, [pc, #44]	; (80250dc <appVirtualSetting+0x26c>)
 80250ae:	480c      	ldr	r0, [pc, #48]	; (80250e0 <appVirtualSetting+0x270>)
 80250b0:	f7e3 f816 	bl	80080e0 <HAL_UART_Transmit>
			break;
 80250b4:	e00a      	b.n	80250cc <appVirtualSetting+0x25c>
	for (u8Index = 0; u8Index < 15; u8Index++)
 80250b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80250ba:	3301      	adds	r3, #1
 80250bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80250c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80250c4:	2b0e      	cmp	r3, #14
 80250c6:	f67f aeea 	bls.w	8024e9e <appVirtualSetting+0x2e>
		}
	}
}
 80250ca:	bf00      	nop
 80250cc:	bf00      	nop
 80250ce:	3758      	adds	r7, #88	; 0x58
 80250d0:	46bd      	mov	sp, r7
 80250d2:	bd80      	pop	{r7, pc}
 80250d4:	0802e87c 	.word	0x0802e87c
 80250d8:	240091bc 	.word	0x240091bc
 80250dc:	0802e874 	.word	0x0802e874
 80250e0:	24008780 	.word	0x24008780

080250e4 <appGetDataSequence>:

static void appGetDataSequence(void)
{
 80250e4:	b5b0      	push	{r4, r5, r7, lr}
 80250e6:	b098      	sub	sp, #96	; 0x60
 80250e8:	af00      	add	r7, sp, #0
	uint8_t u8Index;
	char cChannel[][3] = {"19", "20", "21", "22", "23", "24", "25", "26", "27", "28", \
 80250ea:	4b33      	ldr	r3, [pc, #204]	; (80251b8 <appGetDataSequence+0xd4>)
 80250ec:	f107 0418 	add.w	r4, r7, #24
 80250f0:	461d      	mov	r5, r3
 80250f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80250f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80250f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80250f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80250fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80250fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80250fe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8025102:	c407      	stmia	r4!, {r0, r1, r2}
 8025104:	8023      	strh	r3, [r4, #0]
 8025106:	3402      	adds	r4, #2
 8025108:	0c1b      	lsrs	r3, r3, #16
 802510a:	7023      	strb	r3, [r4, #0]
                         "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39"};
	char *token;
	char delimiter[2] = ";";
 802510c:	233b      	movs	r3, #59	; 0x3b
 802510e:	82bb      	strh	r3, [r7, #20]
	char serialData[16] = "A1,1,B2,2,C3,3!";
 8025110:	4b2a      	ldr	r3, [pc, #168]	; (80251bc <appGetDataSequence+0xd8>)
 8025112:	1d3c      	adds	r4, r7, #4
 8025114:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8025116:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	token = strtok(NULL, delimiter);
 802511a:	f107 0314 	add.w	r3, r7, #20
 802511e:	4619      	mov	r1, r3
 8025120:	2000      	movs	r0, #0
 8025122:	f002 fadb 	bl	80276dc <strtok>
 8025126:	4603      	mov	r3, r0
 8025128:	65bb      	str	r3, [r7, #88]	; 0x58
	/* Find serial channel corresponding */
	for (u8Index = 0; u8Index < 22; u8Index++)
 802512a:	2300      	movs	r3, #0
 802512c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8025130:	e039      	b.n	80251a6 <appGetDataSequence+0xc2>
	{
		if (0 == strcmp(token, cChannel[u8Index]) && (u8Index < 6)) {
 8025132:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8025136:	f107 0118 	add.w	r1, r7, #24
 802513a:	4613      	mov	r3, r2
 802513c:	005b      	lsls	r3, r3, #1
 802513e:	4413      	add	r3, r2
 8025140:	440b      	add	r3, r1
 8025142:	4619      	mov	r1, r3
 8025144:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8025146:	f7db f8cb 	bl	80002e0 <strcmp>
 802514a:	4603      	mov	r3, r0
 802514c:	2b00      	cmp	r3, #0
 802514e:	d10a      	bne.n	8025166 <appGetDataSequence+0x82>
 8025150:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8025154:	2b05      	cmp	r3, #5
 8025156:	d806      	bhi.n	8025166 <appGetDataSequence+0x82>
			HAL_UART_Transmit(&huart1, (uint8_t*)serialData, 15, 10);
 8025158:	1d39      	adds	r1, r7, #4
 802515a:	230a      	movs	r3, #10
 802515c:	220f      	movs	r2, #15
 802515e:	4818      	ldr	r0, [pc, #96]	; (80251c0 <appGetDataSequence+0xdc>)
 8025160:	f7e2 ffbe 	bl	80080e0 <HAL_UART_Transmit>
			break;
 8025164:	e024      	b.n	80251b0 <appGetDataSequence+0xcc>
		} else if (0 == strcmp(token, cChannel[u8Index]) && (u8Index >= 6)) {
 8025166:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 802516a:	f107 0118 	add.w	r1, r7, #24
 802516e:	4613      	mov	r3, r2
 8025170:	005b      	lsls	r3, r3, #1
 8025172:	4413      	add	r3, r2
 8025174:	440b      	add	r3, r1
 8025176:	4619      	mov	r1, r3
 8025178:	6db8      	ldr	r0, [r7, #88]	; 0x58
 802517a:	f7db f8b1 	bl	80002e0 <strcmp>
 802517e:	4603      	mov	r3, r0
 8025180:	2b00      	cmp	r3, #0
 8025182:	d10b      	bne.n	802519c <appGetDataSequence+0xb8>
 8025184:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8025188:	2b05      	cmp	r3, #5
 802518a:	d907      	bls.n	802519c <appGetDataSequence+0xb8>
			appProcessVirtualSensor(u8Index-6);
 802518c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8025190:	3b06      	subs	r3, #6
 8025192:	b2db      	uxtb	r3, r3
 8025194:	4618      	mov	r0, r3
 8025196:	f000 f815 	bl	80251c4 <appProcessVirtualSensor>
			break;
 802519a:	e009      	b.n	80251b0 <appGetDataSequence+0xcc>
	for (u8Index = 0; u8Index < 22; u8Index++)
 802519c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80251a0:	3301      	adds	r3, #1
 80251a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80251a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80251aa:	2b15      	cmp	r3, #21
 80251ac:	d9c1      	bls.n	8025132 <appGetDataSequence+0x4e>
		}
	}
}
 80251ae:	bf00      	nop
 80251b0:	bf00      	nop
 80251b2:	3760      	adds	r7, #96	; 0x60
 80251b4:	46bd      	mov	sp, r7
 80251b6:	bdb0      	pop	{r4, r5, r7, pc}
 80251b8:	0802e8c8 	.word	0x0802e8c8
 80251bc:	0802e908 	.word	0x0802e908
 80251c0:	24008780 	.word	0x24008780

080251c4 <appProcessVirtualSensor>:

static void appProcessVirtualSensor(uint8_t u8Channel)
{
 80251c4:	b580      	push	{r7, lr}
 80251c6:	b084      	sub	sp, #16
 80251c8:	af00      	add	r7, sp, #0
 80251ca:	4603      	mov	r3, r0
 80251cc:	71fb      	strb	r3, [r7, #7]
	uint8_t u8Type, u8Lenght;
	u8Type = atoi(virtualSensorList[u8Channel].vsType);
 80251ce:	79fa      	ldrb	r2, [r7, #7]
 80251d0:	4613      	mov	r3, r2
 80251d2:	005b      	lsls	r3, r3, #1
 80251d4:	4413      	add	r3, r2
 80251d6:	019b      	lsls	r3, r3, #6
 80251d8:	4413      	add	r3, r2
 80251da:	3310      	adds	r3, #16
 80251dc:	4a39      	ldr	r2, [pc, #228]	; (80252c4 <appProcessVirtualSensor+0x100>)
 80251de:	4413      	add	r3, r2
 80251e0:	3304      	adds	r3, #4
 80251e2:	4618      	mov	r0, r3
 80251e4:	f000 fd12 	bl	8025c0c <atoi>
 80251e8:	4603      	mov	r3, r0
 80251ea:	73bb      	strb	r3, [r7, #14]
	uint8_t *pMessage = malloc(30);
 80251ec:	201e      	movs	r0, #30
 80251ee:	f000 ffcd 	bl	802618c <malloc>
 80251f2:	4603      	mov	r3, r0
 80251f4:	60bb      	str	r3, [r7, #8]
	switch (u8Type)
 80251f6:	7bbb      	ldrb	r3, [r7, #14]
 80251f8:	2b08      	cmp	r3, #8
 80251fa:	d854      	bhi.n	80252a6 <appProcessVirtualSensor+0xe2>
 80251fc:	a201      	add	r2, pc, #4	; (adr r2, 8025204 <appProcessVirtualSensor+0x40>)
 80251fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025202:	bf00      	nop
 8025204:	08025229 	.word	0x08025229
 8025208:	08025237 	.word	0x08025237
 802520c:	08025245 	.word	0x08025245
 8025210:	08025253 	.word	0x08025253
 8025214:	08025261 	.word	0x08025261
 8025218:	0802526f 	.word	0x0802526f
 802521c:	0802527d 	.word	0x0802527d
 8025220:	0802528b 	.word	0x0802528b
 8025224:	08025299 	.word	0x08025299
	{
		case 0:
			/* MET Win */
			u8Lenght = sprintf(pMessage, "11,22,33,44,55,66,77,88!");
 8025228:	4927      	ldr	r1, [pc, #156]	; (80252c8 <appProcessVirtualSensor+0x104>)
 802522a:	68b8      	ldr	r0, [r7, #8]
 802522c:	f001 ff9a 	bl	8027164 <siprintf>
 8025230:	4603      	mov	r3, r0
 8025232:	73fb      	strb	r3, [r7, #15]
			break;
 8025234:	e038      	b.n	80252a8 <appProcessVirtualSensor+0xe4>
		case 1:
			/* Dew Point */
			u8Lenght = sprintf(pMessage, "11!");
 8025236:	4925      	ldr	r1, [pc, #148]	; (80252cc <appProcessVirtualSensor+0x108>)
 8025238:	68b8      	ldr	r0, [r7, #8]
 802523a:	f001 ff93 	bl	8027164 <siprintf>
 802523e:	4603      	mov	r3, r0
 8025240:	73fb      	strb	r3, [r7, #15]
			break;
 8025242:	e031      	b.n	80252a8 <appProcessVirtualSensor+0xe4>
		case 2:
			/* QNH */
			u8Lenght = sprintf(pMessage, "22!");
 8025244:	4922      	ldr	r1, [pc, #136]	; (80252d0 <appProcessVirtualSensor+0x10c>)
 8025246:	68b8      	ldr	r0, [r7, #8]
 8025248:	f001 ff8c 	bl	8027164 <siprintf>
 802524c:	4603      	mov	r3, r0
 802524e:	73fb      	strb	r3, [r7, #15]
			break;
 8025250:	e02a      	b.n	80252a8 <appProcessVirtualSensor+0xe4>
		case 3:
			/* Solar */
			u8Lenght = sprintf(pMessage, "33!");
 8025252:	4920      	ldr	r1, [pc, #128]	; (80252d4 <appProcessVirtualSensor+0x110>)
 8025254:	68b8      	ldr	r0, [r7, #8]
 8025256:	f001 ff85 	bl	8027164 <siprintf>
 802525a:	4603      	mov	r3, r0
 802525c:	73fb      	strb	r3, [r7, #15]
			break;
 802525e:	e023      	b.n	80252a8 <appProcessVirtualSensor+0xe4>
		case 4:
			/* Sunshine */
			u8Lenght = sprintf(pMessage, "44!");
 8025260:	491d      	ldr	r1, [pc, #116]	; (80252d8 <appProcessVirtualSensor+0x114>)
 8025262:	68b8      	ldr	r0, [r7, #8]
 8025264:	f001 ff7e 	bl	8027164 <siprintf>
 8025268:	4603      	mov	r3, r0
 802526a:	73fb      	strb	r3, [r7, #15]
			break;
 802526c:	e01c      	b.n	80252a8 <appProcessVirtualSensor+0xe4>
		case 5:
			/* Rain */
			u8Lenght = sprintf(pMessage, "55!");
 802526e:	491b      	ldr	r1, [pc, #108]	; (80252dc <appProcessVirtualSensor+0x118>)
 8025270:	68b8      	ldr	r0, [r7, #8]
 8025272:	f001 ff77 	bl	8027164 <siprintf>
 8025276:	4603      	mov	r3, r0
 8025278:	73fb      	strb	r3, [r7, #15]
			break;
 802527a:	e015      	b.n	80252a8 <appProcessVirtualSensor+0xe4>
		case 6:
			/* Minimum */
			u8Lenght = sprintf(pMessage, "66!");
 802527c:	4918      	ldr	r1, [pc, #96]	; (80252e0 <appProcessVirtualSensor+0x11c>)
 802527e:	68b8      	ldr	r0, [r7, #8]
 8025280:	f001 ff70 	bl	8027164 <siprintf>
 8025284:	4603      	mov	r3, r0
 8025286:	73fb      	strb	r3, [r7, #15]
			break;
 8025288:	e00e      	b.n	80252a8 <appProcessVirtualSensor+0xe4>
		case 7:
			/* Maximum */
			u8Lenght = sprintf(pMessage, "77!");
 802528a:	4916      	ldr	r1, [pc, #88]	; (80252e4 <appProcessVirtualSensor+0x120>)
 802528c:	68b8      	ldr	r0, [r7, #8]
 802528e:	f001 ff69 	bl	8027164 <siprintf>
 8025292:	4603      	mov	r3, r0
 8025294:	73fb      	strb	r3, [r7, #15]
			break;
 8025296:	e007      	b.n	80252a8 <appProcessVirtualSensor+0xe4>
		case 8:
			/* Average */
			u8Lenght = sprintf(pMessage, "88!");
 8025298:	4913      	ldr	r1, [pc, #76]	; (80252e8 <appProcessVirtualSensor+0x124>)
 802529a:	68b8      	ldr	r0, [r7, #8]
 802529c:	f001 ff62 	bl	8027164 <siprintf>
 80252a0:	4603      	mov	r3, r0
 80252a2:	73fb      	strb	r3, [r7, #15]
			break;
 80252a4:	e000      	b.n	80252a8 <appProcessVirtualSensor+0xe4>
		default:
			break;
 80252a6:	bf00      	nop
    }
	HAL_UART_Transmit(&huart1, pMessage, u8Lenght, 10);
 80252a8:	7bfb      	ldrb	r3, [r7, #15]
 80252aa:	b29a      	uxth	r2, r3
 80252ac:	230a      	movs	r3, #10
 80252ae:	68b9      	ldr	r1, [r7, #8]
 80252b0:	480e      	ldr	r0, [pc, #56]	; (80252ec <appProcessVirtualSensor+0x128>)
 80252b2:	f7e2 ff15 	bl	80080e0 <HAL_UART_Transmit>
	free(pMessage);
 80252b6:	68b8      	ldr	r0, [r7, #8]
 80252b8:	f000 ff70 	bl	802619c <free>
}
 80252bc:	bf00      	nop
 80252be:	3710      	adds	r7, #16
 80252c0:	46bd      	mov	sp, r7
 80252c2:	bd80      	pop	{r7, pc}
 80252c4:	240091bc 	.word	0x240091bc
 80252c8:	0802e918 	.word	0x0802e918
 80252cc:	0802e934 	.word	0x0802e934
 80252d0:	0802e938 	.word	0x0802e938
 80252d4:	0802e93c 	.word	0x0802e93c
 80252d8:	0802e940 	.word	0x0802e940
 80252dc:	0802e944 	.word	0x0802e944
 80252e0:	0802e948 	.word	0x0802e948
 80252e4:	0802e94c 	.word	0x0802e94c
 80252e8:	0802e950 	.word	0x0802e950
 80252ec:	24008780 	.word	0x24008780

080252f0 <appAnalogStatus>:

static void appAnalogStatus(uint8_t u8Channel)
{
 80252f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80252f2:	b091      	sub	sp, #68	; 0x44
 80252f4:	af0a      	add	r7, sp, #40	; 0x28
 80252f6:	4603      	mov	r3, r0
 80252f8:	73fb      	strb	r3, [r7, #15]
	uint8_t *pMessage = malloc(COMMAND_BUF_SIZE);
 80252fa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80252fe:	f000 ff45 	bl	802618c <malloc>
 8025302:	4603      	mov	r3, r0
 8025304:	617b      	str	r3, [r7, #20]
	uint8_t u8Lenght;
	u8Lenght = sprintf((char*)pMessage, "%s;%s;%s;%s;%s;%s;%s;%s;%s;%.2f!", (char*)analogSettingList[u8Channel].channel, (char*)analogSettingList[u8Channel].name, \
 8025306:	7bfa      	ldrb	r2, [r7, #15]
 8025308:	4613      	mov	r3, r2
 802530a:	015b      	lsls	r3, r3, #5
 802530c:	1a9b      	subs	r3, r3, r2
 802530e:	005b      	lsls	r3, r3, #1
 8025310:	4a39      	ldr	r2, [pc, #228]	; (80253f8 <appAnalogStatus+0x108>)
 8025312:	eb03 0c02 	add.w	ip, r3, r2
 8025316:	7bfa      	ldrb	r2, [r7, #15]
 8025318:	4613      	mov	r3, r2
 802531a:	015b      	lsls	r3, r3, #5
 802531c:	1a9b      	subs	r3, r3, r2
 802531e:	005b      	lsls	r3, r3, #1
 8025320:	3310      	adds	r3, #16
 8025322:	4a35      	ldr	r2, [pc, #212]	; (80253f8 <appAnalogStatus+0x108>)
 8025324:	eb03 0e02 	add.w	lr, r3, r2
	                          (char*)analogSettingList[u8Channel].status, (char*)analogSettingList[u8Channel].inputRange, (char*)analogSettingList[u8Channel].interval, \
 8025328:	7bfa      	ldrb	r2, [r7, #15]
 802532a:	4613      	mov	r3, r2
 802532c:	015b      	lsls	r3, r3, #5
 802532e:	1a9b      	subs	r3, r3, r2
 8025330:	005b      	lsls	r3, r3, #1
 8025332:	4a31      	ldr	r2, [pc, #196]	; (80253f8 <appAnalogStatus+0x108>)
 8025334:	4413      	add	r3, r2
 8025336:	3306      	adds	r3, #6
 8025338:	60bb      	str	r3, [r7, #8]
 802533a:	7bfa      	ldrb	r2, [r7, #15]
 802533c:	4613      	mov	r3, r2
 802533e:	015b      	lsls	r3, r3, #5
 8025340:	1a9b      	subs	r3, r3, r2
 8025342:	005b      	lsls	r3, r3, #1
 8025344:	3318      	adds	r3, #24
 8025346:	4a2c      	ldr	r2, [pc, #176]	; (80253f8 <appAnalogStatus+0x108>)
 8025348:	4413      	add	r3, r2
 802534a:	1c98      	adds	r0, r3, #2
 802534c:	7bfa      	ldrb	r2, [r7, #15]
 802534e:	4613      	mov	r3, r2
 8025350:	015b      	lsls	r3, r3, #5
 8025352:	1a9b      	subs	r3, r3, r2
 8025354:	005b      	lsls	r3, r3, #1
 8025356:	3320      	adds	r3, #32
 8025358:	4a27      	ldr	r2, [pc, #156]	; (80253f8 <appAnalogStatus+0x108>)
 802535a:	4413      	add	r3, r2
 802535c:	1d1c      	adds	r4, r3, #4
							  (char*)analogSettingList[u8Channel].slope, (char*)analogSettingList[u8Channel].offset, (char*)analogSettingList[u8Channel].rightDigit, \
 802535e:	7bfa      	ldrb	r2, [r7, #15]
 8025360:	4613      	mov	r3, r2
 8025362:	015b      	lsls	r3, r3, #5
 8025364:	1a9b      	subs	r3, r3, r2
 8025366:	005b      	lsls	r3, r3, #1
 8025368:	3328      	adds	r3, #40	; 0x28
 802536a:	4a23      	ldr	r2, [pc, #140]	; (80253f8 <appAnalogStatus+0x108>)
 802536c:	4413      	add	r3, r2
 802536e:	1c9d      	adds	r5, r3, #2
 8025370:	7bfa      	ldrb	r2, [r7, #15]
 8025372:	4613      	mov	r3, r2
 8025374:	015b      	lsls	r3, r3, #5
 8025376:	1a9b      	subs	r3, r3, r2
 8025378:	005b      	lsls	r3, r3, #1
 802537a:	3330      	adds	r3, #48	; 0x30
 802537c:	4a1e      	ldr	r2, [pc, #120]	; (80253f8 <appAnalogStatus+0x108>)
 802537e:	189e      	adds	r6, r3, r2
 8025380:	7bfa      	ldrb	r2, [r7, #15]
 8025382:	4613      	mov	r3, r2
 8025384:	015b      	lsls	r3, r3, #5
 8025386:	1a9b      	subs	r3, r3, r2
 8025388:	005b      	lsls	r3, r3, #1
 802538a:	3330      	adds	r3, #48	; 0x30
 802538c:	4a1a      	ldr	r2, [pc, #104]	; (80253f8 <appAnalogStatus+0x108>)
 802538e:	4413      	add	r3, r2
 8025390:	3306      	adds	r3, #6
 8025392:	607b      	str	r3, [r7, #4]
							  (char*)analogSettingList[u8Channel].unit, fAnalogDataList[u8Channel]);
 8025394:	7bfa      	ldrb	r2, [r7, #15]
 8025396:	4613      	mov	r3, r2
 8025398:	015b      	lsls	r3, r3, #5
 802539a:	1a9b      	subs	r3, r3, r2
 802539c:	005b      	lsls	r3, r3, #1
 802539e:	3338      	adds	r3, #56	; 0x38
 80253a0:	4a15      	ldr	r2, [pc, #84]	; (80253f8 <appAnalogStatus+0x108>)
 80253a2:	4413      	add	r3, r2
 80253a4:	7bfa      	ldrb	r2, [r7, #15]
 80253a6:	4915      	ldr	r1, [pc, #84]	; (80253fc <appAnalogStatus+0x10c>)
 80253a8:	0092      	lsls	r2, r2, #2
 80253aa:	440a      	add	r2, r1
 80253ac:	edd2 7a00 	vldr	s15, [r2]
	u8Lenght = sprintf((char*)pMessage, "%s;%s;%s;%s;%s;%s;%s;%s;%s;%.2f!", (char*)analogSettingList[u8Channel].channel, (char*)analogSettingList[u8Channel].name, \
 80253b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80253b4:	ed8d 7b08 	vstr	d7, [sp, #32]
 80253b8:	9306      	str	r3, [sp, #24]
 80253ba:	687b      	ldr	r3, [r7, #4]
 80253bc:	9305      	str	r3, [sp, #20]
 80253be:	9604      	str	r6, [sp, #16]
 80253c0:	9503      	str	r5, [sp, #12]
 80253c2:	9402      	str	r4, [sp, #8]
 80253c4:	9001      	str	r0, [sp, #4]
 80253c6:	68bb      	ldr	r3, [r7, #8]
 80253c8:	9300      	str	r3, [sp, #0]
 80253ca:	4673      	mov	r3, lr
 80253cc:	4662      	mov	r2, ip
 80253ce:	490c      	ldr	r1, [pc, #48]	; (8025400 <appAnalogStatus+0x110>)
 80253d0:	6978      	ldr	r0, [r7, #20]
 80253d2:	f001 fec7 	bl	8027164 <siprintf>
 80253d6:	4603      	mov	r3, r0
 80253d8:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart1, pMessage, u8Lenght, 10);
 80253da:	7cfb      	ldrb	r3, [r7, #19]
 80253dc:	b29a      	uxth	r2, r3
 80253de:	230a      	movs	r3, #10
 80253e0:	6979      	ldr	r1, [r7, #20]
 80253e2:	4808      	ldr	r0, [pc, #32]	; (8025404 <appAnalogStatus+0x114>)
 80253e4:	f7e2 fe7c 	bl	80080e0 <HAL_UART_Transmit>
	free(pMessage);
 80253e8:	6978      	ldr	r0, [r7, #20]
 80253ea:	f000 fed7 	bl	802619c <free>
}
 80253ee:	bf00      	nop
 80253f0:	371c      	adds	r7, #28
 80253f2:	46bd      	mov	sp, r7
 80253f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80253f6:	bf00      	nop
 80253f8:	24008960 	.word	0x24008960
 80253fc:	24005100 	.word	0x24005100
 8025400:	0802e954 	.word	0x0802e954
 8025404:	24008780 	.word	0x24008780

08025408 <appDigitalStatus>:

static void appDigitalStatus(uint8_t u8Channel)
{
 8025408:	b5f0      	push	{r4, r5, r6, r7, lr}
 802540a:	b091      	sub	sp, #68	; 0x44
 802540c:	af0a      	add	r7, sp, #40	; 0x28
 802540e:	4603      	mov	r3, r0
 8025410:	73fb      	strb	r3, [r7, #15]
	uint8_t *pMessage = malloc(COMMAND_BUF_SIZE);
 8025412:	f44f 7080 	mov.w	r0, #256	; 0x100
 8025416:	f000 feb9 	bl	802618c <malloc>
 802541a:	4603      	mov	r3, r0
 802541c:	617b      	str	r3, [r7, #20]
	uint8_t u8Lenght;
	u8Lenght = sprintf((char*)pMessage, "%s;%s;%s;%s;%s;%s;%s;%s;%s;%.2f!", (char*)digitalSettingList[u8Channel].channel, (char*)digitalSettingList[u8Channel].name,\
 802541e:	7bfa      	ldrb	r2, [r7, #15]
 8025420:	4613      	mov	r3, r2
 8025422:	015b      	lsls	r3, r3, #5
 8025424:	1a9b      	subs	r3, r3, r2
 8025426:	005b      	lsls	r3, r3, #1
 8025428:	4a39      	ldr	r2, [pc, #228]	; (8025510 <appDigitalStatus+0x108>)
 802542a:	eb03 0c02 	add.w	ip, r3, r2
 802542e:	7bfa      	ldrb	r2, [r7, #15]
 8025430:	4613      	mov	r3, r2
 8025432:	015b      	lsls	r3, r3, #5
 8025434:	1a9b      	subs	r3, r3, r2
 8025436:	005b      	lsls	r3, r3, #1
 8025438:	3310      	adds	r3, #16
 802543a:	4a35      	ldr	r2, [pc, #212]	; (8025510 <appDigitalStatus+0x108>)
 802543c:	eb03 0e02 	add.w	lr, r3, r2
						(char*)digitalSettingList[u8Channel].status, (char*)digitalSettingList[u8Channel].mode, (char*)digitalSettingList[u8Channel].interval,\
 8025440:	7bfa      	ldrb	r2, [r7, #15]
 8025442:	4613      	mov	r3, r2
 8025444:	015b      	lsls	r3, r3, #5
 8025446:	1a9b      	subs	r3, r3, r2
 8025448:	005b      	lsls	r3, r3, #1
 802544a:	4a31      	ldr	r2, [pc, #196]	; (8025510 <appDigitalStatus+0x108>)
 802544c:	4413      	add	r3, r2
 802544e:	3306      	adds	r3, #6
 8025450:	60bb      	str	r3, [r7, #8]
 8025452:	7bfa      	ldrb	r2, [r7, #15]
 8025454:	4613      	mov	r3, r2
 8025456:	015b      	lsls	r3, r3, #5
 8025458:	1a9b      	subs	r3, r3, r2
 802545a:	005b      	lsls	r3, r3, #1
 802545c:	3318      	adds	r3, #24
 802545e:	4a2c      	ldr	r2, [pc, #176]	; (8025510 <appDigitalStatus+0x108>)
 8025460:	4413      	add	r3, r2
 8025462:	1c98      	adds	r0, r3, #2
 8025464:	7bfa      	ldrb	r2, [r7, #15]
 8025466:	4613      	mov	r3, r2
 8025468:	015b      	lsls	r3, r3, #5
 802546a:	1a9b      	subs	r3, r3, r2
 802546c:	005b      	lsls	r3, r3, #1
 802546e:	3320      	adds	r3, #32
 8025470:	4a27      	ldr	r2, [pc, #156]	; (8025510 <appDigitalStatus+0x108>)
 8025472:	4413      	add	r3, r2
 8025474:	1d1c      	adds	r4, r3, #4
						(char*)digitalSettingList[u8Channel].slope, (char*)digitalSettingList[u8Channel].offset, (char*)digitalSettingList[u8Channel].rightDigit,\
 8025476:	7bfa      	ldrb	r2, [r7, #15]
 8025478:	4613      	mov	r3, r2
 802547a:	015b      	lsls	r3, r3, #5
 802547c:	1a9b      	subs	r3, r3, r2
 802547e:	005b      	lsls	r3, r3, #1
 8025480:	3328      	adds	r3, #40	; 0x28
 8025482:	4a23      	ldr	r2, [pc, #140]	; (8025510 <appDigitalStatus+0x108>)
 8025484:	4413      	add	r3, r2
 8025486:	1c9d      	adds	r5, r3, #2
 8025488:	7bfa      	ldrb	r2, [r7, #15]
 802548a:	4613      	mov	r3, r2
 802548c:	015b      	lsls	r3, r3, #5
 802548e:	1a9b      	subs	r3, r3, r2
 8025490:	005b      	lsls	r3, r3, #1
 8025492:	3330      	adds	r3, #48	; 0x30
 8025494:	4a1e      	ldr	r2, [pc, #120]	; (8025510 <appDigitalStatus+0x108>)
 8025496:	189e      	adds	r6, r3, r2
 8025498:	7bfa      	ldrb	r2, [r7, #15]
 802549a:	4613      	mov	r3, r2
 802549c:	015b      	lsls	r3, r3, #5
 802549e:	1a9b      	subs	r3, r3, r2
 80254a0:	005b      	lsls	r3, r3, #1
 80254a2:	3330      	adds	r3, #48	; 0x30
 80254a4:	4a1a      	ldr	r2, [pc, #104]	; (8025510 <appDigitalStatus+0x108>)
 80254a6:	4413      	add	r3, r2
 80254a8:	3306      	adds	r3, #6
 80254aa:	607b      	str	r3, [r7, #4]
						(char*)digitalSettingList[u8Channel].unit, fDigitalDataList[u8Channel]);
 80254ac:	7bfa      	ldrb	r2, [r7, #15]
 80254ae:	4613      	mov	r3, r2
 80254b0:	015b      	lsls	r3, r3, #5
 80254b2:	1a9b      	subs	r3, r3, r2
 80254b4:	005b      	lsls	r3, r3, #1
 80254b6:	3338      	adds	r3, #56	; 0x38
 80254b8:	4a15      	ldr	r2, [pc, #84]	; (8025510 <appDigitalStatus+0x108>)
 80254ba:	4413      	add	r3, r2
 80254bc:	7bfa      	ldrb	r2, [r7, #15]
 80254be:	4915      	ldr	r1, [pc, #84]	; (8025514 <appDigitalStatus+0x10c>)
 80254c0:	0092      	lsls	r2, r2, #2
 80254c2:	440a      	add	r2, r1
 80254c4:	edd2 7a00 	vldr	s15, [r2]
	u8Lenght = sprintf((char*)pMessage, "%s;%s;%s;%s;%s;%s;%s;%s;%s;%.2f!", (char*)digitalSettingList[u8Channel].channel, (char*)digitalSettingList[u8Channel].name,\
 80254c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80254cc:	ed8d 7b08 	vstr	d7, [sp, #32]
 80254d0:	9306      	str	r3, [sp, #24]
 80254d2:	687b      	ldr	r3, [r7, #4]
 80254d4:	9305      	str	r3, [sp, #20]
 80254d6:	9604      	str	r6, [sp, #16]
 80254d8:	9503      	str	r5, [sp, #12]
 80254da:	9402      	str	r4, [sp, #8]
 80254dc:	9001      	str	r0, [sp, #4]
 80254de:	68bb      	ldr	r3, [r7, #8]
 80254e0:	9300      	str	r3, [sp, #0]
 80254e2:	4673      	mov	r3, lr
 80254e4:	4662      	mov	r2, ip
 80254e6:	490c      	ldr	r1, [pc, #48]	; (8025518 <appDigitalStatus+0x110>)
 80254e8:	6978      	ldr	r0, [r7, #20]
 80254ea:	f001 fe3b 	bl	8027164 <siprintf>
 80254ee:	4603      	mov	r3, r0
 80254f0:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart1, pMessage, u8Lenght, 10);
 80254f2:	7cfb      	ldrb	r3, [r7, #19]
 80254f4:	b29a      	uxth	r2, r3
 80254f6:	230a      	movs	r3, #10
 80254f8:	6979      	ldr	r1, [r7, #20]
 80254fa:	4808      	ldr	r0, [pc, #32]	; (802551c <appDigitalStatus+0x114>)
 80254fc:	f7e2 fdf0 	bl	80080e0 <HAL_UART_Transmit>
	free(pMessage);
 8025500:	6978      	ldr	r0, [r7, #20]
 8025502:	f000 fe4b 	bl	802619c <free>
}
 8025506:	bf00      	nop
 8025508:	371c      	adds	r7, #28
 802550a:	46bd      	mov	sp, r7
 802550c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802550e:	bf00      	nop
 8025510:	24008c48 	.word	0x24008c48
 8025514:	24005130 	.word	0x24005130
 8025518:	0802e954 	.word	0x0802e954
 802551c:	24008780 	.word	0x24008780

08025520 <appSerialStatus>:

static void appSerialStatus(uint8_t u8Channel)
{
 8025520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025522:	b097      	sub	sp, #92	; 0x5c
 8025524:	af0c      	add	r7, sp, #48	; 0x30
 8025526:	4603      	mov	r3, r0
 8025528:	77fb      	strb	r3, [r7, #31]
	uint8_t *pMessage = malloc(COMMAND_BUF_SIZE);
 802552a:	f44f 7080 	mov.w	r0, #256	; 0x100
 802552e:	f000 fe2d 	bl	802618c <malloc>
 8025532:	4603      	mov	r3, r0
 8025534:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t u8Lenght;
	u8Lenght = sprintf((char*)pMessage, "%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;%s!",\
	serialSettingList[u8Channel].channel, serialSettingList[u8Channel].name, serialSettingList[u8Channel].status,\
 8025536:	7ffa      	ldrb	r2, [r7, #31]
 8025538:	4613      	mov	r3, r2
 802553a:	00db      	lsls	r3, r3, #3
 802553c:	4413      	add	r3, r2
 802553e:	011b      	lsls	r3, r3, #4
 8025540:	4a52      	ldr	r2, [pc, #328]	; (802568c <appSerialStatus+0x16c>)
 8025542:	eb03 0c02 	add.w	ip, r3, r2
 8025546:	7ffa      	ldrb	r2, [r7, #31]
 8025548:	4613      	mov	r3, r2
 802554a:	00db      	lsls	r3, r3, #3
 802554c:	4413      	add	r3, r2
 802554e:	011b      	lsls	r3, r3, #4
 8025550:	3308      	adds	r3, #8
 8025552:	4a4e      	ldr	r2, [pc, #312]	; (802568c <appSerialStatus+0x16c>)
 8025554:	4413      	add	r3, r2
 8025556:	f103 0e06 	add.w	lr, r3, #6
 802555a:	7ffa      	ldrb	r2, [r7, #31]
 802555c:	4613      	mov	r3, r2
 802555e:	00db      	lsls	r3, r3, #3
 8025560:	4413      	add	r3, r2
 8025562:	011b      	lsls	r3, r3, #4
 8025564:	4a49      	ldr	r2, [pc, #292]	; (802568c <appSerialStatus+0x16c>)
 8025566:	4413      	add	r3, r2
 8025568:	1d98      	adds	r0, r3, #6
	serialSettingList[u8Channel].baudrate, serialSettingList[u8Channel].dataBit, serialSettingList[u8Channel].parity,\
 802556a:	7ffa      	ldrb	r2, [r7, #31]
 802556c:	4613      	mov	r3, r2
 802556e:	00db      	lsls	r3, r3, #3
 8025570:	4413      	add	r3, r2
 8025572:	011b      	lsls	r3, r3, #4
 8025574:	3318      	adds	r3, #24
 8025576:	4a45      	ldr	r2, [pc, #276]	; (802568c <appSerialStatus+0x16c>)
 8025578:	189c      	adds	r4, r3, r2
 802557a:	7ffa      	ldrb	r2, [r7, #31]
 802557c:	4613      	mov	r3, r2
 802557e:	00db      	lsls	r3, r3, #3
 8025580:	4413      	add	r3, r2
 8025582:	011b      	lsls	r3, r3, #4
 8025584:	3318      	adds	r3, #24
 8025586:	4a41      	ldr	r2, [pc, #260]	; (802568c <appSerialStatus+0x16c>)
 8025588:	4413      	add	r3, r2
 802558a:	1d9d      	adds	r5, r3, #6
 802558c:	7ffa      	ldrb	r2, [r7, #31]
 802558e:	4613      	mov	r3, r2
 8025590:	00db      	lsls	r3, r3, #3
 8025592:	4413      	add	r3, r2
 8025594:	011b      	lsls	r3, r3, #4
 8025596:	3320      	adds	r3, #32
 8025598:	4a3c      	ldr	r2, [pc, #240]	; (802568c <appSerialStatus+0x16c>)
 802559a:	189e      	adds	r6, r3, r2
	serialSettingList[u8Channel].stopBit, serialSettingList[u8Channel].flowControl, serialSettingList[u8Channel].leadChar,\
 802559c:	7ffa      	ldrb	r2, [r7, #31]
 802559e:	4613      	mov	r3, r2
 80255a0:	00db      	lsls	r3, r3, #3
 80255a2:	4413      	add	r3, r2
 80255a4:	011b      	lsls	r3, r3, #4
 80255a6:	3320      	adds	r3, #32
 80255a8:	4a38      	ldr	r2, [pc, #224]	; (802568c <appSerialStatus+0x16c>)
 80255aa:	4413      	add	r3, r2
 80255ac:	3306      	adds	r3, #6
 80255ae:	61bb      	str	r3, [r7, #24]
 80255b0:	7ffa      	ldrb	r2, [r7, #31]
 80255b2:	4613      	mov	r3, r2
 80255b4:	00db      	lsls	r3, r3, #3
 80255b6:	4413      	add	r3, r2
 80255b8:	011b      	lsls	r3, r3, #4
 80255ba:	3328      	adds	r3, #40	; 0x28
 80255bc:	4a33      	ldr	r2, [pc, #204]	; (802568c <appSerialStatus+0x16c>)
 80255be:	189a      	adds	r2, r3, r2
 80255c0:	617a      	str	r2, [r7, #20]
 80255c2:	7ffa      	ldrb	r2, [r7, #31]
 80255c4:	4613      	mov	r3, r2
 80255c6:	00db      	lsls	r3, r3, #3
 80255c8:	4413      	add	r3, r2
 80255ca:	011b      	lsls	r3, r3, #4
 80255cc:	3328      	adds	r3, #40	; 0x28
 80255ce:	4a2f      	ldr	r2, [pc, #188]	; (802568c <appSerialStatus+0x16c>)
 80255d0:	4413      	add	r3, r2
 80255d2:	1d99      	adds	r1, r3, #6
 80255d4:	6139      	str	r1, [r7, #16]
	serialSettingList[u8Channel].endOfLine, serialSettingList[u8Channel].interval, serialSettingList[u8Channel].getDataCmd,\
 80255d6:	7ffa      	ldrb	r2, [r7, #31]
 80255d8:	4613      	mov	r3, r2
 80255da:	00db      	lsls	r3, r3, #3
 80255dc:	4413      	add	r3, r2
 80255de:	011b      	lsls	r3, r3, #4
 80255e0:	3338      	adds	r3, #56	; 0x38
 80255e2:	4a2a      	ldr	r2, [pc, #168]	; (802568c <appSerialStatus+0x16c>)
 80255e4:	4413      	add	r3, r2
 80255e6:	3302      	adds	r3, #2
 80255e8:	60fb      	str	r3, [r7, #12]
 80255ea:	7ffa      	ldrb	r2, [r7, #31]
 80255ec:	4613      	mov	r3, r2
 80255ee:	00db      	lsls	r3, r3, #3
 80255f0:	4413      	add	r3, r2
 80255f2:	011b      	lsls	r3, r3, #4
 80255f4:	3340      	adds	r3, #64	; 0x40
 80255f6:	4a25      	ldr	r2, [pc, #148]	; (802568c <appSerialStatus+0x16c>)
 80255f8:	4413      	add	r3, r2
 80255fa:	1d9a      	adds	r2, r3, #6
 80255fc:	60ba      	str	r2, [r7, #8]
 80255fe:	7ffa      	ldrb	r2, [r7, #31]
 8025600:	4613      	mov	r3, r2
 8025602:	00db      	lsls	r3, r3, #3
 8025604:	4413      	add	r3, r2
 8025606:	011b      	lsls	r3, r3, #4
 8025608:	3348      	adds	r3, #72	; 0x48
 802560a:	4a20      	ldr	r2, [pc, #128]	; (802568c <appSerialStatus+0x16c>)
 802560c:	4413      	add	r3, r2
 802560e:	1d19      	adds	r1, r3, #4
 8025610:	6079      	str	r1, [r7, #4]
	serialSettingList[u8Channel].unit, serialSettingList[u8Channel].dataSequence);
 8025612:	7ffa      	ldrb	r2, [r7, #31]
 8025614:	4613      	mov	r3, r2
 8025616:	00db      	lsls	r3, r3, #3
 8025618:	4413      	add	r3, r2
 802561a:	011b      	lsls	r3, r3, #4
 802561c:	3358      	adds	r3, #88	; 0x58
 802561e:	4a1b      	ldr	r2, [pc, #108]	; (802568c <appSerialStatus+0x16c>)
 8025620:	1899      	adds	r1, r3, r2
 8025622:	7ffa      	ldrb	r2, [r7, #31]
 8025624:	4613      	mov	r3, r2
 8025626:	00db      	lsls	r3, r3, #3
 8025628:	4413      	add	r3, r2
 802562a:	011b      	lsls	r3, r3, #4
 802562c:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8025630:	4b16      	ldr	r3, [pc, #88]	; (802568c <appSerialStatus+0x16c>)
 8025632:	4413      	add	r3, r2
 8025634:	3306      	adds	r3, #6
	u8Lenght = sprintf((char*)pMessage, "%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;%s!",\
 8025636:	930b      	str	r3, [sp, #44]	; 0x2c
 8025638:	910a      	str	r1, [sp, #40]	; 0x28
 802563a:	6879      	ldr	r1, [r7, #4]
 802563c:	9109      	str	r1, [sp, #36]	; 0x24
 802563e:	68ba      	ldr	r2, [r7, #8]
 8025640:	9208      	str	r2, [sp, #32]
 8025642:	68fb      	ldr	r3, [r7, #12]
 8025644:	9307      	str	r3, [sp, #28]
 8025646:	6939      	ldr	r1, [r7, #16]
 8025648:	9106      	str	r1, [sp, #24]
 802564a:	697a      	ldr	r2, [r7, #20]
 802564c:	9205      	str	r2, [sp, #20]
 802564e:	69bb      	ldr	r3, [r7, #24]
 8025650:	9304      	str	r3, [sp, #16]
 8025652:	9603      	str	r6, [sp, #12]
 8025654:	9502      	str	r5, [sp, #8]
 8025656:	9401      	str	r4, [sp, #4]
 8025658:	9000      	str	r0, [sp, #0]
 802565a:	4673      	mov	r3, lr
 802565c:	4662      	mov	r2, ip
 802565e:	490c      	ldr	r1, [pc, #48]	; (8025690 <appSerialStatus+0x170>)
 8025660:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8025662:	f001 fd7f 	bl	8027164 <siprintf>
 8025666:	4603      	mov	r3, r0
 8025668:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	HAL_UART_Transmit(&huart1, pMessage, u8Lenght, 10);
 802566c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8025670:	b29a      	uxth	r2, r3
 8025672:	230a      	movs	r3, #10
 8025674:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8025676:	4807      	ldr	r0, [pc, #28]	; (8025694 <appSerialStatus+0x174>)
 8025678:	f7e2 fd32 	bl	80080e0 <HAL_UART_Transmit>
	free(pMessage);
 802567c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802567e:	f000 fd8d 	bl	802619c <free>
}
 8025682:	bf00      	nop
 8025684:	372c      	adds	r7, #44	; 0x2c
 8025686:	46bd      	mov	sp, r7
 8025688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802568a:	bf00      	nop
 802568c:	24008dbc 	.word	0x24008dbc
 8025690:	0802e978 	.word	0x0802e978
 8025694:	24008780 	.word	0x24008780

08025698 <appVirtualStatus>:

static void appVirtualStatus(uint8_t u8Channel)
{
 8025698:	b5f0      	push	{r4, r5, r6, r7, lr}
 802569a:	b093      	sub	sp, #76	; 0x4c
 802569c:	af0a      	add	r7, sp, #40	; 0x28
 802569e:	4603      	mov	r3, r0
 80256a0:	75fb      	strb	r3, [r7, #23]
	uint8_t *pMessage = malloc(COMMAND_BUF_SIZE);
 80256a2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80256a6:	f000 fd71 	bl	802618c <malloc>
 80256aa:	4603      	mov	r3, r0
 80256ac:	61fb      	str	r3, [r7, #28]
	uint8_t u8Lenght;
	u8Lenght = sprintf((char*)pMessage, "%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;%s!", virtualSensorList[u8Channel].channel,\
 80256ae:	7dfa      	ldrb	r2, [r7, #23]
 80256b0:	4613      	mov	r3, r2
 80256b2:	005b      	lsls	r3, r3, #1
 80256b4:	4413      	add	r3, r2
 80256b6:	019b      	lsls	r3, r3, #6
 80256b8:	4413      	add	r3, r2
 80256ba:	4a4c      	ldr	r2, [pc, #304]	; (80257ec <appVirtualStatus+0x154>)
 80256bc:	eb03 0c02 	add.w	ip, r3, r2
		virtualSensorList[u8Channel].name, virtualSensorList[u8Channel].status, virtualSensorList[u8Channel].vsType,\
 80256c0:	7dfa      	ldrb	r2, [r7, #23]
 80256c2:	4613      	mov	r3, r2
 80256c4:	005b      	lsls	r3, r3, #1
 80256c6:	4413      	add	r3, r2
 80256c8:	019b      	lsls	r3, r3, #6
 80256ca:	4413      	add	r3, r2
 80256cc:	4a47      	ldr	r2, [pc, #284]	; (80257ec <appVirtualStatus+0x154>)
 80256ce:	4413      	add	r3, r2
 80256d0:	f103 0e06 	add.w	lr, r3, #6
 80256d4:	7dfa      	ldrb	r2, [r7, #23]
 80256d6:	4613      	mov	r3, r2
 80256d8:	005b      	lsls	r3, r3, #1
 80256da:	4413      	add	r3, r2
 80256dc:	019b      	lsls	r3, r3, #6
 80256de:	4413      	add	r3, r2
 80256e0:	3308      	adds	r3, #8
 80256e2:	4a42      	ldr	r2, [pc, #264]	; (80257ec <appVirtualStatus+0x154>)
 80256e4:	4413      	add	r3, r2
 80256e6:	1c99      	adds	r1, r3, #2
 80256e8:	7dfa      	ldrb	r2, [r7, #23]
 80256ea:	4613      	mov	r3, r2
 80256ec:	005b      	lsls	r3, r3, #1
 80256ee:	4413      	add	r3, r2
 80256f0:	019b      	lsls	r3, r3, #6
 80256f2:	4413      	add	r3, r2
 80256f4:	3310      	adds	r3, #16
 80256f6:	4a3d      	ldr	r2, [pc, #244]	; (80257ec <appVirtualStatus+0x154>)
 80256f8:	4413      	add	r3, r2
 80256fa:	1d18      	adds	r0, r3, #4
		virtualSensorList[u8Channel].inputSensor1, virtualSensorList[u8Channel].index1, virtualSensorList[u8Channel].inputSensor2,\
 80256fc:	7dfa      	ldrb	r2, [r7, #23]
 80256fe:	4613      	mov	r3, r2
 8025700:	005b      	lsls	r3, r3, #1
 8025702:	4413      	add	r3, r2
 8025704:	019b      	lsls	r3, r3, #6
 8025706:	4413      	add	r3, r2
 8025708:	3310      	adds	r3, #16
 802570a:	4a38      	ldr	r2, [pc, #224]	; (80257ec <appVirtualStatus+0x154>)
 802570c:	4413      	add	r3, r2
 802570e:	1d9c      	adds	r4, r3, #6
 8025710:	7dfa      	ldrb	r2, [r7, #23]
 8025712:	4613      	mov	r3, r2
 8025714:	005b      	lsls	r3, r3, #1
 8025716:	4413      	add	r3, r2
 8025718:	019b      	lsls	r3, r3, #6
 802571a:	4413      	add	r3, r2
 802571c:	3318      	adds	r3, #24
 802571e:	4a33      	ldr	r2, [pc, #204]	; (80257ec <appVirtualStatus+0x154>)
 8025720:	4413      	add	r3, r2
 8025722:	1d1d      	adds	r5, r3, #4
 8025724:	7dfa      	ldrb	r2, [r7, #23]
 8025726:	4613      	mov	r3, r2
 8025728:	005b      	lsls	r3, r3, #1
 802572a:	4413      	add	r3, r2
 802572c:	019b      	lsls	r3, r3, #6
 802572e:	4413      	add	r3, r2
 8025730:	3318      	adds	r3, #24
 8025732:	4a2e      	ldr	r2, [pc, #184]	; (80257ec <appVirtualStatus+0x154>)
 8025734:	4413      	add	r3, r2
 8025736:	1d9e      	adds	r6, r3, #6
		virtualSensorList[u8Channel].index2, virtualSensorList[u8Channel].startTime, virtualSensorList[u8Channel].interval,\
 8025738:	7dfa      	ldrb	r2, [r7, #23]
 802573a:	4613      	mov	r3, r2
 802573c:	005b      	lsls	r3, r3, #1
 802573e:	4413      	add	r3, r2
 8025740:	019b      	lsls	r3, r3, #6
 8025742:	4413      	add	r3, r2
 8025744:	3320      	adds	r3, #32
 8025746:	4a29      	ldr	r2, [pc, #164]	; (80257ec <appVirtualStatus+0x154>)
 8025748:	4413      	add	r3, r2
 802574a:	3304      	adds	r3, #4
 802574c:	613b      	str	r3, [r7, #16]
 802574e:	7dfa      	ldrb	r2, [r7, #23]
 8025750:	4613      	mov	r3, r2
 8025752:	005b      	lsls	r3, r3, #1
 8025754:	4413      	add	r3, r2
 8025756:	019b      	lsls	r3, r3, #6
 8025758:	4413      	add	r3, r2
 802575a:	3320      	adds	r3, #32
 802575c:	4a23      	ldr	r2, [pc, #140]	; (80257ec <appVirtualStatus+0x154>)
 802575e:	4413      	add	r3, r2
 8025760:	1d9a      	adds	r2, r3, #6
 8025762:	60fa      	str	r2, [r7, #12]
 8025764:	7dfa      	ldrb	r2, [r7, #23]
 8025766:	4613      	mov	r3, r2
 8025768:	005b      	lsls	r3, r3, #1
 802576a:	4413      	add	r3, r2
 802576c:	019b      	lsls	r3, r3, #6
 802576e:	4413      	add	r3, r2
 8025770:	3330      	adds	r3, #48	; 0x30
 8025772:	4a1e      	ldr	r2, [pc, #120]	; (80257ec <appVirtualStatus+0x154>)
 8025774:	4413      	add	r3, r2
 8025776:	3305      	adds	r3, #5
 8025778:	60bb      	str	r3, [r7, #8]
		virtualSensorList[u8Channel].sensorHeight, virtualSensorList[u8Channel].dataSequence);
 802577a:	7dfa      	ldrb	r2, [r7, #23]
 802577c:	4613      	mov	r3, r2
 802577e:	005b      	lsls	r3, r3, #1
 8025780:	4413      	add	r3, r2
 8025782:	019b      	lsls	r3, r3, #6
 8025784:	4413      	add	r3, r2
 8025786:	3338      	adds	r3, #56	; 0x38
 8025788:	4a18      	ldr	r2, [pc, #96]	; (80257ec <appVirtualStatus+0x154>)
 802578a:	4413      	add	r3, r2
 802578c:	1cda      	adds	r2, r3, #3
 802578e:	607a      	str	r2, [r7, #4]
 8025790:	7dfa      	ldrb	r2, [r7, #23]
 8025792:	4613      	mov	r3, r2
 8025794:	005b      	lsls	r3, r3, #1
 8025796:	4413      	add	r3, r2
 8025798:	019b      	lsls	r3, r3, #6
 802579a:	4413      	add	r3, r2
 802579c:	3340      	adds	r3, #64	; 0x40
 802579e:	4a13      	ldr	r2, [pc, #76]	; (80257ec <appVirtualStatus+0x154>)
 80257a0:	4413      	add	r3, r2
 80257a2:	3301      	adds	r3, #1
	u8Lenght = sprintf((char*)pMessage, "%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;%s!", virtualSensorList[u8Channel].channel,\
 80257a4:	9309      	str	r3, [sp, #36]	; 0x24
 80257a6:	687a      	ldr	r2, [r7, #4]
 80257a8:	9208      	str	r2, [sp, #32]
 80257aa:	68bb      	ldr	r3, [r7, #8]
 80257ac:	9307      	str	r3, [sp, #28]
 80257ae:	68fa      	ldr	r2, [r7, #12]
 80257b0:	9206      	str	r2, [sp, #24]
 80257b2:	693b      	ldr	r3, [r7, #16]
 80257b4:	9305      	str	r3, [sp, #20]
 80257b6:	9604      	str	r6, [sp, #16]
 80257b8:	9503      	str	r5, [sp, #12]
 80257ba:	9402      	str	r4, [sp, #8]
 80257bc:	9001      	str	r0, [sp, #4]
 80257be:	9100      	str	r1, [sp, #0]
 80257c0:	4673      	mov	r3, lr
 80257c2:	4662      	mov	r2, ip
 80257c4:	490a      	ldr	r1, [pc, #40]	; (80257f0 <appVirtualStatus+0x158>)
 80257c6:	69f8      	ldr	r0, [r7, #28]
 80257c8:	f001 fccc 	bl	8027164 <siprintf>
 80257cc:	4603      	mov	r3, r0
 80257ce:	76fb      	strb	r3, [r7, #27]
	HAL_UART_Transmit(&huart1, pMessage, u8Lenght, 10);
 80257d0:	7efb      	ldrb	r3, [r7, #27]
 80257d2:	b29a      	uxth	r2, r3
 80257d4:	230a      	movs	r3, #10
 80257d6:	69f9      	ldr	r1, [r7, #28]
 80257d8:	4806      	ldr	r0, [pc, #24]	; (80257f4 <appVirtualStatus+0x15c>)
 80257da:	f7e2 fc81 	bl	80080e0 <HAL_UART_Transmit>
	free(pMessage);
 80257de:	69f8      	ldr	r0, [r7, #28]
 80257e0:	f000 fcdc 	bl	802619c <free>
}
 80257e4:	bf00      	nop
 80257e6:	3724      	adds	r7, #36	; 0x24
 80257e8:	46bd      	mov	sp, r7
 80257ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80257ec:	240091bc 	.word	0x240091bc
 80257f0:	0802e9a4 	.word	0x0802e9a4
 80257f4:	24008780 	.word	0x24008780

080257f8 <appTransmissionStatus>:

static void appTransmissionStatus(void)
{
 80257f8:	b580      	push	{r7, lr}
 80257fa:	b08a      	sub	sp, #40	; 0x28
 80257fc:	af08      	add	r7, sp, #32
	uint8_t *pMessage = malloc(COMMAND_BUF_SIZE);
 80257fe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8025802:	f000 fcc3 	bl	802618c <malloc>
 8025806:	4603      	mov	r3, r0
 8025808:	607b      	str	r3, [r7, #4]
	uint8_t u8Lenght;
	u8Lenght = sprintf((char*)pMessage, "%s;%s;%s;%s;%s;%s;%s;%s;%s!", &transmission.startTime[0], &transmission.interval[0], \
 802580a:	4b12      	ldr	r3, [pc, #72]	; (8025854 <appTransmissionStatus+0x5c>)
 802580c:	9306      	str	r3, [sp, #24]
 802580e:	4b12      	ldr	r3, [pc, #72]	; (8025858 <appTransmissionStatus+0x60>)
 8025810:	9305      	str	r3, [sp, #20]
 8025812:	4b12      	ldr	r3, [pc, #72]	; (802585c <appTransmissionStatus+0x64>)
 8025814:	9304      	str	r3, [sp, #16]
 8025816:	4b12      	ldr	r3, [pc, #72]	; (8025860 <appTransmissionStatus+0x68>)
 8025818:	9303      	str	r3, [sp, #12]
 802581a:	4b12      	ldr	r3, [pc, #72]	; (8025864 <appTransmissionStatus+0x6c>)
 802581c:	9302      	str	r3, [sp, #8]
 802581e:	4b12      	ldr	r3, [pc, #72]	; (8025868 <appTransmissionStatus+0x70>)
 8025820:	9301      	str	r3, [sp, #4]
 8025822:	4b12      	ldr	r3, [pc, #72]	; (802586c <appTransmissionStatus+0x74>)
 8025824:	9300      	str	r3, [sp, #0]
 8025826:	4b12      	ldr	r3, [pc, #72]	; (8025870 <appTransmissionStatus+0x78>)
 8025828:	4a12      	ldr	r2, [pc, #72]	; (8025874 <appTransmissionStatus+0x7c>)
 802582a:	4913      	ldr	r1, [pc, #76]	; (8025878 <appTransmissionStatus+0x80>)
 802582c:	6878      	ldr	r0, [r7, #4]
 802582e:	f001 fc99 	bl	8027164 <siprintf>
 8025832:	4603      	mov	r3, r0
 8025834:	70fb      	strb	r3, [r7, #3]
	                          &transmission.URL[0], &transmission.port[0], &transmission.useName[0], &transmission.passWord[0], \
							  &transmission.fileName[0], &transmission.headerInterval[0], &transmission.tcp_ip[0]);
	HAL_UART_Transmit(&huart1, pMessage, u8Lenght, 10);
 8025836:	78fb      	ldrb	r3, [r7, #3]
 8025838:	b29a      	uxth	r2, r3
 802583a:	230a      	movs	r3, #10
 802583c:	6879      	ldr	r1, [r7, #4]
 802583e:	480f      	ldr	r0, [pc, #60]	; (802587c <appTransmissionStatus+0x84>)
 8025840:	f7e2 fc4e 	bl	80080e0 <HAL_UART_Transmit>
	free(pMessage);
 8025844:	6878      	ldr	r0, [r7, #4]
 8025846:	f000 fca9 	bl	802619c <free>
}
 802584a:	bf00      	nop
 802584c:	3708      	adds	r7, #8
 802584e:	46bd      	mov	sp, r7
 8025850:	bd80      	pop	{r7, pc}
 8025852:	bf00      	nop
 8025854:	24008957 	.word	0x24008957
 8025858:	24008951 	.word	0x24008951
 802585c:	2400893d 	.word	0x2400893d
 8025860:	2400891f 	.word	0x2400891f
 8025864:	24008901 	.word	0x24008901
 8025868:	240088fb 	.word	0x240088fb
 802586c:	240088dd 	.word	0x240088dd
 8025870:	240088d7 	.word	0x240088d7
 8025874:	240088c8 	.word	0x240088c8
 8025878:	0802e9cc 	.word	0x0802e9cc
 802587c:	24008780 	.word	0x24008780

08025880 <appCellularStatus>:

static void appCellularStatus(void)
{
 8025880:	b580      	push	{r7, lr}
 8025882:	b088      	sub	sp, #32
 8025884:	af06      	add	r7, sp, #24
	uint8_t *pMessage = malloc(COMMAND_BUF_SIZE);
 8025886:	f44f 7080 	mov.w	r0, #256	; 0x100
 802588a:	f000 fc7f 	bl	802618c <malloc>
 802588e:	4603      	mov	r3, r0
 8025890:	607b      	str	r3, [r7, #4]
	uint8_t u8Lenght;
	u8Lenght = sprintf((char*)pMessage, "%s;%s;%s;%s;%s;%s;%s;%s!", &cellular.cellularMode[0], &cellular.modemStatus[0], \
 8025892:	4b11      	ldr	r3, [pc, #68]	; (80258d8 <appCellularStatus+0x58>)
 8025894:	9305      	str	r3, [sp, #20]
 8025896:	4b11      	ldr	r3, [pc, #68]	; (80258dc <appCellularStatus+0x5c>)
 8025898:	9304      	str	r3, [sp, #16]
 802589a:	4b11      	ldr	r3, [pc, #68]	; (80258e0 <appCellularStatus+0x60>)
 802589c:	9303      	str	r3, [sp, #12]
 802589e:	4b11      	ldr	r3, [pc, #68]	; (80258e4 <appCellularStatus+0x64>)
 80258a0:	9302      	str	r3, [sp, #8]
 80258a2:	4b11      	ldr	r3, [pc, #68]	; (80258e8 <appCellularStatus+0x68>)
 80258a4:	9301      	str	r3, [sp, #4]
 80258a6:	4b11      	ldr	r3, [pc, #68]	; (80258ec <appCellularStatus+0x6c>)
 80258a8:	9300      	str	r3, [sp, #0]
 80258aa:	4b11      	ldr	r3, [pc, #68]	; (80258f0 <appCellularStatus+0x70>)
 80258ac:	4a11      	ldr	r2, [pc, #68]	; (80258f4 <appCellularStatus+0x74>)
 80258ae:	4912      	ldr	r1, [pc, #72]	; (80258f8 <appCellularStatus+0x78>)
 80258b0:	6878      	ldr	r0, [r7, #4]
 80258b2:	f001 fc57 	bl	8027164 <siprintf>
 80258b6:	4603      	mov	r3, r0
 80258b8:	70fb      	strb	r3, [r7, #3]
	                          &cellular.operator[0], &cellular.modemAccess[0], &cellular.Band[0], &cellular.phoneNumber[0], \
							  &cellular.ipV4[0], &cellular.signalLevel[0]);
	HAL_UART_Transmit(&huart1, pMessage, u8Lenght, 10);
 80258ba:	78fb      	ldrb	r3, [r7, #3]
 80258bc:	b29a      	uxth	r2, r3
 80258be:	230a      	movs	r3, #10
 80258c0:	6879      	ldr	r1, [r7, #4]
 80258c2:	480e      	ldr	r0, [pc, #56]	; (80258fc <appCellularStatus+0x7c>)
 80258c4:	f7e2 fc0c 	bl	80080e0 <HAL_UART_Transmit>
	free(pMessage);
 80258c8:	6878      	ldr	r0, [r7, #4]
 80258ca:	f000 fc67 	bl	802619c <free>
}
 80258ce:	bf00      	nop
 80258d0:	3708      	adds	r7, #8
 80258d2:	46bd      	mov	sp, r7
 80258d4:	bd80      	pop	{r7, pc}
 80258d6:	bf00      	nop
 80258d8:	24009d68 	.word	0x24009d68
 80258dc:	24009d54 	.word	0x24009d54
 80258e0:	24009d48 	.word	0x24009d48
 80258e4:	24009d34 	.word	0x24009d34
 80258e8:	24009d2a 	.word	0x24009d2a
 80258ec:	24009d20 	.word	0x24009d20
 80258f0:	24009d16 	.word	0x24009d16
 80258f4:	24009d0c 	.word	0x24009d0c
 80258f8:	0802e9e8 	.word	0x0802e9e8
 80258fc:	24008780 	.word	0x24008780

08025900 <appSortStatus>:

static void appSortStatus(void)
{
 8025900:	b580      	push	{r7, lr}
 8025902:	b082      	sub	sp, #8
 8025904:	af00      	add	r7, sp, #0
	uint8_t u8Length;
	u8Length = sprintf(u8SorttingChannel, "%s!", u8SorttingChannel);
 8025906:	4a09      	ldr	r2, [pc, #36]	; (802592c <appSortStatus+0x2c>)
 8025908:	4909      	ldr	r1, [pc, #36]	; (8025930 <appSortStatus+0x30>)
 802590a:	4808      	ldr	r0, [pc, #32]	; (802592c <appSortStatus+0x2c>)
 802590c:	f001 fc2a 	bl	8027164 <siprintf>
 8025910:	4603      	mov	r3, r0
 8025912:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t*)u8SorttingChannel, u8Length, 10);
 8025914:	79fb      	ldrb	r3, [r7, #7]
 8025916:	b29a      	uxth	r2, r3
 8025918:	230a      	movs	r3, #10
 802591a:	4904      	ldr	r1, [pc, #16]	; (802592c <appSortStatus+0x2c>)
 802591c:	4805      	ldr	r0, [pc, #20]	; (8025934 <appSortStatus+0x34>)
 802591e:	f7e2 fbdf 	bl	80080e0 <HAL_UART_Transmit>
}
 8025922:	bf00      	nop
 8025924:	3708      	adds	r7, #8
 8025926:	46bd      	mov	sp, r7
 8025928:	bd80      	pop	{r7, pc}
 802592a:	bf00      	nop
 802592c:	24009188 	.word	0x24009188
 8025930:	0802ea04 	.word	0x0802ea04
 8025934:	24008780 	.word	0x24008780

08025938 <appSensorStatus>:

static void appSensorStatus(void)
{
 8025938:	b580      	push	{r7, lr}
 802593a:	b0a2      	sub	sp, #136	; 0x88
 802593c:	af00      	add	r7, sp, #0
    char cChannel[][3] = {"01", "02", "03", "04", "05", "06", "07", "08",\
 802593e:	4a3f      	ldr	r2, [pc, #252]	; (8025a3c <appSensorStatus+0x104>)
 8025940:	f107 0308 	add.w	r3, r7, #8
 8025944:	4611      	mov	r1, r2
 8025946:	2275      	movs	r2, #117	; 0x75
 8025948:	4618      	mov	r0, r3
 802594a:	f000 fc3d 	bl	80261c8 <memcpy>
                         "17", "18", "19", "20", "21", "22", "23", "24",\
                         "25", "26", "27", "28", "29", "30", "31", "32",\
                         "33", "34", "35", "36", "37", "38", "39"};
    uint8_t u8Index;
	char *token;
	char delimiter[2] = ";";
 802594e:	233b      	movs	r3, #59	; 0x3b
 8025950:	80bb      	strh	r3, [r7, #4]

	token = strtok(NULL, delimiter);
 8025952:	1d3b      	adds	r3, r7, #4
 8025954:	4619      	mov	r1, r3
 8025956:	2000      	movs	r0, #0
 8025958:	f001 fec0 	bl	80276dc <strtok>
 802595c:	4603      	mov	r3, r0
 802595e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	/* Find channel corresponding */
    for (u8Index = 0; u8Index < 39; u8Index++)
 8025962:	2300      	movs	r3, #0
 8025964:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8025968:	e05e      	b.n	8025a28 <appSensorStatus+0xf0>
    {
		if (0 == strcmp(token, cChannel[u8Index])) {
 802596a:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 802596e:	f107 0108 	add.w	r1, r7, #8
 8025972:	4613      	mov	r3, r2
 8025974:	005b      	lsls	r3, r3, #1
 8025976:	4413      	add	r3, r2
 8025978:	440b      	add	r3, r1
 802597a:	4619      	mov	r1, r3
 802597c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8025980:	f7da fcae 	bl	80002e0 <strcmp>
 8025984:	4603      	mov	r3, r0
 8025986:	2b00      	cmp	r3, #0
 8025988:	d149      	bne.n	8025a1e <appSensorStatus+0xe6>
			if ((0 <= u8Index) && (u8Index <= 11)) {
 802598a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 802598e:	2b0b      	cmp	r3, #11
 8025990:	d805      	bhi.n	802599e <appSensorStatus+0x66>
				appAnalogStatus(u8Index);
 8025992:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8025996:	4618      	mov	r0, r3
 8025998:	f7ff fcaa 	bl	80252f0 <appAnalogStatus>
				break;
 802599c:	e049      	b.n	8025a32 <appSensorStatus+0xfa>
			} else if ((12 <= u8Index) && (u8Index <= 17)) {
 802599e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80259a2:	2b0b      	cmp	r3, #11
 80259a4:	d913      	bls.n	80259ce <appSensorStatus+0x96>
 80259a6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80259aa:	2b11      	cmp	r3, #17
 80259ac:	d80f      	bhi.n	80259ce <appSensorStatus+0x96>
				appDigitalStatus(u8Index%12);
 80259ae:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 80259b2:	4b23      	ldr	r3, [pc, #140]	; (8025a40 <appSensorStatus+0x108>)
 80259b4:	fba3 1302 	umull	r1, r3, r3, r2
 80259b8:	08d9      	lsrs	r1, r3, #3
 80259ba:	460b      	mov	r3, r1
 80259bc:	005b      	lsls	r3, r3, #1
 80259be:	440b      	add	r3, r1
 80259c0:	009b      	lsls	r3, r3, #2
 80259c2:	1ad3      	subs	r3, r2, r3
 80259c4:	b2db      	uxtb	r3, r3
 80259c6:	4618      	mov	r0, r3
 80259c8:	f7ff fd1e 	bl	8025408 <appDigitalStatus>
				break;
 80259cc:	e031      	b.n	8025a32 <appSensorStatus+0xfa>
			} else if ((18 <= u8Index) && (u8Index <= 23)) {
 80259ce:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80259d2:	2b11      	cmp	r3, #17
 80259d4:	d913      	bls.n	80259fe <appSensorStatus+0xc6>
 80259d6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80259da:	2b17      	cmp	r3, #23
 80259dc:	d80f      	bhi.n	80259fe <appSensorStatus+0xc6>
				appSerialStatus(u8Index%18);
 80259de:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 80259e2:	4b18      	ldr	r3, [pc, #96]	; (8025a44 <appSensorStatus+0x10c>)
 80259e4:	fba3 1302 	umull	r1, r3, r3, r2
 80259e8:	0899      	lsrs	r1, r3, #2
 80259ea:	460b      	mov	r3, r1
 80259ec:	00db      	lsls	r3, r3, #3
 80259ee:	440b      	add	r3, r1
 80259f0:	005b      	lsls	r3, r3, #1
 80259f2:	1ad3      	subs	r3, r2, r3
 80259f4:	b2db      	uxtb	r3, r3
 80259f6:	4618      	mov	r0, r3
 80259f8:	f7ff fd92 	bl	8025520 <appSerialStatus>
				break;
 80259fc:	e019      	b.n	8025a32 <appSensorStatus+0xfa>
			} else {
				appVirtualStatus(u8Index%24);
 80259fe:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8025a02:	4b0f      	ldr	r3, [pc, #60]	; (8025a40 <appSensorStatus+0x108>)
 8025a04:	fba3 1302 	umull	r1, r3, r3, r2
 8025a08:	0919      	lsrs	r1, r3, #4
 8025a0a:	460b      	mov	r3, r1
 8025a0c:	005b      	lsls	r3, r3, #1
 8025a0e:	440b      	add	r3, r1
 8025a10:	00db      	lsls	r3, r3, #3
 8025a12:	1ad3      	subs	r3, r2, r3
 8025a14:	b2db      	uxtb	r3, r3
 8025a16:	4618      	mov	r0, r3
 8025a18:	f7ff fe3e 	bl	8025698 <appVirtualStatus>
				break;
 8025a1c:	e009      	b.n	8025a32 <appSensorStatus+0xfa>
    for (u8Index = 0; u8Index < 39; u8Index++)
 8025a1e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8025a22:	3301      	adds	r3, #1
 8025a24:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8025a28:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8025a2c:	2b26      	cmp	r3, #38	; 0x26
 8025a2e:	d99c      	bls.n	802596a <appSensorStatus+0x32>
			}
		}
    }
}
 8025a30:	bf00      	nop
 8025a32:	bf00      	nop
 8025a34:	3788      	adds	r7, #136	; 0x88
 8025a36:	46bd      	mov	sp, r7
 8025a38:	bd80      	pop	{r7, pc}
 8025a3a:	bf00      	nop
 8025a3c:	0802ea08 	.word	0x0802ea08
 8025a40:	aaaaaaab 	.word	0xaaaaaaab
 8025a44:	38e38e39 	.word	0x38e38e39

08025a48 <SerialPortCom_Task>:

uint8_t UART1_RxBuffer;
uint8_t UART8_RxBuffer;

void SerialPortCom_Task(void const * argument)
{
 8025a48:	b590      	push	{r4, r7, lr}
 8025a4a:	b08b      	sub	sp, #44	; 0x2c
 8025a4c:	af00      	add	r7, sp, #0
 8025a4e:	6078      	str	r0, [r7, #4]
	osEvent event;

	osMessageQDef(myQueue01, 16, uint16_t);
 8025a50:	4b2f      	ldr	r3, [pc, #188]	; (8025b10 <SerialPortCom_Task+0xc8>)
 8025a52:	f107 040c 	add.w	r4, r7, #12
 8025a56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8025a58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	SerialQueueHandle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8025a5c:	f107 030c 	add.w	r3, r7, #12
 8025a60:	2100      	movs	r1, #0
 8025a62:	4618      	mov	r0, r3
 8025a64:	f7e5 fd05 	bl	800b472 <osMessageCreate>
 8025a68:	4603      	mov	r3, r0
 8025a6a:	4a2a      	ldr	r2, [pc, #168]	; (8025b14 <SerialPortCom_Task+0xcc>)
 8025a6c:	6013      	str	r3, [r2, #0]

	appStartRountine();
 8025a6e:	f7fe f82b 	bl	8023ac8 <appStartRountine>

	HAL_UART_Receive_IT(&huart1, (uint8_t*)&UART1_RxBuffer, 1);
 8025a72:	2201      	movs	r2, #1
 8025a74:	4928      	ldr	r1, [pc, #160]	; (8025b18 <SerialPortCom_Task+0xd0>)
 8025a76:	4829      	ldr	r0, [pc, #164]	; (8025b1c <SerialPortCom_Task+0xd4>)
 8025a78:	f7e2 fbc8 	bl	800820c <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart8, (uint8_t*)&UART8_RxBuffer, 1);
 8025a7c:	2201      	movs	r2, #1
 8025a7e:	4928      	ldr	r1, [pc, #160]	; (8025b20 <SerialPortCom_Task+0xd8>)
 8025a80:	4828      	ldr	r0, [pc, #160]	; (8025b24 <SerialPortCom_Task+0xdc>)
 8025a82:	f7e2 fbc3 	bl	800820c <HAL_UART_Receive_IT>

	while(1)
	{
		event = osMessageGet(SerialQueueHandle, 10);
 8025a86:	4b23      	ldr	r3, [pc, #140]	; (8025b14 <SerialPortCom_Task+0xcc>)
 8025a88:	6819      	ldr	r1, [r3, #0]
 8025a8a:	f107 031c 	add.w	r3, r7, #28
 8025a8e:	220a      	movs	r2, #10
 8025a90:	4618      	mov	r0, r3
 8025a92:	f7e5 fd57 	bl	800b544 <osMessageGet>
		if( event.status == osEventMessage )
 8025a96:	69fb      	ldr	r3, [r7, #28]
 8025a98:	2b10      	cmp	r3, #16
 8025a9a:	d135      	bne.n	8025b08 <SerialPortCom_Task+0xc0>
		{
			switch(event.value.v)
 8025a9c:	6a3b      	ldr	r3, [r7, #32]
 8025a9e:	2b02      	cmp	r3, #2
 8025aa0:	d015      	beq.n	8025ace <SerialPortCom_Task+0x86>
 8025aa2:	2b02      	cmp	r3, #2
 8025aa4:	d819      	bhi.n	8025ada <SerialPortCom_Task+0x92>
 8025aa6:	2b00      	cmp	r3, #0
 8025aa8:	d002      	beq.n	8025ab0 <SerialPortCom_Task+0x68>
 8025aaa:	2b01      	cmp	r3, #1
 8025aac:	d009      	beq.n	8025ac2 <SerialPortCom_Task+0x7a>
					break;
				case APP_E_SERIAL_CHANNEL_2:
					HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_15);
					break;
				default:
					break;
 8025aae:	e014      	b.n	8025ada <SerialPortCom_Task+0x92>
					HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_12);
 8025ab0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8025ab4:	481c      	ldr	r0, [pc, #112]	; (8025b28 <SerialPortCom_Task+0xe0>)
 8025ab6:	f7de fc48 	bl	800434a <HAL_GPIO_TogglePin>
					appProcessCommand(&sCommand[0].u8Buffer[0]);
 8025aba:	481c      	ldr	r0, [pc, #112]	; (8025b2c <SerialPortCom_Task+0xe4>)
 8025abc:	f7fe fc52 	bl	8024364 <appProcessCommand>
					break;
 8025ac0:	e00c      	b.n	8025adc <SerialPortCom_Task+0x94>
					HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_15);
 8025ac2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8025ac6:	4818      	ldr	r0, [pc, #96]	; (8025b28 <SerialPortCom_Task+0xe0>)
 8025ac8:	f7de fc3f 	bl	800434a <HAL_GPIO_TogglePin>
					break;
 8025acc:	e006      	b.n	8025adc <SerialPortCom_Task+0x94>
					HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_15);
 8025ace:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8025ad2:	4815      	ldr	r0, [pc, #84]	; (8025b28 <SerialPortCom_Task+0xe0>)
 8025ad4:	f7de fc39 	bl	800434a <HAL_GPIO_TogglePin>
					break;
 8025ad8:	e000      	b.n	8025adc <SerialPortCom_Task+0x94>
					break;
 8025ada:	bf00      	nop
			}
			memset(sCommand[event.value.v].u8Buffer, 0, COMMAND_BUF_SIZE);
 8025adc:	6a3a      	ldr	r2, [r7, #32]
 8025ade:	4613      	mov	r3, r2
 8025ae0:	021b      	lsls	r3, r3, #8
 8025ae2:	4413      	add	r3, r2
 8025ae4:	4a11      	ldr	r2, [pc, #68]	; (8025b2c <SerialPortCom_Task+0xe4>)
 8025ae6:	4413      	add	r3, r2
 8025ae8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8025aec:	2100      	movs	r1, #0
 8025aee:	4618      	mov	r0, r3
 8025af0:	f000 fb92 	bl	8026218 <memset>
			sCommand[event.value.v].u8Pos = 0;
 8025af4:	6a3a      	ldr	r2, [r7, #32]
 8025af6:	490d      	ldr	r1, [pc, #52]	; (8025b2c <SerialPortCom_Task+0xe4>)
 8025af8:	4613      	mov	r3, r2
 8025afa:	021b      	lsls	r3, r3, #8
 8025afc:	4413      	add	r3, r2
 8025afe:	440b      	add	r3, r1
 8025b00:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8025b04:	2200      	movs	r2, #0
 8025b06:	701a      	strb	r2, [r3, #0]
		}
		osDelay(1);
 8025b08:	2001      	movs	r0, #1
 8025b0a:	f7e5 fb38 	bl	800b17e <osDelay>
		event = osMessageGet(SerialQueueHandle, 10);
 8025b0e:	e7ba      	b.n	8025a86 <SerialPortCom_Task+0x3e>
 8025b10:	0802ea80 	.word	0x0802ea80
 8025b14:	2400a4b4 	.word	0x2400a4b4
 8025b18:	24009da8 	.word	0x24009da8
 8025b1c:	24008780 	.word	0x24008780
 8025b20:	24009da9 	.word	0x24009da9
 8025b24:	24008810 	.word	0x24008810
 8025b28:	58022000 	.word	0x58022000
 8025b2c:	24009dac 	.word	0x24009dac

08025b30 <vProcessRxChar>:
	}
}

void vProcessRxChar(uint8_t u8Char, uint8_t port)
{
 8025b30:	b5b0      	push	{r4, r5, r7, lr}
 8025b32:	b082      	sub	sp, #8
 8025b34:	af00      	add	r7, sp, #0
 8025b36:	4603      	mov	r3, r0
 8025b38:	460a      	mov	r2, r1
 8025b3a:	71fb      	strb	r3, [r7, #7]
 8025b3c:	4613      	mov	r3, r2
 8025b3e:	71bb      	strb	r3, [r7, #6]
    if ((sCommand[port].u8Pos < COMMAND_BUF_SIZE)  && (u8Char != END_DATA_CONF))
 8025b40:	79fb      	ldrb	r3, [r7, #7]
 8025b42:	2b21      	cmp	r3, #33	; 0x21
 8025b44:	d01d      	beq.n	8025b82 <vProcessRxChar+0x52>
    {
        sCommand[port].u8Buffer[sCommand[port].u8Pos++] = u8Char;
 8025b46:	79b9      	ldrb	r1, [r7, #6]
 8025b48:	79ba      	ldrb	r2, [r7, #6]
 8025b4a:	4815      	ldr	r0, [pc, #84]	; (8025ba0 <vProcessRxChar+0x70>)
 8025b4c:	4613      	mov	r3, r2
 8025b4e:	021b      	lsls	r3, r3, #8
 8025b50:	4413      	add	r3, r2
 8025b52:	4403      	add	r3, r0
 8025b54:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8025b58:	7818      	ldrb	r0, [r3, #0]
 8025b5a:	1c43      	adds	r3, r0, #1
 8025b5c:	b2dd      	uxtb	r5, r3
 8025b5e:	4c10      	ldr	r4, [pc, #64]	; (8025ba0 <vProcessRxChar+0x70>)
 8025b60:	4613      	mov	r3, r2
 8025b62:	021b      	lsls	r3, r3, #8
 8025b64:	4413      	add	r3, r2
 8025b66:	4423      	add	r3, r4
 8025b68:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8025b6c:	462a      	mov	r2, r5
 8025b6e:	701a      	strb	r2, [r3, #0]
 8025b70:	4a0b      	ldr	r2, [pc, #44]	; (8025ba0 <vProcessRxChar+0x70>)
 8025b72:	460b      	mov	r3, r1
 8025b74:	021b      	lsls	r3, r3, #8
 8025b76:	440b      	add	r3, r1
 8025b78:	4413      	add	r3, r2
 8025b7a:	4403      	add	r3, r0
 8025b7c:	79fa      	ldrb	r2, [r7, #7]
 8025b7e:	701a      	strb	r2, [r3, #0]
    }
    else if ((sCommand[port].u8Pos >= COMMAND_BUF_SIZE) || (u8Char == END_DATA_CONF))
    {
    	osMessagePut(SerialQueueHandle, port, 0);
    }
}
 8025b80:	e009      	b.n	8025b96 <vProcessRxChar+0x66>
    else if ((sCommand[port].u8Pos >= COMMAND_BUF_SIZE) || (u8Char == END_DATA_CONF))
 8025b82:	79fb      	ldrb	r3, [r7, #7]
 8025b84:	2b21      	cmp	r3, #33	; 0x21
 8025b86:	d106      	bne.n	8025b96 <vProcessRxChar+0x66>
    	osMessagePut(SerialQueueHandle, port, 0);
 8025b88:	4b06      	ldr	r3, [pc, #24]	; (8025ba4 <vProcessRxChar+0x74>)
 8025b8a:	681b      	ldr	r3, [r3, #0]
 8025b8c:	79b9      	ldrb	r1, [r7, #6]
 8025b8e:	2200      	movs	r2, #0
 8025b90:	4618      	mov	r0, r3
 8025b92:	f7e5 fc97 	bl	800b4c4 <osMessagePut>
}
 8025b96:	bf00      	nop
 8025b98:	3708      	adds	r7, #8
 8025b9a:	46bd      	mov	sp, r7
 8025b9c:	bdb0      	pop	{r4, r5, r7, pc}
 8025b9e:	bf00      	nop
 8025ba0:	24009dac 	.word	0x24009dac
 8025ba4:	2400a4b4 	.word	0x2400a4b4

08025ba8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8025ba8:	b580      	push	{r7, lr}
 8025baa:	b082      	sub	sp, #8
 8025bac:	af00      	add	r7, sp, #0
 8025bae:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance)
 8025bb0:	687b      	ldr	r3, [r7, #4]
 8025bb2:	681a      	ldr	r2, [r3, #0]
 8025bb4:	4b11      	ldr	r3, [pc, #68]	; (8025bfc <HAL_UART_RxCpltCallback+0x54>)
 8025bb6:	681b      	ldr	r3, [r3, #0]
 8025bb8:	429a      	cmp	r2, r3
 8025bba:	d10a      	bne.n	8025bd2 <HAL_UART_RxCpltCallback+0x2a>
	{
		vProcessRxChar(UART1_RxBuffer, APP_E_SERIAL_CHANNEL_0);
 8025bbc:	4b10      	ldr	r3, [pc, #64]	; (8025c00 <HAL_UART_RxCpltCallback+0x58>)
 8025bbe:	781b      	ldrb	r3, [r3, #0]
 8025bc0:	2100      	movs	r1, #0
 8025bc2:	4618      	mov	r0, r3
 8025bc4:	f7ff ffb4 	bl	8025b30 <vProcessRxChar>
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&UART1_RxBuffer, 1);
 8025bc8:	2201      	movs	r2, #1
 8025bca:	490d      	ldr	r1, [pc, #52]	; (8025c00 <HAL_UART_RxCpltCallback+0x58>)
 8025bcc:	480b      	ldr	r0, [pc, #44]	; (8025bfc <HAL_UART_RxCpltCallback+0x54>)
 8025bce:	f7e2 fb1d 	bl	800820c <HAL_UART_Receive_IT>
	}

	if(huart->Instance == huart8.Instance)
 8025bd2:	687b      	ldr	r3, [r7, #4]
 8025bd4:	681a      	ldr	r2, [r3, #0]
 8025bd6:	4b0b      	ldr	r3, [pc, #44]	; (8025c04 <HAL_UART_RxCpltCallback+0x5c>)
 8025bd8:	681b      	ldr	r3, [r3, #0]
 8025bda:	429a      	cmp	r2, r3
 8025bdc:	d10a      	bne.n	8025bf4 <HAL_UART_RxCpltCallback+0x4c>
	{
		vProcessRxChar(UART8_RxBuffer, APP_E_SERIAL_CHANNEL_1);
 8025bde:	4b0a      	ldr	r3, [pc, #40]	; (8025c08 <HAL_UART_RxCpltCallback+0x60>)
 8025be0:	781b      	ldrb	r3, [r3, #0]
 8025be2:	2101      	movs	r1, #1
 8025be4:	4618      	mov	r0, r3
 8025be6:	f7ff ffa3 	bl	8025b30 <vProcessRxChar>
		HAL_UART_Receive_IT(&huart8, (uint8_t*)&UART8_RxBuffer, 1);
 8025bea:	2201      	movs	r2, #1
 8025bec:	4906      	ldr	r1, [pc, #24]	; (8025c08 <HAL_UART_RxCpltCallback+0x60>)
 8025bee:	4805      	ldr	r0, [pc, #20]	; (8025c04 <HAL_UART_RxCpltCallback+0x5c>)
 8025bf0:	f7e2 fb0c 	bl	800820c <HAL_UART_Receive_IT>
	}
}
 8025bf4:	bf00      	nop
 8025bf6:	3708      	adds	r7, #8
 8025bf8:	46bd      	mov	sp, r7
 8025bfa:	bd80      	pop	{r7, pc}
 8025bfc:	24008780 	.word	0x24008780
 8025c00:	24009da8 	.word	0x24009da8
 8025c04:	24008810 	.word	0x24008810
 8025c08:	24009da9 	.word	0x24009da9

08025c0c <atoi>:
 8025c0c:	220a      	movs	r2, #10
 8025c0e:	2100      	movs	r1, #0
 8025c10:	f001 be46 	b.w	80278a0 <strtol>

08025c14 <calloc>:
 8025c14:	4b02      	ldr	r3, [pc, #8]	; (8025c20 <calloc+0xc>)
 8025c16:	460a      	mov	r2, r1
 8025c18:	4601      	mov	r1, r0
 8025c1a:	6818      	ldr	r0, [r3, #0]
 8025c1c:	f000 bb04 	b.w	8026228 <_calloc_r>
 8025c20:	240000bc 	.word	0x240000bc

08025c24 <std>:
 8025c24:	2300      	movs	r3, #0
 8025c26:	b510      	push	{r4, lr}
 8025c28:	4604      	mov	r4, r0
 8025c2a:	e9c0 3300 	strd	r3, r3, [r0]
 8025c2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025c32:	6083      	str	r3, [r0, #8]
 8025c34:	8181      	strh	r1, [r0, #12]
 8025c36:	6643      	str	r3, [r0, #100]	; 0x64
 8025c38:	81c2      	strh	r2, [r0, #14]
 8025c3a:	6183      	str	r3, [r0, #24]
 8025c3c:	4619      	mov	r1, r3
 8025c3e:	2208      	movs	r2, #8
 8025c40:	305c      	adds	r0, #92	; 0x5c
 8025c42:	f000 fae9 	bl	8026218 <memset>
 8025c46:	4b05      	ldr	r3, [pc, #20]	; (8025c5c <std+0x38>)
 8025c48:	6263      	str	r3, [r4, #36]	; 0x24
 8025c4a:	4b05      	ldr	r3, [pc, #20]	; (8025c60 <std+0x3c>)
 8025c4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8025c4e:	4b05      	ldr	r3, [pc, #20]	; (8025c64 <std+0x40>)
 8025c50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025c52:	4b05      	ldr	r3, [pc, #20]	; (8025c68 <std+0x44>)
 8025c54:	6224      	str	r4, [r4, #32]
 8025c56:	6323      	str	r3, [r4, #48]	; 0x30
 8025c58:	bd10      	pop	{r4, pc}
 8025c5a:	bf00      	nop
 8025c5c:	080271fd 	.word	0x080271fd
 8025c60:	08027223 	.word	0x08027223
 8025c64:	0802725b 	.word	0x0802725b
 8025c68:	0802727f 	.word	0x0802727f

08025c6c <_cleanup_r>:
 8025c6c:	4901      	ldr	r1, [pc, #4]	; (8025c74 <_cleanup_r+0x8>)
 8025c6e:	f000 b92f 	b.w	8025ed0 <_fwalk_reent>
 8025c72:	bf00      	nop
 8025c74:	08028c5d 	.word	0x08028c5d

08025c78 <__sfmoreglue>:
 8025c78:	b570      	push	{r4, r5, r6, lr}
 8025c7a:	1e4a      	subs	r2, r1, #1
 8025c7c:	2568      	movs	r5, #104	; 0x68
 8025c7e:	4355      	muls	r5, r2
 8025c80:	460e      	mov	r6, r1
 8025c82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8025c86:	f000 fb2f 	bl	80262e8 <_malloc_r>
 8025c8a:	4604      	mov	r4, r0
 8025c8c:	b140      	cbz	r0, 8025ca0 <__sfmoreglue+0x28>
 8025c8e:	2100      	movs	r1, #0
 8025c90:	e9c0 1600 	strd	r1, r6, [r0]
 8025c94:	300c      	adds	r0, #12
 8025c96:	60a0      	str	r0, [r4, #8]
 8025c98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8025c9c:	f000 fabc 	bl	8026218 <memset>
 8025ca0:	4620      	mov	r0, r4
 8025ca2:	bd70      	pop	{r4, r5, r6, pc}

08025ca4 <__sfp_lock_acquire>:
 8025ca4:	4801      	ldr	r0, [pc, #4]	; (8025cac <__sfp_lock_acquire+0x8>)
 8025ca6:	f000 ba6d 	b.w	8026184 <__retarget_lock_acquire_recursive>
 8025caa:	bf00      	nop
 8025cac:	2400a4c0 	.word	0x2400a4c0

08025cb0 <__sfp_lock_release>:
 8025cb0:	4801      	ldr	r0, [pc, #4]	; (8025cb8 <__sfp_lock_release+0x8>)
 8025cb2:	f000 ba69 	b.w	8026188 <__retarget_lock_release_recursive>
 8025cb6:	bf00      	nop
 8025cb8:	2400a4c0 	.word	0x2400a4c0

08025cbc <__sinit_lock_acquire>:
 8025cbc:	4801      	ldr	r0, [pc, #4]	; (8025cc4 <__sinit_lock_acquire+0x8>)
 8025cbe:	f000 ba61 	b.w	8026184 <__retarget_lock_acquire_recursive>
 8025cc2:	bf00      	nop
 8025cc4:	2400a4bb 	.word	0x2400a4bb

08025cc8 <__sinit_lock_release>:
 8025cc8:	4801      	ldr	r0, [pc, #4]	; (8025cd0 <__sinit_lock_release+0x8>)
 8025cca:	f000 ba5d 	b.w	8026188 <__retarget_lock_release_recursive>
 8025cce:	bf00      	nop
 8025cd0:	2400a4bb 	.word	0x2400a4bb

08025cd4 <__sinit>:
 8025cd4:	b510      	push	{r4, lr}
 8025cd6:	4604      	mov	r4, r0
 8025cd8:	f7ff fff0 	bl	8025cbc <__sinit_lock_acquire>
 8025cdc:	69a3      	ldr	r3, [r4, #24]
 8025cde:	b11b      	cbz	r3, 8025ce8 <__sinit+0x14>
 8025ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025ce4:	f7ff bff0 	b.w	8025cc8 <__sinit_lock_release>
 8025ce8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8025cec:	6523      	str	r3, [r4, #80]	; 0x50
 8025cee:	4b13      	ldr	r3, [pc, #76]	; (8025d3c <__sinit+0x68>)
 8025cf0:	4a13      	ldr	r2, [pc, #76]	; (8025d40 <__sinit+0x6c>)
 8025cf2:	681b      	ldr	r3, [r3, #0]
 8025cf4:	62a2      	str	r2, [r4, #40]	; 0x28
 8025cf6:	42a3      	cmp	r3, r4
 8025cf8:	bf04      	itt	eq
 8025cfa:	2301      	moveq	r3, #1
 8025cfc:	61a3      	streq	r3, [r4, #24]
 8025cfe:	4620      	mov	r0, r4
 8025d00:	f000 f820 	bl	8025d44 <__sfp>
 8025d04:	6060      	str	r0, [r4, #4]
 8025d06:	4620      	mov	r0, r4
 8025d08:	f000 f81c 	bl	8025d44 <__sfp>
 8025d0c:	60a0      	str	r0, [r4, #8]
 8025d0e:	4620      	mov	r0, r4
 8025d10:	f000 f818 	bl	8025d44 <__sfp>
 8025d14:	2200      	movs	r2, #0
 8025d16:	60e0      	str	r0, [r4, #12]
 8025d18:	2104      	movs	r1, #4
 8025d1a:	6860      	ldr	r0, [r4, #4]
 8025d1c:	f7ff ff82 	bl	8025c24 <std>
 8025d20:	68a0      	ldr	r0, [r4, #8]
 8025d22:	2201      	movs	r2, #1
 8025d24:	2109      	movs	r1, #9
 8025d26:	f7ff ff7d 	bl	8025c24 <std>
 8025d2a:	68e0      	ldr	r0, [r4, #12]
 8025d2c:	2202      	movs	r2, #2
 8025d2e:	2112      	movs	r1, #18
 8025d30:	f7ff ff78 	bl	8025c24 <std>
 8025d34:	2301      	movs	r3, #1
 8025d36:	61a3      	str	r3, [r4, #24]
 8025d38:	e7d2      	b.n	8025ce0 <__sinit+0xc>
 8025d3a:	bf00      	nop
 8025d3c:	0802ede4 	.word	0x0802ede4
 8025d40:	08025c6d 	.word	0x08025c6d

08025d44 <__sfp>:
 8025d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025d46:	4607      	mov	r7, r0
 8025d48:	f7ff ffac 	bl	8025ca4 <__sfp_lock_acquire>
 8025d4c:	4b1e      	ldr	r3, [pc, #120]	; (8025dc8 <__sfp+0x84>)
 8025d4e:	681e      	ldr	r6, [r3, #0]
 8025d50:	69b3      	ldr	r3, [r6, #24]
 8025d52:	b913      	cbnz	r3, 8025d5a <__sfp+0x16>
 8025d54:	4630      	mov	r0, r6
 8025d56:	f7ff ffbd 	bl	8025cd4 <__sinit>
 8025d5a:	3648      	adds	r6, #72	; 0x48
 8025d5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8025d60:	3b01      	subs	r3, #1
 8025d62:	d503      	bpl.n	8025d6c <__sfp+0x28>
 8025d64:	6833      	ldr	r3, [r6, #0]
 8025d66:	b30b      	cbz	r3, 8025dac <__sfp+0x68>
 8025d68:	6836      	ldr	r6, [r6, #0]
 8025d6a:	e7f7      	b.n	8025d5c <__sfp+0x18>
 8025d6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8025d70:	b9d5      	cbnz	r5, 8025da8 <__sfp+0x64>
 8025d72:	4b16      	ldr	r3, [pc, #88]	; (8025dcc <__sfp+0x88>)
 8025d74:	60e3      	str	r3, [r4, #12]
 8025d76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8025d7a:	6665      	str	r5, [r4, #100]	; 0x64
 8025d7c:	f000 fa00 	bl	8026180 <__retarget_lock_init_recursive>
 8025d80:	f7ff ff96 	bl	8025cb0 <__sfp_lock_release>
 8025d84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8025d88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8025d8c:	6025      	str	r5, [r4, #0]
 8025d8e:	61a5      	str	r5, [r4, #24]
 8025d90:	2208      	movs	r2, #8
 8025d92:	4629      	mov	r1, r5
 8025d94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8025d98:	f000 fa3e 	bl	8026218 <memset>
 8025d9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8025da0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8025da4:	4620      	mov	r0, r4
 8025da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025da8:	3468      	adds	r4, #104	; 0x68
 8025daa:	e7d9      	b.n	8025d60 <__sfp+0x1c>
 8025dac:	2104      	movs	r1, #4
 8025dae:	4638      	mov	r0, r7
 8025db0:	f7ff ff62 	bl	8025c78 <__sfmoreglue>
 8025db4:	4604      	mov	r4, r0
 8025db6:	6030      	str	r0, [r6, #0]
 8025db8:	2800      	cmp	r0, #0
 8025dba:	d1d5      	bne.n	8025d68 <__sfp+0x24>
 8025dbc:	f7ff ff78 	bl	8025cb0 <__sfp_lock_release>
 8025dc0:	230c      	movs	r3, #12
 8025dc2:	603b      	str	r3, [r7, #0]
 8025dc4:	e7ee      	b.n	8025da4 <__sfp+0x60>
 8025dc6:	bf00      	nop
 8025dc8:	0802ede4 	.word	0x0802ede4
 8025dcc:	ffff0001 	.word	0xffff0001

08025dd0 <fiprintf>:
 8025dd0:	b40e      	push	{r1, r2, r3}
 8025dd2:	b503      	push	{r0, r1, lr}
 8025dd4:	4601      	mov	r1, r0
 8025dd6:	ab03      	add	r3, sp, #12
 8025dd8:	4805      	ldr	r0, [pc, #20]	; (8025df0 <fiprintf+0x20>)
 8025dda:	f853 2b04 	ldr.w	r2, [r3], #4
 8025dde:	6800      	ldr	r0, [r0, #0]
 8025de0:	9301      	str	r3, [sp, #4]
 8025de2:	f000 fb05 	bl	80263f0 <_vfiprintf_r>
 8025de6:	b002      	add	sp, #8
 8025de8:	f85d eb04 	ldr.w	lr, [sp], #4
 8025dec:	b003      	add	sp, #12
 8025dee:	4770      	bx	lr
 8025df0:	240000bc 	.word	0x240000bc

08025df4 <_fputs_r>:
 8025df4:	b570      	push	{r4, r5, r6, lr}
 8025df6:	460e      	mov	r6, r1
 8025df8:	4614      	mov	r4, r2
 8025dfa:	4605      	mov	r5, r0
 8025dfc:	b118      	cbz	r0, 8025e06 <_fputs_r+0x12>
 8025dfe:	6983      	ldr	r3, [r0, #24]
 8025e00:	b90b      	cbnz	r3, 8025e06 <_fputs_r+0x12>
 8025e02:	f7ff ff67 	bl	8025cd4 <__sinit>
 8025e06:	4b2b      	ldr	r3, [pc, #172]	; (8025eb4 <_fputs_r+0xc0>)
 8025e08:	429c      	cmp	r4, r3
 8025e0a:	d11e      	bne.n	8025e4a <_fputs_r+0x56>
 8025e0c:	686c      	ldr	r4, [r5, #4]
 8025e0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025e10:	07da      	lsls	r2, r3, #31
 8025e12:	d405      	bmi.n	8025e20 <_fputs_r+0x2c>
 8025e14:	89a3      	ldrh	r3, [r4, #12]
 8025e16:	059b      	lsls	r3, r3, #22
 8025e18:	d402      	bmi.n	8025e20 <_fputs_r+0x2c>
 8025e1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025e1c:	f000 f9b2 	bl	8026184 <__retarget_lock_acquire_recursive>
 8025e20:	89a3      	ldrh	r3, [r4, #12]
 8025e22:	0718      	lsls	r0, r3, #28
 8025e24:	d51b      	bpl.n	8025e5e <_fputs_r+0x6a>
 8025e26:	6923      	ldr	r3, [r4, #16]
 8025e28:	b1cb      	cbz	r3, 8025e5e <_fputs_r+0x6a>
 8025e2a:	3e01      	subs	r6, #1
 8025e2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8025e30:	bb39      	cbnz	r1, 8025e82 <_fputs_r+0x8e>
 8025e32:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8025e34:	f015 0501 	ands.w	r5, r5, #1
 8025e38:	d139      	bne.n	8025eae <_fputs_r+0xba>
 8025e3a:	89a3      	ldrh	r3, [r4, #12]
 8025e3c:	0599      	lsls	r1, r3, #22
 8025e3e:	d402      	bmi.n	8025e46 <_fputs_r+0x52>
 8025e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025e42:	f000 f9a1 	bl	8026188 <__retarget_lock_release_recursive>
 8025e46:	4628      	mov	r0, r5
 8025e48:	bd70      	pop	{r4, r5, r6, pc}
 8025e4a:	4b1b      	ldr	r3, [pc, #108]	; (8025eb8 <_fputs_r+0xc4>)
 8025e4c:	429c      	cmp	r4, r3
 8025e4e:	d101      	bne.n	8025e54 <_fputs_r+0x60>
 8025e50:	68ac      	ldr	r4, [r5, #8]
 8025e52:	e7dc      	b.n	8025e0e <_fputs_r+0x1a>
 8025e54:	4b19      	ldr	r3, [pc, #100]	; (8025ebc <_fputs_r+0xc8>)
 8025e56:	429c      	cmp	r4, r3
 8025e58:	bf08      	it	eq
 8025e5a:	68ec      	ldreq	r4, [r5, #12]
 8025e5c:	e7d7      	b.n	8025e0e <_fputs_r+0x1a>
 8025e5e:	4621      	mov	r1, r4
 8025e60:	4628      	mov	r0, r5
 8025e62:	f001 ffc3 	bl	8027dec <__swsetup_r>
 8025e66:	2800      	cmp	r0, #0
 8025e68:	d0df      	beq.n	8025e2a <_fputs_r+0x36>
 8025e6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025e6c:	07da      	lsls	r2, r3, #31
 8025e6e:	d405      	bmi.n	8025e7c <_fputs_r+0x88>
 8025e70:	89a3      	ldrh	r3, [r4, #12]
 8025e72:	059b      	lsls	r3, r3, #22
 8025e74:	d402      	bmi.n	8025e7c <_fputs_r+0x88>
 8025e76:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025e78:	f000 f986 	bl	8026188 <__retarget_lock_release_recursive>
 8025e7c:	f04f 35ff 	mov.w	r5, #4294967295
 8025e80:	e7e1      	b.n	8025e46 <_fputs_r+0x52>
 8025e82:	68a3      	ldr	r3, [r4, #8]
 8025e84:	3b01      	subs	r3, #1
 8025e86:	2b00      	cmp	r3, #0
 8025e88:	60a3      	str	r3, [r4, #8]
 8025e8a:	da04      	bge.n	8025e96 <_fputs_r+0xa2>
 8025e8c:	69a2      	ldr	r2, [r4, #24]
 8025e8e:	4293      	cmp	r3, r2
 8025e90:	db06      	blt.n	8025ea0 <_fputs_r+0xac>
 8025e92:	290a      	cmp	r1, #10
 8025e94:	d004      	beq.n	8025ea0 <_fputs_r+0xac>
 8025e96:	6823      	ldr	r3, [r4, #0]
 8025e98:	1c5a      	adds	r2, r3, #1
 8025e9a:	6022      	str	r2, [r4, #0]
 8025e9c:	7019      	strb	r1, [r3, #0]
 8025e9e:	e7c5      	b.n	8025e2c <_fputs_r+0x38>
 8025ea0:	4622      	mov	r2, r4
 8025ea2:	4628      	mov	r0, r5
 8025ea4:	f001 ff3e 	bl	8027d24 <__swbuf_r>
 8025ea8:	3001      	adds	r0, #1
 8025eaa:	d1bf      	bne.n	8025e2c <_fputs_r+0x38>
 8025eac:	e7dd      	b.n	8025e6a <_fputs_r+0x76>
 8025eae:	460d      	mov	r5, r1
 8025eb0:	e7c9      	b.n	8025e46 <_fputs_r+0x52>
 8025eb2:	bf00      	nop
 8025eb4:	0802eda4 	.word	0x0802eda4
 8025eb8:	0802edc4 	.word	0x0802edc4
 8025ebc:	0802ed84 	.word	0x0802ed84

08025ec0 <fputs>:
 8025ec0:	4b02      	ldr	r3, [pc, #8]	; (8025ecc <fputs+0xc>)
 8025ec2:	460a      	mov	r2, r1
 8025ec4:	4601      	mov	r1, r0
 8025ec6:	6818      	ldr	r0, [r3, #0]
 8025ec8:	f7ff bf94 	b.w	8025df4 <_fputs_r>
 8025ecc:	240000bc 	.word	0x240000bc

08025ed0 <_fwalk_reent>:
 8025ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025ed4:	4606      	mov	r6, r0
 8025ed6:	4688      	mov	r8, r1
 8025ed8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8025edc:	2700      	movs	r7, #0
 8025ede:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8025ee2:	f1b9 0901 	subs.w	r9, r9, #1
 8025ee6:	d505      	bpl.n	8025ef4 <_fwalk_reent+0x24>
 8025ee8:	6824      	ldr	r4, [r4, #0]
 8025eea:	2c00      	cmp	r4, #0
 8025eec:	d1f7      	bne.n	8025ede <_fwalk_reent+0xe>
 8025eee:	4638      	mov	r0, r7
 8025ef0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025ef4:	89ab      	ldrh	r3, [r5, #12]
 8025ef6:	2b01      	cmp	r3, #1
 8025ef8:	d907      	bls.n	8025f0a <_fwalk_reent+0x3a>
 8025efa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025efe:	3301      	adds	r3, #1
 8025f00:	d003      	beq.n	8025f0a <_fwalk_reent+0x3a>
 8025f02:	4629      	mov	r1, r5
 8025f04:	4630      	mov	r0, r6
 8025f06:	47c0      	blx	r8
 8025f08:	4307      	orrs	r7, r0
 8025f0a:	3568      	adds	r5, #104	; 0x68
 8025f0c:	e7e9      	b.n	8025ee2 <_fwalk_reent+0x12>
	...

08025f10 <__libc_init_array>:
 8025f10:	b570      	push	{r4, r5, r6, lr}
 8025f12:	4d0d      	ldr	r5, [pc, #52]	; (8025f48 <__libc_init_array+0x38>)
 8025f14:	4c0d      	ldr	r4, [pc, #52]	; (8025f4c <__libc_init_array+0x3c>)
 8025f16:	1b64      	subs	r4, r4, r5
 8025f18:	10a4      	asrs	r4, r4, #2
 8025f1a:	2600      	movs	r6, #0
 8025f1c:	42a6      	cmp	r6, r4
 8025f1e:	d109      	bne.n	8025f34 <__libc_init_array+0x24>
 8025f20:	4d0b      	ldr	r5, [pc, #44]	; (8025f50 <__libc_init_array+0x40>)
 8025f22:	4c0c      	ldr	r4, [pc, #48]	; (8025f54 <__libc_init_array+0x44>)
 8025f24:	f004 fa20 	bl	802a368 <_init>
 8025f28:	1b64      	subs	r4, r4, r5
 8025f2a:	10a4      	asrs	r4, r4, #2
 8025f2c:	2600      	movs	r6, #0
 8025f2e:	42a6      	cmp	r6, r4
 8025f30:	d105      	bne.n	8025f3e <__libc_init_array+0x2e>
 8025f32:	bd70      	pop	{r4, r5, r6, pc}
 8025f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8025f38:	4798      	blx	r3
 8025f3a:	3601      	adds	r6, #1
 8025f3c:	e7ee      	b.n	8025f1c <__libc_init_array+0xc>
 8025f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8025f42:	4798      	blx	r3
 8025f44:	3601      	adds	r6, #1
 8025f46:	e7f2      	b.n	8025f2e <__libc_init_array+0x1e>
 8025f48:	0802f8dc 	.word	0x0802f8dc
 8025f4c:	0802f8dc 	.word	0x0802f8dc
 8025f50:	0802f8dc 	.word	0x0802f8dc
 8025f54:	0802f8e0 	.word	0x0802f8e0

08025f58 <localtime>:
 8025f58:	b538      	push	{r3, r4, r5, lr}
 8025f5a:	4b0b      	ldr	r3, [pc, #44]	; (8025f88 <localtime+0x30>)
 8025f5c:	681d      	ldr	r5, [r3, #0]
 8025f5e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8025f60:	4604      	mov	r4, r0
 8025f62:	b953      	cbnz	r3, 8025f7a <localtime+0x22>
 8025f64:	2024      	movs	r0, #36	; 0x24
 8025f66:	f000 f911 	bl	802618c <malloc>
 8025f6a:	4602      	mov	r2, r0
 8025f6c:	63e8      	str	r0, [r5, #60]	; 0x3c
 8025f6e:	b920      	cbnz	r0, 8025f7a <localtime+0x22>
 8025f70:	4b06      	ldr	r3, [pc, #24]	; (8025f8c <localtime+0x34>)
 8025f72:	4807      	ldr	r0, [pc, #28]	; (8025f90 <localtime+0x38>)
 8025f74:	2132      	movs	r1, #50	; 0x32
 8025f76:	f001 ffa7 	bl	8027ec8 <__assert_func>
 8025f7a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8025f7c:	4620      	mov	r0, r4
 8025f7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025f82:	f000 b807 	b.w	8025f94 <localtime_r>
 8025f86:	bf00      	nop
 8025f88:	240000bc 	.word	0x240000bc
 8025f8c:	0802ede8 	.word	0x0802ede8
 8025f90:	0802edff 	.word	0x0802edff

08025f94 <localtime_r>:
 8025f94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8025f98:	4607      	mov	r7, r0
 8025f9a:	9101      	str	r1, [sp, #4]
 8025f9c:	f002 fedc 	bl	8028d58 <__gettzinfo>
 8025fa0:	9901      	ldr	r1, [sp, #4]
 8025fa2:	4680      	mov	r8, r0
 8025fa4:	4638      	mov	r0, r7
 8025fa6:	f002 fedb 	bl	8028d60 <gmtime_r>
 8025faa:	6943      	ldr	r3, [r0, #20]
 8025fac:	079a      	lsls	r2, r3, #30
 8025fae:	4604      	mov	r4, r0
 8025fb0:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 8025fb4:	d105      	bne.n	8025fc2 <localtime_r+0x2e>
 8025fb6:	2264      	movs	r2, #100	; 0x64
 8025fb8:	fb96 f3f2 	sdiv	r3, r6, r2
 8025fbc:	fb02 6313 	mls	r3, r2, r3, r6
 8025fc0:	bb7b      	cbnz	r3, 8026022 <localtime_r+0x8e>
 8025fc2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8025fc6:	fb96 f5f3 	sdiv	r5, r6, r3
 8025fca:	fb03 6515 	mls	r5, r3, r5, r6
 8025fce:	fab5 f585 	clz	r5, r5
 8025fd2:	096d      	lsrs	r5, r5, #5
 8025fd4:	4b68      	ldr	r3, [pc, #416]	; (8026178 <localtime_r+0x1e4>)
 8025fd6:	2230      	movs	r2, #48	; 0x30
 8025fd8:	fb02 3505 	mla	r5, r2, r5, r3
 8025fdc:	f001 fd12 	bl	8027a04 <__tz_lock>
 8025fe0:	f001 fd1c 	bl	8027a1c <_tzset_unlocked>
 8025fe4:	4b65      	ldr	r3, [pc, #404]	; (802617c <localtime_r+0x1e8>)
 8025fe6:	681b      	ldr	r3, [r3, #0]
 8025fe8:	b353      	cbz	r3, 8026040 <localtime_r+0xac>
 8025fea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8025fee:	42b3      	cmp	r3, r6
 8025ff0:	d119      	bne.n	8026026 <localtime_r+0x92>
 8025ff2:	f8d8 1000 	ldr.w	r1, [r8]
 8025ff6:	e9d7 6700 	ldrd	r6, r7, [r7]
 8025ffa:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 8025ffe:	b9d1      	cbnz	r1, 8026036 <localtime_r+0xa2>
 8026000:	4296      	cmp	r6, r2
 8026002:	eb77 0303 	sbcs.w	r3, r7, r3
 8026006:	da23      	bge.n	8026050 <localtime_r+0xbc>
 8026008:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 802600c:	4296      	cmp	r6, r2
 802600e:	eb77 0303 	sbcs.w	r3, r7, r3
 8026012:	bfb4      	ite	lt
 8026014:	2301      	movlt	r3, #1
 8026016:	2300      	movge	r3, #0
 8026018:	6223      	str	r3, [r4, #32]
 802601a:	db1b      	blt.n	8026054 <localtime_r+0xc0>
 802601c:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 8026020:	e01a      	b.n	8026058 <localtime_r+0xc4>
 8026022:	2501      	movs	r5, #1
 8026024:	e7d6      	b.n	8025fd4 <localtime_r+0x40>
 8026026:	4630      	mov	r0, r6
 8026028:	f001 fc44 	bl	80278b4 <__tzcalc_limits>
 802602c:	2800      	cmp	r0, #0
 802602e:	d1e0      	bne.n	8025ff2 <localtime_r+0x5e>
 8026030:	f04f 33ff 	mov.w	r3, #4294967295
 8026034:	e004      	b.n	8026040 <localtime_r+0xac>
 8026036:	4296      	cmp	r6, r2
 8026038:	eb77 0303 	sbcs.w	r3, r7, r3
 802603c:	da02      	bge.n	8026044 <localtime_r+0xb0>
 802603e:	2300      	movs	r3, #0
 8026040:	6223      	str	r3, [r4, #32]
 8026042:	e7eb      	b.n	802601c <localtime_r+0x88>
 8026044:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8026048:	4296      	cmp	r6, r2
 802604a:	eb77 0303 	sbcs.w	r3, r7, r3
 802604e:	daf6      	bge.n	802603e <localtime_r+0xaa>
 8026050:	2301      	movs	r3, #1
 8026052:	6223      	str	r3, [r4, #32]
 8026054:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8026058:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 802605c:	203c      	movs	r0, #60	; 0x3c
 802605e:	fb91 f6f3 	sdiv	r6, r1, r3
 8026062:	fb03 1316 	mls	r3, r3, r6, r1
 8026066:	6861      	ldr	r1, [r4, #4]
 8026068:	fb93 f2f0 	sdiv	r2, r3, r0
 802606c:	fb00 3012 	mls	r0, r0, r2, r3
 8026070:	6823      	ldr	r3, [r4, #0]
 8026072:	1a89      	subs	r1, r1, r2
 8026074:	68a2      	ldr	r2, [r4, #8]
 8026076:	6061      	str	r1, [r4, #4]
 8026078:	1a1b      	subs	r3, r3, r0
 802607a:	1b92      	subs	r2, r2, r6
 802607c:	2b3b      	cmp	r3, #59	; 0x3b
 802607e:	6023      	str	r3, [r4, #0]
 8026080:	60a2      	str	r2, [r4, #8]
 8026082:	dd35      	ble.n	80260f0 <localtime_r+0x15c>
 8026084:	3101      	adds	r1, #1
 8026086:	6061      	str	r1, [r4, #4]
 8026088:	3b3c      	subs	r3, #60	; 0x3c
 802608a:	6023      	str	r3, [r4, #0]
 802608c:	6863      	ldr	r3, [r4, #4]
 802608e:	2b3b      	cmp	r3, #59	; 0x3b
 8026090:	dd34      	ble.n	80260fc <localtime_r+0x168>
 8026092:	3201      	adds	r2, #1
 8026094:	60a2      	str	r2, [r4, #8]
 8026096:	3b3c      	subs	r3, #60	; 0x3c
 8026098:	6063      	str	r3, [r4, #4]
 802609a:	68a3      	ldr	r3, [r4, #8]
 802609c:	2b17      	cmp	r3, #23
 802609e:	dd33      	ble.n	8026108 <localtime_r+0x174>
 80260a0:	69e2      	ldr	r2, [r4, #28]
 80260a2:	3201      	adds	r2, #1
 80260a4:	61e2      	str	r2, [r4, #28]
 80260a6:	69a2      	ldr	r2, [r4, #24]
 80260a8:	3201      	adds	r2, #1
 80260aa:	2a06      	cmp	r2, #6
 80260ac:	bfc8      	it	gt
 80260ae:	2200      	movgt	r2, #0
 80260b0:	61a2      	str	r2, [r4, #24]
 80260b2:	68e2      	ldr	r2, [r4, #12]
 80260b4:	3b18      	subs	r3, #24
 80260b6:	3201      	adds	r2, #1
 80260b8:	60a3      	str	r3, [r4, #8]
 80260ba:	6923      	ldr	r3, [r4, #16]
 80260bc:	60e2      	str	r2, [r4, #12]
 80260be:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80260c2:	428a      	cmp	r2, r1
 80260c4:	dd0e      	ble.n	80260e4 <localtime_r+0x150>
 80260c6:	2b0b      	cmp	r3, #11
 80260c8:	eba2 0201 	sub.w	r2, r2, r1
 80260cc:	60e2      	str	r2, [r4, #12]
 80260ce:	f103 0201 	add.w	r2, r3, #1
 80260d2:	bf09      	itett	eq
 80260d4:	6963      	ldreq	r3, [r4, #20]
 80260d6:	6122      	strne	r2, [r4, #16]
 80260d8:	2200      	moveq	r2, #0
 80260da:	3301      	addeq	r3, #1
 80260dc:	bf02      	ittt	eq
 80260de:	6122      	streq	r2, [r4, #16]
 80260e0:	6163      	streq	r3, [r4, #20]
 80260e2:	61e2      	streq	r2, [r4, #28]
 80260e4:	f001 fc94 	bl	8027a10 <__tz_unlock>
 80260e8:	4620      	mov	r0, r4
 80260ea:	b002      	add	sp, #8
 80260ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80260f0:	2b00      	cmp	r3, #0
 80260f2:	dacb      	bge.n	802608c <localtime_r+0xf8>
 80260f4:	3901      	subs	r1, #1
 80260f6:	6061      	str	r1, [r4, #4]
 80260f8:	333c      	adds	r3, #60	; 0x3c
 80260fa:	e7c6      	b.n	802608a <localtime_r+0xf6>
 80260fc:	2b00      	cmp	r3, #0
 80260fe:	dacc      	bge.n	802609a <localtime_r+0x106>
 8026100:	3a01      	subs	r2, #1
 8026102:	60a2      	str	r2, [r4, #8]
 8026104:	333c      	adds	r3, #60	; 0x3c
 8026106:	e7c7      	b.n	8026098 <localtime_r+0x104>
 8026108:	2b00      	cmp	r3, #0
 802610a:	daeb      	bge.n	80260e4 <localtime_r+0x150>
 802610c:	69e2      	ldr	r2, [r4, #28]
 802610e:	3a01      	subs	r2, #1
 8026110:	61e2      	str	r2, [r4, #28]
 8026112:	69a2      	ldr	r2, [r4, #24]
 8026114:	3a01      	subs	r2, #1
 8026116:	bf48      	it	mi
 8026118:	2206      	movmi	r2, #6
 802611a:	61a2      	str	r2, [r4, #24]
 802611c:	68e2      	ldr	r2, [r4, #12]
 802611e:	3318      	adds	r3, #24
 8026120:	3a01      	subs	r2, #1
 8026122:	60e2      	str	r2, [r4, #12]
 8026124:	60a3      	str	r3, [r4, #8]
 8026126:	2a00      	cmp	r2, #0
 8026128:	d1dc      	bne.n	80260e4 <localtime_r+0x150>
 802612a:	6923      	ldr	r3, [r4, #16]
 802612c:	3b01      	subs	r3, #1
 802612e:	d405      	bmi.n	802613c <localtime_r+0x1a8>
 8026130:	6123      	str	r3, [r4, #16]
 8026132:	6923      	ldr	r3, [r4, #16]
 8026134:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8026138:	60e3      	str	r3, [r4, #12]
 802613a:	e7d3      	b.n	80260e4 <localtime_r+0x150>
 802613c:	230b      	movs	r3, #11
 802613e:	6123      	str	r3, [r4, #16]
 8026140:	6963      	ldr	r3, [r4, #20]
 8026142:	1e5a      	subs	r2, r3, #1
 8026144:	6162      	str	r2, [r4, #20]
 8026146:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 802614a:	0793      	lsls	r3, r2, #30
 802614c:	d105      	bne.n	802615a <localtime_r+0x1c6>
 802614e:	2164      	movs	r1, #100	; 0x64
 8026150:	fb92 f3f1 	sdiv	r3, r2, r1
 8026154:	fb01 2313 	mls	r3, r1, r3, r2
 8026158:	b963      	cbnz	r3, 8026174 <localtime_r+0x1e0>
 802615a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 802615e:	fb92 f3f1 	sdiv	r3, r2, r1
 8026162:	fb01 2313 	mls	r3, r1, r3, r2
 8026166:	fab3 f383 	clz	r3, r3
 802616a:	095b      	lsrs	r3, r3, #5
 802616c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8026170:	61e3      	str	r3, [r4, #28]
 8026172:	e7de      	b.n	8026132 <localtime_r+0x19e>
 8026174:	2301      	movs	r3, #1
 8026176:	e7f9      	b.n	802616c <localtime_r+0x1d8>
 8026178:	0802ee60 	.word	0x0802ee60
 802617c:	2400516c 	.word	0x2400516c

08026180 <__retarget_lock_init_recursive>:
 8026180:	4770      	bx	lr

08026182 <__retarget_lock_acquire>:
 8026182:	4770      	bx	lr

08026184 <__retarget_lock_acquire_recursive>:
 8026184:	4770      	bx	lr

08026186 <__retarget_lock_release>:
 8026186:	4770      	bx	lr

08026188 <__retarget_lock_release_recursive>:
 8026188:	4770      	bx	lr
	...

0802618c <malloc>:
 802618c:	4b02      	ldr	r3, [pc, #8]	; (8026198 <malloc+0xc>)
 802618e:	4601      	mov	r1, r0
 8026190:	6818      	ldr	r0, [r3, #0]
 8026192:	f000 b8a9 	b.w	80262e8 <_malloc_r>
 8026196:	bf00      	nop
 8026198:	240000bc 	.word	0x240000bc

0802619c <free>:
 802619c:	4b02      	ldr	r3, [pc, #8]	; (80261a8 <free+0xc>)
 802619e:	4601      	mov	r1, r0
 80261a0:	6818      	ldr	r0, [r3, #0]
 80261a2:	f000 b851 	b.w	8026248 <_free_r>
 80261a6:	bf00      	nop
 80261a8:	240000bc 	.word	0x240000bc

080261ac <memcmp>:
 80261ac:	b530      	push	{r4, r5, lr}
 80261ae:	3901      	subs	r1, #1
 80261b0:	2400      	movs	r4, #0
 80261b2:	42a2      	cmp	r2, r4
 80261b4:	d101      	bne.n	80261ba <memcmp+0xe>
 80261b6:	2000      	movs	r0, #0
 80261b8:	e005      	b.n	80261c6 <memcmp+0x1a>
 80261ba:	5d03      	ldrb	r3, [r0, r4]
 80261bc:	3401      	adds	r4, #1
 80261be:	5d0d      	ldrb	r5, [r1, r4]
 80261c0:	42ab      	cmp	r3, r5
 80261c2:	d0f6      	beq.n	80261b2 <memcmp+0x6>
 80261c4:	1b58      	subs	r0, r3, r5
 80261c6:	bd30      	pop	{r4, r5, pc}

080261c8 <memcpy>:
 80261c8:	440a      	add	r2, r1
 80261ca:	4291      	cmp	r1, r2
 80261cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80261d0:	d100      	bne.n	80261d4 <memcpy+0xc>
 80261d2:	4770      	bx	lr
 80261d4:	b510      	push	{r4, lr}
 80261d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80261da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80261de:	4291      	cmp	r1, r2
 80261e0:	d1f9      	bne.n	80261d6 <memcpy+0xe>
 80261e2:	bd10      	pop	{r4, pc}

080261e4 <memmove>:
 80261e4:	4288      	cmp	r0, r1
 80261e6:	b510      	push	{r4, lr}
 80261e8:	eb01 0402 	add.w	r4, r1, r2
 80261ec:	d902      	bls.n	80261f4 <memmove+0x10>
 80261ee:	4284      	cmp	r4, r0
 80261f0:	4623      	mov	r3, r4
 80261f2:	d807      	bhi.n	8026204 <memmove+0x20>
 80261f4:	1e43      	subs	r3, r0, #1
 80261f6:	42a1      	cmp	r1, r4
 80261f8:	d008      	beq.n	802620c <memmove+0x28>
 80261fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80261fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8026202:	e7f8      	b.n	80261f6 <memmove+0x12>
 8026204:	4402      	add	r2, r0
 8026206:	4601      	mov	r1, r0
 8026208:	428a      	cmp	r2, r1
 802620a:	d100      	bne.n	802620e <memmove+0x2a>
 802620c:	bd10      	pop	{r4, pc}
 802620e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8026212:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8026216:	e7f7      	b.n	8026208 <memmove+0x24>

08026218 <memset>:
 8026218:	4402      	add	r2, r0
 802621a:	4603      	mov	r3, r0
 802621c:	4293      	cmp	r3, r2
 802621e:	d100      	bne.n	8026222 <memset+0xa>
 8026220:	4770      	bx	lr
 8026222:	f803 1b01 	strb.w	r1, [r3], #1
 8026226:	e7f9      	b.n	802621c <memset+0x4>

08026228 <_calloc_r>:
 8026228:	b513      	push	{r0, r1, r4, lr}
 802622a:	434a      	muls	r2, r1
 802622c:	4611      	mov	r1, r2
 802622e:	9201      	str	r2, [sp, #4]
 8026230:	f000 f85a 	bl	80262e8 <_malloc_r>
 8026234:	4604      	mov	r4, r0
 8026236:	b118      	cbz	r0, 8026240 <_calloc_r+0x18>
 8026238:	9a01      	ldr	r2, [sp, #4]
 802623a:	2100      	movs	r1, #0
 802623c:	f7ff ffec 	bl	8026218 <memset>
 8026240:	4620      	mov	r0, r4
 8026242:	b002      	add	sp, #8
 8026244:	bd10      	pop	{r4, pc}
	...

08026248 <_free_r>:
 8026248:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802624a:	2900      	cmp	r1, #0
 802624c:	d048      	beq.n	80262e0 <_free_r+0x98>
 802624e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026252:	9001      	str	r0, [sp, #4]
 8026254:	2b00      	cmp	r3, #0
 8026256:	f1a1 0404 	sub.w	r4, r1, #4
 802625a:	bfb8      	it	lt
 802625c:	18e4      	addlt	r4, r4, r3
 802625e:	f002 fea9 	bl	8028fb4 <__malloc_lock>
 8026262:	4a20      	ldr	r2, [pc, #128]	; (80262e4 <_free_r+0x9c>)
 8026264:	9801      	ldr	r0, [sp, #4]
 8026266:	6813      	ldr	r3, [r2, #0]
 8026268:	4615      	mov	r5, r2
 802626a:	b933      	cbnz	r3, 802627a <_free_r+0x32>
 802626c:	6063      	str	r3, [r4, #4]
 802626e:	6014      	str	r4, [r2, #0]
 8026270:	b003      	add	sp, #12
 8026272:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026276:	f002 bea3 	b.w	8028fc0 <__malloc_unlock>
 802627a:	42a3      	cmp	r3, r4
 802627c:	d90b      	bls.n	8026296 <_free_r+0x4e>
 802627e:	6821      	ldr	r1, [r4, #0]
 8026280:	1862      	adds	r2, r4, r1
 8026282:	4293      	cmp	r3, r2
 8026284:	bf04      	itt	eq
 8026286:	681a      	ldreq	r2, [r3, #0]
 8026288:	685b      	ldreq	r3, [r3, #4]
 802628a:	6063      	str	r3, [r4, #4]
 802628c:	bf04      	itt	eq
 802628e:	1852      	addeq	r2, r2, r1
 8026290:	6022      	streq	r2, [r4, #0]
 8026292:	602c      	str	r4, [r5, #0]
 8026294:	e7ec      	b.n	8026270 <_free_r+0x28>
 8026296:	461a      	mov	r2, r3
 8026298:	685b      	ldr	r3, [r3, #4]
 802629a:	b10b      	cbz	r3, 80262a0 <_free_r+0x58>
 802629c:	42a3      	cmp	r3, r4
 802629e:	d9fa      	bls.n	8026296 <_free_r+0x4e>
 80262a0:	6811      	ldr	r1, [r2, #0]
 80262a2:	1855      	adds	r5, r2, r1
 80262a4:	42a5      	cmp	r5, r4
 80262a6:	d10b      	bne.n	80262c0 <_free_r+0x78>
 80262a8:	6824      	ldr	r4, [r4, #0]
 80262aa:	4421      	add	r1, r4
 80262ac:	1854      	adds	r4, r2, r1
 80262ae:	42a3      	cmp	r3, r4
 80262b0:	6011      	str	r1, [r2, #0]
 80262b2:	d1dd      	bne.n	8026270 <_free_r+0x28>
 80262b4:	681c      	ldr	r4, [r3, #0]
 80262b6:	685b      	ldr	r3, [r3, #4]
 80262b8:	6053      	str	r3, [r2, #4]
 80262ba:	4421      	add	r1, r4
 80262bc:	6011      	str	r1, [r2, #0]
 80262be:	e7d7      	b.n	8026270 <_free_r+0x28>
 80262c0:	d902      	bls.n	80262c8 <_free_r+0x80>
 80262c2:	230c      	movs	r3, #12
 80262c4:	6003      	str	r3, [r0, #0]
 80262c6:	e7d3      	b.n	8026270 <_free_r+0x28>
 80262c8:	6825      	ldr	r5, [r4, #0]
 80262ca:	1961      	adds	r1, r4, r5
 80262cc:	428b      	cmp	r3, r1
 80262ce:	bf04      	itt	eq
 80262d0:	6819      	ldreq	r1, [r3, #0]
 80262d2:	685b      	ldreq	r3, [r3, #4]
 80262d4:	6063      	str	r3, [r4, #4]
 80262d6:	bf04      	itt	eq
 80262d8:	1949      	addeq	r1, r1, r5
 80262da:	6021      	streq	r1, [r4, #0]
 80262dc:	6054      	str	r4, [r2, #4]
 80262de:	e7c7      	b.n	8026270 <_free_r+0x28>
 80262e0:	b003      	add	sp, #12
 80262e2:	bd30      	pop	{r4, r5, pc}
 80262e4:	24005148 	.word	0x24005148

080262e8 <_malloc_r>:
 80262e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80262ea:	1ccd      	adds	r5, r1, #3
 80262ec:	f025 0503 	bic.w	r5, r5, #3
 80262f0:	3508      	adds	r5, #8
 80262f2:	2d0c      	cmp	r5, #12
 80262f4:	bf38      	it	cc
 80262f6:	250c      	movcc	r5, #12
 80262f8:	2d00      	cmp	r5, #0
 80262fa:	4606      	mov	r6, r0
 80262fc:	db01      	blt.n	8026302 <_malloc_r+0x1a>
 80262fe:	42a9      	cmp	r1, r5
 8026300:	d903      	bls.n	802630a <_malloc_r+0x22>
 8026302:	230c      	movs	r3, #12
 8026304:	6033      	str	r3, [r6, #0]
 8026306:	2000      	movs	r0, #0
 8026308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802630a:	f002 fe53 	bl	8028fb4 <__malloc_lock>
 802630e:	4921      	ldr	r1, [pc, #132]	; (8026394 <_malloc_r+0xac>)
 8026310:	680a      	ldr	r2, [r1, #0]
 8026312:	4614      	mov	r4, r2
 8026314:	b99c      	cbnz	r4, 802633e <_malloc_r+0x56>
 8026316:	4f20      	ldr	r7, [pc, #128]	; (8026398 <_malloc_r+0xb0>)
 8026318:	683b      	ldr	r3, [r7, #0]
 802631a:	b923      	cbnz	r3, 8026326 <_malloc_r+0x3e>
 802631c:	4621      	mov	r1, r4
 802631e:	4630      	mov	r0, r6
 8026320:	f000 ff10 	bl	8027144 <_sbrk_r>
 8026324:	6038      	str	r0, [r7, #0]
 8026326:	4629      	mov	r1, r5
 8026328:	4630      	mov	r0, r6
 802632a:	f000 ff0b 	bl	8027144 <_sbrk_r>
 802632e:	1c43      	adds	r3, r0, #1
 8026330:	d123      	bne.n	802637a <_malloc_r+0x92>
 8026332:	230c      	movs	r3, #12
 8026334:	6033      	str	r3, [r6, #0]
 8026336:	4630      	mov	r0, r6
 8026338:	f002 fe42 	bl	8028fc0 <__malloc_unlock>
 802633c:	e7e3      	b.n	8026306 <_malloc_r+0x1e>
 802633e:	6823      	ldr	r3, [r4, #0]
 8026340:	1b5b      	subs	r3, r3, r5
 8026342:	d417      	bmi.n	8026374 <_malloc_r+0x8c>
 8026344:	2b0b      	cmp	r3, #11
 8026346:	d903      	bls.n	8026350 <_malloc_r+0x68>
 8026348:	6023      	str	r3, [r4, #0]
 802634a:	441c      	add	r4, r3
 802634c:	6025      	str	r5, [r4, #0]
 802634e:	e004      	b.n	802635a <_malloc_r+0x72>
 8026350:	6863      	ldr	r3, [r4, #4]
 8026352:	42a2      	cmp	r2, r4
 8026354:	bf0c      	ite	eq
 8026356:	600b      	streq	r3, [r1, #0]
 8026358:	6053      	strne	r3, [r2, #4]
 802635a:	4630      	mov	r0, r6
 802635c:	f002 fe30 	bl	8028fc0 <__malloc_unlock>
 8026360:	f104 000b 	add.w	r0, r4, #11
 8026364:	1d23      	adds	r3, r4, #4
 8026366:	f020 0007 	bic.w	r0, r0, #7
 802636a:	1ac2      	subs	r2, r0, r3
 802636c:	d0cc      	beq.n	8026308 <_malloc_r+0x20>
 802636e:	1a1b      	subs	r3, r3, r0
 8026370:	50a3      	str	r3, [r4, r2]
 8026372:	e7c9      	b.n	8026308 <_malloc_r+0x20>
 8026374:	4622      	mov	r2, r4
 8026376:	6864      	ldr	r4, [r4, #4]
 8026378:	e7cc      	b.n	8026314 <_malloc_r+0x2c>
 802637a:	1cc4      	adds	r4, r0, #3
 802637c:	f024 0403 	bic.w	r4, r4, #3
 8026380:	42a0      	cmp	r0, r4
 8026382:	d0e3      	beq.n	802634c <_malloc_r+0x64>
 8026384:	1a21      	subs	r1, r4, r0
 8026386:	4630      	mov	r0, r6
 8026388:	f000 fedc 	bl	8027144 <_sbrk_r>
 802638c:	3001      	adds	r0, #1
 802638e:	d1dd      	bne.n	802634c <_malloc_r+0x64>
 8026390:	e7cf      	b.n	8026332 <_malloc_r+0x4a>
 8026392:	bf00      	nop
 8026394:	24005148 	.word	0x24005148
 8026398:	2400514c 	.word	0x2400514c

0802639c <__sfputc_r>:
 802639c:	6893      	ldr	r3, [r2, #8]
 802639e:	3b01      	subs	r3, #1
 80263a0:	2b00      	cmp	r3, #0
 80263a2:	b410      	push	{r4}
 80263a4:	6093      	str	r3, [r2, #8]
 80263a6:	da08      	bge.n	80263ba <__sfputc_r+0x1e>
 80263a8:	6994      	ldr	r4, [r2, #24]
 80263aa:	42a3      	cmp	r3, r4
 80263ac:	db01      	blt.n	80263b2 <__sfputc_r+0x16>
 80263ae:	290a      	cmp	r1, #10
 80263b0:	d103      	bne.n	80263ba <__sfputc_r+0x1e>
 80263b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80263b6:	f001 bcb5 	b.w	8027d24 <__swbuf_r>
 80263ba:	6813      	ldr	r3, [r2, #0]
 80263bc:	1c58      	adds	r0, r3, #1
 80263be:	6010      	str	r0, [r2, #0]
 80263c0:	7019      	strb	r1, [r3, #0]
 80263c2:	4608      	mov	r0, r1
 80263c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80263c8:	4770      	bx	lr

080263ca <__sfputs_r>:
 80263ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80263cc:	4606      	mov	r6, r0
 80263ce:	460f      	mov	r7, r1
 80263d0:	4614      	mov	r4, r2
 80263d2:	18d5      	adds	r5, r2, r3
 80263d4:	42ac      	cmp	r4, r5
 80263d6:	d101      	bne.n	80263dc <__sfputs_r+0x12>
 80263d8:	2000      	movs	r0, #0
 80263da:	e007      	b.n	80263ec <__sfputs_r+0x22>
 80263dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80263e0:	463a      	mov	r2, r7
 80263e2:	4630      	mov	r0, r6
 80263e4:	f7ff ffda 	bl	802639c <__sfputc_r>
 80263e8:	1c43      	adds	r3, r0, #1
 80263ea:	d1f3      	bne.n	80263d4 <__sfputs_r+0xa>
 80263ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080263f0 <_vfiprintf_r>:
 80263f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80263f4:	460d      	mov	r5, r1
 80263f6:	b09d      	sub	sp, #116	; 0x74
 80263f8:	4614      	mov	r4, r2
 80263fa:	4698      	mov	r8, r3
 80263fc:	4606      	mov	r6, r0
 80263fe:	b118      	cbz	r0, 8026408 <_vfiprintf_r+0x18>
 8026400:	6983      	ldr	r3, [r0, #24]
 8026402:	b90b      	cbnz	r3, 8026408 <_vfiprintf_r+0x18>
 8026404:	f7ff fc66 	bl	8025cd4 <__sinit>
 8026408:	4b89      	ldr	r3, [pc, #548]	; (8026630 <_vfiprintf_r+0x240>)
 802640a:	429d      	cmp	r5, r3
 802640c:	d11b      	bne.n	8026446 <_vfiprintf_r+0x56>
 802640e:	6875      	ldr	r5, [r6, #4]
 8026410:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026412:	07d9      	lsls	r1, r3, #31
 8026414:	d405      	bmi.n	8026422 <_vfiprintf_r+0x32>
 8026416:	89ab      	ldrh	r3, [r5, #12]
 8026418:	059a      	lsls	r2, r3, #22
 802641a:	d402      	bmi.n	8026422 <_vfiprintf_r+0x32>
 802641c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802641e:	f7ff feb1 	bl	8026184 <__retarget_lock_acquire_recursive>
 8026422:	89ab      	ldrh	r3, [r5, #12]
 8026424:	071b      	lsls	r3, r3, #28
 8026426:	d501      	bpl.n	802642c <_vfiprintf_r+0x3c>
 8026428:	692b      	ldr	r3, [r5, #16]
 802642a:	b9eb      	cbnz	r3, 8026468 <_vfiprintf_r+0x78>
 802642c:	4629      	mov	r1, r5
 802642e:	4630      	mov	r0, r6
 8026430:	f001 fcdc 	bl	8027dec <__swsetup_r>
 8026434:	b1c0      	cbz	r0, 8026468 <_vfiprintf_r+0x78>
 8026436:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026438:	07dc      	lsls	r4, r3, #31
 802643a:	d50e      	bpl.n	802645a <_vfiprintf_r+0x6a>
 802643c:	f04f 30ff 	mov.w	r0, #4294967295
 8026440:	b01d      	add	sp, #116	; 0x74
 8026442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026446:	4b7b      	ldr	r3, [pc, #492]	; (8026634 <_vfiprintf_r+0x244>)
 8026448:	429d      	cmp	r5, r3
 802644a:	d101      	bne.n	8026450 <_vfiprintf_r+0x60>
 802644c:	68b5      	ldr	r5, [r6, #8]
 802644e:	e7df      	b.n	8026410 <_vfiprintf_r+0x20>
 8026450:	4b79      	ldr	r3, [pc, #484]	; (8026638 <_vfiprintf_r+0x248>)
 8026452:	429d      	cmp	r5, r3
 8026454:	bf08      	it	eq
 8026456:	68f5      	ldreq	r5, [r6, #12]
 8026458:	e7da      	b.n	8026410 <_vfiprintf_r+0x20>
 802645a:	89ab      	ldrh	r3, [r5, #12]
 802645c:	0598      	lsls	r0, r3, #22
 802645e:	d4ed      	bmi.n	802643c <_vfiprintf_r+0x4c>
 8026460:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026462:	f7ff fe91 	bl	8026188 <__retarget_lock_release_recursive>
 8026466:	e7e9      	b.n	802643c <_vfiprintf_r+0x4c>
 8026468:	2300      	movs	r3, #0
 802646a:	9309      	str	r3, [sp, #36]	; 0x24
 802646c:	2320      	movs	r3, #32
 802646e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8026472:	f8cd 800c 	str.w	r8, [sp, #12]
 8026476:	2330      	movs	r3, #48	; 0x30
 8026478:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802663c <_vfiprintf_r+0x24c>
 802647c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026480:	f04f 0901 	mov.w	r9, #1
 8026484:	4623      	mov	r3, r4
 8026486:	469a      	mov	sl, r3
 8026488:	f813 2b01 	ldrb.w	r2, [r3], #1
 802648c:	b10a      	cbz	r2, 8026492 <_vfiprintf_r+0xa2>
 802648e:	2a25      	cmp	r2, #37	; 0x25
 8026490:	d1f9      	bne.n	8026486 <_vfiprintf_r+0x96>
 8026492:	ebba 0b04 	subs.w	fp, sl, r4
 8026496:	d00b      	beq.n	80264b0 <_vfiprintf_r+0xc0>
 8026498:	465b      	mov	r3, fp
 802649a:	4622      	mov	r2, r4
 802649c:	4629      	mov	r1, r5
 802649e:	4630      	mov	r0, r6
 80264a0:	f7ff ff93 	bl	80263ca <__sfputs_r>
 80264a4:	3001      	adds	r0, #1
 80264a6:	f000 80aa 	beq.w	80265fe <_vfiprintf_r+0x20e>
 80264aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80264ac:	445a      	add	r2, fp
 80264ae:	9209      	str	r2, [sp, #36]	; 0x24
 80264b0:	f89a 3000 	ldrb.w	r3, [sl]
 80264b4:	2b00      	cmp	r3, #0
 80264b6:	f000 80a2 	beq.w	80265fe <_vfiprintf_r+0x20e>
 80264ba:	2300      	movs	r3, #0
 80264bc:	f04f 32ff 	mov.w	r2, #4294967295
 80264c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80264c4:	f10a 0a01 	add.w	sl, sl, #1
 80264c8:	9304      	str	r3, [sp, #16]
 80264ca:	9307      	str	r3, [sp, #28]
 80264cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80264d0:	931a      	str	r3, [sp, #104]	; 0x68
 80264d2:	4654      	mov	r4, sl
 80264d4:	2205      	movs	r2, #5
 80264d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80264da:	4858      	ldr	r0, [pc, #352]	; (802663c <_vfiprintf_r+0x24c>)
 80264dc:	f7d9 ff18 	bl	8000310 <memchr>
 80264e0:	9a04      	ldr	r2, [sp, #16]
 80264e2:	b9d8      	cbnz	r0, 802651c <_vfiprintf_r+0x12c>
 80264e4:	06d1      	lsls	r1, r2, #27
 80264e6:	bf44      	itt	mi
 80264e8:	2320      	movmi	r3, #32
 80264ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80264ee:	0713      	lsls	r3, r2, #28
 80264f0:	bf44      	itt	mi
 80264f2:	232b      	movmi	r3, #43	; 0x2b
 80264f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80264f8:	f89a 3000 	ldrb.w	r3, [sl]
 80264fc:	2b2a      	cmp	r3, #42	; 0x2a
 80264fe:	d015      	beq.n	802652c <_vfiprintf_r+0x13c>
 8026500:	9a07      	ldr	r2, [sp, #28]
 8026502:	4654      	mov	r4, sl
 8026504:	2000      	movs	r0, #0
 8026506:	f04f 0c0a 	mov.w	ip, #10
 802650a:	4621      	mov	r1, r4
 802650c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026510:	3b30      	subs	r3, #48	; 0x30
 8026512:	2b09      	cmp	r3, #9
 8026514:	d94e      	bls.n	80265b4 <_vfiprintf_r+0x1c4>
 8026516:	b1b0      	cbz	r0, 8026546 <_vfiprintf_r+0x156>
 8026518:	9207      	str	r2, [sp, #28]
 802651a:	e014      	b.n	8026546 <_vfiprintf_r+0x156>
 802651c:	eba0 0308 	sub.w	r3, r0, r8
 8026520:	fa09 f303 	lsl.w	r3, r9, r3
 8026524:	4313      	orrs	r3, r2
 8026526:	9304      	str	r3, [sp, #16]
 8026528:	46a2      	mov	sl, r4
 802652a:	e7d2      	b.n	80264d2 <_vfiprintf_r+0xe2>
 802652c:	9b03      	ldr	r3, [sp, #12]
 802652e:	1d19      	adds	r1, r3, #4
 8026530:	681b      	ldr	r3, [r3, #0]
 8026532:	9103      	str	r1, [sp, #12]
 8026534:	2b00      	cmp	r3, #0
 8026536:	bfbb      	ittet	lt
 8026538:	425b      	neglt	r3, r3
 802653a:	f042 0202 	orrlt.w	r2, r2, #2
 802653e:	9307      	strge	r3, [sp, #28]
 8026540:	9307      	strlt	r3, [sp, #28]
 8026542:	bfb8      	it	lt
 8026544:	9204      	strlt	r2, [sp, #16]
 8026546:	7823      	ldrb	r3, [r4, #0]
 8026548:	2b2e      	cmp	r3, #46	; 0x2e
 802654a:	d10c      	bne.n	8026566 <_vfiprintf_r+0x176>
 802654c:	7863      	ldrb	r3, [r4, #1]
 802654e:	2b2a      	cmp	r3, #42	; 0x2a
 8026550:	d135      	bne.n	80265be <_vfiprintf_r+0x1ce>
 8026552:	9b03      	ldr	r3, [sp, #12]
 8026554:	1d1a      	adds	r2, r3, #4
 8026556:	681b      	ldr	r3, [r3, #0]
 8026558:	9203      	str	r2, [sp, #12]
 802655a:	2b00      	cmp	r3, #0
 802655c:	bfb8      	it	lt
 802655e:	f04f 33ff 	movlt.w	r3, #4294967295
 8026562:	3402      	adds	r4, #2
 8026564:	9305      	str	r3, [sp, #20]
 8026566:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802664c <_vfiprintf_r+0x25c>
 802656a:	7821      	ldrb	r1, [r4, #0]
 802656c:	2203      	movs	r2, #3
 802656e:	4650      	mov	r0, sl
 8026570:	f7d9 fece 	bl	8000310 <memchr>
 8026574:	b140      	cbz	r0, 8026588 <_vfiprintf_r+0x198>
 8026576:	2340      	movs	r3, #64	; 0x40
 8026578:	eba0 000a 	sub.w	r0, r0, sl
 802657c:	fa03 f000 	lsl.w	r0, r3, r0
 8026580:	9b04      	ldr	r3, [sp, #16]
 8026582:	4303      	orrs	r3, r0
 8026584:	3401      	adds	r4, #1
 8026586:	9304      	str	r3, [sp, #16]
 8026588:	f814 1b01 	ldrb.w	r1, [r4], #1
 802658c:	482c      	ldr	r0, [pc, #176]	; (8026640 <_vfiprintf_r+0x250>)
 802658e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8026592:	2206      	movs	r2, #6
 8026594:	f7d9 febc 	bl	8000310 <memchr>
 8026598:	2800      	cmp	r0, #0
 802659a:	d03f      	beq.n	802661c <_vfiprintf_r+0x22c>
 802659c:	4b29      	ldr	r3, [pc, #164]	; (8026644 <_vfiprintf_r+0x254>)
 802659e:	bb1b      	cbnz	r3, 80265e8 <_vfiprintf_r+0x1f8>
 80265a0:	9b03      	ldr	r3, [sp, #12]
 80265a2:	3307      	adds	r3, #7
 80265a4:	f023 0307 	bic.w	r3, r3, #7
 80265a8:	3308      	adds	r3, #8
 80265aa:	9303      	str	r3, [sp, #12]
 80265ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80265ae:	443b      	add	r3, r7
 80265b0:	9309      	str	r3, [sp, #36]	; 0x24
 80265b2:	e767      	b.n	8026484 <_vfiprintf_r+0x94>
 80265b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80265b8:	460c      	mov	r4, r1
 80265ba:	2001      	movs	r0, #1
 80265bc:	e7a5      	b.n	802650a <_vfiprintf_r+0x11a>
 80265be:	2300      	movs	r3, #0
 80265c0:	3401      	adds	r4, #1
 80265c2:	9305      	str	r3, [sp, #20]
 80265c4:	4619      	mov	r1, r3
 80265c6:	f04f 0c0a 	mov.w	ip, #10
 80265ca:	4620      	mov	r0, r4
 80265cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80265d0:	3a30      	subs	r2, #48	; 0x30
 80265d2:	2a09      	cmp	r2, #9
 80265d4:	d903      	bls.n	80265de <_vfiprintf_r+0x1ee>
 80265d6:	2b00      	cmp	r3, #0
 80265d8:	d0c5      	beq.n	8026566 <_vfiprintf_r+0x176>
 80265da:	9105      	str	r1, [sp, #20]
 80265dc:	e7c3      	b.n	8026566 <_vfiprintf_r+0x176>
 80265de:	fb0c 2101 	mla	r1, ip, r1, r2
 80265e2:	4604      	mov	r4, r0
 80265e4:	2301      	movs	r3, #1
 80265e6:	e7f0      	b.n	80265ca <_vfiprintf_r+0x1da>
 80265e8:	ab03      	add	r3, sp, #12
 80265ea:	9300      	str	r3, [sp, #0]
 80265ec:	462a      	mov	r2, r5
 80265ee:	4b16      	ldr	r3, [pc, #88]	; (8026648 <_vfiprintf_r+0x258>)
 80265f0:	a904      	add	r1, sp, #16
 80265f2:	4630      	mov	r0, r6
 80265f4:	f000 f8bc 	bl	8026770 <_printf_float>
 80265f8:	4607      	mov	r7, r0
 80265fa:	1c78      	adds	r0, r7, #1
 80265fc:	d1d6      	bne.n	80265ac <_vfiprintf_r+0x1bc>
 80265fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026600:	07d9      	lsls	r1, r3, #31
 8026602:	d405      	bmi.n	8026610 <_vfiprintf_r+0x220>
 8026604:	89ab      	ldrh	r3, [r5, #12]
 8026606:	059a      	lsls	r2, r3, #22
 8026608:	d402      	bmi.n	8026610 <_vfiprintf_r+0x220>
 802660a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802660c:	f7ff fdbc 	bl	8026188 <__retarget_lock_release_recursive>
 8026610:	89ab      	ldrh	r3, [r5, #12]
 8026612:	065b      	lsls	r3, r3, #25
 8026614:	f53f af12 	bmi.w	802643c <_vfiprintf_r+0x4c>
 8026618:	9809      	ldr	r0, [sp, #36]	; 0x24
 802661a:	e711      	b.n	8026440 <_vfiprintf_r+0x50>
 802661c:	ab03      	add	r3, sp, #12
 802661e:	9300      	str	r3, [sp, #0]
 8026620:	462a      	mov	r2, r5
 8026622:	4b09      	ldr	r3, [pc, #36]	; (8026648 <_vfiprintf_r+0x258>)
 8026624:	a904      	add	r1, sp, #16
 8026626:	4630      	mov	r0, r6
 8026628:	f000 fb2e 	bl	8026c88 <_printf_i>
 802662c:	e7e4      	b.n	80265f8 <_vfiprintf_r+0x208>
 802662e:	bf00      	nop
 8026630:	0802eda4 	.word	0x0802eda4
 8026634:	0802edc4 	.word	0x0802edc4
 8026638:	0802ed84 	.word	0x0802ed84
 802663c:	0802eec0 	.word	0x0802eec0
 8026640:	0802eeca 	.word	0x0802eeca
 8026644:	08026771 	.word	0x08026771
 8026648:	080263cb 	.word	0x080263cb
 802664c:	0802eec6 	.word	0x0802eec6

08026650 <__cvt>:
 8026650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026652:	ed2d 8b02 	vpush	{d8}
 8026656:	eeb0 8b40 	vmov.f64	d8, d0
 802665a:	b085      	sub	sp, #20
 802665c:	4617      	mov	r7, r2
 802665e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8026660:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8026662:	ee18 2a90 	vmov	r2, s17
 8026666:	f025 0520 	bic.w	r5, r5, #32
 802666a:	2a00      	cmp	r2, #0
 802666c:	bfb6      	itet	lt
 802666e:	222d      	movlt	r2, #45	; 0x2d
 8026670:	2200      	movge	r2, #0
 8026672:	eeb1 8b40 	vneglt.f64	d8, d0
 8026676:	2d46      	cmp	r5, #70	; 0x46
 8026678:	460c      	mov	r4, r1
 802667a:	701a      	strb	r2, [r3, #0]
 802667c:	d004      	beq.n	8026688 <__cvt+0x38>
 802667e:	2d45      	cmp	r5, #69	; 0x45
 8026680:	d100      	bne.n	8026684 <__cvt+0x34>
 8026682:	3401      	adds	r4, #1
 8026684:	2102      	movs	r1, #2
 8026686:	e000      	b.n	802668a <__cvt+0x3a>
 8026688:	2103      	movs	r1, #3
 802668a:	ab03      	add	r3, sp, #12
 802668c:	9301      	str	r3, [sp, #4]
 802668e:	ab02      	add	r3, sp, #8
 8026690:	9300      	str	r3, [sp, #0]
 8026692:	4622      	mov	r2, r4
 8026694:	4633      	mov	r3, r6
 8026696:	eeb0 0b48 	vmov.f64	d0, d8
 802669a:	f001 fcd1 	bl	8028040 <_dtoa_r>
 802669e:	2d47      	cmp	r5, #71	; 0x47
 80266a0:	d109      	bne.n	80266b6 <__cvt+0x66>
 80266a2:	07fb      	lsls	r3, r7, #31
 80266a4:	d407      	bmi.n	80266b6 <__cvt+0x66>
 80266a6:	9b03      	ldr	r3, [sp, #12]
 80266a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80266aa:	1a1b      	subs	r3, r3, r0
 80266ac:	6013      	str	r3, [r2, #0]
 80266ae:	b005      	add	sp, #20
 80266b0:	ecbd 8b02 	vpop	{d8}
 80266b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80266b6:	2d46      	cmp	r5, #70	; 0x46
 80266b8:	eb00 0204 	add.w	r2, r0, r4
 80266bc:	d10c      	bne.n	80266d8 <__cvt+0x88>
 80266be:	7803      	ldrb	r3, [r0, #0]
 80266c0:	2b30      	cmp	r3, #48	; 0x30
 80266c2:	d107      	bne.n	80266d4 <__cvt+0x84>
 80266c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80266c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80266cc:	bf1c      	itt	ne
 80266ce:	f1c4 0401 	rsbne	r4, r4, #1
 80266d2:	6034      	strne	r4, [r6, #0]
 80266d4:	6833      	ldr	r3, [r6, #0]
 80266d6:	441a      	add	r2, r3
 80266d8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80266dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80266e0:	bf08      	it	eq
 80266e2:	9203      	streq	r2, [sp, #12]
 80266e4:	2130      	movs	r1, #48	; 0x30
 80266e6:	9b03      	ldr	r3, [sp, #12]
 80266e8:	4293      	cmp	r3, r2
 80266ea:	d2dc      	bcs.n	80266a6 <__cvt+0x56>
 80266ec:	1c5c      	adds	r4, r3, #1
 80266ee:	9403      	str	r4, [sp, #12]
 80266f0:	7019      	strb	r1, [r3, #0]
 80266f2:	e7f8      	b.n	80266e6 <__cvt+0x96>

080266f4 <__exponent>:
 80266f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80266f6:	4603      	mov	r3, r0
 80266f8:	2900      	cmp	r1, #0
 80266fa:	bfb8      	it	lt
 80266fc:	4249      	neglt	r1, r1
 80266fe:	f803 2b02 	strb.w	r2, [r3], #2
 8026702:	bfb4      	ite	lt
 8026704:	222d      	movlt	r2, #45	; 0x2d
 8026706:	222b      	movge	r2, #43	; 0x2b
 8026708:	2909      	cmp	r1, #9
 802670a:	7042      	strb	r2, [r0, #1]
 802670c:	dd2a      	ble.n	8026764 <__exponent+0x70>
 802670e:	f10d 0407 	add.w	r4, sp, #7
 8026712:	46a4      	mov	ip, r4
 8026714:	270a      	movs	r7, #10
 8026716:	46a6      	mov	lr, r4
 8026718:	460a      	mov	r2, r1
 802671a:	fb91 f6f7 	sdiv	r6, r1, r7
 802671e:	fb07 1516 	mls	r5, r7, r6, r1
 8026722:	3530      	adds	r5, #48	; 0x30
 8026724:	2a63      	cmp	r2, #99	; 0x63
 8026726:	f104 34ff 	add.w	r4, r4, #4294967295
 802672a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 802672e:	4631      	mov	r1, r6
 8026730:	dcf1      	bgt.n	8026716 <__exponent+0x22>
 8026732:	3130      	adds	r1, #48	; 0x30
 8026734:	f1ae 0502 	sub.w	r5, lr, #2
 8026738:	f804 1c01 	strb.w	r1, [r4, #-1]
 802673c:	1c44      	adds	r4, r0, #1
 802673e:	4629      	mov	r1, r5
 8026740:	4561      	cmp	r1, ip
 8026742:	d30a      	bcc.n	802675a <__exponent+0x66>
 8026744:	f10d 0209 	add.w	r2, sp, #9
 8026748:	eba2 020e 	sub.w	r2, r2, lr
 802674c:	4565      	cmp	r5, ip
 802674e:	bf88      	it	hi
 8026750:	2200      	movhi	r2, #0
 8026752:	4413      	add	r3, r2
 8026754:	1a18      	subs	r0, r3, r0
 8026756:	b003      	add	sp, #12
 8026758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802675a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802675e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8026762:	e7ed      	b.n	8026740 <__exponent+0x4c>
 8026764:	2330      	movs	r3, #48	; 0x30
 8026766:	3130      	adds	r1, #48	; 0x30
 8026768:	7083      	strb	r3, [r0, #2]
 802676a:	70c1      	strb	r1, [r0, #3]
 802676c:	1d03      	adds	r3, r0, #4
 802676e:	e7f1      	b.n	8026754 <__exponent+0x60>

08026770 <_printf_float>:
 8026770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026774:	b08b      	sub	sp, #44	; 0x2c
 8026776:	460c      	mov	r4, r1
 8026778:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 802677c:	4616      	mov	r6, r2
 802677e:	461f      	mov	r7, r3
 8026780:	4605      	mov	r5, r0
 8026782:	f002 fb9d 	bl	8028ec0 <_localeconv_r>
 8026786:	f8d0 b000 	ldr.w	fp, [r0]
 802678a:	4658      	mov	r0, fp
 802678c:	f7d9 fdb2 	bl	80002f4 <strlen>
 8026790:	2300      	movs	r3, #0
 8026792:	9308      	str	r3, [sp, #32]
 8026794:	f8d8 3000 	ldr.w	r3, [r8]
 8026798:	f894 9018 	ldrb.w	r9, [r4, #24]
 802679c:	6822      	ldr	r2, [r4, #0]
 802679e:	3307      	adds	r3, #7
 80267a0:	f023 0307 	bic.w	r3, r3, #7
 80267a4:	f103 0108 	add.w	r1, r3, #8
 80267a8:	f8c8 1000 	str.w	r1, [r8]
 80267ac:	4682      	mov	sl, r0
 80267ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80267b2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80267b6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8026a18 <_printf_float+0x2a8>
 80267ba:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80267be:	eeb0 6bc0 	vabs.f64	d6, d0
 80267c2:	eeb4 6b47 	vcmp.f64	d6, d7
 80267c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80267ca:	dd24      	ble.n	8026816 <_printf_float+0xa6>
 80267cc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80267d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80267d4:	d502      	bpl.n	80267dc <_printf_float+0x6c>
 80267d6:	232d      	movs	r3, #45	; 0x2d
 80267d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80267dc:	4b90      	ldr	r3, [pc, #576]	; (8026a20 <_printf_float+0x2b0>)
 80267de:	4891      	ldr	r0, [pc, #580]	; (8026a24 <_printf_float+0x2b4>)
 80267e0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80267e4:	bf94      	ite	ls
 80267e6:	4698      	movls	r8, r3
 80267e8:	4680      	movhi	r8, r0
 80267ea:	2303      	movs	r3, #3
 80267ec:	6123      	str	r3, [r4, #16]
 80267ee:	f022 0204 	bic.w	r2, r2, #4
 80267f2:	2300      	movs	r3, #0
 80267f4:	6022      	str	r2, [r4, #0]
 80267f6:	9304      	str	r3, [sp, #16]
 80267f8:	9700      	str	r7, [sp, #0]
 80267fa:	4633      	mov	r3, r6
 80267fc:	aa09      	add	r2, sp, #36	; 0x24
 80267fe:	4621      	mov	r1, r4
 8026800:	4628      	mov	r0, r5
 8026802:	f000 f9d3 	bl	8026bac <_printf_common>
 8026806:	3001      	adds	r0, #1
 8026808:	f040 808a 	bne.w	8026920 <_printf_float+0x1b0>
 802680c:	f04f 30ff 	mov.w	r0, #4294967295
 8026810:	b00b      	add	sp, #44	; 0x2c
 8026812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026816:	eeb4 0b40 	vcmp.f64	d0, d0
 802681a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802681e:	d709      	bvc.n	8026834 <_printf_float+0xc4>
 8026820:	ee10 3a90 	vmov	r3, s1
 8026824:	2b00      	cmp	r3, #0
 8026826:	bfbc      	itt	lt
 8026828:	232d      	movlt	r3, #45	; 0x2d
 802682a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 802682e:	487e      	ldr	r0, [pc, #504]	; (8026a28 <_printf_float+0x2b8>)
 8026830:	4b7e      	ldr	r3, [pc, #504]	; (8026a2c <_printf_float+0x2bc>)
 8026832:	e7d5      	b.n	80267e0 <_printf_float+0x70>
 8026834:	6863      	ldr	r3, [r4, #4]
 8026836:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 802683a:	9104      	str	r1, [sp, #16]
 802683c:	1c59      	adds	r1, r3, #1
 802683e:	d13c      	bne.n	80268ba <_printf_float+0x14a>
 8026840:	2306      	movs	r3, #6
 8026842:	6063      	str	r3, [r4, #4]
 8026844:	2300      	movs	r3, #0
 8026846:	9303      	str	r3, [sp, #12]
 8026848:	ab08      	add	r3, sp, #32
 802684a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 802684e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8026852:	ab07      	add	r3, sp, #28
 8026854:	6861      	ldr	r1, [r4, #4]
 8026856:	9300      	str	r3, [sp, #0]
 8026858:	6022      	str	r2, [r4, #0]
 802685a:	f10d 031b 	add.w	r3, sp, #27
 802685e:	4628      	mov	r0, r5
 8026860:	f7ff fef6 	bl	8026650 <__cvt>
 8026864:	9b04      	ldr	r3, [sp, #16]
 8026866:	9907      	ldr	r1, [sp, #28]
 8026868:	2b47      	cmp	r3, #71	; 0x47
 802686a:	4680      	mov	r8, r0
 802686c:	d108      	bne.n	8026880 <_printf_float+0x110>
 802686e:	1cc8      	adds	r0, r1, #3
 8026870:	db02      	blt.n	8026878 <_printf_float+0x108>
 8026872:	6863      	ldr	r3, [r4, #4]
 8026874:	4299      	cmp	r1, r3
 8026876:	dd41      	ble.n	80268fc <_printf_float+0x18c>
 8026878:	f1a9 0902 	sub.w	r9, r9, #2
 802687c:	fa5f f989 	uxtb.w	r9, r9
 8026880:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8026884:	d820      	bhi.n	80268c8 <_printf_float+0x158>
 8026886:	3901      	subs	r1, #1
 8026888:	464a      	mov	r2, r9
 802688a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802688e:	9107      	str	r1, [sp, #28]
 8026890:	f7ff ff30 	bl	80266f4 <__exponent>
 8026894:	9a08      	ldr	r2, [sp, #32]
 8026896:	9004      	str	r0, [sp, #16]
 8026898:	1813      	adds	r3, r2, r0
 802689a:	2a01      	cmp	r2, #1
 802689c:	6123      	str	r3, [r4, #16]
 802689e:	dc02      	bgt.n	80268a6 <_printf_float+0x136>
 80268a0:	6822      	ldr	r2, [r4, #0]
 80268a2:	07d2      	lsls	r2, r2, #31
 80268a4:	d501      	bpl.n	80268aa <_printf_float+0x13a>
 80268a6:	3301      	adds	r3, #1
 80268a8:	6123      	str	r3, [r4, #16]
 80268aa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80268ae:	2b00      	cmp	r3, #0
 80268b0:	d0a2      	beq.n	80267f8 <_printf_float+0x88>
 80268b2:	232d      	movs	r3, #45	; 0x2d
 80268b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80268b8:	e79e      	b.n	80267f8 <_printf_float+0x88>
 80268ba:	9904      	ldr	r1, [sp, #16]
 80268bc:	2947      	cmp	r1, #71	; 0x47
 80268be:	d1c1      	bne.n	8026844 <_printf_float+0xd4>
 80268c0:	2b00      	cmp	r3, #0
 80268c2:	d1bf      	bne.n	8026844 <_printf_float+0xd4>
 80268c4:	2301      	movs	r3, #1
 80268c6:	e7bc      	b.n	8026842 <_printf_float+0xd2>
 80268c8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80268cc:	d118      	bne.n	8026900 <_printf_float+0x190>
 80268ce:	2900      	cmp	r1, #0
 80268d0:	6863      	ldr	r3, [r4, #4]
 80268d2:	dd0b      	ble.n	80268ec <_printf_float+0x17c>
 80268d4:	6121      	str	r1, [r4, #16]
 80268d6:	b913      	cbnz	r3, 80268de <_printf_float+0x16e>
 80268d8:	6822      	ldr	r2, [r4, #0]
 80268da:	07d0      	lsls	r0, r2, #31
 80268dc:	d502      	bpl.n	80268e4 <_printf_float+0x174>
 80268de:	3301      	adds	r3, #1
 80268e0:	440b      	add	r3, r1
 80268e2:	6123      	str	r3, [r4, #16]
 80268e4:	2300      	movs	r3, #0
 80268e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80268e8:	9304      	str	r3, [sp, #16]
 80268ea:	e7de      	b.n	80268aa <_printf_float+0x13a>
 80268ec:	b913      	cbnz	r3, 80268f4 <_printf_float+0x184>
 80268ee:	6822      	ldr	r2, [r4, #0]
 80268f0:	07d2      	lsls	r2, r2, #31
 80268f2:	d501      	bpl.n	80268f8 <_printf_float+0x188>
 80268f4:	3302      	adds	r3, #2
 80268f6:	e7f4      	b.n	80268e2 <_printf_float+0x172>
 80268f8:	2301      	movs	r3, #1
 80268fa:	e7f2      	b.n	80268e2 <_printf_float+0x172>
 80268fc:	f04f 0967 	mov.w	r9, #103	; 0x67
 8026900:	9b08      	ldr	r3, [sp, #32]
 8026902:	4299      	cmp	r1, r3
 8026904:	db05      	blt.n	8026912 <_printf_float+0x1a2>
 8026906:	6823      	ldr	r3, [r4, #0]
 8026908:	6121      	str	r1, [r4, #16]
 802690a:	07d8      	lsls	r0, r3, #31
 802690c:	d5ea      	bpl.n	80268e4 <_printf_float+0x174>
 802690e:	1c4b      	adds	r3, r1, #1
 8026910:	e7e7      	b.n	80268e2 <_printf_float+0x172>
 8026912:	2900      	cmp	r1, #0
 8026914:	bfd4      	ite	le
 8026916:	f1c1 0202 	rsble	r2, r1, #2
 802691a:	2201      	movgt	r2, #1
 802691c:	4413      	add	r3, r2
 802691e:	e7e0      	b.n	80268e2 <_printf_float+0x172>
 8026920:	6823      	ldr	r3, [r4, #0]
 8026922:	055a      	lsls	r2, r3, #21
 8026924:	d407      	bmi.n	8026936 <_printf_float+0x1c6>
 8026926:	6923      	ldr	r3, [r4, #16]
 8026928:	4642      	mov	r2, r8
 802692a:	4631      	mov	r1, r6
 802692c:	4628      	mov	r0, r5
 802692e:	47b8      	blx	r7
 8026930:	3001      	adds	r0, #1
 8026932:	d12a      	bne.n	802698a <_printf_float+0x21a>
 8026934:	e76a      	b.n	802680c <_printf_float+0x9c>
 8026936:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 802693a:	f240 80e2 	bls.w	8026b02 <_printf_float+0x392>
 802693e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8026942:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8026946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802694a:	d133      	bne.n	80269b4 <_printf_float+0x244>
 802694c:	4a38      	ldr	r2, [pc, #224]	; (8026a30 <_printf_float+0x2c0>)
 802694e:	2301      	movs	r3, #1
 8026950:	4631      	mov	r1, r6
 8026952:	4628      	mov	r0, r5
 8026954:	47b8      	blx	r7
 8026956:	3001      	adds	r0, #1
 8026958:	f43f af58 	beq.w	802680c <_printf_float+0x9c>
 802695c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8026960:	429a      	cmp	r2, r3
 8026962:	db02      	blt.n	802696a <_printf_float+0x1fa>
 8026964:	6823      	ldr	r3, [r4, #0]
 8026966:	07d8      	lsls	r0, r3, #31
 8026968:	d50f      	bpl.n	802698a <_printf_float+0x21a>
 802696a:	4653      	mov	r3, sl
 802696c:	465a      	mov	r2, fp
 802696e:	4631      	mov	r1, r6
 8026970:	4628      	mov	r0, r5
 8026972:	47b8      	blx	r7
 8026974:	3001      	adds	r0, #1
 8026976:	f43f af49 	beq.w	802680c <_printf_float+0x9c>
 802697a:	f04f 0800 	mov.w	r8, #0
 802697e:	f104 091a 	add.w	r9, r4, #26
 8026982:	9b08      	ldr	r3, [sp, #32]
 8026984:	3b01      	subs	r3, #1
 8026986:	4543      	cmp	r3, r8
 8026988:	dc09      	bgt.n	802699e <_printf_float+0x22e>
 802698a:	6823      	ldr	r3, [r4, #0]
 802698c:	079b      	lsls	r3, r3, #30
 802698e:	f100 8108 	bmi.w	8026ba2 <_printf_float+0x432>
 8026992:	68e0      	ldr	r0, [r4, #12]
 8026994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026996:	4298      	cmp	r0, r3
 8026998:	bfb8      	it	lt
 802699a:	4618      	movlt	r0, r3
 802699c:	e738      	b.n	8026810 <_printf_float+0xa0>
 802699e:	2301      	movs	r3, #1
 80269a0:	464a      	mov	r2, r9
 80269a2:	4631      	mov	r1, r6
 80269a4:	4628      	mov	r0, r5
 80269a6:	47b8      	blx	r7
 80269a8:	3001      	adds	r0, #1
 80269aa:	f43f af2f 	beq.w	802680c <_printf_float+0x9c>
 80269ae:	f108 0801 	add.w	r8, r8, #1
 80269b2:	e7e6      	b.n	8026982 <_printf_float+0x212>
 80269b4:	9b07      	ldr	r3, [sp, #28]
 80269b6:	2b00      	cmp	r3, #0
 80269b8:	dc3c      	bgt.n	8026a34 <_printf_float+0x2c4>
 80269ba:	4a1d      	ldr	r2, [pc, #116]	; (8026a30 <_printf_float+0x2c0>)
 80269bc:	2301      	movs	r3, #1
 80269be:	4631      	mov	r1, r6
 80269c0:	4628      	mov	r0, r5
 80269c2:	47b8      	blx	r7
 80269c4:	3001      	adds	r0, #1
 80269c6:	f43f af21 	beq.w	802680c <_printf_float+0x9c>
 80269ca:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80269ce:	4313      	orrs	r3, r2
 80269d0:	d102      	bne.n	80269d8 <_printf_float+0x268>
 80269d2:	6823      	ldr	r3, [r4, #0]
 80269d4:	07d9      	lsls	r1, r3, #31
 80269d6:	d5d8      	bpl.n	802698a <_printf_float+0x21a>
 80269d8:	4653      	mov	r3, sl
 80269da:	465a      	mov	r2, fp
 80269dc:	4631      	mov	r1, r6
 80269de:	4628      	mov	r0, r5
 80269e0:	47b8      	blx	r7
 80269e2:	3001      	adds	r0, #1
 80269e4:	f43f af12 	beq.w	802680c <_printf_float+0x9c>
 80269e8:	f04f 0900 	mov.w	r9, #0
 80269ec:	f104 0a1a 	add.w	sl, r4, #26
 80269f0:	9b07      	ldr	r3, [sp, #28]
 80269f2:	425b      	negs	r3, r3
 80269f4:	454b      	cmp	r3, r9
 80269f6:	dc01      	bgt.n	80269fc <_printf_float+0x28c>
 80269f8:	9b08      	ldr	r3, [sp, #32]
 80269fa:	e795      	b.n	8026928 <_printf_float+0x1b8>
 80269fc:	2301      	movs	r3, #1
 80269fe:	4652      	mov	r2, sl
 8026a00:	4631      	mov	r1, r6
 8026a02:	4628      	mov	r0, r5
 8026a04:	47b8      	blx	r7
 8026a06:	3001      	adds	r0, #1
 8026a08:	f43f af00 	beq.w	802680c <_printf_float+0x9c>
 8026a0c:	f109 0901 	add.w	r9, r9, #1
 8026a10:	e7ee      	b.n	80269f0 <_printf_float+0x280>
 8026a12:	bf00      	nop
 8026a14:	f3af 8000 	nop.w
 8026a18:	ffffffff 	.word	0xffffffff
 8026a1c:	7fefffff 	.word	0x7fefffff
 8026a20:	0802eed1 	.word	0x0802eed1
 8026a24:	0802eed5 	.word	0x0802eed5
 8026a28:	0802eedd 	.word	0x0802eedd
 8026a2c:	0802eed9 	.word	0x0802eed9
 8026a30:	0802f8b0 	.word	0x0802f8b0
 8026a34:	9a08      	ldr	r2, [sp, #32]
 8026a36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8026a38:	429a      	cmp	r2, r3
 8026a3a:	bfa8      	it	ge
 8026a3c:	461a      	movge	r2, r3
 8026a3e:	2a00      	cmp	r2, #0
 8026a40:	4691      	mov	r9, r2
 8026a42:	dc38      	bgt.n	8026ab6 <_printf_float+0x346>
 8026a44:	2300      	movs	r3, #0
 8026a46:	9305      	str	r3, [sp, #20]
 8026a48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8026a4c:	f104 021a 	add.w	r2, r4, #26
 8026a50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8026a52:	9905      	ldr	r1, [sp, #20]
 8026a54:	9304      	str	r3, [sp, #16]
 8026a56:	eba3 0309 	sub.w	r3, r3, r9
 8026a5a:	428b      	cmp	r3, r1
 8026a5c:	dc33      	bgt.n	8026ac6 <_printf_float+0x356>
 8026a5e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8026a62:	429a      	cmp	r2, r3
 8026a64:	db3c      	blt.n	8026ae0 <_printf_float+0x370>
 8026a66:	6823      	ldr	r3, [r4, #0]
 8026a68:	07da      	lsls	r2, r3, #31
 8026a6a:	d439      	bmi.n	8026ae0 <_printf_float+0x370>
 8026a6c:	9a08      	ldr	r2, [sp, #32]
 8026a6e:	9b04      	ldr	r3, [sp, #16]
 8026a70:	9907      	ldr	r1, [sp, #28]
 8026a72:	1ad3      	subs	r3, r2, r3
 8026a74:	eba2 0901 	sub.w	r9, r2, r1
 8026a78:	4599      	cmp	r9, r3
 8026a7a:	bfa8      	it	ge
 8026a7c:	4699      	movge	r9, r3
 8026a7e:	f1b9 0f00 	cmp.w	r9, #0
 8026a82:	dc35      	bgt.n	8026af0 <_printf_float+0x380>
 8026a84:	f04f 0800 	mov.w	r8, #0
 8026a88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8026a8c:	f104 0a1a 	add.w	sl, r4, #26
 8026a90:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8026a94:	1a9b      	subs	r3, r3, r2
 8026a96:	eba3 0309 	sub.w	r3, r3, r9
 8026a9a:	4543      	cmp	r3, r8
 8026a9c:	f77f af75 	ble.w	802698a <_printf_float+0x21a>
 8026aa0:	2301      	movs	r3, #1
 8026aa2:	4652      	mov	r2, sl
 8026aa4:	4631      	mov	r1, r6
 8026aa6:	4628      	mov	r0, r5
 8026aa8:	47b8      	blx	r7
 8026aaa:	3001      	adds	r0, #1
 8026aac:	f43f aeae 	beq.w	802680c <_printf_float+0x9c>
 8026ab0:	f108 0801 	add.w	r8, r8, #1
 8026ab4:	e7ec      	b.n	8026a90 <_printf_float+0x320>
 8026ab6:	4613      	mov	r3, r2
 8026ab8:	4631      	mov	r1, r6
 8026aba:	4642      	mov	r2, r8
 8026abc:	4628      	mov	r0, r5
 8026abe:	47b8      	blx	r7
 8026ac0:	3001      	adds	r0, #1
 8026ac2:	d1bf      	bne.n	8026a44 <_printf_float+0x2d4>
 8026ac4:	e6a2      	b.n	802680c <_printf_float+0x9c>
 8026ac6:	2301      	movs	r3, #1
 8026ac8:	4631      	mov	r1, r6
 8026aca:	4628      	mov	r0, r5
 8026acc:	9204      	str	r2, [sp, #16]
 8026ace:	47b8      	blx	r7
 8026ad0:	3001      	adds	r0, #1
 8026ad2:	f43f ae9b 	beq.w	802680c <_printf_float+0x9c>
 8026ad6:	9b05      	ldr	r3, [sp, #20]
 8026ad8:	9a04      	ldr	r2, [sp, #16]
 8026ada:	3301      	adds	r3, #1
 8026adc:	9305      	str	r3, [sp, #20]
 8026ade:	e7b7      	b.n	8026a50 <_printf_float+0x2e0>
 8026ae0:	4653      	mov	r3, sl
 8026ae2:	465a      	mov	r2, fp
 8026ae4:	4631      	mov	r1, r6
 8026ae6:	4628      	mov	r0, r5
 8026ae8:	47b8      	blx	r7
 8026aea:	3001      	adds	r0, #1
 8026aec:	d1be      	bne.n	8026a6c <_printf_float+0x2fc>
 8026aee:	e68d      	b.n	802680c <_printf_float+0x9c>
 8026af0:	9a04      	ldr	r2, [sp, #16]
 8026af2:	464b      	mov	r3, r9
 8026af4:	4442      	add	r2, r8
 8026af6:	4631      	mov	r1, r6
 8026af8:	4628      	mov	r0, r5
 8026afa:	47b8      	blx	r7
 8026afc:	3001      	adds	r0, #1
 8026afe:	d1c1      	bne.n	8026a84 <_printf_float+0x314>
 8026b00:	e684      	b.n	802680c <_printf_float+0x9c>
 8026b02:	9a08      	ldr	r2, [sp, #32]
 8026b04:	2a01      	cmp	r2, #1
 8026b06:	dc01      	bgt.n	8026b0c <_printf_float+0x39c>
 8026b08:	07db      	lsls	r3, r3, #31
 8026b0a:	d537      	bpl.n	8026b7c <_printf_float+0x40c>
 8026b0c:	2301      	movs	r3, #1
 8026b0e:	4642      	mov	r2, r8
 8026b10:	4631      	mov	r1, r6
 8026b12:	4628      	mov	r0, r5
 8026b14:	47b8      	blx	r7
 8026b16:	3001      	adds	r0, #1
 8026b18:	f43f ae78 	beq.w	802680c <_printf_float+0x9c>
 8026b1c:	4653      	mov	r3, sl
 8026b1e:	465a      	mov	r2, fp
 8026b20:	4631      	mov	r1, r6
 8026b22:	4628      	mov	r0, r5
 8026b24:	47b8      	blx	r7
 8026b26:	3001      	adds	r0, #1
 8026b28:	f43f ae70 	beq.w	802680c <_printf_float+0x9c>
 8026b2c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8026b30:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8026b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026b38:	d01b      	beq.n	8026b72 <_printf_float+0x402>
 8026b3a:	9b08      	ldr	r3, [sp, #32]
 8026b3c:	f108 0201 	add.w	r2, r8, #1
 8026b40:	3b01      	subs	r3, #1
 8026b42:	4631      	mov	r1, r6
 8026b44:	4628      	mov	r0, r5
 8026b46:	47b8      	blx	r7
 8026b48:	3001      	adds	r0, #1
 8026b4a:	d10e      	bne.n	8026b6a <_printf_float+0x3fa>
 8026b4c:	e65e      	b.n	802680c <_printf_float+0x9c>
 8026b4e:	2301      	movs	r3, #1
 8026b50:	464a      	mov	r2, r9
 8026b52:	4631      	mov	r1, r6
 8026b54:	4628      	mov	r0, r5
 8026b56:	47b8      	blx	r7
 8026b58:	3001      	adds	r0, #1
 8026b5a:	f43f ae57 	beq.w	802680c <_printf_float+0x9c>
 8026b5e:	f108 0801 	add.w	r8, r8, #1
 8026b62:	9b08      	ldr	r3, [sp, #32]
 8026b64:	3b01      	subs	r3, #1
 8026b66:	4543      	cmp	r3, r8
 8026b68:	dcf1      	bgt.n	8026b4e <_printf_float+0x3de>
 8026b6a:	9b04      	ldr	r3, [sp, #16]
 8026b6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8026b70:	e6db      	b.n	802692a <_printf_float+0x1ba>
 8026b72:	f04f 0800 	mov.w	r8, #0
 8026b76:	f104 091a 	add.w	r9, r4, #26
 8026b7a:	e7f2      	b.n	8026b62 <_printf_float+0x3f2>
 8026b7c:	2301      	movs	r3, #1
 8026b7e:	4642      	mov	r2, r8
 8026b80:	e7df      	b.n	8026b42 <_printf_float+0x3d2>
 8026b82:	2301      	movs	r3, #1
 8026b84:	464a      	mov	r2, r9
 8026b86:	4631      	mov	r1, r6
 8026b88:	4628      	mov	r0, r5
 8026b8a:	47b8      	blx	r7
 8026b8c:	3001      	adds	r0, #1
 8026b8e:	f43f ae3d 	beq.w	802680c <_printf_float+0x9c>
 8026b92:	f108 0801 	add.w	r8, r8, #1
 8026b96:	68e3      	ldr	r3, [r4, #12]
 8026b98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8026b9a:	1a5b      	subs	r3, r3, r1
 8026b9c:	4543      	cmp	r3, r8
 8026b9e:	dcf0      	bgt.n	8026b82 <_printf_float+0x412>
 8026ba0:	e6f7      	b.n	8026992 <_printf_float+0x222>
 8026ba2:	f04f 0800 	mov.w	r8, #0
 8026ba6:	f104 0919 	add.w	r9, r4, #25
 8026baa:	e7f4      	b.n	8026b96 <_printf_float+0x426>

08026bac <_printf_common>:
 8026bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026bb0:	4616      	mov	r6, r2
 8026bb2:	4699      	mov	r9, r3
 8026bb4:	688a      	ldr	r2, [r1, #8]
 8026bb6:	690b      	ldr	r3, [r1, #16]
 8026bb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8026bbc:	4293      	cmp	r3, r2
 8026bbe:	bfb8      	it	lt
 8026bc0:	4613      	movlt	r3, r2
 8026bc2:	6033      	str	r3, [r6, #0]
 8026bc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8026bc8:	4607      	mov	r7, r0
 8026bca:	460c      	mov	r4, r1
 8026bcc:	b10a      	cbz	r2, 8026bd2 <_printf_common+0x26>
 8026bce:	3301      	adds	r3, #1
 8026bd0:	6033      	str	r3, [r6, #0]
 8026bd2:	6823      	ldr	r3, [r4, #0]
 8026bd4:	0699      	lsls	r1, r3, #26
 8026bd6:	bf42      	ittt	mi
 8026bd8:	6833      	ldrmi	r3, [r6, #0]
 8026bda:	3302      	addmi	r3, #2
 8026bdc:	6033      	strmi	r3, [r6, #0]
 8026bde:	6825      	ldr	r5, [r4, #0]
 8026be0:	f015 0506 	ands.w	r5, r5, #6
 8026be4:	d106      	bne.n	8026bf4 <_printf_common+0x48>
 8026be6:	f104 0a19 	add.w	sl, r4, #25
 8026bea:	68e3      	ldr	r3, [r4, #12]
 8026bec:	6832      	ldr	r2, [r6, #0]
 8026bee:	1a9b      	subs	r3, r3, r2
 8026bf0:	42ab      	cmp	r3, r5
 8026bf2:	dc26      	bgt.n	8026c42 <_printf_common+0x96>
 8026bf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8026bf8:	1e13      	subs	r3, r2, #0
 8026bfa:	6822      	ldr	r2, [r4, #0]
 8026bfc:	bf18      	it	ne
 8026bfe:	2301      	movne	r3, #1
 8026c00:	0692      	lsls	r2, r2, #26
 8026c02:	d42b      	bmi.n	8026c5c <_printf_common+0xb0>
 8026c04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8026c08:	4649      	mov	r1, r9
 8026c0a:	4638      	mov	r0, r7
 8026c0c:	47c0      	blx	r8
 8026c0e:	3001      	adds	r0, #1
 8026c10:	d01e      	beq.n	8026c50 <_printf_common+0xa4>
 8026c12:	6823      	ldr	r3, [r4, #0]
 8026c14:	68e5      	ldr	r5, [r4, #12]
 8026c16:	6832      	ldr	r2, [r6, #0]
 8026c18:	f003 0306 	and.w	r3, r3, #6
 8026c1c:	2b04      	cmp	r3, #4
 8026c1e:	bf08      	it	eq
 8026c20:	1aad      	subeq	r5, r5, r2
 8026c22:	68a3      	ldr	r3, [r4, #8]
 8026c24:	6922      	ldr	r2, [r4, #16]
 8026c26:	bf0c      	ite	eq
 8026c28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8026c2c:	2500      	movne	r5, #0
 8026c2e:	4293      	cmp	r3, r2
 8026c30:	bfc4      	itt	gt
 8026c32:	1a9b      	subgt	r3, r3, r2
 8026c34:	18ed      	addgt	r5, r5, r3
 8026c36:	2600      	movs	r6, #0
 8026c38:	341a      	adds	r4, #26
 8026c3a:	42b5      	cmp	r5, r6
 8026c3c:	d11a      	bne.n	8026c74 <_printf_common+0xc8>
 8026c3e:	2000      	movs	r0, #0
 8026c40:	e008      	b.n	8026c54 <_printf_common+0xa8>
 8026c42:	2301      	movs	r3, #1
 8026c44:	4652      	mov	r2, sl
 8026c46:	4649      	mov	r1, r9
 8026c48:	4638      	mov	r0, r7
 8026c4a:	47c0      	blx	r8
 8026c4c:	3001      	adds	r0, #1
 8026c4e:	d103      	bne.n	8026c58 <_printf_common+0xac>
 8026c50:	f04f 30ff 	mov.w	r0, #4294967295
 8026c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026c58:	3501      	adds	r5, #1
 8026c5a:	e7c6      	b.n	8026bea <_printf_common+0x3e>
 8026c5c:	18e1      	adds	r1, r4, r3
 8026c5e:	1c5a      	adds	r2, r3, #1
 8026c60:	2030      	movs	r0, #48	; 0x30
 8026c62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8026c66:	4422      	add	r2, r4
 8026c68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8026c6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8026c70:	3302      	adds	r3, #2
 8026c72:	e7c7      	b.n	8026c04 <_printf_common+0x58>
 8026c74:	2301      	movs	r3, #1
 8026c76:	4622      	mov	r2, r4
 8026c78:	4649      	mov	r1, r9
 8026c7a:	4638      	mov	r0, r7
 8026c7c:	47c0      	blx	r8
 8026c7e:	3001      	adds	r0, #1
 8026c80:	d0e6      	beq.n	8026c50 <_printf_common+0xa4>
 8026c82:	3601      	adds	r6, #1
 8026c84:	e7d9      	b.n	8026c3a <_printf_common+0x8e>
	...

08026c88 <_printf_i>:
 8026c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8026c8c:	460c      	mov	r4, r1
 8026c8e:	4691      	mov	r9, r2
 8026c90:	7e27      	ldrb	r7, [r4, #24]
 8026c92:	990c      	ldr	r1, [sp, #48]	; 0x30
 8026c94:	2f78      	cmp	r7, #120	; 0x78
 8026c96:	4680      	mov	r8, r0
 8026c98:	469a      	mov	sl, r3
 8026c9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8026c9e:	d807      	bhi.n	8026cb0 <_printf_i+0x28>
 8026ca0:	2f62      	cmp	r7, #98	; 0x62
 8026ca2:	d80a      	bhi.n	8026cba <_printf_i+0x32>
 8026ca4:	2f00      	cmp	r7, #0
 8026ca6:	f000 80d8 	beq.w	8026e5a <_printf_i+0x1d2>
 8026caa:	2f58      	cmp	r7, #88	; 0x58
 8026cac:	f000 80a3 	beq.w	8026df6 <_printf_i+0x16e>
 8026cb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8026cb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8026cb8:	e03a      	b.n	8026d30 <_printf_i+0xa8>
 8026cba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8026cbe:	2b15      	cmp	r3, #21
 8026cc0:	d8f6      	bhi.n	8026cb0 <_printf_i+0x28>
 8026cc2:	a001      	add	r0, pc, #4	; (adr r0, 8026cc8 <_printf_i+0x40>)
 8026cc4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8026cc8:	08026d21 	.word	0x08026d21
 8026ccc:	08026d35 	.word	0x08026d35
 8026cd0:	08026cb1 	.word	0x08026cb1
 8026cd4:	08026cb1 	.word	0x08026cb1
 8026cd8:	08026cb1 	.word	0x08026cb1
 8026cdc:	08026cb1 	.word	0x08026cb1
 8026ce0:	08026d35 	.word	0x08026d35
 8026ce4:	08026cb1 	.word	0x08026cb1
 8026ce8:	08026cb1 	.word	0x08026cb1
 8026cec:	08026cb1 	.word	0x08026cb1
 8026cf0:	08026cb1 	.word	0x08026cb1
 8026cf4:	08026e41 	.word	0x08026e41
 8026cf8:	08026d65 	.word	0x08026d65
 8026cfc:	08026e23 	.word	0x08026e23
 8026d00:	08026cb1 	.word	0x08026cb1
 8026d04:	08026cb1 	.word	0x08026cb1
 8026d08:	08026e63 	.word	0x08026e63
 8026d0c:	08026cb1 	.word	0x08026cb1
 8026d10:	08026d65 	.word	0x08026d65
 8026d14:	08026cb1 	.word	0x08026cb1
 8026d18:	08026cb1 	.word	0x08026cb1
 8026d1c:	08026e2b 	.word	0x08026e2b
 8026d20:	680b      	ldr	r3, [r1, #0]
 8026d22:	1d1a      	adds	r2, r3, #4
 8026d24:	681b      	ldr	r3, [r3, #0]
 8026d26:	600a      	str	r2, [r1, #0]
 8026d28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8026d2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8026d30:	2301      	movs	r3, #1
 8026d32:	e0a3      	b.n	8026e7c <_printf_i+0x1f4>
 8026d34:	6825      	ldr	r5, [r4, #0]
 8026d36:	6808      	ldr	r0, [r1, #0]
 8026d38:	062e      	lsls	r6, r5, #24
 8026d3a:	f100 0304 	add.w	r3, r0, #4
 8026d3e:	d50a      	bpl.n	8026d56 <_printf_i+0xce>
 8026d40:	6805      	ldr	r5, [r0, #0]
 8026d42:	600b      	str	r3, [r1, #0]
 8026d44:	2d00      	cmp	r5, #0
 8026d46:	da03      	bge.n	8026d50 <_printf_i+0xc8>
 8026d48:	232d      	movs	r3, #45	; 0x2d
 8026d4a:	426d      	negs	r5, r5
 8026d4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026d50:	485e      	ldr	r0, [pc, #376]	; (8026ecc <_printf_i+0x244>)
 8026d52:	230a      	movs	r3, #10
 8026d54:	e019      	b.n	8026d8a <_printf_i+0x102>
 8026d56:	f015 0f40 	tst.w	r5, #64	; 0x40
 8026d5a:	6805      	ldr	r5, [r0, #0]
 8026d5c:	600b      	str	r3, [r1, #0]
 8026d5e:	bf18      	it	ne
 8026d60:	b22d      	sxthne	r5, r5
 8026d62:	e7ef      	b.n	8026d44 <_printf_i+0xbc>
 8026d64:	680b      	ldr	r3, [r1, #0]
 8026d66:	6825      	ldr	r5, [r4, #0]
 8026d68:	1d18      	adds	r0, r3, #4
 8026d6a:	6008      	str	r0, [r1, #0]
 8026d6c:	0628      	lsls	r0, r5, #24
 8026d6e:	d501      	bpl.n	8026d74 <_printf_i+0xec>
 8026d70:	681d      	ldr	r5, [r3, #0]
 8026d72:	e002      	b.n	8026d7a <_printf_i+0xf2>
 8026d74:	0669      	lsls	r1, r5, #25
 8026d76:	d5fb      	bpl.n	8026d70 <_printf_i+0xe8>
 8026d78:	881d      	ldrh	r5, [r3, #0]
 8026d7a:	4854      	ldr	r0, [pc, #336]	; (8026ecc <_printf_i+0x244>)
 8026d7c:	2f6f      	cmp	r7, #111	; 0x6f
 8026d7e:	bf0c      	ite	eq
 8026d80:	2308      	moveq	r3, #8
 8026d82:	230a      	movne	r3, #10
 8026d84:	2100      	movs	r1, #0
 8026d86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8026d8a:	6866      	ldr	r6, [r4, #4]
 8026d8c:	60a6      	str	r6, [r4, #8]
 8026d8e:	2e00      	cmp	r6, #0
 8026d90:	bfa2      	ittt	ge
 8026d92:	6821      	ldrge	r1, [r4, #0]
 8026d94:	f021 0104 	bicge.w	r1, r1, #4
 8026d98:	6021      	strge	r1, [r4, #0]
 8026d9a:	b90d      	cbnz	r5, 8026da0 <_printf_i+0x118>
 8026d9c:	2e00      	cmp	r6, #0
 8026d9e:	d04d      	beq.n	8026e3c <_printf_i+0x1b4>
 8026da0:	4616      	mov	r6, r2
 8026da2:	fbb5 f1f3 	udiv	r1, r5, r3
 8026da6:	fb03 5711 	mls	r7, r3, r1, r5
 8026daa:	5dc7      	ldrb	r7, [r0, r7]
 8026dac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8026db0:	462f      	mov	r7, r5
 8026db2:	42bb      	cmp	r3, r7
 8026db4:	460d      	mov	r5, r1
 8026db6:	d9f4      	bls.n	8026da2 <_printf_i+0x11a>
 8026db8:	2b08      	cmp	r3, #8
 8026dba:	d10b      	bne.n	8026dd4 <_printf_i+0x14c>
 8026dbc:	6823      	ldr	r3, [r4, #0]
 8026dbe:	07df      	lsls	r7, r3, #31
 8026dc0:	d508      	bpl.n	8026dd4 <_printf_i+0x14c>
 8026dc2:	6923      	ldr	r3, [r4, #16]
 8026dc4:	6861      	ldr	r1, [r4, #4]
 8026dc6:	4299      	cmp	r1, r3
 8026dc8:	bfde      	ittt	le
 8026dca:	2330      	movle	r3, #48	; 0x30
 8026dcc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8026dd0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8026dd4:	1b92      	subs	r2, r2, r6
 8026dd6:	6122      	str	r2, [r4, #16]
 8026dd8:	f8cd a000 	str.w	sl, [sp]
 8026ddc:	464b      	mov	r3, r9
 8026dde:	aa03      	add	r2, sp, #12
 8026de0:	4621      	mov	r1, r4
 8026de2:	4640      	mov	r0, r8
 8026de4:	f7ff fee2 	bl	8026bac <_printf_common>
 8026de8:	3001      	adds	r0, #1
 8026dea:	d14c      	bne.n	8026e86 <_printf_i+0x1fe>
 8026dec:	f04f 30ff 	mov.w	r0, #4294967295
 8026df0:	b004      	add	sp, #16
 8026df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026df6:	4835      	ldr	r0, [pc, #212]	; (8026ecc <_printf_i+0x244>)
 8026df8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8026dfc:	6823      	ldr	r3, [r4, #0]
 8026dfe:	680e      	ldr	r6, [r1, #0]
 8026e00:	061f      	lsls	r7, r3, #24
 8026e02:	f856 5b04 	ldr.w	r5, [r6], #4
 8026e06:	600e      	str	r6, [r1, #0]
 8026e08:	d514      	bpl.n	8026e34 <_printf_i+0x1ac>
 8026e0a:	07d9      	lsls	r1, r3, #31
 8026e0c:	bf44      	itt	mi
 8026e0e:	f043 0320 	orrmi.w	r3, r3, #32
 8026e12:	6023      	strmi	r3, [r4, #0]
 8026e14:	b91d      	cbnz	r5, 8026e1e <_printf_i+0x196>
 8026e16:	6823      	ldr	r3, [r4, #0]
 8026e18:	f023 0320 	bic.w	r3, r3, #32
 8026e1c:	6023      	str	r3, [r4, #0]
 8026e1e:	2310      	movs	r3, #16
 8026e20:	e7b0      	b.n	8026d84 <_printf_i+0xfc>
 8026e22:	6823      	ldr	r3, [r4, #0]
 8026e24:	f043 0320 	orr.w	r3, r3, #32
 8026e28:	6023      	str	r3, [r4, #0]
 8026e2a:	2378      	movs	r3, #120	; 0x78
 8026e2c:	4828      	ldr	r0, [pc, #160]	; (8026ed0 <_printf_i+0x248>)
 8026e2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8026e32:	e7e3      	b.n	8026dfc <_printf_i+0x174>
 8026e34:	065e      	lsls	r6, r3, #25
 8026e36:	bf48      	it	mi
 8026e38:	b2ad      	uxthmi	r5, r5
 8026e3a:	e7e6      	b.n	8026e0a <_printf_i+0x182>
 8026e3c:	4616      	mov	r6, r2
 8026e3e:	e7bb      	b.n	8026db8 <_printf_i+0x130>
 8026e40:	680b      	ldr	r3, [r1, #0]
 8026e42:	6826      	ldr	r6, [r4, #0]
 8026e44:	6960      	ldr	r0, [r4, #20]
 8026e46:	1d1d      	adds	r5, r3, #4
 8026e48:	600d      	str	r5, [r1, #0]
 8026e4a:	0635      	lsls	r5, r6, #24
 8026e4c:	681b      	ldr	r3, [r3, #0]
 8026e4e:	d501      	bpl.n	8026e54 <_printf_i+0x1cc>
 8026e50:	6018      	str	r0, [r3, #0]
 8026e52:	e002      	b.n	8026e5a <_printf_i+0x1d2>
 8026e54:	0671      	lsls	r1, r6, #25
 8026e56:	d5fb      	bpl.n	8026e50 <_printf_i+0x1c8>
 8026e58:	8018      	strh	r0, [r3, #0]
 8026e5a:	2300      	movs	r3, #0
 8026e5c:	6123      	str	r3, [r4, #16]
 8026e5e:	4616      	mov	r6, r2
 8026e60:	e7ba      	b.n	8026dd8 <_printf_i+0x150>
 8026e62:	680b      	ldr	r3, [r1, #0]
 8026e64:	1d1a      	adds	r2, r3, #4
 8026e66:	600a      	str	r2, [r1, #0]
 8026e68:	681e      	ldr	r6, [r3, #0]
 8026e6a:	6862      	ldr	r2, [r4, #4]
 8026e6c:	2100      	movs	r1, #0
 8026e6e:	4630      	mov	r0, r6
 8026e70:	f7d9 fa4e 	bl	8000310 <memchr>
 8026e74:	b108      	cbz	r0, 8026e7a <_printf_i+0x1f2>
 8026e76:	1b80      	subs	r0, r0, r6
 8026e78:	6060      	str	r0, [r4, #4]
 8026e7a:	6863      	ldr	r3, [r4, #4]
 8026e7c:	6123      	str	r3, [r4, #16]
 8026e7e:	2300      	movs	r3, #0
 8026e80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026e84:	e7a8      	b.n	8026dd8 <_printf_i+0x150>
 8026e86:	6923      	ldr	r3, [r4, #16]
 8026e88:	4632      	mov	r2, r6
 8026e8a:	4649      	mov	r1, r9
 8026e8c:	4640      	mov	r0, r8
 8026e8e:	47d0      	blx	sl
 8026e90:	3001      	adds	r0, #1
 8026e92:	d0ab      	beq.n	8026dec <_printf_i+0x164>
 8026e94:	6823      	ldr	r3, [r4, #0]
 8026e96:	079b      	lsls	r3, r3, #30
 8026e98:	d413      	bmi.n	8026ec2 <_printf_i+0x23a>
 8026e9a:	68e0      	ldr	r0, [r4, #12]
 8026e9c:	9b03      	ldr	r3, [sp, #12]
 8026e9e:	4298      	cmp	r0, r3
 8026ea0:	bfb8      	it	lt
 8026ea2:	4618      	movlt	r0, r3
 8026ea4:	e7a4      	b.n	8026df0 <_printf_i+0x168>
 8026ea6:	2301      	movs	r3, #1
 8026ea8:	4632      	mov	r2, r6
 8026eaa:	4649      	mov	r1, r9
 8026eac:	4640      	mov	r0, r8
 8026eae:	47d0      	blx	sl
 8026eb0:	3001      	adds	r0, #1
 8026eb2:	d09b      	beq.n	8026dec <_printf_i+0x164>
 8026eb4:	3501      	adds	r5, #1
 8026eb6:	68e3      	ldr	r3, [r4, #12]
 8026eb8:	9903      	ldr	r1, [sp, #12]
 8026eba:	1a5b      	subs	r3, r3, r1
 8026ebc:	42ab      	cmp	r3, r5
 8026ebe:	dcf2      	bgt.n	8026ea6 <_printf_i+0x21e>
 8026ec0:	e7eb      	b.n	8026e9a <_printf_i+0x212>
 8026ec2:	2500      	movs	r5, #0
 8026ec4:	f104 0619 	add.w	r6, r4, #25
 8026ec8:	e7f5      	b.n	8026eb6 <_printf_i+0x22e>
 8026eca:	bf00      	nop
 8026ecc:	0802eee1 	.word	0x0802eee1
 8026ed0:	0802eef2 	.word	0x0802eef2

08026ed4 <iprintf>:
 8026ed4:	b40f      	push	{r0, r1, r2, r3}
 8026ed6:	4b0a      	ldr	r3, [pc, #40]	; (8026f00 <iprintf+0x2c>)
 8026ed8:	b513      	push	{r0, r1, r4, lr}
 8026eda:	681c      	ldr	r4, [r3, #0]
 8026edc:	b124      	cbz	r4, 8026ee8 <iprintf+0x14>
 8026ede:	69a3      	ldr	r3, [r4, #24]
 8026ee0:	b913      	cbnz	r3, 8026ee8 <iprintf+0x14>
 8026ee2:	4620      	mov	r0, r4
 8026ee4:	f7fe fef6 	bl	8025cd4 <__sinit>
 8026ee8:	ab05      	add	r3, sp, #20
 8026eea:	9a04      	ldr	r2, [sp, #16]
 8026eec:	68a1      	ldr	r1, [r4, #8]
 8026eee:	9301      	str	r3, [sp, #4]
 8026ef0:	4620      	mov	r0, r4
 8026ef2:	f7ff fa7d 	bl	80263f0 <_vfiprintf_r>
 8026ef6:	b002      	add	sp, #8
 8026ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026efc:	b004      	add	sp, #16
 8026efe:	4770      	bx	lr
 8026f00:	240000bc 	.word	0x240000bc

08026f04 <_puts_r>:
 8026f04:	b570      	push	{r4, r5, r6, lr}
 8026f06:	460e      	mov	r6, r1
 8026f08:	4605      	mov	r5, r0
 8026f0a:	b118      	cbz	r0, 8026f14 <_puts_r+0x10>
 8026f0c:	6983      	ldr	r3, [r0, #24]
 8026f0e:	b90b      	cbnz	r3, 8026f14 <_puts_r+0x10>
 8026f10:	f7fe fee0 	bl	8025cd4 <__sinit>
 8026f14:	69ab      	ldr	r3, [r5, #24]
 8026f16:	68ac      	ldr	r4, [r5, #8]
 8026f18:	b913      	cbnz	r3, 8026f20 <_puts_r+0x1c>
 8026f1a:	4628      	mov	r0, r5
 8026f1c:	f7fe feda 	bl	8025cd4 <__sinit>
 8026f20:	4b2c      	ldr	r3, [pc, #176]	; (8026fd4 <_puts_r+0xd0>)
 8026f22:	429c      	cmp	r4, r3
 8026f24:	d120      	bne.n	8026f68 <_puts_r+0x64>
 8026f26:	686c      	ldr	r4, [r5, #4]
 8026f28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026f2a:	07db      	lsls	r3, r3, #31
 8026f2c:	d405      	bmi.n	8026f3a <_puts_r+0x36>
 8026f2e:	89a3      	ldrh	r3, [r4, #12]
 8026f30:	0598      	lsls	r0, r3, #22
 8026f32:	d402      	bmi.n	8026f3a <_puts_r+0x36>
 8026f34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026f36:	f7ff f925 	bl	8026184 <__retarget_lock_acquire_recursive>
 8026f3a:	89a3      	ldrh	r3, [r4, #12]
 8026f3c:	0719      	lsls	r1, r3, #28
 8026f3e:	d51d      	bpl.n	8026f7c <_puts_r+0x78>
 8026f40:	6923      	ldr	r3, [r4, #16]
 8026f42:	b1db      	cbz	r3, 8026f7c <_puts_r+0x78>
 8026f44:	3e01      	subs	r6, #1
 8026f46:	68a3      	ldr	r3, [r4, #8]
 8026f48:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8026f4c:	3b01      	subs	r3, #1
 8026f4e:	60a3      	str	r3, [r4, #8]
 8026f50:	bb39      	cbnz	r1, 8026fa2 <_puts_r+0x9e>
 8026f52:	2b00      	cmp	r3, #0
 8026f54:	da38      	bge.n	8026fc8 <_puts_r+0xc4>
 8026f56:	4622      	mov	r2, r4
 8026f58:	210a      	movs	r1, #10
 8026f5a:	4628      	mov	r0, r5
 8026f5c:	f000 fee2 	bl	8027d24 <__swbuf_r>
 8026f60:	3001      	adds	r0, #1
 8026f62:	d011      	beq.n	8026f88 <_puts_r+0x84>
 8026f64:	250a      	movs	r5, #10
 8026f66:	e011      	b.n	8026f8c <_puts_r+0x88>
 8026f68:	4b1b      	ldr	r3, [pc, #108]	; (8026fd8 <_puts_r+0xd4>)
 8026f6a:	429c      	cmp	r4, r3
 8026f6c:	d101      	bne.n	8026f72 <_puts_r+0x6e>
 8026f6e:	68ac      	ldr	r4, [r5, #8]
 8026f70:	e7da      	b.n	8026f28 <_puts_r+0x24>
 8026f72:	4b1a      	ldr	r3, [pc, #104]	; (8026fdc <_puts_r+0xd8>)
 8026f74:	429c      	cmp	r4, r3
 8026f76:	bf08      	it	eq
 8026f78:	68ec      	ldreq	r4, [r5, #12]
 8026f7a:	e7d5      	b.n	8026f28 <_puts_r+0x24>
 8026f7c:	4621      	mov	r1, r4
 8026f7e:	4628      	mov	r0, r5
 8026f80:	f000 ff34 	bl	8027dec <__swsetup_r>
 8026f84:	2800      	cmp	r0, #0
 8026f86:	d0dd      	beq.n	8026f44 <_puts_r+0x40>
 8026f88:	f04f 35ff 	mov.w	r5, #4294967295
 8026f8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026f8e:	07da      	lsls	r2, r3, #31
 8026f90:	d405      	bmi.n	8026f9e <_puts_r+0x9a>
 8026f92:	89a3      	ldrh	r3, [r4, #12]
 8026f94:	059b      	lsls	r3, r3, #22
 8026f96:	d402      	bmi.n	8026f9e <_puts_r+0x9a>
 8026f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026f9a:	f7ff f8f5 	bl	8026188 <__retarget_lock_release_recursive>
 8026f9e:	4628      	mov	r0, r5
 8026fa0:	bd70      	pop	{r4, r5, r6, pc}
 8026fa2:	2b00      	cmp	r3, #0
 8026fa4:	da04      	bge.n	8026fb0 <_puts_r+0xac>
 8026fa6:	69a2      	ldr	r2, [r4, #24]
 8026fa8:	429a      	cmp	r2, r3
 8026faa:	dc06      	bgt.n	8026fba <_puts_r+0xb6>
 8026fac:	290a      	cmp	r1, #10
 8026fae:	d004      	beq.n	8026fba <_puts_r+0xb6>
 8026fb0:	6823      	ldr	r3, [r4, #0]
 8026fb2:	1c5a      	adds	r2, r3, #1
 8026fb4:	6022      	str	r2, [r4, #0]
 8026fb6:	7019      	strb	r1, [r3, #0]
 8026fb8:	e7c5      	b.n	8026f46 <_puts_r+0x42>
 8026fba:	4622      	mov	r2, r4
 8026fbc:	4628      	mov	r0, r5
 8026fbe:	f000 feb1 	bl	8027d24 <__swbuf_r>
 8026fc2:	3001      	adds	r0, #1
 8026fc4:	d1bf      	bne.n	8026f46 <_puts_r+0x42>
 8026fc6:	e7df      	b.n	8026f88 <_puts_r+0x84>
 8026fc8:	6823      	ldr	r3, [r4, #0]
 8026fca:	250a      	movs	r5, #10
 8026fcc:	1c5a      	adds	r2, r3, #1
 8026fce:	6022      	str	r2, [r4, #0]
 8026fd0:	701d      	strb	r5, [r3, #0]
 8026fd2:	e7db      	b.n	8026f8c <_puts_r+0x88>
 8026fd4:	0802eda4 	.word	0x0802eda4
 8026fd8:	0802edc4 	.word	0x0802edc4
 8026fdc:	0802ed84 	.word	0x0802ed84

08026fe0 <puts>:
 8026fe0:	4b02      	ldr	r3, [pc, #8]	; (8026fec <puts+0xc>)
 8026fe2:	4601      	mov	r1, r0
 8026fe4:	6818      	ldr	r0, [r3, #0]
 8026fe6:	f7ff bf8d 	b.w	8026f04 <_puts_r>
 8026fea:	bf00      	nop
 8026fec:	240000bc 	.word	0x240000bc

08026ff0 <rand>:
 8026ff0:	4b17      	ldr	r3, [pc, #92]	; (8027050 <rand+0x60>)
 8026ff2:	b510      	push	{r4, lr}
 8026ff4:	681c      	ldr	r4, [r3, #0]
 8026ff6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8026ff8:	b9b3      	cbnz	r3, 8027028 <rand+0x38>
 8026ffa:	2018      	movs	r0, #24
 8026ffc:	f7ff f8c6 	bl	802618c <malloc>
 8027000:	63a0      	str	r0, [r4, #56]	; 0x38
 8027002:	b928      	cbnz	r0, 8027010 <rand+0x20>
 8027004:	4602      	mov	r2, r0
 8027006:	4b13      	ldr	r3, [pc, #76]	; (8027054 <rand+0x64>)
 8027008:	4813      	ldr	r0, [pc, #76]	; (8027058 <rand+0x68>)
 802700a:	214e      	movs	r1, #78	; 0x4e
 802700c:	f000 ff5c 	bl	8027ec8 <__assert_func>
 8027010:	4a12      	ldr	r2, [pc, #72]	; (802705c <rand+0x6c>)
 8027012:	4b13      	ldr	r3, [pc, #76]	; (8027060 <rand+0x70>)
 8027014:	e9c0 2300 	strd	r2, r3, [r0]
 8027018:	4b12      	ldr	r3, [pc, #72]	; (8027064 <rand+0x74>)
 802701a:	6083      	str	r3, [r0, #8]
 802701c:	230b      	movs	r3, #11
 802701e:	8183      	strh	r3, [r0, #12]
 8027020:	2201      	movs	r2, #1
 8027022:	2300      	movs	r3, #0
 8027024:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8027028:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802702a:	480f      	ldr	r0, [pc, #60]	; (8027068 <rand+0x78>)
 802702c:	690a      	ldr	r2, [r1, #16]
 802702e:	694b      	ldr	r3, [r1, #20]
 8027030:	4c0e      	ldr	r4, [pc, #56]	; (802706c <rand+0x7c>)
 8027032:	4350      	muls	r0, r2
 8027034:	fb04 0003 	mla	r0, r4, r3, r0
 8027038:	fba2 3404 	umull	r3, r4, r2, r4
 802703c:	1c5a      	adds	r2, r3, #1
 802703e:	4404      	add	r4, r0
 8027040:	f144 0000 	adc.w	r0, r4, #0
 8027044:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8027048:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 802704c:	bd10      	pop	{r4, pc}
 802704e:	bf00      	nop
 8027050:	240000bc 	.word	0x240000bc
 8027054:	0802ede8 	.word	0x0802ede8
 8027058:	0802ef03 	.word	0x0802ef03
 802705c:	abcd330e 	.word	0xabcd330e
 8027060:	e66d1234 	.word	0xe66d1234
 8027064:	0005deec 	.word	0x0005deec
 8027068:	5851f42d 	.word	0x5851f42d
 802706c:	4c957f2d 	.word	0x4c957f2d

08027070 <cleanup_glue>:
 8027070:	b538      	push	{r3, r4, r5, lr}
 8027072:	460c      	mov	r4, r1
 8027074:	6809      	ldr	r1, [r1, #0]
 8027076:	4605      	mov	r5, r0
 8027078:	b109      	cbz	r1, 802707e <cleanup_glue+0xe>
 802707a:	f7ff fff9 	bl	8027070 <cleanup_glue>
 802707e:	4621      	mov	r1, r4
 8027080:	4628      	mov	r0, r5
 8027082:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8027086:	f7ff b8df 	b.w	8026248 <_free_r>
	...

0802708c <_reclaim_reent>:
 802708c:	4b2c      	ldr	r3, [pc, #176]	; (8027140 <_reclaim_reent+0xb4>)
 802708e:	681b      	ldr	r3, [r3, #0]
 8027090:	4283      	cmp	r3, r0
 8027092:	b570      	push	{r4, r5, r6, lr}
 8027094:	4604      	mov	r4, r0
 8027096:	d051      	beq.n	802713c <_reclaim_reent+0xb0>
 8027098:	6a43      	ldr	r3, [r0, #36]	; 0x24
 802709a:	b143      	cbz	r3, 80270ae <_reclaim_reent+0x22>
 802709c:	68db      	ldr	r3, [r3, #12]
 802709e:	2b00      	cmp	r3, #0
 80270a0:	d14a      	bne.n	8027138 <_reclaim_reent+0xac>
 80270a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80270a4:	6819      	ldr	r1, [r3, #0]
 80270a6:	b111      	cbz	r1, 80270ae <_reclaim_reent+0x22>
 80270a8:	4620      	mov	r0, r4
 80270aa:	f7ff f8cd 	bl	8026248 <_free_r>
 80270ae:	6961      	ldr	r1, [r4, #20]
 80270b0:	b111      	cbz	r1, 80270b8 <_reclaim_reent+0x2c>
 80270b2:	4620      	mov	r0, r4
 80270b4:	f7ff f8c8 	bl	8026248 <_free_r>
 80270b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80270ba:	b111      	cbz	r1, 80270c2 <_reclaim_reent+0x36>
 80270bc:	4620      	mov	r0, r4
 80270be:	f7ff f8c3 	bl	8026248 <_free_r>
 80270c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80270c4:	b111      	cbz	r1, 80270cc <_reclaim_reent+0x40>
 80270c6:	4620      	mov	r0, r4
 80270c8:	f7ff f8be 	bl	8026248 <_free_r>
 80270cc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80270ce:	b111      	cbz	r1, 80270d6 <_reclaim_reent+0x4a>
 80270d0:	4620      	mov	r0, r4
 80270d2:	f7ff f8b9 	bl	8026248 <_free_r>
 80270d6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80270d8:	b111      	cbz	r1, 80270e0 <_reclaim_reent+0x54>
 80270da:	4620      	mov	r0, r4
 80270dc:	f7ff f8b4 	bl	8026248 <_free_r>
 80270e0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80270e2:	b111      	cbz	r1, 80270ea <_reclaim_reent+0x5e>
 80270e4:	4620      	mov	r0, r4
 80270e6:	f7ff f8af 	bl	8026248 <_free_r>
 80270ea:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80270ec:	b111      	cbz	r1, 80270f4 <_reclaim_reent+0x68>
 80270ee:	4620      	mov	r0, r4
 80270f0:	f7ff f8aa 	bl	8026248 <_free_r>
 80270f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80270f6:	b111      	cbz	r1, 80270fe <_reclaim_reent+0x72>
 80270f8:	4620      	mov	r0, r4
 80270fa:	f7ff f8a5 	bl	8026248 <_free_r>
 80270fe:	69a3      	ldr	r3, [r4, #24]
 8027100:	b1e3      	cbz	r3, 802713c <_reclaim_reent+0xb0>
 8027102:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8027104:	4620      	mov	r0, r4
 8027106:	4798      	blx	r3
 8027108:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802710a:	b1b9      	cbz	r1, 802713c <_reclaim_reent+0xb0>
 802710c:	4620      	mov	r0, r4
 802710e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8027112:	f7ff bfad 	b.w	8027070 <cleanup_glue>
 8027116:	5949      	ldr	r1, [r1, r5]
 8027118:	b941      	cbnz	r1, 802712c <_reclaim_reent+0xa0>
 802711a:	3504      	adds	r5, #4
 802711c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802711e:	2d80      	cmp	r5, #128	; 0x80
 8027120:	68d9      	ldr	r1, [r3, #12]
 8027122:	d1f8      	bne.n	8027116 <_reclaim_reent+0x8a>
 8027124:	4620      	mov	r0, r4
 8027126:	f7ff f88f 	bl	8026248 <_free_r>
 802712a:	e7ba      	b.n	80270a2 <_reclaim_reent+0x16>
 802712c:	680e      	ldr	r6, [r1, #0]
 802712e:	4620      	mov	r0, r4
 8027130:	f7ff f88a 	bl	8026248 <_free_r>
 8027134:	4631      	mov	r1, r6
 8027136:	e7ef      	b.n	8027118 <_reclaim_reent+0x8c>
 8027138:	2500      	movs	r5, #0
 802713a:	e7ef      	b.n	802711c <_reclaim_reent+0x90>
 802713c:	bd70      	pop	{r4, r5, r6, pc}
 802713e:	bf00      	nop
 8027140:	240000bc 	.word	0x240000bc

08027144 <_sbrk_r>:
 8027144:	b538      	push	{r3, r4, r5, lr}
 8027146:	4d06      	ldr	r5, [pc, #24]	; (8027160 <_sbrk_r+0x1c>)
 8027148:	2300      	movs	r3, #0
 802714a:	4604      	mov	r4, r0
 802714c:	4608      	mov	r0, r1
 802714e:	602b      	str	r3, [r5, #0]
 8027150:	f7d9 ff62 	bl	8001018 <_sbrk>
 8027154:	1c43      	adds	r3, r0, #1
 8027156:	d102      	bne.n	802715e <_sbrk_r+0x1a>
 8027158:	682b      	ldr	r3, [r5, #0]
 802715a:	b103      	cbz	r3, 802715e <_sbrk_r+0x1a>
 802715c:	6023      	str	r3, [r4, #0]
 802715e:	bd38      	pop	{r3, r4, r5, pc}
 8027160:	240086b8 	.word	0x240086b8

08027164 <siprintf>:
 8027164:	b40e      	push	{r1, r2, r3}
 8027166:	b500      	push	{lr}
 8027168:	b09c      	sub	sp, #112	; 0x70
 802716a:	ab1d      	add	r3, sp, #116	; 0x74
 802716c:	9002      	str	r0, [sp, #8]
 802716e:	9006      	str	r0, [sp, #24]
 8027170:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8027174:	4809      	ldr	r0, [pc, #36]	; (802719c <siprintf+0x38>)
 8027176:	9107      	str	r1, [sp, #28]
 8027178:	9104      	str	r1, [sp, #16]
 802717a:	4909      	ldr	r1, [pc, #36]	; (80271a0 <siprintf+0x3c>)
 802717c:	f853 2b04 	ldr.w	r2, [r3], #4
 8027180:	9105      	str	r1, [sp, #20]
 8027182:	6800      	ldr	r0, [r0, #0]
 8027184:	9301      	str	r3, [sp, #4]
 8027186:	a902      	add	r1, sp, #8
 8027188:	f002 fb20 	bl	80297cc <_svfiprintf_r>
 802718c:	9b02      	ldr	r3, [sp, #8]
 802718e:	2200      	movs	r2, #0
 8027190:	701a      	strb	r2, [r3, #0]
 8027192:	b01c      	add	sp, #112	; 0x70
 8027194:	f85d eb04 	ldr.w	lr, [sp], #4
 8027198:	b003      	add	sp, #12
 802719a:	4770      	bx	lr
 802719c:	240000bc 	.word	0x240000bc
 80271a0:	ffff0208 	.word	0xffff0208

080271a4 <siscanf>:
 80271a4:	b40e      	push	{r1, r2, r3}
 80271a6:	b510      	push	{r4, lr}
 80271a8:	b09f      	sub	sp, #124	; 0x7c
 80271aa:	ac21      	add	r4, sp, #132	; 0x84
 80271ac:	f44f 7101 	mov.w	r1, #516	; 0x204
 80271b0:	f854 2b04 	ldr.w	r2, [r4], #4
 80271b4:	9201      	str	r2, [sp, #4]
 80271b6:	f8ad 101c 	strh.w	r1, [sp, #28]
 80271ba:	9004      	str	r0, [sp, #16]
 80271bc:	9008      	str	r0, [sp, #32]
 80271be:	f7d9 f899 	bl	80002f4 <strlen>
 80271c2:	4b0c      	ldr	r3, [pc, #48]	; (80271f4 <siscanf+0x50>)
 80271c4:	9005      	str	r0, [sp, #20]
 80271c6:	9009      	str	r0, [sp, #36]	; 0x24
 80271c8:	930d      	str	r3, [sp, #52]	; 0x34
 80271ca:	480b      	ldr	r0, [pc, #44]	; (80271f8 <siscanf+0x54>)
 80271cc:	9a01      	ldr	r2, [sp, #4]
 80271ce:	6800      	ldr	r0, [r0, #0]
 80271d0:	9403      	str	r4, [sp, #12]
 80271d2:	2300      	movs	r3, #0
 80271d4:	9311      	str	r3, [sp, #68]	; 0x44
 80271d6:	9316      	str	r3, [sp, #88]	; 0x58
 80271d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80271dc:	f8ad 301e 	strh.w	r3, [sp, #30]
 80271e0:	a904      	add	r1, sp, #16
 80271e2:	4623      	mov	r3, r4
 80271e4:	f002 fc4c 	bl	8029a80 <__ssvfiscanf_r>
 80271e8:	b01f      	add	sp, #124	; 0x7c
 80271ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80271ee:	b003      	add	sp, #12
 80271f0:	4770      	bx	lr
 80271f2:	bf00      	nop
 80271f4:	0802721f 	.word	0x0802721f
 80271f8:	240000bc 	.word	0x240000bc

080271fc <__sread>:
 80271fc:	b510      	push	{r4, lr}
 80271fe:	460c      	mov	r4, r1
 8027200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027204:	f002 ff00 	bl	802a008 <_read_r>
 8027208:	2800      	cmp	r0, #0
 802720a:	bfab      	itete	ge
 802720c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802720e:	89a3      	ldrhlt	r3, [r4, #12]
 8027210:	181b      	addge	r3, r3, r0
 8027212:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8027216:	bfac      	ite	ge
 8027218:	6563      	strge	r3, [r4, #84]	; 0x54
 802721a:	81a3      	strhlt	r3, [r4, #12]
 802721c:	bd10      	pop	{r4, pc}

0802721e <__seofread>:
 802721e:	2000      	movs	r0, #0
 8027220:	4770      	bx	lr

08027222 <__swrite>:
 8027222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027226:	461f      	mov	r7, r3
 8027228:	898b      	ldrh	r3, [r1, #12]
 802722a:	05db      	lsls	r3, r3, #23
 802722c:	4605      	mov	r5, r0
 802722e:	460c      	mov	r4, r1
 8027230:	4616      	mov	r6, r2
 8027232:	d505      	bpl.n	8027240 <__swrite+0x1e>
 8027234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027238:	2302      	movs	r3, #2
 802723a:	2200      	movs	r2, #0
 802723c:	f001 fe44 	bl	8028ec8 <_lseek_r>
 8027240:	89a3      	ldrh	r3, [r4, #12]
 8027242:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027246:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802724a:	81a3      	strh	r3, [r4, #12]
 802724c:	4632      	mov	r2, r6
 802724e:	463b      	mov	r3, r7
 8027250:	4628      	mov	r0, r5
 8027252:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8027256:	f000 bdb7 	b.w	8027dc8 <_write_r>

0802725a <__sseek>:
 802725a:	b510      	push	{r4, lr}
 802725c:	460c      	mov	r4, r1
 802725e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027262:	f001 fe31 	bl	8028ec8 <_lseek_r>
 8027266:	1c43      	adds	r3, r0, #1
 8027268:	89a3      	ldrh	r3, [r4, #12]
 802726a:	bf15      	itete	ne
 802726c:	6560      	strne	r0, [r4, #84]	; 0x54
 802726e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8027272:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8027276:	81a3      	strheq	r3, [r4, #12]
 8027278:	bf18      	it	ne
 802727a:	81a3      	strhne	r3, [r4, #12]
 802727c:	bd10      	pop	{r4, pc}

0802727e <__sclose>:
 802727e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027282:	f000 be3f 	b.w	8027f04 <_close_r>

08027286 <strchr>:
 8027286:	b2c9      	uxtb	r1, r1
 8027288:	4603      	mov	r3, r0
 802728a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802728e:	b11a      	cbz	r2, 8027298 <strchr+0x12>
 8027290:	428a      	cmp	r2, r1
 8027292:	d1f9      	bne.n	8027288 <strchr+0x2>
 8027294:	4618      	mov	r0, r3
 8027296:	4770      	bx	lr
 8027298:	2900      	cmp	r1, #0
 802729a:	bf18      	it	ne
 802729c:	2300      	movne	r3, #0
 802729e:	e7f9      	b.n	8027294 <strchr+0xe>

080272a0 <strcpy>:
 80272a0:	4603      	mov	r3, r0
 80272a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80272a6:	f803 2b01 	strb.w	r2, [r3], #1
 80272aa:	2a00      	cmp	r2, #0
 80272ac:	d1f9      	bne.n	80272a2 <strcpy+0x2>
 80272ae:	4770      	bx	lr

080272b0 <_strerror_r>:
 80272b0:	b510      	push	{r4, lr}
 80272b2:	4604      	mov	r4, r0
 80272b4:	4608      	mov	r0, r1
 80272b6:	4611      	mov	r1, r2
 80272b8:	288e      	cmp	r0, #142	; 0x8e
 80272ba:	f200 812f 	bhi.w	802751c <_strerror_r+0x26c>
 80272be:	e8df f010 	tbh	[pc, r0, lsl #1]
 80272c2:	0138      	.short	0x0138
 80272c4:	0091008f 	.word	0x0091008f
 80272c8:	00950093 	.word	0x00950093
 80272cc:	00990097 	.word	0x00990097
 80272d0:	009d009b 	.word	0x009d009b
 80272d4:	00a300a1 	.word	0x00a300a1
 80272d8:	00a900a7 	.word	0x00a900a7
 80272dc:	00ad00ab 	.word	0x00ad00ab
 80272e0:	00af012d 	.word	0x00af012d
 80272e4:	00b300b1 	.word	0x00b300b1
 80272e8:	00b700b5 	.word	0x00b700b5
 80272ec:	00bf00bd 	.word	0x00bf00bd
 80272f0:	00c700c5 	.word	0x00c700c5
 80272f4:	00cb00c9 	.word	0x00cb00c9
 80272f8:	00d100cd 	.word	0x00d100cd
 80272fc:	00d700d5 	.word	0x00d700d5
 8027300:	00db00d9 	.word	0x00db00d9
 8027304:	00df00dd 	.word	0x00df00dd
 8027308:	00e300e1 	.word	0x00e300e1
 802730c:	012d012d 	.word	0x012d012d
 8027310:	012d012d 	.word	0x012d012d
 8027314:	012d012d 	.word	0x012d012d
 8027318:	012d012d 	.word	0x012d012d
 802731c:	00eb00e7 	.word	0x00eb00e7
 8027320:	012d012d 	.word	0x012d012d
 8027324:	012d012d 	.word	0x012d012d
 8027328:	012d012d 	.word	0x012d012d
 802732c:	012d012d 	.word	0x012d012d
 8027330:	012d012d 	.word	0x012d012d
 8027334:	012d012d 	.word	0x012d012d
 8027338:	00ed012d 	.word	0x00ed012d
 802733c:	00ef0107 	.word	0x00ef0107
 8027340:	012d00f1 	.word	0x012d00f1
 8027344:	012d012d 	.word	0x012d012d
 8027348:	012d00f3 	.word	0x012d00f3
 802734c:	012d012d 	.word	0x012d012d
 8027350:	012d00f5 	.word	0x012d00f5
 8027354:	00f9012d 	.word	0x00f9012d
 8027358:	012d012d 	.word	0x012d012d
 802735c:	012d00fb 	.word	0x012d00fb
 8027360:	012d012d 	.word	0x012d012d
 8027364:	012d012d 	.word	0x012d012d
 8027368:	012d012d 	.word	0x012d012d
 802736c:	012d012d 	.word	0x012d012d
 8027370:	00fd012d 	.word	0x00fd012d
 8027374:	00ff012d 	.word	0x00ff012d
 8027378:	01030101 	.word	0x01030101
 802737c:	012d012d 	.word	0x012d012d
 8027380:	012d0125 	.word	0x012d0125
 8027384:	012d012d 	.word	0x012d012d
 8027388:	012d012d 	.word	0x012d012d
 802738c:	012d012d 	.word	0x012d012d
 8027390:	0113012d 	.word	0x0113012d
 8027394:	01090105 	.word	0x01090105
 8027398:	010d010b 	.word	0x010d010b
 802739c:	012d010f 	.word	0x012d010f
 80273a0:	01150111 	.word	0x01150111
 80273a4:	00e90119 	.word	0x00e90119
 80273a8:	012b00c1 	.word	0x012b00c1
 80273ac:	00cf00b9 	.word	0x00cf00b9
 80273b0:	009f00bb 	.word	0x009f00bb
 80273b4:	012900a5 	.word	0x012900a5
 80273b8:	012d00f7 	.word	0x012d00f7
 80273bc:	00c30117 	.word	0x00c30117
 80273c0:	011b011d 	.word	0x011b011d
 80273c4:	012d012d 	.word	0x012d012d
 80273c8:	012d012d 	.word	0x012d012d
 80273cc:	00d3012d 	.word	0x00d3012d
 80273d0:	012d012d 	.word	0x012d012d
 80273d4:	00e5012d 	.word	0x00e5012d
 80273d8:	011f0127 	.word	0x011f0127
 80273dc:	01230121 	.word	0x01230121
 80273e0:	4855      	ldr	r0, [pc, #340]	; (8027538 <_strerror_r+0x288>)
 80273e2:	bd10      	pop	{r4, pc}
 80273e4:	4855      	ldr	r0, [pc, #340]	; (802753c <_strerror_r+0x28c>)
 80273e6:	e7fc      	b.n	80273e2 <_strerror_r+0x132>
 80273e8:	4855      	ldr	r0, [pc, #340]	; (8027540 <_strerror_r+0x290>)
 80273ea:	e7fa      	b.n	80273e2 <_strerror_r+0x132>
 80273ec:	4855      	ldr	r0, [pc, #340]	; (8027544 <_strerror_r+0x294>)
 80273ee:	e7f8      	b.n	80273e2 <_strerror_r+0x132>
 80273f0:	4855      	ldr	r0, [pc, #340]	; (8027548 <_strerror_r+0x298>)
 80273f2:	e7f6      	b.n	80273e2 <_strerror_r+0x132>
 80273f4:	4855      	ldr	r0, [pc, #340]	; (802754c <_strerror_r+0x29c>)
 80273f6:	e7f4      	b.n	80273e2 <_strerror_r+0x132>
 80273f8:	4855      	ldr	r0, [pc, #340]	; (8027550 <_strerror_r+0x2a0>)
 80273fa:	e7f2      	b.n	80273e2 <_strerror_r+0x132>
 80273fc:	4855      	ldr	r0, [pc, #340]	; (8027554 <_strerror_r+0x2a4>)
 80273fe:	e7f0      	b.n	80273e2 <_strerror_r+0x132>
 8027400:	4855      	ldr	r0, [pc, #340]	; (8027558 <_strerror_r+0x2a8>)
 8027402:	e7ee      	b.n	80273e2 <_strerror_r+0x132>
 8027404:	4855      	ldr	r0, [pc, #340]	; (802755c <_strerror_r+0x2ac>)
 8027406:	e7ec      	b.n	80273e2 <_strerror_r+0x132>
 8027408:	4855      	ldr	r0, [pc, #340]	; (8027560 <_strerror_r+0x2b0>)
 802740a:	e7ea      	b.n	80273e2 <_strerror_r+0x132>
 802740c:	4855      	ldr	r0, [pc, #340]	; (8027564 <_strerror_r+0x2b4>)
 802740e:	e7e8      	b.n	80273e2 <_strerror_r+0x132>
 8027410:	4855      	ldr	r0, [pc, #340]	; (8027568 <_strerror_r+0x2b8>)
 8027412:	e7e6      	b.n	80273e2 <_strerror_r+0x132>
 8027414:	4855      	ldr	r0, [pc, #340]	; (802756c <_strerror_r+0x2bc>)
 8027416:	e7e4      	b.n	80273e2 <_strerror_r+0x132>
 8027418:	4855      	ldr	r0, [pc, #340]	; (8027570 <_strerror_r+0x2c0>)
 802741a:	e7e2      	b.n	80273e2 <_strerror_r+0x132>
 802741c:	4855      	ldr	r0, [pc, #340]	; (8027574 <_strerror_r+0x2c4>)
 802741e:	e7e0      	b.n	80273e2 <_strerror_r+0x132>
 8027420:	4855      	ldr	r0, [pc, #340]	; (8027578 <_strerror_r+0x2c8>)
 8027422:	e7de      	b.n	80273e2 <_strerror_r+0x132>
 8027424:	4855      	ldr	r0, [pc, #340]	; (802757c <_strerror_r+0x2cc>)
 8027426:	e7dc      	b.n	80273e2 <_strerror_r+0x132>
 8027428:	4855      	ldr	r0, [pc, #340]	; (8027580 <_strerror_r+0x2d0>)
 802742a:	e7da      	b.n	80273e2 <_strerror_r+0x132>
 802742c:	4855      	ldr	r0, [pc, #340]	; (8027584 <_strerror_r+0x2d4>)
 802742e:	e7d8      	b.n	80273e2 <_strerror_r+0x132>
 8027430:	4855      	ldr	r0, [pc, #340]	; (8027588 <_strerror_r+0x2d8>)
 8027432:	e7d6      	b.n	80273e2 <_strerror_r+0x132>
 8027434:	4855      	ldr	r0, [pc, #340]	; (802758c <_strerror_r+0x2dc>)
 8027436:	e7d4      	b.n	80273e2 <_strerror_r+0x132>
 8027438:	4855      	ldr	r0, [pc, #340]	; (8027590 <_strerror_r+0x2e0>)
 802743a:	e7d2      	b.n	80273e2 <_strerror_r+0x132>
 802743c:	4855      	ldr	r0, [pc, #340]	; (8027594 <_strerror_r+0x2e4>)
 802743e:	e7d0      	b.n	80273e2 <_strerror_r+0x132>
 8027440:	4855      	ldr	r0, [pc, #340]	; (8027598 <_strerror_r+0x2e8>)
 8027442:	e7ce      	b.n	80273e2 <_strerror_r+0x132>
 8027444:	4855      	ldr	r0, [pc, #340]	; (802759c <_strerror_r+0x2ec>)
 8027446:	e7cc      	b.n	80273e2 <_strerror_r+0x132>
 8027448:	4855      	ldr	r0, [pc, #340]	; (80275a0 <_strerror_r+0x2f0>)
 802744a:	e7ca      	b.n	80273e2 <_strerror_r+0x132>
 802744c:	4855      	ldr	r0, [pc, #340]	; (80275a4 <_strerror_r+0x2f4>)
 802744e:	e7c8      	b.n	80273e2 <_strerror_r+0x132>
 8027450:	4855      	ldr	r0, [pc, #340]	; (80275a8 <_strerror_r+0x2f8>)
 8027452:	e7c6      	b.n	80273e2 <_strerror_r+0x132>
 8027454:	4855      	ldr	r0, [pc, #340]	; (80275ac <_strerror_r+0x2fc>)
 8027456:	e7c4      	b.n	80273e2 <_strerror_r+0x132>
 8027458:	4855      	ldr	r0, [pc, #340]	; (80275b0 <_strerror_r+0x300>)
 802745a:	e7c2      	b.n	80273e2 <_strerror_r+0x132>
 802745c:	4855      	ldr	r0, [pc, #340]	; (80275b4 <_strerror_r+0x304>)
 802745e:	e7c0      	b.n	80273e2 <_strerror_r+0x132>
 8027460:	4855      	ldr	r0, [pc, #340]	; (80275b8 <_strerror_r+0x308>)
 8027462:	e7be      	b.n	80273e2 <_strerror_r+0x132>
 8027464:	4855      	ldr	r0, [pc, #340]	; (80275bc <_strerror_r+0x30c>)
 8027466:	e7bc      	b.n	80273e2 <_strerror_r+0x132>
 8027468:	4855      	ldr	r0, [pc, #340]	; (80275c0 <_strerror_r+0x310>)
 802746a:	e7ba      	b.n	80273e2 <_strerror_r+0x132>
 802746c:	4855      	ldr	r0, [pc, #340]	; (80275c4 <_strerror_r+0x314>)
 802746e:	e7b8      	b.n	80273e2 <_strerror_r+0x132>
 8027470:	4855      	ldr	r0, [pc, #340]	; (80275c8 <_strerror_r+0x318>)
 8027472:	e7b6      	b.n	80273e2 <_strerror_r+0x132>
 8027474:	4855      	ldr	r0, [pc, #340]	; (80275cc <_strerror_r+0x31c>)
 8027476:	e7b4      	b.n	80273e2 <_strerror_r+0x132>
 8027478:	4855      	ldr	r0, [pc, #340]	; (80275d0 <_strerror_r+0x320>)
 802747a:	e7b2      	b.n	80273e2 <_strerror_r+0x132>
 802747c:	4855      	ldr	r0, [pc, #340]	; (80275d4 <_strerror_r+0x324>)
 802747e:	e7b0      	b.n	80273e2 <_strerror_r+0x132>
 8027480:	4855      	ldr	r0, [pc, #340]	; (80275d8 <_strerror_r+0x328>)
 8027482:	e7ae      	b.n	80273e2 <_strerror_r+0x132>
 8027484:	4855      	ldr	r0, [pc, #340]	; (80275dc <_strerror_r+0x32c>)
 8027486:	e7ac      	b.n	80273e2 <_strerror_r+0x132>
 8027488:	4855      	ldr	r0, [pc, #340]	; (80275e0 <_strerror_r+0x330>)
 802748a:	e7aa      	b.n	80273e2 <_strerror_r+0x132>
 802748c:	4855      	ldr	r0, [pc, #340]	; (80275e4 <_strerror_r+0x334>)
 802748e:	e7a8      	b.n	80273e2 <_strerror_r+0x132>
 8027490:	4855      	ldr	r0, [pc, #340]	; (80275e8 <_strerror_r+0x338>)
 8027492:	e7a6      	b.n	80273e2 <_strerror_r+0x132>
 8027494:	4855      	ldr	r0, [pc, #340]	; (80275ec <_strerror_r+0x33c>)
 8027496:	e7a4      	b.n	80273e2 <_strerror_r+0x132>
 8027498:	4855      	ldr	r0, [pc, #340]	; (80275f0 <_strerror_r+0x340>)
 802749a:	e7a2      	b.n	80273e2 <_strerror_r+0x132>
 802749c:	4855      	ldr	r0, [pc, #340]	; (80275f4 <_strerror_r+0x344>)
 802749e:	e7a0      	b.n	80273e2 <_strerror_r+0x132>
 80274a0:	4855      	ldr	r0, [pc, #340]	; (80275f8 <_strerror_r+0x348>)
 80274a2:	e79e      	b.n	80273e2 <_strerror_r+0x132>
 80274a4:	4855      	ldr	r0, [pc, #340]	; (80275fc <_strerror_r+0x34c>)
 80274a6:	e79c      	b.n	80273e2 <_strerror_r+0x132>
 80274a8:	4855      	ldr	r0, [pc, #340]	; (8027600 <_strerror_r+0x350>)
 80274aa:	e79a      	b.n	80273e2 <_strerror_r+0x132>
 80274ac:	4855      	ldr	r0, [pc, #340]	; (8027604 <_strerror_r+0x354>)
 80274ae:	e798      	b.n	80273e2 <_strerror_r+0x132>
 80274b0:	4855      	ldr	r0, [pc, #340]	; (8027608 <_strerror_r+0x358>)
 80274b2:	e796      	b.n	80273e2 <_strerror_r+0x132>
 80274b4:	4855      	ldr	r0, [pc, #340]	; (802760c <_strerror_r+0x35c>)
 80274b6:	e794      	b.n	80273e2 <_strerror_r+0x132>
 80274b8:	4855      	ldr	r0, [pc, #340]	; (8027610 <_strerror_r+0x360>)
 80274ba:	e792      	b.n	80273e2 <_strerror_r+0x132>
 80274bc:	4855      	ldr	r0, [pc, #340]	; (8027614 <_strerror_r+0x364>)
 80274be:	e790      	b.n	80273e2 <_strerror_r+0x132>
 80274c0:	4855      	ldr	r0, [pc, #340]	; (8027618 <_strerror_r+0x368>)
 80274c2:	e78e      	b.n	80273e2 <_strerror_r+0x132>
 80274c4:	4855      	ldr	r0, [pc, #340]	; (802761c <_strerror_r+0x36c>)
 80274c6:	e78c      	b.n	80273e2 <_strerror_r+0x132>
 80274c8:	4855      	ldr	r0, [pc, #340]	; (8027620 <_strerror_r+0x370>)
 80274ca:	e78a      	b.n	80273e2 <_strerror_r+0x132>
 80274cc:	4855      	ldr	r0, [pc, #340]	; (8027624 <_strerror_r+0x374>)
 80274ce:	e788      	b.n	80273e2 <_strerror_r+0x132>
 80274d0:	4855      	ldr	r0, [pc, #340]	; (8027628 <_strerror_r+0x378>)
 80274d2:	e786      	b.n	80273e2 <_strerror_r+0x132>
 80274d4:	4855      	ldr	r0, [pc, #340]	; (802762c <_strerror_r+0x37c>)
 80274d6:	e784      	b.n	80273e2 <_strerror_r+0x132>
 80274d8:	4855      	ldr	r0, [pc, #340]	; (8027630 <_strerror_r+0x380>)
 80274da:	e782      	b.n	80273e2 <_strerror_r+0x132>
 80274dc:	4855      	ldr	r0, [pc, #340]	; (8027634 <_strerror_r+0x384>)
 80274de:	e780      	b.n	80273e2 <_strerror_r+0x132>
 80274e0:	4855      	ldr	r0, [pc, #340]	; (8027638 <_strerror_r+0x388>)
 80274e2:	e77e      	b.n	80273e2 <_strerror_r+0x132>
 80274e4:	4855      	ldr	r0, [pc, #340]	; (802763c <_strerror_r+0x38c>)
 80274e6:	e77c      	b.n	80273e2 <_strerror_r+0x132>
 80274e8:	4855      	ldr	r0, [pc, #340]	; (8027640 <_strerror_r+0x390>)
 80274ea:	e77a      	b.n	80273e2 <_strerror_r+0x132>
 80274ec:	4855      	ldr	r0, [pc, #340]	; (8027644 <_strerror_r+0x394>)
 80274ee:	e778      	b.n	80273e2 <_strerror_r+0x132>
 80274f0:	4855      	ldr	r0, [pc, #340]	; (8027648 <_strerror_r+0x398>)
 80274f2:	e776      	b.n	80273e2 <_strerror_r+0x132>
 80274f4:	4855      	ldr	r0, [pc, #340]	; (802764c <_strerror_r+0x39c>)
 80274f6:	e774      	b.n	80273e2 <_strerror_r+0x132>
 80274f8:	4855      	ldr	r0, [pc, #340]	; (8027650 <_strerror_r+0x3a0>)
 80274fa:	e772      	b.n	80273e2 <_strerror_r+0x132>
 80274fc:	4855      	ldr	r0, [pc, #340]	; (8027654 <_strerror_r+0x3a4>)
 80274fe:	e770      	b.n	80273e2 <_strerror_r+0x132>
 8027500:	4855      	ldr	r0, [pc, #340]	; (8027658 <_strerror_r+0x3a8>)
 8027502:	e76e      	b.n	80273e2 <_strerror_r+0x132>
 8027504:	4855      	ldr	r0, [pc, #340]	; (802765c <_strerror_r+0x3ac>)
 8027506:	e76c      	b.n	80273e2 <_strerror_r+0x132>
 8027508:	4855      	ldr	r0, [pc, #340]	; (8027660 <_strerror_r+0x3b0>)
 802750a:	e76a      	b.n	80273e2 <_strerror_r+0x132>
 802750c:	4855      	ldr	r0, [pc, #340]	; (8027664 <_strerror_r+0x3b4>)
 802750e:	e768      	b.n	80273e2 <_strerror_r+0x132>
 8027510:	4855      	ldr	r0, [pc, #340]	; (8027668 <_strerror_r+0x3b8>)
 8027512:	e766      	b.n	80273e2 <_strerror_r+0x132>
 8027514:	4855      	ldr	r0, [pc, #340]	; (802766c <_strerror_r+0x3bc>)
 8027516:	e764      	b.n	80273e2 <_strerror_r+0x132>
 8027518:	4855      	ldr	r0, [pc, #340]	; (8027670 <_strerror_r+0x3c0>)
 802751a:	e762      	b.n	80273e2 <_strerror_r+0x132>
 802751c:	2b00      	cmp	r3, #0
 802751e:	bf14      	ite	ne
 8027520:	461a      	movne	r2, r3
 8027522:	4622      	moveq	r2, r4
 8027524:	f000 fbfc 	bl	8027d20 <_user_strerror>
 8027528:	4b52      	ldr	r3, [pc, #328]	; (8027674 <_strerror_r+0x3c4>)
 802752a:	2800      	cmp	r0, #0
 802752c:	bf08      	it	eq
 802752e:	4618      	moveq	r0, r3
 8027530:	e757      	b.n	80273e2 <_strerror_r+0x132>
 8027532:	4851      	ldr	r0, [pc, #324]	; (8027678 <_strerror_r+0x3c8>)
 8027534:	e755      	b.n	80273e2 <_strerror_r+0x132>
 8027536:	bf00      	nop
 8027538:	0802ef62 	.word	0x0802ef62
 802753c:	0802ef6c 	.word	0x0802ef6c
 8027540:	0802ef86 	.word	0x0802ef86
 8027544:	0802ef96 	.word	0x0802ef96
 8027548:	0802efae 	.word	0x0802efae
 802754c:	0802efb8 	.word	0x0802efb8
 8027550:	0802efd2 	.word	0x0802efd2
 8027554:	0802efe4 	.word	0x0802efe4
 8027558:	0802eff6 	.word	0x0802eff6
 802755c:	0802f00f 	.word	0x0802f00f
 8027560:	0802f01f 	.word	0x0802f01f
 8027564:	0802f02b 	.word	0x0802f02b
 8027568:	0802f048 	.word	0x0802f048
 802756c:	0802f05a 	.word	0x0802f05a
 8027570:	0802f06b 	.word	0x0802f06b
 8027574:	0802f07d 	.word	0x0802f07d
 8027578:	0802f089 	.word	0x0802f089
 802757c:	0802f0a1 	.word	0x0802f0a1
 8027580:	0802f0ad 	.word	0x0802f0ad
 8027584:	0802f0bf 	.word	0x0802f0bf
 8027588:	0802f0ce 	.word	0x0802f0ce
 802758c:	0802f0de 	.word	0x0802f0de
 8027590:	0802f0eb 	.word	0x0802f0eb
 8027594:	0802f10a 	.word	0x0802f10a
 8027598:	0802f119 	.word	0x0802f119
 802759c:	0802f12a 	.word	0x0802f12a
 80275a0:	0802f14e 	.word	0x0802f14e
 80275a4:	0802f16c 	.word	0x0802f16c
 80275a8:	0802f18a 	.word	0x0802f18a
 80275ac:	0802f1aa 	.word	0x0802f1aa
 80275b0:	0802f1c1 	.word	0x0802f1c1
 80275b4:	0802f1d0 	.word	0x0802f1d0
 80275b8:	0802f1df 	.word	0x0802f1df
 80275bc:	0802f1f3 	.word	0x0802f1f3
 80275c0:	0802f20b 	.word	0x0802f20b
 80275c4:	0802f219 	.word	0x0802f219
 80275c8:	0802f226 	.word	0x0802f226
 80275cc:	0802f23c 	.word	0x0802f23c
 80275d0:	0802f24b 	.word	0x0802f24b
 80275d4:	0802f257 	.word	0x0802f257
 80275d8:	0802f286 	.word	0x0802f286
 80275dc:	0802f297 	.word	0x0802f297
 80275e0:	0802f2b2 	.word	0x0802f2b2
 80275e4:	0802f2c5 	.word	0x0802f2c5
 80275e8:	0802f2db 	.word	0x0802f2db
 80275ec:	0802f2e4 	.word	0x0802f2e4
 80275f0:	0802f2fb 	.word	0x0802f2fb
 80275f4:	0802f303 	.word	0x0802f303
 80275f8:	0802f310 	.word	0x0802f310
 80275fc:	0802f325 	.word	0x0802f325
 8027600:	0802f339 	.word	0x0802f339
 8027604:	0802f351 	.word	0x0802f351
 8027608:	0802f360 	.word	0x0802f360
 802760c:	0802f371 	.word	0x0802f371
 8027610:	0802f384 	.word	0x0802f384
 8027614:	0802f390 	.word	0x0802f390
 8027618:	0802f3a9 	.word	0x0802f3a9
 802761c:	0802f3bd 	.word	0x0802f3bd
 8027620:	0802f3d8 	.word	0x0802f3d8
 8027624:	0802f3f0 	.word	0x0802f3f0
 8027628:	0802f40a 	.word	0x0802f40a
 802762c:	0802f412 	.word	0x0802f412
 8027630:	0802f442 	.word	0x0802f442
 8027634:	0802f461 	.word	0x0802f461
 8027638:	0802f480 	.word	0x0802f480
 802763c:	0802f497 	.word	0x0802f497
 8027640:	0802f4aa 	.word	0x0802f4aa
 8027644:	0802f4c3 	.word	0x0802f4c3
 8027648:	0802f4da 	.word	0x0802f4da
 802764c:	0802f4f0 	.word	0x0802f4f0
 8027650:	0802f511 	.word	0x0802f511
 8027654:	0802f529 	.word	0x0802f529
 8027658:	0802f545 	.word	0x0802f545
 802765c:	0802f558 	.word	0x0802f558
 8027660:	0802f56e 	.word	0x0802f56e
 8027664:	0802f582 	.word	0x0802f582
 8027668:	0802f5a4 	.word	0x0802f5a4
 802766c:	0802f5ca 	.word	0x0802f5ca
 8027670:	0802f5db 	.word	0x0802f5db
 8027674:	0802f6d0 	.word	0x0802f6d0
 8027678:	0802f5f0 	.word	0x0802f5f0

0802767c <strerror>:
 802767c:	4601      	mov	r1, r0
 802767e:	4803      	ldr	r0, [pc, #12]	; (802768c <strerror+0x10>)
 8027680:	2300      	movs	r3, #0
 8027682:	6800      	ldr	r0, [r0, #0]
 8027684:	461a      	mov	r2, r3
 8027686:	f7ff be13 	b.w	80272b0 <_strerror_r>
 802768a:	bf00      	nop
 802768c:	240000bc 	.word	0x240000bc

08027690 <strncmp>:
 8027690:	b510      	push	{r4, lr}
 8027692:	b16a      	cbz	r2, 80276b0 <strncmp+0x20>
 8027694:	3901      	subs	r1, #1
 8027696:	1884      	adds	r4, r0, r2
 8027698:	f810 3b01 	ldrb.w	r3, [r0], #1
 802769c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80276a0:	4293      	cmp	r3, r2
 80276a2:	d103      	bne.n	80276ac <strncmp+0x1c>
 80276a4:	42a0      	cmp	r0, r4
 80276a6:	d001      	beq.n	80276ac <strncmp+0x1c>
 80276a8:	2b00      	cmp	r3, #0
 80276aa:	d1f5      	bne.n	8027698 <strncmp+0x8>
 80276ac:	1a98      	subs	r0, r3, r2
 80276ae:	bd10      	pop	{r4, pc}
 80276b0:	4610      	mov	r0, r2
 80276b2:	e7fc      	b.n	80276ae <strncmp+0x1e>

080276b4 <strncpy>:
 80276b4:	b510      	push	{r4, lr}
 80276b6:	3901      	subs	r1, #1
 80276b8:	4603      	mov	r3, r0
 80276ba:	b132      	cbz	r2, 80276ca <strncpy+0x16>
 80276bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80276c0:	f803 4b01 	strb.w	r4, [r3], #1
 80276c4:	3a01      	subs	r2, #1
 80276c6:	2c00      	cmp	r4, #0
 80276c8:	d1f7      	bne.n	80276ba <strncpy+0x6>
 80276ca:	441a      	add	r2, r3
 80276cc:	2100      	movs	r1, #0
 80276ce:	4293      	cmp	r3, r2
 80276d0:	d100      	bne.n	80276d4 <strncpy+0x20>
 80276d2:	bd10      	pop	{r4, pc}
 80276d4:	f803 1b01 	strb.w	r1, [r3], #1
 80276d8:	e7f9      	b.n	80276ce <strncpy+0x1a>
	...

080276dc <strtok>:
 80276dc:	4b16      	ldr	r3, [pc, #88]	; (8027738 <strtok+0x5c>)
 80276de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80276e0:	681e      	ldr	r6, [r3, #0]
 80276e2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80276e4:	4605      	mov	r5, r0
 80276e6:	b9fc      	cbnz	r4, 8027728 <strtok+0x4c>
 80276e8:	2050      	movs	r0, #80	; 0x50
 80276ea:	9101      	str	r1, [sp, #4]
 80276ec:	f7fe fd4e 	bl	802618c <malloc>
 80276f0:	9901      	ldr	r1, [sp, #4]
 80276f2:	65b0      	str	r0, [r6, #88]	; 0x58
 80276f4:	4602      	mov	r2, r0
 80276f6:	b920      	cbnz	r0, 8027702 <strtok+0x26>
 80276f8:	4b10      	ldr	r3, [pc, #64]	; (802773c <strtok+0x60>)
 80276fa:	4811      	ldr	r0, [pc, #68]	; (8027740 <strtok+0x64>)
 80276fc:	2157      	movs	r1, #87	; 0x57
 80276fe:	f000 fbe3 	bl	8027ec8 <__assert_func>
 8027702:	e9c0 4400 	strd	r4, r4, [r0]
 8027706:	e9c0 4402 	strd	r4, r4, [r0, #8]
 802770a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 802770e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8027712:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8027716:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 802771a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 802771e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8027722:	6184      	str	r4, [r0, #24]
 8027724:	7704      	strb	r4, [r0, #28]
 8027726:	6244      	str	r4, [r0, #36]	; 0x24
 8027728:	6db2      	ldr	r2, [r6, #88]	; 0x58
 802772a:	2301      	movs	r3, #1
 802772c:	4628      	mov	r0, r5
 802772e:	b002      	add	sp, #8
 8027730:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8027734:	f000 b806 	b.w	8027744 <__strtok_r>
 8027738:	240000bc 	.word	0x240000bc
 802773c:	0802ede8 	.word	0x0802ede8
 8027740:	0802f5f8 	.word	0x0802f5f8

08027744 <__strtok_r>:
 8027744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027746:	b908      	cbnz	r0, 802774c <__strtok_r+0x8>
 8027748:	6810      	ldr	r0, [r2, #0]
 802774a:	b188      	cbz	r0, 8027770 <__strtok_r+0x2c>
 802774c:	4604      	mov	r4, r0
 802774e:	4620      	mov	r0, r4
 8027750:	f814 5b01 	ldrb.w	r5, [r4], #1
 8027754:	460f      	mov	r7, r1
 8027756:	f817 6b01 	ldrb.w	r6, [r7], #1
 802775a:	b91e      	cbnz	r6, 8027764 <__strtok_r+0x20>
 802775c:	b965      	cbnz	r5, 8027778 <__strtok_r+0x34>
 802775e:	6015      	str	r5, [r2, #0]
 8027760:	4628      	mov	r0, r5
 8027762:	e005      	b.n	8027770 <__strtok_r+0x2c>
 8027764:	42b5      	cmp	r5, r6
 8027766:	d1f6      	bne.n	8027756 <__strtok_r+0x12>
 8027768:	2b00      	cmp	r3, #0
 802776a:	d1f0      	bne.n	802774e <__strtok_r+0xa>
 802776c:	6014      	str	r4, [r2, #0]
 802776e:	7003      	strb	r3, [r0, #0]
 8027770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027772:	461c      	mov	r4, r3
 8027774:	e00c      	b.n	8027790 <__strtok_r+0x4c>
 8027776:	b915      	cbnz	r5, 802777e <__strtok_r+0x3a>
 8027778:	f814 3b01 	ldrb.w	r3, [r4], #1
 802777c:	460e      	mov	r6, r1
 802777e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8027782:	42ab      	cmp	r3, r5
 8027784:	d1f7      	bne.n	8027776 <__strtok_r+0x32>
 8027786:	2b00      	cmp	r3, #0
 8027788:	d0f3      	beq.n	8027772 <__strtok_r+0x2e>
 802778a:	2300      	movs	r3, #0
 802778c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8027790:	6014      	str	r4, [r2, #0]
 8027792:	e7ed      	b.n	8027770 <__strtok_r+0x2c>

08027794 <_strtol_l.isra.0>:
 8027794:	2b01      	cmp	r3, #1
 8027796:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802779a:	d001      	beq.n	80277a0 <_strtol_l.isra.0+0xc>
 802779c:	2b24      	cmp	r3, #36	; 0x24
 802779e:	d906      	bls.n	80277ae <_strtol_l.isra.0+0x1a>
 80277a0:	f001 f9d0 	bl	8028b44 <__errno>
 80277a4:	2316      	movs	r3, #22
 80277a6:	6003      	str	r3, [r0, #0]
 80277a8:	2000      	movs	r0, #0
 80277aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80277ae:	4f3a      	ldr	r7, [pc, #232]	; (8027898 <_strtol_l.isra.0+0x104>)
 80277b0:	468e      	mov	lr, r1
 80277b2:	4676      	mov	r6, lr
 80277b4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80277b8:	5de5      	ldrb	r5, [r4, r7]
 80277ba:	f015 0508 	ands.w	r5, r5, #8
 80277be:	d1f8      	bne.n	80277b2 <_strtol_l.isra.0+0x1e>
 80277c0:	2c2d      	cmp	r4, #45	; 0x2d
 80277c2:	d134      	bne.n	802782e <_strtol_l.isra.0+0x9a>
 80277c4:	f89e 4000 	ldrb.w	r4, [lr]
 80277c8:	f04f 0801 	mov.w	r8, #1
 80277cc:	f106 0e02 	add.w	lr, r6, #2
 80277d0:	2b00      	cmp	r3, #0
 80277d2:	d05c      	beq.n	802788e <_strtol_l.isra.0+0xfa>
 80277d4:	2b10      	cmp	r3, #16
 80277d6:	d10c      	bne.n	80277f2 <_strtol_l.isra.0+0x5e>
 80277d8:	2c30      	cmp	r4, #48	; 0x30
 80277da:	d10a      	bne.n	80277f2 <_strtol_l.isra.0+0x5e>
 80277dc:	f89e 4000 	ldrb.w	r4, [lr]
 80277e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80277e4:	2c58      	cmp	r4, #88	; 0x58
 80277e6:	d14d      	bne.n	8027884 <_strtol_l.isra.0+0xf0>
 80277e8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80277ec:	2310      	movs	r3, #16
 80277ee:	f10e 0e02 	add.w	lr, lr, #2
 80277f2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80277f6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80277fa:	2600      	movs	r6, #0
 80277fc:	fbbc f9f3 	udiv	r9, ip, r3
 8027800:	4635      	mov	r5, r6
 8027802:	fb03 ca19 	mls	sl, r3, r9, ip
 8027806:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 802780a:	2f09      	cmp	r7, #9
 802780c:	d818      	bhi.n	8027840 <_strtol_l.isra.0+0xac>
 802780e:	463c      	mov	r4, r7
 8027810:	42a3      	cmp	r3, r4
 8027812:	dd24      	ble.n	802785e <_strtol_l.isra.0+0xca>
 8027814:	2e00      	cmp	r6, #0
 8027816:	db1f      	blt.n	8027858 <_strtol_l.isra.0+0xc4>
 8027818:	45a9      	cmp	r9, r5
 802781a:	d31d      	bcc.n	8027858 <_strtol_l.isra.0+0xc4>
 802781c:	d101      	bne.n	8027822 <_strtol_l.isra.0+0x8e>
 802781e:	45a2      	cmp	sl, r4
 8027820:	db1a      	blt.n	8027858 <_strtol_l.isra.0+0xc4>
 8027822:	fb05 4503 	mla	r5, r5, r3, r4
 8027826:	2601      	movs	r6, #1
 8027828:	f81e 4b01 	ldrb.w	r4, [lr], #1
 802782c:	e7eb      	b.n	8027806 <_strtol_l.isra.0+0x72>
 802782e:	2c2b      	cmp	r4, #43	; 0x2b
 8027830:	bf08      	it	eq
 8027832:	f89e 4000 	ldrbeq.w	r4, [lr]
 8027836:	46a8      	mov	r8, r5
 8027838:	bf08      	it	eq
 802783a:	f106 0e02 	addeq.w	lr, r6, #2
 802783e:	e7c7      	b.n	80277d0 <_strtol_l.isra.0+0x3c>
 8027840:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8027844:	2f19      	cmp	r7, #25
 8027846:	d801      	bhi.n	802784c <_strtol_l.isra.0+0xb8>
 8027848:	3c37      	subs	r4, #55	; 0x37
 802784a:	e7e1      	b.n	8027810 <_strtol_l.isra.0+0x7c>
 802784c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8027850:	2f19      	cmp	r7, #25
 8027852:	d804      	bhi.n	802785e <_strtol_l.isra.0+0xca>
 8027854:	3c57      	subs	r4, #87	; 0x57
 8027856:	e7db      	b.n	8027810 <_strtol_l.isra.0+0x7c>
 8027858:	f04f 36ff 	mov.w	r6, #4294967295
 802785c:	e7e4      	b.n	8027828 <_strtol_l.isra.0+0x94>
 802785e:	2e00      	cmp	r6, #0
 8027860:	da05      	bge.n	802786e <_strtol_l.isra.0+0xda>
 8027862:	2322      	movs	r3, #34	; 0x22
 8027864:	6003      	str	r3, [r0, #0]
 8027866:	4665      	mov	r5, ip
 8027868:	b942      	cbnz	r2, 802787c <_strtol_l.isra.0+0xe8>
 802786a:	4628      	mov	r0, r5
 802786c:	e79d      	b.n	80277aa <_strtol_l.isra.0+0x16>
 802786e:	f1b8 0f00 	cmp.w	r8, #0
 8027872:	d000      	beq.n	8027876 <_strtol_l.isra.0+0xe2>
 8027874:	426d      	negs	r5, r5
 8027876:	2a00      	cmp	r2, #0
 8027878:	d0f7      	beq.n	802786a <_strtol_l.isra.0+0xd6>
 802787a:	b10e      	cbz	r6, 8027880 <_strtol_l.isra.0+0xec>
 802787c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8027880:	6011      	str	r1, [r2, #0]
 8027882:	e7f2      	b.n	802786a <_strtol_l.isra.0+0xd6>
 8027884:	2430      	movs	r4, #48	; 0x30
 8027886:	2b00      	cmp	r3, #0
 8027888:	d1b3      	bne.n	80277f2 <_strtol_l.isra.0+0x5e>
 802788a:	2308      	movs	r3, #8
 802788c:	e7b1      	b.n	80277f2 <_strtol_l.isra.0+0x5e>
 802788e:	2c30      	cmp	r4, #48	; 0x30
 8027890:	d0a4      	beq.n	80277dc <_strtol_l.isra.0+0x48>
 8027892:	230a      	movs	r3, #10
 8027894:	e7ad      	b.n	80277f2 <_strtol_l.isra.0+0x5e>
 8027896:	bf00      	nop
 8027898:	0802ec81 	.word	0x0802ec81

0802789c <_strtol_r>:
 802789c:	f7ff bf7a 	b.w	8027794 <_strtol_l.isra.0>

080278a0 <strtol>:
 80278a0:	4613      	mov	r3, r2
 80278a2:	460a      	mov	r2, r1
 80278a4:	4601      	mov	r1, r0
 80278a6:	4802      	ldr	r0, [pc, #8]	; (80278b0 <strtol+0x10>)
 80278a8:	6800      	ldr	r0, [r0, #0]
 80278aa:	f7ff bf73 	b.w	8027794 <_strtol_l.isra.0>
 80278ae:	bf00      	nop
 80278b0:	240000bc 	.word	0x240000bc

080278b4 <__tzcalc_limits>:
 80278b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80278b8:	4680      	mov	r8, r0
 80278ba:	f001 fa4d 	bl	8028d58 <__gettzinfo>
 80278be:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80278c2:	4598      	cmp	r8, r3
 80278c4:	f340 8098 	ble.w	80279f8 <__tzcalc_limits+0x144>
 80278c8:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80278cc:	4443      	add	r3, r8
 80278ce:	109b      	asrs	r3, r3, #2
 80278d0:	f240 126d 	movw	r2, #365	; 0x16d
 80278d4:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 80278d8:	fb02 3505 	mla	r5, r2, r5, r3
 80278dc:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80278e0:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 80278e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80278e8:	441d      	add	r5, r3
 80278ea:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80278ee:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80278f2:	fb98 f7f3 	sdiv	r7, r8, r3
 80278f6:	fb03 8717 	mls	r7, r3, r7, r8
 80278fa:	4442      	add	r2, r8
 80278fc:	fab7 fc87 	clz	ip, r7
 8027900:	fbb2 f2f3 	udiv	r2, r2, r3
 8027904:	f008 0303 	and.w	r3, r8, #3
 8027908:	4415      	add	r5, r2
 802790a:	2264      	movs	r2, #100	; 0x64
 802790c:	f8c0 8004 	str.w	r8, [r0, #4]
 8027910:	fb98 f6f2 	sdiv	r6, r8, r2
 8027914:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8027918:	fb02 8616 	mls	r6, r2, r6, r8
 802791c:	4604      	mov	r4, r0
 802791e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8027922:	9300      	str	r3, [sp, #0]
 8027924:	f04f 0e07 	mov.w	lr, #7
 8027928:	7a22      	ldrb	r2, [r4, #8]
 802792a:	6963      	ldr	r3, [r4, #20]
 802792c:	2a4a      	cmp	r2, #74	; 0x4a
 802792e:	d128      	bne.n	8027982 <__tzcalc_limits+0xce>
 8027930:	9900      	ldr	r1, [sp, #0]
 8027932:	18ea      	adds	r2, r5, r3
 8027934:	b901      	cbnz	r1, 8027938 <__tzcalc_limits+0x84>
 8027936:	b906      	cbnz	r6, 802793a <__tzcalc_limits+0x86>
 8027938:	bb0f      	cbnz	r7, 802797e <__tzcalc_limits+0xca>
 802793a:	2b3b      	cmp	r3, #59	; 0x3b
 802793c:	bfd4      	ite	le
 802793e:	2300      	movle	r3, #0
 8027940:	2301      	movgt	r3, #1
 8027942:	4413      	add	r3, r2
 8027944:	1e5a      	subs	r2, r3, #1
 8027946:	69a3      	ldr	r3, [r4, #24]
 8027948:	492c      	ldr	r1, [pc, #176]	; (80279fc <__tzcalc_limits+0x148>)
 802794a:	fb01 3202 	mla	r2, r1, r2, r3
 802794e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8027950:	4413      	add	r3, r2
 8027952:	461a      	mov	r2, r3
 8027954:	17db      	asrs	r3, r3, #31
 8027956:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802795a:	3428      	adds	r4, #40	; 0x28
 802795c:	45a3      	cmp	fp, r4
 802795e:	d1e3      	bne.n	8027928 <__tzcalc_limits+0x74>
 8027960:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8027964:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8027968:	4294      	cmp	r4, r2
 802796a:	eb75 0303 	sbcs.w	r3, r5, r3
 802796e:	bfb4      	ite	lt
 8027970:	2301      	movlt	r3, #1
 8027972:	2300      	movge	r3, #0
 8027974:	6003      	str	r3, [r0, #0]
 8027976:	2001      	movs	r0, #1
 8027978:	b003      	add	sp, #12
 802797a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802797e:	2300      	movs	r3, #0
 8027980:	e7df      	b.n	8027942 <__tzcalc_limits+0x8e>
 8027982:	2a44      	cmp	r2, #68	; 0x44
 8027984:	d101      	bne.n	802798a <__tzcalc_limits+0xd6>
 8027986:	18ea      	adds	r2, r5, r3
 8027988:	e7dd      	b.n	8027946 <__tzcalc_limits+0x92>
 802798a:	9a00      	ldr	r2, [sp, #0]
 802798c:	bb72      	cbnz	r2, 80279ec <__tzcalc_limits+0x138>
 802798e:	2e00      	cmp	r6, #0
 8027990:	bf0c      	ite	eq
 8027992:	46e0      	moveq	r8, ip
 8027994:	f04f 0801 	movne.w	r8, #1
 8027998:	4919      	ldr	r1, [pc, #100]	; (8027a00 <__tzcalc_limits+0x14c>)
 802799a:	68e2      	ldr	r2, [r4, #12]
 802799c:	9201      	str	r2, [sp, #4]
 802799e:	f04f 0a30 	mov.w	sl, #48	; 0x30
 80279a2:	fb0a 1808 	mla	r8, sl, r8, r1
 80279a6:	462a      	mov	r2, r5
 80279a8:	f04f 0900 	mov.w	r9, #0
 80279ac:	f1a8 0804 	sub.w	r8, r8, #4
 80279b0:	9901      	ldr	r1, [sp, #4]
 80279b2:	f109 0901 	add.w	r9, r9, #1
 80279b6:	4549      	cmp	r1, r9
 80279b8:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 80279bc:	dc18      	bgt.n	80279f0 <__tzcalc_limits+0x13c>
 80279be:	f102 0804 	add.w	r8, r2, #4
 80279c2:	fb98 f9fe 	sdiv	r9, r8, lr
 80279c6:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80279ca:	eba8 0909 	sub.w	r9, r8, r9
 80279ce:	ebb3 0909 	subs.w	r9, r3, r9
 80279d2:	6923      	ldr	r3, [r4, #16]
 80279d4:	f103 33ff 	add.w	r3, r3, #4294967295
 80279d8:	bf48      	it	mi
 80279da:	f109 0907 	addmi.w	r9, r9, #7
 80279de:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80279e2:	444b      	add	r3, r9
 80279e4:	4553      	cmp	r3, sl
 80279e6:	da05      	bge.n	80279f4 <__tzcalc_limits+0x140>
 80279e8:	441a      	add	r2, r3
 80279ea:	e7ac      	b.n	8027946 <__tzcalc_limits+0x92>
 80279ec:	46e0      	mov	r8, ip
 80279ee:	e7d3      	b.n	8027998 <__tzcalc_limits+0xe4>
 80279f0:	4452      	add	r2, sl
 80279f2:	e7dd      	b.n	80279b0 <__tzcalc_limits+0xfc>
 80279f4:	3b07      	subs	r3, #7
 80279f6:	e7f5      	b.n	80279e4 <__tzcalc_limits+0x130>
 80279f8:	2000      	movs	r0, #0
 80279fa:	e7bd      	b.n	8027978 <__tzcalc_limits+0xc4>
 80279fc:	00015180 	.word	0x00015180
 8027a00:	0802ee60 	.word	0x0802ee60

08027a04 <__tz_lock>:
 8027a04:	4801      	ldr	r0, [pc, #4]	; (8027a0c <__tz_lock+0x8>)
 8027a06:	f7fe bbbc 	b.w	8026182 <__retarget_lock_acquire>
 8027a0a:	bf00      	nop
 8027a0c:	2400a4bf 	.word	0x2400a4bf

08027a10 <__tz_unlock>:
 8027a10:	4801      	ldr	r0, [pc, #4]	; (8027a18 <__tz_unlock+0x8>)
 8027a12:	f7fe bbb8 	b.w	8026186 <__retarget_lock_release>
 8027a16:	bf00      	nop
 8027a18:	2400a4bf 	.word	0x2400a4bf

08027a1c <_tzset_unlocked>:
 8027a1c:	4b01      	ldr	r3, [pc, #4]	; (8027a24 <_tzset_unlocked+0x8>)
 8027a1e:	6818      	ldr	r0, [r3, #0]
 8027a20:	f000 b802 	b.w	8027a28 <_tzset_unlocked_r>
 8027a24:	240000bc 	.word	0x240000bc

08027a28 <_tzset_unlocked_r>:
 8027a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027a2c:	b08d      	sub	sp, #52	; 0x34
 8027a2e:	4607      	mov	r7, r0
 8027a30:	f001 f992 	bl	8028d58 <__gettzinfo>
 8027a34:	49ae      	ldr	r1, [pc, #696]	; (8027cf0 <_tzset_unlocked_r+0x2c8>)
 8027a36:	4eaf      	ldr	r6, [pc, #700]	; (8027cf4 <_tzset_unlocked_r+0x2cc>)
 8027a38:	4605      	mov	r5, r0
 8027a3a:	4638      	mov	r0, r7
 8027a3c:	f001 f984 	bl	8028d48 <_getenv_r>
 8027a40:	4604      	mov	r4, r0
 8027a42:	b970      	cbnz	r0, 8027a62 <_tzset_unlocked_r+0x3a>
 8027a44:	4bac      	ldr	r3, [pc, #688]	; (8027cf8 <_tzset_unlocked_r+0x2d0>)
 8027a46:	4aad      	ldr	r2, [pc, #692]	; (8027cfc <_tzset_unlocked_r+0x2d4>)
 8027a48:	6018      	str	r0, [r3, #0]
 8027a4a:	4bad      	ldr	r3, [pc, #692]	; (8027d00 <_tzset_unlocked_r+0x2d8>)
 8027a4c:	6018      	str	r0, [r3, #0]
 8027a4e:	4bad      	ldr	r3, [pc, #692]	; (8027d04 <_tzset_unlocked_r+0x2dc>)
 8027a50:	6830      	ldr	r0, [r6, #0]
 8027a52:	e9c3 2200 	strd	r2, r2, [r3]
 8027a56:	f7fe fba1 	bl	802619c <free>
 8027a5a:	6034      	str	r4, [r6, #0]
 8027a5c:	b00d      	add	sp, #52	; 0x34
 8027a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027a62:	6831      	ldr	r1, [r6, #0]
 8027a64:	2900      	cmp	r1, #0
 8027a66:	d15f      	bne.n	8027b28 <_tzset_unlocked_r+0x100>
 8027a68:	6830      	ldr	r0, [r6, #0]
 8027a6a:	f7fe fb97 	bl	802619c <free>
 8027a6e:	4620      	mov	r0, r4
 8027a70:	f7d8 fc40 	bl	80002f4 <strlen>
 8027a74:	1c41      	adds	r1, r0, #1
 8027a76:	4638      	mov	r0, r7
 8027a78:	f7fe fc36 	bl	80262e8 <_malloc_r>
 8027a7c:	6030      	str	r0, [r6, #0]
 8027a7e:	2800      	cmp	r0, #0
 8027a80:	d157      	bne.n	8027b32 <_tzset_unlocked_r+0x10a>
 8027a82:	7823      	ldrb	r3, [r4, #0]
 8027a84:	4aa0      	ldr	r2, [pc, #640]	; (8027d08 <_tzset_unlocked_r+0x2e0>)
 8027a86:	49a1      	ldr	r1, [pc, #644]	; (8027d0c <_tzset_unlocked_r+0x2e4>)
 8027a88:	2b3a      	cmp	r3, #58	; 0x3a
 8027a8a:	bf08      	it	eq
 8027a8c:	3401      	addeq	r4, #1
 8027a8e:	ae0a      	add	r6, sp, #40	; 0x28
 8027a90:	4633      	mov	r3, r6
 8027a92:	4620      	mov	r0, r4
 8027a94:	f7ff fb86 	bl	80271a4 <siscanf>
 8027a98:	2800      	cmp	r0, #0
 8027a9a:	dddf      	ble.n	8027a5c <_tzset_unlocked_r+0x34>
 8027a9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027a9e:	18e7      	adds	r7, r4, r3
 8027aa0:	5ce3      	ldrb	r3, [r4, r3]
 8027aa2:	2b2d      	cmp	r3, #45	; 0x2d
 8027aa4:	d149      	bne.n	8027b3a <_tzset_unlocked_r+0x112>
 8027aa6:	3701      	adds	r7, #1
 8027aa8:	f04f 34ff 	mov.w	r4, #4294967295
 8027aac:	f10d 0a20 	add.w	sl, sp, #32
 8027ab0:	f10d 0b1e 	add.w	fp, sp, #30
 8027ab4:	f04f 0800 	mov.w	r8, #0
 8027ab8:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8027abc:	4994      	ldr	r1, [pc, #592]	; (8027d10 <_tzset_unlocked_r+0x2e8>)
 8027abe:	9603      	str	r6, [sp, #12]
 8027ac0:	f8cd b000 	str.w	fp, [sp]
 8027ac4:	4633      	mov	r3, r6
 8027ac6:	aa07      	add	r2, sp, #28
 8027ac8:	4638      	mov	r0, r7
 8027aca:	f8ad 801e 	strh.w	r8, [sp, #30]
 8027ace:	f8ad 8020 	strh.w	r8, [sp, #32]
 8027ad2:	f7ff fb67 	bl	80271a4 <siscanf>
 8027ad6:	4540      	cmp	r0, r8
 8027ad8:	ddc0      	ble.n	8027a5c <_tzset_unlocked_r+0x34>
 8027ada:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8027ade:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8027ae2:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8027d1c <_tzset_unlocked_r+0x2f4>
 8027ae6:	213c      	movs	r1, #60	; 0x3c
 8027ae8:	fb01 2203 	mla	r2, r1, r3, r2
 8027aec:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8027af0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8027af4:	fb01 2303 	mla	r3, r1, r3, r2
 8027af8:	435c      	muls	r4, r3
 8027afa:	62ac      	str	r4, [r5, #40]	; 0x28
 8027afc:	4c81      	ldr	r4, [pc, #516]	; (8027d04 <_tzset_unlocked_r+0x2dc>)
 8027afe:	4b82      	ldr	r3, [pc, #520]	; (8027d08 <_tzset_unlocked_r+0x2e0>)
 8027b00:	6023      	str	r3, [r4, #0]
 8027b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027b04:	4981      	ldr	r1, [pc, #516]	; (8027d0c <_tzset_unlocked_r+0x2e4>)
 8027b06:	441f      	add	r7, r3
 8027b08:	464a      	mov	r2, r9
 8027b0a:	4633      	mov	r3, r6
 8027b0c:	4638      	mov	r0, r7
 8027b0e:	f7ff fb49 	bl	80271a4 <siscanf>
 8027b12:	4540      	cmp	r0, r8
 8027b14:	dc16      	bgt.n	8027b44 <_tzset_unlocked_r+0x11c>
 8027b16:	6823      	ldr	r3, [r4, #0]
 8027b18:	6063      	str	r3, [r4, #4]
 8027b1a:	4b77      	ldr	r3, [pc, #476]	; (8027cf8 <_tzset_unlocked_r+0x2d0>)
 8027b1c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8027b1e:	601a      	str	r2, [r3, #0]
 8027b20:	4b77      	ldr	r3, [pc, #476]	; (8027d00 <_tzset_unlocked_r+0x2d8>)
 8027b22:	f8c3 8000 	str.w	r8, [r3]
 8027b26:	e799      	b.n	8027a5c <_tzset_unlocked_r+0x34>
 8027b28:	f7d8 fbda 	bl	80002e0 <strcmp>
 8027b2c:	2800      	cmp	r0, #0
 8027b2e:	d19b      	bne.n	8027a68 <_tzset_unlocked_r+0x40>
 8027b30:	e794      	b.n	8027a5c <_tzset_unlocked_r+0x34>
 8027b32:	4621      	mov	r1, r4
 8027b34:	f7ff fbb4 	bl	80272a0 <strcpy>
 8027b38:	e7a3      	b.n	8027a82 <_tzset_unlocked_r+0x5a>
 8027b3a:	2b2b      	cmp	r3, #43	; 0x2b
 8027b3c:	bf08      	it	eq
 8027b3e:	3701      	addeq	r7, #1
 8027b40:	2401      	movs	r4, #1
 8027b42:	e7b3      	b.n	8027aac <_tzset_unlocked_r+0x84>
 8027b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027b46:	f8c4 9004 	str.w	r9, [r4, #4]
 8027b4a:	18fc      	adds	r4, r7, r3
 8027b4c:	5cfb      	ldrb	r3, [r7, r3]
 8027b4e:	2b2d      	cmp	r3, #45	; 0x2d
 8027b50:	f040 808b 	bne.w	8027c6a <_tzset_unlocked_r+0x242>
 8027b54:	3401      	adds	r4, #1
 8027b56:	f04f 37ff 	mov.w	r7, #4294967295
 8027b5a:	2300      	movs	r3, #0
 8027b5c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8027b60:	f8ad 301e 	strh.w	r3, [sp, #30]
 8027b64:	f8ad 3020 	strh.w	r3, [sp, #32]
 8027b68:	930a      	str	r3, [sp, #40]	; 0x28
 8027b6a:	e9cd a602 	strd	sl, r6, [sp, #8]
 8027b6e:	e9cd b600 	strd	fp, r6, [sp]
 8027b72:	4967      	ldr	r1, [pc, #412]	; (8027d10 <_tzset_unlocked_r+0x2e8>)
 8027b74:	4633      	mov	r3, r6
 8027b76:	aa07      	add	r2, sp, #28
 8027b78:	4620      	mov	r0, r4
 8027b7a:	f7ff fb13 	bl	80271a4 <siscanf>
 8027b7e:	2800      	cmp	r0, #0
 8027b80:	dc78      	bgt.n	8027c74 <_tzset_unlocked_r+0x24c>
 8027b82:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8027b84:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8027b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027b8a:	652f      	str	r7, [r5, #80]	; 0x50
 8027b8c:	441c      	add	r4, r3
 8027b8e:	462f      	mov	r7, r5
 8027b90:	f04f 0900 	mov.w	r9, #0
 8027b94:	7823      	ldrb	r3, [r4, #0]
 8027b96:	2b2c      	cmp	r3, #44	; 0x2c
 8027b98:	bf08      	it	eq
 8027b9a:	3401      	addeq	r4, #1
 8027b9c:	f894 8000 	ldrb.w	r8, [r4]
 8027ba0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8027ba4:	d178      	bne.n	8027c98 <_tzset_unlocked_r+0x270>
 8027ba6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8027baa:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8027bae:	ab09      	add	r3, sp, #36	; 0x24
 8027bb0:	9300      	str	r3, [sp, #0]
 8027bb2:	4958      	ldr	r1, [pc, #352]	; (8027d14 <_tzset_unlocked_r+0x2ec>)
 8027bb4:	9603      	str	r6, [sp, #12]
 8027bb6:	4633      	mov	r3, r6
 8027bb8:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8027bbc:	4620      	mov	r0, r4
 8027bbe:	f7ff faf1 	bl	80271a4 <siscanf>
 8027bc2:	2803      	cmp	r0, #3
 8027bc4:	f47f af4a 	bne.w	8027a5c <_tzset_unlocked_r+0x34>
 8027bc8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8027bcc:	1e4b      	subs	r3, r1, #1
 8027bce:	2b0b      	cmp	r3, #11
 8027bd0:	f63f af44 	bhi.w	8027a5c <_tzset_unlocked_r+0x34>
 8027bd4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8027bd8:	1e53      	subs	r3, r2, #1
 8027bda:	2b04      	cmp	r3, #4
 8027bdc:	f63f af3e 	bhi.w	8027a5c <_tzset_unlocked_r+0x34>
 8027be0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8027be4:	2b06      	cmp	r3, #6
 8027be6:	f63f af39 	bhi.w	8027a5c <_tzset_unlocked_r+0x34>
 8027bea:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8027bee:	f887 8008 	strb.w	r8, [r7, #8]
 8027bf2:	617b      	str	r3, [r7, #20]
 8027bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027bf6:	eb04 0803 	add.w	r8, r4, r3
 8027bfa:	2302      	movs	r3, #2
 8027bfc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8027c00:	2300      	movs	r3, #0
 8027c02:	f8ad 301e 	strh.w	r3, [sp, #30]
 8027c06:	f8ad 3020 	strh.w	r3, [sp, #32]
 8027c0a:	930a      	str	r3, [sp, #40]	; 0x28
 8027c0c:	f898 3000 	ldrb.w	r3, [r8]
 8027c10:	2b2f      	cmp	r3, #47	; 0x2f
 8027c12:	d109      	bne.n	8027c28 <_tzset_unlocked_r+0x200>
 8027c14:	e9cd a602 	strd	sl, r6, [sp, #8]
 8027c18:	e9cd b600 	strd	fp, r6, [sp]
 8027c1c:	493e      	ldr	r1, [pc, #248]	; (8027d18 <_tzset_unlocked_r+0x2f0>)
 8027c1e:	4633      	mov	r3, r6
 8027c20:	aa07      	add	r2, sp, #28
 8027c22:	4640      	mov	r0, r8
 8027c24:	f7ff fabe 	bl	80271a4 <siscanf>
 8027c28:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8027c2c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8027c30:	213c      	movs	r1, #60	; 0x3c
 8027c32:	fb01 2203 	mla	r2, r1, r3, r2
 8027c36:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8027c3a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8027c3e:	fb01 2303 	mla	r3, r1, r3, r2
 8027c42:	61bb      	str	r3, [r7, #24]
 8027c44:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8027c46:	3728      	adds	r7, #40	; 0x28
 8027c48:	4444      	add	r4, r8
 8027c4a:	f1b9 0f00 	cmp.w	r9, #0
 8027c4e:	d020      	beq.n	8027c92 <_tzset_unlocked_r+0x26a>
 8027c50:	6868      	ldr	r0, [r5, #4]
 8027c52:	f7ff fe2f 	bl	80278b4 <__tzcalc_limits>
 8027c56:	4b28      	ldr	r3, [pc, #160]	; (8027cf8 <_tzset_unlocked_r+0x2d0>)
 8027c58:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8027c5a:	601a      	str	r2, [r3, #0]
 8027c5c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8027c5e:	1a9b      	subs	r3, r3, r2
 8027c60:	4a27      	ldr	r2, [pc, #156]	; (8027d00 <_tzset_unlocked_r+0x2d8>)
 8027c62:	bf18      	it	ne
 8027c64:	2301      	movne	r3, #1
 8027c66:	6013      	str	r3, [r2, #0]
 8027c68:	e6f8      	b.n	8027a5c <_tzset_unlocked_r+0x34>
 8027c6a:	2b2b      	cmp	r3, #43	; 0x2b
 8027c6c:	bf08      	it	eq
 8027c6e:	3401      	addeq	r4, #1
 8027c70:	2701      	movs	r7, #1
 8027c72:	e772      	b.n	8027b5a <_tzset_unlocked_r+0x132>
 8027c74:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8027c78:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8027c7c:	213c      	movs	r1, #60	; 0x3c
 8027c7e:	fb01 2203 	mla	r2, r1, r3, r2
 8027c82:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8027c86:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8027c8a:	fb01 2303 	mla	r3, r1, r3, r2
 8027c8e:	435f      	muls	r7, r3
 8027c90:	e77a      	b.n	8027b88 <_tzset_unlocked_r+0x160>
 8027c92:	f04f 0901 	mov.w	r9, #1
 8027c96:	e77d      	b.n	8027b94 <_tzset_unlocked_r+0x16c>
 8027c98:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8027c9c:	bf06      	itte	eq
 8027c9e:	3401      	addeq	r4, #1
 8027ca0:	4643      	moveq	r3, r8
 8027ca2:	2344      	movne	r3, #68	; 0x44
 8027ca4:	220a      	movs	r2, #10
 8027ca6:	a90b      	add	r1, sp, #44	; 0x2c
 8027ca8:	4620      	mov	r0, r4
 8027caa:	9305      	str	r3, [sp, #20]
 8027cac:	f002 fa76 	bl	802a19c <strtoul>
 8027cb0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8027cb4:	9b05      	ldr	r3, [sp, #20]
 8027cb6:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8027cba:	45a0      	cmp	r8, r4
 8027cbc:	d114      	bne.n	8027ce8 <_tzset_unlocked_r+0x2c0>
 8027cbe:	234d      	movs	r3, #77	; 0x4d
 8027cc0:	f1b9 0f00 	cmp.w	r9, #0
 8027cc4:	d107      	bne.n	8027cd6 <_tzset_unlocked_r+0x2ae>
 8027cc6:	722b      	strb	r3, [r5, #8]
 8027cc8:	2103      	movs	r1, #3
 8027cca:	2302      	movs	r3, #2
 8027ccc:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8027cd0:	f8c5 9014 	str.w	r9, [r5, #20]
 8027cd4:	e791      	b.n	8027bfa <_tzset_unlocked_r+0x1d2>
 8027cd6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8027cda:	220b      	movs	r2, #11
 8027cdc:	2301      	movs	r3, #1
 8027cde:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8027ce2:	2300      	movs	r3, #0
 8027ce4:	63eb      	str	r3, [r5, #60]	; 0x3c
 8027ce6:	e788      	b.n	8027bfa <_tzset_unlocked_r+0x1d2>
 8027ce8:	b280      	uxth	r0, r0
 8027cea:	723b      	strb	r3, [r7, #8]
 8027cec:	6178      	str	r0, [r7, #20]
 8027cee:	e784      	b.n	8027bfa <_tzset_unlocked_r+0x1d2>
 8027cf0:	0802f659 	.word	0x0802f659
 8027cf4:	24005168 	.word	0x24005168
 8027cf8:	24005170 	.word	0x24005170
 8027cfc:	0802f65c 	.word	0x0802f65c
 8027d00:	2400516c 	.word	0x2400516c
 8027d04:	24000120 	.word	0x24000120
 8027d08:	2400515b 	.word	0x2400515b
 8027d0c:	0802f660 	.word	0x0802f660
 8027d10:	0802f683 	.word	0x0802f683
 8027d14:	0802f66f 	.word	0x0802f66f
 8027d18:	0802f682 	.word	0x0802f682
 8027d1c:	24005150 	.word	0x24005150

08027d20 <_user_strerror>:
 8027d20:	2000      	movs	r0, #0
 8027d22:	4770      	bx	lr

08027d24 <__swbuf_r>:
 8027d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027d26:	460e      	mov	r6, r1
 8027d28:	4614      	mov	r4, r2
 8027d2a:	4605      	mov	r5, r0
 8027d2c:	b118      	cbz	r0, 8027d36 <__swbuf_r+0x12>
 8027d2e:	6983      	ldr	r3, [r0, #24]
 8027d30:	b90b      	cbnz	r3, 8027d36 <__swbuf_r+0x12>
 8027d32:	f7fd ffcf 	bl	8025cd4 <__sinit>
 8027d36:	4b21      	ldr	r3, [pc, #132]	; (8027dbc <__swbuf_r+0x98>)
 8027d38:	429c      	cmp	r4, r3
 8027d3a:	d12b      	bne.n	8027d94 <__swbuf_r+0x70>
 8027d3c:	686c      	ldr	r4, [r5, #4]
 8027d3e:	69a3      	ldr	r3, [r4, #24]
 8027d40:	60a3      	str	r3, [r4, #8]
 8027d42:	89a3      	ldrh	r3, [r4, #12]
 8027d44:	071a      	lsls	r2, r3, #28
 8027d46:	d52f      	bpl.n	8027da8 <__swbuf_r+0x84>
 8027d48:	6923      	ldr	r3, [r4, #16]
 8027d4a:	b36b      	cbz	r3, 8027da8 <__swbuf_r+0x84>
 8027d4c:	6923      	ldr	r3, [r4, #16]
 8027d4e:	6820      	ldr	r0, [r4, #0]
 8027d50:	1ac0      	subs	r0, r0, r3
 8027d52:	6963      	ldr	r3, [r4, #20]
 8027d54:	b2f6      	uxtb	r6, r6
 8027d56:	4283      	cmp	r3, r0
 8027d58:	4637      	mov	r7, r6
 8027d5a:	dc04      	bgt.n	8027d66 <__swbuf_r+0x42>
 8027d5c:	4621      	mov	r1, r4
 8027d5e:	4628      	mov	r0, r5
 8027d60:	f000 ff7c 	bl	8028c5c <_fflush_r>
 8027d64:	bb30      	cbnz	r0, 8027db4 <__swbuf_r+0x90>
 8027d66:	68a3      	ldr	r3, [r4, #8]
 8027d68:	3b01      	subs	r3, #1
 8027d6a:	60a3      	str	r3, [r4, #8]
 8027d6c:	6823      	ldr	r3, [r4, #0]
 8027d6e:	1c5a      	adds	r2, r3, #1
 8027d70:	6022      	str	r2, [r4, #0]
 8027d72:	701e      	strb	r6, [r3, #0]
 8027d74:	6963      	ldr	r3, [r4, #20]
 8027d76:	3001      	adds	r0, #1
 8027d78:	4283      	cmp	r3, r0
 8027d7a:	d004      	beq.n	8027d86 <__swbuf_r+0x62>
 8027d7c:	89a3      	ldrh	r3, [r4, #12]
 8027d7e:	07db      	lsls	r3, r3, #31
 8027d80:	d506      	bpl.n	8027d90 <__swbuf_r+0x6c>
 8027d82:	2e0a      	cmp	r6, #10
 8027d84:	d104      	bne.n	8027d90 <__swbuf_r+0x6c>
 8027d86:	4621      	mov	r1, r4
 8027d88:	4628      	mov	r0, r5
 8027d8a:	f000 ff67 	bl	8028c5c <_fflush_r>
 8027d8e:	b988      	cbnz	r0, 8027db4 <__swbuf_r+0x90>
 8027d90:	4638      	mov	r0, r7
 8027d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027d94:	4b0a      	ldr	r3, [pc, #40]	; (8027dc0 <__swbuf_r+0x9c>)
 8027d96:	429c      	cmp	r4, r3
 8027d98:	d101      	bne.n	8027d9e <__swbuf_r+0x7a>
 8027d9a:	68ac      	ldr	r4, [r5, #8]
 8027d9c:	e7cf      	b.n	8027d3e <__swbuf_r+0x1a>
 8027d9e:	4b09      	ldr	r3, [pc, #36]	; (8027dc4 <__swbuf_r+0xa0>)
 8027da0:	429c      	cmp	r4, r3
 8027da2:	bf08      	it	eq
 8027da4:	68ec      	ldreq	r4, [r5, #12]
 8027da6:	e7ca      	b.n	8027d3e <__swbuf_r+0x1a>
 8027da8:	4621      	mov	r1, r4
 8027daa:	4628      	mov	r0, r5
 8027dac:	f000 f81e 	bl	8027dec <__swsetup_r>
 8027db0:	2800      	cmp	r0, #0
 8027db2:	d0cb      	beq.n	8027d4c <__swbuf_r+0x28>
 8027db4:	f04f 37ff 	mov.w	r7, #4294967295
 8027db8:	e7ea      	b.n	8027d90 <__swbuf_r+0x6c>
 8027dba:	bf00      	nop
 8027dbc:	0802eda4 	.word	0x0802eda4
 8027dc0:	0802edc4 	.word	0x0802edc4
 8027dc4:	0802ed84 	.word	0x0802ed84

08027dc8 <_write_r>:
 8027dc8:	b538      	push	{r3, r4, r5, lr}
 8027dca:	4d07      	ldr	r5, [pc, #28]	; (8027de8 <_write_r+0x20>)
 8027dcc:	4604      	mov	r4, r0
 8027dce:	4608      	mov	r0, r1
 8027dd0:	4611      	mov	r1, r2
 8027dd2:	2200      	movs	r2, #0
 8027dd4:	602a      	str	r2, [r5, #0]
 8027dd6:	461a      	mov	r2, r3
 8027dd8:	f7d9 f8cd 	bl	8000f76 <_write>
 8027ddc:	1c43      	adds	r3, r0, #1
 8027dde:	d102      	bne.n	8027de6 <_write_r+0x1e>
 8027de0:	682b      	ldr	r3, [r5, #0]
 8027de2:	b103      	cbz	r3, 8027de6 <_write_r+0x1e>
 8027de4:	6023      	str	r3, [r4, #0]
 8027de6:	bd38      	pop	{r3, r4, r5, pc}
 8027de8:	240086b8 	.word	0x240086b8

08027dec <__swsetup_r>:
 8027dec:	4b32      	ldr	r3, [pc, #200]	; (8027eb8 <__swsetup_r+0xcc>)
 8027dee:	b570      	push	{r4, r5, r6, lr}
 8027df0:	681d      	ldr	r5, [r3, #0]
 8027df2:	4606      	mov	r6, r0
 8027df4:	460c      	mov	r4, r1
 8027df6:	b125      	cbz	r5, 8027e02 <__swsetup_r+0x16>
 8027df8:	69ab      	ldr	r3, [r5, #24]
 8027dfa:	b913      	cbnz	r3, 8027e02 <__swsetup_r+0x16>
 8027dfc:	4628      	mov	r0, r5
 8027dfe:	f7fd ff69 	bl	8025cd4 <__sinit>
 8027e02:	4b2e      	ldr	r3, [pc, #184]	; (8027ebc <__swsetup_r+0xd0>)
 8027e04:	429c      	cmp	r4, r3
 8027e06:	d10f      	bne.n	8027e28 <__swsetup_r+0x3c>
 8027e08:	686c      	ldr	r4, [r5, #4]
 8027e0a:	89a3      	ldrh	r3, [r4, #12]
 8027e0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027e10:	0719      	lsls	r1, r3, #28
 8027e12:	d42c      	bmi.n	8027e6e <__swsetup_r+0x82>
 8027e14:	06dd      	lsls	r5, r3, #27
 8027e16:	d411      	bmi.n	8027e3c <__swsetup_r+0x50>
 8027e18:	2309      	movs	r3, #9
 8027e1a:	6033      	str	r3, [r6, #0]
 8027e1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8027e20:	81a3      	strh	r3, [r4, #12]
 8027e22:	f04f 30ff 	mov.w	r0, #4294967295
 8027e26:	e03e      	b.n	8027ea6 <__swsetup_r+0xba>
 8027e28:	4b25      	ldr	r3, [pc, #148]	; (8027ec0 <__swsetup_r+0xd4>)
 8027e2a:	429c      	cmp	r4, r3
 8027e2c:	d101      	bne.n	8027e32 <__swsetup_r+0x46>
 8027e2e:	68ac      	ldr	r4, [r5, #8]
 8027e30:	e7eb      	b.n	8027e0a <__swsetup_r+0x1e>
 8027e32:	4b24      	ldr	r3, [pc, #144]	; (8027ec4 <__swsetup_r+0xd8>)
 8027e34:	429c      	cmp	r4, r3
 8027e36:	bf08      	it	eq
 8027e38:	68ec      	ldreq	r4, [r5, #12]
 8027e3a:	e7e6      	b.n	8027e0a <__swsetup_r+0x1e>
 8027e3c:	0758      	lsls	r0, r3, #29
 8027e3e:	d512      	bpl.n	8027e66 <__swsetup_r+0x7a>
 8027e40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027e42:	b141      	cbz	r1, 8027e56 <__swsetup_r+0x6a>
 8027e44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027e48:	4299      	cmp	r1, r3
 8027e4a:	d002      	beq.n	8027e52 <__swsetup_r+0x66>
 8027e4c:	4630      	mov	r0, r6
 8027e4e:	f7fe f9fb 	bl	8026248 <_free_r>
 8027e52:	2300      	movs	r3, #0
 8027e54:	6363      	str	r3, [r4, #52]	; 0x34
 8027e56:	89a3      	ldrh	r3, [r4, #12]
 8027e58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8027e5c:	81a3      	strh	r3, [r4, #12]
 8027e5e:	2300      	movs	r3, #0
 8027e60:	6063      	str	r3, [r4, #4]
 8027e62:	6923      	ldr	r3, [r4, #16]
 8027e64:	6023      	str	r3, [r4, #0]
 8027e66:	89a3      	ldrh	r3, [r4, #12]
 8027e68:	f043 0308 	orr.w	r3, r3, #8
 8027e6c:	81a3      	strh	r3, [r4, #12]
 8027e6e:	6923      	ldr	r3, [r4, #16]
 8027e70:	b94b      	cbnz	r3, 8027e86 <__swsetup_r+0x9a>
 8027e72:	89a3      	ldrh	r3, [r4, #12]
 8027e74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8027e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8027e7c:	d003      	beq.n	8027e86 <__swsetup_r+0x9a>
 8027e7e:	4621      	mov	r1, r4
 8027e80:	4630      	mov	r0, r6
 8027e82:	f001 f857 	bl	8028f34 <__smakebuf_r>
 8027e86:	89a0      	ldrh	r0, [r4, #12]
 8027e88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027e8c:	f010 0301 	ands.w	r3, r0, #1
 8027e90:	d00a      	beq.n	8027ea8 <__swsetup_r+0xbc>
 8027e92:	2300      	movs	r3, #0
 8027e94:	60a3      	str	r3, [r4, #8]
 8027e96:	6963      	ldr	r3, [r4, #20]
 8027e98:	425b      	negs	r3, r3
 8027e9a:	61a3      	str	r3, [r4, #24]
 8027e9c:	6923      	ldr	r3, [r4, #16]
 8027e9e:	b943      	cbnz	r3, 8027eb2 <__swsetup_r+0xc6>
 8027ea0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8027ea4:	d1ba      	bne.n	8027e1c <__swsetup_r+0x30>
 8027ea6:	bd70      	pop	{r4, r5, r6, pc}
 8027ea8:	0781      	lsls	r1, r0, #30
 8027eaa:	bf58      	it	pl
 8027eac:	6963      	ldrpl	r3, [r4, #20]
 8027eae:	60a3      	str	r3, [r4, #8]
 8027eb0:	e7f4      	b.n	8027e9c <__swsetup_r+0xb0>
 8027eb2:	2000      	movs	r0, #0
 8027eb4:	e7f7      	b.n	8027ea6 <__swsetup_r+0xba>
 8027eb6:	bf00      	nop
 8027eb8:	240000bc 	.word	0x240000bc
 8027ebc:	0802eda4 	.word	0x0802eda4
 8027ec0:	0802edc4 	.word	0x0802edc4
 8027ec4:	0802ed84 	.word	0x0802ed84

08027ec8 <__assert_func>:
 8027ec8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8027eca:	4614      	mov	r4, r2
 8027ecc:	461a      	mov	r2, r3
 8027ece:	4b09      	ldr	r3, [pc, #36]	; (8027ef4 <__assert_func+0x2c>)
 8027ed0:	681b      	ldr	r3, [r3, #0]
 8027ed2:	4605      	mov	r5, r0
 8027ed4:	68d8      	ldr	r0, [r3, #12]
 8027ed6:	b14c      	cbz	r4, 8027eec <__assert_func+0x24>
 8027ed8:	4b07      	ldr	r3, [pc, #28]	; (8027ef8 <__assert_func+0x30>)
 8027eda:	9100      	str	r1, [sp, #0]
 8027edc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8027ee0:	4906      	ldr	r1, [pc, #24]	; (8027efc <__assert_func+0x34>)
 8027ee2:	462b      	mov	r3, r5
 8027ee4:	f7fd ff74 	bl	8025dd0 <fiprintf>
 8027ee8:	f002 f99c 	bl	802a224 <abort>
 8027eec:	4b04      	ldr	r3, [pc, #16]	; (8027f00 <__assert_func+0x38>)
 8027eee:	461c      	mov	r4, r3
 8027ef0:	e7f3      	b.n	8027eda <__assert_func+0x12>
 8027ef2:	bf00      	nop
 8027ef4:	240000bc 	.word	0x240000bc
 8027ef8:	0802f695 	.word	0x0802f695
 8027efc:	0802f6a2 	.word	0x0802f6a2
 8027f00:	0802f6d0 	.word	0x0802f6d0

08027f04 <_close_r>:
 8027f04:	b538      	push	{r3, r4, r5, lr}
 8027f06:	4d06      	ldr	r5, [pc, #24]	; (8027f20 <_close_r+0x1c>)
 8027f08:	2300      	movs	r3, #0
 8027f0a:	4604      	mov	r4, r0
 8027f0c:	4608      	mov	r0, r1
 8027f0e:	602b      	str	r3, [r5, #0]
 8027f10:	f7d9 f84d 	bl	8000fae <_close>
 8027f14:	1c43      	adds	r3, r0, #1
 8027f16:	d102      	bne.n	8027f1e <_close_r+0x1a>
 8027f18:	682b      	ldr	r3, [r5, #0]
 8027f1a:	b103      	cbz	r3, 8027f1e <_close_r+0x1a>
 8027f1c:	6023      	str	r3, [r4, #0]
 8027f1e:	bd38      	pop	{r3, r4, r5, pc}
 8027f20:	240086b8 	.word	0x240086b8

08027f24 <quorem>:
 8027f24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027f28:	6903      	ldr	r3, [r0, #16]
 8027f2a:	690c      	ldr	r4, [r1, #16]
 8027f2c:	42a3      	cmp	r3, r4
 8027f2e:	4607      	mov	r7, r0
 8027f30:	f2c0 8081 	blt.w	8028036 <quorem+0x112>
 8027f34:	3c01      	subs	r4, #1
 8027f36:	f101 0814 	add.w	r8, r1, #20
 8027f3a:	f100 0514 	add.w	r5, r0, #20
 8027f3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8027f42:	9301      	str	r3, [sp, #4]
 8027f44:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8027f48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8027f4c:	3301      	adds	r3, #1
 8027f4e:	429a      	cmp	r2, r3
 8027f50:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8027f54:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8027f58:	fbb2 f6f3 	udiv	r6, r2, r3
 8027f5c:	d331      	bcc.n	8027fc2 <quorem+0x9e>
 8027f5e:	f04f 0e00 	mov.w	lr, #0
 8027f62:	4640      	mov	r0, r8
 8027f64:	46ac      	mov	ip, r5
 8027f66:	46f2      	mov	sl, lr
 8027f68:	f850 2b04 	ldr.w	r2, [r0], #4
 8027f6c:	b293      	uxth	r3, r2
 8027f6e:	fb06 e303 	mla	r3, r6, r3, lr
 8027f72:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8027f76:	b29b      	uxth	r3, r3
 8027f78:	ebaa 0303 	sub.w	r3, sl, r3
 8027f7c:	0c12      	lsrs	r2, r2, #16
 8027f7e:	f8dc a000 	ldr.w	sl, [ip]
 8027f82:	fb06 e202 	mla	r2, r6, r2, lr
 8027f86:	fa13 f38a 	uxtah	r3, r3, sl
 8027f8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8027f8e:	fa1f fa82 	uxth.w	sl, r2
 8027f92:	f8dc 2000 	ldr.w	r2, [ip]
 8027f96:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8027f9a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8027f9e:	b29b      	uxth	r3, r3
 8027fa0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8027fa4:	4581      	cmp	r9, r0
 8027fa6:	f84c 3b04 	str.w	r3, [ip], #4
 8027faa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8027fae:	d2db      	bcs.n	8027f68 <quorem+0x44>
 8027fb0:	f855 300b 	ldr.w	r3, [r5, fp]
 8027fb4:	b92b      	cbnz	r3, 8027fc2 <quorem+0x9e>
 8027fb6:	9b01      	ldr	r3, [sp, #4]
 8027fb8:	3b04      	subs	r3, #4
 8027fba:	429d      	cmp	r5, r3
 8027fbc:	461a      	mov	r2, r3
 8027fbe:	d32e      	bcc.n	802801e <quorem+0xfa>
 8027fc0:	613c      	str	r4, [r7, #16]
 8027fc2:	4638      	mov	r0, r7
 8027fc4:	f001 fa80 	bl	80294c8 <__mcmp>
 8027fc8:	2800      	cmp	r0, #0
 8027fca:	db24      	blt.n	8028016 <quorem+0xf2>
 8027fcc:	3601      	adds	r6, #1
 8027fce:	4628      	mov	r0, r5
 8027fd0:	f04f 0c00 	mov.w	ip, #0
 8027fd4:	f858 2b04 	ldr.w	r2, [r8], #4
 8027fd8:	f8d0 e000 	ldr.w	lr, [r0]
 8027fdc:	b293      	uxth	r3, r2
 8027fde:	ebac 0303 	sub.w	r3, ip, r3
 8027fe2:	0c12      	lsrs	r2, r2, #16
 8027fe4:	fa13 f38e 	uxtah	r3, r3, lr
 8027fe8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8027fec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8027ff0:	b29b      	uxth	r3, r3
 8027ff2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8027ff6:	45c1      	cmp	r9, r8
 8027ff8:	f840 3b04 	str.w	r3, [r0], #4
 8027ffc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8028000:	d2e8      	bcs.n	8027fd4 <quorem+0xb0>
 8028002:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8028006:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802800a:	b922      	cbnz	r2, 8028016 <quorem+0xf2>
 802800c:	3b04      	subs	r3, #4
 802800e:	429d      	cmp	r5, r3
 8028010:	461a      	mov	r2, r3
 8028012:	d30a      	bcc.n	802802a <quorem+0x106>
 8028014:	613c      	str	r4, [r7, #16]
 8028016:	4630      	mov	r0, r6
 8028018:	b003      	add	sp, #12
 802801a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802801e:	6812      	ldr	r2, [r2, #0]
 8028020:	3b04      	subs	r3, #4
 8028022:	2a00      	cmp	r2, #0
 8028024:	d1cc      	bne.n	8027fc0 <quorem+0x9c>
 8028026:	3c01      	subs	r4, #1
 8028028:	e7c7      	b.n	8027fba <quorem+0x96>
 802802a:	6812      	ldr	r2, [r2, #0]
 802802c:	3b04      	subs	r3, #4
 802802e:	2a00      	cmp	r2, #0
 8028030:	d1f0      	bne.n	8028014 <quorem+0xf0>
 8028032:	3c01      	subs	r4, #1
 8028034:	e7eb      	b.n	802800e <quorem+0xea>
 8028036:	2000      	movs	r0, #0
 8028038:	e7ee      	b.n	8028018 <quorem+0xf4>
 802803a:	0000      	movs	r0, r0
 802803c:	0000      	movs	r0, r0
	...

08028040 <_dtoa_r>:
 8028040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028044:	ec59 8b10 	vmov	r8, r9, d0
 8028048:	b095      	sub	sp, #84	; 0x54
 802804a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 802804c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 802804e:	9107      	str	r1, [sp, #28]
 8028050:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8028054:	4606      	mov	r6, r0
 8028056:	9209      	str	r2, [sp, #36]	; 0x24
 8028058:	9310      	str	r3, [sp, #64]	; 0x40
 802805a:	b975      	cbnz	r5, 802807a <_dtoa_r+0x3a>
 802805c:	2010      	movs	r0, #16
 802805e:	f7fe f895 	bl	802618c <malloc>
 8028062:	4602      	mov	r2, r0
 8028064:	6270      	str	r0, [r6, #36]	; 0x24
 8028066:	b920      	cbnz	r0, 8028072 <_dtoa_r+0x32>
 8028068:	4bab      	ldr	r3, [pc, #684]	; (8028318 <_dtoa_r+0x2d8>)
 802806a:	21ea      	movs	r1, #234	; 0xea
 802806c:	48ab      	ldr	r0, [pc, #684]	; (802831c <_dtoa_r+0x2dc>)
 802806e:	f7ff ff2b 	bl	8027ec8 <__assert_func>
 8028072:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8028076:	6005      	str	r5, [r0, #0]
 8028078:	60c5      	str	r5, [r0, #12]
 802807a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 802807c:	6819      	ldr	r1, [r3, #0]
 802807e:	b151      	cbz	r1, 8028096 <_dtoa_r+0x56>
 8028080:	685a      	ldr	r2, [r3, #4]
 8028082:	604a      	str	r2, [r1, #4]
 8028084:	2301      	movs	r3, #1
 8028086:	4093      	lsls	r3, r2
 8028088:	608b      	str	r3, [r1, #8]
 802808a:	4630      	mov	r0, r6
 802808c:	f000 ffde 	bl	802904c <_Bfree>
 8028090:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8028092:	2200      	movs	r2, #0
 8028094:	601a      	str	r2, [r3, #0]
 8028096:	f1b9 0300 	subs.w	r3, r9, #0
 802809a:	bfbb      	ittet	lt
 802809c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80280a0:	9303      	strlt	r3, [sp, #12]
 80280a2:	2300      	movge	r3, #0
 80280a4:	2201      	movlt	r2, #1
 80280a6:	bfac      	ite	ge
 80280a8:	6023      	strge	r3, [r4, #0]
 80280aa:	6022      	strlt	r2, [r4, #0]
 80280ac:	4b9c      	ldr	r3, [pc, #624]	; (8028320 <_dtoa_r+0x2e0>)
 80280ae:	9c03      	ldr	r4, [sp, #12]
 80280b0:	43a3      	bics	r3, r4
 80280b2:	d11a      	bne.n	80280ea <_dtoa_r+0xaa>
 80280b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80280b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80280ba:	6013      	str	r3, [r2, #0]
 80280bc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80280c0:	ea53 0308 	orrs.w	r3, r3, r8
 80280c4:	f000 8512 	beq.w	8028aec <_dtoa_r+0xaac>
 80280c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80280ca:	b953      	cbnz	r3, 80280e2 <_dtoa_r+0xa2>
 80280cc:	4b95      	ldr	r3, [pc, #596]	; (8028324 <_dtoa_r+0x2e4>)
 80280ce:	e01f      	b.n	8028110 <_dtoa_r+0xd0>
 80280d0:	4b95      	ldr	r3, [pc, #596]	; (8028328 <_dtoa_r+0x2e8>)
 80280d2:	9300      	str	r3, [sp, #0]
 80280d4:	3308      	adds	r3, #8
 80280d6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80280d8:	6013      	str	r3, [r2, #0]
 80280da:	9800      	ldr	r0, [sp, #0]
 80280dc:	b015      	add	sp, #84	; 0x54
 80280de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80280e2:	4b90      	ldr	r3, [pc, #576]	; (8028324 <_dtoa_r+0x2e4>)
 80280e4:	9300      	str	r3, [sp, #0]
 80280e6:	3303      	adds	r3, #3
 80280e8:	e7f5      	b.n	80280d6 <_dtoa_r+0x96>
 80280ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80280ee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80280f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80280f6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80280fa:	d10b      	bne.n	8028114 <_dtoa_r+0xd4>
 80280fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80280fe:	2301      	movs	r3, #1
 8028100:	6013      	str	r3, [r2, #0]
 8028102:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8028104:	2b00      	cmp	r3, #0
 8028106:	f000 84ee 	beq.w	8028ae6 <_dtoa_r+0xaa6>
 802810a:	4888      	ldr	r0, [pc, #544]	; (802832c <_dtoa_r+0x2ec>)
 802810c:	6018      	str	r0, [r3, #0]
 802810e:	1e43      	subs	r3, r0, #1
 8028110:	9300      	str	r3, [sp, #0]
 8028112:	e7e2      	b.n	80280da <_dtoa_r+0x9a>
 8028114:	a913      	add	r1, sp, #76	; 0x4c
 8028116:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 802811a:	aa12      	add	r2, sp, #72	; 0x48
 802811c:	4630      	mov	r0, r6
 802811e:	f001 fa77 	bl	8029610 <__d2b>
 8028122:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8028126:	4605      	mov	r5, r0
 8028128:	9812      	ldr	r0, [sp, #72]	; 0x48
 802812a:	2900      	cmp	r1, #0
 802812c:	d047      	beq.n	80281be <_dtoa_r+0x17e>
 802812e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8028130:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8028134:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8028138:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 802813c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8028140:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8028144:	2400      	movs	r4, #0
 8028146:	ec43 2b16 	vmov	d6, r2, r3
 802814a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 802814e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8028300 <_dtoa_r+0x2c0>
 8028152:	ee36 7b47 	vsub.f64	d7, d6, d7
 8028156:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8028308 <_dtoa_r+0x2c8>
 802815a:	eea7 6b05 	vfma.f64	d6, d7, d5
 802815e:	eeb0 7b46 	vmov.f64	d7, d6
 8028162:	ee06 1a90 	vmov	s13, r1
 8028166:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 802816a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8028310 <_dtoa_r+0x2d0>
 802816e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8028172:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8028176:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 802817a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802817e:	ee16 ba90 	vmov	fp, s13
 8028182:	9411      	str	r4, [sp, #68]	; 0x44
 8028184:	d508      	bpl.n	8028198 <_dtoa_r+0x158>
 8028186:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 802818a:	eeb4 6b47 	vcmp.f64	d6, d7
 802818e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028192:	bf18      	it	ne
 8028194:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8028198:	f1bb 0f16 	cmp.w	fp, #22
 802819c:	d832      	bhi.n	8028204 <_dtoa_r+0x1c4>
 802819e:	4b64      	ldr	r3, [pc, #400]	; (8028330 <_dtoa_r+0x2f0>)
 80281a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80281a4:	ed93 7b00 	vldr	d7, [r3]
 80281a8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80281ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80281b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80281b4:	d501      	bpl.n	80281ba <_dtoa_r+0x17a>
 80281b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80281ba:	2300      	movs	r3, #0
 80281bc:	e023      	b.n	8028206 <_dtoa_r+0x1c6>
 80281be:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80281c0:	4401      	add	r1, r0
 80281c2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80281c6:	2b20      	cmp	r3, #32
 80281c8:	bfc3      	ittte	gt
 80281ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80281ce:	fa04 f303 	lslgt.w	r3, r4, r3
 80281d2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80281d6:	f1c3 0320 	rsble	r3, r3, #32
 80281da:	bfc6      	itte	gt
 80281dc:	fa28 f804 	lsrgt.w	r8, r8, r4
 80281e0:	ea43 0308 	orrgt.w	r3, r3, r8
 80281e4:	fa08 f303 	lslle.w	r3, r8, r3
 80281e8:	ee07 3a90 	vmov	s15, r3
 80281ec:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80281f0:	3901      	subs	r1, #1
 80281f2:	ed8d 7b00 	vstr	d7, [sp]
 80281f6:	9c01      	ldr	r4, [sp, #4]
 80281f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80281fc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8028200:	2401      	movs	r4, #1
 8028202:	e7a0      	b.n	8028146 <_dtoa_r+0x106>
 8028204:	2301      	movs	r3, #1
 8028206:	930f      	str	r3, [sp, #60]	; 0x3c
 8028208:	1a43      	subs	r3, r0, r1
 802820a:	1e5a      	subs	r2, r3, #1
 802820c:	bf45      	ittet	mi
 802820e:	f1c3 0301 	rsbmi	r3, r3, #1
 8028212:	9305      	strmi	r3, [sp, #20]
 8028214:	2300      	movpl	r3, #0
 8028216:	2300      	movmi	r3, #0
 8028218:	9206      	str	r2, [sp, #24]
 802821a:	bf54      	ite	pl
 802821c:	9305      	strpl	r3, [sp, #20]
 802821e:	9306      	strmi	r3, [sp, #24]
 8028220:	f1bb 0f00 	cmp.w	fp, #0
 8028224:	db18      	blt.n	8028258 <_dtoa_r+0x218>
 8028226:	9b06      	ldr	r3, [sp, #24]
 8028228:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 802822c:	445b      	add	r3, fp
 802822e:	9306      	str	r3, [sp, #24]
 8028230:	2300      	movs	r3, #0
 8028232:	9a07      	ldr	r2, [sp, #28]
 8028234:	2a09      	cmp	r2, #9
 8028236:	d849      	bhi.n	80282cc <_dtoa_r+0x28c>
 8028238:	2a05      	cmp	r2, #5
 802823a:	bfc4      	itt	gt
 802823c:	3a04      	subgt	r2, #4
 802823e:	9207      	strgt	r2, [sp, #28]
 8028240:	9a07      	ldr	r2, [sp, #28]
 8028242:	f1a2 0202 	sub.w	r2, r2, #2
 8028246:	bfcc      	ite	gt
 8028248:	2400      	movgt	r4, #0
 802824a:	2401      	movle	r4, #1
 802824c:	2a03      	cmp	r2, #3
 802824e:	d848      	bhi.n	80282e2 <_dtoa_r+0x2a2>
 8028250:	e8df f002 	tbb	[pc, r2]
 8028254:	3a2c2e0b 	.word	0x3a2c2e0b
 8028258:	9b05      	ldr	r3, [sp, #20]
 802825a:	2200      	movs	r2, #0
 802825c:	eba3 030b 	sub.w	r3, r3, fp
 8028260:	9305      	str	r3, [sp, #20]
 8028262:	920e      	str	r2, [sp, #56]	; 0x38
 8028264:	f1cb 0300 	rsb	r3, fp, #0
 8028268:	e7e3      	b.n	8028232 <_dtoa_r+0x1f2>
 802826a:	2200      	movs	r2, #0
 802826c:	9208      	str	r2, [sp, #32]
 802826e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028270:	2a00      	cmp	r2, #0
 8028272:	dc39      	bgt.n	80282e8 <_dtoa_r+0x2a8>
 8028274:	f04f 0a01 	mov.w	sl, #1
 8028278:	46d1      	mov	r9, sl
 802827a:	4652      	mov	r2, sl
 802827c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8028280:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8028282:	2100      	movs	r1, #0
 8028284:	6079      	str	r1, [r7, #4]
 8028286:	2004      	movs	r0, #4
 8028288:	f100 0c14 	add.w	ip, r0, #20
 802828c:	4594      	cmp	ip, r2
 802828e:	6879      	ldr	r1, [r7, #4]
 8028290:	d92f      	bls.n	80282f2 <_dtoa_r+0x2b2>
 8028292:	4630      	mov	r0, r6
 8028294:	930c      	str	r3, [sp, #48]	; 0x30
 8028296:	f000 fe99 	bl	8028fcc <_Balloc>
 802829a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802829c:	9000      	str	r0, [sp, #0]
 802829e:	4602      	mov	r2, r0
 80282a0:	2800      	cmp	r0, #0
 80282a2:	d149      	bne.n	8028338 <_dtoa_r+0x2f8>
 80282a4:	4b23      	ldr	r3, [pc, #140]	; (8028334 <_dtoa_r+0x2f4>)
 80282a6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80282aa:	e6df      	b.n	802806c <_dtoa_r+0x2c>
 80282ac:	2201      	movs	r2, #1
 80282ae:	e7dd      	b.n	802826c <_dtoa_r+0x22c>
 80282b0:	2200      	movs	r2, #0
 80282b2:	9208      	str	r2, [sp, #32]
 80282b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80282b6:	eb0b 0a02 	add.w	sl, fp, r2
 80282ba:	f10a 0901 	add.w	r9, sl, #1
 80282be:	464a      	mov	r2, r9
 80282c0:	2a01      	cmp	r2, #1
 80282c2:	bfb8      	it	lt
 80282c4:	2201      	movlt	r2, #1
 80282c6:	e7db      	b.n	8028280 <_dtoa_r+0x240>
 80282c8:	2201      	movs	r2, #1
 80282ca:	e7f2      	b.n	80282b2 <_dtoa_r+0x272>
 80282cc:	2401      	movs	r4, #1
 80282ce:	2200      	movs	r2, #0
 80282d0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80282d4:	f04f 3aff 	mov.w	sl, #4294967295
 80282d8:	2100      	movs	r1, #0
 80282da:	46d1      	mov	r9, sl
 80282dc:	2212      	movs	r2, #18
 80282de:	9109      	str	r1, [sp, #36]	; 0x24
 80282e0:	e7ce      	b.n	8028280 <_dtoa_r+0x240>
 80282e2:	2201      	movs	r2, #1
 80282e4:	9208      	str	r2, [sp, #32]
 80282e6:	e7f5      	b.n	80282d4 <_dtoa_r+0x294>
 80282e8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80282ec:	46d1      	mov	r9, sl
 80282ee:	4652      	mov	r2, sl
 80282f0:	e7c6      	b.n	8028280 <_dtoa_r+0x240>
 80282f2:	3101      	adds	r1, #1
 80282f4:	6079      	str	r1, [r7, #4]
 80282f6:	0040      	lsls	r0, r0, #1
 80282f8:	e7c6      	b.n	8028288 <_dtoa_r+0x248>
 80282fa:	bf00      	nop
 80282fc:	f3af 8000 	nop.w
 8028300:	636f4361 	.word	0x636f4361
 8028304:	3fd287a7 	.word	0x3fd287a7
 8028308:	8b60c8b3 	.word	0x8b60c8b3
 802830c:	3fc68a28 	.word	0x3fc68a28
 8028310:	509f79fb 	.word	0x509f79fb
 8028314:	3fd34413 	.word	0x3fd34413
 8028318:	0802ede8 	.word	0x0802ede8
 802831c:	0802f6de 	.word	0x0802f6de
 8028320:	7ff00000 	.word	0x7ff00000
 8028324:	0802f6da 	.word	0x0802f6da
 8028328:	0802f6d1 	.word	0x0802f6d1
 802832c:	0802f8b1 	.word	0x0802f8b1
 8028330:	0802f7d8 	.word	0x0802f7d8
 8028334:	0802f73d 	.word	0x0802f73d
 8028338:	6a72      	ldr	r2, [r6, #36]	; 0x24
 802833a:	9900      	ldr	r1, [sp, #0]
 802833c:	6011      	str	r1, [r2, #0]
 802833e:	f1b9 0f0e 	cmp.w	r9, #14
 8028342:	d872      	bhi.n	802842a <_dtoa_r+0x3ea>
 8028344:	2c00      	cmp	r4, #0
 8028346:	d070      	beq.n	802842a <_dtoa_r+0x3ea>
 8028348:	f1bb 0f00 	cmp.w	fp, #0
 802834c:	f340 80a6 	ble.w	802849c <_dtoa_r+0x45c>
 8028350:	49ca      	ldr	r1, [pc, #808]	; (802867c <_dtoa_r+0x63c>)
 8028352:	f00b 020f 	and.w	r2, fp, #15
 8028356:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 802835a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 802835e:	ed92 7b00 	vldr	d7, [r2]
 8028362:	ea4f 112b 	mov.w	r1, fp, asr #4
 8028366:	f000 808d 	beq.w	8028484 <_dtoa_r+0x444>
 802836a:	4ac5      	ldr	r2, [pc, #788]	; (8028680 <_dtoa_r+0x640>)
 802836c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8028370:	ed92 6b08 	vldr	d6, [r2, #32]
 8028374:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8028378:	ed8d 6b02 	vstr	d6, [sp, #8]
 802837c:	f001 010f 	and.w	r1, r1, #15
 8028380:	2203      	movs	r2, #3
 8028382:	48bf      	ldr	r0, [pc, #764]	; (8028680 <_dtoa_r+0x640>)
 8028384:	2900      	cmp	r1, #0
 8028386:	d17f      	bne.n	8028488 <_dtoa_r+0x448>
 8028388:	ed9d 6b02 	vldr	d6, [sp, #8]
 802838c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8028390:	ed8d 7b02 	vstr	d7, [sp, #8]
 8028394:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8028396:	2900      	cmp	r1, #0
 8028398:	f000 80b2 	beq.w	8028500 <_dtoa_r+0x4c0>
 802839c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80283a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80283a4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80283a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80283ac:	f140 80a8 	bpl.w	8028500 <_dtoa_r+0x4c0>
 80283b0:	f1b9 0f00 	cmp.w	r9, #0
 80283b4:	f000 80a4 	beq.w	8028500 <_dtoa_r+0x4c0>
 80283b8:	f1ba 0f00 	cmp.w	sl, #0
 80283bc:	dd31      	ble.n	8028422 <_dtoa_r+0x3e2>
 80283be:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80283c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80283c6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80283ca:	f10b 37ff 	add.w	r7, fp, #4294967295
 80283ce:	3201      	adds	r2, #1
 80283d0:	4650      	mov	r0, sl
 80283d2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80283d6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80283da:	ee07 2a90 	vmov	s15, r2
 80283de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80283e2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80283e6:	ed8d 5b02 	vstr	d5, [sp, #8]
 80283ea:	9c03      	ldr	r4, [sp, #12]
 80283ec:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80283f0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80283f4:	2800      	cmp	r0, #0
 80283f6:	f040 8086 	bne.w	8028506 <_dtoa_r+0x4c6>
 80283fa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80283fe:	ee36 6b47 	vsub.f64	d6, d6, d7
 8028402:	ec42 1b17 	vmov	d7, r1, r2
 8028406:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802840a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802840e:	f300 8272 	bgt.w	80288f6 <_dtoa_r+0x8b6>
 8028412:	eeb1 7b47 	vneg.f64	d7, d7
 8028416:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802841a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802841e:	f100 8267 	bmi.w	80288f0 <_dtoa_r+0x8b0>
 8028422:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8028426:	e9cd 1202 	strd	r1, r2, [sp, #8]
 802842a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802842c:	2a00      	cmp	r2, #0
 802842e:	f2c0 8129 	blt.w	8028684 <_dtoa_r+0x644>
 8028432:	f1bb 0f0e 	cmp.w	fp, #14
 8028436:	f300 8125 	bgt.w	8028684 <_dtoa_r+0x644>
 802843a:	4b90      	ldr	r3, [pc, #576]	; (802867c <_dtoa_r+0x63c>)
 802843c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8028440:	ed93 6b00 	vldr	d6, [r3]
 8028444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028446:	2b00      	cmp	r3, #0
 8028448:	f280 80c3 	bge.w	80285d2 <_dtoa_r+0x592>
 802844c:	f1b9 0f00 	cmp.w	r9, #0
 8028450:	f300 80bf 	bgt.w	80285d2 <_dtoa_r+0x592>
 8028454:	f040 824c 	bne.w	80288f0 <_dtoa_r+0x8b0>
 8028458:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 802845c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8028460:	ed9d 7b02 	vldr	d7, [sp, #8]
 8028464:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8028468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802846c:	464c      	mov	r4, r9
 802846e:	464f      	mov	r7, r9
 8028470:	f280 8222 	bge.w	80288b8 <_dtoa_r+0x878>
 8028474:	f8dd 8000 	ldr.w	r8, [sp]
 8028478:	2331      	movs	r3, #49	; 0x31
 802847a:	f808 3b01 	strb.w	r3, [r8], #1
 802847e:	f10b 0b01 	add.w	fp, fp, #1
 8028482:	e21e      	b.n	80288c2 <_dtoa_r+0x882>
 8028484:	2202      	movs	r2, #2
 8028486:	e77c      	b.n	8028382 <_dtoa_r+0x342>
 8028488:	07cc      	lsls	r4, r1, #31
 802848a:	d504      	bpl.n	8028496 <_dtoa_r+0x456>
 802848c:	ed90 6b00 	vldr	d6, [r0]
 8028490:	3201      	adds	r2, #1
 8028492:	ee27 7b06 	vmul.f64	d7, d7, d6
 8028496:	1049      	asrs	r1, r1, #1
 8028498:	3008      	adds	r0, #8
 802849a:	e773      	b.n	8028384 <_dtoa_r+0x344>
 802849c:	d02e      	beq.n	80284fc <_dtoa_r+0x4bc>
 802849e:	f1cb 0100 	rsb	r1, fp, #0
 80284a2:	4a76      	ldr	r2, [pc, #472]	; (802867c <_dtoa_r+0x63c>)
 80284a4:	f001 000f 	and.w	r0, r1, #15
 80284a8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80284ac:	ed92 7b00 	vldr	d7, [r2]
 80284b0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80284b4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80284b8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80284bc:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80284c0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80284c4:	486e      	ldr	r0, [pc, #440]	; (8028680 <_dtoa_r+0x640>)
 80284c6:	1109      	asrs	r1, r1, #4
 80284c8:	2400      	movs	r4, #0
 80284ca:	2202      	movs	r2, #2
 80284cc:	b939      	cbnz	r1, 80284de <_dtoa_r+0x49e>
 80284ce:	2c00      	cmp	r4, #0
 80284d0:	f43f af60 	beq.w	8028394 <_dtoa_r+0x354>
 80284d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80284d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80284dc:	e75a      	b.n	8028394 <_dtoa_r+0x354>
 80284de:	07cf      	lsls	r7, r1, #31
 80284e0:	d509      	bpl.n	80284f6 <_dtoa_r+0x4b6>
 80284e2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80284e6:	ed90 7b00 	vldr	d7, [r0]
 80284ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 80284ee:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80284f2:	3201      	adds	r2, #1
 80284f4:	2401      	movs	r4, #1
 80284f6:	1049      	asrs	r1, r1, #1
 80284f8:	3008      	adds	r0, #8
 80284fa:	e7e7      	b.n	80284cc <_dtoa_r+0x48c>
 80284fc:	2202      	movs	r2, #2
 80284fe:	e749      	b.n	8028394 <_dtoa_r+0x354>
 8028500:	465f      	mov	r7, fp
 8028502:	4648      	mov	r0, r9
 8028504:	e765      	b.n	80283d2 <_dtoa_r+0x392>
 8028506:	ec42 1b17 	vmov	d7, r1, r2
 802850a:	4a5c      	ldr	r2, [pc, #368]	; (802867c <_dtoa_r+0x63c>)
 802850c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8028510:	ed12 4b02 	vldr	d4, [r2, #-8]
 8028514:	9a00      	ldr	r2, [sp, #0]
 8028516:	1814      	adds	r4, r2, r0
 8028518:	9a08      	ldr	r2, [sp, #32]
 802851a:	b352      	cbz	r2, 8028572 <_dtoa_r+0x532>
 802851c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8028520:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8028524:	f8dd 8000 	ldr.w	r8, [sp]
 8028528:	ee83 5b04 	vdiv.f64	d5, d3, d4
 802852c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8028530:	ee35 7b47 	vsub.f64	d7, d5, d7
 8028534:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8028538:	ee14 2a90 	vmov	r2, s9
 802853c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8028540:	3230      	adds	r2, #48	; 0x30
 8028542:	ee36 6b45 	vsub.f64	d6, d6, d5
 8028546:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802854a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802854e:	f808 2b01 	strb.w	r2, [r8], #1
 8028552:	d439      	bmi.n	80285c8 <_dtoa_r+0x588>
 8028554:	ee32 5b46 	vsub.f64	d5, d2, d6
 8028558:	eeb4 5bc7 	vcmpe.f64	d5, d7
 802855c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028560:	d472      	bmi.n	8028648 <_dtoa_r+0x608>
 8028562:	45a0      	cmp	r8, r4
 8028564:	f43f af5d 	beq.w	8028422 <_dtoa_r+0x3e2>
 8028568:	ee27 7b03 	vmul.f64	d7, d7, d3
 802856c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8028570:	e7e0      	b.n	8028534 <_dtoa_r+0x4f4>
 8028572:	f8dd 8000 	ldr.w	r8, [sp]
 8028576:	ee27 7b04 	vmul.f64	d7, d7, d4
 802857a:	4621      	mov	r1, r4
 802857c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8028580:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8028584:	ee14 2a90 	vmov	r2, s9
 8028588:	3230      	adds	r2, #48	; 0x30
 802858a:	f808 2b01 	strb.w	r2, [r8], #1
 802858e:	45a0      	cmp	r8, r4
 8028590:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8028594:	ee36 6b45 	vsub.f64	d6, d6, d5
 8028598:	d118      	bne.n	80285cc <_dtoa_r+0x58c>
 802859a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 802859e:	ee37 4b05 	vadd.f64	d4, d7, d5
 80285a2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80285a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80285aa:	dc4d      	bgt.n	8028648 <_dtoa_r+0x608>
 80285ac:	ee35 7b47 	vsub.f64	d7, d5, d7
 80285b0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80285b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80285b8:	f57f af33 	bpl.w	8028422 <_dtoa_r+0x3e2>
 80285bc:	4688      	mov	r8, r1
 80285be:	3901      	subs	r1, #1
 80285c0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80285c4:	2b30      	cmp	r3, #48	; 0x30
 80285c6:	d0f9      	beq.n	80285bc <_dtoa_r+0x57c>
 80285c8:	46bb      	mov	fp, r7
 80285ca:	e02a      	b.n	8028622 <_dtoa_r+0x5e2>
 80285cc:	ee26 6b03 	vmul.f64	d6, d6, d3
 80285d0:	e7d6      	b.n	8028580 <_dtoa_r+0x540>
 80285d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80285d6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80285da:	f8dd 8000 	ldr.w	r8, [sp]
 80285de:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80285e2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80285e6:	ee15 3a10 	vmov	r3, s10
 80285ea:	3330      	adds	r3, #48	; 0x30
 80285ec:	f808 3b01 	strb.w	r3, [r8], #1
 80285f0:	9b00      	ldr	r3, [sp, #0]
 80285f2:	eba8 0303 	sub.w	r3, r8, r3
 80285f6:	4599      	cmp	r9, r3
 80285f8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80285fc:	eea3 7b46 	vfms.f64	d7, d3, d6
 8028600:	d133      	bne.n	802866a <_dtoa_r+0x62a>
 8028602:	ee37 7b07 	vadd.f64	d7, d7, d7
 8028606:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802860a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802860e:	dc1a      	bgt.n	8028646 <_dtoa_r+0x606>
 8028610:	eeb4 7b46 	vcmp.f64	d7, d6
 8028614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028618:	d103      	bne.n	8028622 <_dtoa_r+0x5e2>
 802861a:	ee15 3a10 	vmov	r3, s10
 802861e:	07d9      	lsls	r1, r3, #31
 8028620:	d411      	bmi.n	8028646 <_dtoa_r+0x606>
 8028622:	4629      	mov	r1, r5
 8028624:	4630      	mov	r0, r6
 8028626:	f000 fd11 	bl	802904c <_Bfree>
 802862a:	2300      	movs	r3, #0
 802862c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802862e:	f888 3000 	strb.w	r3, [r8]
 8028632:	f10b 0301 	add.w	r3, fp, #1
 8028636:	6013      	str	r3, [r2, #0]
 8028638:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802863a:	2b00      	cmp	r3, #0
 802863c:	f43f ad4d 	beq.w	80280da <_dtoa_r+0x9a>
 8028640:	f8c3 8000 	str.w	r8, [r3]
 8028644:	e549      	b.n	80280da <_dtoa_r+0x9a>
 8028646:	465f      	mov	r7, fp
 8028648:	4643      	mov	r3, r8
 802864a:	4698      	mov	r8, r3
 802864c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8028650:	2a39      	cmp	r2, #57	; 0x39
 8028652:	d106      	bne.n	8028662 <_dtoa_r+0x622>
 8028654:	9a00      	ldr	r2, [sp, #0]
 8028656:	429a      	cmp	r2, r3
 8028658:	d1f7      	bne.n	802864a <_dtoa_r+0x60a>
 802865a:	9900      	ldr	r1, [sp, #0]
 802865c:	2230      	movs	r2, #48	; 0x30
 802865e:	3701      	adds	r7, #1
 8028660:	700a      	strb	r2, [r1, #0]
 8028662:	781a      	ldrb	r2, [r3, #0]
 8028664:	3201      	adds	r2, #1
 8028666:	701a      	strb	r2, [r3, #0]
 8028668:	e7ae      	b.n	80285c8 <_dtoa_r+0x588>
 802866a:	ee27 7b04 	vmul.f64	d7, d7, d4
 802866e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8028672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028676:	d1b2      	bne.n	80285de <_dtoa_r+0x59e>
 8028678:	e7d3      	b.n	8028622 <_dtoa_r+0x5e2>
 802867a:	bf00      	nop
 802867c:	0802f7d8 	.word	0x0802f7d8
 8028680:	0802f7b0 	.word	0x0802f7b0
 8028684:	9908      	ldr	r1, [sp, #32]
 8028686:	2900      	cmp	r1, #0
 8028688:	f000 80d1 	beq.w	802882e <_dtoa_r+0x7ee>
 802868c:	9907      	ldr	r1, [sp, #28]
 802868e:	2901      	cmp	r1, #1
 8028690:	f300 80b4 	bgt.w	80287fc <_dtoa_r+0x7bc>
 8028694:	9911      	ldr	r1, [sp, #68]	; 0x44
 8028696:	2900      	cmp	r1, #0
 8028698:	f000 80ac 	beq.w	80287f4 <_dtoa_r+0x7b4>
 802869c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80286a0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80286a4:	461c      	mov	r4, r3
 80286a6:	930a      	str	r3, [sp, #40]	; 0x28
 80286a8:	9b05      	ldr	r3, [sp, #20]
 80286aa:	4413      	add	r3, r2
 80286ac:	9305      	str	r3, [sp, #20]
 80286ae:	9b06      	ldr	r3, [sp, #24]
 80286b0:	2101      	movs	r1, #1
 80286b2:	4413      	add	r3, r2
 80286b4:	4630      	mov	r0, r6
 80286b6:	9306      	str	r3, [sp, #24]
 80286b8:	f000 fd84 	bl	80291c4 <__i2b>
 80286bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80286be:	4607      	mov	r7, r0
 80286c0:	f1b8 0f00 	cmp.w	r8, #0
 80286c4:	dd0d      	ble.n	80286e2 <_dtoa_r+0x6a2>
 80286c6:	9a06      	ldr	r2, [sp, #24]
 80286c8:	2a00      	cmp	r2, #0
 80286ca:	dd0a      	ble.n	80286e2 <_dtoa_r+0x6a2>
 80286cc:	4542      	cmp	r2, r8
 80286ce:	9905      	ldr	r1, [sp, #20]
 80286d0:	bfa8      	it	ge
 80286d2:	4642      	movge	r2, r8
 80286d4:	1a89      	subs	r1, r1, r2
 80286d6:	9105      	str	r1, [sp, #20]
 80286d8:	9906      	ldr	r1, [sp, #24]
 80286da:	eba8 0802 	sub.w	r8, r8, r2
 80286de:	1a8a      	subs	r2, r1, r2
 80286e0:	9206      	str	r2, [sp, #24]
 80286e2:	b303      	cbz	r3, 8028726 <_dtoa_r+0x6e6>
 80286e4:	9a08      	ldr	r2, [sp, #32]
 80286e6:	2a00      	cmp	r2, #0
 80286e8:	f000 80a6 	beq.w	8028838 <_dtoa_r+0x7f8>
 80286ec:	2c00      	cmp	r4, #0
 80286ee:	dd13      	ble.n	8028718 <_dtoa_r+0x6d8>
 80286f0:	4639      	mov	r1, r7
 80286f2:	4622      	mov	r2, r4
 80286f4:	4630      	mov	r0, r6
 80286f6:	930c      	str	r3, [sp, #48]	; 0x30
 80286f8:	f000 fe20 	bl	802933c <__pow5mult>
 80286fc:	462a      	mov	r2, r5
 80286fe:	4601      	mov	r1, r0
 8028700:	4607      	mov	r7, r0
 8028702:	4630      	mov	r0, r6
 8028704:	f000 fd74 	bl	80291f0 <__multiply>
 8028708:	4629      	mov	r1, r5
 802870a:	900a      	str	r0, [sp, #40]	; 0x28
 802870c:	4630      	mov	r0, r6
 802870e:	f000 fc9d 	bl	802904c <_Bfree>
 8028712:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8028714:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028716:	4615      	mov	r5, r2
 8028718:	1b1a      	subs	r2, r3, r4
 802871a:	d004      	beq.n	8028726 <_dtoa_r+0x6e6>
 802871c:	4629      	mov	r1, r5
 802871e:	4630      	mov	r0, r6
 8028720:	f000 fe0c 	bl	802933c <__pow5mult>
 8028724:	4605      	mov	r5, r0
 8028726:	2101      	movs	r1, #1
 8028728:	4630      	mov	r0, r6
 802872a:	f000 fd4b 	bl	80291c4 <__i2b>
 802872e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028730:	2b00      	cmp	r3, #0
 8028732:	4604      	mov	r4, r0
 8028734:	f340 8082 	ble.w	802883c <_dtoa_r+0x7fc>
 8028738:	461a      	mov	r2, r3
 802873a:	4601      	mov	r1, r0
 802873c:	4630      	mov	r0, r6
 802873e:	f000 fdfd 	bl	802933c <__pow5mult>
 8028742:	9b07      	ldr	r3, [sp, #28]
 8028744:	2b01      	cmp	r3, #1
 8028746:	4604      	mov	r4, r0
 8028748:	dd7b      	ble.n	8028842 <_dtoa_r+0x802>
 802874a:	2300      	movs	r3, #0
 802874c:	930a      	str	r3, [sp, #40]	; 0x28
 802874e:	6922      	ldr	r2, [r4, #16]
 8028750:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8028754:	6910      	ldr	r0, [r2, #16]
 8028756:	f000 fce5 	bl	8029124 <__hi0bits>
 802875a:	f1c0 0020 	rsb	r0, r0, #32
 802875e:	9b06      	ldr	r3, [sp, #24]
 8028760:	4418      	add	r0, r3
 8028762:	f010 001f 	ands.w	r0, r0, #31
 8028766:	f000 808d 	beq.w	8028884 <_dtoa_r+0x844>
 802876a:	f1c0 0220 	rsb	r2, r0, #32
 802876e:	2a04      	cmp	r2, #4
 8028770:	f340 8086 	ble.w	8028880 <_dtoa_r+0x840>
 8028774:	f1c0 001c 	rsb	r0, r0, #28
 8028778:	9b05      	ldr	r3, [sp, #20]
 802877a:	4403      	add	r3, r0
 802877c:	9305      	str	r3, [sp, #20]
 802877e:	9b06      	ldr	r3, [sp, #24]
 8028780:	4403      	add	r3, r0
 8028782:	4480      	add	r8, r0
 8028784:	9306      	str	r3, [sp, #24]
 8028786:	9b05      	ldr	r3, [sp, #20]
 8028788:	2b00      	cmp	r3, #0
 802878a:	dd05      	ble.n	8028798 <_dtoa_r+0x758>
 802878c:	4629      	mov	r1, r5
 802878e:	461a      	mov	r2, r3
 8028790:	4630      	mov	r0, r6
 8028792:	f000 fe2d 	bl	80293f0 <__lshift>
 8028796:	4605      	mov	r5, r0
 8028798:	9b06      	ldr	r3, [sp, #24]
 802879a:	2b00      	cmp	r3, #0
 802879c:	dd05      	ble.n	80287aa <_dtoa_r+0x76a>
 802879e:	4621      	mov	r1, r4
 80287a0:	461a      	mov	r2, r3
 80287a2:	4630      	mov	r0, r6
 80287a4:	f000 fe24 	bl	80293f0 <__lshift>
 80287a8:	4604      	mov	r4, r0
 80287aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80287ac:	2b00      	cmp	r3, #0
 80287ae:	d06b      	beq.n	8028888 <_dtoa_r+0x848>
 80287b0:	4621      	mov	r1, r4
 80287b2:	4628      	mov	r0, r5
 80287b4:	f000 fe88 	bl	80294c8 <__mcmp>
 80287b8:	2800      	cmp	r0, #0
 80287ba:	da65      	bge.n	8028888 <_dtoa_r+0x848>
 80287bc:	2300      	movs	r3, #0
 80287be:	4629      	mov	r1, r5
 80287c0:	220a      	movs	r2, #10
 80287c2:	4630      	mov	r0, r6
 80287c4:	f000 fc64 	bl	8029090 <__multadd>
 80287c8:	9b08      	ldr	r3, [sp, #32]
 80287ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80287ce:	4605      	mov	r5, r0
 80287d0:	2b00      	cmp	r3, #0
 80287d2:	f000 8192 	beq.w	8028afa <_dtoa_r+0xaba>
 80287d6:	4639      	mov	r1, r7
 80287d8:	2300      	movs	r3, #0
 80287da:	220a      	movs	r2, #10
 80287dc:	4630      	mov	r0, r6
 80287de:	f000 fc57 	bl	8029090 <__multadd>
 80287e2:	f1ba 0f00 	cmp.w	sl, #0
 80287e6:	4607      	mov	r7, r0
 80287e8:	f300 808e 	bgt.w	8028908 <_dtoa_r+0x8c8>
 80287ec:	9b07      	ldr	r3, [sp, #28]
 80287ee:	2b02      	cmp	r3, #2
 80287f0:	dc51      	bgt.n	8028896 <_dtoa_r+0x856>
 80287f2:	e089      	b.n	8028908 <_dtoa_r+0x8c8>
 80287f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80287f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80287fa:	e751      	b.n	80286a0 <_dtoa_r+0x660>
 80287fc:	f109 34ff 	add.w	r4, r9, #4294967295
 8028800:	42a3      	cmp	r3, r4
 8028802:	bfbf      	itttt	lt
 8028804:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8028806:	1ae3      	sublt	r3, r4, r3
 8028808:	18d2      	addlt	r2, r2, r3
 802880a:	4613      	movlt	r3, r2
 802880c:	bfb7      	itett	lt
 802880e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8028810:	1b1c      	subge	r4, r3, r4
 8028812:	4623      	movlt	r3, r4
 8028814:	2400      	movlt	r4, #0
 8028816:	f1b9 0f00 	cmp.w	r9, #0
 802881a:	bfb5      	itete	lt
 802881c:	9a05      	ldrlt	r2, [sp, #20]
 802881e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8028822:	eba2 0809 	sublt.w	r8, r2, r9
 8028826:	464a      	movge	r2, r9
 8028828:	bfb8      	it	lt
 802882a:	2200      	movlt	r2, #0
 802882c:	e73b      	b.n	80286a6 <_dtoa_r+0x666>
 802882e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8028832:	9f08      	ldr	r7, [sp, #32]
 8028834:	461c      	mov	r4, r3
 8028836:	e743      	b.n	80286c0 <_dtoa_r+0x680>
 8028838:	461a      	mov	r2, r3
 802883a:	e76f      	b.n	802871c <_dtoa_r+0x6dc>
 802883c:	9b07      	ldr	r3, [sp, #28]
 802883e:	2b01      	cmp	r3, #1
 8028840:	dc18      	bgt.n	8028874 <_dtoa_r+0x834>
 8028842:	9b02      	ldr	r3, [sp, #8]
 8028844:	b9b3      	cbnz	r3, 8028874 <_dtoa_r+0x834>
 8028846:	9b03      	ldr	r3, [sp, #12]
 8028848:	f3c3 0213 	ubfx	r2, r3, #0, #20
 802884c:	b9a2      	cbnz	r2, 8028878 <_dtoa_r+0x838>
 802884e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8028852:	0d12      	lsrs	r2, r2, #20
 8028854:	0512      	lsls	r2, r2, #20
 8028856:	b18a      	cbz	r2, 802887c <_dtoa_r+0x83c>
 8028858:	9b05      	ldr	r3, [sp, #20]
 802885a:	3301      	adds	r3, #1
 802885c:	9305      	str	r3, [sp, #20]
 802885e:	9b06      	ldr	r3, [sp, #24]
 8028860:	3301      	adds	r3, #1
 8028862:	9306      	str	r3, [sp, #24]
 8028864:	2301      	movs	r3, #1
 8028866:	930a      	str	r3, [sp, #40]	; 0x28
 8028868:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802886a:	2b00      	cmp	r3, #0
 802886c:	f47f af6f 	bne.w	802874e <_dtoa_r+0x70e>
 8028870:	2001      	movs	r0, #1
 8028872:	e774      	b.n	802875e <_dtoa_r+0x71e>
 8028874:	2300      	movs	r3, #0
 8028876:	e7f6      	b.n	8028866 <_dtoa_r+0x826>
 8028878:	9b02      	ldr	r3, [sp, #8]
 802887a:	e7f4      	b.n	8028866 <_dtoa_r+0x826>
 802887c:	920a      	str	r2, [sp, #40]	; 0x28
 802887e:	e7f3      	b.n	8028868 <_dtoa_r+0x828>
 8028880:	d081      	beq.n	8028786 <_dtoa_r+0x746>
 8028882:	4610      	mov	r0, r2
 8028884:	301c      	adds	r0, #28
 8028886:	e777      	b.n	8028778 <_dtoa_r+0x738>
 8028888:	f1b9 0f00 	cmp.w	r9, #0
 802888c:	dc37      	bgt.n	80288fe <_dtoa_r+0x8be>
 802888e:	9b07      	ldr	r3, [sp, #28]
 8028890:	2b02      	cmp	r3, #2
 8028892:	dd34      	ble.n	80288fe <_dtoa_r+0x8be>
 8028894:	46ca      	mov	sl, r9
 8028896:	f1ba 0f00 	cmp.w	sl, #0
 802889a:	d10d      	bne.n	80288b8 <_dtoa_r+0x878>
 802889c:	4621      	mov	r1, r4
 802889e:	4653      	mov	r3, sl
 80288a0:	2205      	movs	r2, #5
 80288a2:	4630      	mov	r0, r6
 80288a4:	f000 fbf4 	bl	8029090 <__multadd>
 80288a8:	4601      	mov	r1, r0
 80288aa:	4604      	mov	r4, r0
 80288ac:	4628      	mov	r0, r5
 80288ae:	f000 fe0b 	bl	80294c8 <__mcmp>
 80288b2:	2800      	cmp	r0, #0
 80288b4:	f73f adde 	bgt.w	8028474 <_dtoa_r+0x434>
 80288b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80288ba:	f8dd 8000 	ldr.w	r8, [sp]
 80288be:	ea6f 0b03 	mvn.w	fp, r3
 80288c2:	f04f 0900 	mov.w	r9, #0
 80288c6:	4621      	mov	r1, r4
 80288c8:	4630      	mov	r0, r6
 80288ca:	f000 fbbf 	bl	802904c <_Bfree>
 80288ce:	2f00      	cmp	r7, #0
 80288d0:	f43f aea7 	beq.w	8028622 <_dtoa_r+0x5e2>
 80288d4:	f1b9 0f00 	cmp.w	r9, #0
 80288d8:	d005      	beq.n	80288e6 <_dtoa_r+0x8a6>
 80288da:	45b9      	cmp	r9, r7
 80288dc:	d003      	beq.n	80288e6 <_dtoa_r+0x8a6>
 80288de:	4649      	mov	r1, r9
 80288e0:	4630      	mov	r0, r6
 80288e2:	f000 fbb3 	bl	802904c <_Bfree>
 80288e6:	4639      	mov	r1, r7
 80288e8:	4630      	mov	r0, r6
 80288ea:	f000 fbaf 	bl	802904c <_Bfree>
 80288ee:	e698      	b.n	8028622 <_dtoa_r+0x5e2>
 80288f0:	2400      	movs	r4, #0
 80288f2:	4627      	mov	r7, r4
 80288f4:	e7e0      	b.n	80288b8 <_dtoa_r+0x878>
 80288f6:	46bb      	mov	fp, r7
 80288f8:	4604      	mov	r4, r0
 80288fa:	4607      	mov	r7, r0
 80288fc:	e5ba      	b.n	8028474 <_dtoa_r+0x434>
 80288fe:	9b08      	ldr	r3, [sp, #32]
 8028900:	46ca      	mov	sl, r9
 8028902:	2b00      	cmp	r3, #0
 8028904:	f000 8100 	beq.w	8028b08 <_dtoa_r+0xac8>
 8028908:	f1b8 0f00 	cmp.w	r8, #0
 802890c:	dd05      	ble.n	802891a <_dtoa_r+0x8da>
 802890e:	4639      	mov	r1, r7
 8028910:	4642      	mov	r2, r8
 8028912:	4630      	mov	r0, r6
 8028914:	f000 fd6c 	bl	80293f0 <__lshift>
 8028918:	4607      	mov	r7, r0
 802891a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802891c:	2b00      	cmp	r3, #0
 802891e:	d05d      	beq.n	80289dc <_dtoa_r+0x99c>
 8028920:	6879      	ldr	r1, [r7, #4]
 8028922:	4630      	mov	r0, r6
 8028924:	f000 fb52 	bl	8028fcc <_Balloc>
 8028928:	4680      	mov	r8, r0
 802892a:	b928      	cbnz	r0, 8028938 <_dtoa_r+0x8f8>
 802892c:	4b82      	ldr	r3, [pc, #520]	; (8028b38 <_dtoa_r+0xaf8>)
 802892e:	4602      	mov	r2, r0
 8028930:	f240 21ea 	movw	r1, #746	; 0x2ea
 8028934:	f7ff bb9a 	b.w	802806c <_dtoa_r+0x2c>
 8028938:	693a      	ldr	r2, [r7, #16]
 802893a:	3202      	adds	r2, #2
 802893c:	0092      	lsls	r2, r2, #2
 802893e:	f107 010c 	add.w	r1, r7, #12
 8028942:	300c      	adds	r0, #12
 8028944:	f7fd fc40 	bl	80261c8 <memcpy>
 8028948:	2201      	movs	r2, #1
 802894a:	4641      	mov	r1, r8
 802894c:	4630      	mov	r0, r6
 802894e:	f000 fd4f 	bl	80293f0 <__lshift>
 8028952:	9b00      	ldr	r3, [sp, #0]
 8028954:	3301      	adds	r3, #1
 8028956:	9305      	str	r3, [sp, #20]
 8028958:	9b00      	ldr	r3, [sp, #0]
 802895a:	4453      	add	r3, sl
 802895c:	9309      	str	r3, [sp, #36]	; 0x24
 802895e:	9b02      	ldr	r3, [sp, #8]
 8028960:	f003 0301 	and.w	r3, r3, #1
 8028964:	46b9      	mov	r9, r7
 8028966:	9308      	str	r3, [sp, #32]
 8028968:	4607      	mov	r7, r0
 802896a:	9b05      	ldr	r3, [sp, #20]
 802896c:	4621      	mov	r1, r4
 802896e:	3b01      	subs	r3, #1
 8028970:	4628      	mov	r0, r5
 8028972:	9302      	str	r3, [sp, #8]
 8028974:	f7ff fad6 	bl	8027f24 <quorem>
 8028978:	4603      	mov	r3, r0
 802897a:	3330      	adds	r3, #48	; 0x30
 802897c:	9006      	str	r0, [sp, #24]
 802897e:	4649      	mov	r1, r9
 8028980:	4628      	mov	r0, r5
 8028982:	930a      	str	r3, [sp, #40]	; 0x28
 8028984:	f000 fda0 	bl	80294c8 <__mcmp>
 8028988:	463a      	mov	r2, r7
 802898a:	4682      	mov	sl, r0
 802898c:	4621      	mov	r1, r4
 802898e:	4630      	mov	r0, r6
 8028990:	f000 fdb6 	bl	8029500 <__mdiff>
 8028994:	68c2      	ldr	r2, [r0, #12]
 8028996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028998:	4680      	mov	r8, r0
 802899a:	bb0a      	cbnz	r2, 80289e0 <_dtoa_r+0x9a0>
 802899c:	4601      	mov	r1, r0
 802899e:	4628      	mov	r0, r5
 80289a0:	f000 fd92 	bl	80294c8 <__mcmp>
 80289a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80289a6:	4602      	mov	r2, r0
 80289a8:	4641      	mov	r1, r8
 80289aa:	4630      	mov	r0, r6
 80289ac:	920e      	str	r2, [sp, #56]	; 0x38
 80289ae:	930a      	str	r3, [sp, #40]	; 0x28
 80289b0:	f000 fb4c 	bl	802904c <_Bfree>
 80289b4:	9b07      	ldr	r3, [sp, #28]
 80289b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80289b8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80289bc:	ea43 0102 	orr.w	r1, r3, r2
 80289c0:	9b08      	ldr	r3, [sp, #32]
 80289c2:	430b      	orrs	r3, r1
 80289c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80289c6:	d10d      	bne.n	80289e4 <_dtoa_r+0x9a4>
 80289c8:	2b39      	cmp	r3, #57	; 0x39
 80289ca:	d029      	beq.n	8028a20 <_dtoa_r+0x9e0>
 80289cc:	f1ba 0f00 	cmp.w	sl, #0
 80289d0:	dd01      	ble.n	80289d6 <_dtoa_r+0x996>
 80289d2:	9b06      	ldr	r3, [sp, #24]
 80289d4:	3331      	adds	r3, #49	; 0x31
 80289d6:	9a02      	ldr	r2, [sp, #8]
 80289d8:	7013      	strb	r3, [r2, #0]
 80289da:	e774      	b.n	80288c6 <_dtoa_r+0x886>
 80289dc:	4638      	mov	r0, r7
 80289de:	e7b8      	b.n	8028952 <_dtoa_r+0x912>
 80289e0:	2201      	movs	r2, #1
 80289e2:	e7e1      	b.n	80289a8 <_dtoa_r+0x968>
 80289e4:	f1ba 0f00 	cmp.w	sl, #0
 80289e8:	db06      	blt.n	80289f8 <_dtoa_r+0x9b8>
 80289ea:	9907      	ldr	r1, [sp, #28]
 80289ec:	ea41 0a0a 	orr.w	sl, r1, sl
 80289f0:	9908      	ldr	r1, [sp, #32]
 80289f2:	ea5a 0101 	orrs.w	r1, sl, r1
 80289f6:	d120      	bne.n	8028a3a <_dtoa_r+0x9fa>
 80289f8:	2a00      	cmp	r2, #0
 80289fa:	ddec      	ble.n	80289d6 <_dtoa_r+0x996>
 80289fc:	4629      	mov	r1, r5
 80289fe:	2201      	movs	r2, #1
 8028a00:	4630      	mov	r0, r6
 8028a02:	9305      	str	r3, [sp, #20]
 8028a04:	f000 fcf4 	bl	80293f0 <__lshift>
 8028a08:	4621      	mov	r1, r4
 8028a0a:	4605      	mov	r5, r0
 8028a0c:	f000 fd5c 	bl	80294c8 <__mcmp>
 8028a10:	2800      	cmp	r0, #0
 8028a12:	9b05      	ldr	r3, [sp, #20]
 8028a14:	dc02      	bgt.n	8028a1c <_dtoa_r+0x9dc>
 8028a16:	d1de      	bne.n	80289d6 <_dtoa_r+0x996>
 8028a18:	07da      	lsls	r2, r3, #31
 8028a1a:	d5dc      	bpl.n	80289d6 <_dtoa_r+0x996>
 8028a1c:	2b39      	cmp	r3, #57	; 0x39
 8028a1e:	d1d8      	bne.n	80289d2 <_dtoa_r+0x992>
 8028a20:	9a02      	ldr	r2, [sp, #8]
 8028a22:	2339      	movs	r3, #57	; 0x39
 8028a24:	7013      	strb	r3, [r2, #0]
 8028a26:	4643      	mov	r3, r8
 8028a28:	4698      	mov	r8, r3
 8028a2a:	3b01      	subs	r3, #1
 8028a2c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8028a30:	2a39      	cmp	r2, #57	; 0x39
 8028a32:	d051      	beq.n	8028ad8 <_dtoa_r+0xa98>
 8028a34:	3201      	adds	r2, #1
 8028a36:	701a      	strb	r2, [r3, #0]
 8028a38:	e745      	b.n	80288c6 <_dtoa_r+0x886>
 8028a3a:	2a00      	cmp	r2, #0
 8028a3c:	dd03      	ble.n	8028a46 <_dtoa_r+0xa06>
 8028a3e:	2b39      	cmp	r3, #57	; 0x39
 8028a40:	d0ee      	beq.n	8028a20 <_dtoa_r+0x9e0>
 8028a42:	3301      	adds	r3, #1
 8028a44:	e7c7      	b.n	80289d6 <_dtoa_r+0x996>
 8028a46:	9a05      	ldr	r2, [sp, #20]
 8028a48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8028a4a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8028a4e:	428a      	cmp	r2, r1
 8028a50:	d02b      	beq.n	8028aaa <_dtoa_r+0xa6a>
 8028a52:	4629      	mov	r1, r5
 8028a54:	2300      	movs	r3, #0
 8028a56:	220a      	movs	r2, #10
 8028a58:	4630      	mov	r0, r6
 8028a5a:	f000 fb19 	bl	8029090 <__multadd>
 8028a5e:	45b9      	cmp	r9, r7
 8028a60:	4605      	mov	r5, r0
 8028a62:	f04f 0300 	mov.w	r3, #0
 8028a66:	f04f 020a 	mov.w	r2, #10
 8028a6a:	4649      	mov	r1, r9
 8028a6c:	4630      	mov	r0, r6
 8028a6e:	d107      	bne.n	8028a80 <_dtoa_r+0xa40>
 8028a70:	f000 fb0e 	bl	8029090 <__multadd>
 8028a74:	4681      	mov	r9, r0
 8028a76:	4607      	mov	r7, r0
 8028a78:	9b05      	ldr	r3, [sp, #20]
 8028a7a:	3301      	adds	r3, #1
 8028a7c:	9305      	str	r3, [sp, #20]
 8028a7e:	e774      	b.n	802896a <_dtoa_r+0x92a>
 8028a80:	f000 fb06 	bl	8029090 <__multadd>
 8028a84:	4639      	mov	r1, r7
 8028a86:	4681      	mov	r9, r0
 8028a88:	2300      	movs	r3, #0
 8028a8a:	220a      	movs	r2, #10
 8028a8c:	4630      	mov	r0, r6
 8028a8e:	f000 faff 	bl	8029090 <__multadd>
 8028a92:	4607      	mov	r7, r0
 8028a94:	e7f0      	b.n	8028a78 <_dtoa_r+0xa38>
 8028a96:	f1ba 0f00 	cmp.w	sl, #0
 8028a9a:	9a00      	ldr	r2, [sp, #0]
 8028a9c:	bfcc      	ite	gt
 8028a9e:	46d0      	movgt	r8, sl
 8028aa0:	f04f 0801 	movle.w	r8, #1
 8028aa4:	4490      	add	r8, r2
 8028aa6:	f04f 0900 	mov.w	r9, #0
 8028aaa:	4629      	mov	r1, r5
 8028aac:	2201      	movs	r2, #1
 8028aae:	4630      	mov	r0, r6
 8028ab0:	9302      	str	r3, [sp, #8]
 8028ab2:	f000 fc9d 	bl	80293f0 <__lshift>
 8028ab6:	4621      	mov	r1, r4
 8028ab8:	4605      	mov	r5, r0
 8028aba:	f000 fd05 	bl	80294c8 <__mcmp>
 8028abe:	2800      	cmp	r0, #0
 8028ac0:	dcb1      	bgt.n	8028a26 <_dtoa_r+0x9e6>
 8028ac2:	d102      	bne.n	8028aca <_dtoa_r+0xa8a>
 8028ac4:	9b02      	ldr	r3, [sp, #8]
 8028ac6:	07db      	lsls	r3, r3, #31
 8028ac8:	d4ad      	bmi.n	8028a26 <_dtoa_r+0x9e6>
 8028aca:	4643      	mov	r3, r8
 8028acc:	4698      	mov	r8, r3
 8028ace:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8028ad2:	2a30      	cmp	r2, #48	; 0x30
 8028ad4:	d0fa      	beq.n	8028acc <_dtoa_r+0xa8c>
 8028ad6:	e6f6      	b.n	80288c6 <_dtoa_r+0x886>
 8028ad8:	9a00      	ldr	r2, [sp, #0]
 8028ada:	429a      	cmp	r2, r3
 8028adc:	d1a4      	bne.n	8028a28 <_dtoa_r+0x9e8>
 8028ade:	f10b 0b01 	add.w	fp, fp, #1
 8028ae2:	2331      	movs	r3, #49	; 0x31
 8028ae4:	e778      	b.n	80289d8 <_dtoa_r+0x998>
 8028ae6:	4b15      	ldr	r3, [pc, #84]	; (8028b3c <_dtoa_r+0xafc>)
 8028ae8:	f7ff bb12 	b.w	8028110 <_dtoa_r+0xd0>
 8028aec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8028aee:	2b00      	cmp	r3, #0
 8028af0:	f47f aaee 	bne.w	80280d0 <_dtoa_r+0x90>
 8028af4:	4b12      	ldr	r3, [pc, #72]	; (8028b40 <_dtoa_r+0xb00>)
 8028af6:	f7ff bb0b 	b.w	8028110 <_dtoa_r+0xd0>
 8028afa:	f1ba 0f00 	cmp.w	sl, #0
 8028afe:	dc03      	bgt.n	8028b08 <_dtoa_r+0xac8>
 8028b00:	9b07      	ldr	r3, [sp, #28]
 8028b02:	2b02      	cmp	r3, #2
 8028b04:	f73f aec7 	bgt.w	8028896 <_dtoa_r+0x856>
 8028b08:	f8dd 8000 	ldr.w	r8, [sp]
 8028b0c:	4621      	mov	r1, r4
 8028b0e:	4628      	mov	r0, r5
 8028b10:	f7ff fa08 	bl	8027f24 <quorem>
 8028b14:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8028b18:	f808 3b01 	strb.w	r3, [r8], #1
 8028b1c:	9a00      	ldr	r2, [sp, #0]
 8028b1e:	eba8 0202 	sub.w	r2, r8, r2
 8028b22:	4592      	cmp	sl, r2
 8028b24:	ddb7      	ble.n	8028a96 <_dtoa_r+0xa56>
 8028b26:	4629      	mov	r1, r5
 8028b28:	2300      	movs	r3, #0
 8028b2a:	220a      	movs	r2, #10
 8028b2c:	4630      	mov	r0, r6
 8028b2e:	f000 faaf 	bl	8029090 <__multadd>
 8028b32:	4605      	mov	r5, r0
 8028b34:	e7ea      	b.n	8028b0c <_dtoa_r+0xacc>
 8028b36:	bf00      	nop
 8028b38:	0802f73d 	.word	0x0802f73d
 8028b3c:	0802f8b0 	.word	0x0802f8b0
 8028b40:	0802f6d1 	.word	0x0802f6d1

08028b44 <__errno>:
 8028b44:	4b01      	ldr	r3, [pc, #4]	; (8028b4c <__errno+0x8>)
 8028b46:	6818      	ldr	r0, [r3, #0]
 8028b48:	4770      	bx	lr
 8028b4a:	bf00      	nop
 8028b4c:	240000bc 	.word	0x240000bc

08028b50 <__sflush_r>:
 8028b50:	898a      	ldrh	r2, [r1, #12]
 8028b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028b56:	4605      	mov	r5, r0
 8028b58:	0710      	lsls	r0, r2, #28
 8028b5a:	460c      	mov	r4, r1
 8028b5c:	d458      	bmi.n	8028c10 <__sflush_r+0xc0>
 8028b5e:	684b      	ldr	r3, [r1, #4]
 8028b60:	2b00      	cmp	r3, #0
 8028b62:	dc05      	bgt.n	8028b70 <__sflush_r+0x20>
 8028b64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8028b66:	2b00      	cmp	r3, #0
 8028b68:	dc02      	bgt.n	8028b70 <__sflush_r+0x20>
 8028b6a:	2000      	movs	r0, #0
 8028b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028b70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028b72:	2e00      	cmp	r6, #0
 8028b74:	d0f9      	beq.n	8028b6a <__sflush_r+0x1a>
 8028b76:	2300      	movs	r3, #0
 8028b78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8028b7c:	682f      	ldr	r7, [r5, #0]
 8028b7e:	602b      	str	r3, [r5, #0]
 8028b80:	d032      	beq.n	8028be8 <__sflush_r+0x98>
 8028b82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8028b84:	89a3      	ldrh	r3, [r4, #12]
 8028b86:	075a      	lsls	r2, r3, #29
 8028b88:	d505      	bpl.n	8028b96 <__sflush_r+0x46>
 8028b8a:	6863      	ldr	r3, [r4, #4]
 8028b8c:	1ac0      	subs	r0, r0, r3
 8028b8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8028b90:	b10b      	cbz	r3, 8028b96 <__sflush_r+0x46>
 8028b92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8028b94:	1ac0      	subs	r0, r0, r3
 8028b96:	2300      	movs	r3, #0
 8028b98:	4602      	mov	r2, r0
 8028b9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028b9c:	6a21      	ldr	r1, [r4, #32]
 8028b9e:	4628      	mov	r0, r5
 8028ba0:	47b0      	blx	r6
 8028ba2:	1c43      	adds	r3, r0, #1
 8028ba4:	89a3      	ldrh	r3, [r4, #12]
 8028ba6:	d106      	bne.n	8028bb6 <__sflush_r+0x66>
 8028ba8:	6829      	ldr	r1, [r5, #0]
 8028baa:	291d      	cmp	r1, #29
 8028bac:	d82c      	bhi.n	8028c08 <__sflush_r+0xb8>
 8028bae:	4a2a      	ldr	r2, [pc, #168]	; (8028c58 <__sflush_r+0x108>)
 8028bb0:	40ca      	lsrs	r2, r1
 8028bb2:	07d6      	lsls	r6, r2, #31
 8028bb4:	d528      	bpl.n	8028c08 <__sflush_r+0xb8>
 8028bb6:	2200      	movs	r2, #0
 8028bb8:	6062      	str	r2, [r4, #4]
 8028bba:	04d9      	lsls	r1, r3, #19
 8028bbc:	6922      	ldr	r2, [r4, #16]
 8028bbe:	6022      	str	r2, [r4, #0]
 8028bc0:	d504      	bpl.n	8028bcc <__sflush_r+0x7c>
 8028bc2:	1c42      	adds	r2, r0, #1
 8028bc4:	d101      	bne.n	8028bca <__sflush_r+0x7a>
 8028bc6:	682b      	ldr	r3, [r5, #0]
 8028bc8:	b903      	cbnz	r3, 8028bcc <__sflush_r+0x7c>
 8028bca:	6560      	str	r0, [r4, #84]	; 0x54
 8028bcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028bce:	602f      	str	r7, [r5, #0]
 8028bd0:	2900      	cmp	r1, #0
 8028bd2:	d0ca      	beq.n	8028b6a <__sflush_r+0x1a>
 8028bd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028bd8:	4299      	cmp	r1, r3
 8028bda:	d002      	beq.n	8028be2 <__sflush_r+0x92>
 8028bdc:	4628      	mov	r0, r5
 8028bde:	f7fd fb33 	bl	8026248 <_free_r>
 8028be2:	2000      	movs	r0, #0
 8028be4:	6360      	str	r0, [r4, #52]	; 0x34
 8028be6:	e7c1      	b.n	8028b6c <__sflush_r+0x1c>
 8028be8:	6a21      	ldr	r1, [r4, #32]
 8028bea:	2301      	movs	r3, #1
 8028bec:	4628      	mov	r0, r5
 8028bee:	47b0      	blx	r6
 8028bf0:	1c41      	adds	r1, r0, #1
 8028bf2:	d1c7      	bne.n	8028b84 <__sflush_r+0x34>
 8028bf4:	682b      	ldr	r3, [r5, #0]
 8028bf6:	2b00      	cmp	r3, #0
 8028bf8:	d0c4      	beq.n	8028b84 <__sflush_r+0x34>
 8028bfa:	2b1d      	cmp	r3, #29
 8028bfc:	d001      	beq.n	8028c02 <__sflush_r+0xb2>
 8028bfe:	2b16      	cmp	r3, #22
 8028c00:	d101      	bne.n	8028c06 <__sflush_r+0xb6>
 8028c02:	602f      	str	r7, [r5, #0]
 8028c04:	e7b1      	b.n	8028b6a <__sflush_r+0x1a>
 8028c06:	89a3      	ldrh	r3, [r4, #12]
 8028c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028c0c:	81a3      	strh	r3, [r4, #12]
 8028c0e:	e7ad      	b.n	8028b6c <__sflush_r+0x1c>
 8028c10:	690f      	ldr	r7, [r1, #16]
 8028c12:	2f00      	cmp	r7, #0
 8028c14:	d0a9      	beq.n	8028b6a <__sflush_r+0x1a>
 8028c16:	0793      	lsls	r3, r2, #30
 8028c18:	680e      	ldr	r6, [r1, #0]
 8028c1a:	bf08      	it	eq
 8028c1c:	694b      	ldreq	r3, [r1, #20]
 8028c1e:	600f      	str	r7, [r1, #0]
 8028c20:	bf18      	it	ne
 8028c22:	2300      	movne	r3, #0
 8028c24:	eba6 0807 	sub.w	r8, r6, r7
 8028c28:	608b      	str	r3, [r1, #8]
 8028c2a:	f1b8 0f00 	cmp.w	r8, #0
 8028c2e:	dd9c      	ble.n	8028b6a <__sflush_r+0x1a>
 8028c30:	6a21      	ldr	r1, [r4, #32]
 8028c32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8028c34:	4643      	mov	r3, r8
 8028c36:	463a      	mov	r2, r7
 8028c38:	4628      	mov	r0, r5
 8028c3a:	47b0      	blx	r6
 8028c3c:	2800      	cmp	r0, #0
 8028c3e:	dc06      	bgt.n	8028c4e <__sflush_r+0xfe>
 8028c40:	89a3      	ldrh	r3, [r4, #12]
 8028c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028c46:	81a3      	strh	r3, [r4, #12]
 8028c48:	f04f 30ff 	mov.w	r0, #4294967295
 8028c4c:	e78e      	b.n	8028b6c <__sflush_r+0x1c>
 8028c4e:	4407      	add	r7, r0
 8028c50:	eba8 0800 	sub.w	r8, r8, r0
 8028c54:	e7e9      	b.n	8028c2a <__sflush_r+0xda>
 8028c56:	bf00      	nop
 8028c58:	20400001 	.word	0x20400001

08028c5c <_fflush_r>:
 8028c5c:	b538      	push	{r3, r4, r5, lr}
 8028c5e:	690b      	ldr	r3, [r1, #16]
 8028c60:	4605      	mov	r5, r0
 8028c62:	460c      	mov	r4, r1
 8028c64:	b913      	cbnz	r3, 8028c6c <_fflush_r+0x10>
 8028c66:	2500      	movs	r5, #0
 8028c68:	4628      	mov	r0, r5
 8028c6a:	bd38      	pop	{r3, r4, r5, pc}
 8028c6c:	b118      	cbz	r0, 8028c76 <_fflush_r+0x1a>
 8028c6e:	6983      	ldr	r3, [r0, #24]
 8028c70:	b90b      	cbnz	r3, 8028c76 <_fflush_r+0x1a>
 8028c72:	f7fd f82f 	bl	8025cd4 <__sinit>
 8028c76:	4b14      	ldr	r3, [pc, #80]	; (8028cc8 <_fflush_r+0x6c>)
 8028c78:	429c      	cmp	r4, r3
 8028c7a:	d11b      	bne.n	8028cb4 <_fflush_r+0x58>
 8028c7c:	686c      	ldr	r4, [r5, #4]
 8028c7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028c82:	2b00      	cmp	r3, #0
 8028c84:	d0ef      	beq.n	8028c66 <_fflush_r+0xa>
 8028c86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8028c88:	07d0      	lsls	r0, r2, #31
 8028c8a:	d404      	bmi.n	8028c96 <_fflush_r+0x3a>
 8028c8c:	0599      	lsls	r1, r3, #22
 8028c8e:	d402      	bmi.n	8028c96 <_fflush_r+0x3a>
 8028c90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028c92:	f7fd fa77 	bl	8026184 <__retarget_lock_acquire_recursive>
 8028c96:	4628      	mov	r0, r5
 8028c98:	4621      	mov	r1, r4
 8028c9a:	f7ff ff59 	bl	8028b50 <__sflush_r>
 8028c9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8028ca0:	07da      	lsls	r2, r3, #31
 8028ca2:	4605      	mov	r5, r0
 8028ca4:	d4e0      	bmi.n	8028c68 <_fflush_r+0xc>
 8028ca6:	89a3      	ldrh	r3, [r4, #12]
 8028ca8:	059b      	lsls	r3, r3, #22
 8028caa:	d4dd      	bmi.n	8028c68 <_fflush_r+0xc>
 8028cac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028cae:	f7fd fa6b 	bl	8026188 <__retarget_lock_release_recursive>
 8028cb2:	e7d9      	b.n	8028c68 <_fflush_r+0xc>
 8028cb4:	4b05      	ldr	r3, [pc, #20]	; (8028ccc <_fflush_r+0x70>)
 8028cb6:	429c      	cmp	r4, r3
 8028cb8:	d101      	bne.n	8028cbe <_fflush_r+0x62>
 8028cba:	68ac      	ldr	r4, [r5, #8]
 8028cbc:	e7df      	b.n	8028c7e <_fflush_r+0x22>
 8028cbe:	4b04      	ldr	r3, [pc, #16]	; (8028cd0 <_fflush_r+0x74>)
 8028cc0:	429c      	cmp	r4, r3
 8028cc2:	bf08      	it	eq
 8028cc4:	68ec      	ldreq	r4, [r5, #12]
 8028cc6:	e7da      	b.n	8028c7e <_fflush_r+0x22>
 8028cc8:	0802eda4 	.word	0x0802eda4
 8028ccc:	0802edc4 	.word	0x0802edc4
 8028cd0:	0802ed84 	.word	0x0802ed84

08028cd4 <_findenv_r>:
 8028cd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028cd8:	4607      	mov	r7, r0
 8028cda:	4689      	mov	r9, r1
 8028cdc:	4616      	mov	r6, r2
 8028cde:	f001 faa9 	bl	802a234 <__env_lock>
 8028ce2:	4b18      	ldr	r3, [pc, #96]	; (8028d44 <_findenv_r+0x70>)
 8028ce4:	681c      	ldr	r4, [r3, #0]
 8028ce6:	469a      	mov	sl, r3
 8028ce8:	b134      	cbz	r4, 8028cf8 <_findenv_r+0x24>
 8028cea:	464b      	mov	r3, r9
 8028cec:	4698      	mov	r8, r3
 8028cee:	f813 1b01 	ldrb.w	r1, [r3], #1
 8028cf2:	b139      	cbz	r1, 8028d04 <_findenv_r+0x30>
 8028cf4:	293d      	cmp	r1, #61	; 0x3d
 8028cf6:	d1f9      	bne.n	8028cec <_findenv_r+0x18>
 8028cf8:	4638      	mov	r0, r7
 8028cfa:	f001 faa1 	bl	802a240 <__env_unlock>
 8028cfe:	2000      	movs	r0, #0
 8028d00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028d04:	eba8 0809 	sub.w	r8, r8, r9
 8028d08:	46a3      	mov	fp, r4
 8028d0a:	f854 0b04 	ldr.w	r0, [r4], #4
 8028d0e:	2800      	cmp	r0, #0
 8028d10:	d0f2      	beq.n	8028cf8 <_findenv_r+0x24>
 8028d12:	4642      	mov	r2, r8
 8028d14:	4649      	mov	r1, r9
 8028d16:	f7fe fcbb 	bl	8027690 <strncmp>
 8028d1a:	2800      	cmp	r0, #0
 8028d1c:	d1f4      	bne.n	8028d08 <_findenv_r+0x34>
 8028d1e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8028d22:	eb03 0508 	add.w	r5, r3, r8
 8028d26:	f813 3008 	ldrb.w	r3, [r3, r8]
 8028d2a:	2b3d      	cmp	r3, #61	; 0x3d
 8028d2c:	d1ec      	bne.n	8028d08 <_findenv_r+0x34>
 8028d2e:	f8da 3000 	ldr.w	r3, [sl]
 8028d32:	ebab 0303 	sub.w	r3, fp, r3
 8028d36:	109b      	asrs	r3, r3, #2
 8028d38:	4638      	mov	r0, r7
 8028d3a:	6033      	str	r3, [r6, #0]
 8028d3c:	f001 fa80 	bl	802a240 <__env_unlock>
 8028d40:	1c68      	adds	r0, r5, #1
 8028d42:	e7dd      	b.n	8028d00 <_findenv_r+0x2c>
 8028d44:	24000008 	.word	0x24000008

08028d48 <_getenv_r>:
 8028d48:	b507      	push	{r0, r1, r2, lr}
 8028d4a:	aa01      	add	r2, sp, #4
 8028d4c:	f7ff ffc2 	bl	8028cd4 <_findenv_r>
 8028d50:	b003      	add	sp, #12
 8028d52:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08028d58 <__gettzinfo>:
 8028d58:	4800      	ldr	r0, [pc, #0]	; (8028d5c <__gettzinfo+0x4>)
 8028d5a:	4770      	bx	lr
 8028d5c:	24000128 	.word	0x24000128

08028d60 <gmtime_r>:
 8028d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028d64:	e9d0 6700 	ldrd	r6, r7, [r0]
 8028d68:	460c      	mov	r4, r1
 8028d6a:	4a51      	ldr	r2, [pc, #324]	; (8028eb0 <gmtime_r+0x150>)
 8028d6c:	2300      	movs	r3, #0
 8028d6e:	4630      	mov	r0, r6
 8028d70:	4639      	mov	r1, r7
 8028d72:	f7d7 fb1d 	bl	80003b0 <__aeabi_ldivmod>
 8028d76:	4639      	mov	r1, r7
 8028d78:	4605      	mov	r5, r0
 8028d7a:	4a4d      	ldr	r2, [pc, #308]	; (8028eb0 <gmtime_r+0x150>)
 8028d7c:	4630      	mov	r0, r6
 8028d7e:	2300      	movs	r3, #0
 8028d80:	f7d7 fb16 	bl	80003b0 <__aeabi_ldivmod>
 8028d84:	2a00      	cmp	r2, #0
 8028d86:	bfbc      	itt	lt
 8028d88:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8028d8c:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8028d90:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8028d94:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8028d98:	fbb2 f3f1 	udiv	r3, r2, r1
 8028d9c:	fb01 2213 	mls	r2, r1, r3, r2
 8028da0:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8028da4:	bfac      	ite	ge
 8028da6:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 8028daa:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 8028dae:	60a3      	str	r3, [r4, #8]
 8028db0:	fbb2 f3f1 	udiv	r3, r2, r1
 8028db4:	fb01 2213 	mls	r2, r1, r3, r2
 8028db8:	6063      	str	r3, [r4, #4]
 8028dba:	6022      	str	r2, [r4, #0]
 8028dbc:	1cc3      	adds	r3, r0, #3
 8028dbe:	2207      	movs	r2, #7
 8028dc0:	fb93 f2f2 	sdiv	r2, r3, r2
 8028dc4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8028dc8:	1a9b      	subs	r3, r3, r2
 8028dca:	bf48      	it	mi
 8028dcc:	3307      	addmi	r3, #7
 8028dce:	2800      	cmp	r0, #0
 8028dd0:	61a3      	str	r3, [r4, #24]
 8028dd2:	bfb8      	it	lt
 8028dd4:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8028dd8:	4936      	ldr	r1, [pc, #216]	; (8028eb4 <gmtime_r+0x154>)
 8028dda:	bfae      	itee	ge
 8028ddc:	fb90 f1f1 	sdivge	r1, r0, r1
 8028de0:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8028de4:	fb93 f1f1 	sdivlt	r1, r3, r1
 8028de8:	4b33      	ldr	r3, [pc, #204]	; (8028eb8 <gmtime_r+0x158>)
 8028dea:	fb03 0001 	mla	r0, r3, r1, r0
 8028dee:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8028df2:	fbb0 f2f2 	udiv	r2, r0, r2
 8028df6:	4402      	add	r2, r0
 8028df8:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 8028dfc:	fbb0 f3fc 	udiv	r3, r0, ip
 8028e00:	1ad2      	subs	r2, r2, r3
 8028e02:	f240 176d 	movw	r7, #365	; 0x16d
 8028e06:	4b2d      	ldr	r3, [pc, #180]	; (8028ebc <gmtime_r+0x15c>)
 8028e08:	fbb0 f3f3 	udiv	r3, r0, r3
 8028e0c:	2664      	movs	r6, #100	; 0x64
 8028e0e:	1ad3      	subs	r3, r2, r3
 8028e10:	fbb3 f5f7 	udiv	r5, r3, r7
 8028e14:	fbb3 f3fc 	udiv	r3, r3, ip
 8028e18:	fbb5 f2f6 	udiv	r2, r5, r6
 8028e1c:	1ad3      	subs	r3, r2, r3
 8028e1e:	4403      	add	r3, r0
 8028e20:	fb07 3315 	mls	r3, r7, r5, r3
 8028e24:	2099      	movs	r0, #153	; 0x99
 8028e26:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8028e2a:	f10c 0c02 	add.w	ip, ip, #2
 8028e2e:	f103 0e01 	add.w	lr, r3, #1
 8028e32:	fbbc f7f0 	udiv	r7, ip, r0
 8028e36:	4378      	muls	r0, r7
 8028e38:	3002      	adds	r0, #2
 8028e3a:	f04f 0805 	mov.w	r8, #5
 8028e3e:	fbb0 f0f8 	udiv	r0, r0, r8
 8028e42:	ebae 0000 	sub.w	r0, lr, r0
 8028e46:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 8028e4a:	45f4      	cmp	ip, lr
 8028e4c:	bf94      	ite	ls
 8028e4e:	f04f 0c02 	movls.w	ip, #2
 8028e52:	f06f 0c09 	mvnhi.w	ip, #9
 8028e56:	4467      	add	r7, ip
 8028e58:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8028e5c:	fb0c 5101 	mla	r1, ip, r1, r5
 8028e60:	2f01      	cmp	r7, #1
 8028e62:	bf98      	it	ls
 8028e64:	3101      	addls	r1, #1
 8028e66:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8028e6a:	d30c      	bcc.n	8028e86 <gmtime_r+0x126>
 8028e6c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8028e70:	61e3      	str	r3, [r4, #28]
 8028e72:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 8028e76:	2300      	movs	r3, #0
 8028e78:	60e0      	str	r0, [r4, #12]
 8028e7a:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8028e7e:	6223      	str	r3, [r4, #32]
 8028e80:	4620      	mov	r0, r4
 8028e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028e86:	f015 0f03 	tst.w	r5, #3
 8028e8a:	d102      	bne.n	8028e92 <gmtime_r+0x132>
 8028e8c:	fb06 5212 	mls	r2, r6, r2, r5
 8028e90:	b95a      	cbnz	r2, 8028eaa <gmtime_r+0x14a>
 8028e92:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8028e96:	fbb5 f2f6 	udiv	r2, r5, r6
 8028e9a:	fb06 5212 	mls	r2, r6, r2, r5
 8028e9e:	fab2 f282 	clz	r2, r2
 8028ea2:	0952      	lsrs	r2, r2, #5
 8028ea4:	333b      	adds	r3, #59	; 0x3b
 8028ea6:	4413      	add	r3, r2
 8028ea8:	e7e2      	b.n	8028e70 <gmtime_r+0x110>
 8028eaa:	2201      	movs	r2, #1
 8028eac:	e7fa      	b.n	8028ea4 <gmtime_r+0x144>
 8028eae:	bf00      	nop
 8028eb0:	00015180 	.word	0x00015180
 8028eb4:	00023ab1 	.word	0x00023ab1
 8028eb8:	fffdc54f 	.word	0xfffdc54f
 8028ebc:	00023ab0 	.word	0x00023ab0

08028ec0 <_localeconv_r>:
 8028ec0:	4800      	ldr	r0, [pc, #0]	; (8028ec4 <_localeconv_r+0x4>)
 8028ec2:	4770      	bx	lr
 8028ec4:	24000270 	.word	0x24000270

08028ec8 <_lseek_r>:
 8028ec8:	b538      	push	{r3, r4, r5, lr}
 8028eca:	4d07      	ldr	r5, [pc, #28]	; (8028ee8 <_lseek_r+0x20>)
 8028ecc:	4604      	mov	r4, r0
 8028ece:	4608      	mov	r0, r1
 8028ed0:	4611      	mov	r1, r2
 8028ed2:	2200      	movs	r2, #0
 8028ed4:	602a      	str	r2, [r5, #0]
 8028ed6:	461a      	mov	r2, r3
 8028ed8:	f7d8 f890 	bl	8000ffc <_lseek>
 8028edc:	1c43      	adds	r3, r0, #1
 8028ede:	d102      	bne.n	8028ee6 <_lseek_r+0x1e>
 8028ee0:	682b      	ldr	r3, [r5, #0]
 8028ee2:	b103      	cbz	r3, 8028ee6 <_lseek_r+0x1e>
 8028ee4:	6023      	str	r3, [r4, #0]
 8028ee6:	bd38      	pop	{r3, r4, r5, pc}
 8028ee8:	240086b8 	.word	0x240086b8

08028eec <__swhatbuf_r>:
 8028eec:	b570      	push	{r4, r5, r6, lr}
 8028eee:	460e      	mov	r6, r1
 8028ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028ef4:	2900      	cmp	r1, #0
 8028ef6:	b096      	sub	sp, #88	; 0x58
 8028ef8:	4614      	mov	r4, r2
 8028efa:	461d      	mov	r5, r3
 8028efc:	da07      	bge.n	8028f0e <__swhatbuf_r+0x22>
 8028efe:	2300      	movs	r3, #0
 8028f00:	602b      	str	r3, [r5, #0]
 8028f02:	89b3      	ldrh	r3, [r6, #12]
 8028f04:	061a      	lsls	r2, r3, #24
 8028f06:	d410      	bmi.n	8028f2a <__swhatbuf_r+0x3e>
 8028f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8028f0c:	e00e      	b.n	8028f2c <__swhatbuf_r+0x40>
 8028f0e:	466a      	mov	r2, sp
 8028f10:	f001 f99c 	bl	802a24c <_fstat_r>
 8028f14:	2800      	cmp	r0, #0
 8028f16:	dbf2      	blt.n	8028efe <__swhatbuf_r+0x12>
 8028f18:	9a01      	ldr	r2, [sp, #4]
 8028f1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8028f1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8028f22:	425a      	negs	r2, r3
 8028f24:	415a      	adcs	r2, r3
 8028f26:	602a      	str	r2, [r5, #0]
 8028f28:	e7ee      	b.n	8028f08 <__swhatbuf_r+0x1c>
 8028f2a:	2340      	movs	r3, #64	; 0x40
 8028f2c:	2000      	movs	r0, #0
 8028f2e:	6023      	str	r3, [r4, #0]
 8028f30:	b016      	add	sp, #88	; 0x58
 8028f32:	bd70      	pop	{r4, r5, r6, pc}

08028f34 <__smakebuf_r>:
 8028f34:	898b      	ldrh	r3, [r1, #12]
 8028f36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8028f38:	079d      	lsls	r5, r3, #30
 8028f3a:	4606      	mov	r6, r0
 8028f3c:	460c      	mov	r4, r1
 8028f3e:	d507      	bpl.n	8028f50 <__smakebuf_r+0x1c>
 8028f40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8028f44:	6023      	str	r3, [r4, #0]
 8028f46:	6123      	str	r3, [r4, #16]
 8028f48:	2301      	movs	r3, #1
 8028f4a:	6163      	str	r3, [r4, #20]
 8028f4c:	b002      	add	sp, #8
 8028f4e:	bd70      	pop	{r4, r5, r6, pc}
 8028f50:	ab01      	add	r3, sp, #4
 8028f52:	466a      	mov	r2, sp
 8028f54:	f7ff ffca 	bl	8028eec <__swhatbuf_r>
 8028f58:	9900      	ldr	r1, [sp, #0]
 8028f5a:	4605      	mov	r5, r0
 8028f5c:	4630      	mov	r0, r6
 8028f5e:	f7fd f9c3 	bl	80262e8 <_malloc_r>
 8028f62:	b948      	cbnz	r0, 8028f78 <__smakebuf_r+0x44>
 8028f64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028f68:	059a      	lsls	r2, r3, #22
 8028f6a:	d4ef      	bmi.n	8028f4c <__smakebuf_r+0x18>
 8028f6c:	f023 0303 	bic.w	r3, r3, #3
 8028f70:	f043 0302 	orr.w	r3, r3, #2
 8028f74:	81a3      	strh	r3, [r4, #12]
 8028f76:	e7e3      	b.n	8028f40 <__smakebuf_r+0xc>
 8028f78:	4b0d      	ldr	r3, [pc, #52]	; (8028fb0 <__smakebuf_r+0x7c>)
 8028f7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8028f7c:	89a3      	ldrh	r3, [r4, #12]
 8028f7e:	6020      	str	r0, [r4, #0]
 8028f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8028f84:	81a3      	strh	r3, [r4, #12]
 8028f86:	9b00      	ldr	r3, [sp, #0]
 8028f88:	6163      	str	r3, [r4, #20]
 8028f8a:	9b01      	ldr	r3, [sp, #4]
 8028f8c:	6120      	str	r0, [r4, #16]
 8028f8e:	b15b      	cbz	r3, 8028fa8 <__smakebuf_r+0x74>
 8028f90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8028f94:	4630      	mov	r0, r6
 8028f96:	f001 f96b 	bl	802a270 <_isatty_r>
 8028f9a:	b128      	cbz	r0, 8028fa8 <__smakebuf_r+0x74>
 8028f9c:	89a3      	ldrh	r3, [r4, #12]
 8028f9e:	f023 0303 	bic.w	r3, r3, #3
 8028fa2:	f043 0301 	orr.w	r3, r3, #1
 8028fa6:	81a3      	strh	r3, [r4, #12]
 8028fa8:	89a0      	ldrh	r0, [r4, #12]
 8028faa:	4305      	orrs	r5, r0
 8028fac:	81a5      	strh	r5, [r4, #12]
 8028fae:	e7cd      	b.n	8028f4c <__smakebuf_r+0x18>
 8028fb0:	08025c6d 	.word	0x08025c6d

08028fb4 <__malloc_lock>:
 8028fb4:	4801      	ldr	r0, [pc, #4]	; (8028fbc <__malloc_lock+0x8>)
 8028fb6:	f7fd b8e5 	b.w	8026184 <__retarget_lock_acquire_recursive>
 8028fba:	bf00      	nop
 8028fbc:	2400a4bc 	.word	0x2400a4bc

08028fc0 <__malloc_unlock>:
 8028fc0:	4801      	ldr	r0, [pc, #4]	; (8028fc8 <__malloc_unlock+0x8>)
 8028fc2:	f7fd b8e1 	b.w	8026188 <__retarget_lock_release_recursive>
 8028fc6:	bf00      	nop
 8028fc8:	2400a4bc 	.word	0x2400a4bc

08028fcc <_Balloc>:
 8028fcc:	b570      	push	{r4, r5, r6, lr}
 8028fce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8028fd0:	4604      	mov	r4, r0
 8028fd2:	460d      	mov	r5, r1
 8028fd4:	b976      	cbnz	r6, 8028ff4 <_Balloc+0x28>
 8028fd6:	2010      	movs	r0, #16
 8028fd8:	f7fd f8d8 	bl	802618c <malloc>
 8028fdc:	4602      	mov	r2, r0
 8028fde:	6260      	str	r0, [r4, #36]	; 0x24
 8028fe0:	b920      	cbnz	r0, 8028fec <_Balloc+0x20>
 8028fe2:	4b18      	ldr	r3, [pc, #96]	; (8029044 <_Balloc+0x78>)
 8028fe4:	4818      	ldr	r0, [pc, #96]	; (8029048 <_Balloc+0x7c>)
 8028fe6:	2166      	movs	r1, #102	; 0x66
 8028fe8:	f7fe ff6e 	bl	8027ec8 <__assert_func>
 8028fec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8028ff0:	6006      	str	r6, [r0, #0]
 8028ff2:	60c6      	str	r6, [r0, #12]
 8028ff4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8028ff6:	68f3      	ldr	r3, [r6, #12]
 8028ff8:	b183      	cbz	r3, 802901c <_Balloc+0x50>
 8028ffa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8028ffc:	68db      	ldr	r3, [r3, #12]
 8028ffe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8029002:	b9b8      	cbnz	r0, 8029034 <_Balloc+0x68>
 8029004:	2101      	movs	r1, #1
 8029006:	fa01 f605 	lsl.w	r6, r1, r5
 802900a:	1d72      	adds	r2, r6, #5
 802900c:	0092      	lsls	r2, r2, #2
 802900e:	4620      	mov	r0, r4
 8029010:	f7fd f90a 	bl	8026228 <_calloc_r>
 8029014:	b160      	cbz	r0, 8029030 <_Balloc+0x64>
 8029016:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802901a:	e00e      	b.n	802903a <_Balloc+0x6e>
 802901c:	2221      	movs	r2, #33	; 0x21
 802901e:	2104      	movs	r1, #4
 8029020:	4620      	mov	r0, r4
 8029022:	f7fd f901 	bl	8026228 <_calloc_r>
 8029026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8029028:	60f0      	str	r0, [r6, #12]
 802902a:	68db      	ldr	r3, [r3, #12]
 802902c:	2b00      	cmp	r3, #0
 802902e:	d1e4      	bne.n	8028ffa <_Balloc+0x2e>
 8029030:	2000      	movs	r0, #0
 8029032:	bd70      	pop	{r4, r5, r6, pc}
 8029034:	6802      	ldr	r2, [r0, #0]
 8029036:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802903a:	2300      	movs	r3, #0
 802903c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8029040:	e7f7      	b.n	8029032 <_Balloc+0x66>
 8029042:	bf00      	nop
 8029044:	0802ede8 	.word	0x0802ede8
 8029048:	0802f74e 	.word	0x0802f74e

0802904c <_Bfree>:
 802904c:	b570      	push	{r4, r5, r6, lr}
 802904e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8029050:	4605      	mov	r5, r0
 8029052:	460c      	mov	r4, r1
 8029054:	b976      	cbnz	r6, 8029074 <_Bfree+0x28>
 8029056:	2010      	movs	r0, #16
 8029058:	f7fd f898 	bl	802618c <malloc>
 802905c:	4602      	mov	r2, r0
 802905e:	6268      	str	r0, [r5, #36]	; 0x24
 8029060:	b920      	cbnz	r0, 802906c <_Bfree+0x20>
 8029062:	4b09      	ldr	r3, [pc, #36]	; (8029088 <_Bfree+0x3c>)
 8029064:	4809      	ldr	r0, [pc, #36]	; (802908c <_Bfree+0x40>)
 8029066:	218a      	movs	r1, #138	; 0x8a
 8029068:	f7fe ff2e 	bl	8027ec8 <__assert_func>
 802906c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8029070:	6006      	str	r6, [r0, #0]
 8029072:	60c6      	str	r6, [r0, #12]
 8029074:	b13c      	cbz	r4, 8029086 <_Bfree+0x3a>
 8029076:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8029078:	6862      	ldr	r2, [r4, #4]
 802907a:	68db      	ldr	r3, [r3, #12]
 802907c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8029080:	6021      	str	r1, [r4, #0]
 8029082:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8029086:	bd70      	pop	{r4, r5, r6, pc}
 8029088:	0802ede8 	.word	0x0802ede8
 802908c:	0802f74e 	.word	0x0802f74e

08029090 <__multadd>:
 8029090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029094:	690e      	ldr	r6, [r1, #16]
 8029096:	4607      	mov	r7, r0
 8029098:	4698      	mov	r8, r3
 802909a:	460c      	mov	r4, r1
 802909c:	f101 0014 	add.w	r0, r1, #20
 80290a0:	2300      	movs	r3, #0
 80290a2:	6805      	ldr	r5, [r0, #0]
 80290a4:	b2a9      	uxth	r1, r5
 80290a6:	fb02 8101 	mla	r1, r2, r1, r8
 80290aa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80290ae:	0c2d      	lsrs	r5, r5, #16
 80290b0:	fb02 c505 	mla	r5, r2, r5, ip
 80290b4:	b289      	uxth	r1, r1
 80290b6:	3301      	adds	r3, #1
 80290b8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80290bc:	429e      	cmp	r6, r3
 80290be:	f840 1b04 	str.w	r1, [r0], #4
 80290c2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80290c6:	dcec      	bgt.n	80290a2 <__multadd+0x12>
 80290c8:	f1b8 0f00 	cmp.w	r8, #0
 80290cc:	d022      	beq.n	8029114 <__multadd+0x84>
 80290ce:	68a3      	ldr	r3, [r4, #8]
 80290d0:	42b3      	cmp	r3, r6
 80290d2:	dc19      	bgt.n	8029108 <__multadd+0x78>
 80290d4:	6861      	ldr	r1, [r4, #4]
 80290d6:	4638      	mov	r0, r7
 80290d8:	3101      	adds	r1, #1
 80290da:	f7ff ff77 	bl	8028fcc <_Balloc>
 80290de:	4605      	mov	r5, r0
 80290e0:	b928      	cbnz	r0, 80290ee <__multadd+0x5e>
 80290e2:	4602      	mov	r2, r0
 80290e4:	4b0d      	ldr	r3, [pc, #52]	; (802911c <__multadd+0x8c>)
 80290e6:	480e      	ldr	r0, [pc, #56]	; (8029120 <__multadd+0x90>)
 80290e8:	21b5      	movs	r1, #181	; 0xb5
 80290ea:	f7fe feed 	bl	8027ec8 <__assert_func>
 80290ee:	6922      	ldr	r2, [r4, #16]
 80290f0:	3202      	adds	r2, #2
 80290f2:	f104 010c 	add.w	r1, r4, #12
 80290f6:	0092      	lsls	r2, r2, #2
 80290f8:	300c      	adds	r0, #12
 80290fa:	f7fd f865 	bl	80261c8 <memcpy>
 80290fe:	4621      	mov	r1, r4
 8029100:	4638      	mov	r0, r7
 8029102:	f7ff ffa3 	bl	802904c <_Bfree>
 8029106:	462c      	mov	r4, r5
 8029108:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 802910c:	3601      	adds	r6, #1
 802910e:	f8c3 8014 	str.w	r8, [r3, #20]
 8029112:	6126      	str	r6, [r4, #16]
 8029114:	4620      	mov	r0, r4
 8029116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802911a:	bf00      	nop
 802911c:	0802f73d 	.word	0x0802f73d
 8029120:	0802f74e 	.word	0x0802f74e

08029124 <__hi0bits>:
 8029124:	0c03      	lsrs	r3, r0, #16
 8029126:	041b      	lsls	r3, r3, #16
 8029128:	b9d3      	cbnz	r3, 8029160 <__hi0bits+0x3c>
 802912a:	0400      	lsls	r0, r0, #16
 802912c:	2310      	movs	r3, #16
 802912e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8029132:	bf04      	itt	eq
 8029134:	0200      	lsleq	r0, r0, #8
 8029136:	3308      	addeq	r3, #8
 8029138:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802913c:	bf04      	itt	eq
 802913e:	0100      	lsleq	r0, r0, #4
 8029140:	3304      	addeq	r3, #4
 8029142:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8029146:	bf04      	itt	eq
 8029148:	0080      	lsleq	r0, r0, #2
 802914a:	3302      	addeq	r3, #2
 802914c:	2800      	cmp	r0, #0
 802914e:	db05      	blt.n	802915c <__hi0bits+0x38>
 8029150:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8029154:	f103 0301 	add.w	r3, r3, #1
 8029158:	bf08      	it	eq
 802915a:	2320      	moveq	r3, #32
 802915c:	4618      	mov	r0, r3
 802915e:	4770      	bx	lr
 8029160:	2300      	movs	r3, #0
 8029162:	e7e4      	b.n	802912e <__hi0bits+0xa>

08029164 <__lo0bits>:
 8029164:	6803      	ldr	r3, [r0, #0]
 8029166:	f013 0207 	ands.w	r2, r3, #7
 802916a:	4601      	mov	r1, r0
 802916c:	d00b      	beq.n	8029186 <__lo0bits+0x22>
 802916e:	07da      	lsls	r2, r3, #31
 8029170:	d424      	bmi.n	80291bc <__lo0bits+0x58>
 8029172:	0798      	lsls	r0, r3, #30
 8029174:	bf49      	itett	mi
 8029176:	085b      	lsrmi	r3, r3, #1
 8029178:	089b      	lsrpl	r3, r3, #2
 802917a:	2001      	movmi	r0, #1
 802917c:	600b      	strmi	r3, [r1, #0]
 802917e:	bf5c      	itt	pl
 8029180:	600b      	strpl	r3, [r1, #0]
 8029182:	2002      	movpl	r0, #2
 8029184:	4770      	bx	lr
 8029186:	b298      	uxth	r0, r3
 8029188:	b9b0      	cbnz	r0, 80291b8 <__lo0bits+0x54>
 802918a:	0c1b      	lsrs	r3, r3, #16
 802918c:	2010      	movs	r0, #16
 802918e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8029192:	bf04      	itt	eq
 8029194:	0a1b      	lsreq	r3, r3, #8
 8029196:	3008      	addeq	r0, #8
 8029198:	071a      	lsls	r2, r3, #28
 802919a:	bf04      	itt	eq
 802919c:	091b      	lsreq	r3, r3, #4
 802919e:	3004      	addeq	r0, #4
 80291a0:	079a      	lsls	r2, r3, #30
 80291a2:	bf04      	itt	eq
 80291a4:	089b      	lsreq	r3, r3, #2
 80291a6:	3002      	addeq	r0, #2
 80291a8:	07da      	lsls	r2, r3, #31
 80291aa:	d403      	bmi.n	80291b4 <__lo0bits+0x50>
 80291ac:	085b      	lsrs	r3, r3, #1
 80291ae:	f100 0001 	add.w	r0, r0, #1
 80291b2:	d005      	beq.n	80291c0 <__lo0bits+0x5c>
 80291b4:	600b      	str	r3, [r1, #0]
 80291b6:	4770      	bx	lr
 80291b8:	4610      	mov	r0, r2
 80291ba:	e7e8      	b.n	802918e <__lo0bits+0x2a>
 80291bc:	2000      	movs	r0, #0
 80291be:	4770      	bx	lr
 80291c0:	2020      	movs	r0, #32
 80291c2:	4770      	bx	lr

080291c4 <__i2b>:
 80291c4:	b510      	push	{r4, lr}
 80291c6:	460c      	mov	r4, r1
 80291c8:	2101      	movs	r1, #1
 80291ca:	f7ff feff 	bl	8028fcc <_Balloc>
 80291ce:	4602      	mov	r2, r0
 80291d0:	b928      	cbnz	r0, 80291de <__i2b+0x1a>
 80291d2:	4b05      	ldr	r3, [pc, #20]	; (80291e8 <__i2b+0x24>)
 80291d4:	4805      	ldr	r0, [pc, #20]	; (80291ec <__i2b+0x28>)
 80291d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80291da:	f7fe fe75 	bl	8027ec8 <__assert_func>
 80291de:	2301      	movs	r3, #1
 80291e0:	6144      	str	r4, [r0, #20]
 80291e2:	6103      	str	r3, [r0, #16]
 80291e4:	bd10      	pop	{r4, pc}
 80291e6:	bf00      	nop
 80291e8:	0802f73d 	.word	0x0802f73d
 80291ec:	0802f74e 	.word	0x0802f74e

080291f0 <__multiply>:
 80291f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80291f4:	4614      	mov	r4, r2
 80291f6:	690a      	ldr	r2, [r1, #16]
 80291f8:	6923      	ldr	r3, [r4, #16]
 80291fa:	429a      	cmp	r2, r3
 80291fc:	bfb8      	it	lt
 80291fe:	460b      	movlt	r3, r1
 8029200:	460d      	mov	r5, r1
 8029202:	bfbc      	itt	lt
 8029204:	4625      	movlt	r5, r4
 8029206:	461c      	movlt	r4, r3
 8029208:	f8d5 a010 	ldr.w	sl, [r5, #16]
 802920c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8029210:	68ab      	ldr	r3, [r5, #8]
 8029212:	6869      	ldr	r1, [r5, #4]
 8029214:	eb0a 0709 	add.w	r7, sl, r9
 8029218:	42bb      	cmp	r3, r7
 802921a:	b085      	sub	sp, #20
 802921c:	bfb8      	it	lt
 802921e:	3101      	addlt	r1, #1
 8029220:	f7ff fed4 	bl	8028fcc <_Balloc>
 8029224:	b930      	cbnz	r0, 8029234 <__multiply+0x44>
 8029226:	4602      	mov	r2, r0
 8029228:	4b42      	ldr	r3, [pc, #264]	; (8029334 <__multiply+0x144>)
 802922a:	4843      	ldr	r0, [pc, #268]	; (8029338 <__multiply+0x148>)
 802922c:	f240 115d 	movw	r1, #349	; 0x15d
 8029230:	f7fe fe4a 	bl	8027ec8 <__assert_func>
 8029234:	f100 0614 	add.w	r6, r0, #20
 8029238:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 802923c:	4633      	mov	r3, r6
 802923e:	2200      	movs	r2, #0
 8029240:	4543      	cmp	r3, r8
 8029242:	d31e      	bcc.n	8029282 <__multiply+0x92>
 8029244:	f105 0c14 	add.w	ip, r5, #20
 8029248:	f104 0314 	add.w	r3, r4, #20
 802924c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8029250:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8029254:	9202      	str	r2, [sp, #8]
 8029256:	ebac 0205 	sub.w	r2, ip, r5
 802925a:	3a15      	subs	r2, #21
 802925c:	f022 0203 	bic.w	r2, r2, #3
 8029260:	3204      	adds	r2, #4
 8029262:	f105 0115 	add.w	r1, r5, #21
 8029266:	458c      	cmp	ip, r1
 8029268:	bf38      	it	cc
 802926a:	2204      	movcc	r2, #4
 802926c:	9201      	str	r2, [sp, #4]
 802926e:	9a02      	ldr	r2, [sp, #8]
 8029270:	9303      	str	r3, [sp, #12]
 8029272:	429a      	cmp	r2, r3
 8029274:	d808      	bhi.n	8029288 <__multiply+0x98>
 8029276:	2f00      	cmp	r7, #0
 8029278:	dc55      	bgt.n	8029326 <__multiply+0x136>
 802927a:	6107      	str	r7, [r0, #16]
 802927c:	b005      	add	sp, #20
 802927e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029282:	f843 2b04 	str.w	r2, [r3], #4
 8029286:	e7db      	b.n	8029240 <__multiply+0x50>
 8029288:	f8b3 a000 	ldrh.w	sl, [r3]
 802928c:	f1ba 0f00 	cmp.w	sl, #0
 8029290:	d020      	beq.n	80292d4 <__multiply+0xe4>
 8029292:	f105 0e14 	add.w	lr, r5, #20
 8029296:	46b1      	mov	r9, r6
 8029298:	2200      	movs	r2, #0
 802929a:	f85e 4b04 	ldr.w	r4, [lr], #4
 802929e:	f8d9 b000 	ldr.w	fp, [r9]
 80292a2:	b2a1      	uxth	r1, r4
 80292a4:	fa1f fb8b 	uxth.w	fp, fp
 80292a8:	fb0a b101 	mla	r1, sl, r1, fp
 80292ac:	4411      	add	r1, r2
 80292ae:	f8d9 2000 	ldr.w	r2, [r9]
 80292b2:	0c24      	lsrs	r4, r4, #16
 80292b4:	0c12      	lsrs	r2, r2, #16
 80292b6:	fb0a 2404 	mla	r4, sl, r4, r2
 80292ba:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80292be:	b289      	uxth	r1, r1
 80292c0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80292c4:	45f4      	cmp	ip, lr
 80292c6:	f849 1b04 	str.w	r1, [r9], #4
 80292ca:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80292ce:	d8e4      	bhi.n	802929a <__multiply+0xaa>
 80292d0:	9901      	ldr	r1, [sp, #4]
 80292d2:	5072      	str	r2, [r6, r1]
 80292d4:	9a03      	ldr	r2, [sp, #12]
 80292d6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80292da:	3304      	adds	r3, #4
 80292dc:	f1b9 0f00 	cmp.w	r9, #0
 80292e0:	d01f      	beq.n	8029322 <__multiply+0x132>
 80292e2:	6834      	ldr	r4, [r6, #0]
 80292e4:	f105 0114 	add.w	r1, r5, #20
 80292e8:	46b6      	mov	lr, r6
 80292ea:	f04f 0a00 	mov.w	sl, #0
 80292ee:	880a      	ldrh	r2, [r1, #0]
 80292f0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80292f4:	fb09 b202 	mla	r2, r9, r2, fp
 80292f8:	4492      	add	sl, r2
 80292fa:	b2a4      	uxth	r4, r4
 80292fc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8029300:	f84e 4b04 	str.w	r4, [lr], #4
 8029304:	f851 4b04 	ldr.w	r4, [r1], #4
 8029308:	f8be 2000 	ldrh.w	r2, [lr]
 802930c:	0c24      	lsrs	r4, r4, #16
 802930e:	fb09 2404 	mla	r4, r9, r4, r2
 8029312:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8029316:	458c      	cmp	ip, r1
 8029318:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 802931c:	d8e7      	bhi.n	80292ee <__multiply+0xfe>
 802931e:	9a01      	ldr	r2, [sp, #4]
 8029320:	50b4      	str	r4, [r6, r2]
 8029322:	3604      	adds	r6, #4
 8029324:	e7a3      	b.n	802926e <__multiply+0x7e>
 8029326:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802932a:	2b00      	cmp	r3, #0
 802932c:	d1a5      	bne.n	802927a <__multiply+0x8a>
 802932e:	3f01      	subs	r7, #1
 8029330:	e7a1      	b.n	8029276 <__multiply+0x86>
 8029332:	bf00      	nop
 8029334:	0802f73d 	.word	0x0802f73d
 8029338:	0802f74e 	.word	0x0802f74e

0802933c <__pow5mult>:
 802933c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029340:	4615      	mov	r5, r2
 8029342:	f012 0203 	ands.w	r2, r2, #3
 8029346:	4606      	mov	r6, r0
 8029348:	460f      	mov	r7, r1
 802934a:	d007      	beq.n	802935c <__pow5mult+0x20>
 802934c:	4c25      	ldr	r4, [pc, #148]	; (80293e4 <__pow5mult+0xa8>)
 802934e:	3a01      	subs	r2, #1
 8029350:	2300      	movs	r3, #0
 8029352:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8029356:	f7ff fe9b 	bl	8029090 <__multadd>
 802935a:	4607      	mov	r7, r0
 802935c:	10ad      	asrs	r5, r5, #2
 802935e:	d03d      	beq.n	80293dc <__pow5mult+0xa0>
 8029360:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8029362:	b97c      	cbnz	r4, 8029384 <__pow5mult+0x48>
 8029364:	2010      	movs	r0, #16
 8029366:	f7fc ff11 	bl	802618c <malloc>
 802936a:	4602      	mov	r2, r0
 802936c:	6270      	str	r0, [r6, #36]	; 0x24
 802936e:	b928      	cbnz	r0, 802937c <__pow5mult+0x40>
 8029370:	4b1d      	ldr	r3, [pc, #116]	; (80293e8 <__pow5mult+0xac>)
 8029372:	481e      	ldr	r0, [pc, #120]	; (80293ec <__pow5mult+0xb0>)
 8029374:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8029378:	f7fe fda6 	bl	8027ec8 <__assert_func>
 802937c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8029380:	6004      	str	r4, [r0, #0]
 8029382:	60c4      	str	r4, [r0, #12]
 8029384:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8029388:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802938c:	b94c      	cbnz	r4, 80293a2 <__pow5mult+0x66>
 802938e:	f240 2171 	movw	r1, #625	; 0x271
 8029392:	4630      	mov	r0, r6
 8029394:	f7ff ff16 	bl	80291c4 <__i2b>
 8029398:	2300      	movs	r3, #0
 802939a:	f8c8 0008 	str.w	r0, [r8, #8]
 802939e:	4604      	mov	r4, r0
 80293a0:	6003      	str	r3, [r0, #0]
 80293a2:	f04f 0900 	mov.w	r9, #0
 80293a6:	07eb      	lsls	r3, r5, #31
 80293a8:	d50a      	bpl.n	80293c0 <__pow5mult+0x84>
 80293aa:	4639      	mov	r1, r7
 80293ac:	4622      	mov	r2, r4
 80293ae:	4630      	mov	r0, r6
 80293b0:	f7ff ff1e 	bl	80291f0 <__multiply>
 80293b4:	4639      	mov	r1, r7
 80293b6:	4680      	mov	r8, r0
 80293b8:	4630      	mov	r0, r6
 80293ba:	f7ff fe47 	bl	802904c <_Bfree>
 80293be:	4647      	mov	r7, r8
 80293c0:	106d      	asrs	r5, r5, #1
 80293c2:	d00b      	beq.n	80293dc <__pow5mult+0xa0>
 80293c4:	6820      	ldr	r0, [r4, #0]
 80293c6:	b938      	cbnz	r0, 80293d8 <__pow5mult+0x9c>
 80293c8:	4622      	mov	r2, r4
 80293ca:	4621      	mov	r1, r4
 80293cc:	4630      	mov	r0, r6
 80293ce:	f7ff ff0f 	bl	80291f0 <__multiply>
 80293d2:	6020      	str	r0, [r4, #0]
 80293d4:	f8c0 9000 	str.w	r9, [r0]
 80293d8:	4604      	mov	r4, r0
 80293da:	e7e4      	b.n	80293a6 <__pow5mult+0x6a>
 80293dc:	4638      	mov	r0, r7
 80293de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80293e2:	bf00      	nop
 80293e4:	0802f8a0 	.word	0x0802f8a0
 80293e8:	0802ede8 	.word	0x0802ede8
 80293ec:	0802f74e 	.word	0x0802f74e

080293f0 <__lshift>:
 80293f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80293f4:	460c      	mov	r4, r1
 80293f6:	6849      	ldr	r1, [r1, #4]
 80293f8:	6923      	ldr	r3, [r4, #16]
 80293fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80293fe:	68a3      	ldr	r3, [r4, #8]
 8029400:	4607      	mov	r7, r0
 8029402:	4691      	mov	r9, r2
 8029404:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8029408:	f108 0601 	add.w	r6, r8, #1
 802940c:	42b3      	cmp	r3, r6
 802940e:	db0b      	blt.n	8029428 <__lshift+0x38>
 8029410:	4638      	mov	r0, r7
 8029412:	f7ff fddb 	bl	8028fcc <_Balloc>
 8029416:	4605      	mov	r5, r0
 8029418:	b948      	cbnz	r0, 802942e <__lshift+0x3e>
 802941a:	4602      	mov	r2, r0
 802941c:	4b28      	ldr	r3, [pc, #160]	; (80294c0 <__lshift+0xd0>)
 802941e:	4829      	ldr	r0, [pc, #164]	; (80294c4 <__lshift+0xd4>)
 8029420:	f240 11d9 	movw	r1, #473	; 0x1d9
 8029424:	f7fe fd50 	bl	8027ec8 <__assert_func>
 8029428:	3101      	adds	r1, #1
 802942a:	005b      	lsls	r3, r3, #1
 802942c:	e7ee      	b.n	802940c <__lshift+0x1c>
 802942e:	2300      	movs	r3, #0
 8029430:	f100 0114 	add.w	r1, r0, #20
 8029434:	f100 0210 	add.w	r2, r0, #16
 8029438:	4618      	mov	r0, r3
 802943a:	4553      	cmp	r3, sl
 802943c:	db33      	blt.n	80294a6 <__lshift+0xb6>
 802943e:	6920      	ldr	r0, [r4, #16]
 8029440:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8029444:	f104 0314 	add.w	r3, r4, #20
 8029448:	f019 091f 	ands.w	r9, r9, #31
 802944c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8029450:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8029454:	d02b      	beq.n	80294ae <__lshift+0xbe>
 8029456:	f1c9 0e20 	rsb	lr, r9, #32
 802945a:	468a      	mov	sl, r1
 802945c:	2200      	movs	r2, #0
 802945e:	6818      	ldr	r0, [r3, #0]
 8029460:	fa00 f009 	lsl.w	r0, r0, r9
 8029464:	4302      	orrs	r2, r0
 8029466:	f84a 2b04 	str.w	r2, [sl], #4
 802946a:	f853 2b04 	ldr.w	r2, [r3], #4
 802946e:	459c      	cmp	ip, r3
 8029470:	fa22 f20e 	lsr.w	r2, r2, lr
 8029474:	d8f3      	bhi.n	802945e <__lshift+0x6e>
 8029476:	ebac 0304 	sub.w	r3, ip, r4
 802947a:	3b15      	subs	r3, #21
 802947c:	f023 0303 	bic.w	r3, r3, #3
 8029480:	3304      	adds	r3, #4
 8029482:	f104 0015 	add.w	r0, r4, #21
 8029486:	4584      	cmp	ip, r0
 8029488:	bf38      	it	cc
 802948a:	2304      	movcc	r3, #4
 802948c:	50ca      	str	r2, [r1, r3]
 802948e:	b10a      	cbz	r2, 8029494 <__lshift+0xa4>
 8029490:	f108 0602 	add.w	r6, r8, #2
 8029494:	3e01      	subs	r6, #1
 8029496:	4638      	mov	r0, r7
 8029498:	612e      	str	r6, [r5, #16]
 802949a:	4621      	mov	r1, r4
 802949c:	f7ff fdd6 	bl	802904c <_Bfree>
 80294a0:	4628      	mov	r0, r5
 80294a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80294a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80294aa:	3301      	adds	r3, #1
 80294ac:	e7c5      	b.n	802943a <__lshift+0x4a>
 80294ae:	3904      	subs	r1, #4
 80294b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80294b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80294b8:	459c      	cmp	ip, r3
 80294ba:	d8f9      	bhi.n	80294b0 <__lshift+0xc0>
 80294bc:	e7ea      	b.n	8029494 <__lshift+0xa4>
 80294be:	bf00      	nop
 80294c0:	0802f73d 	.word	0x0802f73d
 80294c4:	0802f74e 	.word	0x0802f74e

080294c8 <__mcmp>:
 80294c8:	b530      	push	{r4, r5, lr}
 80294ca:	6902      	ldr	r2, [r0, #16]
 80294cc:	690c      	ldr	r4, [r1, #16]
 80294ce:	1b12      	subs	r2, r2, r4
 80294d0:	d10e      	bne.n	80294f0 <__mcmp+0x28>
 80294d2:	f100 0314 	add.w	r3, r0, #20
 80294d6:	3114      	adds	r1, #20
 80294d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80294dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80294e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80294e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80294e8:	42a5      	cmp	r5, r4
 80294ea:	d003      	beq.n	80294f4 <__mcmp+0x2c>
 80294ec:	d305      	bcc.n	80294fa <__mcmp+0x32>
 80294ee:	2201      	movs	r2, #1
 80294f0:	4610      	mov	r0, r2
 80294f2:	bd30      	pop	{r4, r5, pc}
 80294f4:	4283      	cmp	r3, r0
 80294f6:	d3f3      	bcc.n	80294e0 <__mcmp+0x18>
 80294f8:	e7fa      	b.n	80294f0 <__mcmp+0x28>
 80294fa:	f04f 32ff 	mov.w	r2, #4294967295
 80294fe:	e7f7      	b.n	80294f0 <__mcmp+0x28>

08029500 <__mdiff>:
 8029500:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029504:	460c      	mov	r4, r1
 8029506:	4606      	mov	r6, r0
 8029508:	4611      	mov	r1, r2
 802950a:	4620      	mov	r0, r4
 802950c:	4617      	mov	r7, r2
 802950e:	f7ff ffdb 	bl	80294c8 <__mcmp>
 8029512:	1e05      	subs	r5, r0, #0
 8029514:	d110      	bne.n	8029538 <__mdiff+0x38>
 8029516:	4629      	mov	r1, r5
 8029518:	4630      	mov	r0, r6
 802951a:	f7ff fd57 	bl	8028fcc <_Balloc>
 802951e:	b930      	cbnz	r0, 802952e <__mdiff+0x2e>
 8029520:	4b39      	ldr	r3, [pc, #228]	; (8029608 <__mdiff+0x108>)
 8029522:	4602      	mov	r2, r0
 8029524:	f240 2132 	movw	r1, #562	; 0x232
 8029528:	4838      	ldr	r0, [pc, #224]	; (802960c <__mdiff+0x10c>)
 802952a:	f7fe fccd 	bl	8027ec8 <__assert_func>
 802952e:	2301      	movs	r3, #1
 8029530:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8029534:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029538:	bfa4      	itt	ge
 802953a:	463b      	movge	r3, r7
 802953c:	4627      	movge	r7, r4
 802953e:	4630      	mov	r0, r6
 8029540:	6879      	ldr	r1, [r7, #4]
 8029542:	bfa6      	itte	ge
 8029544:	461c      	movge	r4, r3
 8029546:	2500      	movge	r5, #0
 8029548:	2501      	movlt	r5, #1
 802954a:	f7ff fd3f 	bl	8028fcc <_Balloc>
 802954e:	b920      	cbnz	r0, 802955a <__mdiff+0x5a>
 8029550:	4b2d      	ldr	r3, [pc, #180]	; (8029608 <__mdiff+0x108>)
 8029552:	4602      	mov	r2, r0
 8029554:	f44f 7110 	mov.w	r1, #576	; 0x240
 8029558:	e7e6      	b.n	8029528 <__mdiff+0x28>
 802955a:	693e      	ldr	r6, [r7, #16]
 802955c:	60c5      	str	r5, [r0, #12]
 802955e:	6925      	ldr	r5, [r4, #16]
 8029560:	f107 0114 	add.w	r1, r7, #20
 8029564:	f104 0914 	add.w	r9, r4, #20
 8029568:	f100 0e14 	add.w	lr, r0, #20
 802956c:	f107 0210 	add.w	r2, r7, #16
 8029570:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8029574:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8029578:	46f2      	mov	sl, lr
 802957a:	2700      	movs	r7, #0
 802957c:	f859 3b04 	ldr.w	r3, [r9], #4
 8029580:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8029584:	fa1f f883 	uxth.w	r8, r3
 8029588:	fa17 f78b 	uxtah	r7, r7, fp
 802958c:	0c1b      	lsrs	r3, r3, #16
 802958e:	eba7 0808 	sub.w	r8, r7, r8
 8029592:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8029596:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802959a:	fa1f f888 	uxth.w	r8, r8
 802959e:	141f      	asrs	r7, r3, #16
 80295a0:	454d      	cmp	r5, r9
 80295a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80295a6:	f84a 3b04 	str.w	r3, [sl], #4
 80295aa:	d8e7      	bhi.n	802957c <__mdiff+0x7c>
 80295ac:	1b2b      	subs	r3, r5, r4
 80295ae:	3b15      	subs	r3, #21
 80295b0:	f023 0303 	bic.w	r3, r3, #3
 80295b4:	3304      	adds	r3, #4
 80295b6:	3415      	adds	r4, #21
 80295b8:	42a5      	cmp	r5, r4
 80295ba:	bf38      	it	cc
 80295bc:	2304      	movcc	r3, #4
 80295be:	4419      	add	r1, r3
 80295c0:	4473      	add	r3, lr
 80295c2:	469e      	mov	lr, r3
 80295c4:	460d      	mov	r5, r1
 80295c6:	4565      	cmp	r5, ip
 80295c8:	d30e      	bcc.n	80295e8 <__mdiff+0xe8>
 80295ca:	f10c 0203 	add.w	r2, ip, #3
 80295ce:	1a52      	subs	r2, r2, r1
 80295d0:	f022 0203 	bic.w	r2, r2, #3
 80295d4:	3903      	subs	r1, #3
 80295d6:	458c      	cmp	ip, r1
 80295d8:	bf38      	it	cc
 80295da:	2200      	movcc	r2, #0
 80295dc:	441a      	add	r2, r3
 80295de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80295e2:	b17b      	cbz	r3, 8029604 <__mdiff+0x104>
 80295e4:	6106      	str	r6, [r0, #16]
 80295e6:	e7a5      	b.n	8029534 <__mdiff+0x34>
 80295e8:	f855 8b04 	ldr.w	r8, [r5], #4
 80295ec:	fa17 f488 	uxtah	r4, r7, r8
 80295f0:	1422      	asrs	r2, r4, #16
 80295f2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80295f6:	b2a4      	uxth	r4, r4
 80295f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80295fc:	f84e 4b04 	str.w	r4, [lr], #4
 8029600:	1417      	asrs	r7, r2, #16
 8029602:	e7e0      	b.n	80295c6 <__mdiff+0xc6>
 8029604:	3e01      	subs	r6, #1
 8029606:	e7ea      	b.n	80295de <__mdiff+0xde>
 8029608:	0802f73d 	.word	0x0802f73d
 802960c:	0802f74e 	.word	0x0802f74e

08029610 <__d2b>:
 8029610:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8029614:	4689      	mov	r9, r1
 8029616:	2101      	movs	r1, #1
 8029618:	ec57 6b10 	vmov	r6, r7, d0
 802961c:	4690      	mov	r8, r2
 802961e:	f7ff fcd5 	bl	8028fcc <_Balloc>
 8029622:	4604      	mov	r4, r0
 8029624:	b930      	cbnz	r0, 8029634 <__d2b+0x24>
 8029626:	4602      	mov	r2, r0
 8029628:	4b25      	ldr	r3, [pc, #148]	; (80296c0 <__d2b+0xb0>)
 802962a:	4826      	ldr	r0, [pc, #152]	; (80296c4 <__d2b+0xb4>)
 802962c:	f240 310a 	movw	r1, #778	; 0x30a
 8029630:	f7fe fc4a 	bl	8027ec8 <__assert_func>
 8029634:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8029638:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802963c:	bb35      	cbnz	r5, 802968c <__d2b+0x7c>
 802963e:	2e00      	cmp	r6, #0
 8029640:	9301      	str	r3, [sp, #4]
 8029642:	d028      	beq.n	8029696 <__d2b+0x86>
 8029644:	4668      	mov	r0, sp
 8029646:	9600      	str	r6, [sp, #0]
 8029648:	f7ff fd8c 	bl	8029164 <__lo0bits>
 802964c:	9900      	ldr	r1, [sp, #0]
 802964e:	b300      	cbz	r0, 8029692 <__d2b+0x82>
 8029650:	9a01      	ldr	r2, [sp, #4]
 8029652:	f1c0 0320 	rsb	r3, r0, #32
 8029656:	fa02 f303 	lsl.w	r3, r2, r3
 802965a:	430b      	orrs	r3, r1
 802965c:	40c2      	lsrs	r2, r0
 802965e:	6163      	str	r3, [r4, #20]
 8029660:	9201      	str	r2, [sp, #4]
 8029662:	9b01      	ldr	r3, [sp, #4]
 8029664:	61a3      	str	r3, [r4, #24]
 8029666:	2b00      	cmp	r3, #0
 8029668:	bf14      	ite	ne
 802966a:	2202      	movne	r2, #2
 802966c:	2201      	moveq	r2, #1
 802966e:	6122      	str	r2, [r4, #16]
 8029670:	b1d5      	cbz	r5, 80296a8 <__d2b+0x98>
 8029672:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8029676:	4405      	add	r5, r0
 8029678:	f8c9 5000 	str.w	r5, [r9]
 802967c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8029680:	f8c8 0000 	str.w	r0, [r8]
 8029684:	4620      	mov	r0, r4
 8029686:	b003      	add	sp, #12
 8029688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802968c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8029690:	e7d5      	b.n	802963e <__d2b+0x2e>
 8029692:	6161      	str	r1, [r4, #20]
 8029694:	e7e5      	b.n	8029662 <__d2b+0x52>
 8029696:	a801      	add	r0, sp, #4
 8029698:	f7ff fd64 	bl	8029164 <__lo0bits>
 802969c:	9b01      	ldr	r3, [sp, #4]
 802969e:	6163      	str	r3, [r4, #20]
 80296a0:	2201      	movs	r2, #1
 80296a2:	6122      	str	r2, [r4, #16]
 80296a4:	3020      	adds	r0, #32
 80296a6:	e7e3      	b.n	8029670 <__d2b+0x60>
 80296a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80296ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80296b0:	f8c9 0000 	str.w	r0, [r9]
 80296b4:	6918      	ldr	r0, [r3, #16]
 80296b6:	f7ff fd35 	bl	8029124 <__hi0bits>
 80296ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80296be:	e7df      	b.n	8029680 <__d2b+0x70>
 80296c0:	0802f73d 	.word	0x0802f73d
 80296c4:	0802f74e 	.word	0x0802f74e

080296c8 <_realloc_r>:
 80296c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80296ca:	4607      	mov	r7, r0
 80296cc:	4614      	mov	r4, r2
 80296ce:	460e      	mov	r6, r1
 80296d0:	b921      	cbnz	r1, 80296dc <_realloc_r+0x14>
 80296d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80296d6:	4611      	mov	r1, r2
 80296d8:	f7fc be06 	b.w	80262e8 <_malloc_r>
 80296dc:	b922      	cbnz	r2, 80296e8 <_realloc_r+0x20>
 80296de:	f7fc fdb3 	bl	8026248 <_free_r>
 80296e2:	4625      	mov	r5, r4
 80296e4:	4628      	mov	r0, r5
 80296e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80296e8:	f000 fde4 	bl	802a2b4 <_malloc_usable_size_r>
 80296ec:	42a0      	cmp	r0, r4
 80296ee:	d20f      	bcs.n	8029710 <_realloc_r+0x48>
 80296f0:	4621      	mov	r1, r4
 80296f2:	4638      	mov	r0, r7
 80296f4:	f7fc fdf8 	bl	80262e8 <_malloc_r>
 80296f8:	4605      	mov	r5, r0
 80296fa:	2800      	cmp	r0, #0
 80296fc:	d0f2      	beq.n	80296e4 <_realloc_r+0x1c>
 80296fe:	4631      	mov	r1, r6
 8029700:	4622      	mov	r2, r4
 8029702:	f7fc fd61 	bl	80261c8 <memcpy>
 8029706:	4631      	mov	r1, r6
 8029708:	4638      	mov	r0, r7
 802970a:	f7fc fd9d 	bl	8026248 <_free_r>
 802970e:	e7e9      	b.n	80296e4 <_realloc_r+0x1c>
 8029710:	4635      	mov	r5, r6
 8029712:	e7e7      	b.n	80296e4 <_realloc_r+0x1c>

08029714 <__ssputs_r>:
 8029714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029718:	688e      	ldr	r6, [r1, #8]
 802971a:	429e      	cmp	r6, r3
 802971c:	4682      	mov	sl, r0
 802971e:	460c      	mov	r4, r1
 8029720:	4690      	mov	r8, r2
 8029722:	461f      	mov	r7, r3
 8029724:	d838      	bhi.n	8029798 <__ssputs_r+0x84>
 8029726:	898a      	ldrh	r2, [r1, #12]
 8029728:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802972c:	d032      	beq.n	8029794 <__ssputs_r+0x80>
 802972e:	6825      	ldr	r5, [r4, #0]
 8029730:	6909      	ldr	r1, [r1, #16]
 8029732:	eba5 0901 	sub.w	r9, r5, r1
 8029736:	6965      	ldr	r5, [r4, #20]
 8029738:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802973c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8029740:	3301      	adds	r3, #1
 8029742:	444b      	add	r3, r9
 8029744:	106d      	asrs	r5, r5, #1
 8029746:	429d      	cmp	r5, r3
 8029748:	bf38      	it	cc
 802974a:	461d      	movcc	r5, r3
 802974c:	0553      	lsls	r3, r2, #21
 802974e:	d531      	bpl.n	80297b4 <__ssputs_r+0xa0>
 8029750:	4629      	mov	r1, r5
 8029752:	f7fc fdc9 	bl	80262e8 <_malloc_r>
 8029756:	4606      	mov	r6, r0
 8029758:	b950      	cbnz	r0, 8029770 <__ssputs_r+0x5c>
 802975a:	230c      	movs	r3, #12
 802975c:	f8ca 3000 	str.w	r3, [sl]
 8029760:	89a3      	ldrh	r3, [r4, #12]
 8029762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029766:	81a3      	strh	r3, [r4, #12]
 8029768:	f04f 30ff 	mov.w	r0, #4294967295
 802976c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029770:	6921      	ldr	r1, [r4, #16]
 8029772:	464a      	mov	r2, r9
 8029774:	f7fc fd28 	bl	80261c8 <memcpy>
 8029778:	89a3      	ldrh	r3, [r4, #12]
 802977a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802977e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029782:	81a3      	strh	r3, [r4, #12]
 8029784:	6126      	str	r6, [r4, #16]
 8029786:	6165      	str	r5, [r4, #20]
 8029788:	444e      	add	r6, r9
 802978a:	eba5 0509 	sub.w	r5, r5, r9
 802978e:	6026      	str	r6, [r4, #0]
 8029790:	60a5      	str	r5, [r4, #8]
 8029792:	463e      	mov	r6, r7
 8029794:	42be      	cmp	r6, r7
 8029796:	d900      	bls.n	802979a <__ssputs_r+0x86>
 8029798:	463e      	mov	r6, r7
 802979a:	4632      	mov	r2, r6
 802979c:	6820      	ldr	r0, [r4, #0]
 802979e:	4641      	mov	r1, r8
 80297a0:	f7fc fd20 	bl	80261e4 <memmove>
 80297a4:	68a3      	ldr	r3, [r4, #8]
 80297a6:	6822      	ldr	r2, [r4, #0]
 80297a8:	1b9b      	subs	r3, r3, r6
 80297aa:	4432      	add	r2, r6
 80297ac:	60a3      	str	r3, [r4, #8]
 80297ae:	6022      	str	r2, [r4, #0]
 80297b0:	2000      	movs	r0, #0
 80297b2:	e7db      	b.n	802976c <__ssputs_r+0x58>
 80297b4:	462a      	mov	r2, r5
 80297b6:	f7ff ff87 	bl	80296c8 <_realloc_r>
 80297ba:	4606      	mov	r6, r0
 80297bc:	2800      	cmp	r0, #0
 80297be:	d1e1      	bne.n	8029784 <__ssputs_r+0x70>
 80297c0:	6921      	ldr	r1, [r4, #16]
 80297c2:	4650      	mov	r0, sl
 80297c4:	f7fc fd40 	bl	8026248 <_free_r>
 80297c8:	e7c7      	b.n	802975a <__ssputs_r+0x46>
	...

080297cc <_svfiprintf_r>:
 80297cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80297d0:	4698      	mov	r8, r3
 80297d2:	898b      	ldrh	r3, [r1, #12]
 80297d4:	061b      	lsls	r3, r3, #24
 80297d6:	b09d      	sub	sp, #116	; 0x74
 80297d8:	4607      	mov	r7, r0
 80297da:	460d      	mov	r5, r1
 80297dc:	4614      	mov	r4, r2
 80297de:	d50e      	bpl.n	80297fe <_svfiprintf_r+0x32>
 80297e0:	690b      	ldr	r3, [r1, #16]
 80297e2:	b963      	cbnz	r3, 80297fe <_svfiprintf_r+0x32>
 80297e4:	2140      	movs	r1, #64	; 0x40
 80297e6:	f7fc fd7f 	bl	80262e8 <_malloc_r>
 80297ea:	6028      	str	r0, [r5, #0]
 80297ec:	6128      	str	r0, [r5, #16]
 80297ee:	b920      	cbnz	r0, 80297fa <_svfiprintf_r+0x2e>
 80297f0:	230c      	movs	r3, #12
 80297f2:	603b      	str	r3, [r7, #0]
 80297f4:	f04f 30ff 	mov.w	r0, #4294967295
 80297f8:	e0d1      	b.n	802999e <_svfiprintf_r+0x1d2>
 80297fa:	2340      	movs	r3, #64	; 0x40
 80297fc:	616b      	str	r3, [r5, #20]
 80297fe:	2300      	movs	r3, #0
 8029800:	9309      	str	r3, [sp, #36]	; 0x24
 8029802:	2320      	movs	r3, #32
 8029804:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8029808:	f8cd 800c 	str.w	r8, [sp, #12]
 802980c:	2330      	movs	r3, #48	; 0x30
 802980e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80299b8 <_svfiprintf_r+0x1ec>
 8029812:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8029816:	f04f 0901 	mov.w	r9, #1
 802981a:	4623      	mov	r3, r4
 802981c:	469a      	mov	sl, r3
 802981e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029822:	b10a      	cbz	r2, 8029828 <_svfiprintf_r+0x5c>
 8029824:	2a25      	cmp	r2, #37	; 0x25
 8029826:	d1f9      	bne.n	802981c <_svfiprintf_r+0x50>
 8029828:	ebba 0b04 	subs.w	fp, sl, r4
 802982c:	d00b      	beq.n	8029846 <_svfiprintf_r+0x7a>
 802982e:	465b      	mov	r3, fp
 8029830:	4622      	mov	r2, r4
 8029832:	4629      	mov	r1, r5
 8029834:	4638      	mov	r0, r7
 8029836:	f7ff ff6d 	bl	8029714 <__ssputs_r>
 802983a:	3001      	adds	r0, #1
 802983c:	f000 80aa 	beq.w	8029994 <_svfiprintf_r+0x1c8>
 8029840:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029842:	445a      	add	r2, fp
 8029844:	9209      	str	r2, [sp, #36]	; 0x24
 8029846:	f89a 3000 	ldrb.w	r3, [sl]
 802984a:	2b00      	cmp	r3, #0
 802984c:	f000 80a2 	beq.w	8029994 <_svfiprintf_r+0x1c8>
 8029850:	2300      	movs	r3, #0
 8029852:	f04f 32ff 	mov.w	r2, #4294967295
 8029856:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802985a:	f10a 0a01 	add.w	sl, sl, #1
 802985e:	9304      	str	r3, [sp, #16]
 8029860:	9307      	str	r3, [sp, #28]
 8029862:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8029866:	931a      	str	r3, [sp, #104]	; 0x68
 8029868:	4654      	mov	r4, sl
 802986a:	2205      	movs	r2, #5
 802986c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029870:	4851      	ldr	r0, [pc, #324]	; (80299b8 <_svfiprintf_r+0x1ec>)
 8029872:	f7d6 fd4d 	bl	8000310 <memchr>
 8029876:	9a04      	ldr	r2, [sp, #16]
 8029878:	b9d8      	cbnz	r0, 80298b2 <_svfiprintf_r+0xe6>
 802987a:	06d0      	lsls	r0, r2, #27
 802987c:	bf44      	itt	mi
 802987e:	2320      	movmi	r3, #32
 8029880:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8029884:	0711      	lsls	r1, r2, #28
 8029886:	bf44      	itt	mi
 8029888:	232b      	movmi	r3, #43	; 0x2b
 802988a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802988e:	f89a 3000 	ldrb.w	r3, [sl]
 8029892:	2b2a      	cmp	r3, #42	; 0x2a
 8029894:	d015      	beq.n	80298c2 <_svfiprintf_r+0xf6>
 8029896:	9a07      	ldr	r2, [sp, #28]
 8029898:	4654      	mov	r4, sl
 802989a:	2000      	movs	r0, #0
 802989c:	f04f 0c0a 	mov.w	ip, #10
 80298a0:	4621      	mov	r1, r4
 80298a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80298a6:	3b30      	subs	r3, #48	; 0x30
 80298a8:	2b09      	cmp	r3, #9
 80298aa:	d94e      	bls.n	802994a <_svfiprintf_r+0x17e>
 80298ac:	b1b0      	cbz	r0, 80298dc <_svfiprintf_r+0x110>
 80298ae:	9207      	str	r2, [sp, #28]
 80298b0:	e014      	b.n	80298dc <_svfiprintf_r+0x110>
 80298b2:	eba0 0308 	sub.w	r3, r0, r8
 80298b6:	fa09 f303 	lsl.w	r3, r9, r3
 80298ba:	4313      	orrs	r3, r2
 80298bc:	9304      	str	r3, [sp, #16]
 80298be:	46a2      	mov	sl, r4
 80298c0:	e7d2      	b.n	8029868 <_svfiprintf_r+0x9c>
 80298c2:	9b03      	ldr	r3, [sp, #12]
 80298c4:	1d19      	adds	r1, r3, #4
 80298c6:	681b      	ldr	r3, [r3, #0]
 80298c8:	9103      	str	r1, [sp, #12]
 80298ca:	2b00      	cmp	r3, #0
 80298cc:	bfbb      	ittet	lt
 80298ce:	425b      	neglt	r3, r3
 80298d0:	f042 0202 	orrlt.w	r2, r2, #2
 80298d4:	9307      	strge	r3, [sp, #28]
 80298d6:	9307      	strlt	r3, [sp, #28]
 80298d8:	bfb8      	it	lt
 80298da:	9204      	strlt	r2, [sp, #16]
 80298dc:	7823      	ldrb	r3, [r4, #0]
 80298de:	2b2e      	cmp	r3, #46	; 0x2e
 80298e0:	d10c      	bne.n	80298fc <_svfiprintf_r+0x130>
 80298e2:	7863      	ldrb	r3, [r4, #1]
 80298e4:	2b2a      	cmp	r3, #42	; 0x2a
 80298e6:	d135      	bne.n	8029954 <_svfiprintf_r+0x188>
 80298e8:	9b03      	ldr	r3, [sp, #12]
 80298ea:	1d1a      	adds	r2, r3, #4
 80298ec:	681b      	ldr	r3, [r3, #0]
 80298ee:	9203      	str	r2, [sp, #12]
 80298f0:	2b00      	cmp	r3, #0
 80298f2:	bfb8      	it	lt
 80298f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80298f8:	3402      	adds	r4, #2
 80298fa:	9305      	str	r3, [sp, #20]
 80298fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80299c8 <_svfiprintf_r+0x1fc>
 8029900:	7821      	ldrb	r1, [r4, #0]
 8029902:	2203      	movs	r2, #3
 8029904:	4650      	mov	r0, sl
 8029906:	f7d6 fd03 	bl	8000310 <memchr>
 802990a:	b140      	cbz	r0, 802991e <_svfiprintf_r+0x152>
 802990c:	2340      	movs	r3, #64	; 0x40
 802990e:	eba0 000a 	sub.w	r0, r0, sl
 8029912:	fa03 f000 	lsl.w	r0, r3, r0
 8029916:	9b04      	ldr	r3, [sp, #16]
 8029918:	4303      	orrs	r3, r0
 802991a:	3401      	adds	r4, #1
 802991c:	9304      	str	r3, [sp, #16]
 802991e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029922:	4826      	ldr	r0, [pc, #152]	; (80299bc <_svfiprintf_r+0x1f0>)
 8029924:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8029928:	2206      	movs	r2, #6
 802992a:	f7d6 fcf1 	bl	8000310 <memchr>
 802992e:	2800      	cmp	r0, #0
 8029930:	d038      	beq.n	80299a4 <_svfiprintf_r+0x1d8>
 8029932:	4b23      	ldr	r3, [pc, #140]	; (80299c0 <_svfiprintf_r+0x1f4>)
 8029934:	bb1b      	cbnz	r3, 802997e <_svfiprintf_r+0x1b2>
 8029936:	9b03      	ldr	r3, [sp, #12]
 8029938:	3307      	adds	r3, #7
 802993a:	f023 0307 	bic.w	r3, r3, #7
 802993e:	3308      	adds	r3, #8
 8029940:	9303      	str	r3, [sp, #12]
 8029942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029944:	4433      	add	r3, r6
 8029946:	9309      	str	r3, [sp, #36]	; 0x24
 8029948:	e767      	b.n	802981a <_svfiprintf_r+0x4e>
 802994a:	fb0c 3202 	mla	r2, ip, r2, r3
 802994e:	460c      	mov	r4, r1
 8029950:	2001      	movs	r0, #1
 8029952:	e7a5      	b.n	80298a0 <_svfiprintf_r+0xd4>
 8029954:	2300      	movs	r3, #0
 8029956:	3401      	adds	r4, #1
 8029958:	9305      	str	r3, [sp, #20]
 802995a:	4619      	mov	r1, r3
 802995c:	f04f 0c0a 	mov.w	ip, #10
 8029960:	4620      	mov	r0, r4
 8029962:	f810 2b01 	ldrb.w	r2, [r0], #1
 8029966:	3a30      	subs	r2, #48	; 0x30
 8029968:	2a09      	cmp	r2, #9
 802996a:	d903      	bls.n	8029974 <_svfiprintf_r+0x1a8>
 802996c:	2b00      	cmp	r3, #0
 802996e:	d0c5      	beq.n	80298fc <_svfiprintf_r+0x130>
 8029970:	9105      	str	r1, [sp, #20]
 8029972:	e7c3      	b.n	80298fc <_svfiprintf_r+0x130>
 8029974:	fb0c 2101 	mla	r1, ip, r1, r2
 8029978:	4604      	mov	r4, r0
 802997a:	2301      	movs	r3, #1
 802997c:	e7f0      	b.n	8029960 <_svfiprintf_r+0x194>
 802997e:	ab03      	add	r3, sp, #12
 8029980:	9300      	str	r3, [sp, #0]
 8029982:	462a      	mov	r2, r5
 8029984:	4b0f      	ldr	r3, [pc, #60]	; (80299c4 <_svfiprintf_r+0x1f8>)
 8029986:	a904      	add	r1, sp, #16
 8029988:	4638      	mov	r0, r7
 802998a:	f7fc fef1 	bl	8026770 <_printf_float>
 802998e:	1c42      	adds	r2, r0, #1
 8029990:	4606      	mov	r6, r0
 8029992:	d1d6      	bne.n	8029942 <_svfiprintf_r+0x176>
 8029994:	89ab      	ldrh	r3, [r5, #12]
 8029996:	065b      	lsls	r3, r3, #25
 8029998:	f53f af2c 	bmi.w	80297f4 <_svfiprintf_r+0x28>
 802999c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802999e:	b01d      	add	sp, #116	; 0x74
 80299a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80299a4:	ab03      	add	r3, sp, #12
 80299a6:	9300      	str	r3, [sp, #0]
 80299a8:	462a      	mov	r2, r5
 80299aa:	4b06      	ldr	r3, [pc, #24]	; (80299c4 <_svfiprintf_r+0x1f8>)
 80299ac:	a904      	add	r1, sp, #16
 80299ae:	4638      	mov	r0, r7
 80299b0:	f7fd f96a 	bl	8026c88 <_printf_i>
 80299b4:	e7eb      	b.n	802998e <_svfiprintf_r+0x1c2>
 80299b6:	bf00      	nop
 80299b8:	0802eec0 	.word	0x0802eec0
 80299bc:	0802eeca 	.word	0x0802eeca
 80299c0:	08026771 	.word	0x08026771
 80299c4:	08029715 	.word	0x08029715
 80299c8:	0802eec6 	.word	0x0802eec6

080299cc <_sungetc_r>:
 80299cc:	b538      	push	{r3, r4, r5, lr}
 80299ce:	1c4b      	adds	r3, r1, #1
 80299d0:	4614      	mov	r4, r2
 80299d2:	d103      	bne.n	80299dc <_sungetc_r+0x10>
 80299d4:	f04f 35ff 	mov.w	r5, #4294967295
 80299d8:	4628      	mov	r0, r5
 80299da:	bd38      	pop	{r3, r4, r5, pc}
 80299dc:	8993      	ldrh	r3, [r2, #12]
 80299de:	f023 0320 	bic.w	r3, r3, #32
 80299e2:	8193      	strh	r3, [r2, #12]
 80299e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80299e6:	6852      	ldr	r2, [r2, #4]
 80299e8:	b2cd      	uxtb	r5, r1
 80299ea:	b18b      	cbz	r3, 8029a10 <_sungetc_r+0x44>
 80299ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80299ee:	4293      	cmp	r3, r2
 80299f0:	dd08      	ble.n	8029a04 <_sungetc_r+0x38>
 80299f2:	6823      	ldr	r3, [r4, #0]
 80299f4:	1e5a      	subs	r2, r3, #1
 80299f6:	6022      	str	r2, [r4, #0]
 80299f8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80299fc:	6863      	ldr	r3, [r4, #4]
 80299fe:	3301      	adds	r3, #1
 8029a00:	6063      	str	r3, [r4, #4]
 8029a02:	e7e9      	b.n	80299d8 <_sungetc_r+0xc>
 8029a04:	4621      	mov	r1, r4
 8029a06:	f000 fbd3 	bl	802a1b0 <__submore>
 8029a0a:	2800      	cmp	r0, #0
 8029a0c:	d0f1      	beq.n	80299f2 <_sungetc_r+0x26>
 8029a0e:	e7e1      	b.n	80299d4 <_sungetc_r+0x8>
 8029a10:	6921      	ldr	r1, [r4, #16]
 8029a12:	6823      	ldr	r3, [r4, #0]
 8029a14:	b151      	cbz	r1, 8029a2c <_sungetc_r+0x60>
 8029a16:	4299      	cmp	r1, r3
 8029a18:	d208      	bcs.n	8029a2c <_sungetc_r+0x60>
 8029a1a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8029a1e:	42a9      	cmp	r1, r5
 8029a20:	d104      	bne.n	8029a2c <_sungetc_r+0x60>
 8029a22:	3b01      	subs	r3, #1
 8029a24:	3201      	adds	r2, #1
 8029a26:	6023      	str	r3, [r4, #0]
 8029a28:	6062      	str	r2, [r4, #4]
 8029a2a:	e7d5      	b.n	80299d8 <_sungetc_r+0xc>
 8029a2c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8029a30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029a34:	6363      	str	r3, [r4, #52]	; 0x34
 8029a36:	2303      	movs	r3, #3
 8029a38:	63a3      	str	r3, [r4, #56]	; 0x38
 8029a3a:	4623      	mov	r3, r4
 8029a3c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8029a40:	6023      	str	r3, [r4, #0]
 8029a42:	2301      	movs	r3, #1
 8029a44:	e7dc      	b.n	8029a00 <_sungetc_r+0x34>

08029a46 <__ssrefill_r>:
 8029a46:	b510      	push	{r4, lr}
 8029a48:	460c      	mov	r4, r1
 8029a4a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8029a4c:	b169      	cbz	r1, 8029a6a <__ssrefill_r+0x24>
 8029a4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029a52:	4299      	cmp	r1, r3
 8029a54:	d001      	beq.n	8029a5a <__ssrefill_r+0x14>
 8029a56:	f7fc fbf7 	bl	8026248 <_free_r>
 8029a5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8029a5c:	6063      	str	r3, [r4, #4]
 8029a5e:	2000      	movs	r0, #0
 8029a60:	6360      	str	r0, [r4, #52]	; 0x34
 8029a62:	b113      	cbz	r3, 8029a6a <__ssrefill_r+0x24>
 8029a64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8029a66:	6023      	str	r3, [r4, #0]
 8029a68:	bd10      	pop	{r4, pc}
 8029a6a:	6923      	ldr	r3, [r4, #16]
 8029a6c:	6023      	str	r3, [r4, #0]
 8029a6e:	2300      	movs	r3, #0
 8029a70:	6063      	str	r3, [r4, #4]
 8029a72:	89a3      	ldrh	r3, [r4, #12]
 8029a74:	f043 0320 	orr.w	r3, r3, #32
 8029a78:	81a3      	strh	r3, [r4, #12]
 8029a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8029a7e:	e7f3      	b.n	8029a68 <__ssrefill_r+0x22>

08029a80 <__ssvfiscanf_r>:
 8029a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029a84:	460c      	mov	r4, r1
 8029a86:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8029a8a:	2100      	movs	r1, #0
 8029a8c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8029a90:	49b2      	ldr	r1, [pc, #712]	; (8029d5c <__ssvfiscanf_r+0x2dc>)
 8029a92:	91a0      	str	r1, [sp, #640]	; 0x280
 8029a94:	f10d 0804 	add.w	r8, sp, #4
 8029a98:	49b1      	ldr	r1, [pc, #708]	; (8029d60 <__ssvfiscanf_r+0x2e0>)
 8029a9a:	4fb2      	ldr	r7, [pc, #712]	; (8029d64 <__ssvfiscanf_r+0x2e4>)
 8029a9c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8029d68 <__ssvfiscanf_r+0x2e8>
 8029aa0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8029aa4:	4606      	mov	r6, r0
 8029aa6:	91a1      	str	r1, [sp, #644]	; 0x284
 8029aa8:	9300      	str	r3, [sp, #0]
 8029aaa:	f892 a000 	ldrb.w	sl, [r2]
 8029aae:	f1ba 0f00 	cmp.w	sl, #0
 8029ab2:	f000 8151 	beq.w	8029d58 <__ssvfiscanf_r+0x2d8>
 8029ab6:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8029aba:	f013 0308 	ands.w	r3, r3, #8
 8029abe:	f102 0501 	add.w	r5, r2, #1
 8029ac2:	d019      	beq.n	8029af8 <__ssvfiscanf_r+0x78>
 8029ac4:	6863      	ldr	r3, [r4, #4]
 8029ac6:	2b00      	cmp	r3, #0
 8029ac8:	dd0f      	ble.n	8029aea <__ssvfiscanf_r+0x6a>
 8029aca:	6823      	ldr	r3, [r4, #0]
 8029acc:	781a      	ldrb	r2, [r3, #0]
 8029ace:	5cba      	ldrb	r2, [r7, r2]
 8029ad0:	0712      	lsls	r2, r2, #28
 8029ad2:	d401      	bmi.n	8029ad8 <__ssvfiscanf_r+0x58>
 8029ad4:	462a      	mov	r2, r5
 8029ad6:	e7e8      	b.n	8029aaa <__ssvfiscanf_r+0x2a>
 8029ad8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8029ada:	3201      	adds	r2, #1
 8029adc:	9245      	str	r2, [sp, #276]	; 0x114
 8029ade:	6862      	ldr	r2, [r4, #4]
 8029ae0:	3301      	adds	r3, #1
 8029ae2:	3a01      	subs	r2, #1
 8029ae4:	6062      	str	r2, [r4, #4]
 8029ae6:	6023      	str	r3, [r4, #0]
 8029ae8:	e7ec      	b.n	8029ac4 <__ssvfiscanf_r+0x44>
 8029aea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8029aec:	4621      	mov	r1, r4
 8029aee:	4630      	mov	r0, r6
 8029af0:	4798      	blx	r3
 8029af2:	2800      	cmp	r0, #0
 8029af4:	d0e9      	beq.n	8029aca <__ssvfiscanf_r+0x4a>
 8029af6:	e7ed      	b.n	8029ad4 <__ssvfiscanf_r+0x54>
 8029af8:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8029afc:	f040 8083 	bne.w	8029c06 <__ssvfiscanf_r+0x186>
 8029b00:	9341      	str	r3, [sp, #260]	; 0x104
 8029b02:	9343      	str	r3, [sp, #268]	; 0x10c
 8029b04:	7853      	ldrb	r3, [r2, #1]
 8029b06:	2b2a      	cmp	r3, #42	; 0x2a
 8029b08:	bf02      	ittt	eq
 8029b0a:	2310      	moveq	r3, #16
 8029b0c:	1c95      	addeq	r5, r2, #2
 8029b0e:	9341      	streq	r3, [sp, #260]	; 0x104
 8029b10:	220a      	movs	r2, #10
 8029b12:	46ab      	mov	fp, r5
 8029b14:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8029b18:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8029b1c:	2b09      	cmp	r3, #9
 8029b1e:	d91d      	bls.n	8029b5c <__ssvfiscanf_r+0xdc>
 8029b20:	4891      	ldr	r0, [pc, #580]	; (8029d68 <__ssvfiscanf_r+0x2e8>)
 8029b22:	2203      	movs	r2, #3
 8029b24:	f7d6 fbf4 	bl	8000310 <memchr>
 8029b28:	b140      	cbz	r0, 8029b3c <__ssvfiscanf_r+0xbc>
 8029b2a:	2301      	movs	r3, #1
 8029b2c:	eba0 0009 	sub.w	r0, r0, r9
 8029b30:	fa03 f000 	lsl.w	r0, r3, r0
 8029b34:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8029b36:	4318      	orrs	r0, r3
 8029b38:	9041      	str	r0, [sp, #260]	; 0x104
 8029b3a:	465d      	mov	r5, fp
 8029b3c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8029b40:	2b78      	cmp	r3, #120	; 0x78
 8029b42:	d806      	bhi.n	8029b52 <__ssvfiscanf_r+0xd2>
 8029b44:	2b57      	cmp	r3, #87	; 0x57
 8029b46:	d810      	bhi.n	8029b6a <__ssvfiscanf_r+0xea>
 8029b48:	2b25      	cmp	r3, #37	; 0x25
 8029b4a:	d05c      	beq.n	8029c06 <__ssvfiscanf_r+0x186>
 8029b4c:	d856      	bhi.n	8029bfc <__ssvfiscanf_r+0x17c>
 8029b4e:	2b00      	cmp	r3, #0
 8029b50:	d074      	beq.n	8029c3c <__ssvfiscanf_r+0x1bc>
 8029b52:	2303      	movs	r3, #3
 8029b54:	9347      	str	r3, [sp, #284]	; 0x11c
 8029b56:	230a      	movs	r3, #10
 8029b58:	9342      	str	r3, [sp, #264]	; 0x108
 8029b5a:	e081      	b.n	8029c60 <__ssvfiscanf_r+0x1e0>
 8029b5c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8029b5e:	fb02 1303 	mla	r3, r2, r3, r1
 8029b62:	3b30      	subs	r3, #48	; 0x30
 8029b64:	9343      	str	r3, [sp, #268]	; 0x10c
 8029b66:	465d      	mov	r5, fp
 8029b68:	e7d3      	b.n	8029b12 <__ssvfiscanf_r+0x92>
 8029b6a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8029b6e:	2a20      	cmp	r2, #32
 8029b70:	d8ef      	bhi.n	8029b52 <__ssvfiscanf_r+0xd2>
 8029b72:	a101      	add	r1, pc, #4	; (adr r1, 8029b78 <__ssvfiscanf_r+0xf8>)
 8029b74:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8029b78:	08029c4b 	.word	0x08029c4b
 8029b7c:	08029b53 	.word	0x08029b53
 8029b80:	08029b53 	.word	0x08029b53
 8029b84:	08029ca9 	.word	0x08029ca9
 8029b88:	08029b53 	.word	0x08029b53
 8029b8c:	08029b53 	.word	0x08029b53
 8029b90:	08029b53 	.word	0x08029b53
 8029b94:	08029b53 	.word	0x08029b53
 8029b98:	08029b53 	.word	0x08029b53
 8029b9c:	08029b53 	.word	0x08029b53
 8029ba0:	08029b53 	.word	0x08029b53
 8029ba4:	08029cbf 	.word	0x08029cbf
 8029ba8:	08029c95 	.word	0x08029c95
 8029bac:	08029c03 	.word	0x08029c03
 8029bb0:	08029c03 	.word	0x08029c03
 8029bb4:	08029c03 	.word	0x08029c03
 8029bb8:	08029b53 	.word	0x08029b53
 8029bbc:	08029c99 	.word	0x08029c99
 8029bc0:	08029b53 	.word	0x08029b53
 8029bc4:	08029b53 	.word	0x08029b53
 8029bc8:	08029b53 	.word	0x08029b53
 8029bcc:	08029b53 	.word	0x08029b53
 8029bd0:	08029ccf 	.word	0x08029ccf
 8029bd4:	08029ca1 	.word	0x08029ca1
 8029bd8:	08029c43 	.word	0x08029c43
 8029bdc:	08029b53 	.word	0x08029b53
 8029be0:	08029b53 	.word	0x08029b53
 8029be4:	08029ccb 	.word	0x08029ccb
 8029be8:	08029b53 	.word	0x08029b53
 8029bec:	08029c95 	.word	0x08029c95
 8029bf0:	08029b53 	.word	0x08029b53
 8029bf4:	08029b53 	.word	0x08029b53
 8029bf8:	08029c4b 	.word	0x08029c4b
 8029bfc:	3b45      	subs	r3, #69	; 0x45
 8029bfe:	2b02      	cmp	r3, #2
 8029c00:	d8a7      	bhi.n	8029b52 <__ssvfiscanf_r+0xd2>
 8029c02:	2305      	movs	r3, #5
 8029c04:	e02b      	b.n	8029c5e <__ssvfiscanf_r+0x1de>
 8029c06:	6863      	ldr	r3, [r4, #4]
 8029c08:	2b00      	cmp	r3, #0
 8029c0a:	dd0d      	ble.n	8029c28 <__ssvfiscanf_r+0x1a8>
 8029c0c:	6823      	ldr	r3, [r4, #0]
 8029c0e:	781a      	ldrb	r2, [r3, #0]
 8029c10:	4552      	cmp	r2, sl
 8029c12:	f040 80a1 	bne.w	8029d58 <__ssvfiscanf_r+0x2d8>
 8029c16:	3301      	adds	r3, #1
 8029c18:	6862      	ldr	r2, [r4, #4]
 8029c1a:	6023      	str	r3, [r4, #0]
 8029c1c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8029c1e:	3a01      	subs	r2, #1
 8029c20:	3301      	adds	r3, #1
 8029c22:	6062      	str	r2, [r4, #4]
 8029c24:	9345      	str	r3, [sp, #276]	; 0x114
 8029c26:	e755      	b.n	8029ad4 <__ssvfiscanf_r+0x54>
 8029c28:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8029c2a:	4621      	mov	r1, r4
 8029c2c:	4630      	mov	r0, r6
 8029c2e:	4798      	blx	r3
 8029c30:	2800      	cmp	r0, #0
 8029c32:	d0eb      	beq.n	8029c0c <__ssvfiscanf_r+0x18c>
 8029c34:	9844      	ldr	r0, [sp, #272]	; 0x110
 8029c36:	2800      	cmp	r0, #0
 8029c38:	f040 8084 	bne.w	8029d44 <__ssvfiscanf_r+0x2c4>
 8029c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8029c40:	e086      	b.n	8029d50 <__ssvfiscanf_r+0x2d0>
 8029c42:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8029c44:	f042 0220 	orr.w	r2, r2, #32
 8029c48:	9241      	str	r2, [sp, #260]	; 0x104
 8029c4a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8029c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8029c50:	9241      	str	r2, [sp, #260]	; 0x104
 8029c52:	2210      	movs	r2, #16
 8029c54:	2b6f      	cmp	r3, #111	; 0x6f
 8029c56:	9242      	str	r2, [sp, #264]	; 0x108
 8029c58:	bf34      	ite	cc
 8029c5a:	2303      	movcc	r3, #3
 8029c5c:	2304      	movcs	r3, #4
 8029c5e:	9347      	str	r3, [sp, #284]	; 0x11c
 8029c60:	6863      	ldr	r3, [r4, #4]
 8029c62:	2b00      	cmp	r3, #0
 8029c64:	dd41      	ble.n	8029cea <__ssvfiscanf_r+0x26a>
 8029c66:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8029c68:	0659      	lsls	r1, r3, #25
 8029c6a:	d404      	bmi.n	8029c76 <__ssvfiscanf_r+0x1f6>
 8029c6c:	6823      	ldr	r3, [r4, #0]
 8029c6e:	781a      	ldrb	r2, [r3, #0]
 8029c70:	5cba      	ldrb	r2, [r7, r2]
 8029c72:	0712      	lsls	r2, r2, #28
 8029c74:	d440      	bmi.n	8029cf8 <__ssvfiscanf_r+0x278>
 8029c76:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8029c78:	2b02      	cmp	r3, #2
 8029c7a:	dc4f      	bgt.n	8029d1c <__ssvfiscanf_r+0x29c>
 8029c7c:	466b      	mov	r3, sp
 8029c7e:	4622      	mov	r2, r4
 8029c80:	a941      	add	r1, sp, #260	; 0x104
 8029c82:	4630      	mov	r0, r6
 8029c84:	f000 f874 	bl	8029d70 <_scanf_chars>
 8029c88:	2801      	cmp	r0, #1
 8029c8a:	d065      	beq.n	8029d58 <__ssvfiscanf_r+0x2d8>
 8029c8c:	2802      	cmp	r0, #2
 8029c8e:	f47f af21 	bne.w	8029ad4 <__ssvfiscanf_r+0x54>
 8029c92:	e7cf      	b.n	8029c34 <__ssvfiscanf_r+0x1b4>
 8029c94:	220a      	movs	r2, #10
 8029c96:	e7dd      	b.n	8029c54 <__ssvfiscanf_r+0x1d4>
 8029c98:	2300      	movs	r3, #0
 8029c9a:	9342      	str	r3, [sp, #264]	; 0x108
 8029c9c:	2303      	movs	r3, #3
 8029c9e:	e7de      	b.n	8029c5e <__ssvfiscanf_r+0x1de>
 8029ca0:	2308      	movs	r3, #8
 8029ca2:	9342      	str	r3, [sp, #264]	; 0x108
 8029ca4:	2304      	movs	r3, #4
 8029ca6:	e7da      	b.n	8029c5e <__ssvfiscanf_r+0x1de>
 8029ca8:	4629      	mov	r1, r5
 8029caa:	4640      	mov	r0, r8
 8029cac:	f000 f9be 	bl	802a02c <__sccl>
 8029cb0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8029cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029cb6:	9341      	str	r3, [sp, #260]	; 0x104
 8029cb8:	4605      	mov	r5, r0
 8029cba:	2301      	movs	r3, #1
 8029cbc:	e7cf      	b.n	8029c5e <__ssvfiscanf_r+0x1de>
 8029cbe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8029cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029cc4:	9341      	str	r3, [sp, #260]	; 0x104
 8029cc6:	2300      	movs	r3, #0
 8029cc8:	e7c9      	b.n	8029c5e <__ssvfiscanf_r+0x1de>
 8029cca:	2302      	movs	r3, #2
 8029ccc:	e7c7      	b.n	8029c5e <__ssvfiscanf_r+0x1de>
 8029cce:	9841      	ldr	r0, [sp, #260]	; 0x104
 8029cd0:	06c3      	lsls	r3, r0, #27
 8029cd2:	f53f aeff 	bmi.w	8029ad4 <__ssvfiscanf_r+0x54>
 8029cd6:	9b00      	ldr	r3, [sp, #0]
 8029cd8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8029cda:	1d19      	adds	r1, r3, #4
 8029cdc:	9100      	str	r1, [sp, #0]
 8029cde:	681b      	ldr	r3, [r3, #0]
 8029ce0:	07c0      	lsls	r0, r0, #31
 8029ce2:	bf4c      	ite	mi
 8029ce4:	801a      	strhmi	r2, [r3, #0]
 8029ce6:	601a      	strpl	r2, [r3, #0]
 8029ce8:	e6f4      	b.n	8029ad4 <__ssvfiscanf_r+0x54>
 8029cea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8029cec:	4621      	mov	r1, r4
 8029cee:	4630      	mov	r0, r6
 8029cf0:	4798      	blx	r3
 8029cf2:	2800      	cmp	r0, #0
 8029cf4:	d0b7      	beq.n	8029c66 <__ssvfiscanf_r+0x1e6>
 8029cf6:	e79d      	b.n	8029c34 <__ssvfiscanf_r+0x1b4>
 8029cf8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8029cfa:	3201      	adds	r2, #1
 8029cfc:	9245      	str	r2, [sp, #276]	; 0x114
 8029cfe:	6862      	ldr	r2, [r4, #4]
 8029d00:	3a01      	subs	r2, #1
 8029d02:	2a00      	cmp	r2, #0
 8029d04:	6062      	str	r2, [r4, #4]
 8029d06:	dd02      	ble.n	8029d0e <__ssvfiscanf_r+0x28e>
 8029d08:	3301      	adds	r3, #1
 8029d0a:	6023      	str	r3, [r4, #0]
 8029d0c:	e7ae      	b.n	8029c6c <__ssvfiscanf_r+0x1ec>
 8029d0e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8029d10:	4621      	mov	r1, r4
 8029d12:	4630      	mov	r0, r6
 8029d14:	4798      	blx	r3
 8029d16:	2800      	cmp	r0, #0
 8029d18:	d0a8      	beq.n	8029c6c <__ssvfiscanf_r+0x1ec>
 8029d1a:	e78b      	b.n	8029c34 <__ssvfiscanf_r+0x1b4>
 8029d1c:	2b04      	cmp	r3, #4
 8029d1e:	dc06      	bgt.n	8029d2e <__ssvfiscanf_r+0x2ae>
 8029d20:	466b      	mov	r3, sp
 8029d22:	4622      	mov	r2, r4
 8029d24:	a941      	add	r1, sp, #260	; 0x104
 8029d26:	4630      	mov	r0, r6
 8029d28:	f000 f87a 	bl	8029e20 <_scanf_i>
 8029d2c:	e7ac      	b.n	8029c88 <__ssvfiscanf_r+0x208>
 8029d2e:	4b0f      	ldr	r3, [pc, #60]	; (8029d6c <__ssvfiscanf_r+0x2ec>)
 8029d30:	2b00      	cmp	r3, #0
 8029d32:	f43f aecf 	beq.w	8029ad4 <__ssvfiscanf_r+0x54>
 8029d36:	466b      	mov	r3, sp
 8029d38:	4622      	mov	r2, r4
 8029d3a:	a941      	add	r1, sp, #260	; 0x104
 8029d3c:	4630      	mov	r0, r6
 8029d3e:	f3af 8000 	nop.w
 8029d42:	e7a1      	b.n	8029c88 <__ssvfiscanf_r+0x208>
 8029d44:	89a3      	ldrh	r3, [r4, #12]
 8029d46:	f013 0f40 	tst.w	r3, #64	; 0x40
 8029d4a:	bf18      	it	ne
 8029d4c:	f04f 30ff 	movne.w	r0, #4294967295
 8029d50:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8029d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029d58:	9844      	ldr	r0, [sp, #272]	; 0x110
 8029d5a:	e7f9      	b.n	8029d50 <__ssvfiscanf_r+0x2d0>
 8029d5c:	080299cd 	.word	0x080299cd
 8029d60:	08029a47 	.word	0x08029a47
 8029d64:	0802ec81 	.word	0x0802ec81
 8029d68:	0802eec6 	.word	0x0802eec6
 8029d6c:	00000000 	.word	0x00000000

08029d70 <_scanf_chars>:
 8029d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029d74:	4615      	mov	r5, r2
 8029d76:	688a      	ldr	r2, [r1, #8]
 8029d78:	4680      	mov	r8, r0
 8029d7a:	460c      	mov	r4, r1
 8029d7c:	b932      	cbnz	r2, 8029d8c <_scanf_chars+0x1c>
 8029d7e:	698a      	ldr	r2, [r1, #24]
 8029d80:	2a00      	cmp	r2, #0
 8029d82:	bf0c      	ite	eq
 8029d84:	2201      	moveq	r2, #1
 8029d86:	f04f 32ff 	movne.w	r2, #4294967295
 8029d8a:	608a      	str	r2, [r1, #8]
 8029d8c:	6822      	ldr	r2, [r4, #0]
 8029d8e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8029e1c <_scanf_chars+0xac>
 8029d92:	06d1      	lsls	r1, r2, #27
 8029d94:	bf5f      	itttt	pl
 8029d96:	681a      	ldrpl	r2, [r3, #0]
 8029d98:	1d11      	addpl	r1, r2, #4
 8029d9a:	6019      	strpl	r1, [r3, #0]
 8029d9c:	6816      	ldrpl	r6, [r2, #0]
 8029d9e:	2700      	movs	r7, #0
 8029da0:	69a0      	ldr	r0, [r4, #24]
 8029da2:	b188      	cbz	r0, 8029dc8 <_scanf_chars+0x58>
 8029da4:	2801      	cmp	r0, #1
 8029da6:	d107      	bne.n	8029db8 <_scanf_chars+0x48>
 8029da8:	682b      	ldr	r3, [r5, #0]
 8029daa:	781a      	ldrb	r2, [r3, #0]
 8029dac:	6963      	ldr	r3, [r4, #20]
 8029dae:	5c9b      	ldrb	r3, [r3, r2]
 8029db0:	b953      	cbnz	r3, 8029dc8 <_scanf_chars+0x58>
 8029db2:	bb27      	cbnz	r7, 8029dfe <_scanf_chars+0x8e>
 8029db4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029db8:	2802      	cmp	r0, #2
 8029dba:	d120      	bne.n	8029dfe <_scanf_chars+0x8e>
 8029dbc:	682b      	ldr	r3, [r5, #0]
 8029dbe:	781b      	ldrb	r3, [r3, #0]
 8029dc0:	f813 3009 	ldrb.w	r3, [r3, r9]
 8029dc4:	071b      	lsls	r3, r3, #28
 8029dc6:	d41a      	bmi.n	8029dfe <_scanf_chars+0x8e>
 8029dc8:	6823      	ldr	r3, [r4, #0]
 8029dca:	06da      	lsls	r2, r3, #27
 8029dcc:	bf5e      	ittt	pl
 8029dce:	682b      	ldrpl	r3, [r5, #0]
 8029dd0:	781b      	ldrbpl	r3, [r3, #0]
 8029dd2:	f806 3b01 	strbpl.w	r3, [r6], #1
 8029dd6:	682a      	ldr	r2, [r5, #0]
 8029dd8:	686b      	ldr	r3, [r5, #4]
 8029dda:	3201      	adds	r2, #1
 8029ddc:	602a      	str	r2, [r5, #0]
 8029dde:	68a2      	ldr	r2, [r4, #8]
 8029de0:	3b01      	subs	r3, #1
 8029de2:	3a01      	subs	r2, #1
 8029de4:	606b      	str	r3, [r5, #4]
 8029de6:	3701      	adds	r7, #1
 8029de8:	60a2      	str	r2, [r4, #8]
 8029dea:	b142      	cbz	r2, 8029dfe <_scanf_chars+0x8e>
 8029dec:	2b00      	cmp	r3, #0
 8029dee:	dcd7      	bgt.n	8029da0 <_scanf_chars+0x30>
 8029df0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8029df4:	4629      	mov	r1, r5
 8029df6:	4640      	mov	r0, r8
 8029df8:	4798      	blx	r3
 8029dfa:	2800      	cmp	r0, #0
 8029dfc:	d0d0      	beq.n	8029da0 <_scanf_chars+0x30>
 8029dfe:	6823      	ldr	r3, [r4, #0]
 8029e00:	f013 0310 	ands.w	r3, r3, #16
 8029e04:	d105      	bne.n	8029e12 <_scanf_chars+0xa2>
 8029e06:	68e2      	ldr	r2, [r4, #12]
 8029e08:	3201      	adds	r2, #1
 8029e0a:	60e2      	str	r2, [r4, #12]
 8029e0c:	69a2      	ldr	r2, [r4, #24]
 8029e0e:	b102      	cbz	r2, 8029e12 <_scanf_chars+0xa2>
 8029e10:	7033      	strb	r3, [r6, #0]
 8029e12:	6923      	ldr	r3, [r4, #16]
 8029e14:	441f      	add	r7, r3
 8029e16:	6127      	str	r7, [r4, #16]
 8029e18:	2000      	movs	r0, #0
 8029e1a:	e7cb      	b.n	8029db4 <_scanf_chars+0x44>
 8029e1c:	0802ec81 	.word	0x0802ec81

08029e20 <_scanf_i>:
 8029e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029e24:	4698      	mov	r8, r3
 8029e26:	4b74      	ldr	r3, [pc, #464]	; (8029ff8 <_scanf_i+0x1d8>)
 8029e28:	460c      	mov	r4, r1
 8029e2a:	4682      	mov	sl, r0
 8029e2c:	4616      	mov	r6, r2
 8029e2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8029e32:	b087      	sub	sp, #28
 8029e34:	ab03      	add	r3, sp, #12
 8029e36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8029e3a:	4b70      	ldr	r3, [pc, #448]	; (8029ffc <_scanf_i+0x1dc>)
 8029e3c:	69a1      	ldr	r1, [r4, #24]
 8029e3e:	4a70      	ldr	r2, [pc, #448]	; (802a000 <_scanf_i+0x1e0>)
 8029e40:	2903      	cmp	r1, #3
 8029e42:	bf18      	it	ne
 8029e44:	461a      	movne	r2, r3
 8029e46:	68a3      	ldr	r3, [r4, #8]
 8029e48:	9201      	str	r2, [sp, #4]
 8029e4a:	1e5a      	subs	r2, r3, #1
 8029e4c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8029e50:	bf88      	it	hi
 8029e52:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8029e56:	4627      	mov	r7, r4
 8029e58:	bf82      	ittt	hi
 8029e5a:	eb03 0905 	addhi.w	r9, r3, r5
 8029e5e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8029e62:	60a3      	strhi	r3, [r4, #8]
 8029e64:	f857 3b1c 	ldr.w	r3, [r7], #28
 8029e68:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8029e6c:	bf98      	it	ls
 8029e6e:	f04f 0900 	movls.w	r9, #0
 8029e72:	6023      	str	r3, [r4, #0]
 8029e74:	463d      	mov	r5, r7
 8029e76:	f04f 0b00 	mov.w	fp, #0
 8029e7a:	6831      	ldr	r1, [r6, #0]
 8029e7c:	ab03      	add	r3, sp, #12
 8029e7e:	7809      	ldrb	r1, [r1, #0]
 8029e80:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8029e84:	2202      	movs	r2, #2
 8029e86:	f7d6 fa43 	bl	8000310 <memchr>
 8029e8a:	b328      	cbz	r0, 8029ed8 <_scanf_i+0xb8>
 8029e8c:	f1bb 0f01 	cmp.w	fp, #1
 8029e90:	d159      	bne.n	8029f46 <_scanf_i+0x126>
 8029e92:	6862      	ldr	r2, [r4, #4]
 8029e94:	b92a      	cbnz	r2, 8029ea2 <_scanf_i+0x82>
 8029e96:	6822      	ldr	r2, [r4, #0]
 8029e98:	2308      	movs	r3, #8
 8029e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8029e9e:	6063      	str	r3, [r4, #4]
 8029ea0:	6022      	str	r2, [r4, #0]
 8029ea2:	6822      	ldr	r2, [r4, #0]
 8029ea4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8029ea8:	6022      	str	r2, [r4, #0]
 8029eaa:	68a2      	ldr	r2, [r4, #8]
 8029eac:	1e51      	subs	r1, r2, #1
 8029eae:	60a1      	str	r1, [r4, #8]
 8029eb0:	b192      	cbz	r2, 8029ed8 <_scanf_i+0xb8>
 8029eb2:	6832      	ldr	r2, [r6, #0]
 8029eb4:	1c51      	adds	r1, r2, #1
 8029eb6:	6031      	str	r1, [r6, #0]
 8029eb8:	7812      	ldrb	r2, [r2, #0]
 8029eba:	f805 2b01 	strb.w	r2, [r5], #1
 8029ebe:	6872      	ldr	r2, [r6, #4]
 8029ec0:	3a01      	subs	r2, #1
 8029ec2:	2a00      	cmp	r2, #0
 8029ec4:	6072      	str	r2, [r6, #4]
 8029ec6:	dc07      	bgt.n	8029ed8 <_scanf_i+0xb8>
 8029ec8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8029ecc:	4631      	mov	r1, r6
 8029ece:	4650      	mov	r0, sl
 8029ed0:	4790      	blx	r2
 8029ed2:	2800      	cmp	r0, #0
 8029ed4:	f040 8085 	bne.w	8029fe2 <_scanf_i+0x1c2>
 8029ed8:	f10b 0b01 	add.w	fp, fp, #1
 8029edc:	f1bb 0f03 	cmp.w	fp, #3
 8029ee0:	d1cb      	bne.n	8029e7a <_scanf_i+0x5a>
 8029ee2:	6863      	ldr	r3, [r4, #4]
 8029ee4:	b90b      	cbnz	r3, 8029eea <_scanf_i+0xca>
 8029ee6:	230a      	movs	r3, #10
 8029ee8:	6063      	str	r3, [r4, #4]
 8029eea:	6863      	ldr	r3, [r4, #4]
 8029eec:	4945      	ldr	r1, [pc, #276]	; (802a004 <_scanf_i+0x1e4>)
 8029eee:	6960      	ldr	r0, [r4, #20]
 8029ef0:	1ac9      	subs	r1, r1, r3
 8029ef2:	f000 f89b 	bl	802a02c <__sccl>
 8029ef6:	f04f 0b00 	mov.w	fp, #0
 8029efa:	68a3      	ldr	r3, [r4, #8]
 8029efc:	6822      	ldr	r2, [r4, #0]
 8029efe:	2b00      	cmp	r3, #0
 8029f00:	d03d      	beq.n	8029f7e <_scanf_i+0x15e>
 8029f02:	6831      	ldr	r1, [r6, #0]
 8029f04:	6960      	ldr	r0, [r4, #20]
 8029f06:	f891 c000 	ldrb.w	ip, [r1]
 8029f0a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8029f0e:	2800      	cmp	r0, #0
 8029f10:	d035      	beq.n	8029f7e <_scanf_i+0x15e>
 8029f12:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8029f16:	d124      	bne.n	8029f62 <_scanf_i+0x142>
 8029f18:	0510      	lsls	r0, r2, #20
 8029f1a:	d522      	bpl.n	8029f62 <_scanf_i+0x142>
 8029f1c:	f10b 0b01 	add.w	fp, fp, #1
 8029f20:	f1b9 0f00 	cmp.w	r9, #0
 8029f24:	d003      	beq.n	8029f2e <_scanf_i+0x10e>
 8029f26:	3301      	adds	r3, #1
 8029f28:	f109 39ff 	add.w	r9, r9, #4294967295
 8029f2c:	60a3      	str	r3, [r4, #8]
 8029f2e:	6873      	ldr	r3, [r6, #4]
 8029f30:	3b01      	subs	r3, #1
 8029f32:	2b00      	cmp	r3, #0
 8029f34:	6073      	str	r3, [r6, #4]
 8029f36:	dd1b      	ble.n	8029f70 <_scanf_i+0x150>
 8029f38:	6833      	ldr	r3, [r6, #0]
 8029f3a:	3301      	adds	r3, #1
 8029f3c:	6033      	str	r3, [r6, #0]
 8029f3e:	68a3      	ldr	r3, [r4, #8]
 8029f40:	3b01      	subs	r3, #1
 8029f42:	60a3      	str	r3, [r4, #8]
 8029f44:	e7d9      	b.n	8029efa <_scanf_i+0xda>
 8029f46:	f1bb 0f02 	cmp.w	fp, #2
 8029f4a:	d1ae      	bne.n	8029eaa <_scanf_i+0x8a>
 8029f4c:	6822      	ldr	r2, [r4, #0]
 8029f4e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8029f52:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8029f56:	d1bf      	bne.n	8029ed8 <_scanf_i+0xb8>
 8029f58:	2310      	movs	r3, #16
 8029f5a:	6063      	str	r3, [r4, #4]
 8029f5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8029f60:	e7a2      	b.n	8029ea8 <_scanf_i+0x88>
 8029f62:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8029f66:	6022      	str	r2, [r4, #0]
 8029f68:	780b      	ldrb	r3, [r1, #0]
 8029f6a:	f805 3b01 	strb.w	r3, [r5], #1
 8029f6e:	e7de      	b.n	8029f2e <_scanf_i+0x10e>
 8029f70:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8029f74:	4631      	mov	r1, r6
 8029f76:	4650      	mov	r0, sl
 8029f78:	4798      	blx	r3
 8029f7a:	2800      	cmp	r0, #0
 8029f7c:	d0df      	beq.n	8029f3e <_scanf_i+0x11e>
 8029f7e:	6823      	ldr	r3, [r4, #0]
 8029f80:	05d9      	lsls	r1, r3, #23
 8029f82:	d50d      	bpl.n	8029fa0 <_scanf_i+0x180>
 8029f84:	42bd      	cmp	r5, r7
 8029f86:	d909      	bls.n	8029f9c <_scanf_i+0x17c>
 8029f88:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8029f8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8029f90:	4632      	mov	r2, r6
 8029f92:	4650      	mov	r0, sl
 8029f94:	4798      	blx	r3
 8029f96:	f105 39ff 	add.w	r9, r5, #4294967295
 8029f9a:	464d      	mov	r5, r9
 8029f9c:	42bd      	cmp	r5, r7
 8029f9e:	d028      	beq.n	8029ff2 <_scanf_i+0x1d2>
 8029fa0:	6822      	ldr	r2, [r4, #0]
 8029fa2:	f012 0210 	ands.w	r2, r2, #16
 8029fa6:	d113      	bne.n	8029fd0 <_scanf_i+0x1b0>
 8029fa8:	702a      	strb	r2, [r5, #0]
 8029faa:	6863      	ldr	r3, [r4, #4]
 8029fac:	9e01      	ldr	r6, [sp, #4]
 8029fae:	4639      	mov	r1, r7
 8029fb0:	4650      	mov	r0, sl
 8029fb2:	47b0      	blx	r6
 8029fb4:	f8d8 3000 	ldr.w	r3, [r8]
 8029fb8:	6821      	ldr	r1, [r4, #0]
 8029fba:	1d1a      	adds	r2, r3, #4
 8029fbc:	f8c8 2000 	str.w	r2, [r8]
 8029fc0:	f011 0f20 	tst.w	r1, #32
 8029fc4:	681b      	ldr	r3, [r3, #0]
 8029fc6:	d00f      	beq.n	8029fe8 <_scanf_i+0x1c8>
 8029fc8:	6018      	str	r0, [r3, #0]
 8029fca:	68e3      	ldr	r3, [r4, #12]
 8029fcc:	3301      	adds	r3, #1
 8029fce:	60e3      	str	r3, [r4, #12]
 8029fd0:	1bed      	subs	r5, r5, r7
 8029fd2:	44ab      	add	fp, r5
 8029fd4:	6925      	ldr	r5, [r4, #16]
 8029fd6:	445d      	add	r5, fp
 8029fd8:	6125      	str	r5, [r4, #16]
 8029fda:	2000      	movs	r0, #0
 8029fdc:	b007      	add	sp, #28
 8029fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029fe2:	f04f 0b00 	mov.w	fp, #0
 8029fe6:	e7ca      	b.n	8029f7e <_scanf_i+0x15e>
 8029fe8:	07ca      	lsls	r2, r1, #31
 8029fea:	bf4c      	ite	mi
 8029fec:	8018      	strhmi	r0, [r3, #0]
 8029fee:	6018      	strpl	r0, [r3, #0]
 8029ff0:	e7eb      	b.n	8029fca <_scanf_i+0x1aa>
 8029ff2:	2001      	movs	r0, #1
 8029ff4:	e7f2      	b.n	8029fdc <_scanf_i+0x1bc>
 8029ff6:	bf00      	nop
 8029ff8:	0802ea90 	.word	0x0802ea90
 8029ffc:	0802a199 	.word	0x0802a199
 802a000:	0802789d 	.word	0x0802789d
 802a004:	0802f8c5 	.word	0x0802f8c5

0802a008 <_read_r>:
 802a008:	b538      	push	{r3, r4, r5, lr}
 802a00a:	4d07      	ldr	r5, [pc, #28]	; (802a028 <_read_r+0x20>)
 802a00c:	4604      	mov	r4, r0
 802a00e:	4608      	mov	r0, r1
 802a010:	4611      	mov	r1, r2
 802a012:	2200      	movs	r2, #0
 802a014:	602a      	str	r2, [r5, #0]
 802a016:	461a      	mov	r2, r3
 802a018:	f7d6 ff90 	bl	8000f3c <_read>
 802a01c:	1c43      	adds	r3, r0, #1
 802a01e:	d102      	bne.n	802a026 <_read_r+0x1e>
 802a020:	682b      	ldr	r3, [r5, #0]
 802a022:	b103      	cbz	r3, 802a026 <_read_r+0x1e>
 802a024:	6023      	str	r3, [r4, #0]
 802a026:	bd38      	pop	{r3, r4, r5, pc}
 802a028:	240086b8 	.word	0x240086b8

0802a02c <__sccl>:
 802a02c:	b570      	push	{r4, r5, r6, lr}
 802a02e:	780b      	ldrb	r3, [r1, #0]
 802a030:	4604      	mov	r4, r0
 802a032:	2b5e      	cmp	r3, #94	; 0x5e
 802a034:	bf0b      	itete	eq
 802a036:	784b      	ldrbeq	r3, [r1, #1]
 802a038:	1c48      	addne	r0, r1, #1
 802a03a:	1c88      	addeq	r0, r1, #2
 802a03c:	2200      	movne	r2, #0
 802a03e:	bf08      	it	eq
 802a040:	2201      	moveq	r2, #1
 802a042:	1e61      	subs	r1, r4, #1
 802a044:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 802a048:	f801 2f01 	strb.w	r2, [r1, #1]!
 802a04c:	42a9      	cmp	r1, r5
 802a04e:	d1fb      	bne.n	802a048 <__sccl+0x1c>
 802a050:	b90b      	cbnz	r3, 802a056 <__sccl+0x2a>
 802a052:	3801      	subs	r0, #1
 802a054:	bd70      	pop	{r4, r5, r6, pc}
 802a056:	f082 0101 	eor.w	r1, r2, #1
 802a05a:	54e1      	strb	r1, [r4, r3]
 802a05c:	1c42      	adds	r2, r0, #1
 802a05e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 802a062:	2d2d      	cmp	r5, #45	; 0x2d
 802a064:	f102 36ff 	add.w	r6, r2, #4294967295
 802a068:	4610      	mov	r0, r2
 802a06a:	d006      	beq.n	802a07a <__sccl+0x4e>
 802a06c:	2d5d      	cmp	r5, #93	; 0x5d
 802a06e:	d0f1      	beq.n	802a054 <__sccl+0x28>
 802a070:	b90d      	cbnz	r5, 802a076 <__sccl+0x4a>
 802a072:	4630      	mov	r0, r6
 802a074:	e7ee      	b.n	802a054 <__sccl+0x28>
 802a076:	462b      	mov	r3, r5
 802a078:	e7ef      	b.n	802a05a <__sccl+0x2e>
 802a07a:	7816      	ldrb	r6, [r2, #0]
 802a07c:	2e5d      	cmp	r6, #93	; 0x5d
 802a07e:	d0fa      	beq.n	802a076 <__sccl+0x4a>
 802a080:	42b3      	cmp	r3, r6
 802a082:	dcf8      	bgt.n	802a076 <__sccl+0x4a>
 802a084:	4618      	mov	r0, r3
 802a086:	3001      	adds	r0, #1
 802a088:	4286      	cmp	r6, r0
 802a08a:	5421      	strb	r1, [r4, r0]
 802a08c:	dcfb      	bgt.n	802a086 <__sccl+0x5a>
 802a08e:	43d8      	mvns	r0, r3
 802a090:	4430      	add	r0, r6
 802a092:	1c5d      	adds	r5, r3, #1
 802a094:	42b3      	cmp	r3, r6
 802a096:	bfa8      	it	ge
 802a098:	2000      	movge	r0, #0
 802a09a:	182b      	adds	r3, r5, r0
 802a09c:	3202      	adds	r2, #2
 802a09e:	e7de      	b.n	802a05e <__sccl+0x32>

0802a0a0 <_strtoul_l.isra.0>:
 802a0a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802a0a4:	4e3b      	ldr	r6, [pc, #236]	; (802a194 <_strtoul_l.isra.0+0xf4>)
 802a0a6:	4686      	mov	lr, r0
 802a0a8:	468c      	mov	ip, r1
 802a0aa:	4660      	mov	r0, ip
 802a0ac:	f81c 4b01 	ldrb.w	r4, [ip], #1
 802a0b0:	5da5      	ldrb	r5, [r4, r6]
 802a0b2:	f015 0508 	ands.w	r5, r5, #8
 802a0b6:	d1f8      	bne.n	802a0aa <_strtoul_l.isra.0+0xa>
 802a0b8:	2c2d      	cmp	r4, #45	; 0x2d
 802a0ba:	d134      	bne.n	802a126 <_strtoul_l.isra.0+0x86>
 802a0bc:	f89c 4000 	ldrb.w	r4, [ip]
 802a0c0:	f04f 0801 	mov.w	r8, #1
 802a0c4:	f100 0c02 	add.w	ip, r0, #2
 802a0c8:	2b00      	cmp	r3, #0
 802a0ca:	d05e      	beq.n	802a18a <_strtoul_l.isra.0+0xea>
 802a0cc:	2b10      	cmp	r3, #16
 802a0ce:	d10c      	bne.n	802a0ea <_strtoul_l.isra.0+0x4a>
 802a0d0:	2c30      	cmp	r4, #48	; 0x30
 802a0d2:	d10a      	bne.n	802a0ea <_strtoul_l.isra.0+0x4a>
 802a0d4:	f89c 0000 	ldrb.w	r0, [ip]
 802a0d8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 802a0dc:	2858      	cmp	r0, #88	; 0x58
 802a0de:	d14f      	bne.n	802a180 <_strtoul_l.isra.0+0xe0>
 802a0e0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 802a0e4:	2310      	movs	r3, #16
 802a0e6:	f10c 0c02 	add.w	ip, ip, #2
 802a0ea:	f04f 37ff 	mov.w	r7, #4294967295
 802a0ee:	2500      	movs	r5, #0
 802a0f0:	fbb7 f7f3 	udiv	r7, r7, r3
 802a0f4:	fb03 f907 	mul.w	r9, r3, r7
 802a0f8:	ea6f 0909 	mvn.w	r9, r9
 802a0fc:	4628      	mov	r0, r5
 802a0fe:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 802a102:	2e09      	cmp	r6, #9
 802a104:	d818      	bhi.n	802a138 <_strtoul_l.isra.0+0x98>
 802a106:	4634      	mov	r4, r6
 802a108:	42a3      	cmp	r3, r4
 802a10a:	dd24      	ble.n	802a156 <_strtoul_l.isra.0+0xb6>
 802a10c:	2d00      	cmp	r5, #0
 802a10e:	db1f      	blt.n	802a150 <_strtoul_l.isra.0+0xb0>
 802a110:	4287      	cmp	r7, r0
 802a112:	d31d      	bcc.n	802a150 <_strtoul_l.isra.0+0xb0>
 802a114:	d101      	bne.n	802a11a <_strtoul_l.isra.0+0x7a>
 802a116:	45a1      	cmp	r9, r4
 802a118:	db1a      	blt.n	802a150 <_strtoul_l.isra.0+0xb0>
 802a11a:	fb00 4003 	mla	r0, r0, r3, r4
 802a11e:	2501      	movs	r5, #1
 802a120:	f81c 4b01 	ldrb.w	r4, [ip], #1
 802a124:	e7eb      	b.n	802a0fe <_strtoul_l.isra.0+0x5e>
 802a126:	2c2b      	cmp	r4, #43	; 0x2b
 802a128:	bf08      	it	eq
 802a12a:	f89c 4000 	ldrbeq.w	r4, [ip]
 802a12e:	46a8      	mov	r8, r5
 802a130:	bf08      	it	eq
 802a132:	f100 0c02 	addeq.w	ip, r0, #2
 802a136:	e7c7      	b.n	802a0c8 <_strtoul_l.isra.0+0x28>
 802a138:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 802a13c:	2e19      	cmp	r6, #25
 802a13e:	d801      	bhi.n	802a144 <_strtoul_l.isra.0+0xa4>
 802a140:	3c37      	subs	r4, #55	; 0x37
 802a142:	e7e1      	b.n	802a108 <_strtoul_l.isra.0+0x68>
 802a144:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 802a148:	2e19      	cmp	r6, #25
 802a14a:	d804      	bhi.n	802a156 <_strtoul_l.isra.0+0xb6>
 802a14c:	3c57      	subs	r4, #87	; 0x57
 802a14e:	e7db      	b.n	802a108 <_strtoul_l.isra.0+0x68>
 802a150:	f04f 35ff 	mov.w	r5, #4294967295
 802a154:	e7e4      	b.n	802a120 <_strtoul_l.isra.0+0x80>
 802a156:	2d00      	cmp	r5, #0
 802a158:	da07      	bge.n	802a16a <_strtoul_l.isra.0+0xca>
 802a15a:	2322      	movs	r3, #34	; 0x22
 802a15c:	f8ce 3000 	str.w	r3, [lr]
 802a160:	f04f 30ff 	mov.w	r0, #4294967295
 802a164:	b942      	cbnz	r2, 802a178 <_strtoul_l.isra.0+0xd8>
 802a166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802a16a:	f1b8 0f00 	cmp.w	r8, #0
 802a16e:	d000      	beq.n	802a172 <_strtoul_l.isra.0+0xd2>
 802a170:	4240      	negs	r0, r0
 802a172:	2a00      	cmp	r2, #0
 802a174:	d0f7      	beq.n	802a166 <_strtoul_l.isra.0+0xc6>
 802a176:	b10d      	cbz	r5, 802a17c <_strtoul_l.isra.0+0xdc>
 802a178:	f10c 31ff 	add.w	r1, ip, #4294967295
 802a17c:	6011      	str	r1, [r2, #0]
 802a17e:	e7f2      	b.n	802a166 <_strtoul_l.isra.0+0xc6>
 802a180:	2430      	movs	r4, #48	; 0x30
 802a182:	2b00      	cmp	r3, #0
 802a184:	d1b1      	bne.n	802a0ea <_strtoul_l.isra.0+0x4a>
 802a186:	2308      	movs	r3, #8
 802a188:	e7af      	b.n	802a0ea <_strtoul_l.isra.0+0x4a>
 802a18a:	2c30      	cmp	r4, #48	; 0x30
 802a18c:	d0a2      	beq.n	802a0d4 <_strtoul_l.isra.0+0x34>
 802a18e:	230a      	movs	r3, #10
 802a190:	e7ab      	b.n	802a0ea <_strtoul_l.isra.0+0x4a>
 802a192:	bf00      	nop
 802a194:	0802ec81 	.word	0x0802ec81

0802a198 <_strtoul_r>:
 802a198:	f7ff bf82 	b.w	802a0a0 <_strtoul_l.isra.0>

0802a19c <strtoul>:
 802a19c:	4613      	mov	r3, r2
 802a19e:	460a      	mov	r2, r1
 802a1a0:	4601      	mov	r1, r0
 802a1a2:	4802      	ldr	r0, [pc, #8]	; (802a1ac <strtoul+0x10>)
 802a1a4:	6800      	ldr	r0, [r0, #0]
 802a1a6:	f7ff bf7b 	b.w	802a0a0 <_strtoul_l.isra.0>
 802a1aa:	bf00      	nop
 802a1ac:	240000bc 	.word	0x240000bc

0802a1b0 <__submore>:
 802a1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a1b4:	460c      	mov	r4, r1
 802a1b6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802a1b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802a1bc:	4299      	cmp	r1, r3
 802a1be:	d11d      	bne.n	802a1fc <__submore+0x4c>
 802a1c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802a1c4:	f7fc f890 	bl	80262e8 <_malloc_r>
 802a1c8:	b918      	cbnz	r0, 802a1d2 <__submore+0x22>
 802a1ca:	f04f 30ff 	mov.w	r0, #4294967295
 802a1ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a1d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802a1d6:	63a3      	str	r3, [r4, #56]	; 0x38
 802a1d8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 802a1dc:	6360      	str	r0, [r4, #52]	; 0x34
 802a1de:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802a1e2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 802a1e6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 802a1ea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802a1ee:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 802a1f2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 802a1f6:	6020      	str	r0, [r4, #0]
 802a1f8:	2000      	movs	r0, #0
 802a1fa:	e7e8      	b.n	802a1ce <__submore+0x1e>
 802a1fc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802a1fe:	0077      	lsls	r7, r6, #1
 802a200:	463a      	mov	r2, r7
 802a202:	f7ff fa61 	bl	80296c8 <_realloc_r>
 802a206:	4605      	mov	r5, r0
 802a208:	2800      	cmp	r0, #0
 802a20a:	d0de      	beq.n	802a1ca <__submore+0x1a>
 802a20c:	eb00 0806 	add.w	r8, r0, r6
 802a210:	4601      	mov	r1, r0
 802a212:	4632      	mov	r2, r6
 802a214:	4640      	mov	r0, r8
 802a216:	f7fb ffd7 	bl	80261c8 <memcpy>
 802a21a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802a21e:	f8c4 8000 	str.w	r8, [r4]
 802a222:	e7e9      	b.n	802a1f8 <__submore+0x48>

0802a224 <abort>:
 802a224:	b508      	push	{r3, lr}
 802a226:	2006      	movs	r0, #6
 802a228:	f000 f874 	bl	802a314 <raise>
 802a22c:	2001      	movs	r0, #1
 802a22e:	f7d6 fe7b 	bl	8000f28 <_exit>
	...

0802a234 <__env_lock>:
 802a234:	4801      	ldr	r0, [pc, #4]	; (802a23c <__env_lock+0x8>)
 802a236:	f7fb bfa5 	b.w	8026184 <__retarget_lock_acquire_recursive>
 802a23a:	bf00      	nop
 802a23c:	2400a4ba 	.word	0x2400a4ba

0802a240 <__env_unlock>:
 802a240:	4801      	ldr	r0, [pc, #4]	; (802a248 <__env_unlock+0x8>)
 802a242:	f7fb bfa1 	b.w	8026188 <__retarget_lock_release_recursive>
 802a246:	bf00      	nop
 802a248:	2400a4ba 	.word	0x2400a4ba

0802a24c <_fstat_r>:
 802a24c:	b538      	push	{r3, r4, r5, lr}
 802a24e:	4d07      	ldr	r5, [pc, #28]	; (802a26c <_fstat_r+0x20>)
 802a250:	2300      	movs	r3, #0
 802a252:	4604      	mov	r4, r0
 802a254:	4608      	mov	r0, r1
 802a256:	4611      	mov	r1, r2
 802a258:	602b      	str	r3, [r5, #0]
 802a25a:	f7d6 feb4 	bl	8000fc6 <_fstat>
 802a25e:	1c43      	adds	r3, r0, #1
 802a260:	d102      	bne.n	802a268 <_fstat_r+0x1c>
 802a262:	682b      	ldr	r3, [r5, #0]
 802a264:	b103      	cbz	r3, 802a268 <_fstat_r+0x1c>
 802a266:	6023      	str	r3, [r4, #0]
 802a268:	bd38      	pop	{r3, r4, r5, pc}
 802a26a:	bf00      	nop
 802a26c:	240086b8 	.word	0x240086b8

0802a270 <_isatty_r>:
 802a270:	b538      	push	{r3, r4, r5, lr}
 802a272:	4d06      	ldr	r5, [pc, #24]	; (802a28c <_isatty_r+0x1c>)
 802a274:	2300      	movs	r3, #0
 802a276:	4604      	mov	r4, r0
 802a278:	4608      	mov	r0, r1
 802a27a:	602b      	str	r3, [r5, #0]
 802a27c:	f7d6 feb3 	bl	8000fe6 <_isatty>
 802a280:	1c43      	adds	r3, r0, #1
 802a282:	d102      	bne.n	802a28a <_isatty_r+0x1a>
 802a284:	682b      	ldr	r3, [r5, #0]
 802a286:	b103      	cbz	r3, 802a28a <_isatty_r+0x1a>
 802a288:	6023      	str	r3, [r4, #0]
 802a28a:	bd38      	pop	{r3, r4, r5, pc}
 802a28c:	240086b8 	.word	0x240086b8

0802a290 <__ascii_mbtowc>:
 802a290:	b082      	sub	sp, #8
 802a292:	b901      	cbnz	r1, 802a296 <__ascii_mbtowc+0x6>
 802a294:	a901      	add	r1, sp, #4
 802a296:	b142      	cbz	r2, 802a2aa <__ascii_mbtowc+0x1a>
 802a298:	b14b      	cbz	r3, 802a2ae <__ascii_mbtowc+0x1e>
 802a29a:	7813      	ldrb	r3, [r2, #0]
 802a29c:	600b      	str	r3, [r1, #0]
 802a29e:	7812      	ldrb	r2, [r2, #0]
 802a2a0:	1e10      	subs	r0, r2, #0
 802a2a2:	bf18      	it	ne
 802a2a4:	2001      	movne	r0, #1
 802a2a6:	b002      	add	sp, #8
 802a2a8:	4770      	bx	lr
 802a2aa:	4610      	mov	r0, r2
 802a2ac:	e7fb      	b.n	802a2a6 <__ascii_mbtowc+0x16>
 802a2ae:	f06f 0001 	mvn.w	r0, #1
 802a2b2:	e7f8      	b.n	802a2a6 <__ascii_mbtowc+0x16>

0802a2b4 <_malloc_usable_size_r>:
 802a2b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802a2b8:	1f18      	subs	r0, r3, #4
 802a2ba:	2b00      	cmp	r3, #0
 802a2bc:	bfbc      	itt	lt
 802a2be:	580b      	ldrlt	r3, [r1, r0]
 802a2c0:	18c0      	addlt	r0, r0, r3
 802a2c2:	4770      	bx	lr

0802a2c4 <_raise_r>:
 802a2c4:	291f      	cmp	r1, #31
 802a2c6:	b538      	push	{r3, r4, r5, lr}
 802a2c8:	4604      	mov	r4, r0
 802a2ca:	460d      	mov	r5, r1
 802a2cc:	d904      	bls.n	802a2d8 <_raise_r+0x14>
 802a2ce:	2316      	movs	r3, #22
 802a2d0:	6003      	str	r3, [r0, #0]
 802a2d2:	f04f 30ff 	mov.w	r0, #4294967295
 802a2d6:	bd38      	pop	{r3, r4, r5, pc}
 802a2d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802a2da:	b112      	cbz	r2, 802a2e2 <_raise_r+0x1e>
 802a2dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802a2e0:	b94b      	cbnz	r3, 802a2f6 <_raise_r+0x32>
 802a2e2:	4620      	mov	r0, r4
 802a2e4:	f000 f830 	bl	802a348 <_getpid_r>
 802a2e8:	462a      	mov	r2, r5
 802a2ea:	4601      	mov	r1, r0
 802a2ec:	4620      	mov	r0, r4
 802a2ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a2f2:	f000 b817 	b.w	802a324 <_kill_r>
 802a2f6:	2b01      	cmp	r3, #1
 802a2f8:	d00a      	beq.n	802a310 <_raise_r+0x4c>
 802a2fa:	1c59      	adds	r1, r3, #1
 802a2fc:	d103      	bne.n	802a306 <_raise_r+0x42>
 802a2fe:	2316      	movs	r3, #22
 802a300:	6003      	str	r3, [r0, #0]
 802a302:	2001      	movs	r0, #1
 802a304:	e7e7      	b.n	802a2d6 <_raise_r+0x12>
 802a306:	2400      	movs	r4, #0
 802a308:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802a30c:	4628      	mov	r0, r5
 802a30e:	4798      	blx	r3
 802a310:	2000      	movs	r0, #0
 802a312:	e7e0      	b.n	802a2d6 <_raise_r+0x12>

0802a314 <raise>:
 802a314:	4b02      	ldr	r3, [pc, #8]	; (802a320 <raise+0xc>)
 802a316:	4601      	mov	r1, r0
 802a318:	6818      	ldr	r0, [r3, #0]
 802a31a:	f7ff bfd3 	b.w	802a2c4 <_raise_r>
 802a31e:	bf00      	nop
 802a320:	240000bc 	.word	0x240000bc

0802a324 <_kill_r>:
 802a324:	b538      	push	{r3, r4, r5, lr}
 802a326:	4d07      	ldr	r5, [pc, #28]	; (802a344 <_kill_r+0x20>)
 802a328:	2300      	movs	r3, #0
 802a32a:	4604      	mov	r4, r0
 802a32c:	4608      	mov	r0, r1
 802a32e:	4611      	mov	r1, r2
 802a330:	602b      	str	r3, [r5, #0]
 802a332:	f7d6 fde7 	bl	8000f04 <_kill>
 802a336:	1c43      	adds	r3, r0, #1
 802a338:	d102      	bne.n	802a340 <_kill_r+0x1c>
 802a33a:	682b      	ldr	r3, [r5, #0]
 802a33c:	b103      	cbz	r3, 802a340 <_kill_r+0x1c>
 802a33e:	6023      	str	r3, [r4, #0]
 802a340:	bd38      	pop	{r3, r4, r5, pc}
 802a342:	bf00      	nop
 802a344:	240086b8 	.word	0x240086b8

0802a348 <_getpid_r>:
 802a348:	f7d6 bdd4 	b.w	8000ef4 <_getpid>

0802a34c <__ascii_wctomb>:
 802a34c:	b149      	cbz	r1, 802a362 <__ascii_wctomb+0x16>
 802a34e:	2aff      	cmp	r2, #255	; 0xff
 802a350:	bf85      	ittet	hi
 802a352:	238a      	movhi	r3, #138	; 0x8a
 802a354:	6003      	strhi	r3, [r0, #0]
 802a356:	700a      	strbls	r2, [r1, #0]
 802a358:	f04f 30ff 	movhi.w	r0, #4294967295
 802a35c:	bf98      	it	ls
 802a35e:	2001      	movls	r0, #1
 802a360:	4770      	bx	lr
 802a362:	4608      	mov	r0, r1
 802a364:	4770      	bx	lr
	...

0802a368 <_init>:
 802a368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a36a:	bf00      	nop
 802a36c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a36e:	bc08      	pop	{r3}
 802a370:	469e      	mov	lr, r3
 802a372:	4770      	bx	lr

0802a374 <_fini>:
 802a374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a376:	bf00      	nop
 802a378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a37a:	bc08      	pop	{r3}
 802a37c:	469e      	mov	lr, r3
 802a37e:	4770      	bx	lr


Dicom_Datalogger_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023c30  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002430  08023ed0  08023ed0  00033ed0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026300  08026300  00040304  2**0
                  CONTENTS
  4 .ARM          00000008  08026300  08026300  00036300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026308  08026308  00040304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08026308  08026308  00036308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802630c  0802630c  0003630c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000304  24000000  08026310  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001ba48  24000308  08026614  00040308  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2401bd50  08026614  0004bd50  2**0
                  ALLOC
 11 .lwip_sec     00000200  30000000  08026614  00050000  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00040304  2**0
                  CONTENTS, READONLY
 13 .debug_info   0006895a  00000000  00000000  00040332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000d27b  00000000  00000000  000a8c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004160  00000000  00000000  000b5f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003d78  00000000  00000000  000ba068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0005e28c  00000000  00000000  000bdde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0006abde  00000000  00000000  0011c06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001e97a6  00000000  00000000  00186c4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  003703f0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00011fe4  00000000  00000000  00370440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000308 	.word	0x24000308
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08023eb8 	.word	0x08023eb8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400030c 	.word	0x2400030c
 80002dc:	08023eb8 	.word	0x08023eb8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3f      	ldr	r3, [pc, #252]	; (8000798 <SystemInit+0x104>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3e      	ldr	r2, [pc, #248]	; (8000798 <SystemInit+0x104>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b3b      	ldr	r3, [pc, #236]	; (8000798 <SystemInit+0x104>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a3a      	ldr	r2, [pc, #232]	; (8000798 <SystemInit+0x104>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b39      	ldr	r3, [pc, #228]	; (800079c <SystemInit+0x108>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b36      	ldr	r3, [pc, #216]	; (800079c <SystemInit+0x108>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a34      	ldr	r2, [pc, #208]	; (800079c <SystemInit+0x108>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b33      	ldr	r3, [pc, #204]	; (80007a0 <SystemInit+0x10c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a32      	ldr	r2, [pc, #200]	; (80007a0 <SystemInit+0x10c>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b30      	ldr	r3, [pc, #192]	; (80007a0 <SystemInit+0x10c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2f      	ldr	r3, [pc, #188]	; (80007a0 <SystemInit+0x10c>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492e      	ldr	r1, [pc, #184]	; (80007a0 <SystemInit+0x10c>)
 80006e8:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <SystemInit+0x110>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b2b      	ldr	r3, [pc, #172]	; (800079c <SystemInit+0x108>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b28      	ldr	r3, [pc, #160]	; (800079c <SystemInit+0x108>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a26      	ldr	r2, [pc, #152]	; (800079c <SystemInit+0x108>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <SystemInit+0x10c>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b23      	ldr	r3, [pc, #140]	; (80007a0 <SystemInit+0x10c>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <SystemInit+0x10c>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 800071e:	4a22      	ldr	r2, [pc, #136]	; (80007a8 <SystemInit+0x114>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <SystemInit+0x10c>)
 8000724:	4a21      	ldr	r2, [pc, #132]	; (80007ac <SystemInit+0x118>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <SystemInit+0x10c>)
 800072a:	4a21      	ldr	r2, [pc, #132]	; (80007b0 <SystemInit+0x11c>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <SystemInit+0x10c>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <SystemInit+0x10c>)
 8000736:	4a1e      	ldr	r2, [pc, #120]	; (80007b0 <SystemInit+0x11c>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <SystemInit+0x10c>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <SystemInit+0x10c>)
 8000742:	4a1b      	ldr	r2, [pc, #108]	; (80007b0 <SystemInit+0x11c>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <SystemInit+0x10c>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <SystemInit+0x10c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a13      	ldr	r2, [pc, #76]	; (80007a0 <SystemInit+0x10c>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x10c>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <SystemInit+0x120>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a14      	ldr	r2, [pc, #80]	; (80007b4 <SystemInit+0x120>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <SystemInit+0x124>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <SystemInit+0x128>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <SystemInit+0x12c>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <SystemInit+0x130>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <SystemInit+0x104>)
 8000788:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800078c:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000ed00 	.word	0xe000ed00
 800079c:	52002000 	.word	0x52002000
 80007a0:	58024400 	.word	0x58024400
 80007a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a8:	02020200 	.word	0x02020200
 80007ac:	01ff0000 	.word	0x01ff0000
 80007b0:	01010280 	.word	0x01010280
 80007b4:	580000c0 	.word	0x580000c0
 80007b8:	5c001000 	.word	0x5c001000
 80007bc:	ffff0000 	.word	0xffff0000
 80007c0:	51008108 	.word	0x51008108
 80007c4:	52004000 	.word	0x52004000

080007c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	4a07      	ldr	r2, [pc, #28]	; (80007f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80007d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	4a06      	ldr	r2, [pc, #24]	; (80007f8 <vApplicationGetIdleTaskMemory+0x30>)
 80007de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80007e8:	bf00      	nop
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	24000324 	.word	0x24000324
 80007f8:	240003d8 	.word	0x240003d8

080007fc <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	4a07      	ldr	r2, [pc, #28]	; (8000828 <vApplicationGetTimerTaskMemory+0x2c>)
 800080c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	4a06      	ldr	r2, [pc, #24]	; (800082c <vApplicationGetTimerTaskMemory+0x30>)
 8000812:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	f44f 7280 	mov.w	r2, #256	; 0x100
 800081a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800081c:	bf00      	nop
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	24000bd8 	.word	0x24000bd8
 800082c:	24000c8c 	.word	0x24000c8c

08000830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000830:	b5b0      	push	{r4, r5, r7, lr}
 8000832:	b08c      	sub	sp, #48	; 0x30
 8000834:	af00      	add	r7, sp, #0
	int32_t timeout;

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 8000836:	f000 f94f 	bl	8000ad8 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800083a:	4b65      	ldr	r3, [pc, #404]	; (80009d0 <main+0x1a0>)
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000842:	2b00      	cmp	r3, #0
 8000844:	d11b      	bne.n	800087e <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000846:	f3bf 8f4f 	dsb	sy
}
 800084a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800084c:	f3bf 8f6f 	isb	sy
}
 8000850:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000852:	4b5f      	ldr	r3, [pc, #380]	; (80009d0 <main+0x1a0>)
 8000854:	2200      	movs	r2, #0
 8000856:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800085a:	f3bf 8f4f 	dsb	sy
}
 800085e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000860:	f3bf 8f6f 	isb	sy
}
 8000864:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000866:	4b5a      	ldr	r3, [pc, #360]	; (80009d0 <main+0x1a0>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	4a59      	ldr	r2, [pc, #356]	; (80009d0 <main+0x1a0>)
 800086c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000870:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000872:	f3bf 8f4f 	dsb	sy
}
 8000876:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000878:	f3bf 8f6f 	isb	sy
}
 800087c:	e000      	b.n	8000880 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800087e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000880:	4b53      	ldr	r3, [pc, #332]	; (80009d0 <main+0x1a0>)
 8000882:	695b      	ldr	r3, [r3, #20]
 8000884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000888:	2b00      	cmp	r3, #0
 800088a:	d138      	bne.n	80008fe <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800088c:	4b50      	ldr	r3, [pc, #320]	; (80009d0 <main+0x1a0>)
 800088e:	2200      	movs	r2, #0
 8000890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000894:	f3bf 8f4f 	dsb	sy
}
 8000898:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800089a:	4b4d      	ldr	r3, [pc, #308]	; (80009d0 <main+0x1a0>)
 800089c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008a4:	0b5b      	lsrs	r3, r3, #13
 80008a6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ae:	08db      	lsrs	r3, r3, #3
 80008b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008b4:	623b      	str	r3, [r7, #32]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b8:	015a      	lsls	r2, r3, #5
 80008ba:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80008be:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80008c0:	6a3a      	ldr	r2, [r7, #32]
 80008c2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008c4:	4942      	ldr	r1, [pc, #264]	; (80009d0 <main+0x1a0>)
 80008c6:	4313      	orrs	r3, r2
 80008c8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008cc:	6a3b      	ldr	r3, [r7, #32]
 80008ce:	1e5a      	subs	r2, r3, #1
 80008d0:	623a      	str	r2, [r7, #32]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d1ef      	bne.n	80008b6 <main+0x86>
    } while(sets-- != 0U);
 80008d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d8:	1e5a      	subs	r2, r3, #1
 80008da:	627a      	str	r2, [r7, #36]	; 0x24
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d1e5      	bne.n	80008ac <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80008e0:	f3bf 8f4f 	dsb	sy
}
 80008e4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008e6:	4b3a      	ldr	r3, [pc, #232]	; (80009d0 <main+0x1a0>)
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	4a39      	ldr	r2, [pc, #228]	; (80009d0 <main+0x1a0>)
 80008ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008f0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008f2:	f3bf 8f4f 	dsb	sy
}
 80008f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008f8:	f3bf 8f6f 	isb	sy
}
 80008fc:	e000      	b.n	8000900 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008fe:	bf00      	nop

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();

	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000900:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000904:	62fb      	str	r3, [r7, #44]	; 0x2c
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000906:	bf00      	nop
 8000908:	4b32      	ldr	r3, [pc, #200]	; (80009d4 <main+0x1a4>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000910:	2b00      	cmp	r3, #0
 8000912:	d004      	beq.n	800091e <main+0xee>
 8000914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000916:	1e5a      	subs	r2, r3, #1
 8000918:	62fa      	str	r2, [r7, #44]	; 0x2c
 800091a:	2b00      	cmp	r3, #0
 800091c:	dcf4      	bgt.n	8000908 <main+0xd8>
	{
//		Error_Handler();
	}
	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800091e:	f000 fbc3 	bl	80010a8 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000922:	f000 f85f 	bl	80009e4 <SystemClock_Config>

	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000926:	4b2b      	ldr	r3, [pc, #172]	; (80009d4 <main+0x1a4>)
 8000928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092c:	4a29      	ldr	r2, [pc, #164]	; (80009d4 <main+0x1a4>)
 800092e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000932:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000936:	4b27      	ldr	r3, [pc, #156]	; (80009d4 <main+0x1a4>)
 8000938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000944:	2000      	movs	r0, #0
 8000946:	f002 fbd5 	bl	80030f4 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 800094a:	2100      	movs	r1, #0
 800094c:	2000      	movs	r0, #0
 800094e:	f002 fbeb 	bl	8003128 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000952:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000958:	bf00      	nop
 800095a:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <main+0x1a4>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000962:	2b00      	cmp	r3, #0
 8000964:	d104      	bne.n	8000970 <main+0x140>
 8000966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000968:	1e5a      	subs	r2, r3, #1
 800096a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800096c:	2b00      	cmp	r3, #0
 800096e:	dcf4      	bgt.n	800095a <main+0x12a>
	if ( timeout < 0 )
	{
//		Error_Handler();
	}

	MX_GPIO_Init();
 8000970:	f01d f808 	bl	801d984 <MX_GPIO_Init>
	MX_SPI5_Init();
 8000974:	f01d fdc6 	bl	801e504 <MX_SPI5_Init>
	MX_SPI4_Init();
 8000978:	f01d fd80 	bl	801e47c <MX_SPI4_Init>
	MX_RTC_Init();
 800097c:	f01d faea 	bl	801df54 <MX_RTC_Init>
	MX_TIM2_Init();
 8000980:	f01d ff74 	bl	801e86c <MX_TIM2_Init>
	MX_I2C4_Init();
 8000984:	f01d f964 	bl	801dc50 <MX_I2C4_Init>
	MX_SDMMC1_SD_Init();
 8000988:	f01d fbc6 	bl	801e118 <MX_SDMMC1_SD_Init>
	//MX_SDMMC2_SD_Init();
	MX_USART3_UART_Init();
 800098c:	f01e f8ee 	bl	801eb6c <MX_USART3_UART_Init>
	MX_FATFS_Init();
 8000990:	f00f f9ae 	bl	800fcf0 <MX_FATFS_Init>
	MX_DMA_Init();
 8000994:	f01c ffce 	bl	801d934 <MX_DMA_Init>
	MX_USB_DEVICE_Init();
 8000998:	f01f fd8e 	bl	80204b8 <MX_USB_DEVICE_Init>
	MX_UART7_Init();
 800099c:	f01e f87a 	bl	801ea94 <MX_UART7_Init>
	printf("The value of num111 is\n\r");
 80009a0:	480d      	ldr	r0, [pc, #52]	; (80009d8 <main+0x1a8>)
 80009a2:	f021 facb 	bl	8021f3c <iprintf>
//	NetWorkTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
//
//	osThreadDef(LCDTask, Lcd_Task, osPriorityBelowNormal, 0, 512);
//	LCDTaskHandle = osThreadCreate(osThread(LCDTask), NULL);

	osThreadDef(AnalogSensorTask, AnalogSensor_Task, osPriorityBelowNormal, 0, 512);
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <main+0x1ac>)
 80009a8:	1d3c      	adds	r4, r7, #4
 80009aa:	461d      	mov	r5, r3
 80009ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	AnalogSensorTaskHandle = osThreadCreate(osThread(AnalogSensorTask), NULL);
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2100      	movs	r1, #0
 80009bc:	4618      	mov	r0, r3
 80009be:	f014 fbfb 	bl	80151b8 <osThreadCreate>
 80009c2:	4603      	mov	r3, r0
 80009c4:	4a06      	ldr	r2, [pc, #24]	; (80009e0 <main+0x1b0>)
 80009c6:	6013      	str	r3, [r2, #0]

//	osThreadDef(SerialSensorTask, SerialSensor_Task, osPriorityBelowNormal, 0, 512);
//	SerialSensorTaskHandle = osThreadCreate(osThread(SerialSensorTask), NULL);

	osKernelStart();
 80009c8:	f014 fbef 	bl	80151aa <osKernelStart>


	while(1){
 80009cc:	e7fe      	b.n	80009cc <main+0x19c>
 80009ce:	bf00      	nop
 80009d0:	e000ed00 	.word	0xe000ed00
 80009d4:	58024400 	.word	0x58024400
 80009d8:	08023ee4 	.word	0x08023ee4
 80009dc:	08023f00 	.word	0x08023f00
 80009e0:	240161b4 	.word	0x240161b4

080009e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b09c      	sub	sp, #112	; 0x70
 80009e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ee:	224c      	movs	r2, #76	; 0x4c
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f020 fc08 	bl	8021208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	2220      	movs	r2, #32
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f020 fc02 	bl	8021208 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a04:	2004      	movs	r0, #4
 8000a06:	f003 fff3 	bl	80049f0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4b30      	ldr	r3, [pc, #192]	; (8000ad0 <SystemClock_Config+0xec>)
 8000a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a12:	4a2f      	ldr	r2, [pc, #188]	; (8000ad0 <SystemClock_Config+0xec>)
 8000a14:	f023 0301 	bic.w	r3, r3, #1
 8000a18:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a1a:	4b2d      	ldr	r3, [pc, #180]	; (8000ad0 <SystemClock_Config+0xec>)
 8000a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	4b2b      	ldr	r3, [pc, #172]	; (8000ad4 <SystemClock_Config+0xf0>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	4a2a      	ldr	r2, [pc, #168]	; (8000ad4 <SystemClock_Config+0xf0>)
 8000a2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a2e:	6193      	str	r3, [r2, #24]
 8000a30:	4b28      	ldr	r3, [pc, #160]	; (8000ad4 <SystemClock_Config+0xf0>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a3c:	bf00      	nop
 8000a3e:	4b25      	ldr	r3, [pc, #148]	; (8000ad4 <SystemClock_Config+0xf0>)
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a4a:	d1f8      	bne.n	8000a3e <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a54:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a56:	2302      	movs	r3, #2
 8000a58:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000a5e:	2305      	movs	r3, #5
 8000a60:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000a62:	23a0      	movs	r3, #160	; 0xa0
 8000a64:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a66:	2302      	movs	r3, #2
 8000a68:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 16;
 8000a6a:	2310      	movs	r3, #16
 8000a6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000a72:	2308      	movs	r3, #8
 8000a74:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a82:	4618      	mov	r0, r3
 8000a84:	f004 fa34 	bl	8004ef0 <HAL_RCC_OscConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a8e:	f000 f887 	bl	8000ba0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a92:	233f      	movs	r3, #63	; 0x3f
 8000a94:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a96:	2303      	movs	r3, #3
 8000a98:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a9e:	2308      	movs	r3, #8
 8000aa0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000aa2:	2340      	movs	r3, #64	; 0x40
 8000aa4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000aa6:	2340      	movs	r3, #64	; 0x40
 8000aa8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000aaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aae:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ab0:	2340      	movs	r3, #64	; 0x40
 8000ab2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2102      	movs	r1, #2
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f004 fe47 	bl	800574c <HAL_RCC_ClockConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000ac4:	f000 f86c 	bl	8000ba0 <Error_Handler>
  }
}
 8000ac8:	bf00      	nop
 8000aca:	3770      	adds	r7, #112	; 0x70
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	58000400 	.word	0x58000400
 8000ad4:	58024800 	.word	0x58024800

08000ad8 <MPU_Config>:

/* MPU Configuration */

void MPU_Config(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ade:	463b      	mov	r3, r7
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000aea:	f000 fc49 	bl	8001380 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000aee:	2301      	movs	r3, #1
 8000af0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x00;
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000af6:	231f      	movs	r3, #31
 8000af8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000afa:	2300      	movs	r3, #0
 8000afc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b02:	2300      	movs	r3, #0
 8000b04:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b06:	2301      	movs	r3, #1
 8000b08:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000b12:	2387      	movs	r3, #135	; 0x87
 8000b14:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b16:	2301      	movs	r3, #1
 8000b18:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f000 fc67 	bl	80013f0 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Device not cacheable
     for ETH DMA descriptors */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b22:	2301      	movs	r3, #1
 8000b24:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000b26:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000b2a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000b2c:	2307      	movs	r3, #7
 8000b2e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000b30:	2303      	movs	r3, #3
 8000b32:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000b34:	2301      	movs	r3, #1
 8000b36:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000b40:	2301      	movs	r3, #1
 8000b42:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b50:	463b      	mov	r3, r7
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 fc4c 	bl	80013f0 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Normal Non Cacheable
     for LwIP RAM heap which contains the Tx buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30004000;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MPU_Config+0xc4>)
 8000b5e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000b60:	230d      	movs	r3, #13
 8000b62:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000b64:	2303      	movs	r3, #3
 8000b66:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b70:	2301      	movs	r3, #1
 8000b72:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000b74:	2302      	movs	r3, #2
 8000b76:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b84:	463b      	mov	r3, r7
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 fc32 	bl	80013f0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b8c:	2004      	movs	r0, #4
 8000b8e:	f000 fc0f 	bl	80013b0 <HAL_MPU_Enable>

}
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	30004000 	.word	0x30004000

08000ba0 <Error_Handler>:

void Error_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
//	__disable_irq();
//	while (1){
//		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_5);
//		osDelay(100);
//	}
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
	...

08000bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <HAL_MspInit+0x38>)
 8000bb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bbc:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <HAL_MspInit+0x38>)
 8000bbe:	f043 0302 	orr.w	r3, r3, #2
 8000bc2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <HAL_MspInit+0x38>)
 8000bc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bcc:	f003 0302 	and.w	r3, r3, #2
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	210f      	movs	r1, #15
 8000bd8:	f06f 0001 	mvn.w	r0, #1
 8000bdc:	f000 fba8 	bl	8001330 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	58024400 	.word	0x58024400

08000bec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b090      	sub	sp, #64	; 0x40
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b0f      	cmp	r3, #15
 8000bf8:	d827      	bhi.n	8000c4a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	6879      	ldr	r1, [r7, #4]
 8000bfe:	2036      	movs	r0, #54	; 0x36
 8000c00:	f000 fb96 	bl	8001330 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c04:	2036      	movs	r0, #54	; 0x36
 8000c06:	f000 fbad 	bl	8001364 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000c0a:	4a29      	ldr	r2, [pc, #164]	; (8000cb0 <HAL_InitTick+0xc4>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c10:	4b28      	ldr	r3, [pc, #160]	; (8000cb4 <HAL_InitTick+0xc8>)
 8000c12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c16:	4a27      	ldr	r2, [pc, #156]	; (8000cb4 <HAL_InitTick+0xc8>)
 8000c18:	f043 0310 	orr.w	r3, r3, #16
 8000c1c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c20:	4b24      	ldr	r3, [pc, #144]	; (8000cb4 <HAL_InitTick+0xc8>)
 8000c22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c26:	f003 0310 	and.w	r3, r3, #16
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c2e:	f107 0210 	add.w	r2, r7, #16
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4611      	mov	r1, r2
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f005 f913 	bl	8005e64 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c40:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d106      	bne.n	8000c56 <HAL_InitTick+0x6a>
 8000c48:	e001      	b.n	8000c4e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e02b      	b.n	8000ca6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c4e:	f005 f8dd 	bl	8005e0c <HAL_RCC_GetPCLK1Freq>
 8000c52:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000c54:	e004      	b.n	8000c60 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c56:	f005 f8d9 	bl	8005e0c <HAL_RCC_GetPCLK1Freq>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c62:	4a15      	ldr	r2, [pc, #84]	; (8000cb8 <HAL_InitTick+0xcc>)
 8000c64:	fba2 2303 	umull	r2, r3, r2, r3
 8000c68:	0c9b      	lsrs	r3, r3, #18
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <HAL_InitTick+0xd0>)
 8000c70:	4a13      	ldr	r2, [pc, #76]	; (8000cc0 <HAL_InitTick+0xd4>)
 8000c72:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <HAL_InitTick+0xd0>)
 8000c76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c7a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c7c:	4a0f      	ldr	r2, [pc, #60]	; (8000cbc <HAL_InitTick+0xd0>)
 8000c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c80:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_InitTick+0xd0>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <HAL_InitTick+0xd0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c8e:	480b      	ldr	r0, [pc, #44]	; (8000cbc <HAL_InitTick+0xd0>)
 8000c90:	f00a fa67 	bl	800b162 <HAL_TIM_Base_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d104      	bne.n	8000ca4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c9a:	4808      	ldr	r0, [pc, #32]	; (8000cbc <HAL_InitTick+0xd0>)
 8000c9c:	f00a fab8 	bl	800b210 <HAL_TIM_Base_Start_IT>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	e000      	b.n	8000ca6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3740      	adds	r7, #64	; 0x40
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	24000008 	.word	0x24000008
 8000cb4:	58024400 	.word	0x58024400
 8000cb8:	431bde83 	.word	0x431bde83
 8000cbc:	24016888 	.word	0x24016888
 8000cc0:	40001000 	.word	0x40001000

08000cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
	while (1){}
 8000cc8:	e7fe      	b.n	8000cc8 <NMI_Handler+0x4>

08000cca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
	while (1){}
 8000cce:	e7fe      	b.n	8000cce <HardFault_Handler+0x4>

08000cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
	while (1){}
 8000cd4:	e7fe      	b.n	8000cd4 <MemManage_Handler+0x4>

08000cd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
	while (1){}
 8000cda:	e7fe      	b.n	8000cda <BusFault_Handler+0x4>

08000cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
	while (1){}
 8000ce0:	e7fe      	b.n	8000ce0 <UsageFault_Handler+0x4>

08000ce2 <DebugMon_Handler>:
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void){}
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart1);
 8000cf4:	4802      	ldr	r0, [pc, #8]	; (8000d00 <USART1_IRQHandler+0x10>)
 8000cf6:	f00b f92b 	bl	800bf50 <HAL_UART_IRQHandler>
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	2401abdc 	.word	0x2401abdc

08000d04 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 8000d08:	4802      	ldr	r0, [pc, #8]	; (8000d14 <USART2_IRQHandler+0x10>)
 8000d0a:	f00b f921 	bl	800bf50 <HAL_UART_IRQHandler>
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	2401ac6c 	.word	0x2401ac6c

08000d18 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart3);
 8000d1c:	4802      	ldr	r0, [pc, #8]	; (8000d28 <USART3_IRQHandler+0x10>)
 8000d1e:	f00b f917 	bl	800bf50 <HAL_UART_IRQHandler>
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	2401afcc 	.word	0x2401afcc

08000d2c <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart4);
 8000d30:	4802      	ldr	r0, [pc, #8]	; (8000d3c <UART4_IRQHandler+0x10>)
 8000d32:	f00b f90d 	bl	800bf50 <HAL_UART_IRQHandler>
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	2401af3c 	.word	0x2401af3c

08000d40 <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart5);
 8000d44:	4802      	ldr	r0, [pc, #8]	; (8000d50 <UART5_IRQHandler+0x10>)
 8000d46:	f00b f903 	bl	800bf50 <HAL_UART_IRQHandler>
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	2401ae1c 	.word	0x2401ae1c

08000d54 <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart6);
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <USART6_IRQHandler+0x10>)
 8000d5a:	f00b f8f9 	bl	800bf50 <HAL_UART_IRQHandler>
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	2401aeac 	.word	0x2401aeac

08000d68 <UART7_IRQHandler>:

void UART7_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart7);
 8000d6c:	4802      	ldr	r0, [pc, #8]	; (8000d78 <UART7_IRQHandler+0x10>)
 8000d6e:	f00b f8ef 	bl	800bf50 <HAL_UART_IRQHandler>
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	2401ad8c 	.word	0x2401ad8c

08000d7c <UART8_IRQHandler>:

void UART8_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart8);
 8000d80:	4802      	ldr	r0, [pc, #8]	; (8000d8c <UART8_IRQHandler+0x10>)
 8000d82:	f00b f8e5 	bl	800bf50 <HAL_UART_IRQHandler>
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	2401acfc 	.word	0x2401acfc

08000d90 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim6);
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <TIM6_DAC_IRQHandler+0x10>)
 8000d96:	f00a fb71 	bl	800b47c <HAL_TIM_IRQHandler>
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	24016888 	.word	0x24016888

08000da4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	HAL_ETH_IRQHandler(&heth);
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <ETH_IRQHandler+0x10>)
 8000daa:	f001 fe75 	bl	8002a98 <HAL_ETH_IRQHandler>
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	24016d78 	.word	0x24016d78

08000db8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000dbc:	2004      	movs	r0, #4
 8000dbe:	f002 f97e 	bl	80030be <HAL_GPIO_EXTI_IRQHandler>
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000dca:	2008      	movs	r0, #8
 8000dcc:	f002 f977 	bl	80030be <HAL_GPIO_EXTI_IRQHandler>
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000dd8:	2010      	movs	r0, #16
 8000dda:	f002 f970 	bl	80030be <HAL_GPIO_EXTI_IRQHandler>
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000de6:	2020      	movs	r0, #32
 8000de8:	f002 f969 	bl	80030be <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000dec:	2040      	movs	r0, #64	; 0x40
 8000dee:	f002 f966 	bl	80030be <HAL_GPIO_EXTI_IRQHandler>
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 8000dfc:	4802      	ldr	r0, [pc, #8]	; (8000e08 <TIM2_IRQHandler+0x10>)
 8000dfe:	f00a fb3d 	bl	800b47c <HAL_TIM_IRQHandler>
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	2401aaf4 	.word	0x2401aaf4

08000e0c <TIM3_IRQHandler>:
/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim3);
 8000e10:	4802      	ldr	r0, [pc, #8]	; (8000e1c <TIM3_IRQHandler+0x10>)
 8000e12:	f00a fb33 	bl	800b47c <HAL_TIM_IRQHandler>
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	2401ab40 	.word	0x2401ab40

08000e20 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim4);
 8000e24:	4802      	ldr	r0, [pc, #8]	; (8000e30 <TIM4_IRQHandler+0x10>)
 8000e26:	f00a fb29 	bl	800b47c <HAL_TIM_IRQHandler>
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	2401aa5c 	.word	0x2401aa5c

08000e34 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim5);
 8000e38:	4802      	ldr	r0, [pc, #8]	; (8000e44 <TIM5_IRQHandler+0x10>)
 8000e3a:	f00a fb1f 	bl	800b47c <HAL_TIM_IRQHandler>
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	2401aaa8 	.word	0x2401aaa8

08000e48 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms (A and B) interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	HAL_RTC_AlarmIRQHandler(&hrtc);
 8000e4c:	4802      	ldr	r0, [pc, #8]	; (8000e58 <RTC_Alarm_IRQHandler+0x10>)
 8000e4e:	f007 fd7d 	bl	800894c <HAL_RTC_AlarmIRQHandler>
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	2401a1e8 	.word	0x2401a1e8

08000e5c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	HAL_SD_IRQHandler(&hsd1);
 8000e60:	4802      	ldr	r0, [pc, #8]	; (8000e6c <SDMMC1_IRQHandler+0x10>)
 8000e62:	f008 faaf 	bl	80093c4 <HAL_SD_IRQHandler>
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	2401a240 	.word	0x2401a240

08000e70 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	HAL_SD_IRQHandler(&hsd2);
 8000e74:	4802      	ldr	r0, [pc, #8]	; (8000e80 <SDMMC2_IRQHandler+0x10>)
 8000e76:	f008 faa5 	bl	80093c4 <HAL_SD_IRQHandler>
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	2401a2bc 	.word	0x2401a2bc

08000e84 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
	HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e88:	4802      	ldr	r0, [pc, #8]	; (8000e94 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 8000e8a:	f002 fc06 	bl	800369a <HAL_PCD_IRQHandler>
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	2401b844 	.word	0x2401b844

08000e98 <OTG_FS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 In global interrupt.
  */
void OTG_FS_EP1_IN_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e9c:	4802      	ldr	r0, [pc, #8]	; (8000ea8 <OTG_FS_EP1_IN_IRQHandler+0x10>)
 8000e9e:	f002 fbfc 	bl	800369a <HAL_PCD_IRQHandler>
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	2401b844 	.word	0x2401b844

08000eac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000eb0:	4802      	ldr	r0, [pc, #8]	; (8000ebc <OTG_FS_IRQHandler+0x10>)
 8000eb2:	f002 fbf2 	bl	800369a <HAL_PCD_IRQHandler>
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	2401b844 	.word	0x2401b844

08000ec0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
	return 1;
 8000ec4:	2301      	movs	r3, #1
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <_kill>:

int _kill(int pid, int sig)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000eda:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <_kill+0x20>)
 8000edc:	2216      	movs	r2, #22
 8000ede:	601a      	str	r2, [r3, #0]
	return -1;
 8000ee0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	24014278 	.word	0x24014278

08000ef4 <_exit>:

void _exit (int status)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000efc:	f04f 31ff 	mov.w	r1, #4294967295
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ffe5 	bl	8000ed0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f06:	e7fe      	b.n	8000f06 <_exit+0x12>

08000f08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	e00a      	b.n	8000f30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f1a:	f3af 8000 	nop.w
 8000f1e:	4601      	mov	r1, r0
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	1c5a      	adds	r2, r3, #1
 8000f24:	60ba      	str	r2, [r7, #8]
 8000f26:	b2ca      	uxtb	r2, r1
 8000f28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	697a      	ldr	r2, [r7, #20]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	dbf0      	blt.n	8000f1a <_read+0x12>
	}

return len;
 8000f38:	687b      	ldr	r3, [r7, #4]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	60f8      	str	r0, [r7, #12]
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	e009      	b.n	8000f68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	1c5a      	adds	r2, r3, #1
 8000f58:	60ba      	str	r2, [r7, #8]
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f01d fd83 	bl	801ea68 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	3301      	adds	r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	697a      	ldr	r2, [r7, #20]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	dbf1      	blt.n	8000f54 <_write+0x12>
	}
	return len;
 8000f70:	687b      	ldr	r3, [r7, #4]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <_close>:

int _close(int file)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
	return -1;
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fa2:	605a      	str	r2, [r3, #4]
	return 0;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <_isatty>:

int _isatty(int file)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
	return 1;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
	return 0;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b087      	sub	sp, #28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fec:	4a14      	ldr	r2, [pc, #80]	; (8001040 <_sbrk+0x5c>)
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <_sbrk+0x60>)
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff8:	4b13      	ldr	r3, [pc, #76]	; (8001048 <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d102      	bne.n	8001006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <_sbrk+0x64>)
 8001002:	4a12      	ldr	r2, [pc, #72]	; (800104c <_sbrk+0x68>)
 8001004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	429a      	cmp	r2, r3
 8001012:	d205      	bcs.n	8001020 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001014:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <_sbrk+0x6c>)
 8001016:	220c      	movs	r2, #12
 8001018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	e009      	b.n	8001034 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	4a06      	ldr	r2, [pc, #24]	; (8001048 <_sbrk+0x64>)
 8001030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001032:	68fb      	ldr	r3, [r7, #12]
}
 8001034:	4618      	mov	r0, r3
 8001036:	371c      	adds	r7, #28
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	24080000 	.word	0x24080000
 8001044:	00000400 	.word	0x00000400
 8001048:	2400108c 	.word	0x2400108c
 800104c:	2401bd50 	.word	0x2401bd50
 8001050:	24014278 	.word	0x24014278

08001054 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001054:	f8df d034 	ldr.w	sp, [pc, #52]	; 800108c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001058:	f7ff fb1c 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800105c:	480c      	ldr	r0, [pc, #48]	; (8001090 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800105e:	490d      	ldr	r1, [pc, #52]	; (8001094 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001060:	4a0d      	ldr	r2, [pc, #52]	; (8001098 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001064:	e002      	b.n	800106c <LoopCopyDataInit>

08001066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106a:	3304      	adds	r3, #4

0800106c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800106c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001070:	d3f9      	bcc.n	8001066 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001074:	4c0a      	ldr	r4, [pc, #40]	; (80010a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001078:	e001      	b.n	800107e <LoopFillZerobss>

0800107a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800107c:	3204      	adds	r2, #4

0800107e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001080:	d3fb      	bcc.n	800107a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001082:	f020 f869 	bl	8021158 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001086:	f7ff fbd3 	bl	8000830 <main>
  bx  lr
 800108a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800108c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001090:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001094:	24000304 	.word	0x24000304
  ldr r2, =_sidata
 8001098:	08026310 	.word	0x08026310
  ldr r2, =_sbss
 800109c:	24000308 	.word	0x24000308
  ldr r4, =_ebss
 80010a0:	2401bd50 	.word	0x2401bd50

080010a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a4:	e7fe      	b.n	80010a4 <ADC3_IRQHandler>
	...

080010a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ae:	2003      	movs	r0, #3
 80010b0:	f000 f933 	bl	800131a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010b4:	f004 fd00 	bl	8005ab8 <HAL_RCC_GetSysClockFreq>
 80010b8:	4602      	mov	r2, r0
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <HAL_Init+0x68>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	0a1b      	lsrs	r3, r3, #8
 80010c0:	f003 030f 	and.w	r3, r3, #15
 80010c4:	4913      	ldr	r1, [pc, #76]	; (8001114 <HAL_Init+0x6c>)
 80010c6:	5ccb      	ldrb	r3, [r1, r3]
 80010c8:	f003 031f 	and.w	r3, r3, #31
 80010cc:	fa22 f303 	lsr.w	r3, r2, r3
 80010d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <HAL_Init+0x68>)
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	f003 030f 	and.w	r3, r3, #15
 80010da:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <HAL_Init+0x6c>)
 80010dc:	5cd3      	ldrb	r3, [r2, r3]
 80010de:	f003 031f 	and.w	r3, r3, #31
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	fa22 f303 	lsr.w	r3, r2, r3
 80010e8:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <HAL_Init+0x70>)
 80010ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010ec:	4a0b      	ldr	r2, [pc, #44]	; (800111c <HAL_Init+0x74>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010f2:	200f      	movs	r0, #15
 80010f4:	f7ff fd7a 	bl	8000bec <HAL_InitTick>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e002      	b.n	8001108 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001102:	f7ff fd55 	bl	8000bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001106:	2300      	movs	r3, #0
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	58024400 	.word	0x58024400
 8001114:	08025d1c 	.word	0x08025d1c
 8001118:	24000004 	.word	0x24000004
 800111c:	24000000 	.word	0x24000000

08001120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_IncTick+0x20>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_IncTick+0x24>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4413      	add	r3, r2
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <HAL_IncTick+0x24>)
 8001132:	6013      	str	r3, [r2, #0]
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	2400000c 	.word	0x2400000c
 8001144:	240168d4 	.word	0x240168d4

08001148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return uwTick;
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <HAL_GetTick+0x14>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	240168d4 	.word	0x240168d4

08001160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001168:	f7ff ffee 	bl	8001148 <HAL_GetTick>
 800116c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001178:	d005      	beq.n	8001186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <HAL_Delay+0x44>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4413      	add	r3, r2
 8001184:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001186:	bf00      	nop
 8001188:	f7ff ffde 	bl	8001148 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	429a      	cmp	r2, r3
 8001196:	d8f7      	bhi.n	8001188 <HAL_Delay+0x28>
  {
  }
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	2400000c 	.word	0x2400000c

080011a8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <HAL_GetREVID+0x14>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	0c1b      	lsrs	r3, r3, #16
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	5c001000 	.word	0x5c001000

080011c0 <__NVIC_SetPriorityGrouping>:
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <__NVIC_SetPriorityGrouping+0x40>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011dc:	4013      	ands	r3, r2
 80011de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <__NVIC_SetPriorityGrouping+0x44>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ee:	4a04      	ldr	r2, [pc, #16]	; (8001200 <__NVIC_SetPriorityGrouping+0x40>)
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	60d3      	str	r3, [r2, #12]
}
 80011f4:	bf00      	nop
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000ed00 	.word	0xe000ed00
 8001204:	05fa0000 	.word	0x05fa0000

08001208 <__NVIC_GetPriorityGrouping>:
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <__NVIC_GetPriorityGrouping+0x18>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	0a1b      	lsrs	r3, r3, #8
 8001212:	f003 0307 	and.w	r3, r3, #7
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <__NVIC_EnableIRQ>:
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800122e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001232:	2b00      	cmp	r3, #0
 8001234:	db0b      	blt.n	800124e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001236:	88fb      	ldrh	r3, [r7, #6]
 8001238:	f003 021f 	and.w	r2, r3, #31
 800123c:	4907      	ldr	r1, [pc, #28]	; (800125c <__NVIC_EnableIRQ+0x38>)
 800123e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001242:	095b      	lsrs	r3, r3, #5
 8001244:	2001      	movs	r0, #1
 8001246:	fa00 f202 	lsl.w	r2, r0, r2
 800124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000e100 	.word	0xe000e100

08001260 <__NVIC_SetPriority>:
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800126c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001270:	2b00      	cmp	r3, #0
 8001272:	db0a      	blt.n	800128a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	b2da      	uxtb	r2, r3
 8001278:	490c      	ldr	r1, [pc, #48]	; (80012ac <__NVIC_SetPriority+0x4c>)
 800127a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800127e:	0112      	lsls	r2, r2, #4
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	440b      	add	r3, r1
 8001284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001288:	e00a      	b.n	80012a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4908      	ldr	r1, [pc, #32]	; (80012b0 <__NVIC_SetPriority+0x50>)
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	3b04      	subs	r3, #4
 8001298:	0112      	lsls	r2, r2, #4
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	440b      	add	r3, r1
 800129e:	761a      	strb	r2, [r3, #24]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000e100 	.word	0xe000e100
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <NVIC_EncodePriority>:
{
 80012b4:	b480      	push	{r7}
 80012b6:	b089      	sub	sp, #36	; 0x24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f1c3 0307 	rsb	r3, r3, #7
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	bf28      	it	cs
 80012d2:	2304      	movcs	r3, #4
 80012d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3304      	adds	r3, #4
 80012da:	2b06      	cmp	r3, #6
 80012dc:	d902      	bls.n	80012e4 <NVIC_EncodePriority+0x30>
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3b03      	subs	r3, #3
 80012e2:	e000      	b.n	80012e6 <NVIC_EncodePriority+0x32>
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	f04f 32ff 	mov.w	r2, #4294967295
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43da      	mvns	r2, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	401a      	ands	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
 8001306:	43d9      	mvns	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	4313      	orrs	r3, r2
}
 800130e:	4618      	mov	r0, r3
 8001310:	3724      	adds	r7, #36	; 0x24
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ff4c 	bl	80011c0 <__NVIC_SetPriorityGrouping>
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
 800133c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800133e:	f7ff ff63 	bl	8001208 <__NVIC_GetPriorityGrouping>
 8001342:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	68b9      	ldr	r1, [r7, #8]
 8001348:	6978      	ldr	r0, [r7, #20]
 800134a:	f7ff ffb3 	bl	80012b4 <NVIC_EncodePriority>
 800134e:	4602      	mov	r2, r0
 8001350:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001354:	4611      	mov	r1, r2
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff ff82 	bl	8001260 <__NVIC_SetPriority>
}
 800135c:	bf00      	nop
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800136e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ff56 	bl	8001224 <__NVIC_EnableIRQ>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001384:	f3bf 8f5f 	dmb	sy
}
 8001388:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800138a:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <HAL_MPU_Disable+0x28>)
 800138c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138e:	4a06      	ldr	r2, [pc, #24]	; (80013a8 <HAL_MPU_Disable+0x28>)
 8001390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001394:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001396:	4b05      	ldr	r3, [pc, #20]	; (80013ac <HAL_MPU_Disable+0x2c>)
 8001398:	2200      	movs	r2, #0
 800139a:	605a      	str	r2, [r3, #4]
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000ed00 	.word	0xe000ed00
 80013ac:	e000ed90 	.word	0xe000ed90

080013b0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80013b8:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <HAL_MPU_Enable+0x38>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80013c2:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <HAL_MPU_Enable+0x3c>)
 80013c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c6:	4a09      	ldr	r2, [pc, #36]	; (80013ec <HAL_MPU_Enable+0x3c>)
 80013c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013cc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80013ce:	f3bf 8f4f 	dsb	sy
}
 80013d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013d4:	f3bf 8f6f 	isb	sy
}
 80013d8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000ed90 	.word	0xe000ed90
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	785a      	ldrb	r2, [r3, #1]
 80013fc:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <HAL_MPU_ConfigRegion+0x84>)
 80013fe:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d029      	beq.n	800145c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001408:	4a1a      	ldr	r2, [pc, #104]	; (8001474 <HAL_MPU_ConfigRegion+0x84>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	7b1b      	ldrb	r3, [r3, #12]
 8001414:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7adb      	ldrb	r3, [r3, #11]
 800141a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800141c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	7a9b      	ldrb	r3, [r3, #10]
 8001422:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001424:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	7b5b      	ldrb	r3, [r3, #13]
 800142a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800142c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	7b9b      	ldrb	r3, [r3, #14]
 8001432:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001434:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	7bdb      	ldrb	r3, [r3, #15]
 800143a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800143c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	7a5b      	ldrb	r3, [r3, #9]
 8001442:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001444:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	7a1b      	ldrb	r3, [r3, #8]
 800144a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800144c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	7812      	ldrb	r2, [r2, #0]
 8001452:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001454:	4a07      	ldr	r2, [pc, #28]	; (8001474 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001456:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001458:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800145a:	e005      	b.n	8001468 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <HAL_MPU_ConfigRegion+0x84>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <HAL_MPU_ConfigRegion+0x84>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000ed90 	.word	0xe000ed90

08001478 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 800147c:	4b07      	ldr	r3, [pc, #28]	; (800149c <HAL_GetCurrentCPUID+0x24>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	091b      	lsrs	r3, r3, #4
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	2b07      	cmp	r3, #7
 8001488:	d101      	bne.n	800148e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 800148a:	2303      	movs	r3, #3
 800148c:	e000      	b.n	8001490 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 800148e:	2301      	movs	r3, #1
  }
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80014a8:	f7ff fe4e 	bl	8001148 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e316      	b.n	8001ae6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a66      	ldr	r2, [pc, #408]	; (8001658 <HAL_DMA_Init+0x1b8>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d04a      	beq.n	8001558 <HAL_DMA_Init+0xb8>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a65      	ldr	r2, [pc, #404]	; (800165c <HAL_DMA_Init+0x1bc>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d045      	beq.n	8001558 <HAL_DMA_Init+0xb8>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a63      	ldr	r2, [pc, #396]	; (8001660 <HAL_DMA_Init+0x1c0>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d040      	beq.n	8001558 <HAL_DMA_Init+0xb8>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a62      	ldr	r2, [pc, #392]	; (8001664 <HAL_DMA_Init+0x1c4>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d03b      	beq.n	8001558 <HAL_DMA_Init+0xb8>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a60      	ldr	r2, [pc, #384]	; (8001668 <HAL_DMA_Init+0x1c8>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d036      	beq.n	8001558 <HAL_DMA_Init+0xb8>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a5f      	ldr	r2, [pc, #380]	; (800166c <HAL_DMA_Init+0x1cc>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d031      	beq.n	8001558 <HAL_DMA_Init+0xb8>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a5d      	ldr	r2, [pc, #372]	; (8001670 <HAL_DMA_Init+0x1d0>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d02c      	beq.n	8001558 <HAL_DMA_Init+0xb8>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a5c      	ldr	r2, [pc, #368]	; (8001674 <HAL_DMA_Init+0x1d4>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d027      	beq.n	8001558 <HAL_DMA_Init+0xb8>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a5a      	ldr	r2, [pc, #360]	; (8001678 <HAL_DMA_Init+0x1d8>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d022      	beq.n	8001558 <HAL_DMA_Init+0xb8>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a59      	ldr	r2, [pc, #356]	; (800167c <HAL_DMA_Init+0x1dc>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d01d      	beq.n	8001558 <HAL_DMA_Init+0xb8>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a57      	ldr	r2, [pc, #348]	; (8001680 <HAL_DMA_Init+0x1e0>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d018      	beq.n	8001558 <HAL_DMA_Init+0xb8>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a56      	ldr	r2, [pc, #344]	; (8001684 <HAL_DMA_Init+0x1e4>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d013      	beq.n	8001558 <HAL_DMA_Init+0xb8>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a54      	ldr	r2, [pc, #336]	; (8001688 <HAL_DMA_Init+0x1e8>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d00e      	beq.n	8001558 <HAL_DMA_Init+0xb8>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a53      	ldr	r2, [pc, #332]	; (800168c <HAL_DMA_Init+0x1ec>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d009      	beq.n	8001558 <HAL_DMA_Init+0xb8>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a51      	ldr	r2, [pc, #324]	; (8001690 <HAL_DMA_Init+0x1f0>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d004      	beq.n	8001558 <HAL_DMA_Init+0xb8>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a50      	ldr	r2, [pc, #320]	; (8001694 <HAL_DMA_Init+0x1f4>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d101      	bne.n	800155c <HAL_DMA_Init+0xbc>
 8001558:	2301      	movs	r3, #1
 800155a:	e000      	b.n	800155e <HAL_DMA_Init+0xbe>
 800155c:	2300      	movs	r3, #0
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 813b 	beq.w	80017da <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2202      	movs	r2, #2
 8001568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a37      	ldr	r2, [pc, #220]	; (8001658 <HAL_DMA_Init+0x1b8>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d04a      	beq.n	8001614 <HAL_DMA_Init+0x174>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a36      	ldr	r2, [pc, #216]	; (800165c <HAL_DMA_Init+0x1bc>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d045      	beq.n	8001614 <HAL_DMA_Init+0x174>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a34      	ldr	r2, [pc, #208]	; (8001660 <HAL_DMA_Init+0x1c0>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d040      	beq.n	8001614 <HAL_DMA_Init+0x174>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a33      	ldr	r2, [pc, #204]	; (8001664 <HAL_DMA_Init+0x1c4>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d03b      	beq.n	8001614 <HAL_DMA_Init+0x174>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a31      	ldr	r2, [pc, #196]	; (8001668 <HAL_DMA_Init+0x1c8>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d036      	beq.n	8001614 <HAL_DMA_Init+0x174>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a30      	ldr	r2, [pc, #192]	; (800166c <HAL_DMA_Init+0x1cc>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d031      	beq.n	8001614 <HAL_DMA_Init+0x174>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a2e      	ldr	r2, [pc, #184]	; (8001670 <HAL_DMA_Init+0x1d0>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d02c      	beq.n	8001614 <HAL_DMA_Init+0x174>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a2d      	ldr	r2, [pc, #180]	; (8001674 <HAL_DMA_Init+0x1d4>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d027      	beq.n	8001614 <HAL_DMA_Init+0x174>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a2b      	ldr	r2, [pc, #172]	; (8001678 <HAL_DMA_Init+0x1d8>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d022      	beq.n	8001614 <HAL_DMA_Init+0x174>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a2a      	ldr	r2, [pc, #168]	; (800167c <HAL_DMA_Init+0x1dc>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d01d      	beq.n	8001614 <HAL_DMA_Init+0x174>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a28      	ldr	r2, [pc, #160]	; (8001680 <HAL_DMA_Init+0x1e0>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d018      	beq.n	8001614 <HAL_DMA_Init+0x174>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a27      	ldr	r2, [pc, #156]	; (8001684 <HAL_DMA_Init+0x1e4>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d013      	beq.n	8001614 <HAL_DMA_Init+0x174>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a25      	ldr	r2, [pc, #148]	; (8001688 <HAL_DMA_Init+0x1e8>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d00e      	beq.n	8001614 <HAL_DMA_Init+0x174>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a24      	ldr	r2, [pc, #144]	; (800168c <HAL_DMA_Init+0x1ec>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d009      	beq.n	8001614 <HAL_DMA_Init+0x174>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a22      	ldr	r2, [pc, #136]	; (8001690 <HAL_DMA_Init+0x1f0>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d004      	beq.n	8001614 <HAL_DMA_Init+0x174>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a21      	ldr	r2, [pc, #132]	; (8001694 <HAL_DMA_Init+0x1f4>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d108      	bne.n	8001626 <HAL_DMA_Init+0x186>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 0201 	bic.w	r2, r2, #1
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	e007      	b.n	8001636 <HAL_DMA_Init+0x196>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0201 	bic.w	r2, r2, #1
 8001634:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001636:	e02f      	b.n	8001698 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001638:	f7ff fd86 	bl	8001148 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b05      	cmp	r3, #5
 8001644:	d928      	bls.n	8001698 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2220      	movs	r2, #32
 800164a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2203      	movs	r2, #3
 8001650:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e246      	b.n	8001ae6 <HAL_DMA_Init+0x646>
 8001658:	40020010 	.word	0x40020010
 800165c:	40020028 	.word	0x40020028
 8001660:	40020040 	.word	0x40020040
 8001664:	40020058 	.word	0x40020058
 8001668:	40020070 	.word	0x40020070
 800166c:	40020088 	.word	0x40020088
 8001670:	400200a0 	.word	0x400200a0
 8001674:	400200b8 	.word	0x400200b8
 8001678:	40020410 	.word	0x40020410
 800167c:	40020428 	.word	0x40020428
 8001680:	40020440 	.word	0x40020440
 8001684:	40020458 	.word	0x40020458
 8001688:	40020470 	.word	0x40020470
 800168c:	40020488 	.word	0x40020488
 8001690:	400204a0 	.word	0x400204a0
 8001694:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1c8      	bne.n	8001638 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	4b83      	ldr	r3, [pc, #524]	; (80018c0 <HAL_DMA_Init+0x420>)
 80016b2:	4013      	ands	r3, r2
 80016b4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80016be:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016d6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d107      	bne.n	80016fc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f4:	4313      	orrs	r3, r2
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80016fc:	4b71      	ldr	r3, [pc, #452]	; (80018c4 <HAL_DMA_Init+0x424>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b71      	ldr	r3, [pc, #452]	; (80018c8 <HAL_DMA_Init+0x428>)
 8001702:	4013      	ands	r3, r2
 8001704:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001708:	d328      	bcc.n	800175c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b28      	cmp	r3, #40	; 0x28
 8001710:	d903      	bls.n	800171a <HAL_DMA_Init+0x27a>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b2e      	cmp	r3, #46	; 0x2e
 8001718:	d917      	bls.n	800174a <HAL_DMA_Init+0x2aa>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b3e      	cmp	r3, #62	; 0x3e
 8001720:	d903      	bls.n	800172a <HAL_DMA_Init+0x28a>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b42      	cmp	r3, #66	; 0x42
 8001728:	d90f      	bls.n	800174a <HAL_DMA_Init+0x2aa>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b46      	cmp	r3, #70	; 0x46
 8001730:	d903      	bls.n	800173a <HAL_DMA_Init+0x29a>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b48      	cmp	r3, #72	; 0x48
 8001738:	d907      	bls.n	800174a <HAL_DMA_Init+0x2aa>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b4e      	cmp	r3, #78	; 0x4e
 8001740:	d905      	bls.n	800174e <HAL_DMA_Init+0x2ae>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b52      	cmp	r3, #82	; 0x52
 8001748:	d801      	bhi.n	800174e <HAL_DMA_Init+0x2ae>
 800174a:	2301      	movs	r3, #1
 800174c:	e000      	b.n	8001750 <HAL_DMA_Init+0x2b0>
 800174e:	2300      	movs	r3, #0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800175a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	f023 0307 	bic.w	r3, r3, #7
 8001772:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	4313      	orrs	r3, r2
 800177c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001782:	2b04      	cmp	r3, #4
 8001784:	d117      	bne.n	80017b6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	4313      	orrs	r3, r2
 800178e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001794:	2b00      	cmp	r3, #0
 8001796:	d00e      	beq.n	80017b6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 fff3 	bl	8002784 <DMA_CheckFifoParam>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d008      	beq.n	80017b6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2240      	movs	r2, #64	; 0x40
 80017a8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e197      	b.n	8001ae6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 ff2e 	bl	8002620 <DMA_CalcBaseAndBitshift>
 80017c4:	4603      	mov	r3, r0
 80017c6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017cc:	f003 031f 	and.w	r3, r3, #31
 80017d0:	223f      	movs	r2, #63	; 0x3f
 80017d2:	409a      	lsls	r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	e0cd      	b.n	8001976 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a3b      	ldr	r2, [pc, #236]	; (80018cc <HAL_DMA_Init+0x42c>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d022      	beq.n	800182a <HAL_DMA_Init+0x38a>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a39      	ldr	r2, [pc, #228]	; (80018d0 <HAL_DMA_Init+0x430>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d01d      	beq.n	800182a <HAL_DMA_Init+0x38a>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a38      	ldr	r2, [pc, #224]	; (80018d4 <HAL_DMA_Init+0x434>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d018      	beq.n	800182a <HAL_DMA_Init+0x38a>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a36      	ldr	r2, [pc, #216]	; (80018d8 <HAL_DMA_Init+0x438>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d013      	beq.n	800182a <HAL_DMA_Init+0x38a>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a35      	ldr	r2, [pc, #212]	; (80018dc <HAL_DMA_Init+0x43c>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d00e      	beq.n	800182a <HAL_DMA_Init+0x38a>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a33      	ldr	r2, [pc, #204]	; (80018e0 <HAL_DMA_Init+0x440>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d009      	beq.n	800182a <HAL_DMA_Init+0x38a>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a32      	ldr	r2, [pc, #200]	; (80018e4 <HAL_DMA_Init+0x444>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d004      	beq.n	800182a <HAL_DMA_Init+0x38a>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a30      	ldr	r2, [pc, #192]	; (80018e8 <HAL_DMA_Init+0x448>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d101      	bne.n	800182e <HAL_DMA_Init+0x38e>
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <HAL_DMA_Init+0x390>
 800182e:	2300      	movs	r3, #0
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 8097 	beq.w	8001964 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a24      	ldr	r2, [pc, #144]	; (80018cc <HAL_DMA_Init+0x42c>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d021      	beq.n	8001884 <HAL_DMA_Init+0x3e4>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a22      	ldr	r2, [pc, #136]	; (80018d0 <HAL_DMA_Init+0x430>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d01c      	beq.n	8001884 <HAL_DMA_Init+0x3e4>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a21      	ldr	r2, [pc, #132]	; (80018d4 <HAL_DMA_Init+0x434>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d017      	beq.n	8001884 <HAL_DMA_Init+0x3e4>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a1f      	ldr	r2, [pc, #124]	; (80018d8 <HAL_DMA_Init+0x438>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d012      	beq.n	8001884 <HAL_DMA_Init+0x3e4>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a1e      	ldr	r2, [pc, #120]	; (80018dc <HAL_DMA_Init+0x43c>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d00d      	beq.n	8001884 <HAL_DMA_Init+0x3e4>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a1c      	ldr	r2, [pc, #112]	; (80018e0 <HAL_DMA_Init+0x440>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d008      	beq.n	8001884 <HAL_DMA_Init+0x3e4>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a1b      	ldr	r2, [pc, #108]	; (80018e4 <HAL_DMA_Init+0x444>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d003      	beq.n	8001884 <HAL_DMA_Init+0x3e4>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a19      	ldr	r2, [pc, #100]	; (80018e8 <HAL_DMA_Init+0x448>)
 8001882:	4293      	cmp	r3, r2
 8001884:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2202      	movs	r2, #2
 800188a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <HAL_DMA_Init+0x44c>)
 80018a2:	4013      	ands	r3, r2
 80018a4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2b40      	cmp	r3, #64	; 0x40
 80018ac:	d020      	beq.n	80018f0 <HAL_DMA_Init+0x450>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b80      	cmp	r3, #128	; 0x80
 80018b4:	d102      	bne.n	80018bc <HAL_DMA_Init+0x41c>
 80018b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018ba:	e01a      	b.n	80018f2 <HAL_DMA_Init+0x452>
 80018bc:	2300      	movs	r3, #0
 80018be:	e018      	b.n	80018f2 <HAL_DMA_Init+0x452>
 80018c0:	fe10803f 	.word	0xfe10803f
 80018c4:	5c001000 	.word	0x5c001000
 80018c8:	ffff0000 	.word	0xffff0000
 80018cc:	58025408 	.word	0x58025408
 80018d0:	5802541c 	.word	0x5802541c
 80018d4:	58025430 	.word	0x58025430
 80018d8:	58025444 	.word	0x58025444
 80018dc:	58025458 	.word	0x58025458
 80018e0:	5802546c 	.word	0x5802546c
 80018e4:	58025480 	.word	0x58025480
 80018e8:	58025494 	.word	0x58025494
 80018ec:	fffe000f 	.word	0xfffe000f
 80018f0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	68d2      	ldr	r2, [r2, #12]
 80018f6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80018f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001900:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001908:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001910:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001918:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001920:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	4313      	orrs	r3, r2
 8001926:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	461a      	mov	r2, r3
 8001936:	4b6e      	ldr	r3, [pc, #440]	; (8001af0 <HAL_DMA_Init+0x650>)
 8001938:	4413      	add	r3, r2
 800193a:	4a6e      	ldr	r2, [pc, #440]	; (8001af4 <HAL_DMA_Init+0x654>)
 800193c:	fba2 2303 	umull	r2, r3, r2, r3
 8001940:	091b      	lsrs	r3, r3, #4
 8001942:	009a      	lsls	r2, r3, #2
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 fe69 	bl	8002620 <DMA_CalcBaseAndBitshift>
 800194e:	4603      	mov	r3, r0
 8001950:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001956:	f003 031f 	and.w	r3, r3, #31
 800195a:	2201      	movs	r2, #1
 800195c:	409a      	lsls	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	e008      	b.n	8001976 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2240      	movs	r2, #64	; 0x40
 8001968:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2203      	movs	r2, #3
 800196e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e0b7      	b.n	8001ae6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a5f      	ldr	r2, [pc, #380]	; (8001af8 <HAL_DMA_Init+0x658>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d072      	beq.n	8001a66 <HAL_DMA_Init+0x5c6>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a5d      	ldr	r2, [pc, #372]	; (8001afc <HAL_DMA_Init+0x65c>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d06d      	beq.n	8001a66 <HAL_DMA_Init+0x5c6>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a5c      	ldr	r2, [pc, #368]	; (8001b00 <HAL_DMA_Init+0x660>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d068      	beq.n	8001a66 <HAL_DMA_Init+0x5c6>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a5a      	ldr	r2, [pc, #360]	; (8001b04 <HAL_DMA_Init+0x664>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d063      	beq.n	8001a66 <HAL_DMA_Init+0x5c6>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a59      	ldr	r2, [pc, #356]	; (8001b08 <HAL_DMA_Init+0x668>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d05e      	beq.n	8001a66 <HAL_DMA_Init+0x5c6>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a57      	ldr	r2, [pc, #348]	; (8001b0c <HAL_DMA_Init+0x66c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d059      	beq.n	8001a66 <HAL_DMA_Init+0x5c6>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a56      	ldr	r2, [pc, #344]	; (8001b10 <HAL_DMA_Init+0x670>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d054      	beq.n	8001a66 <HAL_DMA_Init+0x5c6>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a54      	ldr	r2, [pc, #336]	; (8001b14 <HAL_DMA_Init+0x674>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d04f      	beq.n	8001a66 <HAL_DMA_Init+0x5c6>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a53      	ldr	r2, [pc, #332]	; (8001b18 <HAL_DMA_Init+0x678>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d04a      	beq.n	8001a66 <HAL_DMA_Init+0x5c6>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a51      	ldr	r2, [pc, #324]	; (8001b1c <HAL_DMA_Init+0x67c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d045      	beq.n	8001a66 <HAL_DMA_Init+0x5c6>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a50      	ldr	r2, [pc, #320]	; (8001b20 <HAL_DMA_Init+0x680>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d040      	beq.n	8001a66 <HAL_DMA_Init+0x5c6>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a4e      	ldr	r2, [pc, #312]	; (8001b24 <HAL_DMA_Init+0x684>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d03b      	beq.n	8001a66 <HAL_DMA_Init+0x5c6>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a4d      	ldr	r2, [pc, #308]	; (8001b28 <HAL_DMA_Init+0x688>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d036      	beq.n	8001a66 <HAL_DMA_Init+0x5c6>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a4b      	ldr	r2, [pc, #300]	; (8001b2c <HAL_DMA_Init+0x68c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d031      	beq.n	8001a66 <HAL_DMA_Init+0x5c6>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a4a      	ldr	r2, [pc, #296]	; (8001b30 <HAL_DMA_Init+0x690>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d02c      	beq.n	8001a66 <HAL_DMA_Init+0x5c6>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a48      	ldr	r2, [pc, #288]	; (8001b34 <HAL_DMA_Init+0x694>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d027      	beq.n	8001a66 <HAL_DMA_Init+0x5c6>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a47      	ldr	r2, [pc, #284]	; (8001b38 <HAL_DMA_Init+0x698>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d022      	beq.n	8001a66 <HAL_DMA_Init+0x5c6>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a45      	ldr	r2, [pc, #276]	; (8001b3c <HAL_DMA_Init+0x69c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d01d      	beq.n	8001a66 <HAL_DMA_Init+0x5c6>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a44      	ldr	r2, [pc, #272]	; (8001b40 <HAL_DMA_Init+0x6a0>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d018      	beq.n	8001a66 <HAL_DMA_Init+0x5c6>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a42      	ldr	r2, [pc, #264]	; (8001b44 <HAL_DMA_Init+0x6a4>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d013      	beq.n	8001a66 <HAL_DMA_Init+0x5c6>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a41      	ldr	r2, [pc, #260]	; (8001b48 <HAL_DMA_Init+0x6a8>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d00e      	beq.n	8001a66 <HAL_DMA_Init+0x5c6>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a3f      	ldr	r2, [pc, #252]	; (8001b4c <HAL_DMA_Init+0x6ac>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d009      	beq.n	8001a66 <HAL_DMA_Init+0x5c6>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a3e      	ldr	r2, [pc, #248]	; (8001b50 <HAL_DMA_Init+0x6b0>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d004      	beq.n	8001a66 <HAL_DMA_Init+0x5c6>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a3c      	ldr	r2, [pc, #240]	; (8001b54 <HAL_DMA_Init+0x6b4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d101      	bne.n	8001a6a <HAL_DMA_Init+0x5ca>
 8001a66:	2301      	movs	r3, #1
 8001a68:	e000      	b.n	8001a6c <HAL_DMA_Init+0x5cc>
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d032      	beq.n	8001ad6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 ff03 	bl	800287c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	2b80      	cmp	r3, #128	; 0x80
 8001a7c:	d102      	bne.n	8001a84 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001a98:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d010      	beq.n	8001ac4 <HAL_DMA_Init+0x624>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b08      	cmp	r3, #8
 8001aa8:	d80c      	bhi.n	8001ac4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 ff80 	bl	80029b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	e008      	b.n	8001ad6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	a7fdabf8 	.word	0xa7fdabf8
 8001af4:	cccccccd 	.word	0xcccccccd
 8001af8:	40020010 	.word	0x40020010
 8001afc:	40020028 	.word	0x40020028
 8001b00:	40020040 	.word	0x40020040
 8001b04:	40020058 	.word	0x40020058
 8001b08:	40020070 	.word	0x40020070
 8001b0c:	40020088 	.word	0x40020088
 8001b10:	400200a0 	.word	0x400200a0
 8001b14:	400200b8 	.word	0x400200b8
 8001b18:	40020410 	.word	0x40020410
 8001b1c:	40020428 	.word	0x40020428
 8001b20:	40020440 	.word	0x40020440
 8001b24:	40020458 	.word	0x40020458
 8001b28:	40020470 	.word	0x40020470
 8001b2c:	40020488 	.word	0x40020488
 8001b30:	400204a0 	.word	0x400204a0
 8001b34:	400204b8 	.word	0x400204b8
 8001b38:	58025408 	.word	0x58025408
 8001b3c:	5802541c 	.word	0x5802541c
 8001b40:	58025430 	.word	0x58025430
 8001b44:	58025444 	.word	0x58025444
 8001b48:	58025458 	.word	0x58025458
 8001b4c:	5802546c 	.word	0x5802546c
 8001b50:	58025480 	.word	0x58025480
 8001b54:	58025494 	.word	0x58025494

08001b58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001b60:	f7ff faf2 	bl	8001148 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e2dc      	b.n	800212a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d008      	beq.n	8001b8e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2280      	movs	r2, #128	; 0x80
 8001b80:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e2cd      	b.n	800212a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a76      	ldr	r2, [pc, #472]	; (8001d6c <HAL_DMA_Abort+0x214>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d04a      	beq.n	8001c2e <HAL_DMA_Abort+0xd6>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a74      	ldr	r2, [pc, #464]	; (8001d70 <HAL_DMA_Abort+0x218>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d045      	beq.n	8001c2e <HAL_DMA_Abort+0xd6>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a73      	ldr	r2, [pc, #460]	; (8001d74 <HAL_DMA_Abort+0x21c>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d040      	beq.n	8001c2e <HAL_DMA_Abort+0xd6>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a71      	ldr	r2, [pc, #452]	; (8001d78 <HAL_DMA_Abort+0x220>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d03b      	beq.n	8001c2e <HAL_DMA_Abort+0xd6>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a70      	ldr	r2, [pc, #448]	; (8001d7c <HAL_DMA_Abort+0x224>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d036      	beq.n	8001c2e <HAL_DMA_Abort+0xd6>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a6e      	ldr	r2, [pc, #440]	; (8001d80 <HAL_DMA_Abort+0x228>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d031      	beq.n	8001c2e <HAL_DMA_Abort+0xd6>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a6d      	ldr	r2, [pc, #436]	; (8001d84 <HAL_DMA_Abort+0x22c>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d02c      	beq.n	8001c2e <HAL_DMA_Abort+0xd6>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a6b      	ldr	r2, [pc, #428]	; (8001d88 <HAL_DMA_Abort+0x230>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d027      	beq.n	8001c2e <HAL_DMA_Abort+0xd6>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a6a      	ldr	r2, [pc, #424]	; (8001d8c <HAL_DMA_Abort+0x234>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d022      	beq.n	8001c2e <HAL_DMA_Abort+0xd6>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a68      	ldr	r2, [pc, #416]	; (8001d90 <HAL_DMA_Abort+0x238>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d01d      	beq.n	8001c2e <HAL_DMA_Abort+0xd6>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a67      	ldr	r2, [pc, #412]	; (8001d94 <HAL_DMA_Abort+0x23c>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d018      	beq.n	8001c2e <HAL_DMA_Abort+0xd6>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a65      	ldr	r2, [pc, #404]	; (8001d98 <HAL_DMA_Abort+0x240>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d013      	beq.n	8001c2e <HAL_DMA_Abort+0xd6>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a64      	ldr	r2, [pc, #400]	; (8001d9c <HAL_DMA_Abort+0x244>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d00e      	beq.n	8001c2e <HAL_DMA_Abort+0xd6>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a62      	ldr	r2, [pc, #392]	; (8001da0 <HAL_DMA_Abort+0x248>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d009      	beq.n	8001c2e <HAL_DMA_Abort+0xd6>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a61      	ldr	r2, [pc, #388]	; (8001da4 <HAL_DMA_Abort+0x24c>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d004      	beq.n	8001c2e <HAL_DMA_Abort+0xd6>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a5f      	ldr	r2, [pc, #380]	; (8001da8 <HAL_DMA_Abort+0x250>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d101      	bne.n	8001c32 <HAL_DMA_Abort+0xda>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <HAL_DMA_Abort+0xdc>
 8001c32:	2300      	movs	r3, #0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d013      	beq.n	8001c60 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 021e 	bic.w	r2, r2, #30
 8001c46:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	695a      	ldr	r2, [r3, #20]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c56:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	e00a      	b.n	8001c76 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 020e 	bic.w	r2, r2, #14
 8001c6e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a3c      	ldr	r2, [pc, #240]	; (8001d6c <HAL_DMA_Abort+0x214>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d072      	beq.n	8001d66 <HAL_DMA_Abort+0x20e>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a3a      	ldr	r2, [pc, #232]	; (8001d70 <HAL_DMA_Abort+0x218>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d06d      	beq.n	8001d66 <HAL_DMA_Abort+0x20e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a39      	ldr	r2, [pc, #228]	; (8001d74 <HAL_DMA_Abort+0x21c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d068      	beq.n	8001d66 <HAL_DMA_Abort+0x20e>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a37      	ldr	r2, [pc, #220]	; (8001d78 <HAL_DMA_Abort+0x220>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d063      	beq.n	8001d66 <HAL_DMA_Abort+0x20e>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a36      	ldr	r2, [pc, #216]	; (8001d7c <HAL_DMA_Abort+0x224>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d05e      	beq.n	8001d66 <HAL_DMA_Abort+0x20e>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a34      	ldr	r2, [pc, #208]	; (8001d80 <HAL_DMA_Abort+0x228>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d059      	beq.n	8001d66 <HAL_DMA_Abort+0x20e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a33      	ldr	r2, [pc, #204]	; (8001d84 <HAL_DMA_Abort+0x22c>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d054      	beq.n	8001d66 <HAL_DMA_Abort+0x20e>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a31      	ldr	r2, [pc, #196]	; (8001d88 <HAL_DMA_Abort+0x230>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d04f      	beq.n	8001d66 <HAL_DMA_Abort+0x20e>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a30      	ldr	r2, [pc, #192]	; (8001d8c <HAL_DMA_Abort+0x234>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d04a      	beq.n	8001d66 <HAL_DMA_Abort+0x20e>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a2e      	ldr	r2, [pc, #184]	; (8001d90 <HAL_DMA_Abort+0x238>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d045      	beq.n	8001d66 <HAL_DMA_Abort+0x20e>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a2d      	ldr	r2, [pc, #180]	; (8001d94 <HAL_DMA_Abort+0x23c>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d040      	beq.n	8001d66 <HAL_DMA_Abort+0x20e>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a2b      	ldr	r2, [pc, #172]	; (8001d98 <HAL_DMA_Abort+0x240>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d03b      	beq.n	8001d66 <HAL_DMA_Abort+0x20e>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a2a      	ldr	r2, [pc, #168]	; (8001d9c <HAL_DMA_Abort+0x244>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d036      	beq.n	8001d66 <HAL_DMA_Abort+0x20e>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a28      	ldr	r2, [pc, #160]	; (8001da0 <HAL_DMA_Abort+0x248>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d031      	beq.n	8001d66 <HAL_DMA_Abort+0x20e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a27      	ldr	r2, [pc, #156]	; (8001da4 <HAL_DMA_Abort+0x24c>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d02c      	beq.n	8001d66 <HAL_DMA_Abort+0x20e>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a25      	ldr	r2, [pc, #148]	; (8001da8 <HAL_DMA_Abort+0x250>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d027      	beq.n	8001d66 <HAL_DMA_Abort+0x20e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a24      	ldr	r2, [pc, #144]	; (8001dac <HAL_DMA_Abort+0x254>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d022      	beq.n	8001d66 <HAL_DMA_Abort+0x20e>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a22      	ldr	r2, [pc, #136]	; (8001db0 <HAL_DMA_Abort+0x258>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d01d      	beq.n	8001d66 <HAL_DMA_Abort+0x20e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a21      	ldr	r2, [pc, #132]	; (8001db4 <HAL_DMA_Abort+0x25c>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d018      	beq.n	8001d66 <HAL_DMA_Abort+0x20e>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a1f      	ldr	r2, [pc, #124]	; (8001db8 <HAL_DMA_Abort+0x260>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d013      	beq.n	8001d66 <HAL_DMA_Abort+0x20e>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a1e      	ldr	r2, [pc, #120]	; (8001dbc <HAL_DMA_Abort+0x264>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d00e      	beq.n	8001d66 <HAL_DMA_Abort+0x20e>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a1c      	ldr	r2, [pc, #112]	; (8001dc0 <HAL_DMA_Abort+0x268>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d009      	beq.n	8001d66 <HAL_DMA_Abort+0x20e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a1b      	ldr	r2, [pc, #108]	; (8001dc4 <HAL_DMA_Abort+0x26c>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d004      	beq.n	8001d66 <HAL_DMA_Abort+0x20e>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a19      	ldr	r2, [pc, #100]	; (8001dc8 <HAL_DMA_Abort+0x270>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d132      	bne.n	8001dcc <HAL_DMA_Abort+0x274>
 8001d66:	2301      	movs	r3, #1
 8001d68:	e031      	b.n	8001dce <HAL_DMA_Abort+0x276>
 8001d6a:	bf00      	nop
 8001d6c:	40020010 	.word	0x40020010
 8001d70:	40020028 	.word	0x40020028
 8001d74:	40020040 	.word	0x40020040
 8001d78:	40020058 	.word	0x40020058
 8001d7c:	40020070 	.word	0x40020070
 8001d80:	40020088 	.word	0x40020088
 8001d84:	400200a0 	.word	0x400200a0
 8001d88:	400200b8 	.word	0x400200b8
 8001d8c:	40020410 	.word	0x40020410
 8001d90:	40020428 	.word	0x40020428
 8001d94:	40020440 	.word	0x40020440
 8001d98:	40020458 	.word	0x40020458
 8001d9c:	40020470 	.word	0x40020470
 8001da0:	40020488 	.word	0x40020488
 8001da4:	400204a0 	.word	0x400204a0
 8001da8:	400204b8 	.word	0x400204b8
 8001dac:	58025408 	.word	0x58025408
 8001db0:	5802541c 	.word	0x5802541c
 8001db4:	58025430 	.word	0x58025430
 8001db8:	58025444 	.word	0x58025444
 8001dbc:	58025458 	.word	0x58025458
 8001dc0:	5802546c 	.word	0x5802546c
 8001dc4:	58025480 	.word	0x58025480
 8001dc8:	58025494 	.word	0x58025494
 8001dcc:	2300      	movs	r3, #0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d007      	beq.n	8001de2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ddc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001de0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a6d      	ldr	r2, [pc, #436]	; (8001f9c <HAL_DMA_Abort+0x444>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d04a      	beq.n	8001e82 <HAL_DMA_Abort+0x32a>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a6b      	ldr	r2, [pc, #428]	; (8001fa0 <HAL_DMA_Abort+0x448>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d045      	beq.n	8001e82 <HAL_DMA_Abort+0x32a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a6a      	ldr	r2, [pc, #424]	; (8001fa4 <HAL_DMA_Abort+0x44c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d040      	beq.n	8001e82 <HAL_DMA_Abort+0x32a>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a68      	ldr	r2, [pc, #416]	; (8001fa8 <HAL_DMA_Abort+0x450>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d03b      	beq.n	8001e82 <HAL_DMA_Abort+0x32a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a67      	ldr	r2, [pc, #412]	; (8001fac <HAL_DMA_Abort+0x454>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d036      	beq.n	8001e82 <HAL_DMA_Abort+0x32a>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a65      	ldr	r2, [pc, #404]	; (8001fb0 <HAL_DMA_Abort+0x458>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d031      	beq.n	8001e82 <HAL_DMA_Abort+0x32a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a64      	ldr	r2, [pc, #400]	; (8001fb4 <HAL_DMA_Abort+0x45c>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d02c      	beq.n	8001e82 <HAL_DMA_Abort+0x32a>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a62      	ldr	r2, [pc, #392]	; (8001fb8 <HAL_DMA_Abort+0x460>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d027      	beq.n	8001e82 <HAL_DMA_Abort+0x32a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a61      	ldr	r2, [pc, #388]	; (8001fbc <HAL_DMA_Abort+0x464>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d022      	beq.n	8001e82 <HAL_DMA_Abort+0x32a>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a5f      	ldr	r2, [pc, #380]	; (8001fc0 <HAL_DMA_Abort+0x468>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d01d      	beq.n	8001e82 <HAL_DMA_Abort+0x32a>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a5e      	ldr	r2, [pc, #376]	; (8001fc4 <HAL_DMA_Abort+0x46c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d018      	beq.n	8001e82 <HAL_DMA_Abort+0x32a>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a5c      	ldr	r2, [pc, #368]	; (8001fc8 <HAL_DMA_Abort+0x470>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d013      	beq.n	8001e82 <HAL_DMA_Abort+0x32a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a5b      	ldr	r2, [pc, #364]	; (8001fcc <HAL_DMA_Abort+0x474>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d00e      	beq.n	8001e82 <HAL_DMA_Abort+0x32a>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a59      	ldr	r2, [pc, #356]	; (8001fd0 <HAL_DMA_Abort+0x478>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d009      	beq.n	8001e82 <HAL_DMA_Abort+0x32a>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a58      	ldr	r2, [pc, #352]	; (8001fd4 <HAL_DMA_Abort+0x47c>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d004      	beq.n	8001e82 <HAL_DMA_Abort+0x32a>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a56      	ldr	r2, [pc, #344]	; (8001fd8 <HAL_DMA_Abort+0x480>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d108      	bne.n	8001e94 <HAL_DMA_Abort+0x33c>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0201 	bic.w	r2, r2, #1
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	e007      	b.n	8001ea4 <HAL_DMA_Abort+0x34c>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 0201 	bic.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001ea4:	e013      	b.n	8001ece <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ea6:	f7ff f94f 	bl	8001148 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b05      	cmp	r3, #5
 8001eb2:	d90c      	bls.n	8001ece <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2220      	movs	r2, #32
 8001eb8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e12d      	b.n	800212a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1e5      	bne.n	8001ea6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a2f      	ldr	r2, [pc, #188]	; (8001f9c <HAL_DMA_Abort+0x444>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d04a      	beq.n	8001f7a <HAL_DMA_Abort+0x422>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a2d      	ldr	r2, [pc, #180]	; (8001fa0 <HAL_DMA_Abort+0x448>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d045      	beq.n	8001f7a <HAL_DMA_Abort+0x422>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a2c      	ldr	r2, [pc, #176]	; (8001fa4 <HAL_DMA_Abort+0x44c>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d040      	beq.n	8001f7a <HAL_DMA_Abort+0x422>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a2a      	ldr	r2, [pc, #168]	; (8001fa8 <HAL_DMA_Abort+0x450>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d03b      	beq.n	8001f7a <HAL_DMA_Abort+0x422>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a29      	ldr	r2, [pc, #164]	; (8001fac <HAL_DMA_Abort+0x454>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d036      	beq.n	8001f7a <HAL_DMA_Abort+0x422>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a27      	ldr	r2, [pc, #156]	; (8001fb0 <HAL_DMA_Abort+0x458>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d031      	beq.n	8001f7a <HAL_DMA_Abort+0x422>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a26      	ldr	r2, [pc, #152]	; (8001fb4 <HAL_DMA_Abort+0x45c>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d02c      	beq.n	8001f7a <HAL_DMA_Abort+0x422>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a24      	ldr	r2, [pc, #144]	; (8001fb8 <HAL_DMA_Abort+0x460>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d027      	beq.n	8001f7a <HAL_DMA_Abort+0x422>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a23      	ldr	r2, [pc, #140]	; (8001fbc <HAL_DMA_Abort+0x464>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d022      	beq.n	8001f7a <HAL_DMA_Abort+0x422>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a21      	ldr	r2, [pc, #132]	; (8001fc0 <HAL_DMA_Abort+0x468>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d01d      	beq.n	8001f7a <HAL_DMA_Abort+0x422>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a20      	ldr	r2, [pc, #128]	; (8001fc4 <HAL_DMA_Abort+0x46c>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d018      	beq.n	8001f7a <HAL_DMA_Abort+0x422>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a1e      	ldr	r2, [pc, #120]	; (8001fc8 <HAL_DMA_Abort+0x470>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d013      	beq.n	8001f7a <HAL_DMA_Abort+0x422>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a1d      	ldr	r2, [pc, #116]	; (8001fcc <HAL_DMA_Abort+0x474>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d00e      	beq.n	8001f7a <HAL_DMA_Abort+0x422>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a1b      	ldr	r2, [pc, #108]	; (8001fd0 <HAL_DMA_Abort+0x478>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d009      	beq.n	8001f7a <HAL_DMA_Abort+0x422>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a1a      	ldr	r2, [pc, #104]	; (8001fd4 <HAL_DMA_Abort+0x47c>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d004      	beq.n	8001f7a <HAL_DMA_Abort+0x422>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a18      	ldr	r2, [pc, #96]	; (8001fd8 <HAL_DMA_Abort+0x480>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d101      	bne.n	8001f7e <HAL_DMA_Abort+0x426>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <HAL_DMA_Abort+0x428>
 8001f7e:	2300      	movs	r3, #0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d02b      	beq.n	8001fdc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f88:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8e:	f003 031f 	and.w	r3, r3, #31
 8001f92:	223f      	movs	r2, #63	; 0x3f
 8001f94:	409a      	lsls	r2, r3
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	609a      	str	r2, [r3, #8]
 8001f9a:	e02a      	b.n	8001ff2 <HAL_DMA_Abort+0x49a>
 8001f9c:	40020010 	.word	0x40020010
 8001fa0:	40020028 	.word	0x40020028
 8001fa4:	40020040 	.word	0x40020040
 8001fa8:	40020058 	.word	0x40020058
 8001fac:	40020070 	.word	0x40020070
 8001fb0:	40020088 	.word	0x40020088
 8001fb4:	400200a0 	.word	0x400200a0
 8001fb8:	400200b8 	.word	0x400200b8
 8001fbc:	40020410 	.word	0x40020410
 8001fc0:	40020428 	.word	0x40020428
 8001fc4:	40020440 	.word	0x40020440
 8001fc8:	40020458 	.word	0x40020458
 8001fcc:	40020470 	.word	0x40020470
 8001fd0:	40020488 	.word	0x40020488
 8001fd4:	400204a0 	.word	0x400204a0
 8001fd8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe6:	f003 031f 	and.w	r3, r3, #31
 8001fea:	2201      	movs	r2, #1
 8001fec:	409a      	lsls	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a4f      	ldr	r2, [pc, #316]	; (8002134 <HAL_DMA_Abort+0x5dc>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d072      	beq.n	80020e2 <HAL_DMA_Abort+0x58a>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a4d      	ldr	r2, [pc, #308]	; (8002138 <HAL_DMA_Abort+0x5e0>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d06d      	beq.n	80020e2 <HAL_DMA_Abort+0x58a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a4c      	ldr	r2, [pc, #304]	; (800213c <HAL_DMA_Abort+0x5e4>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d068      	beq.n	80020e2 <HAL_DMA_Abort+0x58a>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a4a      	ldr	r2, [pc, #296]	; (8002140 <HAL_DMA_Abort+0x5e8>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d063      	beq.n	80020e2 <HAL_DMA_Abort+0x58a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a49      	ldr	r2, [pc, #292]	; (8002144 <HAL_DMA_Abort+0x5ec>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d05e      	beq.n	80020e2 <HAL_DMA_Abort+0x58a>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a47      	ldr	r2, [pc, #284]	; (8002148 <HAL_DMA_Abort+0x5f0>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d059      	beq.n	80020e2 <HAL_DMA_Abort+0x58a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a46      	ldr	r2, [pc, #280]	; (800214c <HAL_DMA_Abort+0x5f4>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d054      	beq.n	80020e2 <HAL_DMA_Abort+0x58a>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a44      	ldr	r2, [pc, #272]	; (8002150 <HAL_DMA_Abort+0x5f8>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d04f      	beq.n	80020e2 <HAL_DMA_Abort+0x58a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a43      	ldr	r2, [pc, #268]	; (8002154 <HAL_DMA_Abort+0x5fc>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d04a      	beq.n	80020e2 <HAL_DMA_Abort+0x58a>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a41      	ldr	r2, [pc, #260]	; (8002158 <HAL_DMA_Abort+0x600>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d045      	beq.n	80020e2 <HAL_DMA_Abort+0x58a>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a40      	ldr	r2, [pc, #256]	; (800215c <HAL_DMA_Abort+0x604>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d040      	beq.n	80020e2 <HAL_DMA_Abort+0x58a>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a3e      	ldr	r2, [pc, #248]	; (8002160 <HAL_DMA_Abort+0x608>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d03b      	beq.n	80020e2 <HAL_DMA_Abort+0x58a>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a3d      	ldr	r2, [pc, #244]	; (8002164 <HAL_DMA_Abort+0x60c>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d036      	beq.n	80020e2 <HAL_DMA_Abort+0x58a>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a3b      	ldr	r2, [pc, #236]	; (8002168 <HAL_DMA_Abort+0x610>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d031      	beq.n	80020e2 <HAL_DMA_Abort+0x58a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a3a      	ldr	r2, [pc, #232]	; (800216c <HAL_DMA_Abort+0x614>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d02c      	beq.n	80020e2 <HAL_DMA_Abort+0x58a>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a38      	ldr	r2, [pc, #224]	; (8002170 <HAL_DMA_Abort+0x618>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d027      	beq.n	80020e2 <HAL_DMA_Abort+0x58a>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a37      	ldr	r2, [pc, #220]	; (8002174 <HAL_DMA_Abort+0x61c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d022      	beq.n	80020e2 <HAL_DMA_Abort+0x58a>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a35      	ldr	r2, [pc, #212]	; (8002178 <HAL_DMA_Abort+0x620>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d01d      	beq.n	80020e2 <HAL_DMA_Abort+0x58a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a34      	ldr	r2, [pc, #208]	; (800217c <HAL_DMA_Abort+0x624>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d018      	beq.n	80020e2 <HAL_DMA_Abort+0x58a>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a32      	ldr	r2, [pc, #200]	; (8002180 <HAL_DMA_Abort+0x628>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d013      	beq.n	80020e2 <HAL_DMA_Abort+0x58a>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a31      	ldr	r2, [pc, #196]	; (8002184 <HAL_DMA_Abort+0x62c>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d00e      	beq.n	80020e2 <HAL_DMA_Abort+0x58a>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a2f      	ldr	r2, [pc, #188]	; (8002188 <HAL_DMA_Abort+0x630>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d009      	beq.n	80020e2 <HAL_DMA_Abort+0x58a>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a2e      	ldr	r2, [pc, #184]	; (800218c <HAL_DMA_Abort+0x634>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d004      	beq.n	80020e2 <HAL_DMA_Abort+0x58a>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a2c      	ldr	r2, [pc, #176]	; (8002190 <HAL_DMA_Abort+0x638>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d101      	bne.n	80020e6 <HAL_DMA_Abort+0x58e>
 80020e2:	2301      	movs	r3, #1
 80020e4:	e000      	b.n	80020e8 <HAL_DMA_Abort+0x590>
 80020e6:	2300      	movs	r3, #0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d015      	beq.n	8002118 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80020f4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00c      	beq.n	8002118 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002108:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800210c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002116:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40020010 	.word	0x40020010
 8002138:	40020028 	.word	0x40020028
 800213c:	40020040 	.word	0x40020040
 8002140:	40020058 	.word	0x40020058
 8002144:	40020070 	.word	0x40020070
 8002148:	40020088 	.word	0x40020088
 800214c:	400200a0 	.word	0x400200a0
 8002150:	400200b8 	.word	0x400200b8
 8002154:	40020410 	.word	0x40020410
 8002158:	40020428 	.word	0x40020428
 800215c:	40020440 	.word	0x40020440
 8002160:	40020458 	.word	0x40020458
 8002164:	40020470 	.word	0x40020470
 8002168:	40020488 	.word	0x40020488
 800216c:	400204a0 	.word	0x400204a0
 8002170:	400204b8 	.word	0x400204b8
 8002174:	58025408 	.word	0x58025408
 8002178:	5802541c 	.word	0x5802541c
 800217c:	58025430 	.word	0x58025430
 8002180:	58025444 	.word	0x58025444
 8002184:	58025458 	.word	0x58025458
 8002188:	5802546c 	.word	0x5802546c
 800218c:	58025480 	.word	0x58025480
 8002190:	58025494 	.word	0x58025494

08002194 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e237      	b.n	8002616 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d004      	beq.n	80021bc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2280      	movs	r2, #128	; 0x80
 80021b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e22c      	b.n	8002616 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a5c      	ldr	r2, [pc, #368]	; (8002334 <HAL_DMA_Abort_IT+0x1a0>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d04a      	beq.n	800225c <HAL_DMA_Abort_IT+0xc8>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a5b      	ldr	r2, [pc, #364]	; (8002338 <HAL_DMA_Abort_IT+0x1a4>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d045      	beq.n	800225c <HAL_DMA_Abort_IT+0xc8>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a59      	ldr	r2, [pc, #356]	; (800233c <HAL_DMA_Abort_IT+0x1a8>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d040      	beq.n	800225c <HAL_DMA_Abort_IT+0xc8>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a58      	ldr	r2, [pc, #352]	; (8002340 <HAL_DMA_Abort_IT+0x1ac>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d03b      	beq.n	800225c <HAL_DMA_Abort_IT+0xc8>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a56      	ldr	r2, [pc, #344]	; (8002344 <HAL_DMA_Abort_IT+0x1b0>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d036      	beq.n	800225c <HAL_DMA_Abort_IT+0xc8>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a55      	ldr	r2, [pc, #340]	; (8002348 <HAL_DMA_Abort_IT+0x1b4>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d031      	beq.n	800225c <HAL_DMA_Abort_IT+0xc8>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a53      	ldr	r2, [pc, #332]	; (800234c <HAL_DMA_Abort_IT+0x1b8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d02c      	beq.n	800225c <HAL_DMA_Abort_IT+0xc8>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a52      	ldr	r2, [pc, #328]	; (8002350 <HAL_DMA_Abort_IT+0x1bc>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d027      	beq.n	800225c <HAL_DMA_Abort_IT+0xc8>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a50      	ldr	r2, [pc, #320]	; (8002354 <HAL_DMA_Abort_IT+0x1c0>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d022      	beq.n	800225c <HAL_DMA_Abort_IT+0xc8>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a4f      	ldr	r2, [pc, #316]	; (8002358 <HAL_DMA_Abort_IT+0x1c4>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d01d      	beq.n	800225c <HAL_DMA_Abort_IT+0xc8>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a4d      	ldr	r2, [pc, #308]	; (800235c <HAL_DMA_Abort_IT+0x1c8>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d018      	beq.n	800225c <HAL_DMA_Abort_IT+0xc8>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a4c      	ldr	r2, [pc, #304]	; (8002360 <HAL_DMA_Abort_IT+0x1cc>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d013      	beq.n	800225c <HAL_DMA_Abort_IT+0xc8>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a4a      	ldr	r2, [pc, #296]	; (8002364 <HAL_DMA_Abort_IT+0x1d0>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d00e      	beq.n	800225c <HAL_DMA_Abort_IT+0xc8>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a49      	ldr	r2, [pc, #292]	; (8002368 <HAL_DMA_Abort_IT+0x1d4>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d009      	beq.n	800225c <HAL_DMA_Abort_IT+0xc8>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a47      	ldr	r2, [pc, #284]	; (800236c <HAL_DMA_Abort_IT+0x1d8>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d004      	beq.n	800225c <HAL_DMA_Abort_IT+0xc8>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a46      	ldr	r2, [pc, #280]	; (8002370 <HAL_DMA_Abort_IT+0x1dc>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d101      	bne.n	8002260 <HAL_DMA_Abort_IT+0xcc>
 800225c:	2301      	movs	r3, #1
 800225e:	e000      	b.n	8002262 <HAL_DMA_Abort_IT+0xce>
 8002260:	2300      	movs	r3, #0
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 8086 	beq.w	8002374 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2204      	movs	r2, #4
 800226c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a2f      	ldr	r2, [pc, #188]	; (8002334 <HAL_DMA_Abort_IT+0x1a0>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d04a      	beq.n	8002310 <HAL_DMA_Abort_IT+0x17c>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a2e      	ldr	r2, [pc, #184]	; (8002338 <HAL_DMA_Abort_IT+0x1a4>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d045      	beq.n	8002310 <HAL_DMA_Abort_IT+0x17c>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a2c      	ldr	r2, [pc, #176]	; (800233c <HAL_DMA_Abort_IT+0x1a8>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d040      	beq.n	8002310 <HAL_DMA_Abort_IT+0x17c>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a2b      	ldr	r2, [pc, #172]	; (8002340 <HAL_DMA_Abort_IT+0x1ac>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d03b      	beq.n	8002310 <HAL_DMA_Abort_IT+0x17c>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a29      	ldr	r2, [pc, #164]	; (8002344 <HAL_DMA_Abort_IT+0x1b0>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d036      	beq.n	8002310 <HAL_DMA_Abort_IT+0x17c>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a28      	ldr	r2, [pc, #160]	; (8002348 <HAL_DMA_Abort_IT+0x1b4>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d031      	beq.n	8002310 <HAL_DMA_Abort_IT+0x17c>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a26      	ldr	r2, [pc, #152]	; (800234c <HAL_DMA_Abort_IT+0x1b8>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d02c      	beq.n	8002310 <HAL_DMA_Abort_IT+0x17c>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a25      	ldr	r2, [pc, #148]	; (8002350 <HAL_DMA_Abort_IT+0x1bc>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d027      	beq.n	8002310 <HAL_DMA_Abort_IT+0x17c>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a23      	ldr	r2, [pc, #140]	; (8002354 <HAL_DMA_Abort_IT+0x1c0>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d022      	beq.n	8002310 <HAL_DMA_Abort_IT+0x17c>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a22      	ldr	r2, [pc, #136]	; (8002358 <HAL_DMA_Abort_IT+0x1c4>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d01d      	beq.n	8002310 <HAL_DMA_Abort_IT+0x17c>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a20      	ldr	r2, [pc, #128]	; (800235c <HAL_DMA_Abort_IT+0x1c8>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d018      	beq.n	8002310 <HAL_DMA_Abort_IT+0x17c>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a1f      	ldr	r2, [pc, #124]	; (8002360 <HAL_DMA_Abort_IT+0x1cc>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d013      	beq.n	8002310 <HAL_DMA_Abort_IT+0x17c>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a1d      	ldr	r2, [pc, #116]	; (8002364 <HAL_DMA_Abort_IT+0x1d0>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d00e      	beq.n	8002310 <HAL_DMA_Abort_IT+0x17c>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a1c      	ldr	r2, [pc, #112]	; (8002368 <HAL_DMA_Abort_IT+0x1d4>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d009      	beq.n	8002310 <HAL_DMA_Abort_IT+0x17c>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a1a      	ldr	r2, [pc, #104]	; (800236c <HAL_DMA_Abort_IT+0x1d8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d004      	beq.n	8002310 <HAL_DMA_Abort_IT+0x17c>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a19      	ldr	r2, [pc, #100]	; (8002370 <HAL_DMA_Abort_IT+0x1dc>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d108      	bne.n	8002322 <HAL_DMA_Abort_IT+0x18e>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0201 	bic.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	e178      	b.n	8002614 <HAL_DMA_Abort_IT+0x480>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0201 	bic.w	r2, r2, #1
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	e16f      	b.n	8002614 <HAL_DMA_Abort_IT+0x480>
 8002334:	40020010 	.word	0x40020010
 8002338:	40020028 	.word	0x40020028
 800233c:	40020040 	.word	0x40020040
 8002340:	40020058 	.word	0x40020058
 8002344:	40020070 	.word	0x40020070
 8002348:	40020088 	.word	0x40020088
 800234c:	400200a0 	.word	0x400200a0
 8002350:	400200b8 	.word	0x400200b8
 8002354:	40020410 	.word	0x40020410
 8002358:	40020428 	.word	0x40020428
 800235c:	40020440 	.word	0x40020440
 8002360:	40020458 	.word	0x40020458
 8002364:	40020470 	.word	0x40020470
 8002368:	40020488 	.word	0x40020488
 800236c:	400204a0 	.word	0x400204a0
 8002370:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 020e 	bic.w	r2, r2, #14
 8002382:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a6c      	ldr	r2, [pc, #432]	; (800253c <HAL_DMA_Abort_IT+0x3a8>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d04a      	beq.n	8002424 <HAL_DMA_Abort_IT+0x290>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a6b      	ldr	r2, [pc, #428]	; (8002540 <HAL_DMA_Abort_IT+0x3ac>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d045      	beq.n	8002424 <HAL_DMA_Abort_IT+0x290>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a69      	ldr	r2, [pc, #420]	; (8002544 <HAL_DMA_Abort_IT+0x3b0>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d040      	beq.n	8002424 <HAL_DMA_Abort_IT+0x290>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a68      	ldr	r2, [pc, #416]	; (8002548 <HAL_DMA_Abort_IT+0x3b4>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d03b      	beq.n	8002424 <HAL_DMA_Abort_IT+0x290>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a66      	ldr	r2, [pc, #408]	; (800254c <HAL_DMA_Abort_IT+0x3b8>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d036      	beq.n	8002424 <HAL_DMA_Abort_IT+0x290>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a65      	ldr	r2, [pc, #404]	; (8002550 <HAL_DMA_Abort_IT+0x3bc>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d031      	beq.n	8002424 <HAL_DMA_Abort_IT+0x290>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a63      	ldr	r2, [pc, #396]	; (8002554 <HAL_DMA_Abort_IT+0x3c0>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d02c      	beq.n	8002424 <HAL_DMA_Abort_IT+0x290>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a62      	ldr	r2, [pc, #392]	; (8002558 <HAL_DMA_Abort_IT+0x3c4>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d027      	beq.n	8002424 <HAL_DMA_Abort_IT+0x290>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a60      	ldr	r2, [pc, #384]	; (800255c <HAL_DMA_Abort_IT+0x3c8>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d022      	beq.n	8002424 <HAL_DMA_Abort_IT+0x290>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a5f      	ldr	r2, [pc, #380]	; (8002560 <HAL_DMA_Abort_IT+0x3cc>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d01d      	beq.n	8002424 <HAL_DMA_Abort_IT+0x290>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a5d      	ldr	r2, [pc, #372]	; (8002564 <HAL_DMA_Abort_IT+0x3d0>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d018      	beq.n	8002424 <HAL_DMA_Abort_IT+0x290>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a5c      	ldr	r2, [pc, #368]	; (8002568 <HAL_DMA_Abort_IT+0x3d4>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d013      	beq.n	8002424 <HAL_DMA_Abort_IT+0x290>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a5a      	ldr	r2, [pc, #360]	; (800256c <HAL_DMA_Abort_IT+0x3d8>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d00e      	beq.n	8002424 <HAL_DMA_Abort_IT+0x290>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a59      	ldr	r2, [pc, #356]	; (8002570 <HAL_DMA_Abort_IT+0x3dc>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d009      	beq.n	8002424 <HAL_DMA_Abort_IT+0x290>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a57      	ldr	r2, [pc, #348]	; (8002574 <HAL_DMA_Abort_IT+0x3e0>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d004      	beq.n	8002424 <HAL_DMA_Abort_IT+0x290>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a56      	ldr	r2, [pc, #344]	; (8002578 <HAL_DMA_Abort_IT+0x3e4>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d108      	bne.n	8002436 <HAL_DMA_Abort_IT+0x2a2>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0201 	bic.w	r2, r2, #1
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	e007      	b.n	8002446 <HAL_DMA_Abort_IT+0x2b2>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0201 	bic.w	r2, r2, #1
 8002444:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a3c      	ldr	r2, [pc, #240]	; (800253c <HAL_DMA_Abort_IT+0x3a8>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d072      	beq.n	8002536 <HAL_DMA_Abort_IT+0x3a2>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a3a      	ldr	r2, [pc, #232]	; (8002540 <HAL_DMA_Abort_IT+0x3ac>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d06d      	beq.n	8002536 <HAL_DMA_Abort_IT+0x3a2>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a39      	ldr	r2, [pc, #228]	; (8002544 <HAL_DMA_Abort_IT+0x3b0>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d068      	beq.n	8002536 <HAL_DMA_Abort_IT+0x3a2>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a37      	ldr	r2, [pc, #220]	; (8002548 <HAL_DMA_Abort_IT+0x3b4>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d063      	beq.n	8002536 <HAL_DMA_Abort_IT+0x3a2>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a36      	ldr	r2, [pc, #216]	; (800254c <HAL_DMA_Abort_IT+0x3b8>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d05e      	beq.n	8002536 <HAL_DMA_Abort_IT+0x3a2>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a34      	ldr	r2, [pc, #208]	; (8002550 <HAL_DMA_Abort_IT+0x3bc>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d059      	beq.n	8002536 <HAL_DMA_Abort_IT+0x3a2>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a33      	ldr	r2, [pc, #204]	; (8002554 <HAL_DMA_Abort_IT+0x3c0>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d054      	beq.n	8002536 <HAL_DMA_Abort_IT+0x3a2>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a31      	ldr	r2, [pc, #196]	; (8002558 <HAL_DMA_Abort_IT+0x3c4>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d04f      	beq.n	8002536 <HAL_DMA_Abort_IT+0x3a2>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a30      	ldr	r2, [pc, #192]	; (800255c <HAL_DMA_Abort_IT+0x3c8>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d04a      	beq.n	8002536 <HAL_DMA_Abort_IT+0x3a2>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a2e      	ldr	r2, [pc, #184]	; (8002560 <HAL_DMA_Abort_IT+0x3cc>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d045      	beq.n	8002536 <HAL_DMA_Abort_IT+0x3a2>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a2d      	ldr	r2, [pc, #180]	; (8002564 <HAL_DMA_Abort_IT+0x3d0>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d040      	beq.n	8002536 <HAL_DMA_Abort_IT+0x3a2>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a2b      	ldr	r2, [pc, #172]	; (8002568 <HAL_DMA_Abort_IT+0x3d4>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d03b      	beq.n	8002536 <HAL_DMA_Abort_IT+0x3a2>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a2a      	ldr	r2, [pc, #168]	; (800256c <HAL_DMA_Abort_IT+0x3d8>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d036      	beq.n	8002536 <HAL_DMA_Abort_IT+0x3a2>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a28      	ldr	r2, [pc, #160]	; (8002570 <HAL_DMA_Abort_IT+0x3dc>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d031      	beq.n	8002536 <HAL_DMA_Abort_IT+0x3a2>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a27      	ldr	r2, [pc, #156]	; (8002574 <HAL_DMA_Abort_IT+0x3e0>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d02c      	beq.n	8002536 <HAL_DMA_Abort_IT+0x3a2>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a25      	ldr	r2, [pc, #148]	; (8002578 <HAL_DMA_Abort_IT+0x3e4>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d027      	beq.n	8002536 <HAL_DMA_Abort_IT+0x3a2>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a24      	ldr	r2, [pc, #144]	; (800257c <HAL_DMA_Abort_IT+0x3e8>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d022      	beq.n	8002536 <HAL_DMA_Abort_IT+0x3a2>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a22      	ldr	r2, [pc, #136]	; (8002580 <HAL_DMA_Abort_IT+0x3ec>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d01d      	beq.n	8002536 <HAL_DMA_Abort_IT+0x3a2>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a21      	ldr	r2, [pc, #132]	; (8002584 <HAL_DMA_Abort_IT+0x3f0>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d018      	beq.n	8002536 <HAL_DMA_Abort_IT+0x3a2>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a1f      	ldr	r2, [pc, #124]	; (8002588 <HAL_DMA_Abort_IT+0x3f4>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d013      	beq.n	8002536 <HAL_DMA_Abort_IT+0x3a2>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a1e      	ldr	r2, [pc, #120]	; (800258c <HAL_DMA_Abort_IT+0x3f8>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d00e      	beq.n	8002536 <HAL_DMA_Abort_IT+0x3a2>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a1c      	ldr	r2, [pc, #112]	; (8002590 <HAL_DMA_Abort_IT+0x3fc>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d009      	beq.n	8002536 <HAL_DMA_Abort_IT+0x3a2>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a1b      	ldr	r2, [pc, #108]	; (8002594 <HAL_DMA_Abort_IT+0x400>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d004      	beq.n	8002536 <HAL_DMA_Abort_IT+0x3a2>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a19      	ldr	r2, [pc, #100]	; (8002598 <HAL_DMA_Abort_IT+0x404>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d132      	bne.n	800259c <HAL_DMA_Abort_IT+0x408>
 8002536:	2301      	movs	r3, #1
 8002538:	e031      	b.n	800259e <HAL_DMA_Abort_IT+0x40a>
 800253a:	bf00      	nop
 800253c:	40020010 	.word	0x40020010
 8002540:	40020028 	.word	0x40020028
 8002544:	40020040 	.word	0x40020040
 8002548:	40020058 	.word	0x40020058
 800254c:	40020070 	.word	0x40020070
 8002550:	40020088 	.word	0x40020088
 8002554:	400200a0 	.word	0x400200a0
 8002558:	400200b8 	.word	0x400200b8
 800255c:	40020410 	.word	0x40020410
 8002560:	40020428 	.word	0x40020428
 8002564:	40020440 	.word	0x40020440
 8002568:	40020458 	.word	0x40020458
 800256c:	40020470 	.word	0x40020470
 8002570:	40020488 	.word	0x40020488
 8002574:	400204a0 	.word	0x400204a0
 8002578:	400204b8 	.word	0x400204b8
 800257c:	58025408 	.word	0x58025408
 8002580:	5802541c 	.word	0x5802541c
 8002584:	58025430 	.word	0x58025430
 8002588:	58025444 	.word	0x58025444
 800258c:	58025458 	.word	0x58025458
 8002590:	5802546c 	.word	0x5802546c
 8002594:	58025480 	.word	0x58025480
 8002598:	58025494 	.word	0x58025494
 800259c:	2300      	movs	r3, #0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d028      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025b0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025bc:	f003 031f 	and.w	r3, r3, #31
 80025c0:	2201      	movs	r2, #1
 80025c2:	409a      	lsls	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80025d0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00c      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025e8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80025f2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop

08002620 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a42      	ldr	r2, [pc, #264]	; (8002738 <DMA_CalcBaseAndBitshift+0x118>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d04a      	beq.n	80026c8 <DMA_CalcBaseAndBitshift+0xa8>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a41      	ldr	r2, [pc, #260]	; (800273c <DMA_CalcBaseAndBitshift+0x11c>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d045      	beq.n	80026c8 <DMA_CalcBaseAndBitshift+0xa8>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a3f      	ldr	r2, [pc, #252]	; (8002740 <DMA_CalcBaseAndBitshift+0x120>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d040      	beq.n	80026c8 <DMA_CalcBaseAndBitshift+0xa8>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a3e      	ldr	r2, [pc, #248]	; (8002744 <DMA_CalcBaseAndBitshift+0x124>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d03b      	beq.n	80026c8 <DMA_CalcBaseAndBitshift+0xa8>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a3c      	ldr	r2, [pc, #240]	; (8002748 <DMA_CalcBaseAndBitshift+0x128>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d036      	beq.n	80026c8 <DMA_CalcBaseAndBitshift+0xa8>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a3b      	ldr	r2, [pc, #236]	; (800274c <DMA_CalcBaseAndBitshift+0x12c>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d031      	beq.n	80026c8 <DMA_CalcBaseAndBitshift+0xa8>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a39      	ldr	r2, [pc, #228]	; (8002750 <DMA_CalcBaseAndBitshift+0x130>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d02c      	beq.n	80026c8 <DMA_CalcBaseAndBitshift+0xa8>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a38      	ldr	r2, [pc, #224]	; (8002754 <DMA_CalcBaseAndBitshift+0x134>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d027      	beq.n	80026c8 <DMA_CalcBaseAndBitshift+0xa8>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a36      	ldr	r2, [pc, #216]	; (8002758 <DMA_CalcBaseAndBitshift+0x138>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d022      	beq.n	80026c8 <DMA_CalcBaseAndBitshift+0xa8>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a35      	ldr	r2, [pc, #212]	; (800275c <DMA_CalcBaseAndBitshift+0x13c>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d01d      	beq.n	80026c8 <DMA_CalcBaseAndBitshift+0xa8>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a33      	ldr	r2, [pc, #204]	; (8002760 <DMA_CalcBaseAndBitshift+0x140>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d018      	beq.n	80026c8 <DMA_CalcBaseAndBitshift+0xa8>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a32      	ldr	r2, [pc, #200]	; (8002764 <DMA_CalcBaseAndBitshift+0x144>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d013      	beq.n	80026c8 <DMA_CalcBaseAndBitshift+0xa8>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a30      	ldr	r2, [pc, #192]	; (8002768 <DMA_CalcBaseAndBitshift+0x148>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d00e      	beq.n	80026c8 <DMA_CalcBaseAndBitshift+0xa8>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a2f      	ldr	r2, [pc, #188]	; (800276c <DMA_CalcBaseAndBitshift+0x14c>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d009      	beq.n	80026c8 <DMA_CalcBaseAndBitshift+0xa8>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a2d      	ldr	r2, [pc, #180]	; (8002770 <DMA_CalcBaseAndBitshift+0x150>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d004      	beq.n	80026c8 <DMA_CalcBaseAndBitshift+0xa8>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a2c      	ldr	r2, [pc, #176]	; (8002774 <DMA_CalcBaseAndBitshift+0x154>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d101      	bne.n	80026cc <DMA_CalcBaseAndBitshift+0xac>
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <DMA_CalcBaseAndBitshift+0xae>
 80026cc:	2300      	movs	r3, #0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d024      	beq.n	800271c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	3b10      	subs	r3, #16
 80026da:	4a27      	ldr	r2, [pc, #156]	; (8002778 <DMA_CalcBaseAndBitshift+0x158>)
 80026dc:	fba2 2303 	umull	r2, r3, r2, r3
 80026e0:	091b      	lsrs	r3, r3, #4
 80026e2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	4a24      	ldr	r2, [pc, #144]	; (800277c <DMA_CalcBaseAndBitshift+0x15c>)
 80026ec:	5cd3      	ldrb	r3, [r2, r3]
 80026ee:	461a      	mov	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2b03      	cmp	r3, #3
 80026f8:	d908      	bls.n	800270c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	4b1f      	ldr	r3, [pc, #124]	; (8002780 <DMA_CalcBaseAndBitshift+0x160>)
 8002702:	4013      	ands	r3, r2
 8002704:	1d1a      	adds	r2, r3, #4
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	659a      	str	r2, [r3, #88]	; 0x58
 800270a:	e00d      	b.n	8002728 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	461a      	mov	r2, r3
 8002712:	4b1b      	ldr	r3, [pc, #108]	; (8002780 <DMA_CalcBaseAndBitshift+0x160>)
 8002714:	4013      	ands	r3, r2
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6593      	str	r3, [r2, #88]	; 0x58
 800271a:	e005      	b.n	8002728 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800272c:	4618      	mov	r0, r3
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	40020010 	.word	0x40020010
 800273c:	40020028 	.word	0x40020028
 8002740:	40020040 	.word	0x40020040
 8002744:	40020058 	.word	0x40020058
 8002748:	40020070 	.word	0x40020070
 800274c:	40020088 	.word	0x40020088
 8002750:	400200a0 	.word	0x400200a0
 8002754:	400200b8 	.word	0x400200b8
 8002758:	40020410 	.word	0x40020410
 800275c:	40020428 	.word	0x40020428
 8002760:	40020440 	.word	0x40020440
 8002764:	40020458 	.word	0x40020458
 8002768:	40020470 	.word	0x40020470
 800276c:	40020488 	.word	0x40020488
 8002770:	400204a0 	.word	0x400204a0
 8002774:	400204b8 	.word	0x400204b8
 8002778:	aaaaaaab 	.word	0xaaaaaaab
 800277c:	08025d2c 	.word	0x08025d2c
 8002780:	fffffc00 	.word	0xfffffc00

08002784 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800278c:	2300      	movs	r3, #0
 800278e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d120      	bne.n	80027da <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279c:	2b03      	cmp	r3, #3
 800279e:	d858      	bhi.n	8002852 <DMA_CheckFifoParam+0xce>
 80027a0:	a201      	add	r2, pc, #4	; (adr r2, 80027a8 <DMA_CheckFifoParam+0x24>)
 80027a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a6:	bf00      	nop
 80027a8:	080027b9 	.word	0x080027b9
 80027ac:	080027cb 	.word	0x080027cb
 80027b0:	080027b9 	.word	0x080027b9
 80027b4:	08002853 	.word	0x08002853
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d048      	beq.n	8002856 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80027c8:	e045      	b.n	8002856 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027d2:	d142      	bne.n	800285a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80027d8:	e03f      	b.n	800285a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027e2:	d123      	bne.n	800282c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d838      	bhi.n	800285e <DMA_CheckFifoParam+0xda>
 80027ec:	a201      	add	r2, pc, #4	; (adr r2, 80027f4 <DMA_CheckFifoParam+0x70>)
 80027ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f2:	bf00      	nop
 80027f4:	08002805 	.word	0x08002805
 80027f8:	0800280b 	.word	0x0800280b
 80027fc:	08002805 	.word	0x08002805
 8002800:	0800281d 	.word	0x0800281d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	73fb      	strb	r3, [r7, #15]
        break;
 8002808:	e030      	b.n	800286c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d025      	beq.n	8002862 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800281a:	e022      	b.n	8002862 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002824:	d11f      	bne.n	8002866 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800282a:	e01c      	b.n	8002866 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002830:	2b02      	cmp	r3, #2
 8002832:	d902      	bls.n	800283a <DMA_CheckFifoParam+0xb6>
 8002834:	2b03      	cmp	r3, #3
 8002836:	d003      	beq.n	8002840 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002838:	e018      	b.n	800286c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	73fb      	strb	r3, [r7, #15]
        break;
 800283e:	e015      	b.n	800286c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00e      	beq.n	800286a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
    break;
 8002850:	e00b      	b.n	800286a <DMA_CheckFifoParam+0xe6>
        break;
 8002852:	bf00      	nop
 8002854:	e00a      	b.n	800286c <DMA_CheckFifoParam+0xe8>
        break;
 8002856:	bf00      	nop
 8002858:	e008      	b.n	800286c <DMA_CheckFifoParam+0xe8>
        break;
 800285a:	bf00      	nop
 800285c:	e006      	b.n	800286c <DMA_CheckFifoParam+0xe8>
        break;
 800285e:	bf00      	nop
 8002860:	e004      	b.n	800286c <DMA_CheckFifoParam+0xe8>
        break;
 8002862:	bf00      	nop
 8002864:	e002      	b.n	800286c <DMA_CheckFifoParam+0xe8>
        break;
 8002866:	bf00      	nop
 8002868:	e000      	b.n	800286c <DMA_CheckFifoParam+0xe8>
    break;
 800286a:	bf00      	nop
    }
  }

  return status;
 800286c:	7bfb      	ldrb	r3, [r7, #15]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop

0800287c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a38      	ldr	r2, [pc, #224]	; (8002970 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d022      	beq.n	80028da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a36      	ldr	r2, [pc, #216]	; (8002974 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d01d      	beq.n	80028da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a35      	ldr	r2, [pc, #212]	; (8002978 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d018      	beq.n	80028da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a33      	ldr	r2, [pc, #204]	; (800297c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d013      	beq.n	80028da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a32      	ldr	r2, [pc, #200]	; (8002980 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d00e      	beq.n	80028da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a30      	ldr	r2, [pc, #192]	; (8002984 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d009      	beq.n	80028da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a2f      	ldr	r2, [pc, #188]	; (8002988 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d004      	beq.n	80028da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a2d      	ldr	r2, [pc, #180]	; (800298c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d101      	bne.n	80028de <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80028de:	2300      	movs	r3, #0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d01a      	beq.n	800291a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	3b08      	subs	r3, #8
 80028ec:	4a28      	ldr	r2, [pc, #160]	; (8002990 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80028ee:	fba2 2303 	umull	r2, r3, r2, r3
 80028f2:	091b      	lsrs	r3, r3, #4
 80028f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	4b26      	ldr	r3, [pc, #152]	; (8002994 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80028fa:	4413      	add	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	461a      	mov	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a24      	ldr	r2, [pc, #144]	; (8002998 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002908:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f003 031f 	and.w	r3, r3, #31
 8002910:	2201      	movs	r2, #1
 8002912:	409a      	lsls	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002918:	e024      	b.n	8002964 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	3b10      	subs	r3, #16
 8002922:	4a1e      	ldr	r2, [pc, #120]	; (800299c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002924:	fba2 2303 	umull	r2, r3, r2, r3
 8002928:	091b      	lsrs	r3, r3, #4
 800292a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	4a1c      	ldr	r2, [pc, #112]	; (80029a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d806      	bhi.n	8002942 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	4a1b      	ldr	r2, [pc, #108]	; (80029a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d902      	bls.n	8002942 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	3308      	adds	r3, #8
 8002940:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	4b18      	ldr	r3, [pc, #96]	; (80029a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002946:	4413      	add	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	461a      	mov	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a16      	ldr	r2, [pc, #88]	; (80029ac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002954:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f003 031f 	and.w	r3, r3, #31
 800295c:	2201      	movs	r2, #1
 800295e:	409a      	lsls	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	58025408 	.word	0x58025408
 8002974:	5802541c 	.word	0x5802541c
 8002978:	58025430 	.word	0x58025430
 800297c:	58025444 	.word	0x58025444
 8002980:	58025458 	.word	0x58025458
 8002984:	5802546c 	.word	0x5802546c
 8002988:	58025480 	.word	0x58025480
 800298c:	58025494 	.word	0x58025494
 8002990:	cccccccd 	.word	0xcccccccd
 8002994:	16009600 	.word	0x16009600
 8002998:	58025880 	.word	0x58025880
 800299c:	aaaaaaab 	.word	0xaaaaaaab
 80029a0:	400204b8 	.word	0x400204b8
 80029a4:	4002040f 	.word	0x4002040f
 80029a8:	10008200 	.word	0x10008200
 80029ac:	40020880 	.word	0x40020880

080029b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d04a      	beq.n	8002a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d847      	bhi.n	8002a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a25      	ldr	r2, [pc, #148]	; (8002a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d022      	beq.n	8002a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a24      	ldr	r2, [pc, #144]	; (8002a6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d01d      	beq.n	8002a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a22      	ldr	r2, [pc, #136]	; (8002a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d018      	beq.n	8002a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a21      	ldr	r2, [pc, #132]	; (8002a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d013      	beq.n	8002a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a1f      	ldr	r2, [pc, #124]	; (8002a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d00e      	beq.n	8002a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a1e      	ldr	r2, [pc, #120]	; (8002a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d009      	beq.n	8002a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a1c      	ldr	r2, [pc, #112]	; (8002a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d004      	beq.n	8002a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a1b      	ldr	r2, [pc, #108]	; (8002a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d101      	bne.n	8002a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e000      	b.n	8002a22 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002a20:	2300      	movs	r3, #0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	4b17      	ldr	r3, [pc, #92]	; (8002a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8002a2a:	4413      	add	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	461a      	mov	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a15      	ldr	r2, [pc, #84]	; (8002a8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002a38:	671a      	str	r2, [r3, #112]	; 0x70
 8002a3a:	e009      	b.n	8002a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	4b14      	ldr	r3, [pc, #80]	; (8002a90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002a40:	4413      	add	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	461a      	mov	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a11      	ldr	r2, [pc, #68]	; (8002a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8002a4e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	2201      	movs	r2, #1
 8002a56:	409a      	lsls	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8002a5c:	bf00      	nop
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	58025408 	.word	0x58025408
 8002a6c:	5802541c 	.word	0x5802541c
 8002a70:	58025430 	.word	0x58025430
 8002a74:	58025444 	.word	0x58025444
 8002a78:	58025458 	.word	0x58025458
 8002a7c:	5802546c 	.word	0x5802546c
 8002a80:	58025480 	.word	0x58025480
 8002a84:	58025494 	.word	0x58025494
 8002a88:	1600963f 	.word	0x1600963f
 8002a8c:	58025940 	.word	0x58025940
 8002a90:	1000823f 	.word	0x1000823f
 8002a94:	40020940 	.word	0x40020940

08002a98 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aa8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab0:	2b40      	cmp	r3, #64	; 0x40
 8002ab2:	d115      	bne.n	8002ae0 <HAL_ETH_IRQHandler+0x48>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002abc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac4:	2b40      	cmp	r3, #64	; 0x40
 8002ac6:	d10b      	bne.n	8002ae0 <HAL_ETH_IRQHandler+0x48>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f00d fabf 	bl	801004c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	f248 0340 	movw	r3, #32832	; 0x8040
 8002adc:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ae8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d115      	bne.n	8002b20 <HAL_ETH_IRQHandler+0x88>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002afc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d10b      	bne.n	8002b20 <HAL_ETH_IRQHandler+0x88>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f8d3 	bl	8002cb4 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b16:	461a      	mov	r2, r3
 8002b18:	f248 0301 	movw	r3, #32769	; 0x8001
 8002b1c:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b28:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b34:	d14e      	bne.n	8002bd4 <HAL_ETH_IRQHandler+0x13c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b3e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b4a:	d143      	bne.n	8002bd4 <HAL_ETH_IRQHandler+0x13c>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b50:	f043 0208 	orr.w	r2, r3, #8
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b60:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002b64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b6c:	d11c      	bne.n	8002ba8 <HAL_ETH_IRQHandler+0x110>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b76:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8002b7a:	f241 1302 	movw	r3, #4354	; 0x1102
 8002b7e:	4013      	ands	r3, r2
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b8c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6812      	ldr	r2, [r2, #0]
 8002b94:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002b98:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b9c:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	22e0      	movs	r2, #224	; 0xe0
 8002ba4:	66da      	str	r2, [r3, #108]	; 0x6c
 8002ba6:	e012      	b.n	8002bce <HAL_ETH_IRQHandler+0x136>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bb0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002bb4:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 8002bca:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f87a 	bl	8002cc8 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002bdc:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8002be0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002be4:	d10e      	bne.n	8002c04 <HAL_ETH_IRQHandler+0x16c>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	22e0      	movs	r2, #224	; 0xe0
 8002bf6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->MACErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f86f 	bl	8002cdc <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c0c:	f003 0310 	and.w	r3, r3, #16
 8002c10:	2b10      	cmp	r3, #16
 8002c12:	d10f      	bne.n	8002c34 <HAL_ETH_IRQHandler+0x19c>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002c1c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f862 	bl	8002cf0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c3c:	f003 0320 	and.w	r3, r3, #32
 8002c40:	2b20      	cmp	r3, #32
 8002c42:	d10f      	bne.n	8002c64 <HAL_ETH_IRQHandler+0x1cc>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002c4c:	f003 020f 	and.w	r2, r3, #15
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f854 	bl	8002d04 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8002c64:	f7fe fc08 	bl	8001478 <HAL_GetCurrentCPUID>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b03      	cmp	r3, #3
 8002c6c:	d10d      	bne.n	8002c8a <HAL_ETH_IRQHandler+0x1f2>
  {
    /* check ETH WAKEUP exti flag */
    if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002c6e:	4b0f      	ldr	r3, [pc, #60]	; (8002cac <HAL_ETH_IRQHandler+0x214>)
 8002c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d014      	beq.n	8002ca4 <HAL_ETH_IRQHandler+0x20c>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002c7a:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <HAL_ETH_IRQHandler+0x214>)
 8002c7c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002c80:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f848 	bl	8002d18 <HAL_ETH_WakeUpCallback>
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
#endif
  }
#endif
}
 8002c88:	e00c      	b.n	8002ca4 <HAL_ETH_IRQHandler+0x20c>
    if(__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002c8a:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <HAL_ETH_IRQHandler+0x218>)
 8002c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d006      	beq.n	8002ca4 <HAL_ETH_IRQHandler+0x20c>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002c96:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <HAL_ETH_IRQHandler+0x218>)
 8002c98:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002c9c:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f83a 	bl	8002d18 <HAL_ETH_WakeUpCallback>
}
 8002ca4:	bf00      	nop
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	58000080 	.word	0x58000080
 8002cb0:	580000c0 	.word	0x580000c0

08002cb4 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b089      	sub	sp, #36	; 0x24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002d3a:	4b89      	ldr	r3, [pc, #548]	; (8002f60 <HAL_GPIO_Init+0x234>)
 8002d3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d3e:	e194      	b.n	800306a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	2101      	movs	r1, #1
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 8186 	beq.w	8003064 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 0303 	and.w	r3, r3, #3
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d005      	beq.n	8002d70 <HAL_GPIO_Init+0x44>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d130      	bne.n	8002dd2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	43db      	mvns	r3, r3
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4013      	ands	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002da6:	2201      	movs	r2, #1
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4013      	ands	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	091b      	lsrs	r3, r3, #4
 8002dbc:	f003 0201 	and.w	r2, r3, #1
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	2b03      	cmp	r3, #3
 8002ddc:	d017      	beq.n	8002e0e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	2203      	movs	r2, #3
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43db      	mvns	r3, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4013      	ands	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d123      	bne.n	8002e62 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	08da      	lsrs	r2, r3, #3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	3208      	adds	r2, #8
 8002e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	220f      	movs	r2, #15
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43db      	mvns	r3, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	691a      	ldr	r2, [r3, #16]
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	08da      	lsrs	r2, r3, #3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3208      	adds	r2, #8
 8002e5c:	69b9      	ldr	r1, [r7, #24]
 8002e5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	2203      	movs	r2, #3
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43db      	mvns	r3, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4013      	ands	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f003 0203 	and.w	r2, r3, #3
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 80e0 	beq.w	8003064 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ea4:	4b2f      	ldr	r3, [pc, #188]	; (8002f64 <HAL_GPIO_Init+0x238>)
 8002ea6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002eaa:	4a2e      	ldr	r2, [pc, #184]	; (8002f64 <HAL_GPIO_Init+0x238>)
 8002eac:	f043 0302 	orr.w	r3, r3, #2
 8002eb0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002eb4:	4b2b      	ldr	r3, [pc, #172]	; (8002f64 <HAL_GPIO_Init+0x238>)
 8002eb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ec2:	4a29      	ldr	r2, [pc, #164]	; (8002f68 <HAL_GPIO_Init+0x23c>)
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	089b      	lsrs	r3, r3, #2
 8002ec8:	3302      	adds	r3, #2
 8002eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f003 0303 	and.w	r3, r3, #3
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	220f      	movs	r2, #15
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a20      	ldr	r2, [pc, #128]	; (8002f6c <HAL_GPIO_Init+0x240>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d052      	beq.n	8002f94 <HAL_GPIO_Init+0x268>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a1f      	ldr	r2, [pc, #124]	; (8002f70 <HAL_GPIO_Init+0x244>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d031      	beq.n	8002f5a <HAL_GPIO_Init+0x22e>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a1e      	ldr	r2, [pc, #120]	; (8002f74 <HAL_GPIO_Init+0x248>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d02b      	beq.n	8002f56 <HAL_GPIO_Init+0x22a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a1d      	ldr	r2, [pc, #116]	; (8002f78 <HAL_GPIO_Init+0x24c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d025      	beq.n	8002f52 <HAL_GPIO_Init+0x226>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a1c      	ldr	r2, [pc, #112]	; (8002f7c <HAL_GPIO_Init+0x250>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d01f      	beq.n	8002f4e <HAL_GPIO_Init+0x222>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a1b      	ldr	r2, [pc, #108]	; (8002f80 <HAL_GPIO_Init+0x254>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d019      	beq.n	8002f4a <HAL_GPIO_Init+0x21e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a1a      	ldr	r2, [pc, #104]	; (8002f84 <HAL_GPIO_Init+0x258>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d013      	beq.n	8002f46 <HAL_GPIO_Init+0x21a>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a19      	ldr	r2, [pc, #100]	; (8002f88 <HAL_GPIO_Init+0x25c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00d      	beq.n	8002f42 <HAL_GPIO_Init+0x216>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a18      	ldr	r2, [pc, #96]	; (8002f8c <HAL_GPIO_Init+0x260>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d007      	beq.n	8002f3e <HAL_GPIO_Init+0x212>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a17      	ldr	r2, [pc, #92]	; (8002f90 <HAL_GPIO_Init+0x264>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d101      	bne.n	8002f3a <HAL_GPIO_Init+0x20e>
 8002f36:	2309      	movs	r3, #9
 8002f38:	e02d      	b.n	8002f96 <HAL_GPIO_Init+0x26a>
 8002f3a:	230a      	movs	r3, #10
 8002f3c:	e02b      	b.n	8002f96 <HAL_GPIO_Init+0x26a>
 8002f3e:	2308      	movs	r3, #8
 8002f40:	e029      	b.n	8002f96 <HAL_GPIO_Init+0x26a>
 8002f42:	2307      	movs	r3, #7
 8002f44:	e027      	b.n	8002f96 <HAL_GPIO_Init+0x26a>
 8002f46:	2306      	movs	r3, #6
 8002f48:	e025      	b.n	8002f96 <HAL_GPIO_Init+0x26a>
 8002f4a:	2305      	movs	r3, #5
 8002f4c:	e023      	b.n	8002f96 <HAL_GPIO_Init+0x26a>
 8002f4e:	2304      	movs	r3, #4
 8002f50:	e021      	b.n	8002f96 <HAL_GPIO_Init+0x26a>
 8002f52:	2303      	movs	r3, #3
 8002f54:	e01f      	b.n	8002f96 <HAL_GPIO_Init+0x26a>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e01d      	b.n	8002f96 <HAL_GPIO_Init+0x26a>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e01b      	b.n	8002f96 <HAL_GPIO_Init+0x26a>
 8002f5e:	bf00      	nop
 8002f60:	58000080 	.word	0x58000080
 8002f64:	58024400 	.word	0x58024400
 8002f68:	58000400 	.word	0x58000400
 8002f6c:	58020000 	.word	0x58020000
 8002f70:	58020400 	.word	0x58020400
 8002f74:	58020800 	.word	0x58020800
 8002f78:	58020c00 	.word	0x58020c00
 8002f7c:	58021000 	.word	0x58021000
 8002f80:	58021400 	.word	0x58021400
 8002f84:	58021800 	.word	0x58021800
 8002f88:	58021c00 	.word	0x58021c00
 8002f8c:	58022000 	.word	0x58022000
 8002f90:	58022400 	.word	0x58022400
 8002f94:	2300      	movs	r3, #0
 8002f96:	69fa      	ldr	r2, [r7, #28]
 8002f98:	f002 0203 	and.w	r2, r2, #3
 8002f9c:	0092      	lsls	r2, r2, #2
 8002f9e:	4093      	lsls	r3, r2
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fa6:	4938      	ldr	r1, [pc, #224]	; (8003088 <HAL_GPIO_Init+0x35c>)
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	089b      	lsrs	r3, r3, #2
 8002fac:	3302      	adds	r3, #2
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002fda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	43db      	mvns	r3, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003008:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	4313      	orrs	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	43db      	mvns	r3, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4013      	ands	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	3301      	adds	r3, #1
 8003068:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	fa22 f303 	lsr.w	r3, r2, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	f47f ae63 	bne.w	8002d40 <HAL_GPIO_Init+0x14>
  }
}
 800307a:	bf00      	nop
 800307c:	bf00      	nop
 800307e:	3724      	adds	r7, #36	; 0x24
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	58000400 	.word	0x58000400

0800308c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	460b      	mov	r3, r1
 8003096:	807b      	strh	r3, [r7, #2]
 8003098:	4613      	mov	r3, r2
 800309a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800309c:	787b      	ldrb	r3, [r7, #1]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030a2:	887a      	ldrh	r2, [r7, #2]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80030a8:	e003      	b.n	80030b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80030aa:	887b      	ldrh	r3, [r7, #2]
 80030ac:	041a      	lsls	r2, r3, #16
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	619a      	str	r2, [r3, #24]
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	4603      	mov	r3, r0
 80030c6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80030c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80030d0:	88fb      	ldrh	r3, [r7, #6]
 80030d2:	4013      	ands	r3, r2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d008      	beq.n	80030ea <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030dc:	88fb      	ldrh	r3, [r7, #6]
 80030de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030e2:	88fb      	ldrh	r3, [r7, #6]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f01c ffc9 	bl	802007c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80030ea:	bf00      	nop
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80030fc:	4a08      	ldr	r2, [pc, #32]	; (8003120 <HAL_HSEM_FastTake+0x2c>)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	3320      	adds	r3, #32
 8003102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003106:	4a07      	ldr	r2, [pc, #28]	; (8003124 <HAL_HSEM_FastTake+0x30>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d101      	bne.n	8003110 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800310c:	2300      	movs	r3, #0
 800310e:	e000      	b.n	8003112 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
}
 8003112:	4618      	mov	r0, r3
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	58026400 	.word	0x58026400
 8003124:	80000300 	.word	0x80000300

08003128 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003132:	4906      	ldr	r1, [pc, #24]	; (800314c <HAL_HSEM_Release+0x24>)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	58026400 	.word	0x58026400

08003150 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e07f      	b.n	8003262 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d106      	bne.n	800317c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f01a fdaa 	bl	801dcd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2224      	movs	r2, #36	; 0x24
 8003180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0201 	bic.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d107      	bne.n	80031ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031c6:	609a      	str	r2, [r3, #8]
 80031c8:	e006      	b.n	80031d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80031d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d104      	bne.n	80031ea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6859      	ldr	r1, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	4b1d      	ldr	r3, [pc, #116]	; (800326c <HAL_I2C_Init+0x11c>)
 80031f6:	430b      	orrs	r3, r1
 80031f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003208:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691a      	ldr	r2, [r3, #16]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	69d9      	ldr	r1, [r3, #28]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a1a      	ldr	r2, [r3, #32]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	430a      	orrs	r2, r1
 8003232:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0201 	orr.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	02008000 	.word	0x02008000

08003270 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b20      	cmp	r3, #32
 8003284:	d138      	bne.n	80032f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800328c:	2b01      	cmp	r3, #1
 800328e:	d101      	bne.n	8003294 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003290:	2302      	movs	r3, #2
 8003292:	e032      	b.n	80032fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2224      	movs	r2, #36	; 0x24
 80032a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0201 	bic.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6819      	ldr	r1, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0201 	orr.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032f4:	2300      	movs	r3, #0
 80032f6:	e000      	b.n	80032fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032f8:	2302      	movs	r3, #2
  }
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003306:	b480      	push	{r7}
 8003308:	b085      	sub	sp, #20
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b20      	cmp	r3, #32
 800331a:	d139      	bne.n	8003390 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003326:	2302      	movs	r3, #2
 8003328:	e033      	b.n	8003392 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2224      	movs	r2, #36	; 0x24
 8003336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0201 	bic.w	r2, r2, #1
 8003348:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003358:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	021b      	lsls	r3, r3, #8
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	4313      	orrs	r3, r2
 8003362:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0201 	orr.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2220      	movs	r2, #32
 8003380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	e000      	b.n	8003392 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003390:	2302      	movs	r3, #2
  }
}
 8003392:	4618      	mov	r0, r3
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e017      	b.n	80033e0 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d004      	beq.n	80033c6 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2280      	movs	r2, #128	; 0x80
 80033c0:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e00c      	b.n	80033e0 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2204      	movs	r2, #4
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0201 	bic.w	r2, r2, #1
 80033dc:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ee:	b08f      	sub	sp, #60	; 0x3c
 80033f0:	af0a      	add	r7, sp, #40	; 0x28
 80033f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e116      	b.n	800362c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d106      	bne.n	800341e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f01d fa2b 	bl	8020874 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2203      	movs	r2, #3
 8003422:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342e:	2b00      	cmp	r3, #0
 8003430:	d102      	bne.n	8003438 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f00b f916 	bl	800e66e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	603b      	str	r3, [r7, #0]
 8003448:	687e      	ldr	r6, [r7, #4]
 800344a:	466d      	mov	r5, sp
 800344c:	f106 0410 	add.w	r4, r6, #16
 8003450:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003452:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003454:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003456:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003458:	e894 0003 	ldmia.w	r4, {r0, r1}
 800345c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003460:	1d33      	adds	r3, r6, #4
 8003462:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003464:	6838      	ldr	r0, [r7, #0]
 8003466:	f00a ffe1 	bl	800e42c <USB_CoreInit>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e0d7      	b.n	800362c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2100      	movs	r1, #0
 8003482:	4618      	mov	r0, r3
 8003484:	f00b f904 	bl	800e690 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003488:	2300      	movs	r3, #0
 800348a:	73fb      	strb	r3, [r7, #15]
 800348c:	e04a      	b.n	8003524 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800348e:	7bfa      	ldrb	r2, [r7, #15]
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	4613      	mov	r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	4413      	add	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	440b      	add	r3, r1
 800349c:	333d      	adds	r3, #61	; 0x3d
 800349e:	2201      	movs	r2, #1
 80034a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034a2:	7bfa      	ldrb	r2, [r7, #15]
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	4613      	mov	r3, r2
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	4413      	add	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	440b      	add	r3, r1
 80034b0:	333c      	adds	r3, #60	; 0x3c
 80034b2:	7bfa      	ldrb	r2, [r7, #15]
 80034b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034b6:	7bfa      	ldrb	r2, [r7, #15]
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
 80034ba:	b298      	uxth	r0, r3
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	3344      	adds	r3, #68	; 0x44
 80034ca:	4602      	mov	r2, r0
 80034cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034ce:	7bfa      	ldrb	r2, [r7, #15]
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	4413      	add	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	440b      	add	r3, r1
 80034dc:	3340      	adds	r3, #64	; 0x40
 80034de:	2200      	movs	r2, #0
 80034e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034e2:	7bfa      	ldrb	r2, [r7, #15]
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	4413      	add	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	440b      	add	r3, r1
 80034f0:	3348      	adds	r3, #72	; 0x48
 80034f2:	2200      	movs	r2, #0
 80034f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034f6:	7bfa      	ldrb	r2, [r7, #15]
 80034f8:	6879      	ldr	r1, [r7, #4]
 80034fa:	4613      	mov	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	4413      	add	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	440b      	add	r3, r1
 8003504:	334c      	adds	r3, #76	; 0x4c
 8003506:	2200      	movs	r2, #0
 8003508:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800350a:	7bfa      	ldrb	r2, [r7, #15]
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	4613      	mov	r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	4413      	add	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	440b      	add	r3, r1
 8003518:	3354      	adds	r3, #84	; 0x54
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800351e:	7bfb      	ldrb	r3, [r7, #15]
 8003520:	3301      	adds	r3, #1
 8003522:	73fb      	strb	r3, [r7, #15]
 8003524:	7bfa      	ldrb	r2, [r7, #15]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	429a      	cmp	r2, r3
 800352c:	d3af      	bcc.n	800348e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800352e:	2300      	movs	r3, #0
 8003530:	73fb      	strb	r3, [r7, #15]
 8003532:	e044      	b.n	80035be <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003534:	7bfa      	ldrb	r2, [r7, #15]
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	4613      	mov	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	4413      	add	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003546:	2200      	movs	r2, #0
 8003548:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800354a:	7bfa      	ldrb	r2, [r7, #15]
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	4613      	mov	r3, r2
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	4413      	add	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	440b      	add	r3, r1
 8003558:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800355c:	7bfa      	ldrb	r2, [r7, #15]
 800355e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003560:	7bfa      	ldrb	r2, [r7, #15]
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	4413      	add	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003572:	2200      	movs	r2, #0
 8003574:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003576:	7bfa      	ldrb	r2, [r7, #15]
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	4613      	mov	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	4413      	add	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	440b      	add	r3, r1
 8003584:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800358c:	7bfa      	ldrb	r2, [r7, #15]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4413      	add	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035a2:	7bfa      	ldrb	r2, [r7, #15]
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	4413      	add	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035b8:	7bfb      	ldrb	r3, [r7, #15]
 80035ba:	3301      	adds	r3, #1
 80035bc:	73fb      	strb	r3, [r7, #15]
 80035be:	7bfa      	ldrb	r2, [r7, #15]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d3b5      	bcc.n	8003534 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	603b      	str	r3, [r7, #0]
 80035ce:	687e      	ldr	r6, [r7, #4]
 80035d0:	466d      	mov	r5, sp
 80035d2:	f106 0410 	add.w	r4, r6, #16
 80035d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80035e6:	1d33      	adds	r3, r6, #4
 80035e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035ea:	6838      	ldr	r0, [r7, #0]
 80035ec:	f00b f89c 	bl	800e728 <USB_DevInit>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d005      	beq.n	8003602 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2202      	movs	r2, #2
 80035fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e014      	b.n	800362c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	2b01      	cmp	r3, #1
 8003618:	d102      	bne.n	8003620 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f001 f9b8 	bl	8004990 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f00c f9ea 	bl	800f9fe <USB_DevDisconnect>

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003634 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003648:	2b01      	cmp	r3, #1
 800364a:	d101      	bne.n	8003650 <HAL_PCD_Start+0x1c>
 800364c:	2302      	movs	r3, #2
 800364e:	e020      	b.n	8003692 <HAL_PCD_Start+0x5e>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365c:	2b01      	cmp	r3, #1
 800365e:	d109      	bne.n	8003674 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003664:	2b01      	cmp	r3, #1
 8003666:	d005      	beq.n	8003674 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f00a ffe7 	bl	800e64c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f00c f99a 	bl	800f9bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800369a:	b590      	push	{r4, r7, lr}
 800369c:	b08d      	sub	sp, #52	; 0x34
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f00c fa58 	bl	800fb66 <USB_GetMode>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f040 84b7 	bne.w	800402c <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f00c f9bc 	bl	800fa40 <USB_ReadInterrupts>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 84ad 	beq.w	800402a <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	0a1b      	lsrs	r3, r3, #8
 80036da:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f00c f9a9 	bl	800fa40 <USB_ReadInterrupts>
 80036ee:	4603      	mov	r3, r0
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d107      	bne.n	8003708 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695a      	ldr	r2, [r3, #20]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f002 0202 	and.w	r2, r2, #2
 8003706:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f00c f997 	bl	800fa40 <USB_ReadInterrupts>
 8003712:	4603      	mov	r3, r0
 8003714:	f003 0310 	and.w	r3, r3, #16
 8003718:	2b10      	cmp	r3, #16
 800371a:	d161      	bne.n	80037e0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699a      	ldr	r2, [r3, #24]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0210 	bic.w	r2, r2, #16
 800372a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	f003 020f 	and.w	r2, r3, #15
 8003738:	4613      	mov	r3, r2
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	4413      	add	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	4413      	add	r3, r2
 8003748:	3304      	adds	r3, #4
 800374a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	0c5b      	lsrs	r3, r3, #17
 8003750:	f003 030f 	and.w	r3, r3, #15
 8003754:	2b02      	cmp	r3, #2
 8003756:	d124      	bne.n	80037a2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800375e:	4013      	ands	r3, r2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d035      	beq.n	80037d0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	091b      	lsrs	r3, r3, #4
 800376c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800376e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003772:	b29b      	uxth	r3, r3
 8003774:	461a      	mov	r2, r3
 8003776:	6a38      	ldr	r0, [r7, #32]
 8003778:	f00b ffce 	bl	800f718 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	691a      	ldr	r2, [r3, #16]
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	091b      	lsrs	r3, r3, #4
 8003784:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003788:	441a      	add	r2, r3
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	6a1a      	ldr	r2, [r3, #32]
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	091b      	lsrs	r3, r3, #4
 8003796:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800379a:	441a      	add	r2, r3
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	621a      	str	r2, [r3, #32]
 80037a0:	e016      	b.n	80037d0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	0c5b      	lsrs	r3, r3, #17
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	2b06      	cmp	r3, #6
 80037ac:	d110      	bne.n	80037d0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037b4:	2208      	movs	r2, #8
 80037b6:	4619      	mov	r1, r3
 80037b8:	6a38      	ldr	r0, [r7, #32]
 80037ba:	f00b ffad 	bl	800f718 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	6a1a      	ldr	r2, [r3, #32]
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	091b      	lsrs	r3, r3, #4
 80037c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037ca:	441a      	add	r2, r3
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699a      	ldr	r2, [r3, #24]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0210 	orr.w	r2, r2, #16
 80037de:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f00c f92b 	bl	800fa40 <USB_ReadInterrupts>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80037f4:	f040 80a7 	bne.w	8003946 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f00c f930 	bl	800fa66 <USB_ReadDevAllOutEpInterrupt>
 8003806:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003808:	e099      	b.n	800393e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800380a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 808e 	beq.w	8003932 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	4611      	mov	r1, r2
 8003820:	4618      	mov	r0, r3
 8003822:	f00c f954 	bl	800face <USB_ReadDevOutEPInterrupt>
 8003826:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00c      	beq.n	800384c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	4413      	add	r3, r2
 800383a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800383e:	461a      	mov	r2, r3
 8003840:	2301      	movs	r3, #1
 8003842:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003844:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 ff1c 	bl	8004684 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00c      	beq.n	8003870 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	015a      	lsls	r2, r3, #5
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	4413      	add	r3, r2
 800385e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003862:	461a      	mov	r2, r3
 8003864:	2308      	movs	r3, #8
 8003866:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003868:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fff2 	bl	8004854 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f003 0310 	and.w	r3, r3, #16
 8003876:	2b00      	cmp	r3, #0
 8003878:	d008      	beq.n	800388c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	015a      	lsls	r2, r3, #5
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	4413      	add	r3, r2
 8003882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003886:	461a      	mov	r2, r3
 8003888:	2310      	movs	r3, #16
 800388a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d030      	beq.n	80038f8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389e:	2b80      	cmp	r3, #128	; 0x80
 80038a0:	d109      	bne.n	80038b6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038b4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80038b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b8:	4613      	mov	r3, r2
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	4413      	add	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	4413      	add	r3, r2
 80038c8:	3304      	adds	r3, #4
 80038ca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	78db      	ldrb	r3, [r3, #3]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d108      	bne.n	80038e6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	2200      	movs	r2, #0
 80038d8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	4619      	mov	r1, r3
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f01d f8fb 	bl	8020adc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	015a      	lsls	r2, r3, #5
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f2:	461a      	mov	r2, r3
 80038f4:	2302      	movs	r3, #2
 80038f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	f003 0320 	and.w	r3, r3, #32
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d008      	beq.n	8003914 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	015a      	lsls	r2, r3, #5
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	4413      	add	r3, r2
 800390a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800390e:	461a      	mov	r2, r3
 8003910:	2320      	movs	r3, #32
 8003912:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d009      	beq.n	8003932 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	015a      	lsls	r2, r3, #5
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	4413      	add	r3, r2
 8003926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800392a:	461a      	mov	r2, r3
 800392c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003930:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	3301      	adds	r3, #1
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393a:	085b      	lsrs	r3, r3, #1
 800393c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800393e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003940:	2b00      	cmp	r3, #0
 8003942:	f47f af62 	bne.w	800380a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f00c f878 	bl	800fa40 <USB_ReadInterrupts>
 8003950:	4603      	mov	r3, r0
 8003952:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003956:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800395a:	f040 80db 	bne.w	8003b14 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f00c f899 	bl	800fa9a <USB_ReadDevAllInEpInterrupt>
 8003968:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800396e:	e0cd      	b.n	8003b0c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 80c2 	beq.w	8003b00 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	4611      	mov	r1, r2
 8003986:	4618      	mov	r0, r3
 8003988:	f00c f8bf 	bl	800fb0a <USB_ReadDevInEPInterrupt>
 800398c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d057      	beq.n	8003a48 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	2201      	movs	r2, #1
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	43db      	mvns	r3, r3
 80039b2:	69f9      	ldr	r1, [r7, #28]
 80039b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039b8:	4013      	ands	r3, r2
 80039ba:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c8:	461a      	mov	r2, r3
 80039ca:	2301      	movs	r3, #1
 80039cc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d132      	bne.n	8003a3c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039da:	4613      	mov	r3, r2
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	4413      	add	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	440b      	add	r3, r1
 80039e4:	334c      	adds	r3, #76	; 0x4c
 80039e6:	6819      	ldr	r1, [r3, #0]
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ec:	4613      	mov	r3, r2
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	4413      	add	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4403      	add	r3, r0
 80039f6:	3348      	adds	r3, #72	; 0x48
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4419      	add	r1, r3
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a00:	4613      	mov	r3, r2
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	4413      	add	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4403      	add	r3, r0
 8003a0a:	334c      	adds	r3, #76	; 0x4c
 8003a0c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d113      	bne.n	8003a3c <HAL_PCD_IRQHandler+0x3a2>
 8003a14:	6879      	ldr	r1, [r7, #4]
 8003a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a18:	4613      	mov	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	3354      	adds	r3, #84	; 0x54
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d108      	bne.n	8003a3c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6818      	ldr	r0, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a34:	461a      	mov	r2, r3
 8003a36:	2101      	movs	r1, #1
 8003a38:	f00c f8c8 	bl	800fbcc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	4619      	mov	r1, r3
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f01c ffc5 	bl	80209d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d008      	beq.n	8003a64 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a5e:	461a      	mov	r2, r3
 8003a60:	2308      	movs	r3, #8
 8003a62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f003 0310 	and.w	r3, r3, #16
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d008      	beq.n	8003a80 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	015a      	lsls	r2, r3, #5
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	2310      	movs	r3, #16
 8003a7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d008      	beq.n	8003a9c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	015a      	lsls	r2, r3, #5
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a96:	461a      	mov	r2, r3
 8003a98:	2340      	movs	r3, #64	; 0x40
 8003a9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d023      	beq.n	8003aee <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003aa6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003aa8:	6a38      	ldr	r0, [r7, #32]
 8003aaa:	f00a ff9b 	bl	800e9e4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	3338      	adds	r3, #56	; 0x38
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	4413      	add	r3, r2
 8003abe:	3304      	adds	r3, #4
 8003ac0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	78db      	ldrb	r3, [r3, #3]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d108      	bne.n	8003adc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2200      	movs	r2, #0
 8003ace:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f01d f812 	bl	8020b00 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae8:	461a      	mov	r2, r3
 8003aea:	2302      	movs	r3, #2
 8003aec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003af8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 fd35 	bl	800456a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	3301      	adds	r3, #1
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b08:	085b      	lsrs	r3, r3, #1
 8003b0a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f47f af2e 	bne.w	8003970 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f00b ff91 	bl	800fa40 <USB_ReadInterrupts>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b28:	d122      	bne.n	8003b70 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b38:	f023 0301 	bic.w	r3, r3, #1
 8003b3c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d108      	bne.n	8003b5a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b50:	2100      	movs	r1, #0
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 ff40 	bl	80049d8 <HAL_PCDEx_LPM_Callback>
 8003b58:	e002      	b.n	8003b60 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f01c ffb0 	bl	8020ac0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695a      	ldr	r2, [r3, #20]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003b6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f00b ff63 	bl	800fa40 <USB_ReadInterrupts>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b84:	d112      	bne.n	8003bac <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d102      	bne.n	8003b9c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f01c ff6c 	bl	8020a74 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695a      	ldr	r2, [r3, #20]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003baa:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f00b ff45 	bl	800fa40 <USB_ReadInterrupts>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bc0:	d121      	bne.n	8003c06 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695a      	ldr	r2, [r3, #20]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003bd0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d111      	bne.n	8003c00 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bea:	089b      	lsrs	r3, r3, #2
 8003bec:	f003 020f 	and.w	r2, r3, #15
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 feed 	bl	80049d8 <HAL_PCDEx_LPM_Callback>
 8003bfe:	e002      	b.n	8003c06 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f01c ff37 	bl	8020a74 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f00b ff18 	bl	800fa40 <USB_ReadInterrupts>
 8003c10:	4603      	mov	r3, r0
 8003c12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c1a:	f040 80b7 	bne.w	8003d8c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	69fa      	ldr	r2, [r7, #28]
 8003c28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c2c:	f023 0301 	bic.w	r3, r3, #1
 8003c30:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2110      	movs	r1, #16
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f00a fed3 	bl	800e9e4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c3e:	2300      	movs	r3, #0
 8003c40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c42:	e046      	b.n	8003cd2 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c50:	461a      	mov	r2, r3
 8003c52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c56:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c68:	0151      	lsls	r1, r2, #5
 8003c6a:	69fa      	ldr	r2, [r7, #28]
 8003c6c:	440a      	add	r2, r1
 8003c6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c76:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c84:	461a      	mov	r2, r3
 8003c86:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c8a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c9c:	0151      	lsls	r1, r2, #5
 8003c9e:	69fa      	ldr	r2, [r7, #28]
 8003ca0:	440a      	add	r2, r1
 8003ca2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ca6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003caa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cae:	015a      	lsls	r2, r3, #5
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cbc:	0151      	lsls	r1, r2, #5
 8003cbe:	69fa      	ldr	r2, [r7, #28]
 8003cc0:	440a      	add	r2, r1
 8003cc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cca:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cce:	3301      	adds	r3, #1
 8003cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d3b3      	bcc.n	8003c44 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	69fa      	ldr	r2, [r7, #28]
 8003ce6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cea:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003cee:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d016      	beq.n	8003d26 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d02:	69fa      	ldr	r2, [r7, #28]
 8003d04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d08:	f043 030b 	orr.w	r3, r3, #11
 8003d0c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d18:	69fa      	ldr	r2, [r7, #28]
 8003d1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d1e:	f043 030b 	orr.w	r3, r3, #11
 8003d22:	6453      	str	r3, [r2, #68]	; 0x44
 8003d24:	e015      	b.n	8003d52 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d2c:	695a      	ldr	r2, [r3, #20]
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d34:	4619      	mov	r1, r3
 8003d36:	f242 032b 	movw	r3, #8235	; 0x202b
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	69fa      	ldr	r2, [r7, #28]
 8003d48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d4c:	f043 030b 	orr.w	r3, r3, #11
 8003d50:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	69fa      	ldr	r2, [r7, #28]
 8003d5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d60:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d64:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6818      	ldr	r0, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d76:	461a      	mov	r2, r3
 8003d78:	f00b ff28 	bl	800fbcc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695a      	ldr	r2, [r3, #20]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003d8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f00b fe55 	bl	800fa40 <USB_ReadInterrupts>
 8003d96:	4603      	mov	r3, r0
 8003d98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da0:	d124      	bne.n	8003dec <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f00b feec 	bl	800fb84 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f00a fe94 	bl	800eade <USB_GetDevSpeed>
 8003db6:	4603      	mov	r3, r0
 8003db8:	461a      	mov	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681c      	ldr	r4, [r3, #0]
 8003dc2:	f001 fff3 	bl	8005dac <HAL_RCC_GetHCLKFreq>
 8003dc6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	461a      	mov	r2, r3
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	f00a fb99 	bl	800e508 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f01c fe23 	bl	8020a22 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	695a      	ldr	r2, [r3, #20]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003dea:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f00b fe25 	bl	800fa40 <USB_ReadInterrupts>
 8003df6:	4603      	mov	r3, r0
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d10a      	bne.n	8003e16 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f01c fe00 	bl	8020a06 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695a      	ldr	r2, [r3, #20]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f002 0208 	and.w	r2, r2, #8
 8003e14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f00b fe10 	bl	800fa40 <USB_ReadInterrupts>
 8003e20:	4603      	mov	r3, r0
 8003e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e26:	2b80      	cmp	r3, #128	; 0x80
 8003e28:	d122      	bne.n	8003e70 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e36:	2301      	movs	r3, #1
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3a:	e014      	b.n	8003e66 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003e3c:	6879      	ldr	r1, [r7, #4]
 8003e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e40:	4613      	mov	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	4413      	add	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d105      	bne.n	8003e60 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	4619      	mov	r1, r3
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 fb27 	bl	80044ae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	3301      	adds	r3, #1
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d3e5      	bcc.n	8003e3c <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f00b fde3 	bl	800fa40 <USB_ReadInterrupts>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e84:	d13b      	bne.n	8003efe <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e86:	2301      	movs	r3, #1
 8003e88:	627b      	str	r3, [r7, #36]	; 0x24
 8003e8a:	e02b      	b.n	8003ee4 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	4413      	add	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	3340      	adds	r3, #64	; 0x40
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d115      	bne.n	8003ede <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003eb2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	da12      	bge.n	8003ede <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003eb8:	6879      	ldr	r1, [r7, #4]
 8003eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	333f      	adds	r3, #63	; 0x3f
 8003ec8:	2201      	movs	r2, #1
 8003eca:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 fae8 	bl	80044ae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d3ce      	bcc.n	8003e8c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695a      	ldr	r2, [r3, #20]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003efc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f00b fd9c 	bl	800fa40 <USB_ReadInterrupts>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f12:	d155      	bne.n	8003fc0 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f14:	2301      	movs	r3, #1
 8003f16:	627b      	str	r3, [r7, #36]	; 0x24
 8003f18:	e045      	b.n	8003fa6 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	015a      	lsls	r2, r3, #5
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	4413      	add	r3, r2
 8003f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f2e:	4613      	mov	r3, r2
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	4413      	add	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	440b      	add	r3, r1
 8003f38:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d12e      	bne.n	8003fa0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f42:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	da2b      	bge.n	8003fa0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003f54:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d121      	bne.n	8003fa0 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003f5c:	6879      	ldr	r1, [r7, #4]
 8003f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f60:	4613      	mov	r3, r2
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	4413      	add	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003f6e:	2201      	movs	r2, #1
 8003f70:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003f72:	6a3b      	ldr	r3, [r7, #32]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003f7e:	6a3b      	ldr	r3, [r7, #32]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10a      	bne.n	8003fa0 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	69fa      	ldr	r2, [r7, #28]
 8003f94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f9c:	6053      	str	r3, [r2, #4]
            break;
 8003f9e:	e007      	b.n	8003fb0 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d3b4      	bcc.n	8003f1a <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695a      	ldr	r2, [r3, #20]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003fbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f00b fd3b 	bl	800fa40 <USB_ReadInterrupts>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd4:	d10a      	bne.n	8003fec <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f01c fda4 	bl	8020b24 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695a      	ldr	r2, [r3, #20]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003fea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f00b fd25 	bl	800fa40 <USB_ReadInterrupts>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b04      	cmp	r3, #4
 8003ffe:	d115      	bne.n	800402c <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	f003 0304 	and.w	r3, r3, #4
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f01c fd94 	bl	8020b40 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6859      	ldr	r1, [r3, #4]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	430a      	orrs	r2, r1
 8004026:	605a      	str	r2, [r3, #4]
 8004028:	e000      	b.n	800402c <HAL_PCD_IRQHandler+0x992>
      return;
 800402a:	bf00      	nop
    }
  }
}
 800402c:	3734      	adds	r7, #52	; 0x34
 800402e:	46bd      	mov	sp, r7
 8004030:	bd90      	pop	{r4, r7, pc}

08004032 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b082      	sub	sp, #8
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
 800403a:	460b      	mov	r3, r1
 800403c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004044:	2b01      	cmp	r3, #1
 8004046:	d101      	bne.n	800404c <HAL_PCD_SetAddress+0x1a>
 8004048:	2302      	movs	r3, #2
 800404a:	e013      	b.n	8004074 <HAL_PCD_SetAddress+0x42>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	78fa      	ldrb	r2, [r7, #3]
 8004058:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	78fa      	ldrb	r2, [r7, #3]
 8004062:	4611      	mov	r1, r2
 8004064:	4618      	mov	r0, r3
 8004066:	f00b fc83 	bl	800f970 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	4608      	mov	r0, r1
 8004086:	4611      	mov	r1, r2
 8004088:	461a      	mov	r2, r3
 800408a:	4603      	mov	r3, r0
 800408c:	70fb      	strb	r3, [r7, #3]
 800408e:	460b      	mov	r3, r1
 8004090:	803b      	strh	r3, [r7, #0]
 8004092:	4613      	mov	r3, r2
 8004094:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800409a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	da0f      	bge.n	80040c2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040a2:	78fb      	ldrb	r3, [r7, #3]
 80040a4:	f003 020f 	and.w	r2, r3, #15
 80040a8:	4613      	mov	r3, r2
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	4413      	add	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	3338      	adds	r3, #56	; 0x38
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	4413      	add	r3, r2
 80040b6:	3304      	adds	r3, #4
 80040b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2201      	movs	r2, #1
 80040be:	705a      	strb	r2, [r3, #1]
 80040c0:	e00f      	b.n	80040e2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040c2:	78fb      	ldrb	r3, [r7, #3]
 80040c4:	f003 020f 	and.w	r2, r3, #15
 80040c8:	4613      	mov	r3, r2
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	4413      	add	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	4413      	add	r3, r2
 80040d8:	3304      	adds	r3, #4
 80040da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80040e2:	78fb      	ldrb	r3, [r7, #3]
 80040e4:	f003 030f 	and.w	r3, r3, #15
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80040ee:	883a      	ldrh	r2, [r7, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	78ba      	ldrb	r2, [r7, #2]
 80040f8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	785b      	ldrb	r3, [r3, #1]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d004      	beq.n	800410c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800410c:	78bb      	ldrb	r3, [r7, #2]
 800410e:	2b02      	cmp	r3, #2
 8004110:	d102      	bne.n	8004118 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800411e:	2b01      	cmp	r3, #1
 8004120:	d101      	bne.n	8004126 <HAL_PCD_EP_Open+0xaa>
 8004122:	2302      	movs	r3, #2
 8004124:	e00e      	b.n	8004144 <HAL_PCD_EP_Open+0xc8>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68f9      	ldr	r1, [r7, #12]
 8004134:	4618      	mov	r0, r3
 8004136:	f00a fcf7 	bl	800eb28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004142:	7afb      	ldrb	r3, [r7, #11]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004158:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800415c:	2b00      	cmp	r3, #0
 800415e:	da0f      	bge.n	8004180 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004160:	78fb      	ldrb	r3, [r7, #3]
 8004162:	f003 020f 	and.w	r2, r3, #15
 8004166:	4613      	mov	r3, r2
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	4413      	add	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	3338      	adds	r3, #56	; 0x38
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	4413      	add	r3, r2
 8004174:	3304      	adds	r3, #4
 8004176:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2201      	movs	r2, #1
 800417c:	705a      	strb	r2, [r3, #1]
 800417e:	e00f      	b.n	80041a0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004180:	78fb      	ldrb	r3, [r7, #3]
 8004182:	f003 020f 	and.w	r2, r3, #15
 8004186:	4613      	mov	r3, r2
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	4413      	add	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	4413      	add	r3, r2
 8004196:	3304      	adds	r3, #4
 8004198:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80041a0:	78fb      	ldrb	r3, [r7, #3]
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	b2da      	uxtb	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d101      	bne.n	80041ba <HAL_PCD_EP_Close+0x6e>
 80041b6:	2302      	movs	r3, #2
 80041b8:	e00e      	b.n	80041d8 <HAL_PCD_EP_Close+0x8c>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68f9      	ldr	r1, [r7, #12]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f00a fd35 	bl	800ec38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	607a      	str	r2, [r7, #4]
 80041ea:	603b      	str	r3, [r7, #0]
 80041ec:	460b      	mov	r3, r1
 80041ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041f0:	7afb      	ldrb	r3, [r7, #11]
 80041f2:	f003 020f 	and.w	r2, r3, #15
 80041f6:	4613      	mov	r3, r2
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	4413      	add	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	4413      	add	r3, r2
 8004206:	3304      	adds	r3, #4
 8004208:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	2200      	movs	r2, #0
 800421a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	2200      	movs	r2, #0
 8004220:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004222:	7afb      	ldrb	r3, [r7, #11]
 8004224:	f003 030f 	and.w	r3, r3, #15
 8004228:	b2da      	uxtb	r2, r3
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d102      	bne.n	800423c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800423c:	7afb      	ldrb	r3, [r7, #11]
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	2b00      	cmp	r3, #0
 8004244:	d109      	bne.n	800425a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6818      	ldr	r0, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	b2db      	uxtb	r3, r3
 8004250:	461a      	mov	r2, r3
 8004252:	6979      	ldr	r1, [r7, #20]
 8004254:	f00b f81c 	bl	800f290 <USB_EP0StartXfer>
 8004258:	e008      	b.n	800426c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6818      	ldr	r0, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	b2db      	uxtb	r3, r3
 8004264:	461a      	mov	r2, r3
 8004266:	6979      	ldr	r1, [r7, #20]
 8004268:	f00a fdc2 	bl	800edf0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
 800427e:	460b      	mov	r3, r1
 8004280:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004282:	78fb      	ldrb	r3, [r7, #3]
 8004284:	f003 020f 	and.w	r2, r3, #15
 8004288:	6879      	ldr	r1, [r7, #4]
 800428a:	4613      	mov	r3, r2
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	4413      	add	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	440b      	add	r3, r1
 8004294:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004298:	681b      	ldr	r3, [r3, #0]
}
 800429a:	4618      	mov	r0, r3
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b086      	sub	sp, #24
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	60f8      	str	r0, [r7, #12]
 80042ae:	607a      	str	r2, [r7, #4]
 80042b0:	603b      	str	r3, [r7, #0]
 80042b2:	460b      	mov	r3, r1
 80042b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042b6:	7afb      	ldrb	r3, [r7, #11]
 80042b8:	f003 020f 	and.w	r2, r3, #15
 80042bc:	4613      	mov	r3, r2
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	4413      	add	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	3338      	adds	r3, #56	; 0x38
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	4413      	add	r3, r2
 80042ca:	3304      	adds	r3, #4
 80042cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	2200      	movs	r2, #0
 80042de:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	2201      	movs	r2, #1
 80042e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042e6:	7afb      	ldrb	r3, [r7, #11]
 80042e8:	f003 030f 	and.w	r3, r3, #15
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d102      	bne.n	8004300 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004300:	7afb      	ldrb	r3, [r7, #11]
 8004302:	f003 030f 	and.w	r3, r3, #15
 8004306:	2b00      	cmp	r3, #0
 8004308:	d109      	bne.n	800431e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6818      	ldr	r0, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	461a      	mov	r2, r3
 8004316:	6979      	ldr	r1, [r7, #20]
 8004318:	f00a ffba 	bl	800f290 <USB_EP0StartXfer>
 800431c:	e008      	b.n	8004330 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	b2db      	uxtb	r3, r3
 8004328:	461a      	mov	r2, r3
 800432a:	6979      	ldr	r1, [r7, #20]
 800432c:	f00a fd60 	bl	800edf0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3718      	adds	r7, #24
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b084      	sub	sp, #16
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
 8004342:	460b      	mov	r3, r1
 8004344:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004346:	78fb      	ldrb	r3, [r7, #3]
 8004348:	f003 020f 	and.w	r2, r3, #15
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	429a      	cmp	r2, r3
 8004352:	d901      	bls.n	8004358 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e050      	b.n	80043fa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004358:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800435c:	2b00      	cmp	r3, #0
 800435e:	da0f      	bge.n	8004380 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004360:	78fb      	ldrb	r3, [r7, #3]
 8004362:	f003 020f 	and.w	r2, r3, #15
 8004366:	4613      	mov	r3, r2
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	4413      	add	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	3338      	adds	r3, #56	; 0x38
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	4413      	add	r3, r2
 8004374:	3304      	adds	r3, #4
 8004376:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2201      	movs	r2, #1
 800437c:	705a      	strb	r2, [r3, #1]
 800437e:	e00d      	b.n	800439c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004380:	78fa      	ldrb	r2, [r7, #3]
 8004382:	4613      	mov	r3, r2
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	4413      	add	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	4413      	add	r3, r2
 8004392:	3304      	adds	r3, #4
 8004394:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2201      	movs	r2, #1
 80043a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043a2:	78fb      	ldrb	r3, [r7, #3]
 80043a4:	f003 030f 	and.w	r3, r3, #15
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_PCD_EP_SetStall+0x82>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e01e      	b.n	80043fa <HAL_PCD_EP_SetStall+0xc0>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68f9      	ldr	r1, [r7, #12]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f00b f9fc 	bl	800f7c8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043d0:	78fb      	ldrb	r3, [r7, #3]
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10a      	bne.n	80043f0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6818      	ldr	r0, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	b2d9      	uxtb	r1, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043ea:	461a      	mov	r2, r3
 80043ec:	f00b fbee 	bl	800fbcc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b084      	sub	sp, #16
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
 800440a:	460b      	mov	r3, r1
 800440c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800440e:	78fb      	ldrb	r3, [r7, #3]
 8004410:	f003 020f 	and.w	r2, r3, #15
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	429a      	cmp	r2, r3
 800441a:	d901      	bls.n	8004420 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e042      	b.n	80044a6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004420:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004424:	2b00      	cmp	r3, #0
 8004426:	da0f      	bge.n	8004448 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004428:	78fb      	ldrb	r3, [r7, #3]
 800442a:	f003 020f 	and.w	r2, r3, #15
 800442e:	4613      	mov	r3, r2
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	4413      	add	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	3338      	adds	r3, #56	; 0x38
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	4413      	add	r3, r2
 800443c:	3304      	adds	r3, #4
 800443e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2201      	movs	r2, #1
 8004444:	705a      	strb	r2, [r3, #1]
 8004446:	e00f      	b.n	8004468 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004448:	78fb      	ldrb	r3, [r7, #3]
 800444a:	f003 020f 	and.w	r2, r3, #15
 800444e:	4613      	mov	r3, r2
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	4413      	add	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	4413      	add	r3, r2
 800445e:	3304      	adds	r3, #4
 8004460:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800446e:	78fb      	ldrb	r3, [r7, #3]
 8004470:	f003 030f 	and.w	r3, r3, #15
 8004474:	b2da      	uxtb	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004480:	2b01      	cmp	r3, #1
 8004482:	d101      	bne.n	8004488 <HAL_PCD_EP_ClrStall+0x86>
 8004484:	2302      	movs	r3, #2
 8004486:	e00e      	b.n	80044a6 <HAL_PCD_EP_ClrStall+0xa4>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68f9      	ldr	r1, [r7, #12]
 8004496:	4618      	mov	r0, r3
 8004498:	f00b fa04 	bl	800f8a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b084      	sub	sp, #16
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
 80044b6:	460b      	mov	r3, r1
 80044b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80044ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	da0c      	bge.n	80044dc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044c2:	78fb      	ldrb	r3, [r7, #3]
 80044c4:	f003 020f 	and.w	r2, r3, #15
 80044c8:	4613      	mov	r3, r2
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	4413      	add	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	3338      	adds	r3, #56	; 0x38
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	4413      	add	r3, r2
 80044d6:	3304      	adds	r3, #4
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	e00c      	b.n	80044f6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044dc:	78fb      	ldrb	r3, [r7, #3]
 80044de:	f003 020f 	and.w	r2, r3, #15
 80044e2:	4613      	mov	r3, r2
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	4413      	add	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	4413      	add	r3, r2
 80044f2:	3304      	adds	r3, #4
 80044f4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68f9      	ldr	r1, [r7, #12]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f00b f823 	bl	800f548 <USB_EPStopXfer>
 8004502:	4603      	mov	r3, r0
 8004504:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004506:	7afb      	ldrb	r3, [r7, #11]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	460b      	mov	r3, r1
 800451a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004522:	2b01      	cmp	r3, #1
 8004524:	d101      	bne.n	800452a <HAL_PCD_EP_Flush+0x1a>
 8004526:	2302      	movs	r3, #2
 8004528:	e01b      	b.n	8004562 <HAL_PCD_EP_Flush+0x52>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8004532:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004536:	2b00      	cmp	r3, #0
 8004538:	da09      	bge.n	800454e <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	78fb      	ldrb	r3, [r7, #3]
 8004540:	f003 030f 	and.w	r3, r3, #15
 8004544:	4619      	mov	r1, r3
 8004546:	4610      	mov	r0, r2
 8004548:	f00a fa4c 	bl	800e9e4 <USB_FlushTxFifo>
 800454c:	e004      	b.n	8004558 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f00a fa7a 	bl	800ea4c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b08a      	sub	sp, #40	; 0x28
 800456e:	af02      	add	r7, sp, #8
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	4613      	mov	r3, r2
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	4413      	add	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	3338      	adds	r3, #56	; 0x38
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	4413      	add	r3, r2
 800458e:	3304      	adds	r3, #4
 8004590:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a1a      	ldr	r2, [r3, #32]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	429a      	cmp	r2, r3
 800459c:	d901      	bls.n	80045a2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e06c      	b.n	800467c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	699a      	ldr	r2, [r3, #24]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	69fa      	ldr	r2, [r7, #28]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d902      	bls.n	80045be <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	3303      	adds	r3, #3
 80045c2:	089b      	lsrs	r3, r3, #2
 80045c4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045c6:	e02b      	b.n	8004620 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	699a      	ldr	r2, [r3, #24]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	69fa      	ldr	r2, [r7, #28]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d902      	bls.n	80045e4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	3303      	adds	r3, #3
 80045e8:	089b      	lsrs	r3, r3, #2
 80045ea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6919      	ldr	r1, [r3, #16]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	4603      	mov	r3, r0
 8004602:	6978      	ldr	r0, [r7, #20]
 8004604:	f00b f84a 	bl	800f69c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	691a      	ldr	r2, [r3, #16]
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	441a      	add	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6a1a      	ldr	r2, [r3, #32]
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	441a      	add	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	4413      	add	r3, r2
 8004628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	b29b      	uxth	r3, r3
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	429a      	cmp	r2, r3
 8004634:	d809      	bhi.n	800464a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6a1a      	ldr	r2, [r3, #32]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800463e:	429a      	cmp	r2, r3
 8004640:	d203      	bcs.n	800464a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1be      	bne.n	80045c8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	699a      	ldr	r2, [r3, #24]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	429a      	cmp	r2, r3
 8004654:	d811      	bhi.n	800467a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	f003 030f 	and.w	r3, r3, #15
 800465c:	2201      	movs	r2, #1
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800466a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	43db      	mvns	r3, r3
 8004670:	6939      	ldr	r1, [r7, #16]
 8004672:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004676:	4013      	ands	r3, r2
 8004678:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3720      	adds	r7, #32
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b088      	sub	sp, #32
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	333c      	adds	r3, #60	; 0x3c
 800469c:	3304      	adds	r3, #4
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	015a      	lsls	r2, r3, #5
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d17b      	bne.n	80047b2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f003 0308 	and.w	r3, r3, #8
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d015      	beq.n	80046f0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	4a61      	ldr	r2, [pc, #388]	; (800484c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	f240 80b9 	bls.w	8004840 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 80b3 	beq.w	8004840 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e6:	461a      	mov	r2, r3
 80046e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ec:	6093      	str	r3, [r2, #8]
 80046ee:	e0a7      	b.n	8004840 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f003 0320 	and.w	r3, r3, #32
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d009      	beq.n	800470e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	4413      	add	r3, r2
 8004702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004706:	461a      	mov	r2, r3
 8004708:	2320      	movs	r3, #32
 800470a:	6093      	str	r3, [r2, #8]
 800470c:	e098      	b.n	8004840 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004714:	2b00      	cmp	r3, #0
 8004716:	f040 8093 	bne.w	8004840 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	4a4b      	ldr	r2, [pc, #300]	; (800484c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d90f      	bls.n	8004742 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00a      	beq.n	8004742 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	4413      	add	r3, r2
 8004734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004738:	461a      	mov	r2, r3
 800473a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800473e:	6093      	str	r3, [r2, #8]
 8004740:	e07e      	b.n	8004840 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	4613      	mov	r3, r2
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	4413      	add	r3, r2
 8004754:	3304      	adds	r3, #4
 8004756:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	69da      	ldr	r2, [r3, #28]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	0159      	lsls	r1, r3, #5
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	440b      	add	r3, r1
 8004764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800476e:	1ad2      	subs	r2, r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d114      	bne.n	80047a4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d109      	bne.n	8004796 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6818      	ldr	r0, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800478c:	461a      	mov	r2, r3
 800478e:	2101      	movs	r1, #1
 8004790:	f00b fa1c 	bl	800fbcc <USB_EP0_OutStart>
 8004794:	e006      	b.n	80047a4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	691a      	ldr	r2, [r3, #16]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	441a      	add	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	4619      	mov	r1, r3
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f01c f8f6 	bl	802099c <HAL_PCD_DataOutStageCallback>
 80047b0:	e046      	b.n	8004840 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	4a26      	ldr	r2, [pc, #152]	; (8004850 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d124      	bne.n	8004804 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00a      	beq.n	80047da <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d0:	461a      	mov	r2, r3
 80047d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047d6:	6093      	str	r3, [r2, #8]
 80047d8:	e032      	b.n	8004840 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	f003 0320 	and.w	r3, r3, #32
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d008      	beq.n	80047f6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f0:	461a      	mov	r2, r3
 80047f2:	2320      	movs	r3, #32
 80047f4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	4619      	mov	r1, r3
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f01c f8cd 	bl	802099c <HAL_PCD_DataOutStageCallback>
 8004802:	e01d      	b.n	8004840 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d114      	bne.n	8004834 <PCD_EP_OutXfrComplete_int+0x1b0>
 800480a:	6879      	ldr	r1, [r7, #4]
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	4613      	mov	r3, r2
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	4413      	add	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	440b      	add	r3, r1
 8004818:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d108      	bne.n	8004834 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800482c:	461a      	mov	r2, r3
 800482e:	2100      	movs	r1, #0
 8004830:	f00b f9cc 	bl	800fbcc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	b2db      	uxtb	r3, r3
 8004838:	4619      	mov	r1, r3
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f01c f8ae 	bl	802099c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3720      	adds	r7, #32
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	4f54300a 	.word	0x4f54300a
 8004850:	4f54310a 	.word	0x4f54310a

08004854 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	333c      	adds	r3, #60	; 0x3c
 800486c:	3304      	adds	r3, #4
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4a15      	ldr	r2, [pc, #84]	; (80048dc <PCD_EP_OutSetupPacket_int+0x88>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d90e      	bls.n	80048a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004890:	2b00      	cmp	r3, #0
 8004892:	d009      	beq.n	80048a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	4413      	add	r3, r2
 800489c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a0:	461a      	mov	r2, r3
 80048a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f01c f865 	bl	8020978 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4a0a      	ldr	r2, [pc, #40]	; (80048dc <PCD_EP_OutSetupPacket_int+0x88>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d90c      	bls.n	80048d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d108      	bne.n	80048d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6818      	ldr	r0, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80048c8:	461a      	mov	r2, r3
 80048ca:	2101      	movs	r1, #1
 80048cc:	f00b f97e 	bl	800fbcc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	4f54300a 	.word	0x4f54300a

080048e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	460b      	mov	r3, r1
 80048ea:	70fb      	strb	r3, [r7, #3]
 80048ec:	4613      	mov	r3, r2
 80048ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80048f8:	78fb      	ldrb	r3, [r7, #3]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d107      	bne.n	800490e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80048fe:	883b      	ldrh	r3, [r7, #0]
 8004900:	0419      	lsls	r1, r3, #16
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	430a      	orrs	r2, r1
 800490a:	629a      	str	r2, [r3, #40]	; 0x28
 800490c:	e028      	b.n	8004960 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004914:	0c1b      	lsrs	r3, r3, #16
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	4413      	add	r3, r2
 800491a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800491c:	2300      	movs	r3, #0
 800491e:	73fb      	strb	r3, [r7, #15]
 8004920:	e00d      	b.n	800493e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	7bfb      	ldrb	r3, [r7, #15]
 8004928:	3340      	adds	r3, #64	; 0x40
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	0c1b      	lsrs	r3, r3, #16
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	4413      	add	r3, r2
 8004936:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004938:	7bfb      	ldrb	r3, [r7, #15]
 800493a:	3301      	adds	r3, #1
 800493c:	73fb      	strb	r3, [r7, #15]
 800493e:	7bfa      	ldrb	r2, [r7, #15]
 8004940:	78fb      	ldrb	r3, [r7, #3]
 8004942:	3b01      	subs	r3, #1
 8004944:	429a      	cmp	r2, r3
 8004946:	d3ec      	bcc.n	8004922 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004948:	883b      	ldrh	r3, [r7, #0]
 800494a:	0418      	lsls	r0, r3, #16
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6819      	ldr	r1, [r3, #0]
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	3b01      	subs	r3, #1
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	4302      	orrs	r2, r0
 8004958:	3340      	adds	r3, #64	; 0x40
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	440b      	add	r3, r1
 800495e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800496e:	b480      	push	{r7}
 8004970:	b083      	sub	sp, #12
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
 8004976:	460b      	mov	r3, r1
 8004978:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	887a      	ldrh	r2, [r7, #2]
 8004980:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049be:	4b05      	ldr	r3, [pc, #20]	; (80049d4 <HAL_PCDEx_ActivateLPM+0x44>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	10000003 	.word	0x10000003

080049d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	460b      	mov	r3, r1
 80049e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80049f8:	4b29      	ldr	r3, [pc, #164]	; (8004aa0 <HAL_PWREx_ConfigSupply+0xb0>)
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f003 0307 	and.w	r3, r3, #7
 8004a00:	2b06      	cmp	r3, #6
 8004a02:	d00a      	beq.n	8004a1a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004a04:	4b26      	ldr	r3, [pc, #152]	; (8004aa0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d001      	beq.n	8004a16 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e040      	b.n	8004a98 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004a16:	2300      	movs	r3, #0
 8004a18:	e03e      	b.n	8004a98 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004a1a:	4b21      	ldr	r3, [pc, #132]	; (8004aa0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004a22:	491f      	ldr	r1, [pc, #124]	; (8004aa0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004a2a:	f7fc fb8d 	bl	8001148 <HAL_GetTick>
 8004a2e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a30:	e009      	b.n	8004a46 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004a32:	f7fc fb89 	bl	8001148 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a40:	d901      	bls.n	8004a46 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e028      	b.n	8004a98 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a46:	4b16      	ldr	r3, [pc, #88]	; (8004aa0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a52:	d1ee      	bne.n	8004a32 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b1e      	cmp	r3, #30
 8004a58:	d008      	beq.n	8004a6c <HAL_PWREx_ConfigSupply+0x7c>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b2e      	cmp	r3, #46	; 0x2e
 8004a5e:	d005      	beq.n	8004a6c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b1d      	cmp	r3, #29
 8004a64:	d002      	beq.n	8004a6c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b2d      	cmp	r3, #45	; 0x2d
 8004a6a:	d114      	bne.n	8004a96 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004a6c:	f7fc fb6c 	bl	8001148 <HAL_GetTick>
 8004a70:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004a72:	e009      	b.n	8004a88 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004a74:	f7fc fb68 	bl	8001148 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a82:	d901      	bls.n	8004a88 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e007      	b.n	8004a98 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004a88:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a94:	d1ee      	bne.n	8004a74 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	58024800 	.word	0x58024800

08004aa4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004aa8:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	4a04      	ldr	r2, [pc, #16]	; (8004ac0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004aae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ab2:	60d3      	str	r3, [r2, #12]
}
 8004ab4:	bf00      	nop
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	58024800 	.word	0x58024800

08004ac4 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f003 0304 	and.w	r3, r3, #4
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d064      	beq.n	8004bb0 <HAL_QSPI_IRQHandler+0xec>
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d05f      	beq.n	8004bb0 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	3320      	adds	r3, #32
 8004af6:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b12      	cmp	r3, #18
 8004b02:	d125      	bne.n	8004b50 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8004b04:	e01c      	b.n	8004b40 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00f      	beq.n	8004b2e <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b12:	781a      	ldrb	r2, [r3, #0]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b26:	1e5a      	subs	r2, r3, #1
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	62da      	str	r2, [r3, #44]	; 0x2c
 8004b2c:	e008      	b.n	8004b40 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b3c:	601a      	str	r2, [r3, #0]
          break;
 8004b3e:	e033      	b.n	8004ba8 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1db      	bne.n	8004b06 <HAL_QSPI_IRQHandler+0x42>
 8004b4e:	e02b      	b.n	8004ba8 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b22      	cmp	r3, #34	; 0x22
 8004b5a:	d125      	bne.n	8004ba8 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8004b5c:	e01d      	b.n	8004b9a <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d010      	beq.n	8004b88 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	7812      	ldrb	r2, [r2, #0]
 8004b6e:	b2d2      	uxtb	r2, r2
 8004b70:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b76:	1c5a      	adds	r2, r3, #1
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b80:	1e5a      	subs	r2, r3, #1
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	639a      	str	r2, [r3, #56]	; 0x38
 8004b86:	e008      	b.n	8004b9a <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b96:	601a      	str	r2, [r3, #0]
          break;
 8004b98:	e006      	b.n	8004ba8 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1da      	bne.n	8004b5e <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 f959 	bl	8004e60 <HAL_QSPI_FifoThresholdCallback>
 8004bae:	e13c      	b.n	8004e2a <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 80b0 	beq.w	8004d1c <HAL_QSPI_IRQHandler+0x258>
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 80aa 	beq.w	8004d1c <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2202      	movs	r2, #2
 8004bce:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8004bde:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b12      	cmp	r3, #18
 8004bea:	d120      	bne.n	8004c2e <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0304 	and.w	r3, r3, #4
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d011      	beq.n	8004c1e <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0204 	bic.w	r2, r2, #4
 8004c08:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0201 	bic.w	r2, r2, #1
 8004c1c:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f019 f91c 	bl	801de64 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004c2c:	e0fa      	b.n	8004e24 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b22      	cmp	r3, #34	; 0x22
 8004c38:	d143      	bne.n	8004cc2 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0304 	and.w	r3, r3, #4
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d012      	beq.n	8004c6e <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 0204 	bic.w	r2, r2, #4
 8004c56:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68da      	ldr	r2, [r3, #12]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0201 	bic.w	r2, r2, #1
 8004c6a:	60da      	str	r2, [r3, #12]
 8004c6c:	e021      	b.n	8004cb2 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3320      	adds	r3, #32
 8004c74:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8004c76:	e013      	b.n	8004ca0 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d017      	beq.n	8004cb0 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	7812      	ldrb	r2, [r2, #0]
 8004c88:	b2d2      	uxtb	r2, r2
 8004c8a:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9a:	1e5a      	subs	r2, r3, #1
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1e4      	bne.n	8004c78 <HAL_QSPI_IRQHandler+0x1b4>
 8004cae:	e000      	b.n	8004cb2 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8004cb0:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f019 f8c2 	bl	801de44 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004cc0:	e0b0      	b.n	8004e24 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d107      	bne.n	8004cde <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f019 f8e4 	bl	801dea4 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004cdc:	e0a2      	b.n	8004e24 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b08      	cmp	r3, #8
 8004ce8:	f040 809c 	bne.w	8004e24 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	695a      	ldr	r2, [r3, #20]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004cfa:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d103      	bne.n	8004d14 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f89d 	bl	8004e4c <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004d12:	e087      	b.n	8004e24 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 f88f 	bl	8004e38 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004d1a:	e083      	b.n	8004e24 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f003 0308 	and.w	r3, r3, #8
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d01f      	beq.n	8004d66 <HAL_QSPI_IRQHandler+0x2a2>
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d01a      	beq.n	8004d66 <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2208      	movs	r2, #8
 8004d36:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00b      	beq.n	8004d5e <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8004d54:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f019 f890 	bl	801de84 <HAL_QSPI_StatusMatchCallback>
 8004d64:	e061      	b.n	8004e2a <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d047      	beq.n	8004e00 <HAL_QSPI_IRQHandler+0x33c>
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d042      	beq.n	8004e00 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8004d90:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d96:	f043 0202 	orr.w	r2, r3, #2
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d021      	beq.n	8004df0 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0204 	bic.w	r2, r2, #4
 8004dba:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc0:	4a1c      	ldr	r2, [pc, #112]	; (8004e34 <HAL_QSPI_IRQHandler+0x370>)
 8004dc2:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7fe fae8 	bl	800339e <HAL_MDMA_Abort_IT>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d029      	beq.n	8004e28 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd8:	f043 0204 	orr.w	r2, r3, #4
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f825 	bl	8004e38 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8004dee:	e01b      	b.n	8004e28 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 f81d 	bl	8004e38 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8004dfe:	e013      	b.n	8004e28 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f003 0310 	and.w	r3, r3, #16
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00f      	beq.n	8004e2a <HAL_QSPI_IRQHandler+0x366>
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00a      	beq.n	8004e2a <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2210      	movs	r2, #16
 8004e1a:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 f829 	bl	8004e74 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 8004e22:	e002      	b.n	8004e2a <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004e24:	bf00      	nop
 8004e26:	e000      	b.n	8004e2a <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8004e28:	bf00      	nop
}
 8004e2a:	bf00      	nop
 8004e2c:	3718      	adds	r7, #24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	08004e89 	.word	0x08004e89

08004e38 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma : MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e94:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b08      	cmp	r3, #8
 8004eac:	d114      	bne.n	8004ed8 <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004ec4:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f042 0202 	orr.w	r2, r2, #2
 8004ed4:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 8004ed6:	e006      	b.n	8004ee6 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f7ff ffa9 	bl	8004e38 <HAL_QSPI_ErrorCallback>
}
 8004ee6:	bf00      	nop
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
	...

08004ef0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08c      	sub	sp, #48	; 0x30
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d102      	bne.n	8004f04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	f000 bc1d 	b.w	800573e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 8087 	beq.w	8005020 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f12:	4b99      	ldr	r3, [pc, #612]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f1c:	4b96      	ldr	r3, [pc, #600]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 8004f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f20:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f24:	2b10      	cmp	r3, #16
 8004f26:	d007      	beq.n	8004f38 <HAL_RCC_OscConfig+0x48>
 8004f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2a:	2b18      	cmp	r3, #24
 8004f2c:	d110      	bne.n	8004f50 <HAL_RCC_OscConfig+0x60>
 8004f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f30:	f003 0303 	and.w	r3, r3, #3
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d10b      	bne.n	8004f50 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f38:	4b8f      	ldr	r3, [pc, #572]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d06c      	beq.n	800501e <HAL_RCC_OscConfig+0x12e>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d168      	bne.n	800501e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e3f6      	b.n	800573e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f58:	d106      	bne.n	8004f68 <HAL_RCC_OscConfig+0x78>
 8004f5a:	4b87      	ldr	r3, [pc, #540]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a86      	ldr	r2, [pc, #536]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 8004f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f64:	6013      	str	r3, [r2, #0]
 8004f66:	e02e      	b.n	8004fc6 <HAL_RCC_OscConfig+0xd6>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10c      	bne.n	8004f8a <HAL_RCC_OscConfig+0x9a>
 8004f70:	4b81      	ldr	r3, [pc, #516]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a80      	ldr	r2, [pc, #512]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 8004f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f7a:	6013      	str	r3, [r2, #0]
 8004f7c:	4b7e      	ldr	r3, [pc, #504]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a7d      	ldr	r2, [pc, #500]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 8004f82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f86:	6013      	str	r3, [r2, #0]
 8004f88:	e01d      	b.n	8004fc6 <HAL_RCC_OscConfig+0xd6>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f92:	d10c      	bne.n	8004fae <HAL_RCC_OscConfig+0xbe>
 8004f94:	4b78      	ldr	r3, [pc, #480]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a77      	ldr	r2, [pc, #476]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 8004f9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f9e:	6013      	str	r3, [r2, #0]
 8004fa0:	4b75      	ldr	r3, [pc, #468]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a74      	ldr	r2, [pc, #464]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 8004fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004faa:	6013      	str	r3, [r2, #0]
 8004fac:	e00b      	b.n	8004fc6 <HAL_RCC_OscConfig+0xd6>
 8004fae:	4b72      	ldr	r3, [pc, #456]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a71      	ldr	r2, [pc, #452]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 8004fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fb8:	6013      	str	r3, [r2, #0]
 8004fba:	4b6f      	ldr	r3, [pc, #444]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a6e      	ldr	r2, [pc, #440]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 8004fc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fc4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d013      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fce:	f7fc f8bb 	bl	8001148 <HAL_GetTick>
 8004fd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fd4:	e008      	b.n	8004fe8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fd6:	f7fc f8b7 	bl	8001148 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2b64      	cmp	r3, #100	; 0x64
 8004fe2:	d901      	bls.n	8004fe8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e3aa      	b.n	800573e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fe8:	4b63      	ldr	r3, [pc, #396]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d0f0      	beq.n	8004fd6 <HAL_RCC_OscConfig+0xe6>
 8004ff4:	e014      	b.n	8005020 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff6:	f7fc f8a7 	bl	8001148 <HAL_GetTick>
 8004ffa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ffc:	e008      	b.n	8005010 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ffe:	f7fc f8a3 	bl	8001148 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b64      	cmp	r3, #100	; 0x64
 800500a:	d901      	bls.n	8005010 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e396      	b.n	800573e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005010:	4b59      	ldr	r3, [pc, #356]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1f0      	bne.n	8004ffe <HAL_RCC_OscConfig+0x10e>
 800501c:	e000      	b.n	8005020 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800501e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 80cb 	beq.w	80051c4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800502e:	4b52      	ldr	r3, [pc, #328]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005036:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005038:	4b4f      	ldr	r3, [pc, #316]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 800503a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800503e:	6a3b      	ldr	r3, [r7, #32]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d007      	beq.n	8005054 <HAL_RCC_OscConfig+0x164>
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	2b18      	cmp	r3, #24
 8005048:	d156      	bne.n	80050f8 <HAL_RCC_OscConfig+0x208>
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	f003 0303 	and.w	r3, r3, #3
 8005050:	2b00      	cmp	r3, #0
 8005052:	d151      	bne.n	80050f8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005054:	4b48      	ldr	r3, [pc, #288]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <HAL_RCC_OscConfig+0x17c>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d101      	bne.n	800506c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e368      	b.n	800573e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800506c:	4b42      	ldr	r3, [pc, #264]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f023 0219 	bic.w	r2, r3, #25
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	493f      	ldr	r1, [pc, #252]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 800507a:	4313      	orrs	r3, r2
 800507c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800507e:	f7fc f863 	bl	8001148 <HAL_GetTick>
 8005082:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005084:	e008      	b.n	8005098 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005086:	f7fc f85f 	bl	8001148 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b02      	cmp	r3, #2
 8005092:	d901      	bls.n	8005098 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e352      	b.n	800573e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005098:	4b37      	ldr	r3, [pc, #220]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d0f0      	beq.n	8005086 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050a4:	f7fc f880 	bl	80011a8 <HAL_GetREVID>
 80050a8:	4603      	mov	r3, r0
 80050aa:	f241 0203 	movw	r2, #4099	; 0x1003
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d817      	bhi.n	80050e2 <HAL_RCC_OscConfig+0x1f2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	2b40      	cmp	r3, #64	; 0x40
 80050b8:	d108      	bne.n	80050cc <HAL_RCC_OscConfig+0x1dc>
 80050ba:	4b2f      	ldr	r3, [pc, #188]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80050c2:	4a2d      	ldr	r2, [pc, #180]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 80050c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050c8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050ca:	e07b      	b.n	80051c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050cc:	4b2a      	ldr	r3, [pc, #168]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	031b      	lsls	r3, r3, #12
 80050da:	4927      	ldr	r1, [pc, #156]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050e0:	e070      	b.n	80051c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050e2:	4b25      	ldr	r3, [pc, #148]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	061b      	lsls	r3, r3, #24
 80050f0:	4921      	ldr	r1, [pc, #132]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050f6:	e065      	b.n	80051c4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d048      	beq.n	8005192 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005100:	4b1d      	ldr	r3, [pc, #116]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f023 0219 	bic.w	r2, r3, #25
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	491a      	ldr	r1, [pc, #104]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 800510e:	4313      	orrs	r3, r2
 8005110:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005112:	f7fc f819 	bl	8001148 <HAL_GetTick>
 8005116:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005118:	e008      	b.n	800512c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800511a:	f7fc f815 	bl	8001148 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e308      	b.n	800573e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800512c:	4b12      	ldr	r3, [pc, #72]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0304 	and.w	r3, r3, #4
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0f0      	beq.n	800511a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005138:	f7fc f836 	bl	80011a8 <HAL_GetREVID>
 800513c:	4603      	mov	r3, r0
 800513e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005142:	4293      	cmp	r3, r2
 8005144:	d81a      	bhi.n	800517c <HAL_RCC_OscConfig+0x28c>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	2b40      	cmp	r3, #64	; 0x40
 800514c:	d108      	bne.n	8005160 <HAL_RCC_OscConfig+0x270>
 800514e:	4b0a      	ldr	r3, [pc, #40]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005156:	4a08      	ldr	r2, [pc, #32]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 8005158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800515c:	6053      	str	r3, [r2, #4]
 800515e:	e031      	b.n	80051c4 <HAL_RCC_OscConfig+0x2d4>
 8005160:	4b05      	ldr	r3, [pc, #20]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	031b      	lsls	r3, r3, #12
 800516e:	4902      	ldr	r1, [pc, #8]	; (8005178 <HAL_RCC_OscConfig+0x288>)
 8005170:	4313      	orrs	r3, r2
 8005172:	604b      	str	r3, [r1, #4]
 8005174:	e026      	b.n	80051c4 <HAL_RCC_OscConfig+0x2d4>
 8005176:	bf00      	nop
 8005178:	58024400 	.word	0x58024400
 800517c:	4b9a      	ldr	r3, [pc, #616]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	061b      	lsls	r3, r3, #24
 800518a:	4997      	ldr	r1, [pc, #604]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 800518c:	4313      	orrs	r3, r2
 800518e:	604b      	str	r3, [r1, #4]
 8005190:	e018      	b.n	80051c4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005192:	4b95      	ldr	r3, [pc, #596]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a94      	ldr	r2, [pc, #592]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 8005198:	f023 0301 	bic.w	r3, r3, #1
 800519c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800519e:	f7fb ffd3 	bl	8001148 <HAL_GetTick>
 80051a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80051a4:	e008      	b.n	80051b8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051a6:	f7fb ffcf 	bl	8001148 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d901      	bls.n	80051b8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e2c2      	b.n	800573e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80051b8:	4b8b      	ldr	r3, [pc, #556]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0304 	and.w	r3, r3, #4
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1f0      	bne.n	80051a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0310 	and.w	r3, r3, #16
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 80a9 	beq.w	8005324 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051d2:	4b85      	ldr	r3, [pc, #532]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051da:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80051dc:	4b82      	ldr	r3, [pc, #520]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 80051de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	d007      	beq.n	80051f8 <HAL_RCC_OscConfig+0x308>
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	2b18      	cmp	r3, #24
 80051ec:	d13a      	bne.n	8005264 <HAL_RCC_OscConfig+0x374>
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f003 0303 	and.w	r3, r3, #3
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d135      	bne.n	8005264 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80051f8:	4b7b      	ldr	r3, [pc, #492]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005200:	2b00      	cmp	r3, #0
 8005202:	d005      	beq.n	8005210 <HAL_RCC_OscConfig+0x320>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	69db      	ldr	r3, [r3, #28]
 8005208:	2b80      	cmp	r3, #128	; 0x80
 800520a:	d001      	beq.n	8005210 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e296      	b.n	800573e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005210:	f7fb ffca 	bl	80011a8 <HAL_GetREVID>
 8005214:	4603      	mov	r3, r0
 8005216:	f241 0203 	movw	r2, #4099	; 0x1003
 800521a:	4293      	cmp	r3, r2
 800521c:	d817      	bhi.n	800524e <HAL_RCC_OscConfig+0x35e>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	2b20      	cmp	r3, #32
 8005224:	d108      	bne.n	8005238 <HAL_RCC_OscConfig+0x348>
 8005226:	4b70      	ldr	r3, [pc, #448]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800522e:	4a6e      	ldr	r2, [pc, #440]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 8005230:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005234:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005236:	e075      	b.n	8005324 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005238:	4b6b      	ldr	r3, [pc, #428]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	069b      	lsls	r3, r3, #26
 8005246:	4968      	ldr	r1, [pc, #416]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 8005248:	4313      	orrs	r3, r2
 800524a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800524c:	e06a      	b.n	8005324 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800524e:	4b66      	ldr	r3, [pc, #408]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	061b      	lsls	r3, r3, #24
 800525c:	4962      	ldr	r1, [pc, #392]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 800525e:	4313      	orrs	r3, r2
 8005260:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005262:	e05f      	b.n	8005324 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	69db      	ldr	r3, [r3, #28]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d042      	beq.n	80052f2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800526c:	4b5e      	ldr	r3, [pc, #376]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a5d      	ldr	r2, [pc, #372]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 8005272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005278:	f7fb ff66 	bl	8001148 <HAL_GetTick>
 800527c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800527e:	e008      	b.n	8005292 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005280:	f7fb ff62 	bl	8001148 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b02      	cmp	r3, #2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e255      	b.n	800573e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005292:	4b55      	ldr	r3, [pc, #340]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529a:	2b00      	cmp	r3, #0
 800529c:	d0f0      	beq.n	8005280 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800529e:	f7fb ff83 	bl	80011a8 <HAL_GetREVID>
 80052a2:	4603      	mov	r3, r0
 80052a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d817      	bhi.n	80052dc <HAL_RCC_OscConfig+0x3ec>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	2b20      	cmp	r3, #32
 80052b2:	d108      	bne.n	80052c6 <HAL_RCC_OscConfig+0x3d6>
 80052b4:	4b4c      	ldr	r3, [pc, #304]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80052bc:	4a4a      	ldr	r2, [pc, #296]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 80052be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052c2:	6053      	str	r3, [r2, #4]
 80052c4:	e02e      	b.n	8005324 <HAL_RCC_OscConfig+0x434>
 80052c6:	4b48      	ldr	r3, [pc, #288]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	069b      	lsls	r3, r3, #26
 80052d4:	4944      	ldr	r1, [pc, #272]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	604b      	str	r3, [r1, #4]
 80052da:	e023      	b.n	8005324 <HAL_RCC_OscConfig+0x434>
 80052dc:	4b42      	ldr	r3, [pc, #264]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	061b      	lsls	r3, r3, #24
 80052ea:	493f      	ldr	r1, [pc, #252]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	60cb      	str	r3, [r1, #12]
 80052f0:	e018      	b.n	8005324 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80052f2:	4b3d      	ldr	r3, [pc, #244]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a3c      	ldr	r2, [pc, #240]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 80052f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052fe:	f7fb ff23 	bl	8001148 <HAL_GetTick>
 8005302:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005304:	e008      	b.n	8005318 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005306:	f7fb ff1f 	bl	8001148 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d901      	bls.n	8005318 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e212      	b.n	800573e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005318:	4b33      	ldr	r3, [pc, #204]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1f0      	bne.n	8005306 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0308 	and.w	r3, r3, #8
 800532c:	2b00      	cmp	r3, #0
 800532e:	d036      	beq.n	800539e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d019      	beq.n	800536c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005338:	4b2b      	ldr	r3, [pc, #172]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 800533a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800533c:	4a2a      	ldr	r2, [pc, #168]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 800533e:	f043 0301 	orr.w	r3, r3, #1
 8005342:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005344:	f7fb ff00 	bl	8001148 <HAL_GetTick>
 8005348:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800534a:	e008      	b.n	800535e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800534c:	f7fb fefc 	bl	8001148 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b02      	cmp	r3, #2
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e1ef      	b.n	800573e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800535e:	4b22      	ldr	r3, [pc, #136]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 8005360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d0f0      	beq.n	800534c <HAL_RCC_OscConfig+0x45c>
 800536a:	e018      	b.n	800539e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800536c:	4b1e      	ldr	r3, [pc, #120]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 800536e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005370:	4a1d      	ldr	r2, [pc, #116]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 8005372:	f023 0301 	bic.w	r3, r3, #1
 8005376:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005378:	f7fb fee6 	bl	8001148 <HAL_GetTick>
 800537c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800537e:	e008      	b.n	8005392 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005380:	f7fb fee2 	bl	8001148 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b02      	cmp	r3, #2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e1d5      	b.n	800573e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005392:	4b15      	ldr	r3, [pc, #84]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 8005394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1f0      	bne.n	8005380 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0320 	and.w	r3, r3, #32
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d039      	beq.n	800541e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d01c      	beq.n	80053ec <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053b2:	4b0d      	ldr	r3, [pc, #52]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a0c      	ldr	r2, [pc, #48]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 80053b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80053bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80053be:	f7fb fec3 	bl	8001148 <HAL_GetTick>
 80053c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80053c4:	e008      	b.n	80053d8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80053c6:	f7fb febf 	bl	8001148 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d901      	bls.n	80053d8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e1b2      	b.n	800573e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80053d8:	4b03      	ldr	r3, [pc, #12]	; (80053e8 <HAL_RCC_OscConfig+0x4f8>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d0f0      	beq.n	80053c6 <HAL_RCC_OscConfig+0x4d6>
 80053e4:	e01b      	b.n	800541e <HAL_RCC_OscConfig+0x52e>
 80053e6:	bf00      	nop
 80053e8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80053ec:	4b9b      	ldr	r3, [pc, #620]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a9a      	ldr	r2, [pc, #616]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 80053f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053f6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80053f8:	f7fb fea6 	bl	8001148 <HAL_GetTick>
 80053fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80053fe:	e008      	b.n	8005412 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005400:	f7fb fea2 	bl	8001148 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b02      	cmp	r3, #2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e195      	b.n	800573e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005412:	4b92      	ldr	r3, [pc, #584]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1f0      	bne.n	8005400 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0304 	and.w	r3, r3, #4
 8005426:	2b00      	cmp	r3, #0
 8005428:	f000 8081 	beq.w	800552e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800542c:	4b8c      	ldr	r3, [pc, #560]	; (8005660 <HAL_RCC_OscConfig+0x770>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a8b      	ldr	r2, [pc, #556]	; (8005660 <HAL_RCC_OscConfig+0x770>)
 8005432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005436:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005438:	f7fb fe86 	bl	8001148 <HAL_GetTick>
 800543c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005440:	f7fb fe82 	bl	8001148 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b64      	cmp	r3, #100	; 0x64
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e175      	b.n	800573e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005452:	4b83      	ldr	r3, [pc, #524]	; (8005660 <HAL_RCC_OscConfig+0x770>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545a:	2b00      	cmp	r3, #0
 800545c:	d0f0      	beq.n	8005440 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d106      	bne.n	8005474 <HAL_RCC_OscConfig+0x584>
 8005466:	4b7d      	ldr	r3, [pc, #500]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 8005468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546a:	4a7c      	ldr	r2, [pc, #496]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 800546c:	f043 0301 	orr.w	r3, r3, #1
 8005470:	6713      	str	r3, [r2, #112]	; 0x70
 8005472:	e02d      	b.n	80054d0 <HAL_RCC_OscConfig+0x5e0>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10c      	bne.n	8005496 <HAL_RCC_OscConfig+0x5a6>
 800547c:	4b77      	ldr	r3, [pc, #476]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 800547e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005480:	4a76      	ldr	r2, [pc, #472]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 8005482:	f023 0301 	bic.w	r3, r3, #1
 8005486:	6713      	str	r3, [r2, #112]	; 0x70
 8005488:	4b74      	ldr	r3, [pc, #464]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 800548a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800548c:	4a73      	ldr	r2, [pc, #460]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 800548e:	f023 0304 	bic.w	r3, r3, #4
 8005492:	6713      	str	r3, [r2, #112]	; 0x70
 8005494:	e01c      	b.n	80054d0 <HAL_RCC_OscConfig+0x5e0>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	2b05      	cmp	r3, #5
 800549c:	d10c      	bne.n	80054b8 <HAL_RCC_OscConfig+0x5c8>
 800549e:	4b6f      	ldr	r3, [pc, #444]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 80054a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a2:	4a6e      	ldr	r2, [pc, #440]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 80054a4:	f043 0304 	orr.w	r3, r3, #4
 80054a8:	6713      	str	r3, [r2, #112]	; 0x70
 80054aa:	4b6c      	ldr	r3, [pc, #432]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 80054ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ae:	4a6b      	ldr	r2, [pc, #428]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 80054b0:	f043 0301 	orr.w	r3, r3, #1
 80054b4:	6713      	str	r3, [r2, #112]	; 0x70
 80054b6:	e00b      	b.n	80054d0 <HAL_RCC_OscConfig+0x5e0>
 80054b8:	4b68      	ldr	r3, [pc, #416]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 80054ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054bc:	4a67      	ldr	r2, [pc, #412]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 80054be:	f023 0301 	bic.w	r3, r3, #1
 80054c2:	6713      	str	r3, [r2, #112]	; 0x70
 80054c4:	4b65      	ldr	r3, [pc, #404]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 80054c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c8:	4a64      	ldr	r2, [pc, #400]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 80054ca:	f023 0304 	bic.w	r3, r3, #4
 80054ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d015      	beq.n	8005504 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d8:	f7fb fe36 	bl	8001148 <HAL_GetTick>
 80054dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054de:	e00a      	b.n	80054f6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054e0:	f7fb fe32 	bl	8001148 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e123      	b.n	800573e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054f6:	4b59      	ldr	r3, [pc, #356]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 80054f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0ee      	beq.n	80054e0 <HAL_RCC_OscConfig+0x5f0>
 8005502:	e014      	b.n	800552e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005504:	f7fb fe20 	bl	8001148 <HAL_GetTick>
 8005508:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800550a:	e00a      	b.n	8005522 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800550c:	f7fb fe1c 	bl	8001148 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	f241 3288 	movw	r2, #5000	; 0x1388
 800551a:	4293      	cmp	r3, r2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e10d      	b.n	800573e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005522:	4b4e      	ldr	r3, [pc, #312]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 8005524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1ee      	bne.n	800550c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 8102 	beq.w	800573c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005538:	4b48      	ldr	r3, [pc, #288]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005540:	2b18      	cmp	r3, #24
 8005542:	f000 80bd 	beq.w	80056c0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554a:	2b02      	cmp	r3, #2
 800554c:	f040 809e 	bne.w	800568c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005550:	4b42      	ldr	r3, [pc, #264]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a41      	ldr	r2, [pc, #260]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 8005556:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800555a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555c:	f7fb fdf4 	bl	8001148 <HAL_GetTick>
 8005560:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005562:	e008      	b.n	8005576 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005564:	f7fb fdf0 	bl	8001148 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e0e3      	b.n	800573e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005576:	4b39      	ldr	r3, [pc, #228]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1f0      	bne.n	8005564 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005582:	4b36      	ldr	r3, [pc, #216]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 8005584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005586:	4b37      	ldr	r3, [pc, #220]	; (8005664 <HAL_RCC_OscConfig+0x774>)
 8005588:	4013      	ands	r3, r2
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005592:	0112      	lsls	r2, r2, #4
 8005594:	430a      	orrs	r2, r1
 8005596:	4931      	ldr	r1, [pc, #196]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 8005598:	4313      	orrs	r3, r2
 800559a:	628b      	str	r3, [r1, #40]	; 0x28
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a0:	3b01      	subs	r3, #1
 80055a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055aa:	3b01      	subs	r3, #1
 80055ac:	025b      	lsls	r3, r3, #9
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	431a      	orrs	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	3b01      	subs	r3, #1
 80055b8:	041b      	lsls	r3, r3, #16
 80055ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80055be:	431a      	orrs	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c4:	3b01      	subs	r3, #1
 80055c6:	061b      	lsls	r3, r3, #24
 80055c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80055cc:	4923      	ldr	r1, [pc, #140]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80055d2:	4b22      	ldr	r3, [pc, #136]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 80055d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d6:	4a21      	ldr	r2, [pc, #132]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 80055d8:	f023 0301 	bic.w	r3, r3, #1
 80055dc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80055de:	4b1f      	ldr	r3, [pc, #124]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 80055e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055e2:	4b21      	ldr	r3, [pc, #132]	; (8005668 <HAL_RCC_OscConfig+0x778>)
 80055e4:	4013      	ands	r3, r2
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80055ea:	00d2      	lsls	r2, r2, #3
 80055ec:	491b      	ldr	r1, [pc, #108]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80055f2:	4b1a      	ldr	r3, [pc, #104]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 80055f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f6:	f023 020c 	bic.w	r2, r3, #12
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	4917      	ldr	r1, [pc, #92]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 8005600:	4313      	orrs	r3, r2
 8005602:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005604:	4b15      	ldr	r3, [pc, #84]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 8005606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005608:	f023 0202 	bic.w	r2, r3, #2
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005610:	4912      	ldr	r1, [pc, #72]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 8005612:	4313      	orrs	r3, r2
 8005614:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005616:	4b11      	ldr	r3, [pc, #68]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 8005618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561a:	4a10      	ldr	r2, [pc, #64]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 800561c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005620:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005622:	4b0e      	ldr	r3, [pc, #56]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 8005624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005626:	4a0d      	ldr	r2, [pc, #52]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 8005628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800562c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800562e:	4b0b      	ldr	r3, [pc, #44]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 8005630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005632:	4a0a      	ldr	r2, [pc, #40]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 8005634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005638:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800563a:	4b08      	ldr	r3, [pc, #32]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 800563c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563e:	4a07      	ldr	r2, [pc, #28]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 8005640:	f043 0301 	orr.w	r3, r3, #1
 8005644:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005646:	4b05      	ldr	r3, [pc, #20]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a04      	ldr	r2, [pc, #16]	; (800565c <HAL_RCC_OscConfig+0x76c>)
 800564c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005652:	f7fb fd79 	bl	8001148 <HAL_GetTick>
 8005656:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005658:	e011      	b.n	800567e <HAL_RCC_OscConfig+0x78e>
 800565a:	bf00      	nop
 800565c:	58024400 	.word	0x58024400
 8005660:	58024800 	.word	0x58024800
 8005664:	fffffc0c 	.word	0xfffffc0c
 8005668:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800566c:	f7fb fd6c 	bl	8001148 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b02      	cmp	r3, #2
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e05f      	b.n	800573e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800567e:	4b32      	ldr	r3, [pc, #200]	; (8005748 <HAL_RCC_OscConfig+0x858>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0f0      	beq.n	800566c <HAL_RCC_OscConfig+0x77c>
 800568a:	e057      	b.n	800573c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800568c:	4b2e      	ldr	r3, [pc, #184]	; (8005748 <HAL_RCC_OscConfig+0x858>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a2d      	ldr	r2, [pc, #180]	; (8005748 <HAL_RCC_OscConfig+0x858>)
 8005692:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005698:	f7fb fd56 	bl	8001148 <HAL_GetTick>
 800569c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800569e:	e008      	b.n	80056b2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056a0:	f7fb fd52 	bl	8001148 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e045      	b.n	800573e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056b2:	4b25      	ldr	r3, [pc, #148]	; (8005748 <HAL_RCC_OscConfig+0x858>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1f0      	bne.n	80056a0 <HAL_RCC_OscConfig+0x7b0>
 80056be:	e03d      	b.n	800573c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80056c0:	4b21      	ldr	r3, [pc, #132]	; (8005748 <HAL_RCC_OscConfig+0x858>)
 80056c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80056c6:	4b20      	ldr	r3, [pc, #128]	; (8005748 <HAL_RCC_OscConfig+0x858>)
 80056c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ca:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d031      	beq.n	8005738 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	f003 0203 	and.w	r2, r3, #3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056de:	429a      	cmp	r2, r3
 80056e0:	d12a      	bne.n	8005738 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	091b      	lsrs	r3, r3, #4
 80056e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d122      	bne.n	8005738 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80056fe:	429a      	cmp	r2, r3
 8005700:	d11a      	bne.n	8005738 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	0a5b      	lsrs	r3, r3, #9
 8005706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800570e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005710:	429a      	cmp	r2, r3
 8005712:	d111      	bne.n	8005738 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	0c1b      	lsrs	r3, r3, #16
 8005718:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005720:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005722:	429a      	cmp	r2, r3
 8005724:	d108      	bne.n	8005738 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	0e1b      	lsrs	r3, r3, #24
 800572a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005732:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005734:	429a      	cmp	r2, r3
 8005736:	d001      	beq.n	800573c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e000      	b.n	800573e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3730      	adds	r7, #48	; 0x30
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	58024400 	.word	0x58024400

0800574c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e19c      	b.n	8005a9a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005760:	4b8a      	ldr	r3, [pc, #552]	; (800598c <HAL_RCC_ClockConfig+0x240>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 030f 	and.w	r3, r3, #15
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d910      	bls.n	8005790 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800576e:	4b87      	ldr	r3, [pc, #540]	; (800598c <HAL_RCC_ClockConfig+0x240>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f023 020f 	bic.w	r2, r3, #15
 8005776:	4985      	ldr	r1, [pc, #532]	; (800598c <HAL_RCC_ClockConfig+0x240>)
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	4313      	orrs	r3, r2
 800577c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800577e:	4b83      	ldr	r3, [pc, #524]	; (800598c <HAL_RCC_ClockConfig+0x240>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 030f 	and.w	r3, r3, #15
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	429a      	cmp	r2, r3
 800578a:	d001      	beq.n	8005790 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e184      	b.n	8005a9a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0304 	and.w	r3, r3, #4
 8005798:	2b00      	cmp	r3, #0
 800579a:	d010      	beq.n	80057be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	691a      	ldr	r2, [r3, #16]
 80057a0:	4b7b      	ldr	r3, [pc, #492]	; (8005990 <HAL_RCC_ClockConfig+0x244>)
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d908      	bls.n	80057be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80057ac:	4b78      	ldr	r3, [pc, #480]	; (8005990 <HAL_RCC_ClockConfig+0x244>)
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	4975      	ldr	r1, [pc, #468]	; (8005990 <HAL_RCC_ClockConfig+0x244>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0308 	and.w	r3, r3, #8
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d010      	beq.n	80057ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	695a      	ldr	r2, [r3, #20]
 80057ce:	4b70      	ldr	r3, [pc, #448]	; (8005990 <HAL_RCC_ClockConfig+0x244>)
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d908      	bls.n	80057ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80057da:	4b6d      	ldr	r3, [pc, #436]	; (8005990 <HAL_RCC_ClockConfig+0x244>)
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	496a      	ldr	r1, [pc, #424]	; (8005990 <HAL_RCC_ClockConfig+0x244>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0310 	and.w	r3, r3, #16
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d010      	beq.n	800581a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	699a      	ldr	r2, [r3, #24]
 80057fc:	4b64      	ldr	r3, [pc, #400]	; (8005990 <HAL_RCC_ClockConfig+0x244>)
 80057fe:	69db      	ldr	r3, [r3, #28]
 8005800:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005804:	429a      	cmp	r2, r3
 8005806:	d908      	bls.n	800581a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005808:	4b61      	ldr	r3, [pc, #388]	; (8005990 <HAL_RCC_ClockConfig+0x244>)
 800580a:	69db      	ldr	r3, [r3, #28]
 800580c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	495e      	ldr	r1, [pc, #376]	; (8005990 <HAL_RCC_ClockConfig+0x244>)
 8005816:	4313      	orrs	r3, r2
 8005818:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0320 	and.w	r3, r3, #32
 8005822:	2b00      	cmp	r3, #0
 8005824:	d010      	beq.n	8005848 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	69da      	ldr	r2, [r3, #28]
 800582a:	4b59      	ldr	r3, [pc, #356]	; (8005990 <HAL_RCC_ClockConfig+0x244>)
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005832:	429a      	cmp	r2, r3
 8005834:	d908      	bls.n	8005848 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005836:	4b56      	ldr	r3, [pc, #344]	; (8005990 <HAL_RCC_ClockConfig+0x244>)
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	69db      	ldr	r3, [r3, #28]
 8005842:	4953      	ldr	r1, [pc, #332]	; (8005990 <HAL_RCC_ClockConfig+0x244>)
 8005844:	4313      	orrs	r3, r2
 8005846:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d010      	beq.n	8005876 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	68da      	ldr	r2, [r3, #12]
 8005858:	4b4d      	ldr	r3, [pc, #308]	; (8005990 <HAL_RCC_ClockConfig+0x244>)
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	f003 030f 	and.w	r3, r3, #15
 8005860:	429a      	cmp	r2, r3
 8005862:	d908      	bls.n	8005876 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005864:	4b4a      	ldr	r3, [pc, #296]	; (8005990 <HAL_RCC_ClockConfig+0x244>)
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	f023 020f 	bic.w	r2, r3, #15
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	4947      	ldr	r1, [pc, #284]	; (8005990 <HAL_RCC_ClockConfig+0x244>)
 8005872:	4313      	orrs	r3, r2
 8005874:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d055      	beq.n	800592e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005882:	4b43      	ldr	r3, [pc, #268]	; (8005990 <HAL_RCC_ClockConfig+0x244>)
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	4940      	ldr	r1, [pc, #256]	; (8005990 <HAL_RCC_ClockConfig+0x244>)
 8005890:	4313      	orrs	r3, r2
 8005892:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	2b02      	cmp	r3, #2
 800589a:	d107      	bne.n	80058ac <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800589c:	4b3c      	ldr	r3, [pc, #240]	; (8005990 <HAL_RCC_ClockConfig+0x244>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d121      	bne.n	80058ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e0f6      	b.n	8005a9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	2b03      	cmp	r3, #3
 80058b2:	d107      	bne.n	80058c4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058b4:	4b36      	ldr	r3, [pc, #216]	; (8005990 <HAL_RCC_ClockConfig+0x244>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d115      	bne.n	80058ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e0ea      	b.n	8005a9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d107      	bne.n	80058dc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80058cc:	4b30      	ldr	r3, [pc, #192]	; (8005990 <HAL_RCC_ClockConfig+0x244>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d109      	bne.n	80058ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e0de      	b.n	8005a9a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058dc:	4b2c      	ldr	r3, [pc, #176]	; (8005990 <HAL_RCC_ClockConfig+0x244>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0304 	and.w	r3, r3, #4
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e0d6      	b.n	8005a9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058ec:	4b28      	ldr	r3, [pc, #160]	; (8005990 <HAL_RCC_ClockConfig+0x244>)
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	f023 0207 	bic.w	r2, r3, #7
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	4925      	ldr	r1, [pc, #148]	; (8005990 <HAL_RCC_ClockConfig+0x244>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058fe:	f7fb fc23 	bl	8001148 <HAL_GetTick>
 8005902:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005904:	e00a      	b.n	800591c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005906:	f7fb fc1f 	bl	8001148 <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	f241 3288 	movw	r2, #5000	; 0x1388
 8005914:	4293      	cmp	r3, r2
 8005916:	d901      	bls.n	800591c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e0be      	b.n	8005a9a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800591c:	4b1c      	ldr	r3, [pc, #112]	; (8005990 <HAL_RCC_ClockConfig+0x244>)
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	429a      	cmp	r2, r3
 800592c:	d1eb      	bne.n	8005906 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d010      	beq.n	800595c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68da      	ldr	r2, [r3, #12]
 800593e:	4b14      	ldr	r3, [pc, #80]	; (8005990 <HAL_RCC_ClockConfig+0x244>)
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	f003 030f 	and.w	r3, r3, #15
 8005946:	429a      	cmp	r2, r3
 8005948:	d208      	bcs.n	800595c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800594a:	4b11      	ldr	r3, [pc, #68]	; (8005990 <HAL_RCC_ClockConfig+0x244>)
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	f023 020f 	bic.w	r2, r3, #15
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	490e      	ldr	r1, [pc, #56]	; (8005990 <HAL_RCC_ClockConfig+0x244>)
 8005958:	4313      	orrs	r3, r2
 800595a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800595c:	4b0b      	ldr	r3, [pc, #44]	; (800598c <HAL_RCC_ClockConfig+0x240>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 030f 	and.w	r3, r3, #15
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	429a      	cmp	r2, r3
 8005968:	d214      	bcs.n	8005994 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800596a:	4b08      	ldr	r3, [pc, #32]	; (800598c <HAL_RCC_ClockConfig+0x240>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f023 020f 	bic.w	r2, r3, #15
 8005972:	4906      	ldr	r1, [pc, #24]	; (800598c <HAL_RCC_ClockConfig+0x240>)
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	4313      	orrs	r3, r2
 8005978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800597a:	4b04      	ldr	r3, [pc, #16]	; (800598c <HAL_RCC_ClockConfig+0x240>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 030f 	and.w	r3, r3, #15
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	429a      	cmp	r2, r3
 8005986:	d005      	beq.n	8005994 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e086      	b.n	8005a9a <HAL_RCC_ClockConfig+0x34e>
 800598c:	52002000 	.word	0x52002000
 8005990:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0304 	and.w	r3, r3, #4
 800599c:	2b00      	cmp	r3, #0
 800599e:	d010      	beq.n	80059c2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	691a      	ldr	r2, [r3, #16]
 80059a4:	4b3f      	ldr	r3, [pc, #252]	; (8005aa4 <HAL_RCC_ClockConfig+0x358>)
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d208      	bcs.n	80059c2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80059b0:	4b3c      	ldr	r3, [pc, #240]	; (8005aa4 <HAL_RCC_ClockConfig+0x358>)
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	4939      	ldr	r1, [pc, #228]	; (8005aa4 <HAL_RCC_ClockConfig+0x358>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0308 	and.w	r3, r3, #8
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d010      	beq.n	80059f0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	695a      	ldr	r2, [r3, #20]
 80059d2:	4b34      	ldr	r3, [pc, #208]	; (8005aa4 <HAL_RCC_ClockConfig+0x358>)
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059da:	429a      	cmp	r2, r3
 80059dc:	d208      	bcs.n	80059f0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80059de:	4b31      	ldr	r3, [pc, #196]	; (8005aa4 <HAL_RCC_ClockConfig+0x358>)
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	492e      	ldr	r1, [pc, #184]	; (8005aa4 <HAL_RCC_ClockConfig+0x358>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0310 	and.w	r3, r3, #16
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d010      	beq.n	8005a1e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	699a      	ldr	r2, [r3, #24]
 8005a00:	4b28      	ldr	r3, [pc, #160]	; (8005aa4 <HAL_RCC_ClockConfig+0x358>)
 8005a02:	69db      	ldr	r3, [r3, #28]
 8005a04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d208      	bcs.n	8005a1e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a0c:	4b25      	ldr	r3, [pc, #148]	; (8005aa4 <HAL_RCC_ClockConfig+0x358>)
 8005a0e:	69db      	ldr	r3, [r3, #28]
 8005a10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	4922      	ldr	r1, [pc, #136]	; (8005aa4 <HAL_RCC_ClockConfig+0x358>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0320 	and.w	r3, r3, #32
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d010      	beq.n	8005a4c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	69da      	ldr	r2, [r3, #28]
 8005a2e:	4b1d      	ldr	r3, [pc, #116]	; (8005aa4 <HAL_RCC_ClockConfig+0x358>)
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d208      	bcs.n	8005a4c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005a3a:	4b1a      	ldr	r3, [pc, #104]	; (8005aa4 <HAL_RCC_ClockConfig+0x358>)
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	4917      	ldr	r1, [pc, #92]	; (8005aa4 <HAL_RCC_ClockConfig+0x358>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005a4c:	f000 f834 	bl	8005ab8 <HAL_RCC_GetSysClockFreq>
 8005a50:	4602      	mov	r2, r0
 8005a52:	4b14      	ldr	r3, [pc, #80]	; (8005aa4 <HAL_RCC_ClockConfig+0x358>)
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	0a1b      	lsrs	r3, r3, #8
 8005a58:	f003 030f 	and.w	r3, r3, #15
 8005a5c:	4912      	ldr	r1, [pc, #72]	; (8005aa8 <HAL_RCC_ClockConfig+0x35c>)
 8005a5e:	5ccb      	ldrb	r3, [r1, r3]
 8005a60:	f003 031f 	and.w	r3, r3, #31
 8005a64:	fa22 f303 	lsr.w	r3, r2, r3
 8005a68:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a6a:	4b0e      	ldr	r3, [pc, #56]	; (8005aa4 <HAL_RCC_ClockConfig+0x358>)
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	f003 030f 	and.w	r3, r3, #15
 8005a72:	4a0d      	ldr	r2, [pc, #52]	; (8005aa8 <HAL_RCC_ClockConfig+0x35c>)
 8005a74:	5cd3      	ldrb	r3, [r2, r3]
 8005a76:	f003 031f 	and.w	r3, r3, #31
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a80:	4a0a      	ldr	r2, [pc, #40]	; (8005aac <HAL_RCC_ClockConfig+0x360>)
 8005a82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a84:	4a0a      	ldr	r2, [pc, #40]	; (8005ab0 <HAL_RCC_ClockConfig+0x364>)
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005a8a:	4b0a      	ldr	r3, [pc, #40]	; (8005ab4 <HAL_RCC_ClockConfig+0x368>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fb f8ac 	bl	8000bec <HAL_InitTick>
 8005a94:	4603      	mov	r3, r0
 8005a96:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3718      	adds	r7, #24
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	58024400 	.word	0x58024400
 8005aa8:	08025d1c 	.word	0x08025d1c
 8005aac:	24000004 	.word	0x24000004
 8005ab0:	24000000 	.word	0x24000000
 8005ab4:	24000008 	.word	0x24000008

08005ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b089      	sub	sp, #36	; 0x24
 8005abc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005abe:	4bb3      	ldr	r3, [pc, #716]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ac6:	2b18      	cmp	r3, #24
 8005ac8:	f200 8155 	bhi.w	8005d76 <HAL_RCC_GetSysClockFreq+0x2be>
 8005acc:	a201      	add	r2, pc, #4	; (adr r2, 8005ad4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad2:	bf00      	nop
 8005ad4:	08005b39 	.word	0x08005b39
 8005ad8:	08005d77 	.word	0x08005d77
 8005adc:	08005d77 	.word	0x08005d77
 8005ae0:	08005d77 	.word	0x08005d77
 8005ae4:	08005d77 	.word	0x08005d77
 8005ae8:	08005d77 	.word	0x08005d77
 8005aec:	08005d77 	.word	0x08005d77
 8005af0:	08005d77 	.word	0x08005d77
 8005af4:	08005b5f 	.word	0x08005b5f
 8005af8:	08005d77 	.word	0x08005d77
 8005afc:	08005d77 	.word	0x08005d77
 8005b00:	08005d77 	.word	0x08005d77
 8005b04:	08005d77 	.word	0x08005d77
 8005b08:	08005d77 	.word	0x08005d77
 8005b0c:	08005d77 	.word	0x08005d77
 8005b10:	08005d77 	.word	0x08005d77
 8005b14:	08005b65 	.word	0x08005b65
 8005b18:	08005d77 	.word	0x08005d77
 8005b1c:	08005d77 	.word	0x08005d77
 8005b20:	08005d77 	.word	0x08005d77
 8005b24:	08005d77 	.word	0x08005d77
 8005b28:	08005d77 	.word	0x08005d77
 8005b2c:	08005d77 	.word	0x08005d77
 8005b30:	08005d77 	.word	0x08005d77
 8005b34:	08005b6b 	.word	0x08005b6b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b38:	4b94      	ldr	r3, [pc, #592]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0320 	and.w	r3, r3, #32
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d009      	beq.n	8005b58 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b44:	4b91      	ldr	r3, [pc, #580]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	08db      	lsrs	r3, r3, #3
 8005b4a:	f003 0303 	and.w	r3, r3, #3
 8005b4e:	4a90      	ldr	r2, [pc, #576]	; (8005d90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b50:	fa22 f303 	lsr.w	r3, r2, r3
 8005b54:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005b56:	e111      	b.n	8005d7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005b58:	4b8d      	ldr	r3, [pc, #564]	; (8005d90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b5a:	61bb      	str	r3, [r7, #24]
    break;
 8005b5c:	e10e      	b.n	8005d7c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005b5e:	4b8d      	ldr	r3, [pc, #564]	; (8005d94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b60:	61bb      	str	r3, [r7, #24]
    break;
 8005b62:	e10b      	b.n	8005d7c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005b64:	4b8c      	ldr	r3, [pc, #560]	; (8005d98 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005b66:	61bb      	str	r3, [r7, #24]
    break;
 8005b68:	e108      	b.n	8005d7c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b6a:	4b88      	ldr	r3, [pc, #544]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6e:	f003 0303 	and.w	r3, r3, #3
 8005b72:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005b74:	4b85      	ldr	r3, [pc, #532]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b78:	091b      	lsrs	r3, r3, #4
 8005b7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b7e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005b80:	4b82      	ldr	r3, [pc, #520]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005b8a:	4b80      	ldr	r3, [pc, #512]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b8e:	08db      	lsrs	r3, r3, #3
 8005b90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	fb02 f303 	mul.w	r3, r2, r3
 8005b9a:	ee07 3a90 	vmov	s15, r3
 8005b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ba2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f000 80e1 	beq.w	8005d70 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	f000 8083 	beq.w	8005cbc <HAL_RCC_GetSysClockFreq+0x204>
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	f200 80a1 	bhi.w	8005d00 <HAL_RCC_GetSysClockFreq+0x248>
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d003      	beq.n	8005bcc <HAL_RCC_GetSysClockFreq+0x114>
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d056      	beq.n	8005c78 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005bca:	e099      	b.n	8005d00 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bcc:	4b6f      	ldr	r3, [pc, #444]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0320 	and.w	r3, r3, #32
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d02d      	beq.n	8005c34 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005bd8:	4b6c      	ldr	r3, [pc, #432]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	08db      	lsrs	r3, r3, #3
 8005bde:	f003 0303 	and.w	r3, r3, #3
 8005be2:	4a6b      	ldr	r2, [pc, #428]	; (8005d90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005be4:	fa22 f303 	lsr.w	r3, r2, r3
 8005be8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	ee07 3a90 	vmov	s15, r3
 8005bf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	ee07 3a90 	vmov	s15, r3
 8005bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c02:	4b62      	ldr	r3, [pc, #392]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c0a:	ee07 3a90 	vmov	s15, r3
 8005c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c12:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c16:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005d9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005c32:	e087      	b.n	8005d44 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	ee07 3a90 	vmov	s15, r3
 8005c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c3e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005da0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c46:	4b51      	ldr	r3, [pc, #324]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c4e:	ee07 3a90 	vmov	s15, r3
 8005c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c56:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c5a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005d9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c76:	e065      	b.n	8005d44 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	ee07 3a90 	vmov	s15, r3
 8005c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c82:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005da4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c8a:	4b40      	ldr	r3, [pc, #256]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c92:	ee07 3a90 	vmov	s15, r3
 8005c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c9e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005d9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005caa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cba:	e043      	b.n	8005d44 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	ee07 3a90 	vmov	s15, r3
 8005cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cc6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005da8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cce:	4b2f      	ldr	r3, [pc, #188]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cd6:	ee07 3a90 	vmov	s15, r3
 8005cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cde:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ce2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005d9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cfe:	e021      	b.n	8005d44 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	ee07 3a90 	vmov	s15, r3
 8005d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d0a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005da4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d12:	4b1e      	ldr	r3, [pc, #120]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d1a:	ee07 3a90 	vmov	s15, r3
 8005d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d22:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d26:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005d9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d42:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005d44:	4b11      	ldr	r3, [pc, #68]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d48:	0a5b      	lsrs	r3, r3, #9
 8005d4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d4e:	3301      	adds	r3, #1
 8005d50:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	ee07 3a90 	vmov	s15, r3
 8005d58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d68:	ee17 3a90 	vmov	r3, s15
 8005d6c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005d6e:	e005      	b.n	8005d7c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005d70:	2300      	movs	r3, #0
 8005d72:	61bb      	str	r3, [r7, #24]
    break;
 8005d74:	e002      	b.n	8005d7c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005d76:	4b07      	ldr	r3, [pc, #28]	; (8005d94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d78:	61bb      	str	r3, [r7, #24]
    break;
 8005d7a:	bf00      	nop
  }

  return sysclockfreq;
 8005d7c:	69bb      	ldr	r3, [r7, #24]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3724      	adds	r7, #36	; 0x24
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	58024400 	.word	0x58024400
 8005d90:	03d09000 	.word	0x03d09000
 8005d94:	003d0900 	.word	0x003d0900
 8005d98:	017d7840 	.word	0x017d7840
 8005d9c:	46000000 	.word	0x46000000
 8005da0:	4c742400 	.word	0x4c742400
 8005da4:	4a742400 	.word	0x4a742400
 8005da8:	4bbebc20 	.word	0x4bbebc20

08005dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005db2:	f7ff fe81 	bl	8005ab8 <HAL_RCC_GetSysClockFreq>
 8005db6:	4602      	mov	r2, r0
 8005db8:	4b10      	ldr	r3, [pc, #64]	; (8005dfc <HAL_RCC_GetHCLKFreq+0x50>)
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	0a1b      	lsrs	r3, r3, #8
 8005dbe:	f003 030f 	and.w	r3, r3, #15
 8005dc2:	490f      	ldr	r1, [pc, #60]	; (8005e00 <HAL_RCC_GetHCLKFreq+0x54>)
 8005dc4:	5ccb      	ldrb	r3, [r1, r3]
 8005dc6:	f003 031f 	and.w	r3, r3, #31
 8005dca:	fa22 f303 	lsr.w	r3, r2, r3
 8005dce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005dd0:	4b0a      	ldr	r3, [pc, #40]	; (8005dfc <HAL_RCC_GetHCLKFreq+0x50>)
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	f003 030f 	and.w	r3, r3, #15
 8005dd8:	4a09      	ldr	r2, [pc, #36]	; (8005e00 <HAL_RCC_GetHCLKFreq+0x54>)
 8005dda:	5cd3      	ldrb	r3, [r2, r3]
 8005ddc:	f003 031f 	and.w	r3, r3, #31
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	fa22 f303 	lsr.w	r3, r2, r3
 8005de6:	4a07      	ldr	r2, [pc, #28]	; (8005e04 <HAL_RCC_GetHCLKFreq+0x58>)
 8005de8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005dea:	4a07      	ldr	r2, [pc, #28]	; (8005e08 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005df0:	4b04      	ldr	r3, [pc, #16]	; (8005e04 <HAL_RCC_GetHCLKFreq+0x58>)
 8005df2:	681b      	ldr	r3, [r3, #0]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3708      	adds	r7, #8
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	58024400 	.word	0x58024400
 8005e00:	08025d1c 	.word	0x08025d1c
 8005e04:	24000004 	.word	0x24000004
 8005e08:	24000000 	.word	0x24000000

08005e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005e10:	f7ff ffcc 	bl	8005dac <HAL_RCC_GetHCLKFreq>
 8005e14:	4602      	mov	r2, r0
 8005e16:	4b06      	ldr	r3, [pc, #24]	; (8005e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	091b      	lsrs	r3, r3, #4
 8005e1c:	f003 0307 	and.w	r3, r3, #7
 8005e20:	4904      	ldr	r1, [pc, #16]	; (8005e34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e22:	5ccb      	ldrb	r3, [r1, r3]
 8005e24:	f003 031f 	and.w	r3, r3, #31
 8005e28:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	58024400 	.word	0x58024400
 8005e34:	08025d1c 	.word	0x08025d1c

08005e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005e3c:	f7ff ffb6 	bl	8005dac <HAL_RCC_GetHCLKFreq>
 8005e40:	4602      	mov	r2, r0
 8005e42:	4b06      	ldr	r3, [pc, #24]	; (8005e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	0a1b      	lsrs	r3, r3, #8
 8005e48:	f003 0307 	and.w	r3, r3, #7
 8005e4c:	4904      	ldr	r1, [pc, #16]	; (8005e60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e4e:	5ccb      	ldrb	r3, [r1, r3]
 8005e50:	f003 031f 	and.w	r3, r3, #31
 8005e54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	58024400 	.word	0x58024400
 8005e60:	08025d1c 	.word	0x08025d1c

08005e64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	223f      	movs	r2, #63	; 0x3f
 8005e72:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005e74:	4b1a      	ldr	r3, [pc, #104]	; (8005ee0 <HAL_RCC_GetClockConfig+0x7c>)
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	f003 0207 	and.w	r2, r3, #7
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005e80:	4b17      	ldr	r3, [pc, #92]	; (8005ee0 <HAL_RCC_GetClockConfig+0x7c>)
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005e8c:	4b14      	ldr	r3, [pc, #80]	; (8005ee0 <HAL_RCC_GetClockConfig+0x7c>)
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	f003 020f 	and.w	r2, r3, #15
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005e98:	4b11      	ldr	r3, [pc, #68]	; (8005ee0 <HAL_RCC_GetClockConfig+0x7c>)
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005ea4:	4b0e      	ldr	r3, [pc, #56]	; (8005ee0 <HAL_RCC_GetClockConfig+0x7c>)
 8005ea6:	69db      	ldr	r3, [r3, #28]
 8005ea8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005eb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ee0 <HAL_RCC_GetClockConfig+0x7c>)
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005ebc:	4b08      	ldr	r3, [pc, #32]	; (8005ee0 <HAL_RCC_GetClockConfig+0x7c>)
 8005ebe:	6a1b      	ldr	r3, [r3, #32]
 8005ec0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005ec8:	4b06      	ldr	r3, [pc, #24]	; (8005ee4 <HAL_RCC_GetClockConfig+0x80>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 020f 	and.w	r2, r3, #15
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	601a      	str	r2, [r3, #0]
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr
 8005ee0:	58024400 	.word	0x58024400
 8005ee4:	52002000 	.word	0x52002000

08005ee8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d03f      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f0c:	d02a      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005f0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f12:	d824      	bhi.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005f14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f18:	d018      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005f1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f1e:	d81e      	bhi.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d003      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005f24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f28:	d007      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005f2a:	e018      	b.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f2c:	4ba3      	ldr	r3, [pc, #652]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f30:	4aa2      	ldr	r2, [pc, #648]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005f38:	e015      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	3304      	adds	r3, #4
 8005f3e:	2102      	movs	r1, #2
 8005f40:	4618      	mov	r0, r3
 8005f42:	f002 f821 	bl	8007f88 <RCCEx_PLL2_Config>
 8005f46:	4603      	mov	r3, r0
 8005f48:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005f4a:	e00c      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	3324      	adds	r3, #36	; 0x24
 8005f50:	2102      	movs	r1, #2
 8005f52:	4618      	mov	r0, r3
 8005f54:	f002 f8ca 	bl	80080ec <RCCEx_PLL3_Config>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005f5c:	e003      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	75fb      	strb	r3, [r7, #23]
      break;
 8005f62:	e000      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005f64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f66:	7dfb      	ldrb	r3, [r7, #23]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d109      	bne.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005f6c:	4b93      	ldr	r3, [pc, #588]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f78:	4990      	ldr	r1, [pc, #576]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	650b      	str	r3, [r1, #80]	; 0x50
 8005f7e:	e001      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f80:	7dfb      	ldrb	r3, [r7, #23]
 8005f82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d03d      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f94:	2b04      	cmp	r3, #4
 8005f96:	d826      	bhi.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005f98:	a201      	add	r2, pc, #4	; (adr r2, 8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9e:	bf00      	nop
 8005fa0:	08005fb5 	.word	0x08005fb5
 8005fa4:	08005fc3 	.word	0x08005fc3
 8005fa8:	08005fd5 	.word	0x08005fd5
 8005fac:	08005fed 	.word	0x08005fed
 8005fb0:	08005fed 	.word	0x08005fed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fb4:	4b81      	ldr	r3, [pc, #516]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb8:	4a80      	ldr	r2, [pc, #512]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005fc0:	e015      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f001 ffdd 	bl	8007f88 <RCCEx_PLL2_Config>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005fd2:	e00c      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	3324      	adds	r3, #36	; 0x24
 8005fd8:	2100      	movs	r1, #0
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f002 f886 	bl	80080ec <RCCEx_PLL3_Config>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005fe4:	e003      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	75fb      	strb	r3, [r7, #23]
      break;
 8005fea:	e000      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005fec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fee:	7dfb      	ldrb	r3, [r7, #23]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d109      	bne.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ff4:	4b71      	ldr	r3, [pc, #452]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ff8:	f023 0207 	bic.w	r2, r3, #7
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006000:	496e      	ldr	r1, [pc, #440]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006002:	4313      	orrs	r3, r2
 8006004:	650b      	str	r3, [r1, #80]	; 0x50
 8006006:	e001      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006008:	7dfb      	ldrb	r3, [r7, #23]
 800600a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006014:	2b00      	cmp	r3, #0
 8006016:	d042      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800601c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006020:	d02b      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006026:	d825      	bhi.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006028:	2bc0      	cmp	r3, #192	; 0xc0
 800602a:	d028      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800602c:	2bc0      	cmp	r3, #192	; 0xc0
 800602e:	d821      	bhi.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006030:	2b80      	cmp	r3, #128	; 0x80
 8006032:	d016      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006034:	2b80      	cmp	r3, #128	; 0x80
 8006036:	d81d      	bhi.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006038:	2b00      	cmp	r3, #0
 800603a:	d002      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800603c:	2b40      	cmp	r3, #64	; 0x40
 800603e:	d007      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006040:	e018      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006042:	4b5e      	ldr	r3, [pc, #376]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006046:	4a5d      	ldr	r2, [pc, #372]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800604c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800604e:	e017      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	3304      	adds	r3, #4
 8006054:	2100      	movs	r1, #0
 8006056:	4618      	mov	r0, r3
 8006058:	f001 ff96 	bl	8007f88 <RCCEx_PLL2_Config>
 800605c:	4603      	mov	r3, r0
 800605e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006060:	e00e      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	3324      	adds	r3, #36	; 0x24
 8006066:	2100      	movs	r1, #0
 8006068:	4618      	mov	r0, r3
 800606a:	f002 f83f 	bl	80080ec <RCCEx_PLL3_Config>
 800606e:	4603      	mov	r3, r0
 8006070:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006072:	e005      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	75fb      	strb	r3, [r7, #23]
      break;
 8006078:	e002      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800607a:	bf00      	nop
 800607c:	e000      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800607e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006080:	7dfb      	ldrb	r3, [r7, #23]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d109      	bne.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006086:	4b4d      	ldr	r3, [pc, #308]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800608a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006092:	494a      	ldr	r1, [pc, #296]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006094:	4313      	orrs	r3, r2
 8006096:	650b      	str	r3, [r1, #80]	; 0x50
 8006098:	e001      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800609a:	7dfb      	ldrb	r3, [r7, #23]
 800609c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d049      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80060b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060b4:	d030      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80060b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060ba:	d82a      	bhi.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80060bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80060c0:	d02c      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80060c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80060c6:	d824      	bhi.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80060c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060cc:	d018      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80060ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060d2:	d81e      	bhi.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d003      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80060d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060dc:	d007      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x206>
 80060de:	e018      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060e0:	4b36      	ldr	r3, [pc, #216]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80060e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e4:	4a35      	ldr	r2, [pc, #212]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80060e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80060ec:	e017      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	3304      	adds	r3, #4
 80060f2:	2100      	movs	r1, #0
 80060f4:	4618      	mov	r0, r3
 80060f6:	f001 ff47 	bl	8007f88 <RCCEx_PLL2_Config>
 80060fa:	4603      	mov	r3, r0
 80060fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80060fe:	e00e      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	3324      	adds	r3, #36	; 0x24
 8006104:	2100      	movs	r1, #0
 8006106:	4618      	mov	r0, r3
 8006108:	f001 fff0 	bl	80080ec <RCCEx_PLL3_Config>
 800610c:	4603      	mov	r3, r0
 800610e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006110:	e005      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	75fb      	strb	r3, [r7, #23]
      break;
 8006116:	e002      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006118:	bf00      	nop
 800611a:	e000      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800611c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800611e:	7dfb      	ldrb	r3, [r7, #23]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10a      	bne.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006124:	4b25      	ldr	r3, [pc, #148]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006128:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006132:	4922      	ldr	r1, [pc, #136]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006134:	4313      	orrs	r3, r2
 8006136:	658b      	str	r3, [r1, #88]	; 0x58
 8006138:	e001      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800613a:	7dfb      	ldrb	r3, [r7, #23]
 800613c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006146:	2b00      	cmp	r3, #0
 8006148:	d04b      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006150:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006154:	d030      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006156:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800615a:	d82a      	bhi.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800615c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006160:	d02e      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006162:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006166:	d824      	bhi.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006168:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800616c:	d018      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800616e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006172:	d81e      	bhi.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006174:	2b00      	cmp	r3, #0
 8006176:	d003      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006178:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800617c:	d007      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800617e:	e018      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006180:	4b0e      	ldr	r3, [pc, #56]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006184:	4a0d      	ldr	r2, [pc, #52]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800618a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800618c:	e019      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	3304      	adds	r3, #4
 8006192:	2100      	movs	r1, #0
 8006194:	4618      	mov	r0, r3
 8006196:	f001 fef7 	bl	8007f88 <RCCEx_PLL2_Config>
 800619a:	4603      	mov	r3, r0
 800619c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800619e:	e010      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	3324      	adds	r3, #36	; 0x24
 80061a4:	2100      	movs	r1, #0
 80061a6:	4618      	mov	r0, r3
 80061a8:	f001 ffa0 	bl	80080ec <RCCEx_PLL3_Config>
 80061ac:	4603      	mov	r3, r0
 80061ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80061b0:	e007      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	75fb      	strb	r3, [r7, #23]
      break;
 80061b6:	e004      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80061b8:	bf00      	nop
 80061ba:	e002      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80061bc:	58024400 	.word	0x58024400
      break;
 80061c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061c2:	7dfb      	ldrb	r3, [r7, #23]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10a      	bne.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80061c8:	4b99      	ldr	r3, [pc, #612]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80061ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061cc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80061d6:	4996      	ldr	r1, [pc, #600]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80061d8:	4313      	orrs	r3, r2
 80061da:	658b      	str	r3, [r1, #88]	; 0x58
 80061dc:	e001      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061de:	7dfb      	ldrb	r3, [r7, #23]
 80061e0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d032      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061f2:	2b30      	cmp	r3, #48	; 0x30
 80061f4:	d01c      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80061f6:	2b30      	cmp	r3, #48	; 0x30
 80061f8:	d817      	bhi.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x342>
 80061fa:	2b20      	cmp	r3, #32
 80061fc:	d00c      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80061fe:	2b20      	cmp	r3, #32
 8006200:	d813      	bhi.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006202:	2b00      	cmp	r3, #0
 8006204:	d016      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006206:	2b10      	cmp	r3, #16
 8006208:	d10f      	bne.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800620a:	4b89      	ldr	r3, [pc, #548]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800620c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620e:	4a88      	ldr	r2, [pc, #544]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006214:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006216:	e00e      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	3304      	adds	r3, #4
 800621c:	2102      	movs	r1, #2
 800621e:	4618      	mov	r0, r3
 8006220:	f001 feb2 	bl	8007f88 <RCCEx_PLL2_Config>
 8006224:	4603      	mov	r3, r0
 8006226:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006228:	e005      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	75fb      	strb	r3, [r7, #23]
      break;
 800622e:	e002      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006230:	bf00      	nop
 8006232:	e000      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006234:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006236:	7dfb      	ldrb	r3, [r7, #23]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d109      	bne.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800623c:	4b7c      	ldr	r3, [pc, #496]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800623e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006240:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006248:	4979      	ldr	r1, [pc, #484]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800624a:	4313      	orrs	r3, r2
 800624c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800624e:	e001      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006250:	7dfb      	ldrb	r3, [r7, #23]
 8006252:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d047      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006264:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006268:	d030      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800626a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800626e:	d82a      	bhi.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006270:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006274:	d02c      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006276:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800627a:	d824      	bhi.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800627c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006280:	d018      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006286:	d81e      	bhi.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800628c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006290:	d007      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8006292:	e018      	b.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006294:	4b66      	ldr	r3, [pc, #408]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006298:	4a65      	ldr	r2, [pc, #404]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800629a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800629e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80062a0:	e017      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	3304      	adds	r3, #4
 80062a6:	2100      	movs	r1, #0
 80062a8:	4618      	mov	r0, r3
 80062aa:	f001 fe6d 	bl	8007f88 <RCCEx_PLL2_Config>
 80062ae:	4603      	mov	r3, r0
 80062b0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80062b2:	e00e      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	3324      	adds	r3, #36	; 0x24
 80062b8:	2100      	movs	r1, #0
 80062ba:	4618      	mov	r0, r3
 80062bc:	f001 ff16 	bl	80080ec <RCCEx_PLL3_Config>
 80062c0:	4603      	mov	r3, r0
 80062c2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80062c4:	e005      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	75fb      	strb	r3, [r7, #23]
      break;
 80062ca:	e002      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80062cc:	bf00      	nop
 80062ce:	e000      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80062d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062d2:	7dfb      	ldrb	r3, [r7, #23]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d109      	bne.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80062d8:	4b55      	ldr	r3, [pc, #340]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80062da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062dc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062e4:	4952      	ldr	r1, [pc, #328]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	650b      	str	r3, [r1, #80]	; 0x50
 80062ea:	e001      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ec:	7dfb      	ldrb	r3, [r7, #23]
 80062ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d049      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006304:	d02e      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006306:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800630a:	d828      	bhi.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800630c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006310:	d02a      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8006312:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006316:	d822      	bhi.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006318:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800631c:	d026      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800631e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006322:	d81c      	bhi.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006324:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006328:	d010      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800632a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800632e:	d816      	bhi.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006330:	2b00      	cmp	r3, #0
 8006332:	d01d      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8006334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006338:	d111      	bne.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	3304      	adds	r3, #4
 800633e:	2101      	movs	r1, #1
 8006340:	4618      	mov	r0, r3
 8006342:	f001 fe21 	bl	8007f88 <RCCEx_PLL2_Config>
 8006346:	4603      	mov	r3, r0
 8006348:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800634a:	e012      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	3324      	adds	r3, #36	; 0x24
 8006350:	2101      	movs	r1, #1
 8006352:	4618      	mov	r0, r3
 8006354:	f001 feca 	bl	80080ec <RCCEx_PLL3_Config>
 8006358:	4603      	mov	r3, r0
 800635a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800635c:	e009      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	75fb      	strb	r3, [r7, #23]
      break;
 8006362:	e006      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006364:	bf00      	nop
 8006366:	e004      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006368:	bf00      	nop
 800636a:	e002      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800636c:	bf00      	nop
 800636e:	e000      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006370:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006372:	7dfb      	ldrb	r3, [r7, #23]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d109      	bne.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006378:	4b2d      	ldr	r3, [pc, #180]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800637a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800637c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006384:	492a      	ldr	r1, [pc, #168]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006386:	4313      	orrs	r3, r2
 8006388:	650b      	str	r3, [r1, #80]	; 0x50
 800638a:	e001      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800638c:	7dfb      	ldrb	r3, [r7, #23]
 800638e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d04d      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80063a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063a6:	d02e      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80063a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063ac:	d828      	bhi.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80063ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063b2:	d02a      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80063b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063b8:	d822      	bhi.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80063ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80063be:	d026      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x526>
 80063c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80063c4:	d81c      	bhi.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80063c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063ca:	d010      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x506>
 80063cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063d0:	d816      	bhi.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d01d      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80063d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063da:	d111      	bne.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	3304      	adds	r3, #4
 80063e0:	2101      	movs	r1, #1
 80063e2:	4618      	mov	r0, r3
 80063e4:	f001 fdd0 	bl	8007f88 <RCCEx_PLL2_Config>
 80063e8:	4603      	mov	r3, r0
 80063ea:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80063ec:	e012      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	3324      	adds	r3, #36	; 0x24
 80063f2:	2101      	movs	r1, #1
 80063f4:	4618      	mov	r0, r3
 80063f6:	f001 fe79 	bl	80080ec <RCCEx_PLL3_Config>
 80063fa:	4603      	mov	r3, r0
 80063fc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80063fe:	e009      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	75fb      	strb	r3, [r7, #23]
      break;
 8006404:	e006      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006406:	bf00      	nop
 8006408:	e004      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800640a:	bf00      	nop
 800640c:	e002      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800640e:	bf00      	nop
 8006410:	e000      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006412:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006414:	7dfb      	ldrb	r3, [r7, #23]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10c      	bne.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800641a:	4b05      	ldr	r3, [pc, #20]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800641c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800641e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006428:	4901      	ldr	r1, [pc, #4]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800642a:	4313      	orrs	r3, r2
 800642c:	658b      	str	r3, [r1, #88]	; 0x58
 800642e:	e003      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006430:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006434:	7dfb      	ldrb	r3, [r7, #23]
 8006436:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d022      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00e      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800644c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006450:	d108      	bne.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	3304      	adds	r3, #4
 8006456:	2101      	movs	r1, #1
 8006458:	4618      	mov	r0, r3
 800645a:	f001 fd95 	bl	8007f88 <RCCEx_PLL2_Config>
 800645e:	4603      	mov	r3, r0
 8006460:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8006462:	e003      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x584>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	75fb      	strb	r3, [r7, #23]
      break;
 8006468:	e000      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x584>
      break;
 800646a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800646c:	7dfb      	ldrb	r3, [r7, #23]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d109      	bne.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x59e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8006472:	4b82      	ldr	r3, [pc, #520]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8006474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006476:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800647e:	497f      	ldr	r1, [pc, #508]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8006480:	4313      	orrs	r3, r2
 8006482:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006484:	e001      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006486:	7dfb      	ldrb	r3, [r7, #23]
 8006488:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d02f      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x60e>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800649a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800649e:	d00e      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 80064a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064a4:	d814      	bhi.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d015      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 80064aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064ae:	d10f      	bne.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064b0:	4b72      	ldr	r3, [pc, #456]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80064b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b4:	4a71      	ldr	r2, [pc, #452]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80064b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80064bc:	e00c      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	3304      	adds	r3, #4
 80064c2:	2101      	movs	r1, #1
 80064c4:	4618      	mov	r0, r3
 80064c6:	f001 fd5f 	bl	8007f88 <RCCEx_PLL2_Config>
 80064ca:	4603      	mov	r3, r0
 80064cc:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80064ce:	e003      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	75fb      	strb	r3, [r7, #23]
      break;
 80064d4:	e000      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      break;
 80064d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064d8:	7dfb      	ldrb	r3, [r7, #23]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d109      	bne.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x60a>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80064de:	4b67      	ldr	r3, [pc, #412]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80064e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ea:	4964      	ldr	r1, [pc, #400]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80064ec:	4313      	orrs	r3, r2
 80064ee:	650b      	str	r3, [r1, #80]	; 0x50
 80064f0:	e001      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x60e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064f2:	7dfb      	ldrb	r3, [r7, #23]
 80064f4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d031      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x67e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006506:	2b03      	cmp	r3, #3
 8006508:	d81a      	bhi.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x658>
 800650a:	a201      	add	r2, pc, #4	; (adr r2, 8006510 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 800650c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006510:	08006547 	.word	0x08006547
 8006514:	08006521 	.word	0x08006521
 8006518:	0800652f 	.word	0x0800652f
 800651c:	08006547 	.word	0x08006547
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006520:	4b56      	ldr	r3, [pc, #344]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8006522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006524:	4a55      	ldr	r2, [pc, #340]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8006526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800652a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800652c:	e00c      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x660>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	3304      	adds	r3, #4
 8006532:	2102      	movs	r1, #2
 8006534:	4618      	mov	r0, r3
 8006536:	f001 fd27 	bl	8007f88 <RCCEx_PLL2_Config>
 800653a:	4603      	mov	r3, r0
 800653c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800653e:	e003      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x660>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	75fb      	strb	r3, [r7, #23]
      break;
 8006544:	e000      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x660>
      break;
 8006546:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006548:	7dfb      	ldrb	r3, [r7, #23]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d109      	bne.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x67a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800654e:	4b4b      	ldr	r3, [pc, #300]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8006550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006552:	f023 0203 	bic.w	r2, r3, #3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800655a:	4948      	ldr	r1, [pc, #288]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800655c:	4313      	orrs	r3, r2
 800655e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006560:	e001      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006562:	7dfb      	ldrb	r3, [r7, #23]
 8006564:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 808c 	beq.w	800668c <HAL_RCCEx_PeriphCLKConfig+0x7a4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006574:	4b42      	ldr	r3, [pc, #264]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a41      	ldr	r2, [pc, #260]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800657a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800657e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006580:	f7fa fde2 	bl	8001148 <HAL_GetTick>
 8006584:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006586:	e009      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x6b4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006588:	f7fa fdde 	bl	8001148 <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	2b64      	cmp	r3, #100	; 0x64
 8006594:	d902      	bls.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x6b4>
      {
        ret = HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	75fb      	strb	r3, [r7, #23]
        break;
 800659a:	e005      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800659c:	4b38      	ldr	r3, [pc, #224]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d0ef      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
      }
    }

    if(ret == HAL_OK)
 80065a8:	7dfb      	ldrb	r3, [r7, #23]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d16c      	bne.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80065ae:	4b33      	ldr	r3, [pc, #204]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80065b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80065b8:	4053      	eors	r3, r2
 80065ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d013      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x702>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80065c2:	4b2e      	ldr	r3, [pc, #184]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80065c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065ca:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80065cc:	4b2b      	ldr	r3, [pc, #172]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80065ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d0:	4a2a      	ldr	r2, [pc, #168]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80065d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065d6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80065d8:	4b28      	ldr	r3, [pc, #160]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80065da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065dc:	4a27      	ldr	r2, [pc, #156]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80065de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065e2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80065e4:	4a25      	ldr	r2, [pc, #148]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80065f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065f4:	d115      	bne.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x73a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f6:	f7fa fda7 	bl	8001148 <HAL_GetTick>
 80065fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065fc:	e00b      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065fe:	f7fa fda3 	bl	8001148 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	f241 3288 	movw	r2, #5000	; 0x1388
 800660c:	4293      	cmp	r3, r2
 800660e:	d902      	bls.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x72e>
          {
            ret = HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	75fb      	strb	r3, [r7, #23]
            break;
 8006614:	e005      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006616:	4b19      	ldr	r3, [pc, #100]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8006618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d0ed      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x716>
          }
        }
      }

      if(ret == HAL_OK)
 8006622:	7dfb      	ldrb	r3, [r7, #23]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d126      	bne.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800662e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006632:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006636:	d10d      	bne.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x76c>
 8006638:	4b10      	ldr	r3, [pc, #64]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006646:	0919      	lsrs	r1, r3, #4
 8006648:	4b0e      	ldr	r3, [pc, #56]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 800664a:	400b      	ands	r3, r1
 800664c:	490b      	ldr	r1, [pc, #44]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800664e:	4313      	orrs	r3, r2
 8006650:	610b      	str	r3, [r1, #16]
 8006652:	e005      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x778>
 8006654:	4b09      	ldr	r3, [pc, #36]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	4a08      	ldr	r2, [pc, #32]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800665a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800665e:	6113      	str	r3, [r2, #16]
 8006660:	4b06      	ldr	r3, [pc, #24]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8006662:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800666a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800666e:	4903      	ldr	r1, [pc, #12]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8006670:	4313      	orrs	r3, r2
 8006672:	670b      	str	r3, [r1, #112]	; 0x70
 8006674:	e00a      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x7a4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006676:	7dfb      	ldrb	r3, [r7, #23]
 8006678:	75bb      	strb	r3, [r7, #22]
 800667a:	e007      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x7a4>
 800667c:	58024400 	.word	0x58024400
 8006680:	58024800 	.word	0x58024800
 8006684:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006688:	7dfb      	ldrb	r3, [r7, #23]
 800668a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	2b00      	cmp	r3, #0
 8006696:	d07e      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800669c:	2b28      	cmp	r3, #40	; 0x28
 800669e:	d867      	bhi.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x888>
 80066a0:	a201      	add	r2, pc, #4	; (adr r2, 80066a8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80066a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a6:	bf00      	nop
 80066a8:	08006777 	.word	0x08006777
 80066ac:	08006771 	.word	0x08006771
 80066b0:	08006771 	.word	0x08006771
 80066b4:	08006771 	.word	0x08006771
 80066b8:	08006771 	.word	0x08006771
 80066bc:	08006771 	.word	0x08006771
 80066c0:	08006771 	.word	0x08006771
 80066c4:	08006771 	.word	0x08006771
 80066c8:	0800674d 	.word	0x0800674d
 80066cc:	08006771 	.word	0x08006771
 80066d0:	08006771 	.word	0x08006771
 80066d4:	08006771 	.word	0x08006771
 80066d8:	08006771 	.word	0x08006771
 80066dc:	08006771 	.word	0x08006771
 80066e0:	08006771 	.word	0x08006771
 80066e4:	08006771 	.word	0x08006771
 80066e8:	0800675f 	.word	0x0800675f
 80066ec:	08006771 	.word	0x08006771
 80066f0:	08006771 	.word	0x08006771
 80066f4:	08006771 	.word	0x08006771
 80066f8:	08006771 	.word	0x08006771
 80066fc:	08006771 	.word	0x08006771
 8006700:	08006771 	.word	0x08006771
 8006704:	08006771 	.word	0x08006771
 8006708:	08006777 	.word	0x08006777
 800670c:	08006771 	.word	0x08006771
 8006710:	08006771 	.word	0x08006771
 8006714:	08006771 	.word	0x08006771
 8006718:	08006771 	.word	0x08006771
 800671c:	08006771 	.word	0x08006771
 8006720:	08006771 	.word	0x08006771
 8006724:	08006771 	.word	0x08006771
 8006728:	08006777 	.word	0x08006777
 800672c:	08006771 	.word	0x08006771
 8006730:	08006771 	.word	0x08006771
 8006734:	08006771 	.word	0x08006771
 8006738:	08006771 	.word	0x08006771
 800673c:	08006771 	.word	0x08006771
 8006740:	08006771 	.word	0x08006771
 8006744:	08006771 	.word	0x08006771
 8006748:	08006777 	.word	0x08006777
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	3304      	adds	r3, #4
 8006750:	2101      	movs	r1, #1
 8006752:	4618      	mov	r0, r3
 8006754:	f001 fc18 	bl	8007f88 <RCCEx_PLL2_Config>
 8006758:	4603      	mov	r3, r0
 800675a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800675c:	e00c      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x890>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	3324      	adds	r3, #36	; 0x24
 8006762:	2101      	movs	r1, #1
 8006764:	4618      	mov	r0, r3
 8006766:	f001 fcc1 	bl	80080ec <RCCEx_PLL3_Config>
 800676a:	4603      	mov	r3, r0
 800676c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800676e:	e003      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x890>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	75fb      	strb	r3, [r7, #23]
      break;
 8006774:	e000      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x890>
      break;
 8006776:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006778:	7dfb      	ldrb	r3, [r7, #23]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d109      	bne.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800677e:	4b96      	ldr	r3, [pc, #600]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8006780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006782:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800678a:	4993      	ldr	r1, [pc, #588]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 800678c:	4313      	orrs	r3, r2
 800678e:	654b      	str	r3, [r1, #84]	; 0x54
 8006790:	e001      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006792:	7dfb      	ldrb	r3, [r7, #23]
 8006794:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0302 	and.w	r3, r3, #2
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d037      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x92a>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067a6:	2b05      	cmp	r3, #5
 80067a8:	d820      	bhi.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x904>
 80067aa:	a201      	add	r2, pc, #4	; (adr r2, 80067b0 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 80067ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b0:	080067f3 	.word	0x080067f3
 80067b4:	080067c9 	.word	0x080067c9
 80067b8:	080067db 	.word	0x080067db
 80067bc:	080067f3 	.word	0x080067f3
 80067c0:	080067f3 	.word	0x080067f3
 80067c4:	080067f3 	.word	0x080067f3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	3304      	adds	r3, #4
 80067cc:	2101      	movs	r1, #1
 80067ce:	4618      	mov	r0, r3
 80067d0:	f001 fbda 	bl	8007f88 <RCCEx_PLL2_Config>
 80067d4:	4603      	mov	r3, r0
 80067d6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80067d8:	e00c      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x90c>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	3324      	adds	r3, #36	; 0x24
 80067de:	2101      	movs	r1, #1
 80067e0:	4618      	mov	r0, r3
 80067e2:	f001 fc83 	bl	80080ec <RCCEx_PLL3_Config>
 80067e6:	4603      	mov	r3, r0
 80067e8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80067ea:	e003      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	75fb      	strb	r3, [r7, #23]
      break;
 80067f0:	e000      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      break;
 80067f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067f4:	7dfb      	ldrb	r3, [r7, #23]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d109      	bne.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x926>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80067fa:	4b77      	ldr	r3, [pc, #476]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 80067fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fe:	f023 0207 	bic.w	r2, r3, #7
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006806:	4974      	ldr	r1, [pc, #464]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8006808:	4313      	orrs	r3, r2
 800680a:	654b      	str	r3, [r1, #84]	; 0x54
 800680c:	e001      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x92a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800680e:	7dfb      	ldrb	r3, [r7, #23]
 8006810:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0304 	and.w	r3, r3, #4
 800681a:	2b00      	cmp	r3, #0
 800681c:	d03a      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006824:	2b05      	cmp	r3, #5
 8006826:	d821      	bhi.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006828:	a201      	add	r2, pc, #4	; (adr r2, 8006830 <HAL_RCCEx_PeriphCLKConfig+0x948>)
 800682a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800682e:	bf00      	nop
 8006830:	08006873 	.word	0x08006873
 8006834:	08006849 	.word	0x08006849
 8006838:	0800685b 	.word	0x0800685b
 800683c:	08006873 	.word	0x08006873
 8006840:	08006873 	.word	0x08006873
 8006844:	08006873 	.word	0x08006873
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	3304      	adds	r3, #4
 800684c:	2101      	movs	r1, #1
 800684e:	4618      	mov	r0, r3
 8006850:	f001 fb9a 	bl	8007f88 <RCCEx_PLL2_Config>
 8006854:	4603      	mov	r3, r0
 8006856:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006858:	e00c      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x98c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	3324      	adds	r3, #36	; 0x24
 800685e:	2101      	movs	r1, #1
 8006860:	4618      	mov	r0, r3
 8006862:	f001 fc43 	bl	80080ec <RCCEx_PLL3_Config>
 8006866:	4603      	mov	r3, r0
 8006868:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800686a:	e003      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	75fb      	strb	r3, [r7, #23]
      break;
 8006870:	e000      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      break;
 8006872:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006874:	7dfb      	ldrb	r3, [r7, #23]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10a      	bne.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800687a:	4b57      	ldr	r3, [pc, #348]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 800687c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800687e:	f023 0207 	bic.w	r2, r3, #7
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006888:	4953      	ldr	r1, [pc, #332]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 800688a:	4313      	orrs	r3, r2
 800688c:	658b      	str	r3, [r1, #88]	; 0x58
 800688e:	e001      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006890:	7dfb      	ldrb	r3, [r7, #23]
 8006892:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0320 	and.w	r3, r3, #32
 800689c:	2b00      	cmp	r3, #0
 800689e:	d04b      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xa50>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068aa:	d02e      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0xa22>
 80068ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068b0:	d828      	bhi.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 80068b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068b6:	d02a      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0xa26>
 80068b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068bc:	d822      	bhi.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 80068be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80068c2:	d026      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 80068c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80068c8:	d81c      	bhi.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 80068ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068ce:	d010      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80068d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068d4:	d816      	bhi.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d01d      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 80068da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068de:	d111      	bne.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	3304      	adds	r3, #4
 80068e4:	2100      	movs	r1, #0
 80068e6:	4618      	mov	r0, r3
 80068e8:	f001 fb4e 	bl	8007f88 <RCCEx_PLL2_Config>
 80068ec:	4603      	mov	r3, r0
 80068ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80068f0:	e012      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0xa30>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	3324      	adds	r3, #36	; 0x24
 80068f6:	2102      	movs	r1, #2
 80068f8:	4618      	mov	r0, r3
 80068fa:	f001 fbf7 	bl	80080ec <RCCEx_PLL3_Config>
 80068fe:	4603      	mov	r3, r0
 8006900:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006902:	e009      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	75fb      	strb	r3, [r7, #23]
      break;
 8006908:	e006      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 800690a:	bf00      	nop
 800690c:	e004      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 800690e:	bf00      	nop
 8006910:	e002      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 8006912:	bf00      	nop
 8006914:	e000      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 8006916:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006918:	7dfb      	ldrb	r3, [r7, #23]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10a      	bne.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800691e:	4b2e      	ldr	r3, [pc, #184]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8006920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006922:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800692c:	492a      	ldr	r1, [pc, #168]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 800692e:	4313      	orrs	r3, r2
 8006930:	654b      	str	r3, [r1, #84]	; 0x54
 8006932:	e001      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006934:	7dfb      	ldrb	r3, [r7, #23]
 8006936:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006940:	2b00      	cmp	r3, #0
 8006942:	d04d      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800694a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800694e:	d02e      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0xac6>
 8006950:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006954:	d828      	bhi.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xac0>
 8006956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800695a:	d02a      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 800695c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006960:	d822      	bhi.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xac0>
 8006962:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006966:	d026      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0xace>
 8006968:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800696c:	d81c      	bhi.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xac0>
 800696e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006972:	d010      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8006974:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006978:	d816      	bhi.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xac0>
 800697a:	2b00      	cmp	r3, #0
 800697c:	d01d      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0xad2>
 800697e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006982:	d111      	bne.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xac0>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	3304      	adds	r3, #4
 8006988:	2100      	movs	r1, #0
 800698a:	4618      	mov	r0, r3
 800698c:	f001 fafc 	bl	8007f88 <RCCEx_PLL2_Config>
 8006990:	4603      	mov	r3, r0
 8006992:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006994:	e012      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xad4>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	3324      	adds	r3, #36	; 0x24
 800699a:	2102      	movs	r1, #2
 800699c:	4618      	mov	r0, r3
 800699e:	f001 fba5 	bl	80080ec <RCCEx_PLL3_Config>
 80069a2:	4603      	mov	r3, r0
 80069a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80069a6:	e009      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xad4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	75fb      	strb	r3, [r7, #23]
      break;
 80069ac:	e006      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 80069ae:	bf00      	nop
 80069b0:	e004      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 80069b2:	bf00      	nop
 80069b4:	e002      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 80069b6:	bf00      	nop
 80069b8:	e000      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 80069ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069bc:	7dfb      	ldrb	r3, [r7, #23]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10c      	bne.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80069c2:	4b05      	ldr	r3, [pc, #20]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 80069c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069d0:	4901      	ldr	r1, [pc, #4]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 80069d2:	4313      	orrs	r3, r2
 80069d4:	658b      	str	r3, [r1, #88]	; 0x58
 80069d6:	e003      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
 80069d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
 80069de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d04b      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80069f2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80069f6:	d02e      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 80069f8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80069fc:	d828      	bhi.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80069fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a02:	d02a      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8006a04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a08:	d822      	bhi.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8006a0a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006a0e:	d026      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8006a10:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006a14:	d81c      	bhi.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8006a16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a1a:	d010      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8006a1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a20:	d816      	bhi.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d01d      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 8006a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a2a:	d111      	bne.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	3304      	adds	r3, #4
 8006a30:	2100      	movs	r1, #0
 8006a32:	4618      	mov	r0, r3
 8006a34:	f001 faa8 	bl	8007f88 <RCCEx_PLL2_Config>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006a3c:	e012      	b.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	3324      	adds	r3, #36	; 0x24
 8006a42:	2102      	movs	r1, #2
 8006a44:	4618      	mov	r0, r3
 8006a46:	f001 fb51 	bl	80080ec <RCCEx_PLL3_Config>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006a4e:	e009      	b.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	75fb      	strb	r3, [r7, #23]
      break;
 8006a54:	e006      	b.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8006a56:	bf00      	nop
 8006a58:	e004      	b.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8006a5a:	bf00      	nop
 8006a5c:	e002      	b.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8006a5e:	bf00      	nop
 8006a60:	e000      	b.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8006a62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a64:	7dfb      	ldrb	r3, [r7, #23]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10a      	bne.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0xb98>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006a6a:	4b9e      	ldr	r3, [pc, #632]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8006a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006a78:	499a      	ldr	r1, [pc, #616]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	658b      	str	r3, [r1, #88]	; 0x58
 8006a7e:	e001      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a80:	7dfb      	ldrb	r3, [r7, #23]
 8006a82:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0308 	and.w	r3, r3, #8
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d01a      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0xbde>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a9a:	d10a      	bne.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0xbca>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	3324      	adds	r3, #36	; 0x24
 8006aa0:	2102      	movs	r1, #2
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f001 fb22 	bl	80080ec <RCCEx_PLL3_Config>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d001      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0xbca>
        {
          status = HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006ab2:	4b8c      	ldr	r3, [pc, #560]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8006ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ac0:	4988      	ldr	r1, [pc, #544]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0310 	and.w	r3, r3, #16
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d01a      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0xc20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006adc:	d10a      	bne.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	3324      	adds	r3, #36	; 0x24
 8006ae2:	2102      	movs	r1, #2
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f001 fb01 	bl	80080ec <RCCEx_PLL3_Config>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d001      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
      {
        status = HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006af4:	4b7b      	ldr	r3, [pc, #492]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8006af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006af8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b02:	4978      	ldr	r1, [pc, #480]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8006b04:	4313      	orrs	r3, r2
 8006b06:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d034      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0xc96>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b1e:	d01d      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006b20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b24:	d817      	bhi.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0xc6e>
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d003      	beq.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
 8006b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b2e:	d009      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8006b30:	e011      	b.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0xc6e>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	3304      	adds	r3, #4
 8006b36:	2100      	movs	r1, #0
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f001 fa25 	bl	8007f88 <RCCEx_PLL2_Config>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006b42:	e00c      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0xc76>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	3324      	adds	r3, #36	; 0x24
 8006b48:	2102      	movs	r1, #2
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f001 face 	bl	80080ec <RCCEx_PLL3_Config>
 8006b50:	4603      	mov	r3, r0
 8006b52:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006b54:	e003      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0xc76>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	75fb      	strb	r3, [r7, #23]
      break;
 8006b5a:	e000      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0xc76>
      break;
 8006b5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b5e:	7dfb      	ldrb	r3, [r7, #23]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d10a      	bne.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b64:	4b5f      	ldr	r3, [pc, #380]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8006b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b72:	495c      	ldr	r1, [pc, #368]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8006b74:	4313      	orrs	r3, r2
 8006b76:	658b      	str	r3, [r1, #88]	; 0x58
 8006b78:	e001      	b.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b7a:	7dfb      	ldrb	r3, [r7, #23]
 8006b7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d033      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b94:	d01c      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006b96:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b9a:	d816      	bhi.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0xce2>
 8006b9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ba0:	d003      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8006ba2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ba6:	d007      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8006ba8:	e00f      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0xce2>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006baa:	4b4e      	ldr	r3, [pc, #312]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8006bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bae:	4a4d      	ldr	r2, [pc, #308]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8006bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006bb6:	e00c      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0xcea>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	3324      	adds	r3, #36	; 0x24
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f001 fa94 	bl	80080ec <RCCEx_PLL3_Config>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006bc8:	e003      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	75fb      	strb	r3, [r7, #23]
      break;
 8006bce:	e000      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
      break;
 8006bd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bd2:	7dfb      	ldrb	r3, [r7, #23]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d10a      	bne.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0xd06>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006bd8:	4b42      	ldr	r3, [pc, #264]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8006bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006be6:	493f      	ldr	r1, [pc, #252]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8006be8:	4313      	orrs	r3, r2
 8006bea:	654b      	str	r3, [r1, #84]	; 0x54
 8006bec:	e001      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bee:	7dfb      	ldrb	r3, [r7, #23]
 8006bf0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d029      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0xd6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d003      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0xd26>
 8006c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c0a:	d007      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0xd34>
 8006c0c:	e00f      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xd46>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c0e:	4b35      	ldr	r3, [pc, #212]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8006c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c12:	4a34      	ldr	r2, [pc, #208]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8006c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006c1a:	e00b      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	3304      	adds	r3, #4
 8006c20:	2102      	movs	r1, #2
 8006c22:	4618      	mov	r0, r3
 8006c24:	f001 f9b0 	bl	8007f88 <RCCEx_PLL2_Config>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006c2c:	e002      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

    default:
      ret = HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	75fb      	strb	r3, [r7, #23]
      break;
 8006c32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c34:	7dfb      	ldrb	r3, [r7, #23]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d109      	bne.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0xd66>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006c3a:	4b2a      	ldr	r3, [pc, #168]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8006c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c46:	4927      	ldr	r1, [pc, #156]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006c4c:	e001      	b.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c4e:	7dfb      	ldrb	r3, [r7, #23]
 8006c50:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00a      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	3324      	adds	r3, #36	; 0x24
 8006c62:	2102      	movs	r1, #2
 8006c64:	4618      	mov	r0, r3
 8006c66:	f001 fa41 	bl	80080ec <RCCEx_PLL3_Config>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d001      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
    {
      status=HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d035      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0xe04>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c8a:	d017      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xdd4>
 8006c8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c90:	d811      	bhi.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8006c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c96:	d013      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8006c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c9c:	d80b      	bhi.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d010      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xddc>
 8006ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ca6:	d106      	bne.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0xdce>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ca8:	4b0e      	ldr	r3, [pc, #56]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8006caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cac:	4a0d      	ldr	r2, [pc, #52]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8006cae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006cb4:	e007      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	75fb      	strb	r3, [r7, #23]
      break;
 8006cba:	e004      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
      break;
 8006cbc:	bf00      	nop
 8006cbe:	e002      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
      break;
 8006cc0:	bf00      	nop
 8006cc2:	e000      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
      break;
 8006cc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cc6:	7dfb      	ldrb	r3, [r7, #23]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d10d      	bne.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0xe00>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ccc:	4b05      	ldr	r3, [pc, #20]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8006cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cda:	4902      	ldr	r1, [pc, #8]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	654b      	str	r3, [r1, #84]	; 0x54
 8006ce0:	e004      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0xe04>
 8006ce2:	bf00      	nop
 8006ce4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce8:	7dfb      	ldrb	r3, [r7, #23]
 8006cea:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d008      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xe22>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006cf8:	4b31      	ldr	r3, [pc, #196]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8006cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cfc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d04:	492e      	ldr	r1, [pc, #184]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8006d06:	4313      	orrs	r3, r2
 8006d08:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d009      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0xe42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006d16:	4b2a      	ldr	r3, [pc, #168]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006d24:	4926      	ldr	r1, [pc, #152]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d008      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xe60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006d36:	4b22      	ldr	r3, [pc, #136]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8006d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d3a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d42:	491f      	ldr	r1, [pc, #124]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8006d44:	4313      	orrs	r3, r2
 8006d46:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00d      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d54:	4b1a      	ldr	r3, [pc, #104]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	4a19      	ldr	r2, [pc, #100]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8006d5a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d5e:	6113      	str	r3, [r2, #16]
 8006d60:	4b17      	ldr	r3, [pc, #92]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8006d62:	691a      	ldr	r2, [r3, #16]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006d6a:	4915      	ldr	r1, [pc, #84]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	da08      	bge.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0xea2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006d78:	4b11      	ldr	r3, [pc, #68]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8006d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d7c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d84:	490e      	ldr	r1, [pc, #56]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d009      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0xec2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006d96:	4b0a      	ldr	r3, [pc, #40]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8006d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006da4:	4906      	ldr	r1, [pc, #24]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006daa:	7dbb      	ldrb	r3, [r7, #22]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d101      	bne.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    return HAL_OK;
 8006db0:	2300      	movs	r3, #0
 8006db2:	e000      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xece>
  }
  return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3718      	adds	r7, #24
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	58024400 	.word	0x58024400

08006dc4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b090      	sub	sp, #64	; 0x40
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dd2:	f040 8095 	bne.w	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006dd6:	4b97      	ldr	r3, [pc, #604]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dda:	f003 0307 	and.w	r3, r3, #7
 8006dde:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de2:	2b04      	cmp	r3, #4
 8006de4:	f200 8088 	bhi.w	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006de8:	a201      	add	r2, pc, #4	; (adr r2, 8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8006dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dee:	bf00      	nop
 8006df0:	08006e05 	.word	0x08006e05
 8006df4:	08006e2d 	.word	0x08006e2d
 8006df8:	08006e55 	.word	0x08006e55
 8006dfc:	08006ef1 	.word	0x08006ef1
 8006e00:	08006e7d 	.word	0x08006e7d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e04:	4b8b      	ldr	r3, [pc, #556]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e10:	d108      	bne.n	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e16:	4618      	mov	r0, r3
 8006e18:	f000 ff64 	bl	8007ce4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e20:	f000 bc94 	b.w	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006e24:	2300      	movs	r3, #0
 8006e26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e28:	f000 bc90 	b.w	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e2c:	4b81      	ldr	r3, [pc, #516]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e38:	d108      	bne.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e3a:	f107 0318 	add.w	r3, r7, #24
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 fca8 	bl	8007794 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e48:	f000 bc80 	b.w	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e50:	f000 bc7c 	b.w	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e54:	4b77      	ldr	r3, [pc, #476]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e60:	d108      	bne.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e62:	f107 030c 	add.w	r3, r7, #12
 8006e66:	4618      	mov	r0, r3
 8006e68:	f000 fde8 	bl	8007a3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e70:	f000 bc6c 	b.w	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006e74:	2300      	movs	r3, #0
 8006e76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e78:	f000 bc68 	b.w	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006e7c:	4b6d      	ldr	r3, [pc, #436]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e84:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e86:	4b6b      	ldr	r3, [pc, #428]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0304 	and.w	r3, r3, #4
 8006e8e:	2b04      	cmp	r3, #4
 8006e90:	d10c      	bne.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8006e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d109      	bne.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e98:	4b66      	ldr	r3, [pc, #408]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	08db      	lsrs	r3, r3, #3
 8006e9e:	f003 0303 	and.w	r3, r3, #3
 8006ea2:	4a65      	ldr	r2, [pc, #404]	; (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006eaa:	e01f      	b.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006eac:	4b61      	ldr	r3, [pc, #388]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eb8:	d106      	bne.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8006eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ebc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ec0:	d102      	bne.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006ec2:	4b5e      	ldr	r3, [pc, #376]	; (800703c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ec6:	e011      	b.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ec8:	4b5a      	ldr	r3, [pc, #360]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ed0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ed4:	d106      	bne.n	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8006ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006edc:	d102      	bne.n	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006ede:	4b58      	ldr	r3, [pc, #352]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ee2:	e003      	b.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006ee8:	f000 bc30 	b.w	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006eec:	f000 bc2e 	b.w	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ef0:	4b54      	ldr	r3, [pc, #336]	; (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ef4:	f000 bc2a 	b.w	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006efc:	f000 bc26 	b.w	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f06:	f040 809f 	bne.w	8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8006f0a:	4b4a      	ldr	r3, [pc, #296]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f0e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006f12:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f1a:	d04d      	beq.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8006f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f22:	f200 8084 	bhi.w	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f28:	2bc0      	cmp	r3, #192	; 0xc0
 8006f2a:	d07d      	beq.n	8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2e:	2bc0      	cmp	r3, #192	; 0xc0
 8006f30:	d87d      	bhi.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f34:	2b80      	cmp	r3, #128	; 0x80
 8006f36:	d02d      	beq.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8006f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3a:	2b80      	cmp	r3, #128	; 0x80
 8006f3c:	d877      	bhi.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d003      	beq.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8006f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f46:	2b40      	cmp	r3, #64	; 0x40
 8006f48:	d012      	beq.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8006f4a:	e070      	b.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f4c:	4b39      	ldr	r3, [pc, #228]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f58:	d107      	bne.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f000 fec0 	bl	8007ce4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006f68:	e3f0      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f6e:	e3ed      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f70:	4b30      	ldr	r3, [pc, #192]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f7c:	d107      	bne.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f7e:	f107 0318 	add.w	r3, r7, #24
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 fc06 	bl	8007794 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006f8c:	e3de      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f92:	e3db      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f94:	4b27      	ldr	r3, [pc, #156]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fa0:	d107      	bne.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fa2:	f107 030c 	add.w	r3, r7, #12
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f000 fd48 	bl	8007a3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006fb0:	e3cc      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fb6:	e3c9      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006fb8:	4b1e      	ldr	r3, [pc, #120]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fc0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006fc2:	4b1c      	ldr	r3, [pc, #112]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0304 	and.w	r3, r3, #4
 8006fca:	2b04      	cmp	r3, #4
 8006fcc:	d10c      	bne.n	8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8006fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d109      	bne.n	8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006fd4:	4b17      	ldr	r3, [pc, #92]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	08db      	lsrs	r3, r3, #3
 8006fda:	f003 0303 	and.w	r3, r3, #3
 8006fde:	4a16      	ldr	r2, [pc, #88]	; (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fe6:	e01e      	b.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006fe8:	4b12      	ldr	r3, [pc, #72]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ff4:	d106      	bne.n	8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8006ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ff8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ffc:	d102      	bne.n	8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006ffe:	4b0f      	ldr	r3, [pc, #60]	; (800703c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007000:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007002:	e010      	b.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007004:	4b0b      	ldr	r3, [pc, #44]	; (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800700c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007010:	d106      	bne.n	8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8007012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007014:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007018:	d102      	bne.n	8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800701a:	4b09      	ldr	r3, [pc, #36]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800701c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800701e:	e002      	b.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007020:	2300      	movs	r3, #0
 8007022:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007024:	e392      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007026:	e391      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007028:	4b06      	ldr	r3, [pc, #24]	; (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800702a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800702c:	e38e      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800702e:	2300      	movs	r3, #0
 8007030:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007032:	e38b      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007034:	58024400 	.word	0x58024400
 8007038:	03d09000 	.word	0x03d09000
 800703c:	003d0900 	.word	0x003d0900
 8007040:	017d7840 	.word	0x017d7840
 8007044:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800704e:	f040 809c 	bne.w	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007052:	4b9d      	ldr	r3, [pc, #628]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007056:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800705a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800705c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007062:	d054      	beq.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8007064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007066:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800706a:	f200 808b 	bhi.w	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800706e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007070:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007074:	f000 8083 	beq.w	800717e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8007078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800707e:	f200 8081 	bhi.w	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8007082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007084:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007088:	d02f      	beq.n	80070ea <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800708a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007090:	d878      	bhi.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8007092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007094:	2b00      	cmp	r3, #0
 8007096:	d004      	beq.n	80070a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8007098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800709e:	d012      	beq.n	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 80070a0:	e070      	b.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070a2:	4b89      	ldr	r3, [pc, #548]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070ae:	d107      	bne.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070b4:	4618      	mov	r0, r3
 80070b6:	f000 fe15 	bl	8007ce4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80070be:	e345      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80070c0:	2300      	movs	r3, #0
 80070c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070c4:	e342      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070c6:	4b80      	ldr	r3, [pc, #512]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070d2:	d107      	bne.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070d4:	f107 0318 	add.w	r3, r7, #24
 80070d8:	4618      	mov	r0, r3
 80070da:	f000 fb5b 	bl	8007794 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80070e2:	e333      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80070e4:	2300      	movs	r3, #0
 80070e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070e8:	e330      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070ea:	4b77      	ldr	r3, [pc, #476]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070f6:	d107      	bne.n	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070f8:	f107 030c 	add.w	r3, r7, #12
 80070fc:	4618      	mov	r0, r3
 80070fe:	f000 fc9d 	bl	8007a3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007106:	e321      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007108:	2300      	movs	r3, #0
 800710a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800710c:	e31e      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800710e:	4b6e      	ldr	r3, [pc, #440]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007112:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007116:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007118:	4b6b      	ldr	r3, [pc, #428]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0304 	and.w	r3, r3, #4
 8007120:	2b04      	cmp	r3, #4
 8007122:	d10c      	bne.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8007124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007126:	2b00      	cmp	r3, #0
 8007128:	d109      	bne.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800712a:	4b67      	ldr	r3, [pc, #412]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	08db      	lsrs	r3, r3, #3
 8007130:	f003 0303 	and.w	r3, r3, #3
 8007134:	4a65      	ldr	r2, [pc, #404]	; (80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007136:	fa22 f303 	lsr.w	r3, r2, r3
 800713a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800713c:	e01e      	b.n	800717c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800713e:	4b62      	ldr	r3, [pc, #392]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800714a:	d106      	bne.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800714c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800714e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007152:	d102      	bne.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007154:	4b5e      	ldr	r3, [pc, #376]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007156:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007158:	e010      	b.n	800717c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800715a:	4b5b      	ldr	r3, [pc, #364]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007162:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007166:	d106      	bne.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800716a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800716e:	d102      	bne.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007170:	4b58      	ldr	r3, [pc, #352]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007172:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007174:	e002      	b.n	800717c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007176:	2300      	movs	r3, #0
 8007178:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800717a:	e2e7      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800717c:	e2e6      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800717e:	4b56      	ldr	r3, [pc, #344]	; (80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007180:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007182:	e2e3      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8007184:	2300      	movs	r3, #0
 8007186:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007188:	e2e0      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007190:	f040 80a7 	bne.w	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007194:	4b4c      	ldr	r3, [pc, #304]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007198:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800719c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800719e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071a4:	d055      	beq.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80071a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071ac:	f200 8096 	bhi.w	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80071b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80071b6:	f000 8084 	beq.w	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80071ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80071c0:	f200 808c 	bhi.w	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80071c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071ca:	d030      	beq.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80071cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071d2:	f200 8083 	bhi.w	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80071d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d004      	beq.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80071dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80071e2:	d012      	beq.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80071e4:	e07a      	b.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80071e6:	4b38      	ldr	r3, [pc, #224]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071f2:	d107      	bne.n	8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071f8:	4618      	mov	r0, r3
 80071fa:	f000 fd73 	bl	8007ce4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007200:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007202:	e2a3      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007204:	2300      	movs	r3, #0
 8007206:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007208:	e2a0      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800720a:	4b2f      	ldr	r3, [pc, #188]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007212:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007216:	d107      	bne.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007218:	f107 0318 	add.w	r3, r7, #24
 800721c:	4618      	mov	r0, r3
 800721e:	f000 fab9 	bl	8007794 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8007226:	e291      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007228:	2300      	movs	r3, #0
 800722a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800722c:	e28e      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800722e:	4b26      	ldr	r3, [pc, #152]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007236:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800723a:	d107      	bne.n	800724c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800723c:	f107 030c 	add.w	r3, r7, #12
 8007240:	4618      	mov	r0, r3
 8007242:	f000 fbfb 	bl	8007a3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800724a:	e27f      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800724c:	2300      	movs	r3, #0
 800724e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007250:	e27c      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007252:	4b1d      	ldr	r3, [pc, #116]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007256:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800725a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800725c:	4b1a      	ldr	r3, [pc, #104]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 0304 	and.w	r3, r3, #4
 8007264:	2b04      	cmp	r3, #4
 8007266:	d10c      	bne.n	8007282 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8007268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800726a:	2b00      	cmp	r3, #0
 800726c:	d109      	bne.n	8007282 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800726e:	4b16      	ldr	r3, [pc, #88]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	08db      	lsrs	r3, r3, #3
 8007274:	f003 0303 	and.w	r3, r3, #3
 8007278:	4a14      	ldr	r2, [pc, #80]	; (80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800727a:	fa22 f303 	lsr.w	r3, r2, r3
 800727e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007280:	e01e      	b.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007282:	4b11      	ldr	r3, [pc, #68]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800728a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800728e:	d106      	bne.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8007290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007292:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007296:	d102      	bne.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007298:	4b0d      	ldr	r3, [pc, #52]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800729a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800729c:	e010      	b.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800729e:	4b0a      	ldr	r3, [pc, #40]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072aa:	d106      	bne.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80072ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072b2:	d102      	bne.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80072b4:	4b07      	ldr	r3, [pc, #28]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80072b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072b8:	e002      	b.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80072ba:	2300      	movs	r3, #0
 80072bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80072be:	e245      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80072c0:	e244      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80072c2:	4b05      	ldr	r3, [pc, #20]	; (80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80072c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072c6:	e241      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80072c8:	58024400 	.word	0x58024400
 80072cc:	03d09000 	.word	0x03d09000
 80072d0:	003d0900 	.word	0x003d0900
 80072d4:	017d7840 	.word	0x017d7840
 80072d8:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 80072dc:	2300      	movs	r3, #0
 80072de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072e0:	e234      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072e8:	f040 809c 	bne.w	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80072ec:	4b9b      	ldr	r3, [pc, #620]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80072ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072f0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80072f4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80072f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072fc:	d054      	beq.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 80072fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007300:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007304:	f200 808b 	bhi.w	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8007308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800730e:	f000 8083 	beq.w	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8007312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007314:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007318:	f200 8081 	bhi.w	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800731c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007322:	d02f      	beq.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8007324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800732a:	d878      	bhi.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800732c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732e:	2b00      	cmp	r3, #0
 8007330:	d004      	beq.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8007332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007338:	d012      	beq.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800733a:	e070      	b.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800733c:	4b87      	ldr	r3, [pc, #540]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007344:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007348:	d107      	bne.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800734a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800734e:	4618      	mov	r0, r3
 8007350:	f000 fcc8 	bl	8007ce4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007356:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007358:	e1f8      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800735a:	2300      	movs	r3, #0
 800735c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800735e:	e1f5      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007360:	4b7e      	ldr	r3, [pc, #504]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007368:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800736c:	d107      	bne.n	800737e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800736e:	f107 0318 	add.w	r3, r7, #24
 8007372:	4618      	mov	r0, r3
 8007374:	f000 fa0e 	bl	8007794 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800737c:	e1e6      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800737e:	2300      	movs	r3, #0
 8007380:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007382:	e1e3      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007384:	4b75      	ldr	r3, [pc, #468]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800738c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007390:	d107      	bne.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007392:	f107 030c 	add.w	r3, r7, #12
 8007396:	4618      	mov	r0, r3
 8007398:	f000 fb50 	bl	8007a3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80073a0:	e1d4      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80073a2:	2300      	movs	r3, #0
 80073a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073a6:	e1d1      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80073a8:	4b6c      	ldr	r3, [pc, #432]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80073aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80073b0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80073b2:	4b6a      	ldr	r3, [pc, #424]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 0304 	and.w	r3, r3, #4
 80073ba:	2b04      	cmp	r3, #4
 80073bc:	d10c      	bne.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80073be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d109      	bne.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073c4:	4b65      	ldr	r3, [pc, #404]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	08db      	lsrs	r3, r3, #3
 80073ca:	f003 0303 	and.w	r3, r3, #3
 80073ce:	4a64      	ldr	r2, [pc, #400]	; (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80073d0:	fa22 f303 	lsr.w	r3, r2, r3
 80073d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073d6:	e01e      	b.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80073d8:	4b60      	ldr	r3, [pc, #384]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073e4:	d106      	bne.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80073e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073ec:	d102      	bne.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80073ee:	4b5d      	ldr	r3, [pc, #372]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80073f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073f2:	e010      	b.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80073f4:	4b59      	ldr	r3, [pc, #356]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007400:	d106      	bne.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8007402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007404:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007408:	d102      	bne.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800740a:	4b57      	ldr	r3, [pc, #348]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800740c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800740e:	e002      	b.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007410:	2300      	movs	r3, #0
 8007412:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007414:	e19a      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007416:	e199      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007418:	4b54      	ldr	r3, [pc, #336]	; (800756c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800741a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800741c:	e196      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800741e:	2300      	movs	r3, #0
 8007420:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007422:	e193      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800742a:	d173      	bne.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800742c:	4b4b      	ldr	r3, [pc, #300]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800742e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007430:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007434:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007438:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800743c:	d02f      	beq.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800743e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007440:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007444:	d863      	bhi.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8007446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007448:	2b00      	cmp	r3, #0
 800744a:	d004      	beq.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800744c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007452:	d012      	beq.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8007454:	e05b      	b.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007456:	4b41      	ldr	r3, [pc, #260]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800745e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007462:	d107      	bne.n	8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007464:	f107 0318 	add.w	r3, r7, #24
 8007468:	4618      	mov	r0, r3
 800746a:	f000 f993 	bl	8007794 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007472:	e16b      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007474:	2300      	movs	r3, #0
 8007476:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007478:	e168      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800747a:	4b38      	ldr	r3, [pc, #224]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007482:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007486:	d107      	bne.n	8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007488:	f107 030c 	add.w	r3, r7, #12
 800748c:	4618      	mov	r0, r3
 800748e:	f000 fad5 	bl	8007a3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007496:	e159      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007498:	2300      	movs	r3, #0
 800749a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800749c:	e156      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800749e:	4b2f      	ldr	r3, [pc, #188]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80074a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80074a6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074a8:	4b2c      	ldr	r3, [pc, #176]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0304 	and.w	r3, r3, #4
 80074b0:	2b04      	cmp	r3, #4
 80074b2:	d10c      	bne.n	80074ce <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 80074b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d109      	bne.n	80074ce <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074ba:	4b28      	ldr	r3, [pc, #160]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	08db      	lsrs	r3, r3, #3
 80074c0:	f003 0303 	and.w	r3, r3, #3
 80074c4:	4a26      	ldr	r2, [pc, #152]	; (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80074c6:	fa22 f303 	lsr.w	r3, r2, r3
 80074ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074cc:	e01e      	b.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074ce:	4b23      	ldr	r3, [pc, #140]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074da:	d106      	bne.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 80074dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074e2:	d102      	bne.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80074e4:	4b1f      	ldr	r3, [pc, #124]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80074e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074e8:	e010      	b.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80074ea:	4b1c      	ldr	r3, [pc, #112]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074f6:	d106      	bne.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 80074f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074fe:	d102      	bne.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007500:	4b19      	ldr	r3, [pc, #100]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8007502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007504:	e002      	b.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007506:	2300      	movs	r3, #0
 8007508:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800750a:	e11f      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800750c:	e11e      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800750e:	2300      	movs	r3, #0
 8007510:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007512:	e11b      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800751a:	d13e      	bne.n	800759a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800751c:	4b0f      	ldr	r3, [pc, #60]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800751e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007524:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007528:	2b00      	cmp	r3, #0
 800752a:	d004      	beq.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800752c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007532:	d01d      	beq.n	8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007534:	e02e      	b.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007536:	4b09      	ldr	r3, [pc, #36]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800753e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007542:	d107      	bne.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007548:	4618      	mov	r0, r3
 800754a:	f000 fbcb 	bl	8007ce4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800754e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007550:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007552:	e0fb      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007554:	2300      	movs	r3, #0
 8007556:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007558:	e0f8      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800755a:	bf00      	nop
 800755c:	58024400 	.word	0x58024400
 8007560:	03d09000 	.word	0x03d09000
 8007564:	003d0900 	.word	0x003d0900
 8007568:	017d7840 	.word	0x017d7840
 800756c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007570:	4b79      	ldr	r3, [pc, #484]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007578:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800757c:	d107      	bne.n	800758e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800757e:	f107 0318 	add.w	r3, r7, #24
 8007582:	4618      	mov	r0, r3
 8007584:	f000 f906 	bl	8007794 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800758c:	e0de      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800758e:	2300      	movs	r3, #0
 8007590:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007592:	e0db      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8007594:	2300      	movs	r3, #0
 8007596:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007598:	e0d8      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075a0:	f040 8085 	bne.w	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80075a4:	4b6c      	ldr	r3, [pc, #432]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80075a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075a8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80075ac:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80075ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075b4:	d06b      	beq.n	800768e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80075b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075bc:	d874      	bhi.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80075be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075c4:	d056      	beq.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80075c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075cc:	d86c      	bhi.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80075ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075d4:	d03b      	beq.n	800764e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80075d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075dc:	d864      	bhi.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80075de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075e4:	d021      	beq.n	800762a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80075e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075ec:	d85c      	bhi.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80075ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d004      	beq.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80075f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075fa:	d004      	beq.n	8007606 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80075fc:	e054      	b.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80075fe:	f000 f8b3 	bl	8007768 <HAL_RCCEx_GetD3PCLK1Freq>
 8007602:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007604:	e0a2      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007606:	4b54      	ldr	r3, [pc, #336]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800760e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007612:	d107      	bne.n	8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007614:	f107 0318 	add.w	r3, r7, #24
 8007618:	4618      	mov	r0, r3
 800761a:	f000 f8bb 	bl	8007794 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007622:	e093      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007624:	2300      	movs	r3, #0
 8007626:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007628:	e090      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800762a:	4b4b      	ldr	r3, [pc, #300]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007632:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007636:	d107      	bne.n	8007648 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007638:	f107 030c 	add.w	r3, r7, #12
 800763c:	4618      	mov	r0, r3
 800763e:	f000 f9fd 	bl	8007a3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007646:	e081      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007648:	2300      	movs	r3, #0
 800764a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800764c:	e07e      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800764e:	4b42      	ldr	r3, [pc, #264]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 0304 	and.w	r3, r3, #4
 8007656:	2b04      	cmp	r3, #4
 8007658:	d109      	bne.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800765a:	4b3f      	ldr	r3, [pc, #252]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	08db      	lsrs	r3, r3, #3
 8007660:	f003 0303 	and.w	r3, r3, #3
 8007664:	4a3d      	ldr	r2, [pc, #244]	; (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8007666:	fa22 f303 	lsr.w	r3, r2, r3
 800766a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800766c:	e06e      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800766e:	2300      	movs	r3, #0
 8007670:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007672:	e06b      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007674:	4b38      	ldr	r3, [pc, #224]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800767c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007680:	d102      	bne.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8007682:	4b37      	ldr	r3, [pc, #220]	; (8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007684:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007686:	e061      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007688:	2300      	movs	r3, #0
 800768a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800768c:	e05e      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800768e:	4b32      	ldr	r3, [pc, #200]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007696:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800769a:	d102      	bne.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800769c:	4b31      	ldr	r3, [pc, #196]	; (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800769e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80076a0:	e054      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80076a2:	2300      	movs	r3, #0
 80076a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076a6:	e051      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80076a8:	2300      	movs	r3, #0
 80076aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076ac:	e04e      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076b4:	d148      	bne.n	8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80076b6:	4b28      	ldr	r3, [pc, #160]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80076b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80076be:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80076c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076c6:	d02a      	beq.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 80076c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076ce:	d838      	bhi.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 80076d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d004      	beq.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 80076d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076dc:	d00d      	beq.n	80076fa <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 80076de:	e030      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80076e0:	4b1d      	ldr	r3, [pc, #116]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076ec:	d102      	bne.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 80076ee:	4b1d      	ldr	r3, [pc, #116]	; (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80076f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80076f2:	e02b      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80076f4:	2300      	movs	r3, #0
 80076f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076f8:	e028      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80076fa:	4b17      	ldr	r3, [pc, #92]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007702:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007706:	d107      	bne.n	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800770c:	4618      	mov	r0, r3
 800770e:	f000 fae9 	bl	8007ce4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007714:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007716:	e019      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007718:	2300      	movs	r3, #0
 800771a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800771c:	e016      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800771e:	4b0e      	ldr	r3, [pc, #56]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007726:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800772a:	d107      	bne.n	800773c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800772c:	f107 0318 	add.w	r3, r7, #24
 8007730:	4618      	mov	r0, r3
 8007732:	f000 f82f 	bl	8007794 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800773a:	e007      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800773c:	2300      	movs	r3, #0
 800773e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007740:	e004      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8007742:	2300      	movs	r3, #0
 8007744:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007746:	e001      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8007748:	2300      	movs	r3, #0
 800774a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800774c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800774e:	4618      	mov	r0, r3
 8007750:	3740      	adds	r7, #64	; 0x40
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	58024400 	.word	0x58024400
 800775c:	03d09000 	.word	0x03d09000
 8007760:	003d0900 	.word	0x003d0900
 8007764:	017d7840 	.word	0x017d7840

08007768 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800776c:	f7fe fb1e 	bl	8005dac <HAL_RCC_GetHCLKFreq>
 8007770:	4602      	mov	r2, r0
 8007772:	4b06      	ldr	r3, [pc, #24]	; (800778c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	091b      	lsrs	r3, r3, #4
 8007778:	f003 0307 	and.w	r3, r3, #7
 800777c:	4904      	ldr	r1, [pc, #16]	; (8007790 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800777e:	5ccb      	ldrb	r3, [r1, r3]
 8007780:	f003 031f 	and.w	r3, r3, #31
 8007784:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007788:	4618      	mov	r0, r3
 800778a:	bd80      	pop	{r7, pc}
 800778c:	58024400 	.word	0x58024400
 8007790:	08025d1c 	.word	0x08025d1c

08007794 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007794:	b480      	push	{r7}
 8007796:	b089      	sub	sp, #36	; 0x24
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800779c:	4ba1      	ldr	r3, [pc, #644]	; (8007a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800779e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a0:	f003 0303 	and.w	r3, r3, #3
 80077a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80077a6:	4b9f      	ldr	r3, [pc, #636]	; (8007a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077aa:	0b1b      	lsrs	r3, r3, #12
 80077ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80077b2:	4b9c      	ldr	r3, [pc, #624]	; (8007a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b6:	091b      	lsrs	r3, r3, #4
 80077b8:	f003 0301 	and.w	r3, r3, #1
 80077bc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80077be:	4b99      	ldr	r3, [pc, #612]	; (8007a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c2:	08db      	lsrs	r3, r3, #3
 80077c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077c8:	693a      	ldr	r2, [r7, #16]
 80077ca:	fb02 f303 	mul.w	r3, r2, r3
 80077ce:	ee07 3a90 	vmov	s15, r3
 80077d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f000 8111 	beq.w	8007a04 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	f000 8083 	beq.w	80078f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	f200 80a1 	bhi.w	8007934 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d003      	beq.n	8007800 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d056      	beq.n	80078ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80077fe:	e099      	b.n	8007934 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007800:	4b88      	ldr	r3, [pc, #544]	; (8007a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0320 	and.w	r3, r3, #32
 8007808:	2b00      	cmp	r3, #0
 800780a:	d02d      	beq.n	8007868 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800780c:	4b85      	ldr	r3, [pc, #532]	; (8007a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	08db      	lsrs	r3, r3, #3
 8007812:	f003 0303 	and.w	r3, r3, #3
 8007816:	4a84      	ldr	r2, [pc, #528]	; (8007a28 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007818:	fa22 f303 	lsr.w	r3, r2, r3
 800781c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	ee07 3a90 	vmov	s15, r3
 8007824:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	ee07 3a90 	vmov	s15, r3
 800782e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007836:	4b7b      	ldr	r3, [pc, #492]	; (8007a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800783e:	ee07 3a90 	vmov	s15, r3
 8007842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007846:	ed97 6a03 	vldr	s12, [r7, #12]
 800784a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007a2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800784e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800785a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800785e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007862:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007866:	e087      	b.n	8007978 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	ee07 3a90 	vmov	s15, r3
 800786e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007872:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800787a:	4b6a      	ldr	r3, [pc, #424]	; (8007a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800787c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007882:	ee07 3a90 	vmov	s15, r3
 8007886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800788a:	ed97 6a03 	vldr	s12, [r7, #12]
 800788e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007a2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800789a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800789e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078aa:	e065      	b.n	8007978 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	ee07 3a90 	vmov	s15, r3
 80078b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007a34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80078ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078be:	4b59      	ldr	r3, [pc, #356]	; (8007a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078c6:	ee07 3a90 	vmov	s15, r3
 80078ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80078d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007a2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80078d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078ee:	e043      	b.n	8007978 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	ee07 3a90 	vmov	s15, r3
 80078f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80078fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007902:	4b48      	ldr	r3, [pc, #288]	; (8007a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800790a:	ee07 3a90 	vmov	s15, r3
 800790e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007912:	ed97 6a03 	vldr	s12, [r7, #12]
 8007916:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007a2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800791a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800791e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800792a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800792e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007932:	e021      	b.n	8007978 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	ee07 3a90 	vmov	s15, r3
 800793a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800793e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007a34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007946:	4b37      	ldr	r3, [pc, #220]	; (8007a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800794e:	ee07 3a90 	vmov	s15, r3
 8007952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007956:	ed97 6a03 	vldr	s12, [r7, #12]
 800795a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007a2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800795e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800796a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800796e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007972:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007976:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007978:	4b2a      	ldr	r3, [pc, #168]	; (8007a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800797a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800797c:	0a5b      	lsrs	r3, r3, #9
 800797e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007982:	ee07 3a90 	vmov	s15, r3
 8007986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800798a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800798e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007992:	edd7 6a07 	vldr	s13, [r7, #28]
 8007996:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800799a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800799e:	ee17 2a90 	vmov	r2, s15
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80079a6:	4b1f      	ldr	r3, [pc, #124]	; (8007a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079aa:	0c1b      	lsrs	r3, r3, #16
 80079ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079b0:	ee07 3a90 	vmov	s15, r3
 80079b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80079c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079cc:	ee17 2a90 	vmov	r2, s15
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80079d4:	4b13      	ldr	r3, [pc, #76]	; (8007a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d8:	0e1b      	lsrs	r3, r3, #24
 80079da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079de:	ee07 3a90 	vmov	s15, r3
 80079e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80079f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079fa:	ee17 2a90 	vmov	r2, s15
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007a02:	e008      	b.n	8007a16 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	609a      	str	r2, [r3, #8]
}
 8007a16:	bf00      	nop
 8007a18:	3724      	adds	r7, #36	; 0x24
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	58024400 	.word	0x58024400
 8007a28:	03d09000 	.word	0x03d09000
 8007a2c:	46000000 	.word	0x46000000
 8007a30:	4c742400 	.word	0x4c742400
 8007a34:	4a742400 	.word	0x4a742400
 8007a38:	4bbebc20 	.word	0x4bbebc20

08007a3c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b089      	sub	sp, #36	; 0x24
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a44:	4ba1      	ldr	r3, [pc, #644]	; (8007ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a48:	f003 0303 	and.w	r3, r3, #3
 8007a4c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007a4e:	4b9f      	ldr	r3, [pc, #636]	; (8007ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a52:	0d1b      	lsrs	r3, r3, #20
 8007a54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a58:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007a5a:	4b9c      	ldr	r3, [pc, #624]	; (8007ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5e:	0a1b      	lsrs	r3, r3, #8
 8007a60:	f003 0301 	and.w	r3, r3, #1
 8007a64:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007a66:	4b99      	ldr	r3, [pc, #612]	; (8007ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a6a:	08db      	lsrs	r3, r3, #3
 8007a6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a70:	693a      	ldr	r2, [r7, #16]
 8007a72:	fb02 f303 	mul.w	r3, r2, r3
 8007a76:	ee07 3a90 	vmov	s15, r3
 8007a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f000 8111 	beq.w	8007cac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	f000 8083 	beq.w	8007b98 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	f200 80a1 	bhi.w	8007bdc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d003      	beq.n	8007aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d056      	beq.n	8007b54 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007aa6:	e099      	b.n	8007bdc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007aa8:	4b88      	ldr	r3, [pc, #544]	; (8007ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 0320 	and.w	r3, r3, #32
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d02d      	beq.n	8007b10 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ab4:	4b85      	ldr	r3, [pc, #532]	; (8007ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	08db      	lsrs	r3, r3, #3
 8007aba:	f003 0303 	and.w	r3, r3, #3
 8007abe:	4a84      	ldr	r2, [pc, #528]	; (8007cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ac4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	ee07 3a90 	vmov	s15, r3
 8007acc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	ee07 3a90 	vmov	s15, r3
 8007ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ade:	4b7b      	ldr	r3, [pc, #492]	; (8007ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ae6:	ee07 3a90 	vmov	s15, r3
 8007aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aee:	ed97 6a03 	vldr	s12, [r7, #12]
 8007af2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007afe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b0a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007b0e:	e087      	b.n	8007c20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	ee07 3a90 	vmov	s15, r3
 8007b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b1a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b22:	4b6a      	ldr	r3, [pc, #424]	; (8007ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b2a:	ee07 3a90 	vmov	s15, r3
 8007b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b32:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b36:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b52:	e065      	b.n	8007c20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	ee07 3a90 	vmov	s15, r3
 8007b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b5e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007cdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b66:	4b59      	ldr	r3, [pc, #356]	; (8007ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b6e:	ee07 3a90 	vmov	s15, r3
 8007b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b76:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b7a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b96:	e043      	b.n	8007c20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	ee07 3a90 	vmov	s15, r3
 8007b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ba2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007baa:	4b48      	ldr	r3, [pc, #288]	; (8007ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bb2:	ee07 3a90 	vmov	s15, r3
 8007bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bba:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bbe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bda:	e021      	b.n	8007c20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	ee07 3a90 	vmov	s15, r3
 8007be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007be6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007cdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bee:	4b37      	ldr	r3, [pc, #220]	; (8007ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bf6:	ee07 3a90 	vmov	s15, r3
 8007bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c02:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c1e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007c20:	4b2a      	ldr	r3, [pc, #168]	; (8007ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c24:	0a5b      	lsrs	r3, r3, #9
 8007c26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c2a:	ee07 3a90 	vmov	s15, r3
 8007c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c46:	ee17 2a90 	vmov	r2, s15
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007c4e:	4b1f      	ldr	r3, [pc, #124]	; (8007ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c52:	0c1b      	lsrs	r3, r3, #16
 8007c54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c58:	ee07 3a90 	vmov	s15, r3
 8007c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c68:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c74:	ee17 2a90 	vmov	r2, s15
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007c7c:	4b13      	ldr	r3, [pc, #76]	; (8007ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c80:	0e1b      	lsrs	r3, r3, #24
 8007c82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c86:	ee07 3a90 	vmov	s15, r3
 8007c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c96:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ca2:	ee17 2a90 	vmov	r2, s15
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007caa:	e008      	b.n	8007cbe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	609a      	str	r2, [r3, #8]
}
 8007cbe:	bf00      	nop
 8007cc0:	3724      	adds	r7, #36	; 0x24
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	58024400 	.word	0x58024400
 8007cd0:	03d09000 	.word	0x03d09000
 8007cd4:	46000000 	.word	0x46000000
 8007cd8:	4c742400 	.word	0x4c742400
 8007cdc:	4a742400 	.word	0x4a742400
 8007ce0:	4bbebc20 	.word	0x4bbebc20

08007ce4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b089      	sub	sp, #36	; 0x24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007cec:	4ba0      	ldr	r3, [pc, #640]	; (8007f70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf0:	f003 0303 	and.w	r3, r3, #3
 8007cf4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007cf6:	4b9e      	ldr	r3, [pc, #632]	; (8007f70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfa:	091b      	lsrs	r3, r3, #4
 8007cfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d00:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007d02:	4b9b      	ldr	r3, [pc, #620]	; (8007f70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d06:	f003 0301 	and.w	r3, r3, #1
 8007d0a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007d0c:	4b98      	ldr	r3, [pc, #608]	; (8007f70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d10:	08db      	lsrs	r3, r3, #3
 8007d12:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d16:	693a      	ldr	r2, [r7, #16]
 8007d18:	fb02 f303 	mul.w	r3, r2, r3
 8007d1c:	ee07 3a90 	vmov	s15, r3
 8007d20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d24:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f000 8111 	beq.w	8007f52 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	f000 8083 	beq.w	8007e3e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	f200 80a1 	bhi.w	8007e82 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d003      	beq.n	8007d4e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d056      	beq.n	8007dfa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007d4c:	e099      	b.n	8007e82 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d4e:	4b88      	ldr	r3, [pc, #544]	; (8007f70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 0320 	and.w	r3, r3, #32
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d02d      	beq.n	8007db6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d5a:	4b85      	ldr	r3, [pc, #532]	; (8007f70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	08db      	lsrs	r3, r3, #3
 8007d60:	f003 0303 	and.w	r3, r3, #3
 8007d64:	4a83      	ldr	r2, [pc, #524]	; (8007f74 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007d66:	fa22 f303 	lsr.w	r3, r2, r3
 8007d6a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	ee07 3a90 	vmov	s15, r3
 8007d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	ee07 3a90 	vmov	s15, r3
 8007d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d84:	4b7a      	ldr	r3, [pc, #488]	; (8007f70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d8c:	ee07 3a90 	vmov	s15, r3
 8007d90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d94:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d98:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007f78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007d9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007da0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007da4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007da8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007db0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007db4:	e087      	b.n	8007ec6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	ee07 3a90 	vmov	s15, r3
 8007dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dc0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007f7c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007dc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dc8:	4b69      	ldr	r3, [pc, #420]	; (8007f70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dd0:	ee07 3a90 	vmov	s15, r3
 8007dd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dd8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ddc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007f78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007de0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007de4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007de8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007df4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007df8:	e065      	b.n	8007ec6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	ee07 3a90 	vmov	s15, r3
 8007e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e04:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007f80 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007e08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e0c:	4b58      	ldr	r3, [pc, #352]	; (8007f70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e14:	ee07 3a90 	vmov	s15, r3
 8007e18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e1c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e20:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007f78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e38:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e3c:	e043      	b.n	8007ec6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	ee07 3a90 	vmov	s15, r3
 8007e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e48:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007f84 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007e4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e50:	4b47      	ldr	r3, [pc, #284]	; (8007f70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e58:	ee07 3a90 	vmov	s15, r3
 8007e5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e60:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e64:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007f78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e7c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e80:	e021      	b.n	8007ec6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	ee07 3a90 	vmov	s15, r3
 8007e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e8c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007f7c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007e90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e94:	4b36      	ldr	r3, [pc, #216]	; (8007f70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e9c:	ee07 3a90 	vmov	s15, r3
 8007ea0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ea4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ea8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007f78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007eac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007eb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ec0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ec4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007ec6:	4b2a      	ldr	r3, [pc, #168]	; (8007f70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eca:	0a5b      	lsrs	r3, r3, #9
 8007ecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ed0:	ee07 3a90 	vmov	s15, r3
 8007ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ed8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007edc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ee0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007eec:	ee17 2a90 	vmov	r2, s15
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007ef4:	4b1e      	ldr	r3, [pc, #120]	; (8007f70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef8:	0c1b      	lsrs	r3, r3, #16
 8007efa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007efe:	ee07 3a90 	vmov	s15, r3
 8007f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f1a:	ee17 2a90 	vmov	r2, s15
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007f22:	4b13      	ldr	r3, [pc, #76]	; (8007f70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f26:	0e1b      	lsrs	r3, r3, #24
 8007f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f2c:	ee07 3a90 	vmov	s15, r3
 8007f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f48:	ee17 2a90 	vmov	r2, s15
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007f50:	e008      	b.n	8007f64 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	609a      	str	r2, [r3, #8]
}
 8007f64:	bf00      	nop
 8007f66:	3724      	adds	r7, #36	; 0x24
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr
 8007f70:	58024400 	.word	0x58024400
 8007f74:	03d09000 	.word	0x03d09000
 8007f78:	46000000 	.word	0x46000000
 8007f7c:	4c742400 	.word	0x4c742400
 8007f80:	4a742400 	.word	0x4a742400
 8007f84:	4bbebc20 	.word	0x4bbebc20

08007f88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f92:	2300      	movs	r3, #0
 8007f94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f96:	4b53      	ldr	r3, [pc, #332]	; (80080e4 <RCCEx_PLL2_Config+0x15c>)
 8007f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9a:	f003 0303 	and.w	r3, r3, #3
 8007f9e:	2b03      	cmp	r3, #3
 8007fa0:	d101      	bne.n	8007fa6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e099      	b.n	80080da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007fa6:	4b4f      	ldr	r3, [pc, #316]	; (80080e4 <RCCEx_PLL2_Config+0x15c>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a4e      	ldr	r2, [pc, #312]	; (80080e4 <RCCEx_PLL2_Config+0x15c>)
 8007fac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007fb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fb2:	f7f9 f8c9 	bl	8001148 <HAL_GetTick>
 8007fb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007fb8:	e008      	b.n	8007fcc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007fba:	f7f9 f8c5 	bl	8001148 <HAL_GetTick>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	1ad3      	subs	r3, r2, r3
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d901      	bls.n	8007fcc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	e086      	b.n	80080da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007fcc:	4b45      	ldr	r3, [pc, #276]	; (80080e4 <RCCEx_PLL2_Config+0x15c>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1f0      	bne.n	8007fba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007fd8:	4b42      	ldr	r3, [pc, #264]	; (80080e4 <RCCEx_PLL2_Config+0x15c>)
 8007fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fdc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	031b      	lsls	r3, r3, #12
 8007fe6:	493f      	ldr	r1, [pc, #252]	; (80080e4 <RCCEx_PLL2_Config+0x15c>)
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	628b      	str	r3, [r1, #40]	; 0x28
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	3b01      	subs	r3, #1
 8007ffc:	025b      	lsls	r3, r3, #9
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	431a      	orrs	r2, r3
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	3b01      	subs	r3, #1
 8008008:	041b      	lsls	r3, r3, #16
 800800a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800800e:	431a      	orrs	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	3b01      	subs	r3, #1
 8008016:	061b      	lsls	r3, r3, #24
 8008018:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800801c:	4931      	ldr	r1, [pc, #196]	; (80080e4 <RCCEx_PLL2_Config+0x15c>)
 800801e:	4313      	orrs	r3, r2
 8008020:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008022:	4b30      	ldr	r3, [pc, #192]	; (80080e4 <RCCEx_PLL2_Config+0x15c>)
 8008024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008026:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	695b      	ldr	r3, [r3, #20]
 800802e:	492d      	ldr	r1, [pc, #180]	; (80080e4 <RCCEx_PLL2_Config+0x15c>)
 8008030:	4313      	orrs	r3, r2
 8008032:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008034:	4b2b      	ldr	r3, [pc, #172]	; (80080e4 <RCCEx_PLL2_Config+0x15c>)
 8008036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008038:	f023 0220 	bic.w	r2, r3, #32
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	699b      	ldr	r3, [r3, #24]
 8008040:	4928      	ldr	r1, [pc, #160]	; (80080e4 <RCCEx_PLL2_Config+0x15c>)
 8008042:	4313      	orrs	r3, r2
 8008044:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008046:	4b27      	ldr	r3, [pc, #156]	; (80080e4 <RCCEx_PLL2_Config+0x15c>)
 8008048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800804a:	4a26      	ldr	r2, [pc, #152]	; (80080e4 <RCCEx_PLL2_Config+0x15c>)
 800804c:	f023 0310 	bic.w	r3, r3, #16
 8008050:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008052:	4b24      	ldr	r3, [pc, #144]	; (80080e4 <RCCEx_PLL2_Config+0x15c>)
 8008054:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008056:	4b24      	ldr	r3, [pc, #144]	; (80080e8 <RCCEx_PLL2_Config+0x160>)
 8008058:	4013      	ands	r3, r2
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	69d2      	ldr	r2, [r2, #28]
 800805e:	00d2      	lsls	r2, r2, #3
 8008060:	4920      	ldr	r1, [pc, #128]	; (80080e4 <RCCEx_PLL2_Config+0x15c>)
 8008062:	4313      	orrs	r3, r2
 8008064:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008066:	4b1f      	ldr	r3, [pc, #124]	; (80080e4 <RCCEx_PLL2_Config+0x15c>)
 8008068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800806a:	4a1e      	ldr	r2, [pc, #120]	; (80080e4 <RCCEx_PLL2_Config+0x15c>)
 800806c:	f043 0310 	orr.w	r3, r3, #16
 8008070:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d106      	bne.n	8008086 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008078:	4b1a      	ldr	r3, [pc, #104]	; (80080e4 <RCCEx_PLL2_Config+0x15c>)
 800807a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807c:	4a19      	ldr	r2, [pc, #100]	; (80080e4 <RCCEx_PLL2_Config+0x15c>)
 800807e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008082:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008084:	e00f      	b.n	80080a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	2b01      	cmp	r3, #1
 800808a:	d106      	bne.n	800809a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800808c:	4b15      	ldr	r3, [pc, #84]	; (80080e4 <RCCEx_PLL2_Config+0x15c>)
 800808e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008090:	4a14      	ldr	r2, [pc, #80]	; (80080e4 <RCCEx_PLL2_Config+0x15c>)
 8008092:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008096:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008098:	e005      	b.n	80080a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800809a:	4b12      	ldr	r3, [pc, #72]	; (80080e4 <RCCEx_PLL2_Config+0x15c>)
 800809c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809e:	4a11      	ldr	r2, [pc, #68]	; (80080e4 <RCCEx_PLL2_Config+0x15c>)
 80080a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80080a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80080a6:	4b0f      	ldr	r3, [pc, #60]	; (80080e4 <RCCEx_PLL2_Config+0x15c>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a0e      	ldr	r2, [pc, #56]	; (80080e4 <RCCEx_PLL2_Config+0x15c>)
 80080ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80080b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080b2:	f7f9 f849 	bl	8001148 <HAL_GetTick>
 80080b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080b8:	e008      	b.n	80080cc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80080ba:	f7f9 f845 	bl	8001148 <HAL_GetTick>
 80080be:	4602      	mov	r2, r0
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	1ad3      	subs	r3, r2, r3
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d901      	bls.n	80080cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80080c8:	2303      	movs	r3, #3
 80080ca:	e006      	b.n	80080da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080cc:	4b05      	ldr	r3, [pc, #20]	; (80080e4 <RCCEx_PLL2_Config+0x15c>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d0f0      	beq.n	80080ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80080d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	58024400 	.word	0x58024400
 80080e8:	ffff0007 	.word	0xffff0007

080080ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80080fa:	4b53      	ldr	r3, [pc, #332]	; (8008248 <RCCEx_PLL3_Config+0x15c>)
 80080fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080fe:	f003 0303 	and.w	r3, r3, #3
 8008102:	2b03      	cmp	r3, #3
 8008104:	d101      	bne.n	800810a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e099      	b.n	800823e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800810a:	4b4f      	ldr	r3, [pc, #316]	; (8008248 <RCCEx_PLL3_Config+0x15c>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a4e      	ldr	r2, [pc, #312]	; (8008248 <RCCEx_PLL3_Config+0x15c>)
 8008110:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008114:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008116:	f7f9 f817 	bl	8001148 <HAL_GetTick>
 800811a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800811c:	e008      	b.n	8008130 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800811e:	f7f9 f813 	bl	8001148 <HAL_GetTick>
 8008122:	4602      	mov	r2, r0
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	1ad3      	subs	r3, r2, r3
 8008128:	2b02      	cmp	r3, #2
 800812a:	d901      	bls.n	8008130 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800812c:	2303      	movs	r3, #3
 800812e:	e086      	b.n	800823e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008130:	4b45      	ldr	r3, [pc, #276]	; (8008248 <RCCEx_PLL3_Config+0x15c>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008138:	2b00      	cmp	r3, #0
 800813a:	d1f0      	bne.n	800811e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800813c:	4b42      	ldr	r3, [pc, #264]	; (8008248 <RCCEx_PLL3_Config+0x15c>)
 800813e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008140:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	051b      	lsls	r3, r3, #20
 800814a:	493f      	ldr	r1, [pc, #252]	; (8008248 <RCCEx_PLL3_Config+0x15c>)
 800814c:	4313      	orrs	r3, r2
 800814e:	628b      	str	r3, [r1, #40]	; 0x28
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	3b01      	subs	r3, #1
 8008156:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	3b01      	subs	r3, #1
 8008160:	025b      	lsls	r3, r3, #9
 8008162:	b29b      	uxth	r3, r3
 8008164:	431a      	orrs	r2, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	3b01      	subs	r3, #1
 800816c:	041b      	lsls	r3, r3, #16
 800816e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008172:	431a      	orrs	r2, r3
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	3b01      	subs	r3, #1
 800817a:	061b      	lsls	r3, r3, #24
 800817c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008180:	4931      	ldr	r1, [pc, #196]	; (8008248 <RCCEx_PLL3_Config+0x15c>)
 8008182:	4313      	orrs	r3, r2
 8008184:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008186:	4b30      	ldr	r3, [pc, #192]	; (8008248 <RCCEx_PLL3_Config+0x15c>)
 8008188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	695b      	ldr	r3, [r3, #20]
 8008192:	492d      	ldr	r1, [pc, #180]	; (8008248 <RCCEx_PLL3_Config+0x15c>)
 8008194:	4313      	orrs	r3, r2
 8008196:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008198:	4b2b      	ldr	r3, [pc, #172]	; (8008248 <RCCEx_PLL3_Config+0x15c>)
 800819a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	4928      	ldr	r1, [pc, #160]	; (8008248 <RCCEx_PLL3_Config+0x15c>)
 80081a6:	4313      	orrs	r3, r2
 80081a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80081aa:	4b27      	ldr	r3, [pc, #156]	; (8008248 <RCCEx_PLL3_Config+0x15c>)
 80081ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ae:	4a26      	ldr	r2, [pc, #152]	; (8008248 <RCCEx_PLL3_Config+0x15c>)
 80081b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80081b6:	4b24      	ldr	r3, [pc, #144]	; (8008248 <RCCEx_PLL3_Config+0x15c>)
 80081b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081ba:	4b24      	ldr	r3, [pc, #144]	; (800824c <RCCEx_PLL3_Config+0x160>)
 80081bc:	4013      	ands	r3, r2
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	69d2      	ldr	r2, [r2, #28]
 80081c2:	00d2      	lsls	r2, r2, #3
 80081c4:	4920      	ldr	r1, [pc, #128]	; (8008248 <RCCEx_PLL3_Config+0x15c>)
 80081c6:	4313      	orrs	r3, r2
 80081c8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80081ca:	4b1f      	ldr	r3, [pc, #124]	; (8008248 <RCCEx_PLL3_Config+0x15c>)
 80081cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ce:	4a1e      	ldr	r2, [pc, #120]	; (8008248 <RCCEx_PLL3_Config+0x15c>)
 80081d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d106      	bne.n	80081ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80081dc:	4b1a      	ldr	r3, [pc, #104]	; (8008248 <RCCEx_PLL3_Config+0x15c>)
 80081de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e0:	4a19      	ldr	r2, [pc, #100]	; (8008248 <RCCEx_PLL3_Config+0x15c>)
 80081e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80081e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80081e8:	e00f      	b.n	800820a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d106      	bne.n	80081fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80081f0:	4b15      	ldr	r3, [pc, #84]	; (8008248 <RCCEx_PLL3_Config+0x15c>)
 80081f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f4:	4a14      	ldr	r2, [pc, #80]	; (8008248 <RCCEx_PLL3_Config+0x15c>)
 80081f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80081fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80081fc:	e005      	b.n	800820a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80081fe:	4b12      	ldr	r3, [pc, #72]	; (8008248 <RCCEx_PLL3_Config+0x15c>)
 8008200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008202:	4a11      	ldr	r2, [pc, #68]	; (8008248 <RCCEx_PLL3_Config+0x15c>)
 8008204:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008208:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800820a:	4b0f      	ldr	r3, [pc, #60]	; (8008248 <RCCEx_PLL3_Config+0x15c>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a0e      	ldr	r2, [pc, #56]	; (8008248 <RCCEx_PLL3_Config+0x15c>)
 8008210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008214:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008216:	f7f8 ff97 	bl	8001148 <HAL_GetTick>
 800821a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800821c:	e008      	b.n	8008230 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800821e:	f7f8 ff93 	bl	8001148 <HAL_GetTick>
 8008222:	4602      	mov	r2, r0
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	2b02      	cmp	r3, #2
 800822a:	d901      	bls.n	8008230 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800822c:	2303      	movs	r3, #3
 800822e:	e006      	b.n	800823e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008230:	4b05      	ldr	r3, [pc, #20]	; (8008248 <RCCEx_PLL3_Config+0x15c>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008238:	2b00      	cmp	r3, #0
 800823a:	d0f0      	beq.n	800821e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800823c:	7bfb      	ldrb	r3, [r7, #15]
}
 800823e:	4618      	mov	r0, r3
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	58024400 	.word	0x58024400
 800824c:	ffff0007 	.word	0xffff0007

08008250 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d067      	beq.n	8008332 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008268:	b2db      	uxtb	r3, r3
 800826a:	2b00      	cmp	r3, #0
 800826c:	d106      	bne.n	800827c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f015 ff16 	bl	801e0a8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2202      	movs	r2, #2
 8008280:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	22ca      	movs	r2, #202	; 0xca
 800828a:	625a      	str	r2, [r3, #36]	; 0x24
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2253      	movs	r2, #83	; 0x53
 8008292:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fbd1 	bl	8008a3c <RTC_EnterInitMode>
 800829a:	4603      	mov	r3, r0
 800829c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800829e:	7bfb      	ldrb	r3, [r7, #15]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d13b      	bne.n	800831c <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6899      	ldr	r1, [r3, #8]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	4b23      	ldr	r3, [pc, #140]	; (800833c <HAL_RTC_Init+0xec>)
 80082b0:	400b      	ands	r3, r1
 80082b2:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	6899      	ldr	r1, [r3, #8]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	685a      	ldr	r2, [r3, #4]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	431a      	orrs	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	699b      	ldr	r3, [r3, #24]
 80082c8:	431a      	orrs	r2, r3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	430a      	orrs	r2, r1
 80082d0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	0419      	lsls	r1, r3, #16
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	68da      	ldr	r2, [r3, #12]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	430a      	orrs	r2, r1
 80082e2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 fbdd 	bl	8008aa4 <RTC_ExitInitMode>
 80082ea:	4603      	mov	r3, r0
 80082ec:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 80082ee:	7bfb      	ldrb	r3, [r7, #15]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d113      	bne.n	800831c <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f022 0203 	bic.w	r2, r2, #3
 8008302:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	69da      	ldr	r2, [r3, #28]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	695b      	ldr	r3, [r3, #20]
 8008312:	431a      	orrs	r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	430a      	orrs	r2, r1
 800831a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	22ff      	movs	r2, #255	; 0xff
 8008322:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8008324:	7bfb      	ldrb	r3, [r7, #15]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d103      	bne.n	8008332 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8008332:	7bfb      	ldrb	r3, [r7, #15]
}
 8008334:	4618      	mov	r0, r3
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	ff8fffbf 	.word	0xff8fffbf

08008340 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008340:	b590      	push	{r4, r7, lr}
 8008342:	b087      	sub	sp, #28
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008352:	2b01      	cmp	r3, #1
 8008354:	d101      	bne.n	800835a <HAL_RTC_SetTime+0x1a>
 8008356:	2302      	movs	r3, #2
 8008358:	e089      	b.n	800846e <HAL_RTC_SetTime+0x12e>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2202      	movs	r2, #2
 8008366:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	22ca      	movs	r2, #202	; 0xca
 8008370:	625a      	str	r2, [r3, #36]	; 0x24
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2253      	movs	r2, #83	; 0x53
 8008378:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f000 fb5e 	bl	8008a3c <RTC_EnterInitMode>
 8008380:	4603      	mov	r3, r0
 8008382:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008384:	7cfb      	ldrb	r3, [r7, #19]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d161      	bne.n	800844e <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d126      	bne.n	80083de <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800839a:	2b00      	cmp	r3, #0
 800839c:	d102      	bne.n	80083a4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	2200      	movs	r2, #0
 80083a2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	4618      	mov	r0, r3
 80083aa:	f000 fbb9 	bl	8008b20 <RTC_ByteToBcd2>
 80083ae:	4603      	mov	r3, r0
 80083b0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	785b      	ldrb	r3, [r3, #1]
 80083b6:	4618      	mov	r0, r3
 80083b8:	f000 fbb2 	bl	8008b20 <RTC_ByteToBcd2>
 80083bc:	4603      	mov	r3, r0
 80083be:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80083c0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	789b      	ldrb	r3, [r3, #2]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f000 fbaa 	bl	8008b20 <RTC_ByteToBcd2>
 80083cc:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80083ce:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	78db      	ldrb	r3, [r3, #3]
 80083d6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80083d8:	4313      	orrs	r3, r2
 80083da:	617b      	str	r3, [r7, #20]
 80083dc:	e018      	b.n	8008410 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d102      	bne.n	80083f2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	2200      	movs	r2, #0
 80083f0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	785b      	ldrb	r3, [r3, #1]
 80083fc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80083fe:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8008400:	68ba      	ldr	r2, [r7, #8]
 8008402:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008404:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	78db      	ldrb	r3, [r3, #3]
 800840a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800840c:	4313      	orrs	r3, r2
 800840e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	6979      	ldr	r1, [r7, #20]
 8008416:	4b18      	ldr	r3, [pc, #96]	; (8008478 <HAL_RTC_SetTime+0x138>)
 8008418:	400b      	ands	r3, r1
 800841a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	689a      	ldr	r2, [r3, #8]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800842a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	6899      	ldr	r1, [r3, #8]
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	68da      	ldr	r2, [r3, #12]
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	431a      	orrs	r2, r3
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	430a      	orrs	r2, r1
 8008442:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	f000 fb2d 	bl	8008aa4 <RTC_ExitInitMode>
 800844a:	4603      	mov	r3, r0
 800844c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	22ff      	movs	r2, #255	; 0xff
 8008454:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008456:	7cfb      	ldrb	r3, [r7, #19]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d103      	bne.n	8008464 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2201      	movs	r2, #1
 8008460:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800846c:	7cfb      	ldrb	r3, [r7, #19]
}
 800846e:	4618      	mov	r0, r3
 8008470:	371c      	adds	r7, #28
 8008472:	46bd      	mov	sp, r7
 8008474:	bd90      	pop	{r4, r7, pc}
 8008476:	bf00      	nop
 8008478:	007f7f7f 	.word	0x007f7f7f

0800847c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800847c:	b590      	push	{r4, r7, lr}
 800847e:	b087      	sub	sp, #28
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800848e:	2b01      	cmp	r3, #1
 8008490:	d101      	bne.n	8008496 <HAL_RTC_SetDate+0x1a>
 8008492:	2302      	movs	r3, #2
 8008494:	e073      	b.n	800857e <HAL_RTC_SetDate+0x102>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2201      	movs	r2, #1
 800849a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2202      	movs	r2, #2
 80084a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d10e      	bne.n	80084ca <HAL_RTC_SetDate+0x4e>
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	785b      	ldrb	r3, [r3, #1]
 80084b0:	f003 0310 	and.w	r3, r3, #16
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d008      	beq.n	80084ca <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	785b      	ldrb	r3, [r3, #1]
 80084bc:	f023 0310 	bic.w	r3, r3, #16
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	330a      	adds	r3, #10
 80084c4:	b2da      	uxtb	r2, r3
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d11c      	bne.n	800850a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	78db      	ldrb	r3, [r3, #3]
 80084d4:	4618      	mov	r0, r3
 80084d6:	f000 fb23 	bl	8008b20 <RTC_ByteToBcd2>
 80084da:	4603      	mov	r3, r0
 80084dc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	785b      	ldrb	r3, [r3, #1]
 80084e2:	4618      	mov	r0, r3
 80084e4:	f000 fb1c 	bl	8008b20 <RTC_ByteToBcd2>
 80084e8:	4603      	mov	r3, r0
 80084ea:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80084ec:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	789b      	ldrb	r3, [r3, #2]
 80084f2:	4618      	mov	r0, r3
 80084f4:	f000 fb14 	bl	8008b20 <RTC_ByteToBcd2>
 80084f8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80084fa:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008504:	4313      	orrs	r3, r2
 8008506:	617b      	str	r3, [r7, #20]
 8008508:	e00e      	b.n	8008528 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	78db      	ldrb	r3, [r3, #3]
 800850e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	785b      	ldrb	r3, [r3, #1]
 8008514:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008516:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800851c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008524:	4313      	orrs	r3, r2
 8008526:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	22ca      	movs	r2, #202	; 0xca
 800852e:	625a      	str	r2, [r3, #36]	; 0x24
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2253      	movs	r2, #83	; 0x53
 8008536:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f000 fa7f 	bl	8008a3c <RTC_EnterInitMode>
 800853e:	4603      	mov	r3, r0
 8008540:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008542:	7cfb      	ldrb	r3, [r7, #19]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10a      	bne.n	800855e <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	6979      	ldr	r1, [r7, #20]
 800854e:	4b0e      	ldr	r3, [pc, #56]	; (8008588 <HAL_RTC_SetDate+0x10c>)
 8008550:	400b      	ands	r3, r1
 8008552:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f000 faa5 	bl	8008aa4 <RTC_ExitInitMode>
 800855a:	4603      	mov	r3, r0
 800855c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	22ff      	movs	r2, #255	; 0xff
 8008564:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008566:	7cfb      	ldrb	r3, [r7, #19]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d103      	bne.n	8008574 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2200      	movs	r2, #0
 8008578:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800857c:	7cfb      	ldrb	r3, [r7, #19]


}
 800857e:	4618      	mov	r0, r3
 8008580:	371c      	adds	r7, #28
 8008582:	46bd      	mov	sp, r7
 8008584:	bd90      	pop	{r4, r7, pc}
 8008586:	bf00      	nop
 8008588:	00ffff3f 	.word	0x00ffff3f

0800858c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800858c:	b590      	push	{r4, r7, lr}
 800858e:	b089      	sub	sp, #36	; 0x24
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d101      	bne.n	80085a6 <HAL_RTC_SetAlarm_IT+0x1a>
 80085a2:	2302      	movs	r3, #2
 80085a4:	e135      	b.n	8008812 <HAL_RTC_SetAlarm_IT+0x286>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2202      	movs	r2, #2
 80085b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d137      	bne.n	800862c <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d102      	bne.n	80085d0 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	2200      	movs	r2, #0
 80085ce:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	4618      	mov	r0, r3
 80085d6:	f000 faa3 	bl	8008b20 <RTC_ByteToBcd2>
 80085da:	4603      	mov	r3, r0
 80085dc:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	785b      	ldrb	r3, [r3, #1]
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 fa9c 	bl	8008b20 <RTC_ByteToBcd2>
 80085e8:	4603      	mov	r3, r0
 80085ea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80085ec:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	789b      	ldrb	r3, [r3, #2]
 80085f2:	4618      	mov	r0, r3
 80085f4:	f000 fa94 	bl	8008b20 <RTC_ByteToBcd2>
 80085f8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80085fa:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	78db      	ldrb	r3, [r3, #3]
 8008602:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8008604:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800860e:	4618      	mov	r0, r3
 8008610:	f000 fa86 	bl	8008b20 <RTC_ByteToBcd2>
 8008614:	4603      	mov	r3, r0
 8008616:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8008618:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008620:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008626:	4313      	orrs	r3, r2
 8008628:	61fb      	str	r3, [r7, #28]
 800862a:	e023      	b.n	8008674 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008636:	2b00      	cmp	r3, #0
 8008638:	d102      	bne.n	8008640 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	2200      	movs	r2, #0
 800863e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	041a      	lsls	r2, r3, #16
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	785b      	ldrb	r3, [r3, #1]
 800864a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 800864c:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 800864e:	68ba      	ldr	r2, [r7, #8]
 8008650:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8008652:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	78db      	ldrb	r3, [r3, #3]
 8008658:	059b      	lsls	r3, r3, #22
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 800865a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008662:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8008664:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 800866a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8008670:	4313      	orrs	r3, r2
 8008672:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	685a      	ldr	r2, [r3, #4]
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	699b      	ldr	r3, [r3, #24]
 800867c:	4313      	orrs	r3, r2
 800867e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	22ca      	movs	r2, #202	; 0xca
 8008686:	625a      	str	r2, [r3, #36]	; 0x24
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2253      	movs	r2, #83	; 0x53
 800868e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008698:	d14a      	bne.n	8008730 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	689a      	ldr	r2, [r3, #8]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086a8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	b2da      	uxtb	r2, r3
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80086ba:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80086bc:	f7f8 fd44 	bl	8001148 <HAL_GetTick>
 80086c0:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
  #if defined(RTC_ICSR_ALRAWF)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
  #endif /* RTC_ICSR_ALRAWF */
  #if defined(RTC_ISR_ALRAWF)
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80086c2:	e015      	b.n	80086f0 <HAL_RTC_SetAlarm_IT+0x164>
  #endif /* RTC_ISR_ALRAWF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80086c4:	f7f8 fd40 	bl	8001148 <HAL_GetTick>
 80086c8:	4602      	mov	r2, r0
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086d2:	d90d      	bls.n	80086f0 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	22ff      	movs	r2, #255	; 0xff
 80086da:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2203      	movs	r2, #3
 80086e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80086ec:	2303      	movs	r3, #3
 80086ee:	e090      	b.n	8008812 <HAL_RTC_SetAlarm_IT+0x286>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d0e2      	beq.n	80086c4 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	69fa      	ldr	r2, [r7, #28]
 8008704:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	69ba      	ldr	r2, [r7, #24]
 800870c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	689a      	ldr	r2, [r3, #8]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800871c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	689a      	ldr	r2, [r3, #8]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800872c:	609a      	str	r2, [r3, #8]
 800872e:	e049      	b.n	80087c4 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	689a      	ldr	r2, [r3, #8]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800873e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	b2da      	uxtb	r2, r3
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008750:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008752:	f7f8 fcf9 	bl	8001148 <HAL_GetTick>
 8008756:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
#if defined(RTC_ICSR_ALRBWF)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
#endif /* RTC_ICSR_ALRBWF */
#if defined(RTC_ISR_ALRBWF)
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008758:	e015      	b.n	8008786 <HAL_RTC_SetAlarm_IT+0x1fa>
#endif /* RTC_ISR_ALRBWF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800875a:	f7f8 fcf5 	bl	8001148 <HAL_GetTick>
 800875e:	4602      	mov	r2, r0
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008768:	d90d      	bls.n	8008786 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	22ff      	movs	r2, #255	; 0xff
 8008770:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2203      	movs	r2, #3
 8008776:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2200      	movs	r2, #0
 800877e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8008782:	2303      	movs	r3, #3
 8008784:	e045      	b.n	8008812 <HAL_RTC_SetAlarm_IT+0x286>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	f003 0302 	and.w	r3, r3, #2
 8008790:	2b00      	cmp	r3, #0
 8008792:	d0e2      	beq.n	800875a <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	69fa      	ldr	r2, [r7, #28]
 800879a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	69ba      	ldr	r2, [r7, #24]
 80087a2:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	689a      	ldr	r2, [r3, #8]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087b2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	689a      	ldr	r2, [r3, #8]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80087c2:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 80087c4:	f7f8 fe58 	bl	8001478 <HAL_GetCurrentCPUID>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b03      	cmp	r3, #3
 80087cc:	d106      	bne.n	80087dc <HAL_RTC_SetAlarm_IT+0x250>
  {
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80087ce:	4b13      	ldr	r3, [pc, #76]	; (800881c <HAL_RTC_SetAlarm_IT+0x290>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a12      	ldr	r2, [pc, #72]	; (800881c <HAL_RTC_SetAlarm_IT+0x290>)
 80087d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087d8:	6013      	str	r3, [r2, #0]
 80087da:	e005      	b.n	80087e8 <HAL_RTC_SetAlarm_IT+0x25c>
  }
  else
  {
    __HAL_RTC_ALARM_EXTID2_ENABLE_IT();
 80087dc:	4b10      	ldr	r3, [pc, #64]	; (8008820 <HAL_RTC_SetAlarm_IT+0x294>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a0f      	ldr	r2, [pc, #60]	; (8008820 <HAL_RTC_SetAlarm_IT+0x294>)
 80087e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087e6:	6013      	str	r3, [r2, #0]
  }
#else  /* SINGLE_CORE */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
#endif

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80087e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80087f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087f6:	6013      	str	r3, [r2, #0]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	22ff      	movs	r2, #255	; 0xff
 80087fe:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3724      	adds	r7, #36	; 0x24
 8008816:	46bd      	mov	sp, r7
 8008818:	bd90      	pop	{r4, r7, pc}
 800881a:	bf00      	nop
 800881c:	58000080 	.word	0x58000080
 8008820:	580000c0 	.word	0x580000c0

08008824 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008834:	2b01      	cmp	r3, #1
 8008836:	d101      	bne.n	800883c <HAL_RTC_DeactivateAlarm+0x18>
 8008838:	2302      	movs	r3, #2
 800883a:	e083      	b.n	8008944 <HAL_RTC_DeactivateAlarm+0x120>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2202      	movs	r2, #2
 8008848:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	22ca      	movs	r2, #202	; 0xca
 8008852:	625a      	str	r2, [r3, #36]	; 0x24
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2253      	movs	r2, #83	; 0x53
 800885a:	625a      	str	r2, [r3, #36]	; 0x24

  if(Alarm == RTC_ALARM_A)
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008862:	d131      	bne.n	80088c8 <HAL_RTC_DeactivateAlarm+0xa4>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	689a      	ldr	r2, [r3, #8]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008872:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	689a      	ldr	r2, [r3, #8]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008882:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8008884:	f7f8 fc60 	bl	8001148 <HAL_GetTick>
 8008888:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
#if defined(RTC_ICSR_ALRAWF)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
#endif /* RTC_ICSR_ALRAWF */
#if defined(RTC_ISR_ALRAWF)
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800888a:	e015      	b.n	80088b8 <HAL_RTC_DeactivateAlarm+0x94>
#endif /* RTC_ISR_ALRAWF */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800888c:	f7f8 fc5c 	bl	8001148 <HAL_GetTick>
 8008890:	4602      	mov	r2, r0
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	1ad3      	subs	r3, r2, r3
 8008896:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800889a:	d90d      	bls.n	80088b8 <HAL_RTC_DeactivateAlarm+0x94>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	22ff      	movs	r2, #255	; 0xff
 80088a2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2203      	movs	r2, #3
 80088a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80088b4:	2303      	movs	r3, #3
 80088b6:	e045      	b.n	8008944 <HAL_RTC_DeactivateAlarm+0x120>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	f003 0301 	and.w	r3, r3, #1
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d0e2      	beq.n	800888c <HAL_RTC_DeactivateAlarm+0x68>
 80088c6:	e030      	b.n	800892a <HAL_RTC_DeactivateAlarm+0x106>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	689a      	ldr	r2, [r3, #8]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80088d6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	689a      	ldr	r2, [r3, #8]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80088e6:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80088e8:	f7f8 fc2e 	bl	8001148 <HAL_GetTick>
 80088ec:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
#if defined(RTC_ICSR_ALRBWF)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
#endif /* RTC_ICSR_ALRBWF */
#if defined(RTC_ISR_ALRBWF)
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80088ee:	e015      	b.n	800891c <HAL_RTC_DeactivateAlarm+0xf8>
#endif /* RTC_ISR_ALRBWF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80088f0:	f7f8 fc2a 	bl	8001148 <HAL_GetTick>
 80088f4:	4602      	mov	r2, r0
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088fe:	d90d      	bls.n	800891c <HAL_RTC_DeactivateAlarm+0xf8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	22ff      	movs	r2, #255	; 0xff
 8008906:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2203      	movs	r2, #3
 800890c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8008918:	2303      	movs	r3, #3
 800891a:	e013      	b.n	8008944 <HAL_RTC_DeactivateAlarm+0x120>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	f003 0302 	and.w	r3, r3, #2
 8008926:	2b00      	cmp	r3, #0
 8008928:	d0e2      	beq.n	80088f0 <HAL_RTC_DeactivateAlarm+0xcc>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	22ff      	movs	r2, #255	; 0xff
 8008930:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2201      	movs	r2, #1
 8008936:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3710      	adds	r7, #16
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
#if defined(DUAL_CORE)
  if(HAL_GetCurrentCPUID() == CM7_CPUID)
 8008954:	f7f8 fd90 	bl	8001478 <HAL_GetCurrentCPUID>
 8008958:	4603      	mov	r3, r0
 800895a:	2b03      	cmp	r3, #3
 800895c:	d104      	bne.n	8008968 <HAL_RTC_AlarmIRQHandler+0x1c>
  {
    __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800895e:	4b22      	ldr	r3, [pc, #136]	; (80089e8 <HAL_RTC_AlarmIRQHandler+0x9c>)
 8008960:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008964:	609a      	str	r2, [r3, #8]
 8008966:	e003      	b.n	8008970 <HAL_RTC_AlarmIRQHandler+0x24>
  }
  else
  {
    __HAL_RTC_ALARM_EXTID2_CLEAR_FLAG();
 8008968:	4b20      	ldr	r3, [pc, #128]	; (80089ec <HAL_RTC_AlarmIRQHandler+0xa0>)
 800896a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800896e:	609a      	str	r2, [r3, #8]
  }
#endif /* RTC_MISR_ALRBMF */

#if defined(RTC_ISR_ALRAF)
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800897a:	2b00      	cmp	r3, #0
 800897c:	d012      	beq.n	80089a4 <HAL_RTC_AlarmIRQHandler+0x58>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00b      	beq.n	80089a4 <HAL_RTC_AlarmIRQHandler+0x58>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	b2da      	uxtb	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800899c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
      HAL_RTC_AlarmAEventCallback(hrtc);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f015 fa9a 	bl	801ded8 <HAL_RTC_AlarmAEventCallback>
  }
#endif /* RTC_ISR_ALRAF */

#if defined(RTC_ISR_ALRBF)
  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d012      	beq.n	80089d8 <HAL_RTC_AlarmIRQHandler+0x8c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00b      	beq.n	80089d8 <HAL_RTC_AlarmIRQHandler+0x8c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	b2da      	uxtb	r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f462 7220 	orn	r2, r2, #640	; 0x280
 80089d0:	60da      	str	r2, [r3, #12]

      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f015 fab4 	bl	801df40 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* RTC_ISR_ALRBF */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80089e0:	bf00      	nop
 80089e2:	3708      	adds	r7, #8
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	58000080 	.word	0x58000080
 80089ec:	580000c0 	.word	0x580000c0

080089f0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	68da      	ldr	r2, [r3, #12]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008a06:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8008a08:	f7f8 fb9e 	bl	8001148 <HAL_GetTick>
 8008a0c:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008a0e:	e009      	b.n	8008a24 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008a10:	f7f8 fb9a 	bl	8001148 <HAL_GetTick>
 8008a14:	4602      	mov	r2, r0
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	1ad3      	subs	r3, r2, r3
 8008a1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a1e:	d901      	bls.n	8008a24 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8008a20:	2303      	movs	r3, #3
 8008a22:	e007      	b.n	8008a34 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	f003 0320 	and.w	r3, r3, #32
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d0ee      	beq.n	8008a10 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a44:	2300      	movs	r3, #0
 8008a46:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d120      	bne.n	8008a98 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a5e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008a60:	f7f8 fb72 	bl	8001148 <HAL_GetTick>
 8008a64:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008a66:	e00d      	b.n	8008a84 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008a68:	f7f8 fb6e 	bl	8001148 <HAL_GetTick>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a76:	d905      	bls.n	8008a84 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008a78:	2303      	movs	r3, #3
 8008a7a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2203      	movs	r2, #3
 8008a80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d102      	bne.n	8008a98 <RTC_EnterInitMode+0x5c>
 8008a92:	7bfb      	ldrb	r3, [r7, #15]
 8008a94:	2b03      	cmp	r3, #3
 8008a96:	d1e7      	bne.n	8008a68 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8008a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
	...

08008aa4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008aac:	2300      	movs	r3, #0
 8008aae:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8008ab0:	4b1a      	ldr	r3, [pc, #104]	; (8008b1c <RTC_ExitInitMode+0x78>)
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	4a19      	ldr	r2, [pc, #100]	; (8008b1c <RTC_ExitInitMode+0x78>)
 8008ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008aba:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008abc:	4b17      	ldr	r3, [pc, #92]	; (8008b1c <RTC_ExitInitMode+0x78>)
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	f003 0320 	and.w	r3, r3, #32
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d10c      	bne.n	8008ae2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f7ff ff91 	bl	80089f0 <HAL_RTC_WaitForSynchro>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d01e      	beq.n	8008b12 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2203      	movs	r2, #3
 8008ad8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008adc:	2303      	movs	r3, #3
 8008ade:	73fb      	strb	r3, [r7, #15]
 8008ae0:	e017      	b.n	8008b12 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008ae2:	4b0e      	ldr	r3, [pc, #56]	; (8008b1c <RTC_ExitInitMode+0x78>)
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	4a0d      	ldr	r2, [pc, #52]	; (8008b1c <RTC_ExitInitMode+0x78>)
 8008ae8:	f023 0320 	bic.w	r3, r3, #32
 8008aec:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f7ff ff7e 	bl	80089f0 <HAL_RTC_WaitForSynchro>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d005      	beq.n	8008b06 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2203      	movs	r2, #3
 8008afe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008b02:	2303      	movs	r3, #3
 8008b04:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008b06:	4b05      	ldr	r3, [pc, #20]	; (8008b1c <RTC_ExitInitMode+0x78>)
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	4a04      	ldr	r2, [pc, #16]	; (8008b1c <RTC_ExitInitMode+0x78>)
 8008b0c:	f043 0320 	orr.w	r3, r3, #32
 8008b10:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3710      	adds	r7, #16
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}
 8008b1c:	58004000 	.word	0x58004000

08008b20 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b085      	sub	sp, #20
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	4603      	mov	r3, r0
 8008b28:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8008b2e:	79fb      	ldrb	r3, [r7, #7]
 8008b30:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8008b32:	e005      	b.n	8008b40 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	3301      	adds	r3, #1
 8008b38:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8008b3a:	7afb      	ldrb	r3, [r7, #11]
 8008b3c:	3b0a      	subs	r3, #10
 8008b3e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8008b40:	7afb      	ldrb	r3, [r7, #11]
 8008b42:	2b09      	cmp	r3, #9
 8008b44:	d8f6      	bhi.n	8008b34 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	011b      	lsls	r3, r3, #4
 8008b4c:	b2da      	uxtb	r2, r3
 8008b4e:	7afb      	ldrb	r3, [r7, #11]
 8008b50:	4313      	orrs	r3, r2
 8008b52:	b2db      	uxtb	r3, r3
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3714      	adds	r7, #20
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b08a      	sub	sp, #40	; 0x28
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d101      	bne.n	8008b72 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e075      	b.n	8008c5e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d105      	bne.n	8008b8a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f015 faeb 	bl	801e160 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2204      	movs	r2, #4
 8008b8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f868 	bl	8008c68 <HAL_SD_InitCard>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d001      	beq.n	8008ba2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e05d      	b.n	8008c5e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008ba2:	f107 0308 	add.w	r3, r7, #8
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 ff71 	bl	8009a90 <HAL_SD_GetCardStatus>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d001      	beq.n	8008bb8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	e052      	b.n	8008c5e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008bb8:	7e3b      	ldrb	r3, [r7, #24]
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008bbe:	7e7b      	ldrb	r3, [r7, #25]
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d10a      	bne.n	8008be2 <HAL_SD_Init+0x82>
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d102      	bne.n	8008bd8 <HAL_SD_Init+0x78>
 8008bd2:	6a3b      	ldr	r3, [r7, #32]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d004      	beq.n	8008be2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bde:	659a      	str	r2, [r3, #88]	; 0x58
 8008be0:	e00b      	b.n	8008bfa <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d104      	bne.n	8008bf4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008bf0:	659a      	str	r2, [r3, #88]	; 0x58
 8008bf2:	e002      	b.n	8008bfa <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	4619      	mov	r1, r3
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f001 f82f 	bl	8009c64 <HAL_SD_ConfigWideBusOperation>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d001      	beq.n	8008c10 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e026      	b.n	8008c5e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008c10:	f7f8 fa9a 	bl	8001148 <HAL_GetTick>
 8008c14:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008c16:	e011      	b.n	8008c3c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008c18:	f7f8 fa96 	bl	8001148 <HAL_GetTick>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	1ad3      	subs	r3, r2, r3
 8008c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c26:	d109      	bne.n	8008c3c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008c2e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2201      	movs	r2, #1
 8008c34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8008c38:	2303      	movs	r3, #3
 8008c3a:	e010      	b.n	8008c5e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f001 f923 	bl	8009e88 <HAL_SD_GetCardState>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b04      	cmp	r3, #4
 8008c46:	d1e7      	bne.n	8008c18 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3728      	adds	r7, #40	; 0x28
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
	...

08008c68 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008c68:	b590      	push	{r4, r7, lr}
 8008c6a:	b08d      	sub	sp, #52	; 0x34
 8008c6c:	af02      	add	r7, sp, #8
 8008c6e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 8008c70:	2300      	movs	r3, #0
 8008c72:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008c74:	2300      	movs	r3, #0
 8008c76:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008c80:	2300      	movs	r3, #0
 8008c82:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008c84:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008c88:	f7fe f89c 	bl	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008c8c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8008c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d109      	bne.n	8008ca8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008ca2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e06a      	b.n	8008d7e <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008caa:	0a1b      	lsrs	r3, r3, #8
 8008cac:	4a36      	ldr	r2, [pc, #216]	; (8008d88 <HAL_SD_InitCard+0x120>)
 8008cae:	fba2 2303 	umull	r2, r3, r2, r3
 8008cb2:	091b      	lsrs	r3, r3, #4
 8008cb4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681c      	ldr	r4, [r3, #0]
 8008cba:	466a      	mov	r2, sp
 8008cbc:	f107 0318 	add.w	r3, r7, #24
 8008cc0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008cc4:	e882 0003 	stmia.w	r2, {r0, r1}
 8008cc8:	f107 030c 	add.w	r3, r7, #12
 8008ccc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008cce:	4620      	mov	r0, r4
 8008cd0:	f004 fde2 	bl	800d898 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f004 fe25 	bl	800d928 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008cde:	69fb      	ldr	r3, [r7, #28]
 8008ce0:	005b      	lsls	r3, r3, #1
 8008ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ce8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8008cea:	4a28      	ldr	r2, [pc, #160]	; (8008d8c <HAL_SD_InitCard+0x124>)
 8008cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7f8 fa33 	bl	8001160 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f001 f9b2 	bl	800a064 <SD_PowerON>
 8008d00:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d02:	6a3b      	ldr	r3, [r7, #32]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d00b      	beq.n	8008d20 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d14:	6a3b      	ldr	r3, [r7, #32]
 8008d16:	431a      	orrs	r2, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e02e      	b.n	8008d7e <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f001 f8d1 	bl	8009ec8 <SD_InitCard>
 8008d26:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d28:	6a3b      	ldr	r3, [r7, #32]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00b      	beq.n	8008d46 <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2201      	movs	r2, #1
 8008d32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d3a:	6a3b      	ldr	r3, [r7, #32]
 8008d3c:	431a      	orrs	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008d42:	2301      	movs	r3, #1
 8008d44:	e01b      	b.n	8008d7e <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f004 fe80 	bl	800da54 <SDMMC_CmdBlockLength>
 8008d54:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d56:	6a3b      	ldr	r3, [r7, #32]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00f      	beq.n	8008d7c <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a0b      	ldr	r2, [pc, #44]	; (8008d90 <HAL_SD_InitCard+0x128>)
 8008d62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d68:	6a3b      	ldr	r3, [r7, #32]
 8008d6a:	431a      	orrs	r2, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e000      	b.n	8008d7e <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	372c      	adds	r7, #44	; 0x2c
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd90      	pop	{r4, r7, pc}
 8008d86:	bf00      	nop
 8008d88:	014f8b59 	.word	0x014f8b59
 8008d8c:	00012110 	.word	0x00012110
 8008d90:	1fe00fff 	.word	0x1fe00fff

08008d94 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b092      	sub	sp, #72	; 0x48
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	607a      	str	r2, [r7, #4]
 8008da0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008da2:	f7f8 f9d1 	bl	8001148 <HAL_GetTick>
 8008da6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d107      	bne.n	8008dc6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e167      	b.n	8009096 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	f040 815a 	bne.w	8009088 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008dda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	441a      	add	r2, r3
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d907      	bls.n	8008df8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dec:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	e14e      	b.n	8009096 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2203      	movs	r2, #3
 8008dfc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2200      	movs	r2, #0
 8008e06:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d002      	beq.n	8008e16 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e12:	025b      	lsls	r3, r3, #9
 8008e14:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008e16:	f04f 33ff 	mov.w	r3, #4294967295
 8008e1a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	025b      	lsls	r3, r3, #9
 8008e20:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008e22:	2390      	movs	r3, #144	; 0x90
 8008e24:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008e26:	2302      	movs	r3, #2
 8008e28:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f107 0214 	add.w	r2, r7, #20
 8008e3a:	4611      	mov	r1, r2
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f004 fddd 	bl	800d9fc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	68da      	ldr	r2, [r3, #12]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e50:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d90a      	bls.n	8008e6e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2202      	movs	r2, #2
 8008e5c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008e64:	4618      	mov	r0, r3
 8008e66:	f004 fe3b 	bl	800dae0 <SDMMC_CmdReadMultiBlock>
 8008e6a:	6478      	str	r0, [r7, #68]	; 0x44
 8008e6c:	e009      	b.n	8008e82 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2201      	movs	r2, #1
 8008e72:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f004 fe0d 	bl	800da9a <SDMMC_CmdReadSingleBlock>
 8008e80:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d012      	beq.n	8008eae <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a84      	ldr	r2, [pc, #528]	; (80090a0 <HAL_SD_ReadBlocks+0x30c>)
 8008e8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e96:	431a      	orrs	r2, r3
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e0f3      	b.n	8009096 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008eb2:	e058      	b.n	8008f66 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d033      	beq.n	8008f2a <HAL_SD_ReadBlocks+0x196>
 8008ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ec4:	2b1f      	cmp	r3, #31
 8008ec6:	d930      	bls.n	8008f2a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8008ec8:	2300      	movs	r3, #0
 8008eca:	643b      	str	r3, [r7, #64]	; 0x40
 8008ecc:	e027      	b.n	8008f1e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f004 fd0a 	bl	800d8ec <SDMMC_ReadFIFO>
 8008ed8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008edc:	b2da      	uxtb	r2, r3
 8008ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ee0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eea:	0a1b      	lsrs	r3, r3, #8
 8008eec:	b2da      	uxtb	r2, r3
 8008eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ef0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efa:	0c1b      	lsrs	r3, r3, #16
 8008efc:	b2da      	uxtb	r2, r3
 8008efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f00:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f04:	3301      	adds	r3, #1
 8008f06:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0a:	0e1b      	lsrs	r3, r3, #24
 8008f0c:	b2da      	uxtb	r2, r3
 8008f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f10:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f14:	3301      	adds	r3, #1
 8008f16:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8008f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	643b      	str	r3, [r7, #64]	; 0x40
 8008f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f20:	2b07      	cmp	r3, #7
 8008f22:	d9d4      	bls.n	8008ece <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f26:	3b20      	subs	r3, #32
 8008f28:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8008f2a:	f7f8 f90d 	bl	8001148 <HAL_GetTick>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f32:	1ad3      	subs	r3, r2, r3
 8008f34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d902      	bls.n	8008f40 <HAL_SD_ReadBlocks+0x1ac>
 8008f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d112      	bne.n	8008f66 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a56      	ldr	r2, [pc, #344]	; (80090a0 <HAL_SD_ReadBlocks+0x30c>)
 8008f46:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f4c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8008f62:	2303      	movs	r3, #3
 8008f64:	e097      	b.n	8009096 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f6c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d09f      	beq.n	8008eb4 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	68da      	ldr	r2, [r3, #12]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f82:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d022      	beq.n	8008fd8 <HAL_SD_ReadBlocks+0x244>
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d91f      	bls.n	8008fd8 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f9c:	2b03      	cmp	r3, #3
 8008f9e:	d01b      	beq.n	8008fd8 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f004 fe05 	bl	800dbb4 <SDMMC_CmdStopTransfer>
 8008faa:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8008fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d012      	beq.n	8008fd8 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a3a      	ldr	r2, [pc, #232]	; (80090a0 <HAL_SD_ReadBlocks+0x30c>)
 8008fb8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fc0:	431a      	orrs	r2, r3
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e05e      	b.n	8009096 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fde:	f003 0308 	and.w	r3, r3, #8
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d012      	beq.n	800900c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a2d      	ldr	r2, [pc, #180]	; (80090a0 <HAL_SD_ReadBlocks+0x30c>)
 8008fec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ff2:	f043 0208 	orr.w	r2, r3, #8
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8009008:	2301      	movs	r3, #1
 800900a:	e044      	b.n	8009096 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009012:	f003 0302 	and.w	r3, r3, #2
 8009016:	2b00      	cmp	r3, #0
 8009018:	d012      	beq.n	8009040 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a20      	ldr	r2, [pc, #128]	; (80090a0 <HAL_SD_ReadBlocks+0x30c>)
 8009020:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009026:	f043 0202 	orr.w	r2, r3, #2
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2201      	movs	r2, #1
 8009032:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2200      	movs	r2, #0
 800903a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800903c:	2301      	movs	r3, #1
 800903e:	e02a      	b.n	8009096 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009046:	f003 0320 	and.w	r3, r3, #32
 800904a:	2b00      	cmp	r3, #0
 800904c:	d012      	beq.n	8009074 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a13      	ldr	r2, [pc, #76]	; (80090a0 <HAL_SD_ReadBlocks+0x30c>)
 8009054:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800905a:	f043 0220 	orr.w	r2, r3, #32
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2201      	movs	r2, #1
 8009066:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2200      	movs	r2, #0
 800906e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	e010      	b.n	8009096 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a0a      	ldr	r2, [pc, #40]	; (80090a4 <HAL_SD_ReadBlocks+0x310>)
 800907a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8009084:	2300      	movs	r3, #0
 8009086:	e006      	b.n	8009096 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800908c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009094:	2301      	movs	r3, #1
  }
}
 8009096:	4618      	mov	r0, r3
 8009098:	3748      	adds	r7, #72	; 0x48
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	1fe00fff 	.word	0x1fe00fff
 80090a4:	18000f3a 	.word	0x18000f3a

080090a8 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                     uint32_t Timeout)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b092      	sub	sp, #72	; 0x48
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	60b9      	str	r1, [r7, #8]
 80090b2:	607a      	str	r2, [r7, #4]
 80090b4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80090b6:	f7f8 f847 	bl	8001148 <HAL_GetTick>
 80090ba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d107      	bne.n	80090da <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	e16b      	b.n	80093b2 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	f040 815e 	bne.w	80093a4 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2200      	movs	r2, #0
 80090ec:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80090ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	441a      	add	r2, r3
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d907      	bls.n	800910c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009100:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009108:	2301      	movs	r3, #1
 800910a:	e152      	b.n	80093b2 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2203      	movs	r2, #3
 8009110:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2200      	movs	r2, #0
 800911a:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009120:	2b01      	cmp	r3, #1
 8009122:	d002      	beq.n	800912a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8009124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009126:	025b      	lsls	r3, r3, #9
 8009128:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800912a:	f04f 33ff 	mov.w	r3, #4294967295
 800912e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	025b      	lsls	r3, r3, #9
 8009134:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009136:	2390      	movs	r3, #144	; 0x90
 8009138:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800913a:	2300      	movs	r3, #0
 800913c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800913e:	2300      	movs	r3, #0
 8009140:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009142:	2300      	movs	r3, #0
 8009144:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f107 0218 	add.w	r2, r7, #24
 800914e:	4611      	mov	r1, r2
 8009150:	4618      	mov	r0, r3
 8009152:	f004 fc53 	bl	800d9fc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	68da      	ldr	r2, [r3, #12]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009164:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	2b01      	cmp	r3, #1
 800916a:	d90a      	bls.n	8009182 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2220      	movs	r2, #32
 8009170:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009178:	4618      	mov	r0, r3
 800917a:	f004 fcf7 	bl	800db6c <SDMMC_CmdWriteMultiBlock>
 800917e:	6478      	str	r0, [r7, #68]	; 0x44
 8009180:	e009      	b.n	8009196 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2210      	movs	r2, #16
 8009186:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800918e:	4618      	mov	r0, r3
 8009190:	f004 fcc9 	bl	800db26 <SDMMC_CmdWriteSingleBlock>
 8009194:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8009196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009198:	2b00      	cmp	r3, #0
 800919a:	d012      	beq.n	80091c2 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a86      	ldr	r2, [pc, #536]	; (80093bc <HAL_SD_WriteBlocks+0x314>)
 80091a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091aa:	431a      	orrs	r2, r3
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2200      	movs	r2, #0
 80091bc:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80091be:	2301      	movs	r3, #1
 80091c0:	e0f7      	b.n	80093b2 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80091c6:	e05c      	b.n	8009282 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d037      	beq.n	8009246 <HAL_SD_WriteBlocks+0x19e>
 80091d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091d8:	2b1f      	cmp	r3, #31
 80091da:	d934      	bls.n	8009246 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 80091dc:	2300      	movs	r3, #0
 80091de:	643b      	str	r3, [r7, #64]	; 0x40
 80091e0:	e02b      	b.n	800923a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 80091e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80091e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ea:	3301      	adds	r3, #1
 80091ec:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 80091ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	021a      	lsls	r2, r3, #8
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	4313      	orrs	r3, r2
 80091f8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80091fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091fc:	3301      	adds	r3, #1
 80091fe:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	041a      	lsls	r2, r3, #16
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	4313      	orrs	r3, r2
 800920a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800920c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800920e:	3301      	adds	r3, #1
 8009210:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	061a      	lsls	r2, r3, #24
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	4313      	orrs	r3, r2
 800921c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800921e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009220:	3301      	adds	r3, #1
 8009222:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f107 0214 	add.w	r2, r7, #20
 800922c:	4611      	mov	r1, r2
 800922e:	4618      	mov	r0, r3
 8009230:	f004 fb69 	bl	800d906 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8009234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009236:	3301      	adds	r3, #1
 8009238:	643b      	str	r3, [r7, #64]	; 0x40
 800923a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800923c:	2b07      	cmp	r3, #7
 800923e:	d9d0      	bls.n	80091e2 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8009240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009242:	3b20      	subs	r3, #32
 8009244:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8009246:	f7f7 ff7f 	bl	8001148 <HAL_GetTick>
 800924a:	4602      	mov	r2, r0
 800924c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924e:	1ad3      	subs	r3, r2, r3
 8009250:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009252:	429a      	cmp	r2, r3
 8009254:	d902      	bls.n	800925c <HAL_SD_WriteBlocks+0x1b4>
 8009256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009258:	2b00      	cmp	r3, #0
 800925a:	d112      	bne.n	8009282 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a56      	ldr	r2, [pc, #344]	; (80093bc <HAL_SD_WriteBlocks+0x314>)
 8009262:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800926a:	431a      	orrs	r2, r3
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2201      	movs	r2, #1
 8009274:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2200      	movs	r2, #0
 800927c:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 800927e:	2303      	movs	r3, #3
 8009280:	e097      	b.n	80093b2 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009288:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800928c:	2b00      	cmp	r3, #0
 800928e:	d09b      	beq.n	80091c8 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	68da      	ldr	r2, [r3, #12]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800929e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d022      	beq.n	80092f4 <HAL_SD_WriteBlocks+0x24c>
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d91f      	bls.n	80092f4 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b8:	2b03      	cmp	r3, #3
 80092ba:	d01b      	beq.n	80092f4 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4618      	mov	r0, r3
 80092c2:	f004 fc77 	bl	800dbb4 <SDMMC_CmdStopTransfer>
 80092c6:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 80092c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d012      	beq.n	80092f4 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a3a      	ldr	r2, [pc, #232]	; (80093bc <HAL_SD_WriteBlocks+0x314>)
 80092d4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092dc:	431a      	orrs	r2, r3
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2201      	movs	r2, #1
 80092e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2200      	movs	r2, #0
 80092ee:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	e05e      	b.n	80093b2 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092fa:	f003 0308 	and.w	r3, r3, #8
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d012      	beq.n	8009328 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a2d      	ldr	r2, [pc, #180]	; (80093bc <HAL_SD_WriteBlocks+0x314>)
 8009308:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800930e:	f043 0208 	orr.w	r2, r3, #8
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2201      	movs	r2, #1
 800931a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2200      	movs	r2, #0
 8009322:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	e044      	b.n	80093b2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800932e:	f003 0302 	and.w	r3, r3, #2
 8009332:	2b00      	cmp	r3, #0
 8009334:	d012      	beq.n	800935c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a20      	ldr	r2, [pc, #128]	; (80093bc <HAL_SD_WriteBlocks+0x314>)
 800933c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009342:	f043 0202 	orr.w	r2, r3, #2
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2201      	movs	r2, #1
 800934e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2200      	movs	r2, #0
 8009356:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8009358:	2301      	movs	r3, #1
 800935a:	e02a      	b.n	80093b2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009362:	f003 0310 	and.w	r3, r3, #16
 8009366:	2b00      	cmp	r3, #0
 8009368:	d012      	beq.n	8009390 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4a13      	ldr	r2, [pc, #76]	; (80093bc <HAL_SD_WriteBlocks+0x314>)
 8009370:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009376:	f043 0210 	orr.w	r2, r3, #16
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2201      	movs	r2, #1
 8009382:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2200      	movs	r2, #0
 800938a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	e010      	b.n	80093b2 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a0a      	ldr	r2, [pc, #40]	; (80093c0 <HAL_SD_WriteBlocks+0x318>)
 8009396:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 80093a0:	2300      	movs	r3, #0
 80093a2:	e006      	b.n	80093b2 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093a8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
  }
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3748      	adds	r7, #72	; 0x48
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	1fe00fff 	.word	0x1fe00fff
 80093c0:	18000f3a 	.word	0x18000f3a

080093c4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d008      	beq.n	80093f2 <HAL_SD_IRQHandler+0x2e>
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f003 0308 	and.w	r3, r3, #8
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d003      	beq.n	80093f2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f001 f926 	bl	800a63c <SD_Read_IT>
 80093f0:	e19a      	b.n	8009728 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	f000 80ac 	beq.w	800955a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f44f 7280 	mov.w	r2, #256	; 0x100
 800940a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	4b59      	ldr	r3, [pc, #356]	; (800957c <HAL_SD_IRQHandler+0x1b8>)
 8009418:	400b      	ands	r3, r1
 800941a:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800942a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	68da      	ldr	r2, [r3, #12]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800943a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f003 0308 	and.w	r3, r3, #8
 8009442:	2b00      	cmp	r3, #0
 8009444:	d038      	beq.n	80094b8 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f003 0302 	and.w	r3, r3, #2
 800944c:	2b00      	cmp	r3, #0
 800944e:	d104      	bne.n	800945a <HAL_SD_IRQHandler+0x96>
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f003 0320 	and.w	r3, r3, #32
 8009456:	2b00      	cmp	r3, #0
 8009458:	d011      	beq.n	800947e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4618      	mov	r0, r3
 8009460:	f004 fba8 	bl	800dbb4 <SDMMC_CmdStopTransfer>
 8009464:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d008      	beq.n	800947e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	431a      	orrs	r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 f95b 	bl	8009734 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a3f      	ldr	r2, [pc, #252]	; (8009580 <HAL_SD_IRQHandler+0x1bc>)
 8009484:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2201      	movs	r2, #1
 800948a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f003 0301 	and.w	r3, r3, #1
 800949a:	2b00      	cmp	r3, #0
 800949c:	d104      	bne.n	80094a8 <HAL_SD_IRQHandler+0xe4>
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f003 0302 	and.w	r3, r3, #2
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d003      	beq.n	80094b0 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f006 fcc5 	bl	800fe38 <HAL_SD_RxCpltCallback>
 80094ae:	e13b      	b.n	8009728 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f006 fcb7 	bl	800fe24 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80094b6:	e137      	b.n	8009728 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094be:	2b00      	cmp	r3, #0
 80094c0:	f000 8132 	beq.w	8009728 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2200      	movs	r2, #0
 80094ca:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2200      	movs	r2, #0
 80094d2:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2200      	movs	r2, #0
 80094da:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f003 0302 	and.w	r3, r3, #2
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d104      	bne.n	80094f0 <HAL_SD_IRQHandler+0x12c>
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f003 0320 	and.w	r3, r3, #32
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d011      	beq.n	8009514 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4618      	mov	r0, r3
 80094f6:	f004 fb5d 	bl	800dbb4 <SDMMC_CmdStopTransfer>
 80094fa:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d008      	beq.n	8009514 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	431a      	orrs	r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 f910 	bl	8009734 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2201      	movs	r2, #1
 8009518:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f003 0310 	and.w	r3, r3, #16
 8009528:	2b00      	cmp	r3, #0
 800952a:	d104      	bne.n	8009536 <HAL_SD_IRQHandler+0x172>
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f003 0320 	and.w	r3, r3, #32
 8009532:	2b00      	cmp	r3, #0
 8009534:	d002      	beq.n	800953c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f006 fc74 	bl	800fe24 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f003 0301 	and.w	r3, r3, #1
 8009542:	2b00      	cmp	r3, #0
 8009544:	d105      	bne.n	8009552 <HAL_SD_IRQHandler+0x18e>
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f003 0302 	and.w	r3, r3, #2
 800954c:	2b00      	cmp	r3, #0
 800954e:	f000 80eb 	beq.w	8009728 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f006 fc70 	bl	800fe38 <HAL_SD_RxCpltCallback>
}
 8009558:	e0e6      	b.n	8009728 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009564:	2b00      	cmp	r3, #0
 8009566:	d00d      	beq.n	8009584 <HAL_SD_IRQHandler+0x1c0>
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f003 0308 	and.w	r3, r3, #8
 800956e:	2b00      	cmp	r3, #0
 8009570:	d008      	beq.n	8009584 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f001 f8a8 	bl	800a6c8 <SD_Write_IT>
 8009578:	e0d6      	b.n	8009728 <HAL_SD_IRQHandler+0x364>
 800957a:	bf00      	nop
 800957c:	ffff3ec5 	.word	0xffff3ec5
 8009580:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800958a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800958e:	2b00      	cmp	r3, #0
 8009590:	f000 809d 	beq.w	80096ce <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800959a:	f003 0302 	and.w	r3, r3, #2
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d005      	beq.n	80095ae <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095a6:	f043 0202 	orr.w	r2, r3, #2
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095b4:	f003 0308 	and.w	r3, r3, #8
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d005      	beq.n	80095c8 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095c0:	f043 0208 	orr.w	r2, r3, #8
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095ce:	f003 0320 	and.w	r3, r3, #32
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d005      	beq.n	80095e2 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095da:	f043 0220 	orr.w	r2, r3, #32
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095e8:	f003 0310 	and.w	r3, r3, #16
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d005      	beq.n	80095fc <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095f4:	f043 0210 	orr.w	r2, r3, #16
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a4b      	ldr	r2, [pc, #300]	; (8009730 <HAL_SD_IRQHandler+0x36c>)
 8009602:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009612:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	68da      	ldr	r2, [r3, #12]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009622:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009632:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	68da      	ldr	r2, [r3, #12]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009642:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4618      	mov	r0, r3
 800964a:	f004 fab3 	bl	800dbb4 <SDMMC_CmdStopTransfer>
 800964e:	4602      	mov	r2, r0
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009654:	431a      	orrs	r2, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	68da      	ldr	r2, [r3, #12]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009668:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009672:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f003 0308 	and.w	r3, r3, #8
 800967a:	2b00      	cmp	r3, #0
 800967c:	d00a      	beq.n	8009694 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2201      	movs	r2, #1
 8009682:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 f851 	bl	8009734 <HAL_SD_ErrorCallback>
}
 8009692:	e049      	b.n	8009728 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800969a:	2b00      	cmp	r3, #0
 800969c:	d044      	beq.n	8009728 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d040      	beq.n	8009728 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80096b4:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2200      	movs	r2, #0
 80096bc:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2201      	movs	r2, #1
 80096c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 f834 	bl	8009734 <HAL_SD_ErrorCallback>
}
 80096cc:	e02c      	b.n	8009728 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d025      	beq.n	8009728 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096e4:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096ec:	f003 0304 	and.w	r3, r3, #4
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d10c      	bne.n	800970e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f003 0320 	and.w	r3, r3, #32
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d003      	beq.n	8009706 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f001 f84a 	bl	800a798 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8009704:	e010      	b.n	8009728 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f001 f832 	bl	800a770 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800970c:	e00c      	b.n	8009728 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f003 0320 	and.w	r3, r3, #32
 8009714:	2b00      	cmp	r3, #0
 8009716:	d003      	beq.n	8009720 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f001 f833 	bl	800a784 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800971e:	e003      	b.n	8009728 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f001 f81b 	bl	800a75c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8009726:	e7ff      	b.n	8009728 <HAL_SD_IRQHandler+0x364>
 8009728:	bf00      	nop
 800972a:	3710      	adds	r7, #16
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}
 8009730:	18000f3a 	.word	0x18000f3a

08009734 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800973c:	bf00      	nop
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009756:	0f9b      	lsrs	r3, r3, #30
 8009758:	b2da      	uxtb	r2, r3
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009762:	0e9b      	lsrs	r3, r3, #26
 8009764:	b2db      	uxtb	r3, r3
 8009766:	f003 030f 	and.w	r3, r3, #15
 800976a:	b2da      	uxtb	r2, r3
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009774:	0e1b      	lsrs	r3, r3, #24
 8009776:	b2db      	uxtb	r3, r3
 8009778:	f003 0303 	and.w	r3, r3, #3
 800977c:	b2da      	uxtb	r2, r3
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009786:	0c1b      	lsrs	r3, r3, #16
 8009788:	b2da      	uxtb	r2, r3
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009792:	0a1b      	lsrs	r3, r3, #8
 8009794:	b2da      	uxtb	r2, r3
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800979e:	b2da      	uxtb	r2, r3
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097a8:	0d1b      	lsrs	r3, r3, #20
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097b4:	0c1b      	lsrs	r3, r3, #16
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	f003 030f 	and.w	r3, r3, #15
 80097bc:	b2da      	uxtb	r2, r3
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097c6:	0bdb      	lsrs	r3, r3, #15
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	f003 0301 	and.w	r3, r3, #1
 80097ce:	b2da      	uxtb	r2, r3
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097d8:	0b9b      	lsrs	r3, r3, #14
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	f003 0301 	and.w	r3, r3, #1
 80097e0:	b2da      	uxtb	r2, r3
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097ea:	0b5b      	lsrs	r3, r3, #13
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	f003 0301 	and.w	r3, r3, #1
 80097f2:	b2da      	uxtb	r2, r3
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097fc:	0b1b      	lsrs	r3, r3, #12
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	f003 0301 	and.w	r3, r3, #1
 8009804:	b2da      	uxtb	r2, r3
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	2200      	movs	r2, #0
 800980e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009814:	2b00      	cmp	r3, #0
 8009816:	d163      	bne.n	80098e0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800981c:	009a      	lsls	r2, r3, #2
 800981e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009822:	4013      	ands	r3, r2
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8009828:	0f92      	lsrs	r2, r2, #30
 800982a:	431a      	orrs	r2, r3
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009834:	0edb      	lsrs	r3, r3, #27
 8009836:	b2db      	uxtb	r3, r3
 8009838:	f003 0307 	and.w	r3, r3, #7
 800983c:	b2da      	uxtb	r2, r3
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009846:	0e1b      	lsrs	r3, r3, #24
 8009848:	b2db      	uxtb	r3, r3
 800984a:	f003 0307 	and.w	r3, r3, #7
 800984e:	b2da      	uxtb	r2, r3
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009858:	0d5b      	lsrs	r3, r3, #21
 800985a:	b2db      	uxtb	r3, r3
 800985c:	f003 0307 	and.w	r3, r3, #7
 8009860:	b2da      	uxtb	r2, r3
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800986a:	0c9b      	lsrs	r3, r3, #18
 800986c:	b2db      	uxtb	r3, r3
 800986e:	f003 0307 	and.w	r3, r3, #7
 8009872:	b2da      	uxtb	r2, r3
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800987c:	0bdb      	lsrs	r3, r3, #15
 800987e:	b2db      	uxtb	r3, r3
 8009880:	f003 0307 	and.w	r3, r3, #7
 8009884:	b2da      	uxtb	r2, r3
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	1c5a      	adds	r2, r3, #1
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	7e1b      	ldrb	r3, [r3, #24]
 8009898:	b2db      	uxtb	r3, r3
 800989a:	f003 0307 	and.w	r3, r3, #7
 800989e:	3302      	adds	r3, #2
 80098a0:	2201      	movs	r2, #1
 80098a2:	fa02 f303 	lsl.w	r3, r2, r3
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80098aa:	fb03 f202 	mul.w	r2, r3, r2
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	7a1b      	ldrb	r3, [r3, #8]
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	f003 030f 	and.w	r3, r3, #15
 80098bc:	2201      	movs	r2, #1
 80098be:	409a      	lsls	r2, r3
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80098cc:	0a52      	lsrs	r2, r2, #9
 80098ce:	fb03 f202 	mul.w	r2, r3, r2
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098dc:	655a      	str	r2, [r3, #84]	; 0x54
 80098de:	e031      	b.n	8009944 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d11d      	bne.n	8009924 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098ec:	041b      	lsls	r3, r3, #16
 80098ee:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098f6:	0c1b      	lsrs	r3, r3, #16
 80098f8:	431a      	orrs	r2, r3
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	691b      	ldr	r3, [r3, #16]
 8009902:	3301      	adds	r3, #1
 8009904:	029a      	lsls	r2, r3, #10
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009918:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	655a      	str	r2, [r3, #84]	; 0x54
 8009922:	e00f      	b.n	8009944 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a58      	ldr	r2, [pc, #352]	; (8009a8c <HAL_SD_GetCardCSD+0x344>)
 800992a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009930:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2201      	movs	r2, #1
 800993c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8009940:	2301      	movs	r3, #1
 8009942:	e09d      	b.n	8009a80 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009948:	0b9b      	lsrs	r3, r3, #14
 800994a:	b2db      	uxtb	r3, r3
 800994c:	f003 0301 	and.w	r3, r3, #1
 8009950:	b2da      	uxtb	r2, r3
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800995a:	09db      	lsrs	r3, r3, #7
 800995c:	b2db      	uxtb	r3, r3
 800995e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009962:	b2da      	uxtb	r2, r3
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800996c:	b2db      	uxtb	r3, r3
 800996e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009972:	b2da      	uxtb	r2, r3
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800997c:	0fdb      	lsrs	r3, r3, #31
 800997e:	b2da      	uxtb	r2, r3
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009988:	0f5b      	lsrs	r3, r3, #29
 800998a:	b2db      	uxtb	r3, r3
 800998c:	f003 0303 	and.w	r3, r3, #3
 8009990:	b2da      	uxtb	r2, r3
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800999a:	0e9b      	lsrs	r3, r3, #26
 800999c:	b2db      	uxtb	r3, r3
 800999e:	f003 0307 	and.w	r3, r3, #7
 80099a2:	b2da      	uxtb	r2, r3
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099ac:	0d9b      	lsrs	r3, r3, #22
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	f003 030f 	and.w	r3, r3, #15
 80099b4:	b2da      	uxtb	r2, r3
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099be:	0d5b      	lsrs	r3, r3, #21
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	f003 0301 	and.w	r3, r3, #1
 80099c6:	b2da      	uxtb	r2, r3
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	2200      	movs	r2, #0
 80099d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099da:	0c1b      	lsrs	r3, r3, #16
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	f003 0301 	and.w	r3, r3, #1
 80099e2:	b2da      	uxtb	r2, r3
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099ee:	0bdb      	lsrs	r3, r3, #15
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	f003 0301 	and.w	r3, r3, #1
 80099f6:	b2da      	uxtb	r2, r3
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a02:	0b9b      	lsrs	r3, r3, #14
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	f003 0301 	and.w	r3, r3, #1
 8009a0a:	b2da      	uxtb	r2, r3
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a16:	0b5b      	lsrs	r3, r3, #13
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	f003 0301 	and.w	r3, r3, #1
 8009a1e:	b2da      	uxtb	r2, r3
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a2a:	0b1b      	lsrs	r3, r3, #12
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	f003 0301 	and.w	r3, r3, #1
 8009a32:	b2da      	uxtb	r2, r3
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a3e:	0a9b      	lsrs	r3, r3, #10
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	f003 0303 	and.w	r3, r3, #3
 8009a46:	b2da      	uxtb	r2, r3
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a52:	0a1b      	lsrs	r3, r3, #8
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	f003 0303 	and.w	r3, r3, #3
 8009a5a:	b2da      	uxtb	r2, r3
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a66:	085b      	lsrs	r3, r3, #1
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a6e:	b2da      	uxtb	r2, r3
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	2201      	movs	r2, #1
 8009a7a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009a7e:	2300      	movs	r3, #0
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr
 8009a8c:	1fe00fff 	.word	0x1fe00fff

08009a90 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b094      	sub	sp, #80	; 0x50
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	2b03      	cmp	r3, #3
 8009aaa:	d101      	bne.n	8009ab0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8009aac:	2301      	movs	r3, #1
 8009aae:	e0a7      	b.n	8009c00 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8009ab0:	f107 0308 	add.w	r3, r7, #8
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 fb62 	bl	800a180 <SD_SendSDStatus>
 8009abc:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8009abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d011      	beq.n	8009ae8 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a4f      	ldr	r2, [pc, #316]	; (8009c08 <HAL_SD_GetCardStatus+0x178>)
 8009aca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ad2:	431a      	orrs	r2, r3
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2201      	movs	r2, #1
 8009adc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009ae6:	e070      	b.n	8009bca <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	099b      	lsrs	r3, r3, #6
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	f003 0303 	and.w	r3, r3, #3
 8009af2:	b2da      	uxtb	r2, r3
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	095b      	lsrs	r3, r3, #5
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	f003 0301 	and.w	r3, r3, #1
 8009b02:	b2da      	uxtb	r2, r3
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	0a1b      	lsrs	r3, r3, #8
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009b12:	b29a      	uxth	r2, r3
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	0e1b      	lsrs	r3, r3, #24
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	b29a      	uxth	r2, r3
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	061a      	lsls	r2, r3, #24
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	021b      	lsls	r3, r3, #8
 8009b2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009b2e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	0a1b      	lsrs	r3, r3, #8
 8009b34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009b38:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	0e1b      	lsrs	r3, r3, #24
 8009b3e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	b2da      	uxtb	r2, r3
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	0a1b      	lsrs	r3, r3, #8
 8009b50:	b2da      	uxtb	r2, r3
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	0d1b      	lsrs	r3, r3, #20
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	f003 030f 	and.w	r3, r3, #15
 8009b60:	b2da      	uxtb	r2, r3
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	0c1b      	lsrs	r3, r3, #16
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009b70:	b29a      	uxth	r2, r3
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	b29a      	uxth	r2, r3
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	0a9b      	lsrs	r3, r3, #10
 8009b86:	b2db      	uxtb	r3, r3
 8009b88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b8c:	b2da      	uxtb	r2, r3
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	0a1b      	lsrs	r3, r3, #8
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	f003 0303 	and.w	r3, r3, #3
 8009b9c:	b2da      	uxtb	r2, r3
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	091b      	lsrs	r3, r3, #4
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	f003 030f 	and.w	r3, r3, #15
 8009bac:	b2da      	uxtb	r2, r3
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	f003 030f 	and.w	r3, r3, #15
 8009bba:	b2da      	uxtb	r2, r3
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	0e1b      	lsrs	r3, r3, #24
 8009bc4:	b2da      	uxtb	r2, r3
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f003 ff3e 	bl	800da54 <SDMMC_CmdBlockLength>
 8009bd8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8009bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00d      	beq.n	8009bfc <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a08      	ldr	r2, [pc, #32]	; (8009c08 <HAL_SD_GetCardStatus+0x178>)
 8009be6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009bec:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8009bfc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3750      	adds	r7, #80	; 0x50
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	1fe00fff 	.word	0x1fe00fff

08009c0c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
 8009c14:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009c56:	2300      	movs	r3, #0
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	370c      	adds	r7, #12
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009c64:	b590      	push	{r4, r7, lr}
 8009c66:	b08d      	sub	sp, #52	; 0x34
 8009c68:	af02      	add	r7, sp, #8
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8009c72:	2300      	movs	r3, #0
 8009c74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2203      	movs	r2, #3
 8009c7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c84:	2b03      	cmp	r3, #3
 8009c86:	d02e      	beq.n	8009ce6 <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c8e:	d106      	bne.n	8009c9e <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	635a      	str	r2, [r3, #52]	; 0x34
 8009c9c:	e029      	b.n	8009cf2 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ca4:	d10a      	bne.n	8009cbc <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 fb62 	bl	800a370 <SD_WideBus_Enable>
 8009cac:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	431a      	orrs	r2, r3
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	635a      	str	r2, [r3, #52]	; 0x34
 8009cba:	e01a      	b.n	8009cf2 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d10a      	bne.n	8009cd8 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 fb9f 	bl	800a406 <SD_WideBus_Disable>
 8009cc8:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	431a      	orrs	r2, r3
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	635a      	str	r2, [r3, #52]	; 0x34
 8009cd6:	e00c      	b.n	8009cf2 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cdc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	635a      	str	r2, [r3, #52]	; 0x34
 8009ce4:	e005      	b.n	8009cf2 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cea:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d007      	beq.n	8009d0a <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a5e      	ldr	r2, [pc, #376]	; (8009e78 <HAL_SD_ConfigWideBusOperation+0x214>)
 8009d00:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009d02:	2301      	movs	r3, #1
 8009d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009d08:	e094      	b.n	8009e34 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009d0a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009d0e:	f7fd f859 	bl	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009d12:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 8009d14:	6a3b      	ldr	r3, [r7, #32]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	f000 8083 	beq.w	8009e22 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	691b      	ldr	r3, [r3, #16]
 8009d30:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	695a      	ldr	r2, [r3, #20]
 8009d36:	6a3b      	ldr	r3, [r7, #32]
 8009d38:	4950      	ldr	r1, [pc, #320]	; (8009e7c <HAL_SD_ConfigWideBusOperation+0x218>)
 8009d3a:	fba1 1303 	umull	r1, r3, r1, r3
 8009d3e:	0e1b      	lsrs	r3, r3, #24
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d303      	bcc.n	8009d4c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	695b      	ldr	r3, [r3, #20]
 8009d48:	61bb      	str	r3, [r7, #24]
 8009d4a:	e05a      	b.n	8009e02 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d54:	d103      	bne.n	8009d5e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	695b      	ldr	r3, [r3, #20]
 8009d5a:	61bb      	str	r3, [r7, #24]
 8009d5c:	e051      	b.n	8009e02 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d66:	d126      	bne.n	8009db6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	695b      	ldr	r3, [r3, #20]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d10e      	bne.n	8009d8e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8009d70:	6a3b      	ldr	r3, [r7, #32]
 8009d72:	4a43      	ldr	r2, [pc, #268]	; (8009e80 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d906      	bls.n	8009d86 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009d78:	6a3b      	ldr	r3, [r7, #32]
 8009d7a:	4a40      	ldr	r2, [pc, #256]	; (8009e7c <HAL_SD_ConfigWideBusOperation+0x218>)
 8009d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8009d80:	0e5b      	lsrs	r3, r3, #25
 8009d82:	61bb      	str	r3, [r7, #24]
 8009d84:	e03d      	b.n	8009e02 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	695b      	ldr	r3, [r3, #20]
 8009d8a:	61bb      	str	r3, [r7, #24]
 8009d8c:	e039      	b.n	8009e02 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	695b      	ldr	r3, [r3, #20]
 8009d92:	005b      	lsls	r3, r3, #1
 8009d94:	6a3a      	ldr	r2, [r7, #32]
 8009d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d9a:	4a39      	ldr	r2, [pc, #228]	; (8009e80 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d906      	bls.n	8009dae <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009da0:	6a3b      	ldr	r3, [r7, #32]
 8009da2:	4a36      	ldr	r2, [pc, #216]	; (8009e7c <HAL_SD_ConfigWideBusOperation+0x218>)
 8009da4:	fba2 2303 	umull	r2, r3, r2, r3
 8009da8:	0e5b      	lsrs	r3, r3, #25
 8009daa:	61bb      	str	r3, [r7, #24]
 8009dac:	e029      	b.n	8009e02 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	695b      	ldr	r3, [r3, #20]
 8009db2:	61bb      	str	r3, [r7, #24]
 8009db4:	e025      	b.n	8009e02 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	695b      	ldr	r3, [r3, #20]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d10e      	bne.n	8009ddc <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8009dbe:	6a3b      	ldr	r3, [r7, #32]
 8009dc0:	4a30      	ldr	r2, [pc, #192]	; (8009e84 <HAL_SD_ConfigWideBusOperation+0x220>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d906      	bls.n	8009dd4 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009dc6:	6a3b      	ldr	r3, [r7, #32]
 8009dc8:	4a2c      	ldr	r2, [pc, #176]	; (8009e7c <HAL_SD_ConfigWideBusOperation+0x218>)
 8009dca:	fba2 2303 	umull	r2, r3, r2, r3
 8009dce:	0e1b      	lsrs	r3, r3, #24
 8009dd0:	61bb      	str	r3, [r7, #24]
 8009dd2:	e016      	b.n	8009e02 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	695b      	ldr	r3, [r3, #20]
 8009dd8:	61bb      	str	r3, [r7, #24]
 8009dda:	e012      	b.n	8009e02 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	695b      	ldr	r3, [r3, #20]
 8009de0:	005b      	lsls	r3, r3, #1
 8009de2:	6a3a      	ldr	r2, [r7, #32]
 8009de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009de8:	4a26      	ldr	r2, [pc, #152]	; (8009e84 <HAL_SD_ConfigWideBusOperation+0x220>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d906      	bls.n	8009dfc <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009dee:	6a3b      	ldr	r3, [r7, #32]
 8009df0:	4a22      	ldr	r2, [pc, #136]	; (8009e7c <HAL_SD_ConfigWideBusOperation+0x218>)
 8009df2:	fba2 2303 	umull	r2, r3, r2, r3
 8009df6:	0e1b      	lsrs	r3, r3, #24
 8009df8:	61bb      	str	r3, [r7, #24]
 8009dfa:	e002      	b.n	8009e02 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	695b      	ldr	r3, [r3, #20]
 8009e00:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681c      	ldr	r4, [r3, #0]
 8009e06:	466a      	mov	r2, sp
 8009e08:	f107 0314 	add.w	r3, r7, #20
 8009e0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009e10:	e882 0003 	stmia.w	r2, {r0, r1}
 8009e14:	f107 0308 	add.w	r3, r7, #8
 8009e18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	f003 fd3c 	bl	800d898 <SDMMC_Init>
 8009e20:	e008      	b.n	8009e34 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e26:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f003 fe09 	bl	800da54 <SDMMC_CmdBlockLength>
 8009e42:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d00c      	beq.n	8009e64 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a0a      	ldr	r2, [pc, #40]	; (8009e78 <HAL_SD_ConfigWideBusOperation+0x214>)
 8009e50:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e56:	69fb      	ldr	r3, [r7, #28]
 8009e58:	431a      	orrs	r2, r3
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2201      	movs	r2, #1
 8009e68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8009e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	372c      	adds	r7, #44	; 0x2c
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd90      	pop	{r4, r7, pc}
 8009e78:	1fe00fff 	.word	0x1fe00fff
 8009e7c:	55e63b89 	.word	0x55e63b89
 8009e80:	02faf080 	.word	0x02faf080
 8009e84:	017d7840 	.word	0x017d7840

08009e88 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b086      	sub	sp, #24
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009e90:	2300      	movs	r3, #0
 8009e92:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009e94:	f107 030c 	add.w	r3, r7, #12
 8009e98:	4619      	mov	r1, r3
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 fa40 	bl	800a320 <SD_SendStatus>
 8009ea0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d005      	beq.n	8009eb4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	431a      	orrs	r2, r3
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	0a5b      	lsrs	r3, r3, #9
 8009eb8:	f003 030f 	and.w	r3, r3, #15
 8009ebc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009ebe:	693b      	ldr	r3, [r7, #16]
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3718      	adds	r7, #24
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b090      	sub	sp, #64	; 0x40
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8009ed4:	f7f7 f938 	bl	8001148 <HAL_GetTick>
 8009ed8:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f003 fd33 	bl	800d94a <SDMMC_GetPowerState>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d102      	bne.n	8009ef0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009eea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009eee:	e0b5      	b.n	800a05c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef4:	2b03      	cmp	r3, #3
 8009ef6:	d02e      	beq.n	8009f56 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4618      	mov	r0, r3
 8009efe:	f003 ff7e 	bl	800ddfe <SDMMC_CmdSendCID>
 8009f02:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d001      	beq.n	8009f0e <SD_InitCard+0x46>
    {
      return errorstate;
 8009f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f0c:	e0a6      	b.n	800a05c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2100      	movs	r1, #0
 8009f14:	4618      	mov	r0, r3
 8009f16:	f003 fd5e 	bl	800d9d6 <SDMMC_GetResponse>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	2104      	movs	r1, #4
 8009f26:	4618      	mov	r0, r3
 8009f28:	f003 fd55 	bl	800d9d6 <SDMMC_GetResponse>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	2108      	movs	r1, #8
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f003 fd4c 	bl	800d9d6 <SDMMC_GetResponse>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	210c      	movs	r1, #12
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f003 fd43 	bl	800d9d6 <SDMMC_GetResponse>
 8009f50:	4602      	mov	r2, r0
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f5a:	2b03      	cmp	r3, #3
 8009f5c:	d01d      	beq.n	8009f9a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8009f5e:	e019      	b.n	8009f94 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f107 020a 	add.w	r2, r7, #10
 8009f68:	4611      	mov	r1, r2
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f003 ff86 	bl	800de7c <SDMMC_CmdSetRelAdd>
 8009f70:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8009f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d001      	beq.n	8009f7c <SD_InitCard+0xb4>
      {
        return errorstate;
 8009f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f7a:	e06f      	b.n	800a05c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009f7c:	f7f7 f8e4 	bl	8001148 <HAL_GetTick>
 8009f80:	4602      	mov	r2, r0
 8009f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f84:	1ad3      	subs	r3, r2, r3
 8009f86:	f241 3287 	movw	r2, #4999	; 0x1387
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d902      	bls.n	8009f94 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8009f8e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f92:	e063      	b.n	800a05c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8009f94:	897b      	ldrh	r3, [r7, #10]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d0e2      	beq.n	8009f60 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f9e:	2b03      	cmp	r3, #3
 8009fa0:	d036      	beq.n	800a010 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009fa2:	897b      	ldrh	r3, [r7, #10]
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fb2:	041b      	lsls	r3, r3, #16
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	4610      	mov	r0, r2
 8009fb8:	f003 ff40 	bl	800de3c <SDMMC_CmdSendCSD>
 8009fbc:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d001      	beq.n	8009fc8 <SD_InitCard+0x100>
    {
      return errorstate;
 8009fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc6:	e049      	b.n	800a05c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2100      	movs	r1, #0
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f003 fd01 	bl	800d9d6 <SDMMC_GetResponse>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	2104      	movs	r1, #4
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f003 fcf8 	bl	800d9d6 <SDMMC_GetResponse>
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	2108      	movs	r1, #8
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f003 fcef 	bl	800d9d6 <SDMMC_GetResponse>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	210c      	movs	r1, #12
 800a004:	4618      	mov	r0, r3
 800a006:	f003 fce6 	bl	800d9d6 <SDMMC_GetResponse>
 800a00a:	4602      	mov	r2, r0
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	2104      	movs	r1, #4
 800a016:	4618      	mov	r0, r3
 800a018:	f003 fcdd 	bl	800d9d6 <SDMMC_GetResponse>
 800a01c:	4603      	mov	r3, r0
 800a01e:	0d1a      	lsrs	r2, r3, #20
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a024:	f107 030c 	add.w	r3, r7, #12
 800a028:	4619      	mov	r1, r3
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f7ff fb8c 	bl	8009748 <HAL_SD_GetCardCSD>
 800a030:	4603      	mov	r3, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	d002      	beq.n	800a03c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a036:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a03a:	e00f      	b.n	800a05c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a044:	041b      	lsls	r3, r3, #16
 800a046:	4619      	mov	r1, r3
 800a048:	4610      	mov	r0, r2
 800a04a:	f003 fdef 	bl	800dc2c <SDMMC_CmdSelDesel>
 800a04e:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800a050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a052:	2b00      	cmp	r3, #0
 800a054:	d001      	beq.n	800a05a <SD_InitCard+0x192>
  {
    return errorstate;
 800a056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a058:	e000      	b.n	800a05c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a05a:	2300      	movs	r3, #0
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3740      	adds	r7, #64	; 0x40
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b086      	sub	sp, #24
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a06c:	2300      	movs	r3, #0
 800a06e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800a070:	2300      	movs	r3, #0
 800a072:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800a074:	2300      	movs	r3, #0
 800a076:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4618      	mov	r0, r3
 800a07e:	f003 fdf8 	bl	800dc72 <SDMMC_CmdGoIdleState>
 800a082:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d001      	beq.n	800a08e <SD_PowerON+0x2a>
  {
    return errorstate;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	e072      	b.n	800a174 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4618      	mov	r0, r3
 800a094:	f003 fe0b 	bl	800dcae <SDMMC_CmdOperCond>
 800a098:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a0a0:	d10d      	bne.n	800a0be <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f003 fde0 	bl	800dc72 <SDMMC_CmdGoIdleState>
 800a0b2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d004      	beq.n	800a0c4 <SD_PowerON+0x60>
    {
      return errorstate;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	e05a      	b.n	800a174 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d137      	bne.n	800a13c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2100      	movs	r1, #0
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f003 fe0b 	bl	800dcee <SDMMC_CmdAppCommand>
 800a0d8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d02d      	beq.n	800a13c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a0e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a0e4:	e046      	b.n	800a174 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	2100      	movs	r1, #0
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f003 fdfe 	bl	800dcee <SDMMC_CmdAppCommand>
 800a0f2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d001      	beq.n	800a0fe <SD_PowerON+0x9a>
    {
      return errorstate;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	e03a      	b.n	800a174 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	491e      	ldr	r1, [pc, #120]	; (800a17c <SD_PowerON+0x118>)
 800a104:	4618      	mov	r0, r3
 800a106:	f003 fe15 	bl	800dd34 <SDMMC_CmdAppOperCommand>
 800a10a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d002      	beq.n	800a118 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a112:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a116:	e02d      	b.n	800a174 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	2100      	movs	r1, #0
 800a11e:	4618      	mov	r0, r3
 800a120:	f003 fc59 	bl	800d9d6 <SDMMC_GetResponse>
 800a124:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	0fdb      	lsrs	r3, r3, #31
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d101      	bne.n	800a132 <SD_PowerON+0xce>
 800a12e:	2301      	movs	r3, #1
 800a130:	e000      	b.n	800a134 <SD_PowerON+0xd0>
 800a132:	2300      	movs	r3, #0
 800a134:	613b      	str	r3, [r7, #16]

    count++;
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	3301      	adds	r3, #1
 800a13a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a142:	4293      	cmp	r3, r2
 800a144:	d802      	bhi.n	800a14c <SD_PowerON+0xe8>
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d0cc      	beq.n	800a0e6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a152:	4293      	cmp	r3, r2
 800a154:	d902      	bls.n	800a15c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a156:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a15a:	e00b      	b.n	800a174 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d002      	beq.n	800a172 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2201      	movs	r2, #1
 800a170:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800a172:	2300      	movs	r3, #0
}
 800a174:	4618      	mov	r0, r3
 800a176:	3718      	adds	r7, #24
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	c1100000 	.word	0xc1100000

0800a180 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b08c      	sub	sp, #48	; 0x30
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a18a:	f7f6 ffdd 	bl	8001148 <HAL_GetTick>
 800a18e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2100      	movs	r1, #0
 800a19a:	4618      	mov	r0, r3
 800a19c:	f003 fc1b 	bl	800d9d6 <SDMMC_GetResponse>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1aa:	d102      	bne.n	800a1b2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a1ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a1b0:	e0b0      	b.n	800a314 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2140      	movs	r1, #64	; 0x40
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f003 fc4b 	bl	800da54 <SDMMC_CmdBlockLength>
 800a1be:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a1c0:	6a3b      	ldr	r3, [r7, #32]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d005      	beq.n	800a1d2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800a1ce:	6a3b      	ldr	r3, [r7, #32]
 800a1d0:	e0a0      	b.n	800a314 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1da:	041b      	lsls	r3, r3, #16
 800a1dc:	4619      	mov	r1, r3
 800a1de:	4610      	mov	r0, r2
 800a1e0:	f003 fd85 	bl	800dcee <SDMMC_CmdAppCommand>
 800a1e4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a1e6:	6a3b      	ldr	r3, [r7, #32]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d005      	beq.n	800a1f8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800a1f4:	6a3b      	ldr	r3, [r7, #32]
 800a1f6:	e08d      	b.n	800a314 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a1f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a1fc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800a1fe:	2340      	movs	r3, #64	; 0x40
 800a200:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800a202:	2360      	movs	r3, #96	; 0x60
 800a204:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a206:	2302      	movs	r3, #2
 800a208:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a20a:	2300      	movs	r3, #0
 800a20c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a20e:	2301      	movs	r3, #1
 800a210:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f107 0208 	add.w	r2, r7, #8
 800a21a:	4611      	mov	r1, r2
 800a21c:	4618      	mov	r0, r3
 800a21e:	f003 fbed 	bl	800d9fc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4618      	mov	r0, r3
 800a228:	f003 fe6d 	bl	800df06 <SDMMC_CmdStatusRegister>
 800a22c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a22e:	6a3b      	ldr	r3, [r7, #32]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d02b      	beq.n	800a28c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800a23c:	6a3b      	ldr	r3, [r7, #32]
 800a23e:	e069      	b.n	800a314 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a246:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d013      	beq.n	800a276 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800a24e:	2300      	movs	r3, #0
 800a250:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a252:	e00d      	b.n	800a270 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4618      	mov	r0, r3
 800a25a:	f003 fb47 	bl	800d8ec <SDMMC_ReadFIFO>
 800a25e:	4602      	mov	r2, r0
 800a260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a262:	601a      	str	r2, [r3, #0]
        pData++;
 800a264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a266:	3304      	adds	r3, #4
 800a268:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800a26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a26c:	3301      	adds	r3, #1
 800a26e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a272:	2b07      	cmp	r3, #7
 800a274:	d9ee      	bls.n	800a254 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a276:	f7f6 ff67 	bl	8001148 <HAL_GetTick>
 800a27a:	4602      	mov	r2, r0
 800a27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27e:	1ad3      	subs	r3, r2, r3
 800a280:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a284:	d102      	bne.n	800a28c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a286:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a28a:	e043      	b.n	800a314 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a292:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800a296:	2b00      	cmp	r3, #0
 800a298:	d0d2      	beq.n	800a240 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2a0:	f003 0308 	and.w	r3, r3, #8
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d001      	beq.n	800a2ac <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a2a8:	2308      	movs	r3, #8
 800a2aa:	e033      	b.n	800a314 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2b2:	f003 0302 	and.w	r3, r3, #2
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d001      	beq.n	800a2be <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a2ba:	2302      	movs	r3, #2
 800a2bc:	e02a      	b.n	800a314 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2c4:	f003 0320 	and.w	r3, r3, #32
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d017      	beq.n	800a2fc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800a2cc:	2320      	movs	r3, #32
 800a2ce:	e021      	b.n	800a314 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f003 fb09 	bl	800d8ec <SDMMC_ReadFIFO>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2de:	601a      	str	r2, [r3, #0]
    pData++;
 800a2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e2:	3304      	adds	r3, #4
 800a2e4:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a2e6:	f7f6 ff2f 	bl	8001148 <HAL_GetTick>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ee:	1ad3      	subs	r3, r2, r3
 800a2f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2f4:	d102      	bne.n	800a2fc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a2f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a2fa:	e00b      	b.n	800a314 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a302:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a306:	2b00      	cmp	r3, #0
 800a308:	d1e2      	bne.n	800a2d0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4a03      	ldr	r2, [pc, #12]	; (800a31c <SD_SendSDStatus+0x19c>)
 800a310:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800a312:	2300      	movs	r3, #0
}
 800a314:	4618      	mov	r0, r3
 800a316:	3730      	adds	r7, #48	; 0x30
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	18000f3a 	.word	0x18000f3a

0800a320 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d102      	bne.n	800a336 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a330:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a334:	e018      	b.n	800a368 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a33e:	041b      	lsls	r3, r3, #16
 800a340:	4619      	mov	r1, r3
 800a342:	4610      	mov	r0, r2
 800a344:	f003 fdbc 	bl	800dec0 <SDMMC_CmdSendStatus>
 800a348:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d001      	beq.n	800a354 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	e009      	b.n	800a368 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2100      	movs	r1, #0
 800a35a:	4618      	mov	r0, r3
 800a35c:	f003 fb3b 	bl	800d9d6 <SDMMC_GetResponse>
 800a360:	4602      	mov	r2, r0
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3710      	adds	r7, #16
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b086      	sub	sp, #24
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a378:	2300      	movs	r3, #0
 800a37a:	60fb      	str	r3, [r7, #12]
 800a37c:	2300      	movs	r3, #0
 800a37e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	2100      	movs	r1, #0
 800a386:	4618      	mov	r0, r3
 800a388:	f003 fb25 	bl	800d9d6 <SDMMC_GetResponse>
 800a38c:	4603      	mov	r3, r0
 800a38e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a392:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a396:	d102      	bne.n	800a39e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a398:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a39c:	e02f      	b.n	800a3fe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a39e:	f107 030c 	add.w	r3, r7, #12
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 f879 	bl	800a49c <SD_FindSCR>
 800a3aa:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d001      	beq.n	800a3b6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	e023      	b.n	800a3fe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d01c      	beq.n	800a3fa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3c8:	041b      	lsls	r3, r3, #16
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	4610      	mov	r0, r2
 800a3ce:	f003 fc8e 	bl	800dcee <SDMMC_CmdAppCommand>
 800a3d2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d001      	beq.n	800a3de <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	e00f      	b.n	800a3fe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2102      	movs	r1, #2
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f003 fcc5 	bl	800dd74 <SDMMC_CmdBusWidth>
 800a3ea:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d001      	beq.n	800a3f6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	e003      	b.n	800a3fe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	e001      	b.n	800a3fe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a3fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3718      	adds	r7, #24
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b086      	sub	sp, #24
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a40e:	2300      	movs	r3, #0
 800a410:	60fb      	str	r3, [r7, #12]
 800a412:	2300      	movs	r3, #0
 800a414:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	2100      	movs	r1, #0
 800a41c:	4618      	mov	r0, r3
 800a41e:	f003 fada 	bl	800d9d6 <SDMMC_GetResponse>
 800a422:	4603      	mov	r3, r0
 800a424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a428:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a42c:	d102      	bne.n	800a434 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a42e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a432:	e02f      	b.n	800a494 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a434:	f107 030c 	add.w	r3, r7, #12
 800a438:	4619      	mov	r1, r3
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 f82e 	bl	800a49c <SD_FindSCR>
 800a440:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d001      	beq.n	800a44c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	e023      	b.n	800a494 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a452:	2b00      	cmp	r3, #0
 800a454:	d01c      	beq.n	800a490 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a45e:	041b      	lsls	r3, r3, #16
 800a460:	4619      	mov	r1, r3
 800a462:	4610      	mov	r0, r2
 800a464:	f003 fc43 	bl	800dcee <SDMMC_CmdAppCommand>
 800a468:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d001      	beq.n	800a474 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	e00f      	b.n	800a494 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	2100      	movs	r1, #0
 800a47a:	4618      	mov	r0, r3
 800a47c:	f003 fc7a 	bl	800dd74 <SDMMC_CmdBusWidth>
 800a480:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d001      	beq.n	800a48c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	e003      	b.n	800a494 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a48c:	2300      	movs	r3, #0
 800a48e:	e001      	b.n	800a494 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a490:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a494:	4618      	mov	r0, r3
 800a496:	3718      	adds	r7, #24
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b08e      	sub	sp, #56	; 0x38
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a4a6:	f7f6 fe4f 	bl	8001148 <HAL_GetTick>
 800a4aa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	60bb      	str	r3, [r7, #8]
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	2108      	movs	r1, #8
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f003 fac6 	bl	800da54 <SDMMC_CmdBlockLength>
 800a4c8:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d001      	beq.n	800a4d4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d2:	e0ad      	b.n	800a630 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4dc:	041b      	lsls	r3, r3, #16
 800a4de:	4619      	mov	r1, r3
 800a4e0:	4610      	mov	r0, r2
 800a4e2:	f003 fc04 	bl	800dcee <SDMMC_CmdAppCommand>
 800a4e6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d001      	beq.n	800a4f2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f0:	e09e      	b.n	800a630 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a4f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a4f6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a4f8:	2308      	movs	r3, #8
 800a4fa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a4fc:	2330      	movs	r3, #48	; 0x30
 800a4fe:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a500:	2302      	movs	r3, #2
 800a502:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a504:	2300      	movs	r3, #0
 800a506:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a508:	2301      	movs	r3, #1
 800a50a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f107 0210 	add.w	r2, r7, #16
 800a514:	4611      	mov	r1, r2
 800a516:	4618      	mov	r0, r3
 800a518:	f003 fa70 	bl	800d9fc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4618      	mov	r0, r3
 800a522:	f003 fc4a 	bl	800ddba <SDMMC_CmdSendSCR>
 800a526:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d027      	beq.n	800a57e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800a52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a530:	e07e      	b.n	800a630 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a538:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d113      	bne.n	800a568 <SD_FindSCR+0xcc>
 800a540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a542:	2b00      	cmp	r3, #0
 800a544:	d110      	bne.n	800a568 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4618      	mov	r0, r3
 800a54c:	f003 f9ce 	bl	800d8ec <SDMMC_ReadFIFO>
 800a550:	4603      	mov	r3, r0
 800a552:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4618      	mov	r0, r3
 800a55a:	f003 f9c7 	bl	800d8ec <SDMMC_ReadFIFO>
 800a55e:	4603      	mov	r3, r0
 800a560:	60fb      	str	r3, [r7, #12]
      index++;
 800a562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a564:	3301      	adds	r3, #1
 800a566:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a568:	f7f6 fdee 	bl	8001148 <HAL_GetTick>
 800a56c:	4602      	mov	r2, r0
 800a56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a570:	1ad3      	subs	r3, r2, r3
 800a572:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a576:	d102      	bne.n	800a57e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a578:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a57c:	e058      	b.n	800a630 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a584:	f240 532a 	movw	r3, #1322	; 0x52a
 800a588:	4013      	ands	r3, r2
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d0d1      	beq.n	800a532 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a594:	f003 0308 	and.w	r3, r3, #8
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d005      	beq.n	800a5a8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	2208      	movs	r2, #8
 800a5a2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a5a4:	2308      	movs	r3, #8
 800a5a6:	e043      	b.n	800a630 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5ae:	f003 0302 	and.w	r3, r3, #2
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d005      	beq.n	800a5c2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	2202      	movs	r2, #2
 800a5bc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a5be:	2302      	movs	r3, #2
 800a5c0:	e036      	b.n	800a630 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5c8:	f003 0320 	and.w	r3, r3, #32
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d005      	beq.n	800a5dc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	2220      	movs	r2, #32
 800a5d6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a5d8:	2320      	movs	r3, #32
 800a5da:	e029      	b.n	800a630 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a15      	ldr	r2, [pc, #84]	; (800a638 <SD_FindSCR+0x19c>)
 800a5e2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	061a      	lsls	r2, r3, #24
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	021b      	lsls	r3, r3, #8
 800a5ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a5f0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	0a1b      	lsrs	r3, r3, #8
 800a5f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a5fa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	0e1b      	lsrs	r3, r3, #24
 800a600:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a604:	601a      	str	r2, [r3, #0]
    scr++;
 800a606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a608:	3304      	adds	r3, #4
 800a60a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	061a      	lsls	r2, r3, #24
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	021b      	lsls	r3, r3, #8
 800a614:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a618:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	0a1b      	lsrs	r3, r3, #8
 800a61e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a622:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	0e1b      	lsrs	r3, r3, #24
 800a628:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a62c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a62e:	2300      	movs	r3, #0
}
 800a630:	4618      	mov	r0, r3
 800a632:	3738      	adds	r7, #56	; 0x38
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	18000f3a 	.word	0x18000f3a

0800a63c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b086      	sub	sp, #24
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a648:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a64e:	2b1f      	cmp	r3, #31
 800a650:	d936      	bls.n	800a6c0 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800a652:	2300      	movs	r3, #0
 800a654:	617b      	str	r3, [r7, #20]
 800a656:	e027      	b.n	800a6a8 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4618      	mov	r0, r3
 800a65e:	f003 f945 	bl	800d8ec <SDMMC_ReadFIFO>
 800a662:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	b2da      	uxtb	r2, r3
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	3301      	adds	r3, #1
 800a670:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	0a1b      	lsrs	r3, r3, #8
 800a676:	b2da      	uxtb	r2, r3
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	3301      	adds	r3, #1
 800a680:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	0c1b      	lsrs	r3, r3, #16
 800a686:	b2da      	uxtb	r2, r3
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	3301      	adds	r3, #1
 800a690:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	0e1b      	lsrs	r3, r3, #24
 800a696:	b2da      	uxtb	r2, r3
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	3301      	adds	r3, #1
 800a6a0:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	617b      	str	r3, [r7, #20]
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	2b07      	cmp	r3, #7
 800a6ac:	d9d4      	bls.n	800a658 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	693a      	ldr	r2, [r7, #16]
 800a6b2:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6b8:	f1a3 0220 	sub.w	r2, r3, #32
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800a6c0:	bf00      	nop
 800a6c2:	3718      	adds	r7, #24
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b086      	sub	sp, #24
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	69db      	ldr	r3, [r3, #28]
 800a6d4:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6a1b      	ldr	r3, [r3, #32]
 800a6da:	2b1f      	cmp	r3, #31
 800a6dc:	d93a      	bls.n	800a754 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800a6de:	2300      	movs	r3, #0
 800a6e0:	617b      	str	r3, [r7, #20]
 800a6e2:	e02b      	b.n	800a73c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	021a      	lsls	r2, r3, #8
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	3301      	adds	r3, #1
 800a700:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	041a      	lsls	r2, r3, #16
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	4313      	orrs	r3, r2
 800a70c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	3301      	adds	r3, #1
 800a712:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	061a      	lsls	r2, r3, #24
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	4313      	orrs	r3, r2
 800a71e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	3301      	adds	r3, #1
 800a724:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f107 020c 	add.w	r2, r7, #12
 800a72e:	4611      	mov	r1, r2
 800a730:	4618      	mov	r0, r3
 800a732:	f003 f8e8 	bl	800d906 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	3301      	adds	r3, #1
 800a73a:	617b      	str	r3, [r7, #20]
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	2b07      	cmp	r3, #7
 800a740:	d9d0      	bls.n	800a6e4 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	693a      	ldr	r2, [r7, #16]
 800a746:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6a1b      	ldr	r3, [r3, #32]
 800a74c:	f1a3 0220 	sub.w	r2, r3, #32
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	621a      	str	r2, [r3, #32]
  }
}
 800a754:	bf00      	nop
 800a756:	3718      	adds	r7, #24
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a764:	bf00      	nop
 800a766:	370c      	adds	r7, #12
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr

0800a770 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a778:	bf00      	nop
 800a77a:	370c      	adds	r7, #12
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a78c:	bf00      	nop
 800a78e:	370c      	adds	r7, #12
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a798:	b480      	push	{r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a7a0:	bf00      	nop
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d101      	bne.n	800a7be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	e0f1      	b.n	800a9a2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a78      	ldr	r2, [pc, #480]	; (800a9ac <HAL_SPI_Init+0x200>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d00f      	beq.n	800a7ee <HAL_SPI_Init+0x42>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a77      	ldr	r2, [pc, #476]	; (800a9b0 <HAL_SPI_Init+0x204>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d00a      	beq.n	800a7ee <HAL_SPI_Init+0x42>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a75      	ldr	r2, [pc, #468]	; (800a9b4 <HAL_SPI_Init+0x208>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d005      	beq.n	800a7ee <HAL_SPI_Init+0x42>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	68db      	ldr	r3, [r3, #12]
 800a7e6:	2b0f      	cmp	r3, #15
 800a7e8:	d901      	bls.n	800a7ee <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	e0d9      	b.n	800a9a2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 fc9c 	bl	800b12c <SPI_GetPacketSize>
 800a7f4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a6c      	ldr	r2, [pc, #432]	; (800a9ac <HAL_SPI_Init+0x200>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d00c      	beq.n	800a81a <HAL_SPI_Init+0x6e>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a6a      	ldr	r2, [pc, #424]	; (800a9b0 <HAL_SPI_Init+0x204>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d007      	beq.n	800a81a <HAL_SPI_Init+0x6e>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4a69      	ldr	r2, [pc, #420]	; (800a9b4 <HAL_SPI_Init+0x208>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d002      	beq.n	800a81a <HAL_SPI_Init+0x6e>
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2b08      	cmp	r3, #8
 800a818:	d811      	bhi.n	800a83e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a81e:	4a63      	ldr	r2, [pc, #396]	; (800a9ac <HAL_SPI_Init+0x200>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d009      	beq.n	800a838 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4a61      	ldr	r2, [pc, #388]	; (800a9b0 <HAL_SPI_Init+0x204>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d004      	beq.n	800a838 <HAL_SPI_Init+0x8c>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	4a60      	ldr	r2, [pc, #384]	; (800a9b4 <HAL_SPI_Init+0x208>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d104      	bne.n	800a842 <HAL_SPI_Init+0x96>
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2b10      	cmp	r3, #16
 800a83c:	d901      	bls.n	800a842 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a83e:	2301      	movs	r3, #1
 800a840:	e0af      	b.n	800a9a2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d106      	bne.n	800a85c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2200      	movs	r2, #0
 800a852:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f013 fe96 	bl	801e588 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2202      	movs	r2, #2
 800a860:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f022 0201 	bic.w	r2, r2, #1
 800a872:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	689b      	ldr	r3, [r3, #8]
 800a87a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a87e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	699b      	ldr	r3, [r3, #24]
 800a884:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a888:	d119      	bne.n	800a8be <HAL_SPI_Init+0x112>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a892:	d103      	bne.n	800a89c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d008      	beq.n	800a8ae <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d10c      	bne.n	800a8be <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a8a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8ac:	d107      	bne.n	800a8be <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a8bc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	69da      	ldr	r2, [r3, #28]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8c6:	431a      	orrs	r2, r3
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	431a      	orrs	r2, r3
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8d0:	ea42 0103 	orr.w	r1, r2, r3
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	68da      	ldr	r2, [r3, #12]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	430a      	orrs	r2, r1
 800a8de:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e8:	431a      	orrs	r2, r3
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ee:	431a      	orrs	r2, r3
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	699b      	ldr	r3, [r3, #24]
 800a8f4:	431a      	orrs	r2, r3
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	691b      	ldr	r3, [r3, #16]
 800a8fa:	431a      	orrs	r2, r3
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	695b      	ldr	r3, [r3, #20]
 800a900:	431a      	orrs	r2, r3
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6a1b      	ldr	r3, [r3, #32]
 800a906:	431a      	orrs	r2, r3
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	431a      	orrs	r2, r3
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a912:	431a      	orrs	r2, r3
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	689b      	ldr	r3, [r3, #8]
 800a918:	431a      	orrs	r2, r3
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a91e:	ea42 0103 	orr.w	r1, r2, r3
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	430a      	orrs	r2, r1
 800a92c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d113      	bne.n	800a95e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	689b      	ldr	r3, [r3, #8]
 800a93c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a948:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	689b      	ldr	r3, [r3, #8]
 800a950:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a95c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f022 0201 	bic.w	r2, r2, #1
 800a96c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a976:	2b00      	cmp	r3, #0
 800a978:	d00a      	beq.n	800a990 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	68db      	ldr	r3, [r3, #12]
 800a980:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	430a      	orrs	r2, r1
 800a98e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2200      	movs	r2, #0
 800a994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2201      	movs	r2, #1
 800a99c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a9a0:	2300      	movs	r3, #0
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3710      	adds	r7, #16
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	40013000 	.word	0x40013000
 800a9b0:	40003800 	.word	0x40003800
 800a9b4:	40003c00 	.word	0x40003c00

0800a9b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b08e      	sub	sp, #56	; 0x38
 800a9bc:	af02      	add	r7, sp, #8
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	60b9      	str	r1, [r7, #8]
 800a9c2:	607a      	str	r2, [r7, #4]
 800a9c4:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	3320      	adds	r3, #32
 800a9d2:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	3330      	adds	r3, #48	; 0x30
 800a9da:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	d101      	bne.n	800a9ea <HAL_SPI_TransmitReceive+0x32>
 800a9e6:	2302      	movs	r3, #2
 800a9e8:	e2ce      	b.n	800af88 <HAL_SPI_TransmitReceive+0x5d0>
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a9f2:	f7f6 fba9 	bl	8001148 <HAL_GetTick>
 800a9f6:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800a9f8:	887b      	ldrh	r3, [r7, #2]
 800a9fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800a9fc:	887b      	ldrh	r3, [r7, #2]
 800a9fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800aa06:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800aa0e:	7efb      	ldrb	r3, [r7, #27]
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d014      	beq.n	800aa3e <HAL_SPI_TransmitReceive+0x86>
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa1a:	d106      	bne.n	800aa2a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d102      	bne.n	800aa2a <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800aa24:	7efb      	ldrb	r3, [r7, #27]
 800aa26:	2b04      	cmp	r3, #4
 800aa28:	d009      	beq.n	800aa3e <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800aa2a:	2302      	movs	r3, #2
 800aa2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2200      	movs	r2, #0
 800aa34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800aa38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aa3c:	e2a4      	b.n	800af88 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d005      	beq.n	800aa50 <HAL_SPI_TransmitReceive+0x98>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d002      	beq.n	800aa50 <HAL_SPI_TransmitReceive+0x98>
 800aa4a:	887b      	ldrh	r3, [r7, #2]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d109      	bne.n	800aa64 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800aa50:	2301      	movs	r3, #1
 800aa52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800aa5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aa62:	e291      	b.n	800af88 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	2b04      	cmp	r3, #4
 800aa6e:	d003      	beq.n	800aa78 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2205      	movs	r2, #5
 800aa74:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	887a      	ldrh	r2, [r7, #2]
 800aa8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	887a      	ldrh	r2, [r7, #2]
 800aa92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	68ba      	ldr	r2, [r7, #8]
 800aa9a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	887a      	ldrh	r2, [r7, #2]
 800aaa0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	887a      	ldrh	r2, [r7, #2]
 800aaa8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2200      	movs	r2, #0
 800aab0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2200      	movs	r2, #0
 800aab6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	685a      	ldr	r2, [r3, #4]
 800aabe:	4b81      	ldr	r3, [pc, #516]	; (800acc4 <HAL_SPI_TransmitReceive+0x30c>)
 800aac0:	4013      	ands	r3, r2
 800aac2:	8879      	ldrh	r1, [r7, #2]
 800aac4:	68fa      	ldr	r2, [r7, #12]
 800aac6:	6812      	ldr	r2, [r2, #0]
 800aac8:	430b      	orrs	r3, r1
 800aaca:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	681a      	ldr	r2, [r3, #0]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f042 0201 	orr.w	r2, r2, #1
 800aada:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aae4:	d107      	bne.n	800aaf6 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aaf4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	68db      	ldr	r3, [r3, #12]
 800aafa:	2b0f      	cmp	r3, #15
 800aafc:	d970      	bls.n	800abe0 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800aafe:	e068      	b.n	800abd2 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	695b      	ldr	r3, [r3, #20]
 800ab06:	f003 0302 	and.w	r3, r3, #2
 800ab0a:	2b02      	cmp	r3, #2
 800ab0c:	d11a      	bne.n	800ab44 <HAL_SPI_TransmitReceive+0x18c>
 800ab0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d017      	beq.n	800ab44 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	6812      	ldr	r2, [r2, #0]
 800ab1e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab24:	1d1a      	adds	r2, r3, #4
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ab30:	b29b      	uxth	r3, r3
 800ab32:	3b01      	subs	r3, #1
 800ab34:	b29a      	uxth	r2, r3
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ab42:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	695a      	ldr	r2, [r3, #20]
 800ab4a:	f248 0308 	movw	r3, #32776	; 0x8008
 800ab4e:	4013      	ands	r3, r2
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d01a      	beq.n	800ab8a <HAL_SPI_TransmitReceive+0x1d2>
 800ab54:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d017      	beq.n	800ab8a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab62:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ab64:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab6a:	1d1a      	adds	r2, r3, #4
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	3b01      	subs	r3, #1
 800ab7a:	b29a      	uxth	r2, r3
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ab88:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab8a:	f7f6 fadd 	bl	8001148 <HAL_GetTick>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	69fb      	ldr	r3, [r7, #28]
 800ab92:	1ad3      	subs	r3, r2, r3
 800ab94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d803      	bhi.n	800aba2 <HAL_SPI_TransmitReceive+0x1ea>
 800ab9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aba0:	d102      	bne.n	800aba8 <HAL_SPI_TransmitReceive+0x1f0>
 800aba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d114      	bne.n	800abd2 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800aba8:	68f8      	ldr	r0, [r7, #12]
 800abaa:	f000 f9f1 	bl	800af90 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2200      	movs	r2, #0
 800abb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abbc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2201      	movs	r2, #1
 800abca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800abce:	2303      	movs	r3, #3
 800abd0:	e1da      	b.n	800af88 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800abd2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d193      	bne.n	800ab00 <HAL_SPI_TransmitReceive+0x148>
 800abd8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d190      	bne.n	800ab00 <HAL_SPI_TransmitReceive+0x148>
 800abde:	e1ac      	b.n	800af3a <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	68db      	ldr	r3, [r3, #12]
 800abe4:	2b07      	cmp	r3, #7
 800abe6:	f240 81a0 	bls.w	800af2a <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800abea:	e0a9      	b.n	800ad40 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	695b      	ldr	r3, [r3, #20]
 800abf2:	f003 0302 	and.w	r3, r3, #2
 800abf6:	2b02      	cmp	r3, #2
 800abf8:	d139      	bne.n	800ac6e <HAL_SPI_TransmitReceive+0x2b6>
 800abfa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d036      	beq.n	800ac6e <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ac00:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d91c      	bls.n	800ac40 <HAL_SPI_TransmitReceive+0x288>
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d018      	beq.n	800ac40 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	6812      	ldr	r2, [r2, #0]
 800ac18:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac1e:	1d1a      	adds	r2, r3, #4
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	3b02      	subs	r3, #2
 800ac2e:	b29a      	uxth	r2, r3
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ac3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ac3e:	e016      	b.n	800ac6e <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac44:	881a      	ldrh	r2, [r3, #0]
 800ac46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac48:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac4e:	1c9a      	adds	r2, r3, #2
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	3b01      	subs	r3, #1
 800ac5e:	b29a      	uxth	r2, r3
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ac6c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	695b      	ldr	r3, [r3, #20]
 800ac74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d03d      	beq.n	800acf8 <HAL_SPI_TransmitReceive+0x340>
 800ac7c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d03a      	beq.n	800acf8 <HAL_SPI_TransmitReceive+0x340>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	695b      	ldr	r3, [r3, #20]
 800ac88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d01b      	beq.n	800acc8 <HAL_SPI_TransmitReceive+0x310>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681a      	ldr	r2, [r3, #0]
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ac9a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aca0:	1d1a      	adds	r2, r3, #4
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800acac:	b29b      	uxth	r3, r3
 800acae:	3b02      	subs	r3, #2
 800acb0:	b29a      	uxth	r2, r3
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800acbe:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800acc0:	e01a      	b.n	800acf8 <HAL_SPI_TransmitReceive+0x340>
 800acc2:	bf00      	nop
 800acc4:	ffff0000 	.word	0xffff0000
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800accc:	6a3a      	ldr	r2, [r7, #32]
 800acce:	8812      	ldrh	r2, [r2, #0]
 800acd0:	b292      	uxth	r2, r2
 800acd2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acd8:	1c9a      	adds	r2, r3, #2
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ace4:	b29b      	uxth	r3, r3
 800ace6:	3b01      	subs	r3, #1
 800ace8:	b29a      	uxth	r2, r3
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800acf6:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800acf8:	f7f6 fa26 	bl	8001148 <HAL_GetTick>
 800acfc:	4602      	mov	r2, r0
 800acfe:	69fb      	ldr	r3, [r7, #28]
 800ad00:	1ad3      	subs	r3, r2, r3
 800ad02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d803      	bhi.n	800ad10 <HAL_SPI_TransmitReceive+0x358>
 800ad08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad0e:	d102      	bne.n	800ad16 <HAL_SPI_TransmitReceive+0x35e>
 800ad10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d114      	bne.n	800ad40 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800ad16:	68f8      	ldr	r0, [r7, #12]
 800ad18:	f000 f93a 	bl	800af90 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2201      	movs	r2, #1
 800ad38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800ad3c:	2303      	movs	r3, #3
 800ad3e:	e123      	b.n	800af88 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ad40:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	f47f af52 	bne.w	800abec <HAL_SPI_TransmitReceive+0x234>
 800ad48:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	f47f af4e 	bne.w	800abec <HAL_SPI_TransmitReceive+0x234>
 800ad50:	e0f3      	b.n	800af3a <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	695b      	ldr	r3, [r3, #20]
 800ad58:	f003 0302 	and.w	r3, r3, #2
 800ad5c:	2b02      	cmp	r3, #2
 800ad5e:	d15a      	bne.n	800ae16 <HAL_SPI_TransmitReceive+0x45e>
 800ad60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d057      	beq.n	800ae16 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ad66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ad68:	2b03      	cmp	r3, #3
 800ad6a:	d91c      	bls.n	800ada6 <HAL_SPI_TransmitReceive+0x3ee>
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad70:	2b40      	cmp	r3, #64	; 0x40
 800ad72:	d918      	bls.n	800ada6 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	6812      	ldr	r2, [r2, #0]
 800ad7e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad84:	1d1a      	adds	r2, r3, #4
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ad90:	b29b      	uxth	r3, r3
 800ad92:	3b04      	subs	r3, #4
 800ad94:	b29a      	uxth	r2, r3
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ada2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ada4:	e037      	b.n	800ae16 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ada6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d91b      	bls.n	800ade4 <HAL_SPI_TransmitReceive+0x42c>
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d017      	beq.n	800ade4 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adb8:	881a      	ldrh	r2, [r3, #0]
 800adba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adbc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adc2:	1c9a      	adds	r2, r3, #2
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800adce:	b29b      	uxth	r3, r3
 800add0:	3b02      	subs	r3, #2
 800add2:	b29a      	uxth	r2, r3
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ade0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ade2:	e018      	b.n	800ae16 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	3320      	adds	r3, #32
 800adee:	7812      	ldrb	r2, [r2, #0]
 800adf0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adf6:	1c5a      	adds	r2, r3, #1
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ae02:	b29b      	uxth	r3, r3
 800ae04:	3b01      	subs	r3, #1
 800ae06:	b29a      	uxth	r2, r3
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ae14:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	695b      	ldr	r3, [r3, #20]
 800ae1c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d05e      	beq.n	800aee2 <HAL_SPI_TransmitReceive+0x52a>
 800ae24:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d05b      	beq.n	800aee2 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	695b      	ldr	r3, [r3, #20]
 800ae30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d018      	beq.n	800ae6a <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae40:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ae42:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae48:	1d1a      	adds	r2, r3, #4
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	3b04      	subs	r3, #4
 800ae58:	b29a      	uxth	r2, r3
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ae66:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ae68:	e03b      	b.n	800aee2 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	695b      	ldr	r3, [r3, #20]
 800ae70:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800ae74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae78:	d918      	bls.n	800aeac <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae7e:	6a3a      	ldr	r2, [r7, #32]
 800ae80:	8812      	ldrh	r2, [r2, #0]
 800ae82:	b292      	uxth	r2, r2
 800ae84:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae8a:	1c9a      	adds	r2, r3, #2
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	3b02      	subs	r3, #2
 800ae9a:	b29a      	uxth	r2, r3
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800aea8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800aeaa:	e01a      	b.n	800aee2 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aeb8:	7812      	ldrb	r2, [r2, #0]
 800aeba:	b2d2      	uxtb	r2, r2
 800aebc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aec2:	1c5a      	adds	r2, r3, #1
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800aece:	b29b      	uxth	r3, r3
 800aed0:	3b01      	subs	r3, #1
 800aed2:	b29a      	uxth	r2, r3
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800aee0:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aee2:	f7f6 f931 	bl	8001148 <HAL_GetTick>
 800aee6:	4602      	mov	r2, r0
 800aee8:	69fb      	ldr	r3, [r7, #28]
 800aeea:	1ad3      	subs	r3, r2, r3
 800aeec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d803      	bhi.n	800aefa <HAL_SPI_TransmitReceive+0x542>
 800aef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aef8:	d102      	bne.n	800af00 <HAL_SPI_TransmitReceive+0x548>
 800aefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d114      	bne.n	800af2a <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800af00:	68f8      	ldr	r0, [r7, #12]
 800af02:	f000 f845 	bl	800af90 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2200      	movs	r2, #0
 800af0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2201      	movs	r2, #1
 800af22:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800af26:	2303      	movs	r3, #3
 800af28:	e02e      	b.n	800af88 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800af2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	f47f af10 	bne.w	800ad52 <HAL_SPI_TransmitReceive+0x39a>
 800af32:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800af34:	2b00      	cmp	r3, #0
 800af36:	f47f af0c 	bne.w	800ad52 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800af3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af3c:	9300      	str	r3, [sp, #0]
 800af3e:	69fb      	ldr	r3, [r7, #28]
 800af40:	2200      	movs	r2, #0
 800af42:	2108      	movs	r1, #8
 800af44:	68f8      	ldr	r0, [r7, #12]
 800af46:	f000 f8c3 	bl	800b0d0 <SPI_WaitOnFlagUntilTimeout>
 800af4a:	4603      	mov	r3, r0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d007      	beq.n	800af60 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af56:	f043 0220 	orr.w	r2, r3, #32
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800af60:	68f8      	ldr	r0, [r7, #12]
 800af62:	f000 f815 	bl	800af90 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2200      	movs	r2, #0
 800af6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2201      	movs	r2, #1
 800af72:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d001      	beq.n	800af84 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800af80:	2301      	movs	r3, #1
 800af82:	e001      	b.n	800af88 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800af84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3730      	adds	r7, #48	; 0x30
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800af90:	b480      	push	{r7}
 800af92:	b085      	sub	sp, #20
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	695b      	ldr	r3, [r3, #20]
 800af9e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	699a      	ldr	r2, [r3, #24]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f042 0208 	orr.w	r2, r2, #8
 800afae:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	699a      	ldr	r2, [r3, #24]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f042 0210 	orr.w	r2, r2, #16
 800afbe:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	681a      	ldr	r2, [r3, #0]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f022 0201 	bic.w	r2, r2, #1
 800afce:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	6919      	ldr	r1, [r3, #16]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681a      	ldr	r2, [r3, #0]
 800afda:	4b3c      	ldr	r3, [pc, #240]	; (800b0cc <SPI_CloseTransfer+0x13c>)
 800afdc:	400b      	ands	r3, r1
 800afde:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	689a      	ldr	r2, [r3, #8]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800afee:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	2b04      	cmp	r3, #4
 800affa:	d014      	beq.n	800b026 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	f003 0320 	and.w	r3, r3, #32
 800b002:	2b00      	cmp	r3, #0
 800b004:	d00f      	beq.n	800b026 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b00c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	699a      	ldr	r2, [r3, #24]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f042 0220 	orr.w	r2, r2, #32
 800b024:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	2b03      	cmp	r3, #3
 800b030:	d014      	beq.n	800b05c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d00f      	beq.n	800b05c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b042:	f043 0204 	orr.w	r2, r3, #4
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	699a      	ldr	r2, [r3, #24]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b05a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b062:	2b00      	cmp	r3, #0
 800b064:	d00f      	beq.n	800b086 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b06c:	f043 0201 	orr.w	r2, r3, #1
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	699a      	ldr	r2, [r3, #24]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b084:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d00f      	beq.n	800b0b0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b096:	f043 0208 	orr.w	r2, r3, #8
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	699a      	ldr	r2, [r3, #24]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b0ae:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800b0c0:	bf00      	nop
 800b0c2:	3714      	adds	r7, #20
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr
 800b0cc:	fffffc90 	.word	0xfffffc90

0800b0d0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b084      	sub	sp, #16
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	60b9      	str	r1, [r7, #8]
 800b0da:	603b      	str	r3, [r7, #0]
 800b0dc:	4613      	mov	r3, r2
 800b0de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b0e0:	e010      	b.n	800b104 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b0e2:	f7f6 f831 	bl	8001148 <HAL_GetTick>
 800b0e6:	4602      	mov	r2, r0
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	1ad3      	subs	r3, r2, r3
 800b0ec:	69ba      	ldr	r2, [r7, #24]
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d803      	bhi.n	800b0fa <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b0f2:	69bb      	ldr	r3, [r7, #24]
 800b0f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0f8:	d102      	bne.n	800b100 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b0fa:	69bb      	ldr	r3, [r7, #24]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d101      	bne.n	800b104 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b100:	2303      	movs	r3, #3
 800b102:	e00f      	b.n	800b124 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	695a      	ldr	r2, [r3, #20]
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	4013      	ands	r3, r2
 800b10e:	68ba      	ldr	r2, [r7, #8]
 800b110:	429a      	cmp	r2, r3
 800b112:	bf0c      	ite	eq
 800b114:	2301      	moveq	r3, #1
 800b116:	2300      	movne	r3, #0
 800b118:	b2db      	uxtb	r3, r3
 800b11a:	461a      	mov	r2, r3
 800b11c:	79fb      	ldrb	r3, [r7, #7]
 800b11e:	429a      	cmp	r2, r3
 800b120:	d0df      	beq.n	800b0e2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b122:	2300      	movs	r3, #0
}
 800b124:	4618      	mov	r0, r3
 800b126:	3710      	adds	r7, #16
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b085      	sub	sp, #20
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b138:	095b      	lsrs	r3, r3, #5
 800b13a:	3301      	adds	r3, #1
 800b13c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	3301      	adds	r3, #1
 800b144:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	3307      	adds	r3, #7
 800b14a:	08db      	lsrs	r3, r3, #3
 800b14c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	68fa      	ldr	r2, [r7, #12]
 800b152:	fb02 f303 	mul.w	r3, r2, r3
}
 800b156:	4618      	mov	r0, r3
 800b158:	3714      	adds	r7, #20
 800b15a:	46bd      	mov	sp, r7
 800b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b160:	4770      	bx	lr

0800b162 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b082      	sub	sp, #8
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d101      	bne.n	800b174 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b170:	2301      	movs	r3, #1
 800b172:	e049      	b.n	800b208 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b17a:	b2db      	uxtb	r3, r3
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d106      	bne.n	800b18e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2200      	movs	r2, #0
 800b184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f013 fbbf 	bl	801e90c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2202      	movs	r2, #2
 800b192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	3304      	adds	r3, #4
 800b19e:	4619      	mov	r1, r3
 800b1a0:	4610      	mov	r0, r2
 800b1a2:	f000 fbe5 	bl	800b970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2201      	movs	r2, #1
 800b1b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2201      	movs	r2, #1
 800b1da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2201      	movs	r2, #1
 800b1ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2201      	movs	r2, #1
 800b1f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2201      	movs	r2, #1
 800b202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b206:	2300      	movs	r3, #0
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3708      	adds	r7, #8
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b210:	b480      	push	{r7}
 800b212:	b085      	sub	sp, #20
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b21e:	b2db      	uxtb	r3, r3
 800b220:	2b01      	cmp	r3, #1
 800b222:	d001      	beq.n	800b228 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b224:	2301      	movs	r3, #1
 800b226:	e054      	b.n	800b2d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2202      	movs	r2, #2
 800b22c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	68da      	ldr	r2, [r3, #12]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f042 0201 	orr.w	r2, r2, #1
 800b23e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	4a26      	ldr	r2, [pc, #152]	; (800b2e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d022      	beq.n	800b290 <HAL_TIM_Base_Start_IT+0x80>
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b252:	d01d      	beq.n	800b290 <HAL_TIM_Base_Start_IT+0x80>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4a22      	ldr	r2, [pc, #136]	; (800b2e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d018      	beq.n	800b290 <HAL_TIM_Base_Start_IT+0x80>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4a21      	ldr	r2, [pc, #132]	; (800b2e8 <HAL_TIM_Base_Start_IT+0xd8>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d013      	beq.n	800b290 <HAL_TIM_Base_Start_IT+0x80>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	4a1f      	ldr	r2, [pc, #124]	; (800b2ec <HAL_TIM_Base_Start_IT+0xdc>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	d00e      	beq.n	800b290 <HAL_TIM_Base_Start_IT+0x80>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	4a1e      	ldr	r2, [pc, #120]	; (800b2f0 <HAL_TIM_Base_Start_IT+0xe0>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d009      	beq.n	800b290 <HAL_TIM_Base_Start_IT+0x80>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a1c      	ldr	r2, [pc, #112]	; (800b2f4 <HAL_TIM_Base_Start_IT+0xe4>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d004      	beq.n	800b290 <HAL_TIM_Base_Start_IT+0x80>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4a1b      	ldr	r2, [pc, #108]	; (800b2f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d115      	bne.n	800b2bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	689a      	ldr	r2, [r3, #8]
 800b296:	4b19      	ldr	r3, [pc, #100]	; (800b2fc <HAL_TIM_Base_Start_IT+0xec>)
 800b298:	4013      	ands	r3, r2
 800b29a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2b06      	cmp	r3, #6
 800b2a0:	d015      	beq.n	800b2ce <HAL_TIM_Base_Start_IT+0xbe>
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2a8:	d011      	beq.n	800b2ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f042 0201 	orr.w	r2, r2, #1
 800b2b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2ba:	e008      	b.n	800b2ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	681a      	ldr	r2, [r3, #0]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f042 0201 	orr.w	r2, r2, #1
 800b2ca:	601a      	str	r2, [r3, #0]
 800b2cc:	e000      	b.n	800b2d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b2d0:	2300      	movs	r3, #0
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3714      	adds	r7, #20
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr
 800b2de:	bf00      	nop
 800b2e0:	40010000 	.word	0x40010000
 800b2e4:	40000400 	.word	0x40000400
 800b2e8:	40000800 	.word	0x40000800
 800b2ec:	40000c00 	.word	0x40000c00
 800b2f0:	40010400 	.word	0x40010400
 800b2f4:	40001800 	.word	0x40001800
 800b2f8:	40014000 	.word	0x40014000
 800b2fc:	00010007 	.word	0x00010007

0800b300 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b30a:	2300      	movs	r3, #0
 800b30c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	2b0c      	cmp	r3, #12
 800b312:	d841      	bhi.n	800b398 <HAL_TIM_IC_Stop_IT+0x98>
 800b314:	a201      	add	r2, pc, #4	; (adr r2, 800b31c <HAL_TIM_IC_Stop_IT+0x1c>)
 800b316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b31a:	bf00      	nop
 800b31c:	0800b351 	.word	0x0800b351
 800b320:	0800b399 	.word	0x0800b399
 800b324:	0800b399 	.word	0x0800b399
 800b328:	0800b399 	.word	0x0800b399
 800b32c:	0800b363 	.word	0x0800b363
 800b330:	0800b399 	.word	0x0800b399
 800b334:	0800b399 	.word	0x0800b399
 800b338:	0800b399 	.word	0x0800b399
 800b33c:	0800b375 	.word	0x0800b375
 800b340:	0800b399 	.word	0x0800b399
 800b344:	0800b399 	.word	0x0800b399
 800b348:	0800b399 	.word	0x0800b399
 800b34c:	0800b387 	.word	0x0800b387
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	68da      	ldr	r2, [r3, #12]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f022 0202 	bic.w	r2, r2, #2
 800b35e:	60da      	str	r2, [r3, #12]
      break;
 800b360:	e01d      	b.n	800b39e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	68da      	ldr	r2, [r3, #12]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f022 0204 	bic.w	r2, r2, #4
 800b370:	60da      	str	r2, [r3, #12]
      break;
 800b372:	e014      	b.n	800b39e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	68da      	ldr	r2, [r3, #12]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f022 0208 	bic.w	r2, r2, #8
 800b382:	60da      	str	r2, [r3, #12]
      break;
 800b384:	e00b      	b.n	800b39e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	68da      	ldr	r2, [r3, #12]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f022 0210 	bic.w	r2, r2, #16
 800b394:	60da      	str	r2, [r3, #12]
      break;
 800b396:	e002      	b.n	800b39e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800b398:	2301      	movs	r3, #1
 800b39a:	73fb      	strb	r3, [r7, #15]
      break;
 800b39c:	bf00      	nop
  }

  if (status == HAL_OK)
 800b39e:	7bfb      	ldrb	r3, [r7, #15]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d166      	bne.n	800b472 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	6839      	ldr	r1, [r7, #0]
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f000 fc17 	bl	800bbe0 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	6a1a      	ldr	r2, [r3, #32]
 800b3b8:	f241 1311 	movw	r3, #4369	; 0x1111
 800b3bc:	4013      	ands	r3, r2
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d10f      	bne.n	800b3e2 <HAL_TIM_IC_Stop_IT+0xe2>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	6a1a      	ldr	r2, [r3, #32]
 800b3c8:	f240 4344 	movw	r3, #1092	; 0x444
 800b3cc:	4013      	ands	r3, r2
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d107      	bne.n	800b3e2 <HAL_TIM_IC_Stop_IT+0xe2>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	681a      	ldr	r2, [r3, #0]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f022 0201 	bic.w	r2, r2, #1
 800b3e0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d104      	bne.n	800b3f2 <HAL_TIM_IC_Stop_IT+0xf2>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b3f0:	e023      	b.n	800b43a <HAL_TIM_IC_Stop_IT+0x13a>
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	2b04      	cmp	r3, #4
 800b3f6:	d104      	bne.n	800b402 <HAL_TIM_IC_Stop_IT+0x102>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b400:	e01b      	b.n	800b43a <HAL_TIM_IC_Stop_IT+0x13a>
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	2b08      	cmp	r3, #8
 800b406:	d104      	bne.n	800b412 <HAL_TIM_IC_Stop_IT+0x112>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2201      	movs	r2, #1
 800b40c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b410:	e013      	b.n	800b43a <HAL_TIM_IC_Stop_IT+0x13a>
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	2b0c      	cmp	r3, #12
 800b416:	d104      	bne.n	800b422 <HAL_TIM_IC_Stop_IT+0x122>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2201      	movs	r2, #1
 800b41c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b420:	e00b      	b.n	800b43a <HAL_TIM_IC_Stop_IT+0x13a>
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	2b10      	cmp	r3, #16
 800b426:	d104      	bne.n	800b432 <HAL_TIM_IC_Stop_IT+0x132>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2201      	movs	r2, #1
 800b42c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b430:	e003      	b.n	800b43a <HAL_TIM_IC_Stop_IT+0x13a>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2201      	movs	r2, #1
 800b436:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d104      	bne.n	800b44a <HAL_TIM_IC_Stop_IT+0x14a>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2201      	movs	r2, #1
 800b444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b448:	e013      	b.n	800b472 <HAL_TIM_IC_Stop_IT+0x172>
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	2b04      	cmp	r3, #4
 800b44e:	d104      	bne.n	800b45a <HAL_TIM_IC_Stop_IT+0x15a>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2201      	movs	r2, #1
 800b454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b458:	e00b      	b.n	800b472 <HAL_TIM_IC_Stop_IT+0x172>
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	2b08      	cmp	r3, #8
 800b45e:	d104      	bne.n	800b46a <HAL_TIM_IC_Stop_IT+0x16a>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2201      	movs	r2, #1
 800b464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b468:	e003      	b.n	800b472 <HAL_TIM_IC_Stop_IT+0x172>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2201      	movs	r2, #1
 800b46e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 800b472:	7bfb      	ldrb	r3, [r7, #15]
}
 800b474:	4618      	mov	r0, r3
 800b476:	3710      	adds	r7, #16
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b082      	sub	sp, #8
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	691b      	ldr	r3, [r3, #16]
 800b48a:	f003 0302 	and.w	r3, r3, #2
 800b48e:	2b02      	cmp	r3, #2
 800b490:	d122      	bne.n	800b4d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	f003 0302 	and.w	r3, r3, #2
 800b49c:	2b02      	cmp	r3, #2
 800b49e:	d11b      	bne.n	800b4d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f06f 0202 	mvn.w	r2, #2
 800b4a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	699b      	ldr	r3, [r3, #24]
 800b4b6:	f003 0303 	and.w	r3, r3, #3
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d003      	beq.n	800b4c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f014 fc2e 	bl	801fd20 <HAL_TIM_IC_CaptureCallback>
 800b4c4:	e005      	b.n	800b4d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f000 fa34 	bl	800b934 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f000 fa3b 	bl	800b948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	691b      	ldr	r3, [r3, #16]
 800b4de:	f003 0304 	and.w	r3, r3, #4
 800b4e2:	2b04      	cmp	r3, #4
 800b4e4:	d122      	bne.n	800b52c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	68db      	ldr	r3, [r3, #12]
 800b4ec:	f003 0304 	and.w	r3, r3, #4
 800b4f0:	2b04      	cmp	r3, #4
 800b4f2:	d11b      	bne.n	800b52c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f06f 0204 	mvn.w	r2, #4
 800b4fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2202      	movs	r2, #2
 800b502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	699b      	ldr	r3, [r3, #24]
 800b50a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d003      	beq.n	800b51a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f014 fc04 	bl	801fd20 <HAL_TIM_IC_CaptureCallback>
 800b518:	e005      	b.n	800b526 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 fa0a 	bl	800b934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f000 fa11 	bl	800b948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2200      	movs	r2, #0
 800b52a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	691b      	ldr	r3, [r3, #16]
 800b532:	f003 0308 	and.w	r3, r3, #8
 800b536:	2b08      	cmp	r3, #8
 800b538:	d122      	bne.n	800b580 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	68db      	ldr	r3, [r3, #12]
 800b540:	f003 0308 	and.w	r3, r3, #8
 800b544:	2b08      	cmp	r3, #8
 800b546:	d11b      	bne.n	800b580 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f06f 0208 	mvn.w	r2, #8
 800b550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2204      	movs	r2, #4
 800b556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	69db      	ldr	r3, [r3, #28]
 800b55e:	f003 0303 	and.w	r3, r3, #3
 800b562:	2b00      	cmp	r3, #0
 800b564:	d003      	beq.n	800b56e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f014 fbda 	bl	801fd20 <HAL_TIM_IC_CaptureCallback>
 800b56c:	e005      	b.n	800b57a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f000 f9e0 	bl	800b934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f000 f9e7 	bl	800b948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2200      	movs	r2, #0
 800b57e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	691b      	ldr	r3, [r3, #16]
 800b586:	f003 0310 	and.w	r3, r3, #16
 800b58a:	2b10      	cmp	r3, #16
 800b58c:	d122      	bne.n	800b5d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	68db      	ldr	r3, [r3, #12]
 800b594:	f003 0310 	and.w	r3, r3, #16
 800b598:	2b10      	cmp	r3, #16
 800b59a:	d11b      	bne.n	800b5d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f06f 0210 	mvn.w	r2, #16
 800b5a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2208      	movs	r2, #8
 800b5aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	69db      	ldr	r3, [r3, #28]
 800b5b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d003      	beq.n	800b5c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f014 fbb0 	bl	801fd20 <HAL_TIM_IC_CaptureCallback>
 800b5c0:	e005      	b.n	800b5ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f000 f9b6 	bl	800b934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f000 f9bd 	bl	800b948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	691b      	ldr	r3, [r3, #16]
 800b5da:	f003 0301 	and.w	r3, r3, #1
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d10e      	bne.n	800b600 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	68db      	ldr	r3, [r3, #12]
 800b5e8:	f003 0301 	and.w	r3, r3, #1
 800b5ec:	2b01      	cmp	r3, #1
 800b5ee:	d107      	bne.n	800b600 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f06f 0201 	mvn.w	r2, #1
 800b5f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f013 f910 	bl	801e820 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	691b      	ldr	r3, [r3, #16]
 800b606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b60a:	2b80      	cmp	r3, #128	; 0x80
 800b60c:	d10e      	bne.n	800b62c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	68db      	ldr	r3, [r3, #12]
 800b614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b618:	2b80      	cmp	r3, #128	; 0x80
 800b61a:	d107      	bne.n	800b62c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 fb98 	bl	800bd5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	691b      	ldr	r3, [r3, #16]
 800b632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b63a:	d10e      	bne.n	800b65a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	68db      	ldr	r3, [r3, #12]
 800b642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b646:	2b80      	cmp	r3, #128	; 0x80
 800b648:	d107      	bne.n	800b65a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 fb8b 	bl	800bd70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	691b      	ldr	r3, [r3, #16]
 800b660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b664:	2b40      	cmp	r3, #64	; 0x40
 800b666:	d10e      	bne.n	800b686 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	68db      	ldr	r3, [r3, #12]
 800b66e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b672:	2b40      	cmp	r3, #64	; 0x40
 800b674:	d107      	bne.n	800b686 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b67e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f000 f96b 	bl	800b95c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	691b      	ldr	r3, [r3, #16]
 800b68c:	f003 0320 	and.w	r3, r3, #32
 800b690:	2b20      	cmp	r3, #32
 800b692:	d10e      	bne.n	800b6b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	68db      	ldr	r3, [r3, #12]
 800b69a:	f003 0320 	and.w	r3, r3, #32
 800b69e:	2b20      	cmp	r3, #32
 800b6a0:	d107      	bne.n	800b6b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f06f 0220 	mvn.w	r2, #32
 800b6aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f000 fb4b 	bl	800bd48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b6b2:	bf00      	nop
 800b6b4:	3708      	adds	r7, #8
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
	...

0800b6bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b084      	sub	sp, #16
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d101      	bne.n	800b6d8 <HAL_TIM_ConfigClockSource+0x1c>
 800b6d4:	2302      	movs	r3, #2
 800b6d6:	e0dc      	b.n	800b892 <HAL_TIM_ConfigClockSource+0x1d6>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2201      	movs	r2, #1
 800b6dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2202      	movs	r2, #2
 800b6e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	689b      	ldr	r3, [r3, #8]
 800b6ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b6f0:	68ba      	ldr	r2, [r7, #8]
 800b6f2:	4b6a      	ldr	r3, [pc, #424]	; (800b89c <HAL_TIM_ConfigClockSource+0x1e0>)
 800b6f4:	4013      	ands	r3, r2
 800b6f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b6fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	68ba      	ldr	r2, [r7, #8]
 800b706:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a64      	ldr	r2, [pc, #400]	; (800b8a0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	f000 80a9 	beq.w	800b866 <HAL_TIM_ConfigClockSource+0x1aa>
 800b714:	4a62      	ldr	r2, [pc, #392]	; (800b8a0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b716:	4293      	cmp	r3, r2
 800b718:	f200 80ae 	bhi.w	800b878 <HAL_TIM_ConfigClockSource+0x1bc>
 800b71c:	4a61      	ldr	r2, [pc, #388]	; (800b8a4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	f000 80a1 	beq.w	800b866 <HAL_TIM_ConfigClockSource+0x1aa>
 800b724:	4a5f      	ldr	r2, [pc, #380]	; (800b8a4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b726:	4293      	cmp	r3, r2
 800b728:	f200 80a6 	bhi.w	800b878 <HAL_TIM_ConfigClockSource+0x1bc>
 800b72c:	4a5e      	ldr	r2, [pc, #376]	; (800b8a8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	f000 8099 	beq.w	800b866 <HAL_TIM_ConfigClockSource+0x1aa>
 800b734:	4a5c      	ldr	r2, [pc, #368]	; (800b8a8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b736:	4293      	cmp	r3, r2
 800b738:	f200 809e 	bhi.w	800b878 <HAL_TIM_ConfigClockSource+0x1bc>
 800b73c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b740:	f000 8091 	beq.w	800b866 <HAL_TIM_ConfigClockSource+0x1aa>
 800b744:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b748:	f200 8096 	bhi.w	800b878 <HAL_TIM_ConfigClockSource+0x1bc>
 800b74c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b750:	f000 8089 	beq.w	800b866 <HAL_TIM_ConfigClockSource+0x1aa>
 800b754:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b758:	f200 808e 	bhi.w	800b878 <HAL_TIM_ConfigClockSource+0x1bc>
 800b75c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b760:	d03e      	beq.n	800b7e0 <HAL_TIM_ConfigClockSource+0x124>
 800b762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b766:	f200 8087 	bhi.w	800b878 <HAL_TIM_ConfigClockSource+0x1bc>
 800b76a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b76e:	f000 8086 	beq.w	800b87e <HAL_TIM_ConfigClockSource+0x1c2>
 800b772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b776:	d87f      	bhi.n	800b878 <HAL_TIM_ConfigClockSource+0x1bc>
 800b778:	2b70      	cmp	r3, #112	; 0x70
 800b77a:	d01a      	beq.n	800b7b2 <HAL_TIM_ConfigClockSource+0xf6>
 800b77c:	2b70      	cmp	r3, #112	; 0x70
 800b77e:	d87b      	bhi.n	800b878 <HAL_TIM_ConfigClockSource+0x1bc>
 800b780:	2b60      	cmp	r3, #96	; 0x60
 800b782:	d050      	beq.n	800b826 <HAL_TIM_ConfigClockSource+0x16a>
 800b784:	2b60      	cmp	r3, #96	; 0x60
 800b786:	d877      	bhi.n	800b878 <HAL_TIM_ConfigClockSource+0x1bc>
 800b788:	2b50      	cmp	r3, #80	; 0x50
 800b78a:	d03c      	beq.n	800b806 <HAL_TIM_ConfigClockSource+0x14a>
 800b78c:	2b50      	cmp	r3, #80	; 0x50
 800b78e:	d873      	bhi.n	800b878 <HAL_TIM_ConfigClockSource+0x1bc>
 800b790:	2b40      	cmp	r3, #64	; 0x40
 800b792:	d058      	beq.n	800b846 <HAL_TIM_ConfigClockSource+0x18a>
 800b794:	2b40      	cmp	r3, #64	; 0x40
 800b796:	d86f      	bhi.n	800b878 <HAL_TIM_ConfigClockSource+0x1bc>
 800b798:	2b30      	cmp	r3, #48	; 0x30
 800b79a:	d064      	beq.n	800b866 <HAL_TIM_ConfigClockSource+0x1aa>
 800b79c:	2b30      	cmp	r3, #48	; 0x30
 800b79e:	d86b      	bhi.n	800b878 <HAL_TIM_ConfigClockSource+0x1bc>
 800b7a0:	2b20      	cmp	r3, #32
 800b7a2:	d060      	beq.n	800b866 <HAL_TIM_ConfigClockSource+0x1aa>
 800b7a4:	2b20      	cmp	r3, #32
 800b7a6:	d867      	bhi.n	800b878 <HAL_TIM_ConfigClockSource+0x1bc>
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d05c      	beq.n	800b866 <HAL_TIM_ConfigClockSource+0x1aa>
 800b7ac:	2b10      	cmp	r3, #16
 800b7ae:	d05a      	beq.n	800b866 <HAL_TIM_ConfigClockSource+0x1aa>
 800b7b0:	e062      	b.n	800b878 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6818      	ldr	r0, [r3, #0]
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	6899      	ldr	r1, [r3, #8]
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	685a      	ldr	r2, [r3, #4]
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	68db      	ldr	r3, [r3, #12]
 800b7c2:	f000 f9ed 	bl	800bba0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	689b      	ldr	r3, [r3, #8]
 800b7cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b7d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	68ba      	ldr	r2, [r7, #8]
 800b7dc:	609a      	str	r2, [r3, #8]
      break;
 800b7de:	e04f      	b.n	800b880 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6818      	ldr	r0, [r3, #0]
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	6899      	ldr	r1, [r3, #8]
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	685a      	ldr	r2, [r3, #4]
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	68db      	ldr	r3, [r3, #12]
 800b7f0:	f000 f9d6 	bl	800bba0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	689a      	ldr	r2, [r3, #8]
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b802:	609a      	str	r2, [r3, #8]
      break;
 800b804:	e03c      	b.n	800b880 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6818      	ldr	r0, [r3, #0]
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	6859      	ldr	r1, [r3, #4]
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	68db      	ldr	r3, [r3, #12]
 800b812:	461a      	mov	r2, r3
 800b814:	f000 f946 	bl	800baa4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2150      	movs	r1, #80	; 0x50
 800b81e:	4618      	mov	r0, r3
 800b820:	f000 f9a0 	bl	800bb64 <TIM_ITRx_SetConfig>
      break;
 800b824:	e02c      	b.n	800b880 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6818      	ldr	r0, [r3, #0]
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	6859      	ldr	r1, [r3, #4]
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	68db      	ldr	r3, [r3, #12]
 800b832:	461a      	mov	r2, r3
 800b834:	f000 f965 	bl	800bb02 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	2160      	movs	r1, #96	; 0x60
 800b83e:	4618      	mov	r0, r3
 800b840:	f000 f990 	bl	800bb64 <TIM_ITRx_SetConfig>
      break;
 800b844:	e01c      	b.n	800b880 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6818      	ldr	r0, [r3, #0]
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	6859      	ldr	r1, [r3, #4]
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	68db      	ldr	r3, [r3, #12]
 800b852:	461a      	mov	r2, r3
 800b854:	f000 f926 	bl	800baa4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	2140      	movs	r1, #64	; 0x40
 800b85e:	4618      	mov	r0, r3
 800b860:	f000 f980 	bl	800bb64 <TIM_ITRx_SetConfig>
      break;
 800b864:	e00c      	b.n	800b880 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681a      	ldr	r2, [r3, #0]
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4619      	mov	r1, r3
 800b870:	4610      	mov	r0, r2
 800b872:	f000 f977 	bl	800bb64 <TIM_ITRx_SetConfig>
      break;
 800b876:	e003      	b.n	800b880 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b878:	2301      	movs	r3, #1
 800b87a:	73fb      	strb	r3, [r7, #15]
      break;
 800b87c:	e000      	b.n	800b880 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b87e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2201      	movs	r2, #1
 800b884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2200      	movs	r2, #0
 800b88c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b890:	7bfb      	ldrb	r3, [r7, #15]
}
 800b892:	4618      	mov	r0, r3
 800b894:	3710      	adds	r7, #16
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
 800b89a:	bf00      	nop
 800b89c:	ffceff88 	.word	0xffceff88
 800b8a0:	00100040 	.word	0x00100040
 800b8a4:	00100030 	.word	0x00100030
 800b8a8:	00100020 	.word	0x00100020

0800b8ac <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b085      	sub	sp, #20
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
 800b8b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	2b0c      	cmp	r3, #12
 800b8be:	d831      	bhi.n	800b924 <HAL_TIM_ReadCapturedValue+0x78>
 800b8c0:	a201      	add	r2, pc, #4	; (adr r2, 800b8c8 <HAL_TIM_ReadCapturedValue+0x1c>)
 800b8c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8c6:	bf00      	nop
 800b8c8:	0800b8fd 	.word	0x0800b8fd
 800b8cc:	0800b925 	.word	0x0800b925
 800b8d0:	0800b925 	.word	0x0800b925
 800b8d4:	0800b925 	.word	0x0800b925
 800b8d8:	0800b907 	.word	0x0800b907
 800b8dc:	0800b925 	.word	0x0800b925
 800b8e0:	0800b925 	.word	0x0800b925
 800b8e4:	0800b925 	.word	0x0800b925
 800b8e8:	0800b911 	.word	0x0800b911
 800b8ec:	0800b925 	.word	0x0800b925
 800b8f0:	0800b925 	.word	0x0800b925
 800b8f4:	0800b925 	.word	0x0800b925
 800b8f8:	0800b91b 	.word	0x0800b91b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b902:	60fb      	str	r3, [r7, #12]

      break;
 800b904:	e00f      	b.n	800b926 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b90c:	60fb      	str	r3, [r7, #12]

      break;
 800b90e:	e00a      	b.n	800b926 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b916:	60fb      	str	r3, [r7, #12]

      break;
 800b918:	e005      	b.n	800b926 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b920:	60fb      	str	r3, [r7, #12]

      break;
 800b922:	e000      	b.n	800b926 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800b924:	bf00      	nop
  }

  return tmpreg;
 800b926:	68fb      	ldr	r3, [r7, #12]
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3714      	adds	r7, #20
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr

0800b934 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b93c:	bf00      	nop
 800b93e:	370c      	adds	r7, #12
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr

0800b948 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b948:	b480      	push	{r7}
 800b94a:	b083      	sub	sp, #12
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b950:	bf00      	nop
 800b952:	370c      	adds	r7, #12
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b083      	sub	sp, #12
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b964:	bf00      	nop
 800b966:	370c      	adds	r7, #12
 800b968:	46bd      	mov	sp, r7
 800b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96e:	4770      	bx	lr

0800b970 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b970:	b480      	push	{r7}
 800b972:	b085      	sub	sp, #20
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	4a40      	ldr	r2, [pc, #256]	; (800ba84 <TIM_Base_SetConfig+0x114>)
 800b984:	4293      	cmp	r3, r2
 800b986:	d013      	beq.n	800b9b0 <TIM_Base_SetConfig+0x40>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b98e:	d00f      	beq.n	800b9b0 <TIM_Base_SetConfig+0x40>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	4a3d      	ldr	r2, [pc, #244]	; (800ba88 <TIM_Base_SetConfig+0x118>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d00b      	beq.n	800b9b0 <TIM_Base_SetConfig+0x40>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	4a3c      	ldr	r2, [pc, #240]	; (800ba8c <TIM_Base_SetConfig+0x11c>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d007      	beq.n	800b9b0 <TIM_Base_SetConfig+0x40>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	4a3b      	ldr	r2, [pc, #236]	; (800ba90 <TIM_Base_SetConfig+0x120>)
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d003      	beq.n	800b9b0 <TIM_Base_SetConfig+0x40>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	4a3a      	ldr	r2, [pc, #232]	; (800ba94 <TIM_Base_SetConfig+0x124>)
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d108      	bne.n	800b9c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	685b      	ldr	r3, [r3, #4]
 800b9bc:	68fa      	ldr	r2, [r7, #12]
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	4a2f      	ldr	r2, [pc, #188]	; (800ba84 <TIM_Base_SetConfig+0x114>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d01f      	beq.n	800ba0a <TIM_Base_SetConfig+0x9a>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9d0:	d01b      	beq.n	800ba0a <TIM_Base_SetConfig+0x9a>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	4a2c      	ldr	r2, [pc, #176]	; (800ba88 <TIM_Base_SetConfig+0x118>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d017      	beq.n	800ba0a <TIM_Base_SetConfig+0x9a>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4a2b      	ldr	r2, [pc, #172]	; (800ba8c <TIM_Base_SetConfig+0x11c>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d013      	beq.n	800ba0a <TIM_Base_SetConfig+0x9a>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	4a2a      	ldr	r2, [pc, #168]	; (800ba90 <TIM_Base_SetConfig+0x120>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d00f      	beq.n	800ba0a <TIM_Base_SetConfig+0x9a>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	4a29      	ldr	r2, [pc, #164]	; (800ba94 <TIM_Base_SetConfig+0x124>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d00b      	beq.n	800ba0a <TIM_Base_SetConfig+0x9a>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	4a28      	ldr	r2, [pc, #160]	; (800ba98 <TIM_Base_SetConfig+0x128>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d007      	beq.n	800ba0a <TIM_Base_SetConfig+0x9a>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	4a27      	ldr	r2, [pc, #156]	; (800ba9c <TIM_Base_SetConfig+0x12c>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d003      	beq.n	800ba0a <TIM_Base_SetConfig+0x9a>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	4a26      	ldr	r2, [pc, #152]	; (800baa0 <TIM_Base_SetConfig+0x130>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d108      	bne.n	800ba1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	68db      	ldr	r3, [r3, #12]
 800ba16:	68fa      	ldr	r2, [r7, #12]
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	695b      	ldr	r3, [r3, #20]
 800ba26:	4313      	orrs	r3, r2
 800ba28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	68fa      	ldr	r2, [r7, #12]
 800ba2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	689a      	ldr	r2, [r3, #8]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	681a      	ldr	r2, [r3, #0]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	4a10      	ldr	r2, [pc, #64]	; (800ba84 <TIM_Base_SetConfig+0x114>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d00f      	beq.n	800ba68 <TIM_Base_SetConfig+0xf8>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	4a12      	ldr	r2, [pc, #72]	; (800ba94 <TIM_Base_SetConfig+0x124>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d00b      	beq.n	800ba68 <TIM_Base_SetConfig+0xf8>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	4a11      	ldr	r2, [pc, #68]	; (800ba98 <TIM_Base_SetConfig+0x128>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d007      	beq.n	800ba68 <TIM_Base_SetConfig+0xf8>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	4a10      	ldr	r2, [pc, #64]	; (800ba9c <TIM_Base_SetConfig+0x12c>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d003      	beq.n	800ba68 <TIM_Base_SetConfig+0xf8>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	4a0f      	ldr	r2, [pc, #60]	; (800baa0 <TIM_Base_SetConfig+0x130>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d103      	bne.n	800ba70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	691a      	ldr	r2, [r3, #16]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2201      	movs	r2, #1
 800ba74:	615a      	str	r2, [r3, #20]
}
 800ba76:	bf00      	nop
 800ba78:	3714      	adds	r7, #20
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba80:	4770      	bx	lr
 800ba82:	bf00      	nop
 800ba84:	40010000 	.word	0x40010000
 800ba88:	40000400 	.word	0x40000400
 800ba8c:	40000800 	.word	0x40000800
 800ba90:	40000c00 	.word	0x40000c00
 800ba94:	40010400 	.word	0x40010400
 800ba98:	40014000 	.word	0x40014000
 800ba9c:	40014400 	.word	0x40014400
 800baa0:	40014800 	.word	0x40014800

0800baa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b087      	sub	sp, #28
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	60f8      	str	r0, [r7, #12]
 800baac:	60b9      	str	r1, [r7, #8]
 800baae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	6a1b      	ldr	r3, [r3, #32]
 800bab4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	6a1b      	ldr	r3, [r3, #32]
 800baba:	f023 0201 	bic.w	r2, r3, #1
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	699b      	ldr	r3, [r3, #24]
 800bac6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bace:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	011b      	lsls	r3, r3, #4
 800bad4:	693a      	ldr	r2, [r7, #16]
 800bad6:	4313      	orrs	r3, r2
 800bad8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	f023 030a 	bic.w	r3, r3, #10
 800bae0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bae2:	697a      	ldr	r2, [r7, #20]
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	4313      	orrs	r3, r2
 800bae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	693a      	ldr	r2, [r7, #16]
 800baee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	697a      	ldr	r2, [r7, #20]
 800baf4:	621a      	str	r2, [r3, #32]
}
 800baf6:	bf00      	nop
 800baf8:	371c      	adds	r7, #28
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr

0800bb02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb02:	b480      	push	{r7}
 800bb04:	b087      	sub	sp, #28
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	60f8      	str	r0, [r7, #12]
 800bb0a:	60b9      	str	r1, [r7, #8]
 800bb0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	6a1b      	ldr	r3, [r3, #32]
 800bb12:	f023 0210 	bic.w	r2, r3, #16
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	699b      	ldr	r3, [r3, #24]
 800bb1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	6a1b      	ldr	r3, [r3, #32]
 800bb24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bb2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	031b      	lsls	r3, r3, #12
 800bb32:	697a      	ldr	r2, [r7, #20]
 800bb34:	4313      	orrs	r3, r2
 800bb36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bb3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	011b      	lsls	r3, r3, #4
 800bb44:	693a      	ldr	r2, [r7, #16]
 800bb46:	4313      	orrs	r3, r2
 800bb48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	697a      	ldr	r2, [r7, #20]
 800bb4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	693a      	ldr	r2, [r7, #16]
 800bb54:	621a      	str	r2, [r3, #32]
}
 800bb56:	bf00      	nop
 800bb58:	371c      	adds	r7, #28
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb60:	4770      	bx	lr
	...

0800bb64 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b085      	sub	sp, #20
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bb74:	68fa      	ldr	r2, [r7, #12]
 800bb76:	4b09      	ldr	r3, [pc, #36]	; (800bb9c <TIM_ITRx_SetConfig+0x38>)
 800bb78:	4013      	ands	r3, r2
 800bb7a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bb7c:	683a      	ldr	r2, [r7, #0]
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	4313      	orrs	r3, r2
 800bb82:	f043 0307 	orr.w	r3, r3, #7
 800bb86:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	68fa      	ldr	r2, [r7, #12]
 800bb8c:	609a      	str	r2, [r3, #8]
}
 800bb8e:	bf00      	nop
 800bb90:	3714      	adds	r7, #20
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr
 800bb9a:	bf00      	nop
 800bb9c:	ffcfff8f 	.word	0xffcfff8f

0800bba0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b087      	sub	sp, #28
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	60f8      	str	r0, [r7, #12]
 800bba8:	60b9      	str	r1, [r7, #8]
 800bbaa:	607a      	str	r2, [r7, #4]
 800bbac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	689b      	ldr	r3, [r3, #8]
 800bbb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bbba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	021a      	lsls	r2, r3, #8
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	431a      	orrs	r2, r3
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	697a      	ldr	r2, [r7, #20]
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	697a      	ldr	r2, [r7, #20]
 800bbd2:	609a      	str	r2, [r3, #8]
}
 800bbd4:	bf00      	nop
 800bbd6:	371c      	adds	r7, #28
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr

0800bbe0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b087      	sub	sp, #28
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	60f8      	str	r0, [r7, #12]
 800bbe8:	60b9      	str	r1, [r7, #8]
 800bbea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	f003 031f 	and.w	r3, r3, #31
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	fa02 f303 	lsl.w	r3, r2, r3
 800bbf8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	6a1a      	ldr	r2, [r3, #32]
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	43db      	mvns	r3, r3
 800bc02:	401a      	ands	r2, r3
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	6a1a      	ldr	r2, [r3, #32]
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	f003 031f 	and.w	r3, r3, #31
 800bc12:	6879      	ldr	r1, [r7, #4]
 800bc14:	fa01 f303 	lsl.w	r3, r1, r3
 800bc18:	431a      	orrs	r2, r3
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	621a      	str	r2, [r3, #32]
}
 800bc1e:	bf00      	nop
 800bc20:	371c      	adds	r7, #28
 800bc22:	46bd      	mov	sp, r7
 800bc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc28:	4770      	bx	lr
	...

0800bc2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b085      	sub	sp, #20
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
 800bc34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d101      	bne.n	800bc44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bc40:	2302      	movs	r3, #2
 800bc42:	e06d      	b.n	800bd20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2201      	movs	r2, #1
 800bc48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2202      	movs	r2, #2
 800bc50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	685b      	ldr	r3, [r3, #4]
 800bc5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	689b      	ldr	r3, [r3, #8]
 800bc62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	4a30      	ldr	r2, [pc, #192]	; (800bd2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d004      	beq.n	800bc78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	4a2f      	ldr	r2, [pc, #188]	; (800bd30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d108      	bne.n	800bc8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bc7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	68fa      	ldr	r2, [r7, #12]
 800bc86:	4313      	orrs	r3, r2
 800bc88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	68fa      	ldr	r2, [r7, #12]
 800bc98:	4313      	orrs	r3, r2
 800bc9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	68fa      	ldr	r2, [r7, #12]
 800bca2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	4a20      	ldr	r2, [pc, #128]	; (800bd2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d022      	beq.n	800bcf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcb6:	d01d      	beq.n	800bcf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	4a1d      	ldr	r2, [pc, #116]	; (800bd34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d018      	beq.n	800bcf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4a1c      	ldr	r2, [pc, #112]	; (800bd38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d013      	beq.n	800bcf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	4a1a      	ldr	r2, [pc, #104]	; (800bd3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d00e      	beq.n	800bcf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	4a15      	ldr	r2, [pc, #84]	; (800bd30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d009      	beq.n	800bcf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a16      	ldr	r2, [pc, #88]	; (800bd40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d004      	beq.n	800bcf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	4a15      	ldr	r2, [pc, #84]	; (800bd44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d10c      	bne.n	800bd0e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bcfa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	689b      	ldr	r3, [r3, #8]
 800bd00:	68ba      	ldr	r2, [r7, #8]
 800bd02:	4313      	orrs	r3, r2
 800bd04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	68ba      	ldr	r2, [r7, #8]
 800bd0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2201      	movs	r2, #1
 800bd12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd1e:	2300      	movs	r3, #0
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3714      	adds	r7, #20
 800bd24:	46bd      	mov	sp, r7
 800bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2a:	4770      	bx	lr
 800bd2c:	40010000 	.word	0x40010000
 800bd30:	40010400 	.word	0x40010400
 800bd34:	40000400 	.word	0x40000400
 800bd38:	40000800 	.word	0x40000800
 800bd3c:	40000c00 	.word	0x40000c00
 800bd40:	40001800 	.word	0x40001800
 800bd44:	40014000 	.word	0x40014000

0800bd48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b083      	sub	sp, #12
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bd50:	bf00      	nop
 800bd52:	370c      	adds	r7, #12
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr

0800bd5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b083      	sub	sp, #12
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bd64:	bf00      	nop
 800bd66:	370c      	adds	r7, #12
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr

0800bd70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b083      	sub	sp, #12
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bd78:	bf00      	nop
 800bd7a:	370c      	adds	r7, #12
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd82:	4770      	bx	lr

0800bd84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d101      	bne.n	800bd96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bd92:	2301      	movs	r3, #1
 800bd94:	e042      	b.n	800be1c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d106      	bne.n	800bdae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f012 ff2b 	bl	801ec04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2224      	movs	r2, #36	; 0x24
 800bdb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	681a      	ldr	r2, [r3, #0]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f022 0201 	bic.w	r2, r2, #1
 800bdc4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 fc80 	bl	800c6cc <UART_SetConfig>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	2b01      	cmp	r3, #1
 800bdd0:	d101      	bne.n	800bdd6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	e022      	b.n	800be1c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d002      	beq.n	800bde4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f001 f9dc 	bl	800d19c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	685a      	ldr	r2, [r3, #4]
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bdf2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	689a      	ldr	r2, [r3, #8]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800be02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	681a      	ldr	r2, [r3, #0]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f042 0201 	orr.w	r2, r2, #1
 800be12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f001 fa63 	bl	800d2e0 <UART_CheckIdleState>
 800be1a:	4603      	mov	r3, r0
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3708      	adds	r7, #8
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}

0800be24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b08a      	sub	sp, #40	; 0x28
 800be28:	af02      	add	r7, sp, #8
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	60b9      	str	r1, [r7, #8]
 800be2e:	603b      	str	r3, [r7, #0]
 800be30:	4613      	mov	r3, r2
 800be32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be3a:	2b20      	cmp	r3, #32
 800be3c:	f040 8083 	bne.w	800bf46 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d002      	beq.n	800be4c <HAL_UART_Transmit+0x28>
 800be46:	88fb      	ldrh	r3, [r7, #6]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d101      	bne.n	800be50 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800be4c:	2301      	movs	r3, #1
 800be4e:	e07b      	b.n	800bf48 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800be56:	2b01      	cmp	r3, #1
 800be58:	d101      	bne.n	800be5e <HAL_UART_Transmit+0x3a>
 800be5a:	2302      	movs	r3, #2
 800be5c:	e074      	b.n	800bf48 <HAL_UART_Transmit+0x124>
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2201      	movs	r2, #1
 800be62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2200      	movs	r2, #0
 800be6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	2221      	movs	r2, #33	; 0x21
 800be72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800be76:	f7f5 f967 	bl	8001148 <HAL_GetTick>
 800be7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	88fa      	ldrh	r2, [r7, #6]
 800be80:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	88fa      	ldrh	r2, [r7, #6]
 800be88:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	689b      	ldr	r3, [r3, #8]
 800be90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be94:	d108      	bne.n	800bea8 <HAL_UART_Transmit+0x84>
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	691b      	ldr	r3, [r3, #16]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d104      	bne.n	800bea8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800be9e:	2300      	movs	r3, #0
 800bea0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	61bb      	str	r3, [r7, #24]
 800bea6:	e003      	b.n	800beb0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800beac:	2300      	movs	r3, #0
 800beae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	2200      	movs	r2, #0
 800beb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800beb8:	e02c      	b.n	800bf14 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	9300      	str	r3, [sp, #0]
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	2200      	movs	r2, #0
 800bec2:	2180      	movs	r1, #128	; 0x80
 800bec4:	68f8      	ldr	r0, [r7, #12]
 800bec6:	f001 fa56 	bl	800d376 <UART_WaitOnFlagUntilTimeout>
 800beca:	4603      	mov	r3, r0
 800becc:	2b00      	cmp	r3, #0
 800bece:	d001      	beq.n	800bed4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800bed0:	2303      	movs	r3, #3
 800bed2:	e039      	b.n	800bf48 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800bed4:	69fb      	ldr	r3, [r7, #28]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d10b      	bne.n	800bef2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800beda:	69bb      	ldr	r3, [r7, #24]
 800bedc:	881b      	ldrh	r3, [r3, #0]
 800bede:	461a      	mov	r2, r3
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bee8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800beea:	69bb      	ldr	r3, [r7, #24]
 800beec:	3302      	adds	r3, #2
 800beee:	61bb      	str	r3, [r7, #24]
 800bef0:	e007      	b.n	800bf02 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bef2:	69fb      	ldr	r3, [r7, #28]
 800bef4:	781a      	ldrb	r2, [r3, #0]
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800befc:	69fb      	ldr	r3, [r7, #28]
 800befe:	3301      	adds	r3, #1
 800bf00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bf08:	b29b      	uxth	r3, r3
 800bf0a:	3b01      	subs	r3, #1
 800bf0c:	b29a      	uxth	r2, r3
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d1cc      	bne.n	800beba <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	9300      	str	r3, [sp, #0]
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	2200      	movs	r2, #0
 800bf28:	2140      	movs	r1, #64	; 0x40
 800bf2a:	68f8      	ldr	r0, [r7, #12]
 800bf2c:	f001 fa23 	bl	800d376 <UART_WaitOnFlagUntilTimeout>
 800bf30:	4603      	mov	r3, r0
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d001      	beq.n	800bf3a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800bf36:	2303      	movs	r3, #3
 800bf38:	e006      	b.n	800bf48 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	2220      	movs	r2, #32
 800bf3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800bf42:	2300      	movs	r3, #0
 800bf44:	e000      	b.n	800bf48 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800bf46:	2302      	movs	r3, #2
  }
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3720      	adds	r7, #32
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b0ba      	sub	sp, #232	; 0xe8
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	69db      	ldr	r3, [r3, #28]
 800bf5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	689b      	ldr	r3, [r3, #8]
 800bf72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bf76:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bf7a:	f640 030f 	movw	r3, #2063	; 0x80f
 800bf7e:	4013      	ands	r3, r2
 800bf80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bf84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d11b      	bne.n	800bfc4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bf8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf90:	f003 0320 	and.w	r3, r3, #32
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d015      	beq.n	800bfc4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bf98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf9c:	f003 0320 	and.w	r3, r3, #32
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d105      	bne.n	800bfb0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bfa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bfa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d009      	beq.n	800bfc4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	f000 835a 	beq.w	800c66e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	4798      	blx	r3
      }
      return;
 800bfc2:	e354      	b.n	800c66e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bfc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	f000 811f 	beq.w	800c20c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bfce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bfd2:	4b8b      	ldr	r3, [pc, #556]	; (800c200 <HAL_UART_IRQHandler+0x2b0>)
 800bfd4:	4013      	ands	r3, r2
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d106      	bne.n	800bfe8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bfda:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bfde:	4b89      	ldr	r3, [pc, #548]	; (800c204 <HAL_UART_IRQHandler+0x2b4>)
 800bfe0:	4013      	ands	r3, r2
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	f000 8112 	beq.w	800c20c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bfe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfec:	f003 0301 	and.w	r3, r3, #1
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d011      	beq.n	800c018 <HAL_UART_IRQHandler+0xc8>
 800bff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d00b      	beq.n	800c018 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	2201      	movs	r2, #1
 800c006:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c00e:	f043 0201 	orr.w	r2, r3, #1
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c01c:	f003 0302 	and.w	r3, r3, #2
 800c020:	2b00      	cmp	r3, #0
 800c022:	d011      	beq.n	800c048 <HAL_UART_IRQHandler+0xf8>
 800c024:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c028:	f003 0301 	and.w	r3, r3, #1
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d00b      	beq.n	800c048 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	2202      	movs	r2, #2
 800c036:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c03e:	f043 0204 	orr.w	r2, r3, #4
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c04c:	f003 0304 	and.w	r3, r3, #4
 800c050:	2b00      	cmp	r3, #0
 800c052:	d011      	beq.n	800c078 <HAL_UART_IRQHandler+0x128>
 800c054:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c058:	f003 0301 	and.w	r3, r3, #1
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d00b      	beq.n	800c078 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	2204      	movs	r2, #4
 800c066:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c06e:	f043 0202 	orr.w	r2, r3, #2
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c07c:	f003 0308 	and.w	r3, r3, #8
 800c080:	2b00      	cmp	r3, #0
 800c082:	d017      	beq.n	800c0b4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c088:	f003 0320 	and.w	r3, r3, #32
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d105      	bne.n	800c09c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c090:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c094:	4b5a      	ldr	r3, [pc, #360]	; (800c200 <HAL_UART_IRQHandler+0x2b0>)
 800c096:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d00b      	beq.n	800c0b4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	2208      	movs	r2, #8
 800c0a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0aa:	f043 0208 	orr.w	r2, r3, #8
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c0b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d012      	beq.n	800c0e6 <HAL_UART_IRQHandler+0x196>
 800c0c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d00c      	beq.n	800c0e6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c0d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0dc:	f043 0220 	orr.w	r2, r3, #32
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	f000 82c0 	beq.w	800c672 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c0f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0f6:	f003 0320 	and.w	r3, r3, #32
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d013      	beq.n	800c126 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c0fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c102:	f003 0320 	and.w	r3, r3, #32
 800c106:	2b00      	cmp	r3, #0
 800c108:	d105      	bne.n	800c116 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c10a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c10e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c112:	2b00      	cmp	r3, #0
 800c114:	d007      	beq.n	800c126 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d003      	beq.n	800c126 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c12c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	689b      	ldr	r3, [r3, #8]
 800c136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c13a:	2b40      	cmp	r3, #64	; 0x40
 800c13c:	d005      	beq.n	800c14a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c13e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c142:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c146:	2b00      	cmp	r3, #0
 800c148:	d04f      	beq.n	800c1ea <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f001 f9dc 	bl	800d508 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	689b      	ldr	r3, [r3, #8]
 800c156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c15a:	2b40      	cmp	r3, #64	; 0x40
 800c15c:	d141      	bne.n	800c1e2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	3308      	adds	r3, #8
 800c164:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c168:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c16c:	e853 3f00 	ldrex	r3, [r3]
 800c170:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c174:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c17c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	3308      	adds	r3, #8
 800c186:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c18a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c18e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c192:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c196:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c19a:	e841 2300 	strex	r3, r2, [r1]
 800c19e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c1a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d1d9      	bne.n	800c15e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d013      	beq.n	800c1da <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1b6:	4a14      	ldr	r2, [pc, #80]	; (800c208 <HAL_UART_IRQHandler+0x2b8>)
 800c1b8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f7f5 ffe8 	bl	8002194 <HAL_DMA_Abort_IT>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d017      	beq.n	800c1fa <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1d0:	687a      	ldr	r2, [r7, #4]
 800c1d2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c1d4:	4610      	mov	r0, r2
 800c1d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1d8:	e00f      	b.n	800c1fa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 fa60 	bl	800c6a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1e0:	e00b      	b.n	800c1fa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f000 fa5c 	bl	800c6a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1e8:	e007      	b.n	800c1fa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f000 fa58 	bl	800c6a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c1f8:	e23b      	b.n	800c672 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1fa:	bf00      	nop
    return;
 800c1fc:	e239      	b.n	800c672 <HAL_UART_IRQHandler+0x722>
 800c1fe:	bf00      	nop
 800c200:	10000001 	.word	0x10000001
 800c204:	04000120 	.word	0x04000120
 800c208:	0800d5d5 	.word	0x0800d5d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c210:	2b01      	cmp	r3, #1
 800c212:	f040 81ce 	bne.w	800c5b2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c21a:	f003 0310 	and.w	r3, r3, #16
 800c21e:	2b00      	cmp	r3, #0
 800c220:	f000 81c7 	beq.w	800c5b2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c228:	f003 0310 	and.w	r3, r3, #16
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	f000 81c0 	beq.w	800c5b2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	2210      	movs	r2, #16
 800c238:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	689b      	ldr	r3, [r3, #8]
 800c240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c244:	2b40      	cmp	r3, #64	; 0x40
 800c246:	f040 813b 	bne.w	800c4c0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a8b      	ldr	r2, [pc, #556]	; (800c480 <HAL_UART_IRQHandler+0x530>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d059      	beq.n	800c30a <HAL_UART_IRQHandler+0x3ba>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	4a89      	ldr	r2, [pc, #548]	; (800c484 <HAL_UART_IRQHandler+0x534>)
 800c25e:	4293      	cmp	r3, r2
 800c260:	d053      	beq.n	800c30a <HAL_UART_IRQHandler+0x3ba>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	4a87      	ldr	r2, [pc, #540]	; (800c488 <HAL_UART_IRQHandler+0x538>)
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d04d      	beq.n	800c30a <HAL_UART_IRQHandler+0x3ba>
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4a85      	ldr	r2, [pc, #532]	; (800c48c <HAL_UART_IRQHandler+0x53c>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d047      	beq.n	800c30a <HAL_UART_IRQHandler+0x3ba>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4a83      	ldr	r2, [pc, #524]	; (800c490 <HAL_UART_IRQHandler+0x540>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d041      	beq.n	800c30a <HAL_UART_IRQHandler+0x3ba>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a81      	ldr	r2, [pc, #516]	; (800c494 <HAL_UART_IRQHandler+0x544>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d03b      	beq.n	800c30a <HAL_UART_IRQHandler+0x3ba>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	4a7f      	ldr	r2, [pc, #508]	; (800c498 <HAL_UART_IRQHandler+0x548>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d035      	beq.n	800c30a <HAL_UART_IRQHandler+0x3ba>
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	4a7d      	ldr	r2, [pc, #500]	; (800c49c <HAL_UART_IRQHandler+0x54c>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d02f      	beq.n	800c30a <HAL_UART_IRQHandler+0x3ba>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a7b      	ldr	r2, [pc, #492]	; (800c4a0 <HAL_UART_IRQHandler+0x550>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d029      	beq.n	800c30a <HAL_UART_IRQHandler+0x3ba>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	4a79      	ldr	r2, [pc, #484]	; (800c4a4 <HAL_UART_IRQHandler+0x554>)
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d023      	beq.n	800c30a <HAL_UART_IRQHandler+0x3ba>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4a77      	ldr	r2, [pc, #476]	; (800c4a8 <HAL_UART_IRQHandler+0x558>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d01d      	beq.n	800c30a <HAL_UART_IRQHandler+0x3ba>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	4a75      	ldr	r2, [pc, #468]	; (800c4ac <HAL_UART_IRQHandler+0x55c>)
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d017      	beq.n	800c30a <HAL_UART_IRQHandler+0x3ba>
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4a73      	ldr	r2, [pc, #460]	; (800c4b0 <HAL_UART_IRQHandler+0x560>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d011      	beq.n	800c30a <HAL_UART_IRQHandler+0x3ba>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	4a71      	ldr	r2, [pc, #452]	; (800c4b4 <HAL_UART_IRQHandler+0x564>)
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	d00b      	beq.n	800c30a <HAL_UART_IRQHandler+0x3ba>
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	4a6f      	ldr	r2, [pc, #444]	; (800c4b8 <HAL_UART_IRQHandler+0x568>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d005      	beq.n	800c30a <HAL_UART_IRQHandler+0x3ba>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	4a6d      	ldr	r2, [pc, #436]	; (800c4bc <HAL_UART_IRQHandler+0x56c>)
 800c306:	4293      	cmp	r3, r2
 800c308:	d105      	bne.n	800c316 <HAL_UART_IRQHandler+0x3c6>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	b29b      	uxth	r3, r3
 800c314:	e004      	b.n	800c320 <HAL_UART_IRQHandler+0x3d0>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	685b      	ldr	r3, [r3, #4]
 800c31e:	b29b      	uxth	r3, r3
 800c320:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c324:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c328:	2b00      	cmp	r3, #0
 800c32a:	f000 81a4 	beq.w	800c676 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c334:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c338:	429a      	cmp	r2, r3
 800c33a:	f080 819c 	bcs.w	800c676 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c344:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c34c:	69db      	ldr	r3, [r3, #28]
 800c34e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c352:	f000 8086 	beq.w	800c462 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c35e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c362:	e853 3f00 	ldrex	r3, [r3]
 800c366:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c36a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c36e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c372:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	461a      	mov	r2, r3
 800c37c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c380:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c384:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c388:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c38c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c390:	e841 2300 	strex	r3, r2, [r1]
 800c394:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c398:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d1da      	bne.n	800c356 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	3308      	adds	r3, #8
 800c3a6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c3aa:	e853 3f00 	ldrex	r3, [r3]
 800c3ae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c3b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c3b2:	f023 0301 	bic.w	r3, r3, #1
 800c3b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	3308      	adds	r3, #8
 800c3c0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c3c4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c3c8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c3cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c3d0:	e841 2300 	strex	r3, r2, [r1]
 800c3d4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c3d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d1e1      	bne.n	800c3a0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	3308      	adds	r3, #8
 800c3e2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3e6:	e853 3f00 	ldrex	r3, [r3]
 800c3ea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c3ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	3308      	adds	r3, #8
 800c3fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c400:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c402:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c404:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c406:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c408:	e841 2300 	strex	r3, r2, [r1]
 800c40c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c40e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c410:	2b00      	cmp	r3, #0
 800c412:	d1e3      	bne.n	800c3dc <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2220      	movs	r2, #32
 800c418:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2200      	movs	r2, #0
 800c420:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c42a:	e853 3f00 	ldrex	r3, [r3]
 800c42e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c432:	f023 0310 	bic.w	r3, r3, #16
 800c436:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	461a      	mov	r2, r3
 800c440:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c444:	65bb      	str	r3, [r7, #88]	; 0x58
 800c446:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c448:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c44a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c44c:	e841 2300 	strex	r3, r2, [r1]
 800c450:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c454:	2b00      	cmp	r3, #0
 800c456:	d1e4      	bne.n	800c422 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c45c:	4618      	mov	r0, r3
 800c45e:	f7f5 fb7b 	bl	8001b58 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c46e:	b29b      	uxth	r3, r3
 800c470:	1ad3      	subs	r3, r2, r3
 800c472:	b29b      	uxth	r3, r3
 800c474:	4619      	mov	r1, r3
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f000 f91c 	bl	800c6b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c47c:	e0fb      	b.n	800c676 <HAL_UART_IRQHandler+0x726>
 800c47e:	bf00      	nop
 800c480:	40020010 	.word	0x40020010
 800c484:	40020028 	.word	0x40020028
 800c488:	40020040 	.word	0x40020040
 800c48c:	40020058 	.word	0x40020058
 800c490:	40020070 	.word	0x40020070
 800c494:	40020088 	.word	0x40020088
 800c498:	400200a0 	.word	0x400200a0
 800c49c:	400200b8 	.word	0x400200b8
 800c4a0:	40020410 	.word	0x40020410
 800c4a4:	40020428 	.word	0x40020428
 800c4a8:	40020440 	.word	0x40020440
 800c4ac:	40020458 	.word	0x40020458
 800c4b0:	40020470 	.word	0x40020470
 800c4b4:	40020488 	.word	0x40020488
 800c4b8:	400204a0 	.word	0x400204a0
 800c4bc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c4cc:	b29b      	uxth	r3, r3
 800c4ce:	1ad3      	subs	r3, r2, r3
 800c4d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c4da:	b29b      	uxth	r3, r3
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	f000 80cc 	beq.w	800c67a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800c4e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	f000 80c7 	beq.w	800c67a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f4:	e853 3f00 	ldrex	r3, [r3]
 800c4f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c4fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c500:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	461a      	mov	r2, r3
 800c50a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c50e:	647b      	str	r3, [r7, #68]	; 0x44
 800c510:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c512:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c514:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c516:	e841 2300 	strex	r3, r2, [r1]
 800c51a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c51c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d1e4      	bne.n	800c4ec <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	3308      	adds	r3, #8
 800c528:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c52c:	e853 3f00 	ldrex	r3, [r3]
 800c530:	623b      	str	r3, [r7, #32]
   return(result);
 800c532:	6a3a      	ldr	r2, [r7, #32]
 800c534:	4b54      	ldr	r3, [pc, #336]	; (800c688 <HAL_UART_IRQHandler+0x738>)
 800c536:	4013      	ands	r3, r2
 800c538:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	3308      	adds	r3, #8
 800c542:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c546:	633a      	str	r2, [r7, #48]	; 0x30
 800c548:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c54a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c54c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c54e:	e841 2300 	strex	r3, r2, [r1]
 800c552:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c556:	2b00      	cmp	r3, #0
 800c558:	d1e3      	bne.n	800c522 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2220      	movs	r2, #32
 800c55e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2200      	movs	r2, #0
 800c566:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2200      	movs	r2, #0
 800c56c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	e853 3f00 	ldrex	r3, [r3]
 800c57a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f023 0310 	bic.w	r3, r3, #16
 800c582:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	461a      	mov	r2, r3
 800c58c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c590:	61fb      	str	r3, [r7, #28]
 800c592:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c594:	69b9      	ldr	r1, [r7, #24]
 800c596:	69fa      	ldr	r2, [r7, #28]
 800c598:	e841 2300 	strex	r3, r2, [r1]
 800c59c:	617b      	str	r3, [r7, #20]
   return(result);
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d1e4      	bne.n	800c56e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c5a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c5a8:	4619      	mov	r1, r3
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f000 f882 	bl	800c6b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c5b0:	e063      	b.n	800c67a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c5b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d00e      	beq.n	800c5dc <HAL_UART_IRQHandler+0x68c>
 800c5be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c5c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d008      	beq.n	800c5dc <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c5d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f001 f83e 	bl	800d656 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c5da:	e051      	b.n	800c680 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c5dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d014      	beq.n	800c612 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c5e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d105      	bne.n	800c600 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c5f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c5f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d008      	beq.n	800c612 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c604:	2b00      	cmp	r3, #0
 800c606:	d03a      	beq.n	800c67e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	4798      	blx	r3
    }
    return;
 800c610:	e035      	b.n	800c67e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d009      	beq.n	800c632 <HAL_UART_IRQHandler+0x6e2>
 800c61e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c626:	2b00      	cmp	r3, #0
 800c628:	d003      	beq.n	800c632 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f000 ffe8 	bl	800d600 <UART_EndTransmit_IT>
    return;
 800c630:	e026      	b.n	800c680 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c636:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d009      	beq.n	800c652 <HAL_UART_IRQHandler+0x702>
 800c63e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c642:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c646:	2b00      	cmp	r3, #0
 800c648:	d003      	beq.n	800c652 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f001 f817 	bl	800d67e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c650:	e016      	b.n	800c680 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c656:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d010      	beq.n	800c680 <HAL_UART_IRQHandler+0x730>
 800c65e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c662:	2b00      	cmp	r3, #0
 800c664:	da0c      	bge.n	800c680 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f000 ffff 	bl	800d66a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c66c:	e008      	b.n	800c680 <HAL_UART_IRQHandler+0x730>
      return;
 800c66e:	bf00      	nop
 800c670:	e006      	b.n	800c680 <HAL_UART_IRQHandler+0x730>
    return;
 800c672:	bf00      	nop
 800c674:	e004      	b.n	800c680 <HAL_UART_IRQHandler+0x730>
      return;
 800c676:	bf00      	nop
 800c678:	e002      	b.n	800c680 <HAL_UART_IRQHandler+0x730>
      return;
 800c67a:	bf00      	nop
 800c67c:	e000      	b.n	800c680 <HAL_UART_IRQHandler+0x730>
    return;
 800c67e:	bf00      	nop
  }
}
 800c680:	37e8      	adds	r7, #232	; 0xe8
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
 800c686:	bf00      	nop
 800c688:	effffffe 	.word	0xeffffffe

0800c68c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b083      	sub	sp, #12
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c694:	bf00      	nop
 800c696:	370c      	adds	r7, #12
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr

0800c6a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b083      	sub	sp, #12
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c6a8:	bf00      	nop
 800c6aa:	370c      	adds	r7, #12
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b2:	4770      	bx	lr

0800c6b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	b083      	sub	sp, #12
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	460b      	mov	r3, r1
 800c6be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c6c0:	bf00      	nop
 800c6c2:	370c      	adds	r7, #12
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ca:	4770      	bx	lr

0800c6cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c6cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c6d0:	b092      	sub	sp, #72	; 0x48
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	689a      	ldr	r2, [r3, #8]
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	691b      	ldr	r3, [r3, #16]
 800c6e4:	431a      	orrs	r2, r3
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	695b      	ldr	r3, [r3, #20]
 800c6ea:	431a      	orrs	r2, r3
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	69db      	ldr	r3, [r3, #28]
 800c6f0:	4313      	orrs	r3, r2
 800c6f2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	681a      	ldr	r2, [r3, #0]
 800c6fa:	4bbe      	ldr	r3, [pc, #760]	; (800c9f4 <UART_SetConfig+0x328>)
 800c6fc:	4013      	ands	r3, r2
 800c6fe:	697a      	ldr	r2, [r7, #20]
 800c700:	6812      	ldr	r2, [r2, #0]
 800c702:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c704:	430b      	orrs	r3, r1
 800c706:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	685b      	ldr	r3, [r3, #4]
 800c70e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	68da      	ldr	r2, [r3, #12]
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	430a      	orrs	r2, r1
 800c71c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	699b      	ldr	r3, [r3, #24]
 800c722:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	4ab3      	ldr	r2, [pc, #716]	; (800c9f8 <UART_SetConfig+0x32c>)
 800c72a:	4293      	cmp	r3, r2
 800c72c:	d004      	beq.n	800c738 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	6a1b      	ldr	r3, [r3, #32]
 800c732:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c734:	4313      	orrs	r3, r2
 800c736:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	689a      	ldr	r2, [r3, #8]
 800c73e:	4baf      	ldr	r3, [pc, #700]	; (800c9fc <UART_SetConfig+0x330>)
 800c740:	4013      	ands	r3, r2
 800c742:	697a      	ldr	r2, [r7, #20]
 800c744:	6812      	ldr	r2, [r2, #0]
 800c746:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c748:	430b      	orrs	r3, r1
 800c74a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c74c:	697b      	ldr	r3, [r7, #20]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c752:	f023 010f 	bic.w	r1, r3, #15
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	430a      	orrs	r2, r1
 800c760:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	4aa6      	ldr	r2, [pc, #664]	; (800ca00 <UART_SetConfig+0x334>)
 800c768:	4293      	cmp	r3, r2
 800c76a:	d177      	bne.n	800c85c <UART_SetConfig+0x190>
 800c76c:	4ba5      	ldr	r3, [pc, #660]	; (800ca04 <UART_SetConfig+0x338>)
 800c76e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c770:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c774:	2b28      	cmp	r3, #40	; 0x28
 800c776:	d86d      	bhi.n	800c854 <UART_SetConfig+0x188>
 800c778:	a201      	add	r2, pc, #4	; (adr r2, 800c780 <UART_SetConfig+0xb4>)
 800c77a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c77e:	bf00      	nop
 800c780:	0800c825 	.word	0x0800c825
 800c784:	0800c855 	.word	0x0800c855
 800c788:	0800c855 	.word	0x0800c855
 800c78c:	0800c855 	.word	0x0800c855
 800c790:	0800c855 	.word	0x0800c855
 800c794:	0800c855 	.word	0x0800c855
 800c798:	0800c855 	.word	0x0800c855
 800c79c:	0800c855 	.word	0x0800c855
 800c7a0:	0800c82d 	.word	0x0800c82d
 800c7a4:	0800c855 	.word	0x0800c855
 800c7a8:	0800c855 	.word	0x0800c855
 800c7ac:	0800c855 	.word	0x0800c855
 800c7b0:	0800c855 	.word	0x0800c855
 800c7b4:	0800c855 	.word	0x0800c855
 800c7b8:	0800c855 	.word	0x0800c855
 800c7bc:	0800c855 	.word	0x0800c855
 800c7c0:	0800c835 	.word	0x0800c835
 800c7c4:	0800c855 	.word	0x0800c855
 800c7c8:	0800c855 	.word	0x0800c855
 800c7cc:	0800c855 	.word	0x0800c855
 800c7d0:	0800c855 	.word	0x0800c855
 800c7d4:	0800c855 	.word	0x0800c855
 800c7d8:	0800c855 	.word	0x0800c855
 800c7dc:	0800c855 	.word	0x0800c855
 800c7e0:	0800c83d 	.word	0x0800c83d
 800c7e4:	0800c855 	.word	0x0800c855
 800c7e8:	0800c855 	.word	0x0800c855
 800c7ec:	0800c855 	.word	0x0800c855
 800c7f0:	0800c855 	.word	0x0800c855
 800c7f4:	0800c855 	.word	0x0800c855
 800c7f8:	0800c855 	.word	0x0800c855
 800c7fc:	0800c855 	.word	0x0800c855
 800c800:	0800c845 	.word	0x0800c845
 800c804:	0800c855 	.word	0x0800c855
 800c808:	0800c855 	.word	0x0800c855
 800c80c:	0800c855 	.word	0x0800c855
 800c810:	0800c855 	.word	0x0800c855
 800c814:	0800c855 	.word	0x0800c855
 800c818:	0800c855 	.word	0x0800c855
 800c81c:	0800c855 	.word	0x0800c855
 800c820:	0800c84d 	.word	0x0800c84d
 800c824:	2301      	movs	r3, #1
 800c826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c82a:	e222      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800c82c:	2304      	movs	r3, #4
 800c82e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c832:	e21e      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800c834:	2308      	movs	r3, #8
 800c836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c83a:	e21a      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800c83c:	2310      	movs	r3, #16
 800c83e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c842:	e216      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800c844:	2320      	movs	r3, #32
 800c846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c84a:	e212      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800c84c:	2340      	movs	r3, #64	; 0x40
 800c84e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c852:	e20e      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800c854:	2380      	movs	r3, #128	; 0x80
 800c856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c85a:	e20a      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	4a69      	ldr	r2, [pc, #420]	; (800ca08 <UART_SetConfig+0x33c>)
 800c862:	4293      	cmp	r3, r2
 800c864:	d130      	bne.n	800c8c8 <UART_SetConfig+0x1fc>
 800c866:	4b67      	ldr	r3, [pc, #412]	; (800ca04 <UART_SetConfig+0x338>)
 800c868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c86a:	f003 0307 	and.w	r3, r3, #7
 800c86e:	2b05      	cmp	r3, #5
 800c870:	d826      	bhi.n	800c8c0 <UART_SetConfig+0x1f4>
 800c872:	a201      	add	r2, pc, #4	; (adr r2, 800c878 <UART_SetConfig+0x1ac>)
 800c874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c878:	0800c891 	.word	0x0800c891
 800c87c:	0800c899 	.word	0x0800c899
 800c880:	0800c8a1 	.word	0x0800c8a1
 800c884:	0800c8a9 	.word	0x0800c8a9
 800c888:	0800c8b1 	.word	0x0800c8b1
 800c88c:	0800c8b9 	.word	0x0800c8b9
 800c890:	2300      	movs	r3, #0
 800c892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c896:	e1ec      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800c898:	2304      	movs	r3, #4
 800c89a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c89e:	e1e8      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800c8a0:	2308      	movs	r3, #8
 800c8a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8a6:	e1e4      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800c8a8:	2310      	movs	r3, #16
 800c8aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ae:	e1e0      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800c8b0:	2320      	movs	r3, #32
 800c8b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8b6:	e1dc      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800c8b8:	2340      	movs	r3, #64	; 0x40
 800c8ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8be:	e1d8      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800c8c0:	2380      	movs	r3, #128	; 0x80
 800c8c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8c6:	e1d4      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4a4f      	ldr	r2, [pc, #316]	; (800ca0c <UART_SetConfig+0x340>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d130      	bne.n	800c934 <UART_SetConfig+0x268>
 800c8d2:	4b4c      	ldr	r3, [pc, #304]	; (800ca04 <UART_SetConfig+0x338>)
 800c8d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8d6:	f003 0307 	and.w	r3, r3, #7
 800c8da:	2b05      	cmp	r3, #5
 800c8dc:	d826      	bhi.n	800c92c <UART_SetConfig+0x260>
 800c8de:	a201      	add	r2, pc, #4	; (adr r2, 800c8e4 <UART_SetConfig+0x218>)
 800c8e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8e4:	0800c8fd 	.word	0x0800c8fd
 800c8e8:	0800c905 	.word	0x0800c905
 800c8ec:	0800c90d 	.word	0x0800c90d
 800c8f0:	0800c915 	.word	0x0800c915
 800c8f4:	0800c91d 	.word	0x0800c91d
 800c8f8:	0800c925 	.word	0x0800c925
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c902:	e1b6      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800c904:	2304      	movs	r3, #4
 800c906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c90a:	e1b2      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800c90c:	2308      	movs	r3, #8
 800c90e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c912:	e1ae      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800c914:	2310      	movs	r3, #16
 800c916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c91a:	e1aa      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800c91c:	2320      	movs	r3, #32
 800c91e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c922:	e1a6      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800c924:	2340      	movs	r3, #64	; 0x40
 800c926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c92a:	e1a2      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800c92c:	2380      	movs	r3, #128	; 0x80
 800c92e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c932:	e19e      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	4a35      	ldr	r2, [pc, #212]	; (800ca10 <UART_SetConfig+0x344>)
 800c93a:	4293      	cmp	r3, r2
 800c93c:	d130      	bne.n	800c9a0 <UART_SetConfig+0x2d4>
 800c93e:	4b31      	ldr	r3, [pc, #196]	; (800ca04 <UART_SetConfig+0x338>)
 800c940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c942:	f003 0307 	and.w	r3, r3, #7
 800c946:	2b05      	cmp	r3, #5
 800c948:	d826      	bhi.n	800c998 <UART_SetConfig+0x2cc>
 800c94a:	a201      	add	r2, pc, #4	; (adr r2, 800c950 <UART_SetConfig+0x284>)
 800c94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c950:	0800c969 	.word	0x0800c969
 800c954:	0800c971 	.word	0x0800c971
 800c958:	0800c979 	.word	0x0800c979
 800c95c:	0800c981 	.word	0x0800c981
 800c960:	0800c989 	.word	0x0800c989
 800c964:	0800c991 	.word	0x0800c991
 800c968:	2300      	movs	r3, #0
 800c96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c96e:	e180      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800c970:	2304      	movs	r3, #4
 800c972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c976:	e17c      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800c978:	2308      	movs	r3, #8
 800c97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c97e:	e178      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800c980:	2310      	movs	r3, #16
 800c982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c986:	e174      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800c988:	2320      	movs	r3, #32
 800c98a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c98e:	e170      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800c990:	2340      	movs	r3, #64	; 0x40
 800c992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c996:	e16c      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800c998:	2380      	movs	r3, #128	; 0x80
 800c99a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c99e:	e168      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4a1b      	ldr	r2, [pc, #108]	; (800ca14 <UART_SetConfig+0x348>)
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d142      	bne.n	800ca30 <UART_SetConfig+0x364>
 800c9aa:	4b16      	ldr	r3, [pc, #88]	; (800ca04 <UART_SetConfig+0x338>)
 800c9ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9ae:	f003 0307 	and.w	r3, r3, #7
 800c9b2:	2b05      	cmp	r3, #5
 800c9b4:	d838      	bhi.n	800ca28 <UART_SetConfig+0x35c>
 800c9b6:	a201      	add	r2, pc, #4	; (adr r2, 800c9bc <UART_SetConfig+0x2f0>)
 800c9b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9bc:	0800c9d5 	.word	0x0800c9d5
 800c9c0:	0800c9dd 	.word	0x0800c9dd
 800c9c4:	0800c9e5 	.word	0x0800c9e5
 800c9c8:	0800c9ed 	.word	0x0800c9ed
 800c9cc:	0800ca19 	.word	0x0800ca19
 800c9d0:	0800ca21 	.word	0x0800ca21
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9da:	e14a      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800c9dc:	2304      	movs	r3, #4
 800c9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9e2:	e146      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800c9e4:	2308      	movs	r3, #8
 800c9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ea:	e142      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800c9ec:	2310      	movs	r3, #16
 800c9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9f2:	e13e      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800c9f4:	cfff69f3 	.word	0xcfff69f3
 800c9f8:	58000c00 	.word	0x58000c00
 800c9fc:	11fff4ff 	.word	0x11fff4ff
 800ca00:	40011000 	.word	0x40011000
 800ca04:	58024400 	.word	0x58024400
 800ca08:	40004400 	.word	0x40004400
 800ca0c:	40004800 	.word	0x40004800
 800ca10:	40004c00 	.word	0x40004c00
 800ca14:	40005000 	.word	0x40005000
 800ca18:	2320      	movs	r3, #32
 800ca1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca1e:	e128      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800ca20:	2340      	movs	r3, #64	; 0x40
 800ca22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca26:	e124      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800ca28:	2380      	movs	r3, #128	; 0x80
 800ca2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca2e:	e120      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	4acb      	ldr	r2, [pc, #812]	; (800cd64 <UART_SetConfig+0x698>)
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d176      	bne.n	800cb28 <UART_SetConfig+0x45c>
 800ca3a:	4bcb      	ldr	r3, [pc, #812]	; (800cd68 <UART_SetConfig+0x69c>)
 800ca3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ca42:	2b28      	cmp	r3, #40	; 0x28
 800ca44:	d86c      	bhi.n	800cb20 <UART_SetConfig+0x454>
 800ca46:	a201      	add	r2, pc, #4	; (adr r2, 800ca4c <UART_SetConfig+0x380>)
 800ca48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca4c:	0800caf1 	.word	0x0800caf1
 800ca50:	0800cb21 	.word	0x0800cb21
 800ca54:	0800cb21 	.word	0x0800cb21
 800ca58:	0800cb21 	.word	0x0800cb21
 800ca5c:	0800cb21 	.word	0x0800cb21
 800ca60:	0800cb21 	.word	0x0800cb21
 800ca64:	0800cb21 	.word	0x0800cb21
 800ca68:	0800cb21 	.word	0x0800cb21
 800ca6c:	0800caf9 	.word	0x0800caf9
 800ca70:	0800cb21 	.word	0x0800cb21
 800ca74:	0800cb21 	.word	0x0800cb21
 800ca78:	0800cb21 	.word	0x0800cb21
 800ca7c:	0800cb21 	.word	0x0800cb21
 800ca80:	0800cb21 	.word	0x0800cb21
 800ca84:	0800cb21 	.word	0x0800cb21
 800ca88:	0800cb21 	.word	0x0800cb21
 800ca8c:	0800cb01 	.word	0x0800cb01
 800ca90:	0800cb21 	.word	0x0800cb21
 800ca94:	0800cb21 	.word	0x0800cb21
 800ca98:	0800cb21 	.word	0x0800cb21
 800ca9c:	0800cb21 	.word	0x0800cb21
 800caa0:	0800cb21 	.word	0x0800cb21
 800caa4:	0800cb21 	.word	0x0800cb21
 800caa8:	0800cb21 	.word	0x0800cb21
 800caac:	0800cb09 	.word	0x0800cb09
 800cab0:	0800cb21 	.word	0x0800cb21
 800cab4:	0800cb21 	.word	0x0800cb21
 800cab8:	0800cb21 	.word	0x0800cb21
 800cabc:	0800cb21 	.word	0x0800cb21
 800cac0:	0800cb21 	.word	0x0800cb21
 800cac4:	0800cb21 	.word	0x0800cb21
 800cac8:	0800cb21 	.word	0x0800cb21
 800cacc:	0800cb11 	.word	0x0800cb11
 800cad0:	0800cb21 	.word	0x0800cb21
 800cad4:	0800cb21 	.word	0x0800cb21
 800cad8:	0800cb21 	.word	0x0800cb21
 800cadc:	0800cb21 	.word	0x0800cb21
 800cae0:	0800cb21 	.word	0x0800cb21
 800cae4:	0800cb21 	.word	0x0800cb21
 800cae8:	0800cb21 	.word	0x0800cb21
 800caec:	0800cb19 	.word	0x0800cb19
 800caf0:	2301      	movs	r3, #1
 800caf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caf6:	e0bc      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800caf8:	2304      	movs	r3, #4
 800cafa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cafe:	e0b8      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800cb00:	2308      	movs	r3, #8
 800cb02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb06:	e0b4      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800cb08:	2310      	movs	r3, #16
 800cb0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb0e:	e0b0      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800cb10:	2320      	movs	r3, #32
 800cb12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb16:	e0ac      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800cb18:	2340      	movs	r3, #64	; 0x40
 800cb1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb1e:	e0a8      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800cb20:	2380      	movs	r3, #128	; 0x80
 800cb22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb26:	e0a4      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	4a8f      	ldr	r2, [pc, #572]	; (800cd6c <UART_SetConfig+0x6a0>)
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d130      	bne.n	800cb94 <UART_SetConfig+0x4c8>
 800cb32:	4b8d      	ldr	r3, [pc, #564]	; (800cd68 <UART_SetConfig+0x69c>)
 800cb34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb36:	f003 0307 	and.w	r3, r3, #7
 800cb3a:	2b05      	cmp	r3, #5
 800cb3c:	d826      	bhi.n	800cb8c <UART_SetConfig+0x4c0>
 800cb3e:	a201      	add	r2, pc, #4	; (adr r2, 800cb44 <UART_SetConfig+0x478>)
 800cb40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb44:	0800cb5d 	.word	0x0800cb5d
 800cb48:	0800cb65 	.word	0x0800cb65
 800cb4c:	0800cb6d 	.word	0x0800cb6d
 800cb50:	0800cb75 	.word	0x0800cb75
 800cb54:	0800cb7d 	.word	0x0800cb7d
 800cb58:	0800cb85 	.word	0x0800cb85
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb62:	e086      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800cb64:	2304      	movs	r3, #4
 800cb66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb6a:	e082      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800cb6c:	2308      	movs	r3, #8
 800cb6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb72:	e07e      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800cb74:	2310      	movs	r3, #16
 800cb76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb7a:	e07a      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800cb7c:	2320      	movs	r3, #32
 800cb7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb82:	e076      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800cb84:	2340      	movs	r3, #64	; 0x40
 800cb86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb8a:	e072      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800cb8c:	2380      	movs	r3, #128	; 0x80
 800cb8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb92:	e06e      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	4a75      	ldr	r2, [pc, #468]	; (800cd70 <UART_SetConfig+0x6a4>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d130      	bne.n	800cc00 <UART_SetConfig+0x534>
 800cb9e:	4b72      	ldr	r3, [pc, #456]	; (800cd68 <UART_SetConfig+0x69c>)
 800cba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cba2:	f003 0307 	and.w	r3, r3, #7
 800cba6:	2b05      	cmp	r3, #5
 800cba8:	d826      	bhi.n	800cbf8 <UART_SetConfig+0x52c>
 800cbaa:	a201      	add	r2, pc, #4	; (adr r2, 800cbb0 <UART_SetConfig+0x4e4>)
 800cbac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbb0:	0800cbc9 	.word	0x0800cbc9
 800cbb4:	0800cbd1 	.word	0x0800cbd1
 800cbb8:	0800cbd9 	.word	0x0800cbd9
 800cbbc:	0800cbe1 	.word	0x0800cbe1
 800cbc0:	0800cbe9 	.word	0x0800cbe9
 800cbc4:	0800cbf1 	.word	0x0800cbf1
 800cbc8:	2300      	movs	r3, #0
 800cbca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbce:	e050      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800cbd0:	2304      	movs	r3, #4
 800cbd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbd6:	e04c      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800cbd8:	2308      	movs	r3, #8
 800cbda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbde:	e048      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800cbe0:	2310      	movs	r3, #16
 800cbe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbe6:	e044      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800cbe8:	2320      	movs	r3, #32
 800cbea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbee:	e040      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800cbf0:	2340      	movs	r3, #64	; 0x40
 800cbf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbf6:	e03c      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800cbf8:	2380      	movs	r3, #128	; 0x80
 800cbfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbfe:	e038      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	4a5b      	ldr	r2, [pc, #364]	; (800cd74 <UART_SetConfig+0x6a8>)
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d130      	bne.n	800cc6c <UART_SetConfig+0x5a0>
 800cc0a:	4b57      	ldr	r3, [pc, #348]	; (800cd68 <UART_SetConfig+0x69c>)
 800cc0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc0e:	f003 0307 	and.w	r3, r3, #7
 800cc12:	2b05      	cmp	r3, #5
 800cc14:	d826      	bhi.n	800cc64 <UART_SetConfig+0x598>
 800cc16:	a201      	add	r2, pc, #4	; (adr r2, 800cc1c <UART_SetConfig+0x550>)
 800cc18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc1c:	0800cc35 	.word	0x0800cc35
 800cc20:	0800cc3d 	.word	0x0800cc3d
 800cc24:	0800cc45 	.word	0x0800cc45
 800cc28:	0800cc4d 	.word	0x0800cc4d
 800cc2c:	0800cc55 	.word	0x0800cc55
 800cc30:	0800cc5d 	.word	0x0800cc5d
 800cc34:	2302      	movs	r3, #2
 800cc36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc3a:	e01a      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800cc3c:	2304      	movs	r3, #4
 800cc3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc42:	e016      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800cc44:	2308      	movs	r3, #8
 800cc46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc4a:	e012      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800cc4c:	2310      	movs	r3, #16
 800cc4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc52:	e00e      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800cc54:	2320      	movs	r3, #32
 800cc56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc5a:	e00a      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800cc5c:	2340      	movs	r3, #64	; 0x40
 800cc5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc62:	e006      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800cc64:	2380      	movs	r3, #128	; 0x80
 800cc66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc6a:	e002      	b.n	800cc72 <UART_SetConfig+0x5a6>
 800cc6c:	2380      	movs	r3, #128	; 0x80
 800cc6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	4a3f      	ldr	r2, [pc, #252]	; (800cd74 <UART_SetConfig+0x6a8>)
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	f040 80f8 	bne.w	800ce6e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cc7e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cc82:	2b20      	cmp	r3, #32
 800cc84:	dc46      	bgt.n	800cd14 <UART_SetConfig+0x648>
 800cc86:	2b02      	cmp	r3, #2
 800cc88:	f2c0 8082 	blt.w	800cd90 <UART_SetConfig+0x6c4>
 800cc8c:	3b02      	subs	r3, #2
 800cc8e:	2b1e      	cmp	r3, #30
 800cc90:	d87e      	bhi.n	800cd90 <UART_SetConfig+0x6c4>
 800cc92:	a201      	add	r2, pc, #4	; (adr r2, 800cc98 <UART_SetConfig+0x5cc>)
 800cc94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc98:	0800cd1b 	.word	0x0800cd1b
 800cc9c:	0800cd91 	.word	0x0800cd91
 800cca0:	0800cd23 	.word	0x0800cd23
 800cca4:	0800cd91 	.word	0x0800cd91
 800cca8:	0800cd91 	.word	0x0800cd91
 800ccac:	0800cd91 	.word	0x0800cd91
 800ccb0:	0800cd33 	.word	0x0800cd33
 800ccb4:	0800cd91 	.word	0x0800cd91
 800ccb8:	0800cd91 	.word	0x0800cd91
 800ccbc:	0800cd91 	.word	0x0800cd91
 800ccc0:	0800cd91 	.word	0x0800cd91
 800ccc4:	0800cd91 	.word	0x0800cd91
 800ccc8:	0800cd91 	.word	0x0800cd91
 800cccc:	0800cd91 	.word	0x0800cd91
 800ccd0:	0800cd43 	.word	0x0800cd43
 800ccd4:	0800cd91 	.word	0x0800cd91
 800ccd8:	0800cd91 	.word	0x0800cd91
 800ccdc:	0800cd91 	.word	0x0800cd91
 800cce0:	0800cd91 	.word	0x0800cd91
 800cce4:	0800cd91 	.word	0x0800cd91
 800cce8:	0800cd91 	.word	0x0800cd91
 800ccec:	0800cd91 	.word	0x0800cd91
 800ccf0:	0800cd91 	.word	0x0800cd91
 800ccf4:	0800cd91 	.word	0x0800cd91
 800ccf8:	0800cd91 	.word	0x0800cd91
 800ccfc:	0800cd91 	.word	0x0800cd91
 800cd00:	0800cd91 	.word	0x0800cd91
 800cd04:	0800cd91 	.word	0x0800cd91
 800cd08:	0800cd91 	.word	0x0800cd91
 800cd0c:	0800cd91 	.word	0x0800cd91
 800cd10:	0800cd83 	.word	0x0800cd83
 800cd14:	2b40      	cmp	r3, #64	; 0x40
 800cd16:	d037      	beq.n	800cd88 <UART_SetConfig+0x6bc>
 800cd18:	e03a      	b.n	800cd90 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cd1a:	f7fa fd25 	bl	8007768 <HAL_RCCEx_GetD3PCLK1Freq>
 800cd1e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd20:	e03c      	b.n	800cd9c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd26:	4618      	mov	r0, r3
 800cd28:	f7fa fd34 	bl	8007794 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd30:	e034      	b.n	800cd9c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd32:	f107 0318 	add.w	r3, r7, #24
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7fa fe80 	bl	8007a3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cd3c:	69fb      	ldr	r3, [r7, #28]
 800cd3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd40:	e02c      	b.n	800cd9c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd42:	4b09      	ldr	r3, [pc, #36]	; (800cd68 <UART_SetConfig+0x69c>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	f003 0320 	and.w	r3, r3, #32
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d016      	beq.n	800cd7c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cd4e:	4b06      	ldr	r3, [pc, #24]	; (800cd68 <UART_SetConfig+0x69c>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	08db      	lsrs	r3, r3, #3
 800cd54:	f003 0303 	and.w	r3, r3, #3
 800cd58:	4a07      	ldr	r2, [pc, #28]	; (800cd78 <UART_SetConfig+0x6ac>)
 800cd5a:	fa22 f303 	lsr.w	r3, r2, r3
 800cd5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cd60:	e01c      	b.n	800cd9c <UART_SetConfig+0x6d0>
 800cd62:	bf00      	nop
 800cd64:	40011400 	.word	0x40011400
 800cd68:	58024400 	.word	0x58024400
 800cd6c:	40007800 	.word	0x40007800
 800cd70:	40007c00 	.word	0x40007c00
 800cd74:	58000c00 	.word	0x58000c00
 800cd78:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800cd7c:	4b9d      	ldr	r3, [pc, #628]	; (800cff4 <UART_SetConfig+0x928>)
 800cd7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd80:	e00c      	b.n	800cd9c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cd82:	4b9d      	ldr	r3, [pc, #628]	; (800cff8 <UART_SetConfig+0x92c>)
 800cd84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd86:	e009      	b.n	800cd9c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd8e:	e005      	b.n	800cd9c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800cd90:	2300      	movs	r3, #0
 800cd92:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cd94:	2301      	movs	r3, #1
 800cd96:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cd9a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cd9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	f000 81de 	beq.w	800d160 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cda8:	4a94      	ldr	r2, [pc, #592]	; (800cffc <UART_SetConfig+0x930>)
 800cdaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cdae:	461a      	mov	r2, r3
 800cdb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdb2:	fbb3 f3f2 	udiv	r3, r3, r2
 800cdb6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	685a      	ldr	r2, [r3, #4]
 800cdbc:	4613      	mov	r3, r2
 800cdbe:	005b      	lsls	r3, r3, #1
 800cdc0:	4413      	add	r3, r2
 800cdc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d305      	bcc.n	800cdd4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	685b      	ldr	r3, [r3, #4]
 800cdcc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cdce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d903      	bls.n	800cddc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cdda:	e1c1      	b.n	800d160 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdde:	2200      	movs	r2, #0
 800cde0:	60bb      	str	r3, [r7, #8]
 800cde2:	60fa      	str	r2, [r7, #12]
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde8:	4a84      	ldr	r2, [pc, #528]	; (800cffc <UART_SetConfig+0x930>)
 800cdea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cdee:	b29b      	uxth	r3, r3
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	603b      	str	r3, [r7, #0]
 800cdf4:	607a      	str	r2, [r7, #4]
 800cdf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdfa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cdfe:	f7f3 fac7 	bl	8000390 <__aeabi_uldivmod>
 800ce02:	4602      	mov	r2, r0
 800ce04:	460b      	mov	r3, r1
 800ce06:	4610      	mov	r0, r2
 800ce08:	4619      	mov	r1, r3
 800ce0a:	f04f 0200 	mov.w	r2, #0
 800ce0e:	f04f 0300 	mov.w	r3, #0
 800ce12:	020b      	lsls	r3, r1, #8
 800ce14:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ce18:	0202      	lsls	r2, r0, #8
 800ce1a:	6979      	ldr	r1, [r7, #20]
 800ce1c:	6849      	ldr	r1, [r1, #4]
 800ce1e:	0849      	lsrs	r1, r1, #1
 800ce20:	2000      	movs	r0, #0
 800ce22:	460c      	mov	r4, r1
 800ce24:	4605      	mov	r5, r0
 800ce26:	eb12 0804 	adds.w	r8, r2, r4
 800ce2a:	eb43 0905 	adc.w	r9, r3, r5
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	685b      	ldr	r3, [r3, #4]
 800ce32:	2200      	movs	r2, #0
 800ce34:	469a      	mov	sl, r3
 800ce36:	4693      	mov	fp, r2
 800ce38:	4652      	mov	r2, sl
 800ce3a:	465b      	mov	r3, fp
 800ce3c:	4640      	mov	r0, r8
 800ce3e:	4649      	mov	r1, r9
 800ce40:	f7f3 faa6 	bl	8000390 <__aeabi_uldivmod>
 800ce44:	4602      	mov	r2, r0
 800ce46:	460b      	mov	r3, r1
 800ce48:	4613      	mov	r3, r2
 800ce4a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ce4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ce52:	d308      	bcc.n	800ce66 <UART_SetConfig+0x79a>
 800ce54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce5a:	d204      	bcs.n	800ce66 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce62:	60da      	str	r2, [r3, #12]
 800ce64:	e17c      	b.n	800d160 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ce66:	2301      	movs	r3, #1
 800ce68:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ce6c:	e178      	b.n	800d160 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	69db      	ldr	r3, [r3, #28]
 800ce72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce76:	f040 80c5 	bne.w	800d004 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ce7a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ce7e:	2b20      	cmp	r3, #32
 800ce80:	dc48      	bgt.n	800cf14 <UART_SetConfig+0x848>
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	db7b      	blt.n	800cf7e <UART_SetConfig+0x8b2>
 800ce86:	2b20      	cmp	r3, #32
 800ce88:	d879      	bhi.n	800cf7e <UART_SetConfig+0x8b2>
 800ce8a:	a201      	add	r2, pc, #4	; (adr r2, 800ce90 <UART_SetConfig+0x7c4>)
 800ce8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce90:	0800cf1b 	.word	0x0800cf1b
 800ce94:	0800cf23 	.word	0x0800cf23
 800ce98:	0800cf7f 	.word	0x0800cf7f
 800ce9c:	0800cf7f 	.word	0x0800cf7f
 800cea0:	0800cf2b 	.word	0x0800cf2b
 800cea4:	0800cf7f 	.word	0x0800cf7f
 800cea8:	0800cf7f 	.word	0x0800cf7f
 800ceac:	0800cf7f 	.word	0x0800cf7f
 800ceb0:	0800cf3b 	.word	0x0800cf3b
 800ceb4:	0800cf7f 	.word	0x0800cf7f
 800ceb8:	0800cf7f 	.word	0x0800cf7f
 800cebc:	0800cf7f 	.word	0x0800cf7f
 800cec0:	0800cf7f 	.word	0x0800cf7f
 800cec4:	0800cf7f 	.word	0x0800cf7f
 800cec8:	0800cf7f 	.word	0x0800cf7f
 800cecc:	0800cf7f 	.word	0x0800cf7f
 800ced0:	0800cf4b 	.word	0x0800cf4b
 800ced4:	0800cf7f 	.word	0x0800cf7f
 800ced8:	0800cf7f 	.word	0x0800cf7f
 800cedc:	0800cf7f 	.word	0x0800cf7f
 800cee0:	0800cf7f 	.word	0x0800cf7f
 800cee4:	0800cf7f 	.word	0x0800cf7f
 800cee8:	0800cf7f 	.word	0x0800cf7f
 800ceec:	0800cf7f 	.word	0x0800cf7f
 800cef0:	0800cf7f 	.word	0x0800cf7f
 800cef4:	0800cf7f 	.word	0x0800cf7f
 800cef8:	0800cf7f 	.word	0x0800cf7f
 800cefc:	0800cf7f 	.word	0x0800cf7f
 800cf00:	0800cf7f 	.word	0x0800cf7f
 800cf04:	0800cf7f 	.word	0x0800cf7f
 800cf08:	0800cf7f 	.word	0x0800cf7f
 800cf0c:	0800cf7f 	.word	0x0800cf7f
 800cf10:	0800cf71 	.word	0x0800cf71
 800cf14:	2b40      	cmp	r3, #64	; 0x40
 800cf16:	d02e      	beq.n	800cf76 <UART_SetConfig+0x8aa>
 800cf18:	e031      	b.n	800cf7e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cf1a:	f7f8 ff77 	bl	8005e0c <HAL_RCC_GetPCLK1Freq>
 800cf1e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cf20:	e033      	b.n	800cf8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cf22:	f7f8 ff89 	bl	8005e38 <HAL_RCC_GetPCLK2Freq>
 800cf26:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cf28:	e02f      	b.n	800cf8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f7fa fc30 	bl	8007794 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cf34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf38:	e027      	b.n	800cf8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf3a:	f107 0318 	add.w	r3, r7, #24
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f7fa fd7c 	bl	8007a3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cf44:	69fb      	ldr	r3, [r7, #28]
 800cf46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf48:	e01f      	b.n	800cf8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf4a:	4b2d      	ldr	r3, [pc, #180]	; (800d000 <UART_SetConfig+0x934>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f003 0320 	and.w	r3, r3, #32
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d009      	beq.n	800cf6a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cf56:	4b2a      	ldr	r3, [pc, #168]	; (800d000 <UART_SetConfig+0x934>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	08db      	lsrs	r3, r3, #3
 800cf5c:	f003 0303 	and.w	r3, r3, #3
 800cf60:	4a24      	ldr	r2, [pc, #144]	; (800cff4 <UART_SetConfig+0x928>)
 800cf62:	fa22 f303 	lsr.w	r3, r2, r3
 800cf66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cf68:	e00f      	b.n	800cf8a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800cf6a:	4b22      	ldr	r3, [pc, #136]	; (800cff4 <UART_SetConfig+0x928>)
 800cf6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf6e:	e00c      	b.n	800cf8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cf70:	4b21      	ldr	r3, [pc, #132]	; (800cff8 <UART_SetConfig+0x92c>)
 800cf72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf74:	e009      	b.n	800cf8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf7c:	e005      	b.n	800cf8a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cf82:	2301      	movs	r3, #1
 800cf84:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cf88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cf8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	f000 80e7 	beq.w	800d160 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf96:	4a19      	ldr	r2, [pc, #100]	; (800cffc <UART_SetConfig+0x930>)
 800cf98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf9c:	461a      	mov	r2, r3
 800cf9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfa0:	fbb3 f3f2 	udiv	r3, r3, r2
 800cfa4:	005a      	lsls	r2, r3, #1
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	685b      	ldr	r3, [r3, #4]
 800cfaa:	085b      	lsrs	r3, r3, #1
 800cfac:	441a      	add	r2, r3
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	685b      	ldr	r3, [r3, #4]
 800cfb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfb6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cfb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfba:	2b0f      	cmp	r3, #15
 800cfbc:	d916      	bls.n	800cfec <UART_SetConfig+0x920>
 800cfbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfc4:	d212      	bcs.n	800cfec <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cfc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc8:	b29b      	uxth	r3, r3
 800cfca:	f023 030f 	bic.w	r3, r3, #15
 800cfce:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cfd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd2:	085b      	lsrs	r3, r3, #1
 800cfd4:	b29b      	uxth	r3, r3
 800cfd6:	f003 0307 	and.w	r3, r3, #7
 800cfda:	b29a      	uxth	r2, r3
 800cfdc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cfde:	4313      	orrs	r3, r2
 800cfe0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cfe8:	60da      	str	r2, [r3, #12]
 800cfea:	e0b9      	b.n	800d160 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cfec:	2301      	movs	r3, #1
 800cfee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cff2:	e0b5      	b.n	800d160 <UART_SetConfig+0xa94>
 800cff4:	03d09000 	.word	0x03d09000
 800cff8:	003d0900 	.word	0x003d0900
 800cffc:	08025d34 	.word	0x08025d34
 800d000:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d004:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d008:	2b20      	cmp	r3, #32
 800d00a:	dc49      	bgt.n	800d0a0 <UART_SetConfig+0x9d4>
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	db7c      	blt.n	800d10a <UART_SetConfig+0xa3e>
 800d010:	2b20      	cmp	r3, #32
 800d012:	d87a      	bhi.n	800d10a <UART_SetConfig+0xa3e>
 800d014:	a201      	add	r2, pc, #4	; (adr r2, 800d01c <UART_SetConfig+0x950>)
 800d016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d01a:	bf00      	nop
 800d01c:	0800d0a7 	.word	0x0800d0a7
 800d020:	0800d0af 	.word	0x0800d0af
 800d024:	0800d10b 	.word	0x0800d10b
 800d028:	0800d10b 	.word	0x0800d10b
 800d02c:	0800d0b7 	.word	0x0800d0b7
 800d030:	0800d10b 	.word	0x0800d10b
 800d034:	0800d10b 	.word	0x0800d10b
 800d038:	0800d10b 	.word	0x0800d10b
 800d03c:	0800d0c7 	.word	0x0800d0c7
 800d040:	0800d10b 	.word	0x0800d10b
 800d044:	0800d10b 	.word	0x0800d10b
 800d048:	0800d10b 	.word	0x0800d10b
 800d04c:	0800d10b 	.word	0x0800d10b
 800d050:	0800d10b 	.word	0x0800d10b
 800d054:	0800d10b 	.word	0x0800d10b
 800d058:	0800d10b 	.word	0x0800d10b
 800d05c:	0800d0d7 	.word	0x0800d0d7
 800d060:	0800d10b 	.word	0x0800d10b
 800d064:	0800d10b 	.word	0x0800d10b
 800d068:	0800d10b 	.word	0x0800d10b
 800d06c:	0800d10b 	.word	0x0800d10b
 800d070:	0800d10b 	.word	0x0800d10b
 800d074:	0800d10b 	.word	0x0800d10b
 800d078:	0800d10b 	.word	0x0800d10b
 800d07c:	0800d10b 	.word	0x0800d10b
 800d080:	0800d10b 	.word	0x0800d10b
 800d084:	0800d10b 	.word	0x0800d10b
 800d088:	0800d10b 	.word	0x0800d10b
 800d08c:	0800d10b 	.word	0x0800d10b
 800d090:	0800d10b 	.word	0x0800d10b
 800d094:	0800d10b 	.word	0x0800d10b
 800d098:	0800d10b 	.word	0x0800d10b
 800d09c:	0800d0fd 	.word	0x0800d0fd
 800d0a0:	2b40      	cmp	r3, #64	; 0x40
 800d0a2:	d02e      	beq.n	800d102 <UART_SetConfig+0xa36>
 800d0a4:	e031      	b.n	800d10a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d0a6:	f7f8 feb1 	bl	8005e0c <HAL_RCC_GetPCLK1Freq>
 800d0aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d0ac:	e033      	b.n	800d116 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d0ae:	f7f8 fec3 	bl	8005e38 <HAL_RCC_GetPCLK2Freq>
 800d0b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d0b4:	e02f      	b.n	800d116 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f7fa fb6a 	bl	8007794 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0c4:	e027      	b.n	800d116 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d0c6:	f107 0318 	add.w	r3, r7, #24
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f7fa fcb6 	bl	8007a3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d0d0:	69fb      	ldr	r3, [r7, #28]
 800d0d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0d4:	e01f      	b.n	800d116 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d0d6:	4b2d      	ldr	r3, [pc, #180]	; (800d18c <UART_SetConfig+0xac0>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	f003 0320 	and.w	r3, r3, #32
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d009      	beq.n	800d0f6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d0e2:	4b2a      	ldr	r3, [pc, #168]	; (800d18c <UART_SetConfig+0xac0>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	08db      	lsrs	r3, r3, #3
 800d0e8:	f003 0303 	and.w	r3, r3, #3
 800d0ec:	4a28      	ldr	r2, [pc, #160]	; (800d190 <UART_SetConfig+0xac4>)
 800d0ee:	fa22 f303 	lsr.w	r3, r2, r3
 800d0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d0f4:	e00f      	b.n	800d116 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d0f6:	4b26      	ldr	r3, [pc, #152]	; (800d190 <UART_SetConfig+0xac4>)
 800d0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0fa:	e00c      	b.n	800d116 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d0fc:	4b25      	ldr	r3, [pc, #148]	; (800d194 <UART_SetConfig+0xac8>)
 800d0fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d100:	e009      	b.n	800d116 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d106:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d108:	e005      	b.n	800d116 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d10a:	2300      	movs	r3, #0
 800d10c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d10e:	2301      	movs	r3, #1
 800d110:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d114:	bf00      	nop
    }

    if (pclk != 0U)
 800d116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d021      	beq.n	800d160 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d120:	4a1d      	ldr	r2, [pc, #116]	; (800d198 <UART_SetConfig+0xacc>)
 800d122:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d126:	461a      	mov	r2, r3
 800d128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d12a:	fbb3 f2f2 	udiv	r2, r3, r2
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	685b      	ldr	r3, [r3, #4]
 800d132:	085b      	lsrs	r3, r3, #1
 800d134:	441a      	add	r2, r3
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	685b      	ldr	r3, [r3, #4]
 800d13a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d13e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d142:	2b0f      	cmp	r3, #15
 800d144:	d909      	bls.n	800d15a <UART_SetConfig+0xa8e>
 800d146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d14c:	d205      	bcs.n	800d15a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d150:	b29a      	uxth	r2, r3
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	60da      	str	r2, [r3, #12]
 800d158:	e002      	b.n	800d160 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d15a:	2301      	movs	r3, #1
 800d15c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	2201      	movs	r2, #1
 800d164:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	2201      	movs	r2, #1
 800d16c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	2200      	movs	r2, #0
 800d174:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	2200      	movs	r2, #0
 800d17a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d17c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d180:	4618      	mov	r0, r3
 800d182:	3748      	adds	r7, #72	; 0x48
 800d184:	46bd      	mov	sp, r7
 800d186:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d18a:	bf00      	nop
 800d18c:	58024400 	.word	0x58024400
 800d190:	03d09000 	.word	0x03d09000
 800d194:	003d0900 	.word	0x003d0900
 800d198:	08025d34 	.word	0x08025d34

0800d19c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d19c:	b480      	push	{r7}
 800d19e:	b083      	sub	sp, #12
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1a8:	f003 0301 	and.w	r3, r3, #1
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d00a      	beq.n	800d1c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	685b      	ldr	r3, [r3, #4]
 800d1b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	430a      	orrs	r2, r1
 800d1c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1ca:	f003 0302 	and.w	r3, r3, #2
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d00a      	beq.n	800d1e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	685b      	ldr	r3, [r3, #4]
 800d1d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	430a      	orrs	r2, r1
 800d1e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1ec:	f003 0304 	and.w	r3, r3, #4
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d00a      	beq.n	800d20a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	685b      	ldr	r3, [r3, #4]
 800d1fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	430a      	orrs	r2, r1
 800d208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d20e:	f003 0308 	and.w	r3, r3, #8
 800d212:	2b00      	cmp	r3, #0
 800d214:	d00a      	beq.n	800d22c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	685b      	ldr	r3, [r3, #4]
 800d21c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	430a      	orrs	r2, r1
 800d22a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d230:	f003 0310 	and.w	r3, r3, #16
 800d234:	2b00      	cmp	r3, #0
 800d236:	d00a      	beq.n	800d24e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	689b      	ldr	r3, [r3, #8]
 800d23e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	430a      	orrs	r2, r1
 800d24c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d252:	f003 0320 	and.w	r3, r3, #32
 800d256:	2b00      	cmp	r3, #0
 800d258:	d00a      	beq.n	800d270 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	689b      	ldr	r3, [r3, #8]
 800d260:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	430a      	orrs	r2, r1
 800d26e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d01a      	beq.n	800d2b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	685b      	ldr	r3, [r3, #4]
 800d282:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	430a      	orrs	r2, r1
 800d290:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d29a:	d10a      	bne.n	800d2b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	685b      	ldr	r3, [r3, #4]
 800d2a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	430a      	orrs	r2, r1
 800d2b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d00a      	beq.n	800d2d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	685b      	ldr	r3, [r3, #4]
 800d2c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	430a      	orrs	r2, r1
 800d2d2:	605a      	str	r2, [r3, #4]
  }
}
 800d2d4:	bf00      	nop
 800d2d6:	370c      	adds	r7, #12
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2de:	4770      	bx	lr

0800d2e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b086      	sub	sp, #24
 800d2e4:	af02      	add	r7, sp, #8
 800d2e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d2f0:	f7f3 ff2a 	bl	8001148 <HAL_GetTick>
 800d2f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f003 0308 	and.w	r3, r3, #8
 800d300:	2b08      	cmp	r3, #8
 800d302:	d10e      	bne.n	800d322 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d304:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d308:	9300      	str	r3, [sp, #0]
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	2200      	movs	r2, #0
 800d30e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f000 f82f 	bl	800d376 <UART_WaitOnFlagUntilTimeout>
 800d318:	4603      	mov	r3, r0
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d001      	beq.n	800d322 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d31e:	2303      	movs	r3, #3
 800d320:	e025      	b.n	800d36e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f003 0304 	and.w	r3, r3, #4
 800d32c:	2b04      	cmp	r3, #4
 800d32e:	d10e      	bne.n	800d34e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d330:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d334:	9300      	str	r3, [sp, #0]
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	2200      	movs	r2, #0
 800d33a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f000 f819 	bl	800d376 <UART_WaitOnFlagUntilTimeout>
 800d344:	4603      	mov	r3, r0
 800d346:	2b00      	cmp	r3, #0
 800d348:	d001      	beq.n	800d34e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d34a:	2303      	movs	r3, #3
 800d34c:	e00f      	b.n	800d36e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2220      	movs	r2, #32
 800d352:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2220      	movs	r2, #32
 800d35a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2200      	movs	r2, #0
 800d362:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2200      	movs	r2, #0
 800d368:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d36c:	2300      	movs	r3, #0
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3710      	adds	r7, #16
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}

0800d376 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d376:	b580      	push	{r7, lr}
 800d378:	b09c      	sub	sp, #112	; 0x70
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	60f8      	str	r0, [r7, #12]
 800d37e:	60b9      	str	r1, [r7, #8]
 800d380:	603b      	str	r3, [r7, #0]
 800d382:	4613      	mov	r3, r2
 800d384:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d386:	e0a9      	b.n	800d4dc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d38a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d38e:	f000 80a5 	beq.w	800d4dc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d392:	f7f3 fed9 	bl	8001148 <HAL_GetTick>
 800d396:	4602      	mov	r2, r0
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	1ad3      	subs	r3, r2, r3
 800d39c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d302      	bcc.n	800d3a8 <UART_WaitOnFlagUntilTimeout+0x32>
 800d3a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d140      	bne.n	800d42a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3b0:	e853 3f00 	ldrex	r3, [r3]
 800d3b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d3b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d3bc:	667b      	str	r3, [r7, #100]	; 0x64
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d3c8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d3cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d3ce:	e841 2300 	strex	r3, r2, [r1]
 800d3d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d3d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d1e6      	bne.n	800d3a8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	3308      	adds	r3, #8
 800d3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3e4:	e853 3f00 	ldrex	r3, [r3]
 800d3e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ec:	f023 0301 	bic.w	r3, r3, #1
 800d3f0:	663b      	str	r3, [r7, #96]	; 0x60
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	3308      	adds	r3, #8
 800d3f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d3fa:	64ba      	str	r2, [r7, #72]	; 0x48
 800d3fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d400:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d402:	e841 2300 	strex	r3, r2, [r1]
 800d406:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d1e5      	bne.n	800d3da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2220      	movs	r2, #32
 800d412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	2220      	movs	r2, #32
 800d41a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	2200      	movs	r2, #0
 800d422:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d426:	2303      	movs	r3, #3
 800d428:	e069      	b.n	800d4fe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	f003 0304 	and.w	r3, r3, #4
 800d434:	2b00      	cmp	r3, #0
 800d436:	d051      	beq.n	800d4dc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	69db      	ldr	r3, [r3, #28]
 800d43e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d446:	d149      	bne.n	800d4dc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d450:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d45a:	e853 3f00 	ldrex	r3, [r3]
 800d45e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d462:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d466:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	461a      	mov	r2, r3
 800d46e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d470:	637b      	str	r3, [r7, #52]	; 0x34
 800d472:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d474:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d476:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d478:	e841 2300 	strex	r3, r2, [r1]
 800d47c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d480:	2b00      	cmp	r3, #0
 800d482:	d1e6      	bne.n	800d452 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	3308      	adds	r3, #8
 800d48a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	e853 3f00 	ldrex	r3, [r3]
 800d492:	613b      	str	r3, [r7, #16]
   return(result);
 800d494:	693b      	ldr	r3, [r7, #16]
 800d496:	f023 0301 	bic.w	r3, r3, #1
 800d49a:	66bb      	str	r3, [r7, #104]	; 0x68
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	3308      	adds	r3, #8
 800d4a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d4a4:	623a      	str	r2, [r7, #32]
 800d4a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4a8:	69f9      	ldr	r1, [r7, #28]
 800d4aa:	6a3a      	ldr	r2, [r7, #32]
 800d4ac:	e841 2300 	strex	r3, r2, [r1]
 800d4b0:	61bb      	str	r3, [r7, #24]
   return(result);
 800d4b2:	69bb      	ldr	r3, [r7, #24]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d1e5      	bne.n	800d484 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	2220      	movs	r2, #32
 800d4bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	2220      	movs	r2, #32
 800d4c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	2220      	movs	r2, #32
 800d4cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d4d8:	2303      	movs	r3, #3
 800d4da:	e010      	b.n	800d4fe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	69da      	ldr	r2, [r3, #28]
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	4013      	ands	r3, r2
 800d4e6:	68ba      	ldr	r2, [r7, #8]
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	bf0c      	ite	eq
 800d4ec:	2301      	moveq	r3, #1
 800d4ee:	2300      	movne	r3, #0
 800d4f0:	b2db      	uxtb	r3, r3
 800d4f2:	461a      	mov	r2, r3
 800d4f4:	79fb      	ldrb	r3, [r7, #7]
 800d4f6:	429a      	cmp	r2, r3
 800d4f8:	f43f af46 	beq.w	800d388 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d4fc:	2300      	movs	r3, #0
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3770      	adds	r7, #112	; 0x70
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}
	...

0800d508 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d508:	b480      	push	{r7}
 800d50a:	b095      	sub	sp, #84	; 0x54
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d518:	e853 3f00 	ldrex	r3, [r3]
 800d51c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d520:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d524:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	461a      	mov	r2, r3
 800d52c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d52e:	643b      	str	r3, [r7, #64]	; 0x40
 800d530:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d532:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d534:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d536:	e841 2300 	strex	r3, r2, [r1]
 800d53a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d1e6      	bne.n	800d510 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	3308      	adds	r3, #8
 800d548:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d54a:	6a3b      	ldr	r3, [r7, #32]
 800d54c:	e853 3f00 	ldrex	r3, [r3]
 800d550:	61fb      	str	r3, [r7, #28]
   return(result);
 800d552:	69fa      	ldr	r2, [r7, #28]
 800d554:	4b1e      	ldr	r3, [pc, #120]	; (800d5d0 <UART_EndRxTransfer+0xc8>)
 800d556:	4013      	ands	r3, r2
 800d558:	64bb      	str	r3, [r7, #72]	; 0x48
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	3308      	adds	r3, #8
 800d560:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d562:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d564:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d566:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d56a:	e841 2300 	strex	r3, r2, [r1]
 800d56e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d572:	2b00      	cmp	r3, #0
 800d574:	d1e5      	bne.n	800d542 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d57a:	2b01      	cmp	r3, #1
 800d57c:	d118      	bne.n	800d5b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	e853 3f00 	ldrex	r3, [r3]
 800d58a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	f023 0310 	bic.w	r3, r3, #16
 800d592:	647b      	str	r3, [r7, #68]	; 0x44
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	461a      	mov	r2, r3
 800d59a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d59c:	61bb      	str	r3, [r7, #24]
 800d59e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5a0:	6979      	ldr	r1, [r7, #20]
 800d5a2:	69ba      	ldr	r2, [r7, #24]
 800d5a4:	e841 2300 	strex	r3, r2, [r1]
 800d5a8:	613b      	str	r3, [r7, #16]
   return(result);
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d1e6      	bne.n	800d57e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2220      	movs	r2, #32
 800d5b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d5c4:	bf00      	nop
 800d5c6:	3754      	adds	r7, #84	; 0x54
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ce:	4770      	bx	lr
 800d5d0:	effffffe 	.word	0xeffffffe

0800d5d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b084      	sub	sp, #16
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d5f2:	68f8      	ldr	r0, [r7, #12]
 800d5f4:	f7ff f854 	bl	800c6a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d5f8:	bf00      	nop
 800d5fa:	3710      	adds	r7, #16
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}

0800d600 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b088      	sub	sp, #32
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	e853 3f00 	ldrex	r3, [r3]
 800d614:	60bb      	str	r3, [r7, #8]
   return(result);
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d61c:	61fb      	str	r3, [r7, #28]
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	461a      	mov	r2, r3
 800d624:	69fb      	ldr	r3, [r7, #28]
 800d626:	61bb      	str	r3, [r7, #24]
 800d628:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d62a:	6979      	ldr	r1, [r7, #20]
 800d62c:	69ba      	ldr	r2, [r7, #24]
 800d62e:	e841 2300 	strex	r3, r2, [r1]
 800d632:	613b      	str	r3, [r7, #16]
   return(result);
 800d634:	693b      	ldr	r3, [r7, #16]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d1e6      	bne.n	800d608 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2220      	movs	r2, #32
 800d63e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2200      	movs	r2, #0
 800d646:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f7ff f81f 	bl	800c68c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d64e:	bf00      	nop
 800d650:	3720      	adds	r7, #32
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}

0800d656 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d656:	b480      	push	{r7}
 800d658:	b083      	sub	sp, #12
 800d65a:	af00      	add	r7, sp, #0
 800d65c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d65e:	bf00      	nop
 800d660:	370c      	adds	r7, #12
 800d662:	46bd      	mov	sp, r7
 800d664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d668:	4770      	bx	lr

0800d66a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d66a:	b480      	push	{r7}
 800d66c:	b083      	sub	sp, #12
 800d66e:	af00      	add	r7, sp, #0
 800d670:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d672:	bf00      	nop
 800d674:	370c      	adds	r7, #12
 800d676:	46bd      	mov	sp, r7
 800d678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67c:	4770      	bx	lr

0800d67e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d67e:	b480      	push	{r7}
 800d680:	b083      	sub	sp, #12
 800d682:	af00      	add	r7, sp, #0
 800d684:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d686:	bf00      	nop
 800d688:	370c      	adds	r7, #12
 800d68a:	46bd      	mov	sp, r7
 800d68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d690:	4770      	bx	lr

0800d692 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d692:	b480      	push	{r7}
 800d694:	b085      	sub	sp, #20
 800d696:	af00      	add	r7, sp, #0
 800d698:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d6a0:	2b01      	cmp	r3, #1
 800d6a2:	d101      	bne.n	800d6a8 <HAL_UARTEx_DisableFifoMode+0x16>
 800d6a4:	2302      	movs	r3, #2
 800d6a6:	e027      	b.n	800d6f8 <HAL_UARTEx_DisableFifoMode+0x66>
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2201      	movs	r2, #1
 800d6ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2224      	movs	r2, #36	; 0x24
 800d6b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	681a      	ldr	r2, [r3, #0]
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	f022 0201 	bic.w	r2, r2, #1
 800d6ce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d6d6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	68fa      	ldr	r2, [r7, #12]
 800d6e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2220      	movs	r2, #32
 800d6ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d6f6:	2300      	movs	r3, #0
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	3714      	adds	r7, #20
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d702:	4770      	bx	lr

0800d704 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b084      	sub	sp, #16
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
 800d70c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d714:	2b01      	cmp	r3, #1
 800d716:	d101      	bne.n	800d71c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d718:	2302      	movs	r3, #2
 800d71a:	e02d      	b.n	800d778 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2201      	movs	r2, #1
 800d720:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2224      	movs	r2, #36	; 0x24
 800d728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	681a      	ldr	r2, [r3, #0]
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	f022 0201 	bic.w	r2, r2, #1
 800d742:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	689b      	ldr	r3, [r3, #8]
 800d74a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	683a      	ldr	r2, [r7, #0]
 800d754:	430a      	orrs	r2, r1
 800d756:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	f000 f84f 	bl	800d7fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	68fa      	ldr	r2, [r7, #12]
 800d764:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2220      	movs	r2, #32
 800d76a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2200      	movs	r2, #0
 800d772:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d776:	2300      	movs	r3, #0
}
 800d778:	4618      	mov	r0, r3
 800d77a:	3710      	adds	r7, #16
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}

0800d780 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b084      	sub	sp, #16
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
 800d788:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d790:	2b01      	cmp	r3, #1
 800d792:	d101      	bne.n	800d798 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d794:	2302      	movs	r3, #2
 800d796:	e02d      	b.n	800d7f4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2201      	movs	r2, #1
 800d79c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2224      	movs	r2, #36	; 0x24
 800d7a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	681a      	ldr	r2, [r3, #0]
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	f022 0201 	bic.w	r2, r2, #1
 800d7be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	689b      	ldr	r3, [r3, #8]
 800d7c6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	683a      	ldr	r2, [r7, #0]
 800d7d0:	430a      	orrs	r2, r1
 800d7d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f000 f811 	bl	800d7fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	68fa      	ldr	r2, [r7, #12]
 800d7e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2220      	movs	r2, #32
 800d7e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d7f2:	2300      	movs	r3, #0
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	3710      	adds	r7, #16
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}

0800d7fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b085      	sub	sp, #20
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d108      	bne.n	800d81e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2201      	movs	r2, #1
 800d810:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2201      	movs	r2, #1
 800d818:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d81c:	e031      	b.n	800d882 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d81e:	2310      	movs	r3, #16
 800d820:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d822:	2310      	movs	r3, #16
 800d824:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	689b      	ldr	r3, [r3, #8]
 800d82c:	0e5b      	lsrs	r3, r3, #25
 800d82e:	b2db      	uxtb	r3, r3
 800d830:	f003 0307 	and.w	r3, r3, #7
 800d834:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	689b      	ldr	r3, [r3, #8]
 800d83c:	0f5b      	lsrs	r3, r3, #29
 800d83e:	b2db      	uxtb	r3, r3
 800d840:	f003 0307 	and.w	r3, r3, #7
 800d844:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d846:	7bbb      	ldrb	r3, [r7, #14]
 800d848:	7b3a      	ldrb	r2, [r7, #12]
 800d84a:	4911      	ldr	r1, [pc, #68]	; (800d890 <UARTEx_SetNbDataToProcess+0x94>)
 800d84c:	5c8a      	ldrb	r2, [r1, r2]
 800d84e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d852:	7b3a      	ldrb	r2, [r7, #12]
 800d854:	490f      	ldr	r1, [pc, #60]	; (800d894 <UARTEx_SetNbDataToProcess+0x98>)
 800d856:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d858:	fb93 f3f2 	sdiv	r3, r3, r2
 800d85c:	b29a      	uxth	r2, r3
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d864:	7bfb      	ldrb	r3, [r7, #15]
 800d866:	7b7a      	ldrb	r2, [r7, #13]
 800d868:	4909      	ldr	r1, [pc, #36]	; (800d890 <UARTEx_SetNbDataToProcess+0x94>)
 800d86a:	5c8a      	ldrb	r2, [r1, r2]
 800d86c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d870:	7b7a      	ldrb	r2, [r7, #13]
 800d872:	4908      	ldr	r1, [pc, #32]	; (800d894 <UARTEx_SetNbDataToProcess+0x98>)
 800d874:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d876:	fb93 f3f2 	sdiv	r3, r3, r2
 800d87a:	b29a      	uxth	r2, r3
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d882:	bf00      	nop
 800d884:	3714      	adds	r7, #20
 800d886:	46bd      	mov	sp, r7
 800d888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88c:	4770      	bx	lr
 800d88e:	bf00      	nop
 800d890:	08025d4c 	.word	0x08025d4c
 800d894:	08025d54 	.word	0x08025d54

0800d898 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d898:	b084      	sub	sp, #16
 800d89a:	b480      	push	{r7}
 800d89c:	b085      	sub	sp, #20
 800d89e:	af00      	add	r7, sp, #0
 800d8a0:	6078      	str	r0, [r7, #4]
 800d8a2:	f107 001c 	add.w	r0, r7, #28
 800d8a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800d8ae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800d8b0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800d8b2:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800d8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800d8b6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800d8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800d8ba:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800d8be:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800d8c0:	68fa      	ldr	r2, [r7, #12]
 800d8c2:	4313      	orrs	r3, r2
 800d8c4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	685a      	ldr	r2, [r3, #4]
 800d8ca:	4b07      	ldr	r3, [pc, #28]	; (800d8e8 <SDMMC_Init+0x50>)
 800d8cc:	4013      	ands	r3, r2
 800d8ce:	68fa      	ldr	r2, [r7, #12]
 800d8d0:	431a      	orrs	r2, r3
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d8d6:	2300      	movs	r3, #0
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3714      	adds	r7, #20
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e2:	b004      	add	sp, #16
 800d8e4:	4770      	bx	lr
 800d8e6:	bf00      	nop
 800d8e8:	ffc02c00 	.word	0xffc02c00

0800d8ec <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d8ec:	b480      	push	{r7}
 800d8ee:	b083      	sub	sp, #12
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	370c      	adds	r7, #12
 800d8fe:	46bd      	mov	sp, r7
 800d900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d904:	4770      	bx	lr

0800d906 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800d906:	b480      	push	{r7}
 800d908:	b083      	sub	sp, #12
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	6078      	str	r0, [r7, #4]
 800d90e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	681a      	ldr	r2, [r3, #0]
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d91a:	2300      	movs	r3, #0
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	370c      	adds	r7, #12
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr

0800d928 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800d928:	b480      	push	{r7}
 800d92a:	b083      	sub	sp, #12
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	f043 0203 	orr.w	r2, r3, #3
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d93c:	2300      	movs	r3, #0
}
 800d93e:	4618      	mov	r0, r3
 800d940:	370c      	adds	r7, #12
 800d942:	46bd      	mov	sp, r7
 800d944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d948:	4770      	bx	lr

0800d94a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800d94a:	b480      	push	{r7}
 800d94c:	b083      	sub	sp, #12
 800d94e:	af00      	add	r7, sp, #0
 800d950:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	f003 0303 	and.w	r3, r3, #3
}
 800d95a:	4618      	mov	r0, r3
 800d95c:	370c      	adds	r7, #12
 800d95e:	46bd      	mov	sp, r7
 800d960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d964:	4770      	bx	lr
	...

0800d968 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d968:	b480      	push	{r7}
 800d96a:	b085      	sub	sp, #20
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
 800d970:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d972:	2300      	movs	r3, #0
 800d974:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	681a      	ldr	r2, [r3, #0]
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d986:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800d98c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800d992:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d994:	68fa      	ldr	r2, [r7, #12]
 800d996:	4313      	orrs	r3, r2
 800d998:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	68da      	ldr	r2, [r3, #12]
 800d99e:	4b06      	ldr	r3, [pc, #24]	; (800d9b8 <SDMMC_SendCommand+0x50>)
 800d9a0:	4013      	ands	r3, r2
 800d9a2:	68fa      	ldr	r2, [r7, #12]
 800d9a4:	431a      	orrs	r2, r3
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d9aa:	2300      	movs	r3, #0
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3714      	adds	r7, #20
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b6:	4770      	bx	lr
 800d9b8:	fffee0c0 	.word	0xfffee0c0

0800d9bc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d9bc:	b480      	push	{r7}
 800d9be:	b083      	sub	sp, #12
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	691b      	ldr	r3, [r3, #16]
 800d9c8:	b2db      	uxtb	r3, r3
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	370c      	adds	r7, #12
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d4:	4770      	bx	lr

0800d9d6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d9d6:	b480      	push	{r7}
 800d9d8:	b085      	sub	sp, #20
 800d9da:	af00      	add	r7, sp, #0
 800d9dc:	6078      	str	r0, [r7, #4]
 800d9de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	3314      	adds	r3, #20
 800d9e4:	461a      	mov	r2, r3
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	4413      	add	r3, r2
 800d9ea:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	681b      	ldr	r3, [r3, #0]
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	3714      	adds	r7, #20
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fa:	4770      	bx	lr

0800d9fc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800d9fc:	b480      	push	{r7}
 800d9fe:	b085      	sub	sp, #20
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800da06:	2300      	movs	r3, #0
 800da08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	681a      	ldr	r2, [r3, #0]
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	685a      	ldr	r2, [r3, #4]
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800da22:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800da28:	431a      	orrs	r2, r3
                       Data->DPSM);
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800da2e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800da30:	68fa      	ldr	r2, [r7, #12]
 800da32:	4313      	orrs	r3, r2
 800da34:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	431a      	orrs	r2, r3
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800da46:	2300      	movs	r3, #0

}
 800da48:	4618      	mov	r0, r3
 800da4a:	3714      	adds	r7, #20
 800da4c:	46bd      	mov	sp, r7
 800da4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da52:	4770      	bx	lr

0800da54 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b088      	sub	sp, #32
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
 800da5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800da62:	2310      	movs	r3, #16
 800da64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da66:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da6c:	2300      	movs	r3, #0
 800da6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800da74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da76:	f107 0308 	add.w	r3, r7, #8
 800da7a:	4619      	mov	r1, r3
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f7ff ff73 	bl	800d968 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800da82:	f241 3288 	movw	r2, #5000	; 0x1388
 800da86:	2110      	movs	r1, #16
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f000 fa5f 	bl	800df4c <SDMMC_GetCmdResp1>
 800da8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da90:	69fb      	ldr	r3, [r7, #28]
}
 800da92:	4618      	mov	r0, r3
 800da94:	3720      	adds	r7, #32
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}

0800da9a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800da9a:	b580      	push	{r7, lr}
 800da9c:	b088      	sub	sp, #32
 800da9e:	af00      	add	r7, sp, #0
 800daa0:	6078      	str	r0, [r7, #4]
 800daa2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800daa8:	2311      	movs	r3, #17
 800daaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800daac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dab0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dab2:	2300      	movs	r3, #0
 800dab4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800daba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dabc:	f107 0308 	add.w	r3, r7, #8
 800dac0:	4619      	mov	r1, r3
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f7ff ff50 	bl	800d968 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800dac8:	f241 3288 	movw	r2, #5000	; 0x1388
 800dacc:	2111      	movs	r1, #17
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f000 fa3c 	bl	800df4c <SDMMC_GetCmdResp1>
 800dad4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dad6:	69fb      	ldr	r3, [r7, #28]
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3720      	adds	r7, #32
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}

0800dae0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b088      	sub	sp, #32
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
 800dae8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800daee:	2312      	movs	r3, #18
 800daf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800daf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800daf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800daf8:	2300      	movs	r3, #0
 800dafa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dafc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db02:	f107 0308 	add.w	r3, r7, #8
 800db06:	4619      	mov	r1, r3
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f7ff ff2d 	bl	800d968 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800db0e:	f241 3288 	movw	r2, #5000	; 0x1388
 800db12:	2112      	movs	r1, #18
 800db14:	6878      	ldr	r0, [r7, #4]
 800db16:	f000 fa19 	bl	800df4c <SDMMC_GetCmdResp1>
 800db1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db1c:	69fb      	ldr	r3, [r7, #28]
}
 800db1e:	4618      	mov	r0, r3
 800db20:	3720      	adds	r7, #32
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}

0800db26 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800db26:	b580      	push	{r7, lr}
 800db28:	b088      	sub	sp, #32
 800db2a:	af00      	add	r7, sp, #0
 800db2c:	6078      	str	r0, [r7, #4]
 800db2e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800db34:	2318      	movs	r3, #24
 800db36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db38:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db3e:	2300      	movs	r3, #0
 800db40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db48:	f107 0308 	add.w	r3, r7, #8
 800db4c:	4619      	mov	r1, r3
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	f7ff ff0a 	bl	800d968 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800db54:	f241 3288 	movw	r2, #5000	; 0x1388
 800db58:	2118      	movs	r1, #24
 800db5a:	6878      	ldr	r0, [r7, #4]
 800db5c:	f000 f9f6 	bl	800df4c <SDMMC_GetCmdResp1>
 800db60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db62:	69fb      	ldr	r3, [r7, #28]
}
 800db64:	4618      	mov	r0, r3
 800db66:	3720      	adds	r7, #32
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}

0800db6c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b088      	sub	sp, #32
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
 800db74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800db7a:	2319      	movs	r3, #25
 800db7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db84:	2300      	movs	r3, #0
 800db86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db8e:	f107 0308 	add.w	r3, r7, #8
 800db92:	4619      	mov	r1, r3
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f7ff fee7 	bl	800d968 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800db9a:	f241 3288 	movw	r2, #5000	; 0x1388
 800db9e:	2119      	movs	r1, #25
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	f000 f9d3 	bl	800df4c <SDMMC_GetCmdResp1>
 800dba6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dba8:	69fb      	ldr	r3, [r7, #28]
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	3720      	adds	r7, #32
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}
	...

0800dbb4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b088      	sub	sp, #32
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800dbc0:	230c      	movs	r3, #12
 800dbc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dbc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dbc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dbce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dbd2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	68db      	ldr	r3, [r3, #12]
 800dbd8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	68db      	ldr	r3, [r3, #12]
 800dbe4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dbec:	f107 0308 	add.w	r3, r7, #8
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f7ff feb8 	bl	800d968 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800dbf8:	4a0b      	ldr	r2, [pc, #44]	; (800dc28 <SDMMC_CmdStopTransfer+0x74>)
 800dbfa:	210c      	movs	r1, #12
 800dbfc:	6878      	ldr	r0, [r7, #4]
 800dbfe:	f000 f9a5 	bl	800df4c <SDMMC_GetCmdResp1>
 800dc02:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	68db      	ldr	r3, [r3, #12]
 800dc08:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800dc10:	69fb      	ldr	r3, [r7, #28]
 800dc12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dc16:	d101      	bne.n	800dc1c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800dc1c:	69fb      	ldr	r3, [r7, #28]
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3720      	adds	r7, #32
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}
 800dc26:	bf00      	nop
 800dc28:	05f5e100 	.word	0x05f5e100

0800dc2c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b088      	sub	sp, #32
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800dc3a:	2307      	movs	r3, #7
 800dc3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc44:	2300      	movs	r3, #0
 800dc46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc4e:	f107 0308 	add.w	r3, r7, #8
 800dc52:	4619      	mov	r1, r3
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f7ff fe87 	bl	800d968 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800dc5a:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc5e:	2107      	movs	r1, #7
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f000 f973 	bl	800df4c <SDMMC_GetCmdResp1>
 800dc66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc68:	69fb      	ldr	r3, [r7, #28]
}
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	3720      	adds	r7, #32
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}

0800dc72 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800dc72:	b580      	push	{r7, lr}
 800dc74:	b088      	sub	sp, #32
 800dc76:	af00      	add	r7, sp, #0
 800dc78:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800dc82:	2300      	movs	r3, #0
 800dc84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc86:	2300      	movs	r3, #0
 800dc88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc90:	f107 0308 	add.w	r3, r7, #8
 800dc94:	4619      	mov	r1, r3
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f7ff fe66 	bl	800d968 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f000 fb97 	bl	800e3d0 <SDMMC_GetCmdError>
 800dca2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dca4:	69fb      	ldr	r3, [r7, #28]
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	3720      	adds	r7, #32
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}

0800dcae <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800dcae:	b580      	push	{r7, lr}
 800dcb0:	b088      	sub	sp, #32
 800dcb2:	af00      	add	r7, sp, #0
 800dcb4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800dcb6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800dcba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800dcbc:	2308      	movs	r3, #8
 800dcbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dcc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dcc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dcca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dcce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dcd0:	f107 0308 	add.w	r3, r7, #8
 800dcd4:	4619      	mov	r1, r3
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f7ff fe46 	bl	800d968 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	f000 fb29 	bl	800e334 <SDMMC_GetCmdResp7>
 800dce2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dce4:	69fb      	ldr	r3, [r7, #28]
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	3720      	adds	r7, #32
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}

0800dcee <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dcee:	b580      	push	{r7, lr}
 800dcf0:	b088      	sub	sp, #32
 800dcf2:	af00      	add	r7, sp, #0
 800dcf4:	6078      	str	r0, [r7, #4]
 800dcf6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800dcfc:	2337      	movs	r3, #55	; 0x37
 800dcfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd00:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd06:	2300      	movs	r3, #0
 800dd08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd10:	f107 0308 	add.w	r3, r7, #8
 800dd14:	4619      	mov	r1, r3
 800dd16:	6878      	ldr	r0, [r7, #4]
 800dd18:	f7ff fe26 	bl	800d968 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800dd1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd20:	2137      	movs	r1, #55	; 0x37
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f000 f912 	bl	800df4c <SDMMC_GetCmdResp1>
 800dd28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd2a:	69fb      	ldr	r3, [r7, #28]
}
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	3720      	adds	r7, #32
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}

0800dd34 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b088      	sub	sp, #32
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
 800dd3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800dd42:	2329      	movs	r3, #41	; 0x29
 800dd44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd46:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd56:	f107 0308 	add.w	r3, r7, #8
 800dd5a:	4619      	mov	r1, r3
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f7ff fe03 	bl	800d968 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f000 fa2e 	bl	800e1c4 <SDMMC_GetCmdResp3>
 800dd68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd6a:	69fb      	ldr	r3, [r7, #28]
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3720      	adds	r7, #32
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}

0800dd74 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b088      	sub	sp, #32
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
 800dd7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800dd82:	2306      	movs	r3, #6
 800dd84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd86:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd94:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd96:	f107 0308 	add.w	r3, r7, #8
 800dd9a:	4619      	mov	r1, r3
 800dd9c:	6878      	ldr	r0, [r7, #4]
 800dd9e:	f7ff fde3 	bl	800d968 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800dda2:	f241 3288 	movw	r2, #5000	; 0x1388
 800dda6:	2106      	movs	r1, #6
 800dda8:	6878      	ldr	r0, [r7, #4]
 800ddaa:	f000 f8cf 	bl	800df4c <SDMMC_GetCmdResp1>
 800ddae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddb0:	69fb      	ldr	r3, [r7, #28]
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	3720      	adds	r7, #32
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}

0800ddba <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800ddba:	b580      	push	{r7, lr}
 800ddbc:	b088      	sub	sp, #32
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ddc6:	2333      	movs	r3, #51	; 0x33
 800ddc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ddca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ddce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ddd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ddd8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ddda:	f107 0308 	add.w	r3, r7, #8
 800ddde:	4619      	mov	r1, r3
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f7ff fdc1 	bl	800d968 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800dde6:	f241 3288 	movw	r2, #5000	; 0x1388
 800ddea:	2133      	movs	r1, #51	; 0x33
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f000 f8ad 	bl	800df4c <SDMMC_GetCmdResp1>
 800ddf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddf4:	69fb      	ldr	r3, [r7, #28]
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3720      	adds	r7, #32
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}

0800ddfe <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ddfe:	b580      	push	{r7, lr}
 800de00:	b088      	sub	sp, #32
 800de02:	af00      	add	r7, sp, #0
 800de04:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800de06:	2300      	movs	r3, #0
 800de08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800de0a:	2302      	movs	r3, #2
 800de0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800de0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800de12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de14:	2300      	movs	r3, #0
 800de16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de1e:	f107 0308 	add.w	r3, r7, #8
 800de22:	4619      	mov	r1, r3
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f7ff fd9f 	bl	800d968 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f000 f980 	bl	800e130 <SDMMC_GetCmdResp2>
 800de30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de32:	69fb      	ldr	r3, [r7, #28]
}
 800de34:	4618      	mov	r0, r3
 800de36:	3720      	adds	r7, #32
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd80      	pop	{r7, pc}

0800de3c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b088      	sub	sp, #32
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800de4a:	2309      	movs	r3, #9
 800de4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800de4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800de52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de54:	2300      	movs	r3, #0
 800de56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de5e:	f107 0308 	add.w	r3, r7, #8
 800de62:	4619      	mov	r1, r3
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f7ff fd7f 	bl	800d968 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	f000 f960 	bl	800e130 <SDMMC_GetCmdResp2>
 800de70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de72:	69fb      	ldr	r3, [r7, #28]
}
 800de74:	4618      	mov	r0, r3
 800de76:	3720      	adds	r7, #32
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}

0800de7c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b088      	sub	sp, #32
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
 800de84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800de86:	2300      	movs	r3, #0
 800de88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800de8a:	2303      	movs	r3, #3
 800de8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800de92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de94:	2300      	movs	r3, #0
 800de96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de9e:	f107 0308 	add.w	r3, r7, #8
 800dea2:	4619      	mov	r1, r3
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f7ff fd5f 	bl	800d968 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800deaa:	683a      	ldr	r2, [r7, #0]
 800deac:	2103      	movs	r1, #3
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	f000 f9c8 	bl	800e244 <SDMMC_GetCmdResp6>
 800deb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800deb6:	69fb      	ldr	r3, [r7, #28]
}
 800deb8:	4618      	mov	r0, r3
 800deba:	3720      	adds	r7, #32
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}

0800dec0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b088      	sub	sp, #32
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
 800dec8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800dece:	230d      	movs	r3, #13
 800ded0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ded2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ded6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ded8:	2300      	movs	r3, #0
 800deda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dedc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dee0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dee2:	f107 0308 	add.w	r3, r7, #8
 800dee6:	4619      	mov	r1, r3
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f7ff fd3d 	bl	800d968 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800deee:	f241 3288 	movw	r2, #5000	; 0x1388
 800def2:	210d      	movs	r1, #13
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f000 f829 	bl	800df4c <SDMMC_GetCmdResp1>
 800defa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800defc:	69fb      	ldr	r3, [r7, #28]
}
 800defe:	4618      	mov	r0, r3
 800df00:	3720      	adds	r7, #32
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}

0800df06 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800df06:	b580      	push	{r7, lr}
 800df08:	b088      	sub	sp, #32
 800df0a:	af00      	add	r7, sp, #0
 800df0c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800df0e:	2300      	movs	r3, #0
 800df10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800df12:	230d      	movs	r3, #13
 800df14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800df16:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df1c:	2300      	movs	r3, #0
 800df1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800df20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800df24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800df26:	f107 0308 	add.w	r3, r7, #8
 800df2a:	4619      	mov	r1, r3
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f7ff fd1b 	bl	800d968 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800df32:	f241 3288 	movw	r2, #5000	; 0x1388
 800df36:	210d      	movs	r1, #13
 800df38:	6878      	ldr	r0, [r7, #4]
 800df3a:	f000 f807 	bl	800df4c <SDMMC_GetCmdResp1>
 800df3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df40:	69fb      	ldr	r3, [r7, #28]
}
 800df42:	4618      	mov	r0, r3
 800df44:	3720      	adds	r7, #32
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}
	...

0800df4c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b088      	sub	sp, #32
 800df50:	af00      	add	r7, sp, #0
 800df52:	60f8      	str	r0, [r7, #12]
 800df54:	460b      	mov	r3, r1
 800df56:	607a      	str	r2, [r7, #4]
 800df58:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800df5a:	4b70      	ldr	r3, [pc, #448]	; (800e11c <SDMMC_GetCmdResp1+0x1d0>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	4a70      	ldr	r2, [pc, #448]	; (800e120 <SDMMC_GetCmdResp1+0x1d4>)
 800df60:	fba2 2303 	umull	r2, r3, r2, r3
 800df64:	0a5a      	lsrs	r2, r3, #9
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	fb02 f303 	mul.w	r3, r2, r3
 800df6c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800df6e:	69fb      	ldr	r3, [r7, #28]
 800df70:	1e5a      	subs	r2, r3, #1
 800df72:	61fa      	str	r2, [r7, #28]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d102      	bne.n	800df7e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800df78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df7c:	e0c9      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df82:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800df84:	69ba      	ldr	r2, [r7, #24]
 800df86:	4b67      	ldr	r3, [pc, #412]	; (800e124 <SDMMC_GetCmdResp1+0x1d8>)
 800df88:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d0ef      	beq.n	800df6e <SDMMC_GetCmdResp1+0x22>
 800df8e:	69bb      	ldr	r3, [r7, #24]
 800df90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800df94:	2b00      	cmp	r3, #0
 800df96:	d1ea      	bne.n	800df6e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df9c:	f003 0304 	and.w	r3, r3, #4
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d004      	beq.n	800dfae <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	2204      	movs	r2, #4
 800dfa8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dfaa:	2304      	movs	r3, #4
 800dfac:	e0b1      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfb2:	f003 0301 	and.w	r3, r3, #1
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d004      	beq.n	800dfc4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	2201      	movs	r2, #1
 800dfbe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	e0a6      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	4a58      	ldr	r2, [pc, #352]	; (800e128 <SDMMC_GetCmdResp1+0x1dc>)
 800dfc8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800dfca:	68f8      	ldr	r0, [r7, #12]
 800dfcc:	f7ff fcf6 	bl	800d9bc <SDMMC_GetCommandResponse>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	461a      	mov	r2, r3
 800dfd4:	7afb      	ldrb	r3, [r7, #11]
 800dfd6:	4293      	cmp	r3, r2
 800dfd8:	d001      	beq.n	800dfde <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dfda:	2301      	movs	r3, #1
 800dfdc:	e099      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800dfde:	2100      	movs	r1, #0
 800dfe0:	68f8      	ldr	r0, [r7, #12]
 800dfe2:	f7ff fcf8 	bl	800d9d6 <SDMMC_GetResponse>
 800dfe6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800dfe8:	697a      	ldr	r2, [r7, #20]
 800dfea:	4b50      	ldr	r3, [pc, #320]	; (800e12c <SDMMC_GetCmdResp1+0x1e0>)
 800dfec:	4013      	ands	r3, r2
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d101      	bne.n	800dff6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800dff2:	2300      	movs	r3, #0
 800dff4:	e08d      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	da02      	bge.n	800e002 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800dffc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e000:	e087      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d001      	beq.n	800e010 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e00c:	2340      	movs	r3, #64	; 0x40
 800e00e:	e080      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e010:	697b      	ldr	r3, [r7, #20]
 800e012:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e016:	2b00      	cmp	r3, #0
 800e018:	d001      	beq.n	800e01e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e01a:	2380      	movs	r3, #128	; 0x80
 800e01c:	e079      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e01e:	697b      	ldr	r3, [r7, #20]
 800e020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e024:	2b00      	cmp	r3, #0
 800e026:	d002      	beq.n	800e02e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e028:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e02c:	e071      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e02e:	697b      	ldr	r3, [r7, #20]
 800e030:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e034:	2b00      	cmp	r3, #0
 800e036:	d002      	beq.n	800e03e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e038:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e03c:	e069      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e044:	2b00      	cmp	r3, #0
 800e046:	d002      	beq.n	800e04e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e04c:	e061      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e054:	2b00      	cmp	r3, #0
 800e056:	d002      	beq.n	800e05e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e058:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e05c:	e059      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e05e:	697b      	ldr	r3, [r7, #20]
 800e060:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e064:	2b00      	cmp	r3, #0
 800e066:	d002      	beq.n	800e06e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e06c:	e051      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e074:	2b00      	cmp	r3, #0
 800e076:	d002      	beq.n	800e07e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e078:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e07c:	e049      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e07e:	697b      	ldr	r3, [r7, #20]
 800e080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e084:	2b00      	cmp	r3, #0
 800e086:	d002      	beq.n	800e08e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e088:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e08c:	e041      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e094:	2b00      	cmp	r3, #0
 800e096:	d002      	beq.n	800e09e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e098:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e09c:	e039      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d002      	beq.n	800e0ae <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e0a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e0ac:	e031      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e0ae:	697b      	ldr	r3, [r7, #20]
 800e0b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d002      	beq.n	800e0be <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e0b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e0bc:	e029      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d002      	beq.n	800e0ce <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e0c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e0cc:	e021      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e0ce:	697b      	ldr	r3, [r7, #20]
 800e0d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d002      	beq.n	800e0de <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e0d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e0dc:	e019      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e0de:	697b      	ldr	r3, [r7, #20]
 800e0e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d002      	beq.n	800e0ee <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e0e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e0ec:	e011      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d002      	beq.n	800e0fe <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e0f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e0fc:	e009      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e0fe:	697b      	ldr	r3, [r7, #20]
 800e100:	f003 0308 	and.w	r3, r3, #8
 800e104:	2b00      	cmp	r3, #0
 800e106:	d002      	beq.n	800e10e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e108:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e10c:	e001      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e10e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e112:	4618      	mov	r0, r3
 800e114:	3720      	adds	r7, #32
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}
 800e11a:	bf00      	nop
 800e11c:	24000000 	.word	0x24000000
 800e120:	10624dd3 	.word	0x10624dd3
 800e124:	00200045 	.word	0x00200045
 800e128:	002000c5 	.word	0x002000c5
 800e12c:	fdffe008 	.word	0xfdffe008

0800e130 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e130:	b480      	push	{r7}
 800e132:	b085      	sub	sp, #20
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e138:	4b1f      	ldr	r3, [pc, #124]	; (800e1b8 <SDMMC_GetCmdResp2+0x88>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	4a1f      	ldr	r2, [pc, #124]	; (800e1bc <SDMMC_GetCmdResp2+0x8c>)
 800e13e:	fba2 2303 	umull	r2, r3, r2, r3
 800e142:	0a5b      	lsrs	r3, r3, #9
 800e144:	f241 3288 	movw	r2, #5000	; 0x1388
 800e148:	fb02 f303 	mul.w	r3, r2, r3
 800e14c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	1e5a      	subs	r2, r3, #1
 800e152:	60fa      	str	r2, [r7, #12]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d102      	bne.n	800e15e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e158:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e15c:	e026      	b.n	800e1ac <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e162:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d0ef      	beq.n	800e14e <SDMMC_GetCmdResp2+0x1e>
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e174:	2b00      	cmp	r3, #0
 800e176:	d1ea      	bne.n	800e14e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e17c:	f003 0304 	and.w	r3, r3, #4
 800e180:	2b00      	cmp	r3, #0
 800e182:	d004      	beq.n	800e18e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2204      	movs	r2, #4
 800e188:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e18a:	2304      	movs	r3, #4
 800e18c:	e00e      	b.n	800e1ac <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e192:	f003 0301 	and.w	r3, r3, #1
 800e196:	2b00      	cmp	r3, #0
 800e198:	d004      	beq.n	800e1a4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2201      	movs	r2, #1
 800e19e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	e003      	b.n	800e1ac <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	4a06      	ldr	r2, [pc, #24]	; (800e1c0 <SDMMC_GetCmdResp2+0x90>)
 800e1a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e1aa:	2300      	movs	r3, #0
}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	3714      	adds	r7, #20
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b6:	4770      	bx	lr
 800e1b8:	24000000 	.word	0x24000000
 800e1bc:	10624dd3 	.word	0x10624dd3
 800e1c0:	002000c5 	.word	0x002000c5

0800e1c4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	b085      	sub	sp, #20
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e1cc:	4b1a      	ldr	r3, [pc, #104]	; (800e238 <SDMMC_GetCmdResp3+0x74>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	4a1a      	ldr	r2, [pc, #104]	; (800e23c <SDMMC_GetCmdResp3+0x78>)
 800e1d2:	fba2 2303 	umull	r2, r3, r2, r3
 800e1d6:	0a5b      	lsrs	r3, r3, #9
 800e1d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e1dc:	fb02 f303 	mul.w	r3, r2, r3
 800e1e0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	1e5a      	subs	r2, r3, #1
 800e1e6:	60fa      	str	r2, [r7, #12]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d102      	bne.n	800e1f2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e1ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e1f0:	e01b      	b.n	800e22a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1f6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d0ef      	beq.n	800e1e2 <SDMMC_GetCmdResp3+0x1e>
 800e202:	68bb      	ldr	r3, [r7, #8]
 800e204:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d1ea      	bne.n	800e1e2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e210:	f003 0304 	and.w	r3, r3, #4
 800e214:	2b00      	cmp	r3, #0
 800e216:	d004      	beq.n	800e222 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2204      	movs	r2, #4
 800e21c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e21e:	2304      	movs	r3, #4
 800e220:	e003      	b.n	800e22a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	4a06      	ldr	r2, [pc, #24]	; (800e240 <SDMMC_GetCmdResp3+0x7c>)
 800e226:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e228:	2300      	movs	r3, #0
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	3714      	adds	r7, #20
 800e22e:	46bd      	mov	sp, r7
 800e230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e234:	4770      	bx	lr
 800e236:	bf00      	nop
 800e238:	24000000 	.word	0x24000000
 800e23c:	10624dd3 	.word	0x10624dd3
 800e240:	002000c5 	.word	0x002000c5

0800e244 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b088      	sub	sp, #32
 800e248:	af00      	add	r7, sp, #0
 800e24a:	60f8      	str	r0, [r7, #12]
 800e24c:	460b      	mov	r3, r1
 800e24e:	607a      	str	r2, [r7, #4]
 800e250:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e252:	4b35      	ldr	r3, [pc, #212]	; (800e328 <SDMMC_GetCmdResp6+0xe4>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	4a35      	ldr	r2, [pc, #212]	; (800e32c <SDMMC_GetCmdResp6+0xe8>)
 800e258:	fba2 2303 	umull	r2, r3, r2, r3
 800e25c:	0a5b      	lsrs	r3, r3, #9
 800e25e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e262:	fb02 f303 	mul.w	r3, r2, r3
 800e266:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e268:	69fb      	ldr	r3, [r7, #28]
 800e26a:	1e5a      	subs	r2, r3, #1
 800e26c:	61fa      	str	r2, [r7, #28]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d102      	bne.n	800e278 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e272:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e276:	e052      	b.n	800e31e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e27c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e27e:	69bb      	ldr	r3, [r7, #24]
 800e280:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e284:	2b00      	cmp	r3, #0
 800e286:	d0ef      	beq.n	800e268 <SDMMC_GetCmdResp6+0x24>
 800e288:	69bb      	ldr	r3, [r7, #24]
 800e28a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d1ea      	bne.n	800e268 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e296:	f003 0304 	and.w	r3, r3, #4
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d004      	beq.n	800e2a8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	2204      	movs	r2, #4
 800e2a2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e2a4:	2304      	movs	r3, #4
 800e2a6:	e03a      	b.n	800e31e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2ac:	f003 0301 	and.w	r3, r3, #1
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d004      	beq.n	800e2be <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	2201      	movs	r2, #1
 800e2b8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	e02f      	b.n	800e31e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e2be:	68f8      	ldr	r0, [r7, #12]
 800e2c0:	f7ff fb7c 	bl	800d9bc <SDMMC_GetCommandResponse>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	461a      	mov	r2, r3
 800e2c8:	7afb      	ldrb	r3, [r7, #11]
 800e2ca:	4293      	cmp	r3, r2
 800e2cc:	d001      	beq.n	800e2d2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e2ce:	2301      	movs	r3, #1
 800e2d0:	e025      	b.n	800e31e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	4a16      	ldr	r2, [pc, #88]	; (800e330 <SDMMC_GetCmdResp6+0xec>)
 800e2d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e2d8:	2100      	movs	r1, #0
 800e2da:	68f8      	ldr	r0, [r7, #12]
 800e2dc:	f7ff fb7b 	bl	800d9d6 <SDMMC_GetResponse>
 800e2e0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800e2e2:	697b      	ldr	r3, [r7, #20]
 800e2e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d106      	bne.n	800e2fa <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800e2ec:	697b      	ldr	r3, [r7, #20]
 800e2ee:	0c1b      	lsrs	r3, r3, #16
 800e2f0:	b29a      	uxth	r2, r3
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	e011      	b.n	800e31e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e2fa:	697b      	ldr	r3, [r7, #20]
 800e2fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e300:	2b00      	cmp	r3, #0
 800e302:	d002      	beq.n	800e30a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e304:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e308:	e009      	b.n	800e31e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e30a:	697b      	ldr	r3, [r7, #20]
 800e30c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e310:	2b00      	cmp	r3, #0
 800e312:	d002      	beq.n	800e31a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e318:	e001      	b.n	800e31e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e31a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e31e:	4618      	mov	r0, r3
 800e320:	3720      	adds	r7, #32
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}
 800e326:	bf00      	nop
 800e328:	24000000 	.word	0x24000000
 800e32c:	10624dd3 	.word	0x10624dd3
 800e330:	002000c5 	.word	0x002000c5

0800e334 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e334:	b480      	push	{r7}
 800e336:	b085      	sub	sp, #20
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e33c:	4b22      	ldr	r3, [pc, #136]	; (800e3c8 <SDMMC_GetCmdResp7+0x94>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	4a22      	ldr	r2, [pc, #136]	; (800e3cc <SDMMC_GetCmdResp7+0x98>)
 800e342:	fba2 2303 	umull	r2, r3, r2, r3
 800e346:	0a5b      	lsrs	r3, r3, #9
 800e348:	f241 3288 	movw	r2, #5000	; 0x1388
 800e34c:	fb02 f303 	mul.w	r3, r2, r3
 800e350:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	1e5a      	subs	r2, r3, #1
 800e356:	60fa      	str	r2, [r7, #12]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d102      	bne.n	800e362 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e35c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e360:	e02c      	b.n	800e3bc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e366:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d0ef      	beq.n	800e352 <SDMMC_GetCmdResp7+0x1e>
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d1ea      	bne.n	800e352 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e380:	f003 0304 	and.w	r3, r3, #4
 800e384:	2b00      	cmp	r3, #0
 800e386:	d004      	beq.n	800e392 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2204      	movs	r2, #4
 800e38c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e38e:	2304      	movs	r3, #4
 800e390:	e014      	b.n	800e3bc <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e396:	f003 0301 	and.w	r3, r3, #1
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d004      	beq.n	800e3a8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2201      	movs	r2, #1
 800e3a2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	e009      	b.n	800e3bc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d002      	beq.n	800e3ba <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2240      	movs	r2, #64	; 0x40
 800e3b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e3ba:	2300      	movs	r3, #0

}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	3714      	adds	r7, #20
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c6:	4770      	bx	lr
 800e3c8:	24000000 	.word	0x24000000
 800e3cc:	10624dd3 	.word	0x10624dd3

0800e3d0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800e3d0:	b480      	push	{r7}
 800e3d2:	b085      	sub	sp, #20
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e3d8:	4b11      	ldr	r3, [pc, #68]	; (800e420 <SDMMC_GetCmdError+0x50>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	4a11      	ldr	r2, [pc, #68]	; (800e424 <SDMMC_GetCmdError+0x54>)
 800e3de:	fba2 2303 	umull	r2, r3, r2, r3
 800e3e2:	0a5b      	lsrs	r3, r3, #9
 800e3e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3e8:	fb02 f303 	mul.w	r3, r2, r3
 800e3ec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	1e5a      	subs	r2, r3, #1
 800e3f2:	60fa      	str	r2, [r7, #12]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d102      	bne.n	800e3fe <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e3f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e3fc:	e009      	b.n	800e412 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e406:	2b00      	cmp	r3, #0
 800e408:	d0f1      	beq.n	800e3ee <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	4a06      	ldr	r2, [pc, #24]	; (800e428 <SDMMC_GetCmdError+0x58>)
 800e40e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800e410:	2300      	movs	r3, #0
}
 800e412:	4618      	mov	r0, r3
 800e414:	3714      	adds	r7, #20
 800e416:	46bd      	mov	sp, r7
 800e418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41c:	4770      	bx	lr
 800e41e:	bf00      	nop
 800e420:	24000000 	.word	0x24000000
 800e424:	10624dd3 	.word	0x10624dd3
 800e428:	002000c5 	.word	0x002000c5

0800e42c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e42c:	b084      	sub	sp, #16
 800e42e:	b580      	push	{r7, lr}
 800e430:	b084      	sub	sp, #16
 800e432:	af00      	add	r7, sp, #0
 800e434:	6078      	str	r0, [r7, #4]
 800e436:	f107 001c 	add.w	r0, r7, #28
 800e43a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e440:	2b01      	cmp	r3, #1
 800e442:	d120      	bne.n	800e486 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e448:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	68da      	ldr	r2, [r3, #12]
 800e454:	4b2a      	ldr	r3, [pc, #168]	; (800e500 <USB_CoreInit+0xd4>)
 800e456:	4013      	ands	r3, r2
 800e458:	687a      	ldr	r2, [r7, #4]
 800e45a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	68db      	ldr	r3, [r3, #12]
 800e460:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e46a:	2b01      	cmp	r3, #1
 800e46c:	d105      	bne.n	800e47a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	68db      	ldr	r3, [r3, #12]
 800e472:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e47a:	6878      	ldr	r0, [r7, #4]
 800e47c:	f001 fc04 	bl	800fc88 <USB_CoreReset>
 800e480:	4603      	mov	r3, r0
 800e482:	73fb      	strb	r3, [r7, #15]
 800e484:	e01a      	b.n	800e4bc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	68db      	ldr	r3, [r3, #12]
 800e48a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	f001 fbf8 	bl	800fc88 <USB_CoreReset>
 800e498:	4603      	mov	r3, r0
 800e49a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e49c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d106      	bne.n	800e4b0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	639a      	str	r2, [r3, #56]	; 0x38
 800e4ae:	e005      	b.n	800e4bc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4be:	2b01      	cmp	r3, #1
 800e4c0:	d116      	bne.n	800e4f0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e4c6:	b29a      	uxth	r2, r3
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e4d0:	4b0c      	ldr	r3, [pc, #48]	; (800e504 <USB_CoreInit+0xd8>)
 800e4d2:	4313      	orrs	r3, r2
 800e4d4:	687a      	ldr	r2, [r7, #4]
 800e4d6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	689b      	ldr	r3, [r3, #8]
 800e4dc:	f043 0206 	orr.w	r2, r3, #6
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	689b      	ldr	r3, [r3, #8]
 800e4e8:	f043 0220 	orr.w	r2, r3, #32
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e4f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	3710      	adds	r7, #16
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e4fc:	b004      	add	sp, #16
 800e4fe:	4770      	bx	lr
 800e500:	ffbdffbf 	.word	0xffbdffbf
 800e504:	03ee0000 	.word	0x03ee0000

0800e508 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e508:	b480      	push	{r7}
 800e50a:	b087      	sub	sp, #28
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	60f8      	str	r0, [r7, #12]
 800e510:	60b9      	str	r1, [r7, #8]
 800e512:	4613      	mov	r3, r2
 800e514:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e516:	79fb      	ldrb	r3, [r7, #7]
 800e518:	2b02      	cmp	r3, #2
 800e51a:	d165      	bne.n	800e5e8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	4a41      	ldr	r2, [pc, #260]	; (800e624 <USB_SetTurnaroundTime+0x11c>)
 800e520:	4293      	cmp	r3, r2
 800e522:	d906      	bls.n	800e532 <USB_SetTurnaroundTime+0x2a>
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	4a40      	ldr	r2, [pc, #256]	; (800e628 <USB_SetTurnaroundTime+0x120>)
 800e528:	4293      	cmp	r3, r2
 800e52a:	d202      	bcs.n	800e532 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e52c:	230f      	movs	r3, #15
 800e52e:	617b      	str	r3, [r7, #20]
 800e530:	e062      	b.n	800e5f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	4a3c      	ldr	r2, [pc, #240]	; (800e628 <USB_SetTurnaroundTime+0x120>)
 800e536:	4293      	cmp	r3, r2
 800e538:	d306      	bcc.n	800e548 <USB_SetTurnaroundTime+0x40>
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	4a3b      	ldr	r2, [pc, #236]	; (800e62c <USB_SetTurnaroundTime+0x124>)
 800e53e:	4293      	cmp	r3, r2
 800e540:	d202      	bcs.n	800e548 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e542:	230e      	movs	r3, #14
 800e544:	617b      	str	r3, [r7, #20]
 800e546:	e057      	b.n	800e5f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	4a38      	ldr	r2, [pc, #224]	; (800e62c <USB_SetTurnaroundTime+0x124>)
 800e54c:	4293      	cmp	r3, r2
 800e54e:	d306      	bcc.n	800e55e <USB_SetTurnaroundTime+0x56>
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	4a37      	ldr	r2, [pc, #220]	; (800e630 <USB_SetTurnaroundTime+0x128>)
 800e554:	4293      	cmp	r3, r2
 800e556:	d202      	bcs.n	800e55e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e558:	230d      	movs	r3, #13
 800e55a:	617b      	str	r3, [r7, #20]
 800e55c:	e04c      	b.n	800e5f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e55e:	68bb      	ldr	r3, [r7, #8]
 800e560:	4a33      	ldr	r2, [pc, #204]	; (800e630 <USB_SetTurnaroundTime+0x128>)
 800e562:	4293      	cmp	r3, r2
 800e564:	d306      	bcc.n	800e574 <USB_SetTurnaroundTime+0x6c>
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	4a32      	ldr	r2, [pc, #200]	; (800e634 <USB_SetTurnaroundTime+0x12c>)
 800e56a:	4293      	cmp	r3, r2
 800e56c:	d802      	bhi.n	800e574 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e56e:	230c      	movs	r3, #12
 800e570:	617b      	str	r3, [r7, #20]
 800e572:	e041      	b.n	800e5f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	4a2f      	ldr	r2, [pc, #188]	; (800e634 <USB_SetTurnaroundTime+0x12c>)
 800e578:	4293      	cmp	r3, r2
 800e57a:	d906      	bls.n	800e58a <USB_SetTurnaroundTime+0x82>
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	4a2e      	ldr	r2, [pc, #184]	; (800e638 <USB_SetTurnaroundTime+0x130>)
 800e580:	4293      	cmp	r3, r2
 800e582:	d802      	bhi.n	800e58a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e584:	230b      	movs	r3, #11
 800e586:	617b      	str	r3, [r7, #20]
 800e588:	e036      	b.n	800e5f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	4a2a      	ldr	r2, [pc, #168]	; (800e638 <USB_SetTurnaroundTime+0x130>)
 800e58e:	4293      	cmp	r3, r2
 800e590:	d906      	bls.n	800e5a0 <USB_SetTurnaroundTime+0x98>
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	4a29      	ldr	r2, [pc, #164]	; (800e63c <USB_SetTurnaroundTime+0x134>)
 800e596:	4293      	cmp	r3, r2
 800e598:	d802      	bhi.n	800e5a0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e59a:	230a      	movs	r3, #10
 800e59c:	617b      	str	r3, [r7, #20]
 800e59e:	e02b      	b.n	800e5f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	4a26      	ldr	r2, [pc, #152]	; (800e63c <USB_SetTurnaroundTime+0x134>)
 800e5a4:	4293      	cmp	r3, r2
 800e5a6:	d906      	bls.n	800e5b6 <USB_SetTurnaroundTime+0xae>
 800e5a8:	68bb      	ldr	r3, [r7, #8]
 800e5aa:	4a25      	ldr	r2, [pc, #148]	; (800e640 <USB_SetTurnaroundTime+0x138>)
 800e5ac:	4293      	cmp	r3, r2
 800e5ae:	d202      	bcs.n	800e5b6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e5b0:	2309      	movs	r3, #9
 800e5b2:	617b      	str	r3, [r7, #20]
 800e5b4:	e020      	b.n	800e5f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	4a21      	ldr	r2, [pc, #132]	; (800e640 <USB_SetTurnaroundTime+0x138>)
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	d306      	bcc.n	800e5cc <USB_SetTurnaroundTime+0xc4>
 800e5be:	68bb      	ldr	r3, [r7, #8]
 800e5c0:	4a20      	ldr	r2, [pc, #128]	; (800e644 <USB_SetTurnaroundTime+0x13c>)
 800e5c2:	4293      	cmp	r3, r2
 800e5c4:	d802      	bhi.n	800e5cc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e5c6:	2308      	movs	r3, #8
 800e5c8:	617b      	str	r3, [r7, #20]
 800e5ca:	e015      	b.n	800e5f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	4a1d      	ldr	r2, [pc, #116]	; (800e644 <USB_SetTurnaroundTime+0x13c>)
 800e5d0:	4293      	cmp	r3, r2
 800e5d2:	d906      	bls.n	800e5e2 <USB_SetTurnaroundTime+0xda>
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	4a1c      	ldr	r2, [pc, #112]	; (800e648 <USB_SetTurnaroundTime+0x140>)
 800e5d8:	4293      	cmp	r3, r2
 800e5da:	d202      	bcs.n	800e5e2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e5dc:	2307      	movs	r3, #7
 800e5de:	617b      	str	r3, [r7, #20]
 800e5e0:	e00a      	b.n	800e5f8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e5e2:	2306      	movs	r3, #6
 800e5e4:	617b      	str	r3, [r7, #20]
 800e5e6:	e007      	b.n	800e5f8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e5e8:	79fb      	ldrb	r3, [r7, #7]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d102      	bne.n	800e5f4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e5ee:	2309      	movs	r3, #9
 800e5f0:	617b      	str	r3, [r7, #20]
 800e5f2:	e001      	b.n	800e5f8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e5f4:	2309      	movs	r3, #9
 800e5f6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	68db      	ldr	r3, [r3, #12]
 800e5fc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	68da      	ldr	r2, [r3, #12]
 800e608:	697b      	ldr	r3, [r7, #20]
 800e60a:	029b      	lsls	r3, r3, #10
 800e60c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800e610:	431a      	orrs	r2, r3
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e616:	2300      	movs	r3, #0
}
 800e618:	4618      	mov	r0, r3
 800e61a:	371c      	adds	r7, #28
 800e61c:	46bd      	mov	sp, r7
 800e61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e622:	4770      	bx	lr
 800e624:	00d8acbf 	.word	0x00d8acbf
 800e628:	00e4e1c0 	.word	0x00e4e1c0
 800e62c:	00f42400 	.word	0x00f42400
 800e630:	01067380 	.word	0x01067380
 800e634:	011a499f 	.word	0x011a499f
 800e638:	01312cff 	.word	0x01312cff
 800e63c:	014ca43f 	.word	0x014ca43f
 800e640:	016e3600 	.word	0x016e3600
 800e644:	01a6ab1f 	.word	0x01a6ab1f
 800e648:	01e84800 	.word	0x01e84800

0800e64c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e64c:	b480      	push	{r7}
 800e64e:	b083      	sub	sp, #12
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	689b      	ldr	r3, [r3, #8]
 800e658:	f043 0201 	orr.w	r2, r3, #1
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e660:	2300      	movs	r3, #0
}
 800e662:	4618      	mov	r0, r3
 800e664:	370c      	adds	r7, #12
 800e666:	46bd      	mov	sp, r7
 800e668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66c:	4770      	bx	lr

0800e66e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e66e:	b480      	push	{r7}
 800e670:	b083      	sub	sp, #12
 800e672:	af00      	add	r7, sp, #0
 800e674:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	689b      	ldr	r3, [r3, #8]
 800e67a:	f023 0201 	bic.w	r2, r3, #1
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e682:	2300      	movs	r3, #0
}
 800e684:	4618      	mov	r0, r3
 800e686:	370c      	adds	r7, #12
 800e688:	46bd      	mov	sp, r7
 800e68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68e:	4770      	bx	lr

0800e690 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b084      	sub	sp, #16
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
 800e698:	460b      	mov	r3, r1
 800e69a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e69c:	2300      	movs	r3, #0
 800e69e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	68db      	ldr	r3, [r3, #12]
 800e6a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e6ac:	78fb      	ldrb	r3, [r7, #3]
 800e6ae:	2b01      	cmp	r3, #1
 800e6b0:	d115      	bne.n	800e6de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	68db      	ldr	r3, [r3, #12]
 800e6b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e6be:	2001      	movs	r0, #1
 800e6c0:	f7f2 fd4e 	bl	8001160 <HAL_Delay>
      ms++;
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	3301      	adds	r3, #1
 800e6c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f001 fa4b 	bl	800fb66 <USB_GetMode>
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	2b01      	cmp	r3, #1
 800e6d4:	d01e      	beq.n	800e714 <USB_SetCurrentMode+0x84>
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	2b31      	cmp	r3, #49	; 0x31
 800e6da:	d9f0      	bls.n	800e6be <USB_SetCurrentMode+0x2e>
 800e6dc:	e01a      	b.n	800e714 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e6de:	78fb      	ldrb	r3, [r7, #3]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d115      	bne.n	800e710 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	68db      	ldr	r3, [r3, #12]
 800e6e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e6f0:	2001      	movs	r0, #1
 800e6f2:	f7f2 fd35 	bl	8001160 <HAL_Delay>
      ms++;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	3301      	adds	r3, #1
 800e6fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f001 fa32 	bl	800fb66 <USB_GetMode>
 800e702:	4603      	mov	r3, r0
 800e704:	2b00      	cmp	r3, #0
 800e706:	d005      	beq.n	800e714 <USB_SetCurrentMode+0x84>
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	2b31      	cmp	r3, #49	; 0x31
 800e70c:	d9f0      	bls.n	800e6f0 <USB_SetCurrentMode+0x60>
 800e70e:	e001      	b.n	800e714 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e710:	2301      	movs	r3, #1
 800e712:	e005      	b.n	800e720 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	2b32      	cmp	r3, #50	; 0x32
 800e718:	d101      	bne.n	800e71e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e71a:	2301      	movs	r3, #1
 800e71c:	e000      	b.n	800e720 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e71e:	2300      	movs	r3, #0
}
 800e720:	4618      	mov	r0, r3
 800e722:	3710      	adds	r7, #16
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}

0800e728 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e728:	b084      	sub	sp, #16
 800e72a:	b580      	push	{r7, lr}
 800e72c:	b086      	sub	sp, #24
 800e72e:	af00      	add	r7, sp, #0
 800e730:	6078      	str	r0, [r7, #4]
 800e732:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e73a:	2300      	movs	r3, #0
 800e73c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e742:	2300      	movs	r3, #0
 800e744:	613b      	str	r3, [r7, #16]
 800e746:	e009      	b.n	800e75c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e748:	687a      	ldr	r2, [r7, #4]
 800e74a:	693b      	ldr	r3, [r7, #16]
 800e74c:	3340      	adds	r3, #64	; 0x40
 800e74e:	009b      	lsls	r3, r3, #2
 800e750:	4413      	add	r3, r2
 800e752:	2200      	movs	r2, #0
 800e754:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	3301      	adds	r3, #1
 800e75a:	613b      	str	r3, [r7, #16]
 800e75c:	693b      	ldr	r3, [r7, #16]
 800e75e:	2b0e      	cmp	r3, #14
 800e760:	d9f2      	bls.n	800e748 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e764:	2b00      	cmp	r3, #0
 800e766:	d11c      	bne.n	800e7a2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e76e:	685b      	ldr	r3, [r3, #4]
 800e770:	68fa      	ldr	r2, [r7, #12]
 800e772:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e776:	f043 0302 	orr.w	r3, r3, #2
 800e77a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e780:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	601a      	str	r2, [r3, #0]
 800e7a0:	e005      	b.n	800e7ae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e7b4:	461a      	mov	r2, r3
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7c0:	4619      	mov	r1, r3
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7c8:	461a      	mov	r2, r3
 800e7ca:	680b      	ldr	r3, [r1, #0]
 800e7cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7d0:	2b01      	cmp	r3, #1
 800e7d2:	d10c      	bne.n	800e7ee <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d104      	bne.n	800e7e4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e7da:	2100      	movs	r1, #0
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	f000 f965 	bl	800eaac <USB_SetDevSpeed>
 800e7e2:	e008      	b.n	800e7f6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e7e4:	2101      	movs	r1, #1
 800e7e6:	6878      	ldr	r0, [r7, #4]
 800e7e8:	f000 f960 	bl	800eaac <USB_SetDevSpeed>
 800e7ec:	e003      	b.n	800e7f6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e7ee:	2103      	movs	r1, #3
 800e7f0:	6878      	ldr	r0, [r7, #4]
 800e7f2:	f000 f95b 	bl	800eaac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e7f6:	2110      	movs	r1, #16
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f000 f8f3 	bl	800e9e4 <USB_FlushTxFifo>
 800e7fe:	4603      	mov	r3, r0
 800e800:	2b00      	cmp	r3, #0
 800e802:	d001      	beq.n	800e808 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800e804:	2301      	movs	r3, #1
 800e806:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f000 f91f 	bl	800ea4c <USB_FlushRxFifo>
 800e80e:	4603      	mov	r3, r0
 800e810:	2b00      	cmp	r3, #0
 800e812:	d001      	beq.n	800e818 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800e814:	2301      	movs	r3, #1
 800e816:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e81e:	461a      	mov	r2, r3
 800e820:	2300      	movs	r3, #0
 800e822:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e82a:	461a      	mov	r2, r3
 800e82c:	2300      	movs	r3, #0
 800e82e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e836:	461a      	mov	r2, r3
 800e838:	2300      	movs	r3, #0
 800e83a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e83c:	2300      	movs	r3, #0
 800e83e:	613b      	str	r3, [r7, #16]
 800e840:	e043      	b.n	800e8ca <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e842:	693b      	ldr	r3, [r7, #16]
 800e844:	015a      	lsls	r2, r3, #5
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	4413      	add	r3, r2
 800e84a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e854:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e858:	d118      	bne.n	800e88c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800e85a:	693b      	ldr	r3, [r7, #16]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d10a      	bne.n	800e876 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	015a      	lsls	r2, r3, #5
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	4413      	add	r3, r2
 800e868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e86c:	461a      	mov	r2, r3
 800e86e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e872:	6013      	str	r3, [r2, #0]
 800e874:	e013      	b.n	800e89e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e876:	693b      	ldr	r3, [r7, #16]
 800e878:	015a      	lsls	r2, r3, #5
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	4413      	add	r3, r2
 800e87e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e882:	461a      	mov	r2, r3
 800e884:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e888:	6013      	str	r3, [r2, #0]
 800e88a:	e008      	b.n	800e89e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e88c:	693b      	ldr	r3, [r7, #16]
 800e88e:	015a      	lsls	r2, r3, #5
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	4413      	add	r3, r2
 800e894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e898:	461a      	mov	r2, r3
 800e89a:	2300      	movs	r3, #0
 800e89c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e89e:	693b      	ldr	r3, [r7, #16]
 800e8a0:	015a      	lsls	r2, r3, #5
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	4413      	add	r3, r2
 800e8a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8aa:	461a      	mov	r2, r3
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e8b0:	693b      	ldr	r3, [r7, #16]
 800e8b2:	015a      	lsls	r2, r3, #5
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	4413      	add	r3, r2
 800e8b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8bc:	461a      	mov	r2, r3
 800e8be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e8c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e8c4:	693b      	ldr	r3, [r7, #16]
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	613b      	str	r3, [r7, #16]
 800e8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8cc:	693a      	ldr	r2, [r7, #16]
 800e8ce:	429a      	cmp	r2, r3
 800e8d0:	d3b7      	bcc.n	800e842 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	613b      	str	r3, [r7, #16]
 800e8d6:	e043      	b.n	800e960 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e8d8:	693b      	ldr	r3, [r7, #16]
 800e8da:	015a      	lsls	r2, r3, #5
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	4413      	add	r3, r2
 800e8e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e8ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e8ee:	d118      	bne.n	800e922 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800e8f0:	693b      	ldr	r3, [r7, #16]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d10a      	bne.n	800e90c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e8f6:	693b      	ldr	r3, [r7, #16]
 800e8f8:	015a      	lsls	r2, r3, #5
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	4413      	add	r3, r2
 800e8fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e902:	461a      	mov	r2, r3
 800e904:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e908:	6013      	str	r3, [r2, #0]
 800e90a:	e013      	b.n	800e934 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e90c:	693b      	ldr	r3, [r7, #16]
 800e90e:	015a      	lsls	r2, r3, #5
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	4413      	add	r3, r2
 800e914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e918:	461a      	mov	r2, r3
 800e91a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e91e:	6013      	str	r3, [r2, #0]
 800e920:	e008      	b.n	800e934 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	015a      	lsls	r2, r3, #5
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	4413      	add	r3, r2
 800e92a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e92e:	461a      	mov	r2, r3
 800e930:	2300      	movs	r3, #0
 800e932:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e934:	693b      	ldr	r3, [r7, #16]
 800e936:	015a      	lsls	r2, r3, #5
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	4413      	add	r3, r2
 800e93c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e940:	461a      	mov	r2, r3
 800e942:	2300      	movs	r3, #0
 800e944:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e946:	693b      	ldr	r3, [r7, #16]
 800e948:	015a      	lsls	r2, r3, #5
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	4413      	add	r3, r2
 800e94e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e952:	461a      	mov	r2, r3
 800e954:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e958:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	3301      	adds	r3, #1
 800e95e:	613b      	str	r3, [r7, #16]
 800e960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e962:	693a      	ldr	r2, [r7, #16]
 800e964:	429a      	cmp	r2, r3
 800e966:	d3b7      	bcc.n	800e8d8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e96e:	691b      	ldr	r3, [r3, #16]
 800e970:	68fa      	ldr	r2, [r7, #12]
 800e972:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e976:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e97a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2200      	movs	r2, #0
 800e980:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e988:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d105      	bne.n	800e99c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	699b      	ldr	r3, [r3, #24]
 800e994:	f043 0210 	orr.w	r2, r3, #16
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	699a      	ldr	r2, [r3, #24]
 800e9a0:	4b0e      	ldr	r3, [pc, #56]	; (800e9dc <USB_DevInit+0x2b4>)
 800e9a2:	4313      	orrs	r3, r2
 800e9a4:	687a      	ldr	r2, [r7, #4]
 800e9a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e9a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d005      	beq.n	800e9ba <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	699b      	ldr	r3, [r3, #24]
 800e9b2:	f043 0208 	orr.w	r2, r3, #8
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e9ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9bc:	2b01      	cmp	r3, #1
 800e9be:	d105      	bne.n	800e9cc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	699a      	ldr	r2, [r3, #24]
 800e9c4:	4b06      	ldr	r3, [pc, #24]	; (800e9e0 <USB_DevInit+0x2b8>)
 800e9c6:	4313      	orrs	r3, r2
 800e9c8:	687a      	ldr	r2, [r7, #4]
 800e9ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e9cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	3718      	adds	r7, #24
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e9d8:	b004      	add	sp, #16
 800e9da:	4770      	bx	lr
 800e9dc:	803c3800 	.word	0x803c3800
 800e9e0:	40000004 	.word	0x40000004

0800e9e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e9e4:	b480      	push	{r7}
 800e9e6:	b085      	sub	sp, #20
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
 800e9ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	3301      	adds	r3, #1
 800e9f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	4a13      	ldr	r2, [pc, #76]	; (800ea48 <USB_FlushTxFifo+0x64>)
 800e9fc:	4293      	cmp	r3, r2
 800e9fe:	d901      	bls.n	800ea04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ea00:	2303      	movs	r3, #3
 800ea02:	e01b      	b.n	800ea3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	691b      	ldr	r3, [r3, #16]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	daf2      	bge.n	800e9f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	019b      	lsls	r3, r3, #6
 800ea14:	f043 0220 	orr.w	r2, r3, #32
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	3301      	adds	r3, #1
 800ea20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	4a08      	ldr	r2, [pc, #32]	; (800ea48 <USB_FlushTxFifo+0x64>)
 800ea26:	4293      	cmp	r3, r2
 800ea28:	d901      	bls.n	800ea2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ea2a:	2303      	movs	r3, #3
 800ea2c:	e006      	b.n	800ea3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	691b      	ldr	r3, [r3, #16]
 800ea32:	f003 0320 	and.w	r3, r3, #32
 800ea36:	2b20      	cmp	r3, #32
 800ea38:	d0f0      	beq.n	800ea1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ea3a:	2300      	movs	r3, #0
}
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	3714      	adds	r7, #20
 800ea40:	46bd      	mov	sp, r7
 800ea42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea46:	4770      	bx	lr
 800ea48:	00030d40 	.word	0x00030d40

0800ea4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ea4c:	b480      	push	{r7}
 800ea4e:	b085      	sub	sp, #20
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ea54:	2300      	movs	r3, #0
 800ea56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	3301      	adds	r3, #1
 800ea5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	4a11      	ldr	r2, [pc, #68]	; (800eaa8 <USB_FlushRxFifo+0x5c>)
 800ea62:	4293      	cmp	r3, r2
 800ea64:	d901      	bls.n	800ea6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ea66:	2303      	movs	r3, #3
 800ea68:	e018      	b.n	800ea9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	691b      	ldr	r3, [r3, #16]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	daf2      	bge.n	800ea58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ea72:	2300      	movs	r3, #0
 800ea74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	2210      	movs	r2, #16
 800ea7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	3301      	adds	r3, #1
 800ea80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	4a08      	ldr	r2, [pc, #32]	; (800eaa8 <USB_FlushRxFifo+0x5c>)
 800ea86:	4293      	cmp	r3, r2
 800ea88:	d901      	bls.n	800ea8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ea8a:	2303      	movs	r3, #3
 800ea8c:	e006      	b.n	800ea9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	691b      	ldr	r3, [r3, #16]
 800ea92:	f003 0310 	and.w	r3, r3, #16
 800ea96:	2b10      	cmp	r3, #16
 800ea98:	d0f0      	beq.n	800ea7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ea9a:	2300      	movs	r3, #0
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	3714      	adds	r7, #20
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa6:	4770      	bx	lr
 800eaa8:	00030d40 	.word	0x00030d40

0800eaac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800eaac:	b480      	push	{r7}
 800eaae:	b085      	sub	sp, #20
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
 800eab4:	460b      	mov	r3, r1
 800eab6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eac2:	681a      	ldr	r2, [r3, #0]
 800eac4:	78fb      	ldrb	r3, [r7, #3]
 800eac6:	68f9      	ldr	r1, [r7, #12]
 800eac8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eacc:	4313      	orrs	r3, r2
 800eace:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ead0:	2300      	movs	r3, #0
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	3714      	adds	r7, #20
 800ead6:	46bd      	mov	sp, r7
 800ead8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eadc:	4770      	bx	lr

0800eade <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800eade:	b480      	push	{r7}
 800eae0:	b087      	sub	sp, #28
 800eae2:	af00      	add	r7, sp, #0
 800eae4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800eaea:	693b      	ldr	r3, [r7, #16]
 800eaec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eaf0:	689b      	ldr	r3, [r3, #8]
 800eaf2:	f003 0306 	and.w	r3, r3, #6
 800eaf6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d102      	bne.n	800eb04 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800eafe:	2300      	movs	r3, #0
 800eb00:	75fb      	strb	r3, [r7, #23]
 800eb02:	e00a      	b.n	800eb1a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	2b02      	cmp	r3, #2
 800eb08:	d002      	beq.n	800eb10 <USB_GetDevSpeed+0x32>
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	2b06      	cmp	r3, #6
 800eb0e:	d102      	bne.n	800eb16 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800eb10:	2302      	movs	r3, #2
 800eb12:	75fb      	strb	r3, [r7, #23]
 800eb14:	e001      	b.n	800eb1a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800eb16:	230f      	movs	r3, #15
 800eb18:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800eb1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	371c      	adds	r7, #28
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr

0800eb28 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b085      	sub	sp, #20
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	781b      	ldrb	r3, [r3, #0]
 800eb3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800eb3c:	683b      	ldr	r3, [r7, #0]
 800eb3e:	785b      	ldrb	r3, [r3, #1]
 800eb40:	2b01      	cmp	r3, #1
 800eb42:	d139      	bne.n	800ebb8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb4a:	69da      	ldr	r2, [r3, #28]
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	781b      	ldrb	r3, [r3, #0]
 800eb50:	f003 030f 	and.w	r3, r3, #15
 800eb54:	2101      	movs	r1, #1
 800eb56:	fa01 f303 	lsl.w	r3, r1, r3
 800eb5a:	b29b      	uxth	r3, r3
 800eb5c:	68f9      	ldr	r1, [r7, #12]
 800eb5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eb62:	4313      	orrs	r3, r2
 800eb64:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	015a      	lsls	r2, r3, #5
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	4413      	add	r3, r2
 800eb6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d153      	bne.n	800ec24 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800eb7c:	68bb      	ldr	r3, [r7, #8]
 800eb7e:	015a      	lsls	r2, r3, #5
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	4413      	add	r3, r2
 800eb84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb88:	681a      	ldr	r2, [r3, #0]
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	68db      	ldr	r3, [r3, #12]
 800eb8e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	791b      	ldrb	r3, [r3, #4]
 800eb96:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800eb98:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	059b      	lsls	r3, r3, #22
 800eb9e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800eba0:	431a      	orrs	r2, r3
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	0159      	lsls	r1, r3, #5
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	440b      	add	r3, r1
 800ebaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebae:	4619      	mov	r1, r3
 800ebb0:	4b20      	ldr	r3, [pc, #128]	; (800ec34 <USB_ActivateEndpoint+0x10c>)
 800ebb2:	4313      	orrs	r3, r2
 800ebb4:	600b      	str	r3, [r1, #0]
 800ebb6:	e035      	b.n	800ec24 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebbe:	69da      	ldr	r2, [r3, #28]
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	781b      	ldrb	r3, [r3, #0]
 800ebc4:	f003 030f 	and.w	r3, r3, #15
 800ebc8:	2101      	movs	r1, #1
 800ebca:	fa01 f303 	lsl.w	r3, r1, r3
 800ebce:	041b      	lsls	r3, r3, #16
 800ebd0:	68f9      	ldr	r1, [r7, #12]
 800ebd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ebd6:	4313      	orrs	r3, r2
 800ebd8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	015a      	lsls	r2, r3, #5
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	4413      	add	r3, r2
 800ebe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d119      	bne.n	800ec24 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ebf0:	68bb      	ldr	r3, [r7, #8]
 800ebf2:	015a      	lsls	r2, r3, #5
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	4413      	add	r3, r2
 800ebf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebfc:	681a      	ldr	r2, [r3, #0]
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	68db      	ldr	r3, [r3, #12]
 800ec02:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	791b      	ldrb	r3, [r3, #4]
 800ec0a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ec0c:	430b      	orrs	r3, r1
 800ec0e:	431a      	orrs	r2, r3
 800ec10:	68bb      	ldr	r3, [r7, #8]
 800ec12:	0159      	lsls	r1, r3, #5
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	440b      	add	r3, r1
 800ec18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec1c:	4619      	mov	r1, r3
 800ec1e:	4b05      	ldr	r3, [pc, #20]	; (800ec34 <USB_ActivateEndpoint+0x10c>)
 800ec20:	4313      	orrs	r3, r2
 800ec22:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ec24:	2300      	movs	r3, #0
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	3714      	adds	r7, #20
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec30:	4770      	bx	lr
 800ec32:	bf00      	nop
 800ec34:	10008000 	.word	0x10008000

0800ec38 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ec38:	b480      	push	{r7}
 800ec3a:	b085      	sub	sp, #20
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
 800ec40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	781b      	ldrb	r3, [r3, #0]
 800ec4a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	785b      	ldrb	r3, [r3, #1]
 800ec50:	2b01      	cmp	r3, #1
 800ec52:	d161      	bne.n	800ed18 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	015a      	lsls	r2, r3, #5
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	4413      	add	r3, r2
 800ec5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ec66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ec6a:	d11f      	bne.n	800ecac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ec6c:	68bb      	ldr	r3, [r7, #8]
 800ec6e:	015a      	lsls	r2, r3, #5
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	4413      	add	r3, r2
 800ec74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	68ba      	ldr	r2, [r7, #8]
 800ec7c:	0151      	lsls	r1, r2, #5
 800ec7e:	68fa      	ldr	r2, [r7, #12]
 800ec80:	440a      	add	r2, r1
 800ec82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ec8a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	015a      	lsls	r2, r3, #5
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	4413      	add	r3, r2
 800ec94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	68ba      	ldr	r2, [r7, #8]
 800ec9c:	0151      	lsls	r1, r2, #5
 800ec9e:	68fa      	ldr	r2, [r7, #12]
 800eca0:	440a      	add	r2, r1
 800eca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eca6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ecaa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	781b      	ldrb	r3, [r3, #0]
 800ecb8:	f003 030f 	and.w	r3, r3, #15
 800ecbc:	2101      	movs	r1, #1
 800ecbe:	fa01 f303 	lsl.w	r3, r1, r3
 800ecc2:	b29b      	uxth	r3, r3
 800ecc4:	43db      	mvns	r3, r3
 800ecc6:	68f9      	ldr	r1, [r7, #12]
 800ecc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eccc:	4013      	ands	r3, r2
 800ecce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecd6:	69da      	ldr	r2, [r3, #28]
 800ecd8:	683b      	ldr	r3, [r7, #0]
 800ecda:	781b      	ldrb	r3, [r3, #0]
 800ecdc:	f003 030f 	and.w	r3, r3, #15
 800ece0:	2101      	movs	r1, #1
 800ece2:	fa01 f303 	lsl.w	r3, r1, r3
 800ece6:	b29b      	uxth	r3, r3
 800ece8:	43db      	mvns	r3, r3
 800ecea:	68f9      	ldr	r1, [r7, #12]
 800ecec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ecf0:	4013      	ands	r3, r2
 800ecf2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ecf4:	68bb      	ldr	r3, [r7, #8]
 800ecf6:	015a      	lsls	r2, r3, #5
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	4413      	add	r3, r2
 800ecfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed00:	681a      	ldr	r2, [r3, #0]
 800ed02:	68bb      	ldr	r3, [r7, #8]
 800ed04:	0159      	lsls	r1, r3, #5
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	440b      	add	r3, r1
 800ed0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed0e:	4619      	mov	r1, r3
 800ed10:	4b35      	ldr	r3, [pc, #212]	; (800ede8 <USB_DeactivateEndpoint+0x1b0>)
 800ed12:	4013      	ands	r3, r2
 800ed14:	600b      	str	r3, [r1, #0]
 800ed16:	e060      	b.n	800edda <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ed18:	68bb      	ldr	r3, [r7, #8]
 800ed1a:	015a      	lsls	r2, r3, #5
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	4413      	add	r3, r2
 800ed20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ed2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ed2e:	d11f      	bne.n	800ed70 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ed30:	68bb      	ldr	r3, [r7, #8]
 800ed32:	015a      	lsls	r2, r3, #5
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	4413      	add	r3, r2
 800ed38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	68ba      	ldr	r2, [r7, #8]
 800ed40:	0151      	lsls	r1, r2, #5
 800ed42:	68fa      	ldr	r2, [r7, #12]
 800ed44:	440a      	add	r2, r1
 800ed46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ed4e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ed50:	68bb      	ldr	r3, [r7, #8]
 800ed52:	015a      	lsls	r2, r3, #5
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	4413      	add	r3, r2
 800ed58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	68ba      	ldr	r2, [r7, #8]
 800ed60:	0151      	lsls	r1, r2, #5
 800ed62:	68fa      	ldr	r2, [r7, #12]
 800ed64:	440a      	add	r2, r1
 800ed66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ed6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	781b      	ldrb	r3, [r3, #0]
 800ed7c:	f003 030f 	and.w	r3, r3, #15
 800ed80:	2101      	movs	r1, #1
 800ed82:	fa01 f303 	lsl.w	r3, r1, r3
 800ed86:	041b      	lsls	r3, r3, #16
 800ed88:	43db      	mvns	r3, r3
 800ed8a:	68f9      	ldr	r1, [r7, #12]
 800ed8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ed90:	4013      	ands	r3, r2
 800ed92:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed9a:	69da      	ldr	r2, [r3, #28]
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	781b      	ldrb	r3, [r3, #0]
 800eda0:	f003 030f 	and.w	r3, r3, #15
 800eda4:	2101      	movs	r1, #1
 800eda6:	fa01 f303 	lsl.w	r3, r1, r3
 800edaa:	041b      	lsls	r3, r3, #16
 800edac:	43db      	mvns	r3, r3
 800edae:	68f9      	ldr	r1, [r7, #12]
 800edb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800edb4:	4013      	ands	r3, r2
 800edb6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	015a      	lsls	r2, r3, #5
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	4413      	add	r3, r2
 800edc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edc4:	681a      	ldr	r2, [r3, #0]
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	0159      	lsls	r1, r3, #5
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	440b      	add	r3, r1
 800edce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edd2:	4619      	mov	r1, r3
 800edd4:	4b05      	ldr	r3, [pc, #20]	; (800edec <USB_DeactivateEndpoint+0x1b4>)
 800edd6:	4013      	ands	r3, r2
 800edd8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800edda:	2300      	movs	r3, #0
}
 800eddc:	4618      	mov	r0, r3
 800edde:	3714      	adds	r7, #20
 800ede0:	46bd      	mov	sp, r7
 800ede2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede6:	4770      	bx	lr
 800ede8:	ec337800 	.word	0xec337800
 800edec:	eff37800 	.word	0xeff37800

0800edf0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b08a      	sub	sp, #40	; 0x28
 800edf4:	af02      	add	r7, sp, #8
 800edf6:	60f8      	str	r0, [r7, #12]
 800edf8:	60b9      	str	r1, [r7, #8]
 800edfa:	4613      	mov	r3, r2
 800edfc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ee02:	68bb      	ldr	r3, [r7, #8]
 800ee04:	781b      	ldrb	r3, [r3, #0]
 800ee06:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	785b      	ldrb	r3, [r3, #1]
 800ee0c:	2b01      	cmp	r3, #1
 800ee0e:	f040 8163 	bne.w	800f0d8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	699b      	ldr	r3, [r3, #24]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d132      	bne.n	800ee80 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ee1a:	69bb      	ldr	r3, [r7, #24]
 800ee1c:	015a      	lsls	r2, r3, #5
 800ee1e:	69fb      	ldr	r3, [r7, #28]
 800ee20:	4413      	add	r3, r2
 800ee22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee26:	691a      	ldr	r2, [r3, #16]
 800ee28:	69bb      	ldr	r3, [r7, #24]
 800ee2a:	0159      	lsls	r1, r3, #5
 800ee2c:	69fb      	ldr	r3, [r7, #28]
 800ee2e:	440b      	add	r3, r1
 800ee30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee34:	4619      	mov	r1, r3
 800ee36:	4ba5      	ldr	r3, [pc, #660]	; (800f0cc <USB_EPStartXfer+0x2dc>)
 800ee38:	4013      	ands	r3, r2
 800ee3a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ee3c:	69bb      	ldr	r3, [r7, #24]
 800ee3e:	015a      	lsls	r2, r3, #5
 800ee40:	69fb      	ldr	r3, [r7, #28]
 800ee42:	4413      	add	r3, r2
 800ee44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee48:	691b      	ldr	r3, [r3, #16]
 800ee4a:	69ba      	ldr	r2, [r7, #24]
 800ee4c:	0151      	lsls	r1, r2, #5
 800ee4e:	69fa      	ldr	r2, [r7, #28]
 800ee50:	440a      	add	r2, r1
 800ee52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ee5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ee5c:	69bb      	ldr	r3, [r7, #24]
 800ee5e:	015a      	lsls	r2, r3, #5
 800ee60:	69fb      	ldr	r3, [r7, #28]
 800ee62:	4413      	add	r3, r2
 800ee64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee68:	691a      	ldr	r2, [r3, #16]
 800ee6a:	69bb      	ldr	r3, [r7, #24]
 800ee6c:	0159      	lsls	r1, r3, #5
 800ee6e:	69fb      	ldr	r3, [r7, #28]
 800ee70:	440b      	add	r3, r1
 800ee72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee76:	4619      	mov	r1, r3
 800ee78:	4b95      	ldr	r3, [pc, #596]	; (800f0d0 <USB_EPStartXfer+0x2e0>)
 800ee7a:	4013      	ands	r3, r2
 800ee7c:	610b      	str	r3, [r1, #16]
 800ee7e:	e074      	b.n	800ef6a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ee80:	69bb      	ldr	r3, [r7, #24]
 800ee82:	015a      	lsls	r2, r3, #5
 800ee84:	69fb      	ldr	r3, [r7, #28]
 800ee86:	4413      	add	r3, r2
 800ee88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee8c:	691a      	ldr	r2, [r3, #16]
 800ee8e:	69bb      	ldr	r3, [r7, #24]
 800ee90:	0159      	lsls	r1, r3, #5
 800ee92:	69fb      	ldr	r3, [r7, #28]
 800ee94:	440b      	add	r3, r1
 800ee96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee9a:	4619      	mov	r1, r3
 800ee9c:	4b8c      	ldr	r3, [pc, #560]	; (800f0d0 <USB_EPStartXfer+0x2e0>)
 800ee9e:	4013      	ands	r3, r2
 800eea0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800eea2:	69bb      	ldr	r3, [r7, #24]
 800eea4:	015a      	lsls	r2, r3, #5
 800eea6:	69fb      	ldr	r3, [r7, #28]
 800eea8:	4413      	add	r3, r2
 800eeaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eeae:	691a      	ldr	r2, [r3, #16]
 800eeb0:	69bb      	ldr	r3, [r7, #24]
 800eeb2:	0159      	lsls	r1, r3, #5
 800eeb4:	69fb      	ldr	r3, [r7, #28]
 800eeb6:	440b      	add	r3, r1
 800eeb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eebc:	4619      	mov	r1, r3
 800eebe:	4b83      	ldr	r3, [pc, #524]	; (800f0cc <USB_EPStartXfer+0x2dc>)
 800eec0:	4013      	ands	r3, r2
 800eec2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800eec4:	69bb      	ldr	r3, [r7, #24]
 800eec6:	015a      	lsls	r2, r3, #5
 800eec8:	69fb      	ldr	r3, [r7, #28]
 800eeca:	4413      	add	r3, r2
 800eecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eed0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800eed2:	68bb      	ldr	r3, [r7, #8]
 800eed4:	6999      	ldr	r1, [r3, #24]
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	68db      	ldr	r3, [r3, #12]
 800eeda:	440b      	add	r3, r1
 800eedc:	1e59      	subs	r1, r3, #1
 800eede:	68bb      	ldr	r3, [r7, #8]
 800eee0:	68db      	ldr	r3, [r3, #12]
 800eee2:	fbb1 f3f3 	udiv	r3, r1, r3
 800eee6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800eee8:	4b7a      	ldr	r3, [pc, #488]	; (800f0d4 <USB_EPStartXfer+0x2e4>)
 800eeea:	400b      	ands	r3, r1
 800eeec:	69b9      	ldr	r1, [r7, #24]
 800eeee:	0148      	lsls	r0, r1, #5
 800eef0:	69f9      	ldr	r1, [r7, #28]
 800eef2:	4401      	add	r1, r0
 800eef4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800eef8:	4313      	orrs	r3, r2
 800eefa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800eefc:	69bb      	ldr	r3, [r7, #24]
 800eefe:	015a      	lsls	r2, r3, #5
 800ef00:	69fb      	ldr	r3, [r7, #28]
 800ef02:	4413      	add	r3, r2
 800ef04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef08:	691a      	ldr	r2, [r3, #16]
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	699b      	ldr	r3, [r3, #24]
 800ef0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ef12:	69b9      	ldr	r1, [r7, #24]
 800ef14:	0148      	lsls	r0, r1, #5
 800ef16:	69f9      	ldr	r1, [r7, #28]
 800ef18:	4401      	add	r1, r0
 800ef1a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ef1e:	4313      	orrs	r3, r2
 800ef20:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	791b      	ldrb	r3, [r3, #4]
 800ef26:	2b01      	cmp	r3, #1
 800ef28:	d11f      	bne.n	800ef6a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ef2a:	69bb      	ldr	r3, [r7, #24]
 800ef2c:	015a      	lsls	r2, r3, #5
 800ef2e:	69fb      	ldr	r3, [r7, #28]
 800ef30:	4413      	add	r3, r2
 800ef32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef36:	691b      	ldr	r3, [r3, #16]
 800ef38:	69ba      	ldr	r2, [r7, #24]
 800ef3a:	0151      	lsls	r1, r2, #5
 800ef3c:	69fa      	ldr	r2, [r7, #28]
 800ef3e:	440a      	add	r2, r1
 800ef40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef44:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ef48:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ef4a:	69bb      	ldr	r3, [r7, #24]
 800ef4c:	015a      	lsls	r2, r3, #5
 800ef4e:	69fb      	ldr	r3, [r7, #28]
 800ef50:	4413      	add	r3, r2
 800ef52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef56:	691b      	ldr	r3, [r3, #16]
 800ef58:	69ba      	ldr	r2, [r7, #24]
 800ef5a:	0151      	lsls	r1, r2, #5
 800ef5c:	69fa      	ldr	r2, [r7, #28]
 800ef5e:	440a      	add	r2, r1
 800ef60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ef68:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ef6a:	79fb      	ldrb	r3, [r7, #7]
 800ef6c:	2b01      	cmp	r3, #1
 800ef6e:	d14b      	bne.n	800f008 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	695b      	ldr	r3, [r3, #20]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d009      	beq.n	800ef8c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ef78:	69bb      	ldr	r3, [r7, #24]
 800ef7a:	015a      	lsls	r2, r3, #5
 800ef7c:	69fb      	ldr	r3, [r7, #28]
 800ef7e:	4413      	add	r3, r2
 800ef80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef84:	461a      	mov	r2, r3
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	695b      	ldr	r3, [r3, #20]
 800ef8a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	791b      	ldrb	r3, [r3, #4]
 800ef90:	2b01      	cmp	r3, #1
 800ef92:	d128      	bne.n	800efe6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ef94:	69fb      	ldr	r3, [r7, #28]
 800ef96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef9a:	689b      	ldr	r3, [r3, #8]
 800ef9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d110      	bne.n	800efc6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800efa4:	69bb      	ldr	r3, [r7, #24]
 800efa6:	015a      	lsls	r2, r3, #5
 800efa8:	69fb      	ldr	r3, [r7, #28]
 800efaa:	4413      	add	r3, r2
 800efac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	69ba      	ldr	r2, [r7, #24]
 800efb4:	0151      	lsls	r1, r2, #5
 800efb6:	69fa      	ldr	r2, [r7, #28]
 800efb8:	440a      	add	r2, r1
 800efba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800efbe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800efc2:	6013      	str	r3, [r2, #0]
 800efc4:	e00f      	b.n	800efe6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800efc6:	69bb      	ldr	r3, [r7, #24]
 800efc8:	015a      	lsls	r2, r3, #5
 800efca:	69fb      	ldr	r3, [r7, #28]
 800efcc:	4413      	add	r3, r2
 800efce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	69ba      	ldr	r2, [r7, #24]
 800efd6:	0151      	lsls	r1, r2, #5
 800efd8:	69fa      	ldr	r2, [r7, #28]
 800efda:	440a      	add	r2, r1
 800efdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800efe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800efe4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800efe6:	69bb      	ldr	r3, [r7, #24]
 800efe8:	015a      	lsls	r2, r3, #5
 800efea:	69fb      	ldr	r3, [r7, #28]
 800efec:	4413      	add	r3, r2
 800efee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	69ba      	ldr	r2, [r7, #24]
 800eff6:	0151      	lsls	r1, r2, #5
 800eff8:	69fa      	ldr	r2, [r7, #28]
 800effa:	440a      	add	r2, r1
 800effc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f000:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f004:	6013      	str	r3, [r2, #0]
 800f006:	e137      	b.n	800f278 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f008:	69bb      	ldr	r3, [r7, #24]
 800f00a:	015a      	lsls	r2, r3, #5
 800f00c:	69fb      	ldr	r3, [r7, #28]
 800f00e:	4413      	add	r3, r2
 800f010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	69ba      	ldr	r2, [r7, #24]
 800f018:	0151      	lsls	r1, r2, #5
 800f01a:	69fa      	ldr	r2, [r7, #28]
 800f01c:	440a      	add	r2, r1
 800f01e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f022:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f026:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	791b      	ldrb	r3, [r3, #4]
 800f02c:	2b01      	cmp	r3, #1
 800f02e:	d015      	beq.n	800f05c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	699b      	ldr	r3, [r3, #24]
 800f034:	2b00      	cmp	r3, #0
 800f036:	f000 811f 	beq.w	800f278 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f03a:	69fb      	ldr	r3, [r7, #28]
 800f03c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f042:	68bb      	ldr	r3, [r7, #8]
 800f044:	781b      	ldrb	r3, [r3, #0]
 800f046:	f003 030f 	and.w	r3, r3, #15
 800f04a:	2101      	movs	r1, #1
 800f04c:	fa01 f303 	lsl.w	r3, r1, r3
 800f050:	69f9      	ldr	r1, [r7, #28]
 800f052:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f056:	4313      	orrs	r3, r2
 800f058:	634b      	str	r3, [r1, #52]	; 0x34
 800f05a:	e10d      	b.n	800f278 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f05c:	69fb      	ldr	r3, [r7, #28]
 800f05e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f062:	689b      	ldr	r3, [r3, #8]
 800f064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d110      	bne.n	800f08e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f06c:	69bb      	ldr	r3, [r7, #24]
 800f06e:	015a      	lsls	r2, r3, #5
 800f070:	69fb      	ldr	r3, [r7, #28]
 800f072:	4413      	add	r3, r2
 800f074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	69ba      	ldr	r2, [r7, #24]
 800f07c:	0151      	lsls	r1, r2, #5
 800f07e:	69fa      	ldr	r2, [r7, #28]
 800f080:	440a      	add	r2, r1
 800f082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f086:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f08a:	6013      	str	r3, [r2, #0]
 800f08c:	e00f      	b.n	800f0ae <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f08e:	69bb      	ldr	r3, [r7, #24]
 800f090:	015a      	lsls	r2, r3, #5
 800f092:	69fb      	ldr	r3, [r7, #28]
 800f094:	4413      	add	r3, r2
 800f096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	69ba      	ldr	r2, [r7, #24]
 800f09e:	0151      	lsls	r1, r2, #5
 800f0a0:	69fa      	ldr	r2, [r7, #28]
 800f0a2:	440a      	add	r2, r1
 800f0a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f0ac:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f0ae:	68bb      	ldr	r3, [r7, #8]
 800f0b0:	6919      	ldr	r1, [r3, #16]
 800f0b2:	68bb      	ldr	r3, [r7, #8]
 800f0b4:	781a      	ldrb	r2, [r3, #0]
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	699b      	ldr	r3, [r3, #24]
 800f0ba:	b298      	uxth	r0, r3
 800f0bc:	79fb      	ldrb	r3, [r7, #7]
 800f0be:	9300      	str	r3, [sp, #0]
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	68f8      	ldr	r0, [r7, #12]
 800f0c4:	f000 faea 	bl	800f69c <USB_WritePacket>
 800f0c8:	e0d6      	b.n	800f278 <USB_EPStartXfer+0x488>
 800f0ca:	bf00      	nop
 800f0cc:	e007ffff 	.word	0xe007ffff
 800f0d0:	fff80000 	.word	0xfff80000
 800f0d4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f0d8:	69bb      	ldr	r3, [r7, #24]
 800f0da:	015a      	lsls	r2, r3, #5
 800f0dc:	69fb      	ldr	r3, [r7, #28]
 800f0de:	4413      	add	r3, r2
 800f0e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0e4:	691a      	ldr	r2, [r3, #16]
 800f0e6:	69bb      	ldr	r3, [r7, #24]
 800f0e8:	0159      	lsls	r1, r3, #5
 800f0ea:	69fb      	ldr	r3, [r7, #28]
 800f0ec:	440b      	add	r3, r1
 800f0ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0f2:	4619      	mov	r1, r3
 800f0f4:	4b63      	ldr	r3, [pc, #396]	; (800f284 <USB_EPStartXfer+0x494>)
 800f0f6:	4013      	ands	r3, r2
 800f0f8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f0fa:	69bb      	ldr	r3, [r7, #24]
 800f0fc:	015a      	lsls	r2, r3, #5
 800f0fe:	69fb      	ldr	r3, [r7, #28]
 800f100:	4413      	add	r3, r2
 800f102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f106:	691a      	ldr	r2, [r3, #16]
 800f108:	69bb      	ldr	r3, [r7, #24]
 800f10a:	0159      	lsls	r1, r3, #5
 800f10c:	69fb      	ldr	r3, [r7, #28]
 800f10e:	440b      	add	r3, r1
 800f110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f114:	4619      	mov	r1, r3
 800f116:	4b5c      	ldr	r3, [pc, #368]	; (800f288 <USB_EPStartXfer+0x498>)
 800f118:	4013      	ands	r3, r2
 800f11a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	699b      	ldr	r3, [r3, #24]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d123      	bne.n	800f16c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f124:	69bb      	ldr	r3, [r7, #24]
 800f126:	015a      	lsls	r2, r3, #5
 800f128:	69fb      	ldr	r3, [r7, #28]
 800f12a:	4413      	add	r3, r2
 800f12c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f130:	691a      	ldr	r2, [r3, #16]
 800f132:	68bb      	ldr	r3, [r7, #8]
 800f134:	68db      	ldr	r3, [r3, #12]
 800f136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f13a:	69b9      	ldr	r1, [r7, #24]
 800f13c:	0148      	lsls	r0, r1, #5
 800f13e:	69f9      	ldr	r1, [r7, #28]
 800f140:	4401      	add	r1, r0
 800f142:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f146:	4313      	orrs	r3, r2
 800f148:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f14a:	69bb      	ldr	r3, [r7, #24]
 800f14c:	015a      	lsls	r2, r3, #5
 800f14e:	69fb      	ldr	r3, [r7, #28]
 800f150:	4413      	add	r3, r2
 800f152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f156:	691b      	ldr	r3, [r3, #16]
 800f158:	69ba      	ldr	r2, [r7, #24]
 800f15a:	0151      	lsls	r1, r2, #5
 800f15c:	69fa      	ldr	r2, [r7, #28]
 800f15e:	440a      	add	r2, r1
 800f160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f164:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f168:	6113      	str	r3, [r2, #16]
 800f16a:	e037      	b.n	800f1dc <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f16c:	68bb      	ldr	r3, [r7, #8]
 800f16e:	699a      	ldr	r2, [r3, #24]
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	68db      	ldr	r3, [r3, #12]
 800f174:	4413      	add	r3, r2
 800f176:	1e5a      	subs	r2, r3, #1
 800f178:	68bb      	ldr	r3, [r7, #8]
 800f17a:	68db      	ldr	r3, [r3, #12]
 800f17c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f180:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	68db      	ldr	r3, [r3, #12]
 800f186:	8afa      	ldrh	r2, [r7, #22]
 800f188:	fb03 f202 	mul.w	r2, r3, r2
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f190:	69bb      	ldr	r3, [r7, #24]
 800f192:	015a      	lsls	r2, r3, #5
 800f194:	69fb      	ldr	r3, [r7, #28]
 800f196:	4413      	add	r3, r2
 800f198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f19c:	691a      	ldr	r2, [r3, #16]
 800f19e:	8afb      	ldrh	r3, [r7, #22]
 800f1a0:	04d9      	lsls	r1, r3, #19
 800f1a2:	4b3a      	ldr	r3, [pc, #232]	; (800f28c <USB_EPStartXfer+0x49c>)
 800f1a4:	400b      	ands	r3, r1
 800f1a6:	69b9      	ldr	r1, [r7, #24]
 800f1a8:	0148      	lsls	r0, r1, #5
 800f1aa:	69f9      	ldr	r1, [r7, #28]
 800f1ac:	4401      	add	r1, r0
 800f1ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f1b2:	4313      	orrs	r3, r2
 800f1b4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800f1b6:	69bb      	ldr	r3, [r7, #24]
 800f1b8:	015a      	lsls	r2, r3, #5
 800f1ba:	69fb      	ldr	r3, [r7, #28]
 800f1bc:	4413      	add	r3, r2
 800f1be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1c2:	691a      	ldr	r2, [r3, #16]
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	69db      	ldr	r3, [r3, #28]
 800f1c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f1cc:	69b9      	ldr	r1, [r7, #24]
 800f1ce:	0148      	lsls	r0, r1, #5
 800f1d0:	69f9      	ldr	r1, [r7, #28]
 800f1d2:	4401      	add	r1, r0
 800f1d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f1d8:	4313      	orrs	r3, r2
 800f1da:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f1dc:	79fb      	ldrb	r3, [r7, #7]
 800f1de:	2b01      	cmp	r3, #1
 800f1e0:	d10d      	bne.n	800f1fe <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f1e2:	68bb      	ldr	r3, [r7, #8]
 800f1e4:	691b      	ldr	r3, [r3, #16]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d009      	beq.n	800f1fe <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f1ea:	68bb      	ldr	r3, [r7, #8]
 800f1ec:	6919      	ldr	r1, [r3, #16]
 800f1ee:	69bb      	ldr	r3, [r7, #24]
 800f1f0:	015a      	lsls	r2, r3, #5
 800f1f2:	69fb      	ldr	r3, [r7, #28]
 800f1f4:	4413      	add	r3, r2
 800f1f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1fa:	460a      	mov	r2, r1
 800f1fc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	791b      	ldrb	r3, [r3, #4]
 800f202:	2b01      	cmp	r3, #1
 800f204:	d128      	bne.n	800f258 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f206:	69fb      	ldr	r3, [r7, #28]
 800f208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f20c:	689b      	ldr	r3, [r3, #8]
 800f20e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f212:	2b00      	cmp	r3, #0
 800f214:	d110      	bne.n	800f238 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f216:	69bb      	ldr	r3, [r7, #24]
 800f218:	015a      	lsls	r2, r3, #5
 800f21a:	69fb      	ldr	r3, [r7, #28]
 800f21c:	4413      	add	r3, r2
 800f21e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	69ba      	ldr	r2, [r7, #24]
 800f226:	0151      	lsls	r1, r2, #5
 800f228:	69fa      	ldr	r2, [r7, #28]
 800f22a:	440a      	add	r2, r1
 800f22c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f230:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f234:	6013      	str	r3, [r2, #0]
 800f236:	e00f      	b.n	800f258 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f238:	69bb      	ldr	r3, [r7, #24]
 800f23a:	015a      	lsls	r2, r3, #5
 800f23c:	69fb      	ldr	r3, [r7, #28]
 800f23e:	4413      	add	r3, r2
 800f240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	69ba      	ldr	r2, [r7, #24]
 800f248:	0151      	lsls	r1, r2, #5
 800f24a:	69fa      	ldr	r2, [r7, #28]
 800f24c:	440a      	add	r2, r1
 800f24e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f256:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f258:	69bb      	ldr	r3, [r7, #24]
 800f25a:	015a      	lsls	r2, r3, #5
 800f25c:	69fb      	ldr	r3, [r7, #28]
 800f25e:	4413      	add	r3, r2
 800f260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	69ba      	ldr	r2, [r7, #24]
 800f268:	0151      	lsls	r1, r2, #5
 800f26a:	69fa      	ldr	r2, [r7, #28]
 800f26c:	440a      	add	r2, r1
 800f26e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f272:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f276:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f278:	2300      	movs	r3, #0
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	3720      	adds	r7, #32
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}
 800f282:	bf00      	nop
 800f284:	fff80000 	.word	0xfff80000
 800f288:	e007ffff 	.word	0xe007ffff
 800f28c:	1ff80000 	.word	0x1ff80000

0800f290 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f290:	b480      	push	{r7}
 800f292:	b087      	sub	sp, #28
 800f294:	af00      	add	r7, sp, #0
 800f296:	60f8      	str	r0, [r7, #12]
 800f298:	60b9      	str	r1, [r7, #8]
 800f29a:	4613      	mov	r3, r2
 800f29c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	781b      	ldrb	r3, [r3, #0]
 800f2a6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	785b      	ldrb	r3, [r3, #1]
 800f2ac:	2b01      	cmp	r3, #1
 800f2ae:	f040 80ce 	bne.w	800f44e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f2b2:	68bb      	ldr	r3, [r7, #8]
 800f2b4:	699b      	ldr	r3, [r3, #24]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d132      	bne.n	800f320 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f2ba:	693b      	ldr	r3, [r7, #16]
 800f2bc:	015a      	lsls	r2, r3, #5
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	4413      	add	r3, r2
 800f2c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2c6:	691a      	ldr	r2, [r3, #16]
 800f2c8:	693b      	ldr	r3, [r7, #16]
 800f2ca:	0159      	lsls	r1, r3, #5
 800f2cc:	697b      	ldr	r3, [r7, #20]
 800f2ce:	440b      	add	r3, r1
 800f2d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2d4:	4619      	mov	r1, r3
 800f2d6:	4b9a      	ldr	r3, [pc, #616]	; (800f540 <USB_EP0StartXfer+0x2b0>)
 800f2d8:	4013      	ands	r3, r2
 800f2da:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f2dc:	693b      	ldr	r3, [r7, #16]
 800f2de:	015a      	lsls	r2, r3, #5
 800f2e0:	697b      	ldr	r3, [r7, #20]
 800f2e2:	4413      	add	r3, r2
 800f2e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2e8:	691b      	ldr	r3, [r3, #16]
 800f2ea:	693a      	ldr	r2, [r7, #16]
 800f2ec:	0151      	lsls	r1, r2, #5
 800f2ee:	697a      	ldr	r2, [r7, #20]
 800f2f0:	440a      	add	r2, r1
 800f2f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f2f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f2fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f2fc:	693b      	ldr	r3, [r7, #16]
 800f2fe:	015a      	lsls	r2, r3, #5
 800f300:	697b      	ldr	r3, [r7, #20]
 800f302:	4413      	add	r3, r2
 800f304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f308:	691a      	ldr	r2, [r3, #16]
 800f30a:	693b      	ldr	r3, [r7, #16]
 800f30c:	0159      	lsls	r1, r3, #5
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	440b      	add	r3, r1
 800f312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f316:	4619      	mov	r1, r3
 800f318:	4b8a      	ldr	r3, [pc, #552]	; (800f544 <USB_EP0StartXfer+0x2b4>)
 800f31a:	4013      	ands	r3, r2
 800f31c:	610b      	str	r3, [r1, #16]
 800f31e:	e04e      	b.n	800f3be <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f320:	693b      	ldr	r3, [r7, #16]
 800f322:	015a      	lsls	r2, r3, #5
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	4413      	add	r3, r2
 800f328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f32c:	691a      	ldr	r2, [r3, #16]
 800f32e:	693b      	ldr	r3, [r7, #16]
 800f330:	0159      	lsls	r1, r3, #5
 800f332:	697b      	ldr	r3, [r7, #20]
 800f334:	440b      	add	r3, r1
 800f336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f33a:	4619      	mov	r1, r3
 800f33c:	4b81      	ldr	r3, [pc, #516]	; (800f544 <USB_EP0StartXfer+0x2b4>)
 800f33e:	4013      	ands	r3, r2
 800f340:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f342:	693b      	ldr	r3, [r7, #16]
 800f344:	015a      	lsls	r2, r3, #5
 800f346:	697b      	ldr	r3, [r7, #20]
 800f348:	4413      	add	r3, r2
 800f34a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f34e:	691a      	ldr	r2, [r3, #16]
 800f350:	693b      	ldr	r3, [r7, #16]
 800f352:	0159      	lsls	r1, r3, #5
 800f354:	697b      	ldr	r3, [r7, #20]
 800f356:	440b      	add	r3, r1
 800f358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f35c:	4619      	mov	r1, r3
 800f35e:	4b78      	ldr	r3, [pc, #480]	; (800f540 <USB_EP0StartXfer+0x2b0>)
 800f360:	4013      	ands	r3, r2
 800f362:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800f364:	68bb      	ldr	r3, [r7, #8]
 800f366:	699a      	ldr	r2, [r3, #24]
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	68db      	ldr	r3, [r3, #12]
 800f36c:	429a      	cmp	r2, r3
 800f36e:	d903      	bls.n	800f378 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	68da      	ldr	r2, [r3, #12]
 800f374:	68bb      	ldr	r3, [r7, #8]
 800f376:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f378:	693b      	ldr	r3, [r7, #16]
 800f37a:	015a      	lsls	r2, r3, #5
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	4413      	add	r3, r2
 800f380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f384:	691b      	ldr	r3, [r3, #16]
 800f386:	693a      	ldr	r2, [r7, #16]
 800f388:	0151      	lsls	r1, r2, #5
 800f38a:	697a      	ldr	r2, [r7, #20]
 800f38c:	440a      	add	r2, r1
 800f38e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f392:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f396:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f398:	693b      	ldr	r3, [r7, #16]
 800f39a:	015a      	lsls	r2, r3, #5
 800f39c:	697b      	ldr	r3, [r7, #20]
 800f39e:	4413      	add	r3, r2
 800f3a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3a4:	691a      	ldr	r2, [r3, #16]
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	699b      	ldr	r3, [r3, #24]
 800f3aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f3ae:	6939      	ldr	r1, [r7, #16]
 800f3b0:	0148      	lsls	r0, r1, #5
 800f3b2:	6979      	ldr	r1, [r7, #20]
 800f3b4:	4401      	add	r1, r0
 800f3b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f3ba:	4313      	orrs	r3, r2
 800f3bc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f3be:	79fb      	ldrb	r3, [r7, #7]
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	d11e      	bne.n	800f402 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f3c4:	68bb      	ldr	r3, [r7, #8]
 800f3c6:	695b      	ldr	r3, [r3, #20]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d009      	beq.n	800f3e0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f3cc:	693b      	ldr	r3, [r7, #16]
 800f3ce:	015a      	lsls	r2, r3, #5
 800f3d0:	697b      	ldr	r3, [r7, #20]
 800f3d2:	4413      	add	r3, r2
 800f3d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3d8:	461a      	mov	r2, r3
 800f3da:	68bb      	ldr	r3, [r7, #8]
 800f3dc:	695b      	ldr	r3, [r3, #20]
 800f3de:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f3e0:	693b      	ldr	r3, [r7, #16]
 800f3e2:	015a      	lsls	r2, r3, #5
 800f3e4:	697b      	ldr	r3, [r7, #20]
 800f3e6:	4413      	add	r3, r2
 800f3e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	693a      	ldr	r2, [r7, #16]
 800f3f0:	0151      	lsls	r1, r2, #5
 800f3f2:	697a      	ldr	r2, [r7, #20]
 800f3f4:	440a      	add	r2, r1
 800f3f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f3fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f3fe:	6013      	str	r3, [r2, #0]
 800f400:	e097      	b.n	800f532 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f402:	693b      	ldr	r3, [r7, #16]
 800f404:	015a      	lsls	r2, r3, #5
 800f406:	697b      	ldr	r3, [r7, #20]
 800f408:	4413      	add	r3, r2
 800f40a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	693a      	ldr	r2, [r7, #16]
 800f412:	0151      	lsls	r1, r2, #5
 800f414:	697a      	ldr	r2, [r7, #20]
 800f416:	440a      	add	r2, r1
 800f418:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f41c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f420:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800f422:	68bb      	ldr	r3, [r7, #8]
 800f424:	699b      	ldr	r3, [r3, #24]
 800f426:	2b00      	cmp	r3, #0
 800f428:	f000 8083 	beq.w	800f532 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f432:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f434:	68bb      	ldr	r3, [r7, #8]
 800f436:	781b      	ldrb	r3, [r3, #0]
 800f438:	f003 030f 	and.w	r3, r3, #15
 800f43c:	2101      	movs	r1, #1
 800f43e:	fa01 f303 	lsl.w	r3, r1, r3
 800f442:	6979      	ldr	r1, [r7, #20]
 800f444:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f448:	4313      	orrs	r3, r2
 800f44a:	634b      	str	r3, [r1, #52]	; 0x34
 800f44c:	e071      	b.n	800f532 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f44e:	693b      	ldr	r3, [r7, #16]
 800f450:	015a      	lsls	r2, r3, #5
 800f452:	697b      	ldr	r3, [r7, #20]
 800f454:	4413      	add	r3, r2
 800f456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f45a:	691a      	ldr	r2, [r3, #16]
 800f45c:	693b      	ldr	r3, [r7, #16]
 800f45e:	0159      	lsls	r1, r3, #5
 800f460:	697b      	ldr	r3, [r7, #20]
 800f462:	440b      	add	r3, r1
 800f464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f468:	4619      	mov	r1, r3
 800f46a:	4b36      	ldr	r3, [pc, #216]	; (800f544 <USB_EP0StartXfer+0x2b4>)
 800f46c:	4013      	ands	r3, r2
 800f46e:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f470:	693b      	ldr	r3, [r7, #16]
 800f472:	015a      	lsls	r2, r3, #5
 800f474:	697b      	ldr	r3, [r7, #20]
 800f476:	4413      	add	r3, r2
 800f478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f47c:	691a      	ldr	r2, [r3, #16]
 800f47e:	693b      	ldr	r3, [r7, #16]
 800f480:	0159      	lsls	r1, r3, #5
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	440b      	add	r3, r1
 800f486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f48a:	4619      	mov	r1, r3
 800f48c:	4b2c      	ldr	r3, [pc, #176]	; (800f540 <USB_EP0StartXfer+0x2b0>)
 800f48e:	4013      	ands	r3, r2
 800f490:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	699b      	ldr	r3, [r3, #24]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d003      	beq.n	800f4a2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800f49a:	68bb      	ldr	r3, [r7, #8]
 800f49c:	68da      	ldr	r2, [r3, #12]
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	68da      	ldr	r2, [r3, #12]
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	015a      	lsls	r2, r3, #5
 800f4ae:	697b      	ldr	r3, [r7, #20]
 800f4b0:	4413      	add	r3, r2
 800f4b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4b6:	691b      	ldr	r3, [r3, #16]
 800f4b8:	693a      	ldr	r2, [r7, #16]
 800f4ba:	0151      	lsls	r1, r2, #5
 800f4bc:	697a      	ldr	r2, [r7, #20]
 800f4be:	440a      	add	r2, r1
 800f4c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f4c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f4c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800f4ca:	693b      	ldr	r3, [r7, #16]
 800f4cc:	015a      	lsls	r2, r3, #5
 800f4ce:	697b      	ldr	r3, [r7, #20]
 800f4d0:	4413      	add	r3, r2
 800f4d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4d6:	691a      	ldr	r2, [r3, #16]
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	69db      	ldr	r3, [r3, #28]
 800f4dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f4e0:	6939      	ldr	r1, [r7, #16]
 800f4e2:	0148      	lsls	r0, r1, #5
 800f4e4:	6979      	ldr	r1, [r7, #20]
 800f4e6:	4401      	add	r1, r0
 800f4e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f4ec:	4313      	orrs	r3, r2
 800f4ee:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800f4f0:	79fb      	ldrb	r3, [r7, #7]
 800f4f2:	2b01      	cmp	r3, #1
 800f4f4:	d10d      	bne.n	800f512 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f4f6:	68bb      	ldr	r3, [r7, #8]
 800f4f8:	691b      	ldr	r3, [r3, #16]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d009      	beq.n	800f512 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f4fe:	68bb      	ldr	r3, [r7, #8]
 800f500:	6919      	ldr	r1, [r3, #16]
 800f502:	693b      	ldr	r3, [r7, #16]
 800f504:	015a      	lsls	r2, r3, #5
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	4413      	add	r3, r2
 800f50a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f50e:	460a      	mov	r2, r1
 800f510:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f512:	693b      	ldr	r3, [r7, #16]
 800f514:	015a      	lsls	r2, r3, #5
 800f516:	697b      	ldr	r3, [r7, #20]
 800f518:	4413      	add	r3, r2
 800f51a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	693a      	ldr	r2, [r7, #16]
 800f522:	0151      	lsls	r1, r2, #5
 800f524:	697a      	ldr	r2, [r7, #20]
 800f526:	440a      	add	r2, r1
 800f528:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f52c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f530:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f532:	2300      	movs	r3, #0
}
 800f534:	4618      	mov	r0, r3
 800f536:	371c      	adds	r7, #28
 800f538:	46bd      	mov	sp, r7
 800f53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53e:	4770      	bx	lr
 800f540:	e007ffff 	.word	0xe007ffff
 800f544:	fff80000 	.word	0xfff80000

0800f548 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f548:	b480      	push	{r7}
 800f54a:	b087      	sub	sp, #28
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
 800f550:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f552:	2300      	movs	r3, #0
 800f554:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800f556:	2300      	movs	r3, #0
 800f558:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	785b      	ldrb	r3, [r3, #1]
 800f562:	2b01      	cmp	r3, #1
 800f564:	d14a      	bne.n	800f5fc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f566:	683b      	ldr	r3, [r7, #0]
 800f568:	781b      	ldrb	r3, [r3, #0]
 800f56a:	015a      	lsls	r2, r3, #5
 800f56c:	693b      	ldr	r3, [r7, #16]
 800f56e:	4413      	add	r3, r2
 800f570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f57a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f57e:	f040 8086 	bne.w	800f68e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	781b      	ldrb	r3, [r3, #0]
 800f586:	015a      	lsls	r2, r3, #5
 800f588:	693b      	ldr	r3, [r7, #16]
 800f58a:	4413      	add	r3, r2
 800f58c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	683a      	ldr	r2, [r7, #0]
 800f594:	7812      	ldrb	r2, [r2, #0]
 800f596:	0151      	lsls	r1, r2, #5
 800f598:	693a      	ldr	r2, [r7, #16]
 800f59a:	440a      	add	r2, r1
 800f59c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f5a4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800f5a6:	683b      	ldr	r3, [r7, #0]
 800f5a8:	781b      	ldrb	r3, [r3, #0]
 800f5aa:	015a      	lsls	r2, r3, #5
 800f5ac:	693b      	ldr	r3, [r7, #16]
 800f5ae:	4413      	add	r3, r2
 800f5b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	683a      	ldr	r2, [r7, #0]
 800f5b8:	7812      	ldrb	r2, [r2, #0]
 800f5ba:	0151      	lsls	r1, r2, #5
 800f5bc:	693a      	ldr	r2, [r7, #16]
 800f5be:	440a      	add	r2, r1
 800f5c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f5c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	3301      	adds	r3, #1
 800f5ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	f242 7210 	movw	r2, #10000	; 0x2710
 800f5d6:	4293      	cmp	r3, r2
 800f5d8:	d902      	bls.n	800f5e0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800f5da:	2301      	movs	r3, #1
 800f5dc:	75fb      	strb	r3, [r7, #23]
          break;
 800f5de:	e056      	b.n	800f68e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	781b      	ldrb	r3, [r3, #0]
 800f5e4:	015a      	lsls	r2, r3, #5
 800f5e6:	693b      	ldr	r3, [r7, #16]
 800f5e8:	4413      	add	r3, r2
 800f5ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f5f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f5f8:	d0e7      	beq.n	800f5ca <USB_EPStopXfer+0x82>
 800f5fa:	e048      	b.n	800f68e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	015a      	lsls	r2, r3, #5
 800f602:	693b      	ldr	r3, [r7, #16]
 800f604:	4413      	add	r3, r2
 800f606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f610:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f614:	d13b      	bne.n	800f68e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800f616:	683b      	ldr	r3, [r7, #0]
 800f618:	781b      	ldrb	r3, [r3, #0]
 800f61a:	015a      	lsls	r2, r3, #5
 800f61c:	693b      	ldr	r3, [r7, #16]
 800f61e:	4413      	add	r3, r2
 800f620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	683a      	ldr	r2, [r7, #0]
 800f628:	7812      	ldrb	r2, [r2, #0]
 800f62a:	0151      	lsls	r1, r2, #5
 800f62c:	693a      	ldr	r2, [r7, #16]
 800f62e:	440a      	add	r2, r1
 800f630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f634:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f638:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	781b      	ldrb	r3, [r3, #0]
 800f63e:	015a      	lsls	r2, r3, #5
 800f640:	693b      	ldr	r3, [r7, #16]
 800f642:	4413      	add	r3, r2
 800f644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	683a      	ldr	r2, [r7, #0]
 800f64c:	7812      	ldrb	r2, [r2, #0]
 800f64e:	0151      	lsls	r1, r2, #5
 800f650:	693a      	ldr	r2, [r7, #16]
 800f652:	440a      	add	r2, r1
 800f654:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f658:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f65c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	3301      	adds	r3, #1
 800f662:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	f242 7210 	movw	r2, #10000	; 0x2710
 800f66a:	4293      	cmp	r3, r2
 800f66c:	d902      	bls.n	800f674 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800f66e:	2301      	movs	r3, #1
 800f670:	75fb      	strb	r3, [r7, #23]
          break;
 800f672:	e00c      	b.n	800f68e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	781b      	ldrb	r3, [r3, #0]
 800f678:	015a      	lsls	r2, r3, #5
 800f67a:	693b      	ldr	r3, [r7, #16]
 800f67c:	4413      	add	r3, r2
 800f67e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f688:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f68c:	d0e7      	beq.n	800f65e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800f68e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f690:	4618      	mov	r0, r3
 800f692:	371c      	adds	r7, #28
 800f694:	46bd      	mov	sp, r7
 800f696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69a:	4770      	bx	lr

0800f69c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f69c:	b480      	push	{r7}
 800f69e:	b089      	sub	sp, #36	; 0x24
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	60f8      	str	r0, [r7, #12]
 800f6a4:	60b9      	str	r1, [r7, #8]
 800f6a6:	4611      	mov	r1, r2
 800f6a8:	461a      	mov	r2, r3
 800f6aa:	460b      	mov	r3, r1
 800f6ac:	71fb      	strb	r3, [r7, #7]
 800f6ae:	4613      	mov	r3, r2
 800f6b0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f6b6:	68bb      	ldr	r3, [r7, #8]
 800f6b8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800f6ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d123      	bne.n	800f70a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f6c2:	88bb      	ldrh	r3, [r7, #4]
 800f6c4:	3303      	adds	r3, #3
 800f6c6:	089b      	lsrs	r3, r3, #2
 800f6c8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	61bb      	str	r3, [r7, #24]
 800f6ce:	e018      	b.n	800f702 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f6d0:	79fb      	ldrb	r3, [r7, #7]
 800f6d2:	031a      	lsls	r2, r3, #12
 800f6d4:	697b      	ldr	r3, [r7, #20]
 800f6d6:	4413      	add	r3, r2
 800f6d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f6dc:	461a      	mov	r2, r3
 800f6de:	69fb      	ldr	r3, [r7, #28]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f6e4:	69fb      	ldr	r3, [r7, #28]
 800f6e6:	3301      	adds	r3, #1
 800f6e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f6ea:	69fb      	ldr	r3, [r7, #28]
 800f6ec:	3301      	adds	r3, #1
 800f6ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f6f0:	69fb      	ldr	r3, [r7, #28]
 800f6f2:	3301      	adds	r3, #1
 800f6f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f6f6:	69fb      	ldr	r3, [r7, #28]
 800f6f8:	3301      	adds	r3, #1
 800f6fa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f6fc:	69bb      	ldr	r3, [r7, #24]
 800f6fe:	3301      	adds	r3, #1
 800f700:	61bb      	str	r3, [r7, #24]
 800f702:	69ba      	ldr	r2, [r7, #24]
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	429a      	cmp	r2, r3
 800f708:	d3e2      	bcc.n	800f6d0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f70a:	2300      	movs	r3, #0
}
 800f70c:	4618      	mov	r0, r3
 800f70e:	3724      	adds	r7, #36	; 0x24
 800f710:	46bd      	mov	sp, r7
 800f712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f716:	4770      	bx	lr

0800f718 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f718:	b480      	push	{r7}
 800f71a:	b08b      	sub	sp, #44	; 0x2c
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	60f8      	str	r0, [r7, #12]
 800f720:	60b9      	str	r1, [r7, #8]
 800f722:	4613      	mov	r3, r2
 800f724:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f72e:	88fb      	ldrh	r3, [r7, #6]
 800f730:	089b      	lsrs	r3, r3, #2
 800f732:	b29b      	uxth	r3, r3
 800f734:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f736:	88fb      	ldrh	r3, [r7, #6]
 800f738:	f003 0303 	and.w	r3, r3, #3
 800f73c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f73e:	2300      	movs	r3, #0
 800f740:	623b      	str	r3, [r7, #32]
 800f742:	e014      	b.n	800f76e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f744:	69bb      	ldr	r3, [r7, #24]
 800f746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f74a:	681a      	ldr	r2, [r3, #0]
 800f74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f74e:	601a      	str	r2, [r3, #0]
    pDest++;
 800f750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f752:	3301      	adds	r3, #1
 800f754:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f758:	3301      	adds	r3, #1
 800f75a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f75e:	3301      	adds	r3, #1
 800f760:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f764:	3301      	adds	r3, #1
 800f766:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800f768:	6a3b      	ldr	r3, [r7, #32]
 800f76a:	3301      	adds	r3, #1
 800f76c:	623b      	str	r3, [r7, #32]
 800f76e:	6a3a      	ldr	r2, [r7, #32]
 800f770:	697b      	ldr	r3, [r7, #20]
 800f772:	429a      	cmp	r2, r3
 800f774:	d3e6      	bcc.n	800f744 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f776:	8bfb      	ldrh	r3, [r7, #30]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d01e      	beq.n	800f7ba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f77c:	2300      	movs	r3, #0
 800f77e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f780:	69bb      	ldr	r3, [r7, #24]
 800f782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f786:	461a      	mov	r2, r3
 800f788:	f107 0310 	add.w	r3, r7, #16
 800f78c:	6812      	ldr	r2, [r2, #0]
 800f78e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f790:	693a      	ldr	r2, [r7, #16]
 800f792:	6a3b      	ldr	r3, [r7, #32]
 800f794:	b2db      	uxtb	r3, r3
 800f796:	00db      	lsls	r3, r3, #3
 800f798:	fa22 f303 	lsr.w	r3, r2, r3
 800f79c:	b2da      	uxtb	r2, r3
 800f79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7a0:	701a      	strb	r2, [r3, #0]
      i++;
 800f7a2:	6a3b      	ldr	r3, [r7, #32]
 800f7a4:	3301      	adds	r3, #1
 800f7a6:	623b      	str	r3, [r7, #32]
      pDest++;
 800f7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7aa:	3301      	adds	r3, #1
 800f7ac:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800f7ae:	8bfb      	ldrh	r3, [r7, #30]
 800f7b0:	3b01      	subs	r3, #1
 800f7b2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f7b4:	8bfb      	ldrh	r3, [r7, #30]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d1ea      	bne.n	800f790 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f7bc:	4618      	mov	r0, r3
 800f7be:	372c      	adds	r7, #44	; 0x2c
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c6:	4770      	bx	lr

0800f7c8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f7c8:	b480      	push	{r7}
 800f7ca:	b085      	sub	sp, #20
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
 800f7d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	781b      	ldrb	r3, [r3, #0]
 800f7da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	785b      	ldrb	r3, [r3, #1]
 800f7e0:	2b01      	cmp	r3, #1
 800f7e2:	d12c      	bne.n	800f83e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	015a      	lsls	r2, r3, #5
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	4413      	add	r3, r2
 800f7ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	db12      	blt.n	800f81c <USB_EPSetStall+0x54>
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d00f      	beq.n	800f81c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	015a      	lsls	r2, r3, #5
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	4413      	add	r3, r2
 800f804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	68ba      	ldr	r2, [r7, #8]
 800f80c:	0151      	lsls	r1, r2, #5
 800f80e:	68fa      	ldr	r2, [r7, #12]
 800f810:	440a      	add	r2, r1
 800f812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f816:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f81a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f81c:	68bb      	ldr	r3, [r7, #8]
 800f81e:	015a      	lsls	r2, r3, #5
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	4413      	add	r3, r2
 800f824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	68ba      	ldr	r2, [r7, #8]
 800f82c:	0151      	lsls	r1, r2, #5
 800f82e:	68fa      	ldr	r2, [r7, #12]
 800f830:	440a      	add	r2, r1
 800f832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f836:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f83a:	6013      	str	r3, [r2, #0]
 800f83c:	e02b      	b.n	800f896 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f83e:	68bb      	ldr	r3, [r7, #8]
 800f840:	015a      	lsls	r2, r3, #5
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	4413      	add	r3, r2
 800f846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	db12      	blt.n	800f876 <USB_EPSetStall+0xae>
 800f850:	68bb      	ldr	r3, [r7, #8]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d00f      	beq.n	800f876 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f856:	68bb      	ldr	r3, [r7, #8]
 800f858:	015a      	lsls	r2, r3, #5
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	4413      	add	r3, r2
 800f85e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	68ba      	ldr	r2, [r7, #8]
 800f866:	0151      	lsls	r1, r2, #5
 800f868:	68fa      	ldr	r2, [r7, #12]
 800f86a:	440a      	add	r2, r1
 800f86c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f870:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f874:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f876:	68bb      	ldr	r3, [r7, #8]
 800f878:	015a      	lsls	r2, r3, #5
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	4413      	add	r3, r2
 800f87e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	68ba      	ldr	r2, [r7, #8]
 800f886:	0151      	lsls	r1, r2, #5
 800f888:	68fa      	ldr	r2, [r7, #12]
 800f88a:	440a      	add	r2, r1
 800f88c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f890:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f894:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f896:	2300      	movs	r3, #0
}
 800f898:	4618      	mov	r0, r3
 800f89a:	3714      	adds	r7, #20
 800f89c:	46bd      	mov	sp, r7
 800f89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a2:	4770      	bx	lr

0800f8a4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f8a4:	b480      	push	{r7}
 800f8a6:	b085      	sub	sp, #20
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
 800f8ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f8b2:	683b      	ldr	r3, [r7, #0]
 800f8b4:	781b      	ldrb	r3, [r3, #0]
 800f8b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	785b      	ldrb	r3, [r3, #1]
 800f8bc:	2b01      	cmp	r3, #1
 800f8be:	d128      	bne.n	800f912 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f8c0:	68bb      	ldr	r3, [r7, #8]
 800f8c2:	015a      	lsls	r2, r3, #5
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	4413      	add	r3, r2
 800f8c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	68ba      	ldr	r2, [r7, #8]
 800f8d0:	0151      	lsls	r1, r2, #5
 800f8d2:	68fa      	ldr	r2, [r7, #12]
 800f8d4:	440a      	add	r2, r1
 800f8d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f8de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f8e0:	683b      	ldr	r3, [r7, #0]
 800f8e2:	791b      	ldrb	r3, [r3, #4]
 800f8e4:	2b03      	cmp	r3, #3
 800f8e6:	d003      	beq.n	800f8f0 <USB_EPClearStall+0x4c>
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	791b      	ldrb	r3, [r3, #4]
 800f8ec:	2b02      	cmp	r3, #2
 800f8ee:	d138      	bne.n	800f962 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f8f0:	68bb      	ldr	r3, [r7, #8]
 800f8f2:	015a      	lsls	r2, r3, #5
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	4413      	add	r3, r2
 800f8f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	68ba      	ldr	r2, [r7, #8]
 800f900:	0151      	lsls	r1, r2, #5
 800f902:	68fa      	ldr	r2, [r7, #12]
 800f904:	440a      	add	r2, r1
 800f906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f90a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f90e:	6013      	str	r3, [r2, #0]
 800f910:	e027      	b.n	800f962 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f912:	68bb      	ldr	r3, [r7, #8]
 800f914:	015a      	lsls	r2, r3, #5
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	4413      	add	r3, r2
 800f91a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	68ba      	ldr	r2, [r7, #8]
 800f922:	0151      	lsls	r1, r2, #5
 800f924:	68fa      	ldr	r2, [r7, #12]
 800f926:	440a      	add	r2, r1
 800f928:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f92c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f930:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	791b      	ldrb	r3, [r3, #4]
 800f936:	2b03      	cmp	r3, #3
 800f938:	d003      	beq.n	800f942 <USB_EPClearStall+0x9e>
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	791b      	ldrb	r3, [r3, #4]
 800f93e:	2b02      	cmp	r3, #2
 800f940:	d10f      	bne.n	800f962 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f942:	68bb      	ldr	r3, [r7, #8]
 800f944:	015a      	lsls	r2, r3, #5
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	4413      	add	r3, r2
 800f94a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	68ba      	ldr	r2, [r7, #8]
 800f952:	0151      	lsls	r1, r2, #5
 800f954:	68fa      	ldr	r2, [r7, #12]
 800f956:	440a      	add	r2, r1
 800f958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f95c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f960:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f962:	2300      	movs	r3, #0
}
 800f964:	4618      	mov	r0, r3
 800f966:	3714      	adds	r7, #20
 800f968:	46bd      	mov	sp, r7
 800f96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96e:	4770      	bx	lr

0800f970 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f970:	b480      	push	{r7}
 800f972:	b085      	sub	sp, #20
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
 800f978:	460b      	mov	r3, r1
 800f97a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	68fa      	ldr	r2, [r7, #12]
 800f98a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f98e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f992:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f99a:	681a      	ldr	r2, [r3, #0]
 800f99c:	78fb      	ldrb	r3, [r7, #3]
 800f99e:	011b      	lsls	r3, r3, #4
 800f9a0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800f9a4:	68f9      	ldr	r1, [r7, #12]
 800f9a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f9aa:	4313      	orrs	r3, r2
 800f9ac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f9ae:	2300      	movs	r3, #0
}
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	3714      	adds	r7, #20
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ba:	4770      	bx	lr

0800f9bc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f9bc:	b480      	push	{r7}
 800f9be:	b085      	sub	sp, #20
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	68fa      	ldr	r2, [r7, #12]
 800f9d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f9d6:	f023 0303 	bic.w	r3, r3, #3
 800f9da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9e2:	685b      	ldr	r3, [r3, #4]
 800f9e4:	68fa      	ldr	r2, [r7, #12]
 800f9e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f9ea:	f023 0302 	bic.w	r3, r3, #2
 800f9ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f9f0:	2300      	movs	r3, #0
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	3714      	adds	r7, #20
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fc:	4770      	bx	lr

0800f9fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f9fe:	b480      	push	{r7}
 800fa00:	b085      	sub	sp, #20
 800fa02:	af00      	add	r7, sp, #0
 800fa04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	68fa      	ldr	r2, [r7, #12]
 800fa14:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fa18:	f023 0303 	bic.w	r3, r3, #3
 800fa1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa24:	685b      	ldr	r3, [r3, #4]
 800fa26:	68fa      	ldr	r2, [r7, #12]
 800fa28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fa2c:	f043 0302 	orr.w	r3, r3, #2
 800fa30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fa32:	2300      	movs	r3, #0
}
 800fa34:	4618      	mov	r0, r3
 800fa36:	3714      	adds	r7, #20
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3e:	4770      	bx	lr

0800fa40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800fa40:	b480      	push	{r7}
 800fa42:	b085      	sub	sp, #20
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	695b      	ldr	r3, [r3, #20]
 800fa4c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	699b      	ldr	r3, [r3, #24]
 800fa52:	68fa      	ldr	r2, [r7, #12]
 800fa54:	4013      	ands	r3, r2
 800fa56:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800fa58:	68fb      	ldr	r3, [r7, #12]
}
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	3714      	adds	r7, #20
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa64:	4770      	bx	lr

0800fa66 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fa66:	b480      	push	{r7}
 800fa68:	b085      	sub	sp, #20
 800fa6a:	af00      	add	r7, sp, #0
 800fa6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa78:	699b      	ldr	r3, [r3, #24]
 800fa7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa82:	69db      	ldr	r3, [r3, #28]
 800fa84:	68ba      	ldr	r2, [r7, #8]
 800fa86:	4013      	ands	r3, r2
 800fa88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800fa8a:	68bb      	ldr	r3, [r7, #8]
 800fa8c:	0c1b      	lsrs	r3, r3, #16
}
 800fa8e:	4618      	mov	r0, r3
 800fa90:	3714      	adds	r7, #20
 800fa92:	46bd      	mov	sp, r7
 800fa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa98:	4770      	bx	lr

0800fa9a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fa9a:	b480      	push	{r7}
 800fa9c:	b085      	sub	sp, #20
 800fa9e:	af00      	add	r7, sp, #0
 800faa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800faac:	699b      	ldr	r3, [r3, #24]
 800faae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fab6:	69db      	ldr	r3, [r3, #28]
 800fab8:	68ba      	ldr	r2, [r7, #8]
 800faba:	4013      	ands	r3, r2
 800fabc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800fabe:	68bb      	ldr	r3, [r7, #8]
 800fac0:	b29b      	uxth	r3, r3
}
 800fac2:	4618      	mov	r0, r3
 800fac4:	3714      	adds	r7, #20
 800fac6:	46bd      	mov	sp, r7
 800fac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800facc:	4770      	bx	lr

0800face <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800face:	b480      	push	{r7}
 800fad0:	b085      	sub	sp, #20
 800fad2:	af00      	add	r7, sp, #0
 800fad4:	6078      	str	r0, [r7, #4]
 800fad6:	460b      	mov	r3, r1
 800fad8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800fade:	78fb      	ldrb	r3, [r7, #3]
 800fae0:	015a      	lsls	r2, r3, #5
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	4413      	add	r3, r2
 800fae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800faea:	689b      	ldr	r3, [r3, #8]
 800faec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800faf4:	695b      	ldr	r3, [r3, #20]
 800faf6:	68ba      	ldr	r2, [r7, #8]
 800faf8:	4013      	ands	r3, r2
 800fafa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fafc:	68bb      	ldr	r3, [r7, #8]
}
 800fafe:	4618      	mov	r0, r3
 800fb00:	3714      	adds	r7, #20
 800fb02:	46bd      	mov	sp, r7
 800fb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb08:	4770      	bx	lr

0800fb0a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fb0a:	b480      	push	{r7}
 800fb0c:	b087      	sub	sp, #28
 800fb0e:	af00      	add	r7, sp, #0
 800fb10:	6078      	str	r0, [r7, #4]
 800fb12:	460b      	mov	r3, r1
 800fb14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800fb1a:	697b      	ldr	r3, [r7, #20]
 800fb1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb20:	691b      	ldr	r3, [r3, #16]
 800fb22:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800fb24:	697b      	ldr	r3, [r7, #20]
 800fb26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb2c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800fb2e:	78fb      	ldrb	r3, [r7, #3]
 800fb30:	f003 030f 	and.w	r3, r3, #15
 800fb34:	68fa      	ldr	r2, [r7, #12]
 800fb36:	fa22 f303 	lsr.w	r3, r2, r3
 800fb3a:	01db      	lsls	r3, r3, #7
 800fb3c:	b2db      	uxtb	r3, r3
 800fb3e:	693a      	ldr	r2, [r7, #16]
 800fb40:	4313      	orrs	r3, r2
 800fb42:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800fb44:	78fb      	ldrb	r3, [r7, #3]
 800fb46:	015a      	lsls	r2, r3, #5
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	4413      	add	r3, r2
 800fb4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb50:	689b      	ldr	r3, [r3, #8]
 800fb52:	693a      	ldr	r2, [r7, #16]
 800fb54:	4013      	ands	r3, r2
 800fb56:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fb58:	68bb      	ldr	r3, [r7, #8]
}
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	371c      	adds	r7, #28
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb64:	4770      	bx	lr

0800fb66 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800fb66:	b480      	push	{r7}
 800fb68:	b083      	sub	sp, #12
 800fb6a:	af00      	add	r7, sp, #0
 800fb6c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	695b      	ldr	r3, [r3, #20]
 800fb72:	f003 0301 	and.w	r3, r3, #1
}
 800fb76:	4618      	mov	r0, r3
 800fb78:	370c      	adds	r7, #12
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb80:	4770      	bx	lr
	...

0800fb84 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800fb84:	b480      	push	{r7}
 800fb86:	b085      	sub	sp, #20
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb96:	681a      	ldr	r2, [r3, #0]
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb9e:	4619      	mov	r1, r3
 800fba0:	4b09      	ldr	r3, [pc, #36]	; (800fbc8 <USB_ActivateSetup+0x44>)
 800fba2:	4013      	ands	r3, r2
 800fba4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbac:	685b      	ldr	r3, [r3, #4]
 800fbae:	68fa      	ldr	r2, [r7, #12]
 800fbb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fbb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fbb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fbba:	2300      	movs	r3, #0
}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	3714      	adds	r7, #20
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc6:	4770      	bx	lr
 800fbc8:	fffff800 	.word	0xfffff800

0800fbcc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800fbcc:	b480      	push	{r7}
 800fbce:	b087      	sub	sp, #28
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	60f8      	str	r0, [r7, #12]
 800fbd4:	460b      	mov	r3, r1
 800fbd6:	607a      	str	r2, [r7, #4]
 800fbd8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	333c      	adds	r3, #60	; 0x3c
 800fbe2:	3304      	adds	r3, #4
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800fbe8:	693b      	ldr	r3, [r7, #16]
 800fbea:	4a26      	ldr	r2, [pc, #152]	; (800fc84 <USB_EP0_OutStart+0xb8>)
 800fbec:	4293      	cmp	r3, r2
 800fbee:	d90a      	bls.n	800fc06 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fbf0:	697b      	ldr	r3, [r7, #20]
 800fbf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fbfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fc00:	d101      	bne.n	800fc06 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800fc02:	2300      	movs	r3, #0
 800fc04:	e037      	b.n	800fc76 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800fc06:	697b      	ldr	r3, [r7, #20]
 800fc08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc0c:	461a      	mov	r2, r3
 800fc0e:	2300      	movs	r3, #0
 800fc10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fc12:	697b      	ldr	r3, [r7, #20]
 800fc14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc18:	691b      	ldr	r3, [r3, #16]
 800fc1a:	697a      	ldr	r2, [r7, #20]
 800fc1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fc24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc2c:	691b      	ldr	r3, [r3, #16]
 800fc2e:	697a      	ldr	r2, [r7, #20]
 800fc30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc34:	f043 0318 	orr.w	r3, r3, #24
 800fc38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800fc3a:	697b      	ldr	r3, [r7, #20]
 800fc3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc40:	691b      	ldr	r3, [r3, #16]
 800fc42:	697a      	ldr	r2, [r7, #20]
 800fc44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc48:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800fc4c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800fc4e:	7afb      	ldrb	r3, [r7, #11]
 800fc50:	2b01      	cmp	r3, #1
 800fc52:	d10f      	bne.n	800fc74 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800fc54:	697b      	ldr	r3, [r7, #20]
 800fc56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc5a:	461a      	mov	r2, r3
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800fc60:	697b      	ldr	r3, [r7, #20]
 800fc62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	697a      	ldr	r2, [r7, #20]
 800fc6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc6e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800fc72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fc74:	2300      	movs	r3, #0
}
 800fc76:	4618      	mov	r0, r3
 800fc78:	371c      	adds	r7, #28
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc80:	4770      	bx	lr
 800fc82:	bf00      	nop
 800fc84:	4f54300a 	.word	0x4f54300a

0800fc88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800fc88:	b480      	push	{r7}
 800fc8a:	b085      	sub	sp, #20
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fc90:	2300      	movs	r3, #0
 800fc92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	3301      	adds	r3, #1
 800fc98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	4a13      	ldr	r2, [pc, #76]	; (800fcec <USB_CoreReset+0x64>)
 800fc9e:	4293      	cmp	r3, r2
 800fca0:	d901      	bls.n	800fca6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800fca2:	2303      	movs	r3, #3
 800fca4:	e01b      	b.n	800fcde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	691b      	ldr	r3, [r3, #16]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	daf2      	bge.n	800fc94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fcae:	2300      	movs	r3, #0
 800fcb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	691b      	ldr	r3, [r3, #16]
 800fcb6:	f043 0201 	orr.w	r2, r3, #1
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	3301      	adds	r3, #1
 800fcc2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	4a09      	ldr	r2, [pc, #36]	; (800fcec <USB_CoreReset+0x64>)
 800fcc8:	4293      	cmp	r3, r2
 800fcca:	d901      	bls.n	800fcd0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fccc:	2303      	movs	r3, #3
 800fcce:	e006      	b.n	800fcde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	691b      	ldr	r3, [r3, #16]
 800fcd4:	f003 0301 	and.w	r3, r3, #1
 800fcd8:	2b01      	cmp	r3, #1
 800fcda:	d0f0      	beq.n	800fcbe <USB_CoreReset+0x36>

  return HAL_OK;
 800fcdc:	2300      	movs	r3, #0
}
 800fcde:	4618      	mov	r0, r3
 800fce0:	3714      	adds	r7, #20
 800fce2:	46bd      	mov	sp, r7
 800fce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce8:	4770      	bx	lr
 800fcea:	bf00      	nop
 800fcec:	00030d40 	.word	0x00030d40

0800fcf0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800fcf4:	4904      	ldr	r1, [pc, #16]	; (800fd08 <MX_FATFS_Init+0x18>)
 800fcf6:	4805      	ldr	r0, [pc, #20]	; (800fd0c <MX_FATFS_Init+0x1c>)
 800fcf8:	f005 fa1e 	bl	8015138 <FATFS_LinkDriver>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	461a      	mov	r2, r3
 800fd00:	4b03      	ldr	r3, [pc, #12]	; (800fd10 <MX_FATFS_Init+0x20>)
 800fd02:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800fd04:	bf00      	nop
 800fd06:	bd80      	pop	{r7, pc}
 800fd08:	24016d3c 	.word	0x24016d3c
 800fd0c:	08025d5c 	.word	0x08025d5c
 800fd10:	24016d40 	.word	0x24016d40

0800fd14 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800fd14:	b480      	push	{r7}
 800fd16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800fd18:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd22:	4770      	bx	lr

0800fd24 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b082      	sub	sp, #8
 800fd28:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800fd2e:	f000 f89b 	bl	800fe68 <BSP_SD_IsDetected>
 800fd32:	4603      	mov	r3, r0
 800fd34:	2b01      	cmp	r3, #1
 800fd36:	d001      	beq.n	800fd3c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800fd38:	2302      	movs	r3, #2
 800fd3a:	e012      	b.n	800fd62 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800fd3c:	480b      	ldr	r0, [pc, #44]	; (800fd6c <BSP_SD_Init+0x48>)
 800fd3e:	f7f8 ff0f 	bl	8008b60 <HAL_SD_Init>
 800fd42:	4603      	mov	r3, r0
 800fd44:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800fd46:	79fb      	ldrb	r3, [r7, #7]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d109      	bne.n	800fd60 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800fd4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800fd50:	4806      	ldr	r0, [pc, #24]	; (800fd6c <BSP_SD_Init+0x48>)
 800fd52:	f7f9 ff87 	bl	8009c64 <HAL_SD_ConfigWideBusOperation>
 800fd56:	4603      	mov	r3, r0
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d001      	beq.n	800fd60 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800fd5c:	2301      	movs	r3, #1
 800fd5e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800fd60:	79fb      	ldrb	r3, [r7, #7]
}
 800fd62:	4618      	mov	r0, r3
 800fd64:	3708      	adds	r7, #8
 800fd66:	46bd      	mov	sp, r7
 800fd68:	bd80      	pop	{r7, pc}
 800fd6a:	bf00      	nop
 800fd6c:	2401a240 	.word	0x2401a240

0800fd70 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b088      	sub	sp, #32
 800fd74:	af02      	add	r7, sp, #8
 800fd76:	60f8      	str	r0, [r7, #12]
 800fd78:	60b9      	str	r1, [r7, #8]
 800fd7a:	607a      	str	r2, [r7, #4]
 800fd7c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800fd7e:	2300      	movs	r3, #0
 800fd80:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	9300      	str	r3, [sp, #0]
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	68ba      	ldr	r2, [r7, #8]
 800fd8a:	68f9      	ldr	r1, [r7, #12]
 800fd8c:	4806      	ldr	r0, [pc, #24]	; (800fda8 <BSP_SD_ReadBlocks+0x38>)
 800fd8e:	f7f9 f801 	bl	8008d94 <HAL_SD_ReadBlocks>
 800fd92:	4603      	mov	r3, r0
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d001      	beq.n	800fd9c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800fd98:	2301      	movs	r3, #1
 800fd9a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fd9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd9e:	4618      	mov	r0, r3
 800fda0:	3718      	adds	r7, #24
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}
 800fda6:	bf00      	nop
 800fda8:	2401a240 	.word	0x2401a240

0800fdac <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b088      	sub	sp, #32
 800fdb0:	af02      	add	r7, sp, #8
 800fdb2:	60f8      	str	r0, [r7, #12]
 800fdb4:	60b9      	str	r1, [r7, #8]
 800fdb6:	607a      	str	r2, [r7, #4]
 800fdb8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800fdba:	2300      	movs	r3, #0
 800fdbc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800fdbe:	683b      	ldr	r3, [r7, #0]
 800fdc0:	9300      	str	r3, [sp, #0]
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	68ba      	ldr	r2, [r7, #8]
 800fdc6:	68f9      	ldr	r1, [r7, #12]
 800fdc8:	4806      	ldr	r0, [pc, #24]	; (800fde4 <BSP_SD_WriteBlocks+0x38>)
 800fdca:	f7f9 f96d 	bl	80090a8 <HAL_SD_WriteBlocks>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d001      	beq.n	800fdd8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800fdd4:	2301      	movs	r3, #1
 800fdd6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fdd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdda:	4618      	mov	r0, r3
 800fddc:	3718      	adds	r7, #24
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}
 800fde2:	bf00      	nop
 800fde4:	2401a240 	.word	0x2401a240

0800fde8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800fdec:	4805      	ldr	r0, [pc, #20]	; (800fe04 <BSP_SD_GetCardState+0x1c>)
 800fdee:	f7fa f84b 	bl	8009e88 <HAL_SD_GetCardState>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	2b04      	cmp	r3, #4
 800fdf6:	bf14      	ite	ne
 800fdf8:	2301      	movne	r3, #1
 800fdfa:	2300      	moveq	r3, #0
 800fdfc:	b2db      	uxtb	r3, r3
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	bd80      	pop	{r7, pc}
 800fe02:	bf00      	nop
 800fe04:	2401a240 	.word	0x2401a240

0800fe08 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b082      	sub	sp, #8
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800fe10:	6879      	ldr	r1, [r7, #4]
 800fe12:	4803      	ldr	r0, [pc, #12]	; (800fe20 <BSP_SD_GetCardInfo+0x18>)
 800fe14:	f7f9 fefa 	bl	8009c0c <HAL_SD_GetCardInfo>
}
 800fe18:	bf00      	nop
 800fe1a:	3708      	adds	r7, #8
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}
 800fe20:	2401a240 	.word	0x2401a240

0800fe24 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b082      	sub	sp, #8
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800fe2c:	f000 f80e 	bl	800fe4c <BSP_SD_WriteCpltCallback>
}
 800fe30:	bf00      	nop
 800fe32:	3708      	adds	r7, #8
 800fe34:	46bd      	mov	sp, r7
 800fe36:	bd80      	pop	{r7, pc}

0800fe38 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b082      	sub	sp, #8
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800fe40:	f000 f80b 	bl	800fe5a <BSP_SD_ReadCpltCallback>
}
 800fe44:	bf00      	nop
 800fe46:	3708      	adds	r7, #8
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	bd80      	pop	{r7, pc}

0800fe4c <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800fe4c:	b480      	push	{r7}
 800fe4e:	af00      	add	r7, sp, #0

}
 800fe50:	bf00      	nop
 800fe52:	46bd      	mov	sp, r7
 800fe54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe58:	4770      	bx	lr

0800fe5a <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800fe5a:	b480      	push	{r7}
 800fe5c:	af00      	add	r7, sp, #0

}
 800fe5e:	bf00      	nop
 800fe60:	46bd      	mov	sp, r7
 800fe62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe66:	4770      	bx	lr

0800fe68 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800fe68:	b480      	push	{r7}
 800fe6a:	b083      	sub	sp, #12
 800fe6c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800fe6e:	2301      	movs	r3, #1
 800fe70:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800fe72:	79fb      	ldrb	r3, [r7, #7]
 800fe74:	b2db      	uxtb	r3, r3
}
 800fe76:	4618      	mov	r0, r3
 800fe78:	370c      	adds	r7, #12
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe80:	4770      	bx	lr
	...

0800fe84 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b082      	sub	sp, #8
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800fe8e:	4b0b      	ldr	r3, [pc, #44]	; (800febc <SD_CheckStatus+0x38>)
 800fe90:	2201      	movs	r2, #1
 800fe92:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800fe94:	f7ff ffa8 	bl	800fde8 <BSP_SD_GetCardState>
 800fe98:	4603      	mov	r3, r0
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d107      	bne.n	800feae <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800fe9e:	4b07      	ldr	r3, [pc, #28]	; (800febc <SD_CheckStatus+0x38>)
 800fea0:	781b      	ldrb	r3, [r3, #0]
 800fea2:	b2db      	uxtb	r3, r3
 800fea4:	f023 0301 	bic.w	r3, r3, #1
 800fea8:	b2da      	uxtb	r2, r3
 800feaa:	4b04      	ldr	r3, [pc, #16]	; (800febc <SD_CheckStatus+0x38>)
 800feac:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800feae:	4b03      	ldr	r3, [pc, #12]	; (800febc <SD_CheckStatus+0x38>)
 800feb0:	781b      	ldrb	r3, [r3, #0]
 800feb2:	b2db      	uxtb	r3, r3
}
 800feb4:	4618      	mov	r0, r3
 800feb6:	3708      	adds	r7, #8
 800feb8:	46bd      	mov	sp, r7
 800feba:	bd80      	pop	{r7, pc}
 800febc:	2400000d 	.word	0x2400000d

0800fec0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b082      	sub	sp, #8
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	4603      	mov	r3, r0
 800fec8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800feca:	4b0b      	ldr	r3, [pc, #44]	; (800fef8 <SD_initialize+0x38>)
 800fecc:	2201      	movs	r2, #1
 800fece:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800fed0:	f7ff ff28 	bl	800fd24 <BSP_SD_Init>
 800fed4:	4603      	mov	r3, r0
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d107      	bne.n	800feea <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800feda:	79fb      	ldrb	r3, [r7, #7]
 800fedc:	4618      	mov	r0, r3
 800fede:	f7ff ffd1 	bl	800fe84 <SD_CheckStatus>
 800fee2:	4603      	mov	r3, r0
 800fee4:	461a      	mov	r2, r3
 800fee6:	4b04      	ldr	r3, [pc, #16]	; (800fef8 <SD_initialize+0x38>)
 800fee8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800feea:	4b03      	ldr	r3, [pc, #12]	; (800fef8 <SD_initialize+0x38>)
 800feec:	781b      	ldrb	r3, [r3, #0]
 800feee:	b2db      	uxtb	r3, r3
}
 800fef0:	4618      	mov	r0, r3
 800fef2:	3708      	adds	r7, #8
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}
 800fef8:	2400000d 	.word	0x2400000d

0800fefc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b082      	sub	sp, #8
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	4603      	mov	r3, r0
 800ff04:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ff06:	79fb      	ldrb	r3, [r7, #7]
 800ff08:	4618      	mov	r0, r3
 800ff0a:	f7ff ffbb 	bl	800fe84 <SD_CheckStatus>
 800ff0e:	4603      	mov	r3, r0
}
 800ff10:	4618      	mov	r0, r3
 800ff12:	3708      	adds	r7, #8
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}

0800ff18 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b086      	sub	sp, #24
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	60b9      	str	r1, [r7, #8]
 800ff20:	607a      	str	r2, [r7, #4]
 800ff22:	603b      	str	r3, [r7, #0]
 800ff24:	4603      	mov	r3, r0
 800ff26:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ff28:	2301      	movs	r3, #1
 800ff2a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800ff2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ff30:	683a      	ldr	r2, [r7, #0]
 800ff32:	6879      	ldr	r1, [r7, #4]
 800ff34:	68b8      	ldr	r0, [r7, #8]
 800ff36:	f7ff ff1b 	bl	800fd70 <BSP_SD_ReadBlocks>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d107      	bne.n	800ff50 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ff40:	bf00      	nop
 800ff42:	f7ff ff51 	bl	800fde8 <BSP_SD_GetCardState>
 800ff46:	4603      	mov	r3, r0
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d1fa      	bne.n	800ff42 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ff50:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff52:	4618      	mov	r0, r3
 800ff54:	3718      	adds	r7, #24
 800ff56:	46bd      	mov	sp, r7
 800ff58:	bd80      	pop	{r7, pc}

0800ff5a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ff5a:	b580      	push	{r7, lr}
 800ff5c:	b086      	sub	sp, #24
 800ff5e:	af00      	add	r7, sp, #0
 800ff60:	60b9      	str	r1, [r7, #8]
 800ff62:	607a      	str	r2, [r7, #4]
 800ff64:	603b      	str	r3, [r7, #0]
 800ff66:	4603      	mov	r3, r0
 800ff68:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ff6a:	2301      	movs	r3, #1
 800ff6c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ff6e:	f04f 33ff 	mov.w	r3, #4294967295
 800ff72:	683a      	ldr	r2, [r7, #0]
 800ff74:	6879      	ldr	r1, [r7, #4]
 800ff76:	68b8      	ldr	r0, [r7, #8]
 800ff78:	f7ff ff18 	bl	800fdac <BSP_SD_WriteBlocks>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d107      	bne.n	800ff92 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800ff82:	bf00      	nop
 800ff84:	f7ff ff30 	bl	800fde8 <BSP_SD_GetCardState>
 800ff88:	4603      	mov	r3, r0
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d1fa      	bne.n	800ff84 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800ff8e:	2300      	movs	r3, #0
 800ff90:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ff92:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff94:	4618      	mov	r0, r3
 800ff96:	3718      	adds	r7, #24
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	bd80      	pop	{r7, pc}

0800ff9c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b08c      	sub	sp, #48	; 0x30
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	603a      	str	r2, [r7, #0]
 800ffa6:	71fb      	strb	r3, [r7, #7]
 800ffa8:	460b      	mov	r3, r1
 800ffaa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ffac:	2301      	movs	r3, #1
 800ffae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ffb2:	4b25      	ldr	r3, [pc, #148]	; (8010048 <SD_ioctl+0xac>)
 800ffb4:	781b      	ldrb	r3, [r3, #0]
 800ffb6:	b2db      	uxtb	r3, r3
 800ffb8:	f003 0301 	and.w	r3, r3, #1
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d001      	beq.n	800ffc4 <SD_ioctl+0x28>
 800ffc0:	2303      	movs	r3, #3
 800ffc2:	e03c      	b.n	801003e <SD_ioctl+0xa2>

  switch (cmd)
 800ffc4:	79bb      	ldrb	r3, [r7, #6]
 800ffc6:	2b03      	cmp	r3, #3
 800ffc8:	d834      	bhi.n	8010034 <SD_ioctl+0x98>
 800ffca:	a201      	add	r2, pc, #4	; (adr r2, 800ffd0 <SD_ioctl+0x34>)
 800ffcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffd0:	0800ffe1 	.word	0x0800ffe1
 800ffd4:	0800ffe9 	.word	0x0800ffe9
 800ffd8:	08010001 	.word	0x08010001
 800ffdc:	0801001b 	.word	0x0801001b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ffe6:	e028      	b.n	801003a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ffe8:	f107 0308 	add.w	r3, r7, #8
 800ffec:	4618      	mov	r0, r3
 800ffee:	f7ff ff0b 	bl	800fe08 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800fff2:	6a3a      	ldr	r2, [r7, #32]
 800fff4:	683b      	ldr	r3, [r7, #0]
 800fff6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800fff8:	2300      	movs	r3, #0
 800fffa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fffe:	e01c      	b.n	801003a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010000:	f107 0308 	add.w	r3, r7, #8
 8010004:	4618      	mov	r0, r3
 8010006:	f7ff feff 	bl	800fe08 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801000a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801000c:	b29a      	uxth	r2, r3
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010012:	2300      	movs	r3, #0
 8010014:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010018:	e00f      	b.n	801003a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801001a:	f107 0308 	add.w	r3, r7, #8
 801001e:	4618      	mov	r0, r3
 8010020:	f7ff fef2 	bl	800fe08 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010026:	0a5a      	lsrs	r2, r3, #9
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801002c:	2300      	movs	r3, #0
 801002e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010032:	e002      	b.n	801003a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010034:	2304      	movs	r3, #4
 8010036:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801003a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801003e:	4618      	mov	r0, r3
 8010040:	3730      	adds	r7, #48	; 0x30
 8010042:	46bd      	mov	sp, r7
 8010044:	bd80      	pop	{r7, pc}
 8010046:	bf00      	nop
 8010048:	2400000d 	.word	0x2400000d

0801004c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b082      	sub	sp, #8
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8010054:	4b04      	ldr	r3, [pc, #16]	; (8010068 <HAL_ETH_RxCpltCallback+0x1c>)
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	4618      	mov	r0, r3
 801005a:	f005 fa09 	bl	8015470 <osSemaphoreRelease>
}
 801005e:	bf00      	nop
 8010060:	3708      	adds	r7, #8
 8010062:	46bd      	mov	sp, r7
 8010064:	bd80      	pop	{r7, pc}
 8010066:	bf00      	nop
 8010068:	24001090 	.word	0x24001090

0801006c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 801006c:	b580      	push	{r7, lr}
 801006e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8010070:	f7f1 f86a 	bl	8001148 <HAL_GetTick>
 8010074:	4603      	mov	r3, r0
}
 8010076:	4618      	mov	r0, r3
 8010078:	bd80      	pop	{r7, pc}
	...

0801007c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b084      	sub	sp, #16
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
 8010084:	460b      	mov	r3, r1
 8010086:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8010088:	f44f 701d 	mov.w	r0, #628	; 0x274
 801008c:	f010 ff14 	bl	8020eb8 <USBD_static_malloc>
 8010090:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d109      	bne.n	80100ac <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	32b0      	adds	r2, #176	; 0xb0
 80100a2:	2100      	movs	r1, #0
 80100a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80100a8:	2302      	movs	r3, #2
 80100aa:	e06e      	b.n	801018a <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	32b0      	adds	r2, #176	; 0xb0
 80100b6:	68f9      	ldr	r1, [r7, #12]
 80100b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	32b0      	adds	r2, #176	; 0xb0
 80100c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	7c1b      	ldrb	r3, [r3, #16]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d12b      	bne.n	8010130 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80100d8:	4b2e      	ldr	r3, [pc, #184]	; (8010194 <USBD_MSC_Init+0x118>)
 80100da:	7819      	ldrb	r1, [r3, #0]
 80100dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80100e0:	2202      	movs	r2, #2
 80100e2:	6878      	ldr	r0, [r7, #4]
 80100e4:	f010 fda5 	bl	8020c32 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 80100e8:	4b2a      	ldr	r3, [pc, #168]	; (8010194 <USBD_MSC_Init+0x118>)
 80100ea:	781b      	ldrb	r3, [r3, #0]
 80100ec:	f003 020f 	and.w	r2, r3, #15
 80100f0:	6879      	ldr	r1, [r7, #4]
 80100f2:	4613      	mov	r3, r2
 80100f4:	009b      	lsls	r3, r3, #2
 80100f6:	4413      	add	r3, r2
 80100f8:	009b      	lsls	r3, r3, #2
 80100fa:	440b      	add	r3, r1
 80100fc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010100:	2201      	movs	r2, #1
 8010102:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8010104:	4b24      	ldr	r3, [pc, #144]	; (8010198 <USBD_MSC_Init+0x11c>)
 8010106:	7819      	ldrb	r1, [r3, #0]
 8010108:	f44f 7300 	mov.w	r3, #512	; 0x200
 801010c:	2202      	movs	r2, #2
 801010e:	6878      	ldr	r0, [r7, #4]
 8010110:	f010 fd8f 	bl	8020c32 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8010114:	4b20      	ldr	r3, [pc, #128]	; (8010198 <USBD_MSC_Init+0x11c>)
 8010116:	781b      	ldrb	r3, [r3, #0]
 8010118:	f003 020f 	and.w	r2, r3, #15
 801011c:	6879      	ldr	r1, [r7, #4]
 801011e:	4613      	mov	r3, r2
 8010120:	009b      	lsls	r3, r3, #2
 8010122:	4413      	add	r3, r2
 8010124:	009b      	lsls	r3, r3, #2
 8010126:	440b      	add	r3, r1
 8010128:	3324      	adds	r3, #36	; 0x24
 801012a:	2201      	movs	r2, #1
 801012c:	801a      	strh	r2, [r3, #0]
 801012e:	e028      	b.n	8010182 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8010130:	4b18      	ldr	r3, [pc, #96]	; (8010194 <USBD_MSC_Init+0x118>)
 8010132:	7819      	ldrb	r1, [r3, #0]
 8010134:	2340      	movs	r3, #64	; 0x40
 8010136:	2202      	movs	r2, #2
 8010138:	6878      	ldr	r0, [r7, #4]
 801013a:	f010 fd7a 	bl	8020c32 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 801013e:	4b15      	ldr	r3, [pc, #84]	; (8010194 <USBD_MSC_Init+0x118>)
 8010140:	781b      	ldrb	r3, [r3, #0]
 8010142:	f003 020f 	and.w	r2, r3, #15
 8010146:	6879      	ldr	r1, [r7, #4]
 8010148:	4613      	mov	r3, r2
 801014a:	009b      	lsls	r3, r3, #2
 801014c:	4413      	add	r3, r2
 801014e:	009b      	lsls	r3, r3, #2
 8010150:	440b      	add	r3, r1
 8010152:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010156:	2201      	movs	r2, #1
 8010158:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801015a:	4b0f      	ldr	r3, [pc, #60]	; (8010198 <USBD_MSC_Init+0x11c>)
 801015c:	7819      	ldrb	r1, [r3, #0]
 801015e:	2340      	movs	r3, #64	; 0x40
 8010160:	2202      	movs	r2, #2
 8010162:	6878      	ldr	r0, [r7, #4]
 8010164:	f010 fd65 	bl	8020c32 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8010168:	4b0b      	ldr	r3, [pc, #44]	; (8010198 <USBD_MSC_Init+0x11c>)
 801016a:	781b      	ldrb	r3, [r3, #0]
 801016c:	f003 020f 	and.w	r2, r3, #15
 8010170:	6879      	ldr	r1, [r7, #4]
 8010172:	4613      	mov	r3, r2
 8010174:	009b      	lsls	r3, r3, #2
 8010176:	4413      	add	r3, r2
 8010178:	009b      	lsls	r3, r3, #2
 801017a:	440b      	add	r3, r1
 801017c:	3324      	adds	r3, #36	; 0x24
 801017e:	2201      	movs	r2, #1
 8010180:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f000 fa2c 	bl	80105e0 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8010188:	2300      	movs	r3, #0
}
 801018a:	4618      	mov	r0, r3
 801018c:	3710      	adds	r7, #16
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}
 8010192:	bf00      	nop
 8010194:	24000073 	.word	0x24000073
 8010198:	24000072 	.word	0x24000072

0801019c <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b082      	sub	sp, #8
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
 80101a4:	460b      	mov	r3, r1
 80101a6:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 80101a8:	4b26      	ldr	r3, [pc, #152]	; (8010244 <USBD_MSC_DeInit+0xa8>)
 80101aa:	781b      	ldrb	r3, [r3, #0]
 80101ac:	4619      	mov	r1, r3
 80101ae:	6878      	ldr	r0, [r7, #4]
 80101b0:	f010 fd65 	bl	8020c7e <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 80101b4:	4b23      	ldr	r3, [pc, #140]	; (8010244 <USBD_MSC_DeInit+0xa8>)
 80101b6:	781b      	ldrb	r3, [r3, #0]
 80101b8:	f003 020f 	and.w	r2, r3, #15
 80101bc:	6879      	ldr	r1, [r7, #4]
 80101be:	4613      	mov	r3, r2
 80101c0:	009b      	lsls	r3, r3, #2
 80101c2:	4413      	add	r3, r2
 80101c4:	009b      	lsls	r3, r3, #2
 80101c6:	440b      	add	r3, r1
 80101c8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80101cc:	2200      	movs	r2, #0
 80101ce:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 80101d0:	4b1d      	ldr	r3, [pc, #116]	; (8010248 <USBD_MSC_DeInit+0xac>)
 80101d2:	781b      	ldrb	r3, [r3, #0]
 80101d4:	4619      	mov	r1, r3
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	f010 fd51 	bl	8020c7e <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 80101dc:	4b1a      	ldr	r3, [pc, #104]	; (8010248 <USBD_MSC_DeInit+0xac>)
 80101de:	781b      	ldrb	r3, [r3, #0]
 80101e0:	f003 020f 	and.w	r2, r3, #15
 80101e4:	6879      	ldr	r1, [r7, #4]
 80101e6:	4613      	mov	r3, r2
 80101e8:	009b      	lsls	r3, r3, #2
 80101ea:	4413      	add	r3, r2
 80101ec:	009b      	lsls	r3, r3, #2
 80101ee:	440b      	add	r3, r1
 80101f0:	3324      	adds	r3, #36	; 0x24
 80101f2:	2200      	movs	r2, #0
 80101f4:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	32b0      	adds	r2, #176	; 0xb0
 8010200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d018      	beq.n	801023a <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8010208:	6878      	ldr	r0, [r7, #4]
 801020a:	f000 fa67 	bl	80106dc <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	32b0      	adds	r2, #176	; 0xb0
 8010218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801021c:	4618      	mov	r0, r3
 801021e:	f010 fe59 	bl	8020ed4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	32b0      	adds	r2, #176	; 0xb0
 801022c:	2100      	movs	r1, #0
 801022e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	2200      	movs	r2, #0
 8010236:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801023a:	2300      	movs	r3, #0
}
 801023c:	4618      	mov	r0, r3
 801023e:	3708      	adds	r7, #8
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}
 8010244:	24000073 	.word	0x24000073
 8010248:	24000072 	.word	0x24000072

0801024c <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b086      	sub	sp, #24
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
 8010254:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	32b0      	adds	r2, #176	; 0xb0
 8010260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010264:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8010266:	2300      	movs	r3, #0
 8010268:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 801026a:	2300      	movs	r3, #0
 801026c:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801026e:	693b      	ldr	r3, [r7, #16]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d101      	bne.n	8010278 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8010274:	2303      	movs	r3, #3
 8010276:	e0e1      	b.n	801043c <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010278:	683b      	ldr	r3, [r7, #0]
 801027a:	781b      	ldrb	r3, [r3, #0]
 801027c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010280:	2b00      	cmp	r3, #0
 8010282:	d053      	beq.n	801032c <USBD_MSC_Setup+0xe0>
 8010284:	2b20      	cmp	r3, #32
 8010286:	f040 80d1 	bne.w	801042c <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	785b      	ldrb	r3, [r3, #1]
 801028e:	2bfe      	cmp	r3, #254	; 0xfe
 8010290:	d002      	beq.n	8010298 <USBD_MSC_Setup+0x4c>
 8010292:	2bff      	cmp	r3, #255	; 0xff
 8010294:	d02a      	beq.n	80102ec <USBD_MSC_Setup+0xa0>
 8010296:	e041      	b.n	801031c <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8010298:	683b      	ldr	r3, [r7, #0]
 801029a:	885b      	ldrh	r3, [r3, #2]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d11e      	bne.n	80102de <USBD_MSC_Setup+0x92>
 80102a0:	683b      	ldr	r3, [r7, #0]
 80102a2:	88db      	ldrh	r3, [r3, #6]
 80102a4:	2b01      	cmp	r3, #1
 80102a6:	d11a      	bne.n	80102de <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	781b      	ldrb	r3, [r3, #0]
 80102ac:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	da15      	bge.n	80102de <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80102b8:	687a      	ldr	r2, [r7, #4]
 80102ba:	33b0      	adds	r3, #176	; 0xb0
 80102bc:	009b      	lsls	r3, r3, #2
 80102be:	4413      	add	r3, r2
 80102c0:	685b      	ldr	r3, [r3, #4]
 80102c2:	699b      	ldr	r3, [r3, #24]
 80102c4:	4798      	blx	r3
 80102c6:	4603      	mov	r3, r0
 80102c8:	461a      	mov	r2, r3
 80102ca:	693b      	ldr	r3, [r7, #16]
 80102cc:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 80102ce:	693b      	ldr	r3, [r7, #16]
 80102d0:	2201      	movs	r2, #1
 80102d2:	4619      	mov	r1, r3
 80102d4:	6878      	ldr	r0, [r7, #4]
 80102d6:	f003 f8f9 	bl	80134cc <USBD_CtlSendData>
 80102da:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80102dc:	e025      	b.n	801032a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 80102de:	6839      	ldr	r1, [r7, #0]
 80102e0:	6878      	ldr	r0, [r7, #4]
 80102e2:	f003 f882 	bl	80133ea <USBD_CtlError>
            ret = USBD_FAIL;
 80102e6:	2303      	movs	r3, #3
 80102e8:	75fb      	strb	r3, [r7, #23]
          break;
 80102ea:	e01e      	b.n	801032a <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80102ec:	683b      	ldr	r3, [r7, #0]
 80102ee:	885b      	ldrh	r3, [r3, #2]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d10c      	bne.n	801030e <USBD_MSC_Setup+0xc2>
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	88db      	ldrh	r3, [r3, #6]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d108      	bne.n	801030e <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 80102fc:	683b      	ldr	r3, [r7, #0]
 80102fe:	781b      	ldrb	r3, [r3, #0]
 8010300:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8010302:	2b00      	cmp	r3, #0
 8010304:	db03      	blt.n	801030e <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8010306:	6878      	ldr	r0, [r7, #4]
 8010308:	f000 f9b4 	bl	8010674 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801030c:	e00d      	b.n	801032a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 801030e:	6839      	ldr	r1, [r7, #0]
 8010310:	6878      	ldr	r0, [r7, #4]
 8010312:	f003 f86a 	bl	80133ea <USBD_CtlError>
            ret = USBD_FAIL;
 8010316:	2303      	movs	r3, #3
 8010318:	75fb      	strb	r3, [r7, #23]
          break;
 801031a:	e006      	b.n	801032a <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 801031c:	6839      	ldr	r1, [r7, #0]
 801031e:	6878      	ldr	r0, [r7, #4]
 8010320:	f003 f863 	bl	80133ea <USBD_CtlError>
          ret = USBD_FAIL;
 8010324:	2303      	movs	r3, #3
 8010326:	75fb      	strb	r3, [r7, #23]
          break;
 8010328:	bf00      	nop
      }
      break;
 801032a:	e086      	b.n	801043a <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	785b      	ldrb	r3, [r3, #1]
 8010330:	2b0b      	cmp	r3, #11
 8010332:	d872      	bhi.n	801041a <USBD_MSC_Setup+0x1ce>
 8010334:	a201      	add	r2, pc, #4	; (adr r2, 801033c <USBD_MSC_Setup+0xf0>)
 8010336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801033a:	bf00      	nop
 801033c:	0801036d 	.word	0x0801036d
 8010340:	080103e9 	.word	0x080103e9
 8010344:	0801041b 	.word	0x0801041b
 8010348:	0801041b 	.word	0x0801041b
 801034c:	0801041b 	.word	0x0801041b
 8010350:	0801041b 	.word	0x0801041b
 8010354:	0801041b 	.word	0x0801041b
 8010358:	0801041b 	.word	0x0801041b
 801035c:	0801041b 	.word	0x0801041b
 8010360:	0801041b 	.word	0x0801041b
 8010364:	08010397 	.word	0x08010397
 8010368:	080103c1 	.word	0x080103c1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010372:	b2db      	uxtb	r3, r3
 8010374:	2b03      	cmp	r3, #3
 8010376:	d107      	bne.n	8010388 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010378:	f107 030e 	add.w	r3, r7, #14
 801037c:	2202      	movs	r2, #2
 801037e:	4619      	mov	r1, r3
 8010380:	6878      	ldr	r0, [r7, #4]
 8010382:	f003 f8a3 	bl	80134cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010386:	e050      	b.n	801042a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8010388:	6839      	ldr	r1, [r7, #0]
 801038a:	6878      	ldr	r0, [r7, #4]
 801038c:	f003 f82d 	bl	80133ea <USBD_CtlError>
            ret = USBD_FAIL;
 8010390:	2303      	movs	r3, #3
 8010392:	75fb      	strb	r3, [r7, #23]
          break;
 8010394:	e049      	b.n	801042a <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801039c:	b2db      	uxtb	r3, r3
 801039e:	2b03      	cmp	r3, #3
 80103a0:	d107      	bne.n	80103b2 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80103a2:	693b      	ldr	r3, [r7, #16]
 80103a4:	3304      	adds	r3, #4
 80103a6:	2201      	movs	r2, #1
 80103a8:	4619      	mov	r1, r3
 80103aa:	6878      	ldr	r0, [r7, #4]
 80103ac:	f003 f88e 	bl	80134cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80103b0:	e03b      	b.n	801042a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80103b2:	6839      	ldr	r1, [r7, #0]
 80103b4:	6878      	ldr	r0, [r7, #4]
 80103b6:	f003 f818 	bl	80133ea <USBD_CtlError>
            ret = USBD_FAIL;
 80103ba:	2303      	movs	r3, #3
 80103bc:	75fb      	strb	r3, [r7, #23]
          break;
 80103be:	e034      	b.n	801042a <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80103c6:	b2db      	uxtb	r3, r3
 80103c8:	2b03      	cmp	r3, #3
 80103ca:	d106      	bne.n	80103da <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 80103cc:	683b      	ldr	r3, [r7, #0]
 80103ce:	885b      	ldrh	r3, [r3, #2]
 80103d0:	b2db      	uxtb	r3, r3
 80103d2:	461a      	mov	r2, r3
 80103d4:	693b      	ldr	r3, [r7, #16]
 80103d6:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80103d8:	e027      	b.n	801042a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80103da:	6839      	ldr	r1, [r7, #0]
 80103dc:	6878      	ldr	r0, [r7, #4]
 80103de:	f003 f804 	bl	80133ea <USBD_CtlError>
            ret = USBD_FAIL;
 80103e2:	2303      	movs	r3, #3
 80103e4:	75fb      	strb	r3, [r7, #23]
          break;
 80103e6:	e020      	b.n	801042a <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80103ee:	b2db      	uxtb	r3, r3
 80103f0:	2b03      	cmp	r3, #3
 80103f2:	d119      	bne.n	8010428 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	885b      	ldrh	r3, [r3, #2]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d115      	bne.n	8010428 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80103fc:	683b      	ldr	r3, [r7, #0]
 80103fe:	889b      	ldrh	r3, [r3, #4]
 8010400:	b2db      	uxtb	r3, r3
 8010402:	4619      	mov	r1, r3
 8010404:	6878      	ldr	r0, [r7, #4]
 8010406:	f010 fc59 	bl	8020cbc <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	889b      	ldrh	r3, [r3, #4]
 801040e:	b2db      	uxtb	r3, r3
 8010410:	4619      	mov	r1, r3
 8010412:	6878      	ldr	r0, [r7, #4]
 8010414:	f000 fb2e 	bl	8010a74 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8010418:	e006      	b.n	8010428 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 801041a:	6839      	ldr	r1, [r7, #0]
 801041c:	6878      	ldr	r0, [r7, #4]
 801041e:	f002 ffe4 	bl	80133ea <USBD_CtlError>
          ret = USBD_FAIL;
 8010422:	2303      	movs	r3, #3
 8010424:	75fb      	strb	r3, [r7, #23]
          break;
 8010426:	e000      	b.n	801042a <USBD_MSC_Setup+0x1de>
          break;
 8010428:	bf00      	nop
      }
      break;
 801042a:	e006      	b.n	801043a <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 801042c:	6839      	ldr	r1, [r7, #0]
 801042e:	6878      	ldr	r0, [r7, #4]
 8010430:	f002 ffdb 	bl	80133ea <USBD_CtlError>
      ret = USBD_FAIL;
 8010434:	2303      	movs	r3, #3
 8010436:	75fb      	strb	r3, [r7, #23]
      break;
 8010438:	bf00      	nop
  }

  return (uint8_t)ret;
 801043a:	7dfb      	ldrb	r3, [r7, #23]
}
 801043c:	4618      	mov	r0, r3
 801043e:	3718      	adds	r7, #24
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}

08010444 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b082      	sub	sp, #8
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
 801044c:	460b      	mov	r3, r1
 801044e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8010450:	78fb      	ldrb	r3, [r7, #3]
 8010452:	4619      	mov	r1, r3
 8010454:	6878      	ldr	r0, [r7, #4]
 8010456:	f000 f959 	bl	801070c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801045a:	2300      	movs	r3, #0
}
 801045c:	4618      	mov	r0, r3
 801045e:	3708      	adds	r7, #8
 8010460:	46bd      	mov	sp, r7
 8010462:	bd80      	pop	{r7, pc}

08010464 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b082      	sub	sp, #8
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
 801046c:	460b      	mov	r3, r1
 801046e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8010470:	78fb      	ldrb	r3, [r7, #3]
 8010472:	4619      	mov	r1, r3
 8010474:	6878      	ldr	r0, [r7, #4]
 8010476:	f000 f983 	bl	8010780 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 801047a:	2300      	movs	r3, #0
}
 801047c:	4618      	mov	r0, r3
 801047e:	3708      	adds	r7, #8
 8010480:	46bd      	mov	sp, r7
 8010482:	bd80      	pop	{r7, pc}

08010484 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b084      	sub	sp, #16
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 801048c:	2181      	movs	r1, #129	; 0x81
 801048e:	4812      	ldr	r0, [pc, #72]	; (80104d8 <USBD_MSC_GetHSCfgDesc+0x54>)
 8010490:	f002 f972 	bl	8012778 <USBD_GetEpDesc>
 8010494:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8010496:	2101      	movs	r1, #1
 8010498:	480f      	ldr	r0, [pc, #60]	; (80104d8 <USBD_MSC_GetHSCfgDesc+0x54>)
 801049a:	f002 f96d 	bl	8012778 <USBD_GetEpDesc>
 801049e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d006      	beq.n	80104b4 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	2200      	movs	r2, #0
 80104aa:	711a      	strb	r2, [r3, #4]
 80104ac:	2200      	movs	r2, #0
 80104ae:	f042 0202 	orr.w	r2, r2, #2
 80104b2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80104b4:	68bb      	ldr	r3, [r7, #8]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d006      	beq.n	80104c8 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80104ba:	68bb      	ldr	r3, [r7, #8]
 80104bc:	2200      	movs	r2, #0
 80104be:	711a      	strb	r2, [r3, #4]
 80104c0:	2200      	movs	r2, #0
 80104c2:	f042 0202 	orr.w	r2, r2, #2
 80104c6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	2220      	movs	r2, #32
 80104cc:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80104ce:	4b02      	ldr	r3, [pc, #8]	; (80104d8 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 80104d0:	4618      	mov	r0, r3
 80104d2:	3710      	adds	r7, #16
 80104d4:	46bd      	mov	sp, r7
 80104d6:	bd80      	pop	{r7, pc}
 80104d8:	24000048 	.word	0x24000048

080104dc <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b084      	sub	sp, #16
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80104e4:	2181      	movs	r1, #129	; 0x81
 80104e6:	4812      	ldr	r0, [pc, #72]	; (8010530 <USBD_MSC_GetFSCfgDesc+0x54>)
 80104e8:	f002 f946 	bl	8012778 <USBD_GetEpDesc>
 80104ec:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80104ee:	2101      	movs	r1, #1
 80104f0:	480f      	ldr	r0, [pc, #60]	; (8010530 <USBD_MSC_GetFSCfgDesc+0x54>)
 80104f2:	f002 f941 	bl	8012778 <USBD_GetEpDesc>
 80104f6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d006      	beq.n	801050c <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	2200      	movs	r2, #0
 8010502:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010506:	711a      	strb	r2, [r3, #4]
 8010508:	2200      	movs	r2, #0
 801050a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d006      	beq.n	8010520 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8010512:	68bb      	ldr	r3, [r7, #8]
 8010514:	2200      	movs	r2, #0
 8010516:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801051a:	711a      	strb	r2, [r3, #4]
 801051c:	2200      	movs	r2, #0
 801051e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	2220      	movs	r2, #32
 8010524:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8010526:	4b02      	ldr	r3, [pc, #8]	; (8010530 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8010528:	4618      	mov	r0, r3
 801052a:	3710      	adds	r7, #16
 801052c:	46bd      	mov	sp, r7
 801052e:	bd80      	pop	{r7, pc}
 8010530:	24000048 	.word	0x24000048

08010534 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b084      	sub	sp, #16
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 801053c:	2181      	movs	r1, #129	; 0x81
 801053e:	4812      	ldr	r0, [pc, #72]	; (8010588 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8010540:	f002 f91a 	bl	8012778 <USBD_GetEpDesc>
 8010544:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8010546:	2101      	movs	r1, #1
 8010548:	480f      	ldr	r0, [pc, #60]	; (8010588 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 801054a:	f002 f915 	bl	8012778 <USBD_GetEpDesc>
 801054e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d006      	beq.n	8010564 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	2200      	movs	r2, #0
 801055a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801055e:	711a      	strb	r2, [r3, #4]
 8010560:	2200      	movs	r2, #0
 8010562:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8010564:	68bb      	ldr	r3, [r7, #8]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d006      	beq.n	8010578 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 801056a:	68bb      	ldr	r3, [r7, #8]
 801056c:	2200      	movs	r2, #0
 801056e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010572:	711a      	strb	r2, [r3, #4]
 8010574:	2200      	movs	r2, #0
 8010576:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	2220      	movs	r2, #32
 801057c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 801057e:	4b02      	ldr	r3, [pc, #8]	; (8010588 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8010580:	4618      	mov	r0, r3
 8010582:	3710      	adds	r7, #16
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}
 8010588:	24000048 	.word	0x24000048

0801058c <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801058c:	b480      	push	{r7}
 801058e:	b083      	sub	sp, #12
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	220a      	movs	r2, #10
 8010598:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 801059a:	4b03      	ldr	r3, [pc, #12]	; (80105a8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 801059c:	4618      	mov	r0, r3
 801059e:	370c      	adds	r7, #12
 80105a0:	46bd      	mov	sp, r7
 80105a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a6:	4770      	bx	lr
 80105a8:	24000068 	.word	0x24000068

080105ac <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80105ac:	b480      	push	{r7}
 80105ae:	b083      	sub	sp, #12
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
 80105b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80105b6:	683b      	ldr	r3, [r7, #0]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d101      	bne.n	80105c0 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80105bc:	2303      	movs	r3, #3
 80105be:	e009      	b.n	80105d4 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80105c6:	687a      	ldr	r2, [r7, #4]
 80105c8:	33b0      	adds	r3, #176	; 0xb0
 80105ca:	009b      	lsls	r3, r3, #2
 80105cc:	4413      	add	r3, r2
 80105ce:	683a      	ldr	r2, [r7, #0]
 80105d0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80105d2:	2300      	movs	r3, #0
}
 80105d4:	4618      	mov	r0, r3
 80105d6:	370c      	adds	r7, #12
 80105d8:	46bd      	mov	sp, r7
 80105da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105de:	4770      	bx	lr

080105e0 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b084      	sub	sp, #16
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	32b0      	adds	r2, #176	; 0xb0
 80105f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105f6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d032      	beq.n	8010664 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	2200      	movs	r2, #0
 8010602:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	2200      	movs	r2, #0
 8010608:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	2200      	movs	r2, #0
 801060e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	2200      	movs	r2, #0
 8010616:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	2200      	movs	r2, #0
 801061e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010628:	687a      	ldr	r2, [r7, #4]
 801062a:	33b0      	adds	r3, #176	; 0xb0
 801062c:	009b      	lsls	r3, r3, #2
 801062e:	4413      	add	r3, r2
 8010630:	685b      	ldr	r3, [r3, #4]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	2000      	movs	r0, #0
 8010636:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8010638:	4b0c      	ldr	r3, [pc, #48]	; (801066c <MSC_BOT_Init+0x8c>)
 801063a:	781b      	ldrb	r3, [r3, #0]
 801063c:	4619      	mov	r1, r3
 801063e:	6878      	ldr	r0, [r7, #4]
 8010640:	f010 fb3c 	bl	8020cbc <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8010644:	4b0a      	ldr	r3, [pc, #40]	; (8010670 <MSC_BOT_Init+0x90>)
 8010646:	781b      	ldrb	r3, [r3, #0]
 8010648:	4619      	mov	r1, r3
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	f010 fb36 	bl	8020cbc <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8010650:	4b06      	ldr	r3, [pc, #24]	; (801066c <MSC_BOT_Init+0x8c>)
 8010652:	7819      	ldrb	r1, [r3, #0]
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801065a:	231f      	movs	r3, #31
 801065c:	6878      	ldr	r0, [r7, #4]
 801065e:	f010 fbf6 	bl	8020e4e <USBD_LL_PrepareReceive>
 8010662:	e000      	b.n	8010666 <MSC_BOT_Init+0x86>
    return;
 8010664:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8010666:	3710      	adds	r7, #16
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}
 801066c:	24000073 	.word	0x24000073
 8010670:	24000072 	.word	0x24000072

08010674 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b084      	sub	sp, #16
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	32b0      	adds	r2, #176	; 0xb0
 8010686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801068a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d01b      	beq.n	80106ca <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	2200      	movs	r2, #0
 8010696:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	2201      	movs	r2, #1
 801069c:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 801069e:	4b0d      	ldr	r3, [pc, #52]	; (80106d4 <MSC_BOT_Reset+0x60>)
 80106a0:	781b      	ldrb	r3, [r3, #0]
 80106a2:	4619      	mov	r1, r3
 80106a4:	6878      	ldr	r0, [r7, #4]
 80106a6:	f010 fb47 	bl	8020d38 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 80106aa:	4b0b      	ldr	r3, [pc, #44]	; (80106d8 <MSC_BOT_Reset+0x64>)
 80106ac:	781b      	ldrb	r3, [r3, #0]
 80106ae:	4619      	mov	r1, r3
 80106b0:	6878      	ldr	r0, [r7, #4]
 80106b2:	f010 fb41 	bl	8020d38 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80106b6:	4b08      	ldr	r3, [pc, #32]	; (80106d8 <MSC_BOT_Reset+0x64>)
 80106b8:	7819      	ldrb	r1, [r3, #0]
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80106c0:	231f      	movs	r3, #31
 80106c2:	6878      	ldr	r0, [r7, #4]
 80106c4:	f010 fbc3 	bl	8020e4e <USBD_LL_PrepareReceive>
 80106c8:	e000      	b.n	80106cc <MSC_BOT_Reset+0x58>
    return;
 80106ca:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80106cc:	3710      	adds	r7, #16
 80106ce:	46bd      	mov	sp, r7
 80106d0:	bd80      	pop	{r7, pc}
 80106d2:	bf00      	nop
 80106d4:	24000072 	.word	0x24000072
 80106d8:	24000073 	.word	0x24000073

080106dc <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80106dc:	b480      	push	{r7}
 80106de:	b085      	sub	sp, #20
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	32b0      	adds	r2, #176	; 0xb0
 80106ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106f2:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d002      	beq.n	8010700 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	2200      	movs	r2, #0
 80106fe:	721a      	strb	r2, [r3, #8]
  }
}
 8010700:	bf00      	nop
 8010702:	3714      	adds	r7, #20
 8010704:	46bd      	mov	sp, r7
 8010706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070a:	4770      	bx	lr

0801070c <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b084      	sub	sp, #16
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
 8010714:	460b      	mov	r3, r1
 8010716:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	32b0      	adds	r2, #176	; 0xb0
 8010722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010726:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d020      	beq.n	8010770 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	7a1b      	ldrb	r3, [r3, #8]
 8010732:	2b02      	cmp	r3, #2
 8010734:	d005      	beq.n	8010742 <MSC_BOT_DataIn+0x36>
 8010736:	2b02      	cmp	r3, #2
 8010738:	db1c      	blt.n	8010774 <MSC_BOT_DataIn+0x68>
 801073a:	3b03      	subs	r3, #3
 801073c:	2b01      	cmp	r3, #1
 801073e:	d819      	bhi.n	8010774 <MSC_BOT_DataIn+0x68>
 8010740:	e011      	b.n	8010766 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801074e:	461a      	mov	r2, r3
 8010750:	6878      	ldr	r0, [r7, #4]
 8010752:	f000 f9c9 	bl	8010ae8 <SCSI_ProcessCmd>
 8010756:	4603      	mov	r3, r0
 8010758:	2b00      	cmp	r3, #0
 801075a:	da0d      	bge.n	8010778 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801075c:	2101      	movs	r1, #1
 801075e:	6878      	ldr	r0, [r7, #4]
 8010760:	f000 f90c 	bl	801097c <MSC_BOT_SendCSW>
      }
      break;
 8010764:	e008      	b.n	8010778 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8010766:	2100      	movs	r1, #0
 8010768:	6878      	ldr	r0, [r7, #4]
 801076a:	f000 f907 	bl	801097c <MSC_BOT_SendCSW>
      break;
 801076e:	e004      	b.n	801077a <MSC_BOT_DataIn+0x6e>
    return;
 8010770:	bf00      	nop
 8010772:	e002      	b.n	801077a <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8010774:	bf00      	nop
 8010776:	e000      	b.n	801077a <MSC_BOT_DataIn+0x6e>
      break;
 8010778:	bf00      	nop
  }
}
 801077a:	3710      	adds	r7, #16
 801077c:	46bd      	mov	sp, r7
 801077e:	bd80      	pop	{r7, pc}

08010780 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010780:	b580      	push	{r7, lr}
 8010782:	b084      	sub	sp, #16
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
 8010788:	460b      	mov	r3, r1
 801078a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	32b0      	adds	r2, #176	; 0xb0
 8010796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801079a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d01c      	beq.n	80107dc <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	7a1b      	ldrb	r3, [r3, #8]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d002      	beq.n	80107b0 <MSC_BOT_DataOut+0x30>
 80107aa:	2b01      	cmp	r3, #1
 80107ac:	d004      	beq.n	80107b8 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80107ae:	e018      	b.n	80107e2 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 80107b0:	6878      	ldr	r0, [r7, #4]
 80107b2:	f000 f819 	bl	80107e8 <MSC_BOT_CBW_Decode>
      break;
 80107b6:	e014      	b.n	80107e2 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80107c4:	461a      	mov	r2, r3
 80107c6:	6878      	ldr	r0, [r7, #4]
 80107c8:	f000 f98e 	bl	8010ae8 <SCSI_ProcessCmd>
 80107cc:	4603      	mov	r3, r0
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	da06      	bge.n	80107e0 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80107d2:	2101      	movs	r1, #1
 80107d4:	6878      	ldr	r0, [r7, #4]
 80107d6:	f000 f8d1 	bl	801097c <MSC_BOT_SendCSW>
      break;
 80107da:	e001      	b.n	80107e0 <MSC_BOT_DataOut+0x60>
    return;
 80107dc:	bf00      	nop
 80107de:	e000      	b.n	80107e2 <MSC_BOT_DataOut+0x62>
      break;
 80107e0:	bf00      	nop
  }
}
 80107e2:	3710      	adds	r7, #16
 80107e4:	46bd      	mov	sp, r7
 80107e6:	bd80      	pop	{r7, pc}

080107e8 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b084      	sub	sp, #16
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	32b0      	adds	r2, #176	; 0xb0
 80107fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107fe:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d079      	beq.n	80108fa <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 801081e:	4b3a      	ldr	r3, [pc, #232]	; (8010908 <MSC_BOT_CBW_Decode+0x120>)
 8010820:	781b      	ldrb	r3, [r3, #0]
 8010822:	4619      	mov	r1, r3
 8010824:	6878      	ldr	r0, [r7, #4]
 8010826:	f010 fb33 	bl	8020e90 <USBD_LL_GetRxDataSize>
 801082a:	4603      	mov	r3, r0
 801082c:	2b1f      	cmp	r3, #31
 801082e:	d114      	bne.n	801085a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8010836:	4a35      	ldr	r2, [pc, #212]	; (801090c <MSC_BOT_CBW_Decode+0x124>)
 8010838:	4293      	cmp	r3, r2
 801083a:	d10e      	bne.n	801085a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8010842:	2b01      	cmp	r3, #1
 8010844:	d809      	bhi.n	801085a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 801084c:	2b00      	cmp	r3, #0
 801084e:	d004      	beq.n	801085a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8010856:	2b10      	cmp	r3, #16
 8010858:	d90e      	bls.n	8010878 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8010860:	2320      	movs	r3, #32
 8010862:	2205      	movs	r2, #5
 8010864:	6878      	ldr	r0, [r7, #4]
 8010866:	f000 fe28 	bl	80114ba <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	2202      	movs	r2, #2
 801086e:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8010870:	6878      	ldr	r0, [r7, #4]
 8010872:	f000 f8bd 	bl	80109f0 <MSC_BOT_Abort>
 8010876:	e043      	b.n	8010900 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8010884:	461a      	mov	r2, r3
 8010886:	6878      	ldr	r0, [r7, #4]
 8010888:	f000 f92e 	bl	8010ae8 <SCSI_ProcessCmd>
 801088c:	4603      	mov	r3, r0
 801088e:	2b00      	cmp	r3, #0
 8010890:	da0c      	bge.n	80108ac <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	7a1b      	ldrb	r3, [r3, #8]
 8010896:	2b05      	cmp	r3, #5
 8010898:	d104      	bne.n	80108a4 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801089a:	2101      	movs	r1, #1
 801089c:	6878      	ldr	r0, [r7, #4]
 801089e:	f000 f86d 	bl	801097c <MSC_BOT_SendCSW>
 80108a2:	e02d      	b.n	8010900 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80108a4:	6878      	ldr	r0, [r7, #4]
 80108a6:	f000 f8a3 	bl	80109f0 <MSC_BOT_Abort>
 80108aa:	e029      	b.n	8010900 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	7a1b      	ldrb	r3, [r3, #8]
 80108b0:	2b02      	cmp	r3, #2
 80108b2:	d024      	beq.n	80108fe <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80108b8:	2b01      	cmp	r3, #1
 80108ba:	d020      	beq.n	80108fe <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80108c0:	2b03      	cmp	r3, #3
 80108c2:	d01c      	beq.n	80108fe <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	68db      	ldr	r3, [r3, #12]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d009      	beq.n	80108e0 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	f103 0110 	add.w	r1, r3, #16
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	68db      	ldr	r3, [r3, #12]
 80108d6:	461a      	mov	r2, r3
 80108d8:	6878      	ldr	r0, [r7, #4]
 80108da:	f000 f819 	bl	8010910 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80108de:	e00f      	b.n	8010900 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	68db      	ldr	r3, [r3, #12]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d104      	bne.n	80108f2 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80108e8:	2100      	movs	r1, #0
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	f000 f846 	bl	801097c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80108f0:	e006      	b.n	8010900 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80108f2:	6878      	ldr	r0, [r7, #4]
 80108f4:	f000 f87c 	bl	80109f0 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80108f8:	e002      	b.n	8010900 <MSC_BOT_CBW_Decode+0x118>
    return;
 80108fa:	bf00      	nop
 80108fc:	e000      	b.n	8010900 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 80108fe:	bf00      	nop
    }
  }
}
 8010900:	3710      	adds	r7, #16
 8010902:	46bd      	mov	sp, r7
 8010904:	bd80      	pop	{r7, pc}
 8010906:	bf00      	nop
 8010908:	24000073 	.word	0x24000073
 801090c:	43425355 	.word	0x43425355

08010910 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8010910:	b580      	push	{r7, lr}
 8010912:	b086      	sub	sp, #24
 8010914:	af00      	add	r7, sp, #0
 8010916:	60f8      	str	r0, [r7, #12]
 8010918:	60b9      	str	r1, [r7, #8]
 801091a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	32b0      	adds	r2, #176	; 0xb0
 8010926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801092a:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801092c:	697b      	ldr	r3, [r7, #20]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d01e      	beq.n	8010970 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8010932:	697b      	ldr	r3, [r7, #20]
 8010934:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010938:	687a      	ldr	r2, [r7, #4]
 801093a:	4293      	cmp	r3, r2
 801093c:	bf28      	it	cs
 801093e:	4613      	movcs	r3, r2
 8010940:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8010942:	697b      	ldr	r3, [r7, #20]
 8010944:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	1ad2      	subs	r2, r2, r3
 801094c:	697b      	ldr	r3, [r7, #20]
 801094e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8010952:	697b      	ldr	r3, [r7, #20]
 8010954:	2200      	movs	r2, #0
 8010956:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 801095a:	697b      	ldr	r3, [r7, #20]
 801095c:	2204      	movs	r2, #4
 801095e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8010960:	4b05      	ldr	r3, [pc, #20]	; (8010978 <MSC_BOT_SendData+0x68>)
 8010962:	7819      	ldrb	r1, [r3, #0]
 8010964:	693b      	ldr	r3, [r7, #16]
 8010966:	68ba      	ldr	r2, [r7, #8]
 8010968:	68f8      	ldr	r0, [r7, #12]
 801096a:	f010 fa4f 	bl	8020e0c <USBD_LL_Transmit>
 801096e:	e000      	b.n	8010972 <MSC_BOT_SendData+0x62>
    return;
 8010970:	bf00      	nop
}
 8010972:	3718      	adds	r7, #24
 8010974:	46bd      	mov	sp, r7
 8010976:	bd80      	pop	{r7, pc}
 8010978:	24000072 	.word	0x24000072

0801097c <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b084      	sub	sp, #16
 8010980:	af00      	add	r7, sp, #0
 8010982:	6078      	str	r0, [r7, #4]
 8010984:	460b      	mov	r3, r1
 8010986:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	32b0      	adds	r2, #176	; 0xb0
 8010992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010996:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d01d      	beq.n	80109da <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	4a10      	ldr	r2, [pc, #64]	; (80109e4 <MSC_BOT_SendCSW+0x68>)
 80109a2:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	78fa      	ldrb	r2, [r7, #3]
 80109aa:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	2200      	movs	r2, #0
 80109b2:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 80109b4:	4b0c      	ldr	r3, [pc, #48]	; (80109e8 <MSC_BOT_SendCSW+0x6c>)
 80109b6:	7819      	ldrb	r1, [r3, #0]
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	f503 720c 	add.w	r2, r3, #560	; 0x230
 80109be:	230d      	movs	r3, #13
 80109c0:	6878      	ldr	r0, [r7, #4]
 80109c2:	f010 fa23 	bl	8020e0c <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80109c6:	4b09      	ldr	r3, [pc, #36]	; (80109ec <MSC_BOT_SendCSW+0x70>)
 80109c8:	7819      	ldrb	r1, [r3, #0]
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80109d0:	231f      	movs	r3, #31
 80109d2:	6878      	ldr	r0, [r7, #4]
 80109d4:	f010 fa3b 	bl	8020e4e <USBD_LL_PrepareReceive>
 80109d8:	e000      	b.n	80109dc <MSC_BOT_SendCSW+0x60>
    return;
 80109da:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80109dc:	3710      	adds	r7, #16
 80109de:	46bd      	mov	sp, r7
 80109e0:	bd80      	pop	{r7, pc}
 80109e2:	bf00      	nop
 80109e4:	53425355 	.word	0x53425355
 80109e8:	24000072 	.word	0x24000072
 80109ec:	24000073 	.word	0x24000073

080109f0 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b084      	sub	sp, #16
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	32b0      	adds	r2, #176	; 0xb0
 8010a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a06:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d02a      	beq.n	8010a64 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d10e      	bne.n	8010a36 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d009      	beq.n	8010a36 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d105      	bne.n	8010a36 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8010a2a:	4b10      	ldr	r3, [pc, #64]	; (8010a6c <MSC_BOT_Abort+0x7c>)
 8010a2c:	781b      	ldrb	r3, [r3, #0]
 8010a2e:	4619      	mov	r1, r3
 8010a30:	6878      	ldr	r0, [r7, #4]
 8010a32:	f010 f962 	bl	8020cfa <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8010a36:	4b0e      	ldr	r3, [pc, #56]	; (8010a70 <MSC_BOT_Abort+0x80>)
 8010a38:	781b      	ldrb	r3, [r3, #0]
 8010a3a:	4619      	mov	r1, r3
 8010a3c:	6878      	ldr	r0, [r7, #4]
 8010a3e:	f010 f95c 	bl	8020cfa <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	7a5b      	ldrb	r3, [r3, #9]
 8010a46:	2b02      	cmp	r3, #2
 8010a48:	d10d      	bne.n	8010a66 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8010a4a:	4b09      	ldr	r3, [pc, #36]	; (8010a70 <MSC_BOT_Abort+0x80>)
 8010a4c:	781b      	ldrb	r3, [r3, #0]
 8010a4e:	4619      	mov	r1, r3
 8010a50:	6878      	ldr	r0, [r7, #4]
 8010a52:	f010 f952 	bl	8020cfa <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8010a56:	4b05      	ldr	r3, [pc, #20]	; (8010a6c <MSC_BOT_Abort+0x7c>)
 8010a58:	781b      	ldrb	r3, [r3, #0]
 8010a5a:	4619      	mov	r1, r3
 8010a5c:	6878      	ldr	r0, [r7, #4]
 8010a5e:	f010 f94c 	bl	8020cfa <USBD_LL_StallEP>
 8010a62:	e000      	b.n	8010a66 <MSC_BOT_Abort+0x76>
    return;
 8010a64:	bf00      	nop
  }
}
 8010a66:	3710      	adds	r7, #16
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd80      	pop	{r7, pc}
 8010a6c:	24000073 	.word	0x24000073
 8010a70:	24000072 	.word	0x24000072

08010a74 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b084      	sub	sp, #16
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
 8010a7c:	460b      	mov	r3, r1
 8010a7e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	32b0      	adds	r2, #176	; 0xb0
 8010a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a8e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d01d      	beq.n	8010ad2 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	7a5b      	ldrb	r3, [r3, #9]
 8010a9a:	2b02      	cmp	r3, #2
 8010a9c:	d10c      	bne.n	8010ab8 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8010a9e:	4b10      	ldr	r3, [pc, #64]	; (8010ae0 <MSC_BOT_CplClrFeature+0x6c>)
 8010aa0:	781b      	ldrb	r3, [r3, #0]
 8010aa2:	4619      	mov	r1, r3
 8010aa4:	6878      	ldr	r0, [r7, #4]
 8010aa6:	f010 f928 	bl	8020cfa <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8010aaa:	4b0e      	ldr	r3, [pc, #56]	; (8010ae4 <MSC_BOT_CplClrFeature+0x70>)
 8010aac:	781b      	ldrb	r3, [r3, #0]
 8010aae:	4619      	mov	r1, r3
 8010ab0:	6878      	ldr	r0, [r7, #4]
 8010ab2:	f010 f922 	bl	8020cfa <USBD_LL_StallEP>
 8010ab6:	e00f      	b.n	8010ad8 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8010ab8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	da0a      	bge.n	8010ad6 <MSC_BOT_CplClrFeature+0x62>
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	7a5b      	ldrb	r3, [r3, #9]
 8010ac4:	2b01      	cmp	r3, #1
 8010ac6:	d006      	beq.n	8010ad6 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8010ac8:	2101      	movs	r1, #1
 8010aca:	6878      	ldr	r0, [r7, #4]
 8010acc:	f7ff ff56 	bl	801097c <MSC_BOT_SendCSW>
 8010ad0:	e002      	b.n	8010ad8 <MSC_BOT_CplClrFeature+0x64>
    return;
 8010ad2:	bf00      	nop
 8010ad4:	e000      	b.n	8010ad8 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8010ad6:	bf00      	nop
  }
}
 8010ad8:	3710      	adds	r7, #16
 8010ada:	46bd      	mov	sp, r7
 8010adc:	bd80      	pop	{r7, pc}
 8010ade:	bf00      	nop
 8010ae0:	24000072 	.word	0x24000072
 8010ae4:	24000073 	.word	0x24000073

08010ae8 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b086      	sub	sp, #24
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	60f8      	str	r0, [r7, #12]
 8010af0:	460b      	mov	r3, r1
 8010af2:	607a      	str	r2, [r7, #4]
 8010af4:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	32b0      	adds	r2, #176	; 0xb0
 8010b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b04:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8010b06:	693b      	ldr	r3, [r7, #16]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d102      	bne.n	8010b12 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8010b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8010b10:	e168      	b.n	8010de4 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	781b      	ldrb	r3, [r3, #0]
 8010b16:	2baa      	cmp	r3, #170	; 0xaa
 8010b18:	f000 8144 	beq.w	8010da4 <SCSI_ProcessCmd+0x2bc>
 8010b1c:	2baa      	cmp	r3, #170	; 0xaa
 8010b1e:	f300 8153 	bgt.w	8010dc8 <SCSI_ProcessCmd+0x2e0>
 8010b22:	2ba8      	cmp	r3, #168	; 0xa8
 8010b24:	f000 812c 	beq.w	8010d80 <SCSI_ProcessCmd+0x298>
 8010b28:	2ba8      	cmp	r3, #168	; 0xa8
 8010b2a:	f300 814d 	bgt.w	8010dc8 <SCSI_ProcessCmd+0x2e0>
 8010b2e:	2b5a      	cmp	r3, #90	; 0x5a
 8010b30:	f300 80c0 	bgt.w	8010cb4 <SCSI_ProcessCmd+0x1cc>
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	f2c0 8147 	blt.w	8010dc8 <SCSI_ProcessCmd+0x2e0>
 8010b3a:	2b5a      	cmp	r3, #90	; 0x5a
 8010b3c:	f200 8144 	bhi.w	8010dc8 <SCSI_ProcessCmd+0x2e0>
 8010b40:	a201      	add	r2, pc, #4	; (adr r2, 8010b48 <SCSI_ProcessCmd+0x60>)
 8010b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b46:	bf00      	nop
 8010b48:	08010cbb 	.word	0x08010cbb
 8010b4c:	08010dc9 	.word	0x08010dc9
 8010b50:	08010dc9 	.word	0x08010dc9
 8010b54:	08010ccd 	.word	0x08010ccd
 8010b58:	08010dc9 	.word	0x08010dc9
 8010b5c:	08010dc9 	.word	0x08010dc9
 8010b60:	08010dc9 	.word	0x08010dc9
 8010b64:	08010dc9 	.word	0x08010dc9
 8010b68:	08010dc9 	.word	0x08010dc9
 8010b6c:	08010dc9 	.word	0x08010dc9
 8010b70:	08010dc9 	.word	0x08010dc9
 8010b74:	08010dc9 	.word	0x08010dc9
 8010b78:	08010dc9 	.word	0x08010dc9
 8010b7c:	08010dc9 	.word	0x08010dc9
 8010b80:	08010dc9 	.word	0x08010dc9
 8010b84:	08010dc9 	.word	0x08010dc9
 8010b88:	08010dc9 	.word	0x08010dc9
 8010b8c:	08010dc9 	.word	0x08010dc9
 8010b90:	08010cdf 	.word	0x08010cdf
 8010b94:	08010dc9 	.word	0x08010dc9
 8010b98:	08010dc9 	.word	0x08010dc9
 8010b9c:	08010dc9 	.word	0x08010dc9
 8010ba0:	08010dc9 	.word	0x08010dc9
 8010ba4:	08010dc9 	.word	0x08010dc9
 8010ba8:	08010dc9 	.word	0x08010dc9
 8010bac:	08010dc9 	.word	0x08010dc9
 8010bb0:	08010d15 	.word	0x08010d15
 8010bb4:	08010cf1 	.word	0x08010cf1
 8010bb8:	08010dc9 	.word	0x08010dc9
 8010bbc:	08010dc9 	.word	0x08010dc9
 8010bc0:	08010d03 	.word	0x08010d03
 8010bc4:	08010dc9 	.word	0x08010dc9
 8010bc8:	08010dc9 	.word	0x08010dc9
 8010bcc:	08010dc9 	.word	0x08010dc9
 8010bd0:	08010dc9 	.word	0x08010dc9
 8010bd4:	08010d39 	.word	0x08010d39
 8010bd8:	08010dc9 	.word	0x08010dc9
 8010bdc:	08010d4b 	.word	0x08010d4b
 8010be0:	08010dc9 	.word	0x08010dc9
 8010be4:	08010dc9 	.word	0x08010dc9
 8010be8:	08010d6f 	.word	0x08010d6f
 8010bec:	08010dc9 	.word	0x08010dc9
 8010bf0:	08010d93 	.word	0x08010d93
 8010bf4:	08010dc9 	.word	0x08010dc9
 8010bf8:	08010dc9 	.word	0x08010dc9
 8010bfc:	08010dc9 	.word	0x08010dc9
 8010c00:	08010dc9 	.word	0x08010dc9
 8010c04:	08010db7 	.word	0x08010db7
 8010c08:	08010dc9 	.word	0x08010dc9
 8010c0c:	08010dc9 	.word	0x08010dc9
 8010c10:	08010dc9 	.word	0x08010dc9
 8010c14:	08010dc9 	.word	0x08010dc9
 8010c18:	08010dc9 	.word	0x08010dc9
 8010c1c:	08010dc9 	.word	0x08010dc9
 8010c20:	08010dc9 	.word	0x08010dc9
 8010c24:	08010dc9 	.word	0x08010dc9
 8010c28:	08010dc9 	.word	0x08010dc9
 8010c2c:	08010dc9 	.word	0x08010dc9
 8010c30:	08010dc9 	.word	0x08010dc9
 8010c34:	08010dc9 	.word	0x08010dc9
 8010c38:	08010dc9 	.word	0x08010dc9
 8010c3c:	08010dc9 	.word	0x08010dc9
 8010c40:	08010dc9 	.word	0x08010dc9
 8010c44:	08010dc9 	.word	0x08010dc9
 8010c48:	08010dc9 	.word	0x08010dc9
 8010c4c:	08010dc9 	.word	0x08010dc9
 8010c50:	08010dc9 	.word	0x08010dc9
 8010c54:	08010dc9 	.word	0x08010dc9
 8010c58:	08010dc9 	.word	0x08010dc9
 8010c5c:	08010dc9 	.word	0x08010dc9
 8010c60:	08010dc9 	.word	0x08010dc9
 8010c64:	08010dc9 	.word	0x08010dc9
 8010c68:	08010dc9 	.word	0x08010dc9
 8010c6c:	08010dc9 	.word	0x08010dc9
 8010c70:	08010dc9 	.word	0x08010dc9
 8010c74:	08010dc9 	.word	0x08010dc9
 8010c78:	08010dc9 	.word	0x08010dc9
 8010c7c:	08010dc9 	.word	0x08010dc9
 8010c80:	08010dc9 	.word	0x08010dc9
 8010c84:	08010dc9 	.word	0x08010dc9
 8010c88:	08010dc9 	.word	0x08010dc9
 8010c8c:	08010dc9 	.word	0x08010dc9
 8010c90:	08010dc9 	.word	0x08010dc9
 8010c94:	08010dc9 	.word	0x08010dc9
 8010c98:	08010dc9 	.word	0x08010dc9
 8010c9c:	08010dc9 	.word	0x08010dc9
 8010ca0:	08010dc9 	.word	0x08010dc9
 8010ca4:	08010dc9 	.word	0x08010dc9
 8010ca8:	08010dc9 	.word	0x08010dc9
 8010cac:	08010dc9 	.word	0x08010dc9
 8010cb0:	08010d27 	.word	0x08010d27
 8010cb4:	2b9e      	cmp	r3, #158	; 0x9e
 8010cb6:	d051      	beq.n	8010d5c <SCSI_ProcessCmd+0x274>
 8010cb8:	e086      	b.n	8010dc8 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8010cba:	7afb      	ldrb	r3, [r7, #11]
 8010cbc:	687a      	ldr	r2, [r7, #4]
 8010cbe:	4619      	mov	r1, r3
 8010cc0:	68f8      	ldr	r0, [r7, #12]
 8010cc2:	f000 f893 	bl	8010dec <SCSI_TestUnitReady>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	75fb      	strb	r3, [r7, #23]
      break;
 8010cca:	e089      	b.n	8010de0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8010ccc:	7afb      	ldrb	r3, [r7, #11]
 8010cce:	687a      	ldr	r2, [r7, #4]
 8010cd0:	4619      	mov	r1, r3
 8010cd2:	68f8      	ldr	r0, [r7, #12]
 8010cd4:	f000 fb6e 	bl	80113b4 <SCSI_RequestSense>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	75fb      	strb	r3, [r7, #23]
      break;
 8010cdc:	e080      	b.n	8010de0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8010cde:	7afb      	ldrb	r3, [r7, #11]
 8010ce0:	687a      	ldr	r2, [r7, #4]
 8010ce2:	4619      	mov	r1, r3
 8010ce4:	68f8      	ldr	r0, [r7, #12]
 8010ce6:	f000 f8db 	bl	8010ea0 <SCSI_Inquiry>
 8010cea:	4603      	mov	r3, r0
 8010cec:	75fb      	strb	r3, [r7, #23]
      break;
 8010cee:	e077      	b.n	8010de0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8010cf0:	7afb      	ldrb	r3, [r7, #11]
 8010cf2:	687a      	ldr	r2, [r7, #4]
 8010cf4:	4619      	mov	r1, r3
 8010cf6:	68f8      	ldr	r0, [r7, #12]
 8010cf8:	f000 fc2a 	bl	8011550 <SCSI_StartStopUnit>
 8010cfc:	4603      	mov	r3, r0
 8010cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8010d00:	e06e      	b.n	8010de0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8010d02:	7afb      	ldrb	r3, [r7, #11]
 8010d04:	687a      	ldr	r2, [r7, #4]
 8010d06:	4619      	mov	r1, r3
 8010d08:	68f8      	ldr	r0, [r7, #12]
 8010d0a:	f000 fc76 	bl	80115fa <SCSI_AllowPreventRemovable>
 8010d0e:	4603      	mov	r3, r0
 8010d10:	75fb      	strb	r3, [r7, #23]
      break;
 8010d12:	e065      	b.n	8010de0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8010d14:	7afb      	ldrb	r3, [r7, #11]
 8010d16:	687a      	ldr	r2, [r7, #4]
 8010d18:	4619      	mov	r1, r3
 8010d1a:	68f8      	ldr	r0, [r7, #12]
 8010d1c:	f000 faea 	bl	80112f4 <SCSI_ModeSense6>
 8010d20:	4603      	mov	r3, r0
 8010d22:	75fb      	strb	r3, [r7, #23]
      break;
 8010d24:	e05c      	b.n	8010de0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8010d26:	7afb      	ldrb	r3, [r7, #11]
 8010d28:	687a      	ldr	r2, [r7, #4]
 8010d2a:	4619      	mov	r1, r3
 8010d2c:	68f8      	ldr	r0, [r7, #12]
 8010d2e:	f000 fb11 	bl	8011354 <SCSI_ModeSense10>
 8010d32:	4603      	mov	r3, r0
 8010d34:	75fb      	strb	r3, [r7, #23]
      break;
 8010d36:	e053      	b.n	8010de0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8010d38:	7afb      	ldrb	r3, [r7, #11]
 8010d3a:	687a      	ldr	r2, [r7, #4]
 8010d3c:	4619      	mov	r1, r3
 8010d3e:	68f8      	ldr	r0, [r7, #12]
 8010d40:	f000 fa5d 	bl	80111fe <SCSI_ReadFormatCapacity>
 8010d44:	4603      	mov	r3, r0
 8010d46:	75fb      	strb	r3, [r7, #23]
      break;
 8010d48:	e04a      	b.n	8010de0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8010d4a:	7afb      	ldrb	r3, [r7, #11]
 8010d4c:	687a      	ldr	r2, [r7, #4]
 8010d4e:	4619      	mov	r1, r3
 8010d50:	68f8      	ldr	r0, [r7, #12]
 8010d52:	f000 f923 	bl	8010f9c <SCSI_ReadCapacity10>
 8010d56:	4603      	mov	r3, r0
 8010d58:	75fb      	strb	r3, [r7, #23]
      break;
 8010d5a:	e041      	b.n	8010de0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8010d5c:	7afb      	ldrb	r3, [r7, #11]
 8010d5e:	687a      	ldr	r2, [r7, #4]
 8010d60:	4619      	mov	r1, r3
 8010d62:	68f8      	ldr	r0, [r7, #12]
 8010d64:	f000 f998 	bl	8011098 <SCSI_ReadCapacity16>
 8010d68:	4603      	mov	r3, r0
 8010d6a:	75fb      	strb	r3, [r7, #23]
      break;
 8010d6c:	e038      	b.n	8010de0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8010d6e:	7afb      	ldrb	r3, [r7, #11]
 8010d70:	687a      	ldr	r2, [r7, #4]
 8010d72:	4619      	mov	r1, r3
 8010d74:	68f8      	ldr	r0, [r7, #12]
 8010d76:	f000 fc6d 	bl	8011654 <SCSI_Read10>
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	75fb      	strb	r3, [r7, #23]
      break;
 8010d7e:	e02f      	b.n	8010de0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8010d80:	7afb      	ldrb	r3, [r7, #11]
 8010d82:	687a      	ldr	r2, [r7, #4]
 8010d84:	4619      	mov	r1, r3
 8010d86:	68f8      	ldr	r0, [r7, #12]
 8010d88:	f000 fd0e 	bl	80117a8 <SCSI_Read12>
 8010d8c:	4603      	mov	r3, r0
 8010d8e:	75fb      	strb	r3, [r7, #23]
      break;
 8010d90:	e026      	b.n	8010de0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8010d92:	7afb      	ldrb	r3, [r7, #11]
 8010d94:	687a      	ldr	r2, [r7, #4]
 8010d96:	4619      	mov	r1, r3
 8010d98:	68f8      	ldr	r0, [r7, #12]
 8010d9a:	f000 fdb9 	bl	8011910 <SCSI_Write10>
 8010d9e:	4603      	mov	r3, r0
 8010da0:	75fb      	strb	r3, [r7, #23]
      break;
 8010da2:	e01d      	b.n	8010de0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8010da4:	7afb      	ldrb	r3, [r7, #11]
 8010da6:	687a      	ldr	r2, [r7, #4]
 8010da8:	4619      	mov	r1, r3
 8010daa:	68f8      	ldr	r0, [r7, #12]
 8010dac:	f000 fe86 	bl	8011abc <SCSI_Write12>
 8010db0:	4603      	mov	r3, r0
 8010db2:	75fb      	strb	r3, [r7, #23]
      break;
 8010db4:	e014      	b.n	8010de0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8010db6:	7afb      	ldrb	r3, [r7, #11]
 8010db8:	687a      	ldr	r2, [r7, #4]
 8010dba:	4619      	mov	r1, r3
 8010dbc:	68f8      	ldr	r0, [r7, #12]
 8010dbe:	f000 ff63 	bl	8011c88 <SCSI_Verify10>
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	75fb      	strb	r3, [r7, #23]
      break;
 8010dc6:	e00b      	b.n	8010de0 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8010dc8:	7af9      	ldrb	r1, [r7, #11]
 8010dca:	2320      	movs	r3, #32
 8010dcc:	2205      	movs	r2, #5
 8010dce:	68f8      	ldr	r0, [r7, #12]
 8010dd0:	f000 fb73 	bl	80114ba <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8010dd4:	693b      	ldr	r3, [r7, #16]
 8010dd6:	2202      	movs	r2, #2
 8010dd8:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8010dda:	23ff      	movs	r3, #255	; 0xff
 8010ddc:	75fb      	strb	r3, [r7, #23]
      break;
 8010dde:	bf00      	nop
  }

  return ret;
 8010de0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010de4:	4618      	mov	r0, r3
 8010de6:	3718      	adds	r7, #24
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}

08010dec <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b086      	sub	sp, #24
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	60f8      	str	r0, [r7, #12]
 8010df4:	460b      	mov	r3, r1
 8010df6:	607a      	str	r2, [r7, #4]
 8010df8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	32b0      	adds	r2, #176	; 0xb0
 8010e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e08:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8010e0a:	697b      	ldr	r3, [r7, #20]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d102      	bne.n	8010e16 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8010e10:	f04f 33ff 	mov.w	r3, #4294967295
 8010e14:	e03f      	b.n	8010e96 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8010e16:	697b      	ldr	r3, [r7, #20]
 8010e18:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d00a      	beq.n	8010e36 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010e20:	697b      	ldr	r3, [r7, #20]
 8010e22:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8010e26:	2320      	movs	r3, #32
 8010e28:	2205      	movs	r2, #5
 8010e2a:	68f8      	ldr	r0, [r7, #12]
 8010e2c:	f000 fb45 	bl	80114ba <SCSI_SenseCode>

    return -1;
 8010e30:	f04f 33ff 	mov.w	r3, #4294967295
 8010e34:	e02f      	b.n	8010e96 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8010e36:	697b      	ldr	r3, [r7, #20]
 8010e38:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8010e3c:	2b02      	cmp	r3, #2
 8010e3e:	d10b      	bne.n	8010e58 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010e40:	7af9      	ldrb	r1, [r7, #11]
 8010e42:	233a      	movs	r3, #58	; 0x3a
 8010e44:	2202      	movs	r2, #2
 8010e46:	68f8      	ldr	r0, [r7, #12]
 8010e48:	f000 fb37 	bl	80114ba <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8010e4c:	697b      	ldr	r3, [r7, #20]
 8010e4e:	2205      	movs	r2, #5
 8010e50:	721a      	strb	r2, [r3, #8]
    return -1;
 8010e52:	f04f 33ff 	mov.w	r3, #4294967295
 8010e56:	e01e      	b.n	8010e96 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010e5e:	68fa      	ldr	r2, [r7, #12]
 8010e60:	33b0      	adds	r3, #176	; 0xb0
 8010e62:	009b      	lsls	r3, r3, #2
 8010e64:	4413      	add	r3, r2
 8010e66:	685b      	ldr	r3, [r3, #4]
 8010e68:	689b      	ldr	r3, [r3, #8]
 8010e6a:	7afa      	ldrb	r2, [r7, #11]
 8010e6c:	4610      	mov	r0, r2
 8010e6e:	4798      	blx	r3
 8010e70:	4603      	mov	r3, r0
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d00b      	beq.n	8010e8e <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010e76:	7af9      	ldrb	r1, [r7, #11]
 8010e78:	233a      	movs	r3, #58	; 0x3a
 8010e7a:	2202      	movs	r2, #2
 8010e7c:	68f8      	ldr	r0, [r7, #12]
 8010e7e:	f000 fb1c 	bl	80114ba <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8010e82:	697b      	ldr	r3, [r7, #20]
 8010e84:	2205      	movs	r2, #5
 8010e86:	721a      	strb	r2, [r3, #8]

    return -1;
 8010e88:	f04f 33ff 	mov.w	r3, #4294967295
 8010e8c:	e003      	b.n	8010e96 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 8010e8e:	697b      	ldr	r3, [r7, #20]
 8010e90:	2200      	movs	r2, #0
 8010e92:	60da      	str	r2, [r3, #12]

  return 0;
 8010e94:	2300      	movs	r3, #0
}
 8010e96:	4618      	mov	r0, r3
 8010e98:	3718      	adds	r7, #24
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	bd80      	pop	{r7, pc}
	...

08010ea0 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b088      	sub	sp, #32
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	60f8      	str	r0, [r7, #12]
 8010ea8:	460b      	mov	r3, r1
 8010eaa:	607a      	str	r2, [r7, #4]
 8010eac:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	32b0      	adds	r2, #176	; 0xb0
 8010eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ebc:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8010ebe:	69bb      	ldr	r3, [r7, #24]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d102      	bne.n	8010eca <SCSI_Inquiry+0x2a>
  {
    return -1;
 8010ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8010ec8:	e05f      	b.n	8010f8a <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8010eca:	69bb      	ldr	r3, [r7, #24]
 8010ecc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d10a      	bne.n	8010eea <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010ed4:	69bb      	ldr	r3, [r7, #24]
 8010ed6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8010eda:	2320      	movs	r3, #32
 8010edc:	2205      	movs	r2, #5
 8010ede:	68f8      	ldr	r0, [r7, #12]
 8010ee0:	f000 faeb 	bl	80114ba <SCSI_SenseCode>
    return -1;
 8010ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8010ee8:	e04f      	b.n	8010f8a <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	3301      	adds	r3, #1
 8010eee:	781b      	ldrb	r3, [r3, #0]
 8010ef0:	f003 0301 	and.w	r3, r3, #1
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d020      	beq.n	8010f3a <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	3302      	adds	r3, #2
 8010efc:	781b      	ldrb	r3, [r3, #0]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d105      	bne.n	8010f0e <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8010f02:	2206      	movs	r2, #6
 8010f04:	4923      	ldr	r1, [pc, #140]	; (8010f94 <SCSI_Inquiry+0xf4>)
 8010f06:	69b8      	ldr	r0, [r7, #24]
 8010f08:	f001 f844 	bl	8011f94 <SCSI_UpdateBotData>
 8010f0c:	e03c      	b.n	8010f88 <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	3302      	adds	r3, #2
 8010f12:	781b      	ldrb	r3, [r3, #0]
 8010f14:	2b80      	cmp	r3, #128	; 0x80
 8010f16:	d105      	bne.n	8010f24 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8010f18:	2208      	movs	r2, #8
 8010f1a:	491f      	ldr	r1, [pc, #124]	; (8010f98 <SCSI_Inquiry+0xf8>)
 8010f1c:	69b8      	ldr	r0, [r7, #24]
 8010f1e:	f001 f839 	bl	8011f94 <SCSI_UpdateBotData>
 8010f22:	e031      	b.n	8010f88 <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8010f24:	69bb      	ldr	r3, [r7, #24]
 8010f26:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8010f2a:	2324      	movs	r3, #36	; 0x24
 8010f2c:	2205      	movs	r2, #5
 8010f2e:	68f8      	ldr	r0, [r7, #12]
 8010f30:	f000 fac3 	bl	80114ba <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8010f34:	f04f 33ff 	mov.w	r3, #4294967295
 8010f38:	e027      	b.n	8010f8a <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010f40:	68fa      	ldr	r2, [r7, #12]
 8010f42:	33b0      	adds	r3, #176	; 0xb0
 8010f44:	009b      	lsls	r3, r3, #2
 8010f46:	4413      	add	r3, r2
 8010f48:	685b      	ldr	r3, [r3, #4]
 8010f4a:	69d9      	ldr	r1, [r3, #28]
 8010f4c:	7afa      	ldrb	r2, [r7, #11]
 8010f4e:	4613      	mov	r3, r2
 8010f50:	00db      	lsls	r3, r3, #3
 8010f52:	4413      	add	r3, r2
 8010f54:	009b      	lsls	r3, r3, #2
 8010f56:	440b      	add	r3, r1
 8010f58:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8010f5a:	697b      	ldr	r3, [r7, #20]
 8010f5c:	3304      	adds	r3, #4
 8010f5e:	781b      	ldrb	r3, [r3, #0]
 8010f60:	b29b      	uxth	r3, r3
 8010f62:	3305      	adds	r3, #5
 8010f64:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	3304      	adds	r3, #4
 8010f6a:	781b      	ldrb	r3, [r3, #0]
 8010f6c:	b29b      	uxth	r3, r3
 8010f6e:	8bfa      	ldrh	r2, [r7, #30]
 8010f70:	429a      	cmp	r2, r3
 8010f72:	d303      	bcc.n	8010f7c <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	3304      	adds	r3, #4
 8010f78:	781b      	ldrb	r3, [r3, #0]
 8010f7a:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8010f7c:	8bfb      	ldrh	r3, [r7, #30]
 8010f7e:	461a      	mov	r2, r3
 8010f80:	6979      	ldr	r1, [r7, #20]
 8010f82:	69b8      	ldr	r0, [r7, #24]
 8010f84:	f001 f806 	bl	8011f94 <SCSI_UpdateBotData>
  }

  return 0;
 8010f88:	2300      	movs	r3, #0
}
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	3720      	adds	r7, #32
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}
 8010f92:	bf00      	nop
 8010f94:	24000074 	.word	0x24000074
 8010f98:	2400007c 	.word	0x2400007c

08010f9c <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b086      	sub	sp, #24
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	60f8      	str	r0, [r7, #12]
 8010fa4:	460b      	mov	r3, r1
 8010fa6:	607a      	str	r2, [r7, #4]
 8010fa8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	32b0      	adds	r2, #176	; 0xb0
 8010fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010fb8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8010fba:	697b      	ldr	r3, [r7, #20]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d102      	bne.n	8010fc6 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8010fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8010fc4:	e064      	b.n	8011090 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010fcc:	68fa      	ldr	r2, [r7, #12]
 8010fce:	33b0      	adds	r3, #176	; 0xb0
 8010fd0:	009b      	lsls	r3, r3, #2
 8010fd2:	4413      	add	r3, r2
 8010fd4:	685b      	ldr	r3, [r3, #4]
 8010fd6:	685b      	ldr	r3, [r3, #4]
 8010fd8:	697a      	ldr	r2, [r7, #20]
 8010fda:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8010fde:	697a      	ldr	r2, [r7, #20]
 8010fe0:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8010fe4:	7af8      	ldrb	r0, [r7, #11]
 8010fe6:	4798      	blx	r3
 8010fe8:	4603      	mov	r3, r0
 8010fea:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8010fec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d104      	bne.n	8010ffe <SCSI_ReadCapacity10+0x62>
 8010ff4:	697b      	ldr	r3, [r7, #20]
 8010ff6:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8010ffa:	2b02      	cmp	r3, #2
 8010ffc:	d108      	bne.n	8011010 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010ffe:	7af9      	ldrb	r1, [r7, #11]
 8011000:	233a      	movs	r3, #58	; 0x3a
 8011002:	2202      	movs	r2, #2
 8011004:	68f8      	ldr	r0, [r7, #12]
 8011006:	f000 fa58 	bl	80114ba <SCSI_SenseCode>
    return -1;
 801100a:	f04f 33ff 	mov.w	r3, #4294967295
 801100e:	e03f      	b.n	8011090 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8011010:	697b      	ldr	r3, [r7, #20]
 8011012:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8011016:	3b01      	subs	r3, #1
 8011018:	0e1b      	lsrs	r3, r3, #24
 801101a:	b2da      	uxtb	r2, r3
 801101c:	697b      	ldr	r3, [r7, #20]
 801101e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8011020:	697b      	ldr	r3, [r7, #20]
 8011022:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8011026:	3b01      	subs	r3, #1
 8011028:	0c1b      	lsrs	r3, r3, #16
 801102a:	b2da      	uxtb	r2, r3
 801102c:	697b      	ldr	r3, [r7, #20]
 801102e:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8011030:	697b      	ldr	r3, [r7, #20]
 8011032:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8011036:	3b01      	subs	r3, #1
 8011038:	0a1b      	lsrs	r3, r3, #8
 801103a:	b2da      	uxtb	r2, r3
 801103c:	697b      	ldr	r3, [r7, #20]
 801103e:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8011040:	697b      	ldr	r3, [r7, #20]
 8011042:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8011046:	b2db      	uxtb	r3, r3
 8011048:	3b01      	subs	r3, #1
 801104a:	b2da      	uxtb	r2, r3
 801104c:	697b      	ldr	r3, [r7, #20]
 801104e:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8011050:	697b      	ldr	r3, [r7, #20]
 8011052:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011056:	161b      	asrs	r3, r3, #24
 8011058:	b2da      	uxtb	r2, r3
 801105a:	697b      	ldr	r3, [r7, #20]
 801105c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801105e:	697b      	ldr	r3, [r7, #20]
 8011060:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011064:	141b      	asrs	r3, r3, #16
 8011066:	b2da      	uxtb	r2, r3
 8011068:	697b      	ldr	r3, [r7, #20]
 801106a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 801106c:	697b      	ldr	r3, [r7, #20]
 801106e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011072:	0a1b      	lsrs	r3, r3, #8
 8011074:	b29b      	uxth	r3, r3
 8011076:	b2da      	uxtb	r2, r3
 8011078:	697b      	ldr	r3, [r7, #20]
 801107a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 801107c:	697b      	ldr	r3, [r7, #20]
 801107e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011082:	b2da      	uxtb	r2, r3
 8011084:	697b      	ldr	r3, [r7, #20]
 8011086:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8011088:	697b      	ldr	r3, [r7, #20]
 801108a:	2208      	movs	r2, #8
 801108c:	60da      	str	r2, [r3, #12]

  return 0;
 801108e:	2300      	movs	r3, #0

}
 8011090:	4618      	mov	r0, r3
 8011092:	3718      	adds	r7, #24
 8011094:	46bd      	mov	sp, r7
 8011096:	bd80      	pop	{r7, pc}

08011098 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011098:	b580      	push	{r7, lr}
 801109a:	b088      	sub	sp, #32
 801109c:	af00      	add	r7, sp, #0
 801109e:	60f8      	str	r0, [r7, #12]
 80110a0:	460b      	mov	r3, r1
 80110a2:	607a      	str	r2, [r7, #4]
 80110a4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	32b0      	adds	r2, #176	; 0xb0
 80110b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110b4:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80110b6:	69bb      	ldr	r3, [r7, #24]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d102      	bne.n	80110c2 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 80110bc:	f04f 33ff 	mov.w	r3, #4294967295
 80110c0:	e099      	b.n	80111f6 <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80110c8:	68fa      	ldr	r2, [r7, #12]
 80110ca:	33b0      	adds	r3, #176	; 0xb0
 80110cc:	009b      	lsls	r3, r3, #2
 80110ce:	4413      	add	r3, r2
 80110d0:	685b      	ldr	r3, [r3, #4]
 80110d2:	685b      	ldr	r3, [r3, #4]
 80110d4:	69ba      	ldr	r2, [r7, #24]
 80110d6:	f502 711a 	add.w	r1, r2, #616	; 0x268
 80110da:	69ba      	ldr	r2, [r7, #24]
 80110dc:	f502 7219 	add.w	r2, r2, #612	; 0x264
 80110e0:	7af8      	ldrb	r0, [r7, #11]
 80110e2:	4798      	blx	r3
 80110e4:	4603      	mov	r3, r0
 80110e6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80110e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d104      	bne.n	80110fa <SCSI_ReadCapacity16+0x62>
 80110f0:	69bb      	ldr	r3, [r7, #24]
 80110f2:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80110f6:	2b02      	cmp	r3, #2
 80110f8:	d108      	bne.n	801110c <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80110fa:	7af9      	ldrb	r1, [r7, #11]
 80110fc:	233a      	movs	r3, #58	; 0x3a
 80110fe:	2202      	movs	r2, #2
 8011100:	68f8      	ldr	r0, [r7, #12]
 8011102:	f000 f9da 	bl	80114ba <SCSI_SenseCode>
    return -1;
 8011106:	f04f 33ff 	mov.w	r3, #4294967295
 801110a:	e074      	b.n	80111f6 <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	330a      	adds	r3, #10
 8011110:	781b      	ldrb	r3, [r3, #0]
 8011112:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	330b      	adds	r3, #11
 8011118:	781b      	ldrb	r3, [r3, #0]
 801111a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801111c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	330c      	adds	r3, #12
 8011122:	781b      	ldrb	r3, [r3, #0]
 8011124:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8011126:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8011128:	687a      	ldr	r2, [r7, #4]
 801112a:	320d      	adds	r2, #13
 801112c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801112e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8011130:	69bb      	ldr	r3, [r7, #24]
 8011132:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8011134:	2300      	movs	r3, #0
 8011136:	77fb      	strb	r3, [r7, #31]
 8011138:	e007      	b.n	801114a <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 801113a:	7ffb      	ldrb	r3, [r7, #31]
 801113c:	69ba      	ldr	r2, [r7, #24]
 801113e:	4413      	add	r3, r2
 8011140:	2200      	movs	r2, #0
 8011142:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8011144:	7ffb      	ldrb	r3, [r7, #31]
 8011146:	3301      	adds	r3, #1
 8011148:	77fb      	strb	r3, [r7, #31]
 801114a:	7ffa      	ldrb	r2, [r7, #31]
 801114c:	69bb      	ldr	r3, [r7, #24]
 801114e:	68db      	ldr	r3, [r3, #12]
 8011150:	429a      	cmp	r2, r3
 8011152:	d3f2      	bcc.n	801113a <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8011154:	69bb      	ldr	r3, [r7, #24]
 8011156:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801115a:	3b01      	subs	r3, #1
 801115c:	0e1b      	lsrs	r3, r3, #24
 801115e:	b2da      	uxtb	r2, r3
 8011160:	69bb      	ldr	r3, [r7, #24]
 8011162:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8011164:	69bb      	ldr	r3, [r7, #24]
 8011166:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801116a:	3b01      	subs	r3, #1
 801116c:	0c1b      	lsrs	r3, r3, #16
 801116e:	b2da      	uxtb	r2, r3
 8011170:	69bb      	ldr	r3, [r7, #24]
 8011172:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8011174:	69bb      	ldr	r3, [r7, #24]
 8011176:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801117a:	3b01      	subs	r3, #1
 801117c:	0a1b      	lsrs	r3, r3, #8
 801117e:	b2da      	uxtb	r2, r3
 8011180:	69bb      	ldr	r3, [r7, #24]
 8011182:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8011184:	69bb      	ldr	r3, [r7, #24]
 8011186:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801118a:	b2db      	uxtb	r3, r3
 801118c:	3b01      	subs	r3, #1
 801118e:	b2da      	uxtb	r2, r3
 8011190:	69bb      	ldr	r3, [r7, #24]
 8011192:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8011194:	69bb      	ldr	r3, [r7, #24]
 8011196:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801119a:	161b      	asrs	r3, r3, #24
 801119c:	b2da      	uxtb	r2, r3
 801119e:	69bb      	ldr	r3, [r7, #24]
 80111a0:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80111a2:	69bb      	ldr	r3, [r7, #24]
 80111a4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80111a8:	141b      	asrs	r3, r3, #16
 80111aa:	b2da      	uxtb	r2, r3
 80111ac:	69bb      	ldr	r3, [r7, #24]
 80111ae:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80111b0:	69bb      	ldr	r3, [r7, #24]
 80111b2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80111b6:	0a1b      	lsrs	r3, r3, #8
 80111b8:	b29b      	uxth	r3, r3
 80111ba:	b2da      	uxtb	r2, r3
 80111bc:	69bb      	ldr	r3, [r7, #24]
 80111be:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80111c0:	69bb      	ldr	r3, [r7, #24]
 80111c2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80111c6:	b2da      	uxtb	r2, r3
 80111c8:	69bb      	ldr	r3, [r7, #24]
 80111ca:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	330a      	adds	r3, #10
 80111d0:	781b      	ldrb	r3, [r3, #0]
 80111d2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	330b      	adds	r3, #11
 80111d8:	781b      	ldrb	r3, [r3, #0]
 80111da:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80111dc:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	330c      	adds	r3, #12
 80111e2:	781b      	ldrb	r3, [r3, #0]
 80111e4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80111e6:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80111e8:	687a      	ldr	r2, [r7, #4]
 80111ea:	320d      	adds	r2, #13
 80111ec:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80111ee:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80111f0:	69bb      	ldr	r3, [r7, #24]
 80111f2:	60da      	str	r2, [r3, #12]

  return 0;
 80111f4:	2300      	movs	r3, #0
}
 80111f6:	4618      	mov	r0, r3
 80111f8:	3720      	adds	r7, #32
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bd80      	pop	{r7, pc}

080111fe <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80111fe:	b580      	push	{r7, lr}
 8011200:	b088      	sub	sp, #32
 8011202:	af00      	add	r7, sp, #0
 8011204:	60f8      	str	r0, [r7, #12]
 8011206:	460b      	mov	r3, r1
 8011208:	607a      	str	r2, [r7, #4]
 801120a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	32b0      	adds	r2, #176	; 0xb0
 8011216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801121a:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801121c:	69bb      	ldr	r3, [r7, #24]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d102      	bne.n	8011228 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8011222:	f04f 33ff 	mov.w	r3, #4294967295
 8011226:	e061      	b.n	80112ec <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801122e:	68fa      	ldr	r2, [r7, #12]
 8011230:	33b0      	adds	r3, #176	; 0xb0
 8011232:	009b      	lsls	r3, r3, #2
 8011234:	4413      	add	r3, r2
 8011236:	685b      	ldr	r3, [r3, #4]
 8011238:	685b      	ldr	r3, [r3, #4]
 801123a:	f107 0214 	add.w	r2, r7, #20
 801123e:	f107 0110 	add.w	r1, r7, #16
 8011242:	7af8      	ldrb	r0, [r7, #11]
 8011244:	4798      	blx	r3
 8011246:	4603      	mov	r3, r0
 8011248:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801124a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d104      	bne.n	801125c <SCSI_ReadFormatCapacity+0x5e>
 8011252:	69bb      	ldr	r3, [r7, #24]
 8011254:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8011258:	2b02      	cmp	r3, #2
 801125a:	d108      	bne.n	801126e <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801125c:	7af9      	ldrb	r1, [r7, #11]
 801125e:	233a      	movs	r3, #58	; 0x3a
 8011260:	2202      	movs	r2, #2
 8011262:	68f8      	ldr	r0, [r7, #12]
 8011264:	f000 f929 	bl	80114ba <SCSI_SenseCode>
    return -1;
 8011268:	f04f 33ff 	mov.w	r3, #4294967295
 801126c:	e03e      	b.n	80112ec <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 801126e:	2300      	movs	r3, #0
 8011270:	83fb      	strh	r3, [r7, #30]
 8011272:	e007      	b.n	8011284 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8011274:	8bfb      	ldrh	r3, [r7, #30]
 8011276:	69ba      	ldr	r2, [r7, #24]
 8011278:	4413      	add	r3, r2
 801127a:	2200      	movs	r2, #0
 801127c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 801127e:	8bfb      	ldrh	r3, [r7, #30]
 8011280:	3301      	adds	r3, #1
 8011282:	83fb      	strh	r3, [r7, #30]
 8011284:	8bfb      	ldrh	r3, [r7, #30]
 8011286:	2b0b      	cmp	r3, #11
 8011288:	d9f4      	bls.n	8011274 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 801128a:	69bb      	ldr	r3, [r7, #24]
 801128c:	2208      	movs	r2, #8
 801128e:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8011290:	693b      	ldr	r3, [r7, #16]
 8011292:	3b01      	subs	r3, #1
 8011294:	0e1b      	lsrs	r3, r3, #24
 8011296:	b2da      	uxtb	r2, r3
 8011298:	69bb      	ldr	r3, [r7, #24]
 801129a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 801129c:	693b      	ldr	r3, [r7, #16]
 801129e:	3b01      	subs	r3, #1
 80112a0:	0c1b      	lsrs	r3, r3, #16
 80112a2:	b2da      	uxtb	r2, r3
 80112a4:	69bb      	ldr	r3, [r7, #24]
 80112a6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80112a8:	693b      	ldr	r3, [r7, #16]
 80112aa:	3b01      	subs	r3, #1
 80112ac:	0a1b      	lsrs	r3, r3, #8
 80112ae:	b2da      	uxtb	r2, r3
 80112b0:	69bb      	ldr	r3, [r7, #24]
 80112b2:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80112b4:	693b      	ldr	r3, [r7, #16]
 80112b6:	b2db      	uxtb	r3, r3
 80112b8:	3b01      	subs	r3, #1
 80112ba:	b2da      	uxtb	r2, r3
 80112bc:	69bb      	ldr	r3, [r7, #24]
 80112be:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 80112c0:	69bb      	ldr	r3, [r7, #24]
 80112c2:	2202      	movs	r2, #2
 80112c4:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80112c6:	8abb      	ldrh	r3, [r7, #20]
 80112c8:	141b      	asrs	r3, r3, #16
 80112ca:	b2da      	uxtb	r2, r3
 80112cc:	69bb      	ldr	r3, [r7, #24]
 80112ce:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80112d0:	8abb      	ldrh	r3, [r7, #20]
 80112d2:	0a1b      	lsrs	r3, r3, #8
 80112d4:	b29b      	uxth	r3, r3
 80112d6:	b2da      	uxtb	r2, r3
 80112d8:	69bb      	ldr	r3, [r7, #24]
 80112da:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 80112dc:	8abb      	ldrh	r3, [r7, #20]
 80112de:	b2da      	uxtb	r2, r3
 80112e0:	69bb      	ldr	r3, [r7, #24]
 80112e2:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 80112e4:	69bb      	ldr	r3, [r7, #24]
 80112e6:	220c      	movs	r2, #12
 80112e8:	60da      	str	r2, [r3, #12]

  return 0;
 80112ea:	2300      	movs	r3, #0
}
 80112ec:	4618      	mov	r0, r3
 80112ee:	3720      	adds	r7, #32
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd80      	pop	{r7, pc}

080112f4 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b086      	sub	sp, #24
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	60f8      	str	r0, [r7, #12]
 80112fc:	460b      	mov	r3, r1
 80112fe:	607a      	str	r2, [r7, #4]
 8011300:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	32b0      	adds	r2, #176	; 0xb0
 801130c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011310:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8011312:	2317      	movs	r3, #23
 8011314:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8011316:	693b      	ldr	r3, [r7, #16]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d102      	bne.n	8011322 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 801131c:	f04f 33ff 	mov.w	r3, #4294967295
 8011320:	e011      	b.n	8011346 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	3304      	adds	r3, #4
 8011326:	781b      	ldrb	r3, [r3, #0]
 8011328:	b29b      	uxth	r3, r3
 801132a:	8afa      	ldrh	r2, [r7, #22]
 801132c:	429a      	cmp	r2, r3
 801132e:	d303      	bcc.n	8011338 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	3304      	adds	r3, #4
 8011334:	781b      	ldrb	r3, [r3, #0]
 8011336:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8011338:	8afb      	ldrh	r3, [r7, #22]
 801133a:	461a      	mov	r2, r3
 801133c:	4904      	ldr	r1, [pc, #16]	; (8011350 <SCSI_ModeSense6+0x5c>)
 801133e:	6938      	ldr	r0, [r7, #16]
 8011340:	f000 fe28 	bl	8011f94 <SCSI_UpdateBotData>

  return 0;
 8011344:	2300      	movs	r3, #0
}
 8011346:	4618      	mov	r0, r3
 8011348:	3718      	adds	r7, #24
 801134a:	46bd      	mov	sp, r7
 801134c:	bd80      	pop	{r7, pc}
 801134e:	bf00      	nop
 8011350:	24000084 	.word	0x24000084

08011354 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b086      	sub	sp, #24
 8011358:	af00      	add	r7, sp, #0
 801135a:	60f8      	str	r0, [r7, #12]
 801135c:	460b      	mov	r3, r1
 801135e:	607a      	str	r2, [r7, #4]
 8011360:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	32b0      	adds	r2, #176	; 0xb0
 801136c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011370:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8011372:	231b      	movs	r3, #27
 8011374:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8011376:	693b      	ldr	r3, [r7, #16]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d102      	bne.n	8011382 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 801137c:	f04f 33ff 	mov.w	r3, #4294967295
 8011380:	e011      	b.n	80113a6 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	3308      	adds	r3, #8
 8011386:	781b      	ldrb	r3, [r3, #0]
 8011388:	b29b      	uxth	r3, r3
 801138a:	8afa      	ldrh	r2, [r7, #22]
 801138c:	429a      	cmp	r2, r3
 801138e:	d303      	bcc.n	8011398 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	3308      	adds	r3, #8
 8011394:	781b      	ldrb	r3, [r3, #0]
 8011396:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8011398:	8afb      	ldrh	r3, [r7, #22]
 801139a:	461a      	mov	r2, r3
 801139c:	4904      	ldr	r1, [pc, #16]	; (80113b0 <SCSI_ModeSense10+0x5c>)
 801139e:	6938      	ldr	r0, [r7, #16]
 80113a0:	f000 fdf8 	bl	8011f94 <SCSI_UpdateBotData>

  return 0;
 80113a4:	2300      	movs	r3, #0
}
 80113a6:	4618      	mov	r0, r3
 80113a8:	3718      	adds	r7, #24
 80113aa:	46bd      	mov	sp, r7
 80113ac:	bd80      	pop	{r7, pc}
 80113ae:	bf00      	nop
 80113b0:	2400009c 	.word	0x2400009c

080113b4 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80113b4:	b580      	push	{r7, lr}
 80113b6:	b086      	sub	sp, #24
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	60f8      	str	r0, [r7, #12]
 80113bc:	460b      	mov	r3, r1
 80113be:	607a      	str	r2, [r7, #4]
 80113c0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	32b0      	adds	r2, #176	; 0xb0
 80113cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113d0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80113d2:	693b      	ldr	r3, [r7, #16]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d102      	bne.n	80113de <SCSI_RequestSense+0x2a>
  {
    return -1;
 80113d8:	f04f 33ff 	mov.w	r3, #4294967295
 80113dc:	e069      	b.n	80114b2 <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80113de:	693b      	ldr	r3, [r7, #16]
 80113e0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d10a      	bne.n	80113fe <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80113e8:	693b      	ldr	r3, [r7, #16]
 80113ea:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80113ee:	2320      	movs	r3, #32
 80113f0:	2205      	movs	r2, #5
 80113f2:	68f8      	ldr	r0, [r7, #12]
 80113f4:	f000 f861 	bl	80114ba <SCSI_SenseCode>
    return -1;
 80113f8:	f04f 33ff 	mov.w	r3, #4294967295
 80113fc:	e059      	b.n	80114b2 <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80113fe:	2300      	movs	r3, #0
 8011400:	75fb      	strb	r3, [r7, #23]
 8011402:	e007      	b.n	8011414 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8011404:	7dfb      	ldrb	r3, [r7, #23]
 8011406:	693a      	ldr	r2, [r7, #16]
 8011408:	4413      	add	r3, r2
 801140a:	2200      	movs	r2, #0
 801140c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801140e:	7dfb      	ldrb	r3, [r7, #23]
 8011410:	3301      	adds	r3, #1
 8011412:	75fb      	strb	r3, [r7, #23]
 8011414:	7dfb      	ldrb	r3, [r7, #23]
 8011416:	2b11      	cmp	r3, #17
 8011418:	d9f4      	bls.n	8011404 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 801141a:	693b      	ldr	r3, [r7, #16]
 801141c:	2270      	movs	r2, #112	; 0x70
 801141e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8011420:	693b      	ldr	r3, [r7, #16]
 8011422:	220c      	movs	r2, #12
 8011424:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8011426:	693b      	ldr	r3, [r7, #16]
 8011428:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 801142c:	693b      	ldr	r3, [r7, #16]
 801142e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8011432:	429a      	cmp	r2, r3
 8011434:	d02e      	beq.n	8011494 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8011436:	693b      	ldr	r3, [r7, #16]
 8011438:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801143c:	461a      	mov	r2, r3
 801143e:	693b      	ldr	r3, [r7, #16]
 8011440:	3248      	adds	r2, #72	; 0x48
 8011442:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8011446:	693b      	ldr	r3, [r7, #16]
 8011448:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 801144a:	693b      	ldr	r3, [r7, #16]
 801144c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8011450:	693a      	ldr	r2, [r7, #16]
 8011452:	3348      	adds	r3, #72	; 0x48
 8011454:	00db      	lsls	r3, r3, #3
 8011456:	4413      	add	r3, r2
 8011458:	791a      	ldrb	r2, [r3, #4]
 801145a:	693b      	ldr	r3, [r7, #16]
 801145c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 801145e:	693b      	ldr	r3, [r7, #16]
 8011460:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8011464:	693a      	ldr	r2, [r7, #16]
 8011466:	3348      	adds	r3, #72	; 0x48
 8011468:	00db      	lsls	r3, r3, #3
 801146a:	4413      	add	r3, r2
 801146c:	795a      	ldrb	r2, [r3, #5]
 801146e:	693b      	ldr	r3, [r7, #16]
 8011470:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8011472:	693b      	ldr	r3, [r7, #16]
 8011474:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8011478:	3301      	adds	r3, #1
 801147a:	b2da      	uxtb	r2, r3
 801147c:	693b      	ldr	r3, [r7, #16]
 801147e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8011482:	693b      	ldr	r3, [r7, #16]
 8011484:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8011488:	2b04      	cmp	r3, #4
 801148a:	d103      	bne.n	8011494 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 801148c:	693b      	ldr	r3, [r7, #16]
 801148e:	2200      	movs	r2, #0
 8011490:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8011494:	693b      	ldr	r3, [r7, #16]
 8011496:	2212      	movs	r2, #18
 8011498:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	3304      	adds	r3, #4
 801149e:	781b      	ldrb	r3, [r3, #0]
 80114a0:	2b12      	cmp	r3, #18
 80114a2:	d805      	bhi.n	80114b0 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	3304      	adds	r3, #4
 80114a8:	781b      	ldrb	r3, [r3, #0]
 80114aa:	461a      	mov	r2, r3
 80114ac:	693b      	ldr	r3, [r7, #16]
 80114ae:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80114b0:	2300      	movs	r3, #0
}
 80114b2:	4618      	mov	r0, r3
 80114b4:	3718      	adds	r7, #24
 80114b6:	46bd      	mov	sp, r7
 80114b8:	bd80      	pop	{r7, pc}

080114ba <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80114ba:	b480      	push	{r7}
 80114bc:	b085      	sub	sp, #20
 80114be:	af00      	add	r7, sp, #0
 80114c0:	6078      	str	r0, [r7, #4]
 80114c2:	4608      	mov	r0, r1
 80114c4:	4611      	mov	r1, r2
 80114c6:	461a      	mov	r2, r3
 80114c8:	4603      	mov	r3, r0
 80114ca:	70fb      	strb	r3, [r7, #3]
 80114cc:	460b      	mov	r3, r1
 80114ce:	70bb      	strb	r3, [r7, #2]
 80114d0:	4613      	mov	r3, r2
 80114d2:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	32b0      	adds	r2, #176	; 0xb0
 80114de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114e2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d02c      	beq.n	8011544 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80114f0:	461a      	mov	r2, r3
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	3248      	adds	r2, #72	; 0x48
 80114f6:	78b9      	ldrb	r1, [r7, #2]
 80114f8:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8011502:	68fa      	ldr	r2, [r7, #12]
 8011504:	3348      	adds	r3, #72	; 0x48
 8011506:	00db      	lsls	r3, r3, #3
 8011508:	4413      	add	r3, r2
 801150a:	787a      	ldrb	r2, [r7, #1]
 801150c:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8011514:	68fa      	ldr	r2, [r7, #12]
 8011516:	3348      	adds	r3, #72	; 0x48
 8011518:	00db      	lsls	r3, r3, #3
 801151a:	4413      	add	r3, r2
 801151c:	2200      	movs	r2, #0
 801151e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8011526:	3301      	adds	r3, #1
 8011528:	b2da      	uxtb	r2, r3
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8011536:	2b04      	cmp	r3, #4
 8011538:	d105      	bne.n	8011546 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	2200      	movs	r2, #0
 801153e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8011542:	e000      	b.n	8011546 <SCSI_SenseCode+0x8c>
    return;
 8011544:	bf00      	nop
  }
}
 8011546:	3714      	adds	r7, #20
 8011548:	46bd      	mov	sp, r7
 801154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154e:	4770      	bx	lr

08011550 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011550:	b580      	push	{r7, lr}
 8011552:	b086      	sub	sp, #24
 8011554:	af00      	add	r7, sp, #0
 8011556:	60f8      	str	r0, [r7, #12]
 8011558:	460b      	mov	r3, r1
 801155a:	607a      	str	r2, [r7, #4]
 801155c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	32b0      	adds	r2, #176	; 0xb0
 8011568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801156c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801156e:	697b      	ldr	r3, [r7, #20]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d102      	bne.n	801157a <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8011574:	f04f 33ff 	mov.w	r3, #4294967295
 8011578:	e03b      	b.n	80115f2 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 801157a:	697b      	ldr	r3, [r7, #20]
 801157c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8011580:	2b01      	cmp	r3, #1
 8011582:	d10f      	bne.n	80115a4 <SCSI_StartStopUnit+0x54>
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	3304      	adds	r3, #4
 8011588:	781b      	ldrb	r3, [r3, #0]
 801158a:	f003 0303 	and.w	r3, r3, #3
 801158e:	2b02      	cmp	r3, #2
 8011590:	d108      	bne.n	80115a4 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8011592:	7af9      	ldrb	r1, [r7, #11]
 8011594:	2324      	movs	r3, #36	; 0x24
 8011596:	2205      	movs	r2, #5
 8011598:	68f8      	ldr	r0, [r7, #12]
 801159a:	f7ff ff8e 	bl	80114ba <SCSI_SenseCode>

    return -1;
 801159e:	f04f 33ff 	mov.w	r3, #4294967295
 80115a2:	e026      	b.n	80115f2 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	3304      	adds	r3, #4
 80115a8:	781b      	ldrb	r3, [r3, #0]
 80115aa:	f003 0303 	and.w	r3, r3, #3
 80115ae:	2b01      	cmp	r3, #1
 80115b0:	d104      	bne.n	80115bc <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80115b2:	697b      	ldr	r3, [r7, #20]
 80115b4:	2200      	movs	r2, #0
 80115b6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80115ba:	e016      	b.n	80115ea <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	3304      	adds	r3, #4
 80115c0:	781b      	ldrb	r3, [r3, #0]
 80115c2:	f003 0303 	and.w	r3, r3, #3
 80115c6:	2b02      	cmp	r3, #2
 80115c8:	d104      	bne.n	80115d4 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80115ca:	697b      	ldr	r3, [r7, #20]
 80115cc:	2202      	movs	r2, #2
 80115ce:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80115d2:	e00a      	b.n	80115ea <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	3304      	adds	r3, #4
 80115d8:	781b      	ldrb	r3, [r3, #0]
 80115da:	f003 0303 	and.w	r3, r3, #3
 80115de:	2b03      	cmp	r3, #3
 80115e0:	d103      	bne.n	80115ea <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80115e2:	697b      	ldr	r3, [r7, #20]
 80115e4:	2200      	movs	r2, #0
 80115e6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80115ea:	697b      	ldr	r3, [r7, #20]
 80115ec:	2200      	movs	r2, #0
 80115ee:	60da      	str	r2, [r3, #12]

  return 0;
 80115f0:	2300      	movs	r3, #0
}
 80115f2:	4618      	mov	r0, r3
 80115f4:	3718      	adds	r7, #24
 80115f6:	46bd      	mov	sp, r7
 80115f8:	bd80      	pop	{r7, pc}

080115fa <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80115fa:	b480      	push	{r7}
 80115fc:	b087      	sub	sp, #28
 80115fe:	af00      	add	r7, sp, #0
 8011600:	60f8      	str	r0, [r7, #12]
 8011602:	460b      	mov	r3, r1
 8011604:	607a      	str	r2, [r7, #4]
 8011606:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	32b0      	adds	r2, #176	; 0xb0
 8011612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011616:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011618:	697b      	ldr	r3, [r7, #20]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d102      	bne.n	8011624 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 801161e:	f04f 33ff 	mov.w	r3, #4294967295
 8011622:	e011      	b.n	8011648 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	3304      	adds	r3, #4
 8011628:	781b      	ldrb	r3, [r3, #0]
 801162a:	2b00      	cmp	r3, #0
 801162c:	d104      	bne.n	8011638 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801162e:	697b      	ldr	r3, [r7, #20]
 8011630:	2200      	movs	r2, #0
 8011632:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8011636:	e003      	b.n	8011640 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8011638:	697b      	ldr	r3, [r7, #20]
 801163a:	2201      	movs	r2, #1
 801163c:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8011640:	697b      	ldr	r3, [r7, #20]
 8011642:	2200      	movs	r2, #0
 8011644:	60da      	str	r2, [r3, #12]

  return 0;
 8011646:	2300      	movs	r3, #0
}
 8011648:	4618      	mov	r0, r3
 801164a:	371c      	adds	r7, #28
 801164c:	46bd      	mov	sp, r7
 801164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011652:	4770      	bx	lr

08011654 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011654:	b580      	push	{r7, lr}
 8011656:	b086      	sub	sp, #24
 8011658:	af00      	add	r7, sp, #0
 801165a:	60f8      	str	r0, [r7, #12]
 801165c:	460b      	mov	r3, r1
 801165e:	607a      	str	r2, [r7, #4]
 8011660:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	32b0      	adds	r2, #176	; 0xb0
 801166c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011670:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011672:	697b      	ldr	r3, [r7, #20]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d102      	bne.n	801167e <SCSI_Read10+0x2a>
  {
    return -1;
 8011678:	f04f 33ff 	mov.w	r3, #4294967295
 801167c:	e090      	b.n	80117a0 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801167e:	697b      	ldr	r3, [r7, #20]
 8011680:	7a1b      	ldrb	r3, [r3, #8]
 8011682:	2b00      	cmp	r3, #0
 8011684:	f040 8082 	bne.w	801178c <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8011688:	697b      	ldr	r3, [r7, #20]
 801168a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801168e:	b25b      	sxtb	r3, r3
 8011690:	2b00      	cmp	r3, #0
 8011692:	db0a      	blt.n	80116aa <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011694:	697b      	ldr	r3, [r7, #20]
 8011696:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801169a:	2320      	movs	r3, #32
 801169c:	2205      	movs	r2, #5
 801169e:	68f8      	ldr	r0, [r7, #12]
 80116a0:	f7ff ff0b 	bl	80114ba <SCSI_SenseCode>
      return -1;
 80116a4:	f04f 33ff 	mov.w	r3, #4294967295
 80116a8:	e07a      	b.n	80117a0 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80116aa:	697b      	ldr	r3, [r7, #20]
 80116ac:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80116b0:	2b02      	cmp	r3, #2
 80116b2:	d108      	bne.n	80116c6 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80116b4:	7af9      	ldrb	r1, [r7, #11]
 80116b6:	233a      	movs	r3, #58	; 0x3a
 80116b8:	2202      	movs	r2, #2
 80116ba:	68f8      	ldr	r0, [r7, #12]
 80116bc:	f7ff fefd 	bl	80114ba <SCSI_SenseCode>

      return -1;
 80116c0:	f04f 33ff 	mov.w	r3, #4294967295
 80116c4:	e06c      	b.n	80117a0 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80116cc:	68fa      	ldr	r2, [r7, #12]
 80116ce:	33b0      	adds	r3, #176	; 0xb0
 80116d0:	009b      	lsls	r3, r3, #2
 80116d2:	4413      	add	r3, r2
 80116d4:	685b      	ldr	r3, [r3, #4]
 80116d6:	689b      	ldr	r3, [r3, #8]
 80116d8:	7afa      	ldrb	r2, [r7, #11]
 80116da:	4610      	mov	r0, r2
 80116dc:	4798      	blx	r3
 80116de:	4603      	mov	r3, r0
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d008      	beq.n	80116f6 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80116e4:	7af9      	ldrb	r1, [r7, #11]
 80116e6:	233a      	movs	r3, #58	; 0x3a
 80116e8:	2202      	movs	r2, #2
 80116ea:	68f8      	ldr	r0, [r7, #12]
 80116ec:	f7ff fee5 	bl	80114ba <SCSI_SenseCode>
      return -1;
 80116f0:	f04f 33ff 	mov.w	r3, #4294967295
 80116f4:	e054      	b.n	80117a0 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	3302      	adds	r3, #2
 80116fa:	781b      	ldrb	r3, [r3, #0]
 80116fc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	3303      	adds	r3, #3
 8011702:	781b      	ldrb	r3, [r3, #0]
 8011704:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011706:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	3304      	adds	r3, #4
 801170c:	781b      	ldrb	r3, [r3, #0]
 801170e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8011710:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8011712:	687a      	ldr	r2, [r7, #4]
 8011714:	3205      	adds	r2, #5
 8011716:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8011718:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801171a:	697b      	ldr	r3, [r7, #20]
 801171c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	3307      	adds	r3, #7
 8011724:	781b      	ldrb	r3, [r3, #0]
 8011726:	021b      	lsls	r3, r3, #8
 8011728:	687a      	ldr	r2, [r7, #4]
 801172a:	3208      	adds	r2, #8
 801172c:	7812      	ldrb	r2, [r2, #0]
 801172e:	431a      	orrs	r2, r3
 8011730:	697b      	ldr	r3, [r7, #20]
 8011732:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8011736:	697b      	ldr	r3, [r7, #20]
 8011738:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801173c:	697b      	ldr	r3, [r7, #20]
 801173e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011742:	7af9      	ldrb	r1, [r7, #11]
 8011744:	68f8      	ldr	r0, [r7, #12]
 8011746:	f000 fadc 	bl	8011d02 <SCSI_CheckAddressRange>
 801174a:	4603      	mov	r3, r0
 801174c:	2b00      	cmp	r3, #0
 801174e:	da02      	bge.n	8011756 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8011750:	f04f 33ff 	mov.w	r3, #4294967295
 8011754:	e024      	b.n	80117a0 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8011756:	697b      	ldr	r3, [r7, #20]
 8011758:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801175c:	697b      	ldr	r3, [r7, #20]
 801175e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011762:	6979      	ldr	r1, [r7, #20]
 8011764:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8011768:	fb01 f303 	mul.w	r3, r1, r3
 801176c:	429a      	cmp	r2, r3
 801176e:	d00a      	beq.n	8011786 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011770:	697b      	ldr	r3, [r7, #20]
 8011772:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011776:	2320      	movs	r3, #32
 8011778:	2205      	movs	r2, #5
 801177a:	68f8      	ldr	r0, [r7, #12]
 801177c:	f7ff fe9d 	bl	80114ba <SCSI_SenseCode>
      return -1;
 8011780:	f04f 33ff 	mov.w	r3, #4294967295
 8011784:	e00c      	b.n	80117a0 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8011786:	697b      	ldr	r3, [r7, #20]
 8011788:	2202      	movs	r2, #2
 801178a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 801178c:	697b      	ldr	r3, [r7, #20]
 801178e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011792:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8011794:	7afb      	ldrb	r3, [r7, #11]
 8011796:	4619      	mov	r1, r3
 8011798:	68f8      	ldr	r0, [r7, #12]
 801179a:	f000 fadf 	bl	8011d5c <SCSI_ProcessRead>
 801179e:	4603      	mov	r3, r0
}
 80117a0:	4618      	mov	r0, r3
 80117a2:	3718      	adds	r7, #24
 80117a4:	46bd      	mov	sp, r7
 80117a6:	bd80      	pop	{r7, pc}

080117a8 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80117a8:	b580      	push	{r7, lr}
 80117aa:	b086      	sub	sp, #24
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	60f8      	str	r0, [r7, #12]
 80117b0:	460b      	mov	r3, r1
 80117b2:	607a      	str	r2, [r7, #4]
 80117b4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	32b0      	adds	r2, #176	; 0xb0
 80117c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117c4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80117c6:	697b      	ldr	r3, [r7, #20]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d102      	bne.n	80117d2 <SCSI_Read12+0x2a>
  {
    return -1;
 80117cc:	f04f 33ff 	mov.w	r3, #4294967295
 80117d0:	e09a      	b.n	8011908 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80117d2:	697b      	ldr	r3, [r7, #20]
 80117d4:	7a1b      	ldrb	r3, [r3, #8]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	f040 808c 	bne.w	80118f4 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80117dc:	697b      	ldr	r3, [r7, #20]
 80117de:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80117e2:	b25b      	sxtb	r3, r3
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	db0a      	blt.n	80117fe <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80117e8:	697b      	ldr	r3, [r7, #20]
 80117ea:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80117ee:	2320      	movs	r3, #32
 80117f0:	2205      	movs	r2, #5
 80117f2:	68f8      	ldr	r0, [r7, #12]
 80117f4:	f7ff fe61 	bl	80114ba <SCSI_SenseCode>
      return -1;
 80117f8:	f04f 33ff 	mov.w	r3, #4294967295
 80117fc:	e084      	b.n	8011908 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80117fe:	697b      	ldr	r3, [r7, #20]
 8011800:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8011804:	2b02      	cmp	r3, #2
 8011806:	d108      	bne.n	801181a <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011808:	7af9      	ldrb	r1, [r7, #11]
 801180a:	233a      	movs	r3, #58	; 0x3a
 801180c:	2202      	movs	r2, #2
 801180e:	68f8      	ldr	r0, [r7, #12]
 8011810:	f7ff fe53 	bl	80114ba <SCSI_SenseCode>
      return -1;
 8011814:	f04f 33ff 	mov.w	r3, #4294967295
 8011818:	e076      	b.n	8011908 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011820:	68fa      	ldr	r2, [r7, #12]
 8011822:	33b0      	adds	r3, #176	; 0xb0
 8011824:	009b      	lsls	r3, r3, #2
 8011826:	4413      	add	r3, r2
 8011828:	685b      	ldr	r3, [r3, #4]
 801182a:	689b      	ldr	r3, [r3, #8]
 801182c:	7afa      	ldrb	r2, [r7, #11]
 801182e:	4610      	mov	r0, r2
 8011830:	4798      	blx	r3
 8011832:	4603      	mov	r3, r0
 8011834:	2b00      	cmp	r3, #0
 8011836:	d008      	beq.n	801184a <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011838:	7af9      	ldrb	r1, [r7, #11]
 801183a:	233a      	movs	r3, #58	; 0x3a
 801183c:	2202      	movs	r2, #2
 801183e:	68f8      	ldr	r0, [r7, #12]
 8011840:	f7ff fe3b 	bl	80114ba <SCSI_SenseCode>
      return -1;
 8011844:	f04f 33ff 	mov.w	r3, #4294967295
 8011848:	e05e      	b.n	8011908 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	3302      	adds	r3, #2
 801184e:	781b      	ldrb	r3, [r3, #0]
 8011850:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	3303      	adds	r3, #3
 8011856:	781b      	ldrb	r3, [r3, #0]
 8011858:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801185a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	3304      	adds	r3, #4
 8011860:	781b      	ldrb	r3, [r3, #0]
 8011862:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8011864:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8011866:	687a      	ldr	r2, [r7, #4]
 8011868:	3205      	adds	r2, #5
 801186a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 801186c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801186e:	697b      	ldr	r3, [r7, #20]
 8011870:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	3306      	adds	r3, #6
 8011878:	781b      	ldrb	r3, [r3, #0]
 801187a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	3307      	adds	r3, #7
 8011880:	781b      	ldrb	r3, [r3, #0]
 8011882:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011884:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	3308      	adds	r3, #8
 801188a:	781b      	ldrb	r3, [r3, #0]
 801188c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801188e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8011890:	687a      	ldr	r2, [r7, #4]
 8011892:	3209      	adds	r2, #9
 8011894:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8011896:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011898:	697b      	ldr	r3, [r7, #20]
 801189a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801189e:	697b      	ldr	r3, [r7, #20]
 80118a0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80118a4:	697b      	ldr	r3, [r7, #20]
 80118a6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80118aa:	7af9      	ldrb	r1, [r7, #11]
 80118ac:	68f8      	ldr	r0, [r7, #12]
 80118ae:	f000 fa28 	bl	8011d02 <SCSI_CheckAddressRange>
 80118b2:	4603      	mov	r3, r0
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	da02      	bge.n	80118be <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80118b8:	f04f 33ff 	mov.w	r3, #4294967295
 80118bc:	e024      	b.n	8011908 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80118be:	697b      	ldr	r3, [r7, #20]
 80118c0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80118c4:	697b      	ldr	r3, [r7, #20]
 80118c6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80118ca:	6979      	ldr	r1, [r7, #20]
 80118cc:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 80118d0:	fb01 f303 	mul.w	r3, r1, r3
 80118d4:	429a      	cmp	r2, r3
 80118d6:	d00a      	beq.n	80118ee <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80118d8:	697b      	ldr	r3, [r7, #20]
 80118da:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80118de:	2320      	movs	r3, #32
 80118e0:	2205      	movs	r2, #5
 80118e2:	68f8      	ldr	r0, [r7, #12]
 80118e4:	f7ff fde9 	bl	80114ba <SCSI_SenseCode>
      return -1;
 80118e8:	f04f 33ff 	mov.w	r3, #4294967295
 80118ec:	e00c      	b.n	8011908 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80118ee:	697b      	ldr	r3, [r7, #20]
 80118f0:	2202      	movs	r2, #2
 80118f2:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80118f4:	697b      	ldr	r3, [r7, #20]
 80118f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80118fa:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80118fc:	7afb      	ldrb	r3, [r7, #11]
 80118fe:	4619      	mov	r1, r3
 8011900:	68f8      	ldr	r0, [r7, #12]
 8011902:	f000 fa2b 	bl	8011d5c <SCSI_ProcessRead>
 8011906:	4603      	mov	r3, r0
}
 8011908:	4618      	mov	r0, r3
 801190a:	3718      	adds	r7, #24
 801190c:	46bd      	mov	sp, r7
 801190e:	bd80      	pop	{r7, pc}

08011910 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b086      	sub	sp, #24
 8011914:	af00      	add	r7, sp, #0
 8011916:	60f8      	str	r0, [r7, #12]
 8011918:	460b      	mov	r3, r1
 801191a:	607a      	str	r2, [r7, #4]
 801191c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	32b0      	adds	r2, #176	; 0xb0
 8011928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801192c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 801192e:	697b      	ldr	r3, [r7, #20]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d102      	bne.n	801193a <SCSI_Write10+0x2a>
  {
    return -1;
 8011934:	f04f 33ff 	mov.w	r3, #4294967295
 8011938:	e0ba      	b.n	8011ab0 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801193a:	697b      	ldr	r3, [r7, #20]
 801193c:	7a1b      	ldrb	r3, [r3, #8]
 801193e:	2b00      	cmp	r3, #0
 8011940:	f040 80b0 	bne.w	8011aa4 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8011944:	697b      	ldr	r3, [r7, #20]
 8011946:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801194a:	2b00      	cmp	r3, #0
 801194c:	d10a      	bne.n	8011964 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801194e:	697b      	ldr	r3, [r7, #20]
 8011950:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011954:	2320      	movs	r3, #32
 8011956:	2205      	movs	r2, #5
 8011958:	68f8      	ldr	r0, [r7, #12]
 801195a:	f7ff fdae 	bl	80114ba <SCSI_SenseCode>
      return -1;
 801195e:	f04f 33ff 	mov.w	r3, #4294967295
 8011962:	e0a5      	b.n	8011ab0 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8011964:	697b      	ldr	r3, [r7, #20]
 8011966:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801196a:	b25b      	sxtb	r3, r3
 801196c:	2b00      	cmp	r3, #0
 801196e:	da0a      	bge.n	8011986 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011970:	697b      	ldr	r3, [r7, #20]
 8011972:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011976:	2320      	movs	r3, #32
 8011978:	2205      	movs	r2, #5
 801197a:	68f8      	ldr	r0, [r7, #12]
 801197c:	f7ff fd9d 	bl	80114ba <SCSI_SenseCode>
      return -1;
 8011980:	f04f 33ff 	mov.w	r3, #4294967295
 8011984:	e094      	b.n	8011ab0 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801198c:	68fa      	ldr	r2, [r7, #12]
 801198e:	33b0      	adds	r3, #176	; 0xb0
 8011990:	009b      	lsls	r3, r3, #2
 8011992:	4413      	add	r3, r2
 8011994:	685b      	ldr	r3, [r3, #4]
 8011996:	689b      	ldr	r3, [r3, #8]
 8011998:	7afa      	ldrb	r2, [r7, #11]
 801199a:	4610      	mov	r0, r2
 801199c:	4798      	blx	r3
 801199e:	4603      	mov	r3, r0
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d008      	beq.n	80119b6 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80119a4:	7af9      	ldrb	r1, [r7, #11]
 80119a6:	233a      	movs	r3, #58	; 0x3a
 80119a8:	2202      	movs	r2, #2
 80119aa:	68f8      	ldr	r0, [r7, #12]
 80119ac:	f7ff fd85 	bl	80114ba <SCSI_SenseCode>
      return -1;
 80119b0:	f04f 33ff 	mov.w	r3, #4294967295
 80119b4:	e07c      	b.n	8011ab0 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80119bc:	68fa      	ldr	r2, [r7, #12]
 80119be:	33b0      	adds	r3, #176	; 0xb0
 80119c0:	009b      	lsls	r3, r3, #2
 80119c2:	4413      	add	r3, r2
 80119c4:	685b      	ldr	r3, [r3, #4]
 80119c6:	68db      	ldr	r3, [r3, #12]
 80119c8:	7afa      	ldrb	r2, [r7, #11]
 80119ca:	4610      	mov	r0, r2
 80119cc:	4798      	blx	r3
 80119ce:	4603      	mov	r3, r0
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d008      	beq.n	80119e6 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80119d4:	7af9      	ldrb	r1, [r7, #11]
 80119d6:	2327      	movs	r3, #39	; 0x27
 80119d8:	2202      	movs	r2, #2
 80119da:	68f8      	ldr	r0, [r7, #12]
 80119dc:	f7ff fd6d 	bl	80114ba <SCSI_SenseCode>
      return -1;
 80119e0:	f04f 33ff 	mov.w	r3, #4294967295
 80119e4:	e064      	b.n	8011ab0 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	3302      	adds	r3, #2
 80119ea:	781b      	ldrb	r3, [r3, #0]
 80119ec:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	3303      	adds	r3, #3
 80119f2:	781b      	ldrb	r3, [r3, #0]
 80119f4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80119f6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	3304      	adds	r3, #4
 80119fc:	781b      	ldrb	r3, [r3, #0]
 80119fe:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8011a00:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8011a02:	687a      	ldr	r2, [r7, #4]
 8011a04:	3205      	adds	r2, #5
 8011a06:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8011a08:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011a0a:	697b      	ldr	r3, [r7, #20]
 8011a0c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	3307      	adds	r3, #7
 8011a14:	781b      	ldrb	r3, [r3, #0]
 8011a16:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8011a18:	687a      	ldr	r2, [r7, #4]
 8011a1a:	3208      	adds	r2, #8
 8011a1c:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8011a1e:	431a      	orrs	r2, r3
 8011a20:	697b      	ldr	r3, [r7, #20]
 8011a22:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8011a26:	697b      	ldr	r3, [r7, #20]
 8011a28:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8011a2c:	697b      	ldr	r3, [r7, #20]
 8011a2e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011a32:	7af9      	ldrb	r1, [r7, #11]
 8011a34:	68f8      	ldr	r0, [r7, #12]
 8011a36:	f000 f964 	bl	8011d02 <SCSI_CheckAddressRange>
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	da02      	bge.n	8011a46 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8011a40:	f04f 33ff 	mov.w	r3, #4294967295
 8011a44:	e034      	b.n	8011ab0 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8011a46:	697b      	ldr	r3, [r7, #20]
 8011a48:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011a4c:	697a      	ldr	r2, [r7, #20]
 8011a4e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8011a52:	fb02 f303 	mul.w	r3, r2, r3
 8011a56:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8011a58:	697b      	ldr	r3, [r7, #20]
 8011a5a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011a5e:	693a      	ldr	r2, [r7, #16]
 8011a60:	429a      	cmp	r2, r3
 8011a62:	d00a      	beq.n	8011a7a <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011a64:	697b      	ldr	r3, [r7, #20]
 8011a66:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011a6a:	2320      	movs	r3, #32
 8011a6c:	2205      	movs	r2, #5
 8011a6e:	68f8      	ldr	r0, [r7, #12]
 8011a70:	f7ff fd23 	bl	80114ba <SCSI_SenseCode>
      return -1;
 8011a74:	f04f 33ff 	mov.w	r3, #4294967295
 8011a78:	e01a      	b.n	8011ab0 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8011a7a:	693b      	ldr	r3, [r7, #16]
 8011a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011a80:	bf28      	it	cs
 8011a82:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8011a86:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8011a88:	697b      	ldr	r3, [r7, #20]
 8011a8a:	2201      	movs	r2, #1
 8011a8c:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8011a8e:	4b0a      	ldr	r3, [pc, #40]	; (8011ab8 <SCSI_Write10+0x1a8>)
 8011a90:	7819      	ldrb	r1, [r3, #0]
 8011a92:	697b      	ldr	r3, [r7, #20]
 8011a94:	f103 0210 	add.w	r2, r3, #16
 8011a98:	693b      	ldr	r3, [r7, #16]
 8011a9a:	68f8      	ldr	r0, [r7, #12]
 8011a9c:	f00f f9d7 	bl	8020e4e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	e005      	b.n	8011ab0 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 8011aa4:	7afb      	ldrb	r3, [r7, #11]
 8011aa6:	4619      	mov	r1, r3
 8011aa8:	68f8      	ldr	r0, [r7, #12]
 8011aaa:	f000 f9dd 	bl	8011e68 <SCSI_ProcessWrite>
 8011aae:	4603      	mov	r3, r0
}
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	3718      	adds	r7, #24
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	bd80      	pop	{r7, pc}
 8011ab8:	24000073 	.word	0x24000073

08011abc <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b086      	sub	sp, #24
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	60f8      	str	r0, [r7, #12]
 8011ac4:	460b      	mov	r3, r1
 8011ac6:	607a      	str	r2, [r7, #4]
 8011ac8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	32b0      	adds	r2, #176	; 0xb0
 8011ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ad8:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8011ada:	697b      	ldr	r3, [r7, #20]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d102      	bne.n	8011ae6 <SCSI_Write12+0x2a>
  {
    return -1;
 8011ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8011ae4:	e0ca      	b.n	8011c7c <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8011ae6:	697b      	ldr	r3, [r7, #20]
 8011ae8:	7a1b      	ldrb	r3, [r3, #8]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	f040 80c0 	bne.w	8011c70 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8011af0:	697b      	ldr	r3, [r7, #20]
 8011af2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d10a      	bne.n	8011b10 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011afa:	697b      	ldr	r3, [r7, #20]
 8011afc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011b00:	2320      	movs	r3, #32
 8011b02:	2205      	movs	r2, #5
 8011b04:	68f8      	ldr	r0, [r7, #12]
 8011b06:	f7ff fcd8 	bl	80114ba <SCSI_SenseCode>
      return -1;
 8011b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8011b0e:	e0b5      	b.n	8011c7c <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8011b10:	697b      	ldr	r3, [r7, #20]
 8011b12:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8011b16:	b25b      	sxtb	r3, r3
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	da0a      	bge.n	8011b32 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011b1c:	697b      	ldr	r3, [r7, #20]
 8011b1e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011b22:	2320      	movs	r3, #32
 8011b24:	2205      	movs	r2, #5
 8011b26:	68f8      	ldr	r0, [r7, #12]
 8011b28:	f7ff fcc7 	bl	80114ba <SCSI_SenseCode>
      return -1;
 8011b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8011b30:	e0a4      	b.n	8011c7c <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011b38:	68fa      	ldr	r2, [r7, #12]
 8011b3a:	33b0      	adds	r3, #176	; 0xb0
 8011b3c:	009b      	lsls	r3, r3, #2
 8011b3e:	4413      	add	r3, r2
 8011b40:	685b      	ldr	r3, [r3, #4]
 8011b42:	689b      	ldr	r3, [r3, #8]
 8011b44:	7afa      	ldrb	r2, [r7, #11]
 8011b46:	4610      	mov	r0, r2
 8011b48:	4798      	blx	r3
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d00b      	beq.n	8011b68 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011b50:	7af9      	ldrb	r1, [r7, #11]
 8011b52:	233a      	movs	r3, #58	; 0x3a
 8011b54:	2202      	movs	r2, #2
 8011b56:	68f8      	ldr	r0, [r7, #12]
 8011b58:	f7ff fcaf 	bl	80114ba <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8011b5c:	697b      	ldr	r3, [r7, #20]
 8011b5e:	2205      	movs	r2, #5
 8011b60:	721a      	strb	r2, [r3, #8]
      return -1;
 8011b62:	f04f 33ff 	mov.w	r3, #4294967295
 8011b66:	e089      	b.n	8011c7c <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011b6e:	68fa      	ldr	r2, [r7, #12]
 8011b70:	33b0      	adds	r3, #176	; 0xb0
 8011b72:	009b      	lsls	r3, r3, #2
 8011b74:	4413      	add	r3, r2
 8011b76:	685b      	ldr	r3, [r3, #4]
 8011b78:	68db      	ldr	r3, [r3, #12]
 8011b7a:	7afa      	ldrb	r2, [r7, #11]
 8011b7c:	4610      	mov	r0, r2
 8011b7e:	4798      	blx	r3
 8011b80:	4603      	mov	r3, r0
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d00b      	beq.n	8011b9e <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8011b86:	7af9      	ldrb	r1, [r7, #11]
 8011b88:	2327      	movs	r3, #39	; 0x27
 8011b8a:	2202      	movs	r2, #2
 8011b8c:	68f8      	ldr	r0, [r7, #12]
 8011b8e:	f7ff fc94 	bl	80114ba <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8011b92:	697b      	ldr	r3, [r7, #20]
 8011b94:	2205      	movs	r2, #5
 8011b96:	721a      	strb	r2, [r3, #8]
      return -1;
 8011b98:	f04f 33ff 	mov.w	r3, #4294967295
 8011b9c:	e06e      	b.n	8011c7c <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	3302      	adds	r3, #2
 8011ba2:	781b      	ldrb	r3, [r3, #0]
 8011ba4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	3303      	adds	r3, #3
 8011baa:	781b      	ldrb	r3, [r3, #0]
 8011bac:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011bae:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	3304      	adds	r3, #4
 8011bb4:	781b      	ldrb	r3, [r3, #0]
 8011bb6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8011bb8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8011bba:	687a      	ldr	r2, [r7, #4]
 8011bbc:	3205      	adds	r2, #5
 8011bbe:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8011bc0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011bc2:	697b      	ldr	r3, [r7, #20]
 8011bc4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	3306      	adds	r3, #6
 8011bcc:	781b      	ldrb	r3, [r3, #0]
 8011bce:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	3307      	adds	r3, #7
 8011bd4:	781b      	ldrb	r3, [r3, #0]
 8011bd6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011bd8:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	3308      	adds	r3, #8
 8011bde:	781b      	ldrb	r3, [r3, #0]
 8011be0:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8011be2:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8011be4:	687a      	ldr	r2, [r7, #4]
 8011be6:	3209      	adds	r2, #9
 8011be8:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8011bea:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011bec:	697b      	ldr	r3, [r7, #20]
 8011bee:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8011bf2:	697b      	ldr	r3, [r7, #20]
 8011bf4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8011bf8:	697b      	ldr	r3, [r7, #20]
 8011bfa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011bfe:	7af9      	ldrb	r1, [r7, #11]
 8011c00:	68f8      	ldr	r0, [r7, #12]
 8011c02:	f000 f87e 	bl	8011d02 <SCSI_CheckAddressRange>
 8011c06:	4603      	mov	r3, r0
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	da02      	bge.n	8011c12 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8011c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8011c10:	e034      	b.n	8011c7c <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8011c12:	697b      	ldr	r3, [r7, #20]
 8011c14:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011c18:	697a      	ldr	r2, [r7, #20]
 8011c1a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8011c1e:	fb02 f303 	mul.w	r3, r2, r3
 8011c22:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8011c24:	697b      	ldr	r3, [r7, #20]
 8011c26:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011c2a:	693a      	ldr	r2, [r7, #16]
 8011c2c:	429a      	cmp	r2, r3
 8011c2e:	d00a      	beq.n	8011c46 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011c30:	697b      	ldr	r3, [r7, #20]
 8011c32:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011c36:	2320      	movs	r3, #32
 8011c38:	2205      	movs	r2, #5
 8011c3a:	68f8      	ldr	r0, [r7, #12]
 8011c3c:	f7ff fc3d 	bl	80114ba <SCSI_SenseCode>
      return -1;
 8011c40:	f04f 33ff 	mov.w	r3, #4294967295
 8011c44:	e01a      	b.n	8011c7c <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8011c46:	693b      	ldr	r3, [r7, #16]
 8011c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011c4c:	bf28      	it	cs
 8011c4e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8011c52:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8011c54:	697b      	ldr	r3, [r7, #20]
 8011c56:	2201      	movs	r2, #1
 8011c58:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8011c5a:	4b0a      	ldr	r3, [pc, #40]	; (8011c84 <SCSI_Write12+0x1c8>)
 8011c5c:	7819      	ldrb	r1, [r3, #0]
 8011c5e:	697b      	ldr	r3, [r7, #20]
 8011c60:	f103 0210 	add.w	r2, r3, #16
 8011c64:	693b      	ldr	r3, [r7, #16]
 8011c66:	68f8      	ldr	r0, [r7, #12]
 8011c68:	f00f f8f1 	bl	8020e4e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	e005      	b.n	8011c7c <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 8011c70:	7afb      	ldrb	r3, [r7, #11]
 8011c72:	4619      	mov	r1, r3
 8011c74:	68f8      	ldr	r0, [r7, #12]
 8011c76:	f000 f8f7 	bl	8011e68 <SCSI_ProcessWrite>
 8011c7a:	4603      	mov	r3, r0
}
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	3718      	adds	r7, #24
 8011c80:	46bd      	mov	sp, r7
 8011c82:	bd80      	pop	{r7, pc}
 8011c84:	24000073 	.word	0x24000073

08011c88 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b086      	sub	sp, #24
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	60f8      	str	r0, [r7, #12]
 8011c90:	460b      	mov	r3, r1
 8011c92:	607a      	str	r2, [r7, #4]
 8011c94:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	32b0      	adds	r2, #176	; 0xb0
 8011ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ca4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011ca6:	697b      	ldr	r3, [r7, #20]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d102      	bne.n	8011cb2 <SCSI_Verify10+0x2a>
  {
    return -1;
 8011cac:	f04f 33ff 	mov.w	r3, #4294967295
 8011cb0:	e023      	b.n	8011cfa <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	3301      	adds	r3, #1
 8011cb6:	781b      	ldrb	r3, [r3, #0]
 8011cb8:	f003 0302 	and.w	r3, r3, #2
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d008      	beq.n	8011cd2 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8011cc0:	7af9      	ldrb	r1, [r7, #11]
 8011cc2:	2324      	movs	r3, #36	; 0x24
 8011cc4:	2205      	movs	r2, #5
 8011cc6:	68f8      	ldr	r0, [r7, #12]
 8011cc8:	f7ff fbf7 	bl	80114ba <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8011ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8011cd0:	e013      	b.n	8011cfa <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8011cd2:	697b      	ldr	r3, [r7, #20]
 8011cd4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8011cd8:	697b      	ldr	r3, [r7, #20]
 8011cda:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011cde:	7af9      	ldrb	r1, [r7, #11]
 8011ce0:	68f8      	ldr	r0, [r7, #12]
 8011ce2:	f000 f80e 	bl	8011d02 <SCSI_CheckAddressRange>
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	da02      	bge.n	8011cf2 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 8011cec:	f04f 33ff 	mov.w	r3, #4294967295
 8011cf0:	e003      	b.n	8011cfa <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 8011cf2:	697b      	ldr	r3, [r7, #20]
 8011cf4:	2200      	movs	r2, #0
 8011cf6:	60da      	str	r2, [r3, #12]

  return 0;
 8011cf8:	2300      	movs	r3, #0
}
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	3718      	adds	r7, #24
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}

08011d02 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8011d02:	b580      	push	{r7, lr}
 8011d04:	b086      	sub	sp, #24
 8011d06:	af00      	add	r7, sp, #0
 8011d08:	60f8      	str	r0, [r7, #12]
 8011d0a:	607a      	str	r2, [r7, #4]
 8011d0c:	603b      	str	r3, [r7, #0]
 8011d0e:	460b      	mov	r3, r1
 8011d10:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	32b0      	adds	r2, #176	; 0xb0
 8011d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d20:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011d22:	697b      	ldr	r3, [r7, #20]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d102      	bne.n	8011d2e <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8011d28:	f04f 33ff 	mov.w	r3, #4294967295
 8011d2c:	e011      	b.n	8011d52 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8011d2e:	687a      	ldr	r2, [r7, #4]
 8011d30:	683b      	ldr	r3, [r7, #0]
 8011d32:	441a      	add	r2, r3
 8011d34:	697b      	ldr	r3, [r7, #20]
 8011d36:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8011d3a:	429a      	cmp	r2, r3
 8011d3c:	d908      	bls.n	8011d50 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8011d3e:	7af9      	ldrb	r1, [r7, #11]
 8011d40:	2321      	movs	r3, #33	; 0x21
 8011d42:	2205      	movs	r2, #5
 8011d44:	68f8      	ldr	r0, [r7, #12]
 8011d46:	f7ff fbb8 	bl	80114ba <SCSI_SenseCode>
    return -1;
 8011d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8011d4e:	e000      	b.n	8011d52 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 8011d50:	2300      	movs	r3, #0
}
 8011d52:	4618      	mov	r0, r3
 8011d54:	3718      	adds	r7, #24
 8011d56:	46bd      	mov	sp, r7
 8011d58:	bd80      	pop	{r7, pc}
	...

08011d5c <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8011d5c:	b590      	push	{r4, r7, lr}
 8011d5e:	b085      	sub	sp, #20
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	6078      	str	r0, [r7, #4]
 8011d64:	460b      	mov	r3, r1
 8011d66:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	32b0      	adds	r2, #176	; 0xb0
 8011d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d76:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d102      	bne.n	8011d84 <SCSI_ProcessRead+0x28>
  {
    return -1;
 8011d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8011d82:	e06a      	b.n	8011e5a <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011d8a:	68fa      	ldr	r2, [r7, #12]
 8011d8c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8011d90:	fb02 f303 	mul.w	r3, r2, r3
 8011d94:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8011d96:	68bb      	ldr	r3, [r7, #8]
 8011d98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011d9c:	bf28      	it	cs
 8011d9e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8011da2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011daa:	687a      	ldr	r2, [r7, #4]
 8011dac:	33b0      	adds	r3, #176	; 0xb0
 8011dae:	009b      	lsls	r3, r3, #2
 8011db0:	4413      	add	r3, r2
 8011db2:	685b      	ldr	r3, [r3, #4]
 8011db4:	691c      	ldr	r4, [r3, #16]
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	f103 0110 	add.w	r1, r3, #16
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011dc8:	4618      	mov	r0, r3
 8011dca:	68bb      	ldr	r3, [r7, #8]
 8011dcc:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8011dd0:	b29b      	uxth	r3, r3
 8011dd2:	78f8      	ldrb	r0, [r7, #3]
 8011dd4:	47a0      	blx	r4
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	da08      	bge.n	8011dee <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8011ddc:	78f9      	ldrb	r1, [r7, #3]
 8011dde:	2311      	movs	r3, #17
 8011de0:	2204      	movs	r2, #4
 8011de2:	6878      	ldr	r0, [r7, #4]
 8011de4:	f7ff fb69 	bl	80114ba <SCSI_SenseCode>
    return -1;
 8011de8:	f04f 33ff 	mov.w	r3, #4294967295
 8011dec:	e035      	b.n	8011e5a <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8011dee:	4b1d      	ldr	r3, [pc, #116]	; (8011e64 <SCSI_ProcessRead+0x108>)
 8011df0:	7819      	ldrb	r1, [r3, #0]
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	f103 0210 	add.w	r2, r3, #16
 8011df8:	68bb      	ldr	r3, [r7, #8]
 8011dfa:	6878      	ldr	r0, [r7, #4]
 8011dfc:	f00f f806 	bl	8020e0c <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011e0c:	4619      	mov	r1, r3
 8011e0e:	68bb      	ldr	r3, [r7, #8]
 8011e10:	fbb3 f3f1 	udiv	r3, r3, r1
 8011e14:	441a      	add	r2, r3
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011e28:	4619      	mov	r1, r3
 8011e2a:	68bb      	ldr	r3, [r7, #8]
 8011e2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8011e30:	1ad2      	subs	r2, r2, r3
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8011e3e:	68bb      	ldr	r3, [r7, #8]
 8011e40:	1ad2      	subs	r2, r2, r3
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d102      	bne.n	8011e58 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	2203      	movs	r2, #3
 8011e56:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8011e58:	2300      	movs	r3, #0
}
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	3714      	adds	r7, #20
 8011e5e:	46bd      	mov	sp, r7
 8011e60:	bd90      	pop	{r4, r7, pc}
 8011e62:	bf00      	nop
 8011e64:	24000072 	.word	0x24000072

08011e68 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8011e68:	b590      	push	{r4, r7, lr}
 8011e6a:	b085      	sub	sp, #20
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	6078      	str	r0, [r7, #4]
 8011e70:	460b      	mov	r3, r1
 8011e72:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	32b0      	adds	r2, #176	; 0xb0
 8011e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e82:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d102      	bne.n	8011e90 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 8011e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8011e8e:	e07a      	b.n	8011f86 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011e96:	68fa      	ldr	r2, [r7, #12]
 8011e98:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8011e9c:	fb02 f303 	mul.w	r3, r2, r3
 8011ea0:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8011ea2:	68bb      	ldr	r3, [r7, #8]
 8011ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011ea8:	bf28      	it	cs
 8011eaa:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8011eae:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011eb6:	687a      	ldr	r2, [r7, #4]
 8011eb8:	33b0      	adds	r3, #176	; 0xb0
 8011eba:	009b      	lsls	r3, r3, #2
 8011ebc:	4413      	add	r3, r2
 8011ebe:	685b      	ldr	r3, [r3, #4]
 8011ec0:	695c      	ldr	r4, [r3, #20]
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	f103 0110 	add.w	r1, r3, #16
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	68bb      	ldr	r3, [r7, #8]
 8011ed8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8011edc:	b29b      	uxth	r3, r3
 8011ede:	78f8      	ldrb	r0, [r7, #3]
 8011ee0:	47a0      	blx	r4
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	da08      	bge.n	8011efa <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8011ee8:	78f9      	ldrb	r1, [r7, #3]
 8011eea:	2303      	movs	r3, #3
 8011eec:	2204      	movs	r2, #4
 8011eee:	6878      	ldr	r0, [r7, #4]
 8011ef0:	f7ff fae3 	bl	80114ba <SCSI_SenseCode>
    return -1;
 8011ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8011ef8:	e045      	b.n	8011f86 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011f06:	4619      	mov	r1, r3
 8011f08:	68bb      	ldr	r3, [r7, #8]
 8011f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f0e:	441a      	add	r2, r3
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011f22:	4619      	mov	r1, r3
 8011f24:	68bb      	ldr	r3, [r7, #8]
 8011f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f2a:	1ad2      	subs	r2, r2, r3
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8011f38:	68bb      	ldr	r3, [r7, #8]
 8011f3a:	1ad2      	subs	r2, r2, r3
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d104      	bne.n	8011f56 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8011f4c:	2100      	movs	r1, #0
 8011f4e:	6878      	ldr	r0, [r7, #4]
 8011f50:	f7fe fd14 	bl	801097c <MSC_BOT_SendCSW>
 8011f54:	e016      	b.n	8011f84 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011f5c:	68fa      	ldr	r2, [r7, #12]
 8011f5e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8011f62:	fb02 f303 	mul.w	r3, r2, r3
 8011f66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011f6a:	bf28      	it	cs
 8011f6c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8011f70:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8011f72:	4b07      	ldr	r3, [pc, #28]	; (8011f90 <SCSI_ProcessWrite+0x128>)
 8011f74:	7819      	ldrb	r1, [r3, #0]
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	f103 0210 	add.w	r2, r3, #16
 8011f7c:	68bb      	ldr	r3, [r7, #8]
 8011f7e:	6878      	ldr	r0, [r7, #4]
 8011f80:	f00e ff65 	bl	8020e4e <USBD_LL_PrepareReceive>
  }

  return 0;
 8011f84:	2300      	movs	r3, #0
}
 8011f86:	4618      	mov	r0, r3
 8011f88:	3714      	adds	r7, #20
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	bd90      	pop	{r4, r7, pc}
 8011f8e:	bf00      	nop
 8011f90:	24000073 	.word	0x24000073

08011f94 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8011f94:	b480      	push	{r7}
 8011f96:	b087      	sub	sp, #28
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	60f8      	str	r0, [r7, #12]
 8011f9c:	60b9      	str	r1, [r7, #8]
 8011f9e:	4613      	mov	r3, r2
 8011fa0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8011fa2:	88fb      	ldrh	r3, [r7, #6]
 8011fa4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d102      	bne.n	8011fb2 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8011fac:	f04f 33ff 	mov.w	r3, #4294967295
 8011fb0:	e013      	b.n	8011fda <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8011fb2:	8afa      	ldrh	r2, [r7, #22]
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8011fb8:	e00b      	b.n	8011fd2 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8011fba:	8afb      	ldrh	r3, [r7, #22]
 8011fbc:	3b01      	subs	r3, #1
 8011fbe:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8011fc0:	8afb      	ldrh	r3, [r7, #22]
 8011fc2:	68ba      	ldr	r2, [r7, #8]
 8011fc4:	441a      	add	r2, r3
 8011fc6:	8afb      	ldrh	r3, [r7, #22]
 8011fc8:	7811      	ldrb	r1, [r2, #0]
 8011fca:	68fa      	ldr	r2, [r7, #12]
 8011fcc:	4413      	add	r3, r2
 8011fce:	460a      	mov	r2, r1
 8011fd0:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8011fd2:	8afb      	ldrh	r3, [r7, #22]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d1f0      	bne.n	8011fba <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8011fd8:	2300      	movs	r3, #0
}
 8011fda:	4618      	mov	r0, r3
 8011fdc:	371c      	adds	r7, #28
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe4:	4770      	bx	lr

08011fe6 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011fe6:	b580      	push	{r7, lr}
 8011fe8:	b086      	sub	sp, #24
 8011fea:	af00      	add	r7, sp, #0
 8011fec:	60f8      	str	r0, [r7, #12]
 8011fee:	60b9      	str	r1, [r7, #8]
 8011ff0:	4613      	mov	r3, r2
 8011ff2:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d101      	bne.n	8011ffe <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011ffa:	2303      	movs	r3, #3
 8011ffc:	e01f      	b.n	801203e <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	2200      	movs	r2, #0
 8012002:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	2200      	movs	r2, #0
 801200a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	2200      	movs	r2, #0
 8012012:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012016:	68bb      	ldr	r3, [r7, #8]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d003      	beq.n	8012024 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	68ba      	ldr	r2, [r7, #8]
 8012020:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	2201      	movs	r2, #1
 8012028:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	79fa      	ldrb	r2, [r7, #7]
 8012030:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8012032:	68f8      	ldr	r0, [r7, #12]
 8012034:	f00e fd92 	bl	8020b5c <USBD_LL_Init>
 8012038:	4603      	mov	r3, r0
 801203a:	75fb      	strb	r3, [r7, #23]

  return ret;
 801203c:	7dfb      	ldrb	r3, [r7, #23]
}
 801203e:	4618      	mov	r0, r3
 8012040:	3718      	adds	r7, #24
 8012042:	46bd      	mov	sp, r7
 8012044:	bd80      	pop	{r7, pc}

08012046 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8012046:	b580      	push	{r7, lr}
 8012048:	b084      	sub	sp, #16
 801204a:	af00      	add	r7, sp, #0
 801204c:	6078      	str	r0, [r7, #4]
 801204e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012050:	2300      	movs	r3, #0
 8012052:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8012054:	683b      	ldr	r3, [r7, #0]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d101      	bne.n	801205e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801205a:	2303      	movs	r3, #3
 801205c:	e025      	b.n	80120aa <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	683a      	ldr	r2, [r7, #0]
 8012062:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	32ae      	adds	r2, #174	; 0xae
 8012070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012076:	2b00      	cmp	r3, #0
 8012078:	d00f      	beq.n	801209a <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	32ae      	adds	r2, #174	; 0xae
 8012084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801208a:	f107 020e 	add.w	r2, r7, #14
 801208e:	4610      	mov	r0, r2
 8012090:	4798      	blx	r3
 8012092:	4602      	mov	r2, r0
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80120a0:	1c5a      	adds	r2, r3, #1
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80120a8:	2300      	movs	r3, #0
}
 80120aa:	4618      	mov	r0, r3
 80120ac:	3710      	adds	r7, #16
 80120ae:	46bd      	mov	sp, r7
 80120b0:	bd80      	pop	{r7, pc}

080120b2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80120b2:	b580      	push	{r7, lr}
 80120b4:	b082      	sub	sp, #8
 80120b6:	af00      	add	r7, sp, #0
 80120b8:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80120ba:	6878      	ldr	r0, [r7, #4]
 80120bc:	f00e fd9e 	bl	8020bfc <USBD_LL_Start>
 80120c0:	4603      	mov	r3, r0
}
 80120c2:	4618      	mov	r0, r3
 80120c4:	3708      	adds	r7, #8
 80120c6:	46bd      	mov	sp, r7
 80120c8:	bd80      	pop	{r7, pc}

080120ca <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80120ca:	b480      	push	{r7}
 80120cc:	b083      	sub	sp, #12
 80120ce:	af00      	add	r7, sp, #0
 80120d0:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80120d2:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80120d4:	4618      	mov	r0, r3
 80120d6:	370c      	adds	r7, #12
 80120d8:	46bd      	mov	sp, r7
 80120da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120de:	4770      	bx	lr

080120e0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b084      	sub	sp, #16
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
 80120e8:	460b      	mov	r3, r1
 80120ea:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80120ec:	2300      	movs	r3, #0
 80120ee:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d009      	beq.n	801210e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	78fa      	ldrb	r2, [r7, #3]
 8012104:	4611      	mov	r1, r2
 8012106:	6878      	ldr	r0, [r7, #4]
 8012108:	4798      	blx	r3
 801210a:	4603      	mov	r3, r0
 801210c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801210e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012110:	4618      	mov	r0, r3
 8012112:	3710      	adds	r7, #16
 8012114:	46bd      	mov	sp, r7
 8012116:	bd80      	pop	{r7, pc}

08012118 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012118:	b580      	push	{r7, lr}
 801211a:	b084      	sub	sp, #16
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]
 8012120:	460b      	mov	r3, r1
 8012122:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012124:	2300      	movs	r3, #0
 8012126:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801212e:	685b      	ldr	r3, [r3, #4]
 8012130:	78fa      	ldrb	r2, [r7, #3]
 8012132:	4611      	mov	r1, r2
 8012134:	6878      	ldr	r0, [r7, #4]
 8012136:	4798      	blx	r3
 8012138:	4603      	mov	r3, r0
 801213a:	2b00      	cmp	r3, #0
 801213c:	d001      	beq.n	8012142 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801213e:	2303      	movs	r3, #3
 8012140:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012142:	7bfb      	ldrb	r3, [r7, #15]
}
 8012144:	4618      	mov	r0, r3
 8012146:	3710      	adds	r7, #16
 8012148:	46bd      	mov	sp, r7
 801214a:	bd80      	pop	{r7, pc}

0801214c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801214c:	b580      	push	{r7, lr}
 801214e:	b084      	sub	sp, #16
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
 8012154:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801215c:	6839      	ldr	r1, [r7, #0]
 801215e:	4618      	mov	r0, r3
 8012160:	f001 f909 	bl	8013376 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	2201      	movs	r2, #1
 8012168:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8012172:	461a      	mov	r2, r3
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8012180:	f003 031f 	and.w	r3, r3, #31
 8012184:	2b02      	cmp	r3, #2
 8012186:	d01a      	beq.n	80121be <USBD_LL_SetupStage+0x72>
 8012188:	2b02      	cmp	r3, #2
 801218a:	d822      	bhi.n	80121d2 <USBD_LL_SetupStage+0x86>
 801218c:	2b00      	cmp	r3, #0
 801218e:	d002      	beq.n	8012196 <USBD_LL_SetupStage+0x4a>
 8012190:	2b01      	cmp	r3, #1
 8012192:	d00a      	beq.n	80121aa <USBD_LL_SetupStage+0x5e>
 8012194:	e01d      	b.n	80121d2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801219c:	4619      	mov	r1, r3
 801219e:	6878      	ldr	r0, [r7, #4]
 80121a0:	f000 fb60 	bl	8012864 <USBD_StdDevReq>
 80121a4:	4603      	mov	r3, r0
 80121a6:	73fb      	strb	r3, [r7, #15]
      break;
 80121a8:	e020      	b.n	80121ec <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80121b0:	4619      	mov	r1, r3
 80121b2:	6878      	ldr	r0, [r7, #4]
 80121b4:	f000 fbc8 	bl	8012948 <USBD_StdItfReq>
 80121b8:	4603      	mov	r3, r0
 80121ba:	73fb      	strb	r3, [r7, #15]
      break;
 80121bc:	e016      	b.n	80121ec <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80121c4:	4619      	mov	r1, r3
 80121c6:	6878      	ldr	r0, [r7, #4]
 80121c8:	f000 fc2a 	bl	8012a20 <USBD_StdEPReq>
 80121cc:	4603      	mov	r3, r0
 80121ce:	73fb      	strb	r3, [r7, #15]
      break;
 80121d0:	e00c      	b.n	80121ec <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80121d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80121dc:	b2db      	uxtb	r3, r3
 80121de:	4619      	mov	r1, r3
 80121e0:	6878      	ldr	r0, [r7, #4]
 80121e2:	f00e fd8a 	bl	8020cfa <USBD_LL_StallEP>
 80121e6:	4603      	mov	r3, r0
 80121e8:	73fb      	strb	r3, [r7, #15]
      break;
 80121ea:	bf00      	nop
  }

  return ret;
 80121ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80121ee:	4618      	mov	r0, r3
 80121f0:	3710      	adds	r7, #16
 80121f2:	46bd      	mov	sp, r7
 80121f4:	bd80      	pop	{r7, pc}

080121f6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80121f6:	b580      	push	{r7, lr}
 80121f8:	b086      	sub	sp, #24
 80121fa:	af00      	add	r7, sp, #0
 80121fc:	60f8      	str	r0, [r7, #12]
 80121fe:	460b      	mov	r3, r1
 8012200:	607a      	str	r2, [r7, #4]
 8012202:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8012204:	2300      	movs	r3, #0
 8012206:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8012208:	7afb      	ldrb	r3, [r7, #11]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d16e      	bne.n	80122ec <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8012214:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801221c:	2b03      	cmp	r3, #3
 801221e:	f040 8098 	bne.w	8012352 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8012222:	693b      	ldr	r3, [r7, #16]
 8012224:	689a      	ldr	r2, [r3, #8]
 8012226:	693b      	ldr	r3, [r7, #16]
 8012228:	68db      	ldr	r3, [r3, #12]
 801222a:	429a      	cmp	r2, r3
 801222c:	d913      	bls.n	8012256 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801222e:	693b      	ldr	r3, [r7, #16]
 8012230:	689a      	ldr	r2, [r3, #8]
 8012232:	693b      	ldr	r3, [r7, #16]
 8012234:	68db      	ldr	r3, [r3, #12]
 8012236:	1ad2      	subs	r2, r2, r3
 8012238:	693b      	ldr	r3, [r7, #16]
 801223a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801223c:	693b      	ldr	r3, [r7, #16]
 801223e:	68da      	ldr	r2, [r3, #12]
 8012240:	693b      	ldr	r3, [r7, #16]
 8012242:	689b      	ldr	r3, [r3, #8]
 8012244:	4293      	cmp	r3, r2
 8012246:	bf28      	it	cs
 8012248:	4613      	movcs	r3, r2
 801224a:	461a      	mov	r2, r3
 801224c:	6879      	ldr	r1, [r7, #4]
 801224e:	68f8      	ldr	r0, [r7, #12]
 8012250:	f001 f968 	bl	8013524 <USBD_CtlContinueRx>
 8012254:	e07d      	b.n	8012352 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801225c:	f003 031f 	and.w	r3, r3, #31
 8012260:	2b02      	cmp	r3, #2
 8012262:	d014      	beq.n	801228e <USBD_LL_DataOutStage+0x98>
 8012264:	2b02      	cmp	r3, #2
 8012266:	d81d      	bhi.n	80122a4 <USBD_LL_DataOutStage+0xae>
 8012268:	2b00      	cmp	r3, #0
 801226a:	d002      	beq.n	8012272 <USBD_LL_DataOutStage+0x7c>
 801226c:	2b01      	cmp	r3, #1
 801226e:	d003      	beq.n	8012278 <USBD_LL_DataOutStage+0x82>
 8012270:	e018      	b.n	80122a4 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8012272:	2300      	movs	r3, #0
 8012274:	75bb      	strb	r3, [r7, #22]
            break;
 8012276:	e018      	b.n	80122aa <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801227e:	b2db      	uxtb	r3, r3
 8012280:	4619      	mov	r1, r3
 8012282:	68f8      	ldr	r0, [r7, #12]
 8012284:	f000 fa5e 	bl	8012744 <USBD_CoreFindIF>
 8012288:	4603      	mov	r3, r0
 801228a:	75bb      	strb	r3, [r7, #22]
            break;
 801228c:	e00d      	b.n	80122aa <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8012294:	b2db      	uxtb	r3, r3
 8012296:	4619      	mov	r1, r3
 8012298:	68f8      	ldr	r0, [r7, #12]
 801229a:	f000 fa60 	bl	801275e <USBD_CoreFindEP>
 801229e:	4603      	mov	r3, r0
 80122a0:	75bb      	strb	r3, [r7, #22]
            break;
 80122a2:	e002      	b.n	80122aa <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80122a4:	2300      	movs	r3, #0
 80122a6:	75bb      	strb	r3, [r7, #22]
            break;
 80122a8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80122aa:	7dbb      	ldrb	r3, [r7, #22]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d119      	bne.n	80122e4 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80122b6:	b2db      	uxtb	r3, r3
 80122b8:	2b03      	cmp	r3, #3
 80122ba:	d113      	bne.n	80122e4 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80122bc:	7dba      	ldrb	r2, [r7, #22]
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	32ae      	adds	r2, #174	; 0xae
 80122c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80122c6:	691b      	ldr	r3, [r3, #16]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d00b      	beq.n	80122e4 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80122cc:	7dba      	ldrb	r2, [r7, #22]
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80122d4:	7dba      	ldrb	r2, [r7, #22]
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	32ae      	adds	r2, #174	; 0xae
 80122da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80122de:	691b      	ldr	r3, [r3, #16]
 80122e0:	68f8      	ldr	r0, [r7, #12]
 80122e2:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80122e4:	68f8      	ldr	r0, [r7, #12]
 80122e6:	f001 f92e 	bl	8013546 <USBD_CtlSendStatus>
 80122ea:	e032      	b.n	8012352 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80122ec:	7afb      	ldrb	r3, [r7, #11]
 80122ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80122f2:	b2db      	uxtb	r3, r3
 80122f4:	4619      	mov	r1, r3
 80122f6:	68f8      	ldr	r0, [r7, #12]
 80122f8:	f000 fa31 	bl	801275e <USBD_CoreFindEP>
 80122fc:	4603      	mov	r3, r0
 80122fe:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012300:	7dbb      	ldrb	r3, [r7, #22]
 8012302:	2bff      	cmp	r3, #255	; 0xff
 8012304:	d025      	beq.n	8012352 <USBD_LL_DataOutStage+0x15c>
 8012306:	7dbb      	ldrb	r3, [r7, #22]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d122      	bne.n	8012352 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012312:	b2db      	uxtb	r3, r3
 8012314:	2b03      	cmp	r3, #3
 8012316:	d117      	bne.n	8012348 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8012318:	7dba      	ldrb	r2, [r7, #22]
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	32ae      	adds	r2, #174	; 0xae
 801231e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012322:	699b      	ldr	r3, [r3, #24]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d00f      	beq.n	8012348 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8012328:	7dba      	ldrb	r2, [r7, #22]
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8012330:	7dba      	ldrb	r2, [r7, #22]
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	32ae      	adds	r2, #174	; 0xae
 8012336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801233a:	699b      	ldr	r3, [r3, #24]
 801233c:	7afa      	ldrb	r2, [r7, #11]
 801233e:	4611      	mov	r1, r2
 8012340:	68f8      	ldr	r0, [r7, #12]
 8012342:	4798      	blx	r3
 8012344:	4603      	mov	r3, r0
 8012346:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8012348:	7dfb      	ldrb	r3, [r7, #23]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d001      	beq.n	8012352 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801234e:	7dfb      	ldrb	r3, [r7, #23]
 8012350:	e000      	b.n	8012354 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8012352:	2300      	movs	r3, #0
}
 8012354:	4618      	mov	r0, r3
 8012356:	3718      	adds	r7, #24
 8012358:	46bd      	mov	sp, r7
 801235a:	bd80      	pop	{r7, pc}

0801235c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801235c:	b580      	push	{r7, lr}
 801235e:	b086      	sub	sp, #24
 8012360:	af00      	add	r7, sp, #0
 8012362:	60f8      	str	r0, [r7, #12]
 8012364:	460b      	mov	r3, r1
 8012366:	607a      	str	r2, [r7, #4]
 8012368:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801236a:	7afb      	ldrb	r3, [r7, #11]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d16f      	bne.n	8012450 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	3314      	adds	r3, #20
 8012374:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801237c:	2b02      	cmp	r3, #2
 801237e:	d15a      	bne.n	8012436 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8012380:	693b      	ldr	r3, [r7, #16]
 8012382:	689a      	ldr	r2, [r3, #8]
 8012384:	693b      	ldr	r3, [r7, #16]
 8012386:	68db      	ldr	r3, [r3, #12]
 8012388:	429a      	cmp	r2, r3
 801238a:	d914      	bls.n	80123b6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801238c:	693b      	ldr	r3, [r7, #16]
 801238e:	689a      	ldr	r2, [r3, #8]
 8012390:	693b      	ldr	r3, [r7, #16]
 8012392:	68db      	ldr	r3, [r3, #12]
 8012394:	1ad2      	subs	r2, r2, r3
 8012396:	693b      	ldr	r3, [r7, #16]
 8012398:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801239a:	693b      	ldr	r3, [r7, #16]
 801239c:	689b      	ldr	r3, [r3, #8]
 801239e:	461a      	mov	r2, r3
 80123a0:	6879      	ldr	r1, [r7, #4]
 80123a2:	68f8      	ldr	r0, [r7, #12]
 80123a4:	f001 f8ad 	bl	8013502 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80123a8:	2300      	movs	r3, #0
 80123aa:	2200      	movs	r2, #0
 80123ac:	2100      	movs	r1, #0
 80123ae:	68f8      	ldr	r0, [r7, #12]
 80123b0:	f00e fd4d 	bl	8020e4e <USBD_LL_PrepareReceive>
 80123b4:	e03f      	b.n	8012436 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80123b6:	693b      	ldr	r3, [r7, #16]
 80123b8:	68da      	ldr	r2, [r3, #12]
 80123ba:	693b      	ldr	r3, [r7, #16]
 80123bc:	689b      	ldr	r3, [r3, #8]
 80123be:	429a      	cmp	r2, r3
 80123c0:	d11c      	bne.n	80123fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80123c2:	693b      	ldr	r3, [r7, #16]
 80123c4:	685a      	ldr	r2, [r3, #4]
 80123c6:	693b      	ldr	r3, [r7, #16]
 80123c8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80123ca:	429a      	cmp	r2, r3
 80123cc:	d316      	bcc.n	80123fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80123ce:	693b      	ldr	r3, [r7, #16]
 80123d0:	685a      	ldr	r2, [r3, #4]
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80123d8:	429a      	cmp	r2, r3
 80123da:	d20f      	bcs.n	80123fc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80123dc:	2200      	movs	r2, #0
 80123de:	2100      	movs	r1, #0
 80123e0:	68f8      	ldr	r0, [r7, #12]
 80123e2:	f001 f88e 	bl	8013502 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	2200      	movs	r2, #0
 80123ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80123ee:	2300      	movs	r3, #0
 80123f0:	2200      	movs	r2, #0
 80123f2:	2100      	movs	r1, #0
 80123f4:	68f8      	ldr	r0, [r7, #12]
 80123f6:	f00e fd2a 	bl	8020e4e <USBD_LL_PrepareReceive>
 80123fa:	e01c      	b.n	8012436 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012402:	b2db      	uxtb	r3, r3
 8012404:	2b03      	cmp	r3, #3
 8012406:	d10f      	bne.n	8012428 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801240e:	68db      	ldr	r3, [r3, #12]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d009      	beq.n	8012428 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	2200      	movs	r2, #0
 8012418:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012422:	68db      	ldr	r3, [r3, #12]
 8012424:	68f8      	ldr	r0, [r7, #12]
 8012426:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8012428:	2180      	movs	r1, #128	; 0x80
 801242a:	68f8      	ldr	r0, [r7, #12]
 801242c:	f00e fc65 	bl	8020cfa <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8012430:	68f8      	ldr	r0, [r7, #12]
 8012432:	f001 f89b 	bl	801356c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801243c:	2b00      	cmp	r3, #0
 801243e:	d03a      	beq.n	80124b6 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8012440:	68f8      	ldr	r0, [r7, #12]
 8012442:	f7ff fe42 	bl	80120ca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	2200      	movs	r2, #0
 801244a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801244e:	e032      	b.n	80124b6 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8012450:	7afb      	ldrb	r3, [r7, #11]
 8012452:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012456:	b2db      	uxtb	r3, r3
 8012458:	4619      	mov	r1, r3
 801245a:	68f8      	ldr	r0, [r7, #12]
 801245c:	f000 f97f 	bl	801275e <USBD_CoreFindEP>
 8012460:	4603      	mov	r3, r0
 8012462:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012464:	7dfb      	ldrb	r3, [r7, #23]
 8012466:	2bff      	cmp	r3, #255	; 0xff
 8012468:	d025      	beq.n	80124b6 <USBD_LL_DataInStage+0x15a>
 801246a:	7dfb      	ldrb	r3, [r7, #23]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d122      	bne.n	80124b6 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012476:	b2db      	uxtb	r3, r3
 8012478:	2b03      	cmp	r3, #3
 801247a:	d11c      	bne.n	80124b6 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801247c:	7dfa      	ldrb	r2, [r7, #23]
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	32ae      	adds	r2, #174	; 0xae
 8012482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012486:	695b      	ldr	r3, [r3, #20]
 8012488:	2b00      	cmp	r3, #0
 801248a:	d014      	beq.n	80124b6 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801248c:	7dfa      	ldrb	r2, [r7, #23]
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8012494:	7dfa      	ldrb	r2, [r7, #23]
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	32ae      	adds	r2, #174	; 0xae
 801249a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801249e:	695b      	ldr	r3, [r3, #20]
 80124a0:	7afa      	ldrb	r2, [r7, #11]
 80124a2:	4611      	mov	r1, r2
 80124a4:	68f8      	ldr	r0, [r7, #12]
 80124a6:	4798      	blx	r3
 80124a8:	4603      	mov	r3, r0
 80124aa:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80124ac:	7dbb      	ldrb	r3, [r7, #22]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d001      	beq.n	80124b6 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80124b2:	7dbb      	ldrb	r3, [r7, #22]
 80124b4:	e000      	b.n	80124b8 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80124b6:	2300      	movs	r3, #0
}
 80124b8:	4618      	mov	r0, r3
 80124ba:	3718      	adds	r7, #24
 80124bc:	46bd      	mov	sp, r7
 80124be:	bd80      	pop	{r7, pc}

080124c0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80124c0:	b580      	push	{r7, lr}
 80124c2:	b084      	sub	sp, #16
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80124c8:	2300      	movs	r3, #0
 80124ca:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	2201      	movs	r2, #1
 80124d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	2200      	movs	r2, #0
 80124d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	2200      	movs	r2, #0
 80124e0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	2200      	movs	r2, #0
 80124e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	2200      	movs	r2, #0
 80124ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d014      	beq.n	8012526 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012502:	685b      	ldr	r3, [r3, #4]
 8012504:	2b00      	cmp	r3, #0
 8012506:	d00e      	beq.n	8012526 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801250e:	685b      	ldr	r3, [r3, #4]
 8012510:	687a      	ldr	r2, [r7, #4]
 8012512:	6852      	ldr	r2, [r2, #4]
 8012514:	b2d2      	uxtb	r2, r2
 8012516:	4611      	mov	r1, r2
 8012518:	6878      	ldr	r0, [r7, #4]
 801251a:	4798      	blx	r3
 801251c:	4603      	mov	r3, r0
 801251e:	2b00      	cmp	r3, #0
 8012520:	d001      	beq.n	8012526 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8012522:	2303      	movs	r3, #3
 8012524:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012526:	2340      	movs	r3, #64	; 0x40
 8012528:	2200      	movs	r2, #0
 801252a:	2100      	movs	r1, #0
 801252c:	6878      	ldr	r0, [r7, #4]
 801252e:	f00e fb80 	bl	8020c32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	2201      	movs	r2, #1
 8012536:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	2240      	movs	r2, #64	; 0x40
 801253e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012542:	2340      	movs	r3, #64	; 0x40
 8012544:	2200      	movs	r2, #0
 8012546:	2180      	movs	r1, #128	; 0x80
 8012548:	6878      	ldr	r0, [r7, #4]
 801254a:	f00e fb72 	bl	8020c32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	2201      	movs	r2, #1
 8012552:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	2240      	movs	r2, #64	; 0x40
 8012558:	621a      	str	r2, [r3, #32]

  return ret;
 801255a:	7bfb      	ldrb	r3, [r7, #15]
}
 801255c:	4618      	mov	r0, r3
 801255e:	3710      	adds	r7, #16
 8012560:	46bd      	mov	sp, r7
 8012562:	bd80      	pop	{r7, pc}

08012564 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012564:	b480      	push	{r7}
 8012566:	b083      	sub	sp, #12
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]
 801256c:	460b      	mov	r3, r1
 801256e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	78fa      	ldrb	r2, [r7, #3]
 8012574:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012576:	2300      	movs	r3, #0
}
 8012578:	4618      	mov	r0, r3
 801257a:	370c      	adds	r7, #12
 801257c:	46bd      	mov	sp, r7
 801257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012582:	4770      	bx	lr

08012584 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012584:	b480      	push	{r7}
 8012586:	b083      	sub	sp, #12
 8012588:	af00      	add	r7, sp, #0
 801258a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012592:	b2da      	uxtb	r2, r3
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	2204      	movs	r2, #4
 801259e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80125a2:	2300      	movs	r3, #0
}
 80125a4:	4618      	mov	r0, r3
 80125a6:	370c      	adds	r7, #12
 80125a8:	46bd      	mov	sp, r7
 80125aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ae:	4770      	bx	lr

080125b0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80125b0:	b480      	push	{r7}
 80125b2:	b083      	sub	sp, #12
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80125be:	b2db      	uxtb	r3, r3
 80125c0:	2b04      	cmp	r3, #4
 80125c2:	d106      	bne.n	80125d2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80125ca:	b2da      	uxtb	r2, r3
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80125d2:	2300      	movs	r3, #0
}
 80125d4:	4618      	mov	r0, r3
 80125d6:	370c      	adds	r7, #12
 80125d8:	46bd      	mov	sp, r7
 80125da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125de:	4770      	bx	lr

080125e0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b082      	sub	sp, #8
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80125ee:	b2db      	uxtb	r3, r3
 80125f0:	2b03      	cmp	r3, #3
 80125f2:	d110      	bne.n	8012616 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d00b      	beq.n	8012616 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012604:	69db      	ldr	r3, [r3, #28]
 8012606:	2b00      	cmp	r3, #0
 8012608:	d005      	beq.n	8012616 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012610:	69db      	ldr	r3, [r3, #28]
 8012612:	6878      	ldr	r0, [r7, #4]
 8012614:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8012616:	2300      	movs	r3, #0
}
 8012618:	4618      	mov	r0, r3
 801261a:	3708      	adds	r7, #8
 801261c:	46bd      	mov	sp, r7
 801261e:	bd80      	pop	{r7, pc}

08012620 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8012620:	b580      	push	{r7, lr}
 8012622:	b082      	sub	sp, #8
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
 8012628:	460b      	mov	r3, r1
 801262a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	32ae      	adds	r2, #174	; 0xae
 8012636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d101      	bne.n	8012642 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801263e:	2303      	movs	r3, #3
 8012640:	e01c      	b.n	801267c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012648:	b2db      	uxtb	r3, r3
 801264a:	2b03      	cmp	r3, #3
 801264c:	d115      	bne.n	801267a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	32ae      	adds	r2, #174	; 0xae
 8012658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801265c:	6a1b      	ldr	r3, [r3, #32]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d00b      	beq.n	801267a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	32ae      	adds	r2, #174	; 0xae
 801266c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012670:	6a1b      	ldr	r3, [r3, #32]
 8012672:	78fa      	ldrb	r2, [r7, #3]
 8012674:	4611      	mov	r1, r2
 8012676:	6878      	ldr	r0, [r7, #4]
 8012678:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801267a:	2300      	movs	r3, #0
}
 801267c:	4618      	mov	r0, r3
 801267e:	3708      	adds	r7, #8
 8012680:	46bd      	mov	sp, r7
 8012682:	bd80      	pop	{r7, pc}

08012684 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b082      	sub	sp, #8
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
 801268c:	460b      	mov	r3, r1
 801268e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	32ae      	adds	r2, #174	; 0xae
 801269a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d101      	bne.n	80126a6 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80126a2:	2303      	movs	r3, #3
 80126a4:	e01c      	b.n	80126e0 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80126ac:	b2db      	uxtb	r3, r3
 80126ae:	2b03      	cmp	r3, #3
 80126b0:	d115      	bne.n	80126de <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	32ae      	adds	r2, #174	; 0xae
 80126bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80126c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d00b      	beq.n	80126de <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	32ae      	adds	r2, #174	; 0xae
 80126d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80126d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126d6:	78fa      	ldrb	r2, [r7, #3]
 80126d8:	4611      	mov	r1, r2
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80126de:	2300      	movs	r3, #0
}
 80126e0:	4618      	mov	r0, r3
 80126e2:	3708      	adds	r7, #8
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}

080126e8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80126e8:	b480      	push	{r7}
 80126ea:	b083      	sub	sp, #12
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80126f0:	2300      	movs	r3, #0
}
 80126f2:	4618      	mov	r0, r3
 80126f4:	370c      	adds	r7, #12
 80126f6:	46bd      	mov	sp, r7
 80126f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126fc:	4770      	bx	lr

080126fe <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80126fe:	b580      	push	{r7, lr}
 8012700:	b084      	sub	sp, #16
 8012702:	af00      	add	r7, sp, #0
 8012704:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8012706:	2300      	movs	r3, #0
 8012708:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	2201      	movs	r2, #1
 801270e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012718:	2b00      	cmp	r3, #0
 801271a:	d00e      	beq.n	801273a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012722:	685b      	ldr	r3, [r3, #4]
 8012724:	687a      	ldr	r2, [r7, #4]
 8012726:	6852      	ldr	r2, [r2, #4]
 8012728:	b2d2      	uxtb	r2, r2
 801272a:	4611      	mov	r1, r2
 801272c:	6878      	ldr	r0, [r7, #4]
 801272e:	4798      	blx	r3
 8012730:	4603      	mov	r3, r0
 8012732:	2b00      	cmp	r3, #0
 8012734:	d001      	beq.n	801273a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8012736:	2303      	movs	r3, #3
 8012738:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801273a:	7bfb      	ldrb	r3, [r7, #15]
}
 801273c:	4618      	mov	r0, r3
 801273e:	3710      	adds	r7, #16
 8012740:	46bd      	mov	sp, r7
 8012742:	bd80      	pop	{r7, pc}

08012744 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012744:	b480      	push	{r7}
 8012746:	b083      	sub	sp, #12
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]
 801274c:	460b      	mov	r3, r1
 801274e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8012750:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8012752:	4618      	mov	r0, r3
 8012754:	370c      	adds	r7, #12
 8012756:	46bd      	mov	sp, r7
 8012758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801275c:	4770      	bx	lr

0801275e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801275e:	b480      	push	{r7}
 8012760:	b083      	sub	sp, #12
 8012762:	af00      	add	r7, sp, #0
 8012764:	6078      	str	r0, [r7, #4]
 8012766:	460b      	mov	r3, r1
 8012768:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801276a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801276c:	4618      	mov	r0, r3
 801276e:	370c      	adds	r7, #12
 8012770:	46bd      	mov	sp, r7
 8012772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012776:	4770      	bx	lr

08012778 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8012778:	b580      	push	{r7, lr}
 801277a:	b086      	sub	sp, #24
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
 8012780:	460b      	mov	r3, r1
 8012782:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801278c:	2300      	movs	r3, #0
 801278e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	885b      	ldrh	r3, [r3, #2]
 8012794:	b29a      	uxth	r2, r3
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	781b      	ldrb	r3, [r3, #0]
 801279a:	b29b      	uxth	r3, r3
 801279c:	429a      	cmp	r2, r3
 801279e:	d920      	bls.n	80127e2 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	781b      	ldrb	r3, [r3, #0]
 80127a4:	b29b      	uxth	r3, r3
 80127a6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80127a8:	e013      	b.n	80127d2 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80127aa:	f107 030a 	add.w	r3, r7, #10
 80127ae:	4619      	mov	r1, r3
 80127b0:	6978      	ldr	r0, [r7, #20]
 80127b2:	f000 f81b 	bl	80127ec <USBD_GetNextDesc>
 80127b6:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80127b8:	697b      	ldr	r3, [r7, #20]
 80127ba:	785b      	ldrb	r3, [r3, #1]
 80127bc:	2b05      	cmp	r3, #5
 80127be:	d108      	bne.n	80127d2 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80127c0:	697b      	ldr	r3, [r7, #20]
 80127c2:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80127c4:	693b      	ldr	r3, [r7, #16]
 80127c6:	789b      	ldrb	r3, [r3, #2]
 80127c8:	78fa      	ldrb	r2, [r7, #3]
 80127ca:	429a      	cmp	r2, r3
 80127cc:	d008      	beq.n	80127e0 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80127ce:	2300      	movs	r3, #0
 80127d0:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	885b      	ldrh	r3, [r3, #2]
 80127d6:	b29a      	uxth	r2, r3
 80127d8:	897b      	ldrh	r3, [r7, #10]
 80127da:	429a      	cmp	r2, r3
 80127dc:	d8e5      	bhi.n	80127aa <USBD_GetEpDesc+0x32>
 80127de:	e000      	b.n	80127e2 <USBD_GetEpDesc+0x6a>
          break;
 80127e0:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80127e2:	693b      	ldr	r3, [r7, #16]
}
 80127e4:	4618      	mov	r0, r3
 80127e6:	3718      	adds	r7, #24
 80127e8:	46bd      	mov	sp, r7
 80127ea:	bd80      	pop	{r7, pc}

080127ec <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80127ec:	b480      	push	{r7}
 80127ee:	b085      	sub	sp, #20
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	6078      	str	r0, [r7, #4]
 80127f4:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80127fa:	683b      	ldr	r3, [r7, #0]
 80127fc:	881a      	ldrh	r2, [r3, #0]
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	781b      	ldrb	r3, [r3, #0]
 8012802:	b29b      	uxth	r3, r3
 8012804:	4413      	add	r3, r2
 8012806:	b29a      	uxth	r2, r3
 8012808:	683b      	ldr	r3, [r7, #0]
 801280a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	781b      	ldrb	r3, [r3, #0]
 8012810:	461a      	mov	r2, r3
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	4413      	add	r3, r2
 8012816:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8012818:	68fb      	ldr	r3, [r7, #12]
}
 801281a:	4618      	mov	r0, r3
 801281c:	3714      	adds	r7, #20
 801281e:	46bd      	mov	sp, r7
 8012820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012824:	4770      	bx	lr

08012826 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8012826:	b480      	push	{r7}
 8012828:	b087      	sub	sp, #28
 801282a:	af00      	add	r7, sp, #0
 801282c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8012832:	697b      	ldr	r3, [r7, #20]
 8012834:	781b      	ldrb	r3, [r3, #0]
 8012836:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8012838:	697b      	ldr	r3, [r7, #20]
 801283a:	3301      	adds	r3, #1
 801283c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801283e:	697b      	ldr	r3, [r7, #20]
 8012840:	781b      	ldrb	r3, [r3, #0]
 8012842:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8012844:	8a3b      	ldrh	r3, [r7, #16]
 8012846:	021b      	lsls	r3, r3, #8
 8012848:	b21a      	sxth	r2, r3
 801284a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801284e:	4313      	orrs	r3, r2
 8012850:	b21b      	sxth	r3, r3
 8012852:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8012854:	89fb      	ldrh	r3, [r7, #14]
}
 8012856:	4618      	mov	r0, r3
 8012858:	371c      	adds	r7, #28
 801285a:	46bd      	mov	sp, r7
 801285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012860:	4770      	bx	lr
	...

08012864 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012864:	b580      	push	{r7, lr}
 8012866:	b084      	sub	sp, #16
 8012868:	af00      	add	r7, sp, #0
 801286a:	6078      	str	r0, [r7, #4]
 801286c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801286e:	2300      	movs	r3, #0
 8012870:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012872:	683b      	ldr	r3, [r7, #0]
 8012874:	781b      	ldrb	r3, [r3, #0]
 8012876:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801287a:	2b40      	cmp	r3, #64	; 0x40
 801287c:	d005      	beq.n	801288a <USBD_StdDevReq+0x26>
 801287e:	2b40      	cmp	r3, #64	; 0x40
 8012880:	d857      	bhi.n	8012932 <USBD_StdDevReq+0xce>
 8012882:	2b00      	cmp	r3, #0
 8012884:	d00f      	beq.n	80128a6 <USBD_StdDevReq+0x42>
 8012886:	2b20      	cmp	r3, #32
 8012888:	d153      	bne.n	8012932 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	32ae      	adds	r2, #174	; 0xae
 8012894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012898:	689b      	ldr	r3, [r3, #8]
 801289a:	6839      	ldr	r1, [r7, #0]
 801289c:	6878      	ldr	r0, [r7, #4]
 801289e:	4798      	blx	r3
 80128a0:	4603      	mov	r3, r0
 80128a2:	73fb      	strb	r3, [r7, #15]
      break;
 80128a4:	e04a      	b.n	801293c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80128a6:	683b      	ldr	r3, [r7, #0]
 80128a8:	785b      	ldrb	r3, [r3, #1]
 80128aa:	2b09      	cmp	r3, #9
 80128ac:	d83b      	bhi.n	8012926 <USBD_StdDevReq+0xc2>
 80128ae:	a201      	add	r2, pc, #4	; (adr r2, 80128b4 <USBD_StdDevReq+0x50>)
 80128b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128b4:	08012909 	.word	0x08012909
 80128b8:	0801291d 	.word	0x0801291d
 80128bc:	08012927 	.word	0x08012927
 80128c0:	08012913 	.word	0x08012913
 80128c4:	08012927 	.word	0x08012927
 80128c8:	080128e7 	.word	0x080128e7
 80128cc:	080128dd 	.word	0x080128dd
 80128d0:	08012927 	.word	0x08012927
 80128d4:	080128ff 	.word	0x080128ff
 80128d8:	080128f1 	.word	0x080128f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80128dc:	6839      	ldr	r1, [r7, #0]
 80128de:	6878      	ldr	r0, [r7, #4]
 80128e0:	f000 fa3c 	bl	8012d5c <USBD_GetDescriptor>
          break;
 80128e4:	e024      	b.n	8012930 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80128e6:	6839      	ldr	r1, [r7, #0]
 80128e8:	6878      	ldr	r0, [r7, #4]
 80128ea:	f000 fba1 	bl	8013030 <USBD_SetAddress>
          break;
 80128ee:	e01f      	b.n	8012930 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80128f0:	6839      	ldr	r1, [r7, #0]
 80128f2:	6878      	ldr	r0, [r7, #4]
 80128f4:	f000 fbe0 	bl	80130b8 <USBD_SetConfig>
 80128f8:	4603      	mov	r3, r0
 80128fa:	73fb      	strb	r3, [r7, #15]
          break;
 80128fc:	e018      	b.n	8012930 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80128fe:	6839      	ldr	r1, [r7, #0]
 8012900:	6878      	ldr	r0, [r7, #4]
 8012902:	f000 fc83 	bl	801320c <USBD_GetConfig>
          break;
 8012906:	e013      	b.n	8012930 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012908:	6839      	ldr	r1, [r7, #0]
 801290a:	6878      	ldr	r0, [r7, #4]
 801290c:	f000 fcb4 	bl	8013278 <USBD_GetStatus>
          break;
 8012910:	e00e      	b.n	8012930 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8012912:	6839      	ldr	r1, [r7, #0]
 8012914:	6878      	ldr	r0, [r7, #4]
 8012916:	f000 fce3 	bl	80132e0 <USBD_SetFeature>
          break;
 801291a:	e009      	b.n	8012930 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801291c:	6839      	ldr	r1, [r7, #0]
 801291e:	6878      	ldr	r0, [r7, #4]
 8012920:	f000 fd07 	bl	8013332 <USBD_ClrFeature>
          break;
 8012924:	e004      	b.n	8012930 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8012926:	6839      	ldr	r1, [r7, #0]
 8012928:	6878      	ldr	r0, [r7, #4]
 801292a:	f000 fd5e 	bl	80133ea <USBD_CtlError>
          break;
 801292e:	bf00      	nop
      }
      break;
 8012930:	e004      	b.n	801293c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8012932:	6839      	ldr	r1, [r7, #0]
 8012934:	6878      	ldr	r0, [r7, #4]
 8012936:	f000 fd58 	bl	80133ea <USBD_CtlError>
      break;
 801293a:	bf00      	nop
  }

  return ret;
 801293c:	7bfb      	ldrb	r3, [r7, #15]
}
 801293e:	4618      	mov	r0, r3
 8012940:	3710      	adds	r7, #16
 8012942:	46bd      	mov	sp, r7
 8012944:	bd80      	pop	{r7, pc}
 8012946:	bf00      	nop

08012948 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b084      	sub	sp, #16
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
 8012950:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012952:	2300      	movs	r3, #0
 8012954:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012956:	683b      	ldr	r3, [r7, #0]
 8012958:	781b      	ldrb	r3, [r3, #0]
 801295a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801295e:	2b40      	cmp	r3, #64	; 0x40
 8012960:	d005      	beq.n	801296e <USBD_StdItfReq+0x26>
 8012962:	2b40      	cmp	r3, #64	; 0x40
 8012964:	d852      	bhi.n	8012a0c <USBD_StdItfReq+0xc4>
 8012966:	2b00      	cmp	r3, #0
 8012968:	d001      	beq.n	801296e <USBD_StdItfReq+0x26>
 801296a:	2b20      	cmp	r3, #32
 801296c:	d14e      	bne.n	8012a0c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012974:	b2db      	uxtb	r3, r3
 8012976:	3b01      	subs	r3, #1
 8012978:	2b02      	cmp	r3, #2
 801297a:	d840      	bhi.n	80129fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801297c:	683b      	ldr	r3, [r7, #0]
 801297e:	889b      	ldrh	r3, [r3, #4]
 8012980:	b2db      	uxtb	r3, r3
 8012982:	2b01      	cmp	r3, #1
 8012984:	d836      	bhi.n	80129f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8012986:	683b      	ldr	r3, [r7, #0]
 8012988:	889b      	ldrh	r3, [r3, #4]
 801298a:	b2db      	uxtb	r3, r3
 801298c:	4619      	mov	r1, r3
 801298e:	6878      	ldr	r0, [r7, #4]
 8012990:	f7ff fed8 	bl	8012744 <USBD_CoreFindIF>
 8012994:	4603      	mov	r3, r0
 8012996:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012998:	7bbb      	ldrb	r3, [r7, #14]
 801299a:	2bff      	cmp	r3, #255	; 0xff
 801299c:	d01d      	beq.n	80129da <USBD_StdItfReq+0x92>
 801299e:	7bbb      	ldrb	r3, [r7, #14]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d11a      	bne.n	80129da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80129a4:	7bba      	ldrb	r2, [r7, #14]
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	32ae      	adds	r2, #174	; 0xae
 80129aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129ae:	689b      	ldr	r3, [r3, #8]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d00f      	beq.n	80129d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80129b4:	7bba      	ldrb	r2, [r7, #14]
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80129bc:	7bba      	ldrb	r2, [r7, #14]
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	32ae      	adds	r2, #174	; 0xae
 80129c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129c6:	689b      	ldr	r3, [r3, #8]
 80129c8:	6839      	ldr	r1, [r7, #0]
 80129ca:	6878      	ldr	r0, [r7, #4]
 80129cc:	4798      	blx	r3
 80129ce:	4603      	mov	r3, r0
 80129d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80129d2:	e004      	b.n	80129de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80129d4:	2303      	movs	r3, #3
 80129d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80129d8:	e001      	b.n	80129de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80129da:	2303      	movs	r3, #3
 80129dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80129de:	683b      	ldr	r3, [r7, #0]
 80129e0:	88db      	ldrh	r3, [r3, #6]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d110      	bne.n	8012a08 <USBD_StdItfReq+0xc0>
 80129e6:	7bfb      	ldrb	r3, [r7, #15]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d10d      	bne.n	8012a08 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80129ec:	6878      	ldr	r0, [r7, #4]
 80129ee:	f000 fdaa 	bl	8013546 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80129f2:	e009      	b.n	8012a08 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80129f4:	6839      	ldr	r1, [r7, #0]
 80129f6:	6878      	ldr	r0, [r7, #4]
 80129f8:	f000 fcf7 	bl	80133ea <USBD_CtlError>
          break;
 80129fc:	e004      	b.n	8012a08 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80129fe:	6839      	ldr	r1, [r7, #0]
 8012a00:	6878      	ldr	r0, [r7, #4]
 8012a02:	f000 fcf2 	bl	80133ea <USBD_CtlError>
          break;
 8012a06:	e000      	b.n	8012a0a <USBD_StdItfReq+0xc2>
          break;
 8012a08:	bf00      	nop
      }
      break;
 8012a0a:	e004      	b.n	8012a16 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8012a0c:	6839      	ldr	r1, [r7, #0]
 8012a0e:	6878      	ldr	r0, [r7, #4]
 8012a10:	f000 fceb 	bl	80133ea <USBD_CtlError>
      break;
 8012a14:	bf00      	nop
  }

  return ret;
 8012a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a18:	4618      	mov	r0, r3
 8012a1a:	3710      	adds	r7, #16
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	bd80      	pop	{r7, pc}

08012a20 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b084      	sub	sp, #16
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
 8012a28:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8012a2e:	683b      	ldr	r3, [r7, #0]
 8012a30:	889b      	ldrh	r3, [r3, #4]
 8012a32:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012a34:	683b      	ldr	r3, [r7, #0]
 8012a36:	781b      	ldrb	r3, [r3, #0]
 8012a38:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012a3c:	2b40      	cmp	r3, #64	; 0x40
 8012a3e:	d007      	beq.n	8012a50 <USBD_StdEPReq+0x30>
 8012a40:	2b40      	cmp	r3, #64	; 0x40
 8012a42:	f200 817f 	bhi.w	8012d44 <USBD_StdEPReq+0x324>
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d02a      	beq.n	8012aa0 <USBD_StdEPReq+0x80>
 8012a4a:	2b20      	cmp	r3, #32
 8012a4c:	f040 817a 	bne.w	8012d44 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8012a50:	7bbb      	ldrb	r3, [r7, #14]
 8012a52:	4619      	mov	r1, r3
 8012a54:	6878      	ldr	r0, [r7, #4]
 8012a56:	f7ff fe82 	bl	801275e <USBD_CoreFindEP>
 8012a5a:	4603      	mov	r3, r0
 8012a5c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012a5e:	7b7b      	ldrb	r3, [r7, #13]
 8012a60:	2bff      	cmp	r3, #255	; 0xff
 8012a62:	f000 8174 	beq.w	8012d4e <USBD_StdEPReq+0x32e>
 8012a66:	7b7b      	ldrb	r3, [r7, #13]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	f040 8170 	bne.w	8012d4e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8012a6e:	7b7a      	ldrb	r2, [r7, #13]
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8012a76:	7b7a      	ldrb	r2, [r7, #13]
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	32ae      	adds	r2, #174	; 0xae
 8012a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a80:	689b      	ldr	r3, [r3, #8]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	f000 8163 	beq.w	8012d4e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8012a88:	7b7a      	ldrb	r2, [r7, #13]
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	32ae      	adds	r2, #174	; 0xae
 8012a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a92:	689b      	ldr	r3, [r3, #8]
 8012a94:	6839      	ldr	r1, [r7, #0]
 8012a96:	6878      	ldr	r0, [r7, #4]
 8012a98:	4798      	blx	r3
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8012a9e:	e156      	b.n	8012d4e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012aa0:	683b      	ldr	r3, [r7, #0]
 8012aa2:	785b      	ldrb	r3, [r3, #1]
 8012aa4:	2b03      	cmp	r3, #3
 8012aa6:	d008      	beq.n	8012aba <USBD_StdEPReq+0x9a>
 8012aa8:	2b03      	cmp	r3, #3
 8012aaa:	f300 8145 	bgt.w	8012d38 <USBD_StdEPReq+0x318>
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	f000 809b 	beq.w	8012bea <USBD_StdEPReq+0x1ca>
 8012ab4:	2b01      	cmp	r3, #1
 8012ab6:	d03c      	beq.n	8012b32 <USBD_StdEPReq+0x112>
 8012ab8:	e13e      	b.n	8012d38 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012ac0:	b2db      	uxtb	r3, r3
 8012ac2:	2b02      	cmp	r3, #2
 8012ac4:	d002      	beq.n	8012acc <USBD_StdEPReq+0xac>
 8012ac6:	2b03      	cmp	r3, #3
 8012ac8:	d016      	beq.n	8012af8 <USBD_StdEPReq+0xd8>
 8012aca:	e02c      	b.n	8012b26 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012acc:	7bbb      	ldrb	r3, [r7, #14]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d00d      	beq.n	8012aee <USBD_StdEPReq+0xce>
 8012ad2:	7bbb      	ldrb	r3, [r7, #14]
 8012ad4:	2b80      	cmp	r3, #128	; 0x80
 8012ad6:	d00a      	beq.n	8012aee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012ad8:	7bbb      	ldrb	r3, [r7, #14]
 8012ada:	4619      	mov	r1, r3
 8012adc:	6878      	ldr	r0, [r7, #4]
 8012ade:	f00e f90c 	bl	8020cfa <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012ae2:	2180      	movs	r1, #128	; 0x80
 8012ae4:	6878      	ldr	r0, [r7, #4]
 8012ae6:	f00e f908 	bl	8020cfa <USBD_LL_StallEP>
 8012aea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012aec:	e020      	b.n	8012b30 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8012aee:	6839      	ldr	r1, [r7, #0]
 8012af0:	6878      	ldr	r0, [r7, #4]
 8012af2:	f000 fc7a 	bl	80133ea <USBD_CtlError>
              break;
 8012af6:	e01b      	b.n	8012b30 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012af8:	683b      	ldr	r3, [r7, #0]
 8012afa:	885b      	ldrh	r3, [r3, #2]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d10e      	bne.n	8012b1e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012b00:	7bbb      	ldrb	r3, [r7, #14]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d00b      	beq.n	8012b1e <USBD_StdEPReq+0xfe>
 8012b06:	7bbb      	ldrb	r3, [r7, #14]
 8012b08:	2b80      	cmp	r3, #128	; 0x80
 8012b0a:	d008      	beq.n	8012b1e <USBD_StdEPReq+0xfe>
 8012b0c:	683b      	ldr	r3, [r7, #0]
 8012b0e:	88db      	ldrh	r3, [r3, #6]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d104      	bne.n	8012b1e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8012b14:	7bbb      	ldrb	r3, [r7, #14]
 8012b16:	4619      	mov	r1, r3
 8012b18:	6878      	ldr	r0, [r7, #4]
 8012b1a:	f00e f8ee 	bl	8020cfa <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8012b1e:	6878      	ldr	r0, [r7, #4]
 8012b20:	f000 fd11 	bl	8013546 <USBD_CtlSendStatus>

              break;
 8012b24:	e004      	b.n	8012b30 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8012b26:	6839      	ldr	r1, [r7, #0]
 8012b28:	6878      	ldr	r0, [r7, #4]
 8012b2a:	f000 fc5e 	bl	80133ea <USBD_CtlError>
              break;
 8012b2e:	bf00      	nop
          }
          break;
 8012b30:	e107      	b.n	8012d42 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012b38:	b2db      	uxtb	r3, r3
 8012b3a:	2b02      	cmp	r3, #2
 8012b3c:	d002      	beq.n	8012b44 <USBD_StdEPReq+0x124>
 8012b3e:	2b03      	cmp	r3, #3
 8012b40:	d016      	beq.n	8012b70 <USBD_StdEPReq+0x150>
 8012b42:	e04b      	b.n	8012bdc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012b44:	7bbb      	ldrb	r3, [r7, #14]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d00d      	beq.n	8012b66 <USBD_StdEPReq+0x146>
 8012b4a:	7bbb      	ldrb	r3, [r7, #14]
 8012b4c:	2b80      	cmp	r3, #128	; 0x80
 8012b4e:	d00a      	beq.n	8012b66 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012b50:	7bbb      	ldrb	r3, [r7, #14]
 8012b52:	4619      	mov	r1, r3
 8012b54:	6878      	ldr	r0, [r7, #4]
 8012b56:	f00e f8d0 	bl	8020cfa <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012b5a:	2180      	movs	r1, #128	; 0x80
 8012b5c:	6878      	ldr	r0, [r7, #4]
 8012b5e:	f00e f8cc 	bl	8020cfa <USBD_LL_StallEP>
 8012b62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012b64:	e040      	b.n	8012be8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8012b66:	6839      	ldr	r1, [r7, #0]
 8012b68:	6878      	ldr	r0, [r7, #4]
 8012b6a:	f000 fc3e 	bl	80133ea <USBD_CtlError>
              break;
 8012b6e:	e03b      	b.n	8012be8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012b70:	683b      	ldr	r3, [r7, #0]
 8012b72:	885b      	ldrh	r3, [r3, #2]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d136      	bne.n	8012be6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012b78:	7bbb      	ldrb	r3, [r7, #14]
 8012b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d004      	beq.n	8012b8c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012b82:	7bbb      	ldrb	r3, [r7, #14]
 8012b84:	4619      	mov	r1, r3
 8012b86:	6878      	ldr	r0, [r7, #4]
 8012b88:	f00e f8d6 	bl	8020d38 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8012b8c:	6878      	ldr	r0, [r7, #4]
 8012b8e:	f000 fcda 	bl	8013546 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8012b92:	7bbb      	ldrb	r3, [r7, #14]
 8012b94:	4619      	mov	r1, r3
 8012b96:	6878      	ldr	r0, [r7, #4]
 8012b98:	f7ff fde1 	bl	801275e <USBD_CoreFindEP>
 8012b9c:	4603      	mov	r3, r0
 8012b9e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012ba0:	7b7b      	ldrb	r3, [r7, #13]
 8012ba2:	2bff      	cmp	r3, #255	; 0xff
 8012ba4:	d01f      	beq.n	8012be6 <USBD_StdEPReq+0x1c6>
 8012ba6:	7b7b      	ldrb	r3, [r7, #13]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d11c      	bne.n	8012be6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8012bac:	7b7a      	ldrb	r2, [r7, #13]
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8012bb4:	7b7a      	ldrb	r2, [r7, #13]
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	32ae      	adds	r2, #174	; 0xae
 8012bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012bbe:	689b      	ldr	r3, [r3, #8]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d010      	beq.n	8012be6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8012bc4:	7b7a      	ldrb	r2, [r7, #13]
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	32ae      	adds	r2, #174	; 0xae
 8012bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012bce:	689b      	ldr	r3, [r3, #8]
 8012bd0:	6839      	ldr	r1, [r7, #0]
 8012bd2:	6878      	ldr	r0, [r7, #4]
 8012bd4:	4798      	blx	r3
 8012bd6:	4603      	mov	r3, r0
 8012bd8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8012bda:	e004      	b.n	8012be6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8012bdc:	6839      	ldr	r1, [r7, #0]
 8012bde:	6878      	ldr	r0, [r7, #4]
 8012be0:	f000 fc03 	bl	80133ea <USBD_CtlError>
              break;
 8012be4:	e000      	b.n	8012be8 <USBD_StdEPReq+0x1c8>
              break;
 8012be6:	bf00      	nop
          }
          break;
 8012be8:	e0ab      	b.n	8012d42 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012bf0:	b2db      	uxtb	r3, r3
 8012bf2:	2b02      	cmp	r3, #2
 8012bf4:	d002      	beq.n	8012bfc <USBD_StdEPReq+0x1dc>
 8012bf6:	2b03      	cmp	r3, #3
 8012bf8:	d032      	beq.n	8012c60 <USBD_StdEPReq+0x240>
 8012bfa:	e097      	b.n	8012d2c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012bfc:	7bbb      	ldrb	r3, [r7, #14]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d007      	beq.n	8012c12 <USBD_StdEPReq+0x1f2>
 8012c02:	7bbb      	ldrb	r3, [r7, #14]
 8012c04:	2b80      	cmp	r3, #128	; 0x80
 8012c06:	d004      	beq.n	8012c12 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8012c08:	6839      	ldr	r1, [r7, #0]
 8012c0a:	6878      	ldr	r0, [r7, #4]
 8012c0c:	f000 fbed 	bl	80133ea <USBD_CtlError>
                break;
 8012c10:	e091      	b.n	8012d36 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012c12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	da0b      	bge.n	8012c32 <USBD_StdEPReq+0x212>
 8012c1a:	7bbb      	ldrb	r3, [r7, #14]
 8012c1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012c20:	4613      	mov	r3, r2
 8012c22:	009b      	lsls	r3, r3, #2
 8012c24:	4413      	add	r3, r2
 8012c26:	009b      	lsls	r3, r3, #2
 8012c28:	3310      	adds	r3, #16
 8012c2a:	687a      	ldr	r2, [r7, #4]
 8012c2c:	4413      	add	r3, r2
 8012c2e:	3304      	adds	r3, #4
 8012c30:	e00b      	b.n	8012c4a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012c32:	7bbb      	ldrb	r3, [r7, #14]
 8012c34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012c38:	4613      	mov	r3, r2
 8012c3a:	009b      	lsls	r3, r3, #2
 8012c3c:	4413      	add	r3, r2
 8012c3e:	009b      	lsls	r3, r3, #2
 8012c40:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012c44:	687a      	ldr	r2, [r7, #4]
 8012c46:	4413      	add	r3, r2
 8012c48:	3304      	adds	r3, #4
 8012c4a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8012c4c:	68bb      	ldr	r3, [r7, #8]
 8012c4e:	2200      	movs	r2, #0
 8012c50:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012c52:	68bb      	ldr	r3, [r7, #8]
 8012c54:	2202      	movs	r2, #2
 8012c56:	4619      	mov	r1, r3
 8012c58:	6878      	ldr	r0, [r7, #4]
 8012c5a:	f000 fc37 	bl	80134cc <USBD_CtlSendData>
              break;
 8012c5e:	e06a      	b.n	8012d36 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8012c60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	da11      	bge.n	8012c8c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012c68:	7bbb      	ldrb	r3, [r7, #14]
 8012c6a:	f003 020f 	and.w	r2, r3, #15
 8012c6e:	6879      	ldr	r1, [r7, #4]
 8012c70:	4613      	mov	r3, r2
 8012c72:	009b      	lsls	r3, r3, #2
 8012c74:	4413      	add	r3, r2
 8012c76:	009b      	lsls	r3, r3, #2
 8012c78:	440b      	add	r3, r1
 8012c7a:	3324      	adds	r3, #36	; 0x24
 8012c7c:	881b      	ldrh	r3, [r3, #0]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d117      	bne.n	8012cb2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012c82:	6839      	ldr	r1, [r7, #0]
 8012c84:	6878      	ldr	r0, [r7, #4]
 8012c86:	f000 fbb0 	bl	80133ea <USBD_CtlError>
                  break;
 8012c8a:	e054      	b.n	8012d36 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012c8c:	7bbb      	ldrb	r3, [r7, #14]
 8012c8e:	f003 020f 	and.w	r2, r3, #15
 8012c92:	6879      	ldr	r1, [r7, #4]
 8012c94:	4613      	mov	r3, r2
 8012c96:	009b      	lsls	r3, r3, #2
 8012c98:	4413      	add	r3, r2
 8012c9a:	009b      	lsls	r3, r3, #2
 8012c9c:	440b      	add	r3, r1
 8012c9e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012ca2:	881b      	ldrh	r3, [r3, #0]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d104      	bne.n	8012cb2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012ca8:	6839      	ldr	r1, [r7, #0]
 8012caa:	6878      	ldr	r0, [r7, #4]
 8012cac:	f000 fb9d 	bl	80133ea <USBD_CtlError>
                  break;
 8012cb0:	e041      	b.n	8012d36 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012cb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	da0b      	bge.n	8012cd2 <USBD_StdEPReq+0x2b2>
 8012cba:	7bbb      	ldrb	r3, [r7, #14]
 8012cbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012cc0:	4613      	mov	r3, r2
 8012cc2:	009b      	lsls	r3, r3, #2
 8012cc4:	4413      	add	r3, r2
 8012cc6:	009b      	lsls	r3, r3, #2
 8012cc8:	3310      	adds	r3, #16
 8012cca:	687a      	ldr	r2, [r7, #4]
 8012ccc:	4413      	add	r3, r2
 8012cce:	3304      	adds	r3, #4
 8012cd0:	e00b      	b.n	8012cea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012cd2:	7bbb      	ldrb	r3, [r7, #14]
 8012cd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012cd8:	4613      	mov	r3, r2
 8012cda:	009b      	lsls	r3, r3, #2
 8012cdc:	4413      	add	r3, r2
 8012cde:	009b      	lsls	r3, r3, #2
 8012ce0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012ce4:	687a      	ldr	r2, [r7, #4]
 8012ce6:	4413      	add	r3, r2
 8012ce8:	3304      	adds	r3, #4
 8012cea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012cec:	7bbb      	ldrb	r3, [r7, #14]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d002      	beq.n	8012cf8 <USBD_StdEPReq+0x2d8>
 8012cf2:	7bbb      	ldrb	r3, [r7, #14]
 8012cf4:	2b80      	cmp	r3, #128	; 0x80
 8012cf6:	d103      	bne.n	8012d00 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8012cf8:	68bb      	ldr	r3, [r7, #8]
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	601a      	str	r2, [r3, #0]
 8012cfe:	e00e      	b.n	8012d1e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8012d00:	7bbb      	ldrb	r3, [r7, #14]
 8012d02:	4619      	mov	r1, r3
 8012d04:	6878      	ldr	r0, [r7, #4]
 8012d06:	f00e f836 	bl	8020d76 <USBD_LL_IsStallEP>
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d003      	beq.n	8012d18 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8012d10:	68bb      	ldr	r3, [r7, #8]
 8012d12:	2201      	movs	r2, #1
 8012d14:	601a      	str	r2, [r3, #0]
 8012d16:	e002      	b.n	8012d1e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8012d18:	68bb      	ldr	r3, [r7, #8]
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012d1e:	68bb      	ldr	r3, [r7, #8]
 8012d20:	2202      	movs	r2, #2
 8012d22:	4619      	mov	r1, r3
 8012d24:	6878      	ldr	r0, [r7, #4]
 8012d26:	f000 fbd1 	bl	80134cc <USBD_CtlSendData>
              break;
 8012d2a:	e004      	b.n	8012d36 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8012d2c:	6839      	ldr	r1, [r7, #0]
 8012d2e:	6878      	ldr	r0, [r7, #4]
 8012d30:	f000 fb5b 	bl	80133ea <USBD_CtlError>
              break;
 8012d34:	bf00      	nop
          }
          break;
 8012d36:	e004      	b.n	8012d42 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8012d38:	6839      	ldr	r1, [r7, #0]
 8012d3a:	6878      	ldr	r0, [r7, #4]
 8012d3c:	f000 fb55 	bl	80133ea <USBD_CtlError>
          break;
 8012d40:	bf00      	nop
      }
      break;
 8012d42:	e005      	b.n	8012d50 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8012d44:	6839      	ldr	r1, [r7, #0]
 8012d46:	6878      	ldr	r0, [r7, #4]
 8012d48:	f000 fb4f 	bl	80133ea <USBD_CtlError>
      break;
 8012d4c:	e000      	b.n	8012d50 <USBD_StdEPReq+0x330>
      break;
 8012d4e:	bf00      	nop
  }

  return ret;
 8012d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d52:	4618      	mov	r0, r3
 8012d54:	3710      	adds	r7, #16
 8012d56:	46bd      	mov	sp, r7
 8012d58:	bd80      	pop	{r7, pc}
	...

08012d5c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	b084      	sub	sp, #16
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	6078      	str	r0, [r7, #4]
 8012d64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012d66:	2300      	movs	r3, #0
 8012d68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012d6a:	2300      	movs	r3, #0
 8012d6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012d6e:	2300      	movs	r3, #0
 8012d70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012d72:	683b      	ldr	r3, [r7, #0]
 8012d74:	885b      	ldrh	r3, [r3, #2]
 8012d76:	0a1b      	lsrs	r3, r3, #8
 8012d78:	b29b      	uxth	r3, r3
 8012d7a:	3b01      	subs	r3, #1
 8012d7c:	2b06      	cmp	r3, #6
 8012d7e:	f200 8128 	bhi.w	8012fd2 <USBD_GetDescriptor+0x276>
 8012d82:	a201      	add	r2, pc, #4	; (adr r2, 8012d88 <USBD_GetDescriptor+0x2c>)
 8012d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d88:	08012da5 	.word	0x08012da5
 8012d8c:	08012dbd 	.word	0x08012dbd
 8012d90:	08012dfd 	.word	0x08012dfd
 8012d94:	08012fd3 	.word	0x08012fd3
 8012d98:	08012fd3 	.word	0x08012fd3
 8012d9c:	08012f73 	.word	0x08012f73
 8012da0:	08012f9f 	.word	0x08012f9f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	687a      	ldr	r2, [r7, #4]
 8012dae:	7c12      	ldrb	r2, [r2, #16]
 8012db0:	f107 0108 	add.w	r1, r7, #8
 8012db4:	4610      	mov	r0, r2
 8012db6:	4798      	blx	r3
 8012db8:	60f8      	str	r0, [r7, #12]
      break;
 8012dba:	e112      	b.n	8012fe2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	7c1b      	ldrb	r3, [r3, #16]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d10d      	bne.n	8012de0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012dcc:	f107 0208 	add.w	r2, r7, #8
 8012dd0:	4610      	mov	r0, r2
 8012dd2:	4798      	blx	r3
 8012dd4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	3301      	adds	r3, #1
 8012dda:	2202      	movs	r2, #2
 8012ddc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012dde:	e100      	b.n	8012fe2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012de8:	f107 0208 	add.w	r2, r7, #8
 8012dec:	4610      	mov	r0, r2
 8012dee:	4798      	blx	r3
 8012df0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	3301      	adds	r3, #1
 8012df6:	2202      	movs	r2, #2
 8012df8:	701a      	strb	r2, [r3, #0]
      break;
 8012dfa:	e0f2      	b.n	8012fe2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012dfc:	683b      	ldr	r3, [r7, #0]
 8012dfe:	885b      	ldrh	r3, [r3, #2]
 8012e00:	b2db      	uxtb	r3, r3
 8012e02:	2b05      	cmp	r3, #5
 8012e04:	f200 80ac 	bhi.w	8012f60 <USBD_GetDescriptor+0x204>
 8012e08:	a201      	add	r2, pc, #4	; (adr r2, 8012e10 <USBD_GetDescriptor+0xb4>)
 8012e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e0e:	bf00      	nop
 8012e10:	08012e29 	.word	0x08012e29
 8012e14:	08012e5d 	.word	0x08012e5d
 8012e18:	08012e91 	.word	0x08012e91
 8012e1c:	08012ec5 	.word	0x08012ec5
 8012e20:	08012ef9 	.word	0x08012ef9
 8012e24:	08012f2d 	.word	0x08012f2d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012e2e:	685b      	ldr	r3, [r3, #4]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d00b      	beq.n	8012e4c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012e3a:	685b      	ldr	r3, [r3, #4]
 8012e3c:	687a      	ldr	r2, [r7, #4]
 8012e3e:	7c12      	ldrb	r2, [r2, #16]
 8012e40:	f107 0108 	add.w	r1, r7, #8
 8012e44:	4610      	mov	r0, r2
 8012e46:	4798      	blx	r3
 8012e48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012e4a:	e091      	b.n	8012f70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012e4c:	6839      	ldr	r1, [r7, #0]
 8012e4e:	6878      	ldr	r0, [r7, #4]
 8012e50:	f000 facb 	bl	80133ea <USBD_CtlError>
            err++;
 8012e54:	7afb      	ldrb	r3, [r7, #11]
 8012e56:	3301      	adds	r3, #1
 8012e58:	72fb      	strb	r3, [r7, #11]
          break;
 8012e5a:	e089      	b.n	8012f70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012e62:	689b      	ldr	r3, [r3, #8]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d00b      	beq.n	8012e80 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012e6e:	689b      	ldr	r3, [r3, #8]
 8012e70:	687a      	ldr	r2, [r7, #4]
 8012e72:	7c12      	ldrb	r2, [r2, #16]
 8012e74:	f107 0108 	add.w	r1, r7, #8
 8012e78:	4610      	mov	r0, r2
 8012e7a:	4798      	blx	r3
 8012e7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012e7e:	e077      	b.n	8012f70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012e80:	6839      	ldr	r1, [r7, #0]
 8012e82:	6878      	ldr	r0, [r7, #4]
 8012e84:	f000 fab1 	bl	80133ea <USBD_CtlError>
            err++;
 8012e88:	7afb      	ldrb	r3, [r7, #11]
 8012e8a:	3301      	adds	r3, #1
 8012e8c:	72fb      	strb	r3, [r7, #11]
          break;
 8012e8e:	e06f      	b.n	8012f70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012e96:	68db      	ldr	r3, [r3, #12]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d00b      	beq.n	8012eb4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012ea2:	68db      	ldr	r3, [r3, #12]
 8012ea4:	687a      	ldr	r2, [r7, #4]
 8012ea6:	7c12      	ldrb	r2, [r2, #16]
 8012ea8:	f107 0108 	add.w	r1, r7, #8
 8012eac:	4610      	mov	r0, r2
 8012eae:	4798      	blx	r3
 8012eb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012eb2:	e05d      	b.n	8012f70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012eb4:	6839      	ldr	r1, [r7, #0]
 8012eb6:	6878      	ldr	r0, [r7, #4]
 8012eb8:	f000 fa97 	bl	80133ea <USBD_CtlError>
            err++;
 8012ebc:	7afb      	ldrb	r3, [r7, #11]
 8012ebe:	3301      	adds	r3, #1
 8012ec0:	72fb      	strb	r3, [r7, #11]
          break;
 8012ec2:	e055      	b.n	8012f70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012eca:	691b      	ldr	r3, [r3, #16]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d00b      	beq.n	8012ee8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012ed6:	691b      	ldr	r3, [r3, #16]
 8012ed8:	687a      	ldr	r2, [r7, #4]
 8012eda:	7c12      	ldrb	r2, [r2, #16]
 8012edc:	f107 0108 	add.w	r1, r7, #8
 8012ee0:	4610      	mov	r0, r2
 8012ee2:	4798      	blx	r3
 8012ee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012ee6:	e043      	b.n	8012f70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012ee8:	6839      	ldr	r1, [r7, #0]
 8012eea:	6878      	ldr	r0, [r7, #4]
 8012eec:	f000 fa7d 	bl	80133ea <USBD_CtlError>
            err++;
 8012ef0:	7afb      	ldrb	r3, [r7, #11]
 8012ef2:	3301      	adds	r3, #1
 8012ef4:	72fb      	strb	r3, [r7, #11]
          break;
 8012ef6:	e03b      	b.n	8012f70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012efe:	695b      	ldr	r3, [r3, #20]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d00b      	beq.n	8012f1c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012f0a:	695b      	ldr	r3, [r3, #20]
 8012f0c:	687a      	ldr	r2, [r7, #4]
 8012f0e:	7c12      	ldrb	r2, [r2, #16]
 8012f10:	f107 0108 	add.w	r1, r7, #8
 8012f14:	4610      	mov	r0, r2
 8012f16:	4798      	blx	r3
 8012f18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012f1a:	e029      	b.n	8012f70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012f1c:	6839      	ldr	r1, [r7, #0]
 8012f1e:	6878      	ldr	r0, [r7, #4]
 8012f20:	f000 fa63 	bl	80133ea <USBD_CtlError>
            err++;
 8012f24:	7afb      	ldrb	r3, [r7, #11]
 8012f26:	3301      	adds	r3, #1
 8012f28:	72fb      	strb	r3, [r7, #11]
          break;
 8012f2a:	e021      	b.n	8012f70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012f32:	699b      	ldr	r3, [r3, #24]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d00b      	beq.n	8012f50 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012f3e:	699b      	ldr	r3, [r3, #24]
 8012f40:	687a      	ldr	r2, [r7, #4]
 8012f42:	7c12      	ldrb	r2, [r2, #16]
 8012f44:	f107 0108 	add.w	r1, r7, #8
 8012f48:	4610      	mov	r0, r2
 8012f4a:	4798      	blx	r3
 8012f4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012f4e:	e00f      	b.n	8012f70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012f50:	6839      	ldr	r1, [r7, #0]
 8012f52:	6878      	ldr	r0, [r7, #4]
 8012f54:	f000 fa49 	bl	80133ea <USBD_CtlError>
            err++;
 8012f58:	7afb      	ldrb	r3, [r7, #11]
 8012f5a:	3301      	adds	r3, #1
 8012f5c:	72fb      	strb	r3, [r7, #11]
          break;
 8012f5e:	e007      	b.n	8012f70 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012f60:	6839      	ldr	r1, [r7, #0]
 8012f62:	6878      	ldr	r0, [r7, #4]
 8012f64:	f000 fa41 	bl	80133ea <USBD_CtlError>
          err++;
 8012f68:	7afb      	ldrb	r3, [r7, #11]
 8012f6a:	3301      	adds	r3, #1
 8012f6c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8012f6e:	bf00      	nop
      }
      break;
 8012f70:	e037      	b.n	8012fe2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	7c1b      	ldrb	r3, [r3, #16]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d109      	bne.n	8012f8e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f82:	f107 0208 	add.w	r2, r7, #8
 8012f86:	4610      	mov	r0, r2
 8012f88:	4798      	blx	r3
 8012f8a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012f8c:	e029      	b.n	8012fe2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8012f8e:	6839      	ldr	r1, [r7, #0]
 8012f90:	6878      	ldr	r0, [r7, #4]
 8012f92:	f000 fa2a 	bl	80133ea <USBD_CtlError>
        err++;
 8012f96:	7afb      	ldrb	r3, [r7, #11]
 8012f98:	3301      	adds	r3, #1
 8012f9a:	72fb      	strb	r3, [r7, #11]
      break;
 8012f9c:	e021      	b.n	8012fe2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	7c1b      	ldrb	r3, [r3, #16]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d10d      	bne.n	8012fc2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fae:	f107 0208 	add.w	r2, r7, #8
 8012fb2:	4610      	mov	r0, r2
 8012fb4:	4798      	blx	r3
 8012fb6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	3301      	adds	r3, #1
 8012fbc:	2207      	movs	r2, #7
 8012fbe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012fc0:	e00f      	b.n	8012fe2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8012fc2:	6839      	ldr	r1, [r7, #0]
 8012fc4:	6878      	ldr	r0, [r7, #4]
 8012fc6:	f000 fa10 	bl	80133ea <USBD_CtlError>
        err++;
 8012fca:	7afb      	ldrb	r3, [r7, #11]
 8012fcc:	3301      	adds	r3, #1
 8012fce:	72fb      	strb	r3, [r7, #11]
      break;
 8012fd0:	e007      	b.n	8012fe2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8012fd2:	6839      	ldr	r1, [r7, #0]
 8012fd4:	6878      	ldr	r0, [r7, #4]
 8012fd6:	f000 fa08 	bl	80133ea <USBD_CtlError>
      err++;
 8012fda:	7afb      	ldrb	r3, [r7, #11]
 8012fdc:	3301      	adds	r3, #1
 8012fde:	72fb      	strb	r3, [r7, #11]
      break;
 8012fe0:	bf00      	nop
  }

  if (err != 0U)
 8012fe2:	7afb      	ldrb	r3, [r7, #11]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d11e      	bne.n	8013026 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8012fe8:	683b      	ldr	r3, [r7, #0]
 8012fea:	88db      	ldrh	r3, [r3, #6]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d016      	beq.n	801301e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8012ff0:	893b      	ldrh	r3, [r7, #8]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d00e      	beq.n	8013014 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8012ff6:	683b      	ldr	r3, [r7, #0]
 8012ff8:	88da      	ldrh	r2, [r3, #6]
 8012ffa:	893b      	ldrh	r3, [r7, #8]
 8012ffc:	4293      	cmp	r3, r2
 8012ffe:	bf28      	it	cs
 8013000:	4613      	movcs	r3, r2
 8013002:	b29b      	uxth	r3, r3
 8013004:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8013006:	893b      	ldrh	r3, [r7, #8]
 8013008:	461a      	mov	r2, r3
 801300a:	68f9      	ldr	r1, [r7, #12]
 801300c:	6878      	ldr	r0, [r7, #4]
 801300e:	f000 fa5d 	bl	80134cc <USBD_CtlSendData>
 8013012:	e009      	b.n	8013028 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8013014:	6839      	ldr	r1, [r7, #0]
 8013016:	6878      	ldr	r0, [r7, #4]
 8013018:	f000 f9e7 	bl	80133ea <USBD_CtlError>
 801301c:	e004      	b.n	8013028 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801301e:	6878      	ldr	r0, [r7, #4]
 8013020:	f000 fa91 	bl	8013546 <USBD_CtlSendStatus>
 8013024:	e000      	b.n	8013028 <USBD_GetDescriptor+0x2cc>
    return;
 8013026:	bf00      	nop
  }
}
 8013028:	3710      	adds	r7, #16
 801302a:	46bd      	mov	sp, r7
 801302c:	bd80      	pop	{r7, pc}
 801302e:	bf00      	nop

08013030 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b084      	sub	sp, #16
 8013034:	af00      	add	r7, sp, #0
 8013036:	6078      	str	r0, [r7, #4]
 8013038:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801303a:	683b      	ldr	r3, [r7, #0]
 801303c:	889b      	ldrh	r3, [r3, #4]
 801303e:	2b00      	cmp	r3, #0
 8013040:	d131      	bne.n	80130a6 <USBD_SetAddress+0x76>
 8013042:	683b      	ldr	r3, [r7, #0]
 8013044:	88db      	ldrh	r3, [r3, #6]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d12d      	bne.n	80130a6 <USBD_SetAddress+0x76>
 801304a:	683b      	ldr	r3, [r7, #0]
 801304c:	885b      	ldrh	r3, [r3, #2]
 801304e:	2b7f      	cmp	r3, #127	; 0x7f
 8013050:	d829      	bhi.n	80130a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8013052:	683b      	ldr	r3, [r7, #0]
 8013054:	885b      	ldrh	r3, [r3, #2]
 8013056:	b2db      	uxtb	r3, r3
 8013058:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801305c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013064:	b2db      	uxtb	r3, r3
 8013066:	2b03      	cmp	r3, #3
 8013068:	d104      	bne.n	8013074 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801306a:	6839      	ldr	r1, [r7, #0]
 801306c:	6878      	ldr	r0, [r7, #4]
 801306e:	f000 f9bc 	bl	80133ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013072:	e01d      	b.n	80130b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	7bfa      	ldrb	r2, [r7, #15]
 8013078:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801307c:	7bfb      	ldrb	r3, [r7, #15]
 801307e:	4619      	mov	r1, r3
 8013080:	6878      	ldr	r0, [r7, #4]
 8013082:	f00d fea4 	bl	8020dce <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8013086:	6878      	ldr	r0, [r7, #4]
 8013088:	f000 fa5d 	bl	8013546 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801308c:	7bfb      	ldrb	r3, [r7, #15]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d004      	beq.n	801309c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	2202      	movs	r2, #2
 8013096:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801309a:	e009      	b.n	80130b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	2201      	movs	r2, #1
 80130a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80130a4:	e004      	b.n	80130b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80130a6:	6839      	ldr	r1, [r7, #0]
 80130a8:	6878      	ldr	r0, [r7, #4]
 80130aa:	f000 f99e 	bl	80133ea <USBD_CtlError>
  }
}
 80130ae:	bf00      	nop
 80130b0:	bf00      	nop
 80130b2:	3710      	adds	r7, #16
 80130b4:	46bd      	mov	sp, r7
 80130b6:	bd80      	pop	{r7, pc}

080130b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80130b8:	b580      	push	{r7, lr}
 80130ba:	b084      	sub	sp, #16
 80130bc:	af00      	add	r7, sp, #0
 80130be:	6078      	str	r0, [r7, #4]
 80130c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80130c2:	2300      	movs	r3, #0
 80130c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80130c6:	683b      	ldr	r3, [r7, #0]
 80130c8:	885b      	ldrh	r3, [r3, #2]
 80130ca:	b2da      	uxtb	r2, r3
 80130cc:	4b4e      	ldr	r3, [pc, #312]	; (8013208 <USBD_SetConfig+0x150>)
 80130ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80130d0:	4b4d      	ldr	r3, [pc, #308]	; (8013208 <USBD_SetConfig+0x150>)
 80130d2:	781b      	ldrb	r3, [r3, #0]
 80130d4:	2b01      	cmp	r3, #1
 80130d6:	d905      	bls.n	80130e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80130d8:	6839      	ldr	r1, [r7, #0]
 80130da:	6878      	ldr	r0, [r7, #4]
 80130dc:	f000 f985 	bl	80133ea <USBD_CtlError>
    return USBD_FAIL;
 80130e0:	2303      	movs	r3, #3
 80130e2:	e08c      	b.n	80131fe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80130ea:	b2db      	uxtb	r3, r3
 80130ec:	2b02      	cmp	r3, #2
 80130ee:	d002      	beq.n	80130f6 <USBD_SetConfig+0x3e>
 80130f0:	2b03      	cmp	r3, #3
 80130f2:	d029      	beq.n	8013148 <USBD_SetConfig+0x90>
 80130f4:	e075      	b.n	80131e2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80130f6:	4b44      	ldr	r3, [pc, #272]	; (8013208 <USBD_SetConfig+0x150>)
 80130f8:	781b      	ldrb	r3, [r3, #0]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d020      	beq.n	8013140 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80130fe:	4b42      	ldr	r3, [pc, #264]	; (8013208 <USBD_SetConfig+0x150>)
 8013100:	781b      	ldrb	r3, [r3, #0]
 8013102:	461a      	mov	r2, r3
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013108:	4b3f      	ldr	r3, [pc, #252]	; (8013208 <USBD_SetConfig+0x150>)
 801310a:	781b      	ldrb	r3, [r3, #0]
 801310c:	4619      	mov	r1, r3
 801310e:	6878      	ldr	r0, [r7, #4]
 8013110:	f7fe ffe6 	bl	80120e0 <USBD_SetClassConfig>
 8013114:	4603      	mov	r3, r0
 8013116:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8013118:	7bfb      	ldrb	r3, [r7, #15]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d008      	beq.n	8013130 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801311e:	6839      	ldr	r1, [r7, #0]
 8013120:	6878      	ldr	r0, [r7, #4]
 8013122:	f000 f962 	bl	80133ea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	2202      	movs	r2, #2
 801312a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801312e:	e065      	b.n	80131fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8013130:	6878      	ldr	r0, [r7, #4]
 8013132:	f000 fa08 	bl	8013546 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	2203      	movs	r2, #3
 801313a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801313e:	e05d      	b.n	80131fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8013140:	6878      	ldr	r0, [r7, #4]
 8013142:	f000 fa00 	bl	8013546 <USBD_CtlSendStatus>
      break;
 8013146:	e059      	b.n	80131fc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8013148:	4b2f      	ldr	r3, [pc, #188]	; (8013208 <USBD_SetConfig+0x150>)
 801314a:	781b      	ldrb	r3, [r3, #0]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d112      	bne.n	8013176 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	2202      	movs	r2, #2
 8013154:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8013158:	4b2b      	ldr	r3, [pc, #172]	; (8013208 <USBD_SetConfig+0x150>)
 801315a:	781b      	ldrb	r3, [r3, #0]
 801315c:	461a      	mov	r2, r3
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013162:	4b29      	ldr	r3, [pc, #164]	; (8013208 <USBD_SetConfig+0x150>)
 8013164:	781b      	ldrb	r3, [r3, #0]
 8013166:	4619      	mov	r1, r3
 8013168:	6878      	ldr	r0, [r7, #4]
 801316a:	f7fe ffd5 	bl	8012118 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801316e:	6878      	ldr	r0, [r7, #4]
 8013170:	f000 f9e9 	bl	8013546 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013174:	e042      	b.n	80131fc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8013176:	4b24      	ldr	r3, [pc, #144]	; (8013208 <USBD_SetConfig+0x150>)
 8013178:	781b      	ldrb	r3, [r3, #0]
 801317a:	461a      	mov	r2, r3
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	685b      	ldr	r3, [r3, #4]
 8013180:	429a      	cmp	r2, r3
 8013182:	d02a      	beq.n	80131da <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	685b      	ldr	r3, [r3, #4]
 8013188:	b2db      	uxtb	r3, r3
 801318a:	4619      	mov	r1, r3
 801318c:	6878      	ldr	r0, [r7, #4]
 801318e:	f7fe ffc3 	bl	8012118 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8013192:	4b1d      	ldr	r3, [pc, #116]	; (8013208 <USBD_SetConfig+0x150>)
 8013194:	781b      	ldrb	r3, [r3, #0]
 8013196:	461a      	mov	r2, r3
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801319c:	4b1a      	ldr	r3, [pc, #104]	; (8013208 <USBD_SetConfig+0x150>)
 801319e:	781b      	ldrb	r3, [r3, #0]
 80131a0:	4619      	mov	r1, r3
 80131a2:	6878      	ldr	r0, [r7, #4]
 80131a4:	f7fe ff9c 	bl	80120e0 <USBD_SetClassConfig>
 80131a8:	4603      	mov	r3, r0
 80131aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80131ac:	7bfb      	ldrb	r3, [r7, #15]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d00f      	beq.n	80131d2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80131b2:	6839      	ldr	r1, [r7, #0]
 80131b4:	6878      	ldr	r0, [r7, #4]
 80131b6:	f000 f918 	bl	80133ea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	685b      	ldr	r3, [r3, #4]
 80131be:	b2db      	uxtb	r3, r3
 80131c0:	4619      	mov	r1, r3
 80131c2:	6878      	ldr	r0, [r7, #4]
 80131c4:	f7fe ffa8 	bl	8012118 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	2202      	movs	r2, #2
 80131cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80131d0:	e014      	b.n	80131fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80131d2:	6878      	ldr	r0, [r7, #4]
 80131d4:	f000 f9b7 	bl	8013546 <USBD_CtlSendStatus>
      break;
 80131d8:	e010      	b.n	80131fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80131da:	6878      	ldr	r0, [r7, #4]
 80131dc:	f000 f9b3 	bl	8013546 <USBD_CtlSendStatus>
      break;
 80131e0:	e00c      	b.n	80131fc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80131e2:	6839      	ldr	r1, [r7, #0]
 80131e4:	6878      	ldr	r0, [r7, #4]
 80131e6:	f000 f900 	bl	80133ea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80131ea:	4b07      	ldr	r3, [pc, #28]	; (8013208 <USBD_SetConfig+0x150>)
 80131ec:	781b      	ldrb	r3, [r3, #0]
 80131ee:	4619      	mov	r1, r3
 80131f0:	6878      	ldr	r0, [r7, #4]
 80131f2:	f7fe ff91 	bl	8012118 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80131f6:	2303      	movs	r3, #3
 80131f8:	73fb      	strb	r3, [r7, #15]
      break;
 80131fa:	bf00      	nop
  }

  return ret;
 80131fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80131fe:	4618      	mov	r0, r3
 8013200:	3710      	adds	r7, #16
 8013202:	46bd      	mov	sp, r7
 8013204:	bd80      	pop	{r7, pc}
 8013206:	bf00      	nop
 8013208:	24001094 	.word	0x24001094

0801320c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801320c:	b580      	push	{r7, lr}
 801320e:	b082      	sub	sp, #8
 8013210:	af00      	add	r7, sp, #0
 8013212:	6078      	str	r0, [r7, #4]
 8013214:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8013216:	683b      	ldr	r3, [r7, #0]
 8013218:	88db      	ldrh	r3, [r3, #6]
 801321a:	2b01      	cmp	r3, #1
 801321c:	d004      	beq.n	8013228 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801321e:	6839      	ldr	r1, [r7, #0]
 8013220:	6878      	ldr	r0, [r7, #4]
 8013222:	f000 f8e2 	bl	80133ea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8013226:	e023      	b.n	8013270 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801322e:	b2db      	uxtb	r3, r3
 8013230:	2b02      	cmp	r3, #2
 8013232:	dc02      	bgt.n	801323a <USBD_GetConfig+0x2e>
 8013234:	2b00      	cmp	r3, #0
 8013236:	dc03      	bgt.n	8013240 <USBD_GetConfig+0x34>
 8013238:	e015      	b.n	8013266 <USBD_GetConfig+0x5a>
 801323a:	2b03      	cmp	r3, #3
 801323c:	d00b      	beq.n	8013256 <USBD_GetConfig+0x4a>
 801323e:	e012      	b.n	8013266 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	2200      	movs	r2, #0
 8013244:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	3308      	adds	r3, #8
 801324a:	2201      	movs	r2, #1
 801324c:	4619      	mov	r1, r3
 801324e:	6878      	ldr	r0, [r7, #4]
 8013250:	f000 f93c 	bl	80134cc <USBD_CtlSendData>
        break;
 8013254:	e00c      	b.n	8013270 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	3304      	adds	r3, #4
 801325a:	2201      	movs	r2, #1
 801325c:	4619      	mov	r1, r3
 801325e:	6878      	ldr	r0, [r7, #4]
 8013260:	f000 f934 	bl	80134cc <USBD_CtlSendData>
        break;
 8013264:	e004      	b.n	8013270 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8013266:	6839      	ldr	r1, [r7, #0]
 8013268:	6878      	ldr	r0, [r7, #4]
 801326a:	f000 f8be 	bl	80133ea <USBD_CtlError>
        break;
 801326e:	bf00      	nop
}
 8013270:	bf00      	nop
 8013272:	3708      	adds	r7, #8
 8013274:	46bd      	mov	sp, r7
 8013276:	bd80      	pop	{r7, pc}

08013278 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013278:	b580      	push	{r7, lr}
 801327a:	b082      	sub	sp, #8
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
 8013280:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013288:	b2db      	uxtb	r3, r3
 801328a:	3b01      	subs	r3, #1
 801328c:	2b02      	cmp	r3, #2
 801328e:	d81e      	bhi.n	80132ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013290:	683b      	ldr	r3, [r7, #0]
 8013292:	88db      	ldrh	r3, [r3, #6]
 8013294:	2b02      	cmp	r3, #2
 8013296:	d004      	beq.n	80132a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8013298:	6839      	ldr	r1, [r7, #0]
 801329a:	6878      	ldr	r0, [r7, #4]
 801329c:	f000 f8a5 	bl	80133ea <USBD_CtlError>
        break;
 80132a0:	e01a      	b.n	80132d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	2201      	movs	r2, #1
 80132a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d005      	beq.n	80132be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	68db      	ldr	r3, [r3, #12]
 80132b6:	f043 0202 	orr.w	r2, r3, #2
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	330c      	adds	r3, #12
 80132c2:	2202      	movs	r2, #2
 80132c4:	4619      	mov	r1, r3
 80132c6:	6878      	ldr	r0, [r7, #4]
 80132c8:	f000 f900 	bl	80134cc <USBD_CtlSendData>
      break;
 80132cc:	e004      	b.n	80132d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80132ce:	6839      	ldr	r1, [r7, #0]
 80132d0:	6878      	ldr	r0, [r7, #4]
 80132d2:	f000 f88a 	bl	80133ea <USBD_CtlError>
      break;
 80132d6:	bf00      	nop
  }
}
 80132d8:	bf00      	nop
 80132da:	3708      	adds	r7, #8
 80132dc:	46bd      	mov	sp, r7
 80132de:	bd80      	pop	{r7, pc}

080132e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b082      	sub	sp, #8
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
 80132e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80132ea:	683b      	ldr	r3, [r7, #0]
 80132ec:	885b      	ldrh	r3, [r3, #2]
 80132ee:	2b01      	cmp	r3, #1
 80132f0:	d107      	bne.n	8013302 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	2201      	movs	r2, #1
 80132f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80132fa:	6878      	ldr	r0, [r7, #4]
 80132fc:	f000 f923 	bl	8013546 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8013300:	e013      	b.n	801332a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8013302:	683b      	ldr	r3, [r7, #0]
 8013304:	885b      	ldrh	r3, [r3, #2]
 8013306:	2b02      	cmp	r3, #2
 8013308:	d10b      	bne.n	8013322 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 801330a:	683b      	ldr	r3, [r7, #0]
 801330c:	889b      	ldrh	r3, [r3, #4]
 801330e:	0a1b      	lsrs	r3, r3, #8
 8013310:	b29b      	uxth	r3, r3
 8013312:	b2da      	uxtb	r2, r3
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801331a:	6878      	ldr	r0, [r7, #4]
 801331c:	f000 f913 	bl	8013546 <USBD_CtlSendStatus>
}
 8013320:	e003      	b.n	801332a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8013322:	6839      	ldr	r1, [r7, #0]
 8013324:	6878      	ldr	r0, [r7, #4]
 8013326:	f000 f860 	bl	80133ea <USBD_CtlError>
}
 801332a:	bf00      	nop
 801332c:	3708      	adds	r7, #8
 801332e:	46bd      	mov	sp, r7
 8013330:	bd80      	pop	{r7, pc}

08013332 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013332:	b580      	push	{r7, lr}
 8013334:	b082      	sub	sp, #8
 8013336:	af00      	add	r7, sp, #0
 8013338:	6078      	str	r0, [r7, #4]
 801333a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013342:	b2db      	uxtb	r3, r3
 8013344:	3b01      	subs	r3, #1
 8013346:	2b02      	cmp	r3, #2
 8013348:	d80b      	bhi.n	8013362 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801334a:	683b      	ldr	r3, [r7, #0]
 801334c:	885b      	ldrh	r3, [r3, #2]
 801334e:	2b01      	cmp	r3, #1
 8013350:	d10c      	bne.n	801336c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	2200      	movs	r2, #0
 8013356:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801335a:	6878      	ldr	r0, [r7, #4]
 801335c:	f000 f8f3 	bl	8013546 <USBD_CtlSendStatus>
      }
      break;
 8013360:	e004      	b.n	801336c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8013362:	6839      	ldr	r1, [r7, #0]
 8013364:	6878      	ldr	r0, [r7, #4]
 8013366:	f000 f840 	bl	80133ea <USBD_CtlError>
      break;
 801336a:	e000      	b.n	801336e <USBD_ClrFeature+0x3c>
      break;
 801336c:	bf00      	nop
  }
}
 801336e:	bf00      	nop
 8013370:	3708      	adds	r7, #8
 8013372:	46bd      	mov	sp, r7
 8013374:	bd80      	pop	{r7, pc}

08013376 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8013376:	b580      	push	{r7, lr}
 8013378:	b084      	sub	sp, #16
 801337a:	af00      	add	r7, sp, #0
 801337c:	6078      	str	r0, [r7, #4]
 801337e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8013380:	683b      	ldr	r3, [r7, #0]
 8013382:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	781a      	ldrb	r2, [r3, #0]
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	3301      	adds	r3, #1
 8013390:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	781a      	ldrb	r2, [r3, #0]
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	3301      	adds	r3, #1
 801339e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80133a0:	68f8      	ldr	r0, [r7, #12]
 80133a2:	f7ff fa40 	bl	8012826 <SWAPBYTE>
 80133a6:	4603      	mov	r3, r0
 80133a8:	461a      	mov	r2, r3
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	3301      	adds	r3, #1
 80133b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	3301      	adds	r3, #1
 80133b8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80133ba:	68f8      	ldr	r0, [r7, #12]
 80133bc:	f7ff fa33 	bl	8012826 <SWAPBYTE>
 80133c0:	4603      	mov	r3, r0
 80133c2:	461a      	mov	r2, r3
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	3301      	adds	r3, #1
 80133cc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	3301      	adds	r3, #1
 80133d2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80133d4:	68f8      	ldr	r0, [r7, #12]
 80133d6:	f7ff fa26 	bl	8012826 <SWAPBYTE>
 80133da:	4603      	mov	r3, r0
 80133dc:	461a      	mov	r2, r3
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	80da      	strh	r2, [r3, #6]
}
 80133e2:	bf00      	nop
 80133e4:	3710      	adds	r7, #16
 80133e6:	46bd      	mov	sp, r7
 80133e8:	bd80      	pop	{r7, pc}

080133ea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80133ea:	b580      	push	{r7, lr}
 80133ec:	b082      	sub	sp, #8
 80133ee:	af00      	add	r7, sp, #0
 80133f0:	6078      	str	r0, [r7, #4]
 80133f2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80133f4:	2180      	movs	r1, #128	; 0x80
 80133f6:	6878      	ldr	r0, [r7, #4]
 80133f8:	f00d fc7f 	bl	8020cfa <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80133fc:	2100      	movs	r1, #0
 80133fe:	6878      	ldr	r0, [r7, #4]
 8013400:	f00d fc7b 	bl	8020cfa <USBD_LL_StallEP>
}
 8013404:	bf00      	nop
 8013406:	3708      	adds	r7, #8
 8013408:	46bd      	mov	sp, r7
 801340a:	bd80      	pop	{r7, pc}

0801340c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801340c:	b580      	push	{r7, lr}
 801340e:	b086      	sub	sp, #24
 8013410:	af00      	add	r7, sp, #0
 8013412:	60f8      	str	r0, [r7, #12]
 8013414:	60b9      	str	r1, [r7, #8]
 8013416:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8013418:	2300      	movs	r3, #0
 801341a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	2b00      	cmp	r3, #0
 8013420:	d036      	beq.n	8013490 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8013426:	6938      	ldr	r0, [r7, #16]
 8013428:	f000 f836 	bl	8013498 <USBD_GetLen>
 801342c:	4603      	mov	r3, r0
 801342e:	3301      	adds	r3, #1
 8013430:	b29b      	uxth	r3, r3
 8013432:	005b      	lsls	r3, r3, #1
 8013434:	b29a      	uxth	r2, r3
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801343a:	7dfb      	ldrb	r3, [r7, #23]
 801343c:	68ba      	ldr	r2, [r7, #8]
 801343e:	4413      	add	r3, r2
 8013440:	687a      	ldr	r2, [r7, #4]
 8013442:	7812      	ldrb	r2, [r2, #0]
 8013444:	701a      	strb	r2, [r3, #0]
  idx++;
 8013446:	7dfb      	ldrb	r3, [r7, #23]
 8013448:	3301      	adds	r3, #1
 801344a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801344c:	7dfb      	ldrb	r3, [r7, #23]
 801344e:	68ba      	ldr	r2, [r7, #8]
 8013450:	4413      	add	r3, r2
 8013452:	2203      	movs	r2, #3
 8013454:	701a      	strb	r2, [r3, #0]
  idx++;
 8013456:	7dfb      	ldrb	r3, [r7, #23]
 8013458:	3301      	adds	r3, #1
 801345a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801345c:	e013      	b.n	8013486 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801345e:	7dfb      	ldrb	r3, [r7, #23]
 8013460:	68ba      	ldr	r2, [r7, #8]
 8013462:	4413      	add	r3, r2
 8013464:	693a      	ldr	r2, [r7, #16]
 8013466:	7812      	ldrb	r2, [r2, #0]
 8013468:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801346a:	693b      	ldr	r3, [r7, #16]
 801346c:	3301      	adds	r3, #1
 801346e:	613b      	str	r3, [r7, #16]
    idx++;
 8013470:	7dfb      	ldrb	r3, [r7, #23]
 8013472:	3301      	adds	r3, #1
 8013474:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8013476:	7dfb      	ldrb	r3, [r7, #23]
 8013478:	68ba      	ldr	r2, [r7, #8]
 801347a:	4413      	add	r3, r2
 801347c:	2200      	movs	r2, #0
 801347e:	701a      	strb	r2, [r3, #0]
    idx++;
 8013480:	7dfb      	ldrb	r3, [r7, #23]
 8013482:	3301      	adds	r3, #1
 8013484:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8013486:	693b      	ldr	r3, [r7, #16]
 8013488:	781b      	ldrb	r3, [r3, #0]
 801348a:	2b00      	cmp	r3, #0
 801348c:	d1e7      	bne.n	801345e <USBD_GetString+0x52>
 801348e:	e000      	b.n	8013492 <USBD_GetString+0x86>
    return;
 8013490:	bf00      	nop
  }
}
 8013492:	3718      	adds	r7, #24
 8013494:	46bd      	mov	sp, r7
 8013496:	bd80      	pop	{r7, pc}

08013498 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8013498:	b480      	push	{r7}
 801349a:	b085      	sub	sp, #20
 801349c:	af00      	add	r7, sp, #0
 801349e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80134a0:	2300      	movs	r3, #0
 80134a2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80134a8:	e005      	b.n	80134b6 <USBD_GetLen+0x1e>
  {
    len++;
 80134aa:	7bfb      	ldrb	r3, [r7, #15]
 80134ac:	3301      	adds	r3, #1
 80134ae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80134b0:	68bb      	ldr	r3, [r7, #8]
 80134b2:	3301      	adds	r3, #1
 80134b4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80134b6:	68bb      	ldr	r3, [r7, #8]
 80134b8:	781b      	ldrb	r3, [r3, #0]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d1f5      	bne.n	80134aa <USBD_GetLen+0x12>
  }

  return len;
 80134be:	7bfb      	ldrb	r3, [r7, #15]
}
 80134c0:	4618      	mov	r0, r3
 80134c2:	3714      	adds	r7, #20
 80134c4:	46bd      	mov	sp, r7
 80134c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ca:	4770      	bx	lr

080134cc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80134cc:	b580      	push	{r7, lr}
 80134ce:	b084      	sub	sp, #16
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	60f8      	str	r0, [r7, #12]
 80134d4:	60b9      	str	r1, [r7, #8]
 80134d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	2202      	movs	r2, #2
 80134dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	687a      	ldr	r2, [r7, #4]
 80134e4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	687a      	ldr	r2, [r7, #4]
 80134ea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	68ba      	ldr	r2, [r7, #8]
 80134f0:	2100      	movs	r1, #0
 80134f2:	68f8      	ldr	r0, [r7, #12]
 80134f4:	f00d fc8a 	bl	8020e0c <USBD_LL_Transmit>

  return USBD_OK;
 80134f8:	2300      	movs	r3, #0
}
 80134fa:	4618      	mov	r0, r3
 80134fc:	3710      	adds	r7, #16
 80134fe:	46bd      	mov	sp, r7
 8013500:	bd80      	pop	{r7, pc}

08013502 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8013502:	b580      	push	{r7, lr}
 8013504:	b084      	sub	sp, #16
 8013506:	af00      	add	r7, sp, #0
 8013508:	60f8      	str	r0, [r7, #12]
 801350a:	60b9      	str	r1, [r7, #8]
 801350c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	68ba      	ldr	r2, [r7, #8]
 8013512:	2100      	movs	r1, #0
 8013514:	68f8      	ldr	r0, [r7, #12]
 8013516:	f00d fc79 	bl	8020e0c <USBD_LL_Transmit>

  return USBD_OK;
 801351a:	2300      	movs	r3, #0
}
 801351c:	4618      	mov	r0, r3
 801351e:	3710      	adds	r7, #16
 8013520:	46bd      	mov	sp, r7
 8013522:	bd80      	pop	{r7, pc}

08013524 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8013524:	b580      	push	{r7, lr}
 8013526:	b084      	sub	sp, #16
 8013528:	af00      	add	r7, sp, #0
 801352a:	60f8      	str	r0, [r7, #12]
 801352c:	60b9      	str	r1, [r7, #8]
 801352e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	68ba      	ldr	r2, [r7, #8]
 8013534:	2100      	movs	r1, #0
 8013536:	68f8      	ldr	r0, [r7, #12]
 8013538:	f00d fc89 	bl	8020e4e <USBD_LL_PrepareReceive>

  return USBD_OK;
 801353c:	2300      	movs	r3, #0
}
 801353e:	4618      	mov	r0, r3
 8013540:	3710      	adds	r7, #16
 8013542:	46bd      	mov	sp, r7
 8013544:	bd80      	pop	{r7, pc}

08013546 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8013546:	b580      	push	{r7, lr}
 8013548:	b082      	sub	sp, #8
 801354a:	af00      	add	r7, sp, #0
 801354c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	2204      	movs	r2, #4
 8013552:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013556:	2300      	movs	r3, #0
 8013558:	2200      	movs	r2, #0
 801355a:	2100      	movs	r1, #0
 801355c:	6878      	ldr	r0, [r7, #4]
 801355e:	f00d fc55 	bl	8020e0c <USBD_LL_Transmit>

  return USBD_OK;
 8013562:	2300      	movs	r3, #0
}
 8013564:	4618      	mov	r0, r3
 8013566:	3708      	adds	r7, #8
 8013568:	46bd      	mov	sp, r7
 801356a:	bd80      	pop	{r7, pc}

0801356c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801356c:	b580      	push	{r7, lr}
 801356e:	b082      	sub	sp, #8
 8013570:	af00      	add	r7, sp, #0
 8013572:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	2205      	movs	r2, #5
 8013578:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801357c:	2300      	movs	r3, #0
 801357e:	2200      	movs	r2, #0
 8013580:	2100      	movs	r1, #0
 8013582:	6878      	ldr	r0, [r7, #4]
 8013584:	f00d fc63 	bl	8020e4e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013588:	2300      	movs	r3, #0
}
 801358a:	4618      	mov	r0, r3
 801358c:	3708      	adds	r7, #8
 801358e:	46bd      	mov	sp, r7
 8013590:	bd80      	pop	{r7, pc}
	...

08013594 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8013594:	b580      	push	{r7, lr}
 8013596:	b084      	sub	sp, #16
 8013598:	af00      	add	r7, sp, #0
 801359a:	4603      	mov	r3, r0
 801359c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801359e:	79fb      	ldrb	r3, [r7, #7]
 80135a0:	4a08      	ldr	r2, [pc, #32]	; (80135c4 <disk_status+0x30>)
 80135a2:	009b      	lsls	r3, r3, #2
 80135a4:	4413      	add	r3, r2
 80135a6:	685b      	ldr	r3, [r3, #4]
 80135a8:	685b      	ldr	r3, [r3, #4]
 80135aa:	79fa      	ldrb	r2, [r7, #7]
 80135ac:	4905      	ldr	r1, [pc, #20]	; (80135c4 <disk_status+0x30>)
 80135ae:	440a      	add	r2, r1
 80135b0:	7a12      	ldrb	r2, [r2, #8]
 80135b2:	4610      	mov	r0, r2
 80135b4:	4798      	blx	r3
 80135b6:	4603      	mov	r3, r0
 80135b8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80135ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80135bc:	4618      	mov	r0, r3
 80135be:	3710      	adds	r7, #16
 80135c0:	46bd      	mov	sp, r7
 80135c2:	bd80      	pop	{r7, pc}
 80135c4:	240010c0 	.word	0x240010c0

080135c8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b084      	sub	sp, #16
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	4603      	mov	r3, r0
 80135d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80135d2:	2300      	movs	r3, #0
 80135d4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80135d6:	79fb      	ldrb	r3, [r7, #7]
 80135d8:	4a0d      	ldr	r2, [pc, #52]	; (8013610 <disk_initialize+0x48>)
 80135da:	5cd3      	ldrb	r3, [r2, r3]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d111      	bne.n	8013604 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80135e0:	79fb      	ldrb	r3, [r7, #7]
 80135e2:	4a0b      	ldr	r2, [pc, #44]	; (8013610 <disk_initialize+0x48>)
 80135e4:	2101      	movs	r1, #1
 80135e6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80135e8:	79fb      	ldrb	r3, [r7, #7]
 80135ea:	4a09      	ldr	r2, [pc, #36]	; (8013610 <disk_initialize+0x48>)
 80135ec:	009b      	lsls	r3, r3, #2
 80135ee:	4413      	add	r3, r2
 80135f0:	685b      	ldr	r3, [r3, #4]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	79fa      	ldrb	r2, [r7, #7]
 80135f6:	4906      	ldr	r1, [pc, #24]	; (8013610 <disk_initialize+0x48>)
 80135f8:	440a      	add	r2, r1
 80135fa:	7a12      	ldrb	r2, [r2, #8]
 80135fc:	4610      	mov	r0, r2
 80135fe:	4798      	blx	r3
 8013600:	4603      	mov	r3, r0
 8013602:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8013604:	7bfb      	ldrb	r3, [r7, #15]
}
 8013606:	4618      	mov	r0, r3
 8013608:	3710      	adds	r7, #16
 801360a:	46bd      	mov	sp, r7
 801360c:	bd80      	pop	{r7, pc}
 801360e:	bf00      	nop
 8013610:	240010c0 	.word	0x240010c0

08013614 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8013614:	b590      	push	{r4, r7, lr}
 8013616:	b087      	sub	sp, #28
 8013618:	af00      	add	r7, sp, #0
 801361a:	60b9      	str	r1, [r7, #8]
 801361c:	607a      	str	r2, [r7, #4]
 801361e:	603b      	str	r3, [r7, #0]
 8013620:	4603      	mov	r3, r0
 8013622:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8013624:	7bfb      	ldrb	r3, [r7, #15]
 8013626:	4a0a      	ldr	r2, [pc, #40]	; (8013650 <disk_read+0x3c>)
 8013628:	009b      	lsls	r3, r3, #2
 801362a:	4413      	add	r3, r2
 801362c:	685b      	ldr	r3, [r3, #4]
 801362e:	689c      	ldr	r4, [r3, #8]
 8013630:	7bfb      	ldrb	r3, [r7, #15]
 8013632:	4a07      	ldr	r2, [pc, #28]	; (8013650 <disk_read+0x3c>)
 8013634:	4413      	add	r3, r2
 8013636:	7a18      	ldrb	r0, [r3, #8]
 8013638:	683b      	ldr	r3, [r7, #0]
 801363a:	687a      	ldr	r2, [r7, #4]
 801363c:	68b9      	ldr	r1, [r7, #8]
 801363e:	47a0      	blx	r4
 8013640:	4603      	mov	r3, r0
 8013642:	75fb      	strb	r3, [r7, #23]
  return res;
 8013644:	7dfb      	ldrb	r3, [r7, #23]
}
 8013646:	4618      	mov	r0, r3
 8013648:	371c      	adds	r7, #28
 801364a:	46bd      	mov	sp, r7
 801364c:	bd90      	pop	{r4, r7, pc}
 801364e:	bf00      	nop
 8013650:	240010c0 	.word	0x240010c0

08013654 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8013654:	b590      	push	{r4, r7, lr}
 8013656:	b087      	sub	sp, #28
 8013658:	af00      	add	r7, sp, #0
 801365a:	60b9      	str	r1, [r7, #8]
 801365c:	607a      	str	r2, [r7, #4]
 801365e:	603b      	str	r3, [r7, #0]
 8013660:	4603      	mov	r3, r0
 8013662:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8013664:	7bfb      	ldrb	r3, [r7, #15]
 8013666:	4a0a      	ldr	r2, [pc, #40]	; (8013690 <disk_write+0x3c>)
 8013668:	009b      	lsls	r3, r3, #2
 801366a:	4413      	add	r3, r2
 801366c:	685b      	ldr	r3, [r3, #4]
 801366e:	68dc      	ldr	r4, [r3, #12]
 8013670:	7bfb      	ldrb	r3, [r7, #15]
 8013672:	4a07      	ldr	r2, [pc, #28]	; (8013690 <disk_write+0x3c>)
 8013674:	4413      	add	r3, r2
 8013676:	7a18      	ldrb	r0, [r3, #8]
 8013678:	683b      	ldr	r3, [r7, #0]
 801367a:	687a      	ldr	r2, [r7, #4]
 801367c:	68b9      	ldr	r1, [r7, #8]
 801367e:	47a0      	blx	r4
 8013680:	4603      	mov	r3, r0
 8013682:	75fb      	strb	r3, [r7, #23]
  return res;
 8013684:	7dfb      	ldrb	r3, [r7, #23]
}
 8013686:	4618      	mov	r0, r3
 8013688:	371c      	adds	r7, #28
 801368a:	46bd      	mov	sp, r7
 801368c:	bd90      	pop	{r4, r7, pc}
 801368e:	bf00      	nop
 8013690:	240010c0 	.word	0x240010c0

08013694 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8013694:	b580      	push	{r7, lr}
 8013696:	b084      	sub	sp, #16
 8013698:	af00      	add	r7, sp, #0
 801369a:	4603      	mov	r3, r0
 801369c:	603a      	str	r2, [r7, #0]
 801369e:	71fb      	strb	r3, [r7, #7]
 80136a0:	460b      	mov	r3, r1
 80136a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80136a4:	79fb      	ldrb	r3, [r7, #7]
 80136a6:	4a09      	ldr	r2, [pc, #36]	; (80136cc <disk_ioctl+0x38>)
 80136a8:	009b      	lsls	r3, r3, #2
 80136aa:	4413      	add	r3, r2
 80136ac:	685b      	ldr	r3, [r3, #4]
 80136ae:	691b      	ldr	r3, [r3, #16]
 80136b0:	79fa      	ldrb	r2, [r7, #7]
 80136b2:	4906      	ldr	r1, [pc, #24]	; (80136cc <disk_ioctl+0x38>)
 80136b4:	440a      	add	r2, r1
 80136b6:	7a10      	ldrb	r0, [r2, #8]
 80136b8:	79b9      	ldrb	r1, [r7, #6]
 80136ba:	683a      	ldr	r2, [r7, #0]
 80136bc:	4798      	blx	r3
 80136be:	4603      	mov	r3, r0
 80136c0:	73fb      	strb	r3, [r7, #15]
  return res;
 80136c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80136c4:	4618      	mov	r0, r3
 80136c6:	3710      	adds	r7, #16
 80136c8:	46bd      	mov	sp, r7
 80136ca:	bd80      	pop	{r7, pc}
 80136cc:	240010c0 	.word	0x240010c0

080136d0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80136d0:	b480      	push	{r7}
 80136d2:	b085      	sub	sp, #20
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	3301      	adds	r3, #1
 80136dc:	781b      	ldrb	r3, [r3, #0]
 80136de:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80136e0:	89fb      	ldrh	r3, [r7, #14]
 80136e2:	021b      	lsls	r3, r3, #8
 80136e4:	b21a      	sxth	r2, r3
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	781b      	ldrb	r3, [r3, #0]
 80136ea:	b21b      	sxth	r3, r3
 80136ec:	4313      	orrs	r3, r2
 80136ee:	b21b      	sxth	r3, r3
 80136f0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80136f2:	89fb      	ldrh	r3, [r7, #14]
}
 80136f4:	4618      	mov	r0, r3
 80136f6:	3714      	adds	r7, #20
 80136f8:	46bd      	mov	sp, r7
 80136fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136fe:	4770      	bx	lr

08013700 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8013700:	b480      	push	{r7}
 8013702:	b085      	sub	sp, #20
 8013704:	af00      	add	r7, sp, #0
 8013706:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	3303      	adds	r3, #3
 801370c:	781b      	ldrb	r3, [r3, #0]
 801370e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	021b      	lsls	r3, r3, #8
 8013714:	687a      	ldr	r2, [r7, #4]
 8013716:	3202      	adds	r2, #2
 8013718:	7812      	ldrb	r2, [r2, #0]
 801371a:	4313      	orrs	r3, r2
 801371c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	021b      	lsls	r3, r3, #8
 8013722:	687a      	ldr	r2, [r7, #4]
 8013724:	3201      	adds	r2, #1
 8013726:	7812      	ldrb	r2, [r2, #0]
 8013728:	4313      	orrs	r3, r2
 801372a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	021b      	lsls	r3, r3, #8
 8013730:	687a      	ldr	r2, [r7, #4]
 8013732:	7812      	ldrb	r2, [r2, #0]
 8013734:	4313      	orrs	r3, r2
 8013736:	60fb      	str	r3, [r7, #12]
	return rv;
 8013738:	68fb      	ldr	r3, [r7, #12]
}
 801373a:	4618      	mov	r0, r3
 801373c:	3714      	adds	r7, #20
 801373e:	46bd      	mov	sp, r7
 8013740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013744:	4770      	bx	lr

08013746 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8013746:	b480      	push	{r7}
 8013748:	b083      	sub	sp, #12
 801374a:	af00      	add	r7, sp, #0
 801374c:	6078      	str	r0, [r7, #4]
 801374e:	460b      	mov	r3, r1
 8013750:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	1c5a      	adds	r2, r3, #1
 8013756:	607a      	str	r2, [r7, #4]
 8013758:	887a      	ldrh	r2, [r7, #2]
 801375a:	b2d2      	uxtb	r2, r2
 801375c:	701a      	strb	r2, [r3, #0]
 801375e:	887b      	ldrh	r3, [r7, #2]
 8013760:	0a1b      	lsrs	r3, r3, #8
 8013762:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	1c5a      	adds	r2, r3, #1
 8013768:	607a      	str	r2, [r7, #4]
 801376a:	887a      	ldrh	r2, [r7, #2]
 801376c:	b2d2      	uxtb	r2, r2
 801376e:	701a      	strb	r2, [r3, #0]
}
 8013770:	bf00      	nop
 8013772:	370c      	adds	r7, #12
 8013774:	46bd      	mov	sp, r7
 8013776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377a:	4770      	bx	lr

0801377c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801377c:	b480      	push	{r7}
 801377e:	b083      	sub	sp, #12
 8013780:	af00      	add	r7, sp, #0
 8013782:	6078      	str	r0, [r7, #4]
 8013784:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	1c5a      	adds	r2, r3, #1
 801378a:	607a      	str	r2, [r7, #4]
 801378c:	683a      	ldr	r2, [r7, #0]
 801378e:	b2d2      	uxtb	r2, r2
 8013790:	701a      	strb	r2, [r3, #0]
 8013792:	683b      	ldr	r3, [r7, #0]
 8013794:	0a1b      	lsrs	r3, r3, #8
 8013796:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	1c5a      	adds	r2, r3, #1
 801379c:	607a      	str	r2, [r7, #4]
 801379e:	683a      	ldr	r2, [r7, #0]
 80137a0:	b2d2      	uxtb	r2, r2
 80137a2:	701a      	strb	r2, [r3, #0]
 80137a4:	683b      	ldr	r3, [r7, #0]
 80137a6:	0a1b      	lsrs	r3, r3, #8
 80137a8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	1c5a      	adds	r2, r3, #1
 80137ae:	607a      	str	r2, [r7, #4]
 80137b0:	683a      	ldr	r2, [r7, #0]
 80137b2:	b2d2      	uxtb	r2, r2
 80137b4:	701a      	strb	r2, [r3, #0]
 80137b6:	683b      	ldr	r3, [r7, #0]
 80137b8:	0a1b      	lsrs	r3, r3, #8
 80137ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	1c5a      	adds	r2, r3, #1
 80137c0:	607a      	str	r2, [r7, #4]
 80137c2:	683a      	ldr	r2, [r7, #0]
 80137c4:	b2d2      	uxtb	r2, r2
 80137c6:	701a      	strb	r2, [r3, #0]
}
 80137c8:	bf00      	nop
 80137ca:	370c      	adds	r7, #12
 80137cc:	46bd      	mov	sp, r7
 80137ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d2:	4770      	bx	lr

080137d4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80137d4:	b480      	push	{r7}
 80137d6:	b087      	sub	sp, #28
 80137d8:	af00      	add	r7, sp, #0
 80137da:	60f8      	str	r0, [r7, #12]
 80137dc:	60b9      	str	r1, [r7, #8]
 80137de:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80137e4:	68bb      	ldr	r3, [r7, #8]
 80137e6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d00d      	beq.n	801380a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80137ee:	693a      	ldr	r2, [r7, #16]
 80137f0:	1c53      	adds	r3, r2, #1
 80137f2:	613b      	str	r3, [r7, #16]
 80137f4:	697b      	ldr	r3, [r7, #20]
 80137f6:	1c59      	adds	r1, r3, #1
 80137f8:	6179      	str	r1, [r7, #20]
 80137fa:	7812      	ldrb	r2, [r2, #0]
 80137fc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	3b01      	subs	r3, #1
 8013802:	607b      	str	r3, [r7, #4]
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d1f1      	bne.n	80137ee <mem_cpy+0x1a>
	}
}
 801380a:	bf00      	nop
 801380c:	371c      	adds	r7, #28
 801380e:	46bd      	mov	sp, r7
 8013810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013814:	4770      	bx	lr

08013816 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8013816:	b480      	push	{r7}
 8013818:	b087      	sub	sp, #28
 801381a:	af00      	add	r7, sp, #0
 801381c:	60f8      	str	r0, [r7, #12]
 801381e:	60b9      	str	r1, [r7, #8]
 8013820:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8013826:	697b      	ldr	r3, [r7, #20]
 8013828:	1c5a      	adds	r2, r3, #1
 801382a:	617a      	str	r2, [r7, #20]
 801382c:	68ba      	ldr	r2, [r7, #8]
 801382e:	b2d2      	uxtb	r2, r2
 8013830:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	3b01      	subs	r3, #1
 8013836:	607b      	str	r3, [r7, #4]
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d1f3      	bne.n	8013826 <mem_set+0x10>
}
 801383e:	bf00      	nop
 8013840:	bf00      	nop
 8013842:	371c      	adds	r7, #28
 8013844:	46bd      	mov	sp, r7
 8013846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801384a:	4770      	bx	lr

0801384c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801384c:	b480      	push	{r7}
 801384e:	b089      	sub	sp, #36	; 0x24
 8013850:	af00      	add	r7, sp, #0
 8013852:	60f8      	str	r0, [r7, #12]
 8013854:	60b9      	str	r1, [r7, #8]
 8013856:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	61fb      	str	r3, [r7, #28]
 801385c:	68bb      	ldr	r3, [r7, #8]
 801385e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8013860:	2300      	movs	r3, #0
 8013862:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8013864:	69fb      	ldr	r3, [r7, #28]
 8013866:	1c5a      	adds	r2, r3, #1
 8013868:	61fa      	str	r2, [r7, #28]
 801386a:	781b      	ldrb	r3, [r3, #0]
 801386c:	4619      	mov	r1, r3
 801386e:	69bb      	ldr	r3, [r7, #24]
 8013870:	1c5a      	adds	r2, r3, #1
 8013872:	61ba      	str	r2, [r7, #24]
 8013874:	781b      	ldrb	r3, [r3, #0]
 8013876:	1acb      	subs	r3, r1, r3
 8013878:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	3b01      	subs	r3, #1
 801387e:	607b      	str	r3, [r7, #4]
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d002      	beq.n	801388c <mem_cmp+0x40>
 8013886:	697b      	ldr	r3, [r7, #20]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d0eb      	beq.n	8013864 <mem_cmp+0x18>

	return r;
 801388c:	697b      	ldr	r3, [r7, #20]
}
 801388e:	4618      	mov	r0, r3
 8013890:	3724      	adds	r7, #36	; 0x24
 8013892:	46bd      	mov	sp, r7
 8013894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013898:	4770      	bx	lr

0801389a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801389a:	b480      	push	{r7}
 801389c:	b083      	sub	sp, #12
 801389e:	af00      	add	r7, sp, #0
 80138a0:	6078      	str	r0, [r7, #4]
 80138a2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80138a4:	e002      	b.n	80138ac <chk_chr+0x12>
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	3301      	adds	r3, #1
 80138aa:	607b      	str	r3, [r7, #4]
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	781b      	ldrb	r3, [r3, #0]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d005      	beq.n	80138c0 <chk_chr+0x26>
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	781b      	ldrb	r3, [r3, #0]
 80138b8:	461a      	mov	r2, r3
 80138ba:	683b      	ldr	r3, [r7, #0]
 80138bc:	4293      	cmp	r3, r2
 80138be:	d1f2      	bne.n	80138a6 <chk_chr+0xc>
	return *str;
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	781b      	ldrb	r3, [r3, #0]
}
 80138c4:	4618      	mov	r0, r3
 80138c6:	370c      	adds	r7, #12
 80138c8:	46bd      	mov	sp, r7
 80138ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ce:	4770      	bx	lr

080138d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80138d0:	b480      	push	{r7}
 80138d2:	b085      	sub	sp, #20
 80138d4:	af00      	add	r7, sp, #0
 80138d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80138d8:	2300      	movs	r3, #0
 80138da:	60fb      	str	r3, [r7, #12]
 80138dc:	e010      	b.n	8013900 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80138de:	4a0d      	ldr	r2, [pc, #52]	; (8013914 <clear_lock+0x44>)
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	011b      	lsls	r3, r3, #4
 80138e4:	4413      	add	r3, r2
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	687a      	ldr	r2, [r7, #4]
 80138ea:	429a      	cmp	r2, r3
 80138ec:	d105      	bne.n	80138fa <clear_lock+0x2a>
 80138ee:	4a09      	ldr	r2, [pc, #36]	; (8013914 <clear_lock+0x44>)
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	011b      	lsls	r3, r3, #4
 80138f4:	4413      	add	r3, r2
 80138f6:	2200      	movs	r2, #0
 80138f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	3301      	adds	r3, #1
 80138fe:	60fb      	str	r3, [r7, #12]
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	2b01      	cmp	r3, #1
 8013904:	d9eb      	bls.n	80138de <clear_lock+0xe>
	}
}
 8013906:	bf00      	nop
 8013908:	bf00      	nop
 801390a:	3714      	adds	r7, #20
 801390c:	46bd      	mov	sp, r7
 801390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013912:	4770      	bx	lr
 8013914:	240010a0 	.word	0x240010a0

08013918 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8013918:	b580      	push	{r7, lr}
 801391a:	b086      	sub	sp, #24
 801391c:	af00      	add	r7, sp, #0
 801391e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8013920:	2300      	movs	r3, #0
 8013922:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	78db      	ldrb	r3, [r3, #3]
 8013928:	2b00      	cmp	r3, #0
 801392a:	d034      	beq.n	8013996 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013930:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	7858      	ldrb	r0, [r3, #1]
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801393c:	2301      	movs	r3, #1
 801393e:	697a      	ldr	r2, [r7, #20]
 8013940:	f7ff fe88 	bl	8013654 <disk_write>
 8013944:	4603      	mov	r3, r0
 8013946:	2b00      	cmp	r3, #0
 8013948:	d002      	beq.n	8013950 <sync_window+0x38>
			res = FR_DISK_ERR;
 801394a:	2301      	movs	r3, #1
 801394c:	73fb      	strb	r3, [r7, #15]
 801394e:	e022      	b.n	8013996 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	2200      	movs	r2, #0
 8013954:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801395a:	697a      	ldr	r2, [r7, #20]
 801395c:	1ad2      	subs	r2, r2, r3
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	69db      	ldr	r3, [r3, #28]
 8013962:	429a      	cmp	r2, r3
 8013964:	d217      	bcs.n	8013996 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	789b      	ldrb	r3, [r3, #2]
 801396a:	613b      	str	r3, [r7, #16]
 801396c:	e010      	b.n	8013990 <sync_window+0x78>
					wsect += fs->fsize;
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	69db      	ldr	r3, [r3, #28]
 8013972:	697a      	ldr	r2, [r7, #20]
 8013974:	4413      	add	r3, r2
 8013976:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	7858      	ldrb	r0, [r3, #1]
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013982:	2301      	movs	r3, #1
 8013984:	697a      	ldr	r2, [r7, #20]
 8013986:	f7ff fe65 	bl	8013654 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801398a:	693b      	ldr	r3, [r7, #16]
 801398c:	3b01      	subs	r3, #1
 801398e:	613b      	str	r3, [r7, #16]
 8013990:	693b      	ldr	r3, [r7, #16]
 8013992:	2b01      	cmp	r3, #1
 8013994:	d8eb      	bhi.n	801396e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8013996:	7bfb      	ldrb	r3, [r7, #15]
}
 8013998:	4618      	mov	r0, r3
 801399a:	3718      	adds	r7, #24
 801399c:	46bd      	mov	sp, r7
 801399e:	bd80      	pop	{r7, pc}

080139a0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80139a0:	b580      	push	{r7, lr}
 80139a2:	b084      	sub	sp, #16
 80139a4:	af00      	add	r7, sp, #0
 80139a6:	6078      	str	r0, [r7, #4]
 80139a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80139aa:	2300      	movs	r3, #0
 80139ac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139b2:	683a      	ldr	r2, [r7, #0]
 80139b4:	429a      	cmp	r2, r3
 80139b6:	d01b      	beq.n	80139f0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80139b8:	6878      	ldr	r0, [r7, #4]
 80139ba:	f7ff ffad 	bl	8013918 <sync_window>
 80139be:	4603      	mov	r3, r0
 80139c0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80139c2:	7bfb      	ldrb	r3, [r7, #15]
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d113      	bne.n	80139f0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	7858      	ldrb	r0, [r3, #1]
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80139d2:	2301      	movs	r3, #1
 80139d4:	683a      	ldr	r2, [r7, #0]
 80139d6:	f7ff fe1d 	bl	8013614 <disk_read>
 80139da:	4603      	mov	r3, r0
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d004      	beq.n	80139ea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80139e0:	f04f 33ff 	mov.w	r3, #4294967295
 80139e4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80139e6:	2301      	movs	r3, #1
 80139e8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	683a      	ldr	r2, [r7, #0]
 80139ee:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80139f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80139f2:	4618      	mov	r0, r3
 80139f4:	3710      	adds	r7, #16
 80139f6:	46bd      	mov	sp, r7
 80139f8:	bd80      	pop	{r7, pc}
	...

080139fc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80139fc:	b580      	push	{r7, lr}
 80139fe:	b084      	sub	sp, #16
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8013a04:	6878      	ldr	r0, [r7, #4]
 8013a06:	f7ff ff87 	bl	8013918 <sync_window>
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8013a0e:	7bfb      	ldrb	r3, [r7, #15]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d158      	bne.n	8013ac6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	781b      	ldrb	r3, [r3, #0]
 8013a18:	2b03      	cmp	r3, #3
 8013a1a:	d148      	bne.n	8013aae <sync_fs+0xb2>
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	791b      	ldrb	r3, [r3, #4]
 8013a20:	2b01      	cmp	r3, #1
 8013a22:	d144      	bne.n	8013aae <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	3334      	adds	r3, #52	; 0x34
 8013a28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013a2c:	2100      	movs	r1, #0
 8013a2e:	4618      	mov	r0, r3
 8013a30:	f7ff fef1 	bl	8013816 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	3334      	adds	r3, #52	; 0x34
 8013a38:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013a3c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013a40:	4618      	mov	r0, r3
 8013a42:	f7ff fe80 	bl	8013746 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	3334      	adds	r3, #52	; 0x34
 8013a4a:	4921      	ldr	r1, [pc, #132]	; (8013ad0 <sync_fs+0xd4>)
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	f7ff fe95 	bl	801377c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	3334      	adds	r3, #52	; 0x34
 8013a56:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013a5a:	491e      	ldr	r1, [pc, #120]	; (8013ad4 <sync_fs+0xd8>)
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	f7ff fe8d 	bl	801377c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	3334      	adds	r3, #52	; 0x34
 8013a66:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	691b      	ldr	r3, [r3, #16]
 8013a6e:	4619      	mov	r1, r3
 8013a70:	4610      	mov	r0, r2
 8013a72:	f7ff fe83 	bl	801377c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	3334      	adds	r3, #52	; 0x34
 8013a7a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	68db      	ldr	r3, [r3, #12]
 8013a82:	4619      	mov	r1, r3
 8013a84:	4610      	mov	r0, r2
 8013a86:	f7ff fe79 	bl	801377c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	6a1b      	ldr	r3, [r3, #32]
 8013a8e:	1c5a      	adds	r2, r3, #1
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	7858      	ldrb	r0, [r3, #1]
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013aa2:	2301      	movs	r3, #1
 8013aa4:	f7ff fdd6 	bl	8013654 <disk_write>
			fs->fsi_flag = 0;
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	2200      	movs	r2, #0
 8013aac:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	785b      	ldrb	r3, [r3, #1]
 8013ab2:	2200      	movs	r2, #0
 8013ab4:	2100      	movs	r1, #0
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f7ff fdec 	bl	8013694 <disk_ioctl>
 8013abc:	4603      	mov	r3, r0
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d001      	beq.n	8013ac6 <sync_fs+0xca>
 8013ac2:	2301      	movs	r3, #1
 8013ac4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8013ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ac8:	4618      	mov	r0, r3
 8013aca:	3710      	adds	r7, #16
 8013acc:	46bd      	mov	sp, r7
 8013ace:	bd80      	pop	{r7, pc}
 8013ad0:	41615252 	.word	0x41615252
 8013ad4:	61417272 	.word	0x61417272

08013ad8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8013ad8:	b480      	push	{r7}
 8013ada:	b083      	sub	sp, #12
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	6078      	str	r0, [r7, #4]
 8013ae0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8013ae2:	683b      	ldr	r3, [r7, #0]
 8013ae4:	3b02      	subs	r3, #2
 8013ae6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	699b      	ldr	r3, [r3, #24]
 8013aec:	3b02      	subs	r3, #2
 8013aee:	683a      	ldr	r2, [r7, #0]
 8013af0:	429a      	cmp	r2, r3
 8013af2:	d301      	bcc.n	8013af8 <clust2sect+0x20>
 8013af4:	2300      	movs	r3, #0
 8013af6:	e008      	b.n	8013b0a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	895b      	ldrh	r3, [r3, #10]
 8013afc:	461a      	mov	r2, r3
 8013afe:	683b      	ldr	r3, [r7, #0]
 8013b00:	fb03 f202 	mul.w	r2, r3, r2
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b08:	4413      	add	r3, r2
}
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	370c      	adds	r7, #12
 8013b0e:	46bd      	mov	sp, r7
 8013b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b14:	4770      	bx	lr

08013b16 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8013b16:	b580      	push	{r7, lr}
 8013b18:	b086      	sub	sp, #24
 8013b1a:	af00      	add	r7, sp, #0
 8013b1c:	6078      	str	r0, [r7, #4]
 8013b1e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8013b26:	683b      	ldr	r3, [r7, #0]
 8013b28:	2b01      	cmp	r3, #1
 8013b2a:	d904      	bls.n	8013b36 <get_fat+0x20>
 8013b2c:	693b      	ldr	r3, [r7, #16]
 8013b2e:	699b      	ldr	r3, [r3, #24]
 8013b30:	683a      	ldr	r2, [r7, #0]
 8013b32:	429a      	cmp	r2, r3
 8013b34:	d302      	bcc.n	8013b3c <get_fat+0x26>
		val = 1;	/* Internal error */
 8013b36:	2301      	movs	r3, #1
 8013b38:	617b      	str	r3, [r7, #20]
 8013b3a:	e08f      	b.n	8013c5c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8013b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8013b40:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8013b42:	693b      	ldr	r3, [r7, #16]
 8013b44:	781b      	ldrb	r3, [r3, #0]
 8013b46:	2b03      	cmp	r3, #3
 8013b48:	d062      	beq.n	8013c10 <get_fat+0xfa>
 8013b4a:	2b03      	cmp	r3, #3
 8013b4c:	dc7c      	bgt.n	8013c48 <get_fat+0x132>
 8013b4e:	2b01      	cmp	r3, #1
 8013b50:	d002      	beq.n	8013b58 <get_fat+0x42>
 8013b52:	2b02      	cmp	r3, #2
 8013b54:	d042      	beq.n	8013bdc <get_fat+0xc6>
 8013b56:	e077      	b.n	8013c48 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8013b58:	683b      	ldr	r3, [r7, #0]
 8013b5a:	60fb      	str	r3, [r7, #12]
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	085b      	lsrs	r3, r3, #1
 8013b60:	68fa      	ldr	r2, [r7, #12]
 8013b62:	4413      	add	r3, r2
 8013b64:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013b66:	693b      	ldr	r3, [r7, #16]
 8013b68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	0a5b      	lsrs	r3, r3, #9
 8013b6e:	4413      	add	r3, r2
 8013b70:	4619      	mov	r1, r3
 8013b72:	6938      	ldr	r0, [r7, #16]
 8013b74:	f7ff ff14 	bl	80139a0 <move_window>
 8013b78:	4603      	mov	r3, r0
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d167      	bne.n	8013c4e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	1c5a      	adds	r2, r3, #1
 8013b82:	60fa      	str	r2, [r7, #12]
 8013b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b88:	693a      	ldr	r2, [r7, #16]
 8013b8a:	4413      	add	r3, r2
 8013b8c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013b90:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013b92:	693b      	ldr	r3, [r7, #16]
 8013b94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	0a5b      	lsrs	r3, r3, #9
 8013b9a:	4413      	add	r3, r2
 8013b9c:	4619      	mov	r1, r3
 8013b9e:	6938      	ldr	r0, [r7, #16]
 8013ba0:	f7ff fefe 	bl	80139a0 <move_window>
 8013ba4:	4603      	mov	r3, r0
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d153      	bne.n	8013c52 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013bb0:	693a      	ldr	r2, [r7, #16]
 8013bb2:	4413      	add	r3, r2
 8013bb4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013bb8:	021b      	lsls	r3, r3, #8
 8013bba:	461a      	mov	r2, r3
 8013bbc:	68bb      	ldr	r3, [r7, #8]
 8013bbe:	4313      	orrs	r3, r2
 8013bc0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8013bc2:	683b      	ldr	r3, [r7, #0]
 8013bc4:	f003 0301 	and.w	r3, r3, #1
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d002      	beq.n	8013bd2 <get_fat+0xbc>
 8013bcc:	68bb      	ldr	r3, [r7, #8]
 8013bce:	091b      	lsrs	r3, r3, #4
 8013bd0:	e002      	b.n	8013bd8 <get_fat+0xc2>
 8013bd2:	68bb      	ldr	r3, [r7, #8]
 8013bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013bd8:	617b      	str	r3, [r7, #20]
			break;
 8013bda:	e03f      	b.n	8013c5c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013bdc:	693b      	ldr	r3, [r7, #16]
 8013bde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013be0:	683b      	ldr	r3, [r7, #0]
 8013be2:	0a1b      	lsrs	r3, r3, #8
 8013be4:	4413      	add	r3, r2
 8013be6:	4619      	mov	r1, r3
 8013be8:	6938      	ldr	r0, [r7, #16]
 8013bea:	f7ff fed9 	bl	80139a0 <move_window>
 8013bee:	4603      	mov	r3, r0
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d130      	bne.n	8013c56 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8013bf4:	693b      	ldr	r3, [r7, #16]
 8013bf6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013bfa:	683b      	ldr	r3, [r7, #0]
 8013bfc:	005b      	lsls	r3, r3, #1
 8013bfe:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8013c02:	4413      	add	r3, r2
 8013c04:	4618      	mov	r0, r3
 8013c06:	f7ff fd63 	bl	80136d0 <ld_word>
 8013c0a:	4603      	mov	r3, r0
 8013c0c:	617b      	str	r3, [r7, #20]
			break;
 8013c0e:	e025      	b.n	8013c5c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013c10:	693b      	ldr	r3, [r7, #16]
 8013c12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013c14:	683b      	ldr	r3, [r7, #0]
 8013c16:	09db      	lsrs	r3, r3, #7
 8013c18:	4413      	add	r3, r2
 8013c1a:	4619      	mov	r1, r3
 8013c1c:	6938      	ldr	r0, [r7, #16]
 8013c1e:	f7ff febf 	bl	80139a0 <move_window>
 8013c22:	4603      	mov	r3, r0
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d118      	bne.n	8013c5a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8013c28:	693b      	ldr	r3, [r7, #16]
 8013c2a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013c2e:	683b      	ldr	r3, [r7, #0]
 8013c30:	009b      	lsls	r3, r3, #2
 8013c32:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013c36:	4413      	add	r3, r2
 8013c38:	4618      	mov	r0, r3
 8013c3a:	f7ff fd61 	bl	8013700 <ld_dword>
 8013c3e:	4603      	mov	r3, r0
 8013c40:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8013c44:	617b      	str	r3, [r7, #20]
			break;
 8013c46:	e009      	b.n	8013c5c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8013c48:	2301      	movs	r3, #1
 8013c4a:	617b      	str	r3, [r7, #20]
 8013c4c:	e006      	b.n	8013c5c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013c4e:	bf00      	nop
 8013c50:	e004      	b.n	8013c5c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013c52:	bf00      	nop
 8013c54:	e002      	b.n	8013c5c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013c56:	bf00      	nop
 8013c58:	e000      	b.n	8013c5c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013c5a:	bf00      	nop
		}
	}

	return val;
 8013c5c:	697b      	ldr	r3, [r7, #20]
}
 8013c5e:	4618      	mov	r0, r3
 8013c60:	3718      	adds	r7, #24
 8013c62:	46bd      	mov	sp, r7
 8013c64:	bd80      	pop	{r7, pc}

08013c66 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8013c66:	b590      	push	{r4, r7, lr}
 8013c68:	b089      	sub	sp, #36	; 0x24
 8013c6a:	af00      	add	r7, sp, #0
 8013c6c:	60f8      	str	r0, [r7, #12]
 8013c6e:	60b9      	str	r1, [r7, #8]
 8013c70:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8013c72:	2302      	movs	r3, #2
 8013c74:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8013c76:	68bb      	ldr	r3, [r7, #8]
 8013c78:	2b01      	cmp	r3, #1
 8013c7a:	f240 80d2 	bls.w	8013e22 <put_fat+0x1bc>
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	699b      	ldr	r3, [r3, #24]
 8013c82:	68ba      	ldr	r2, [r7, #8]
 8013c84:	429a      	cmp	r2, r3
 8013c86:	f080 80cc 	bcs.w	8013e22 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	781b      	ldrb	r3, [r3, #0]
 8013c8e:	2b03      	cmp	r3, #3
 8013c90:	f000 8096 	beq.w	8013dc0 <put_fat+0x15a>
 8013c94:	2b03      	cmp	r3, #3
 8013c96:	f300 80cd 	bgt.w	8013e34 <put_fat+0x1ce>
 8013c9a:	2b01      	cmp	r3, #1
 8013c9c:	d002      	beq.n	8013ca4 <put_fat+0x3e>
 8013c9e:	2b02      	cmp	r3, #2
 8013ca0:	d06e      	beq.n	8013d80 <put_fat+0x11a>
 8013ca2:	e0c7      	b.n	8013e34 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8013ca4:	68bb      	ldr	r3, [r7, #8]
 8013ca6:	61bb      	str	r3, [r7, #24]
 8013ca8:	69bb      	ldr	r3, [r7, #24]
 8013caa:	085b      	lsrs	r3, r3, #1
 8013cac:	69ba      	ldr	r2, [r7, #24]
 8013cae:	4413      	add	r3, r2
 8013cb0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013cb6:	69bb      	ldr	r3, [r7, #24]
 8013cb8:	0a5b      	lsrs	r3, r3, #9
 8013cba:	4413      	add	r3, r2
 8013cbc:	4619      	mov	r1, r3
 8013cbe:	68f8      	ldr	r0, [r7, #12]
 8013cc0:	f7ff fe6e 	bl	80139a0 <move_window>
 8013cc4:	4603      	mov	r3, r0
 8013cc6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013cc8:	7ffb      	ldrb	r3, [r7, #31]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	f040 80ab 	bne.w	8013e26 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013cd6:	69bb      	ldr	r3, [r7, #24]
 8013cd8:	1c59      	adds	r1, r3, #1
 8013cda:	61b9      	str	r1, [r7, #24]
 8013cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ce0:	4413      	add	r3, r2
 8013ce2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013ce4:	68bb      	ldr	r3, [r7, #8]
 8013ce6:	f003 0301 	and.w	r3, r3, #1
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d00d      	beq.n	8013d0a <put_fat+0xa4>
 8013cee:	697b      	ldr	r3, [r7, #20]
 8013cf0:	781b      	ldrb	r3, [r3, #0]
 8013cf2:	b25b      	sxtb	r3, r3
 8013cf4:	f003 030f 	and.w	r3, r3, #15
 8013cf8:	b25a      	sxtb	r2, r3
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	b2db      	uxtb	r3, r3
 8013cfe:	011b      	lsls	r3, r3, #4
 8013d00:	b25b      	sxtb	r3, r3
 8013d02:	4313      	orrs	r3, r2
 8013d04:	b25b      	sxtb	r3, r3
 8013d06:	b2db      	uxtb	r3, r3
 8013d08:	e001      	b.n	8013d0e <put_fat+0xa8>
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	b2db      	uxtb	r3, r3
 8013d0e:	697a      	ldr	r2, [r7, #20]
 8013d10:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	2201      	movs	r2, #1
 8013d16:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013d1c:	69bb      	ldr	r3, [r7, #24]
 8013d1e:	0a5b      	lsrs	r3, r3, #9
 8013d20:	4413      	add	r3, r2
 8013d22:	4619      	mov	r1, r3
 8013d24:	68f8      	ldr	r0, [r7, #12]
 8013d26:	f7ff fe3b 	bl	80139a0 <move_window>
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013d2e:	7ffb      	ldrb	r3, [r7, #31]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d17a      	bne.n	8013e2a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013d3a:	69bb      	ldr	r3, [r7, #24]
 8013d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d40:	4413      	add	r3, r2
 8013d42:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013d44:	68bb      	ldr	r3, [r7, #8]
 8013d46:	f003 0301 	and.w	r3, r3, #1
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d003      	beq.n	8013d56 <put_fat+0xf0>
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	091b      	lsrs	r3, r3, #4
 8013d52:	b2db      	uxtb	r3, r3
 8013d54:	e00e      	b.n	8013d74 <put_fat+0x10e>
 8013d56:	697b      	ldr	r3, [r7, #20]
 8013d58:	781b      	ldrb	r3, [r3, #0]
 8013d5a:	b25b      	sxtb	r3, r3
 8013d5c:	f023 030f 	bic.w	r3, r3, #15
 8013d60:	b25a      	sxtb	r2, r3
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	0a1b      	lsrs	r3, r3, #8
 8013d66:	b25b      	sxtb	r3, r3
 8013d68:	f003 030f 	and.w	r3, r3, #15
 8013d6c:	b25b      	sxtb	r3, r3
 8013d6e:	4313      	orrs	r3, r2
 8013d70:	b25b      	sxtb	r3, r3
 8013d72:	b2db      	uxtb	r3, r3
 8013d74:	697a      	ldr	r2, [r7, #20]
 8013d76:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	2201      	movs	r2, #1
 8013d7c:	70da      	strb	r2, [r3, #3]
			break;
 8013d7e:	e059      	b.n	8013e34 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013d84:	68bb      	ldr	r3, [r7, #8]
 8013d86:	0a1b      	lsrs	r3, r3, #8
 8013d88:	4413      	add	r3, r2
 8013d8a:	4619      	mov	r1, r3
 8013d8c:	68f8      	ldr	r0, [r7, #12]
 8013d8e:	f7ff fe07 	bl	80139a0 <move_window>
 8013d92:	4603      	mov	r3, r0
 8013d94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013d96:	7ffb      	ldrb	r3, [r7, #31]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d148      	bne.n	8013e2e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013da2:	68bb      	ldr	r3, [r7, #8]
 8013da4:	005b      	lsls	r3, r3, #1
 8013da6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8013daa:	4413      	add	r3, r2
 8013dac:	687a      	ldr	r2, [r7, #4]
 8013dae:	b292      	uxth	r2, r2
 8013db0:	4611      	mov	r1, r2
 8013db2:	4618      	mov	r0, r3
 8013db4:	f7ff fcc7 	bl	8013746 <st_word>
			fs->wflag = 1;
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	2201      	movs	r2, #1
 8013dbc:	70da      	strb	r2, [r3, #3]
			break;
 8013dbe:	e039      	b.n	8013e34 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013dc4:	68bb      	ldr	r3, [r7, #8]
 8013dc6:	09db      	lsrs	r3, r3, #7
 8013dc8:	4413      	add	r3, r2
 8013dca:	4619      	mov	r1, r3
 8013dcc:	68f8      	ldr	r0, [r7, #12]
 8013dce:	f7ff fde7 	bl	80139a0 <move_window>
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013dd6:	7ffb      	ldrb	r3, [r7, #31]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d12a      	bne.n	8013e32 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013de8:	68bb      	ldr	r3, [r7, #8]
 8013dea:	009b      	lsls	r3, r3, #2
 8013dec:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013df0:	4413      	add	r3, r2
 8013df2:	4618      	mov	r0, r3
 8013df4:	f7ff fc84 	bl	8013700 <ld_dword>
 8013df8:	4603      	mov	r3, r0
 8013dfa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8013dfe:	4323      	orrs	r3, r4
 8013e00:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013e08:	68bb      	ldr	r3, [r7, #8]
 8013e0a:	009b      	lsls	r3, r3, #2
 8013e0c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013e10:	4413      	add	r3, r2
 8013e12:	6879      	ldr	r1, [r7, #4]
 8013e14:	4618      	mov	r0, r3
 8013e16:	f7ff fcb1 	bl	801377c <st_dword>
			fs->wflag = 1;
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	2201      	movs	r2, #1
 8013e1e:	70da      	strb	r2, [r3, #3]
			break;
 8013e20:	e008      	b.n	8013e34 <put_fat+0x1ce>
		}
	}
 8013e22:	bf00      	nop
 8013e24:	e006      	b.n	8013e34 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8013e26:	bf00      	nop
 8013e28:	e004      	b.n	8013e34 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8013e2a:	bf00      	nop
 8013e2c:	e002      	b.n	8013e34 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8013e2e:	bf00      	nop
 8013e30:	e000      	b.n	8013e34 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8013e32:	bf00      	nop
	return res;
 8013e34:	7ffb      	ldrb	r3, [r7, #31]
}
 8013e36:	4618      	mov	r0, r3
 8013e38:	3724      	adds	r7, #36	; 0x24
 8013e3a:	46bd      	mov	sp, r7
 8013e3c:	bd90      	pop	{r4, r7, pc}

08013e3e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8013e3e:	b580      	push	{r7, lr}
 8013e40:	b088      	sub	sp, #32
 8013e42:	af00      	add	r7, sp, #0
 8013e44:	60f8      	str	r0, [r7, #12]
 8013e46:	60b9      	str	r1, [r7, #8]
 8013e48:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8013e54:	68bb      	ldr	r3, [r7, #8]
 8013e56:	2b01      	cmp	r3, #1
 8013e58:	d904      	bls.n	8013e64 <remove_chain+0x26>
 8013e5a:	69bb      	ldr	r3, [r7, #24]
 8013e5c:	699b      	ldr	r3, [r3, #24]
 8013e5e:	68ba      	ldr	r2, [r7, #8]
 8013e60:	429a      	cmp	r2, r3
 8013e62:	d301      	bcc.n	8013e68 <remove_chain+0x2a>
 8013e64:	2302      	movs	r3, #2
 8013e66:	e04b      	b.n	8013f00 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d00c      	beq.n	8013e88 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8013e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8013e72:	6879      	ldr	r1, [r7, #4]
 8013e74:	69b8      	ldr	r0, [r7, #24]
 8013e76:	f7ff fef6 	bl	8013c66 <put_fat>
 8013e7a:	4603      	mov	r3, r0
 8013e7c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8013e7e:	7ffb      	ldrb	r3, [r7, #31]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d001      	beq.n	8013e88 <remove_chain+0x4a>
 8013e84:	7ffb      	ldrb	r3, [r7, #31]
 8013e86:	e03b      	b.n	8013f00 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8013e88:	68b9      	ldr	r1, [r7, #8]
 8013e8a:	68f8      	ldr	r0, [r7, #12]
 8013e8c:	f7ff fe43 	bl	8013b16 <get_fat>
 8013e90:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8013e92:	697b      	ldr	r3, [r7, #20]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d031      	beq.n	8013efc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8013e98:	697b      	ldr	r3, [r7, #20]
 8013e9a:	2b01      	cmp	r3, #1
 8013e9c:	d101      	bne.n	8013ea2 <remove_chain+0x64>
 8013e9e:	2302      	movs	r3, #2
 8013ea0:	e02e      	b.n	8013f00 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013ea2:	697b      	ldr	r3, [r7, #20]
 8013ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ea8:	d101      	bne.n	8013eae <remove_chain+0x70>
 8013eaa:	2301      	movs	r3, #1
 8013eac:	e028      	b.n	8013f00 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8013eae:	2200      	movs	r2, #0
 8013eb0:	68b9      	ldr	r1, [r7, #8]
 8013eb2:	69b8      	ldr	r0, [r7, #24]
 8013eb4:	f7ff fed7 	bl	8013c66 <put_fat>
 8013eb8:	4603      	mov	r3, r0
 8013eba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8013ebc:	7ffb      	ldrb	r3, [r7, #31]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d001      	beq.n	8013ec6 <remove_chain+0x88>
 8013ec2:	7ffb      	ldrb	r3, [r7, #31]
 8013ec4:	e01c      	b.n	8013f00 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8013ec6:	69bb      	ldr	r3, [r7, #24]
 8013ec8:	691a      	ldr	r2, [r3, #16]
 8013eca:	69bb      	ldr	r3, [r7, #24]
 8013ecc:	699b      	ldr	r3, [r3, #24]
 8013ece:	3b02      	subs	r3, #2
 8013ed0:	429a      	cmp	r2, r3
 8013ed2:	d20b      	bcs.n	8013eec <remove_chain+0xae>
			fs->free_clst++;
 8013ed4:	69bb      	ldr	r3, [r7, #24]
 8013ed6:	691b      	ldr	r3, [r3, #16]
 8013ed8:	1c5a      	adds	r2, r3, #1
 8013eda:	69bb      	ldr	r3, [r7, #24]
 8013edc:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8013ede:	69bb      	ldr	r3, [r7, #24]
 8013ee0:	791b      	ldrb	r3, [r3, #4]
 8013ee2:	f043 0301 	orr.w	r3, r3, #1
 8013ee6:	b2da      	uxtb	r2, r3
 8013ee8:	69bb      	ldr	r3, [r7, #24]
 8013eea:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8013eec:	697b      	ldr	r3, [r7, #20]
 8013eee:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8013ef0:	69bb      	ldr	r3, [r7, #24]
 8013ef2:	699b      	ldr	r3, [r3, #24]
 8013ef4:	68ba      	ldr	r2, [r7, #8]
 8013ef6:	429a      	cmp	r2, r3
 8013ef8:	d3c6      	bcc.n	8013e88 <remove_chain+0x4a>
 8013efa:	e000      	b.n	8013efe <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8013efc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8013efe:	2300      	movs	r3, #0
}
 8013f00:	4618      	mov	r0, r3
 8013f02:	3720      	adds	r7, #32
 8013f04:	46bd      	mov	sp, r7
 8013f06:	bd80      	pop	{r7, pc}

08013f08 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b088      	sub	sp, #32
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
 8013f10:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8013f18:	683b      	ldr	r3, [r7, #0]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d10d      	bne.n	8013f3a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8013f1e:	693b      	ldr	r3, [r7, #16]
 8013f20:	68db      	ldr	r3, [r3, #12]
 8013f22:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013f24:	69bb      	ldr	r3, [r7, #24]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d004      	beq.n	8013f34 <create_chain+0x2c>
 8013f2a:	693b      	ldr	r3, [r7, #16]
 8013f2c:	699b      	ldr	r3, [r3, #24]
 8013f2e:	69ba      	ldr	r2, [r7, #24]
 8013f30:	429a      	cmp	r2, r3
 8013f32:	d31b      	bcc.n	8013f6c <create_chain+0x64>
 8013f34:	2301      	movs	r3, #1
 8013f36:	61bb      	str	r3, [r7, #24]
 8013f38:	e018      	b.n	8013f6c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8013f3a:	6839      	ldr	r1, [r7, #0]
 8013f3c:	6878      	ldr	r0, [r7, #4]
 8013f3e:	f7ff fdea 	bl	8013b16 <get_fat>
 8013f42:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8013f44:	68fb      	ldr	r3, [r7, #12]
 8013f46:	2b01      	cmp	r3, #1
 8013f48:	d801      	bhi.n	8013f4e <create_chain+0x46>
 8013f4a:	2301      	movs	r3, #1
 8013f4c:	e070      	b.n	8014030 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f54:	d101      	bne.n	8013f5a <create_chain+0x52>
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	e06a      	b.n	8014030 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8013f5a:	693b      	ldr	r3, [r7, #16]
 8013f5c:	699b      	ldr	r3, [r3, #24]
 8013f5e:	68fa      	ldr	r2, [r7, #12]
 8013f60:	429a      	cmp	r2, r3
 8013f62:	d201      	bcs.n	8013f68 <create_chain+0x60>
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	e063      	b.n	8014030 <create_chain+0x128>
		scl = clst;
 8013f68:	683b      	ldr	r3, [r7, #0]
 8013f6a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8013f6c:	69bb      	ldr	r3, [r7, #24]
 8013f6e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8013f70:	69fb      	ldr	r3, [r7, #28]
 8013f72:	3301      	adds	r3, #1
 8013f74:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8013f76:	693b      	ldr	r3, [r7, #16]
 8013f78:	699b      	ldr	r3, [r3, #24]
 8013f7a:	69fa      	ldr	r2, [r7, #28]
 8013f7c:	429a      	cmp	r2, r3
 8013f7e:	d307      	bcc.n	8013f90 <create_chain+0x88>
				ncl = 2;
 8013f80:	2302      	movs	r3, #2
 8013f82:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8013f84:	69fa      	ldr	r2, [r7, #28]
 8013f86:	69bb      	ldr	r3, [r7, #24]
 8013f88:	429a      	cmp	r2, r3
 8013f8a:	d901      	bls.n	8013f90 <create_chain+0x88>
 8013f8c:	2300      	movs	r3, #0
 8013f8e:	e04f      	b.n	8014030 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8013f90:	69f9      	ldr	r1, [r7, #28]
 8013f92:	6878      	ldr	r0, [r7, #4]
 8013f94:	f7ff fdbf 	bl	8013b16 <get_fat>
 8013f98:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d00e      	beq.n	8013fbe <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	2b01      	cmp	r3, #1
 8013fa4:	d003      	beq.n	8013fae <create_chain+0xa6>
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013fac:	d101      	bne.n	8013fb2 <create_chain+0xaa>
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	e03e      	b.n	8014030 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013fb2:	69fa      	ldr	r2, [r7, #28]
 8013fb4:	69bb      	ldr	r3, [r7, #24]
 8013fb6:	429a      	cmp	r2, r3
 8013fb8:	d1da      	bne.n	8013f70 <create_chain+0x68>
 8013fba:	2300      	movs	r3, #0
 8013fbc:	e038      	b.n	8014030 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8013fbe:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8013fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8013fc4:	69f9      	ldr	r1, [r7, #28]
 8013fc6:	6938      	ldr	r0, [r7, #16]
 8013fc8:	f7ff fe4d 	bl	8013c66 <put_fat>
 8013fcc:	4603      	mov	r3, r0
 8013fce:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8013fd0:	7dfb      	ldrb	r3, [r7, #23]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d109      	bne.n	8013fea <create_chain+0xe2>
 8013fd6:	683b      	ldr	r3, [r7, #0]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d006      	beq.n	8013fea <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8013fdc:	69fa      	ldr	r2, [r7, #28]
 8013fde:	6839      	ldr	r1, [r7, #0]
 8013fe0:	6938      	ldr	r0, [r7, #16]
 8013fe2:	f7ff fe40 	bl	8013c66 <put_fat>
 8013fe6:	4603      	mov	r3, r0
 8013fe8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8013fea:	7dfb      	ldrb	r3, [r7, #23]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d116      	bne.n	801401e <create_chain+0x116>
		fs->last_clst = ncl;
 8013ff0:	693b      	ldr	r3, [r7, #16]
 8013ff2:	69fa      	ldr	r2, [r7, #28]
 8013ff4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8013ff6:	693b      	ldr	r3, [r7, #16]
 8013ff8:	691a      	ldr	r2, [r3, #16]
 8013ffa:	693b      	ldr	r3, [r7, #16]
 8013ffc:	699b      	ldr	r3, [r3, #24]
 8013ffe:	3b02      	subs	r3, #2
 8014000:	429a      	cmp	r2, r3
 8014002:	d804      	bhi.n	801400e <create_chain+0x106>
 8014004:	693b      	ldr	r3, [r7, #16]
 8014006:	691b      	ldr	r3, [r3, #16]
 8014008:	1e5a      	subs	r2, r3, #1
 801400a:	693b      	ldr	r3, [r7, #16]
 801400c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 801400e:	693b      	ldr	r3, [r7, #16]
 8014010:	791b      	ldrb	r3, [r3, #4]
 8014012:	f043 0301 	orr.w	r3, r3, #1
 8014016:	b2da      	uxtb	r2, r3
 8014018:	693b      	ldr	r3, [r7, #16]
 801401a:	711a      	strb	r2, [r3, #4]
 801401c:	e007      	b.n	801402e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801401e:	7dfb      	ldrb	r3, [r7, #23]
 8014020:	2b01      	cmp	r3, #1
 8014022:	d102      	bne.n	801402a <create_chain+0x122>
 8014024:	f04f 33ff 	mov.w	r3, #4294967295
 8014028:	e000      	b.n	801402c <create_chain+0x124>
 801402a:	2301      	movs	r3, #1
 801402c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801402e:	69fb      	ldr	r3, [r7, #28]
}
 8014030:	4618      	mov	r0, r3
 8014032:	3720      	adds	r7, #32
 8014034:	46bd      	mov	sp, r7
 8014036:	bd80      	pop	{r7, pc}

08014038 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8014038:	b580      	push	{r7, lr}
 801403a:	b086      	sub	sp, #24
 801403c:	af00      	add	r7, sp, #0
 801403e:	6078      	str	r0, [r7, #4]
 8014040:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8014048:	683b      	ldr	r3, [r7, #0]
 801404a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801404e:	d204      	bcs.n	801405a <dir_sdi+0x22>
 8014050:	683b      	ldr	r3, [r7, #0]
 8014052:	f003 031f 	and.w	r3, r3, #31
 8014056:	2b00      	cmp	r3, #0
 8014058:	d001      	beq.n	801405e <dir_sdi+0x26>
		return FR_INT_ERR;
 801405a:	2302      	movs	r3, #2
 801405c:	e063      	b.n	8014126 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	683a      	ldr	r2, [r7, #0]
 8014062:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	689b      	ldr	r3, [r3, #8]
 8014068:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801406a:	697b      	ldr	r3, [r7, #20]
 801406c:	2b00      	cmp	r3, #0
 801406e:	d106      	bne.n	801407e <dir_sdi+0x46>
 8014070:	693b      	ldr	r3, [r7, #16]
 8014072:	781b      	ldrb	r3, [r3, #0]
 8014074:	2b02      	cmp	r3, #2
 8014076:	d902      	bls.n	801407e <dir_sdi+0x46>
		clst = fs->dirbase;
 8014078:	693b      	ldr	r3, [r7, #16]
 801407a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801407c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801407e:	697b      	ldr	r3, [r7, #20]
 8014080:	2b00      	cmp	r3, #0
 8014082:	d10c      	bne.n	801409e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8014084:	683b      	ldr	r3, [r7, #0]
 8014086:	095b      	lsrs	r3, r3, #5
 8014088:	693a      	ldr	r2, [r7, #16]
 801408a:	8912      	ldrh	r2, [r2, #8]
 801408c:	4293      	cmp	r3, r2
 801408e:	d301      	bcc.n	8014094 <dir_sdi+0x5c>
 8014090:	2302      	movs	r3, #2
 8014092:	e048      	b.n	8014126 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8014094:	693b      	ldr	r3, [r7, #16]
 8014096:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	61da      	str	r2, [r3, #28]
 801409c:	e029      	b.n	80140f2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801409e:	693b      	ldr	r3, [r7, #16]
 80140a0:	895b      	ldrh	r3, [r3, #10]
 80140a2:	025b      	lsls	r3, r3, #9
 80140a4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80140a6:	e019      	b.n	80140dc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	6979      	ldr	r1, [r7, #20]
 80140ac:	4618      	mov	r0, r3
 80140ae:	f7ff fd32 	bl	8013b16 <get_fat>
 80140b2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80140b4:	697b      	ldr	r3, [r7, #20]
 80140b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140ba:	d101      	bne.n	80140c0 <dir_sdi+0x88>
 80140bc:	2301      	movs	r3, #1
 80140be:	e032      	b.n	8014126 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80140c0:	697b      	ldr	r3, [r7, #20]
 80140c2:	2b01      	cmp	r3, #1
 80140c4:	d904      	bls.n	80140d0 <dir_sdi+0x98>
 80140c6:	693b      	ldr	r3, [r7, #16]
 80140c8:	699b      	ldr	r3, [r3, #24]
 80140ca:	697a      	ldr	r2, [r7, #20]
 80140cc:	429a      	cmp	r2, r3
 80140ce:	d301      	bcc.n	80140d4 <dir_sdi+0x9c>
 80140d0:	2302      	movs	r3, #2
 80140d2:	e028      	b.n	8014126 <dir_sdi+0xee>
			ofs -= csz;
 80140d4:	683a      	ldr	r2, [r7, #0]
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	1ad3      	subs	r3, r2, r3
 80140da:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80140dc:	683a      	ldr	r2, [r7, #0]
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	429a      	cmp	r2, r3
 80140e2:	d2e1      	bcs.n	80140a8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80140e4:	6979      	ldr	r1, [r7, #20]
 80140e6:	6938      	ldr	r0, [r7, #16]
 80140e8:	f7ff fcf6 	bl	8013ad8 <clust2sect>
 80140ec:	4602      	mov	r2, r0
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	697a      	ldr	r2, [r7, #20]
 80140f6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	69db      	ldr	r3, [r3, #28]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d101      	bne.n	8014104 <dir_sdi+0xcc>
 8014100:	2302      	movs	r3, #2
 8014102:	e010      	b.n	8014126 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	69da      	ldr	r2, [r3, #28]
 8014108:	683b      	ldr	r3, [r7, #0]
 801410a:	0a5b      	lsrs	r3, r3, #9
 801410c:	441a      	add	r2, r3
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8014112:	693b      	ldr	r3, [r7, #16]
 8014114:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014118:	683b      	ldr	r3, [r7, #0]
 801411a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801411e:	441a      	add	r2, r3
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8014124:	2300      	movs	r3, #0
}
 8014126:	4618      	mov	r0, r3
 8014128:	3718      	adds	r7, #24
 801412a:	46bd      	mov	sp, r7
 801412c:	bd80      	pop	{r7, pc}

0801412e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801412e:	b580      	push	{r7, lr}
 8014130:	b086      	sub	sp, #24
 8014132:	af00      	add	r7, sp, #0
 8014134:	6078      	str	r0, [r7, #4]
 8014136:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	695b      	ldr	r3, [r3, #20]
 8014142:	3320      	adds	r3, #32
 8014144:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	69db      	ldr	r3, [r3, #28]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d003      	beq.n	8014156 <dir_next+0x28>
 801414e:	68bb      	ldr	r3, [r7, #8]
 8014150:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8014154:	d301      	bcc.n	801415a <dir_next+0x2c>
 8014156:	2304      	movs	r3, #4
 8014158:	e0aa      	b.n	80142b0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801415a:	68bb      	ldr	r3, [r7, #8]
 801415c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014160:	2b00      	cmp	r3, #0
 8014162:	f040 8098 	bne.w	8014296 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	69db      	ldr	r3, [r3, #28]
 801416a:	1c5a      	adds	r2, r3, #1
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	699b      	ldr	r3, [r3, #24]
 8014174:	2b00      	cmp	r3, #0
 8014176:	d10b      	bne.n	8014190 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8014178:	68bb      	ldr	r3, [r7, #8]
 801417a:	095b      	lsrs	r3, r3, #5
 801417c:	68fa      	ldr	r2, [r7, #12]
 801417e:	8912      	ldrh	r2, [r2, #8]
 8014180:	4293      	cmp	r3, r2
 8014182:	f0c0 8088 	bcc.w	8014296 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	2200      	movs	r2, #0
 801418a:	61da      	str	r2, [r3, #28]
 801418c:	2304      	movs	r3, #4
 801418e:	e08f      	b.n	80142b0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8014190:	68bb      	ldr	r3, [r7, #8]
 8014192:	0a5b      	lsrs	r3, r3, #9
 8014194:	68fa      	ldr	r2, [r7, #12]
 8014196:	8952      	ldrh	r2, [r2, #10]
 8014198:	3a01      	subs	r2, #1
 801419a:	4013      	ands	r3, r2
 801419c:	2b00      	cmp	r3, #0
 801419e:	d17a      	bne.n	8014296 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80141a0:	687a      	ldr	r2, [r7, #4]
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	699b      	ldr	r3, [r3, #24]
 80141a6:	4619      	mov	r1, r3
 80141a8:	4610      	mov	r0, r2
 80141aa:	f7ff fcb4 	bl	8013b16 <get_fat>
 80141ae:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80141b0:	697b      	ldr	r3, [r7, #20]
 80141b2:	2b01      	cmp	r3, #1
 80141b4:	d801      	bhi.n	80141ba <dir_next+0x8c>
 80141b6:	2302      	movs	r3, #2
 80141b8:	e07a      	b.n	80142b0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80141ba:	697b      	ldr	r3, [r7, #20]
 80141bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141c0:	d101      	bne.n	80141c6 <dir_next+0x98>
 80141c2:	2301      	movs	r3, #1
 80141c4:	e074      	b.n	80142b0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	699b      	ldr	r3, [r3, #24]
 80141ca:	697a      	ldr	r2, [r7, #20]
 80141cc:	429a      	cmp	r2, r3
 80141ce:	d358      	bcc.n	8014282 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80141d0:	683b      	ldr	r3, [r7, #0]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d104      	bne.n	80141e0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	2200      	movs	r2, #0
 80141da:	61da      	str	r2, [r3, #28]
 80141dc:	2304      	movs	r3, #4
 80141de:	e067      	b.n	80142b0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80141e0:	687a      	ldr	r2, [r7, #4]
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	699b      	ldr	r3, [r3, #24]
 80141e6:	4619      	mov	r1, r3
 80141e8:	4610      	mov	r0, r2
 80141ea:	f7ff fe8d 	bl	8013f08 <create_chain>
 80141ee:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80141f0:	697b      	ldr	r3, [r7, #20]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d101      	bne.n	80141fa <dir_next+0xcc>
 80141f6:	2307      	movs	r3, #7
 80141f8:	e05a      	b.n	80142b0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80141fa:	697b      	ldr	r3, [r7, #20]
 80141fc:	2b01      	cmp	r3, #1
 80141fe:	d101      	bne.n	8014204 <dir_next+0xd6>
 8014200:	2302      	movs	r3, #2
 8014202:	e055      	b.n	80142b0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014204:	697b      	ldr	r3, [r7, #20]
 8014206:	f1b3 3fff 	cmp.w	r3, #4294967295
 801420a:	d101      	bne.n	8014210 <dir_next+0xe2>
 801420c:	2301      	movs	r3, #1
 801420e:	e04f      	b.n	80142b0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8014210:	68f8      	ldr	r0, [r7, #12]
 8014212:	f7ff fb81 	bl	8013918 <sync_window>
 8014216:	4603      	mov	r3, r0
 8014218:	2b00      	cmp	r3, #0
 801421a:	d001      	beq.n	8014220 <dir_next+0xf2>
 801421c:	2301      	movs	r3, #1
 801421e:	e047      	b.n	80142b0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	3334      	adds	r3, #52	; 0x34
 8014224:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014228:	2100      	movs	r1, #0
 801422a:	4618      	mov	r0, r3
 801422c:	f7ff faf3 	bl	8013816 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8014230:	2300      	movs	r3, #0
 8014232:	613b      	str	r3, [r7, #16]
 8014234:	6979      	ldr	r1, [r7, #20]
 8014236:	68f8      	ldr	r0, [r7, #12]
 8014238:	f7ff fc4e 	bl	8013ad8 <clust2sect>
 801423c:	4602      	mov	r2, r0
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	631a      	str	r2, [r3, #48]	; 0x30
 8014242:	e012      	b.n	801426a <dir_next+0x13c>
						fs->wflag = 1;
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	2201      	movs	r2, #1
 8014248:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801424a:	68f8      	ldr	r0, [r7, #12]
 801424c:	f7ff fb64 	bl	8013918 <sync_window>
 8014250:	4603      	mov	r3, r0
 8014252:	2b00      	cmp	r3, #0
 8014254:	d001      	beq.n	801425a <dir_next+0x12c>
 8014256:	2301      	movs	r3, #1
 8014258:	e02a      	b.n	80142b0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801425a:	693b      	ldr	r3, [r7, #16]
 801425c:	3301      	adds	r3, #1
 801425e:	613b      	str	r3, [r7, #16]
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014264:	1c5a      	adds	r2, r3, #1
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	631a      	str	r2, [r3, #48]	; 0x30
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	895b      	ldrh	r3, [r3, #10]
 801426e:	461a      	mov	r2, r3
 8014270:	693b      	ldr	r3, [r7, #16]
 8014272:	4293      	cmp	r3, r2
 8014274:	d3e6      	bcc.n	8014244 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801427a:	693b      	ldr	r3, [r7, #16]
 801427c:	1ad2      	subs	r2, r2, r3
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	697a      	ldr	r2, [r7, #20]
 8014286:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8014288:	6979      	ldr	r1, [r7, #20]
 801428a:	68f8      	ldr	r0, [r7, #12]
 801428c:	f7ff fc24 	bl	8013ad8 <clust2sect>
 8014290:	4602      	mov	r2, r0
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	68ba      	ldr	r2, [r7, #8]
 801429a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80142a2:	68bb      	ldr	r3, [r7, #8]
 80142a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80142a8:	441a      	add	r2, r3
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80142ae:	2300      	movs	r3, #0
}
 80142b0:	4618      	mov	r0, r3
 80142b2:	3718      	adds	r7, #24
 80142b4:	46bd      	mov	sp, r7
 80142b6:	bd80      	pop	{r7, pc}

080142b8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80142b8:	b580      	push	{r7, lr}
 80142ba:	b086      	sub	sp, #24
 80142bc:	af00      	add	r7, sp, #0
 80142be:	6078      	str	r0, [r7, #4]
 80142c0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80142c8:	2100      	movs	r1, #0
 80142ca:	6878      	ldr	r0, [r7, #4]
 80142cc:	f7ff feb4 	bl	8014038 <dir_sdi>
 80142d0:	4603      	mov	r3, r0
 80142d2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80142d4:	7dfb      	ldrb	r3, [r7, #23]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d12b      	bne.n	8014332 <dir_alloc+0x7a>
		n = 0;
 80142da:	2300      	movs	r3, #0
 80142dc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	69db      	ldr	r3, [r3, #28]
 80142e2:	4619      	mov	r1, r3
 80142e4:	68f8      	ldr	r0, [r7, #12]
 80142e6:	f7ff fb5b 	bl	80139a0 <move_window>
 80142ea:	4603      	mov	r3, r0
 80142ec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80142ee:	7dfb      	ldrb	r3, [r7, #23]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d11d      	bne.n	8014330 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	6a1b      	ldr	r3, [r3, #32]
 80142f8:	781b      	ldrb	r3, [r3, #0]
 80142fa:	2be5      	cmp	r3, #229	; 0xe5
 80142fc:	d004      	beq.n	8014308 <dir_alloc+0x50>
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	6a1b      	ldr	r3, [r3, #32]
 8014302:	781b      	ldrb	r3, [r3, #0]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d107      	bne.n	8014318 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8014308:	693b      	ldr	r3, [r7, #16]
 801430a:	3301      	adds	r3, #1
 801430c:	613b      	str	r3, [r7, #16]
 801430e:	693a      	ldr	r2, [r7, #16]
 8014310:	683b      	ldr	r3, [r7, #0]
 8014312:	429a      	cmp	r2, r3
 8014314:	d102      	bne.n	801431c <dir_alloc+0x64>
 8014316:	e00c      	b.n	8014332 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8014318:	2300      	movs	r3, #0
 801431a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801431c:	2101      	movs	r1, #1
 801431e:	6878      	ldr	r0, [r7, #4]
 8014320:	f7ff ff05 	bl	801412e <dir_next>
 8014324:	4603      	mov	r3, r0
 8014326:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8014328:	7dfb      	ldrb	r3, [r7, #23]
 801432a:	2b00      	cmp	r3, #0
 801432c:	d0d7      	beq.n	80142de <dir_alloc+0x26>
 801432e:	e000      	b.n	8014332 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8014330:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8014332:	7dfb      	ldrb	r3, [r7, #23]
 8014334:	2b04      	cmp	r3, #4
 8014336:	d101      	bne.n	801433c <dir_alloc+0x84>
 8014338:	2307      	movs	r3, #7
 801433a:	75fb      	strb	r3, [r7, #23]
	return res;
 801433c:	7dfb      	ldrb	r3, [r7, #23]
}
 801433e:	4618      	mov	r0, r3
 8014340:	3718      	adds	r7, #24
 8014342:	46bd      	mov	sp, r7
 8014344:	bd80      	pop	{r7, pc}

08014346 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8014346:	b580      	push	{r7, lr}
 8014348:	b084      	sub	sp, #16
 801434a:	af00      	add	r7, sp, #0
 801434c:	6078      	str	r0, [r7, #4]
 801434e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8014350:	683b      	ldr	r3, [r7, #0]
 8014352:	331a      	adds	r3, #26
 8014354:	4618      	mov	r0, r3
 8014356:	f7ff f9bb 	bl	80136d0 <ld_word>
 801435a:	4603      	mov	r3, r0
 801435c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	781b      	ldrb	r3, [r3, #0]
 8014362:	2b03      	cmp	r3, #3
 8014364:	d109      	bne.n	801437a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8014366:	683b      	ldr	r3, [r7, #0]
 8014368:	3314      	adds	r3, #20
 801436a:	4618      	mov	r0, r3
 801436c:	f7ff f9b0 	bl	80136d0 <ld_word>
 8014370:	4603      	mov	r3, r0
 8014372:	041b      	lsls	r3, r3, #16
 8014374:	68fa      	ldr	r2, [r7, #12]
 8014376:	4313      	orrs	r3, r2
 8014378:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801437a:	68fb      	ldr	r3, [r7, #12]
}
 801437c:	4618      	mov	r0, r3
 801437e:	3710      	adds	r7, #16
 8014380:	46bd      	mov	sp, r7
 8014382:	bd80      	pop	{r7, pc}

08014384 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8014384:	b580      	push	{r7, lr}
 8014386:	b084      	sub	sp, #16
 8014388:	af00      	add	r7, sp, #0
 801438a:	60f8      	str	r0, [r7, #12]
 801438c:	60b9      	str	r1, [r7, #8]
 801438e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8014390:	68bb      	ldr	r3, [r7, #8]
 8014392:	331a      	adds	r3, #26
 8014394:	687a      	ldr	r2, [r7, #4]
 8014396:	b292      	uxth	r2, r2
 8014398:	4611      	mov	r1, r2
 801439a:	4618      	mov	r0, r3
 801439c:	f7ff f9d3 	bl	8013746 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	781b      	ldrb	r3, [r3, #0]
 80143a4:	2b03      	cmp	r3, #3
 80143a6:	d109      	bne.n	80143bc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80143a8:	68bb      	ldr	r3, [r7, #8]
 80143aa:	f103 0214 	add.w	r2, r3, #20
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	0c1b      	lsrs	r3, r3, #16
 80143b2:	b29b      	uxth	r3, r3
 80143b4:	4619      	mov	r1, r3
 80143b6:	4610      	mov	r0, r2
 80143b8:	f7ff f9c5 	bl	8013746 <st_word>
	}
}
 80143bc:	bf00      	nop
 80143be:	3710      	adds	r7, #16
 80143c0:	46bd      	mov	sp, r7
 80143c2:	bd80      	pop	{r7, pc}

080143c4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80143c4:	b580      	push	{r7, lr}
 80143c6:	b086      	sub	sp, #24
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80143d2:	2100      	movs	r1, #0
 80143d4:	6878      	ldr	r0, [r7, #4]
 80143d6:	f7ff fe2f 	bl	8014038 <dir_sdi>
 80143da:	4603      	mov	r3, r0
 80143dc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80143de:	7dfb      	ldrb	r3, [r7, #23]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d001      	beq.n	80143e8 <dir_find+0x24>
 80143e4:	7dfb      	ldrb	r3, [r7, #23]
 80143e6:	e03e      	b.n	8014466 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	69db      	ldr	r3, [r3, #28]
 80143ec:	4619      	mov	r1, r3
 80143ee:	6938      	ldr	r0, [r7, #16]
 80143f0:	f7ff fad6 	bl	80139a0 <move_window>
 80143f4:	4603      	mov	r3, r0
 80143f6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80143f8:	7dfb      	ldrb	r3, [r7, #23]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d12f      	bne.n	801445e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	6a1b      	ldr	r3, [r3, #32]
 8014402:	781b      	ldrb	r3, [r3, #0]
 8014404:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8014406:	7bfb      	ldrb	r3, [r7, #15]
 8014408:	2b00      	cmp	r3, #0
 801440a:	d102      	bne.n	8014412 <dir_find+0x4e>
 801440c:	2304      	movs	r3, #4
 801440e:	75fb      	strb	r3, [r7, #23]
 8014410:	e028      	b.n	8014464 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	6a1b      	ldr	r3, [r3, #32]
 8014416:	330b      	adds	r3, #11
 8014418:	781b      	ldrb	r3, [r3, #0]
 801441a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801441e:	b2da      	uxtb	r2, r3
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	6a1b      	ldr	r3, [r3, #32]
 8014428:	330b      	adds	r3, #11
 801442a:	781b      	ldrb	r3, [r3, #0]
 801442c:	f003 0308 	and.w	r3, r3, #8
 8014430:	2b00      	cmp	r3, #0
 8014432:	d10a      	bne.n	801444a <dir_find+0x86>
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	6a18      	ldr	r0, [r3, #32]
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	3324      	adds	r3, #36	; 0x24
 801443c:	220b      	movs	r2, #11
 801443e:	4619      	mov	r1, r3
 8014440:	f7ff fa04 	bl	801384c <mem_cmp>
 8014444:	4603      	mov	r3, r0
 8014446:	2b00      	cmp	r3, #0
 8014448:	d00b      	beq.n	8014462 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801444a:	2100      	movs	r1, #0
 801444c:	6878      	ldr	r0, [r7, #4]
 801444e:	f7ff fe6e 	bl	801412e <dir_next>
 8014452:	4603      	mov	r3, r0
 8014454:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8014456:	7dfb      	ldrb	r3, [r7, #23]
 8014458:	2b00      	cmp	r3, #0
 801445a:	d0c5      	beq.n	80143e8 <dir_find+0x24>
 801445c:	e002      	b.n	8014464 <dir_find+0xa0>
		if (res != FR_OK) break;
 801445e:	bf00      	nop
 8014460:	e000      	b.n	8014464 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8014462:	bf00      	nop

	return res;
 8014464:	7dfb      	ldrb	r3, [r7, #23]
}
 8014466:	4618      	mov	r0, r3
 8014468:	3718      	adds	r7, #24
 801446a:	46bd      	mov	sp, r7
 801446c:	bd80      	pop	{r7, pc}

0801446e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801446e:	b580      	push	{r7, lr}
 8014470:	b084      	sub	sp, #16
 8014472:	af00      	add	r7, sp, #0
 8014474:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801447c:	2101      	movs	r1, #1
 801447e:	6878      	ldr	r0, [r7, #4]
 8014480:	f7ff ff1a 	bl	80142b8 <dir_alloc>
 8014484:	4603      	mov	r3, r0
 8014486:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8014488:	7bfb      	ldrb	r3, [r7, #15]
 801448a:	2b00      	cmp	r3, #0
 801448c:	d11c      	bne.n	80144c8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	69db      	ldr	r3, [r3, #28]
 8014492:	4619      	mov	r1, r3
 8014494:	68b8      	ldr	r0, [r7, #8]
 8014496:	f7ff fa83 	bl	80139a0 <move_window>
 801449a:	4603      	mov	r3, r0
 801449c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801449e:	7bfb      	ldrb	r3, [r7, #15]
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d111      	bne.n	80144c8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	6a1b      	ldr	r3, [r3, #32]
 80144a8:	2220      	movs	r2, #32
 80144aa:	2100      	movs	r1, #0
 80144ac:	4618      	mov	r0, r3
 80144ae:	f7ff f9b2 	bl	8013816 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	6a18      	ldr	r0, [r3, #32]
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	3324      	adds	r3, #36	; 0x24
 80144ba:	220b      	movs	r2, #11
 80144bc:	4619      	mov	r1, r3
 80144be:	f7ff f989 	bl	80137d4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80144c2:	68bb      	ldr	r3, [r7, #8]
 80144c4:	2201      	movs	r2, #1
 80144c6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80144c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80144ca:	4618      	mov	r0, r3
 80144cc:	3710      	adds	r7, #16
 80144ce:	46bd      	mov	sp, r7
 80144d0:	bd80      	pop	{r7, pc}
	...

080144d4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80144d4:	b580      	push	{r7, lr}
 80144d6:	b088      	sub	sp, #32
 80144d8:	af00      	add	r7, sp, #0
 80144da:	6078      	str	r0, [r7, #4]
 80144dc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80144de:	683b      	ldr	r3, [r7, #0]
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	60fb      	str	r3, [r7, #12]
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	3324      	adds	r3, #36	; 0x24
 80144e8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80144ea:	220b      	movs	r2, #11
 80144ec:	2120      	movs	r1, #32
 80144ee:	68b8      	ldr	r0, [r7, #8]
 80144f0:	f7ff f991 	bl	8013816 <mem_set>
	si = i = 0; ni = 8;
 80144f4:	2300      	movs	r3, #0
 80144f6:	613b      	str	r3, [r7, #16]
 80144f8:	693b      	ldr	r3, [r7, #16]
 80144fa:	61fb      	str	r3, [r7, #28]
 80144fc:	2308      	movs	r3, #8
 80144fe:	617b      	str	r3, [r7, #20]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8014500:	68fa      	ldr	r2, [r7, #12]
 8014502:	69fb      	ldr	r3, [r7, #28]
 8014504:	4413      	add	r3, r2
 8014506:	781b      	ldrb	r3, [r3, #0]
 8014508:	2b2e      	cmp	r3, #46	; 0x2e
 801450a:	d12f      	bne.n	801456c <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 801450c:	69fb      	ldr	r3, [r7, #28]
 801450e:	1c5a      	adds	r2, r3, #1
 8014510:	61fa      	str	r2, [r7, #28]
 8014512:	68fa      	ldr	r2, [r7, #12]
 8014514:	4413      	add	r3, r2
 8014516:	781b      	ldrb	r3, [r3, #0]
 8014518:	76fb      	strb	r3, [r7, #27]
			if (c != '.' || si >= 3) break;
 801451a:	7efb      	ldrb	r3, [r7, #27]
 801451c:	2b2e      	cmp	r3, #46	; 0x2e
 801451e:	d10a      	bne.n	8014536 <create_name+0x62>
 8014520:	69fb      	ldr	r3, [r7, #28]
 8014522:	2b02      	cmp	r3, #2
 8014524:	d807      	bhi.n	8014536 <create_name+0x62>
			sfn[i++] = c;
 8014526:	693b      	ldr	r3, [r7, #16]
 8014528:	1c5a      	adds	r2, r3, #1
 801452a:	613a      	str	r2, [r7, #16]
 801452c:	68ba      	ldr	r2, [r7, #8]
 801452e:	4413      	add	r3, r2
 8014530:	7efa      	ldrb	r2, [r7, #27]
 8014532:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8014534:	e7ea      	b.n	801450c <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8014536:	7efb      	ldrb	r3, [r7, #27]
 8014538:	2b2f      	cmp	r3, #47	; 0x2f
 801453a:	d007      	beq.n	801454c <create_name+0x78>
 801453c:	7efb      	ldrb	r3, [r7, #27]
 801453e:	2b5c      	cmp	r3, #92	; 0x5c
 8014540:	d004      	beq.n	801454c <create_name+0x78>
 8014542:	7efb      	ldrb	r3, [r7, #27]
 8014544:	2b20      	cmp	r3, #32
 8014546:	d901      	bls.n	801454c <create_name+0x78>
 8014548:	2306      	movs	r3, #6
 801454a:	e084      	b.n	8014656 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 801454c:	68fa      	ldr	r2, [r7, #12]
 801454e:	69fb      	ldr	r3, [r7, #28]
 8014550:	441a      	add	r2, r3
 8014552:	683b      	ldr	r3, [r7, #0]
 8014554:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8014556:	7efb      	ldrb	r3, [r7, #27]
 8014558:	2b20      	cmp	r3, #32
 801455a:	d801      	bhi.n	8014560 <create_name+0x8c>
 801455c:	2224      	movs	r2, #36	; 0x24
 801455e:	e000      	b.n	8014562 <create_name+0x8e>
 8014560:	2220      	movs	r2, #32
 8014562:	68bb      	ldr	r3, [r7, #8]
 8014564:	330b      	adds	r3, #11
 8014566:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8014568:	2300      	movs	r3, #0
 801456a:	e074      	b.n	8014656 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801456c:	69fb      	ldr	r3, [r7, #28]
 801456e:	1c5a      	adds	r2, r3, #1
 8014570:	61fa      	str	r2, [r7, #28]
 8014572:	68fa      	ldr	r2, [r7, #12]
 8014574:	4413      	add	r3, r2
 8014576:	781b      	ldrb	r3, [r3, #0]
 8014578:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801457a:	7efb      	ldrb	r3, [r7, #27]
 801457c:	2b20      	cmp	r3, #32
 801457e:	d94e      	bls.n	801461e <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8014580:	7efb      	ldrb	r3, [r7, #27]
 8014582:	2b2f      	cmp	r3, #47	; 0x2f
 8014584:	d006      	beq.n	8014594 <create_name+0xc0>
 8014586:	7efb      	ldrb	r3, [r7, #27]
 8014588:	2b5c      	cmp	r3, #92	; 0x5c
 801458a:	d110      	bne.n	80145ae <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801458c:	e002      	b.n	8014594 <create_name+0xc0>
 801458e:	69fb      	ldr	r3, [r7, #28]
 8014590:	3301      	adds	r3, #1
 8014592:	61fb      	str	r3, [r7, #28]
 8014594:	68fa      	ldr	r2, [r7, #12]
 8014596:	69fb      	ldr	r3, [r7, #28]
 8014598:	4413      	add	r3, r2
 801459a:	781b      	ldrb	r3, [r3, #0]
 801459c:	2b2f      	cmp	r3, #47	; 0x2f
 801459e:	d0f6      	beq.n	801458e <create_name+0xba>
 80145a0:	68fa      	ldr	r2, [r7, #12]
 80145a2:	69fb      	ldr	r3, [r7, #28]
 80145a4:	4413      	add	r3, r2
 80145a6:	781b      	ldrb	r3, [r3, #0]
 80145a8:	2b5c      	cmp	r3, #92	; 0x5c
 80145aa:	d0f0      	beq.n	801458e <create_name+0xba>
			break;
 80145ac:	e038      	b.n	8014620 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80145ae:	7efb      	ldrb	r3, [r7, #27]
 80145b0:	2b2e      	cmp	r3, #46	; 0x2e
 80145b2:	d003      	beq.n	80145bc <create_name+0xe8>
 80145b4:	693a      	ldr	r2, [r7, #16]
 80145b6:	697b      	ldr	r3, [r7, #20]
 80145b8:	429a      	cmp	r2, r3
 80145ba:	d30c      	bcc.n	80145d6 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80145bc:	697b      	ldr	r3, [r7, #20]
 80145be:	2b0b      	cmp	r3, #11
 80145c0:	d002      	beq.n	80145c8 <create_name+0xf4>
 80145c2:	7efb      	ldrb	r3, [r7, #27]
 80145c4:	2b2e      	cmp	r3, #46	; 0x2e
 80145c6:	d001      	beq.n	80145cc <create_name+0xf8>
 80145c8:	2306      	movs	r3, #6
 80145ca:	e044      	b.n	8014656 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 80145cc:	2308      	movs	r3, #8
 80145ce:	613b      	str	r3, [r7, #16]
 80145d0:	230b      	movs	r3, #11
 80145d2:	617b      	str	r3, [r7, #20]
			continue;
 80145d4:	e022      	b.n	801461c <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 80145d6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	da04      	bge.n	80145e8 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80145de:	7efb      	ldrb	r3, [r7, #27]
 80145e0:	3b80      	subs	r3, #128	; 0x80
 80145e2:	4a1f      	ldr	r2, [pc, #124]	; (8014660 <create_name+0x18c>)
 80145e4:	5cd3      	ldrb	r3, [r2, r3]
 80145e6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80145e8:	7efb      	ldrb	r3, [r7, #27]
 80145ea:	4619      	mov	r1, r3
 80145ec:	481d      	ldr	r0, [pc, #116]	; (8014664 <create_name+0x190>)
 80145ee:	f7ff f954 	bl	801389a <chk_chr>
 80145f2:	4603      	mov	r3, r0
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d001      	beq.n	80145fc <create_name+0x128>
 80145f8:	2306      	movs	r3, #6
 80145fa:	e02c      	b.n	8014656 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80145fc:	7efb      	ldrb	r3, [r7, #27]
 80145fe:	2b60      	cmp	r3, #96	; 0x60
 8014600:	d905      	bls.n	801460e <create_name+0x13a>
 8014602:	7efb      	ldrb	r3, [r7, #27]
 8014604:	2b7a      	cmp	r3, #122	; 0x7a
 8014606:	d802      	bhi.n	801460e <create_name+0x13a>
 8014608:	7efb      	ldrb	r3, [r7, #27]
 801460a:	3b20      	subs	r3, #32
 801460c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801460e:	693b      	ldr	r3, [r7, #16]
 8014610:	1c5a      	adds	r2, r3, #1
 8014612:	613a      	str	r2, [r7, #16]
 8014614:	68ba      	ldr	r2, [r7, #8]
 8014616:	4413      	add	r3, r2
 8014618:	7efa      	ldrb	r2, [r7, #27]
 801461a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801461c:	e7a6      	b.n	801456c <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801461e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8014620:	68fa      	ldr	r2, [r7, #12]
 8014622:	69fb      	ldr	r3, [r7, #28]
 8014624:	441a      	add	r2, r3
 8014626:	683b      	ldr	r3, [r7, #0]
 8014628:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801462a:	693b      	ldr	r3, [r7, #16]
 801462c:	2b00      	cmp	r3, #0
 801462e:	d101      	bne.n	8014634 <create_name+0x160>
 8014630:	2306      	movs	r3, #6
 8014632:	e010      	b.n	8014656 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8014634:	68bb      	ldr	r3, [r7, #8]
 8014636:	781b      	ldrb	r3, [r3, #0]
 8014638:	2be5      	cmp	r3, #229	; 0xe5
 801463a:	d102      	bne.n	8014642 <create_name+0x16e>
 801463c:	68bb      	ldr	r3, [r7, #8]
 801463e:	2205      	movs	r2, #5
 8014640:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8014642:	7efb      	ldrb	r3, [r7, #27]
 8014644:	2b20      	cmp	r3, #32
 8014646:	d801      	bhi.n	801464c <create_name+0x178>
 8014648:	2204      	movs	r2, #4
 801464a:	e000      	b.n	801464e <create_name+0x17a>
 801464c:	2200      	movs	r2, #0
 801464e:	68bb      	ldr	r3, [r7, #8]
 8014650:	330b      	adds	r3, #11
 8014652:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8014654:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8014656:	4618      	mov	r0, r3
 8014658:	3720      	adds	r7, #32
 801465a:	46bd      	mov	sp, r7
 801465c:	bd80      	pop	{r7, pc}
 801465e:	bf00      	nop
 8014660:	08025d70 	.word	0x08025d70
 8014664:	08023f1c 	.word	0x08023f1c

08014668 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b086      	sub	sp, #24
 801466c:	af00      	add	r7, sp, #0
 801466e:	6078      	str	r0, [r7, #4]
 8014670:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8014676:	693b      	ldr	r3, [r7, #16]
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 801467c:	683b      	ldr	r3, [r7, #0]
 801467e:	781b      	ldrb	r3, [r3, #0]
 8014680:	2b2f      	cmp	r3, #47	; 0x2f
 8014682:	d00b      	beq.n	801469c <follow_path+0x34>
 8014684:	683b      	ldr	r3, [r7, #0]
 8014686:	781b      	ldrb	r3, [r3, #0]
 8014688:	2b5c      	cmp	r3, #92	; 0x5c
 801468a:	d007      	beq.n	801469c <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	695a      	ldr	r2, [r3, #20]
 8014690:	693b      	ldr	r3, [r7, #16]
 8014692:	609a      	str	r2, [r3, #8]
 8014694:	e00d      	b.n	80146b2 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8014696:	683b      	ldr	r3, [r7, #0]
 8014698:	3301      	adds	r3, #1
 801469a:	603b      	str	r3, [r7, #0]
 801469c:	683b      	ldr	r3, [r7, #0]
 801469e:	781b      	ldrb	r3, [r3, #0]
 80146a0:	2b2f      	cmp	r3, #47	; 0x2f
 80146a2:	d0f8      	beq.n	8014696 <follow_path+0x2e>
 80146a4:	683b      	ldr	r3, [r7, #0]
 80146a6:	781b      	ldrb	r3, [r3, #0]
 80146a8:	2b5c      	cmp	r3, #92	; 0x5c
 80146aa:	d0f4      	beq.n	8014696 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 80146ac:	693b      	ldr	r3, [r7, #16]
 80146ae:	2200      	movs	r2, #0
 80146b0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80146b2:	683b      	ldr	r3, [r7, #0]
 80146b4:	781b      	ldrb	r3, [r3, #0]
 80146b6:	2b1f      	cmp	r3, #31
 80146b8:	d80a      	bhi.n	80146d0 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	2280      	movs	r2, #128	; 0x80
 80146be:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80146c2:	2100      	movs	r1, #0
 80146c4:	6878      	ldr	r0, [r7, #4]
 80146c6:	f7ff fcb7 	bl	8014038 <dir_sdi>
 80146ca:	4603      	mov	r3, r0
 80146cc:	75fb      	strb	r3, [r7, #23]
 80146ce:	e056      	b.n	801477e <follow_path+0x116>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80146d0:	463b      	mov	r3, r7
 80146d2:	4619      	mov	r1, r3
 80146d4:	6878      	ldr	r0, [r7, #4]
 80146d6:	f7ff fefd 	bl	80144d4 <create_name>
 80146da:	4603      	mov	r3, r0
 80146dc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80146de:	7dfb      	ldrb	r3, [r7, #23]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d147      	bne.n	8014774 <follow_path+0x10c>
			res = dir_find(dp);				/* Find an object with the segment name */
 80146e4:	6878      	ldr	r0, [r7, #4]
 80146e6:	f7ff fe6d 	bl	80143c4 <dir_find>
 80146ea:	4603      	mov	r3, r0
 80146ec:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80146f4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80146f6:	7dfb      	ldrb	r3, [r7, #23]
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d01b      	beq.n	8014734 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80146fc:	7dfb      	ldrb	r3, [r7, #23]
 80146fe:	2b04      	cmp	r3, #4
 8014700:	d13a      	bne.n	8014778 <follow_path+0x110>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8014702:	7afb      	ldrb	r3, [r7, #11]
 8014704:	f003 0320 	and.w	r3, r3, #32
 8014708:	2b00      	cmp	r3, #0
 801470a:	d00b      	beq.n	8014724 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 801470c:	7afb      	ldrb	r3, [r7, #11]
 801470e:	f003 0304 	and.w	r3, r3, #4
 8014712:	2b00      	cmp	r3, #0
 8014714:	d02c      	beq.n	8014770 <follow_path+0x108>
						dp->fn[NSFLAG] = NS_NONAME;
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	2280      	movs	r2, #128	; 0x80
 801471a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 801471e:	2300      	movs	r3, #0
 8014720:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8014722:	e029      	b.n	8014778 <follow_path+0x110>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8014724:	7afb      	ldrb	r3, [r7, #11]
 8014726:	f003 0304 	and.w	r3, r3, #4
 801472a:	2b00      	cmp	r3, #0
 801472c:	d124      	bne.n	8014778 <follow_path+0x110>
 801472e:	2305      	movs	r3, #5
 8014730:	75fb      	strb	r3, [r7, #23]
				break;
 8014732:	e021      	b.n	8014778 <follow_path+0x110>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014734:	7afb      	ldrb	r3, [r7, #11]
 8014736:	f003 0304 	and.w	r3, r3, #4
 801473a:	2b00      	cmp	r3, #0
 801473c:	d11e      	bne.n	801477c <follow_path+0x114>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801473e:	693b      	ldr	r3, [r7, #16]
 8014740:	799b      	ldrb	r3, [r3, #6]
 8014742:	f003 0310 	and.w	r3, r3, #16
 8014746:	2b00      	cmp	r3, #0
 8014748:	d102      	bne.n	8014750 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 801474a:	2305      	movs	r3, #5
 801474c:	75fb      	strb	r3, [r7, #23]
 801474e:	e016      	b.n	801477e <follow_path+0x116>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	695b      	ldr	r3, [r3, #20]
 801475a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801475e:	4413      	add	r3, r2
 8014760:	4619      	mov	r1, r3
 8014762:	68f8      	ldr	r0, [r7, #12]
 8014764:	f7ff fdef 	bl	8014346 <ld_clust>
 8014768:	4602      	mov	r2, r0
 801476a:	693b      	ldr	r3, [r7, #16]
 801476c:	609a      	str	r2, [r3, #8]
 801476e:	e7af      	b.n	80146d0 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8014770:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014772:	e7ad      	b.n	80146d0 <follow_path+0x68>
			if (res != FR_OK) break;
 8014774:	bf00      	nop
 8014776:	e002      	b.n	801477e <follow_path+0x116>
				break;
 8014778:	bf00      	nop
 801477a:	e000      	b.n	801477e <follow_path+0x116>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801477c:	bf00      	nop
			}
		}
	}

	return res;
 801477e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014780:	4618      	mov	r0, r3
 8014782:	3718      	adds	r7, #24
 8014784:	46bd      	mov	sp, r7
 8014786:	bd80      	pop	{r7, pc}

08014788 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8014788:	b480      	push	{r7}
 801478a:	b087      	sub	sp, #28
 801478c:	af00      	add	r7, sp, #0
 801478e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8014790:	f04f 33ff 	mov.w	r3, #4294967295
 8014794:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d031      	beq.n	8014802 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	617b      	str	r3, [r7, #20]
 80147a4:	e002      	b.n	80147ac <get_ldnumber+0x24>
 80147a6:	697b      	ldr	r3, [r7, #20]
 80147a8:	3301      	adds	r3, #1
 80147aa:	617b      	str	r3, [r7, #20]
 80147ac:	697b      	ldr	r3, [r7, #20]
 80147ae:	781b      	ldrb	r3, [r3, #0]
 80147b0:	2b20      	cmp	r3, #32
 80147b2:	d903      	bls.n	80147bc <get_ldnumber+0x34>
 80147b4:	697b      	ldr	r3, [r7, #20]
 80147b6:	781b      	ldrb	r3, [r3, #0]
 80147b8:	2b3a      	cmp	r3, #58	; 0x3a
 80147ba:	d1f4      	bne.n	80147a6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80147bc:	697b      	ldr	r3, [r7, #20]
 80147be:	781b      	ldrb	r3, [r3, #0]
 80147c0:	2b3a      	cmp	r3, #58	; 0x3a
 80147c2:	d11c      	bne.n	80147fe <get_ldnumber+0x76>
			tp = *path;
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	1c5a      	adds	r2, r3, #1
 80147ce:	60fa      	str	r2, [r7, #12]
 80147d0:	781b      	ldrb	r3, [r3, #0]
 80147d2:	3b30      	subs	r3, #48	; 0x30
 80147d4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80147d6:	68bb      	ldr	r3, [r7, #8]
 80147d8:	2b09      	cmp	r3, #9
 80147da:	d80e      	bhi.n	80147fa <get_ldnumber+0x72>
 80147dc:	68fa      	ldr	r2, [r7, #12]
 80147de:	697b      	ldr	r3, [r7, #20]
 80147e0:	429a      	cmp	r2, r3
 80147e2:	d10a      	bne.n	80147fa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80147e4:	68bb      	ldr	r3, [r7, #8]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d107      	bne.n	80147fa <get_ldnumber+0x72>
					vol = (int)i;
 80147ea:	68bb      	ldr	r3, [r7, #8]
 80147ec:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80147ee:	697b      	ldr	r3, [r7, #20]
 80147f0:	3301      	adds	r3, #1
 80147f2:	617b      	str	r3, [r7, #20]
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	697a      	ldr	r2, [r7, #20]
 80147f8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80147fa:	693b      	ldr	r3, [r7, #16]
 80147fc:	e002      	b.n	8014804 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80147fe:	2300      	movs	r3, #0
 8014800:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8014802:	693b      	ldr	r3, [r7, #16]
}
 8014804:	4618      	mov	r0, r3
 8014806:	371c      	adds	r7, #28
 8014808:	46bd      	mov	sp, r7
 801480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801480e:	4770      	bx	lr

08014810 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8014810:	b580      	push	{r7, lr}
 8014812:	b082      	sub	sp, #8
 8014814:	af00      	add	r7, sp, #0
 8014816:	6078      	str	r0, [r7, #4]
 8014818:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	2200      	movs	r2, #0
 801481e:	70da      	strb	r2, [r3, #3]
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	f04f 32ff 	mov.w	r2, #4294967295
 8014826:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8014828:	6839      	ldr	r1, [r7, #0]
 801482a:	6878      	ldr	r0, [r7, #4]
 801482c:	f7ff f8b8 	bl	80139a0 <move_window>
 8014830:	4603      	mov	r3, r0
 8014832:	2b00      	cmp	r3, #0
 8014834:	d001      	beq.n	801483a <check_fs+0x2a>
 8014836:	2304      	movs	r3, #4
 8014838:	e038      	b.n	80148ac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	3334      	adds	r3, #52	; 0x34
 801483e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014842:	4618      	mov	r0, r3
 8014844:	f7fe ff44 	bl	80136d0 <ld_word>
 8014848:	4603      	mov	r3, r0
 801484a:	461a      	mov	r2, r3
 801484c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014850:	429a      	cmp	r2, r3
 8014852:	d001      	beq.n	8014858 <check_fs+0x48>
 8014854:	2303      	movs	r3, #3
 8014856:	e029      	b.n	80148ac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801485e:	2be9      	cmp	r3, #233	; 0xe9
 8014860:	d009      	beq.n	8014876 <check_fs+0x66>
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014868:	2beb      	cmp	r3, #235	; 0xeb
 801486a:	d11e      	bne.n	80148aa <check_fs+0x9a>
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8014872:	2b90      	cmp	r3, #144	; 0x90
 8014874:	d119      	bne.n	80148aa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	3334      	adds	r3, #52	; 0x34
 801487a:	3336      	adds	r3, #54	; 0x36
 801487c:	4618      	mov	r0, r3
 801487e:	f7fe ff3f 	bl	8013700 <ld_dword>
 8014882:	4603      	mov	r3, r0
 8014884:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8014888:	4a0a      	ldr	r2, [pc, #40]	; (80148b4 <check_fs+0xa4>)
 801488a:	4293      	cmp	r3, r2
 801488c:	d101      	bne.n	8014892 <check_fs+0x82>
 801488e:	2300      	movs	r3, #0
 8014890:	e00c      	b.n	80148ac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	3334      	adds	r3, #52	; 0x34
 8014896:	3352      	adds	r3, #82	; 0x52
 8014898:	4618      	mov	r0, r3
 801489a:	f7fe ff31 	bl	8013700 <ld_dword>
 801489e:	4603      	mov	r3, r0
 80148a0:	4a05      	ldr	r2, [pc, #20]	; (80148b8 <check_fs+0xa8>)
 80148a2:	4293      	cmp	r3, r2
 80148a4:	d101      	bne.n	80148aa <check_fs+0x9a>
 80148a6:	2300      	movs	r3, #0
 80148a8:	e000      	b.n	80148ac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80148aa:	2302      	movs	r3, #2
}
 80148ac:	4618      	mov	r0, r3
 80148ae:	3708      	adds	r7, #8
 80148b0:	46bd      	mov	sp, r7
 80148b2:	bd80      	pop	{r7, pc}
 80148b4:	00544146 	.word	0x00544146
 80148b8:	33544146 	.word	0x33544146

080148bc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80148bc:	b580      	push	{r7, lr}
 80148be:	b096      	sub	sp, #88	; 0x58
 80148c0:	af00      	add	r7, sp, #0
 80148c2:	60f8      	str	r0, [r7, #12]
 80148c4:	60b9      	str	r1, [r7, #8]
 80148c6:	4613      	mov	r3, r2
 80148c8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80148ca:	68bb      	ldr	r3, [r7, #8]
 80148cc:	2200      	movs	r2, #0
 80148ce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80148d0:	68f8      	ldr	r0, [r7, #12]
 80148d2:	f7ff ff59 	bl	8014788 <get_ldnumber>
 80148d6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80148d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80148da:	2b00      	cmp	r3, #0
 80148dc:	da01      	bge.n	80148e2 <find_volume+0x26>
 80148de:	230b      	movs	r3, #11
 80148e0:	e230      	b.n	8014d44 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80148e2:	4aa1      	ldr	r2, [pc, #644]	; (8014b68 <find_volume+0x2ac>)
 80148e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80148e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80148ea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80148ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d101      	bne.n	80148f6 <find_volume+0x3a>
 80148f2:	230c      	movs	r3, #12
 80148f4:	e226      	b.n	8014d44 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80148f6:	68bb      	ldr	r3, [r7, #8]
 80148f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80148fa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80148fc:	79fb      	ldrb	r3, [r7, #7]
 80148fe:	f023 0301 	bic.w	r3, r3, #1
 8014902:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8014904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014906:	781b      	ldrb	r3, [r3, #0]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d01a      	beq.n	8014942 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801490c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801490e:	785b      	ldrb	r3, [r3, #1]
 8014910:	4618      	mov	r0, r3
 8014912:	f7fe fe3f 	bl	8013594 <disk_status>
 8014916:	4603      	mov	r3, r0
 8014918:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801491c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014920:	f003 0301 	and.w	r3, r3, #1
 8014924:	2b00      	cmp	r3, #0
 8014926:	d10c      	bne.n	8014942 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8014928:	79fb      	ldrb	r3, [r7, #7]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d007      	beq.n	801493e <find_volume+0x82>
 801492e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014932:	f003 0304 	and.w	r3, r3, #4
 8014936:	2b00      	cmp	r3, #0
 8014938:	d001      	beq.n	801493e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801493a:	230a      	movs	r3, #10
 801493c:	e202      	b.n	8014d44 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 801493e:	2300      	movs	r3, #0
 8014940:	e200      	b.n	8014d44 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8014942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014944:	2200      	movs	r2, #0
 8014946:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8014948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801494a:	b2da      	uxtb	r2, r3
 801494c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801494e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8014950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014952:	785b      	ldrb	r3, [r3, #1]
 8014954:	4618      	mov	r0, r3
 8014956:	f7fe fe37 	bl	80135c8 <disk_initialize>
 801495a:	4603      	mov	r3, r0
 801495c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8014960:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014964:	f003 0301 	and.w	r3, r3, #1
 8014968:	2b00      	cmp	r3, #0
 801496a:	d001      	beq.n	8014970 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801496c:	2303      	movs	r3, #3
 801496e:	e1e9      	b.n	8014d44 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8014970:	79fb      	ldrb	r3, [r7, #7]
 8014972:	2b00      	cmp	r3, #0
 8014974:	d007      	beq.n	8014986 <find_volume+0xca>
 8014976:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801497a:	f003 0304 	and.w	r3, r3, #4
 801497e:	2b00      	cmp	r3, #0
 8014980:	d001      	beq.n	8014986 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8014982:	230a      	movs	r3, #10
 8014984:	e1de      	b.n	8014d44 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8014986:	2300      	movs	r3, #0
 8014988:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801498a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801498c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801498e:	f7ff ff3f 	bl	8014810 <check_fs>
 8014992:	4603      	mov	r3, r0
 8014994:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8014998:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801499c:	2b02      	cmp	r3, #2
 801499e:	d149      	bne.n	8014a34 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80149a0:	2300      	movs	r3, #0
 80149a2:	643b      	str	r3, [r7, #64]	; 0x40
 80149a4:	e01e      	b.n	80149e4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80149a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149a8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80149ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80149ae:	011b      	lsls	r3, r3, #4
 80149b0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80149b4:	4413      	add	r3, r2
 80149b6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80149b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149ba:	3304      	adds	r3, #4
 80149bc:	781b      	ldrb	r3, [r3, #0]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d006      	beq.n	80149d0 <find_volume+0x114>
 80149c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149c4:	3308      	adds	r3, #8
 80149c6:	4618      	mov	r0, r3
 80149c8:	f7fe fe9a 	bl	8013700 <ld_dword>
 80149cc:	4602      	mov	r2, r0
 80149ce:	e000      	b.n	80149d2 <find_volume+0x116>
 80149d0:	2200      	movs	r2, #0
 80149d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80149d4:	009b      	lsls	r3, r3, #2
 80149d6:	3358      	adds	r3, #88	; 0x58
 80149d8:	443b      	add	r3, r7
 80149da:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80149de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80149e0:	3301      	adds	r3, #1
 80149e2:	643b      	str	r3, [r7, #64]	; 0x40
 80149e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80149e6:	2b03      	cmp	r3, #3
 80149e8:	d9dd      	bls.n	80149a6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80149ea:	2300      	movs	r3, #0
 80149ec:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80149ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d002      	beq.n	80149fa <find_volume+0x13e>
 80149f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80149f6:	3b01      	subs	r3, #1
 80149f8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80149fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80149fc:	009b      	lsls	r3, r3, #2
 80149fe:	3358      	adds	r3, #88	; 0x58
 8014a00:	443b      	add	r3, r7
 8014a02:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8014a06:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d005      	beq.n	8014a1a <find_volume+0x15e>
 8014a0e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014a10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014a12:	f7ff fefd 	bl	8014810 <check_fs>
 8014a16:	4603      	mov	r3, r0
 8014a18:	e000      	b.n	8014a1c <find_volume+0x160>
 8014a1a:	2303      	movs	r3, #3
 8014a1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014a20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014a24:	2b01      	cmp	r3, #1
 8014a26:	d905      	bls.n	8014a34 <find_volume+0x178>
 8014a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a2a:	3301      	adds	r3, #1
 8014a2c:	643b      	str	r3, [r7, #64]	; 0x40
 8014a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a30:	2b03      	cmp	r3, #3
 8014a32:	d9e2      	bls.n	80149fa <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8014a34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014a38:	2b04      	cmp	r3, #4
 8014a3a:	d101      	bne.n	8014a40 <find_volume+0x184>
 8014a3c:	2301      	movs	r3, #1
 8014a3e:	e181      	b.n	8014d44 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8014a40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014a44:	2b01      	cmp	r3, #1
 8014a46:	d901      	bls.n	8014a4c <find_volume+0x190>
 8014a48:	230d      	movs	r3, #13
 8014a4a:	e17b      	b.n	8014d44 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8014a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a4e:	3334      	adds	r3, #52	; 0x34
 8014a50:	330b      	adds	r3, #11
 8014a52:	4618      	mov	r0, r3
 8014a54:	f7fe fe3c 	bl	80136d0 <ld_word>
 8014a58:	4603      	mov	r3, r0
 8014a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014a5e:	d001      	beq.n	8014a64 <find_volume+0x1a8>
 8014a60:	230d      	movs	r3, #13
 8014a62:	e16f      	b.n	8014d44 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8014a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a66:	3334      	adds	r3, #52	; 0x34
 8014a68:	3316      	adds	r3, #22
 8014a6a:	4618      	mov	r0, r3
 8014a6c:	f7fe fe30 	bl	80136d0 <ld_word>
 8014a70:	4603      	mov	r3, r0
 8014a72:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8014a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d106      	bne.n	8014a88 <find_volume+0x1cc>
 8014a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a7c:	3334      	adds	r3, #52	; 0x34
 8014a7e:	3324      	adds	r3, #36	; 0x24
 8014a80:	4618      	mov	r0, r3
 8014a82:	f7fe fe3d 	bl	8013700 <ld_dword>
 8014a86:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8014a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014a8c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8014a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a90:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8014a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a96:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8014a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a9a:	789b      	ldrb	r3, [r3, #2]
 8014a9c:	2b01      	cmp	r3, #1
 8014a9e:	d005      	beq.n	8014aac <find_volume+0x1f0>
 8014aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014aa2:	789b      	ldrb	r3, [r3, #2]
 8014aa4:	2b02      	cmp	r3, #2
 8014aa6:	d001      	beq.n	8014aac <find_volume+0x1f0>
 8014aa8:	230d      	movs	r3, #13
 8014aaa:	e14b      	b.n	8014d44 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8014aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014aae:	789b      	ldrb	r3, [r3, #2]
 8014ab0:	461a      	mov	r2, r3
 8014ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ab4:	fb02 f303 	mul.w	r3, r2, r3
 8014ab8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8014aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014abc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014ac0:	b29a      	uxth	r2, r3
 8014ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ac4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8014ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ac8:	895b      	ldrh	r3, [r3, #10]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d008      	beq.n	8014ae0 <find_volume+0x224>
 8014ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ad0:	895b      	ldrh	r3, [r3, #10]
 8014ad2:	461a      	mov	r2, r3
 8014ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ad6:	895b      	ldrh	r3, [r3, #10]
 8014ad8:	3b01      	subs	r3, #1
 8014ada:	4013      	ands	r3, r2
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d001      	beq.n	8014ae4 <find_volume+0x228>
 8014ae0:	230d      	movs	r3, #13
 8014ae2:	e12f      	b.n	8014d44 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8014ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ae6:	3334      	adds	r3, #52	; 0x34
 8014ae8:	3311      	adds	r3, #17
 8014aea:	4618      	mov	r0, r3
 8014aec:	f7fe fdf0 	bl	80136d0 <ld_word>
 8014af0:	4603      	mov	r3, r0
 8014af2:	461a      	mov	r2, r3
 8014af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014af6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8014af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014afa:	891b      	ldrh	r3, [r3, #8]
 8014afc:	f003 030f 	and.w	r3, r3, #15
 8014b00:	b29b      	uxth	r3, r3
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d001      	beq.n	8014b0a <find_volume+0x24e>
 8014b06:	230d      	movs	r3, #13
 8014b08:	e11c      	b.n	8014d44 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8014b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b0c:	3334      	adds	r3, #52	; 0x34
 8014b0e:	3313      	adds	r3, #19
 8014b10:	4618      	mov	r0, r3
 8014b12:	f7fe fddd 	bl	80136d0 <ld_word>
 8014b16:	4603      	mov	r3, r0
 8014b18:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8014b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d106      	bne.n	8014b2e <find_volume+0x272>
 8014b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b22:	3334      	adds	r3, #52	; 0x34
 8014b24:	3320      	adds	r3, #32
 8014b26:	4618      	mov	r0, r3
 8014b28:	f7fe fdea 	bl	8013700 <ld_dword>
 8014b2c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8014b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b30:	3334      	adds	r3, #52	; 0x34
 8014b32:	330e      	adds	r3, #14
 8014b34:	4618      	mov	r0, r3
 8014b36:	f7fe fdcb 	bl	80136d0 <ld_word>
 8014b3a:	4603      	mov	r3, r0
 8014b3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8014b3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d101      	bne.n	8014b48 <find_volume+0x28c>
 8014b44:	230d      	movs	r3, #13
 8014b46:	e0fd      	b.n	8014d44 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8014b48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014b4c:	4413      	add	r3, r2
 8014b4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014b50:	8912      	ldrh	r2, [r2, #8]
 8014b52:	0912      	lsrs	r2, r2, #4
 8014b54:	b292      	uxth	r2, r2
 8014b56:	4413      	add	r3, r2
 8014b58:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8014b5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b5e:	429a      	cmp	r2, r3
 8014b60:	d204      	bcs.n	8014b6c <find_volume+0x2b0>
 8014b62:	230d      	movs	r3, #13
 8014b64:	e0ee      	b.n	8014d44 <find_volume+0x488>
 8014b66:	bf00      	nop
 8014b68:	24001098 	.word	0x24001098
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8014b6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b70:	1ad3      	subs	r3, r2, r3
 8014b72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014b74:	8952      	ldrh	r2, [r2, #10]
 8014b76:	fbb3 f3f2 	udiv	r3, r3, r2
 8014b7a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8014b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d101      	bne.n	8014b86 <find_volume+0x2ca>
 8014b82:	230d      	movs	r3, #13
 8014b84:	e0de      	b.n	8014d44 <find_volume+0x488>
		fmt = FS_FAT32;
 8014b86:	2303      	movs	r3, #3
 8014b88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8014b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b8e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8014b92:	4293      	cmp	r3, r2
 8014b94:	d802      	bhi.n	8014b9c <find_volume+0x2e0>
 8014b96:	2302      	movs	r3, #2
 8014b98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8014b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b9e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8014ba2:	4293      	cmp	r3, r2
 8014ba4:	d802      	bhi.n	8014bac <find_volume+0x2f0>
 8014ba6:	2301      	movs	r3, #1
 8014ba8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8014bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bae:	1c9a      	adds	r2, r3, #2
 8014bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bb2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8014bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014bb8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8014bba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014bbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014bbe:	441a      	add	r2, r3
 8014bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bc2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8014bc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bc8:	441a      	add	r2, r3
 8014bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bcc:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8014bce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014bd2:	2b03      	cmp	r3, #3
 8014bd4:	d11e      	bne.n	8014c14 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8014bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bd8:	3334      	adds	r3, #52	; 0x34
 8014bda:	332a      	adds	r3, #42	; 0x2a
 8014bdc:	4618      	mov	r0, r3
 8014bde:	f7fe fd77 	bl	80136d0 <ld_word>
 8014be2:	4603      	mov	r3, r0
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d001      	beq.n	8014bec <find_volume+0x330>
 8014be8:	230d      	movs	r3, #13
 8014bea:	e0ab      	b.n	8014d44 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8014bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bee:	891b      	ldrh	r3, [r3, #8]
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d001      	beq.n	8014bf8 <find_volume+0x33c>
 8014bf4:	230d      	movs	r3, #13
 8014bf6:	e0a5      	b.n	8014d44 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8014bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bfa:	3334      	adds	r3, #52	; 0x34
 8014bfc:	332c      	adds	r3, #44	; 0x2c
 8014bfe:	4618      	mov	r0, r3
 8014c00:	f7fe fd7e 	bl	8013700 <ld_dword>
 8014c04:	4602      	mov	r2, r0
 8014c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c08:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8014c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c0c:	699b      	ldr	r3, [r3, #24]
 8014c0e:	009b      	lsls	r3, r3, #2
 8014c10:	647b      	str	r3, [r7, #68]	; 0x44
 8014c12:	e01f      	b.n	8014c54 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8014c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c16:	891b      	ldrh	r3, [r3, #8]
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d101      	bne.n	8014c20 <find_volume+0x364>
 8014c1c:	230d      	movs	r3, #13
 8014c1e:	e091      	b.n	8014d44 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8014c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c26:	441a      	add	r2, r3
 8014c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c2a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8014c2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014c30:	2b02      	cmp	r3, #2
 8014c32:	d103      	bne.n	8014c3c <find_volume+0x380>
 8014c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c36:	699b      	ldr	r3, [r3, #24]
 8014c38:	005b      	lsls	r3, r3, #1
 8014c3a:	e00a      	b.n	8014c52 <find_volume+0x396>
 8014c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c3e:	699a      	ldr	r2, [r3, #24]
 8014c40:	4613      	mov	r3, r2
 8014c42:	005b      	lsls	r3, r3, #1
 8014c44:	4413      	add	r3, r2
 8014c46:	085a      	lsrs	r2, r3, #1
 8014c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c4a:	699b      	ldr	r3, [r3, #24]
 8014c4c:	f003 0301 	and.w	r3, r3, #1
 8014c50:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8014c52:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8014c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c56:	69da      	ldr	r2, [r3, #28]
 8014c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c5a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8014c5e:	0a5b      	lsrs	r3, r3, #9
 8014c60:	429a      	cmp	r2, r3
 8014c62:	d201      	bcs.n	8014c68 <find_volume+0x3ac>
 8014c64:	230d      	movs	r3, #13
 8014c66:	e06d      	b.n	8014d44 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8014c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8014c6e:	611a      	str	r2, [r3, #16]
 8014c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c72:	691a      	ldr	r2, [r3, #16]
 8014c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c76:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8014c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c7a:	2280      	movs	r2, #128	; 0x80
 8014c7c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8014c7e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014c82:	2b03      	cmp	r3, #3
 8014c84:	d149      	bne.n	8014d1a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8014c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c88:	3334      	adds	r3, #52	; 0x34
 8014c8a:	3330      	adds	r3, #48	; 0x30
 8014c8c:	4618      	mov	r0, r3
 8014c8e:	f7fe fd1f 	bl	80136d0 <ld_word>
 8014c92:	4603      	mov	r3, r0
 8014c94:	2b01      	cmp	r3, #1
 8014c96:	d140      	bne.n	8014d1a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014c98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c9a:	3301      	adds	r3, #1
 8014c9c:	4619      	mov	r1, r3
 8014c9e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014ca0:	f7fe fe7e 	bl	80139a0 <move_window>
 8014ca4:	4603      	mov	r3, r0
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d137      	bne.n	8014d1a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8014caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cac:	2200      	movs	r2, #0
 8014cae:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8014cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cb2:	3334      	adds	r3, #52	; 0x34
 8014cb4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014cb8:	4618      	mov	r0, r3
 8014cba:	f7fe fd09 	bl	80136d0 <ld_word>
 8014cbe:	4603      	mov	r3, r0
 8014cc0:	461a      	mov	r2, r3
 8014cc2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014cc6:	429a      	cmp	r2, r3
 8014cc8:	d127      	bne.n	8014d1a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8014cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ccc:	3334      	adds	r3, #52	; 0x34
 8014cce:	4618      	mov	r0, r3
 8014cd0:	f7fe fd16 	bl	8013700 <ld_dword>
 8014cd4:	4603      	mov	r3, r0
 8014cd6:	4a1d      	ldr	r2, [pc, #116]	; (8014d4c <find_volume+0x490>)
 8014cd8:	4293      	cmp	r3, r2
 8014cda:	d11e      	bne.n	8014d1a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8014cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cde:	3334      	adds	r3, #52	; 0x34
 8014ce0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	f7fe fd0b 	bl	8013700 <ld_dword>
 8014cea:	4603      	mov	r3, r0
 8014cec:	4a18      	ldr	r2, [pc, #96]	; (8014d50 <find_volume+0x494>)
 8014cee:	4293      	cmp	r3, r2
 8014cf0:	d113      	bne.n	8014d1a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8014cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cf4:	3334      	adds	r3, #52	; 0x34
 8014cf6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	f7fe fd00 	bl	8013700 <ld_dword>
 8014d00:	4602      	mov	r2, r0
 8014d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d04:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d08:	3334      	adds	r3, #52	; 0x34
 8014d0a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8014d0e:	4618      	mov	r0, r3
 8014d10:	f7fe fcf6 	bl	8013700 <ld_dword>
 8014d14:	4602      	mov	r2, r0
 8014d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d18:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8014d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d1c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8014d20:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8014d22:	4b0c      	ldr	r3, [pc, #48]	; (8014d54 <find_volume+0x498>)
 8014d24:	881b      	ldrh	r3, [r3, #0]
 8014d26:	3301      	adds	r3, #1
 8014d28:	b29a      	uxth	r2, r3
 8014d2a:	4b0a      	ldr	r3, [pc, #40]	; (8014d54 <find_volume+0x498>)
 8014d2c:	801a      	strh	r2, [r3, #0]
 8014d2e:	4b09      	ldr	r3, [pc, #36]	; (8014d54 <find_volume+0x498>)
 8014d30:	881a      	ldrh	r2, [r3, #0]
 8014d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d34:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8014d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d38:	2200      	movs	r2, #0
 8014d3a:	615a      	str	r2, [r3, #20]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8014d3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014d3e:	f7fe fdc7 	bl	80138d0 <clear_lock>
#endif
	return FR_OK;
 8014d42:	2300      	movs	r3, #0
}
 8014d44:	4618      	mov	r0, r3
 8014d46:	3758      	adds	r7, #88	; 0x58
 8014d48:	46bd      	mov	sp, r7
 8014d4a:	bd80      	pop	{r7, pc}
 8014d4c:	41615252 	.word	0x41615252
 8014d50:	61417272 	.word	0x61417272
 8014d54:	2400109c 	.word	0x2400109c

08014d58 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014d58:	b580      	push	{r7, lr}
 8014d5a:	b088      	sub	sp, #32
 8014d5c:	af00      	add	r7, sp, #0
 8014d5e:	60f8      	str	r0, [r7, #12]
 8014d60:	60b9      	str	r1, [r7, #8]
 8014d62:	4613      	mov	r3, r2
 8014d64:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8014d66:	68bb      	ldr	r3, [r7, #8]
 8014d68:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8014d6a:	f107 0310 	add.w	r3, r7, #16
 8014d6e:	4618      	mov	r0, r3
 8014d70:	f7ff fd0a 	bl	8014788 <get_ldnumber>
 8014d74:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8014d76:	69fb      	ldr	r3, [r7, #28]
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	da01      	bge.n	8014d80 <f_mount+0x28>
 8014d7c:	230b      	movs	r3, #11
 8014d7e:	e02b      	b.n	8014dd8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8014d80:	4a17      	ldr	r2, [pc, #92]	; (8014de0 <f_mount+0x88>)
 8014d82:	69fb      	ldr	r3, [r7, #28]
 8014d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014d88:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8014d8a:	69bb      	ldr	r3, [r7, #24]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d005      	beq.n	8014d9c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8014d90:	69b8      	ldr	r0, [r7, #24]
 8014d92:	f7fe fd9d 	bl	80138d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8014d96:	69bb      	ldr	r3, [r7, #24]
 8014d98:	2200      	movs	r2, #0
 8014d9a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d002      	beq.n	8014da8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	2200      	movs	r2, #0
 8014da6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8014da8:	68fa      	ldr	r2, [r7, #12]
 8014daa:	490d      	ldr	r1, [pc, #52]	; (8014de0 <f_mount+0x88>)
 8014dac:	69fb      	ldr	r3, [r7, #28]
 8014dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d002      	beq.n	8014dbe <f_mount+0x66>
 8014db8:	79fb      	ldrb	r3, [r7, #7]
 8014dba:	2b01      	cmp	r3, #1
 8014dbc:	d001      	beq.n	8014dc2 <f_mount+0x6a>
 8014dbe:	2300      	movs	r3, #0
 8014dc0:	e00a      	b.n	8014dd8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014dc2:	f107 010c 	add.w	r1, r7, #12
 8014dc6:	f107 0308 	add.w	r3, r7, #8
 8014dca:	2200      	movs	r2, #0
 8014dcc:	4618      	mov	r0, r3
 8014dce:	f7ff fd75 	bl	80148bc <find_volume>
 8014dd2:	4603      	mov	r3, r0
 8014dd4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8014dd8:	4618      	mov	r0, r3
 8014dda:	3720      	adds	r7, #32
 8014ddc:	46bd      	mov	sp, r7
 8014dde:	bd80      	pop	{r7, pc}
 8014de0:	24001098 	.word	0x24001098

08014de4 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8014de4:	b590      	push	{r4, r7, lr}
 8014de6:	b091      	sub	sp, #68	; 0x44
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8014dec:	f107 0108 	add.w	r1, r7, #8
 8014df0:	1d3b      	adds	r3, r7, #4
 8014df2:	2200      	movs	r2, #0
 8014df4:	4618      	mov	r0, r3
 8014df6:	f7ff fd61 	bl	80148bc <find_volume>
 8014dfa:	4603      	mov	r3, r0
 8014dfc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8014e00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d131      	bne.n	8014e6c <f_chdir+0x88>
		dj.obj.fs = fs;
 8014e08:	68bb      	ldr	r3, [r7, #8]
 8014e0a:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8014e0c:	687a      	ldr	r2, [r7, #4]
 8014e0e:	f107 030c 	add.w	r3, r7, #12
 8014e12:	4611      	mov	r1, r2
 8014e14:	4618      	mov	r0, r3
 8014e16:	f7ff fc27 	bl	8014668 <follow_path>
 8014e1a:	4603      	mov	r3, r0
 8014e1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8014e20:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d11a      	bne.n	8014e5e <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8014e28:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8014e2c:	b25b      	sxtb	r3, r3
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	da03      	bge.n	8014e3a <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8014e32:	68bb      	ldr	r3, [r7, #8]
 8014e34:	697a      	ldr	r2, [r7, #20]
 8014e36:	615a      	str	r2, [r3, #20]
 8014e38:	e011      	b.n	8014e5e <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8014e3a:	7cbb      	ldrb	r3, [r7, #18]
 8014e3c:	f003 0310 	and.w	r3, r3, #16
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d009      	beq.n	8014e58 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8014e44:	68bb      	ldr	r3, [r7, #8]
 8014e46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014e48:	68bc      	ldr	r4, [r7, #8]
 8014e4a:	4611      	mov	r1, r2
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	f7ff fa7a 	bl	8014346 <ld_clust>
 8014e52:	4603      	mov	r3, r0
 8014e54:	6163      	str	r3, [r4, #20]
 8014e56:	e002      	b.n	8014e5e <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8014e58:	2305      	movs	r3, #5
 8014e5a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8014e5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014e62:	2b04      	cmp	r3, #4
 8014e64:	d102      	bne.n	8014e6c <f_chdir+0x88>
 8014e66:	2305      	movs	r3, #5
 8014e68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8014e6c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8014e70:	4618      	mov	r0, r3
 8014e72:	3744      	adds	r7, #68	; 0x44
 8014e74:	46bd      	mov	sp, r7
 8014e76:	bd90      	pop	{r4, r7, pc}

08014e78 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8014e78:	b580      	push	{r7, lr}
 8014e7a:	b096      	sub	sp, #88	; 0x58
 8014e7c:	af00      	add	r7, sp, #0
 8014e7e:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014e80:	f107 0108 	add.w	r1, r7, #8
 8014e84:	1d3b      	adds	r3, r7, #4
 8014e86:	2202      	movs	r2, #2
 8014e88:	4618      	mov	r0, r3
 8014e8a:	f7ff fd17 	bl	80148bc <find_volume>
 8014e8e:	4603      	mov	r3, r0
 8014e90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8014e94:	68bb      	ldr	r3, [r7, #8]
 8014e96:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8014e98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	f040 80f9 	bne.w	8015094 <f_mkdir+0x21c>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8014ea2:	687a      	ldr	r2, [r7, #4]
 8014ea4:	f107 030c 	add.w	r3, r7, #12
 8014ea8:	4611      	mov	r1, r2
 8014eaa:	4618      	mov	r0, r3
 8014eac:	f7ff fbdc 	bl	8014668 <follow_path>
 8014eb0:	4603      	mov	r3, r0
 8014eb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8014eb6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d102      	bne.n	8014ec4 <f_mkdir+0x4c>
 8014ebe:	2308      	movs	r3, #8
 8014ec0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8014ec4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014ec8:	2b04      	cmp	r3, #4
 8014eca:	d108      	bne.n	8014ede <f_mkdir+0x66>
 8014ecc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8014ed0:	f003 0320 	and.w	r3, r3, #32
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d002      	beq.n	8014ede <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8014ed8:	2306      	movs	r3, #6
 8014eda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8014ede:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014ee2:	2b04      	cmp	r3, #4
 8014ee4:	f040 80d6 	bne.w	8015094 <f_mkdir+0x21c>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8014ee8:	f107 030c 	add.w	r3, r7, #12
 8014eec:	2100      	movs	r1, #0
 8014eee:	4618      	mov	r0, r3
 8014ef0:	f7ff f80a 	bl	8013f08 <create_chain>
 8014ef4:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8014ef6:	68bb      	ldr	r3, [r7, #8]
 8014ef8:	895b      	ldrh	r3, [r3, #10]
 8014efa:	025b      	lsls	r3, r3, #9
 8014efc:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8014efe:	2300      	movs	r3, #0
 8014f00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8014f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d102      	bne.n	8014f10 <f_mkdir+0x98>
 8014f0a:	2307      	movs	r3, #7
 8014f0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8014f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014f12:	2b01      	cmp	r3, #1
 8014f14:	d102      	bne.n	8014f1c <f_mkdir+0xa4>
 8014f16:	2302      	movs	r3, #2
 8014f18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f22:	d102      	bne.n	8014f2a <f_mkdir+0xb2>
 8014f24:	2301      	movs	r3, #1
 8014f26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8014f2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d106      	bne.n	8014f40 <f_mkdir+0xc8>
 8014f32:	68bb      	ldr	r3, [r7, #8]
 8014f34:	4618      	mov	r0, r3
 8014f36:	f7fe fcef 	bl	8013918 <sync_window>
 8014f3a:	4603      	mov	r3, r0
 8014f3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8014f40:	f7fa fee8 	bl	800fd14 <get_fattime>
 8014f44:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8014f46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d16a      	bne.n	8015024 <f_mkdir+0x1ac>
				dsc = clust2sect(fs, dcl);
 8014f4e:	68bb      	ldr	r3, [r7, #8]
 8014f50:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014f52:	4618      	mov	r0, r3
 8014f54:	f7fe fdc0 	bl	8013ad8 <clust2sect>
 8014f58:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8014f5a:	68bb      	ldr	r3, [r7, #8]
 8014f5c:	3334      	adds	r3, #52	; 0x34
 8014f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8014f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014f64:	2100      	movs	r1, #0
 8014f66:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014f68:	f7fe fc55 	bl	8013816 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8014f6c:	220b      	movs	r2, #11
 8014f6e:	2120      	movs	r1, #32
 8014f70:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014f72:	f7fe fc50 	bl	8013816 <mem_set>
					dir[DIR_Name] = '.';
 8014f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f78:	222e      	movs	r2, #46	; 0x2e
 8014f7a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8014f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f7e:	330b      	adds	r3, #11
 8014f80:	2210      	movs	r2, #16
 8014f82:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8014f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f86:	3316      	adds	r3, #22
 8014f88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014f8a:	4618      	mov	r0, r3
 8014f8c:	f7fe fbf6 	bl	801377c <st_dword>
					st_clust(fs, dir, dcl);
 8014f90:	68bb      	ldr	r3, [r7, #8]
 8014f92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014f94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014f96:	4618      	mov	r0, r3
 8014f98:	f7ff f9f4 	bl	8014384 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8014f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f9e:	3320      	adds	r3, #32
 8014fa0:	2220      	movs	r2, #32
 8014fa2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	f7fe fc15 	bl	80137d4 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8014faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014fac:	3321      	adds	r3, #33	; 0x21
 8014fae:	222e      	movs	r2, #46	; 0x2e
 8014fb0:	701a      	strb	r2, [r3, #0]
 8014fb2:	697b      	ldr	r3, [r7, #20]
 8014fb4:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8014fb6:	68bb      	ldr	r3, [r7, #8]
 8014fb8:	781b      	ldrb	r3, [r3, #0]
 8014fba:	2b03      	cmp	r3, #3
 8014fbc:	d106      	bne.n	8014fcc <f_mkdir+0x154>
 8014fbe:	68bb      	ldr	r3, [r7, #8]
 8014fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014fc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014fc4:	429a      	cmp	r2, r3
 8014fc6:	d101      	bne.n	8014fcc <f_mkdir+0x154>
 8014fc8:	2300      	movs	r3, #0
 8014fca:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8014fcc:	68b8      	ldr	r0, [r7, #8]
 8014fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014fd0:	3320      	adds	r3, #32
 8014fd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014fd4:	4619      	mov	r1, r3
 8014fd6:	f7ff f9d5 	bl	8014384 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8014fda:	68bb      	ldr	r3, [r7, #8]
 8014fdc:	895b      	ldrh	r3, [r3, #10]
 8014fde:	653b      	str	r3, [r7, #80]	; 0x50
 8014fe0:	e01b      	b.n	801501a <f_mkdir+0x1a2>
					fs->winsect = dsc++;
 8014fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014fe4:	1c5a      	adds	r2, r3, #1
 8014fe6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8014fe8:	68ba      	ldr	r2, [r7, #8]
 8014fea:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 8014fec:	68bb      	ldr	r3, [r7, #8]
 8014fee:	2201      	movs	r2, #1
 8014ff0:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8014ff2:	68bb      	ldr	r3, [r7, #8]
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	f7fe fc8f 	bl	8013918 <sync_window>
 8014ffa:	4603      	mov	r3, r0
 8014ffc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8015000:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015004:	2b00      	cmp	r3, #0
 8015006:	d10c      	bne.n	8015022 <f_mkdir+0x1aa>
					mem_set(dir, 0, SS(fs));
 8015008:	f44f 7200 	mov.w	r2, #512	; 0x200
 801500c:	2100      	movs	r1, #0
 801500e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015010:	f7fe fc01 	bl	8013816 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8015014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015016:	3b01      	subs	r3, #1
 8015018:	653b      	str	r3, [r7, #80]	; 0x50
 801501a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801501c:	2b00      	cmp	r3, #0
 801501e:	d1e0      	bne.n	8014fe2 <f_mkdir+0x16a>
 8015020:	e000      	b.n	8015024 <f_mkdir+0x1ac>
					if (res != FR_OK) break;
 8015022:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8015024:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015028:	2b00      	cmp	r3, #0
 801502a:	d107      	bne.n	801503c <f_mkdir+0x1c4>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801502c:	f107 030c 	add.w	r3, r7, #12
 8015030:	4618      	mov	r0, r3
 8015032:	f7ff fa1c 	bl	801446e <dir_register>
 8015036:	4603      	mov	r3, r0
 8015038:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 801503c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015040:	2b00      	cmp	r3, #0
 8015042:	d120      	bne.n	8015086 <f_mkdir+0x20e>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8015044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015046:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8015048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801504a:	3316      	adds	r3, #22
 801504c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801504e:	4618      	mov	r0, r3
 8015050:	f7fe fb94 	bl	801377c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8015054:	68bb      	ldr	r3, [r7, #8]
 8015056:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015058:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801505a:	4618      	mov	r0, r3
 801505c:	f7ff f992 	bl	8014384 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8015060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015062:	330b      	adds	r3, #11
 8015064:	2210      	movs	r2, #16
 8015066:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8015068:	68bb      	ldr	r3, [r7, #8]
 801506a:	2201      	movs	r2, #1
 801506c:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 801506e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015072:	2b00      	cmp	r3, #0
 8015074:	d10e      	bne.n	8015094 <f_mkdir+0x21c>
					res = sync_fs(fs);
 8015076:	68bb      	ldr	r3, [r7, #8]
 8015078:	4618      	mov	r0, r3
 801507a:	f7fe fcbf 	bl	80139fc <sync_fs>
 801507e:	4603      	mov	r3, r0
 8015080:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8015084:	e006      	b.n	8015094 <f_mkdir+0x21c>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8015086:	f107 030c 	add.w	r3, r7, #12
 801508a:	2200      	movs	r2, #0
 801508c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801508e:	4618      	mov	r0, r3
 8015090:	f7fe fed5 	bl	8013e3e <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8015094:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8015098:	4618      	mov	r0, r3
 801509a:	3758      	adds	r7, #88	; 0x58
 801509c:	46bd      	mov	sp, r7
 801509e:	bd80      	pop	{r7, pc}

080150a0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80150a0:	b480      	push	{r7}
 80150a2:	b087      	sub	sp, #28
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	60f8      	str	r0, [r7, #12]
 80150a8:	60b9      	str	r1, [r7, #8]
 80150aa:	4613      	mov	r3, r2
 80150ac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80150ae:	2301      	movs	r3, #1
 80150b0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80150b2:	2300      	movs	r3, #0
 80150b4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80150b6:	4b1f      	ldr	r3, [pc, #124]	; (8015134 <FATFS_LinkDriverEx+0x94>)
 80150b8:	7a5b      	ldrb	r3, [r3, #9]
 80150ba:	b2db      	uxtb	r3, r3
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d131      	bne.n	8015124 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80150c0:	4b1c      	ldr	r3, [pc, #112]	; (8015134 <FATFS_LinkDriverEx+0x94>)
 80150c2:	7a5b      	ldrb	r3, [r3, #9]
 80150c4:	b2db      	uxtb	r3, r3
 80150c6:	461a      	mov	r2, r3
 80150c8:	4b1a      	ldr	r3, [pc, #104]	; (8015134 <FATFS_LinkDriverEx+0x94>)
 80150ca:	2100      	movs	r1, #0
 80150cc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80150ce:	4b19      	ldr	r3, [pc, #100]	; (8015134 <FATFS_LinkDriverEx+0x94>)
 80150d0:	7a5b      	ldrb	r3, [r3, #9]
 80150d2:	b2db      	uxtb	r3, r3
 80150d4:	4a17      	ldr	r2, [pc, #92]	; (8015134 <FATFS_LinkDriverEx+0x94>)
 80150d6:	009b      	lsls	r3, r3, #2
 80150d8:	4413      	add	r3, r2
 80150da:	68fa      	ldr	r2, [r7, #12]
 80150dc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80150de:	4b15      	ldr	r3, [pc, #84]	; (8015134 <FATFS_LinkDriverEx+0x94>)
 80150e0:	7a5b      	ldrb	r3, [r3, #9]
 80150e2:	b2db      	uxtb	r3, r3
 80150e4:	461a      	mov	r2, r3
 80150e6:	4b13      	ldr	r3, [pc, #76]	; (8015134 <FATFS_LinkDriverEx+0x94>)
 80150e8:	4413      	add	r3, r2
 80150ea:	79fa      	ldrb	r2, [r7, #7]
 80150ec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80150ee:	4b11      	ldr	r3, [pc, #68]	; (8015134 <FATFS_LinkDriverEx+0x94>)
 80150f0:	7a5b      	ldrb	r3, [r3, #9]
 80150f2:	b2db      	uxtb	r3, r3
 80150f4:	1c5a      	adds	r2, r3, #1
 80150f6:	b2d1      	uxtb	r1, r2
 80150f8:	4a0e      	ldr	r2, [pc, #56]	; (8015134 <FATFS_LinkDriverEx+0x94>)
 80150fa:	7251      	strb	r1, [r2, #9]
 80150fc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80150fe:	7dbb      	ldrb	r3, [r7, #22]
 8015100:	3330      	adds	r3, #48	; 0x30
 8015102:	b2da      	uxtb	r2, r3
 8015104:	68bb      	ldr	r3, [r7, #8]
 8015106:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015108:	68bb      	ldr	r3, [r7, #8]
 801510a:	3301      	adds	r3, #1
 801510c:	223a      	movs	r2, #58	; 0x3a
 801510e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015110:	68bb      	ldr	r3, [r7, #8]
 8015112:	3302      	adds	r3, #2
 8015114:	222f      	movs	r2, #47	; 0x2f
 8015116:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015118:	68bb      	ldr	r3, [r7, #8]
 801511a:	3303      	adds	r3, #3
 801511c:	2200      	movs	r2, #0
 801511e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015120:	2300      	movs	r3, #0
 8015122:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015124:	7dfb      	ldrb	r3, [r7, #23]
}
 8015126:	4618      	mov	r0, r3
 8015128:	371c      	adds	r7, #28
 801512a:	46bd      	mov	sp, r7
 801512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015130:	4770      	bx	lr
 8015132:	bf00      	nop
 8015134:	240010c0 	.word	0x240010c0

08015138 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015138:	b580      	push	{r7, lr}
 801513a:	b082      	sub	sp, #8
 801513c:	af00      	add	r7, sp, #0
 801513e:	6078      	str	r0, [r7, #4]
 8015140:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015142:	2200      	movs	r2, #0
 8015144:	6839      	ldr	r1, [r7, #0]
 8015146:	6878      	ldr	r0, [r7, #4]
 8015148:	f7ff ffaa 	bl	80150a0 <FATFS_LinkDriverEx>
 801514c:	4603      	mov	r3, r0
}
 801514e:	4618      	mov	r0, r3
 8015150:	3708      	adds	r7, #8
 8015152:	46bd      	mov	sp, r7
 8015154:	bd80      	pop	{r7, pc}

08015156 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8015156:	b480      	push	{r7}
 8015158:	b085      	sub	sp, #20
 801515a:	af00      	add	r7, sp, #0
 801515c:	4603      	mov	r3, r0
 801515e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8015160:	2300      	movs	r3, #0
 8015162:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8015164:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015168:	2b84      	cmp	r3, #132	; 0x84
 801516a:	d005      	beq.n	8015178 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801516c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	4413      	add	r3, r2
 8015174:	3303      	adds	r3, #3
 8015176:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8015178:	68fb      	ldr	r3, [r7, #12]
}
 801517a:	4618      	mov	r0, r3
 801517c:	3714      	adds	r7, #20
 801517e:	46bd      	mov	sp, r7
 8015180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015184:	4770      	bx	lr

08015186 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8015186:	b480      	push	{r7}
 8015188:	b083      	sub	sp, #12
 801518a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801518c:	f3ef 8305 	mrs	r3, IPSR
 8015190:	607b      	str	r3, [r7, #4]
  return(result);
 8015192:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8015194:	2b00      	cmp	r3, #0
 8015196:	bf14      	ite	ne
 8015198:	2301      	movne	r3, #1
 801519a:	2300      	moveq	r3, #0
 801519c:	b2db      	uxtb	r3, r3
}
 801519e:	4618      	mov	r0, r3
 80151a0:	370c      	adds	r7, #12
 80151a2:	46bd      	mov	sp, r7
 80151a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a8:	4770      	bx	lr

080151aa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80151aa:	b580      	push	{r7, lr}
 80151ac:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80151ae:	f001 fc55 	bl	8016a5c <vTaskStartScheduler>
  
  return osOK;
 80151b2:	2300      	movs	r3, #0
}
 80151b4:	4618      	mov	r0, r3
 80151b6:	bd80      	pop	{r7, pc}

080151b8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80151b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151ba:	b089      	sub	sp, #36	; 0x24
 80151bc:	af04      	add	r7, sp, #16
 80151be:	6078      	str	r0, [r7, #4]
 80151c0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	695b      	ldr	r3, [r3, #20]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d020      	beq.n	801520c <osThreadCreate+0x54>
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	699b      	ldr	r3, [r3, #24]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d01c      	beq.n	801520c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	685c      	ldr	r4, [r3, #4]
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	681d      	ldr	r5, [r3, #0]
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	691e      	ldr	r6, [r3, #16]
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80151e4:	4618      	mov	r0, r3
 80151e6:	f7ff ffb6 	bl	8015156 <makeFreeRtosPriority>
 80151ea:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	695b      	ldr	r3, [r3, #20]
 80151f0:	687a      	ldr	r2, [r7, #4]
 80151f2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80151f4:	9202      	str	r2, [sp, #8]
 80151f6:	9301      	str	r3, [sp, #4]
 80151f8:	9100      	str	r1, [sp, #0]
 80151fa:	683b      	ldr	r3, [r7, #0]
 80151fc:	4632      	mov	r2, r6
 80151fe:	4629      	mov	r1, r5
 8015200:	4620      	mov	r0, r4
 8015202:	f001 fa4d 	bl	80166a0 <xTaskCreateStatic>
 8015206:	4603      	mov	r3, r0
 8015208:	60fb      	str	r3, [r7, #12]
 801520a:	e01c      	b.n	8015246 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	685c      	ldr	r4, [r3, #4]
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015218:	b29e      	uxth	r6, r3
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8015220:	4618      	mov	r0, r3
 8015222:	f7ff ff98 	bl	8015156 <makeFreeRtosPriority>
 8015226:	4602      	mov	r2, r0
 8015228:	f107 030c 	add.w	r3, r7, #12
 801522c:	9301      	str	r3, [sp, #4]
 801522e:	9200      	str	r2, [sp, #0]
 8015230:	683b      	ldr	r3, [r7, #0]
 8015232:	4632      	mov	r2, r6
 8015234:	4629      	mov	r1, r5
 8015236:	4620      	mov	r0, r4
 8015238:	f001 fa8f 	bl	801675a <xTaskCreate>
 801523c:	4603      	mov	r3, r0
 801523e:	2b01      	cmp	r3, #1
 8015240:	d001      	beq.n	8015246 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8015242:	2300      	movs	r3, #0
 8015244:	e000      	b.n	8015248 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8015246:	68fb      	ldr	r3, [r7, #12]
}
 8015248:	4618      	mov	r0, r3
 801524a:	3714      	adds	r7, #20
 801524c:	46bd      	mov	sp, r7
 801524e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015250 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8015250:	b580      	push	{r7, lr}
 8015252:	b084      	sub	sp, #16
 8015254:	af00      	add	r7, sp, #0
 8015256:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	2b00      	cmp	r3, #0
 8015260:	d001      	beq.n	8015266 <osDelay+0x16>
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	e000      	b.n	8015268 <osDelay+0x18>
 8015266:	2301      	movs	r3, #1
 8015268:	4618      	mov	r0, r3
 801526a:	f001 fbc3 	bl	80169f4 <vTaskDelay>
  
  return osOK;
 801526e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8015270:	4618      	mov	r0, r3
 8015272:	3710      	adds	r7, #16
 8015274:	46bd      	mov	sp, r7
 8015276:	bd80      	pop	{r7, pc}

08015278 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8015278:	b580      	push	{r7, lr}
 801527a:	b086      	sub	sp, #24
 801527c:	af02      	add	r7, sp, #8
 801527e:	60f8      	str	r0, [r7, #12]
 8015280:	460b      	mov	r3, r1
 8015282:	607a      	str	r2, [r7, #4]
 8015284:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	685b      	ldr	r3, [r3, #4]
 801528a:	2b00      	cmp	r3, #0
 801528c:	d013      	beq.n	80152b6 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 801528e:	7afb      	ldrb	r3, [r7, #11]
 8015290:	2b01      	cmp	r3, #1
 8015292:	d101      	bne.n	8015298 <osTimerCreate+0x20>
 8015294:	2101      	movs	r1, #1
 8015296:	e000      	b.n	801529a <osTimerCreate+0x22>
 8015298:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 801529e:	68fa      	ldr	r2, [r7, #12]
 80152a0:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80152a2:	9201      	str	r2, [sp, #4]
 80152a4:	9300      	str	r3, [sp, #0]
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	460a      	mov	r2, r1
 80152aa:	2101      	movs	r1, #1
 80152ac:	480b      	ldr	r0, [pc, #44]	; (80152dc <osTimerCreate+0x64>)
 80152ae:	f002 fab4 	bl	801781a <xTimerCreateStatic>
 80152b2:	4603      	mov	r3, r0
 80152b4:	e00e      	b.n	80152d4 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 80152b6:	7afb      	ldrb	r3, [r7, #11]
 80152b8:	2b01      	cmp	r3, #1
 80152ba:	d101      	bne.n	80152c0 <osTimerCreate+0x48>
 80152bc:	2201      	movs	r2, #1
 80152be:	e000      	b.n	80152c2 <osTimerCreate+0x4a>
 80152c0:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 80152c6:	9300      	str	r3, [sp, #0]
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	2101      	movs	r1, #1
 80152cc:	4803      	ldr	r0, [pc, #12]	; (80152dc <osTimerCreate+0x64>)
 80152ce:	f002 fa83 	bl	80177d8 <xTimerCreate>
 80152d2:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 80152d4:	4618      	mov	r0, r3
 80152d6:	3710      	adds	r7, #16
 80152d8:	46bd      	mov	sp, r7
 80152da:	bd80      	pop	{r7, pc}
 80152dc:	08023f60 	.word	0x08023f60

080152e0 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 80152e0:	b580      	push	{r7, lr}
 80152e2:	b088      	sub	sp, #32
 80152e4:	af02      	add	r7, sp, #8
 80152e6:	6078      	str	r0, [r7, #4]
 80152e8:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 80152ea:	2300      	movs	r3, #0
 80152ec:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80152ee:	2300      	movs	r3, #0
 80152f0:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80152f2:	683b      	ldr	r3, [r7, #0]
 80152f4:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 80152f6:	693b      	ldr	r3, [r7, #16]
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d101      	bne.n	8015300 <osTimerStart+0x20>
    ticks = 1;
 80152fc:	2301      	movs	r3, #1
 80152fe:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8015300:	f7ff ff41 	bl	8015186 <inHandlerMode>
 8015304:	4603      	mov	r3, r0
 8015306:	2b00      	cmp	r3, #0
 8015308:	d01a      	beq.n	8015340 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 801530a:	f107 030c 	add.w	r3, r7, #12
 801530e:	2200      	movs	r2, #0
 8015310:	9200      	str	r2, [sp, #0]
 8015312:	693a      	ldr	r2, [r7, #16]
 8015314:	2109      	movs	r1, #9
 8015316:	6878      	ldr	r0, [r7, #4]
 8015318:	f002 faf8 	bl	801790c <xTimerGenericCommand>
 801531c:	4603      	mov	r3, r0
 801531e:	2b01      	cmp	r3, #1
 8015320:	d002      	beq.n	8015328 <osTimerStart+0x48>
    {
      result = osErrorOS;
 8015322:	23ff      	movs	r3, #255	; 0xff
 8015324:	617b      	str	r3, [r7, #20]
 8015326:	e018      	b.n	801535a <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d015      	beq.n	801535a <osTimerStart+0x7a>
 801532e:	4b0d      	ldr	r3, [pc, #52]	; (8015364 <osTimerStart+0x84>)
 8015330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015334:	601a      	str	r2, [r3, #0]
 8015336:	f3bf 8f4f 	dsb	sy
 801533a:	f3bf 8f6f 	isb	sy
 801533e:	e00c      	b.n	801535a <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8015340:	2300      	movs	r3, #0
 8015342:	9300      	str	r3, [sp, #0]
 8015344:	2300      	movs	r3, #0
 8015346:	693a      	ldr	r2, [r7, #16]
 8015348:	2104      	movs	r1, #4
 801534a:	6878      	ldr	r0, [r7, #4]
 801534c:	f002 fade 	bl	801790c <xTimerGenericCommand>
 8015350:	4603      	mov	r3, r0
 8015352:	2b01      	cmp	r3, #1
 8015354:	d001      	beq.n	801535a <osTimerStart+0x7a>
      result = osErrorOS;
 8015356:	23ff      	movs	r3, #255	; 0xff
 8015358:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 801535a:	697b      	ldr	r3, [r7, #20]
}
 801535c:	4618      	mov	r0, r3
 801535e:	3718      	adds	r7, #24
 8015360:	46bd      	mov	sp, r7
 8015362:	bd80      	pop	{r7, pc}
 8015364:	e000ed04 	.word	0xe000ed04

08015368 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8015368:	b580      	push	{r7, lr}
 801536a:	b084      	sub	sp, #16
 801536c:	af00      	add	r7, sp, #0
 801536e:	6078      	str	r0, [r7, #4]
 8015370:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8015372:	2300      	movs	r3, #0
 8015374:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	2b00      	cmp	r3, #0
 801537a:	d101      	bne.n	8015380 <osMutexWait+0x18>
    return osErrorParameter;
 801537c:	2380      	movs	r3, #128	; 0x80
 801537e:	e03a      	b.n	80153f6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8015380:	2300      	movs	r3, #0
 8015382:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8015384:	683b      	ldr	r3, [r7, #0]
 8015386:	f1b3 3fff 	cmp.w	r3, #4294967295
 801538a:	d103      	bne.n	8015394 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 801538c:	f04f 33ff 	mov.w	r3, #4294967295
 8015390:	60fb      	str	r3, [r7, #12]
 8015392:	e009      	b.n	80153a8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8015394:	683b      	ldr	r3, [r7, #0]
 8015396:	2b00      	cmp	r3, #0
 8015398:	d006      	beq.n	80153a8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801539a:	683b      	ldr	r3, [r7, #0]
 801539c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d101      	bne.n	80153a8 <osMutexWait+0x40>
      ticks = 1;
 80153a4:	2301      	movs	r3, #1
 80153a6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80153a8:	f7ff feed 	bl	8015186 <inHandlerMode>
 80153ac:	4603      	mov	r3, r0
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d017      	beq.n	80153e2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80153b2:	f107 0308 	add.w	r3, r7, #8
 80153b6:	461a      	mov	r2, r3
 80153b8:	2100      	movs	r1, #0
 80153ba:	6878      	ldr	r0, [r7, #4]
 80153bc:	f000 ff6a 	bl	8016294 <xQueueReceiveFromISR>
 80153c0:	4603      	mov	r3, r0
 80153c2:	2b01      	cmp	r3, #1
 80153c4:	d001      	beq.n	80153ca <osMutexWait+0x62>
      return osErrorOS;
 80153c6:	23ff      	movs	r3, #255	; 0xff
 80153c8:	e015      	b.n	80153f6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80153ca:	68bb      	ldr	r3, [r7, #8]
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d011      	beq.n	80153f4 <osMutexWait+0x8c>
 80153d0:	4b0b      	ldr	r3, [pc, #44]	; (8015400 <osMutexWait+0x98>)
 80153d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80153d6:	601a      	str	r2, [r3, #0]
 80153d8:	f3bf 8f4f 	dsb	sy
 80153dc:	f3bf 8f6f 	isb	sy
 80153e0:	e008      	b.n	80153f4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80153e2:	68f9      	ldr	r1, [r7, #12]
 80153e4:	6878      	ldr	r0, [r7, #4]
 80153e6:	f000 fe49 	bl	801607c <xQueueSemaphoreTake>
 80153ea:	4603      	mov	r3, r0
 80153ec:	2b01      	cmp	r3, #1
 80153ee:	d001      	beq.n	80153f4 <osMutexWait+0x8c>
    return osErrorOS;
 80153f0:	23ff      	movs	r3, #255	; 0xff
 80153f2:	e000      	b.n	80153f6 <osMutexWait+0x8e>
  }
  
  return osOK;
 80153f4:	2300      	movs	r3, #0
}
 80153f6:	4618      	mov	r0, r3
 80153f8:	3710      	adds	r7, #16
 80153fa:	46bd      	mov	sp, r7
 80153fc:	bd80      	pop	{r7, pc}
 80153fe:	bf00      	nop
 8015400:	e000ed04 	.word	0xe000ed04

08015404 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8015404:	b580      	push	{r7, lr}
 8015406:	b084      	sub	sp, #16
 8015408:	af00      	add	r7, sp, #0
 801540a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 801540c:	2300      	movs	r3, #0
 801540e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8015410:	2300      	movs	r3, #0
 8015412:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8015414:	f7ff feb7 	bl	8015186 <inHandlerMode>
 8015418:	4603      	mov	r3, r0
 801541a:	2b00      	cmp	r3, #0
 801541c:	d016      	beq.n	801544c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 801541e:	f107 0308 	add.w	r3, r7, #8
 8015422:	4619      	mov	r1, r3
 8015424:	6878      	ldr	r0, [r7, #4]
 8015426:	f000 fcbc 	bl	8015da2 <xQueueGiveFromISR>
 801542a:	4603      	mov	r3, r0
 801542c:	2b01      	cmp	r3, #1
 801542e:	d001      	beq.n	8015434 <osMutexRelease+0x30>
      return osErrorOS;
 8015430:	23ff      	movs	r3, #255	; 0xff
 8015432:	e017      	b.n	8015464 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8015434:	68bb      	ldr	r3, [r7, #8]
 8015436:	2b00      	cmp	r3, #0
 8015438:	d013      	beq.n	8015462 <osMutexRelease+0x5e>
 801543a:	4b0c      	ldr	r3, [pc, #48]	; (801546c <osMutexRelease+0x68>)
 801543c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015440:	601a      	str	r2, [r3, #0]
 8015442:	f3bf 8f4f 	dsb	sy
 8015446:	f3bf 8f6f 	isb	sy
 801544a:	e00a      	b.n	8015462 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 801544c:	2300      	movs	r3, #0
 801544e:	2200      	movs	r2, #0
 8015450:	2100      	movs	r1, #0
 8015452:	6878      	ldr	r0, [r7, #4]
 8015454:	f000 fb0c 	bl	8015a70 <xQueueGenericSend>
 8015458:	4603      	mov	r3, r0
 801545a:	2b01      	cmp	r3, #1
 801545c:	d001      	beq.n	8015462 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 801545e:	23ff      	movs	r3, #255	; 0xff
 8015460:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8015462:	68fb      	ldr	r3, [r7, #12]
}
 8015464:	4618      	mov	r0, r3
 8015466:	3710      	adds	r7, #16
 8015468:	46bd      	mov	sp, r7
 801546a:	bd80      	pop	{r7, pc}
 801546c:	e000ed04 	.word	0xe000ed04

08015470 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8015470:	b580      	push	{r7, lr}
 8015472:	b084      	sub	sp, #16
 8015474:	af00      	add	r7, sp, #0
 8015476:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8015478:	2300      	movs	r3, #0
 801547a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 801547c:	2300      	movs	r3, #0
 801547e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8015480:	f7ff fe81 	bl	8015186 <inHandlerMode>
 8015484:	4603      	mov	r3, r0
 8015486:	2b00      	cmp	r3, #0
 8015488:	d016      	beq.n	80154b8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801548a:	f107 0308 	add.w	r3, r7, #8
 801548e:	4619      	mov	r1, r3
 8015490:	6878      	ldr	r0, [r7, #4]
 8015492:	f000 fc86 	bl	8015da2 <xQueueGiveFromISR>
 8015496:	4603      	mov	r3, r0
 8015498:	2b01      	cmp	r3, #1
 801549a:	d001      	beq.n	80154a0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 801549c:	23ff      	movs	r3, #255	; 0xff
 801549e:	e017      	b.n	80154d0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80154a0:	68bb      	ldr	r3, [r7, #8]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d013      	beq.n	80154ce <osSemaphoreRelease+0x5e>
 80154a6:	4b0c      	ldr	r3, [pc, #48]	; (80154d8 <osSemaphoreRelease+0x68>)
 80154a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80154ac:	601a      	str	r2, [r3, #0]
 80154ae:	f3bf 8f4f 	dsb	sy
 80154b2:	f3bf 8f6f 	isb	sy
 80154b6:	e00a      	b.n	80154ce <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80154b8:	2300      	movs	r3, #0
 80154ba:	2200      	movs	r2, #0
 80154bc:	2100      	movs	r1, #0
 80154be:	6878      	ldr	r0, [r7, #4]
 80154c0:	f000 fad6 	bl	8015a70 <xQueueGenericSend>
 80154c4:	4603      	mov	r3, r0
 80154c6:	2b01      	cmp	r3, #1
 80154c8:	d001      	beq.n	80154ce <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80154ca:	23ff      	movs	r3, #255	; 0xff
 80154cc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80154ce:	68fb      	ldr	r3, [r7, #12]
}
 80154d0:	4618      	mov	r0, r3
 80154d2:	3710      	adds	r7, #16
 80154d4:	46bd      	mov	sp, r7
 80154d6:	bd80      	pop	{r7, pc}
 80154d8:	e000ed04 	.word	0xe000ed04

080154dc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80154dc:	b590      	push	{r4, r7, lr}
 80154de:	b085      	sub	sp, #20
 80154e0:	af02      	add	r7, sp, #8
 80154e2:	6078      	str	r0, [r7, #4]
 80154e4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	689b      	ldr	r3, [r3, #8]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d011      	beq.n	8015512 <osMessageCreate+0x36>
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	68db      	ldr	r3, [r3, #12]
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d00d      	beq.n	8015512 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	6818      	ldr	r0, [r3, #0]
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	6859      	ldr	r1, [r3, #4]
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	689a      	ldr	r2, [r3, #8]
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	68db      	ldr	r3, [r3, #12]
 8015506:	2400      	movs	r4, #0
 8015508:	9400      	str	r4, [sp, #0]
 801550a:	f000 f9df 	bl	80158cc <xQueueGenericCreateStatic>
 801550e:	4603      	mov	r3, r0
 8015510:	e008      	b.n	8015524 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	6818      	ldr	r0, [r3, #0]
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	685b      	ldr	r3, [r3, #4]
 801551a:	2200      	movs	r2, #0
 801551c:	4619      	mov	r1, r3
 801551e:	f000 fa4d 	bl	80159bc <xQueueGenericCreate>
 8015522:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8015524:	4618      	mov	r0, r3
 8015526:	370c      	adds	r7, #12
 8015528:	46bd      	mov	sp, r7
 801552a:	bd90      	pop	{r4, r7, pc}

0801552c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 801552c:	b580      	push	{r7, lr}
 801552e:	b086      	sub	sp, #24
 8015530:	af00      	add	r7, sp, #0
 8015532:	60f8      	str	r0, [r7, #12]
 8015534:	60b9      	str	r1, [r7, #8]
 8015536:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8015538:	2300      	movs	r3, #0
 801553a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8015540:	697b      	ldr	r3, [r7, #20]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d101      	bne.n	801554a <osMessagePut+0x1e>
    ticks = 1;
 8015546:	2301      	movs	r3, #1
 8015548:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 801554a:	f7ff fe1c 	bl	8015186 <inHandlerMode>
 801554e:	4603      	mov	r3, r0
 8015550:	2b00      	cmp	r3, #0
 8015552:	d018      	beq.n	8015586 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8015554:	f107 0210 	add.w	r2, r7, #16
 8015558:	f107 0108 	add.w	r1, r7, #8
 801555c:	2300      	movs	r3, #0
 801555e:	68f8      	ldr	r0, [r7, #12]
 8015560:	f000 fb84 	bl	8015c6c <xQueueGenericSendFromISR>
 8015564:	4603      	mov	r3, r0
 8015566:	2b01      	cmp	r3, #1
 8015568:	d001      	beq.n	801556e <osMessagePut+0x42>
      return osErrorOS;
 801556a:	23ff      	movs	r3, #255	; 0xff
 801556c:	e018      	b.n	80155a0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801556e:	693b      	ldr	r3, [r7, #16]
 8015570:	2b00      	cmp	r3, #0
 8015572:	d014      	beq.n	801559e <osMessagePut+0x72>
 8015574:	4b0c      	ldr	r3, [pc, #48]	; (80155a8 <osMessagePut+0x7c>)
 8015576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801557a:	601a      	str	r2, [r3, #0]
 801557c:	f3bf 8f4f 	dsb	sy
 8015580:	f3bf 8f6f 	isb	sy
 8015584:	e00b      	b.n	801559e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8015586:	f107 0108 	add.w	r1, r7, #8
 801558a:	2300      	movs	r3, #0
 801558c:	697a      	ldr	r2, [r7, #20]
 801558e:	68f8      	ldr	r0, [r7, #12]
 8015590:	f000 fa6e 	bl	8015a70 <xQueueGenericSend>
 8015594:	4603      	mov	r3, r0
 8015596:	2b01      	cmp	r3, #1
 8015598:	d001      	beq.n	801559e <osMessagePut+0x72>
      return osErrorOS;
 801559a:	23ff      	movs	r3, #255	; 0xff
 801559c:	e000      	b.n	80155a0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 801559e:	2300      	movs	r3, #0
}
 80155a0:	4618      	mov	r0, r3
 80155a2:	3718      	adds	r7, #24
 80155a4:	46bd      	mov	sp, r7
 80155a6:	bd80      	pop	{r7, pc}
 80155a8:	e000ed04 	.word	0xe000ed04

080155ac <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80155ac:	b590      	push	{r4, r7, lr}
 80155ae:	b08b      	sub	sp, #44	; 0x2c
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	60f8      	str	r0, [r7, #12]
 80155b4:	60b9      	str	r1, [r7, #8]
 80155b6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80155b8:	68bb      	ldr	r3, [r7, #8]
 80155ba:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80155bc:	2300      	movs	r3, #0
 80155be:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80155c0:	68bb      	ldr	r3, [r7, #8]
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d10a      	bne.n	80155dc <osMessageGet+0x30>
    event.status = osErrorParameter;
 80155c6:	2380      	movs	r3, #128	; 0x80
 80155c8:	617b      	str	r3, [r7, #20]
    return event;
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	461c      	mov	r4, r3
 80155ce:	f107 0314 	add.w	r3, r7, #20
 80155d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80155d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80155da:	e054      	b.n	8015686 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80155dc:	2300      	movs	r3, #0
 80155de:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80155e0:	2300      	movs	r3, #0
 80155e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155ea:	d103      	bne.n	80155f4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80155ec:	f04f 33ff 	mov.w	r3, #4294967295
 80155f0:	627b      	str	r3, [r7, #36]	; 0x24
 80155f2:	e009      	b.n	8015608 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d006      	beq.n	8015608 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80155fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015600:	2b00      	cmp	r3, #0
 8015602:	d101      	bne.n	8015608 <osMessageGet+0x5c>
      ticks = 1;
 8015604:	2301      	movs	r3, #1
 8015606:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8015608:	f7ff fdbd 	bl	8015186 <inHandlerMode>
 801560c:	4603      	mov	r3, r0
 801560e:	2b00      	cmp	r3, #0
 8015610:	d01c      	beq.n	801564c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8015612:	f107 0220 	add.w	r2, r7, #32
 8015616:	f107 0314 	add.w	r3, r7, #20
 801561a:	3304      	adds	r3, #4
 801561c:	4619      	mov	r1, r3
 801561e:	68b8      	ldr	r0, [r7, #8]
 8015620:	f000 fe38 	bl	8016294 <xQueueReceiveFromISR>
 8015624:	4603      	mov	r3, r0
 8015626:	2b01      	cmp	r3, #1
 8015628:	d102      	bne.n	8015630 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 801562a:	2310      	movs	r3, #16
 801562c:	617b      	str	r3, [r7, #20]
 801562e:	e001      	b.n	8015634 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8015630:	2300      	movs	r3, #0
 8015632:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8015634:	6a3b      	ldr	r3, [r7, #32]
 8015636:	2b00      	cmp	r3, #0
 8015638:	d01d      	beq.n	8015676 <osMessageGet+0xca>
 801563a:	4b15      	ldr	r3, [pc, #84]	; (8015690 <osMessageGet+0xe4>)
 801563c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015640:	601a      	str	r2, [r3, #0]
 8015642:	f3bf 8f4f 	dsb	sy
 8015646:	f3bf 8f6f 	isb	sy
 801564a:	e014      	b.n	8015676 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 801564c:	f107 0314 	add.w	r3, r7, #20
 8015650:	3304      	adds	r3, #4
 8015652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015654:	4619      	mov	r1, r3
 8015656:	68b8      	ldr	r0, [r7, #8]
 8015658:	f000 fc30 	bl	8015ebc <xQueueReceive>
 801565c:	4603      	mov	r3, r0
 801565e:	2b01      	cmp	r3, #1
 8015660:	d102      	bne.n	8015668 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8015662:	2310      	movs	r3, #16
 8015664:	617b      	str	r3, [r7, #20]
 8015666:	e006      	b.n	8015676 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8015668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801566a:	2b00      	cmp	r3, #0
 801566c:	d101      	bne.n	8015672 <osMessageGet+0xc6>
 801566e:	2300      	movs	r3, #0
 8015670:	e000      	b.n	8015674 <osMessageGet+0xc8>
 8015672:	2340      	movs	r3, #64	; 0x40
 8015674:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	461c      	mov	r4, r3
 801567a:	f107 0314 	add.w	r3, r7, #20
 801567e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015682:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8015686:	68f8      	ldr	r0, [r7, #12]
 8015688:	372c      	adds	r7, #44	; 0x2c
 801568a:	46bd      	mov	sp, r7
 801568c:	bd90      	pop	{r4, r7, pc}
 801568e:	bf00      	nop
 8015690:	e000ed04 	.word	0xe000ed04

08015694 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015694:	b480      	push	{r7}
 8015696:	b083      	sub	sp, #12
 8015698:	af00      	add	r7, sp, #0
 801569a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	f103 0208 	add.w	r2, r3, #8
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	f04f 32ff 	mov.w	r2, #4294967295
 80156ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	f103 0208 	add.w	r2, r3, #8
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	f103 0208 	add.w	r2, r3, #8
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	2200      	movs	r2, #0
 80156c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80156c8:	bf00      	nop
 80156ca:	370c      	adds	r7, #12
 80156cc:	46bd      	mov	sp, r7
 80156ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d2:	4770      	bx	lr

080156d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80156d4:	b480      	push	{r7}
 80156d6:	b083      	sub	sp, #12
 80156d8:	af00      	add	r7, sp, #0
 80156da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	2200      	movs	r2, #0
 80156e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80156e2:	bf00      	nop
 80156e4:	370c      	adds	r7, #12
 80156e6:	46bd      	mov	sp, r7
 80156e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ec:	4770      	bx	lr

080156ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80156ee:	b480      	push	{r7}
 80156f0:	b085      	sub	sp, #20
 80156f2:	af00      	add	r7, sp, #0
 80156f4:	6078      	str	r0, [r7, #4]
 80156f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	685b      	ldr	r3, [r3, #4]
 80156fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80156fe:	683b      	ldr	r3, [r7, #0]
 8015700:	68fa      	ldr	r2, [r7, #12]
 8015702:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	689a      	ldr	r2, [r3, #8]
 8015708:	683b      	ldr	r3, [r7, #0]
 801570a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801570c:	68fb      	ldr	r3, [r7, #12]
 801570e:	689b      	ldr	r3, [r3, #8]
 8015710:	683a      	ldr	r2, [r7, #0]
 8015712:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	683a      	ldr	r2, [r7, #0]
 8015718:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801571a:	683b      	ldr	r3, [r7, #0]
 801571c:	687a      	ldr	r2, [r7, #4]
 801571e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	1c5a      	adds	r2, r3, #1
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	601a      	str	r2, [r3, #0]
}
 801572a:	bf00      	nop
 801572c:	3714      	adds	r7, #20
 801572e:	46bd      	mov	sp, r7
 8015730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015734:	4770      	bx	lr

08015736 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015736:	b480      	push	{r7}
 8015738:	b085      	sub	sp, #20
 801573a:	af00      	add	r7, sp, #0
 801573c:	6078      	str	r0, [r7, #4]
 801573e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8015740:	683b      	ldr	r3, [r7, #0]
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8015746:	68bb      	ldr	r3, [r7, #8]
 8015748:	f1b3 3fff 	cmp.w	r3, #4294967295
 801574c:	d103      	bne.n	8015756 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	691b      	ldr	r3, [r3, #16]
 8015752:	60fb      	str	r3, [r7, #12]
 8015754:	e00c      	b.n	8015770 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	3308      	adds	r3, #8
 801575a:	60fb      	str	r3, [r7, #12]
 801575c:	e002      	b.n	8015764 <vListInsert+0x2e>
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	685b      	ldr	r3, [r3, #4]
 8015762:	60fb      	str	r3, [r7, #12]
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	685b      	ldr	r3, [r3, #4]
 8015768:	681b      	ldr	r3, [r3, #0]
 801576a:	68ba      	ldr	r2, [r7, #8]
 801576c:	429a      	cmp	r2, r3
 801576e:	d2f6      	bcs.n	801575e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	685a      	ldr	r2, [r3, #4]
 8015774:	683b      	ldr	r3, [r7, #0]
 8015776:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015778:	683b      	ldr	r3, [r7, #0]
 801577a:	685b      	ldr	r3, [r3, #4]
 801577c:	683a      	ldr	r2, [r7, #0]
 801577e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015780:	683b      	ldr	r3, [r7, #0]
 8015782:	68fa      	ldr	r2, [r7, #12]
 8015784:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	683a      	ldr	r2, [r7, #0]
 801578a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801578c:	683b      	ldr	r3, [r7, #0]
 801578e:	687a      	ldr	r2, [r7, #4]
 8015790:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	1c5a      	adds	r2, r3, #1
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	601a      	str	r2, [r3, #0]
}
 801579c:	bf00      	nop
 801579e:	3714      	adds	r7, #20
 80157a0:	46bd      	mov	sp, r7
 80157a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a6:	4770      	bx	lr

080157a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80157a8:	b480      	push	{r7}
 80157aa:	b085      	sub	sp, #20
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	691b      	ldr	r3, [r3, #16]
 80157b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	685b      	ldr	r3, [r3, #4]
 80157ba:	687a      	ldr	r2, [r7, #4]
 80157bc:	6892      	ldr	r2, [r2, #8]
 80157be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	689b      	ldr	r3, [r3, #8]
 80157c4:	687a      	ldr	r2, [r7, #4]
 80157c6:	6852      	ldr	r2, [r2, #4]
 80157c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	685b      	ldr	r3, [r3, #4]
 80157ce:	687a      	ldr	r2, [r7, #4]
 80157d0:	429a      	cmp	r2, r3
 80157d2:	d103      	bne.n	80157dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	689a      	ldr	r2, [r3, #8]
 80157d8:	68fb      	ldr	r3, [r7, #12]
 80157da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	2200      	movs	r2, #0
 80157e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	1e5a      	subs	r2, r3, #1
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	681b      	ldr	r3, [r3, #0]
}
 80157f0:	4618      	mov	r0, r3
 80157f2:	3714      	adds	r7, #20
 80157f4:	46bd      	mov	sp, r7
 80157f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157fa:	4770      	bx	lr

080157fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80157fc:	b580      	push	{r7, lr}
 80157fe:	b084      	sub	sp, #16
 8015800:	af00      	add	r7, sp, #0
 8015802:	6078      	str	r0, [r7, #4]
 8015804:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	2b00      	cmp	r3, #0
 801580e:	d10a      	bne.n	8015826 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015814:	f383 8811 	msr	BASEPRI, r3
 8015818:	f3bf 8f6f 	isb	sy
 801581c:	f3bf 8f4f 	dsb	sy
 8015820:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8015822:	bf00      	nop
 8015824:	e7fe      	b.n	8015824 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8015826:	f002 fc85 	bl	8018134 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	681a      	ldr	r2, [r3, #0]
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015832:	68f9      	ldr	r1, [r7, #12]
 8015834:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015836:	fb01 f303 	mul.w	r3, r1, r3
 801583a:	441a      	add	r2, r3
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015840:	68fb      	ldr	r3, [r7, #12]
 8015842:	2200      	movs	r2, #0
 8015844:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	681a      	ldr	r2, [r3, #0]
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	681a      	ldr	r2, [r3, #0]
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015856:	3b01      	subs	r3, #1
 8015858:	68f9      	ldr	r1, [r7, #12]
 801585a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801585c:	fb01 f303 	mul.w	r3, r1, r3
 8015860:	441a      	add	r2, r3
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	22ff      	movs	r2, #255	; 0xff
 801586a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	22ff      	movs	r2, #255	; 0xff
 8015872:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8015876:	683b      	ldr	r3, [r7, #0]
 8015878:	2b00      	cmp	r3, #0
 801587a:	d114      	bne.n	80158a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	691b      	ldr	r3, [r3, #16]
 8015880:	2b00      	cmp	r3, #0
 8015882:	d01a      	beq.n	80158ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	3310      	adds	r3, #16
 8015888:	4618      	mov	r0, r3
 801588a:	f001 fb7b 	bl	8016f84 <xTaskRemoveFromEventList>
 801588e:	4603      	mov	r3, r0
 8015890:	2b00      	cmp	r3, #0
 8015892:	d012      	beq.n	80158ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8015894:	4b0c      	ldr	r3, [pc, #48]	; (80158c8 <xQueueGenericReset+0xcc>)
 8015896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801589a:	601a      	str	r2, [r3, #0]
 801589c:	f3bf 8f4f 	dsb	sy
 80158a0:	f3bf 8f6f 	isb	sy
 80158a4:	e009      	b.n	80158ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	3310      	adds	r3, #16
 80158aa:	4618      	mov	r0, r3
 80158ac:	f7ff fef2 	bl	8015694 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	3324      	adds	r3, #36	; 0x24
 80158b4:	4618      	mov	r0, r3
 80158b6:	f7ff feed 	bl	8015694 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80158ba:	f002 fc6b 	bl	8018194 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80158be:	2301      	movs	r3, #1
}
 80158c0:	4618      	mov	r0, r3
 80158c2:	3710      	adds	r7, #16
 80158c4:	46bd      	mov	sp, r7
 80158c6:	bd80      	pop	{r7, pc}
 80158c8:	e000ed04 	.word	0xe000ed04

080158cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80158cc:	b580      	push	{r7, lr}
 80158ce:	b08e      	sub	sp, #56	; 0x38
 80158d0:	af02      	add	r7, sp, #8
 80158d2:	60f8      	str	r0, [r7, #12]
 80158d4:	60b9      	str	r1, [r7, #8]
 80158d6:	607a      	str	r2, [r7, #4]
 80158d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d10a      	bne.n	80158f6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80158e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158e4:	f383 8811 	msr	BASEPRI, r3
 80158e8:	f3bf 8f6f 	isb	sy
 80158ec:	f3bf 8f4f 	dsb	sy
 80158f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80158f2:	bf00      	nop
 80158f4:	e7fe      	b.n	80158f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80158f6:	683b      	ldr	r3, [r7, #0]
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d10a      	bne.n	8015912 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80158fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015900:	f383 8811 	msr	BASEPRI, r3
 8015904:	f3bf 8f6f 	isb	sy
 8015908:	f3bf 8f4f 	dsb	sy
 801590c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801590e:	bf00      	nop
 8015910:	e7fe      	b.n	8015910 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	2b00      	cmp	r3, #0
 8015916:	d002      	beq.n	801591e <xQueueGenericCreateStatic+0x52>
 8015918:	68bb      	ldr	r3, [r7, #8]
 801591a:	2b00      	cmp	r3, #0
 801591c:	d001      	beq.n	8015922 <xQueueGenericCreateStatic+0x56>
 801591e:	2301      	movs	r3, #1
 8015920:	e000      	b.n	8015924 <xQueueGenericCreateStatic+0x58>
 8015922:	2300      	movs	r3, #0
 8015924:	2b00      	cmp	r3, #0
 8015926:	d10a      	bne.n	801593e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8015928:	f04f 0350 	mov.w	r3, #80	; 0x50
 801592c:	f383 8811 	msr	BASEPRI, r3
 8015930:	f3bf 8f6f 	isb	sy
 8015934:	f3bf 8f4f 	dsb	sy
 8015938:	623b      	str	r3, [r7, #32]
}
 801593a:	bf00      	nop
 801593c:	e7fe      	b.n	801593c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	2b00      	cmp	r3, #0
 8015942:	d102      	bne.n	801594a <xQueueGenericCreateStatic+0x7e>
 8015944:	68bb      	ldr	r3, [r7, #8]
 8015946:	2b00      	cmp	r3, #0
 8015948:	d101      	bne.n	801594e <xQueueGenericCreateStatic+0x82>
 801594a:	2301      	movs	r3, #1
 801594c:	e000      	b.n	8015950 <xQueueGenericCreateStatic+0x84>
 801594e:	2300      	movs	r3, #0
 8015950:	2b00      	cmp	r3, #0
 8015952:	d10a      	bne.n	801596a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8015954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015958:	f383 8811 	msr	BASEPRI, r3
 801595c:	f3bf 8f6f 	isb	sy
 8015960:	f3bf 8f4f 	dsb	sy
 8015964:	61fb      	str	r3, [r7, #28]
}
 8015966:	bf00      	nop
 8015968:	e7fe      	b.n	8015968 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801596a:	2348      	movs	r3, #72	; 0x48
 801596c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801596e:	697b      	ldr	r3, [r7, #20]
 8015970:	2b48      	cmp	r3, #72	; 0x48
 8015972:	d00a      	beq.n	801598a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8015974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015978:	f383 8811 	msr	BASEPRI, r3
 801597c:	f3bf 8f6f 	isb	sy
 8015980:	f3bf 8f4f 	dsb	sy
 8015984:	61bb      	str	r3, [r7, #24]
}
 8015986:	bf00      	nop
 8015988:	e7fe      	b.n	8015988 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801598a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801598c:	683b      	ldr	r3, [r7, #0]
 801598e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8015990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015992:	2b00      	cmp	r3, #0
 8015994:	d00d      	beq.n	80159b2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015998:	2201      	movs	r2, #1
 801599a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801599e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80159a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159a4:	9300      	str	r3, [sp, #0]
 80159a6:	4613      	mov	r3, r2
 80159a8:	687a      	ldr	r2, [r7, #4]
 80159aa:	68b9      	ldr	r1, [r7, #8]
 80159ac:	68f8      	ldr	r0, [r7, #12]
 80159ae:	f000 f83f 	bl	8015a30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80159b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80159b4:	4618      	mov	r0, r3
 80159b6:	3730      	adds	r7, #48	; 0x30
 80159b8:	46bd      	mov	sp, r7
 80159ba:	bd80      	pop	{r7, pc}

080159bc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80159bc:	b580      	push	{r7, lr}
 80159be:	b08a      	sub	sp, #40	; 0x28
 80159c0:	af02      	add	r7, sp, #8
 80159c2:	60f8      	str	r0, [r7, #12]
 80159c4:	60b9      	str	r1, [r7, #8]
 80159c6:	4613      	mov	r3, r2
 80159c8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d10a      	bne.n	80159e6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80159d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159d4:	f383 8811 	msr	BASEPRI, r3
 80159d8:	f3bf 8f6f 	isb	sy
 80159dc:	f3bf 8f4f 	dsb	sy
 80159e0:	613b      	str	r3, [r7, #16]
}
 80159e2:	bf00      	nop
 80159e4:	e7fe      	b.n	80159e4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	68ba      	ldr	r2, [r7, #8]
 80159ea:	fb02 f303 	mul.w	r3, r2, r3
 80159ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80159f0:	69fb      	ldr	r3, [r7, #28]
 80159f2:	3348      	adds	r3, #72	; 0x48
 80159f4:	4618      	mov	r0, r3
 80159f6:	f002 fcbf 	bl	8018378 <pvPortMalloc>
 80159fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80159fc:	69bb      	ldr	r3, [r7, #24]
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d011      	beq.n	8015a26 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8015a02:	69bb      	ldr	r3, [r7, #24]
 8015a04:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015a06:	697b      	ldr	r3, [r7, #20]
 8015a08:	3348      	adds	r3, #72	; 0x48
 8015a0a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015a0c:	69bb      	ldr	r3, [r7, #24]
 8015a0e:	2200      	movs	r2, #0
 8015a10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015a14:	79fa      	ldrb	r2, [r7, #7]
 8015a16:	69bb      	ldr	r3, [r7, #24]
 8015a18:	9300      	str	r3, [sp, #0]
 8015a1a:	4613      	mov	r3, r2
 8015a1c:	697a      	ldr	r2, [r7, #20]
 8015a1e:	68b9      	ldr	r1, [r7, #8]
 8015a20:	68f8      	ldr	r0, [r7, #12]
 8015a22:	f000 f805 	bl	8015a30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015a26:	69bb      	ldr	r3, [r7, #24]
	}
 8015a28:	4618      	mov	r0, r3
 8015a2a:	3720      	adds	r7, #32
 8015a2c:	46bd      	mov	sp, r7
 8015a2e:	bd80      	pop	{r7, pc}

08015a30 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015a30:	b580      	push	{r7, lr}
 8015a32:	b084      	sub	sp, #16
 8015a34:	af00      	add	r7, sp, #0
 8015a36:	60f8      	str	r0, [r7, #12]
 8015a38:	60b9      	str	r1, [r7, #8]
 8015a3a:	607a      	str	r2, [r7, #4]
 8015a3c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015a3e:	68bb      	ldr	r3, [r7, #8]
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d103      	bne.n	8015a4c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015a44:	69bb      	ldr	r3, [r7, #24]
 8015a46:	69ba      	ldr	r2, [r7, #24]
 8015a48:	601a      	str	r2, [r3, #0]
 8015a4a:	e002      	b.n	8015a52 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015a4c:	69bb      	ldr	r3, [r7, #24]
 8015a4e:	687a      	ldr	r2, [r7, #4]
 8015a50:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015a52:	69bb      	ldr	r3, [r7, #24]
 8015a54:	68fa      	ldr	r2, [r7, #12]
 8015a56:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015a58:	69bb      	ldr	r3, [r7, #24]
 8015a5a:	68ba      	ldr	r2, [r7, #8]
 8015a5c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015a5e:	2101      	movs	r1, #1
 8015a60:	69b8      	ldr	r0, [r7, #24]
 8015a62:	f7ff fecb 	bl	80157fc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8015a66:	bf00      	nop
 8015a68:	3710      	adds	r7, #16
 8015a6a:	46bd      	mov	sp, r7
 8015a6c:	bd80      	pop	{r7, pc}
	...

08015a70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015a70:	b580      	push	{r7, lr}
 8015a72:	b08e      	sub	sp, #56	; 0x38
 8015a74:	af00      	add	r7, sp, #0
 8015a76:	60f8      	str	r0, [r7, #12]
 8015a78:	60b9      	str	r1, [r7, #8]
 8015a7a:	607a      	str	r2, [r7, #4]
 8015a7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8015a7e:	2300      	movs	r3, #0
 8015a80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d10a      	bne.n	8015aa2 <xQueueGenericSend+0x32>
	__asm volatile
 8015a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a90:	f383 8811 	msr	BASEPRI, r3
 8015a94:	f3bf 8f6f 	isb	sy
 8015a98:	f3bf 8f4f 	dsb	sy
 8015a9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015a9e:	bf00      	nop
 8015aa0:	e7fe      	b.n	8015aa0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015aa2:	68bb      	ldr	r3, [r7, #8]
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d103      	bne.n	8015ab0 <xQueueGenericSend+0x40>
 8015aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d101      	bne.n	8015ab4 <xQueueGenericSend+0x44>
 8015ab0:	2301      	movs	r3, #1
 8015ab2:	e000      	b.n	8015ab6 <xQueueGenericSend+0x46>
 8015ab4:	2300      	movs	r3, #0
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d10a      	bne.n	8015ad0 <xQueueGenericSend+0x60>
	__asm volatile
 8015aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015abe:	f383 8811 	msr	BASEPRI, r3
 8015ac2:	f3bf 8f6f 	isb	sy
 8015ac6:	f3bf 8f4f 	dsb	sy
 8015aca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015acc:	bf00      	nop
 8015ace:	e7fe      	b.n	8015ace <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015ad0:	683b      	ldr	r3, [r7, #0]
 8015ad2:	2b02      	cmp	r3, #2
 8015ad4:	d103      	bne.n	8015ade <xQueueGenericSend+0x6e>
 8015ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015ada:	2b01      	cmp	r3, #1
 8015adc:	d101      	bne.n	8015ae2 <xQueueGenericSend+0x72>
 8015ade:	2301      	movs	r3, #1
 8015ae0:	e000      	b.n	8015ae4 <xQueueGenericSend+0x74>
 8015ae2:	2300      	movs	r3, #0
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d10a      	bne.n	8015afe <xQueueGenericSend+0x8e>
	__asm volatile
 8015ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015aec:	f383 8811 	msr	BASEPRI, r3
 8015af0:	f3bf 8f6f 	isb	sy
 8015af4:	f3bf 8f4f 	dsb	sy
 8015af8:	623b      	str	r3, [r7, #32]
}
 8015afa:	bf00      	nop
 8015afc:	e7fe      	b.n	8015afc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015afe:	f001 fc01 	bl	8017304 <xTaskGetSchedulerState>
 8015b02:	4603      	mov	r3, r0
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d102      	bne.n	8015b0e <xQueueGenericSend+0x9e>
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d101      	bne.n	8015b12 <xQueueGenericSend+0xa2>
 8015b0e:	2301      	movs	r3, #1
 8015b10:	e000      	b.n	8015b14 <xQueueGenericSend+0xa4>
 8015b12:	2300      	movs	r3, #0
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d10a      	bne.n	8015b2e <xQueueGenericSend+0xbe>
	__asm volatile
 8015b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b1c:	f383 8811 	msr	BASEPRI, r3
 8015b20:	f3bf 8f6f 	isb	sy
 8015b24:	f3bf 8f4f 	dsb	sy
 8015b28:	61fb      	str	r3, [r7, #28]
}
 8015b2a:	bf00      	nop
 8015b2c:	e7fe      	b.n	8015b2c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015b2e:	f002 fb01 	bl	8018134 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015b3a:	429a      	cmp	r2, r3
 8015b3c:	d302      	bcc.n	8015b44 <xQueueGenericSend+0xd4>
 8015b3e:	683b      	ldr	r3, [r7, #0]
 8015b40:	2b02      	cmp	r3, #2
 8015b42:	d129      	bne.n	8015b98 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015b44:	683a      	ldr	r2, [r7, #0]
 8015b46:	68b9      	ldr	r1, [r7, #8]
 8015b48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b4a:	f000 fc3b 	bl	80163c4 <prvCopyDataToQueue>
 8015b4e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d010      	beq.n	8015b7a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b5a:	3324      	adds	r3, #36	; 0x24
 8015b5c:	4618      	mov	r0, r3
 8015b5e:	f001 fa11 	bl	8016f84 <xTaskRemoveFromEventList>
 8015b62:	4603      	mov	r3, r0
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d013      	beq.n	8015b90 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015b68:	4b3f      	ldr	r3, [pc, #252]	; (8015c68 <xQueueGenericSend+0x1f8>)
 8015b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b6e:	601a      	str	r2, [r3, #0]
 8015b70:	f3bf 8f4f 	dsb	sy
 8015b74:	f3bf 8f6f 	isb	sy
 8015b78:	e00a      	b.n	8015b90 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d007      	beq.n	8015b90 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015b80:	4b39      	ldr	r3, [pc, #228]	; (8015c68 <xQueueGenericSend+0x1f8>)
 8015b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b86:	601a      	str	r2, [r3, #0]
 8015b88:	f3bf 8f4f 	dsb	sy
 8015b8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015b90:	f002 fb00 	bl	8018194 <vPortExitCritical>
				return pdPASS;
 8015b94:	2301      	movs	r3, #1
 8015b96:	e063      	b.n	8015c60 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d103      	bne.n	8015ba6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015b9e:	f002 faf9 	bl	8018194 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8015ba2:	2300      	movs	r3, #0
 8015ba4:	e05c      	b.n	8015c60 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d106      	bne.n	8015bba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015bac:	f107 0314 	add.w	r3, r7, #20
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	f001 fa49 	bl	8017048 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015bb6:	2301      	movs	r3, #1
 8015bb8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015bba:	f002 faeb 	bl	8018194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015bbe:	f000 ffbd 	bl	8016b3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015bc2:	f002 fab7 	bl	8018134 <vPortEnterCritical>
 8015bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015bcc:	b25b      	sxtb	r3, r3
 8015bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bd2:	d103      	bne.n	8015bdc <xQueueGenericSend+0x16c>
 8015bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015be2:	b25b      	sxtb	r3, r3
 8015be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015be8:	d103      	bne.n	8015bf2 <xQueueGenericSend+0x182>
 8015bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bec:	2200      	movs	r2, #0
 8015bee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015bf2:	f002 facf 	bl	8018194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015bf6:	1d3a      	adds	r2, r7, #4
 8015bf8:	f107 0314 	add.w	r3, r7, #20
 8015bfc:	4611      	mov	r1, r2
 8015bfe:	4618      	mov	r0, r3
 8015c00:	f001 fa38 	bl	8017074 <xTaskCheckForTimeOut>
 8015c04:	4603      	mov	r3, r0
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d124      	bne.n	8015c54 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015c0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c0c:	f000 fcd2 	bl	80165b4 <prvIsQueueFull>
 8015c10:	4603      	mov	r3, r0
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d018      	beq.n	8015c48 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c18:	3310      	adds	r3, #16
 8015c1a:	687a      	ldr	r2, [r7, #4]
 8015c1c:	4611      	mov	r1, r2
 8015c1e:	4618      	mov	r0, r3
 8015c20:	f001 f960 	bl	8016ee4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015c24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c26:	f000 fc5d 	bl	80164e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015c2a:	f000 ff95 	bl	8016b58 <xTaskResumeAll>
 8015c2e:	4603      	mov	r3, r0
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	f47f af7c 	bne.w	8015b2e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8015c36:	4b0c      	ldr	r3, [pc, #48]	; (8015c68 <xQueueGenericSend+0x1f8>)
 8015c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c3c:	601a      	str	r2, [r3, #0]
 8015c3e:	f3bf 8f4f 	dsb	sy
 8015c42:	f3bf 8f6f 	isb	sy
 8015c46:	e772      	b.n	8015b2e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015c48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c4a:	f000 fc4b 	bl	80164e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015c4e:	f000 ff83 	bl	8016b58 <xTaskResumeAll>
 8015c52:	e76c      	b.n	8015b2e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015c54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c56:	f000 fc45 	bl	80164e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015c5a:	f000 ff7d 	bl	8016b58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015c5e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015c60:	4618      	mov	r0, r3
 8015c62:	3738      	adds	r7, #56	; 0x38
 8015c64:	46bd      	mov	sp, r7
 8015c66:	bd80      	pop	{r7, pc}
 8015c68:	e000ed04 	.word	0xe000ed04

08015c6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015c6c:	b580      	push	{r7, lr}
 8015c6e:	b090      	sub	sp, #64	; 0x40
 8015c70:	af00      	add	r7, sp, #0
 8015c72:	60f8      	str	r0, [r7, #12]
 8015c74:	60b9      	str	r1, [r7, #8]
 8015c76:	607a      	str	r2, [r7, #4]
 8015c78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8015c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d10a      	bne.n	8015c9a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8015c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c88:	f383 8811 	msr	BASEPRI, r3
 8015c8c:	f3bf 8f6f 	isb	sy
 8015c90:	f3bf 8f4f 	dsb	sy
 8015c94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015c96:	bf00      	nop
 8015c98:	e7fe      	b.n	8015c98 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015c9a:	68bb      	ldr	r3, [r7, #8]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d103      	bne.n	8015ca8 <xQueueGenericSendFromISR+0x3c>
 8015ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d101      	bne.n	8015cac <xQueueGenericSendFromISR+0x40>
 8015ca8:	2301      	movs	r3, #1
 8015caa:	e000      	b.n	8015cae <xQueueGenericSendFromISR+0x42>
 8015cac:	2300      	movs	r3, #0
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d10a      	bne.n	8015cc8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8015cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cb6:	f383 8811 	msr	BASEPRI, r3
 8015cba:	f3bf 8f6f 	isb	sy
 8015cbe:	f3bf 8f4f 	dsb	sy
 8015cc2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015cc4:	bf00      	nop
 8015cc6:	e7fe      	b.n	8015cc6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015cc8:	683b      	ldr	r3, [r7, #0]
 8015cca:	2b02      	cmp	r3, #2
 8015ccc:	d103      	bne.n	8015cd6 <xQueueGenericSendFromISR+0x6a>
 8015cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015cd2:	2b01      	cmp	r3, #1
 8015cd4:	d101      	bne.n	8015cda <xQueueGenericSendFromISR+0x6e>
 8015cd6:	2301      	movs	r3, #1
 8015cd8:	e000      	b.n	8015cdc <xQueueGenericSendFromISR+0x70>
 8015cda:	2300      	movs	r3, #0
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d10a      	bne.n	8015cf6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8015ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ce4:	f383 8811 	msr	BASEPRI, r3
 8015ce8:	f3bf 8f6f 	isb	sy
 8015cec:	f3bf 8f4f 	dsb	sy
 8015cf0:	623b      	str	r3, [r7, #32]
}
 8015cf2:	bf00      	nop
 8015cf4:	e7fe      	b.n	8015cf4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015cf6:	f002 faff 	bl	80182f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015cfa:	f3ef 8211 	mrs	r2, BASEPRI
 8015cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d02:	f383 8811 	msr	BASEPRI, r3
 8015d06:	f3bf 8f6f 	isb	sy
 8015d0a:	f3bf 8f4f 	dsb	sy
 8015d0e:	61fa      	str	r2, [r7, #28]
 8015d10:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8015d12:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015d14:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015d1e:	429a      	cmp	r2, r3
 8015d20:	d302      	bcc.n	8015d28 <xQueueGenericSendFromISR+0xbc>
 8015d22:	683b      	ldr	r3, [r7, #0]
 8015d24:	2b02      	cmp	r3, #2
 8015d26:	d12f      	bne.n	8015d88 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d36:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015d38:	683a      	ldr	r2, [r7, #0]
 8015d3a:	68b9      	ldr	r1, [r7, #8]
 8015d3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015d3e:	f000 fb41 	bl	80163c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015d42:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8015d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d4a:	d112      	bne.n	8015d72 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d016      	beq.n	8015d82 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d56:	3324      	adds	r3, #36	; 0x24
 8015d58:	4618      	mov	r0, r3
 8015d5a:	f001 f913 	bl	8016f84 <xTaskRemoveFromEventList>
 8015d5e:	4603      	mov	r3, r0
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d00e      	beq.n	8015d82 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d00b      	beq.n	8015d82 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	2201      	movs	r2, #1
 8015d6e:	601a      	str	r2, [r3, #0]
 8015d70:	e007      	b.n	8015d82 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015d72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015d76:	3301      	adds	r3, #1
 8015d78:	b2db      	uxtb	r3, r3
 8015d7a:	b25a      	sxtb	r2, r3
 8015d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015d82:	2301      	movs	r3, #1
 8015d84:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8015d86:	e001      	b.n	8015d8c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015d88:	2300      	movs	r3, #0
 8015d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d8e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015d90:	697b      	ldr	r3, [r7, #20]
 8015d92:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8015d96:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	3740      	adds	r7, #64	; 0x40
 8015d9e:	46bd      	mov	sp, r7
 8015da0:	bd80      	pop	{r7, pc}

08015da2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015da2:	b580      	push	{r7, lr}
 8015da4:	b08e      	sub	sp, #56	; 0x38
 8015da6:	af00      	add	r7, sp, #0
 8015da8:	6078      	str	r0, [r7, #4]
 8015daa:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8015db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d10a      	bne.n	8015dcc <xQueueGiveFromISR+0x2a>
	__asm volatile
 8015db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dba:	f383 8811 	msr	BASEPRI, r3
 8015dbe:	f3bf 8f6f 	isb	sy
 8015dc2:	f3bf 8f4f 	dsb	sy
 8015dc6:	623b      	str	r3, [r7, #32]
}
 8015dc8:	bf00      	nop
 8015dca:	e7fe      	b.n	8015dca <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d00a      	beq.n	8015dea <xQueueGiveFromISR+0x48>
	__asm volatile
 8015dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dd8:	f383 8811 	msr	BASEPRI, r3
 8015ddc:	f3bf 8f6f 	isb	sy
 8015de0:	f3bf 8f4f 	dsb	sy
 8015de4:	61fb      	str	r3, [r7, #28]
}
 8015de6:	bf00      	nop
 8015de8:	e7fe      	b.n	8015de8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8015dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d103      	bne.n	8015dfa <xQueueGiveFromISR+0x58>
 8015df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015df4:	689b      	ldr	r3, [r3, #8]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d101      	bne.n	8015dfe <xQueueGiveFromISR+0x5c>
 8015dfa:	2301      	movs	r3, #1
 8015dfc:	e000      	b.n	8015e00 <xQueueGiveFromISR+0x5e>
 8015dfe:	2300      	movs	r3, #0
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d10a      	bne.n	8015e1a <xQueueGiveFromISR+0x78>
	__asm volatile
 8015e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e08:	f383 8811 	msr	BASEPRI, r3
 8015e0c:	f3bf 8f6f 	isb	sy
 8015e10:	f3bf 8f4f 	dsb	sy
 8015e14:	61bb      	str	r3, [r7, #24]
}
 8015e16:	bf00      	nop
 8015e18:	e7fe      	b.n	8015e18 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015e1a:	f002 fa6d 	bl	80182f8 <vPortValidateInterruptPriority>
	__asm volatile
 8015e1e:	f3ef 8211 	mrs	r2, BASEPRI
 8015e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e26:	f383 8811 	msr	BASEPRI, r3
 8015e2a:	f3bf 8f6f 	isb	sy
 8015e2e:	f3bf 8f4f 	dsb	sy
 8015e32:	617a      	str	r2, [r7, #20]
 8015e34:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8015e36:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015e38:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e3e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8015e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015e44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015e46:	429a      	cmp	r2, r3
 8015e48:	d22b      	bcs.n	8015ea2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e56:	1c5a      	adds	r2, r3, #1
 8015e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e5a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015e5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e64:	d112      	bne.n	8015e8c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d016      	beq.n	8015e9c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e70:	3324      	adds	r3, #36	; 0x24
 8015e72:	4618      	mov	r0, r3
 8015e74:	f001 f886 	bl	8016f84 <xTaskRemoveFromEventList>
 8015e78:	4603      	mov	r3, r0
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d00e      	beq.n	8015e9c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015e7e:	683b      	ldr	r3, [r7, #0]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d00b      	beq.n	8015e9c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015e84:	683b      	ldr	r3, [r7, #0]
 8015e86:	2201      	movs	r2, #1
 8015e88:	601a      	str	r2, [r3, #0]
 8015e8a:	e007      	b.n	8015e9c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e90:	3301      	adds	r3, #1
 8015e92:	b2db      	uxtb	r3, r3
 8015e94:	b25a      	sxtb	r2, r3
 8015e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015e9c:	2301      	movs	r3, #1
 8015e9e:	637b      	str	r3, [r7, #52]	; 0x34
 8015ea0:	e001      	b.n	8015ea6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015ea2:	2300      	movs	r3, #0
 8015ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8015ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ea8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8015eaa:	68fb      	ldr	r3, [r7, #12]
 8015eac:	f383 8811 	msr	BASEPRI, r3
}
 8015eb0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015eb4:	4618      	mov	r0, r3
 8015eb6:	3738      	adds	r7, #56	; 0x38
 8015eb8:	46bd      	mov	sp, r7
 8015eba:	bd80      	pop	{r7, pc}

08015ebc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015ebc:	b580      	push	{r7, lr}
 8015ebe:	b08c      	sub	sp, #48	; 0x30
 8015ec0:	af00      	add	r7, sp, #0
 8015ec2:	60f8      	str	r0, [r7, #12]
 8015ec4:	60b9      	str	r1, [r7, #8]
 8015ec6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015ec8:	2300      	movs	r3, #0
 8015eca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d10a      	bne.n	8015eec <xQueueReceive+0x30>
	__asm volatile
 8015ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015eda:	f383 8811 	msr	BASEPRI, r3
 8015ede:	f3bf 8f6f 	isb	sy
 8015ee2:	f3bf 8f4f 	dsb	sy
 8015ee6:	623b      	str	r3, [r7, #32]
}
 8015ee8:	bf00      	nop
 8015eea:	e7fe      	b.n	8015eea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015eec:	68bb      	ldr	r3, [r7, #8]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d103      	bne.n	8015efa <xQueueReceive+0x3e>
 8015ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d101      	bne.n	8015efe <xQueueReceive+0x42>
 8015efa:	2301      	movs	r3, #1
 8015efc:	e000      	b.n	8015f00 <xQueueReceive+0x44>
 8015efe:	2300      	movs	r3, #0
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d10a      	bne.n	8015f1a <xQueueReceive+0x5e>
	__asm volatile
 8015f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f08:	f383 8811 	msr	BASEPRI, r3
 8015f0c:	f3bf 8f6f 	isb	sy
 8015f10:	f3bf 8f4f 	dsb	sy
 8015f14:	61fb      	str	r3, [r7, #28]
}
 8015f16:	bf00      	nop
 8015f18:	e7fe      	b.n	8015f18 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015f1a:	f001 f9f3 	bl	8017304 <xTaskGetSchedulerState>
 8015f1e:	4603      	mov	r3, r0
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d102      	bne.n	8015f2a <xQueueReceive+0x6e>
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d101      	bne.n	8015f2e <xQueueReceive+0x72>
 8015f2a:	2301      	movs	r3, #1
 8015f2c:	e000      	b.n	8015f30 <xQueueReceive+0x74>
 8015f2e:	2300      	movs	r3, #0
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d10a      	bne.n	8015f4a <xQueueReceive+0x8e>
	__asm volatile
 8015f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f38:	f383 8811 	msr	BASEPRI, r3
 8015f3c:	f3bf 8f6f 	isb	sy
 8015f40:	f3bf 8f4f 	dsb	sy
 8015f44:	61bb      	str	r3, [r7, #24]
}
 8015f46:	bf00      	nop
 8015f48:	e7fe      	b.n	8015f48 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015f4a:	f002 f8f3 	bl	8018134 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f52:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d01f      	beq.n	8015f9a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015f5a:	68b9      	ldr	r1, [r7, #8]
 8015f5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015f5e:	f000 fa9b 	bl	8016498 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f64:	1e5a      	subs	r2, r3, #1
 8015f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f68:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f6c:	691b      	ldr	r3, [r3, #16]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d00f      	beq.n	8015f92 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f74:	3310      	adds	r3, #16
 8015f76:	4618      	mov	r0, r3
 8015f78:	f001 f804 	bl	8016f84 <xTaskRemoveFromEventList>
 8015f7c:	4603      	mov	r3, r0
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d007      	beq.n	8015f92 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015f82:	4b3d      	ldr	r3, [pc, #244]	; (8016078 <xQueueReceive+0x1bc>)
 8015f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015f88:	601a      	str	r2, [r3, #0]
 8015f8a:	f3bf 8f4f 	dsb	sy
 8015f8e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015f92:	f002 f8ff 	bl	8018194 <vPortExitCritical>
				return pdPASS;
 8015f96:	2301      	movs	r3, #1
 8015f98:	e069      	b.n	801606e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d103      	bne.n	8015fa8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015fa0:	f002 f8f8 	bl	8018194 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015fa4:	2300      	movs	r3, #0
 8015fa6:	e062      	b.n	801606e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d106      	bne.n	8015fbc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015fae:	f107 0310 	add.w	r3, r7, #16
 8015fb2:	4618      	mov	r0, r3
 8015fb4:	f001 f848 	bl	8017048 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015fb8:	2301      	movs	r3, #1
 8015fba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015fbc:	f002 f8ea 	bl	8018194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015fc0:	f000 fdbc 	bl	8016b3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015fc4:	f002 f8b6 	bl	8018134 <vPortEnterCritical>
 8015fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015fce:	b25b      	sxtb	r3, r3
 8015fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015fd4:	d103      	bne.n	8015fde <xQueueReceive+0x122>
 8015fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fd8:	2200      	movs	r2, #0
 8015fda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fe0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015fe4:	b25b      	sxtb	r3, r3
 8015fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015fea:	d103      	bne.n	8015ff4 <xQueueReceive+0x138>
 8015fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fee:	2200      	movs	r2, #0
 8015ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015ff4:	f002 f8ce 	bl	8018194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015ff8:	1d3a      	adds	r2, r7, #4
 8015ffa:	f107 0310 	add.w	r3, r7, #16
 8015ffe:	4611      	mov	r1, r2
 8016000:	4618      	mov	r0, r3
 8016002:	f001 f837 	bl	8017074 <xTaskCheckForTimeOut>
 8016006:	4603      	mov	r3, r0
 8016008:	2b00      	cmp	r3, #0
 801600a:	d123      	bne.n	8016054 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801600c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801600e:	f000 fabb 	bl	8016588 <prvIsQueueEmpty>
 8016012:	4603      	mov	r3, r0
 8016014:	2b00      	cmp	r3, #0
 8016016:	d017      	beq.n	8016048 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801601a:	3324      	adds	r3, #36	; 0x24
 801601c:	687a      	ldr	r2, [r7, #4]
 801601e:	4611      	mov	r1, r2
 8016020:	4618      	mov	r0, r3
 8016022:	f000 ff5f 	bl	8016ee4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016026:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016028:	f000 fa5c 	bl	80164e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801602c:	f000 fd94 	bl	8016b58 <xTaskResumeAll>
 8016030:	4603      	mov	r3, r0
 8016032:	2b00      	cmp	r3, #0
 8016034:	d189      	bne.n	8015f4a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8016036:	4b10      	ldr	r3, [pc, #64]	; (8016078 <xQueueReceive+0x1bc>)
 8016038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801603c:	601a      	str	r2, [r3, #0]
 801603e:	f3bf 8f4f 	dsb	sy
 8016042:	f3bf 8f6f 	isb	sy
 8016046:	e780      	b.n	8015f4a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8016048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801604a:	f000 fa4b 	bl	80164e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801604e:	f000 fd83 	bl	8016b58 <xTaskResumeAll>
 8016052:	e77a      	b.n	8015f4a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8016054:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016056:	f000 fa45 	bl	80164e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801605a:	f000 fd7d 	bl	8016b58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801605e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016060:	f000 fa92 	bl	8016588 <prvIsQueueEmpty>
 8016064:	4603      	mov	r3, r0
 8016066:	2b00      	cmp	r3, #0
 8016068:	f43f af6f 	beq.w	8015f4a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801606c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801606e:	4618      	mov	r0, r3
 8016070:	3730      	adds	r7, #48	; 0x30
 8016072:	46bd      	mov	sp, r7
 8016074:	bd80      	pop	{r7, pc}
 8016076:	bf00      	nop
 8016078:	e000ed04 	.word	0xe000ed04

0801607c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801607c:	b580      	push	{r7, lr}
 801607e:	b08e      	sub	sp, #56	; 0x38
 8016080:	af00      	add	r7, sp, #0
 8016082:	6078      	str	r0, [r7, #4]
 8016084:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8016086:	2300      	movs	r3, #0
 8016088:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801608e:	2300      	movs	r3, #0
 8016090:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016094:	2b00      	cmp	r3, #0
 8016096:	d10a      	bne.n	80160ae <xQueueSemaphoreTake+0x32>
	__asm volatile
 8016098:	f04f 0350 	mov.w	r3, #80	; 0x50
 801609c:	f383 8811 	msr	BASEPRI, r3
 80160a0:	f3bf 8f6f 	isb	sy
 80160a4:	f3bf 8f4f 	dsb	sy
 80160a8:	623b      	str	r3, [r7, #32]
}
 80160aa:	bf00      	nop
 80160ac:	e7fe      	b.n	80160ac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80160ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d00a      	beq.n	80160cc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80160b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160ba:	f383 8811 	msr	BASEPRI, r3
 80160be:	f3bf 8f6f 	isb	sy
 80160c2:	f3bf 8f4f 	dsb	sy
 80160c6:	61fb      	str	r3, [r7, #28]
}
 80160c8:	bf00      	nop
 80160ca:	e7fe      	b.n	80160ca <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80160cc:	f001 f91a 	bl	8017304 <xTaskGetSchedulerState>
 80160d0:	4603      	mov	r3, r0
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d102      	bne.n	80160dc <xQueueSemaphoreTake+0x60>
 80160d6:	683b      	ldr	r3, [r7, #0]
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d101      	bne.n	80160e0 <xQueueSemaphoreTake+0x64>
 80160dc:	2301      	movs	r3, #1
 80160de:	e000      	b.n	80160e2 <xQueueSemaphoreTake+0x66>
 80160e0:	2300      	movs	r3, #0
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d10a      	bne.n	80160fc <xQueueSemaphoreTake+0x80>
	__asm volatile
 80160e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160ea:	f383 8811 	msr	BASEPRI, r3
 80160ee:	f3bf 8f6f 	isb	sy
 80160f2:	f3bf 8f4f 	dsb	sy
 80160f6:	61bb      	str	r3, [r7, #24]
}
 80160f8:	bf00      	nop
 80160fa:	e7fe      	b.n	80160fa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80160fc:	f002 f81a 	bl	8018134 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8016100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016104:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8016106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016108:	2b00      	cmp	r3, #0
 801610a:	d024      	beq.n	8016156 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801610c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801610e:	1e5a      	subs	r2, r3, #1
 8016110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016112:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016116:	681b      	ldr	r3, [r3, #0]
 8016118:	2b00      	cmp	r3, #0
 801611a:	d104      	bne.n	8016126 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801611c:	f001 fa9a 	bl	8017654 <pvTaskIncrementMutexHeldCount>
 8016120:	4602      	mov	r2, r0
 8016122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016124:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016128:	691b      	ldr	r3, [r3, #16]
 801612a:	2b00      	cmp	r3, #0
 801612c:	d00f      	beq.n	801614e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801612e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016130:	3310      	adds	r3, #16
 8016132:	4618      	mov	r0, r3
 8016134:	f000 ff26 	bl	8016f84 <xTaskRemoveFromEventList>
 8016138:	4603      	mov	r3, r0
 801613a:	2b00      	cmp	r3, #0
 801613c:	d007      	beq.n	801614e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801613e:	4b54      	ldr	r3, [pc, #336]	; (8016290 <xQueueSemaphoreTake+0x214>)
 8016140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016144:	601a      	str	r2, [r3, #0]
 8016146:	f3bf 8f4f 	dsb	sy
 801614a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801614e:	f002 f821 	bl	8018194 <vPortExitCritical>
				return pdPASS;
 8016152:	2301      	movs	r3, #1
 8016154:	e097      	b.n	8016286 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016156:	683b      	ldr	r3, [r7, #0]
 8016158:	2b00      	cmp	r3, #0
 801615a:	d111      	bne.n	8016180 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801615c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801615e:	2b00      	cmp	r3, #0
 8016160:	d00a      	beq.n	8016178 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8016162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016166:	f383 8811 	msr	BASEPRI, r3
 801616a:	f3bf 8f6f 	isb	sy
 801616e:	f3bf 8f4f 	dsb	sy
 8016172:	617b      	str	r3, [r7, #20]
}
 8016174:	bf00      	nop
 8016176:	e7fe      	b.n	8016176 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8016178:	f002 f80c 	bl	8018194 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801617c:	2300      	movs	r3, #0
 801617e:	e082      	b.n	8016286 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016182:	2b00      	cmp	r3, #0
 8016184:	d106      	bne.n	8016194 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016186:	f107 030c 	add.w	r3, r7, #12
 801618a:	4618      	mov	r0, r3
 801618c:	f000 ff5c 	bl	8017048 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016190:	2301      	movs	r3, #1
 8016192:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016194:	f001 fffe 	bl	8018194 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016198:	f000 fcd0 	bl	8016b3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801619c:	f001 ffca 	bl	8018134 <vPortEnterCritical>
 80161a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80161a6:	b25b      	sxtb	r3, r3
 80161a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161ac:	d103      	bne.n	80161b6 <xQueueSemaphoreTake+0x13a>
 80161ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161b0:	2200      	movs	r2, #0
 80161b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80161b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80161bc:	b25b      	sxtb	r3, r3
 80161be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161c2:	d103      	bne.n	80161cc <xQueueSemaphoreTake+0x150>
 80161c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161c6:	2200      	movs	r2, #0
 80161c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80161cc:	f001 ffe2 	bl	8018194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80161d0:	463a      	mov	r2, r7
 80161d2:	f107 030c 	add.w	r3, r7, #12
 80161d6:	4611      	mov	r1, r2
 80161d8:	4618      	mov	r0, r3
 80161da:	f000 ff4b 	bl	8017074 <xTaskCheckForTimeOut>
 80161de:	4603      	mov	r3, r0
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d132      	bne.n	801624a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80161e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80161e6:	f000 f9cf 	bl	8016588 <prvIsQueueEmpty>
 80161ea:	4603      	mov	r3, r0
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	d026      	beq.n	801623e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80161f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d109      	bne.n	801620c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80161f8:	f001 ff9c 	bl	8018134 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80161fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161fe:	689b      	ldr	r3, [r3, #8]
 8016200:	4618      	mov	r0, r3
 8016202:	f001 f89d 	bl	8017340 <xTaskPriorityInherit>
 8016206:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8016208:	f001 ffc4 	bl	8018194 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801620c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801620e:	3324      	adds	r3, #36	; 0x24
 8016210:	683a      	ldr	r2, [r7, #0]
 8016212:	4611      	mov	r1, r2
 8016214:	4618      	mov	r0, r3
 8016216:	f000 fe65 	bl	8016ee4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801621a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801621c:	f000 f962 	bl	80164e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016220:	f000 fc9a 	bl	8016b58 <xTaskResumeAll>
 8016224:	4603      	mov	r3, r0
 8016226:	2b00      	cmp	r3, #0
 8016228:	f47f af68 	bne.w	80160fc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 801622c:	4b18      	ldr	r3, [pc, #96]	; (8016290 <xQueueSemaphoreTake+0x214>)
 801622e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016232:	601a      	str	r2, [r3, #0]
 8016234:	f3bf 8f4f 	dsb	sy
 8016238:	f3bf 8f6f 	isb	sy
 801623c:	e75e      	b.n	80160fc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801623e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016240:	f000 f950 	bl	80164e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016244:	f000 fc88 	bl	8016b58 <xTaskResumeAll>
 8016248:	e758      	b.n	80160fc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801624a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801624c:	f000 f94a 	bl	80164e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016250:	f000 fc82 	bl	8016b58 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016254:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016256:	f000 f997 	bl	8016588 <prvIsQueueEmpty>
 801625a:	4603      	mov	r3, r0
 801625c:	2b00      	cmp	r3, #0
 801625e:	f43f af4d 	beq.w	80160fc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8016262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016264:	2b00      	cmp	r3, #0
 8016266:	d00d      	beq.n	8016284 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8016268:	f001 ff64 	bl	8018134 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801626c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801626e:	f000 f891 	bl	8016394 <prvGetDisinheritPriorityAfterTimeout>
 8016272:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8016274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016276:	689b      	ldr	r3, [r3, #8]
 8016278:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801627a:	4618      	mov	r0, r3
 801627c:	f001 f95c 	bl	8017538 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8016280:	f001 ff88 	bl	8018194 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016284:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016286:	4618      	mov	r0, r3
 8016288:	3738      	adds	r7, #56	; 0x38
 801628a:	46bd      	mov	sp, r7
 801628c:	bd80      	pop	{r7, pc}
 801628e:	bf00      	nop
 8016290:	e000ed04 	.word	0xe000ed04

08016294 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016294:	b580      	push	{r7, lr}
 8016296:	b08e      	sub	sp, #56	; 0x38
 8016298:	af00      	add	r7, sp, #0
 801629a:	60f8      	str	r0, [r7, #12]
 801629c:	60b9      	str	r1, [r7, #8]
 801629e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80162a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d10a      	bne.n	80162c0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80162aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162ae:	f383 8811 	msr	BASEPRI, r3
 80162b2:	f3bf 8f6f 	isb	sy
 80162b6:	f3bf 8f4f 	dsb	sy
 80162ba:	623b      	str	r3, [r7, #32]
}
 80162bc:	bf00      	nop
 80162be:	e7fe      	b.n	80162be <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80162c0:	68bb      	ldr	r3, [r7, #8]
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d103      	bne.n	80162ce <xQueueReceiveFromISR+0x3a>
 80162c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d101      	bne.n	80162d2 <xQueueReceiveFromISR+0x3e>
 80162ce:	2301      	movs	r3, #1
 80162d0:	e000      	b.n	80162d4 <xQueueReceiveFromISR+0x40>
 80162d2:	2300      	movs	r3, #0
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d10a      	bne.n	80162ee <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80162d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162dc:	f383 8811 	msr	BASEPRI, r3
 80162e0:	f3bf 8f6f 	isb	sy
 80162e4:	f3bf 8f4f 	dsb	sy
 80162e8:	61fb      	str	r3, [r7, #28]
}
 80162ea:	bf00      	nop
 80162ec:	e7fe      	b.n	80162ec <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80162ee:	f002 f803 	bl	80182f8 <vPortValidateInterruptPriority>
	__asm volatile
 80162f2:	f3ef 8211 	mrs	r2, BASEPRI
 80162f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162fa:	f383 8811 	msr	BASEPRI, r3
 80162fe:	f3bf 8f6f 	isb	sy
 8016302:	f3bf 8f4f 	dsb	sy
 8016306:	61ba      	str	r2, [r7, #24]
 8016308:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801630a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801630c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801630e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016312:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016316:	2b00      	cmp	r3, #0
 8016318:	d02f      	beq.n	801637a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801631c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016324:	68b9      	ldr	r1, [r7, #8]
 8016326:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016328:	f000 f8b6 	bl	8016498 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801632c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801632e:	1e5a      	subs	r2, r3, #1
 8016330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016332:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8016334:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016338:	f1b3 3fff 	cmp.w	r3, #4294967295
 801633c:	d112      	bne.n	8016364 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801633e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016340:	691b      	ldr	r3, [r3, #16]
 8016342:	2b00      	cmp	r3, #0
 8016344:	d016      	beq.n	8016374 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016348:	3310      	adds	r3, #16
 801634a:	4618      	mov	r0, r3
 801634c:	f000 fe1a 	bl	8016f84 <xTaskRemoveFromEventList>
 8016350:	4603      	mov	r3, r0
 8016352:	2b00      	cmp	r3, #0
 8016354:	d00e      	beq.n	8016374 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	2b00      	cmp	r3, #0
 801635a:	d00b      	beq.n	8016374 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	2201      	movs	r2, #1
 8016360:	601a      	str	r2, [r3, #0]
 8016362:	e007      	b.n	8016374 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8016364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016368:	3301      	adds	r3, #1
 801636a:	b2db      	uxtb	r3, r3
 801636c:	b25a      	sxtb	r2, r3
 801636e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8016374:	2301      	movs	r3, #1
 8016376:	637b      	str	r3, [r7, #52]	; 0x34
 8016378:	e001      	b.n	801637e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801637a:	2300      	movs	r3, #0
 801637c:	637b      	str	r3, [r7, #52]	; 0x34
 801637e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016380:	613b      	str	r3, [r7, #16]
	__asm volatile
 8016382:	693b      	ldr	r3, [r7, #16]
 8016384:	f383 8811 	msr	BASEPRI, r3
}
 8016388:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801638a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801638c:	4618      	mov	r0, r3
 801638e:	3738      	adds	r7, #56	; 0x38
 8016390:	46bd      	mov	sp, r7
 8016392:	bd80      	pop	{r7, pc}

08016394 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8016394:	b480      	push	{r7}
 8016396:	b085      	sub	sp, #20
 8016398:	af00      	add	r7, sp, #0
 801639a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d006      	beq.n	80163b2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	f1c3 0307 	rsb	r3, r3, #7
 80163ae:	60fb      	str	r3, [r7, #12]
 80163b0:	e001      	b.n	80163b6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80163b2:	2300      	movs	r3, #0
 80163b4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80163b6:	68fb      	ldr	r3, [r7, #12]
	}
 80163b8:	4618      	mov	r0, r3
 80163ba:	3714      	adds	r7, #20
 80163bc:	46bd      	mov	sp, r7
 80163be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163c2:	4770      	bx	lr

080163c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80163c4:	b580      	push	{r7, lr}
 80163c6:	b086      	sub	sp, #24
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	60f8      	str	r0, [r7, #12]
 80163cc:	60b9      	str	r1, [r7, #8]
 80163ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80163d0:	2300      	movs	r3, #0
 80163d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80163d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d10d      	bne.n	80163fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80163e2:	68fb      	ldr	r3, [r7, #12]
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d14d      	bne.n	8016486 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	689b      	ldr	r3, [r3, #8]
 80163ee:	4618      	mov	r0, r3
 80163f0:	f001 f81c 	bl	801742c <xTaskPriorityDisinherit>
 80163f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80163f6:	68fb      	ldr	r3, [r7, #12]
 80163f8:	2200      	movs	r2, #0
 80163fa:	609a      	str	r2, [r3, #8]
 80163fc:	e043      	b.n	8016486 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	2b00      	cmp	r3, #0
 8016402:	d119      	bne.n	8016438 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	6858      	ldr	r0, [r3, #4]
 8016408:	68fb      	ldr	r3, [r7, #12]
 801640a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801640c:	461a      	mov	r2, r3
 801640e:	68b9      	ldr	r1, [r7, #8]
 8016410:	f00a fed2 	bl	80211b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016414:	68fb      	ldr	r3, [r7, #12]
 8016416:	685a      	ldr	r2, [r3, #4]
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801641c:	441a      	add	r2, r3
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	685a      	ldr	r2, [r3, #4]
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	689b      	ldr	r3, [r3, #8]
 801642a:	429a      	cmp	r2, r3
 801642c:	d32b      	bcc.n	8016486 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	681a      	ldr	r2, [r3, #0]
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	605a      	str	r2, [r3, #4]
 8016436:	e026      	b.n	8016486 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	68d8      	ldr	r0, [r3, #12]
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016440:	461a      	mov	r2, r3
 8016442:	68b9      	ldr	r1, [r7, #8]
 8016444:	f00a feb8 	bl	80211b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8016448:	68fb      	ldr	r3, [r7, #12]
 801644a:	68da      	ldr	r2, [r3, #12]
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016450:	425b      	negs	r3, r3
 8016452:	441a      	add	r2, r3
 8016454:	68fb      	ldr	r3, [r7, #12]
 8016456:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	68da      	ldr	r2, [r3, #12]
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	429a      	cmp	r2, r3
 8016462:	d207      	bcs.n	8016474 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	689a      	ldr	r2, [r3, #8]
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801646c:	425b      	negs	r3, r3
 801646e:	441a      	add	r2, r3
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	2b02      	cmp	r3, #2
 8016478:	d105      	bne.n	8016486 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801647a:	693b      	ldr	r3, [r7, #16]
 801647c:	2b00      	cmp	r3, #0
 801647e:	d002      	beq.n	8016486 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8016480:	693b      	ldr	r3, [r7, #16]
 8016482:	3b01      	subs	r3, #1
 8016484:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016486:	693b      	ldr	r3, [r7, #16]
 8016488:	1c5a      	adds	r2, r3, #1
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801648e:	697b      	ldr	r3, [r7, #20]
}
 8016490:	4618      	mov	r0, r3
 8016492:	3718      	adds	r7, #24
 8016494:	46bd      	mov	sp, r7
 8016496:	bd80      	pop	{r7, pc}

08016498 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8016498:	b580      	push	{r7, lr}
 801649a:	b082      	sub	sp, #8
 801649c:	af00      	add	r7, sp, #0
 801649e:	6078      	str	r0, [r7, #4]
 80164a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d018      	beq.n	80164dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	68da      	ldr	r2, [r3, #12]
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80164b2:	441a      	add	r2, r3
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	68da      	ldr	r2, [r3, #12]
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	689b      	ldr	r3, [r3, #8]
 80164c0:	429a      	cmp	r2, r3
 80164c2:	d303      	bcc.n	80164cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	681a      	ldr	r2, [r3, #0]
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	68d9      	ldr	r1, [r3, #12]
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80164d4:	461a      	mov	r2, r3
 80164d6:	6838      	ldr	r0, [r7, #0]
 80164d8:	f00a fe6e 	bl	80211b8 <memcpy>
	}
}
 80164dc:	bf00      	nop
 80164de:	3708      	adds	r7, #8
 80164e0:	46bd      	mov	sp, r7
 80164e2:	bd80      	pop	{r7, pc}

080164e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80164e4:	b580      	push	{r7, lr}
 80164e6:	b084      	sub	sp, #16
 80164e8:	af00      	add	r7, sp, #0
 80164ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80164ec:	f001 fe22 	bl	8018134 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80164f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80164f8:	e011      	b.n	801651e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d012      	beq.n	8016528 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	3324      	adds	r3, #36	; 0x24
 8016506:	4618      	mov	r0, r3
 8016508:	f000 fd3c 	bl	8016f84 <xTaskRemoveFromEventList>
 801650c:	4603      	mov	r3, r0
 801650e:	2b00      	cmp	r3, #0
 8016510:	d001      	beq.n	8016516 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8016512:	f000 fe11 	bl	8017138 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8016516:	7bfb      	ldrb	r3, [r7, #15]
 8016518:	3b01      	subs	r3, #1
 801651a:	b2db      	uxtb	r3, r3
 801651c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801651e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016522:	2b00      	cmp	r3, #0
 8016524:	dce9      	bgt.n	80164fa <prvUnlockQueue+0x16>
 8016526:	e000      	b.n	801652a <prvUnlockQueue+0x46>
					break;
 8016528:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	22ff      	movs	r2, #255	; 0xff
 801652e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8016532:	f001 fe2f 	bl	8018194 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016536:	f001 fdfd 	bl	8018134 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016540:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016542:	e011      	b.n	8016568 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	691b      	ldr	r3, [r3, #16]
 8016548:	2b00      	cmp	r3, #0
 801654a:	d012      	beq.n	8016572 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	3310      	adds	r3, #16
 8016550:	4618      	mov	r0, r3
 8016552:	f000 fd17 	bl	8016f84 <xTaskRemoveFromEventList>
 8016556:	4603      	mov	r3, r0
 8016558:	2b00      	cmp	r3, #0
 801655a:	d001      	beq.n	8016560 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801655c:	f000 fdec 	bl	8017138 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8016560:	7bbb      	ldrb	r3, [r7, #14]
 8016562:	3b01      	subs	r3, #1
 8016564:	b2db      	uxtb	r3, r3
 8016566:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016568:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801656c:	2b00      	cmp	r3, #0
 801656e:	dce9      	bgt.n	8016544 <prvUnlockQueue+0x60>
 8016570:	e000      	b.n	8016574 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8016572:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	22ff      	movs	r2, #255	; 0xff
 8016578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801657c:	f001 fe0a 	bl	8018194 <vPortExitCritical>
}
 8016580:	bf00      	nop
 8016582:	3710      	adds	r7, #16
 8016584:	46bd      	mov	sp, r7
 8016586:	bd80      	pop	{r7, pc}

08016588 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8016588:	b580      	push	{r7, lr}
 801658a:	b084      	sub	sp, #16
 801658c:	af00      	add	r7, sp, #0
 801658e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016590:	f001 fdd0 	bl	8018134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016598:	2b00      	cmp	r3, #0
 801659a:	d102      	bne.n	80165a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801659c:	2301      	movs	r3, #1
 801659e:	60fb      	str	r3, [r7, #12]
 80165a0:	e001      	b.n	80165a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80165a2:	2300      	movs	r3, #0
 80165a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80165a6:	f001 fdf5 	bl	8018194 <vPortExitCritical>

	return xReturn;
 80165aa:	68fb      	ldr	r3, [r7, #12]
}
 80165ac:	4618      	mov	r0, r3
 80165ae:	3710      	adds	r7, #16
 80165b0:	46bd      	mov	sp, r7
 80165b2:	bd80      	pop	{r7, pc}

080165b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80165b4:	b580      	push	{r7, lr}
 80165b6:	b084      	sub	sp, #16
 80165b8:	af00      	add	r7, sp, #0
 80165ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80165bc:	f001 fdba 	bl	8018134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80165c8:	429a      	cmp	r2, r3
 80165ca:	d102      	bne.n	80165d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80165cc:	2301      	movs	r3, #1
 80165ce:	60fb      	str	r3, [r7, #12]
 80165d0:	e001      	b.n	80165d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80165d2:	2300      	movs	r3, #0
 80165d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80165d6:	f001 fddd 	bl	8018194 <vPortExitCritical>

	return xReturn;
 80165da:	68fb      	ldr	r3, [r7, #12]
}
 80165dc:	4618      	mov	r0, r3
 80165de:	3710      	adds	r7, #16
 80165e0:	46bd      	mov	sp, r7
 80165e2:	bd80      	pop	{r7, pc}

080165e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80165e4:	b480      	push	{r7}
 80165e6:	b085      	sub	sp, #20
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	6078      	str	r0, [r7, #4]
 80165ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80165ee:	2300      	movs	r3, #0
 80165f0:	60fb      	str	r3, [r7, #12]
 80165f2:	e014      	b.n	801661e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80165f4:	4a0f      	ldr	r2, [pc, #60]	; (8016634 <vQueueAddToRegistry+0x50>)
 80165f6:	68fb      	ldr	r3, [r7, #12]
 80165f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d10b      	bne.n	8016618 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8016600:	490c      	ldr	r1, [pc, #48]	; (8016634 <vQueueAddToRegistry+0x50>)
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	683a      	ldr	r2, [r7, #0]
 8016606:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801660a:	4a0a      	ldr	r2, [pc, #40]	; (8016634 <vQueueAddToRegistry+0x50>)
 801660c:	68fb      	ldr	r3, [r7, #12]
 801660e:	00db      	lsls	r3, r3, #3
 8016610:	4413      	add	r3, r2
 8016612:	687a      	ldr	r2, [r7, #4]
 8016614:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8016616:	e006      	b.n	8016626 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016618:	68fb      	ldr	r3, [r7, #12]
 801661a:	3301      	adds	r3, #1
 801661c:	60fb      	str	r3, [r7, #12]
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	2b07      	cmp	r3, #7
 8016622:	d9e7      	bls.n	80165f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8016624:	bf00      	nop
 8016626:	bf00      	nop
 8016628:	3714      	adds	r7, #20
 801662a:	46bd      	mov	sp, r7
 801662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016630:	4770      	bx	lr
 8016632:	bf00      	nop
 8016634:	24016eec 	.word	0x24016eec

08016638 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016638:	b580      	push	{r7, lr}
 801663a:	b086      	sub	sp, #24
 801663c:	af00      	add	r7, sp, #0
 801663e:	60f8      	str	r0, [r7, #12]
 8016640:	60b9      	str	r1, [r7, #8]
 8016642:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8016644:	68fb      	ldr	r3, [r7, #12]
 8016646:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8016648:	f001 fd74 	bl	8018134 <vPortEnterCritical>
 801664c:	697b      	ldr	r3, [r7, #20]
 801664e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016652:	b25b      	sxtb	r3, r3
 8016654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016658:	d103      	bne.n	8016662 <vQueueWaitForMessageRestricted+0x2a>
 801665a:	697b      	ldr	r3, [r7, #20]
 801665c:	2200      	movs	r2, #0
 801665e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016662:	697b      	ldr	r3, [r7, #20]
 8016664:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016668:	b25b      	sxtb	r3, r3
 801666a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801666e:	d103      	bne.n	8016678 <vQueueWaitForMessageRestricted+0x40>
 8016670:	697b      	ldr	r3, [r7, #20]
 8016672:	2200      	movs	r2, #0
 8016674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016678:	f001 fd8c 	bl	8018194 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801667c:	697b      	ldr	r3, [r7, #20]
 801667e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016680:	2b00      	cmp	r3, #0
 8016682:	d106      	bne.n	8016692 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016684:	697b      	ldr	r3, [r7, #20]
 8016686:	3324      	adds	r3, #36	; 0x24
 8016688:	687a      	ldr	r2, [r7, #4]
 801668a:	68b9      	ldr	r1, [r7, #8]
 801668c:	4618      	mov	r0, r3
 801668e:	f000 fc4d 	bl	8016f2c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8016692:	6978      	ldr	r0, [r7, #20]
 8016694:	f7ff ff26 	bl	80164e4 <prvUnlockQueue>
	}
 8016698:	bf00      	nop
 801669a:	3718      	adds	r7, #24
 801669c:	46bd      	mov	sp, r7
 801669e:	bd80      	pop	{r7, pc}

080166a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80166a0:	b580      	push	{r7, lr}
 80166a2:	b08e      	sub	sp, #56	; 0x38
 80166a4:	af04      	add	r7, sp, #16
 80166a6:	60f8      	str	r0, [r7, #12]
 80166a8:	60b9      	str	r1, [r7, #8]
 80166aa:	607a      	str	r2, [r7, #4]
 80166ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80166ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d10a      	bne.n	80166ca <xTaskCreateStatic+0x2a>
	__asm volatile
 80166b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166b8:	f383 8811 	msr	BASEPRI, r3
 80166bc:	f3bf 8f6f 	isb	sy
 80166c0:	f3bf 8f4f 	dsb	sy
 80166c4:	623b      	str	r3, [r7, #32]
}
 80166c6:	bf00      	nop
 80166c8:	e7fe      	b.n	80166c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80166ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d10a      	bne.n	80166e6 <xTaskCreateStatic+0x46>
	__asm volatile
 80166d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166d4:	f383 8811 	msr	BASEPRI, r3
 80166d8:	f3bf 8f6f 	isb	sy
 80166dc:	f3bf 8f4f 	dsb	sy
 80166e0:	61fb      	str	r3, [r7, #28]
}
 80166e2:	bf00      	nop
 80166e4:	e7fe      	b.n	80166e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80166e6:	23b4      	movs	r3, #180	; 0xb4
 80166e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80166ea:	693b      	ldr	r3, [r7, #16]
 80166ec:	2bb4      	cmp	r3, #180	; 0xb4
 80166ee:	d00a      	beq.n	8016706 <xTaskCreateStatic+0x66>
	__asm volatile
 80166f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166f4:	f383 8811 	msr	BASEPRI, r3
 80166f8:	f3bf 8f6f 	isb	sy
 80166fc:	f3bf 8f4f 	dsb	sy
 8016700:	61bb      	str	r3, [r7, #24]
}
 8016702:	bf00      	nop
 8016704:	e7fe      	b.n	8016704 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8016706:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8016708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801670a:	2b00      	cmp	r3, #0
 801670c:	d01e      	beq.n	801674c <xTaskCreateStatic+0xac>
 801670e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016710:	2b00      	cmp	r3, #0
 8016712:	d01b      	beq.n	801674c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016716:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8016718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801671a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801671c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016720:	2202      	movs	r2, #2
 8016722:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8016726:	2300      	movs	r3, #0
 8016728:	9303      	str	r3, [sp, #12]
 801672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801672c:	9302      	str	r3, [sp, #8]
 801672e:	f107 0314 	add.w	r3, r7, #20
 8016732:	9301      	str	r3, [sp, #4]
 8016734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016736:	9300      	str	r3, [sp, #0]
 8016738:	683b      	ldr	r3, [r7, #0]
 801673a:	687a      	ldr	r2, [r7, #4]
 801673c:	68b9      	ldr	r1, [r7, #8]
 801673e:	68f8      	ldr	r0, [r7, #12]
 8016740:	f000 f850 	bl	80167e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016744:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016746:	f000 f8eb 	bl	8016920 <prvAddNewTaskToReadyList>
 801674a:	e001      	b.n	8016750 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801674c:	2300      	movs	r3, #0
 801674e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016750:	697b      	ldr	r3, [r7, #20]
	}
 8016752:	4618      	mov	r0, r3
 8016754:	3728      	adds	r7, #40	; 0x28
 8016756:	46bd      	mov	sp, r7
 8016758:	bd80      	pop	{r7, pc}

0801675a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801675a:	b580      	push	{r7, lr}
 801675c:	b08c      	sub	sp, #48	; 0x30
 801675e:	af04      	add	r7, sp, #16
 8016760:	60f8      	str	r0, [r7, #12]
 8016762:	60b9      	str	r1, [r7, #8]
 8016764:	603b      	str	r3, [r7, #0]
 8016766:	4613      	mov	r3, r2
 8016768:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801676a:	88fb      	ldrh	r3, [r7, #6]
 801676c:	009b      	lsls	r3, r3, #2
 801676e:	4618      	mov	r0, r3
 8016770:	f001 fe02 	bl	8018378 <pvPortMalloc>
 8016774:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016776:	697b      	ldr	r3, [r7, #20]
 8016778:	2b00      	cmp	r3, #0
 801677a:	d00e      	beq.n	801679a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801677c:	20b4      	movs	r0, #180	; 0xb4
 801677e:	f001 fdfb 	bl	8018378 <pvPortMalloc>
 8016782:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016784:	69fb      	ldr	r3, [r7, #28]
 8016786:	2b00      	cmp	r3, #0
 8016788:	d003      	beq.n	8016792 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801678a:	69fb      	ldr	r3, [r7, #28]
 801678c:	697a      	ldr	r2, [r7, #20]
 801678e:	631a      	str	r2, [r3, #48]	; 0x30
 8016790:	e005      	b.n	801679e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016792:	6978      	ldr	r0, [r7, #20]
 8016794:	f001 febc 	bl	8018510 <vPortFree>
 8016798:	e001      	b.n	801679e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801679a:	2300      	movs	r3, #0
 801679c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801679e:	69fb      	ldr	r3, [r7, #28]
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d017      	beq.n	80167d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80167a4:	69fb      	ldr	r3, [r7, #28]
 80167a6:	2200      	movs	r2, #0
 80167a8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80167ac:	88fa      	ldrh	r2, [r7, #6]
 80167ae:	2300      	movs	r3, #0
 80167b0:	9303      	str	r3, [sp, #12]
 80167b2:	69fb      	ldr	r3, [r7, #28]
 80167b4:	9302      	str	r3, [sp, #8]
 80167b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167b8:	9301      	str	r3, [sp, #4]
 80167ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167bc:	9300      	str	r3, [sp, #0]
 80167be:	683b      	ldr	r3, [r7, #0]
 80167c0:	68b9      	ldr	r1, [r7, #8]
 80167c2:	68f8      	ldr	r0, [r7, #12]
 80167c4:	f000 f80e 	bl	80167e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80167c8:	69f8      	ldr	r0, [r7, #28]
 80167ca:	f000 f8a9 	bl	8016920 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80167ce:	2301      	movs	r3, #1
 80167d0:	61bb      	str	r3, [r7, #24]
 80167d2:	e002      	b.n	80167da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80167d4:	f04f 33ff 	mov.w	r3, #4294967295
 80167d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80167da:	69bb      	ldr	r3, [r7, #24]
	}
 80167dc:	4618      	mov	r0, r3
 80167de:	3720      	adds	r7, #32
 80167e0:	46bd      	mov	sp, r7
 80167e2:	bd80      	pop	{r7, pc}

080167e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80167e4:	b580      	push	{r7, lr}
 80167e6:	b088      	sub	sp, #32
 80167e8:	af00      	add	r7, sp, #0
 80167ea:	60f8      	str	r0, [r7, #12]
 80167ec:	60b9      	str	r1, [r7, #8]
 80167ee:	607a      	str	r2, [r7, #4]
 80167f0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80167f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80167f6:	6879      	ldr	r1, [r7, #4]
 80167f8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80167fc:	440b      	add	r3, r1
 80167fe:	009b      	lsls	r3, r3, #2
 8016800:	4413      	add	r3, r2
 8016802:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8016804:	69bb      	ldr	r3, [r7, #24]
 8016806:	f023 0307 	bic.w	r3, r3, #7
 801680a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801680c:	69bb      	ldr	r3, [r7, #24]
 801680e:	f003 0307 	and.w	r3, r3, #7
 8016812:	2b00      	cmp	r3, #0
 8016814:	d00a      	beq.n	801682c <prvInitialiseNewTask+0x48>
	__asm volatile
 8016816:	f04f 0350 	mov.w	r3, #80	; 0x50
 801681a:	f383 8811 	msr	BASEPRI, r3
 801681e:	f3bf 8f6f 	isb	sy
 8016822:	f3bf 8f4f 	dsb	sy
 8016826:	617b      	str	r3, [r7, #20]
}
 8016828:	bf00      	nop
 801682a:	e7fe      	b.n	801682a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801682c:	68bb      	ldr	r3, [r7, #8]
 801682e:	2b00      	cmp	r3, #0
 8016830:	d01f      	beq.n	8016872 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016832:	2300      	movs	r3, #0
 8016834:	61fb      	str	r3, [r7, #28]
 8016836:	e012      	b.n	801685e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016838:	68ba      	ldr	r2, [r7, #8]
 801683a:	69fb      	ldr	r3, [r7, #28]
 801683c:	4413      	add	r3, r2
 801683e:	7819      	ldrb	r1, [r3, #0]
 8016840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016842:	69fb      	ldr	r3, [r7, #28]
 8016844:	4413      	add	r3, r2
 8016846:	3334      	adds	r3, #52	; 0x34
 8016848:	460a      	mov	r2, r1
 801684a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801684c:	68ba      	ldr	r2, [r7, #8]
 801684e:	69fb      	ldr	r3, [r7, #28]
 8016850:	4413      	add	r3, r2
 8016852:	781b      	ldrb	r3, [r3, #0]
 8016854:	2b00      	cmp	r3, #0
 8016856:	d006      	beq.n	8016866 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016858:	69fb      	ldr	r3, [r7, #28]
 801685a:	3301      	adds	r3, #1
 801685c:	61fb      	str	r3, [r7, #28]
 801685e:	69fb      	ldr	r3, [r7, #28]
 8016860:	2b0f      	cmp	r3, #15
 8016862:	d9e9      	bls.n	8016838 <prvInitialiseNewTask+0x54>
 8016864:	e000      	b.n	8016868 <prvInitialiseNewTask+0x84>
			{
				break;
 8016866:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801686a:	2200      	movs	r2, #0
 801686c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8016870:	e003      	b.n	801687a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016874:	2200      	movs	r2, #0
 8016876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801687a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801687c:	2b06      	cmp	r3, #6
 801687e:	d901      	bls.n	8016884 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016880:	2306      	movs	r3, #6
 8016882:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016888:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801688a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801688c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801688e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8016890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016892:	2200      	movs	r2, #0
 8016894:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016898:	3304      	adds	r3, #4
 801689a:	4618      	mov	r0, r3
 801689c:	f7fe ff1a 	bl	80156d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80168a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168a2:	3318      	adds	r3, #24
 80168a4:	4618      	mov	r0, r3
 80168a6:	f7fe ff15 	bl	80156d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80168aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80168ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80168b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168b2:	f1c3 0207 	rsb	r2, r3, #7
 80168b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80168ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80168be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80168c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168c2:	2200      	movs	r2, #0
 80168c4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80168c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168ca:	2200      	movs	r2, #0
 80168cc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80168d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168d2:	334c      	adds	r3, #76	; 0x4c
 80168d4:	2260      	movs	r2, #96	; 0x60
 80168d6:	2100      	movs	r1, #0
 80168d8:	4618      	mov	r0, r3
 80168da:	f00a fc95 	bl	8021208 <memset>
 80168de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168e0:	4a0c      	ldr	r2, [pc, #48]	; (8016914 <prvInitialiseNewTask+0x130>)
 80168e2:	651a      	str	r2, [r3, #80]	; 0x50
 80168e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168e6:	4a0c      	ldr	r2, [pc, #48]	; (8016918 <prvInitialiseNewTask+0x134>)
 80168e8:	655a      	str	r2, [r3, #84]	; 0x54
 80168ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168ec:	4a0b      	ldr	r2, [pc, #44]	; (801691c <prvInitialiseNewTask+0x138>)
 80168ee:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80168f0:	683a      	ldr	r2, [r7, #0]
 80168f2:	68f9      	ldr	r1, [r7, #12]
 80168f4:	69b8      	ldr	r0, [r7, #24]
 80168f6:	f001 faf3 	bl	8017ee0 <pxPortInitialiseStack>
 80168fa:	4602      	mov	r2, r0
 80168fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8016900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016902:	2b00      	cmp	r3, #0
 8016904:	d002      	beq.n	801690c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801690a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801690c:	bf00      	nop
 801690e:	3720      	adds	r7, #32
 8016910:	46bd      	mov	sp, r7
 8016912:	bd80      	pop	{r7, pc}
 8016914:	08026044 	.word	0x08026044
 8016918:	08026064 	.word	0x08026064
 801691c:	08026024 	.word	0x08026024

08016920 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016920:	b580      	push	{r7, lr}
 8016922:	b082      	sub	sp, #8
 8016924:	af00      	add	r7, sp, #0
 8016926:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8016928:	f001 fc04 	bl	8018134 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801692c:	4b2a      	ldr	r3, [pc, #168]	; (80169d8 <prvAddNewTaskToReadyList+0xb8>)
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	3301      	adds	r3, #1
 8016932:	4a29      	ldr	r2, [pc, #164]	; (80169d8 <prvAddNewTaskToReadyList+0xb8>)
 8016934:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8016936:	4b29      	ldr	r3, [pc, #164]	; (80169dc <prvAddNewTaskToReadyList+0xbc>)
 8016938:	681b      	ldr	r3, [r3, #0]
 801693a:	2b00      	cmp	r3, #0
 801693c:	d109      	bne.n	8016952 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801693e:	4a27      	ldr	r2, [pc, #156]	; (80169dc <prvAddNewTaskToReadyList+0xbc>)
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016944:	4b24      	ldr	r3, [pc, #144]	; (80169d8 <prvAddNewTaskToReadyList+0xb8>)
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	2b01      	cmp	r3, #1
 801694a:	d110      	bne.n	801696e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801694c:	f000 fc18 	bl	8017180 <prvInitialiseTaskLists>
 8016950:	e00d      	b.n	801696e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8016952:	4b23      	ldr	r3, [pc, #140]	; (80169e0 <prvAddNewTaskToReadyList+0xc0>)
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	2b00      	cmp	r3, #0
 8016958:	d109      	bne.n	801696e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801695a:	4b20      	ldr	r3, [pc, #128]	; (80169dc <prvAddNewTaskToReadyList+0xbc>)
 801695c:	681b      	ldr	r3, [r3, #0]
 801695e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016964:	429a      	cmp	r2, r3
 8016966:	d802      	bhi.n	801696e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016968:	4a1c      	ldr	r2, [pc, #112]	; (80169dc <prvAddNewTaskToReadyList+0xbc>)
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801696e:	4b1d      	ldr	r3, [pc, #116]	; (80169e4 <prvAddNewTaskToReadyList+0xc4>)
 8016970:	681b      	ldr	r3, [r3, #0]
 8016972:	3301      	adds	r3, #1
 8016974:	4a1b      	ldr	r2, [pc, #108]	; (80169e4 <prvAddNewTaskToReadyList+0xc4>)
 8016976:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801697c:	2201      	movs	r2, #1
 801697e:	409a      	lsls	r2, r3
 8016980:	4b19      	ldr	r3, [pc, #100]	; (80169e8 <prvAddNewTaskToReadyList+0xc8>)
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	4313      	orrs	r3, r2
 8016986:	4a18      	ldr	r2, [pc, #96]	; (80169e8 <prvAddNewTaskToReadyList+0xc8>)
 8016988:	6013      	str	r3, [r2, #0]
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801698e:	4613      	mov	r3, r2
 8016990:	009b      	lsls	r3, r3, #2
 8016992:	4413      	add	r3, r2
 8016994:	009b      	lsls	r3, r3, #2
 8016996:	4a15      	ldr	r2, [pc, #84]	; (80169ec <prvAddNewTaskToReadyList+0xcc>)
 8016998:	441a      	add	r2, r3
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	3304      	adds	r3, #4
 801699e:	4619      	mov	r1, r3
 80169a0:	4610      	mov	r0, r2
 80169a2:	f7fe fea4 	bl	80156ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80169a6:	f001 fbf5 	bl	8018194 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80169aa:	4b0d      	ldr	r3, [pc, #52]	; (80169e0 <prvAddNewTaskToReadyList+0xc0>)
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d00e      	beq.n	80169d0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80169b2:	4b0a      	ldr	r3, [pc, #40]	; (80169dc <prvAddNewTaskToReadyList+0xbc>)
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169bc:	429a      	cmp	r2, r3
 80169be:	d207      	bcs.n	80169d0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80169c0:	4b0b      	ldr	r3, [pc, #44]	; (80169f0 <prvAddNewTaskToReadyList+0xd0>)
 80169c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80169c6:	601a      	str	r2, [r3, #0]
 80169c8:	f3bf 8f4f 	dsb	sy
 80169cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80169d0:	bf00      	nop
 80169d2:	3708      	adds	r7, #8
 80169d4:	46bd      	mov	sp, r7
 80169d6:	bd80      	pop	{r7, pc}
 80169d8:	240011cc 	.word	0x240011cc
 80169dc:	240010cc 	.word	0x240010cc
 80169e0:	240011d8 	.word	0x240011d8
 80169e4:	240011e8 	.word	0x240011e8
 80169e8:	240011d4 	.word	0x240011d4
 80169ec:	240010d0 	.word	0x240010d0
 80169f0:	e000ed04 	.word	0xe000ed04

080169f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80169f4:	b580      	push	{r7, lr}
 80169f6:	b084      	sub	sp, #16
 80169f8:	af00      	add	r7, sp, #0
 80169fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80169fc:	2300      	movs	r3, #0
 80169fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d017      	beq.n	8016a36 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8016a06:	4b13      	ldr	r3, [pc, #76]	; (8016a54 <vTaskDelay+0x60>)
 8016a08:	681b      	ldr	r3, [r3, #0]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d00a      	beq.n	8016a24 <vTaskDelay+0x30>
	__asm volatile
 8016a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a12:	f383 8811 	msr	BASEPRI, r3
 8016a16:	f3bf 8f6f 	isb	sy
 8016a1a:	f3bf 8f4f 	dsb	sy
 8016a1e:	60bb      	str	r3, [r7, #8]
}
 8016a20:	bf00      	nop
 8016a22:	e7fe      	b.n	8016a22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8016a24:	f000 f88a 	bl	8016b3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8016a28:	2100      	movs	r1, #0
 8016a2a:	6878      	ldr	r0, [r7, #4]
 8016a2c:	f000 fe26 	bl	801767c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8016a30:	f000 f892 	bl	8016b58 <xTaskResumeAll>
 8016a34:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d107      	bne.n	8016a4c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8016a3c:	4b06      	ldr	r3, [pc, #24]	; (8016a58 <vTaskDelay+0x64>)
 8016a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016a42:	601a      	str	r2, [r3, #0]
 8016a44:	f3bf 8f4f 	dsb	sy
 8016a48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016a4c:	bf00      	nop
 8016a4e:	3710      	adds	r7, #16
 8016a50:	46bd      	mov	sp, r7
 8016a52:	bd80      	pop	{r7, pc}
 8016a54:	240011f4 	.word	0x240011f4
 8016a58:	e000ed04 	.word	0xe000ed04

08016a5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016a5c:	b580      	push	{r7, lr}
 8016a5e:	b08a      	sub	sp, #40	; 0x28
 8016a60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016a62:	2300      	movs	r3, #0
 8016a64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016a66:	2300      	movs	r3, #0
 8016a68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8016a6a:	463a      	mov	r2, r7
 8016a6c:	1d39      	adds	r1, r7, #4
 8016a6e:	f107 0308 	add.w	r3, r7, #8
 8016a72:	4618      	mov	r0, r3
 8016a74:	f7e9 fea8 	bl	80007c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016a78:	6839      	ldr	r1, [r7, #0]
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	68ba      	ldr	r2, [r7, #8]
 8016a7e:	9202      	str	r2, [sp, #8]
 8016a80:	9301      	str	r3, [sp, #4]
 8016a82:	2300      	movs	r3, #0
 8016a84:	9300      	str	r3, [sp, #0]
 8016a86:	2300      	movs	r3, #0
 8016a88:	460a      	mov	r2, r1
 8016a8a:	4924      	ldr	r1, [pc, #144]	; (8016b1c <vTaskStartScheduler+0xc0>)
 8016a8c:	4824      	ldr	r0, [pc, #144]	; (8016b20 <vTaskStartScheduler+0xc4>)
 8016a8e:	f7ff fe07 	bl	80166a0 <xTaskCreateStatic>
 8016a92:	4603      	mov	r3, r0
 8016a94:	4a23      	ldr	r2, [pc, #140]	; (8016b24 <vTaskStartScheduler+0xc8>)
 8016a96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016a98:	4b22      	ldr	r3, [pc, #136]	; (8016b24 <vTaskStartScheduler+0xc8>)
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d002      	beq.n	8016aa6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016aa0:	2301      	movs	r3, #1
 8016aa2:	617b      	str	r3, [r7, #20]
 8016aa4:	e001      	b.n	8016aaa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8016aa6:	2300      	movs	r3, #0
 8016aa8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8016aaa:	697b      	ldr	r3, [r7, #20]
 8016aac:	2b01      	cmp	r3, #1
 8016aae:	d102      	bne.n	8016ab6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8016ab0:	f000 fe4a 	bl	8017748 <xTimerCreateTimerTask>
 8016ab4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8016ab6:	697b      	ldr	r3, [r7, #20]
 8016ab8:	2b01      	cmp	r3, #1
 8016aba:	d11b      	bne.n	8016af4 <vTaskStartScheduler+0x98>
	__asm volatile
 8016abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ac0:	f383 8811 	msr	BASEPRI, r3
 8016ac4:	f3bf 8f6f 	isb	sy
 8016ac8:	f3bf 8f4f 	dsb	sy
 8016acc:	613b      	str	r3, [r7, #16]
}
 8016ace:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016ad0:	4b15      	ldr	r3, [pc, #84]	; (8016b28 <vTaskStartScheduler+0xcc>)
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	334c      	adds	r3, #76	; 0x4c
 8016ad6:	4a15      	ldr	r2, [pc, #84]	; (8016b2c <vTaskStartScheduler+0xd0>)
 8016ad8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8016ada:	4b15      	ldr	r3, [pc, #84]	; (8016b30 <vTaskStartScheduler+0xd4>)
 8016adc:	f04f 32ff 	mov.w	r2, #4294967295
 8016ae0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8016ae2:	4b14      	ldr	r3, [pc, #80]	; (8016b34 <vTaskStartScheduler+0xd8>)
 8016ae4:	2201      	movs	r2, #1
 8016ae6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8016ae8:	4b13      	ldr	r3, [pc, #76]	; (8016b38 <vTaskStartScheduler+0xdc>)
 8016aea:	2200      	movs	r2, #0
 8016aec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8016aee:	f001 fa7f 	bl	8017ff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8016af2:	e00e      	b.n	8016b12 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8016af4:	697b      	ldr	r3, [r7, #20]
 8016af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016afa:	d10a      	bne.n	8016b12 <vTaskStartScheduler+0xb6>
	__asm volatile
 8016afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b00:	f383 8811 	msr	BASEPRI, r3
 8016b04:	f3bf 8f6f 	isb	sy
 8016b08:	f3bf 8f4f 	dsb	sy
 8016b0c:	60fb      	str	r3, [r7, #12]
}
 8016b0e:	bf00      	nop
 8016b10:	e7fe      	b.n	8016b10 <vTaskStartScheduler+0xb4>
}
 8016b12:	bf00      	nop
 8016b14:	3718      	adds	r7, #24
 8016b16:	46bd      	mov	sp, r7
 8016b18:	bd80      	pop	{r7, pc}
 8016b1a:	bf00      	nop
 8016b1c:	08023f64 	.word	0x08023f64
 8016b20:	08017151 	.word	0x08017151
 8016b24:	240011f0 	.word	0x240011f0
 8016b28:	240010cc 	.word	0x240010cc
 8016b2c:	24000134 	.word	0x24000134
 8016b30:	240011ec 	.word	0x240011ec
 8016b34:	240011d8 	.word	0x240011d8
 8016b38:	240011d0 	.word	0x240011d0

08016b3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8016b3c:	b480      	push	{r7}
 8016b3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8016b40:	4b04      	ldr	r3, [pc, #16]	; (8016b54 <vTaskSuspendAll+0x18>)
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	3301      	adds	r3, #1
 8016b46:	4a03      	ldr	r2, [pc, #12]	; (8016b54 <vTaskSuspendAll+0x18>)
 8016b48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8016b4a:	bf00      	nop
 8016b4c:	46bd      	mov	sp, r7
 8016b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b52:	4770      	bx	lr
 8016b54:	240011f4 	.word	0x240011f4

08016b58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016b58:	b580      	push	{r7, lr}
 8016b5a:	b084      	sub	sp, #16
 8016b5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8016b5e:	2300      	movs	r3, #0
 8016b60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8016b62:	2300      	movs	r3, #0
 8016b64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016b66:	4b41      	ldr	r3, [pc, #260]	; (8016c6c <xTaskResumeAll+0x114>)
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d10a      	bne.n	8016b84 <xTaskResumeAll+0x2c>
	__asm volatile
 8016b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b72:	f383 8811 	msr	BASEPRI, r3
 8016b76:	f3bf 8f6f 	isb	sy
 8016b7a:	f3bf 8f4f 	dsb	sy
 8016b7e:	603b      	str	r3, [r7, #0]
}
 8016b80:	bf00      	nop
 8016b82:	e7fe      	b.n	8016b82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016b84:	f001 fad6 	bl	8018134 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016b88:	4b38      	ldr	r3, [pc, #224]	; (8016c6c <xTaskResumeAll+0x114>)
 8016b8a:	681b      	ldr	r3, [r3, #0]
 8016b8c:	3b01      	subs	r3, #1
 8016b8e:	4a37      	ldr	r2, [pc, #220]	; (8016c6c <xTaskResumeAll+0x114>)
 8016b90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016b92:	4b36      	ldr	r3, [pc, #216]	; (8016c6c <xTaskResumeAll+0x114>)
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d161      	bne.n	8016c5e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016b9a:	4b35      	ldr	r3, [pc, #212]	; (8016c70 <xTaskResumeAll+0x118>)
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d05d      	beq.n	8016c5e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016ba2:	e02e      	b.n	8016c02 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016ba4:	4b33      	ldr	r3, [pc, #204]	; (8016c74 <xTaskResumeAll+0x11c>)
 8016ba6:	68db      	ldr	r3, [r3, #12]
 8016ba8:	68db      	ldr	r3, [r3, #12]
 8016baa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	3318      	adds	r3, #24
 8016bb0:	4618      	mov	r0, r3
 8016bb2:	f7fe fdf9 	bl	80157a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	3304      	adds	r3, #4
 8016bba:	4618      	mov	r0, r3
 8016bbc:	f7fe fdf4 	bl	80157a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016bc0:	68fb      	ldr	r3, [r7, #12]
 8016bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016bc4:	2201      	movs	r2, #1
 8016bc6:	409a      	lsls	r2, r3
 8016bc8:	4b2b      	ldr	r3, [pc, #172]	; (8016c78 <xTaskResumeAll+0x120>)
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	4313      	orrs	r3, r2
 8016bce:	4a2a      	ldr	r2, [pc, #168]	; (8016c78 <xTaskResumeAll+0x120>)
 8016bd0:	6013      	str	r3, [r2, #0]
 8016bd2:	68fb      	ldr	r3, [r7, #12]
 8016bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016bd6:	4613      	mov	r3, r2
 8016bd8:	009b      	lsls	r3, r3, #2
 8016bda:	4413      	add	r3, r2
 8016bdc:	009b      	lsls	r3, r3, #2
 8016bde:	4a27      	ldr	r2, [pc, #156]	; (8016c7c <xTaskResumeAll+0x124>)
 8016be0:	441a      	add	r2, r3
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	3304      	adds	r3, #4
 8016be6:	4619      	mov	r1, r3
 8016be8:	4610      	mov	r0, r2
 8016bea:	f7fe fd80 	bl	80156ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016bf2:	4b23      	ldr	r3, [pc, #140]	; (8016c80 <xTaskResumeAll+0x128>)
 8016bf4:	681b      	ldr	r3, [r3, #0]
 8016bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016bf8:	429a      	cmp	r2, r3
 8016bfa:	d302      	bcc.n	8016c02 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8016bfc:	4b21      	ldr	r3, [pc, #132]	; (8016c84 <xTaskResumeAll+0x12c>)
 8016bfe:	2201      	movs	r2, #1
 8016c00:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016c02:	4b1c      	ldr	r3, [pc, #112]	; (8016c74 <xTaskResumeAll+0x11c>)
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d1cc      	bne.n	8016ba4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8016c0a:	68fb      	ldr	r3, [r7, #12]
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d001      	beq.n	8016c14 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8016c10:	f000 fb58 	bl	80172c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8016c14:	4b1c      	ldr	r3, [pc, #112]	; (8016c88 <xTaskResumeAll+0x130>)
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d010      	beq.n	8016c42 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016c20:	f000 f846 	bl	8016cb0 <xTaskIncrementTick>
 8016c24:	4603      	mov	r3, r0
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d002      	beq.n	8016c30 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8016c2a:	4b16      	ldr	r3, [pc, #88]	; (8016c84 <xTaskResumeAll+0x12c>)
 8016c2c:	2201      	movs	r2, #1
 8016c2e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	3b01      	subs	r3, #1
 8016c34:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d1f1      	bne.n	8016c20 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8016c3c:	4b12      	ldr	r3, [pc, #72]	; (8016c88 <xTaskResumeAll+0x130>)
 8016c3e:	2200      	movs	r2, #0
 8016c40:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016c42:	4b10      	ldr	r3, [pc, #64]	; (8016c84 <xTaskResumeAll+0x12c>)
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d009      	beq.n	8016c5e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8016c4a:	2301      	movs	r3, #1
 8016c4c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016c4e:	4b0f      	ldr	r3, [pc, #60]	; (8016c8c <xTaskResumeAll+0x134>)
 8016c50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016c54:	601a      	str	r2, [r3, #0]
 8016c56:	f3bf 8f4f 	dsb	sy
 8016c5a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016c5e:	f001 fa99 	bl	8018194 <vPortExitCritical>

	return xAlreadyYielded;
 8016c62:	68bb      	ldr	r3, [r7, #8]
}
 8016c64:	4618      	mov	r0, r3
 8016c66:	3710      	adds	r7, #16
 8016c68:	46bd      	mov	sp, r7
 8016c6a:	bd80      	pop	{r7, pc}
 8016c6c:	240011f4 	.word	0x240011f4
 8016c70:	240011cc 	.word	0x240011cc
 8016c74:	2400118c 	.word	0x2400118c
 8016c78:	240011d4 	.word	0x240011d4
 8016c7c:	240010d0 	.word	0x240010d0
 8016c80:	240010cc 	.word	0x240010cc
 8016c84:	240011e0 	.word	0x240011e0
 8016c88:	240011dc 	.word	0x240011dc
 8016c8c:	e000ed04 	.word	0xe000ed04

08016c90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016c90:	b480      	push	{r7}
 8016c92:	b083      	sub	sp, #12
 8016c94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8016c96:	4b05      	ldr	r3, [pc, #20]	; (8016cac <xTaskGetTickCount+0x1c>)
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016c9c:	687b      	ldr	r3, [r7, #4]
}
 8016c9e:	4618      	mov	r0, r3
 8016ca0:	370c      	adds	r7, #12
 8016ca2:	46bd      	mov	sp, r7
 8016ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ca8:	4770      	bx	lr
 8016caa:	bf00      	nop
 8016cac:	240011d0 	.word	0x240011d0

08016cb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016cb0:	b580      	push	{r7, lr}
 8016cb2:	b086      	sub	sp, #24
 8016cb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8016cb6:	2300      	movs	r3, #0
 8016cb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016cba:	4b4e      	ldr	r3, [pc, #312]	; (8016df4 <xTaskIncrementTick+0x144>)
 8016cbc:	681b      	ldr	r3, [r3, #0]
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	f040 808e 	bne.w	8016de0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016cc4:	4b4c      	ldr	r3, [pc, #304]	; (8016df8 <xTaskIncrementTick+0x148>)
 8016cc6:	681b      	ldr	r3, [r3, #0]
 8016cc8:	3301      	adds	r3, #1
 8016cca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016ccc:	4a4a      	ldr	r2, [pc, #296]	; (8016df8 <xTaskIncrementTick+0x148>)
 8016cce:	693b      	ldr	r3, [r7, #16]
 8016cd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8016cd2:	693b      	ldr	r3, [r7, #16]
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d120      	bne.n	8016d1a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8016cd8:	4b48      	ldr	r3, [pc, #288]	; (8016dfc <xTaskIncrementTick+0x14c>)
 8016cda:	681b      	ldr	r3, [r3, #0]
 8016cdc:	681b      	ldr	r3, [r3, #0]
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d00a      	beq.n	8016cf8 <xTaskIncrementTick+0x48>
	__asm volatile
 8016ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ce6:	f383 8811 	msr	BASEPRI, r3
 8016cea:	f3bf 8f6f 	isb	sy
 8016cee:	f3bf 8f4f 	dsb	sy
 8016cf2:	603b      	str	r3, [r7, #0]
}
 8016cf4:	bf00      	nop
 8016cf6:	e7fe      	b.n	8016cf6 <xTaskIncrementTick+0x46>
 8016cf8:	4b40      	ldr	r3, [pc, #256]	; (8016dfc <xTaskIncrementTick+0x14c>)
 8016cfa:	681b      	ldr	r3, [r3, #0]
 8016cfc:	60fb      	str	r3, [r7, #12]
 8016cfe:	4b40      	ldr	r3, [pc, #256]	; (8016e00 <xTaskIncrementTick+0x150>)
 8016d00:	681b      	ldr	r3, [r3, #0]
 8016d02:	4a3e      	ldr	r2, [pc, #248]	; (8016dfc <xTaskIncrementTick+0x14c>)
 8016d04:	6013      	str	r3, [r2, #0]
 8016d06:	4a3e      	ldr	r2, [pc, #248]	; (8016e00 <xTaskIncrementTick+0x150>)
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	6013      	str	r3, [r2, #0]
 8016d0c:	4b3d      	ldr	r3, [pc, #244]	; (8016e04 <xTaskIncrementTick+0x154>)
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	3301      	adds	r3, #1
 8016d12:	4a3c      	ldr	r2, [pc, #240]	; (8016e04 <xTaskIncrementTick+0x154>)
 8016d14:	6013      	str	r3, [r2, #0]
 8016d16:	f000 fad5 	bl	80172c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8016d1a:	4b3b      	ldr	r3, [pc, #236]	; (8016e08 <xTaskIncrementTick+0x158>)
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	693a      	ldr	r2, [r7, #16]
 8016d20:	429a      	cmp	r2, r3
 8016d22:	d348      	bcc.n	8016db6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016d24:	4b35      	ldr	r3, [pc, #212]	; (8016dfc <xTaskIncrementTick+0x14c>)
 8016d26:	681b      	ldr	r3, [r3, #0]
 8016d28:	681b      	ldr	r3, [r3, #0]
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d104      	bne.n	8016d38 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016d2e:	4b36      	ldr	r3, [pc, #216]	; (8016e08 <xTaskIncrementTick+0x158>)
 8016d30:	f04f 32ff 	mov.w	r2, #4294967295
 8016d34:	601a      	str	r2, [r3, #0]
					break;
 8016d36:	e03e      	b.n	8016db6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016d38:	4b30      	ldr	r3, [pc, #192]	; (8016dfc <xTaskIncrementTick+0x14c>)
 8016d3a:	681b      	ldr	r3, [r3, #0]
 8016d3c:	68db      	ldr	r3, [r3, #12]
 8016d3e:	68db      	ldr	r3, [r3, #12]
 8016d40:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016d42:	68bb      	ldr	r3, [r7, #8]
 8016d44:	685b      	ldr	r3, [r3, #4]
 8016d46:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8016d48:	693a      	ldr	r2, [r7, #16]
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	429a      	cmp	r2, r3
 8016d4e:	d203      	bcs.n	8016d58 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016d50:	4a2d      	ldr	r2, [pc, #180]	; (8016e08 <xTaskIncrementTick+0x158>)
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016d56:	e02e      	b.n	8016db6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016d58:	68bb      	ldr	r3, [r7, #8]
 8016d5a:	3304      	adds	r3, #4
 8016d5c:	4618      	mov	r0, r3
 8016d5e:	f7fe fd23 	bl	80157a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016d62:	68bb      	ldr	r3, [r7, #8]
 8016d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d004      	beq.n	8016d74 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016d6a:	68bb      	ldr	r3, [r7, #8]
 8016d6c:	3318      	adds	r3, #24
 8016d6e:	4618      	mov	r0, r3
 8016d70:	f7fe fd1a 	bl	80157a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016d74:	68bb      	ldr	r3, [r7, #8]
 8016d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d78:	2201      	movs	r2, #1
 8016d7a:	409a      	lsls	r2, r3
 8016d7c:	4b23      	ldr	r3, [pc, #140]	; (8016e0c <xTaskIncrementTick+0x15c>)
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	4313      	orrs	r3, r2
 8016d82:	4a22      	ldr	r2, [pc, #136]	; (8016e0c <xTaskIncrementTick+0x15c>)
 8016d84:	6013      	str	r3, [r2, #0]
 8016d86:	68bb      	ldr	r3, [r7, #8]
 8016d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d8a:	4613      	mov	r3, r2
 8016d8c:	009b      	lsls	r3, r3, #2
 8016d8e:	4413      	add	r3, r2
 8016d90:	009b      	lsls	r3, r3, #2
 8016d92:	4a1f      	ldr	r2, [pc, #124]	; (8016e10 <xTaskIncrementTick+0x160>)
 8016d94:	441a      	add	r2, r3
 8016d96:	68bb      	ldr	r3, [r7, #8]
 8016d98:	3304      	adds	r3, #4
 8016d9a:	4619      	mov	r1, r3
 8016d9c:	4610      	mov	r0, r2
 8016d9e:	f7fe fca6 	bl	80156ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016da2:	68bb      	ldr	r3, [r7, #8]
 8016da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016da6:	4b1b      	ldr	r3, [pc, #108]	; (8016e14 <xTaskIncrementTick+0x164>)
 8016da8:	681b      	ldr	r3, [r3, #0]
 8016daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016dac:	429a      	cmp	r2, r3
 8016dae:	d3b9      	bcc.n	8016d24 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8016db0:	2301      	movs	r3, #1
 8016db2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016db4:	e7b6      	b.n	8016d24 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016db6:	4b17      	ldr	r3, [pc, #92]	; (8016e14 <xTaskIncrementTick+0x164>)
 8016db8:	681b      	ldr	r3, [r3, #0]
 8016dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016dbc:	4914      	ldr	r1, [pc, #80]	; (8016e10 <xTaskIncrementTick+0x160>)
 8016dbe:	4613      	mov	r3, r2
 8016dc0:	009b      	lsls	r3, r3, #2
 8016dc2:	4413      	add	r3, r2
 8016dc4:	009b      	lsls	r3, r3, #2
 8016dc6:	440b      	add	r3, r1
 8016dc8:	681b      	ldr	r3, [r3, #0]
 8016dca:	2b01      	cmp	r3, #1
 8016dcc:	d901      	bls.n	8016dd2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8016dce:	2301      	movs	r3, #1
 8016dd0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8016dd2:	4b11      	ldr	r3, [pc, #68]	; (8016e18 <xTaskIncrementTick+0x168>)
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d007      	beq.n	8016dea <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8016dda:	2301      	movs	r3, #1
 8016ddc:	617b      	str	r3, [r7, #20]
 8016dde:	e004      	b.n	8016dea <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8016de0:	4b0e      	ldr	r3, [pc, #56]	; (8016e1c <xTaskIncrementTick+0x16c>)
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	3301      	adds	r3, #1
 8016de6:	4a0d      	ldr	r2, [pc, #52]	; (8016e1c <xTaskIncrementTick+0x16c>)
 8016de8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8016dea:	697b      	ldr	r3, [r7, #20]
}
 8016dec:	4618      	mov	r0, r3
 8016dee:	3718      	adds	r7, #24
 8016df0:	46bd      	mov	sp, r7
 8016df2:	bd80      	pop	{r7, pc}
 8016df4:	240011f4 	.word	0x240011f4
 8016df8:	240011d0 	.word	0x240011d0
 8016dfc:	24001184 	.word	0x24001184
 8016e00:	24001188 	.word	0x24001188
 8016e04:	240011e4 	.word	0x240011e4
 8016e08:	240011ec 	.word	0x240011ec
 8016e0c:	240011d4 	.word	0x240011d4
 8016e10:	240010d0 	.word	0x240010d0
 8016e14:	240010cc 	.word	0x240010cc
 8016e18:	240011e0 	.word	0x240011e0
 8016e1c:	240011dc 	.word	0x240011dc

08016e20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016e20:	b480      	push	{r7}
 8016e22:	b087      	sub	sp, #28
 8016e24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016e26:	4b29      	ldr	r3, [pc, #164]	; (8016ecc <vTaskSwitchContext+0xac>)
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d003      	beq.n	8016e36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8016e2e:	4b28      	ldr	r3, [pc, #160]	; (8016ed0 <vTaskSwitchContext+0xb0>)
 8016e30:	2201      	movs	r2, #1
 8016e32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016e34:	e044      	b.n	8016ec0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8016e36:	4b26      	ldr	r3, [pc, #152]	; (8016ed0 <vTaskSwitchContext+0xb0>)
 8016e38:	2200      	movs	r2, #0
 8016e3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016e3c:	4b25      	ldr	r3, [pc, #148]	; (8016ed4 <vTaskSwitchContext+0xb4>)
 8016e3e:	681b      	ldr	r3, [r3, #0]
 8016e40:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8016e42:	68fb      	ldr	r3, [r7, #12]
 8016e44:	fab3 f383 	clz	r3, r3
 8016e48:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8016e4a:	7afb      	ldrb	r3, [r7, #11]
 8016e4c:	f1c3 031f 	rsb	r3, r3, #31
 8016e50:	617b      	str	r3, [r7, #20]
 8016e52:	4921      	ldr	r1, [pc, #132]	; (8016ed8 <vTaskSwitchContext+0xb8>)
 8016e54:	697a      	ldr	r2, [r7, #20]
 8016e56:	4613      	mov	r3, r2
 8016e58:	009b      	lsls	r3, r3, #2
 8016e5a:	4413      	add	r3, r2
 8016e5c:	009b      	lsls	r3, r3, #2
 8016e5e:	440b      	add	r3, r1
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d10a      	bne.n	8016e7c <vTaskSwitchContext+0x5c>
	__asm volatile
 8016e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e6a:	f383 8811 	msr	BASEPRI, r3
 8016e6e:	f3bf 8f6f 	isb	sy
 8016e72:	f3bf 8f4f 	dsb	sy
 8016e76:	607b      	str	r3, [r7, #4]
}
 8016e78:	bf00      	nop
 8016e7a:	e7fe      	b.n	8016e7a <vTaskSwitchContext+0x5a>
 8016e7c:	697a      	ldr	r2, [r7, #20]
 8016e7e:	4613      	mov	r3, r2
 8016e80:	009b      	lsls	r3, r3, #2
 8016e82:	4413      	add	r3, r2
 8016e84:	009b      	lsls	r3, r3, #2
 8016e86:	4a14      	ldr	r2, [pc, #80]	; (8016ed8 <vTaskSwitchContext+0xb8>)
 8016e88:	4413      	add	r3, r2
 8016e8a:	613b      	str	r3, [r7, #16]
 8016e8c:	693b      	ldr	r3, [r7, #16]
 8016e8e:	685b      	ldr	r3, [r3, #4]
 8016e90:	685a      	ldr	r2, [r3, #4]
 8016e92:	693b      	ldr	r3, [r7, #16]
 8016e94:	605a      	str	r2, [r3, #4]
 8016e96:	693b      	ldr	r3, [r7, #16]
 8016e98:	685a      	ldr	r2, [r3, #4]
 8016e9a:	693b      	ldr	r3, [r7, #16]
 8016e9c:	3308      	adds	r3, #8
 8016e9e:	429a      	cmp	r2, r3
 8016ea0:	d104      	bne.n	8016eac <vTaskSwitchContext+0x8c>
 8016ea2:	693b      	ldr	r3, [r7, #16]
 8016ea4:	685b      	ldr	r3, [r3, #4]
 8016ea6:	685a      	ldr	r2, [r3, #4]
 8016ea8:	693b      	ldr	r3, [r7, #16]
 8016eaa:	605a      	str	r2, [r3, #4]
 8016eac:	693b      	ldr	r3, [r7, #16]
 8016eae:	685b      	ldr	r3, [r3, #4]
 8016eb0:	68db      	ldr	r3, [r3, #12]
 8016eb2:	4a0a      	ldr	r2, [pc, #40]	; (8016edc <vTaskSwitchContext+0xbc>)
 8016eb4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016eb6:	4b09      	ldr	r3, [pc, #36]	; (8016edc <vTaskSwitchContext+0xbc>)
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	334c      	adds	r3, #76	; 0x4c
 8016ebc:	4a08      	ldr	r2, [pc, #32]	; (8016ee0 <vTaskSwitchContext+0xc0>)
 8016ebe:	6013      	str	r3, [r2, #0]
}
 8016ec0:	bf00      	nop
 8016ec2:	371c      	adds	r7, #28
 8016ec4:	46bd      	mov	sp, r7
 8016ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eca:	4770      	bx	lr
 8016ecc:	240011f4 	.word	0x240011f4
 8016ed0:	240011e0 	.word	0x240011e0
 8016ed4:	240011d4 	.word	0x240011d4
 8016ed8:	240010d0 	.word	0x240010d0
 8016edc:	240010cc 	.word	0x240010cc
 8016ee0:	24000134 	.word	0x24000134

08016ee4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016ee4:	b580      	push	{r7, lr}
 8016ee6:	b084      	sub	sp, #16
 8016ee8:	af00      	add	r7, sp, #0
 8016eea:	6078      	str	r0, [r7, #4]
 8016eec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d10a      	bne.n	8016f0a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8016ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ef8:	f383 8811 	msr	BASEPRI, r3
 8016efc:	f3bf 8f6f 	isb	sy
 8016f00:	f3bf 8f4f 	dsb	sy
 8016f04:	60fb      	str	r3, [r7, #12]
}
 8016f06:	bf00      	nop
 8016f08:	e7fe      	b.n	8016f08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016f0a:	4b07      	ldr	r3, [pc, #28]	; (8016f28 <vTaskPlaceOnEventList+0x44>)
 8016f0c:	681b      	ldr	r3, [r3, #0]
 8016f0e:	3318      	adds	r3, #24
 8016f10:	4619      	mov	r1, r3
 8016f12:	6878      	ldr	r0, [r7, #4]
 8016f14:	f7fe fc0f 	bl	8015736 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016f18:	2101      	movs	r1, #1
 8016f1a:	6838      	ldr	r0, [r7, #0]
 8016f1c:	f000 fbae 	bl	801767c <prvAddCurrentTaskToDelayedList>
}
 8016f20:	bf00      	nop
 8016f22:	3710      	adds	r7, #16
 8016f24:	46bd      	mov	sp, r7
 8016f26:	bd80      	pop	{r7, pc}
 8016f28:	240010cc 	.word	0x240010cc

08016f2c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016f2c:	b580      	push	{r7, lr}
 8016f2e:	b086      	sub	sp, #24
 8016f30:	af00      	add	r7, sp, #0
 8016f32:	60f8      	str	r0, [r7, #12]
 8016f34:	60b9      	str	r1, [r7, #8]
 8016f36:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8016f38:	68fb      	ldr	r3, [r7, #12]
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d10a      	bne.n	8016f54 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8016f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f42:	f383 8811 	msr	BASEPRI, r3
 8016f46:	f3bf 8f6f 	isb	sy
 8016f4a:	f3bf 8f4f 	dsb	sy
 8016f4e:	617b      	str	r3, [r7, #20]
}
 8016f50:	bf00      	nop
 8016f52:	e7fe      	b.n	8016f52 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016f54:	4b0a      	ldr	r3, [pc, #40]	; (8016f80 <vTaskPlaceOnEventListRestricted+0x54>)
 8016f56:	681b      	ldr	r3, [r3, #0]
 8016f58:	3318      	adds	r3, #24
 8016f5a:	4619      	mov	r1, r3
 8016f5c:	68f8      	ldr	r0, [r7, #12]
 8016f5e:	f7fe fbc6 	bl	80156ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d002      	beq.n	8016f6e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8016f68:	f04f 33ff 	mov.w	r3, #4294967295
 8016f6c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8016f6e:	6879      	ldr	r1, [r7, #4]
 8016f70:	68b8      	ldr	r0, [r7, #8]
 8016f72:	f000 fb83 	bl	801767c <prvAddCurrentTaskToDelayedList>
	}
 8016f76:	bf00      	nop
 8016f78:	3718      	adds	r7, #24
 8016f7a:	46bd      	mov	sp, r7
 8016f7c:	bd80      	pop	{r7, pc}
 8016f7e:	bf00      	nop
 8016f80:	240010cc 	.word	0x240010cc

08016f84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016f84:	b580      	push	{r7, lr}
 8016f86:	b086      	sub	sp, #24
 8016f88:	af00      	add	r7, sp, #0
 8016f8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	68db      	ldr	r3, [r3, #12]
 8016f90:	68db      	ldr	r3, [r3, #12]
 8016f92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016f94:	693b      	ldr	r3, [r7, #16]
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d10a      	bne.n	8016fb0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8016f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f9e:	f383 8811 	msr	BASEPRI, r3
 8016fa2:	f3bf 8f6f 	isb	sy
 8016fa6:	f3bf 8f4f 	dsb	sy
 8016faa:	60fb      	str	r3, [r7, #12]
}
 8016fac:	bf00      	nop
 8016fae:	e7fe      	b.n	8016fae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016fb0:	693b      	ldr	r3, [r7, #16]
 8016fb2:	3318      	adds	r3, #24
 8016fb4:	4618      	mov	r0, r3
 8016fb6:	f7fe fbf7 	bl	80157a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016fba:	4b1d      	ldr	r3, [pc, #116]	; (8017030 <xTaskRemoveFromEventList+0xac>)
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d11c      	bne.n	8016ffc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016fc2:	693b      	ldr	r3, [r7, #16]
 8016fc4:	3304      	adds	r3, #4
 8016fc6:	4618      	mov	r0, r3
 8016fc8:	f7fe fbee 	bl	80157a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016fcc:	693b      	ldr	r3, [r7, #16]
 8016fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016fd0:	2201      	movs	r2, #1
 8016fd2:	409a      	lsls	r2, r3
 8016fd4:	4b17      	ldr	r3, [pc, #92]	; (8017034 <xTaskRemoveFromEventList+0xb0>)
 8016fd6:	681b      	ldr	r3, [r3, #0]
 8016fd8:	4313      	orrs	r3, r2
 8016fda:	4a16      	ldr	r2, [pc, #88]	; (8017034 <xTaskRemoveFromEventList+0xb0>)
 8016fdc:	6013      	str	r3, [r2, #0]
 8016fde:	693b      	ldr	r3, [r7, #16]
 8016fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016fe2:	4613      	mov	r3, r2
 8016fe4:	009b      	lsls	r3, r3, #2
 8016fe6:	4413      	add	r3, r2
 8016fe8:	009b      	lsls	r3, r3, #2
 8016fea:	4a13      	ldr	r2, [pc, #76]	; (8017038 <xTaskRemoveFromEventList+0xb4>)
 8016fec:	441a      	add	r2, r3
 8016fee:	693b      	ldr	r3, [r7, #16]
 8016ff0:	3304      	adds	r3, #4
 8016ff2:	4619      	mov	r1, r3
 8016ff4:	4610      	mov	r0, r2
 8016ff6:	f7fe fb7a 	bl	80156ee <vListInsertEnd>
 8016ffa:	e005      	b.n	8017008 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016ffc:	693b      	ldr	r3, [r7, #16]
 8016ffe:	3318      	adds	r3, #24
 8017000:	4619      	mov	r1, r3
 8017002:	480e      	ldr	r0, [pc, #56]	; (801703c <xTaskRemoveFromEventList+0xb8>)
 8017004:	f7fe fb73 	bl	80156ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017008:	693b      	ldr	r3, [r7, #16]
 801700a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801700c:	4b0c      	ldr	r3, [pc, #48]	; (8017040 <xTaskRemoveFromEventList+0xbc>)
 801700e:	681b      	ldr	r3, [r3, #0]
 8017010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017012:	429a      	cmp	r2, r3
 8017014:	d905      	bls.n	8017022 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8017016:	2301      	movs	r3, #1
 8017018:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801701a:	4b0a      	ldr	r3, [pc, #40]	; (8017044 <xTaskRemoveFromEventList+0xc0>)
 801701c:	2201      	movs	r2, #1
 801701e:	601a      	str	r2, [r3, #0]
 8017020:	e001      	b.n	8017026 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8017022:	2300      	movs	r3, #0
 8017024:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8017026:	697b      	ldr	r3, [r7, #20]
}
 8017028:	4618      	mov	r0, r3
 801702a:	3718      	adds	r7, #24
 801702c:	46bd      	mov	sp, r7
 801702e:	bd80      	pop	{r7, pc}
 8017030:	240011f4 	.word	0x240011f4
 8017034:	240011d4 	.word	0x240011d4
 8017038:	240010d0 	.word	0x240010d0
 801703c:	2400118c 	.word	0x2400118c
 8017040:	240010cc 	.word	0x240010cc
 8017044:	240011e0 	.word	0x240011e0

08017048 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8017048:	b480      	push	{r7}
 801704a:	b083      	sub	sp, #12
 801704c:	af00      	add	r7, sp, #0
 801704e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017050:	4b06      	ldr	r3, [pc, #24]	; (801706c <vTaskInternalSetTimeOutState+0x24>)
 8017052:	681a      	ldr	r2, [r3, #0]
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017058:	4b05      	ldr	r3, [pc, #20]	; (8017070 <vTaskInternalSetTimeOutState+0x28>)
 801705a:	681a      	ldr	r2, [r3, #0]
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	605a      	str	r2, [r3, #4]
}
 8017060:	bf00      	nop
 8017062:	370c      	adds	r7, #12
 8017064:	46bd      	mov	sp, r7
 8017066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801706a:	4770      	bx	lr
 801706c:	240011e4 	.word	0x240011e4
 8017070:	240011d0 	.word	0x240011d0

08017074 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8017074:	b580      	push	{r7, lr}
 8017076:	b088      	sub	sp, #32
 8017078:	af00      	add	r7, sp, #0
 801707a:	6078      	str	r0, [r7, #4]
 801707c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	2b00      	cmp	r3, #0
 8017082:	d10a      	bne.n	801709a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8017084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017088:	f383 8811 	msr	BASEPRI, r3
 801708c:	f3bf 8f6f 	isb	sy
 8017090:	f3bf 8f4f 	dsb	sy
 8017094:	613b      	str	r3, [r7, #16]
}
 8017096:	bf00      	nop
 8017098:	e7fe      	b.n	8017098 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801709a:	683b      	ldr	r3, [r7, #0]
 801709c:	2b00      	cmp	r3, #0
 801709e:	d10a      	bne.n	80170b6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80170a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170a4:	f383 8811 	msr	BASEPRI, r3
 80170a8:	f3bf 8f6f 	isb	sy
 80170ac:	f3bf 8f4f 	dsb	sy
 80170b0:	60fb      	str	r3, [r7, #12]
}
 80170b2:	bf00      	nop
 80170b4:	e7fe      	b.n	80170b4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80170b6:	f001 f83d 	bl	8018134 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80170ba:	4b1d      	ldr	r3, [pc, #116]	; (8017130 <xTaskCheckForTimeOut+0xbc>)
 80170bc:	681b      	ldr	r3, [r3, #0]
 80170be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	685b      	ldr	r3, [r3, #4]
 80170c4:	69ba      	ldr	r2, [r7, #24]
 80170c6:	1ad3      	subs	r3, r2, r3
 80170c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80170ca:	683b      	ldr	r3, [r7, #0]
 80170cc:	681b      	ldr	r3, [r3, #0]
 80170ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80170d2:	d102      	bne.n	80170da <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80170d4:	2300      	movs	r3, #0
 80170d6:	61fb      	str	r3, [r7, #28]
 80170d8:	e023      	b.n	8017122 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	681a      	ldr	r2, [r3, #0]
 80170de:	4b15      	ldr	r3, [pc, #84]	; (8017134 <xTaskCheckForTimeOut+0xc0>)
 80170e0:	681b      	ldr	r3, [r3, #0]
 80170e2:	429a      	cmp	r2, r3
 80170e4:	d007      	beq.n	80170f6 <xTaskCheckForTimeOut+0x82>
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	685b      	ldr	r3, [r3, #4]
 80170ea:	69ba      	ldr	r2, [r7, #24]
 80170ec:	429a      	cmp	r2, r3
 80170ee:	d302      	bcc.n	80170f6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80170f0:	2301      	movs	r3, #1
 80170f2:	61fb      	str	r3, [r7, #28]
 80170f4:	e015      	b.n	8017122 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80170f6:	683b      	ldr	r3, [r7, #0]
 80170f8:	681b      	ldr	r3, [r3, #0]
 80170fa:	697a      	ldr	r2, [r7, #20]
 80170fc:	429a      	cmp	r2, r3
 80170fe:	d20b      	bcs.n	8017118 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8017100:	683b      	ldr	r3, [r7, #0]
 8017102:	681a      	ldr	r2, [r3, #0]
 8017104:	697b      	ldr	r3, [r7, #20]
 8017106:	1ad2      	subs	r2, r2, r3
 8017108:	683b      	ldr	r3, [r7, #0]
 801710a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801710c:	6878      	ldr	r0, [r7, #4]
 801710e:	f7ff ff9b 	bl	8017048 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8017112:	2300      	movs	r3, #0
 8017114:	61fb      	str	r3, [r7, #28]
 8017116:	e004      	b.n	8017122 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8017118:	683b      	ldr	r3, [r7, #0]
 801711a:	2200      	movs	r2, #0
 801711c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801711e:	2301      	movs	r3, #1
 8017120:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8017122:	f001 f837 	bl	8018194 <vPortExitCritical>

	return xReturn;
 8017126:	69fb      	ldr	r3, [r7, #28]
}
 8017128:	4618      	mov	r0, r3
 801712a:	3720      	adds	r7, #32
 801712c:	46bd      	mov	sp, r7
 801712e:	bd80      	pop	{r7, pc}
 8017130:	240011d0 	.word	0x240011d0
 8017134:	240011e4 	.word	0x240011e4

08017138 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017138:	b480      	push	{r7}
 801713a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801713c:	4b03      	ldr	r3, [pc, #12]	; (801714c <vTaskMissedYield+0x14>)
 801713e:	2201      	movs	r2, #1
 8017140:	601a      	str	r2, [r3, #0]
}
 8017142:	bf00      	nop
 8017144:	46bd      	mov	sp, r7
 8017146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801714a:	4770      	bx	lr
 801714c:	240011e0 	.word	0x240011e0

08017150 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8017150:	b580      	push	{r7, lr}
 8017152:	b082      	sub	sp, #8
 8017154:	af00      	add	r7, sp, #0
 8017156:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8017158:	f000 f852 	bl	8017200 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801715c:	4b06      	ldr	r3, [pc, #24]	; (8017178 <prvIdleTask+0x28>)
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	2b01      	cmp	r3, #1
 8017162:	d9f9      	bls.n	8017158 <prvIdleTask+0x8>
			{
				taskYIELD();
 8017164:	4b05      	ldr	r3, [pc, #20]	; (801717c <prvIdleTask+0x2c>)
 8017166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801716a:	601a      	str	r2, [r3, #0]
 801716c:	f3bf 8f4f 	dsb	sy
 8017170:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8017174:	e7f0      	b.n	8017158 <prvIdleTask+0x8>
 8017176:	bf00      	nop
 8017178:	240010d0 	.word	0x240010d0
 801717c:	e000ed04 	.word	0xe000ed04

08017180 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017180:	b580      	push	{r7, lr}
 8017182:	b082      	sub	sp, #8
 8017184:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017186:	2300      	movs	r3, #0
 8017188:	607b      	str	r3, [r7, #4]
 801718a:	e00c      	b.n	80171a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801718c:	687a      	ldr	r2, [r7, #4]
 801718e:	4613      	mov	r3, r2
 8017190:	009b      	lsls	r3, r3, #2
 8017192:	4413      	add	r3, r2
 8017194:	009b      	lsls	r3, r3, #2
 8017196:	4a12      	ldr	r2, [pc, #72]	; (80171e0 <prvInitialiseTaskLists+0x60>)
 8017198:	4413      	add	r3, r2
 801719a:	4618      	mov	r0, r3
 801719c:	f7fe fa7a 	bl	8015694 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	3301      	adds	r3, #1
 80171a4:	607b      	str	r3, [r7, #4]
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	2b06      	cmp	r3, #6
 80171aa:	d9ef      	bls.n	801718c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80171ac:	480d      	ldr	r0, [pc, #52]	; (80171e4 <prvInitialiseTaskLists+0x64>)
 80171ae:	f7fe fa71 	bl	8015694 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80171b2:	480d      	ldr	r0, [pc, #52]	; (80171e8 <prvInitialiseTaskLists+0x68>)
 80171b4:	f7fe fa6e 	bl	8015694 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80171b8:	480c      	ldr	r0, [pc, #48]	; (80171ec <prvInitialiseTaskLists+0x6c>)
 80171ba:	f7fe fa6b 	bl	8015694 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80171be:	480c      	ldr	r0, [pc, #48]	; (80171f0 <prvInitialiseTaskLists+0x70>)
 80171c0:	f7fe fa68 	bl	8015694 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80171c4:	480b      	ldr	r0, [pc, #44]	; (80171f4 <prvInitialiseTaskLists+0x74>)
 80171c6:	f7fe fa65 	bl	8015694 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80171ca:	4b0b      	ldr	r3, [pc, #44]	; (80171f8 <prvInitialiseTaskLists+0x78>)
 80171cc:	4a05      	ldr	r2, [pc, #20]	; (80171e4 <prvInitialiseTaskLists+0x64>)
 80171ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80171d0:	4b0a      	ldr	r3, [pc, #40]	; (80171fc <prvInitialiseTaskLists+0x7c>)
 80171d2:	4a05      	ldr	r2, [pc, #20]	; (80171e8 <prvInitialiseTaskLists+0x68>)
 80171d4:	601a      	str	r2, [r3, #0]
}
 80171d6:	bf00      	nop
 80171d8:	3708      	adds	r7, #8
 80171da:	46bd      	mov	sp, r7
 80171dc:	bd80      	pop	{r7, pc}
 80171de:	bf00      	nop
 80171e0:	240010d0 	.word	0x240010d0
 80171e4:	2400115c 	.word	0x2400115c
 80171e8:	24001170 	.word	0x24001170
 80171ec:	2400118c 	.word	0x2400118c
 80171f0:	240011a0 	.word	0x240011a0
 80171f4:	240011b8 	.word	0x240011b8
 80171f8:	24001184 	.word	0x24001184
 80171fc:	24001188 	.word	0x24001188

08017200 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017200:	b580      	push	{r7, lr}
 8017202:	b082      	sub	sp, #8
 8017204:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017206:	e019      	b.n	801723c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8017208:	f000 ff94 	bl	8018134 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801720c:	4b10      	ldr	r3, [pc, #64]	; (8017250 <prvCheckTasksWaitingTermination+0x50>)
 801720e:	68db      	ldr	r3, [r3, #12]
 8017210:	68db      	ldr	r3, [r3, #12]
 8017212:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	3304      	adds	r3, #4
 8017218:	4618      	mov	r0, r3
 801721a:	f7fe fac5 	bl	80157a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801721e:	4b0d      	ldr	r3, [pc, #52]	; (8017254 <prvCheckTasksWaitingTermination+0x54>)
 8017220:	681b      	ldr	r3, [r3, #0]
 8017222:	3b01      	subs	r3, #1
 8017224:	4a0b      	ldr	r2, [pc, #44]	; (8017254 <prvCheckTasksWaitingTermination+0x54>)
 8017226:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017228:	4b0b      	ldr	r3, [pc, #44]	; (8017258 <prvCheckTasksWaitingTermination+0x58>)
 801722a:	681b      	ldr	r3, [r3, #0]
 801722c:	3b01      	subs	r3, #1
 801722e:	4a0a      	ldr	r2, [pc, #40]	; (8017258 <prvCheckTasksWaitingTermination+0x58>)
 8017230:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8017232:	f000 ffaf 	bl	8018194 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8017236:	6878      	ldr	r0, [r7, #4]
 8017238:	f000 f810 	bl	801725c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801723c:	4b06      	ldr	r3, [pc, #24]	; (8017258 <prvCheckTasksWaitingTermination+0x58>)
 801723e:	681b      	ldr	r3, [r3, #0]
 8017240:	2b00      	cmp	r3, #0
 8017242:	d1e1      	bne.n	8017208 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017244:	bf00      	nop
 8017246:	bf00      	nop
 8017248:	3708      	adds	r7, #8
 801724a:	46bd      	mov	sp, r7
 801724c:	bd80      	pop	{r7, pc}
 801724e:	bf00      	nop
 8017250:	240011a0 	.word	0x240011a0
 8017254:	240011cc 	.word	0x240011cc
 8017258:	240011b4 	.word	0x240011b4

0801725c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801725c:	b580      	push	{r7, lr}
 801725e:	b084      	sub	sp, #16
 8017260:	af00      	add	r7, sp, #0
 8017262:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	334c      	adds	r3, #76	; 0x4c
 8017268:	4618      	mov	r0, r3
 801726a:	f00a fe8d 	bl	8021f88 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8017274:	2b00      	cmp	r3, #0
 8017276:	d108      	bne.n	801728a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801727c:	4618      	mov	r0, r3
 801727e:	f001 f947 	bl	8018510 <vPortFree>
				vPortFree( pxTCB );
 8017282:	6878      	ldr	r0, [r7, #4]
 8017284:	f001 f944 	bl	8018510 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8017288:	e018      	b.n	80172bc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8017290:	2b01      	cmp	r3, #1
 8017292:	d103      	bne.n	801729c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8017294:	6878      	ldr	r0, [r7, #4]
 8017296:	f001 f93b 	bl	8018510 <vPortFree>
	}
 801729a:	e00f      	b.n	80172bc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80172a2:	2b02      	cmp	r3, #2
 80172a4:	d00a      	beq.n	80172bc <prvDeleteTCB+0x60>
	__asm volatile
 80172a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172aa:	f383 8811 	msr	BASEPRI, r3
 80172ae:	f3bf 8f6f 	isb	sy
 80172b2:	f3bf 8f4f 	dsb	sy
 80172b6:	60fb      	str	r3, [r7, #12]
}
 80172b8:	bf00      	nop
 80172ba:	e7fe      	b.n	80172ba <prvDeleteTCB+0x5e>
	}
 80172bc:	bf00      	nop
 80172be:	3710      	adds	r7, #16
 80172c0:	46bd      	mov	sp, r7
 80172c2:	bd80      	pop	{r7, pc}

080172c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80172c4:	b480      	push	{r7}
 80172c6:	b083      	sub	sp, #12
 80172c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80172ca:	4b0c      	ldr	r3, [pc, #48]	; (80172fc <prvResetNextTaskUnblockTime+0x38>)
 80172cc:	681b      	ldr	r3, [r3, #0]
 80172ce:	681b      	ldr	r3, [r3, #0]
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d104      	bne.n	80172de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80172d4:	4b0a      	ldr	r3, [pc, #40]	; (8017300 <prvResetNextTaskUnblockTime+0x3c>)
 80172d6:	f04f 32ff 	mov.w	r2, #4294967295
 80172da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80172dc:	e008      	b.n	80172f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80172de:	4b07      	ldr	r3, [pc, #28]	; (80172fc <prvResetNextTaskUnblockTime+0x38>)
 80172e0:	681b      	ldr	r3, [r3, #0]
 80172e2:	68db      	ldr	r3, [r3, #12]
 80172e4:	68db      	ldr	r3, [r3, #12]
 80172e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	685b      	ldr	r3, [r3, #4]
 80172ec:	4a04      	ldr	r2, [pc, #16]	; (8017300 <prvResetNextTaskUnblockTime+0x3c>)
 80172ee:	6013      	str	r3, [r2, #0]
}
 80172f0:	bf00      	nop
 80172f2:	370c      	adds	r7, #12
 80172f4:	46bd      	mov	sp, r7
 80172f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172fa:	4770      	bx	lr
 80172fc:	24001184 	.word	0x24001184
 8017300:	240011ec 	.word	0x240011ec

08017304 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017304:	b480      	push	{r7}
 8017306:	b083      	sub	sp, #12
 8017308:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801730a:	4b0b      	ldr	r3, [pc, #44]	; (8017338 <xTaskGetSchedulerState+0x34>)
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	2b00      	cmp	r3, #0
 8017310:	d102      	bne.n	8017318 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8017312:	2301      	movs	r3, #1
 8017314:	607b      	str	r3, [r7, #4]
 8017316:	e008      	b.n	801732a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017318:	4b08      	ldr	r3, [pc, #32]	; (801733c <xTaskGetSchedulerState+0x38>)
 801731a:	681b      	ldr	r3, [r3, #0]
 801731c:	2b00      	cmp	r3, #0
 801731e:	d102      	bne.n	8017326 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8017320:	2302      	movs	r3, #2
 8017322:	607b      	str	r3, [r7, #4]
 8017324:	e001      	b.n	801732a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8017326:	2300      	movs	r3, #0
 8017328:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801732a:	687b      	ldr	r3, [r7, #4]
	}
 801732c:	4618      	mov	r0, r3
 801732e:	370c      	adds	r7, #12
 8017330:	46bd      	mov	sp, r7
 8017332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017336:	4770      	bx	lr
 8017338:	240011d8 	.word	0x240011d8
 801733c:	240011f4 	.word	0x240011f4

08017340 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8017340:	b580      	push	{r7, lr}
 8017342:	b084      	sub	sp, #16
 8017344:	af00      	add	r7, sp, #0
 8017346:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801734c:	2300      	movs	r3, #0
 801734e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	2b00      	cmp	r3, #0
 8017354:	d05e      	beq.n	8017414 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8017356:	68bb      	ldr	r3, [r7, #8]
 8017358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801735a:	4b31      	ldr	r3, [pc, #196]	; (8017420 <xTaskPriorityInherit+0xe0>)
 801735c:	681b      	ldr	r3, [r3, #0]
 801735e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017360:	429a      	cmp	r2, r3
 8017362:	d24e      	bcs.n	8017402 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017364:	68bb      	ldr	r3, [r7, #8]
 8017366:	699b      	ldr	r3, [r3, #24]
 8017368:	2b00      	cmp	r3, #0
 801736a:	db06      	blt.n	801737a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801736c:	4b2c      	ldr	r3, [pc, #176]	; (8017420 <xTaskPriorityInherit+0xe0>)
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017372:	f1c3 0207 	rsb	r2, r3, #7
 8017376:	68bb      	ldr	r3, [r7, #8]
 8017378:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801737a:	68bb      	ldr	r3, [r7, #8]
 801737c:	6959      	ldr	r1, [r3, #20]
 801737e:	68bb      	ldr	r3, [r7, #8]
 8017380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017382:	4613      	mov	r3, r2
 8017384:	009b      	lsls	r3, r3, #2
 8017386:	4413      	add	r3, r2
 8017388:	009b      	lsls	r3, r3, #2
 801738a:	4a26      	ldr	r2, [pc, #152]	; (8017424 <xTaskPriorityInherit+0xe4>)
 801738c:	4413      	add	r3, r2
 801738e:	4299      	cmp	r1, r3
 8017390:	d12f      	bne.n	80173f2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017392:	68bb      	ldr	r3, [r7, #8]
 8017394:	3304      	adds	r3, #4
 8017396:	4618      	mov	r0, r3
 8017398:	f7fe fa06 	bl	80157a8 <uxListRemove>
 801739c:	4603      	mov	r3, r0
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d10a      	bne.n	80173b8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80173a2:	68bb      	ldr	r3, [r7, #8]
 80173a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173a6:	2201      	movs	r2, #1
 80173a8:	fa02 f303 	lsl.w	r3, r2, r3
 80173ac:	43da      	mvns	r2, r3
 80173ae:	4b1e      	ldr	r3, [pc, #120]	; (8017428 <xTaskPriorityInherit+0xe8>)
 80173b0:	681b      	ldr	r3, [r3, #0]
 80173b2:	4013      	ands	r3, r2
 80173b4:	4a1c      	ldr	r2, [pc, #112]	; (8017428 <xTaskPriorityInherit+0xe8>)
 80173b6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80173b8:	4b19      	ldr	r3, [pc, #100]	; (8017420 <xTaskPriorityInherit+0xe0>)
 80173ba:	681b      	ldr	r3, [r3, #0]
 80173bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80173be:	68bb      	ldr	r3, [r7, #8]
 80173c0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80173c2:	68bb      	ldr	r3, [r7, #8]
 80173c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173c6:	2201      	movs	r2, #1
 80173c8:	409a      	lsls	r2, r3
 80173ca:	4b17      	ldr	r3, [pc, #92]	; (8017428 <xTaskPriorityInherit+0xe8>)
 80173cc:	681b      	ldr	r3, [r3, #0]
 80173ce:	4313      	orrs	r3, r2
 80173d0:	4a15      	ldr	r2, [pc, #84]	; (8017428 <xTaskPriorityInherit+0xe8>)
 80173d2:	6013      	str	r3, [r2, #0]
 80173d4:	68bb      	ldr	r3, [r7, #8]
 80173d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80173d8:	4613      	mov	r3, r2
 80173da:	009b      	lsls	r3, r3, #2
 80173dc:	4413      	add	r3, r2
 80173de:	009b      	lsls	r3, r3, #2
 80173e0:	4a10      	ldr	r2, [pc, #64]	; (8017424 <xTaskPriorityInherit+0xe4>)
 80173e2:	441a      	add	r2, r3
 80173e4:	68bb      	ldr	r3, [r7, #8]
 80173e6:	3304      	adds	r3, #4
 80173e8:	4619      	mov	r1, r3
 80173ea:	4610      	mov	r0, r2
 80173ec:	f7fe f97f 	bl	80156ee <vListInsertEnd>
 80173f0:	e004      	b.n	80173fc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80173f2:	4b0b      	ldr	r3, [pc, #44]	; (8017420 <xTaskPriorityInherit+0xe0>)
 80173f4:	681b      	ldr	r3, [r3, #0]
 80173f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80173f8:	68bb      	ldr	r3, [r7, #8]
 80173fa:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80173fc:	2301      	movs	r3, #1
 80173fe:	60fb      	str	r3, [r7, #12]
 8017400:	e008      	b.n	8017414 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8017402:	68bb      	ldr	r3, [r7, #8]
 8017404:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017406:	4b06      	ldr	r3, [pc, #24]	; (8017420 <xTaskPriorityInherit+0xe0>)
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801740c:	429a      	cmp	r2, r3
 801740e:	d201      	bcs.n	8017414 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8017410:	2301      	movs	r3, #1
 8017412:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017414:	68fb      	ldr	r3, [r7, #12]
	}
 8017416:	4618      	mov	r0, r3
 8017418:	3710      	adds	r7, #16
 801741a:	46bd      	mov	sp, r7
 801741c:	bd80      	pop	{r7, pc}
 801741e:	bf00      	nop
 8017420:	240010cc 	.word	0x240010cc
 8017424:	240010d0 	.word	0x240010d0
 8017428:	240011d4 	.word	0x240011d4

0801742c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801742c:	b580      	push	{r7, lr}
 801742e:	b086      	sub	sp, #24
 8017430:	af00      	add	r7, sp, #0
 8017432:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8017438:	2300      	movs	r3, #0
 801743a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	2b00      	cmp	r3, #0
 8017440:	d06e      	beq.n	8017520 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8017442:	4b3a      	ldr	r3, [pc, #232]	; (801752c <xTaskPriorityDisinherit+0x100>)
 8017444:	681b      	ldr	r3, [r3, #0]
 8017446:	693a      	ldr	r2, [r7, #16]
 8017448:	429a      	cmp	r2, r3
 801744a:	d00a      	beq.n	8017462 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801744c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017450:	f383 8811 	msr	BASEPRI, r3
 8017454:	f3bf 8f6f 	isb	sy
 8017458:	f3bf 8f4f 	dsb	sy
 801745c:	60fb      	str	r3, [r7, #12]
}
 801745e:	bf00      	nop
 8017460:	e7fe      	b.n	8017460 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8017462:	693b      	ldr	r3, [r7, #16]
 8017464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017466:	2b00      	cmp	r3, #0
 8017468:	d10a      	bne.n	8017480 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801746a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801746e:	f383 8811 	msr	BASEPRI, r3
 8017472:	f3bf 8f6f 	isb	sy
 8017476:	f3bf 8f4f 	dsb	sy
 801747a:	60bb      	str	r3, [r7, #8]
}
 801747c:	bf00      	nop
 801747e:	e7fe      	b.n	801747e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8017480:	693b      	ldr	r3, [r7, #16]
 8017482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017484:	1e5a      	subs	r2, r3, #1
 8017486:	693b      	ldr	r3, [r7, #16]
 8017488:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801748a:	693b      	ldr	r3, [r7, #16]
 801748c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801748e:	693b      	ldr	r3, [r7, #16]
 8017490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017492:	429a      	cmp	r2, r3
 8017494:	d044      	beq.n	8017520 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8017496:	693b      	ldr	r3, [r7, #16]
 8017498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801749a:	2b00      	cmp	r3, #0
 801749c:	d140      	bne.n	8017520 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801749e:	693b      	ldr	r3, [r7, #16]
 80174a0:	3304      	adds	r3, #4
 80174a2:	4618      	mov	r0, r3
 80174a4:	f7fe f980 	bl	80157a8 <uxListRemove>
 80174a8:	4603      	mov	r3, r0
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d115      	bne.n	80174da <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80174ae:	693b      	ldr	r3, [r7, #16]
 80174b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174b2:	491f      	ldr	r1, [pc, #124]	; (8017530 <xTaskPriorityDisinherit+0x104>)
 80174b4:	4613      	mov	r3, r2
 80174b6:	009b      	lsls	r3, r3, #2
 80174b8:	4413      	add	r3, r2
 80174ba:	009b      	lsls	r3, r3, #2
 80174bc:	440b      	add	r3, r1
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d10a      	bne.n	80174da <xTaskPriorityDisinherit+0xae>
 80174c4:	693b      	ldr	r3, [r7, #16]
 80174c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174c8:	2201      	movs	r2, #1
 80174ca:	fa02 f303 	lsl.w	r3, r2, r3
 80174ce:	43da      	mvns	r2, r3
 80174d0:	4b18      	ldr	r3, [pc, #96]	; (8017534 <xTaskPriorityDisinherit+0x108>)
 80174d2:	681b      	ldr	r3, [r3, #0]
 80174d4:	4013      	ands	r3, r2
 80174d6:	4a17      	ldr	r2, [pc, #92]	; (8017534 <xTaskPriorityDisinherit+0x108>)
 80174d8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80174da:	693b      	ldr	r3, [r7, #16]
 80174dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80174de:	693b      	ldr	r3, [r7, #16]
 80174e0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80174e2:	693b      	ldr	r3, [r7, #16]
 80174e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174e6:	f1c3 0207 	rsb	r2, r3, #7
 80174ea:	693b      	ldr	r3, [r7, #16]
 80174ec:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80174ee:	693b      	ldr	r3, [r7, #16]
 80174f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174f2:	2201      	movs	r2, #1
 80174f4:	409a      	lsls	r2, r3
 80174f6:	4b0f      	ldr	r3, [pc, #60]	; (8017534 <xTaskPriorityDisinherit+0x108>)
 80174f8:	681b      	ldr	r3, [r3, #0]
 80174fa:	4313      	orrs	r3, r2
 80174fc:	4a0d      	ldr	r2, [pc, #52]	; (8017534 <xTaskPriorityDisinherit+0x108>)
 80174fe:	6013      	str	r3, [r2, #0]
 8017500:	693b      	ldr	r3, [r7, #16]
 8017502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017504:	4613      	mov	r3, r2
 8017506:	009b      	lsls	r3, r3, #2
 8017508:	4413      	add	r3, r2
 801750a:	009b      	lsls	r3, r3, #2
 801750c:	4a08      	ldr	r2, [pc, #32]	; (8017530 <xTaskPriorityDisinherit+0x104>)
 801750e:	441a      	add	r2, r3
 8017510:	693b      	ldr	r3, [r7, #16]
 8017512:	3304      	adds	r3, #4
 8017514:	4619      	mov	r1, r3
 8017516:	4610      	mov	r0, r2
 8017518:	f7fe f8e9 	bl	80156ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801751c:	2301      	movs	r3, #1
 801751e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017520:	697b      	ldr	r3, [r7, #20]
	}
 8017522:	4618      	mov	r0, r3
 8017524:	3718      	adds	r7, #24
 8017526:	46bd      	mov	sp, r7
 8017528:	bd80      	pop	{r7, pc}
 801752a:	bf00      	nop
 801752c:	240010cc 	.word	0x240010cc
 8017530:	240010d0 	.word	0x240010d0
 8017534:	240011d4 	.word	0x240011d4

08017538 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8017538:	b580      	push	{r7, lr}
 801753a:	b088      	sub	sp, #32
 801753c:	af00      	add	r7, sp, #0
 801753e:	6078      	str	r0, [r7, #4]
 8017540:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8017546:	2301      	movs	r3, #1
 8017548:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	2b00      	cmp	r3, #0
 801754e:	d077      	beq.n	8017640 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8017550:	69bb      	ldr	r3, [r7, #24]
 8017552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017554:	2b00      	cmp	r3, #0
 8017556:	d10a      	bne.n	801756e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8017558:	f04f 0350 	mov.w	r3, #80	; 0x50
 801755c:	f383 8811 	msr	BASEPRI, r3
 8017560:	f3bf 8f6f 	isb	sy
 8017564:	f3bf 8f4f 	dsb	sy
 8017568:	60fb      	str	r3, [r7, #12]
}
 801756a:	bf00      	nop
 801756c:	e7fe      	b.n	801756c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801756e:	69bb      	ldr	r3, [r7, #24]
 8017570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017572:	683a      	ldr	r2, [r7, #0]
 8017574:	429a      	cmp	r2, r3
 8017576:	d902      	bls.n	801757e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8017578:	683b      	ldr	r3, [r7, #0]
 801757a:	61fb      	str	r3, [r7, #28]
 801757c:	e002      	b.n	8017584 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801757e:	69bb      	ldr	r3, [r7, #24]
 8017580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017582:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8017584:	69bb      	ldr	r3, [r7, #24]
 8017586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017588:	69fa      	ldr	r2, [r7, #28]
 801758a:	429a      	cmp	r2, r3
 801758c:	d058      	beq.n	8017640 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801758e:	69bb      	ldr	r3, [r7, #24]
 8017590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017592:	697a      	ldr	r2, [r7, #20]
 8017594:	429a      	cmp	r2, r3
 8017596:	d153      	bne.n	8017640 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8017598:	4b2b      	ldr	r3, [pc, #172]	; (8017648 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	69ba      	ldr	r2, [r7, #24]
 801759e:	429a      	cmp	r2, r3
 80175a0:	d10a      	bne.n	80175b8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80175a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175a6:	f383 8811 	msr	BASEPRI, r3
 80175aa:	f3bf 8f6f 	isb	sy
 80175ae:	f3bf 8f4f 	dsb	sy
 80175b2:	60bb      	str	r3, [r7, #8]
}
 80175b4:	bf00      	nop
 80175b6:	e7fe      	b.n	80175b6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80175b8:	69bb      	ldr	r3, [r7, #24]
 80175ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175bc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80175be:	69bb      	ldr	r3, [r7, #24]
 80175c0:	69fa      	ldr	r2, [r7, #28]
 80175c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80175c4:	69bb      	ldr	r3, [r7, #24]
 80175c6:	699b      	ldr	r3, [r3, #24]
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	db04      	blt.n	80175d6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80175cc:	69fb      	ldr	r3, [r7, #28]
 80175ce:	f1c3 0207 	rsb	r2, r3, #7
 80175d2:	69bb      	ldr	r3, [r7, #24]
 80175d4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80175d6:	69bb      	ldr	r3, [r7, #24]
 80175d8:	6959      	ldr	r1, [r3, #20]
 80175da:	693a      	ldr	r2, [r7, #16]
 80175dc:	4613      	mov	r3, r2
 80175de:	009b      	lsls	r3, r3, #2
 80175e0:	4413      	add	r3, r2
 80175e2:	009b      	lsls	r3, r3, #2
 80175e4:	4a19      	ldr	r2, [pc, #100]	; (801764c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80175e6:	4413      	add	r3, r2
 80175e8:	4299      	cmp	r1, r3
 80175ea:	d129      	bne.n	8017640 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80175ec:	69bb      	ldr	r3, [r7, #24]
 80175ee:	3304      	adds	r3, #4
 80175f0:	4618      	mov	r0, r3
 80175f2:	f7fe f8d9 	bl	80157a8 <uxListRemove>
 80175f6:	4603      	mov	r3, r0
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d10a      	bne.n	8017612 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80175fc:	69bb      	ldr	r3, [r7, #24]
 80175fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017600:	2201      	movs	r2, #1
 8017602:	fa02 f303 	lsl.w	r3, r2, r3
 8017606:	43da      	mvns	r2, r3
 8017608:	4b11      	ldr	r3, [pc, #68]	; (8017650 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801760a:	681b      	ldr	r3, [r3, #0]
 801760c:	4013      	ands	r3, r2
 801760e:	4a10      	ldr	r2, [pc, #64]	; (8017650 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8017610:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8017612:	69bb      	ldr	r3, [r7, #24]
 8017614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017616:	2201      	movs	r2, #1
 8017618:	409a      	lsls	r2, r3
 801761a:	4b0d      	ldr	r3, [pc, #52]	; (8017650 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801761c:	681b      	ldr	r3, [r3, #0]
 801761e:	4313      	orrs	r3, r2
 8017620:	4a0b      	ldr	r2, [pc, #44]	; (8017650 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8017622:	6013      	str	r3, [r2, #0]
 8017624:	69bb      	ldr	r3, [r7, #24]
 8017626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017628:	4613      	mov	r3, r2
 801762a:	009b      	lsls	r3, r3, #2
 801762c:	4413      	add	r3, r2
 801762e:	009b      	lsls	r3, r3, #2
 8017630:	4a06      	ldr	r2, [pc, #24]	; (801764c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8017632:	441a      	add	r2, r3
 8017634:	69bb      	ldr	r3, [r7, #24]
 8017636:	3304      	adds	r3, #4
 8017638:	4619      	mov	r1, r3
 801763a:	4610      	mov	r0, r2
 801763c:	f7fe f857 	bl	80156ee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017640:	bf00      	nop
 8017642:	3720      	adds	r7, #32
 8017644:	46bd      	mov	sp, r7
 8017646:	bd80      	pop	{r7, pc}
 8017648:	240010cc 	.word	0x240010cc
 801764c:	240010d0 	.word	0x240010d0
 8017650:	240011d4 	.word	0x240011d4

08017654 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8017654:	b480      	push	{r7}
 8017656:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8017658:	4b07      	ldr	r3, [pc, #28]	; (8017678 <pvTaskIncrementMutexHeldCount+0x24>)
 801765a:	681b      	ldr	r3, [r3, #0]
 801765c:	2b00      	cmp	r3, #0
 801765e:	d004      	beq.n	801766a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8017660:	4b05      	ldr	r3, [pc, #20]	; (8017678 <pvTaskIncrementMutexHeldCount+0x24>)
 8017662:	681b      	ldr	r3, [r3, #0]
 8017664:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8017666:	3201      	adds	r2, #1
 8017668:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801766a:	4b03      	ldr	r3, [pc, #12]	; (8017678 <pvTaskIncrementMutexHeldCount+0x24>)
 801766c:	681b      	ldr	r3, [r3, #0]
	}
 801766e:	4618      	mov	r0, r3
 8017670:	46bd      	mov	sp, r7
 8017672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017676:	4770      	bx	lr
 8017678:	240010cc 	.word	0x240010cc

0801767c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801767c:	b580      	push	{r7, lr}
 801767e:	b084      	sub	sp, #16
 8017680:	af00      	add	r7, sp, #0
 8017682:	6078      	str	r0, [r7, #4]
 8017684:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8017686:	4b29      	ldr	r3, [pc, #164]	; (801772c <prvAddCurrentTaskToDelayedList+0xb0>)
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801768c:	4b28      	ldr	r3, [pc, #160]	; (8017730 <prvAddCurrentTaskToDelayedList+0xb4>)
 801768e:	681b      	ldr	r3, [r3, #0]
 8017690:	3304      	adds	r3, #4
 8017692:	4618      	mov	r0, r3
 8017694:	f7fe f888 	bl	80157a8 <uxListRemove>
 8017698:	4603      	mov	r3, r0
 801769a:	2b00      	cmp	r3, #0
 801769c:	d10b      	bne.n	80176b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801769e:	4b24      	ldr	r3, [pc, #144]	; (8017730 <prvAddCurrentTaskToDelayedList+0xb4>)
 80176a0:	681b      	ldr	r3, [r3, #0]
 80176a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176a4:	2201      	movs	r2, #1
 80176a6:	fa02 f303 	lsl.w	r3, r2, r3
 80176aa:	43da      	mvns	r2, r3
 80176ac:	4b21      	ldr	r3, [pc, #132]	; (8017734 <prvAddCurrentTaskToDelayedList+0xb8>)
 80176ae:	681b      	ldr	r3, [r3, #0]
 80176b0:	4013      	ands	r3, r2
 80176b2:	4a20      	ldr	r2, [pc, #128]	; (8017734 <prvAddCurrentTaskToDelayedList+0xb8>)
 80176b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80176bc:	d10a      	bne.n	80176d4 <prvAddCurrentTaskToDelayedList+0x58>
 80176be:	683b      	ldr	r3, [r7, #0]
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d007      	beq.n	80176d4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80176c4:	4b1a      	ldr	r3, [pc, #104]	; (8017730 <prvAddCurrentTaskToDelayedList+0xb4>)
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	3304      	adds	r3, #4
 80176ca:	4619      	mov	r1, r3
 80176cc:	481a      	ldr	r0, [pc, #104]	; (8017738 <prvAddCurrentTaskToDelayedList+0xbc>)
 80176ce:	f7fe f80e 	bl	80156ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80176d2:	e026      	b.n	8017722 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80176d4:	68fa      	ldr	r2, [r7, #12]
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	4413      	add	r3, r2
 80176da:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80176dc:	4b14      	ldr	r3, [pc, #80]	; (8017730 <prvAddCurrentTaskToDelayedList+0xb4>)
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	68ba      	ldr	r2, [r7, #8]
 80176e2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80176e4:	68ba      	ldr	r2, [r7, #8]
 80176e6:	68fb      	ldr	r3, [r7, #12]
 80176e8:	429a      	cmp	r2, r3
 80176ea:	d209      	bcs.n	8017700 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80176ec:	4b13      	ldr	r3, [pc, #76]	; (801773c <prvAddCurrentTaskToDelayedList+0xc0>)
 80176ee:	681a      	ldr	r2, [r3, #0]
 80176f0:	4b0f      	ldr	r3, [pc, #60]	; (8017730 <prvAddCurrentTaskToDelayedList+0xb4>)
 80176f2:	681b      	ldr	r3, [r3, #0]
 80176f4:	3304      	adds	r3, #4
 80176f6:	4619      	mov	r1, r3
 80176f8:	4610      	mov	r0, r2
 80176fa:	f7fe f81c 	bl	8015736 <vListInsert>
}
 80176fe:	e010      	b.n	8017722 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017700:	4b0f      	ldr	r3, [pc, #60]	; (8017740 <prvAddCurrentTaskToDelayedList+0xc4>)
 8017702:	681a      	ldr	r2, [r3, #0]
 8017704:	4b0a      	ldr	r3, [pc, #40]	; (8017730 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017706:	681b      	ldr	r3, [r3, #0]
 8017708:	3304      	adds	r3, #4
 801770a:	4619      	mov	r1, r3
 801770c:	4610      	mov	r0, r2
 801770e:	f7fe f812 	bl	8015736 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8017712:	4b0c      	ldr	r3, [pc, #48]	; (8017744 <prvAddCurrentTaskToDelayedList+0xc8>)
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	68ba      	ldr	r2, [r7, #8]
 8017718:	429a      	cmp	r2, r3
 801771a:	d202      	bcs.n	8017722 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801771c:	4a09      	ldr	r2, [pc, #36]	; (8017744 <prvAddCurrentTaskToDelayedList+0xc8>)
 801771e:	68bb      	ldr	r3, [r7, #8]
 8017720:	6013      	str	r3, [r2, #0]
}
 8017722:	bf00      	nop
 8017724:	3710      	adds	r7, #16
 8017726:	46bd      	mov	sp, r7
 8017728:	bd80      	pop	{r7, pc}
 801772a:	bf00      	nop
 801772c:	240011d0 	.word	0x240011d0
 8017730:	240010cc 	.word	0x240010cc
 8017734:	240011d4 	.word	0x240011d4
 8017738:	240011b8 	.word	0x240011b8
 801773c:	24001188 	.word	0x24001188
 8017740:	24001184 	.word	0x24001184
 8017744:	240011ec 	.word	0x240011ec

08017748 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8017748:	b580      	push	{r7, lr}
 801774a:	b08a      	sub	sp, #40	; 0x28
 801774c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801774e:	2300      	movs	r3, #0
 8017750:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8017752:	f000 fb85 	bl	8017e60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8017756:	4b1c      	ldr	r3, [pc, #112]	; (80177c8 <xTimerCreateTimerTask+0x80>)
 8017758:	681b      	ldr	r3, [r3, #0]
 801775a:	2b00      	cmp	r3, #0
 801775c:	d021      	beq.n	80177a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801775e:	2300      	movs	r3, #0
 8017760:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8017762:	2300      	movs	r3, #0
 8017764:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8017766:	1d3a      	adds	r2, r7, #4
 8017768:	f107 0108 	add.w	r1, r7, #8
 801776c:	f107 030c 	add.w	r3, r7, #12
 8017770:	4618      	mov	r0, r3
 8017772:	f7e9 f843 	bl	80007fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8017776:	6879      	ldr	r1, [r7, #4]
 8017778:	68bb      	ldr	r3, [r7, #8]
 801777a:	68fa      	ldr	r2, [r7, #12]
 801777c:	9202      	str	r2, [sp, #8]
 801777e:	9301      	str	r3, [sp, #4]
 8017780:	2306      	movs	r3, #6
 8017782:	9300      	str	r3, [sp, #0]
 8017784:	2300      	movs	r3, #0
 8017786:	460a      	mov	r2, r1
 8017788:	4910      	ldr	r1, [pc, #64]	; (80177cc <xTimerCreateTimerTask+0x84>)
 801778a:	4811      	ldr	r0, [pc, #68]	; (80177d0 <xTimerCreateTimerTask+0x88>)
 801778c:	f7fe ff88 	bl	80166a0 <xTaskCreateStatic>
 8017790:	4603      	mov	r3, r0
 8017792:	4a10      	ldr	r2, [pc, #64]	; (80177d4 <xTimerCreateTimerTask+0x8c>)
 8017794:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8017796:	4b0f      	ldr	r3, [pc, #60]	; (80177d4 <xTimerCreateTimerTask+0x8c>)
 8017798:	681b      	ldr	r3, [r3, #0]
 801779a:	2b00      	cmp	r3, #0
 801779c:	d001      	beq.n	80177a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801779e:	2301      	movs	r3, #1
 80177a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80177a2:	697b      	ldr	r3, [r7, #20]
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d10a      	bne.n	80177be <xTimerCreateTimerTask+0x76>
	__asm volatile
 80177a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177ac:	f383 8811 	msr	BASEPRI, r3
 80177b0:	f3bf 8f6f 	isb	sy
 80177b4:	f3bf 8f4f 	dsb	sy
 80177b8:	613b      	str	r3, [r7, #16]
}
 80177ba:	bf00      	nop
 80177bc:	e7fe      	b.n	80177bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80177be:	697b      	ldr	r3, [r7, #20]
}
 80177c0:	4618      	mov	r0, r3
 80177c2:	3718      	adds	r7, #24
 80177c4:	46bd      	mov	sp, r7
 80177c6:	bd80      	pop	{r7, pc}
 80177c8:	24001228 	.word	0x24001228
 80177cc:	08023f6c 	.word	0x08023f6c
 80177d0:	08017a41 	.word	0x08017a41
 80177d4:	2400122c 	.word	0x2400122c

080177d8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80177d8:	b580      	push	{r7, lr}
 80177da:	b088      	sub	sp, #32
 80177dc:	af02      	add	r7, sp, #8
 80177de:	60f8      	str	r0, [r7, #12]
 80177e0:	60b9      	str	r1, [r7, #8]
 80177e2:	607a      	str	r2, [r7, #4]
 80177e4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80177e6:	2028      	movs	r0, #40	; 0x28
 80177e8:	f000 fdc6 	bl	8018378 <pvPortMalloc>
 80177ec:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80177ee:	697b      	ldr	r3, [r7, #20]
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d00d      	beq.n	8017810 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80177f4:	697b      	ldr	r3, [r7, #20]
 80177f6:	2200      	movs	r2, #0
 80177f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80177fc:	697b      	ldr	r3, [r7, #20]
 80177fe:	9301      	str	r3, [sp, #4]
 8017800:	6a3b      	ldr	r3, [r7, #32]
 8017802:	9300      	str	r3, [sp, #0]
 8017804:	683b      	ldr	r3, [r7, #0]
 8017806:	687a      	ldr	r2, [r7, #4]
 8017808:	68b9      	ldr	r1, [r7, #8]
 801780a:	68f8      	ldr	r0, [r7, #12]
 801780c:	f000 f843 	bl	8017896 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8017810:	697b      	ldr	r3, [r7, #20]
	}
 8017812:	4618      	mov	r0, r3
 8017814:	3718      	adds	r7, #24
 8017816:	46bd      	mov	sp, r7
 8017818:	bd80      	pop	{r7, pc}

0801781a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 801781a:	b580      	push	{r7, lr}
 801781c:	b08a      	sub	sp, #40	; 0x28
 801781e:	af02      	add	r7, sp, #8
 8017820:	60f8      	str	r0, [r7, #12]
 8017822:	60b9      	str	r1, [r7, #8]
 8017824:	607a      	str	r2, [r7, #4]
 8017826:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8017828:	2328      	movs	r3, #40	; 0x28
 801782a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 801782c:	693b      	ldr	r3, [r7, #16]
 801782e:	2b28      	cmp	r3, #40	; 0x28
 8017830:	d00a      	beq.n	8017848 <xTimerCreateStatic+0x2e>
	__asm volatile
 8017832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017836:	f383 8811 	msr	BASEPRI, r3
 801783a:	f3bf 8f6f 	isb	sy
 801783e:	f3bf 8f4f 	dsb	sy
 8017842:	61bb      	str	r3, [r7, #24]
}
 8017844:	bf00      	nop
 8017846:	e7fe      	b.n	8017846 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8017848:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 801784a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801784c:	2b00      	cmp	r3, #0
 801784e:	d10a      	bne.n	8017866 <xTimerCreateStatic+0x4c>
	__asm volatile
 8017850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017854:	f383 8811 	msr	BASEPRI, r3
 8017858:	f3bf 8f6f 	isb	sy
 801785c:	f3bf 8f4f 	dsb	sy
 8017860:	617b      	str	r3, [r7, #20]
}
 8017862:	bf00      	nop
 8017864:	e7fe      	b.n	8017864 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8017866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017868:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 801786a:	69fb      	ldr	r3, [r7, #28]
 801786c:	2b00      	cmp	r3, #0
 801786e:	d00d      	beq.n	801788c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8017870:	69fb      	ldr	r3, [r7, #28]
 8017872:	2202      	movs	r2, #2
 8017874:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8017878:	69fb      	ldr	r3, [r7, #28]
 801787a:	9301      	str	r3, [sp, #4]
 801787c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801787e:	9300      	str	r3, [sp, #0]
 8017880:	683b      	ldr	r3, [r7, #0]
 8017882:	687a      	ldr	r2, [r7, #4]
 8017884:	68b9      	ldr	r1, [r7, #8]
 8017886:	68f8      	ldr	r0, [r7, #12]
 8017888:	f000 f805 	bl	8017896 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 801788c:	69fb      	ldr	r3, [r7, #28]
	}
 801788e:	4618      	mov	r0, r3
 8017890:	3720      	adds	r7, #32
 8017892:	46bd      	mov	sp, r7
 8017894:	bd80      	pop	{r7, pc}

08017896 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8017896:	b580      	push	{r7, lr}
 8017898:	b086      	sub	sp, #24
 801789a:	af00      	add	r7, sp, #0
 801789c:	60f8      	str	r0, [r7, #12]
 801789e:	60b9      	str	r1, [r7, #8]
 80178a0:	607a      	str	r2, [r7, #4]
 80178a2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80178a4:	68bb      	ldr	r3, [r7, #8]
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d10a      	bne.n	80178c0 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80178aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178ae:	f383 8811 	msr	BASEPRI, r3
 80178b2:	f3bf 8f6f 	isb	sy
 80178b6:	f3bf 8f4f 	dsb	sy
 80178ba:	617b      	str	r3, [r7, #20]
}
 80178bc:	bf00      	nop
 80178be:	e7fe      	b.n	80178be <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80178c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	d01e      	beq.n	8017904 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80178c6:	f000 facb 	bl	8017e60 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80178ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178cc:	68fa      	ldr	r2, [r7, #12]
 80178ce:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80178d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178d2:	68ba      	ldr	r2, [r7, #8]
 80178d4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80178d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178d8:	683a      	ldr	r2, [r7, #0]
 80178da:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80178dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178de:	6a3a      	ldr	r2, [r7, #32]
 80178e0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80178e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178e4:	3304      	adds	r3, #4
 80178e6:	4618      	mov	r0, r3
 80178e8:	f7fd fef4 	bl	80156d4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	d008      	beq.n	8017904 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80178f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80178f8:	f043 0304 	orr.w	r3, r3, #4
 80178fc:	b2da      	uxtb	r2, r3
 80178fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8017904:	bf00      	nop
 8017906:	3718      	adds	r7, #24
 8017908:	46bd      	mov	sp, r7
 801790a:	bd80      	pop	{r7, pc}

0801790c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801790c:	b580      	push	{r7, lr}
 801790e:	b08a      	sub	sp, #40	; 0x28
 8017910:	af00      	add	r7, sp, #0
 8017912:	60f8      	str	r0, [r7, #12]
 8017914:	60b9      	str	r1, [r7, #8]
 8017916:	607a      	str	r2, [r7, #4]
 8017918:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801791a:	2300      	movs	r3, #0
 801791c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801791e:	68fb      	ldr	r3, [r7, #12]
 8017920:	2b00      	cmp	r3, #0
 8017922:	d10a      	bne.n	801793a <xTimerGenericCommand+0x2e>
	__asm volatile
 8017924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017928:	f383 8811 	msr	BASEPRI, r3
 801792c:	f3bf 8f6f 	isb	sy
 8017930:	f3bf 8f4f 	dsb	sy
 8017934:	623b      	str	r3, [r7, #32]
}
 8017936:	bf00      	nop
 8017938:	e7fe      	b.n	8017938 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801793a:	4b1a      	ldr	r3, [pc, #104]	; (80179a4 <xTimerGenericCommand+0x98>)
 801793c:	681b      	ldr	r3, [r3, #0]
 801793e:	2b00      	cmp	r3, #0
 8017940:	d02a      	beq.n	8017998 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8017942:	68bb      	ldr	r3, [r7, #8]
 8017944:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801794a:	68fb      	ldr	r3, [r7, #12]
 801794c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801794e:	68bb      	ldr	r3, [r7, #8]
 8017950:	2b05      	cmp	r3, #5
 8017952:	dc18      	bgt.n	8017986 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8017954:	f7ff fcd6 	bl	8017304 <xTaskGetSchedulerState>
 8017958:	4603      	mov	r3, r0
 801795a:	2b02      	cmp	r3, #2
 801795c:	d109      	bne.n	8017972 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801795e:	4b11      	ldr	r3, [pc, #68]	; (80179a4 <xTimerGenericCommand+0x98>)
 8017960:	6818      	ldr	r0, [r3, #0]
 8017962:	f107 0114 	add.w	r1, r7, #20
 8017966:	2300      	movs	r3, #0
 8017968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801796a:	f7fe f881 	bl	8015a70 <xQueueGenericSend>
 801796e:	6278      	str	r0, [r7, #36]	; 0x24
 8017970:	e012      	b.n	8017998 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8017972:	4b0c      	ldr	r3, [pc, #48]	; (80179a4 <xTimerGenericCommand+0x98>)
 8017974:	6818      	ldr	r0, [r3, #0]
 8017976:	f107 0114 	add.w	r1, r7, #20
 801797a:	2300      	movs	r3, #0
 801797c:	2200      	movs	r2, #0
 801797e:	f7fe f877 	bl	8015a70 <xQueueGenericSend>
 8017982:	6278      	str	r0, [r7, #36]	; 0x24
 8017984:	e008      	b.n	8017998 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8017986:	4b07      	ldr	r3, [pc, #28]	; (80179a4 <xTimerGenericCommand+0x98>)
 8017988:	6818      	ldr	r0, [r3, #0]
 801798a:	f107 0114 	add.w	r1, r7, #20
 801798e:	2300      	movs	r3, #0
 8017990:	683a      	ldr	r2, [r7, #0]
 8017992:	f7fe f96b 	bl	8015c6c <xQueueGenericSendFromISR>
 8017996:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8017998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801799a:	4618      	mov	r0, r3
 801799c:	3728      	adds	r7, #40	; 0x28
 801799e:	46bd      	mov	sp, r7
 80179a0:	bd80      	pop	{r7, pc}
 80179a2:	bf00      	nop
 80179a4:	24001228 	.word	0x24001228

080179a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80179a8:	b580      	push	{r7, lr}
 80179aa:	b088      	sub	sp, #32
 80179ac:	af02      	add	r7, sp, #8
 80179ae:	6078      	str	r0, [r7, #4]
 80179b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80179b2:	4b22      	ldr	r3, [pc, #136]	; (8017a3c <prvProcessExpiredTimer+0x94>)
 80179b4:	681b      	ldr	r3, [r3, #0]
 80179b6:	68db      	ldr	r3, [r3, #12]
 80179b8:	68db      	ldr	r3, [r3, #12]
 80179ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80179bc:	697b      	ldr	r3, [r7, #20]
 80179be:	3304      	adds	r3, #4
 80179c0:	4618      	mov	r0, r3
 80179c2:	f7fd fef1 	bl	80157a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80179c6:	697b      	ldr	r3, [r7, #20]
 80179c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80179cc:	f003 0304 	and.w	r3, r3, #4
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d022      	beq.n	8017a1a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80179d4:	697b      	ldr	r3, [r7, #20]
 80179d6:	699a      	ldr	r2, [r3, #24]
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	18d1      	adds	r1, r2, r3
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	683a      	ldr	r2, [r7, #0]
 80179e0:	6978      	ldr	r0, [r7, #20]
 80179e2:	f000 f8d1 	bl	8017b88 <prvInsertTimerInActiveList>
 80179e6:	4603      	mov	r3, r0
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d01f      	beq.n	8017a2c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80179ec:	2300      	movs	r3, #0
 80179ee:	9300      	str	r3, [sp, #0]
 80179f0:	2300      	movs	r3, #0
 80179f2:	687a      	ldr	r2, [r7, #4]
 80179f4:	2100      	movs	r1, #0
 80179f6:	6978      	ldr	r0, [r7, #20]
 80179f8:	f7ff ff88 	bl	801790c <xTimerGenericCommand>
 80179fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80179fe:	693b      	ldr	r3, [r7, #16]
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d113      	bne.n	8017a2c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8017a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a08:	f383 8811 	msr	BASEPRI, r3
 8017a0c:	f3bf 8f6f 	isb	sy
 8017a10:	f3bf 8f4f 	dsb	sy
 8017a14:	60fb      	str	r3, [r7, #12]
}
 8017a16:	bf00      	nop
 8017a18:	e7fe      	b.n	8017a18 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017a1a:	697b      	ldr	r3, [r7, #20]
 8017a1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017a20:	f023 0301 	bic.w	r3, r3, #1
 8017a24:	b2da      	uxtb	r2, r3
 8017a26:	697b      	ldr	r3, [r7, #20]
 8017a28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017a2c:	697b      	ldr	r3, [r7, #20]
 8017a2e:	6a1b      	ldr	r3, [r3, #32]
 8017a30:	6978      	ldr	r0, [r7, #20]
 8017a32:	4798      	blx	r3
}
 8017a34:	bf00      	nop
 8017a36:	3718      	adds	r7, #24
 8017a38:	46bd      	mov	sp, r7
 8017a3a:	bd80      	pop	{r7, pc}
 8017a3c:	24001220 	.word	0x24001220

08017a40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8017a40:	b580      	push	{r7, lr}
 8017a42:	b084      	sub	sp, #16
 8017a44:	af00      	add	r7, sp, #0
 8017a46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017a48:	f107 0308 	add.w	r3, r7, #8
 8017a4c:	4618      	mov	r0, r3
 8017a4e:	f000 f857 	bl	8017b00 <prvGetNextExpireTime>
 8017a52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8017a54:	68bb      	ldr	r3, [r7, #8]
 8017a56:	4619      	mov	r1, r3
 8017a58:	68f8      	ldr	r0, [r7, #12]
 8017a5a:	f000 f803 	bl	8017a64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8017a5e:	f000 f8d5 	bl	8017c0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017a62:	e7f1      	b.n	8017a48 <prvTimerTask+0x8>

08017a64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8017a64:	b580      	push	{r7, lr}
 8017a66:	b084      	sub	sp, #16
 8017a68:	af00      	add	r7, sp, #0
 8017a6a:	6078      	str	r0, [r7, #4]
 8017a6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8017a6e:	f7ff f865 	bl	8016b3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017a72:	f107 0308 	add.w	r3, r7, #8
 8017a76:	4618      	mov	r0, r3
 8017a78:	f000 f866 	bl	8017b48 <prvSampleTimeNow>
 8017a7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8017a7e:	68bb      	ldr	r3, [r7, #8]
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d130      	bne.n	8017ae6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8017a84:	683b      	ldr	r3, [r7, #0]
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d10a      	bne.n	8017aa0 <prvProcessTimerOrBlockTask+0x3c>
 8017a8a:	687a      	ldr	r2, [r7, #4]
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	429a      	cmp	r2, r3
 8017a90:	d806      	bhi.n	8017aa0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8017a92:	f7ff f861 	bl	8016b58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8017a96:	68f9      	ldr	r1, [r7, #12]
 8017a98:	6878      	ldr	r0, [r7, #4]
 8017a9a:	f7ff ff85 	bl	80179a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8017a9e:	e024      	b.n	8017aea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8017aa0:	683b      	ldr	r3, [r7, #0]
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d008      	beq.n	8017ab8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8017aa6:	4b13      	ldr	r3, [pc, #76]	; (8017af4 <prvProcessTimerOrBlockTask+0x90>)
 8017aa8:	681b      	ldr	r3, [r3, #0]
 8017aaa:	681b      	ldr	r3, [r3, #0]
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d101      	bne.n	8017ab4 <prvProcessTimerOrBlockTask+0x50>
 8017ab0:	2301      	movs	r3, #1
 8017ab2:	e000      	b.n	8017ab6 <prvProcessTimerOrBlockTask+0x52>
 8017ab4:	2300      	movs	r3, #0
 8017ab6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8017ab8:	4b0f      	ldr	r3, [pc, #60]	; (8017af8 <prvProcessTimerOrBlockTask+0x94>)
 8017aba:	6818      	ldr	r0, [r3, #0]
 8017abc:	687a      	ldr	r2, [r7, #4]
 8017abe:	68fb      	ldr	r3, [r7, #12]
 8017ac0:	1ad3      	subs	r3, r2, r3
 8017ac2:	683a      	ldr	r2, [r7, #0]
 8017ac4:	4619      	mov	r1, r3
 8017ac6:	f7fe fdb7 	bl	8016638 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8017aca:	f7ff f845 	bl	8016b58 <xTaskResumeAll>
 8017ace:	4603      	mov	r3, r0
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d10a      	bne.n	8017aea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8017ad4:	4b09      	ldr	r3, [pc, #36]	; (8017afc <prvProcessTimerOrBlockTask+0x98>)
 8017ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017ada:	601a      	str	r2, [r3, #0]
 8017adc:	f3bf 8f4f 	dsb	sy
 8017ae0:	f3bf 8f6f 	isb	sy
}
 8017ae4:	e001      	b.n	8017aea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8017ae6:	f7ff f837 	bl	8016b58 <xTaskResumeAll>
}
 8017aea:	bf00      	nop
 8017aec:	3710      	adds	r7, #16
 8017aee:	46bd      	mov	sp, r7
 8017af0:	bd80      	pop	{r7, pc}
 8017af2:	bf00      	nop
 8017af4:	24001224 	.word	0x24001224
 8017af8:	24001228 	.word	0x24001228
 8017afc:	e000ed04 	.word	0xe000ed04

08017b00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8017b00:	b480      	push	{r7}
 8017b02:	b085      	sub	sp, #20
 8017b04:	af00      	add	r7, sp, #0
 8017b06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8017b08:	4b0e      	ldr	r3, [pc, #56]	; (8017b44 <prvGetNextExpireTime+0x44>)
 8017b0a:	681b      	ldr	r3, [r3, #0]
 8017b0c:	681b      	ldr	r3, [r3, #0]
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d101      	bne.n	8017b16 <prvGetNextExpireTime+0x16>
 8017b12:	2201      	movs	r2, #1
 8017b14:	e000      	b.n	8017b18 <prvGetNextExpireTime+0x18>
 8017b16:	2200      	movs	r2, #0
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	681b      	ldr	r3, [r3, #0]
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d105      	bne.n	8017b30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017b24:	4b07      	ldr	r3, [pc, #28]	; (8017b44 <prvGetNextExpireTime+0x44>)
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	68db      	ldr	r3, [r3, #12]
 8017b2a:	681b      	ldr	r3, [r3, #0]
 8017b2c:	60fb      	str	r3, [r7, #12]
 8017b2e:	e001      	b.n	8017b34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8017b30:	2300      	movs	r3, #0
 8017b32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8017b34:	68fb      	ldr	r3, [r7, #12]
}
 8017b36:	4618      	mov	r0, r3
 8017b38:	3714      	adds	r7, #20
 8017b3a:	46bd      	mov	sp, r7
 8017b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b40:	4770      	bx	lr
 8017b42:	bf00      	nop
 8017b44:	24001220 	.word	0x24001220

08017b48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8017b48:	b580      	push	{r7, lr}
 8017b4a:	b084      	sub	sp, #16
 8017b4c:	af00      	add	r7, sp, #0
 8017b4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8017b50:	f7ff f89e 	bl	8016c90 <xTaskGetTickCount>
 8017b54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8017b56:	4b0b      	ldr	r3, [pc, #44]	; (8017b84 <prvSampleTimeNow+0x3c>)
 8017b58:	681b      	ldr	r3, [r3, #0]
 8017b5a:	68fa      	ldr	r2, [r7, #12]
 8017b5c:	429a      	cmp	r2, r3
 8017b5e:	d205      	bcs.n	8017b6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8017b60:	f000 f91a 	bl	8017d98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	2201      	movs	r2, #1
 8017b68:	601a      	str	r2, [r3, #0]
 8017b6a:	e002      	b.n	8017b72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	2200      	movs	r2, #0
 8017b70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8017b72:	4a04      	ldr	r2, [pc, #16]	; (8017b84 <prvSampleTimeNow+0x3c>)
 8017b74:	68fb      	ldr	r3, [r7, #12]
 8017b76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8017b78:	68fb      	ldr	r3, [r7, #12]
}
 8017b7a:	4618      	mov	r0, r3
 8017b7c:	3710      	adds	r7, #16
 8017b7e:	46bd      	mov	sp, r7
 8017b80:	bd80      	pop	{r7, pc}
 8017b82:	bf00      	nop
 8017b84:	24001230 	.word	0x24001230

08017b88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8017b88:	b580      	push	{r7, lr}
 8017b8a:	b086      	sub	sp, #24
 8017b8c:	af00      	add	r7, sp, #0
 8017b8e:	60f8      	str	r0, [r7, #12]
 8017b90:	60b9      	str	r1, [r7, #8]
 8017b92:	607a      	str	r2, [r7, #4]
 8017b94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8017b96:	2300      	movs	r3, #0
 8017b98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8017b9a:	68fb      	ldr	r3, [r7, #12]
 8017b9c:	68ba      	ldr	r2, [r7, #8]
 8017b9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017ba0:	68fb      	ldr	r3, [r7, #12]
 8017ba2:	68fa      	ldr	r2, [r7, #12]
 8017ba4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8017ba6:	68ba      	ldr	r2, [r7, #8]
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	429a      	cmp	r2, r3
 8017bac:	d812      	bhi.n	8017bd4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017bae:	687a      	ldr	r2, [r7, #4]
 8017bb0:	683b      	ldr	r3, [r7, #0]
 8017bb2:	1ad2      	subs	r2, r2, r3
 8017bb4:	68fb      	ldr	r3, [r7, #12]
 8017bb6:	699b      	ldr	r3, [r3, #24]
 8017bb8:	429a      	cmp	r2, r3
 8017bba:	d302      	bcc.n	8017bc2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8017bbc:	2301      	movs	r3, #1
 8017bbe:	617b      	str	r3, [r7, #20]
 8017bc0:	e01b      	b.n	8017bfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8017bc2:	4b10      	ldr	r3, [pc, #64]	; (8017c04 <prvInsertTimerInActiveList+0x7c>)
 8017bc4:	681a      	ldr	r2, [r3, #0]
 8017bc6:	68fb      	ldr	r3, [r7, #12]
 8017bc8:	3304      	adds	r3, #4
 8017bca:	4619      	mov	r1, r3
 8017bcc:	4610      	mov	r0, r2
 8017bce:	f7fd fdb2 	bl	8015736 <vListInsert>
 8017bd2:	e012      	b.n	8017bfa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8017bd4:	687a      	ldr	r2, [r7, #4]
 8017bd6:	683b      	ldr	r3, [r7, #0]
 8017bd8:	429a      	cmp	r2, r3
 8017bda:	d206      	bcs.n	8017bea <prvInsertTimerInActiveList+0x62>
 8017bdc:	68ba      	ldr	r2, [r7, #8]
 8017bde:	683b      	ldr	r3, [r7, #0]
 8017be0:	429a      	cmp	r2, r3
 8017be2:	d302      	bcc.n	8017bea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8017be4:	2301      	movs	r3, #1
 8017be6:	617b      	str	r3, [r7, #20]
 8017be8:	e007      	b.n	8017bfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017bea:	4b07      	ldr	r3, [pc, #28]	; (8017c08 <prvInsertTimerInActiveList+0x80>)
 8017bec:	681a      	ldr	r2, [r3, #0]
 8017bee:	68fb      	ldr	r3, [r7, #12]
 8017bf0:	3304      	adds	r3, #4
 8017bf2:	4619      	mov	r1, r3
 8017bf4:	4610      	mov	r0, r2
 8017bf6:	f7fd fd9e 	bl	8015736 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8017bfa:	697b      	ldr	r3, [r7, #20]
}
 8017bfc:	4618      	mov	r0, r3
 8017bfe:	3718      	adds	r7, #24
 8017c00:	46bd      	mov	sp, r7
 8017c02:	bd80      	pop	{r7, pc}
 8017c04:	24001224 	.word	0x24001224
 8017c08:	24001220 	.word	0x24001220

08017c0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8017c0c:	b580      	push	{r7, lr}
 8017c0e:	b08c      	sub	sp, #48	; 0x30
 8017c10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017c12:	e0ae      	b.n	8017d72 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8017c14:	68bb      	ldr	r3, [r7, #8]
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	f2c0 80aa 	blt.w	8017d70 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8017c1c:	693b      	ldr	r3, [r7, #16]
 8017c1e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8017c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c22:	695b      	ldr	r3, [r3, #20]
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d004      	beq.n	8017c32 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c2a:	3304      	adds	r3, #4
 8017c2c:	4618      	mov	r0, r3
 8017c2e:	f7fd fdbb 	bl	80157a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017c32:	1d3b      	adds	r3, r7, #4
 8017c34:	4618      	mov	r0, r3
 8017c36:	f7ff ff87 	bl	8017b48 <prvSampleTimeNow>
 8017c3a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8017c3c:	68bb      	ldr	r3, [r7, #8]
 8017c3e:	2b09      	cmp	r3, #9
 8017c40:	f200 8097 	bhi.w	8017d72 <prvProcessReceivedCommands+0x166>
 8017c44:	a201      	add	r2, pc, #4	; (adr r2, 8017c4c <prvProcessReceivedCommands+0x40>)
 8017c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017c4a:	bf00      	nop
 8017c4c:	08017c75 	.word	0x08017c75
 8017c50:	08017c75 	.word	0x08017c75
 8017c54:	08017c75 	.word	0x08017c75
 8017c58:	08017ce9 	.word	0x08017ce9
 8017c5c:	08017cfd 	.word	0x08017cfd
 8017c60:	08017d47 	.word	0x08017d47
 8017c64:	08017c75 	.word	0x08017c75
 8017c68:	08017c75 	.word	0x08017c75
 8017c6c:	08017ce9 	.word	0x08017ce9
 8017c70:	08017cfd 	.word	0x08017cfd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017c7a:	f043 0301 	orr.w	r3, r3, #1
 8017c7e:	b2da      	uxtb	r2, r3
 8017c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8017c86:	68fa      	ldr	r2, [r7, #12]
 8017c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c8a:	699b      	ldr	r3, [r3, #24]
 8017c8c:	18d1      	adds	r1, r2, r3
 8017c8e:	68fb      	ldr	r3, [r7, #12]
 8017c90:	6a3a      	ldr	r2, [r7, #32]
 8017c92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017c94:	f7ff ff78 	bl	8017b88 <prvInsertTimerInActiveList>
 8017c98:	4603      	mov	r3, r0
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d069      	beq.n	8017d72 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ca0:	6a1b      	ldr	r3, [r3, #32]
 8017ca2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017ca4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ca8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017cac:	f003 0304 	and.w	r3, r3, #4
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d05e      	beq.n	8017d72 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8017cb4:	68fa      	ldr	r2, [r7, #12]
 8017cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cb8:	699b      	ldr	r3, [r3, #24]
 8017cba:	441a      	add	r2, r3
 8017cbc:	2300      	movs	r3, #0
 8017cbe:	9300      	str	r3, [sp, #0]
 8017cc0:	2300      	movs	r3, #0
 8017cc2:	2100      	movs	r1, #0
 8017cc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017cc6:	f7ff fe21 	bl	801790c <xTimerGenericCommand>
 8017cca:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8017ccc:	69fb      	ldr	r3, [r7, #28]
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	d14f      	bne.n	8017d72 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8017cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cd6:	f383 8811 	msr	BASEPRI, r3
 8017cda:	f3bf 8f6f 	isb	sy
 8017cde:	f3bf 8f4f 	dsb	sy
 8017ce2:	61bb      	str	r3, [r7, #24]
}
 8017ce4:	bf00      	nop
 8017ce6:	e7fe      	b.n	8017ce6 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017cee:	f023 0301 	bic.w	r3, r3, #1
 8017cf2:	b2da      	uxtb	r2, r3
 8017cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8017cfa:	e03a      	b.n	8017d72 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cfe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017d02:	f043 0301 	orr.w	r3, r3, #1
 8017d06:	b2da      	uxtb	r2, r3
 8017d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8017d0e:	68fa      	ldr	r2, [r7, #12]
 8017d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d12:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8017d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d16:	699b      	ldr	r3, [r3, #24]
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	d10a      	bne.n	8017d32 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8017d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d20:	f383 8811 	msr	BASEPRI, r3
 8017d24:	f3bf 8f6f 	isb	sy
 8017d28:	f3bf 8f4f 	dsb	sy
 8017d2c:	617b      	str	r3, [r7, #20]
}
 8017d2e:	bf00      	nop
 8017d30:	e7fe      	b.n	8017d30 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8017d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d34:	699a      	ldr	r2, [r3, #24]
 8017d36:	6a3b      	ldr	r3, [r7, #32]
 8017d38:	18d1      	adds	r1, r2, r3
 8017d3a:	6a3b      	ldr	r3, [r7, #32]
 8017d3c:	6a3a      	ldr	r2, [r7, #32]
 8017d3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017d40:	f7ff ff22 	bl	8017b88 <prvInsertTimerInActiveList>
					break;
 8017d44:	e015      	b.n	8017d72 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8017d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017d4c:	f003 0302 	and.w	r3, r3, #2
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d103      	bne.n	8017d5c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8017d54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017d56:	f000 fbdb 	bl	8018510 <vPortFree>
 8017d5a:	e00a      	b.n	8017d72 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017d62:	f023 0301 	bic.w	r3, r3, #1
 8017d66:	b2da      	uxtb	r2, r3
 8017d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8017d6e:	e000      	b.n	8017d72 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8017d70:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017d72:	4b08      	ldr	r3, [pc, #32]	; (8017d94 <prvProcessReceivedCommands+0x188>)
 8017d74:	681b      	ldr	r3, [r3, #0]
 8017d76:	f107 0108 	add.w	r1, r7, #8
 8017d7a:	2200      	movs	r2, #0
 8017d7c:	4618      	mov	r0, r3
 8017d7e:	f7fe f89d 	bl	8015ebc <xQueueReceive>
 8017d82:	4603      	mov	r3, r0
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	f47f af45 	bne.w	8017c14 <prvProcessReceivedCommands+0x8>
	}
}
 8017d8a:	bf00      	nop
 8017d8c:	bf00      	nop
 8017d8e:	3728      	adds	r7, #40	; 0x28
 8017d90:	46bd      	mov	sp, r7
 8017d92:	bd80      	pop	{r7, pc}
 8017d94:	24001228 	.word	0x24001228

08017d98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8017d98:	b580      	push	{r7, lr}
 8017d9a:	b088      	sub	sp, #32
 8017d9c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017d9e:	e048      	b.n	8017e32 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017da0:	4b2d      	ldr	r3, [pc, #180]	; (8017e58 <prvSwitchTimerLists+0xc0>)
 8017da2:	681b      	ldr	r3, [r3, #0]
 8017da4:	68db      	ldr	r3, [r3, #12]
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017daa:	4b2b      	ldr	r3, [pc, #172]	; (8017e58 <prvSwitchTimerLists+0xc0>)
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	68db      	ldr	r3, [r3, #12]
 8017db0:	68db      	ldr	r3, [r3, #12]
 8017db2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017db4:	68fb      	ldr	r3, [r7, #12]
 8017db6:	3304      	adds	r3, #4
 8017db8:	4618      	mov	r0, r3
 8017dba:	f7fd fcf5 	bl	80157a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017dbe:	68fb      	ldr	r3, [r7, #12]
 8017dc0:	6a1b      	ldr	r3, [r3, #32]
 8017dc2:	68f8      	ldr	r0, [r7, #12]
 8017dc4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017dc6:	68fb      	ldr	r3, [r7, #12]
 8017dc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017dcc:	f003 0304 	and.w	r3, r3, #4
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d02e      	beq.n	8017e32 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8017dd4:	68fb      	ldr	r3, [r7, #12]
 8017dd6:	699b      	ldr	r3, [r3, #24]
 8017dd8:	693a      	ldr	r2, [r7, #16]
 8017dda:	4413      	add	r3, r2
 8017ddc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8017dde:	68ba      	ldr	r2, [r7, #8]
 8017de0:	693b      	ldr	r3, [r7, #16]
 8017de2:	429a      	cmp	r2, r3
 8017de4:	d90e      	bls.n	8017e04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8017de6:	68fb      	ldr	r3, [r7, #12]
 8017de8:	68ba      	ldr	r2, [r7, #8]
 8017dea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017dec:	68fb      	ldr	r3, [r7, #12]
 8017dee:	68fa      	ldr	r2, [r7, #12]
 8017df0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017df2:	4b19      	ldr	r3, [pc, #100]	; (8017e58 <prvSwitchTimerLists+0xc0>)
 8017df4:	681a      	ldr	r2, [r3, #0]
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	3304      	adds	r3, #4
 8017dfa:	4619      	mov	r1, r3
 8017dfc:	4610      	mov	r0, r2
 8017dfe:	f7fd fc9a 	bl	8015736 <vListInsert>
 8017e02:	e016      	b.n	8017e32 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017e04:	2300      	movs	r3, #0
 8017e06:	9300      	str	r3, [sp, #0]
 8017e08:	2300      	movs	r3, #0
 8017e0a:	693a      	ldr	r2, [r7, #16]
 8017e0c:	2100      	movs	r1, #0
 8017e0e:	68f8      	ldr	r0, [r7, #12]
 8017e10:	f7ff fd7c 	bl	801790c <xTimerGenericCommand>
 8017e14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d10a      	bne.n	8017e32 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8017e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e20:	f383 8811 	msr	BASEPRI, r3
 8017e24:	f3bf 8f6f 	isb	sy
 8017e28:	f3bf 8f4f 	dsb	sy
 8017e2c:	603b      	str	r3, [r7, #0]
}
 8017e2e:	bf00      	nop
 8017e30:	e7fe      	b.n	8017e30 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017e32:	4b09      	ldr	r3, [pc, #36]	; (8017e58 <prvSwitchTimerLists+0xc0>)
 8017e34:	681b      	ldr	r3, [r3, #0]
 8017e36:	681b      	ldr	r3, [r3, #0]
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d1b1      	bne.n	8017da0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8017e3c:	4b06      	ldr	r3, [pc, #24]	; (8017e58 <prvSwitchTimerLists+0xc0>)
 8017e3e:	681b      	ldr	r3, [r3, #0]
 8017e40:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8017e42:	4b06      	ldr	r3, [pc, #24]	; (8017e5c <prvSwitchTimerLists+0xc4>)
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	4a04      	ldr	r2, [pc, #16]	; (8017e58 <prvSwitchTimerLists+0xc0>)
 8017e48:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8017e4a:	4a04      	ldr	r2, [pc, #16]	; (8017e5c <prvSwitchTimerLists+0xc4>)
 8017e4c:	697b      	ldr	r3, [r7, #20]
 8017e4e:	6013      	str	r3, [r2, #0]
}
 8017e50:	bf00      	nop
 8017e52:	3718      	adds	r7, #24
 8017e54:	46bd      	mov	sp, r7
 8017e56:	bd80      	pop	{r7, pc}
 8017e58:	24001220 	.word	0x24001220
 8017e5c:	24001224 	.word	0x24001224

08017e60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8017e60:	b580      	push	{r7, lr}
 8017e62:	b082      	sub	sp, #8
 8017e64:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8017e66:	f000 f965 	bl	8018134 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8017e6a:	4b15      	ldr	r3, [pc, #84]	; (8017ec0 <prvCheckForValidListAndQueue+0x60>)
 8017e6c:	681b      	ldr	r3, [r3, #0]
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d120      	bne.n	8017eb4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8017e72:	4814      	ldr	r0, [pc, #80]	; (8017ec4 <prvCheckForValidListAndQueue+0x64>)
 8017e74:	f7fd fc0e 	bl	8015694 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8017e78:	4813      	ldr	r0, [pc, #76]	; (8017ec8 <prvCheckForValidListAndQueue+0x68>)
 8017e7a:	f7fd fc0b 	bl	8015694 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8017e7e:	4b13      	ldr	r3, [pc, #76]	; (8017ecc <prvCheckForValidListAndQueue+0x6c>)
 8017e80:	4a10      	ldr	r2, [pc, #64]	; (8017ec4 <prvCheckForValidListAndQueue+0x64>)
 8017e82:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8017e84:	4b12      	ldr	r3, [pc, #72]	; (8017ed0 <prvCheckForValidListAndQueue+0x70>)
 8017e86:	4a10      	ldr	r2, [pc, #64]	; (8017ec8 <prvCheckForValidListAndQueue+0x68>)
 8017e88:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8017e8a:	2300      	movs	r3, #0
 8017e8c:	9300      	str	r3, [sp, #0]
 8017e8e:	4b11      	ldr	r3, [pc, #68]	; (8017ed4 <prvCheckForValidListAndQueue+0x74>)
 8017e90:	4a11      	ldr	r2, [pc, #68]	; (8017ed8 <prvCheckForValidListAndQueue+0x78>)
 8017e92:	210c      	movs	r1, #12
 8017e94:	2014      	movs	r0, #20
 8017e96:	f7fd fd19 	bl	80158cc <xQueueGenericCreateStatic>
 8017e9a:	4603      	mov	r3, r0
 8017e9c:	4a08      	ldr	r2, [pc, #32]	; (8017ec0 <prvCheckForValidListAndQueue+0x60>)
 8017e9e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8017ea0:	4b07      	ldr	r3, [pc, #28]	; (8017ec0 <prvCheckForValidListAndQueue+0x60>)
 8017ea2:	681b      	ldr	r3, [r3, #0]
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d005      	beq.n	8017eb4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8017ea8:	4b05      	ldr	r3, [pc, #20]	; (8017ec0 <prvCheckForValidListAndQueue+0x60>)
 8017eaa:	681b      	ldr	r3, [r3, #0]
 8017eac:	490b      	ldr	r1, [pc, #44]	; (8017edc <prvCheckForValidListAndQueue+0x7c>)
 8017eae:	4618      	mov	r0, r3
 8017eb0:	f7fe fb98 	bl	80165e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017eb4:	f000 f96e 	bl	8018194 <vPortExitCritical>
}
 8017eb8:	bf00      	nop
 8017eba:	46bd      	mov	sp, r7
 8017ebc:	bd80      	pop	{r7, pc}
 8017ebe:	bf00      	nop
 8017ec0:	24001228 	.word	0x24001228
 8017ec4:	240011f8 	.word	0x240011f8
 8017ec8:	2400120c 	.word	0x2400120c
 8017ecc:	24001220 	.word	0x24001220
 8017ed0:	24001224 	.word	0x24001224
 8017ed4:	24001324 	.word	0x24001324
 8017ed8:	24001234 	.word	0x24001234
 8017edc:	08023f74 	.word	0x08023f74

08017ee0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8017ee0:	b480      	push	{r7}
 8017ee2:	b085      	sub	sp, #20
 8017ee4:	af00      	add	r7, sp, #0
 8017ee6:	60f8      	str	r0, [r7, #12]
 8017ee8:	60b9      	str	r1, [r7, #8]
 8017eea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8017eec:	68fb      	ldr	r3, [r7, #12]
 8017eee:	3b04      	subs	r3, #4
 8017ef0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8017ef2:	68fb      	ldr	r3, [r7, #12]
 8017ef4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8017ef8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017efa:	68fb      	ldr	r3, [r7, #12]
 8017efc:	3b04      	subs	r3, #4
 8017efe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8017f00:	68bb      	ldr	r3, [r7, #8]
 8017f02:	f023 0201 	bic.w	r2, r3, #1
 8017f06:	68fb      	ldr	r3, [r7, #12]
 8017f08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017f0a:	68fb      	ldr	r3, [r7, #12]
 8017f0c:	3b04      	subs	r3, #4
 8017f0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8017f10:	4a0c      	ldr	r2, [pc, #48]	; (8017f44 <pxPortInitialiseStack+0x64>)
 8017f12:	68fb      	ldr	r3, [r7, #12]
 8017f14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8017f16:	68fb      	ldr	r3, [r7, #12]
 8017f18:	3b14      	subs	r3, #20
 8017f1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8017f1c:	687a      	ldr	r2, [r7, #4]
 8017f1e:	68fb      	ldr	r3, [r7, #12]
 8017f20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8017f22:	68fb      	ldr	r3, [r7, #12]
 8017f24:	3b04      	subs	r3, #4
 8017f26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8017f28:	68fb      	ldr	r3, [r7, #12]
 8017f2a:	f06f 0202 	mvn.w	r2, #2
 8017f2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8017f30:	68fb      	ldr	r3, [r7, #12]
 8017f32:	3b20      	subs	r3, #32
 8017f34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8017f36:	68fb      	ldr	r3, [r7, #12]
}
 8017f38:	4618      	mov	r0, r3
 8017f3a:	3714      	adds	r7, #20
 8017f3c:	46bd      	mov	sp, r7
 8017f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f42:	4770      	bx	lr
 8017f44:	08017f49 	.word	0x08017f49

08017f48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8017f48:	b480      	push	{r7}
 8017f4a:	b085      	sub	sp, #20
 8017f4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8017f4e:	2300      	movs	r3, #0
 8017f50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8017f52:	4b12      	ldr	r3, [pc, #72]	; (8017f9c <prvTaskExitError+0x54>)
 8017f54:	681b      	ldr	r3, [r3, #0]
 8017f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f5a:	d00a      	beq.n	8017f72 <prvTaskExitError+0x2a>
	__asm volatile
 8017f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f60:	f383 8811 	msr	BASEPRI, r3
 8017f64:	f3bf 8f6f 	isb	sy
 8017f68:	f3bf 8f4f 	dsb	sy
 8017f6c:	60fb      	str	r3, [r7, #12]
}
 8017f6e:	bf00      	nop
 8017f70:	e7fe      	b.n	8017f70 <prvTaskExitError+0x28>
	__asm volatile
 8017f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f76:	f383 8811 	msr	BASEPRI, r3
 8017f7a:	f3bf 8f6f 	isb	sy
 8017f7e:	f3bf 8f4f 	dsb	sy
 8017f82:	60bb      	str	r3, [r7, #8]
}
 8017f84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8017f86:	bf00      	nop
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d0fc      	beq.n	8017f88 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8017f8e:	bf00      	nop
 8017f90:	bf00      	nop
 8017f92:	3714      	adds	r7, #20
 8017f94:	46bd      	mov	sp, r7
 8017f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f9a:	4770      	bx	lr
 8017f9c:	240000b8 	.word	0x240000b8

08017fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8017fa0:	4b07      	ldr	r3, [pc, #28]	; (8017fc0 <pxCurrentTCBConst2>)
 8017fa2:	6819      	ldr	r1, [r3, #0]
 8017fa4:	6808      	ldr	r0, [r1, #0]
 8017fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017faa:	f380 8809 	msr	PSP, r0
 8017fae:	f3bf 8f6f 	isb	sy
 8017fb2:	f04f 0000 	mov.w	r0, #0
 8017fb6:	f380 8811 	msr	BASEPRI, r0
 8017fba:	4770      	bx	lr
 8017fbc:	f3af 8000 	nop.w

08017fc0 <pxCurrentTCBConst2>:
 8017fc0:	240010cc 	.word	0x240010cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8017fc4:	bf00      	nop
 8017fc6:	bf00      	nop

08017fc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8017fc8:	4808      	ldr	r0, [pc, #32]	; (8017fec <prvPortStartFirstTask+0x24>)
 8017fca:	6800      	ldr	r0, [r0, #0]
 8017fcc:	6800      	ldr	r0, [r0, #0]
 8017fce:	f380 8808 	msr	MSP, r0
 8017fd2:	f04f 0000 	mov.w	r0, #0
 8017fd6:	f380 8814 	msr	CONTROL, r0
 8017fda:	b662      	cpsie	i
 8017fdc:	b661      	cpsie	f
 8017fde:	f3bf 8f4f 	dsb	sy
 8017fe2:	f3bf 8f6f 	isb	sy
 8017fe6:	df00      	svc	0
 8017fe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8017fea:	bf00      	nop
 8017fec:	e000ed08 	.word	0xe000ed08

08017ff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8017ff0:	b580      	push	{r7, lr}
 8017ff2:	b086      	sub	sp, #24
 8017ff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8017ff6:	4b46      	ldr	r3, [pc, #280]	; (8018110 <xPortStartScheduler+0x120>)
 8017ff8:	681b      	ldr	r3, [r3, #0]
 8017ffa:	4a46      	ldr	r2, [pc, #280]	; (8018114 <xPortStartScheduler+0x124>)
 8017ffc:	4293      	cmp	r3, r2
 8017ffe:	d10a      	bne.n	8018016 <xPortStartScheduler+0x26>
	__asm volatile
 8018000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018004:	f383 8811 	msr	BASEPRI, r3
 8018008:	f3bf 8f6f 	isb	sy
 801800c:	f3bf 8f4f 	dsb	sy
 8018010:	613b      	str	r3, [r7, #16]
}
 8018012:	bf00      	nop
 8018014:	e7fe      	b.n	8018014 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018016:	4b3e      	ldr	r3, [pc, #248]	; (8018110 <xPortStartScheduler+0x120>)
 8018018:	681b      	ldr	r3, [r3, #0]
 801801a:	4a3f      	ldr	r2, [pc, #252]	; (8018118 <xPortStartScheduler+0x128>)
 801801c:	4293      	cmp	r3, r2
 801801e:	d10a      	bne.n	8018036 <xPortStartScheduler+0x46>
	__asm volatile
 8018020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018024:	f383 8811 	msr	BASEPRI, r3
 8018028:	f3bf 8f6f 	isb	sy
 801802c:	f3bf 8f4f 	dsb	sy
 8018030:	60fb      	str	r3, [r7, #12]
}
 8018032:	bf00      	nop
 8018034:	e7fe      	b.n	8018034 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018036:	4b39      	ldr	r3, [pc, #228]	; (801811c <xPortStartScheduler+0x12c>)
 8018038:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801803a:	697b      	ldr	r3, [r7, #20]
 801803c:	781b      	ldrb	r3, [r3, #0]
 801803e:	b2db      	uxtb	r3, r3
 8018040:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018042:	697b      	ldr	r3, [r7, #20]
 8018044:	22ff      	movs	r2, #255	; 0xff
 8018046:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018048:	697b      	ldr	r3, [r7, #20]
 801804a:	781b      	ldrb	r3, [r3, #0]
 801804c:	b2db      	uxtb	r3, r3
 801804e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018050:	78fb      	ldrb	r3, [r7, #3]
 8018052:	b2db      	uxtb	r3, r3
 8018054:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8018058:	b2da      	uxtb	r2, r3
 801805a:	4b31      	ldr	r3, [pc, #196]	; (8018120 <xPortStartScheduler+0x130>)
 801805c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801805e:	4b31      	ldr	r3, [pc, #196]	; (8018124 <xPortStartScheduler+0x134>)
 8018060:	2207      	movs	r2, #7
 8018062:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018064:	e009      	b.n	801807a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8018066:	4b2f      	ldr	r3, [pc, #188]	; (8018124 <xPortStartScheduler+0x134>)
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	3b01      	subs	r3, #1
 801806c:	4a2d      	ldr	r2, [pc, #180]	; (8018124 <xPortStartScheduler+0x134>)
 801806e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018070:	78fb      	ldrb	r3, [r7, #3]
 8018072:	b2db      	uxtb	r3, r3
 8018074:	005b      	lsls	r3, r3, #1
 8018076:	b2db      	uxtb	r3, r3
 8018078:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801807a:	78fb      	ldrb	r3, [r7, #3]
 801807c:	b2db      	uxtb	r3, r3
 801807e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018082:	2b80      	cmp	r3, #128	; 0x80
 8018084:	d0ef      	beq.n	8018066 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018086:	4b27      	ldr	r3, [pc, #156]	; (8018124 <xPortStartScheduler+0x134>)
 8018088:	681b      	ldr	r3, [r3, #0]
 801808a:	f1c3 0307 	rsb	r3, r3, #7
 801808e:	2b04      	cmp	r3, #4
 8018090:	d00a      	beq.n	80180a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8018092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018096:	f383 8811 	msr	BASEPRI, r3
 801809a:	f3bf 8f6f 	isb	sy
 801809e:	f3bf 8f4f 	dsb	sy
 80180a2:	60bb      	str	r3, [r7, #8]
}
 80180a4:	bf00      	nop
 80180a6:	e7fe      	b.n	80180a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80180a8:	4b1e      	ldr	r3, [pc, #120]	; (8018124 <xPortStartScheduler+0x134>)
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	021b      	lsls	r3, r3, #8
 80180ae:	4a1d      	ldr	r2, [pc, #116]	; (8018124 <xPortStartScheduler+0x134>)
 80180b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80180b2:	4b1c      	ldr	r3, [pc, #112]	; (8018124 <xPortStartScheduler+0x134>)
 80180b4:	681b      	ldr	r3, [r3, #0]
 80180b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80180ba:	4a1a      	ldr	r2, [pc, #104]	; (8018124 <xPortStartScheduler+0x134>)
 80180bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	b2da      	uxtb	r2, r3
 80180c2:	697b      	ldr	r3, [r7, #20]
 80180c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80180c6:	4b18      	ldr	r3, [pc, #96]	; (8018128 <xPortStartScheduler+0x138>)
 80180c8:	681b      	ldr	r3, [r3, #0]
 80180ca:	4a17      	ldr	r2, [pc, #92]	; (8018128 <xPortStartScheduler+0x138>)
 80180cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80180d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80180d2:	4b15      	ldr	r3, [pc, #84]	; (8018128 <xPortStartScheduler+0x138>)
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	4a14      	ldr	r2, [pc, #80]	; (8018128 <xPortStartScheduler+0x138>)
 80180d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80180dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80180de:	f000 f8dd 	bl	801829c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80180e2:	4b12      	ldr	r3, [pc, #72]	; (801812c <xPortStartScheduler+0x13c>)
 80180e4:	2200      	movs	r2, #0
 80180e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80180e8:	f000 f8fc 	bl	80182e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80180ec:	4b10      	ldr	r3, [pc, #64]	; (8018130 <xPortStartScheduler+0x140>)
 80180ee:	681b      	ldr	r3, [r3, #0]
 80180f0:	4a0f      	ldr	r2, [pc, #60]	; (8018130 <xPortStartScheduler+0x140>)
 80180f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80180f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80180f8:	f7ff ff66 	bl	8017fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80180fc:	f7fe fe90 	bl	8016e20 <vTaskSwitchContext>
	prvTaskExitError();
 8018100:	f7ff ff22 	bl	8017f48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8018104:	2300      	movs	r3, #0
}
 8018106:	4618      	mov	r0, r3
 8018108:	3718      	adds	r7, #24
 801810a:	46bd      	mov	sp, r7
 801810c:	bd80      	pop	{r7, pc}
 801810e:	bf00      	nop
 8018110:	e000ed00 	.word	0xe000ed00
 8018114:	410fc271 	.word	0x410fc271
 8018118:	410fc270 	.word	0x410fc270
 801811c:	e000e400 	.word	0xe000e400
 8018120:	2400136c 	.word	0x2400136c
 8018124:	24001370 	.word	0x24001370
 8018128:	e000ed20 	.word	0xe000ed20
 801812c:	240000b8 	.word	0x240000b8
 8018130:	e000ef34 	.word	0xe000ef34

08018134 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8018134:	b480      	push	{r7}
 8018136:	b083      	sub	sp, #12
 8018138:	af00      	add	r7, sp, #0
	__asm volatile
 801813a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801813e:	f383 8811 	msr	BASEPRI, r3
 8018142:	f3bf 8f6f 	isb	sy
 8018146:	f3bf 8f4f 	dsb	sy
 801814a:	607b      	str	r3, [r7, #4]
}
 801814c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801814e:	4b0f      	ldr	r3, [pc, #60]	; (801818c <vPortEnterCritical+0x58>)
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	3301      	adds	r3, #1
 8018154:	4a0d      	ldr	r2, [pc, #52]	; (801818c <vPortEnterCritical+0x58>)
 8018156:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8018158:	4b0c      	ldr	r3, [pc, #48]	; (801818c <vPortEnterCritical+0x58>)
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	2b01      	cmp	r3, #1
 801815e:	d10f      	bne.n	8018180 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018160:	4b0b      	ldr	r3, [pc, #44]	; (8018190 <vPortEnterCritical+0x5c>)
 8018162:	681b      	ldr	r3, [r3, #0]
 8018164:	b2db      	uxtb	r3, r3
 8018166:	2b00      	cmp	r3, #0
 8018168:	d00a      	beq.n	8018180 <vPortEnterCritical+0x4c>
	__asm volatile
 801816a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801816e:	f383 8811 	msr	BASEPRI, r3
 8018172:	f3bf 8f6f 	isb	sy
 8018176:	f3bf 8f4f 	dsb	sy
 801817a:	603b      	str	r3, [r7, #0]
}
 801817c:	bf00      	nop
 801817e:	e7fe      	b.n	801817e <vPortEnterCritical+0x4a>
	}
}
 8018180:	bf00      	nop
 8018182:	370c      	adds	r7, #12
 8018184:	46bd      	mov	sp, r7
 8018186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801818a:	4770      	bx	lr
 801818c:	240000b8 	.word	0x240000b8
 8018190:	e000ed04 	.word	0xe000ed04

08018194 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018194:	b480      	push	{r7}
 8018196:	b083      	sub	sp, #12
 8018198:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801819a:	4b12      	ldr	r3, [pc, #72]	; (80181e4 <vPortExitCritical+0x50>)
 801819c:	681b      	ldr	r3, [r3, #0]
 801819e:	2b00      	cmp	r3, #0
 80181a0:	d10a      	bne.n	80181b8 <vPortExitCritical+0x24>
	__asm volatile
 80181a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181a6:	f383 8811 	msr	BASEPRI, r3
 80181aa:	f3bf 8f6f 	isb	sy
 80181ae:	f3bf 8f4f 	dsb	sy
 80181b2:	607b      	str	r3, [r7, #4]
}
 80181b4:	bf00      	nop
 80181b6:	e7fe      	b.n	80181b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80181b8:	4b0a      	ldr	r3, [pc, #40]	; (80181e4 <vPortExitCritical+0x50>)
 80181ba:	681b      	ldr	r3, [r3, #0]
 80181bc:	3b01      	subs	r3, #1
 80181be:	4a09      	ldr	r2, [pc, #36]	; (80181e4 <vPortExitCritical+0x50>)
 80181c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80181c2:	4b08      	ldr	r3, [pc, #32]	; (80181e4 <vPortExitCritical+0x50>)
 80181c4:	681b      	ldr	r3, [r3, #0]
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d105      	bne.n	80181d6 <vPortExitCritical+0x42>
 80181ca:	2300      	movs	r3, #0
 80181cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80181ce:	683b      	ldr	r3, [r7, #0]
 80181d0:	f383 8811 	msr	BASEPRI, r3
}
 80181d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80181d6:	bf00      	nop
 80181d8:	370c      	adds	r7, #12
 80181da:	46bd      	mov	sp, r7
 80181dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181e0:	4770      	bx	lr
 80181e2:	bf00      	nop
 80181e4:	240000b8 	.word	0x240000b8
	...

080181f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80181f0:	f3ef 8009 	mrs	r0, PSP
 80181f4:	f3bf 8f6f 	isb	sy
 80181f8:	4b15      	ldr	r3, [pc, #84]	; (8018250 <pxCurrentTCBConst>)
 80181fa:	681a      	ldr	r2, [r3, #0]
 80181fc:	f01e 0f10 	tst.w	lr, #16
 8018200:	bf08      	it	eq
 8018202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801820a:	6010      	str	r0, [r2, #0]
 801820c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018210:	f04f 0050 	mov.w	r0, #80	; 0x50
 8018214:	f380 8811 	msr	BASEPRI, r0
 8018218:	f3bf 8f4f 	dsb	sy
 801821c:	f3bf 8f6f 	isb	sy
 8018220:	f7fe fdfe 	bl	8016e20 <vTaskSwitchContext>
 8018224:	f04f 0000 	mov.w	r0, #0
 8018228:	f380 8811 	msr	BASEPRI, r0
 801822c:	bc09      	pop	{r0, r3}
 801822e:	6819      	ldr	r1, [r3, #0]
 8018230:	6808      	ldr	r0, [r1, #0]
 8018232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018236:	f01e 0f10 	tst.w	lr, #16
 801823a:	bf08      	it	eq
 801823c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018240:	f380 8809 	msr	PSP, r0
 8018244:	f3bf 8f6f 	isb	sy
 8018248:	4770      	bx	lr
 801824a:	bf00      	nop
 801824c:	f3af 8000 	nop.w

08018250 <pxCurrentTCBConst>:
 8018250:	240010cc 	.word	0x240010cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8018254:	bf00      	nop
 8018256:	bf00      	nop

08018258 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018258:	b580      	push	{r7, lr}
 801825a:	b082      	sub	sp, #8
 801825c:	af00      	add	r7, sp, #0
	__asm volatile
 801825e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018262:	f383 8811 	msr	BASEPRI, r3
 8018266:	f3bf 8f6f 	isb	sy
 801826a:	f3bf 8f4f 	dsb	sy
 801826e:	607b      	str	r3, [r7, #4]
}
 8018270:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018272:	f7fe fd1d 	bl	8016cb0 <xTaskIncrementTick>
 8018276:	4603      	mov	r3, r0
 8018278:	2b00      	cmp	r3, #0
 801827a:	d003      	beq.n	8018284 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801827c:	4b06      	ldr	r3, [pc, #24]	; (8018298 <SysTick_Handler+0x40>)
 801827e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018282:	601a      	str	r2, [r3, #0]
 8018284:	2300      	movs	r3, #0
 8018286:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018288:	683b      	ldr	r3, [r7, #0]
 801828a:	f383 8811 	msr	BASEPRI, r3
}
 801828e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018290:	bf00      	nop
 8018292:	3708      	adds	r7, #8
 8018294:	46bd      	mov	sp, r7
 8018296:	bd80      	pop	{r7, pc}
 8018298:	e000ed04 	.word	0xe000ed04

0801829c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801829c:	b480      	push	{r7}
 801829e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80182a0:	4b0b      	ldr	r3, [pc, #44]	; (80182d0 <vPortSetupTimerInterrupt+0x34>)
 80182a2:	2200      	movs	r2, #0
 80182a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80182a6:	4b0b      	ldr	r3, [pc, #44]	; (80182d4 <vPortSetupTimerInterrupt+0x38>)
 80182a8:	2200      	movs	r2, #0
 80182aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80182ac:	4b0a      	ldr	r3, [pc, #40]	; (80182d8 <vPortSetupTimerInterrupt+0x3c>)
 80182ae:	681b      	ldr	r3, [r3, #0]
 80182b0:	4a0a      	ldr	r2, [pc, #40]	; (80182dc <vPortSetupTimerInterrupt+0x40>)
 80182b2:	fba2 2303 	umull	r2, r3, r2, r3
 80182b6:	099b      	lsrs	r3, r3, #6
 80182b8:	4a09      	ldr	r2, [pc, #36]	; (80182e0 <vPortSetupTimerInterrupt+0x44>)
 80182ba:	3b01      	subs	r3, #1
 80182bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80182be:	4b04      	ldr	r3, [pc, #16]	; (80182d0 <vPortSetupTimerInterrupt+0x34>)
 80182c0:	2207      	movs	r2, #7
 80182c2:	601a      	str	r2, [r3, #0]
}
 80182c4:	bf00      	nop
 80182c6:	46bd      	mov	sp, r7
 80182c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182cc:	4770      	bx	lr
 80182ce:	bf00      	nop
 80182d0:	e000e010 	.word	0xe000e010
 80182d4:	e000e018 	.word	0xe000e018
 80182d8:	24000000 	.word	0x24000000
 80182dc:	10624dd3 	.word	0x10624dd3
 80182e0:	e000e014 	.word	0xe000e014

080182e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80182e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80182f4 <vPortEnableVFP+0x10>
 80182e8:	6801      	ldr	r1, [r0, #0]
 80182ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80182ee:	6001      	str	r1, [r0, #0]
 80182f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80182f2:	bf00      	nop
 80182f4:	e000ed88 	.word	0xe000ed88

080182f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80182f8:	b480      	push	{r7}
 80182fa:	b085      	sub	sp, #20
 80182fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80182fe:	f3ef 8305 	mrs	r3, IPSR
 8018302:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018304:	68fb      	ldr	r3, [r7, #12]
 8018306:	2b0f      	cmp	r3, #15
 8018308:	d914      	bls.n	8018334 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801830a:	4a17      	ldr	r2, [pc, #92]	; (8018368 <vPortValidateInterruptPriority+0x70>)
 801830c:	68fb      	ldr	r3, [r7, #12]
 801830e:	4413      	add	r3, r2
 8018310:	781b      	ldrb	r3, [r3, #0]
 8018312:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018314:	4b15      	ldr	r3, [pc, #84]	; (801836c <vPortValidateInterruptPriority+0x74>)
 8018316:	781b      	ldrb	r3, [r3, #0]
 8018318:	7afa      	ldrb	r2, [r7, #11]
 801831a:	429a      	cmp	r2, r3
 801831c:	d20a      	bcs.n	8018334 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801831e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018322:	f383 8811 	msr	BASEPRI, r3
 8018326:	f3bf 8f6f 	isb	sy
 801832a:	f3bf 8f4f 	dsb	sy
 801832e:	607b      	str	r3, [r7, #4]
}
 8018330:	bf00      	nop
 8018332:	e7fe      	b.n	8018332 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8018334:	4b0e      	ldr	r3, [pc, #56]	; (8018370 <vPortValidateInterruptPriority+0x78>)
 8018336:	681b      	ldr	r3, [r3, #0]
 8018338:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801833c:	4b0d      	ldr	r3, [pc, #52]	; (8018374 <vPortValidateInterruptPriority+0x7c>)
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	429a      	cmp	r2, r3
 8018342:	d90a      	bls.n	801835a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8018344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018348:	f383 8811 	msr	BASEPRI, r3
 801834c:	f3bf 8f6f 	isb	sy
 8018350:	f3bf 8f4f 	dsb	sy
 8018354:	603b      	str	r3, [r7, #0]
}
 8018356:	bf00      	nop
 8018358:	e7fe      	b.n	8018358 <vPortValidateInterruptPriority+0x60>
	}
 801835a:	bf00      	nop
 801835c:	3714      	adds	r7, #20
 801835e:	46bd      	mov	sp, r7
 8018360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018364:	4770      	bx	lr
 8018366:	bf00      	nop
 8018368:	e000e3f0 	.word	0xe000e3f0
 801836c:	2400136c 	.word	0x2400136c
 8018370:	e000ed0c 	.word	0xe000ed0c
 8018374:	24001370 	.word	0x24001370

08018378 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018378:	b580      	push	{r7, lr}
 801837a:	b08a      	sub	sp, #40	; 0x28
 801837c:	af00      	add	r7, sp, #0
 801837e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018380:	2300      	movs	r3, #0
 8018382:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018384:	f7fe fbda 	bl	8016b3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018388:	4b5b      	ldr	r3, [pc, #364]	; (80184f8 <pvPortMalloc+0x180>)
 801838a:	681b      	ldr	r3, [r3, #0]
 801838c:	2b00      	cmp	r3, #0
 801838e:	d101      	bne.n	8018394 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018390:	f000 f920 	bl	80185d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018394:	4b59      	ldr	r3, [pc, #356]	; (80184fc <pvPortMalloc+0x184>)
 8018396:	681a      	ldr	r2, [r3, #0]
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	4013      	ands	r3, r2
 801839c:	2b00      	cmp	r3, #0
 801839e:	f040 8093 	bne.w	80184c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d01d      	beq.n	80183e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80183a8:	2208      	movs	r2, #8
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	4413      	add	r3, r2
 80183ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	f003 0307 	and.w	r3, r3, #7
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d014      	beq.n	80183e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	f023 0307 	bic.w	r3, r3, #7
 80183c0:	3308      	adds	r3, #8
 80183c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	f003 0307 	and.w	r3, r3, #7
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d00a      	beq.n	80183e4 <pvPortMalloc+0x6c>
	__asm volatile
 80183ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183d2:	f383 8811 	msr	BASEPRI, r3
 80183d6:	f3bf 8f6f 	isb	sy
 80183da:	f3bf 8f4f 	dsb	sy
 80183de:	617b      	str	r3, [r7, #20]
}
 80183e0:	bf00      	nop
 80183e2:	e7fe      	b.n	80183e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d06e      	beq.n	80184c8 <pvPortMalloc+0x150>
 80183ea:	4b45      	ldr	r3, [pc, #276]	; (8018500 <pvPortMalloc+0x188>)
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	687a      	ldr	r2, [r7, #4]
 80183f0:	429a      	cmp	r2, r3
 80183f2:	d869      	bhi.n	80184c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80183f4:	4b43      	ldr	r3, [pc, #268]	; (8018504 <pvPortMalloc+0x18c>)
 80183f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80183f8:	4b42      	ldr	r3, [pc, #264]	; (8018504 <pvPortMalloc+0x18c>)
 80183fa:	681b      	ldr	r3, [r3, #0]
 80183fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80183fe:	e004      	b.n	801840a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8018400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018402:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8018404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801840a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801840c:	685b      	ldr	r3, [r3, #4]
 801840e:	687a      	ldr	r2, [r7, #4]
 8018410:	429a      	cmp	r2, r3
 8018412:	d903      	bls.n	801841c <pvPortMalloc+0xa4>
 8018414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	2b00      	cmp	r3, #0
 801841a:	d1f1      	bne.n	8018400 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801841c:	4b36      	ldr	r3, [pc, #216]	; (80184f8 <pvPortMalloc+0x180>)
 801841e:	681b      	ldr	r3, [r3, #0]
 8018420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018422:	429a      	cmp	r2, r3
 8018424:	d050      	beq.n	80184c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8018426:	6a3b      	ldr	r3, [r7, #32]
 8018428:	681b      	ldr	r3, [r3, #0]
 801842a:	2208      	movs	r2, #8
 801842c:	4413      	add	r3, r2
 801842e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018432:	681a      	ldr	r2, [r3, #0]
 8018434:	6a3b      	ldr	r3, [r7, #32]
 8018436:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8018438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801843a:	685a      	ldr	r2, [r3, #4]
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	1ad2      	subs	r2, r2, r3
 8018440:	2308      	movs	r3, #8
 8018442:	005b      	lsls	r3, r3, #1
 8018444:	429a      	cmp	r2, r3
 8018446:	d91f      	bls.n	8018488 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8018448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	4413      	add	r3, r2
 801844e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018450:	69bb      	ldr	r3, [r7, #24]
 8018452:	f003 0307 	and.w	r3, r3, #7
 8018456:	2b00      	cmp	r3, #0
 8018458:	d00a      	beq.n	8018470 <pvPortMalloc+0xf8>
	__asm volatile
 801845a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801845e:	f383 8811 	msr	BASEPRI, r3
 8018462:	f3bf 8f6f 	isb	sy
 8018466:	f3bf 8f4f 	dsb	sy
 801846a:	613b      	str	r3, [r7, #16]
}
 801846c:	bf00      	nop
 801846e:	e7fe      	b.n	801846e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018472:	685a      	ldr	r2, [r3, #4]
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	1ad2      	subs	r2, r2, r3
 8018478:	69bb      	ldr	r3, [r7, #24]
 801847a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801847c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801847e:	687a      	ldr	r2, [r7, #4]
 8018480:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018482:	69b8      	ldr	r0, [r7, #24]
 8018484:	f000 f908 	bl	8018698 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018488:	4b1d      	ldr	r3, [pc, #116]	; (8018500 <pvPortMalloc+0x188>)
 801848a:	681a      	ldr	r2, [r3, #0]
 801848c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801848e:	685b      	ldr	r3, [r3, #4]
 8018490:	1ad3      	subs	r3, r2, r3
 8018492:	4a1b      	ldr	r2, [pc, #108]	; (8018500 <pvPortMalloc+0x188>)
 8018494:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018496:	4b1a      	ldr	r3, [pc, #104]	; (8018500 <pvPortMalloc+0x188>)
 8018498:	681a      	ldr	r2, [r3, #0]
 801849a:	4b1b      	ldr	r3, [pc, #108]	; (8018508 <pvPortMalloc+0x190>)
 801849c:	681b      	ldr	r3, [r3, #0]
 801849e:	429a      	cmp	r2, r3
 80184a0:	d203      	bcs.n	80184aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80184a2:	4b17      	ldr	r3, [pc, #92]	; (8018500 <pvPortMalloc+0x188>)
 80184a4:	681b      	ldr	r3, [r3, #0]
 80184a6:	4a18      	ldr	r2, [pc, #96]	; (8018508 <pvPortMalloc+0x190>)
 80184a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80184aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184ac:	685a      	ldr	r2, [r3, #4]
 80184ae:	4b13      	ldr	r3, [pc, #76]	; (80184fc <pvPortMalloc+0x184>)
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	431a      	orrs	r2, r3
 80184b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80184b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184ba:	2200      	movs	r2, #0
 80184bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80184be:	4b13      	ldr	r3, [pc, #76]	; (801850c <pvPortMalloc+0x194>)
 80184c0:	681b      	ldr	r3, [r3, #0]
 80184c2:	3301      	adds	r3, #1
 80184c4:	4a11      	ldr	r2, [pc, #68]	; (801850c <pvPortMalloc+0x194>)
 80184c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80184c8:	f7fe fb46 	bl	8016b58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80184cc:	69fb      	ldr	r3, [r7, #28]
 80184ce:	f003 0307 	and.w	r3, r3, #7
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	d00a      	beq.n	80184ec <pvPortMalloc+0x174>
	__asm volatile
 80184d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184da:	f383 8811 	msr	BASEPRI, r3
 80184de:	f3bf 8f6f 	isb	sy
 80184e2:	f3bf 8f4f 	dsb	sy
 80184e6:	60fb      	str	r3, [r7, #12]
}
 80184e8:	bf00      	nop
 80184ea:	e7fe      	b.n	80184ea <pvPortMalloc+0x172>
	return pvReturn;
 80184ec:	69fb      	ldr	r3, [r7, #28]
}
 80184ee:	4618      	mov	r0, r3
 80184f0:	3728      	adds	r7, #40	; 0x28
 80184f2:	46bd      	mov	sp, r7
 80184f4:	bd80      	pop	{r7, pc}
 80184f6:	bf00      	nop
 80184f8:	24013f7c 	.word	0x24013f7c
 80184fc:	24013f90 	.word	0x24013f90
 8018500:	24013f80 	.word	0x24013f80
 8018504:	24013f74 	.word	0x24013f74
 8018508:	24013f84 	.word	0x24013f84
 801850c:	24013f88 	.word	0x24013f88

08018510 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8018510:	b580      	push	{r7, lr}
 8018512:	b086      	sub	sp, #24
 8018514:	af00      	add	r7, sp, #0
 8018516:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	2b00      	cmp	r3, #0
 8018520:	d04d      	beq.n	80185be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8018522:	2308      	movs	r3, #8
 8018524:	425b      	negs	r3, r3
 8018526:	697a      	ldr	r2, [r7, #20]
 8018528:	4413      	add	r3, r2
 801852a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801852c:	697b      	ldr	r3, [r7, #20]
 801852e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8018530:	693b      	ldr	r3, [r7, #16]
 8018532:	685a      	ldr	r2, [r3, #4]
 8018534:	4b24      	ldr	r3, [pc, #144]	; (80185c8 <vPortFree+0xb8>)
 8018536:	681b      	ldr	r3, [r3, #0]
 8018538:	4013      	ands	r3, r2
 801853a:	2b00      	cmp	r3, #0
 801853c:	d10a      	bne.n	8018554 <vPortFree+0x44>
	__asm volatile
 801853e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018542:	f383 8811 	msr	BASEPRI, r3
 8018546:	f3bf 8f6f 	isb	sy
 801854a:	f3bf 8f4f 	dsb	sy
 801854e:	60fb      	str	r3, [r7, #12]
}
 8018550:	bf00      	nop
 8018552:	e7fe      	b.n	8018552 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8018554:	693b      	ldr	r3, [r7, #16]
 8018556:	681b      	ldr	r3, [r3, #0]
 8018558:	2b00      	cmp	r3, #0
 801855a:	d00a      	beq.n	8018572 <vPortFree+0x62>
	__asm volatile
 801855c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018560:	f383 8811 	msr	BASEPRI, r3
 8018564:	f3bf 8f6f 	isb	sy
 8018568:	f3bf 8f4f 	dsb	sy
 801856c:	60bb      	str	r3, [r7, #8]
}
 801856e:	bf00      	nop
 8018570:	e7fe      	b.n	8018570 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8018572:	693b      	ldr	r3, [r7, #16]
 8018574:	685a      	ldr	r2, [r3, #4]
 8018576:	4b14      	ldr	r3, [pc, #80]	; (80185c8 <vPortFree+0xb8>)
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	4013      	ands	r3, r2
 801857c:	2b00      	cmp	r3, #0
 801857e:	d01e      	beq.n	80185be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8018580:	693b      	ldr	r3, [r7, #16]
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	2b00      	cmp	r3, #0
 8018586:	d11a      	bne.n	80185be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018588:	693b      	ldr	r3, [r7, #16]
 801858a:	685a      	ldr	r2, [r3, #4]
 801858c:	4b0e      	ldr	r3, [pc, #56]	; (80185c8 <vPortFree+0xb8>)
 801858e:	681b      	ldr	r3, [r3, #0]
 8018590:	43db      	mvns	r3, r3
 8018592:	401a      	ands	r2, r3
 8018594:	693b      	ldr	r3, [r7, #16]
 8018596:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018598:	f7fe fad0 	bl	8016b3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801859c:	693b      	ldr	r3, [r7, #16]
 801859e:	685a      	ldr	r2, [r3, #4]
 80185a0:	4b0a      	ldr	r3, [pc, #40]	; (80185cc <vPortFree+0xbc>)
 80185a2:	681b      	ldr	r3, [r3, #0]
 80185a4:	4413      	add	r3, r2
 80185a6:	4a09      	ldr	r2, [pc, #36]	; (80185cc <vPortFree+0xbc>)
 80185a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80185aa:	6938      	ldr	r0, [r7, #16]
 80185ac:	f000 f874 	bl	8018698 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80185b0:	4b07      	ldr	r3, [pc, #28]	; (80185d0 <vPortFree+0xc0>)
 80185b2:	681b      	ldr	r3, [r3, #0]
 80185b4:	3301      	adds	r3, #1
 80185b6:	4a06      	ldr	r2, [pc, #24]	; (80185d0 <vPortFree+0xc0>)
 80185b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80185ba:	f7fe facd 	bl	8016b58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80185be:	bf00      	nop
 80185c0:	3718      	adds	r7, #24
 80185c2:	46bd      	mov	sp, r7
 80185c4:	bd80      	pop	{r7, pc}
 80185c6:	bf00      	nop
 80185c8:	24013f90 	.word	0x24013f90
 80185cc:	24013f80 	.word	0x24013f80
 80185d0:	24013f8c 	.word	0x24013f8c

080185d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80185d4:	b480      	push	{r7}
 80185d6:	b085      	sub	sp, #20
 80185d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80185da:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80185de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80185e0:	4b27      	ldr	r3, [pc, #156]	; (8018680 <prvHeapInit+0xac>)
 80185e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80185e4:	68fb      	ldr	r3, [r7, #12]
 80185e6:	f003 0307 	and.w	r3, r3, #7
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	d00c      	beq.n	8018608 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80185ee:	68fb      	ldr	r3, [r7, #12]
 80185f0:	3307      	adds	r3, #7
 80185f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80185f4:	68fb      	ldr	r3, [r7, #12]
 80185f6:	f023 0307 	bic.w	r3, r3, #7
 80185fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80185fc:	68ba      	ldr	r2, [r7, #8]
 80185fe:	68fb      	ldr	r3, [r7, #12]
 8018600:	1ad3      	subs	r3, r2, r3
 8018602:	4a1f      	ldr	r2, [pc, #124]	; (8018680 <prvHeapInit+0xac>)
 8018604:	4413      	add	r3, r2
 8018606:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8018608:	68fb      	ldr	r3, [r7, #12]
 801860a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801860c:	4a1d      	ldr	r2, [pc, #116]	; (8018684 <prvHeapInit+0xb0>)
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8018612:	4b1c      	ldr	r3, [pc, #112]	; (8018684 <prvHeapInit+0xb0>)
 8018614:	2200      	movs	r2, #0
 8018616:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	68ba      	ldr	r2, [r7, #8]
 801861c:	4413      	add	r3, r2
 801861e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8018620:	2208      	movs	r2, #8
 8018622:	68fb      	ldr	r3, [r7, #12]
 8018624:	1a9b      	subs	r3, r3, r2
 8018626:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018628:	68fb      	ldr	r3, [r7, #12]
 801862a:	f023 0307 	bic.w	r3, r3, #7
 801862e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8018630:	68fb      	ldr	r3, [r7, #12]
 8018632:	4a15      	ldr	r2, [pc, #84]	; (8018688 <prvHeapInit+0xb4>)
 8018634:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8018636:	4b14      	ldr	r3, [pc, #80]	; (8018688 <prvHeapInit+0xb4>)
 8018638:	681b      	ldr	r3, [r3, #0]
 801863a:	2200      	movs	r2, #0
 801863c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801863e:	4b12      	ldr	r3, [pc, #72]	; (8018688 <prvHeapInit+0xb4>)
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	2200      	movs	r2, #0
 8018644:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801864a:	683b      	ldr	r3, [r7, #0]
 801864c:	68fa      	ldr	r2, [r7, #12]
 801864e:	1ad2      	subs	r2, r2, r3
 8018650:	683b      	ldr	r3, [r7, #0]
 8018652:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8018654:	4b0c      	ldr	r3, [pc, #48]	; (8018688 <prvHeapInit+0xb4>)
 8018656:	681a      	ldr	r2, [r3, #0]
 8018658:	683b      	ldr	r3, [r7, #0]
 801865a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801865c:	683b      	ldr	r3, [r7, #0]
 801865e:	685b      	ldr	r3, [r3, #4]
 8018660:	4a0a      	ldr	r2, [pc, #40]	; (801868c <prvHeapInit+0xb8>)
 8018662:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018664:	683b      	ldr	r3, [r7, #0]
 8018666:	685b      	ldr	r3, [r3, #4]
 8018668:	4a09      	ldr	r2, [pc, #36]	; (8018690 <prvHeapInit+0xbc>)
 801866a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801866c:	4b09      	ldr	r3, [pc, #36]	; (8018694 <prvHeapInit+0xc0>)
 801866e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8018672:	601a      	str	r2, [r3, #0]
}
 8018674:	bf00      	nop
 8018676:	3714      	adds	r7, #20
 8018678:	46bd      	mov	sp, r7
 801867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801867e:	4770      	bx	lr
 8018680:	24001374 	.word	0x24001374
 8018684:	24013f74 	.word	0x24013f74
 8018688:	24013f7c 	.word	0x24013f7c
 801868c:	24013f84 	.word	0x24013f84
 8018690:	24013f80 	.word	0x24013f80
 8018694:	24013f90 	.word	0x24013f90

08018698 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8018698:	b480      	push	{r7}
 801869a:	b085      	sub	sp, #20
 801869c:	af00      	add	r7, sp, #0
 801869e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80186a0:	4b28      	ldr	r3, [pc, #160]	; (8018744 <prvInsertBlockIntoFreeList+0xac>)
 80186a2:	60fb      	str	r3, [r7, #12]
 80186a4:	e002      	b.n	80186ac <prvInsertBlockIntoFreeList+0x14>
 80186a6:	68fb      	ldr	r3, [r7, #12]
 80186a8:	681b      	ldr	r3, [r3, #0]
 80186aa:	60fb      	str	r3, [r7, #12]
 80186ac:	68fb      	ldr	r3, [r7, #12]
 80186ae:	681b      	ldr	r3, [r3, #0]
 80186b0:	687a      	ldr	r2, [r7, #4]
 80186b2:	429a      	cmp	r2, r3
 80186b4:	d8f7      	bhi.n	80186a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80186b6:	68fb      	ldr	r3, [r7, #12]
 80186b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80186ba:	68fb      	ldr	r3, [r7, #12]
 80186bc:	685b      	ldr	r3, [r3, #4]
 80186be:	68ba      	ldr	r2, [r7, #8]
 80186c0:	4413      	add	r3, r2
 80186c2:	687a      	ldr	r2, [r7, #4]
 80186c4:	429a      	cmp	r2, r3
 80186c6:	d108      	bne.n	80186da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	685a      	ldr	r2, [r3, #4]
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	685b      	ldr	r3, [r3, #4]
 80186d0:	441a      	add	r2, r3
 80186d2:	68fb      	ldr	r3, [r7, #12]
 80186d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80186d6:	68fb      	ldr	r3, [r7, #12]
 80186d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	685b      	ldr	r3, [r3, #4]
 80186e2:	68ba      	ldr	r2, [r7, #8]
 80186e4:	441a      	add	r2, r3
 80186e6:	68fb      	ldr	r3, [r7, #12]
 80186e8:	681b      	ldr	r3, [r3, #0]
 80186ea:	429a      	cmp	r2, r3
 80186ec:	d118      	bne.n	8018720 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80186ee:	68fb      	ldr	r3, [r7, #12]
 80186f0:	681a      	ldr	r2, [r3, #0]
 80186f2:	4b15      	ldr	r3, [pc, #84]	; (8018748 <prvInsertBlockIntoFreeList+0xb0>)
 80186f4:	681b      	ldr	r3, [r3, #0]
 80186f6:	429a      	cmp	r2, r3
 80186f8:	d00d      	beq.n	8018716 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	685a      	ldr	r2, [r3, #4]
 80186fe:	68fb      	ldr	r3, [r7, #12]
 8018700:	681b      	ldr	r3, [r3, #0]
 8018702:	685b      	ldr	r3, [r3, #4]
 8018704:	441a      	add	r2, r3
 8018706:	687b      	ldr	r3, [r7, #4]
 8018708:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801870a:	68fb      	ldr	r3, [r7, #12]
 801870c:	681b      	ldr	r3, [r3, #0]
 801870e:	681a      	ldr	r2, [r3, #0]
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	601a      	str	r2, [r3, #0]
 8018714:	e008      	b.n	8018728 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8018716:	4b0c      	ldr	r3, [pc, #48]	; (8018748 <prvInsertBlockIntoFreeList+0xb0>)
 8018718:	681a      	ldr	r2, [r3, #0]
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	601a      	str	r2, [r3, #0]
 801871e:	e003      	b.n	8018728 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8018720:	68fb      	ldr	r3, [r7, #12]
 8018722:	681a      	ldr	r2, [r3, #0]
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8018728:	68fa      	ldr	r2, [r7, #12]
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	429a      	cmp	r2, r3
 801872e:	d002      	beq.n	8018736 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8018730:	68fb      	ldr	r3, [r7, #12]
 8018732:	687a      	ldr	r2, [r7, #4]
 8018734:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018736:	bf00      	nop
 8018738:	3714      	adds	r7, #20
 801873a:	46bd      	mov	sp, r7
 801873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018740:	4770      	bx	lr
 8018742:	bf00      	nop
 8018744:	24013f74 	.word	0x24013f74
 8018748:	24013f7c 	.word	0x24013f7c

0801874c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801874c:	b580      	push	{r7, lr}
 801874e:	b084      	sub	sp, #16
 8018750:	af00      	add	r7, sp, #0
 8018752:	6078      	str	r0, [r7, #4]
 8018754:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8018756:	4819      	ldr	r0, [pc, #100]	; (80187bc <tcpip_try_callback+0x70>)
 8018758:	f005 f8a0 	bl	801d89c <sys_mbox_valid>
 801875c:	4603      	mov	r3, r0
 801875e:	2b00      	cmp	r3, #0
 8018760:	d106      	bne.n	8018770 <tcpip_try_callback+0x24>
 8018762:	4b17      	ldr	r3, [pc, #92]	; (80187c0 <tcpip_try_callback+0x74>)
 8018764:	f240 125d 	movw	r2, #349	; 0x15d
 8018768:	4916      	ldr	r1, [pc, #88]	; (80187c4 <tcpip_try_callback+0x78>)
 801876a:	4817      	ldr	r0, [pc, #92]	; (80187c8 <tcpip_try_callback+0x7c>)
 801876c:	f009 fbe6 	bl	8021f3c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8018770:	2008      	movs	r0, #8
 8018772:	f000 fc2d 	bl	8018fd0 <memp_malloc>
 8018776:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8018778:	68fb      	ldr	r3, [r7, #12]
 801877a:	2b00      	cmp	r3, #0
 801877c:	d102      	bne.n	8018784 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801877e:	f04f 33ff 	mov.w	r3, #4294967295
 8018782:	e017      	b.n	80187b4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8018784:	68fb      	ldr	r3, [r7, #12]
 8018786:	2201      	movs	r2, #1
 8018788:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801878a:	68fb      	ldr	r3, [r7, #12]
 801878c:	687a      	ldr	r2, [r7, #4]
 801878e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8018790:	68fb      	ldr	r3, [r7, #12]
 8018792:	683a      	ldr	r2, [r7, #0]
 8018794:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8018796:	68f9      	ldr	r1, [r7, #12]
 8018798:	4808      	ldr	r0, [pc, #32]	; (80187bc <tcpip_try_callback+0x70>)
 801879a:	f005 f865 	bl	801d868 <sys_mbox_trypost>
 801879e:	4603      	mov	r3, r0
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	d006      	beq.n	80187b2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80187a4:	68f9      	ldr	r1, [r7, #12]
 80187a6:	2008      	movs	r0, #8
 80187a8:	f000 fc64 	bl	8019074 <memp_free>
    return ERR_MEM;
 80187ac:	f04f 33ff 	mov.w	r3, #4294967295
 80187b0:	e000      	b.n	80187b4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80187b2:	2300      	movs	r3, #0
}
 80187b4:	4618      	mov	r0, r3
 80187b6:	3710      	adds	r7, #16
 80187b8:	46bd      	mov	sp, r7
 80187ba:	bd80      	pop	{r7, pc}
 80187bc:	24013f94 	.word	0x24013f94
 80187c0:	08023f7c 	.word	0x08023f7c
 80187c4:	08023ff4 	.word	0x08023ff4
 80187c8:	08023fcc 	.word	0x08023fcc

080187cc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80187cc:	b480      	push	{r7}
 80187ce:	b083      	sub	sp, #12
 80187d0:	af00      	add	r7, sp, #0
 80187d2:	4603      	mov	r3, r0
 80187d4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80187d6:	88fb      	ldrh	r3, [r7, #6]
 80187d8:	021b      	lsls	r3, r3, #8
 80187da:	b21a      	sxth	r2, r3
 80187dc:	88fb      	ldrh	r3, [r7, #6]
 80187de:	0a1b      	lsrs	r3, r3, #8
 80187e0:	b29b      	uxth	r3, r3
 80187e2:	b21b      	sxth	r3, r3
 80187e4:	4313      	orrs	r3, r2
 80187e6:	b21b      	sxth	r3, r3
 80187e8:	b29b      	uxth	r3, r3
}
 80187ea:	4618      	mov	r0, r3
 80187ec:	370c      	adds	r7, #12
 80187ee:	46bd      	mov	sp, r7
 80187f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187f4:	4770      	bx	lr

080187f6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80187f6:	b480      	push	{r7}
 80187f8:	b083      	sub	sp, #12
 80187fa:	af00      	add	r7, sp, #0
 80187fc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	061a      	lsls	r2, r3, #24
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	021b      	lsls	r3, r3, #8
 8018806:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801880a:	431a      	orrs	r2, r3
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	0a1b      	lsrs	r3, r3, #8
 8018810:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018814:	431a      	orrs	r2, r3
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	0e1b      	lsrs	r3, r3, #24
 801881a:	4313      	orrs	r3, r2
}
 801881c:	4618      	mov	r0, r3
 801881e:	370c      	adds	r7, #12
 8018820:	46bd      	mov	sp, r7
 8018822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018826:	4770      	bx	lr

08018828 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8018828:	b480      	push	{r7}
 801882a:	b083      	sub	sp, #12
 801882c:	af00      	add	r7, sp, #0
 801882e:	4603      	mov	r3, r0
 8018830:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8018832:	4b05      	ldr	r3, [pc, #20]	; (8018848 <ptr_to_mem+0x20>)
 8018834:	681a      	ldr	r2, [r3, #0]
 8018836:	88fb      	ldrh	r3, [r7, #6]
 8018838:	4413      	add	r3, r2
}
 801883a:	4618      	mov	r0, r3
 801883c:	370c      	adds	r7, #12
 801883e:	46bd      	mov	sp, r7
 8018840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018844:	4770      	bx	lr
 8018846:	bf00      	nop
 8018848:	24013f98 	.word	0x24013f98

0801884c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 801884c:	b480      	push	{r7}
 801884e:	b083      	sub	sp, #12
 8018850:	af00      	add	r7, sp, #0
 8018852:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8018854:	4b05      	ldr	r3, [pc, #20]	; (801886c <mem_to_ptr+0x20>)
 8018856:	681b      	ldr	r3, [r3, #0]
 8018858:	687a      	ldr	r2, [r7, #4]
 801885a:	1ad3      	subs	r3, r2, r3
 801885c:	b29b      	uxth	r3, r3
}
 801885e:	4618      	mov	r0, r3
 8018860:	370c      	adds	r7, #12
 8018862:	46bd      	mov	sp, r7
 8018864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018868:	4770      	bx	lr
 801886a:	bf00      	nop
 801886c:	24013f98 	.word	0x24013f98

08018870 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8018870:	b590      	push	{r4, r7, lr}
 8018872:	b085      	sub	sp, #20
 8018874:	af00      	add	r7, sp, #0
 8018876:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8018878:	4b45      	ldr	r3, [pc, #276]	; (8018990 <plug_holes+0x120>)
 801887a:	681b      	ldr	r3, [r3, #0]
 801887c:	687a      	ldr	r2, [r7, #4]
 801887e:	429a      	cmp	r2, r3
 8018880:	d206      	bcs.n	8018890 <plug_holes+0x20>
 8018882:	4b44      	ldr	r3, [pc, #272]	; (8018994 <plug_holes+0x124>)
 8018884:	f240 12df 	movw	r2, #479	; 0x1df
 8018888:	4943      	ldr	r1, [pc, #268]	; (8018998 <plug_holes+0x128>)
 801888a:	4844      	ldr	r0, [pc, #272]	; (801899c <plug_holes+0x12c>)
 801888c:	f009 fb56 	bl	8021f3c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8018890:	4b43      	ldr	r3, [pc, #268]	; (80189a0 <plug_holes+0x130>)
 8018892:	681b      	ldr	r3, [r3, #0]
 8018894:	687a      	ldr	r2, [r7, #4]
 8018896:	429a      	cmp	r2, r3
 8018898:	d306      	bcc.n	80188a8 <plug_holes+0x38>
 801889a:	4b3e      	ldr	r3, [pc, #248]	; (8018994 <plug_holes+0x124>)
 801889c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80188a0:	4940      	ldr	r1, [pc, #256]	; (80189a4 <plug_holes+0x134>)
 80188a2:	483e      	ldr	r0, [pc, #248]	; (801899c <plug_holes+0x12c>)
 80188a4:	f009 fb4a 	bl	8021f3c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	791b      	ldrb	r3, [r3, #4]
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	d006      	beq.n	80188be <plug_holes+0x4e>
 80188b0:	4b38      	ldr	r3, [pc, #224]	; (8018994 <plug_holes+0x124>)
 80188b2:	f240 12e1 	movw	r2, #481	; 0x1e1
 80188b6:	493c      	ldr	r1, [pc, #240]	; (80189a8 <plug_holes+0x138>)
 80188b8:	4838      	ldr	r0, [pc, #224]	; (801899c <plug_holes+0x12c>)
 80188ba:	f009 fb3f 	bl	8021f3c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	881b      	ldrh	r3, [r3, #0]
 80188c2:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 80188c6:	d906      	bls.n	80188d6 <plug_holes+0x66>
 80188c8:	4b32      	ldr	r3, [pc, #200]	; (8018994 <plug_holes+0x124>)
 80188ca:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80188ce:	4937      	ldr	r1, [pc, #220]	; (80189ac <plug_holes+0x13c>)
 80188d0:	4832      	ldr	r0, [pc, #200]	; (801899c <plug_holes+0x12c>)
 80188d2:	f009 fb33 	bl	8021f3c <iprintf>

  nmem = ptr_to_mem(mem->next);
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	881b      	ldrh	r3, [r3, #0]
 80188da:	4618      	mov	r0, r3
 80188dc:	f7ff ffa4 	bl	8018828 <ptr_to_mem>
 80188e0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80188e2:	687a      	ldr	r2, [r7, #4]
 80188e4:	68fb      	ldr	r3, [r7, #12]
 80188e6:	429a      	cmp	r2, r3
 80188e8:	d024      	beq.n	8018934 <plug_holes+0xc4>
 80188ea:	68fb      	ldr	r3, [r7, #12]
 80188ec:	791b      	ldrb	r3, [r3, #4]
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	d120      	bne.n	8018934 <plug_holes+0xc4>
 80188f2:	4b2b      	ldr	r3, [pc, #172]	; (80189a0 <plug_holes+0x130>)
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	68fa      	ldr	r2, [r7, #12]
 80188f8:	429a      	cmp	r2, r3
 80188fa:	d01b      	beq.n	8018934 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80188fc:	4b2c      	ldr	r3, [pc, #176]	; (80189b0 <plug_holes+0x140>)
 80188fe:	681b      	ldr	r3, [r3, #0]
 8018900:	68fa      	ldr	r2, [r7, #12]
 8018902:	429a      	cmp	r2, r3
 8018904:	d102      	bne.n	801890c <plug_holes+0x9c>
      lfree = mem;
 8018906:	4a2a      	ldr	r2, [pc, #168]	; (80189b0 <plug_holes+0x140>)
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801890c:	68fb      	ldr	r3, [r7, #12]
 801890e:	881a      	ldrh	r2, [r3, #0]
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8018914:	68fb      	ldr	r3, [r7, #12]
 8018916:	881b      	ldrh	r3, [r3, #0]
 8018918:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 801891c:	d00a      	beq.n	8018934 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801891e:	68fb      	ldr	r3, [r7, #12]
 8018920:	881b      	ldrh	r3, [r3, #0]
 8018922:	4618      	mov	r0, r3
 8018924:	f7ff ff80 	bl	8018828 <ptr_to_mem>
 8018928:	4604      	mov	r4, r0
 801892a:	6878      	ldr	r0, [r7, #4]
 801892c:	f7ff ff8e 	bl	801884c <mem_to_ptr>
 8018930:	4603      	mov	r3, r0
 8018932:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	885b      	ldrh	r3, [r3, #2]
 8018938:	4618      	mov	r0, r3
 801893a:	f7ff ff75 	bl	8018828 <ptr_to_mem>
 801893e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8018940:	68ba      	ldr	r2, [r7, #8]
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	429a      	cmp	r2, r3
 8018946:	d01f      	beq.n	8018988 <plug_holes+0x118>
 8018948:	68bb      	ldr	r3, [r7, #8]
 801894a:	791b      	ldrb	r3, [r3, #4]
 801894c:	2b00      	cmp	r3, #0
 801894e:	d11b      	bne.n	8018988 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8018950:	4b17      	ldr	r3, [pc, #92]	; (80189b0 <plug_holes+0x140>)
 8018952:	681b      	ldr	r3, [r3, #0]
 8018954:	687a      	ldr	r2, [r7, #4]
 8018956:	429a      	cmp	r2, r3
 8018958:	d102      	bne.n	8018960 <plug_holes+0xf0>
      lfree = pmem;
 801895a:	4a15      	ldr	r2, [pc, #84]	; (80189b0 <plug_holes+0x140>)
 801895c:	68bb      	ldr	r3, [r7, #8]
 801895e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	881a      	ldrh	r2, [r3, #0]
 8018964:	68bb      	ldr	r3, [r7, #8]
 8018966:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	881b      	ldrh	r3, [r3, #0]
 801896c:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8018970:	d00a      	beq.n	8018988 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	881b      	ldrh	r3, [r3, #0]
 8018976:	4618      	mov	r0, r3
 8018978:	f7ff ff56 	bl	8018828 <ptr_to_mem>
 801897c:	4604      	mov	r4, r0
 801897e:	68b8      	ldr	r0, [r7, #8]
 8018980:	f7ff ff64 	bl	801884c <mem_to_ptr>
 8018984:	4603      	mov	r3, r0
 8018986:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8018988:	bf00      	nop
 801898a:	3714      	adds	r7, #20
 801898c:	46bd      	mov	sp, r7
 801898e:	bd90      	pop	{r4, r7, pc}
 8018990:	24013f98 	.word	0x24013f98
 8018994:	0802405c 	.word	0x0802405c
 8018998:	0802408c 	.word	0x0802408c
 801899c:	080240a4 	.word	0x080240a4
 80189a0:	24013f9c 	.word	0x24013f9c
 80189a4:	080240cc 	.word	0x080240cc
 80189a8:	080240e8 	.word	0x080240e8
 80189ac:	08024104 	.word	0x08024104
 80189b0:	24013fa4 	.word	0x24013fa4

080189b4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80189b4:	b580      	push	{r7, lr}
 80189b6:	b086      	sub	sp, #24
 80189b8:	af00      	add	r7, sp, #0
 80189ba:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80189bc:	6878      	ldr	r0, [r7, #4]
 80189be:	f7ff ff45 	bl	801884c <mem_to_ptr>
 80189c2:	4603      	mov	r3, r0
 80189c4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	881b      	ldrh	r3, [r3, #0]
 80189ca:	4618      	mov	r0, r3
 80189cc:	f7ff ff2c 	bl	8018828 <ptr_to_mem>
 80189d0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	885b      	ldrh	r3, [r3, #2]
 80189d6:	4618      	mov	r0, r3
 80189d8:	f7ff ff26 	bl	8018828 <ptr_to_mem>
 80189dc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	881b      	ldrh	r3, [r3, #0]
 80189e2:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 80189e6:	d818      	bhi.n	8018a1a <mem_link_valid+0x66>
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	885b      	ldrh	r3, [r3, #2]
 80189ec:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 80189f0:	d813      	bhi.n	8018a1a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80189f6:	8afa      	ldrh	r2, [r7, #22]
 80189f8:	429a      	cmp	r2, r3
 80189fa:	d004      	beq.n	8018a06 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80189fc:	68fb      	ldr	r3, [r7, #12]
 80189fe:	881b      	ldrh	r3, [r3, #0]
 8018a00:	8afa      	ldrh	r2, [r7, #22]
 8018a02:	429a      	cmp	r2, r3
 8018a04:	d109      	bne.n	8018a1a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8018a06:	4b08      	ldr	r3, [pc, #32]	; (8018a28 <mem_link_valid+0x74>)
 8018a08:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8018a0a:	693a      	ldr	r2, [r7, #16]
 8018a0c:	429a      	cmp	r2, r3
 8018a0e:	d006      	beq.n	8018a1e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8018a10:	693b      	ldr	r3, [r7, #16]
 8018a12:	885b      	ldrh	r3, [r3, #2]
 8018a14:	8afa      	ldrh	r2, [r7, #22]
 8018a16:	429a      	cmp	r2, r3
 8018a18:	d001      	beq.n	8018a1e <mem_link_valid+0x6a>
    return 0;
 8018a1a:	2300      	movs	r3, #0
 8018a1c:	e000      	b.n	8018a20 <mem_link_valid+0x6c>
  }
  return 1;
 8018a1e:	2301      	movs	r3, #1
}
 8018a20:	4618      	mov	r0, r3
 8018a22:	3718      	adds	r7, #24
 8018a24:	46bd      	mov	sp, r7
 8018a26:	bd80      	pop	{r7, pc}
 8018a28:	24013f9c 	.word	0x24013f9c

08018a2c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8018a2c:	b580      	push	{r7, lr}
 8018a2e:	b088      	sub	sp, #32
 8018a30:	af00      	add	r7, sp, #0
 8018a32:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	2b00      	cmp	r3, #0
 8018a38:	d070      	beq.n	8018b1c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	f003 0303 	and.w	r3, r3, #3
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d00d      	beq.n	8018a60 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8018a44:	4b37      	ldr	r3, [pc, #220]	; (8018b24 <mem_free+0xf8>)
 8018a46:	f240 2273 	movw	r2, #627	; 0x273
 8018a4a:	4937      	ldr	r1, [pc, #220]	; (8018b28 <mem_free+0xfc>)
 8018a4c:	4837      	ldr	r0, [pc, #220]	; (8018b2c <mem_free+0x100>)
 8018a4e:	f009 fa75 	bl	8021f3c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8018a52:	f004 ff51 	bl	801d8f8 <sys_arch_protect>
 8018a56:	60f8      	str	r0, [r7, #12]
 8018a58:	68f8      	ldr	r0, [r7, #12]
 8018a5a:	f004 ff5b 	bl	801d914 <sys_arch_unprotect>
    return;
 8018a5e:	e05e      	b.n	8018b1e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	3b08      	subs	r3, #8
 8018a64:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8018a66:	4b32      	ldr	r3, [pc, #200]	; (8018b30 <mem_free+0x104>)
 8018a68:	681b      	ldr	r3, [r3, #0]
 8018a6a:	69fa      	ldr	r2, [r7, #28]
 8018a6c:	429a      	cmp	r2, r3
 8018a6e:	d306      	bcc.n	8018a7e <mem_free+0x52>
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	f103 020c 	add.w	r2, r3, #12
 8018a76:	4b2f      	ldr	r3, [pc, #188]	; (8018b34 <mem_free+0x108>)
 8018a78:	681b      	ldr	r3, [r3, #0]
 8018a7a:	429a      	cmp	r2, r3
 8018a7c:	d90d      	bls.n	8018a9a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8018a7e:	4b29      	ldr	r3, [pc, #164]	; (8018b24 <mem_free+0xf8>)
 8018a80:	f240 227f 	movw	r2, #639	; 0x27f
 8018a84:	492c      	ldr	r1, [pc, #176]	; (8018b38 <mem_free+0x10c>)
 8018a86:	4829      	ldr	r0, [pc, #164]	; (8018b2c <mem_free+0x100>)
 8018a88:	f009 fa58 	bl	8021f3c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8018a8c:	f004 ff34 	bl	801d8f8 <sys_arch_protect>
 8018a90:	6138      	str	r0, [r7, #16]
 8018a92:	6938      	ldr	r0, [r7, #16]
 8018a94:	f004 ff3e 	bl	801d914 <sys_arch_unprotect>
    return;
 8018a98:	e041      	b.n	8018b1e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8018a9a:	4828      	ldr	r0, [pc, #160]	; (8018b3c <mem_free+0x110>)
 8018a9c:	f004 ff0f 	bl	801d8be <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8018aa0:	69fb      	ldr	r3, [r7, #28]
 8018aa2:	791b      	ldrb	r3, [r3, #4]
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	d110      	bne.n	8018aca <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8018aa8:	4b1e      	ldr	r3, [pc, #120]	; (8018b24 <mem_free+0xf8>)
 8018aaa:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8018aae:	4924      	ldr	r1, [pc, #144]	; (8018b40 <mem_free+0x114>)
 8018ab0:	481e      	ldr	r0, [pc, #120]	; (8018b2c <mem_free+0x100>)
 8018ab2:	f009 fa43 	bl	8021f3c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8018ab6:	4821      	ldr	r0, [pc, #132]	; (8018b3c <mem_free+0x110>)
 8018ab8:	f004 ff10 	bl	801d8dc <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8018abc:	f004 ff1c 	bl	801d8f8 <sys_arch_protect>
 8018ac0:	6178      	str	r0, [r7, #20]
 8018ac2:	6978      	ldr	r0, [r7, #20]
 8018ac4:	f004 ff26 	bl	801d914 <sys_arch_unprotect>
    return;
 8018ac8:	e029      	b.n	8018b1e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8018aca:	69f8      	ldr	r0, [r7, #28]
 8018acc:	f7ff ff72 	bl	80189b4 <mem_link_valid>
 8018ad0:	4603      	mov	r3, r0
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d110      	bne.n	8018af8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8018ad6:	4b13      	ldr	r3, [pc, #76]	; (8018b24 <mem_free+0xf8>)
 8018ad8:	f240 2295 	movw	r2, #661	; 0x295
 8018adc:	4919      	ldr	r1, [pc, #100]	; (8018b44 <mem_free+0x118>)
 8018ade:	4813      	ldr	r0, [pc, #76]	; (8018b2c <mem_free+0x100>)
 8018ae0:	f009 fa2c 	bl	8021f3c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8018ae4:	4815      	ldr	r0, [pc, #84]	; (8018b3c <mem_free+0x110>)
 8018ae6:	f004 fef9 	bl	801d8dc <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8018aea:	f004 ff05 	bl	801d8f8 <sys_arch_protect>
 8018aee:	61b8      	str	r0, [r7, #24]
 8018af0:	69b8      	ldr	r0, [r7, #24]
 8018af2:	f004 ff0f 	bl	801d914 <sys_arch_unprotect>
    return;
 8018af6:	e012      	b.n	8018b1e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8018af8:	69fb      	ldr	r3, [r7, #28]
 8018afa:	2200      	movs	r2, #0
 8018afc:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8018afe:	4b12      	ldr	r3, [pc, #72]	; (8018b48 <mem_free+0x11c>)
 8018b00:	681b      	ldr	r3, [r3, #0]
 8018b02:	69fa      	ldr	r2, [r7, #28]
 8018b04:	429a      	cmp	r2, r3
 8018b06:	d202      	bcs.n	8018b0e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8018b08:	4a0f      	ldr	r2, [pc, #60]	; (8018b48 <mem_free+0x11c>)
 8018b0a:	69fb      	ldr	r3, [r7, #28]
 8018b0c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8018b0e:	69f8      	ldr	r0, [r7, #28]
 8018b10:	f7ff feae 	bl	8018870 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8018b14:	4809      	ldr	r0, [pc, #36]	; (8018b3c <mem_free+0x110>)
 8018b16:	f004 fee1 	bl	801d8dc <sys_mutex_unlock>
 8018b1a:	e000      	b.n	8018b1e <mem_free+0xf2>
    return;
 8018b1c:	bf00      	nop
}
 8018b1e:	3720      	adds	r7, #32
 8018b20:	46bd      	mov	sp, r7
 8018b22:	bd80      	pop	{r7, pc}
 8018b24:	0802405c 	.word	0x0802405c
 8018b28:	0802414c 	.word	0x0802414c
 8018b2c:	080240a4 	.word	0x080240a4
 8018b30:	24013f98 	.word	0x24013f98
 8018b34:	24013f9c 	.word	0x24013f9c
 8018b38:	08024170 	.word	0x08024170
 8018b3c:	24013fa0 	.word	0x24013fa0
 8018b40:	0802418c 	.word	0x0802418c
 8018b44:	080241b4 	.word	0x080241b4
 8018b48:	24013fa4 	.word	0x24013fa4

08018b4c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8018b4c:	b580      	push	{r7, lr}
 8018b4e:	b088      	sub	sp, #32
 8018b50:	af00      	add	r7, sp, #0
 8018b52:	6078      	str	r0, [r7, #4]
 8018b54:	460b      	mov	r3, r1
 8018b56:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8018b58:	887b      	ldrh	r3, [r7, #2]
 8018b5a:	3303      	adds	r3, #3
 8018b5c:	b29b      	uxth	r3, r3
 8018b5e:	f023 0303 	bic.w	r3, r3, #3
 8018b62:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8018b64:	8bfb      	ldrh	r3, [r7, #30]
 8018b66:	2b0b      	cmp	r3, #11
 8018b68:	d801      	bhi.n	8018b6e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8018b6a:	230c      	movs	r3, #12
 8018b6c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8018b6e:	8bfb      	ldrh	r3, [r7, #30]
 8018b70:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8018b74:	d803      	bhi.n	8018b7e <mem_trim+0x32>
 8018b76:	8bfa      	ldrh	r2, [r7, #30]
 8018b78:	887b      	ldrh	r3, [r7, #2]
 8018b7a:	429a      	cmp	r2, r3
 8018b7c:	d201      	bcs.n	8018b82 <mem_trim+0x36>
    return NULL;
 8018b7e:	2300      	movs	r3, #0
 8018b80:	e0d8      	b.n	8018d34 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8018b82:	4b6e      	ldr	r3, [pc, #440]	; (8018d3c <mem_trim+0x1f0>)
 8018b84:	681b      	ldr	r3, [r3, #0]
 8018b86:	687a      	ldr	r2, [r7, #4]
 8018b88:	429a      	cmp	r2, r3
 8018b8a:	d304      	bcc.n	8018b96 <mem_trim+0x4a>
 8018b8c:	4b6c      	ldr	r3, [pc, #432]	; (8018d40 <mem_trim+0x1f4>)
 8018b8e:	681b      	ldr	r3, [r3, #0]
 8018b90:	687a      	ldr	r2, [r7, #4]
 8018b92:	429a      	cmp	r2, r3
 8018b94:	d306      	bcc.n	8018ba4 <mem_trim+0x58>
 8018b96:	4b6b      	ldr	r3, [pc, #428]	; (8018d44 <mem_trim+0x1f8>)
 8018b98:	f240 22d1 	movw	r2, #721	; 0x2d1
 8018b9c:	496a      	ldr	r1, [pc, #424]	; (8018d48 <mem_trim+0x1fc>)
 8018b9e:	486b      	ldr	r0, [pc, #428]	; (8018d4c <mem_trim+0x200>)
 8018ba0:	f009 f9cc 	bl	8021f3c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8018ba4:	4b65      	ldr	r3, [pc, #404]	; (8018d3c <mem_trim+0x1f0>)
 8018ba6:	681b      	ldr	r3, [r3, #0]
 8018ba8:	687a      	ldr	r2, [r7, #4]
 8018baa:	429a      	cmp	r2, r3
 8018bac:	d304      	bcc.n	8018bb8 <mem_trim+0x6c>
 8018bae:	4b64      	ldr	r3, [pc, #400]	; (8018d40 <mem_trim+0x1f4>)
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	687a      	ldr	r2, [r7, #4]
 8018bb4:	429a      	cmp	r2, r3
 8018bb6:	d307      	bcc.n	8018bc8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8018bb8:	f004 fe9e 	bl	801d8f8 <sys_arch_protect>
 8018bbc:	60b8      	str	r0, [r7, #8]
 8018bbe:	68b8      	ldr	r0, [r7, #8]
 8018bc0:	f004 fea8 	bl	801d914 <sys_arch_unprotect>
    return rmem;
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	e0b5      	b.n	8018d34 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	3b08      	subs	r3, #8
 8018bcc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8018bce:	69b8      	ldr	r0, [r7, #24]
 8018bd0:	f7ff fe3c 	bl	801884c <mem_to_ptr>
 8018bd4:	4603      	mov	r3, r0
 8018bd6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8018bd8:	69bb      	ldr	r3, [r7, #24]
 8018bda:	881a      	ldrh	r2, [r3, #0]
 8018bdc:	8afb      	ldrh	r3, [r7, #22]
 8018bde:	1ad3      	subs	r3, r2, r3
 8018be0:	b29b      	uxth	r3, r3
 8018be2:	3b08      	subs	r3, #8
 8018be4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8018be6:	8bfa      	ldrh	r2, [r7, #30]
 8018be8:	8abb      	ldrh	r3, [r7, #20]
 8018bea:	429a      	cmp	r2, r3
 8018bec:	d906      	bls.n	8018bfc <mem_trim+0xb0>
 8018bee:	4b55      	ldr	r3, [pc, #340]	; (8018d44 <mem_trim+0x1f8>)
 8018bf0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8018bf4:	4956      	ldr	r1, [pc, #344]	; (8018d50 <mem_trim+0x204>)
 8018bf6:	4855      	ldr	r0, [pc, #340]	; (8018d4c <mem_trim+0x200>)
 8018bf8:	f009 f9a0 	bl	8021f3c <iprintf>
  if (newsize > size) {
 8018bfc:	8bfa      	ldrh	r2, [r7, #30]
 8018bfe:	8abb      	ldrh	r3, [r7, #20]
 8018c00:	429a      	cmp	r2, r3
 8018c02:	d901      	bls.n	8018c08 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8018c04:	2300      	movs	r3, #0
 8018c06:	e095      	b.n	8018d34 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8018c08:	8bfa      	ldrh	r2, [r7, #30]
 8018c0a:	8abb      	ldrh	r3, [r7, #20]
 8018c0c:	429a      	cmp	r2, r3
 8018c0e:	d101      	bne.n	8018c14 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	e08f      	b.n	8018d34 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8018c14:	484f      	ldr	r0, [pc, #316]	; (8018d54 <mem_trim+0x208>)
 8018c16:	f004 fe52 	bl	801d8be <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8018c1a:	69bb      	ldr	r3, [r7, #24]
 8018c1c:	881b      	ldrh	r3, [r3, #0]
 8018c1e:	4618      	mov	r0, r3
 8018c20:	f7ff fe02 	bl	8018828 <ptr_to_mem>
 8018c24:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8018c26:	693b      	ldr	r3, [r7, #16]
 8018c28:	791b      	ldrb	r3, [r3, #4]
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d13f      	bne.n	8018cae <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8018c2e:	69bb      	ldr	r3, [r7, #24]
 8018c30:	881b      	ldrh	r3, [r3, #0]
 8018c32:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8018c36:	d106      	bne.n	8018c46 <mem_trim+0xfa>
 8018c38:	4b42      	ldr	r3, [pc, #264]	; (8018d44 <mem_trim+0x1f8>)
 8018c3a:	f240 22f5 	movw	r2, #757	; 0x2f5
 8018c3e:	4946      	ldr	r1, [pc, #280]	; (8018d58 <mem_trim+0x20c>)
 8018c40:	4842      	ldr	r0, [pc, #264]	; (8018d4c <mem_trim+0x200>)
 8018c42:	f009 f97b 	bl	8021f3c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8018c46:	693b      	ldr	r3, [r7, #16]
 8018c48:	881b      	ldrh	r3, [r3, #0]
 8018c4a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8018c4c:	8afa      	ldrh	r2, [r7, #22]
 8018c4e:	8bfb      	ldrh	r3, [r7, #30]
 8018c50:	4413      	add	r3, r2
 8018c52:	b29b      	uxth	r3, r3
 8018c54:	3308      	adds	r3, #8
 8018c56:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8018c58:	4b40      	ldr	r3, [pc, #256]	; (8018d5c <mem_trim+0x210>)
 8018c5a:	681b      	ldr	r3, [r3, #0]
 8018c5c:	693a      	ldr	r2, [r7, #16]
 8018c5e:	429a      	cmp	r2, r3
 8018c60:	d106      	bne.n	8018c70 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8018c62:	89fb      	ldrh	r3, [r7, #14]
 8018c64:	4618      	mov	r0, r3
 8018c66:	f7ff fddf 	bl	8018828 <ptr_to_mem>
 8018c6a:	4603      	mov	r3, r0
 8018c6c:	4a3b      	ldr	r2, [pc, #236]	; (8018d5c <mem_trim+0x210>)
 8018c6e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8018c70:	89fb      	ldrh	r3, [r7, #14]
 8018c72:	4618      	mov	r0, r3
 8018c74:	f7ff fdd8 	bl	8018828 <ptr_to_mem>
 8018c78:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8018c7a:	693b      	ldr	r3, [r7, #16]
 8018c7c:	2200      	movs	r2, #0
 8018c7e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8018c80:	693b      	ldr	r3, [r7, #16]
 8018c82:	89ba      	ldrh	r2, [r7, #12]
 8018c84:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8018c86:	693b      	ldr	r3, [r7, #16]
 8018c88:	8afa      	ldrh	r2, [r7, #22]
 8018c8a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8018c8c:	69bb      	ldr	r3, [r7, #24]
 8018c8e:	89fa      	ldrh	r2, [r7, #14]
 8018c90:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8018c92:	693b      	ldr	r3, [r7, #16]
 8018c94:	881b      	ldrh	r3, [r3, #0]
 8018c96:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8018c9a:	d047      	beq.n	8018d2c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8018c9c:	693b      	ldr	r3, [r7, #16]
 8018c9e:	881b      	ldrh	r3, [r3, #0]
 8018ca0:	4618      	mov	r0, r3
 8018ca2:	f7ff fdc1 	bl	8018828 <ptr_to_mem>
 8018ca6:	4602      	mov	r2, r0
 8018ca8:	89fb      	ldrh	r3, [r7, #14]
 8018caa:	8053      	strh	r3, [r2, #2]
 8018cac:	e03e      	b.n	8018d2c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8018cae:	8bfb      	ldrh	r3, [r7, #30]
 8018cb0:	f103 0214 	add.w	r2, r3, #20
 8018cb4:	8abb      	ldrh	r3, [r7, #20]
 8018cb6:	429a      	cmp	r2, r3
 8018cb8:	d838      	bhi.n	8018d2c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8018cba:	8afa      	ldrh	r2, [r7, #22]
 8018cbc:	8bfb      	ldrh	r3, [r7, #30]
 8018cbe:	4413      	add	r3, r2
 8018cc0:	b29b      	uxth	r3, r3
 8018cc2:	3308      	adds	r3, #8
 8018cc4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8018cc6:	69bb      	ldr	r3, [r7, #24]
 8018cc8:	881b      	ldrh	r3, [r3, #0]
 8018cca:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8018cce:	d106      	bne.n	8018cde <mem_trim+0x192>
 8018cd0:	4b1c      	ldr	r3, [pc, #112]	; (8018d44 <mem_trim+0x1f8>)
 8018cd2:	f240 3216 	movw	r2, #790	; 0x316
 8018cd6:	4920      	ldr	r1, [pc, #128]	; (8018d58 <mem_trim+0x20c>)
 8018cd8:	481c      	ldr	r0, [pc, #112]	; (8018d4c <mem_trim+0x200>)
 8018cda:	f009 f92f 	bl	8021f3c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8018cde:	89fb      	ldrh	r3, [r7, #14]
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	f7ff fda1 	bl	8018828 <ptr_to_mem>
 8018ce6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8018ce8:	4b1c      	ldr	r3, [pc, #112]	; (8018d5c <mem_trim+0x210>)
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	693a      	ldr	r2, [r7, #16]
 8018cee:	429a      	cmp	r2, r3
 8018cf0:	d202      	bcs.n	8018cf8 <mem_trim+0x1ac>
      lfree = mem2;
 8018cf2:	4a1a      	ldr	r2, [pc, #104]	; (8018d5c <mem_trim+0x210>)
 8018cf4:	693b      	ldr	r3, [r7, #16]
 8018cf6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8018cf8:	693b      	ldr	r3, [r7, #16]
 8018cfa:	2200      	movs	r2, #0
 8018cfc:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8018cfe:	69bb      	ldr	r3, [r7, #24]
 8018d00:	881a      	ldrh	r2, [r3, #0]
 8018d02:	693b      	ldr	r3, [r7, #16]
 8018d04:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8018d06:	693b      	ldr	r3, [r7, #16]
 8018d08:	8afa      	ldrh	r2, [r7, #22]
 8018d0a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8018d0c:	69bb      	ldr	r3, [r7, #24]
 8018d0e:	89fa      	ldrh	r2, [r7, #14]
 8018d10:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8018d12:	693b      	ldr	r3, [r7, #16]
 8018d14:	881b      	ldrh	r3, [r3, #0]
 8018d16:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8018d1a:	d007      	beq.n	8018d2c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8018d1c:	693b      	ldr	r3, [r7, #16]
 8018d1e:	881b      	ldrh	r3, [r3, #0]
 8018d20:	4618      	mov	r0, r3
 8018d22:	f7ff fd81 	bl	8018828 <ptr_to_mem>
 8018d26:	4602      	mov	r2, r0
 8018d28:	89fb      	ldrh	r3, [r7, #14]
 8018d2a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8018d2c:	4809      	ldr	r0, [pc, #36]	; (8018d54 <mem_trim+0x208>)
 8018d2e:	f004 fdd5 	bl	801d8dc <sys_mutex_unlock>
  return rmem;
 8018d32:	687b      	ldr	r3, [r7, #4]
}
 8018d34:	4618      	mov	r0, r3
 8018d36:	3720      	adds	r7, #32
 8018d38:	46bd      	mov	sp, r7
 8018d3a:	bd80      	pop	{r7, pc}
 8018d3c:	24013f98 	.word	0x24013f98
 8018d40:	24013f9c 	.word	0x24013f9c
 8018d44:	0802405c 	.word	0x0802405c
 8018d48:	080241e8 	.word	0x080241e8
 8018d4c:	080240a4 	.word	0x080240a4
 8018d50:	08024200 	.word	0x08024200
 8018d54:	24013fa0 	.word	0x24013fa0
 8018d58:	08024220 	.word	0x08024220
 8018d5c:	24013fa4 	.word	0x24013fa4

08018d60 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8018d60:	b580      	push	{r7, lr}
 8018d62:	b088      	sub	sp, #32
 8018d64:	af00      	add	r7, sp, #0
 8018d66:	4603      	mov	r3, r0
 8018d68:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8018d6a:	88fb      	ldrh	r3, [r7, #6]
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	d101      	bne.n	8018d74 <mem_malloc+0x14>
    return NULL;
 8018d70:	2300      	movs	r3, #0
 8018d72:	e0e2      	b.n	8018f3a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8018d74:	88fb      	ldrh	r3, [r7, #6]
 8018d76:	3303      	adds	r3, #3
 8018d78:	b29b      	uxth	r3, r3
 8018d7a:	f023 0303 	bic.w	r3, r3, #3
 8018d7e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8018d80:	8bbb      	ldrh	r3, [r7, #28]
 8018d82:	2b0b      	cmp	r3, #11
 8018d84:	d801      	bhi.n	8018d8a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8018d86:	230c      	movs	r3, #12
 8018d88:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8018d8a:	8bbb      	ldrh	r3, [r7, #28]
 8018d8c:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8018d90:	d803      	bhi.n	8018d9a <mem_malloc+0x3a>
 8018d92:	8bba      	ldrh	r2, [r7, #28]
 8018d94:	88fb      	ldrh	r3, [r7, #6]
 8018d96:	429a      	cmp	r2, r3
 8018d98:	d201      	bcs.n	8018d9e <mem_malloc+0x3e>
    return NULL;
 8018d9a:	2300      	movs	r3, #0
 8018d9c:	e0cd      	b.n	8018f3a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8018d9e:	4869      	ldr	r0, [pc, #420]	; (8018f44 <mem_malloc+0x1e4>)
 8018da0:	f004 fd8d 	bl	801d8be <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8018da4:	4b68      	ldr	r3, [pc, #416]	; (8018f48 <mem_malloc+0x1e8>)
 8018da6:	681b      	ldr	r3, [r3, #0]
 8018da8:	4618      	mov	r0, r3
 8018daa:	f7ff fd4f 	bl	801884c <mem_to_ptr>
 8018dae:	4603      	mov	r3, r0
 8018db0:	83fb      	strh	r3, [r7, #30]
 8018db2:	e0b7      	b.n	8018f24 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8018db4:	8bfb      	ldrh	r3, [r7, #30]
 8018db6:	4618      	mov	r0, r3
 8018db8:	f7ff fd36 	bl	8018828 <ptr_to_mem>
 8018dbc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8018dbe:	697b      	ldr	r3, [r7, #20]
 8018dc0:	791b      	ldrb	r3, [r3, #4]
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	f040 80a7 	bne.w	8018f16 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8018dc8:	697b      	ldr	r3, [r7, #20]
 8018dca:	881b      	ldrh	r3, [r3, #0]
 8018dcc:	461a      	mov	r2, r3
 8018dce:	8bfb      	ldrh	r3, [r7, #30]
 8018dd0:	1ad3      	subs	r3, r2, r3
 8018dd2:	f1a3 0208 	sub.w	r2, r3, #8
 8018dd6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8018dd8:	429a      	cmp	r2, r3
 8018dda:	f0c0 809c 	bcc.w	8018f16 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8018dde:	697b      	ldr	r3, [r7, #20]
 8018de0:	881b      	ldrh	r3, [r3, #0]
 8018de2:	461a      	mov	r2, r3
 8018de4:	8bfb      	ldrh	r3, [r7, #30]
 8018de6:	1ad3      	subs	r3, r2, r3
 8018de8:	f1a3 0208 	sub.w	r2, r3, #8
 8018dec:	8bbb      	ldrh	r3, [r7, #28]
 8018dee:	3314      	adds	r3, #20
 8018df0:	429a      	cmp	r2, r3
 8018df2:	d333      	bcc.n	8018e5c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8018df4:	8bfa      	ldrh	r2, [r7, #30]
 8018df6:	8bbb      	ldrh	r3, [r7, #28]
 8018df8:	4413      	add	r3, r2
 8018dfa:	b29b      	uxth	r3, r3
 8018dfc:	3308      	adds	r3, #8
 8018dfe:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8018e00:	8a7b      	ldrh	r3, [r7, #18]
 8018e02:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8018e06:	d106      	bne.n	8018e16 <mem_malloc+0xb6>
 8018e08:	4b50      	ldr	r3, [pc, #320]	; (8018f4c <mem_malloc+0x1ec>)
 8018e0a:	f240 3287 	movw	r2, #903	; 0x387
 8018e0e:	4950      	ldr	r1, [pc, #320]	; (8018f50 <mem_malloc+0x1f0>)
 8018e10:	4850      	ldr	r0, [pc, #320]	; (8018f54 <mem_malloc+0x1f4>)
 8018e12:	f009 f893 	bl	8021f3c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8018e16:	8a7b      	ldrh	r3, [r7, #18]
 8018e18:	4618      	mov	r0, r3
 8018e1a:	f7ff fd05 	bl	8018828 <ptr_to_mem>
 8018e1e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8018e20:	68fb      	ldr	r3, [r7, #12]
 8018e22:	2200      	movs	r2, #0
 8018e24:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8018e26:	697b      	ldr	r3, [r7, #20]
 8018e28:	881a      	ldrh	r2, [r3, #0]
 8018e2a:	68fb      	ldr	r3, [r7, #12]
 8018e2c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8018e2e:	68fb      	ldr	r3, [r7, #12]
 8018e30:	8bfa      	ldrh	r2, [r7, #30]
 8018e32:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8018e34:	697b      	ldr	r3, [r7, #20]
 8018e36:	8a7a      	ldrh	r2, [r7, #18]
 8018e38:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8018e3a:	697b      	ldr	r3, [r7, #20]
 8018e3c:	2201      	movs	r2, #1
 8018e3e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8018e40:	68fb      	ldr	r3, [r7, #12]
 8018e42:	881b      	ldrh	r3, [r3, #0]
 8018e44:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8018e48:	d00b      	beq.n	8018e62 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8018e4a:	68fb      	ldr	r3, [r7, #12]
 8018e4c:	881b      	ldrh	r3, [r3, #0]
 8018e4e:	4618      	mov	r0, r3
 8018e50:	f7ff fcea 	bl	8018828 <ptr_to_mem>
 8018e54:	4602      	mov	r2, r0
 8018e56:	8a7b      	ldrh	r3, [r7, #18]
 8018e58:	8053      	strh	r3, [r2, #2]
 8018e5a:	e002      	b.n	8018e62 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8018e5c:	697b      	ldr	r3, [r7, #20]
 8018e5e:	2201      	movs	r2, #1
 8018e60:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8018e62:	4b39      	ldr	r3, [pc, #228]	; (8018f48 <mem_malloc+0x1e8>)
 8018e64:	681b      	ldr	r3, [r3, #0]
 8018e66:	697a      	ldr	r2, [r7, #20]
 8018e68:	429a      	cmp	r2, r3
 8018e6a:	d127      	bne.n	8018ebc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8018e6c:	4b36      	ldr	r3, [pc, #216]	; (8018f48 <mem_malloc+0x1e8>)
 8018e6e:	681b      	ldr	r3, [r3, #0]
 8018e70:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8018e72:	e005      	b.n	8018e80 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8018e74:	69bb      	ldr	r3, [r7, #24]
 8018e76:	881b      	ldrh	r3, [r3, #0]
 8018e78:	4618      	mov	r0, r3
 8018e7a:	f7ff fcd5 	bl	8018828 <ptr_to_mem>
 8018e7e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8018e80:	69bb      	ldr	r3, [r7, #24]
 8018e82:	791b      	ldrb	r3, [r3, #4]
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	d004      	beq.n	8018e92 <mem_malloc+0x132>
 8018e88:	4b33      	ldr	r3, [pc, #204]	; (8018f58 <mem_malloc+0x1f8>)
 8018e8a:	681b      	ldr	r3, [r3, #0]
 8018e8c:	69ba      	ldr	r2, [r7, #24]
 8018e8e:	429a      	cmp	r2, r3
 8018e90:	d1f0      	bne.n	8018e74 <mem_malloc+0x114>
          }
          lfree = cur;
 8018e92:	4a2d      	ldr	r2, [pc, #180]	; (8018f48 <mem_malloc+0x1e8>)
 8018e94:	69bb      	ldr	r3, [r7, #24]
 8018e96:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8018e98:	4b2b      	ldr	r3, [pc, #172]	; (8018f48 <mem_malloc+0x1e8>)
 8018e9a:	681a      	ldr	r2, [r3, #0]
 8018e9c:	4b2e      	ldr	r3, [pc, #184]	; (8018f58 <mem_malloc+0x1f8>)
 8018e9e:	681b      	ldr	r3, [r3, #0]
 8018ea0:	429a      	cmp	r2, r3
 8018ea2:	d00b      	beq.n	8018ebc <mem_malloc+0x15c>
 8018ea4:	4b28      	ldr	r3, [pc, #160]	; (8018f48 <mem_malloc+0x1e8>)
 8018ea6:	681b      	ldr	r3, [r3, #0]
 8018ea8:	791b      	ldrb	r3, [r3, #4]
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	d006      	beq.n	8018ebc <mem_malloc+0x15c>
 8018eae:	4b27      	ldr	r3, [pc, #156]	; (8018f4c <mem_malloc+0x1ec>)
 8018eb0:	f240 32b5 	movw	r2, #949	; 0x3b5
 8018eb4:	4929      	ldr	r1, [pc, #164]	; (8018f5c <mem_malloc+0x1fc>)
 8018eb6:	4827      	ldr	r0, [pc, #156]	; (8018f54 <mem_malloc+0x1f4>)
 8018eb8:	f009 f840 	bl	8021f3c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8018ebc:	4821      	ldr	r0, [pc, #132]	; (8018f44 <mem_malloc+0x1e4>)
 8018ebe:	f004 fd0d 	bl	801d8dc <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8018ec2:	8bba      	ldrh	r2, [r7, #28]
 8018ec4:	697b      	ldr	r3, [r7, #20]
 8018ec6:	4413      	add	r3, r2
 8018ec8:	3308      	adds	r3, #8
 8018eca:	4a23      	ldr	r2, [pc, #140]	; (8018f58 <mem_malloc+0x1f8>)
 8018ecc:	6812      	ldr	r2, [r2, #0]
 8018ece:	4293      	cmp	r3, r2
 8018ed0:	d906      	bls.n	8018ee0 <mem_malloc+0x180>
 8018ed2:	4b1e      	ldr	r3, [pc, #120]	; (8018f4c <mem_malloc+0x1ec>)
 8018ed4:	f240 32b9 	movw	r2, #953	; 0x3b9
 8018ed8:	4921      	ldr	r1, [pc, #132]	; (8018f60 <mem_malloc+0x200>)
 8018eda:	481e      	ldr	r0, [pc, #120]	; (8018f54 <mem_malloc+0x1f4>)
 8018edc:	f009 f82e 	bl	8021f3c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8018ee0:	697b      	ldr	r3, [r7, #20]
 8018ee2:	f003 0303 	and.w	r3, r3, #3
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d006      	beq.n	8018ef8 <mem_malloc+0x198>
 8018eea:	4b18      	ldr	r3, [pc, #96]	; (8018f4c <mem_malloc+0x1ec>)
 8018eec:	f240 32bb 	movw	r2, #955	; 0x3bb
 8018ef0:	491c      	ldr	r1, [pc, #112]	; (8018f64 <mem_malloc+0x204>)
 8018ef2:	4818      	ldr	r0, [pc, #96]	; (8018f54 <mem_malloc+0x1f4>)
 8018ef4:	f009 f822 	bl	8021f3c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8018ef8:	697b      	ldr	r3, [r7, #20]
 8018efa:	f003 0303 	and.w	r3, r3, #3
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	d006      	beq.n	8018f10 <mem_malloc+0x1b0>
 8018f02:	4b12      	ldr	r3, [pc, #72]	; (8018f4c <mem_malloc+0x1ec>)
 8018f04:	f240 32bd 	movw	r2, #957	; 0x3bd
 8018f08:	4917      	ldr	r1, [pc, #92]	; (8018f68 <mem_malloc+0x208>)
 8018f0a:	4812      	ldr	r0, [pc, #72]	; (8018f54 <mem_malloc+0x1f4>)
 8018f0c:	f009 f816 	bl	8021f3c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8018f10:	697b      	ldr	r3, [r7, #20]
 8018f12:	3308      	adds	r3, #8
 8018f14:	e011      	b.n	8018f3a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8018f16:	8bfb      	ldrh	r3, [r7, #30]
 8018f18:	4618      	mov	r0, r3
 8018f1a:	f7ff fc85 	bl	8018828 <ptr_to_mem>
 8018f1e:	4603      	mov	r3, r0
 8018f20:	881b      	ldrh	r3, [r3, #0]
 8018f22:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8018f24:	8bfa      	ldrh	r2, [r7, #30]
 8018f26:	8bbb      	ldrh	r3, [r7, #28]
 8018f28:	f5c3 5360 	rsb	r3, r3, #14336	; 0x3800
 8018f2c:	429a      	cmp	r2, r3
 8018f2e:	f4ff af41 	bcc.w	8018db4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8018f32:	4804      	ldr	r0, [pc, #16]	; (8018f44 <mem_malloc+0x1e4>)
 8018f34:	f004 fcd2 	bl	801d8dc <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8018f38:	2300      	movs	r3, #0
}
 8018f3a:	4618      	mov	r0, r3
 8018f3c:	3720      	adds	r7, #32
 8018f3e:	46bd      	mov	sp, r7
 8018f40:	bd80      	pop	{r7, pc}
 8018f42:	bf00      	nop
 8018f44:	24013fa0 	.word	0x24013fa0
 8018f48:	24013fa4 	.word	0x24013fa4
 8018f4c:	0802405c 	.word	0x0802405c
 8018f50:	08024220 	.word	0x08024220
 8018f54:	080240a4 	.word	0x080240a4
 8018f58:	24013f9c 	.word	0x24013f9c
 8018f5c:	08024234 	.word	0x08024234
 8018f60:	08024250 	.word	0x08024250
 8018f64:	08024280 	.word	0x08024280
 8018f68:	080242b0 	.word	0x080242b0

08018f6c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8018f6c:	b580      	push	{r7, lr}
 8018f6e:	b084      	sub	sp, #16
 8018f70:	af00      	add	r7, sp, #0
 8018f72:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8018f74:	f004 fcc0 	bl	801d8f8 <sys_arch_protect>
 8018f78:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	689b      	ldr	r3, [r3, #8]
 8018f7e:	681b      	ldr	r3, [r3, #0]
 8018f80:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8018f82:	68bb      	ldr	r3, [r7, #8]
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	d015      	beq.n	8018fb4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	689b      	ldr	r3, [r3, #8]
 8018f8c:	68ba      	ldr	r2, [r7, #8]
 8018f8e:	6812      	ldr	r2, [r2, #0]
 8018f90:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8018f92:	68bb      	ldr	r3, [r7, #8]
 8018f94:	f003 0303 	and.w	r3, r3, #3
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	d006      	beq.n	8018faa <do_memp_malloc_pool+0x3e>
 8018f9c:	4b09      	ldr	r3, [pc, #36]	; (8018fc4 <do_memp_malloc_pool+0x58>)
 8018f9e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8018fa2:	4909      	ldr	r1, [pc, #36]	; (8018fc8 <do_memp_malloc_pool+0x5c>)
 8018fa4:	4809      	ldr	r0, [pc, #36]	; (8018fcc <do_memp_malloc_pool+0x60>)
 8018fa6:	f008 ffc9 	bl	8021f3c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8018faa:	68f8      	ldr	r0, [r7, #12]
 8018fac:	f004 fcb2 	bl	801d914 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8018fb0:	68bb      	ldr	r3, [r7, #8]
 8018fb2:	e003      	b.n	8018fbc <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8018fb4:	68f8      	ldr	r0, [r7, #12]
 8018fb6:	f004 fcad 	bl	801d914 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8018fba:	2300      	movs	r3, #0
}
 8018fbc:	4618      	mov	r0, r3
 8018fbe:	3710      	adds	r7, #16
 8018fc0:	46bd      	mov	sp, r7
 8018fc2:	bd80      	pop	{r7, pc}
 8018fc4:	080242d4 	.word	0x080242d4
 8018fc8:	08024304 	.word	0x08024304
 8018fcc:	08024328 	.word	0x08024328

08018fd0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8018fd0:	b580      	push	{r7, lr}
 8018fd2:	b084      	sub	sp, #16
 8018fd4:	af00      	add	r7, sp, #0
 8018fd6:	4603      	mov	r3, r0
 8018fd8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8018fda:	79fb      	ldrb	r3, [r7, #7]
 8018fdc:	2b0d      	cmp	r3, #13
 8018fde:	d908      	bls.n	8018ff2 <memp_malloc+0x22>
 8018fe0:	4b0a      	ldr	r3, [pc, #40]	; (801900c <memp_malloc+0x3c>)
 8018fe2:	f240 1257 	movw	r2, #343	; 0x157
 8018fe6:	490a      	ldr	r1, [pc, #40]	; (8019010 <memp_malloc+0x40>)
 8018fe8:	480a      	ldr	r0, [pc, #40]	; (8019014 <memp_malloc+0x44>)
 8018fea:	f008 ffa7 	bl	8021f3c <iprintf>
 8018fee:	2300      	movs	r3, #0
 8018ff0:	e008      	b.n	8019004 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8018ff2:	79fb      	ldrb	r3, [r7, #7]
 8018ff4:	4a08      	ldr	r2, [pc, #32]	; (8019018 <memp_malloc+0x48>)
 8018ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018ffa:	4618      	mov	r0, r3
 8018ffc:	f7ff ffb6 	bl	8018f6c <do_memp_malloc_pool>
 8019000:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8019002:	68fb      	ldr	r3, [r7, #12]
}
 8019004:	4618      	mov	r0, r3
 8019006:	3710      	adds	r7, #16
 8019008:	46bd      	mov	sp, r7
 801900a:	bd80      	pop	{r7, pc}
 801900c:	080242d4 	.word	0x080242d4
 8019010:	08024364 	.word	0x08024364
 8019014:	08024328 	.word	0x08024328
 8019018:	08025e98 	.word	0x08025e98

0801901c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801901c:	b580      	push	{r7, lr}
 801901e:	b084      	sub	sp, #16
 8019020:	af00      	add	r7, sp, #0
 8019022:	6078      	str	r0, [r7, #4]
 8019024:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8019026:	683b      	ldr	r3, [r7, #0]
 8019028:	f003 0303 	and.w	r3, r3, #3
 801902c:	2b00      	cmp	r3, #0
 801902e:	d006      	beq.n	801903e <do_memp_free_pool+0x22>
 8019030:	4b0d      	ldr	r3, [pc, #52]	; (8019068 <do_memp_free_pool+0x4c>)
 8019032:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8019036:	490d      	ldr	r1, [pc, #52]	; (801906c <do_memp_free_pool+0x50>)
 8019038:	480d      	ldr	r0, [pc, #52]	; (8019070 <do_memp_free_pool+0x54>)
 801903a:	f008 ff7f 	bl	8021f3c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801903e:	683b      	ldr	r3, [r7, #0]
 8019040:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8019042:	f004 fc59 	bl	801d8f8 <sys_arch_protect>
 8019046:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	689b      	ldr	r3, [r3, #8]
 801904c:	681a      	ldr	r2, [r3, #0]
 801904e:	68fb      	ldr	r3, [r7, #12]
 8019050:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	689b      	ldr	r3, [r3, #8]
 8019056:	68fa      	ldr	r2, [r7, #12]
 8019058:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801905a:	68b8      	ldr	r0, [r7, #8]
 801905c:	f004 fc5a 	bl	801d914 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8019060:	bf00      	nop
 8019062:	3710      	adds	r7, #16
 8019064:	46bd      	mov	sp, r7
 8019066:	bd80      	pop	{r7, pc}
 8019068:	080242d4 	.word	0x080242d4
 801906c:	08024384 	.word	0x08024384
 8019070:	08024328 	.word	0x08024328

08019074 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8019074:	b580      	push	{r7, lr}
 8019076:	b082      	sub	sp, #8
 8019078:	af00      	add	r7, sp, #0
 801907a:	4603      	mov	r3, r0
 801907c:	6039      	str	r1, [r7, #0]
 801907e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8019080:	79fb      	ldrb	r3, [r7, #7]
 8019082:	2b0d      	cmp	r3, #13
 8019084:	d907      	bls.n	8019096 <memp_free+0x22>
 8019086:	4b0c      	ldr	r3, [pc, #48]	; (80190b8 <memp_free+0x44>)
 8019088:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801908c:	490b      	ldr	r1, [pc, #44]	; (80190bc <memp_free+0x48>)
 801908e:	480c      	ldr	r0, [pc, #48]	; (80190c0 <memp_free+0x4c>)
 8019090:	f008 ff54 	bl	8021f3c <iprintf>
 8019094:	e00c      	b.n	80190b0 <memp_free+0x3c>

  if (mem == NULL) {
 8019096:	683b      	ldr	r3, [r7, #0]
 8019098:	2b00      	cmp	r3, #0
 801909a:	d008      	beq.n	80190ae <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801909c:	79fb      	ldrb	r3, [r7, #7]
 801909e:	4a09      	ldr	r2, [pc, #36]	; (80190c4 <memp_free+0x50>)
 80190a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80190a4:	6839      	ldr	r1, [r7, #0]
 80190a6:	4618      	mov	r0, r3
 80190a8:	f7ff ffb8 	bl	801901c <do_memp_free_pool>
 80190ac:	e000      	b.n	80190b0 <memp_free+0x3c>
    return;
 80190ae:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80190b0:	3708      	adds	r7, #8
 80190b2:	46bd      	mov	sp, r7
 80190b4:	bd80      	pop	{r7, pc}
 80190b6:	bf00      	nop
 80190b8:	080242d4 	.word	0x080242d4
 80190bc:	080243a4 	.word	0x080243a4
 80190c0:	08024328 	.word	0x08024328
 80190c4:	08025e98 	.word	0x08025e98

080190c8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80190c8:	b480      	push	{r7}
 80190ca:	b085      	sub	sp, #20
 80190cc:	af00      	add	r7, sp, #0
 80190ce:	4603      	mov	r3, r0
 80190d0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80190d2:	79fb      	ldrb	r3, [r7, #7]
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	d013      	beq.n	8019100 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80190d8:	4b0d      	ldr	r3, [pc, #52]	; (8019110 <netif_get_by_index+0x48>)
 80190da:	681b      	ldr	r3, [r3, #0]
 80190dc:	60fb      	str	r3, [r7, #12]
 80190de:	e00c      	b.n	80190fa <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80190e0:	68fb      	ldr	r3, [r7, #12]
 80190e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80190e6:	3301      	adds	r3, #1
 80190e8:	b2db      	uxtb	r3, r3
 80190ea:	79fa      	ldrb	r2, [r7, #7]
 80190ec:	429a      	cmp	r2, r3
 80190ee:	d101      	bne.n	80190f4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80190f0:	68fb      	ldr	r3, [r7, #12]
 80190f2:	e006      	b.n	8019102 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80190f4:	68fb      	ldr	r3, [r7, #12]
 80190f6:	681b      	ldr	r3, [r3, #0]
 80190f8:	60fb      	str	r3, [r7, #12]
 80190fa:	68fb      	ldr	r3, [r7, #12]
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	d1ef      	bne.n	80190e0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8019100:	2300      	movs	r3, #0
}
 8019102:	4618      	mov	r0, r3
 8019104:	3714      	adds	r7, #20
 8019106:	46bd      	mov	sp, r7
 8019108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801910c:	4770      	bx	lr
 801910e:	bf00      	nop
 8019110:	2401a170 	.word	0x2401a170

08019114 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8019114:	b580      	push	{r7, lr}
 8019116:	b082      	sub	sp, #8
 8019118:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801911a:	f004 fbed 	bl	801d8f8 <sys_arch_protect>
 801911e:	6038      	str	r0, [r7, #0]
 8019120:	4b0d      	ldr	r3, [pc, #52]	; (8019158 <pbuf_free_ooseq+0x44>)
 8019122:	2200      	movs	r2, #0
 8019124:	701a      	strb	r2, [r3, #0]
 8019126:	6838      	ldr	r0, [r7, #0]
 8019128:	f004 fbf4 	bl	801d914 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801912c:	4b0b      	ldr	r3, [pc, #44]	; (801915c <pbuf_free_ooseq+0x48>)
 801912e:	681b      	ldr	r3, [r3, #0]
 8019130:	607b      	str	r3, [r7, #4]
 8019132:	e00a      	b.n	801914a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019138:	2b00      	cmp	r3, #0
 801913a:	d003      	beq.n	8019144 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 801913c:	6878      	ldr	r0, [r7, #4]
 801913e:	f002 f9b7 	bl	801b4b0 <tcp_free_ooseq>
      return;
 8019142:	e005      	b.n	8019150 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	68db      	ldr	r3, [r3, #12]
 8019148:	607b      	str	r3, [r7, #4]
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	2b00      	cmp	r3, #0
 801914e:	d1f1      	bne.n	8019134 <pbuf_free_ooseq+0x20>
    }
  }
}
 8019150:	3708      	adds	r7, #8
 8019152:	46bd      	mov	sp, r7
 8019154:	bd80      	pop	{r7, pc}
 8019156:	bf00      	nop
 8019158:	2401a174 	.word	0x2401a174
 801915c:	2401a184 	.word	0x2401a184

08019160 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8019160:	b580      	push	{r7, lr}
 8019162:	b082      	sub	sp, #8
 8019164:	af00      	add	r7, sp, #0
 8019166:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8019168:	f7ff ffd4 	bl	8019114 <pbuf_free_ooseq>
}
 801916c:	bf00      	nop
 801916e:	3708      	adds	r7, #8
 8019170:	46bd      	mov	sp, r7
 8019172:	bd80      	pop	{r7, pc}

08019174 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8019174:	b580      	push	{r7, lr}
 8019176:	b082      	sub	sp, #8
 8019178:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801917a:	f004 fbbd 	bl	801d8f8 <sys_arch_protect>
 801917e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8019180:	4b0f      	ldr	r3, [pc, #60]	; (80191c0 <pbuf_pool_is_empty+0x4c>)
 8019182:	781b      	ldrb	r3, [r3, #0]
 8019184:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8019186:	4b0e      	ldr	r3, [pc, #56]	; (80191c0 <pbuf_pool_is_empty+0x4c>)
 8019188:	2201      	movs	r2, #1
 801918a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 801918c:	6878      	ldr	r0, [r7, #4]
 801918e:	f004 fbc1 	bl	801d914 <sys_arch_unprotect>

  if (!queued) {
 8019192:	78fb      	ldrb	r3, [r7, #3]
 8019194:	2b00      	cmp	r3, #0
 8019196:	d10f      	bne.n	80191b8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8019198:	2100      	movs	r1, #0
 801919a:	480a      	ldr	r0, [pc, #40]	; (80191c4 <pbuf_pool_is_empty+0x50>)
 801919c:	f7ff fad6 	bl	801874c <tcpip_try_callback>
 80191a0:	4603      	mov	r3, r0
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d008      	beq.n	80191b8 <pbuf_pool_is_empty+0x44>
 80191a6:	f004 fba7 	bl	801d8f8 <sys_arch_protect>
 80191aa:	6078      	str	r0, [r7, #4]
 80191ac:	4b04      	ldr	r3, [pc, #16]	; (80191c0 <pbuf_pool_is_empty+0x4c>)
 80191ae:	2200      	movs	r2, #0
 80191b0:	701a      	strb	r2, [r3, #0]
 80191b2:	6878      	ldr	r0, [r7, #4]
 80191b4:	f004 fbae 	bl	801d914 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80191b8:	bf00      	nop
 80191ba:	3708      	adds	r7, #8
 80191bc:	46bd      	mov	sp, r7
 80191be:	bd80      	pop	{r7, pc}
 80191c0:	2401a174 	.word	0x2401a174
 80191c4:	08019161 	.word	0x08019161

080191c8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80191c8:	b480      	push	{r7}
 80191ca:	b085      	sub	sp, #20
 80191cc:	af00      	add	r7, sp, #0
 80191ce:	60f8      	str	r0, [r7, #12]
 80191d0:	60b9      	str	r1, [r7, #8]
 80191d2:	4611      	mov	r1, r2
 80191d4:	461a      	mov	r2, r3
 80191d6:	460b      	mov	r3, r1
 80191d8:	80fb      	strh	r3, [r7, #6]
 80191da:	4613      	mov	r3, r2
 80191dc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80191de:	68fb      	ldr	r3, [r7, #12]
 80191e0:	2200      	movs	r2, #0
 80191e2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80191e4:	68fb      	ldr	r3, [r7, #12]
 80191e6:	68ba      	ldr	r2, [r7, #8]
 80191e8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80191ea:	68fb      	ldr	r3, [r7, #12]
 80191ec:	88fa      	ldrh	r2, [r7, #6]
 80191ee:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80191f0:	68fb      	ldr	r3, [r7, #12]
 80191f2:	88ba      	ldrh	r2, [r7, #4]
 80191f4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80191f6:	8b3b      	ldrh	r3, [r7, #24]
 80191f8:	b2da      	uxtb	r2, r3
 80191fa:	68fb      	ldr	r3, [r7, #12]
 80191fc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80191fe:	68fb      	ldr	r3, [r7, #12]
 8019200:	7f3a      	ldrb	r2, [r7, #28]
 8019202:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8019204:	68fb      	ldr	r3, [r7, #12]
 8019206:	2201      	movs	r2, #1
 8019208:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801920a:	68fb      	ldr	r3, [r7, #12]
 801920c:	2200      	movs	r2, #0
 801920e:	73da      	strb	r2, [r3, #15]
}
 8019210:	bf00      	nop
 8019212:	3714      	adds	r7, #20
 8019214:	46bd      	mov	sp, r7
 8019216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801921a:	4770      	bx	lr

0801921c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801921c:	b580      	push	{r7, lr}
 801921e:	b08c      	sub	sp, #48	; 0x30
 8019220:	af02      	add	r7, sp, #8
 8019222:	4603      	mov	r3, r0
 8019224:	71fb      	strb	r3, [r7, #7]
 8019226:	460b      	mov	r3, r1
 8019228:	80bb      	strh	r3, [r7, #4]
 801922a:	4613      	mov	r3, r2
 801922c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801922e:	79fb      	ldrb	r3, [r7, #7]
 8019230:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8019232:	887b      	ldrh	r3, [r7, #2]
 8019234:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8019238:	d07f      	beq.n	801933a <pbuf_alloc+0x11e>
 801923a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801923e:	f300 80c8 	bgt.w	80193d2 <pbuf_alloc+0x1b6>
 8019242:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8019246:	d010      	beq.n	801926a <pbuf_alloc+0x4e>
 8019248:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801924c:	f300 80c1 	bgt.w	80193d2 <pbuf_alloc+0x1b6>
 8019250:	2b01      	cmp	r3, #1
 8019252:	d002      	beq.n	801925a <pbuf_alloc+0x3e>
 8019254:	2b41      	cmp	r3, #65	; 0x41
 8019256:	f040 80bc 	bne.w	80193d2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801925a:	887a      	ldrh	r2, [r7, #2]
 801925c:	88bb      	ldrh	r3, [r7, #4]
 801925e:	4619      	mov	r1, r3
 8019260:	2000      	movs	r0, #0
 8019262:	f000 f8d1 	bl	8019408 <pbuf_alloc_reference>
 8019266:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8019268:	e0bd      	b.n	80193e6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801926a:	2300      	movs	r3, #0
 801926c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801926e:	2300      	movs	r3, #0
 8019270:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8019272:	88bb      	ldrh	r3, [r7, #4]
 8019274:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8019276:	200d      	movs	r0, #13
 8019278:	f7ff feaa 	bl	8018fd0 <memp_malloc>
 801927c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801927e:	693b      	ldr	r3, [r7, #16]
 8019280:	2b00      	cmp	r3, #0
 8019282:	d109      	bne.n	8019298 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8019284:	f7ff ff76 	bl	8019174 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8019288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801928a:	2b00      	cmp	r3, #0
 801928c:	d002      	beq.n	8019294 <pbuf_alloc+0x78>
            pbuf_free(p);
 801928e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019290:	f000 fa22 	bl	80196d8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8019294:	2300      	movs	r3, #0
 8019296:	e0a7      	b.n	80193e8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8019298:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801929a:	3303      	adds	r3, #3
 801929c:	b29b      	uxth	r3, r3
 801929e:	f023 0303 	bic.w	r3, r3, #3
 80192a2:	b29b      	uxth	r3, r3
 80192a4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80192a8:	b29b      	uxth	r3, r3
 80192aa:	8b7a      	ldrh	r2, [r7, #26]
 80192ac:	4293      	cmp	r3, r2
 80192ae:	bf28      	it	cs
 80192b0:	4613      	movcs	r3, r2
 80192b2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80192b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80192b6:	3310      	adds	r3, #16
 80192b8:	693a      	ldr	r2, [r7, #16]
 80192ba:	4413      	add	r3, r2
 80192bc:	3303      	adds	r3, #3
 80192be:	f023 0303 	bic.w	r3, r3, #3
 80192c2:	4618      	mov	r0, r3
 80192c4:	89f9      	ldrh	r1, [r7, #14]
 80192c6:	8b7a      	ldrh	r2, [r7, #26]
 80192c8:	2300      	movs	r3, #0
 80192ca:	9301      	str	r3, [sp, #4]
 80192cc:	887b      	ldrh	r3, [r7, #2]
 80192ce:	9300      	str	r3, [sp, #0]
 80192d0:	460b      	mov	r3, r1
 80192d2:	4601      	mov	r1, r0
 80192d4:	6938      	ldr	r0, [r7, #16]
 80192d6:	f7ff ff77 	bl	80191c8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80192da:	693b      	ldr	r3, [r7, #16]
 80192dc:	685b      	ldr	r3, [r3, #4]
 80192de:	f003 0303 	and.w	r3, r3, #3
 80192e2:	2b00      	cmp	r3, #0
 80192e4:	d006      	beq.n	80192f4 <pbuf_alloc+0xd8>
 80192e6:	4b42      	ldr	r3, [pc, #264]	; (80193f0 <pbuf_alloc+0x1d4>)
 80192e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80192ec:	4941      	ldr	r1, [pc, #260]	; (80193f4 <pbuf_alloc+0x1d8>)
 80192ee:	4842      	ldr	r0, [pc, #264]	; (80193f8 <pbuf_alloc+0x1dc>)
 80192f0:	f008 fe24 	bl	8021f3c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80192f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80192f6:	3303      	adds	r3, #3
 80192f8:	f023 0303 	bic.w	r3, r3, #3
 80192fc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8019300:	d106      	bne.n	8019310 <pbuf_alloc+0xf4>
 8019302:	4b3b      	ldr	r3, [pc, #236]	; (80193f0 <pbuf_alloc+0x1d4>)
 8019304:	f44f 7281 	mov.w	r2, #258	; 0x102
 8019308:	493c      	ldr	r1, [pc, #240]	; (80193fc <pbuf_alloc+0x1e0>)
 801930a:	483b      	ldr	r0, [pc, #236]	; (80193f8 <pbuf_alloc+0x1dc>)
 801930c:	f008 fe16 	bl	8021f3c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8019310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019312:	2b00      	cmp	r3, #0
 8019314:	d102      	bne.n	801931c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8019316:	693b      	ldr	r3, [r7, #16]
 8019318:	627b      	str	r3, [r7, #36]	; 0x24
 801931a:	e002      	b.n	8019322 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801931c:	69fb      	ldr	r3, [r7, #28]
 801931e:	693a      	ldr	r2, [r7, #16]
 8019320:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8019322:	693b      	ldr	r3, [r7, #16]
 8019324:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8019326:	8b7a      	ldrh	r2, [r7, #26]
 8019328:	89fb      	ldrh	r3, [r7, #14]
 801932a:	1ad3      	subs	r3, r2, r3
 801932c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801932e:	2300      	movs	r3, #0
 8019330:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8019332:	8b7b      	ldrh	r3, [r7, #26]
 8019334:	2b00      	cmp	r3, #0
 8019336:	d19e      	bne.n	8019276 <pbuf_alloc+0x5a>
      break;
 8019338:	e055      	b.n	80193e6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801933a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801933c:	3303      	adds	r3, #3
 801933e:	b29b      	uxth	r3, r3
 8019340:	f023 0303 	bic.w	r3, r3, #3
 8019344:	b29a      	uxth	r2, r3
 8019346:	88bb      	ldrh	r3, [r7, #4]
 8019348:	3303      	adds	r3, #3
 801934a:	b29b      	uxth	r3, r3
 801934c:	f023 0303 	bic.w	r3, r3, #3
 8019350:	b29b      	uxth	r3, r3
 8019352:	4413      	add	r3, r2
 8019354:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8019356:	8b3b      	ldrh	r3, [r7, #24]
 8019358:	3310      	adds	r3, #16
 801935a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801935c:	8b3a      	ldrh	r2, [r7, #24]
 801935e:	88bb      	ldrh	r3, [r7, #4]
 8019360:	3303      	adds	r3, #3
 8019362:	f023 0303 	bic.w	r3, r3, #3
 8019366:	429a      	cmp	r2, r3
 8019368:	d306      	bcc.n	8019378 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801936a:	8afa      	ldrh	r2, [r7, #22]
 801936c:	88bb      	ldrh	r3, [r7, #4]
 801936e:	3303      	adds	r3, #3
 8019370:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8019374:	429a      	cmp	r2, r3
 8019376:	d201      	bcs.n	801937c <pbuf_alloc+0x160>
        return NULL;
 8019378:	2300      	movs	r3, #0
 801937a:	e035      	b.n	80193e8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801937c:	8afb      	ldrh	r3, [r7, #22]
 801937e:	4618      	mov	r0, r3
 8019380:	f7ff fcee 	bl	8018d60 <mem_malloc>
 8019384:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8019386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019388:	2b00      	cmp	r3, #0
 801938a:	d101      	bne.n	8019390 <pbuf_alloc+0x174>
        return NULL;
 801938c:	2300      	movs	r3, #0
 801938e:	e02b      	b.n	80193e8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8019390:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019392:	3310      	adds	r3, #16
 8019394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019396:	4413      	add	r3, r2
 8019398:	3303      	adds	r3, #3
 801939a:	f023 0303 	bic.w	r3, r3, #3
 801939e:	4618      	mov	r0, r3
 80193a0:	88b9      	ldrh	r1, [r7, #4]
 80193a2:	88ba      	ldrh	r2, [r7, #4]
 80193a4:	2300      	movs	r3, #0
 80193a6:	9301      	str	r3, [sp, #4]
 80193a8:	887b      	ldrh	r3, [r7, #2]
 80193aa:	9300      	str	r3, [sp, #0]
 80193ac:	460b      	mov	r3, r1
 80193ae:	4601      	mov	r1, r0
 80193b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80193b2:	f7ff ff09 	bl	80191c8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80193b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193b8:	685b      	ldr	r3, [r3, #4]
 80193ba:	f003 0303 	and.w	r3, r3, #3
 80193be:	2b00      	cmp	r3, #0
 80193c0:	d010      	beq.n	80193e4 <pbuf_alloc+0x1c8>
 80193c2:	4b0b      	ldr	r3, [pc, #44]	; (80193f0 <pbuf_alloc+0x1d4>)
 80193c4:	f44f 7291 	mov.w	r2, #290	; 0x122
 80193c8:	490d      	ldr	r1, [pc, #52]	; (8019400 <pbuf_alloc+0x1e4>)
 80193ca:	480b      	ldr	r0, [pc, #44]	; (80193f8 <pbuf_alloc+0x1dc>)
 80193cc:	f008 fdb6 	bl	8021f3c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80193d0:	e008      	b.n	80193e4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80193d2:	4b07      	ldr	r3, [pc, #28]	; (80193f0 <pbuf_alloc+0x1d4>)
 80193d4:	f240 1227 	movw	r2, #295	; 0x127
 80193d8:	490a      	ldr	r1, [pc, #40]	; (8019404 <pbuf_alloc+0x1e8>)
 80193da:	4807      	ldr	r0, [pc, #28]	; (80193f8 <pbuf_alloc+0x1dc>)
 80193dc:	f008 fdae 	bl	8021f3c <iprintf>
      return NULL;
 80193e0:	2300      	movs	r3, #0
 80193e2:	e001      	b.n	80193e8 <pbuf_alloc+0x1cc>
      break;
 80193e4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80193e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80193e8:	4618      	mov	r0, r3
 80193ea:	3728      	adds	r7, #40	; 0x28
 80193ec:	46bd      	mov	sp, r7
 80193ee:	bd80      	pop	{r7, pc}
 80193f0:	080243c0 	.word	0x080243c0
 80193f4:	080243f0 	.word	0x080243f0
 80193f8:	08024420 	.word	0x08024420
 80193fc:	08024448 	.word	0x08024448
 8019400:	0802447c 	.word	0x0802447c
 8019404:	080244a8 	.word	0x080244a8

08019408 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8019408:	b580      	push	{r7, lr}
 801940a:	b086      	sub	sp, #24
 801940c:	af02      	add	r7, sp, #8
 801940e:	6078      	str	r0, [r7, #4]
 8019410:	460b      	mov	r3, r1
 8019412:	807b      	strh	r3, [r7, #2]
 8019414:	4613      	mov	r3, r2
 8019416:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8019418:	883b      	ldrh	r3, [r7, #0]
 801941a:	2b41      	cmp	r3, #65	; 0x41
 801941c:	d009      	beq.n	8019432 <pbuf_alloc_reference+0x2a>
 801941e:	883b      	ldrh	r3, [r7, #0]
 8019420:	2b01      	cmp	r3, #1
 8019422:	d006      	beq.n	8019432 <pbuf_alloc_reference+0x2a>
 8019424:	4b0f      	ldr	r3, [pc, #60]	; (8019464 <pbuf_alloc_reference+0x5c>)
 8019426:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801942a:	490f      	ldr	r1, [pc, #60]	; (8019468 <pbuf_alloc_reference+0x60>)
 801942c:	480f      	ldr	r0, [pc, #60]	; (801946c <pbuf_alloc_reference+0x64>)
 801942e:	f008 fd85 	bl	8021f3c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8019432:	200c      	movs	r0, #12
 8019434:	f7ff fdcc 	bl	8018fd0 <memp_malloc>
 8019438:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801943a:	68fb      	ldr	r3, [r7, #12]
 801943c:	2b00      	cmp	r3, #0
 801943e:	d101      	bne.n	8019444 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8019440:	2300      	movs	r3, #0
 8019442:	e00b      	b.n	801945c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8019444:	8879      	ldrh	r1, [r7, #2]
 8019446:	887a      	ldrh	r2, [r7, #2]
 8019448:	2300      	movs	r3, #0
 801944a:	9301      	str	r3, [sp, #4]
 801944c:	883b      	ldrh	r3, [r7, #0]
 801944e:	9300      	str	r3, [sp, #0]
 8019450:	460b      	mov	r3, r1
 8019452:	6879      	ldr	r1, [r7, #4]
 8019454:	68f8      	ldr	r0, [r7, #12]
 8019456:	f7ff feb7 	bl	80191c8 <pbuf_init_alloced_pbuf>
  return p;
 801945a:	68fb      	ldr	r3, [r7, #12]
}
 801945c:	4618      	mov	r0, r3
 801945e:	3710      	adds	r7, #16
 8019460:	46bd      	mov	sp, r7
 8019462:	bd80      	pop	{r7, pc}
 8019464:	080243c0 	.word	0x080243c0
 8019468:	080244c4 	.word	0x080244c4
 801946c:	08024420 	.word	0x08024420

08019470 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8019470:	b580      	push	{r7, lr}
 8019472:	b088      	sub	sp, #32
 8019474:	af02      	add	r7, sp, #8
 8019476:	607b      	str	r3, [r7, #4]
 8019478:	4603      	mov	r3, r0
 801947a:	73fb      	strb	r3, [r7, #15]
 801947c:	460b      	mov	r3, r1
 801947e:	81bb      	strh	r3, [r7, #12]
 8019480:	4613      	mov	r3, r2
 8019482:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8019484:	7bfb      	ldrb	r3, [r7, #15]
 8019486:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8019488:	8a7b      	ldrh	r3, [r7, #18]
 801948a:	3303      	adds	r3, #3
 801948c:	f023 0203 	bic.w	r2, r3, #3
 8019490:	89bb      	ldrh	r3, [r7, #12]
 8019492:	441a      	add	r2, r3
 8019494:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019496:	429a      	cmp	r2, r3
 8019498:	d901      	bls.n	801949e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801949a:	2300      	movs	r3, #0
 801949c:	e018      	b.n	80194d0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801949e:	6a3b      	ldr	r3, [r7, #32]
 80194a0:	2b00      	cmp	r3, #0
 80194a2:	d007      	beq.n	80194b4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80194a4:	8a7b      	ldrh	r3, [r7, #18]
 80194a6:	3303      	adds	r3, #3
 80194a8:	f023 0303 	bic.w	r3, r3, #3
 80194ac:	6a3a      	ldr	r2, [r7, #32]
 80194ae:	4413      	add	r3, r2
 80194b0:	617b      	str	r3, [r7, #20]
 80194b2:	e001      	b.n	80194b8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80194b4:	2300      	movs	r3, #0
 80194b6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80194b8:	6878      	ldr	r0, [r7, #4]
 80194ba:	89b9      	ldrh	r1, [r7, #12]
 80194bc:	89ba      	ldrh	r2, [r7, #12]
 80194be:	2302      	movs	r3, #2
 80194c0:	9301      	str	r3, [sp, #4]
 80194c2:	897b      	ldrh	r3, [r7, #10]
 80194c4:	9300      	str	r3, [sp, #0]
 80194c6:	460b      	mov	r3, r1
 80194c8:	6979      	ldr	r1, [r7, #20]
 80194ca:	f7ff fe7d 	bl	80191c8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80194ce:	687b      	ldr	r3, [r7, #4]
}
 80194d0:	4618      	mov	r0, r3
 80194d2:	3718      	adds	r7, #24
 80194d4:	46bd      	mov	sp, r7
 80194d6:	bd80      	pop	{r7, pc}

080194d8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80194d8:	b580      	push	{r7, lr}
 80194da:	b084      	sub	sp, #16
 80194dc:	af00      	add	r7, sp, #0
 80194de:	6078      	str	r0, [r7, #4]
 80194e0:	460b      	mov	r3, r1
 80194e2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80194e4:	687b      	ldr	r3, [r7, #4]
 80194e6:	2b00      	cmp	r3, #0
 80194e8:	d106      	bne.n	80194f8 <pbuf_realloc+0x20>
 80194ea:	4b3a      	ldr	r3, [pc, #232]	; (80195d4 <pbuf_realloc+0xfc>)
 80194ec:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80194f0:	4939      	ldr	r1, [pc, #228]	; (80195d8 <pbuf_realloc+0x100>)
 80194f2:	483a      	ldr	r0, [pc, #232]	; (80195dc <pbuf_realloc+0x104>)
 80194f4:	f008 fd22 	bl	8021f3c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	891b      	ldrh	r3, [r3, #8]
 80194fc:	887a      	ldrh	r2, [r7, #2]
 80194fe:	429a      	cmp	r2, r3
 8019500:	d263      	bcs.n	80195ca <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	891a      	ldrh	r2, [r3, #8]
 8019506:	887b      	ldrh	r3, [r7, #2]
 8019508:	1ad3      	subs	r3, r2, r3
 801950a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801950c:	887b      	ldrh	r3, [r7, #2]
 801950e:	817b      	strh	r3, [r7, #10]
  q = p;
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8019514:	e018      	b.n	8019548 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8019516:	68fb      	ldr	r3, [r7, #12]
 8019518:	895b      	ldrh	r3, [r3, #10]
 801951a:	897a      	ldrh	r2, [r7, #10]
 801951c:	1ad3      	subs	r3, r2, r3
 801951e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8019520:	68fb      	ldr	r3, [r7, #12]
 8019522:	891a      	ldrh	r2, [r3, #8]
 8019524:	893b      	ldrh	r3, [r7, #8]
 8019526:	1ad3      	subs	r3, r2, r3
 8019528:	b29a      	uxth	r2, r3
 801952a:	68fb      	ldr	r3, [r7, #12]
 801952c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801952e:	68fb      	ldr	r3, [r7, #12]
 8019530:	681b      	ldr	r3, [r3, #0]
 8019532:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8019534:	68fb      	ldr	r3, [r7, #12]
 8019536:	2b00      	cmp	r3, #0
 8019538:	d106      	bne.n	8019548 <pbuf_realloc+0x70>
 801953a:	4b26      	ldr	r3, [pc, #152]	; (80195d4 <pbuf_realloc+0xfc>)
 801953c:	f240 12af 	movw	r2, #431	; 0x1af
 8019540:	4927      	ldr	r1, [pc, #156]	; (80195e0 <pbuf_realloc+0x108>)
 8019542:	4826      	ldr	r0, [pc, #152]	; (80195dc <pbuf_realloc+0x104>)
 8019544:	f008 fcfa 	bl	8021f3c <iprintf>
  while (rem_len > q->len) {
 8019548:	68fb      	ldr	r3, [r7, #12]
 801954a:	895b      	ldrh	r3, [r3, #10]
 801954c:	897a      	ldrh	r2, [r7, #10]
 801954e:	429a      	cmp	r2, r3
 8019550:	d8e1      	bhi.n	8019516 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8019552:	68fb      	ldr	r3, [r7, #12]
 8019554:	7b1b      	ldrb	r3, [r3, #12]
 8019556:	f003 030f 	and.w	r3, r3, #15
 801955a:	2b00      	cmp	r3, #0
 801955c:	d121      	bne.n	80195a2 <pbuf_realloc+0xca>
 801955e:	68fb      	ldr	r3, [r7, #12]
 8019560:	895b      	ldrh	r3, [r3, #10]
 8019562:	897a      	ldrh	r2, [r7, #10]
 8019564:	429a      	cmp	r2, r3
 8019566:	d01c      	beq.n	80195a2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8019568:	68fb      	ldr	r3, [r7, #12]
 801956a:	7b5b      	ldrb	r3, [r3, #13]
 801956c:	f003 0302 	and.w	r3, r3, #2
 8019570:	2b00      	cmp	r3, #0
 8019572:	d116      	bne.n	80195a2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8019574:	68fb      	ldr	r3, [r7, #12]
 8019576:	685a      	ldr	r2, [r3, #4]
 8019578:	68fb      	ldr	r3, [r7, #12]
 801957a:	1ad3      	subs	r3, r2, r3
 801957c:	b29a      	uxth	r2, r3
 801957e:	897b      	ldrh	r3, [r7, #10]
 8019580:	4413      	add	r3, r2
 8019582:	b29b      	uxth	r3, r3
 8019584:	4619      	mov	r1, r3
 8019586:	68f8      	ldr	r0, [r7, #12]
 8019588:	f7ff fae0 	bl	8018b4c <mem_trim>
 801958c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801958e:	68fb      	ldr	r3, [r7, #12]
 8019590:	2b00      	cmp	r3, #0
 8019592:	d106      	bne.n	80195a2 <pbuf_realloc+0xca>
 8019594:	4b0f      	ldr	r3, [pc, #60]	; (80195d4 <pbuf_realloc+0xfc>)
 8019596:	f240 12bd 	movw	r2, #445	; 0x1bd
 801959a:	4912      	ldr	r1, [pc, #72]	; (80195e4 <pbuf_realloc+0x10c>)
 801959c:	480f      	ldr	r0, [pc, #60]	; (80195dc <pbuf_realloc+0x104>)
 801959e:	f008 fccd 	bl	8021f3c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80195a2:	68fb      	ldr	r3, [r7, #12]
 80195a4:	897a      	ldrh	r2, [r7, #10]
 80195a6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80195a8:	68fb      	ldr	r3, [r7, #12]
 80195aa:	895a      	ldrh	r2, [r3, #10]
 80195ac:	68fb      	ldr	r3, [r7, #12]
 80195ae:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80195b0:	68fb      	ldr	r3, [r7, #12]
 80195b2:	681b      	ldr	r3, [r3, #0]
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	d004      	beq.n	80195c2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80195b8:	68fb      	ldr	r3, [r7, #12]
 80195ba:	681b      	ldr	r3, [r3, #0]
 80195bc:	4618      	mov	r0, r3
 80195be:	f000 f88b 	bl	80196d8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80195c2:	68fb      	ldr	r3, [r7, #12]
 80195c4:	2200      	movs	r2, #0
 80195c6:	601a      	str	r2, [r3, #0]
 80195c8:	e000      	b.n	80195cc <pbuf_realloc+0xf4>
    return;
 80195ca:	bf00      	nop

}
 80195cc:	3710      	adds	r7, #16
 80195ce:	46bd      	mov	sp, r7
 80195d0:	bd80      	pop	{r7, pc}
 80195d2:	bf00      	nop
 80195d4:	080243c0 	.word	0x080243c0
 80195d8:	080244d8 	.word	0x080244d8
 80195dc:	08024420 	.word	0x08024420
 80195e0:	080244f0 	.word	0x080244f0
 80195e4:	08024508 	.word	0x08024508

080195e8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80195e8:	b580      	push	{r7, lr}
 80195ea:	b086      	sub	sp, #24
 80195ec:	af00      	add	r7, sp, #0
 80195ee:	60f8      	str	r0, [r7, #12]
 80195f0:	60b9      	str	r1, [r7, #8]
 80195f2:	4613      	mov	r3, r2
 80195f4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80195f6:	68fb      	ldr	r3, [r7, #12]
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	d106      	bne.n	801960a <pbuf_add_header_impl+0x22>
 80195fc:	4b2b      	ldr	r3, [pc, #172]	; (80196ac <pbuf_add_header_impl+0xc4>)
 80195fe:	f240 12df 	movw	r2, #479	; 0x1df
 8019602:	492b      	ldr	r1, [pc, #172]	; (80196b0 <pbuf_add_header_impl+0xc8>)
 8019604:	482b      	ldr	r0, [pc, #172]	; (80196b4 <pbuf_add_header_impl+0xcc>)
 8019606:	f008 fc99 	bl	8021f3c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801960a:	68fb      	ldr	r3, [r7, #12]
 801960c:	2b00      	cmp	r3, #0
 801960e:	d003      	beq.n	8019618 <pbuf_add_header_impl+0x30>
 8019610:	68bb      	ldr	r3, [r7, #8]
 8019612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019616:	d301      	bcc.n	801961c <pbuf_add_header_impl+0x34>
    return 1;
 8019618:	2301      	movs	r3, #1
 801961a:	e043      	b.n	80196a4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801961c:	68bb      	ldr	r3, [r7, #8]
 801961e:	2b00      	cmp	r3, #0
 8019620:	d101      	bne.n	8019626 <pbuf_add_header_impl+0x3e>
    return 0;
 8019622:	2300      	movs	r3, #0
 8019624:	e03e      	b.n	80196a4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8019626:	68bb      	ldr	r3, [r7, #8]
 8019628:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801962a:	68fb      	ldr	r3, [r7, #12]
 801962c:	891a      	ldrh	r2, [r3, #8]
 801962e:	8a7b      	ldrh	r3, [r7, #18]
 8019630:	4413      	add	r3, r2
 8019632:	b29b      	uxth	r3, r3
 8019634:	8a7a      	ldrh	r2, [r7, #18]
 8019636:	429a      	cmp	r2, r3
 8019638:	d901      	bls.n	801963e <pbuf_add_header_impl+0x56>
    return 1;
 801963a:	2301      	movs	r3, #1
 801963c:	e032      	b.n	80196a4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801963e:	68fb      	ldr	r3, [r7, #12]
 8019640:	7b1b      	ldrb	r3, [r3, #12]
 8019642:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8019644:	8a3b      	ldrh	r3, [r7, #16]
 8019646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801964a:	2b00      	cmp	r3, #0
 801964c:	d00c      	beq.n	8019668 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801964e:	68fb      	ldr	r3, [r7, #12]
 8019650:	685a      	ldr	r2, [r3, #4]
 8019652:	68bb      	ldr	r3, [r7, #8]
 8019654:	425b      	negs	r3, r3
 8019656:	4413      	add	r3, r2
 8019658:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801965a:	68fb      	ldr	r3, [r7, #12]
 801965c:	3310      	adds	r3, #16
 801965e:	697a      	ldr	r2, [r7, #20]
 8019660:	429a      	cmp	r2, r3
 8019662:	d20d      	bcs.n	8019680 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8019664:	2301      	movs	r3, #1
 8019666:	e01d      	b.n	80196a4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8019668:	79fb      	ldrb	r3, [r7, #7]
 801966a:	2b00      	cmp	r3, #0
 801966c:	d006      	beq.n	801967c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801966e:	68fb      	ldr	r3, [r7, #12]
 8019670:	685a      	ldr	r2, [r3, #4]
 8019672:	68bb      	ldr	r3, [r7, #8]
 8019674:	425b      	negs	r3, r3
 8019676:	4413      	add	r3, r2
 8019678:	617b      	str	r3, [r7, #20]
 801967a:	e001      	b.n	8019680 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801967c:	2301      	movs	r3, #1
 801967e:	e011      	b.n	80196a4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8019680:	68fb      	ldr	r3, [r7, #12]
 8019682:	697a      	ldr	r2, [r7, #20]
 8019684:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8019686:	68fb      	ldr	r3, [r7, #12]
 8019688:	895a      	ldrh	r2, [r3, #10]
 801968a:	8a7b      	ldrh	r3, [r7, #18]
 801968c:	4413      	add	r3, r2
 801968e:	b29a      	uxth	r2, r3
 8019690:	68fb      	ldr	r3, [r7, #12]
 8019692:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8019694:	68fb      	ldr	r3, [r7, #12]
 8019696:	891a      	ldrh	r2, [r3, #8]
 8019698:	8a7b      	ldrh	r3, [r7, #18]
 801969a:	4413      	add	r3, r2
 801969c:	b29a      	uxth	r2, r3
 801969e:	68fb      	ldr	r3, [r7, #12]
 80196a0:	811a      	strh	r2, [r3, #8]


  return 0;
 80196a2:	2300      	movs	r3, #0
}
 80196a4:	4618      	mov	r0, r3
 80196a6:	3718      	adds	r7, #24
 80196a8:	46bd      	mov	sp, r7
 80196aa:	bd80      	pop	{r7, pc}
 80196ac:	080243c0 	.word	0x080243c0
 80196b0:	08024524 	.word	0x08024524
 80196b4:	08024420 	.word	0x08024420

080196b8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80196b8:	b580      	push	{r7, lr}
 80196ba:	b082      	sub	sp, #8
 80196bc:	af00      	add	r7, sp, #0
 80196be:	6078      	str	r0, [r7, #4]
 80196c0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80196c2:	2200      	movs	r2, #0
 80196c4:	6839      	ldr	r1, [r7, #0]
 80196c6:	6878      	ldr	r0, [r7, #4]
 80196c8:	f7ff ff8e 	bl	80195e8 <pbuf_add_header_impl>
 80196cc:	4603      	mov	r3, r0
}
 80196ce:	4618      	mov	r0, r3
 80196d0:	3708      	adds	r7, #8
 80196d2:	46bd      	mov	sp, r7
 80196d4:	bd80      	pop	{r7, pc}
	...

080196d8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80196d8:	b580      	push	{r7, lr}
 80196da:	b088      	sub	sp, #32
 80196dc:	af00      	add	r7, sp, #0
 80196de:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	2b00      	cmp	r3, #0
 80196e4:	d10b      	bne.n	80196fe <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	2b00      	cmp	r3, #0
 80196ea:	d106      	bne.n	80196fa <pbuf_free+0x22>
 80196ec:	4b3b      	ldr	r3, [pc, #236]	; (80197dc <pbuf_free+0x104>)
 80196ee:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80196f2:	493b      	ldr	r1, [pc, #236]	; (80197e0 <pbuf_free+0x108>)
 80196f4:	483b      	ldr	r0, [pc, #236]	; (80197e4 <pbuf_free+0x10c>)
 80196f6:	f008 fc21 	bl	8021f3c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80196fa:	2300      	movs	r3, #0
 80196fc:	e069      	b.n	80197d2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80196fe:	2300      	movs	r3, #0
 8019700:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8019702:	e062      	b.n	80197ca <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8019704:	f004 f8f8 	bl	801d8f8 <sys_arch_protect>
 8019708:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	7b9b      	ldrb	r3, [r3, #14]
 801970e:	2b00      	cmp	r3, #0
 8019710:	d106      	bne.n	8019720 <pbuf_free+0x48>
 8019712:	4b32      	ldr	r3, [pc, #200]	; (80197dc <pbuf_free+0x104>)
 8019714:	f240 22f1 	movw	r2, #753	; 0x2f1
 8019718:	4933      	ldr	r1, [pc, #204]	; (80197e8 <pbuf_free+0x110>)
 801971a:	4832      	ldr	r0, [pc, #200]	; (80197e4 <pbuf_free+0x10c>)
 801971c:	f008 fc0e 	bl	8021f3c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	7b9b      	ldrb	r3, [r3, #14]
 8019724:	3b01      	subs	r3, #1
 8019726:	b2da      	uxtb	r2, r3
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	739a      	strb	r2, [r3, #14]
 801972c:	687b      	ldr	r3, [r7, #4]
 801972e:	7b9b      	ldrb	r3, [r3, #14]
 8019730:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8019732:	69b8      	ldr	r0, [r7, #24]
 8019734:	f004 f8ee 	bl	801d914 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8019738:	7dfb      	ldrb	r3, [r7, #23]
 801973a:	2b00      	cmp	r3, #0
 801973c:	d143      	bne.n	80197c6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	681b      	ldr	r3, [r3, #0]
 8019742:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	7b1b      	ldrb	r3, [r3, #12]
 8019748:	f003 030f 	and.w	r3, r3, #15
 801974c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801974e:	687b      	ldr	r3, [r7, #4]
 8019750:	7b5b      	ldrb	r3, [r3, #13]
 8019752:	f003 0302 	and.w	r3, r3, #2
 8019756:	2b00      	cmp	r3, #0
 8019758:	d011      	beq.n	801977e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801975e:	68bb      	ldr	r3, [r7, #8]
 8019760:	691b      	ldr	r3, [r3, #16]
 8019762:	2b00      	cmp	r3, #0
 8019764:	d106      	bne.n	8019774 <pbuf_free+0x9c>
 8019766:	4b1d      	ldr	r3, [pc, #116]	; (80197dc <pbuf_free+0x104>)
 8019768:	f240 22ff 	movw	r2, #767	; 0x2ff
 801976c:	491f      	ldr	r1, [pc, #124]	; (80197ec <pbuf_free+0x114>)
 801976e:	481d      	ldr	r0, [pc, #116]	; (80197e4 <pbuf_free+0x10c>)
 8019770:	f008 fbe4 	bl	8021f3c <iprintf>
        pc->custom_free_function(p);
 8019774:	68bb      	ldr	r3, [r7, #8]
 8019776:	691b      	ldr	r3, [r3, #16]
 8019778:	6878      	ldr	r0, [r7, #4]
 801977a:	4798      	blx	r3
 801977c:	e01d      	b.n	80197ba <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801977e:	7bfb      	ldrb	r3, [r7, #15]
 8019780:	2b02      	cmp	r3, #2
 8019782:	d104      	bne.n	801978e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8019784:	6879      	ldr	r1, [r7, #4]
 8019786:	200d      	movs	r0, #13
 8019788:	f7ff fc74 	bl	8019074 <memp_free>
 801978c:	e015      	b.n	80197ba <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801978e:	7bfb      	ldrb	r3, [r7, #15]
 8019790:	2b01      	cmp	r3, #1
 8019792:	d104      	bne.n	801979e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8019794:	6879      	ldr	r1, [r7, #4]
 8019796:	200c      	movs	r0, #12
 8019798:	f7ff fc6c 	bl	8019074 <memp_free>
 801979c:	e00d      	b.n	80197ba <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801979e:	7bfb      	ldrb	r3, [r7, #15]
 80197a0:	2b00      	cmp	r3, #0
 80197a2:	d103      	bne.n	80197ac <pbuf_free+0xd4>
          mem_free(p);
 80197a4:	6878      	ldr	r0, [r7, #4]
 80197a6:	f7ff f941 	bl	8018a2c <mem_free>
 80197aa:	e006      	b.n	80197ba <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80197ac:	4b0b      	ldr	r3, [pc, #44]	; (80197dc <pbuf_free+0x104>)
 80197ae:	f240 320f 	movw	r2, #783	; 0x30f
 80197b2:	490f      	ldr	r1, [pc, #60]	; (80197f0 <pbuf_free+0x118>)
 80197b4:	480b      	ldr	r0, [pc, #44]	; (80197e4 <pbuf_free+0x10c>)
 80197b6:	f008 fbc1 	bl	8021f3c <iprintf>
        }
      }
      count++;
 80197ba:	7ffb      	ldrb	r3, [r7, #31]
 80197bc:	3301      	adds	r3, #1
 80197be:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80197c0:	693b      	ldr	r3, [r7, #16]
 80197c2:	607b      	str	r3, [r7, #4]
 80197c4:	e001      	b.n	80197ca <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80197c6:	2300      	movs	r3, #0
 80197c8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	2b00      	cmp	r3, #0
 80197ce:	d199      	bne.n	8019704 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80197d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80197d2:	4618      	mov	r0, r3
 80197d4:	3720      	adds	r7, #32
 80197d6:	46bd      	mov	sp, r7
 80197d8:	bd80      	pop	{r7, pc}
 80197da:	bf00      	nop
 80197dc:	080243c0 	.word	0x080243c0
 80197e0:	08024524 	.word	0x08024524
 80197e4:	08024420 	.word	0x08024420
 80197e8:	08024550 	.word	0x08024550
 80197ec:	08024568 	.word	0x08024568
 80197f0:	0802458c 	.word	0x0802458c

080197f4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80197f4:	b480      	push	{r7}
 80197f6:	b085      	sub	sp, #20
 80197f8:	af00      	add	r7, sp, #0
 80197fa:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80197fc:	2300      	movs	r3, #0
 80197fe:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8019800:	e005      	b.n	801980e <pbuf_clen+0x1a>
    ++len;
 8019802:	89fb      	ldrh	r3, [r7, #14]
 8019804:	3301      	adds	r3, #1
 8019806:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	681b      	ldr	r3, [r3, #0]
 801980c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	2b00      	cmp	r3, #0
 8019812:	d1f6      	bne.n	8019802 <pbuf_clen+0xe>
  }
  return len;
 8019814:	89fb      	ldrh	r3, [r7, #14]
}
 8019816:	4618      	mov	r0, r3
 8019818:	3714      	adds	r7, #20
 801981a:	46bd      	mov	sp, r7
 801981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019820:	4770      	bx	lr
	...

08019824 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8019824:	b580      	push	{r7, lr}
 8019826:	b084      	sub	sp, #16
 8019828:	af00      	add	r7, sp, #0
 801982a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	2b00      	cmp	r3, #0
 8019830:	d016      	beq.n	8019860 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8019832:	f004 f861 	bl	801d8f8 <sys_arch_protect>
 8019836:	60f8      	str	r0, [r7, #12]
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	7b9b      	ldrb	r3, [r3, #14]
 801983c:	3301      	adds	r3, #1
 801983e:	b2da      	uxtb	r2, r3
 8019840:	687b      	ldr	r3, [r7, #4]
 8019842:	739a      	strb	r2, [r3, #14]
 8019844:	68f8      	ldr	r0, [r7, #12]
 8019846:	f004 f865 	bl	801d914 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	7b9b      	ldrb	r3, [r3, #14]
 801984e:	2b00      	cmp	r3, #0
 8019850:	d106      	bne.n	8019860 <pbuf_ref+0x3c>
 8019852:	4b05      	ldr	r3, [pc, #20]	; (8019868 <pbuf_ref+0x44>)
 8019854:	f240 3242 	movw	r2, #834	; 0x342
 8019858:	4904      	ldr	r1, [pc, #16]	; (801986c <pbuf_ref+0x48>)
 801985a:	4805      	ldr	r0, [pc, #20]	; (8019870 <pbuf_ref+0x4c>)
 801985c:	f008 fb6e 	bl	8021f3c <iprintf>
  }
}
 8019860:	bf00      	nop
 8019862:	3710      	adds	r7, #16
 8019864:	46bd      	mov	sp, r7
 8019866:	bd80      	pop	{r7, pc}
 8019868:	080243c0 	.word	0x080243c0
 801986c:	080245a0 	.word	0x080245a0
 8019870:	08024420 	.word	0x08024420

08019874 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8019874:	b580      	push	{r7, lr}
 8019876:	b084      	sub	sp, #16
 8019878:	af00      	add	r7, sp, #0
 801987a:	6078      	str	r0, [r7, #4]
 801987c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	2b00      	cmp	r3, #0
 8019882:	d002      	beq.n	801988a <pbuf_cat+0x16>
 8019884:	683b      	ldr	r3, [r7, #0]
 8019886:	2b00      	cmp	r3, #0
 8019888:	d107      	bne.n	801989a <pbuf_cat+0x26>
 801988a:	4b20      	ldr	r3, [pc, #128]	; (801990c <pbuf_cat+0x98>)
 801988c:	f240 3259 	movw	r2, #857	; 0x359
 8019890:	491f      	ldr	r1, [pc, #124]	; (8019910 <pbuf_cat+0x9c>)
 8019892:	4820      	ldr	r0, [pc, #128]	; (8019914 <pbuf_cat+0xa0>)
 8019894:	f008 fb52 	bl	8021f3c <iprintf>
 8019898:	e034      	b.n	8019904 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	60fb      	str	r3, [r7, #12]
 801989e:	e00a      	b.n	80198b6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80198a0:	68fb      	ldr	r3, [r7, #12]
 80198a2:	891a      	ldrh	r2, [r3, #8]
 80198a4:	683b      	ldr	r3, [r7, #0]
 80198a6:	891b      	ldrh	r3, [r3, #8]
 80198a8:	4413      	add	r3, r2
 80198aa:	b29a      	uxth	r2, r3
 80198ac:	68fb      	ldr	r3, [r7, #12]
 80198ae:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80198b0:	68fb      	ldr	r3, [r7, #12]
 80198b2:	681b      	ldr	r3, [r3, #0]
 80198b4:	60fb      	str	r3, [r7, #12]
 80198b6:	68fb      	ldr	r3, [r7, #12]
 80198b8:	681b      	ldr	r3, [r3, #0]
 80198ba:	2b00      	cmp	r3, #0
 80198bc:	d1f0      	bne.n	80198a0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80198be:	68fb      	ldr	r3, [r7, #12]
 80198c0:	891a      	ldrh	r2, [r3, #8]
 80198c2:	68fb      	ldr	r3, [r7, #12]
 80198c4:	895b      	ldrh	r3, [r3, #10]
 80198c6:	429a      	cmp	r2, r3
 80198c8:	d006      	beq.n	80198d8 <pbuf_cat+0x64>
 80198ca:	4b10      	ldr	r3, [pc, #64]	; (801990c <pbuf_cat+0x98>)
 80198cc:	f240 3262 	movw	r2, #866	; 0x362
 80198d0:	4911      	ldr	r1, [pc, #68]	; (8019918 <pbuf_cat+0xa4>)
 80198d2:	4810      	ldr	r0, [pc, #64]	; (8019914 <pbuf_cat+0xa0>)
 80198d4:	f008 fb32 	bl	8021f3c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80198d8:	68fb      	ldr	r3, [r7, #12]
 80198da:	681b      	ldr	r3, [r3, #0]
 80198dc:	2b00      	cmp	r3, #0
 80198de:	d006      	beq.n	80198ee <pbuf_cat+0x7a>
 80198e0:	4b0a      	ldr	r3, [pc, #40]	; (801990c <pbuf_cat+0x98>)
 80198e2:	f240 3263 	movw	r2, #867	; 0x363
 80198e6:	490d      	ldr	r1, [pc, #52]	; (801991c <pbuf_cat+0xa8>)
 80198e8:	480a      	ldr	r0, [pc, #40]	; (8019914 <pbuf_cat+0xa0>)
 80198ea:	f008 fb27 	bl	8021f3c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80198ee:	68fb      	ldr	r3, [r7, #12]
 80198f0:	891a      	ldrh	r2, [r3, #8]
 80198f2:	683b      	ldr	r3, [r7, #0]
 80198f4:	891b      	ldrh	r3, [r3, #8]
 80198f6:	4413      	add	r3, r2
 80198f8:	b29a      	uxth	r2, r3
 80198fa:	68fb      	ldr	r3, [r7, #12]
 80198fc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80198fe:	68fb      	ldr	r3, [r7, #12]
 8019900:	683a      	ldr	r2, [r7, #0]
 8019902:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8019904:	3710      	adds	r7, #16
 8019906:	46bd      	mov	sp, r7
 8019908:	bd80      	pop	{r7, pc}
 801990a:	bf00      	nop
 801990c:	080243c0 	.word	0x080243c0
 8019910:	080245b4 	.word	0x080245b4
 8019914:	08024420 	.word	0x08024420
 8019918:	080245ec 	.word	0x080245ec
 801991c:	0802461c 	.word	0x0802461c

08019920 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8019920:	b580      	push	{r7, lr}
 8019922:	b088      	sub	sp, #32
 8019924:	af00      	add	r7, sp, #0
 8019926:	60f8      	str	r0, [r7, #12]
 8019928:	60b9      	str	r1, [r7, #8]
 801992a:	4611      	mov	r1, r2
 801992c:	461a      	mov	r2, r3
 801992e:	460b      	mov	r3, r1
 8019930:	80fb      	strh	r3, [r7, #6]
 8019932:	4613      	mov	r3, r2
 8019934:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8019936:	2300      	movs	r3, #0
 8019938:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801993a:	2300      	movs	r3, #0
 801993c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801993e:	68fb      	ldr	r3, [r7, #12]
 8019940:	2b00      	cmp	r3, #0
 8019942:	d108      	bne.n	8019956 <pbuf_copy_partial+0x36>
 8019944:	4b2b      	ldr	r3, [pc, #172]	; (80199f4 <pbuf_copy_partial+0xd4>)
 8019946:	f240 420a 	movw	r2, #1034	; 0x40a
 801994a:	492b      	ldr	r1, [pc, #172]	; (80199f8 <pbuf_copy_partial+0xd8>)
 801994c:	482b      	ldr	r0, [pc, #172]	; (80199fc <pbuf_copy_partial+0xdc>)
 801994e:	f008 faf5 	bl	8021f3c <iprintf>
 8019952:	2300      	movs	r3, #0
 8019954:	e04a      	b.n	80199ec <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8019956:	68bb      	ldr	r3, [r7, #8]
 8019958:	2b00      	cmp	r3, #0
 801995a:	d108      	bne.n	801996e <pbuf_copy_partial+0x4e>
 801995c:	4b25      	ldr	r3, [pc, #148]	; (80199f4 <pbuf_copy_partial+0xd4>)
 801995e:	f240 420b 	movw	r2, #1035	; 0x40b
 8019962:	4927      	ldr	r1, [pc, #156]	; (8019a00 <pbuf_copy_partial+0xe0>)
 8019964:	4825      	ldr	r0, [pc, #148]	; (80199fc <pbuf_copy_partial+0xdc>)
 8019966:	f008 fae9 	bl	8021f3c <iprintf>
 801996a:	2300      	movs	r3, #0
 801996c:	e03e      	b.n	80199ec <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801996e:	68fb      	ldr	r3, [r7, #12]
 8019970:	61fb      	str	r3, [r7, #28]
 8019972:	e034      	b.n	80199de <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8019974:	88bb      	ldrh	r3, [r7, #4]
 8019976:	2b00      	cmp	r3, #0
 8019978:	d00a      	beq.n	8019990 <pbuf_copy_partial+0x70>
 801997a:	69fb      	ldr	r3, [r7, #28]
 801997c:	895b      	ldrh	r3, [r3, #10]
 801997e:	88ba      	ldrh	r2, [r7, #4]
 8019980:	429a      	cmp	r2, r3
 8019982:	d305      	bcc.n	8019990 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8019984:	69fb      	ldr	r3, [r7, #28]
 8019986:	895b      	ldrh	r3, [r3, #10]
 8019988:	88ba      	ldrh	r2, [r7, #4]
 801998a:	1ad3      	subs	r3, r2, r3
 801998c:	80bb      	strh	r3, [r7, #4]
 801998e:	e023      	b.n	80199d8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8019990:	69fb      	ldr	r3, [r7, #28]
 8019992:	895a      	ldrh	r2, [r3, #10]
 8019994:	88bb      	ldrh	r3, [r7, #4]
 8019996:	1ad3      	subs	r3, r2, r3
 8019998:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801999a:	8b3a      	ldrh	r2, [r7, #24]
 801999c:	88fb      	ldrh	r3, [r7, #6]
 801999e:	429a      	cmp	r2, r3
 80199a0:	d901      	bls.n	80199a6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80199a2:	88fb      	ldrh	r3, [r7, #6]
 80199a4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80199a6:	8b7b      	ldrh	r3, [r7, #26]
 80199a8:	68ba      	ldr	r2, [r7, #8]
 80199aa:	18d0      	adds	r0, r2, r3
 80199ac:	69fb      	ldr	r3, [r7, #28]
 80199ae:	685a      	ldr	r2, [r3, #4]
 80199b0:	88bb      	ldrh	r3, [r7, #4]
 80199b2:	4413      	add	r3, r2
 80199b4:	8b3a      	ldrh	r2, [r7, #24]
 80199b6:	4619      	mov	r1, r3
 80199b8:	f007 fbfe 	bl	80211b8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80199bc:	8afa      	ldrh	r2, [r7, #22]
 80199be:	8b3b      	ldrh	r3, [r7, #24]
 80199c0:	4413      	add	r3, r2
 80199c2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80199c4:	8b7a      	ldrh	r2, [r7, #26]
 80199c6:	8b3b      	ldrh	r3, [r7, #24]
 80199c8:	4413      	add	r3, r2
 80199ca:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80199cc:	88fa      	ldrh	r2, [r7, #6]
 80199ce:	8b3b      	ldrh	r3, [r7, #24]
 80199d0:	1ad3      	subs	r3, r2, r3
 80199d2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80199d4:	2300      	movs	r3, #0
 80199d6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80199d8:	69fb      	ldr	r3, [r7, #28]
 80199da:	681b      	ldr	r3, [r3, #0]
 80199dc:	61fb      	str	r3, [r7, #28]
 80199de:	88fb      	ldrh	r3, [r7, #6]
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	d002      	beq.n	80199ea <pbuf_copy_partial+0xca>
 80199e4:	69fb      	ldr	r3, [r7, #28]
 80199e6:	2b00      	cmp	r3, #0
 80199e8:	d1c4      	bne.n	8019974 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80199ea:	8afb      	ldrh	r3, [r7, #22]
}
 80199ec:	4618      	mov	r0, r3
 80199ee:	3720      	adds	r7, #32
 80199f0:	46bd      	mov	sp, r7
 80199f2:	bd80      	pop	{r7, pc}
 80199f4:	080243c0 	.word	0x080243c0
 80199f8:	08024708 	.word	0x08024708
 80199fc:	08024420 	.word	0x08024420
 8019a00:	08024728 	.word	0x08024728

08019a04 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8019a04:	b580      	push	{r7, lr}
 8019a06:	b088      	sub	sp, #32
 8019a08:	af00      	add	r7, sp, #0
 8019a0a:	60f8      	str	r0, [r7, #12]
 8019a0c:	60b9      	str	r1, [r7, #8]
 8019a0e:	4613      	mov	r3, r2
 8019a10:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8019a12:	88fb      	ldrh	r3, [r7, #6]
 8019a14:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8019a16:	2300      	movs	r3, #0
 8019a18:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8019a1a:	68fb      	ldr	r3, [r7, #12]
 8019a1c:	2b00      	cmp	r3, #0
 8019a1e:	d109      	bne.n	8019a34 <pbuf_take+0x30>
 8019a20:	4b3a      	ldr	r3, [pc, #232]	; (8019b0c <pbuf_take+0x108>)
 8019a22:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8019a26:	493a      	ldr	r1, [pc, #232]	; (8019b10 <pbuf_take+0x10c>)
 8019a28:	483a      	ldr	r0, [pc, #232]	; (8019b14 <pbuf_take+0x110>)
 8019a2a:	f008 fa87 	bl	8021f3c <iprintf>
 8019a2e:	f06f 030f 	mvn.w	r3, #15
 8019a32:	e067      	b.n	8019b04 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8019a34:	68bb      	ldr	r3, [r7, #8]
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	d109      	bne.n	8019a4e <pbuf_take+0x4a>
 8019a3a:	4b34      	ldr	r3, [pc, #208]	; (8019b0c <pbuf_take+0x108>)
 8019a3c:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8019a40:	4935      	ldr	r1, [pc, #212]	; (8019b18 <pbuf_take+0x114>)
 8019a42:	4834      	ldr	r0, [pc, #208]	; (8019b14 <pbuf_take+0x110>)
 8019a44:	f008 fa7a 	bl	8021f3c <iprintf>
 8019a48:	f06f 030f 	mvn.w	r3, #15
 8019a4c:	e05a      	b.n	8019b04 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8019a4e:	68fb      	ldr	r3, [r7, #12]
 8019a50:	891b      	ldrh	r3, [r3, #8]
 8019a52:	88fa      	ldrh	r2, [r7, #6]
 8019a54:	429a      	cmp	r2, r3
 8019a56:	d909      	bls.n	8019a6c <pbuf_take+0x68>
 8019a58:	4b2c      	ldr	r3, [pc, #176]	; (8019b0c <pbuf_take+0x108>)
 8019a5a:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8019a5e:	492f      	ldr	r1, [pc, #188]	; (8019b1c <pbuf_take+0x118>)
 8019a60:	482c      	ldr	r0, [pc, #176]	; (8019b14 <pbuf_take+0x110>)
 8019a62:	f008 fa6b 	bl	8021f3c <iprintf>
 8019a66:	f04f 33ff 	mov.w	r3, #4294967295
 8019a6a:	e04b      	b.n	8019b04 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8019a6c:	68fb      	ldr	r3, [r7, #12]
 8019a6e:	2b00      	cmp	r3, #0
 8019a70:	d007      	beq.n	8019a82 <pbuf_take+0x7e>
 8019a72:	68bb      	ldr	r3, [r7, #8]
 8019a74:	2b00      	cmp	r3, #0
 8019a76:	d004      	beq.n	8019a82 <pbuf_take+0x7e>
 8019a78:	68fb      	ldr	r3, [r7, #12]
 8019a7a:	891b      	ldrh	r3, [r3, #8]
 8019a7c:	88fa      	ldrh	r2, [r7, #6]
 8019a7e:	429a      	cmp	r2, r3
 8019a80:	d902      	bls.n	8019a88 <pbuf_take+0x84>
    return ERR_ARG;
 8019a82:	f06f 030f 	mvn.w	r3, #15
 8019a86:	e03d      	b.n	8019b04 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8019a88:	68fb      	ldr	r3, [r7, #12]
 8019a8a:	61fb      	str	r3, [r7, #28]
 8019a8c:	e028      	b.n	8019ae0 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8019a8e:	69fb      	ldr	r3, [r7, #28]
 8019a90:	2b00      	cmp	r3, #0
 8019a92:	d106      	bne.n	8019aa2 <pbuf_take+0x9e>
 8019a94:	4b1d      	ldr	r3, [pc, #116]	; (8019b0c <pbuf_take+0x108>)
 8019a96:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8019a9a:	4921      	ldr	r1, [pc, #132]	; (8019b20 <pbuf_take+0x11c>)
 8019a9c:	481d      	ldr	r0, [pc, #116]	; (8019b14 <pbuf_take+0x110>)
 8019a9e:	f008 fa4d 	bl	8021f3c <iprintf>
    buf_copy_len = total_copy_len;
 8019aa2:	697b      	ldr	r3, [r7, #20]
 8019aa4:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8019aa6:	69fb      	ldr	r3, [r7, #28]
 8019aa8:	895b      	ldrh	r3, [r3, #10]
 8019aaa:	461a      	mov	r2, r3
 8019aac:	69bb      	ldr	r3, [r7, #24]
 8019aae:	4293      	cmp	r3, r2
 8019ab0:	d902      	bls.n	8019ab8 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8019ab2:	69fb      	ldr	r3, [r7, #28]
 8019ab4:	895b      	ldrh	r3, [r3, #10]
 8019ab6:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8019ab8:	69fb      	ldr	r3, [r7, #28]
 8019aba:	6858      	ldr	r0, [r3, #4]
 8019abc:	68ba      	ldr	r2, [r7, #8]
 8019abe:	693b      	ldr	r3, [r7, #16]
 8019ac0:	4413      	add	r3, r2
 8019ac2:	69ba      	ldr	r2, [r7, #24]
 8019ac4:	4619      	mov	r1, r3
 8019ac6:	f007 fb77 	bl	80211b8 <memcpy>
    total_copy_len -= buf_copy_len;
 8019aca:	697a      	ldr	r2, [r7, #20]
 8019acc:	69bb      	ldr	r3, [r7, #24]
 8019ace:	1ad3      	subs	r3, r2, r3
 8019ad0:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8019ad2:	693a      	ldr	r2, [r7, #16]
 8019ad4:	69bb      	ldr	r3, [r7, #24]
 8019ad6:	4413      	add	r3, r2
 8019ad8:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8019ada:	69fb      	ldr	r3, [r7, #28]
 8019adc:	681b      	ldr	r3, [r3, #0]
 8019ade:	61fb      	str	r3, [r7, #28]
 8019ae0:	697b      	ldr	r3, [r7, #20]
 8019ae2:	2b00      	cmp	r3, #0
 8019ae4:	d1d3      	bne.n	8019a8e <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8019ae6:	697b      	ldr	r3, [r7, #20]
 8019ae8:	2b00      	cmp	r3, #0
 8019aea:	d103      	bne.n	8019af4 <pbuf_take+0xf0>
 8019aec:	88fb      	ldrh	r3, [r7, #6]
 8019aee:	693a      	ldr	r2, [r7, #16]
 8019af0:	429a      	cmp	r2, r3
 8019af2:	d006      	beq.n	8019b02 <pbuf_take+0xfe>
 8019af4:	4b05      	ldr	r3, [pc, #20]	; (8019b0c <pbuf_take+0x108>)
 8019af6:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8019afa:	490a      	ldr	r1, [pc, #40]	; (8019b24 <pbuf_take+0x120>)
 8019afc:	4805      	ldr	r0, [pc, #20]	; (8019b14 <pbuf_take+0x110>)
 8019afe:	f008 fa1d 	bl	8021f3c <iprintf>
  return ERR_OK;
 8019b02:	2300      	movs	r3, #0
}
 8019b04:	4618      	mov	r0, r3
 8019b06:	3720      	adds	r7, #32
 8019b08:	46bd      	mov	sp, r7
 8019b0a:	bd80      	pop	{r7, pc}
 8019b0c:	080243c0 	.word	0x080243c0
 8019b10:	08024798 	.word	0x08024798
 8019b14:	08024420 	.word	0x08024420
 8019b18:	080247b0 	.word	0x080247b0
 8019b1c:	080247cc 	.word	0x080247cc
 8019b20:	080247ec 	.word	0x080247ec
 8019b24:	08024804 	.word	0x08024804

08019b28 <tcp_free>:
}

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8019b28:	b580      	push	{r7, lr}
 8019b2a:	b082      	sub	sp, #8
 8019b2c:	af00      	add	r7, sp, #0
 8019b2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8019b30:	687b      	ldr	r3, [r7, #4]
 8019b32:	7d1b      	ldrb	r3, [r3, #20]
 8019b34:	2b01      	cmp	r3, #1
 8019b36:	d105      	bne.n	8019b44 <tcp_free+0x1c>
 8019b38:	4b06      	ldr	r3, [pc, #24]	; (8019b54 <tcp_free+0x2c>)
 8019b3a:	22d4      	movs	r2, #212	; 0xd4
 8019b3c:	4906      	ldr	r1, [pc, #24]	; (8019b58 <tcp_free+0x30>)
 8019b3e:	4807      	ldr	r0, [pc, #28]	; (8019b5c <tcp_free+0x34>)
 8019b40:	f008 f9fc 	bl	8021f3c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8019b44:	6879      	ldr	r1, [r7, #4]
 8019b46:	2001      	movs	r0, #1
 8019b48:	f7ff fa94 	bl	8019074 <memp_free>
}
 8019b4c:	bf00      	nop
 8019b4e:	3708      	adds	r7, #8
 8019b50:	46bd      	mov	sp, r7
 8019b52:	bd80      	pop	{r7, pc}
 8019b54:	080248c0 	.word	0x080248c0
 8019b58:	080248f0 	.word	0x080248f0
 8019b5c:	08024904 	.word	0x08024904

08019b60 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8019b60:	b580      	push	{r7, lr}
 8019b62:	b082      	sub	sp, #8
 8019b64:	af00      	add	r7, sp, #0
 8019b66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8019b68:	687b      	ldr	r3, [r7, #4]
 8019b6a:	7d1b      	ldrb	r3, [r3, #20]
 8019b6c:	2b01      	cmp	r3, #1
 8019b6e:	d105      	bne.n	8019b7c <tcp_free_listen+0x1c>
 8019b70:	4b06      	ldr	r3, [pc, #24]	; (8019b8c <tcp_free_listen+0x2c>)
 8019b72:	22df      	movs	r2, #223	; 0xdf
 8019b74:	4906      	ldr	r1, [pc, #24]	; (8019b90 <tcp_free_listen+0x30>)
 8019b76:	4807      	ldr	r0, [pc, #28]	; (8019b94 <tcp_free_listen+0x34>)
 8019b78:	f008 f9e0 	bl	8021f3c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8019b7c:	6879      	ldr	r1, [r7, #4]
 8019b7e:	2002      	movs	r0, #2
 8019b80:	f7ff fa78 	bl	8019074 <memp_free>
}
 8019b84:	bf00      	nop
 8019b86:	3708      	adds	r7, #8
 8019b88:	46bd      	mov	sp, r7
 8019b8a:	bd80      	pop	{r7, pc}
 8019b8c:	080248c0 	.word	0x080248c0
 8019b90:	0802492c 	.word	0x0802492c
 8019b94:	08024904 	.word	0x08024904

08019b98 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8019b98:	b580      	push	{r7, lr}
 8019b9a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8019b9c:	f001 f800 	bl	801aba0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8019ba0:	4b07      	ldr	r3, [pc, #28]	; (8019bc0 <tcp_tmr+0x28>)
 8019ba2:	781b      	ldrb	r3, [r3, #0]
 8019ba4:	3301      	adds	r3, #1
 8019ba6:	b2da      	uxtb	r2, r3
 8019ba8:	4b05      	ldr	r3, [pc, #20]	; (8019bc0 <tcp_tmr+0x28>)
 8019baa:	701a      	strb	r2, [r3, #0]
 8019bac:	4b04      	ldr	r3, [pc, #16]	; (8019bc0 <tcp_tmr+0x28>)
 8019bae:	781b      	ldrb	r3, [r3, #0]
 8019bb0:	f003 0301 	and.w	r3, r3, #1
 8019bb4:	2b00      	cmp	r3, #0
 8019bb6:	d001      	beq.n	8019bbc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8019bb8:	f000 fcb2 	bl	801a520 <tcp_slowtmr>
  }
}
 8019bbc:	bf00      	nop
 8019bbe:	bd80      	pop	{r7, pc}
 8019bc0:	24013fe0 	.word	0x24013fe0

08019bc4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8019bc4:	b580      	push	{r7, lr}
 8019bc6:	b084      	sub	sp, #16
 8019bc8:	af00      	add	r7, sp, #0
 8019bca:	6078      	str	r0, [r7, #4]
 8019bcc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8019bce:	683b      	ldr	r3, [r7, #0]
 8019bd0:	2b00      	cmp	r3, #0
 8019bd2:	d105      	bne.n	8019be0 <tcp_remove_listener+0x1c>
 8019bd4:	4b0d      	ldr	r3, [pc, #52]	; (8019c0c <tcp_remove_listener+0x48>)
 8019bd6:	22ff      	movs	r2, #255	; 0xff
 8019bd8:	490d      	ldr	r1, [pc, #52]	; (8019c10 <tcp_remove_listener+0x4c>)
 8019bda:	480e      	ldr	r0, [pc, #56]	; (8019c14 <tcp_remove_listener+0x50>)
 8019bdc:	f008 f9ae 	bl	8021f3c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8019be0:	687b      	ldr	r3, [r7, #4]
 8019be2:	60fb      	str	r3, [r7, #12]
 8019be4:	e00a      	b.n	8019bfc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8019be6:	68fb      	ldr	r3, [r7, #12]
 8019be8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019bea:	683a      	ldr	r2, [r7, #0]
 8019bec:	429a      	cmp	r2, r3
 8019bee:	d102      	bne.n	8019bf6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8019bf0:	68fb      	ldr	r3, [r7, #12]
 8019bf2:	2200      	movs	r2, #0
 8019bf4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8019bf6:	68fb      	ldr	r3, [r7, #12]
 8019bf8:	68db      	ldr	r3, [r3, #12]
 8019bfa:	60fb      	str	r3, [r7, #12]
 8019bfc:	68fb      	ldr	r3, [r7, #12]
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	d1f1      	bne.n	8019be6 <tcp_remove_listener+0x22>
    }
  }
}
 8019c02:	bf00      	nop
 8019c04:	bf00      	nop
 8019c06:	3710      	adds	r7, #16
 8019c08:	46bd      	mov	sp, r7
 8019c0a:	bd80      	pop	{r7, pc}
 8019c0c:	080248c0 	.word	0x080248c0
 8019c10:	08024948 	.word	0x08024948
 8019c14:	08024904 	.word	0x08024904

08019c18 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8019c18:	b580      	push	{r7, lr}
 8019c1a:	b084      	sub	sp, #16
 8019c1c:	af00      	add	r7, sp, #0
 8019c1e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8019c20:	687b      	ldr	r3, [r7, #4]
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d106      	bne.n	8019c34 <tcp_listen_closed+0x1c>
 8019c26:	4b14      	ldr	r3, [pc, #80]	; (8019c78 <tcp_listen_closed+0x60>)
 8019c28:	f240 1211 	movw	r2, #273	; 0x111
 8019c2c:	4913      	ldr	r1, [pc, #76]	; (8019c7c <tcp_listen_closed+0x64>)
 8019c2e:	4814      	ldr	r0, [pc, #80]	; (8019c80 <tcp_listen_closed+0x68>)
 8019c30:	f008 f984 	bl	8021f3c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	7d1b      	ldrb	r3, [r3, #20]
 8019c38:	2b01      	cmp	r3, #1
 8019c3a:	d006      	beq.n	8019c4a <tcp_listen_closed+0x32>
 8019c3c:	4b0e      	ldr	r3, [pc, #56]	; (8019c78 <tcp_listen_closed+0x60>)
 8019c3e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8019c42:	4910      	ldr	r1, [pc, #64]	; (8019c84 <tcp_listen_closed+0x6c>)
 8019c44:	480e      	ldr	r0, [pc, #56]	; (8019c80 <tcp_listen_closed+0x68>)
 8019c46:	f008 f979 	bl	8021f3c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8019c4a:	2301      	movs	r3, #1
 8019c4c:	60fb      	str	r3, [r7, #12]
 8019c4e:	e00b      	b.n	8019c68 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8019c50:	4a0d      	ldr	r2, [pc, #52]	; (8019c88 <tcp_listen_closed+0x70>)
 8019c52:	68fb      	ldr	r3, [r7, #12]
 8019c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019c58:	681b      	ldr	r3, [r3, #0]
 8019c5a:	6879      	ldr	r1, [r7, #4]
 8019c5c:	4618      	mov	r0, r3
 8019c5e:	f7ff ffb1 	bl	8019bc4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8019c62:	68fb      	ldr	r3, [r7, #12]
 8019c64:	3301      	adds	r3, #1
 8019c66:	60fb      	str	r3, [r7, #12]
 8019c68:	68fb      	ldr	r3, [r7, #12]
 8019c6a:	2b03      	cmp	r3, #3
 8019c6c:	d9f0      	bls.n	8019c50 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8019c6e:	bf00      	nop
 8019c70:	bf00      	nop
 8019c72:	3710      	adds	r7, #16
 8019c74:	46bd      	mov	sp, r7
 8019c76:	bd80      	pop	{r7, pc}
 8019c78:	080248c0 	.word	0x080248c0
 8019c7c:	08024970 	.word	0x08024970
 8019c80:	08024904 	.word	0x08024904
 8019c84:	0802497c 	.word	0x0802497c
 8019c88:	08025ee8 	.word	0x08025ee8

08019c8c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8019c8c:	b5b0      	push	{r4, r5, r7, lr}
 8019c8e:	b088      	sub	sp, #32
 8019c90:	af04      	add	r7, sp, #16
 8019c92:	6078      	str	r0, [r7, #4]
 8019c94:	460b      	mov	r3, r1
 8019c96:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	2b00      	cmp	r3, #0
 8019c9c:	d106      	bne.n	8019cac <tcp_close_shutdown+0x20>
 8019c9e:	4b63      	ldr	r3, [pc, #396]	; (8019e2c <tcp_close_shutdown+0x1a0>)
 8019ca0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8019ca4:	4962      	ldr	r1, [pc, #392]	; (8019e30 <tcp_close_shutdown+0x1a4>)
 8019ca6:	4863      	ldr	r0, [pc, #396]	; (8019e34 <tcp_close_shutdown+0x1a8>)
 8019ca8:	f008 f948 	bl	8021f3c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8019cac:	78fb      	ldrb	r3, [r7, #3]
 8019cae:	2b00      	cmp	r3, #0
 8019cb0:	d066      	beq.n	8019d80 <tcp_close_shutdown+0xf4>
 8019cb2:	687b      	ldr	r3, [r7, #4]
 8019cb4:	7d1b      	ldrb	r3, [r3, #20]
 8019cb6:	2b04      	cmp	r3, #4
 8019cb8:	d003      	beq.n	8019cc2 <tcp_close_shutdown+0x36>
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	7d1b      	ldrb	r3, [r3, #20]
 8019cbe:	2b07      	cmp	r3, #7
 8019cc0:	d15e      	bne.n	8019d80 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8019cc2:	687b      	ldr	r3, [r7, #4]
 8019cc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019cc6:	2b00      	cmp	r3, #0
 8019cc8:	d104      	bne.n	8019cd4 <tcp_close_shutdown+0x48>
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019cce:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8019cd2:	d055      	beq.n	8019d80 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8019cd4:	687b      	ldr	r3, [r7, #4]
 8019cd6:	8b5b      	ldrh	r3, [r3, #26]
 8019cd8:	f003 0310 	and.w	r3, r3, #16
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d106      	bne.n	8019cee <tcp_close_shutdown+0x62>
 8019ce0:	4b52      	ldr	r3, [pc, #328]	; (8019e2c <tcp_close_shutdown+0x1a0>)
 8019ce2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8019ce6:	4954      	ldr	r1, [pc, #336]	; (8019e38 <tcp_close_shutdown+0x1ac>)
 8019ce8:	4852      	ldr	r0, [pc, #328]	; (8019e34 <tcp_close_shutdown+0x1a8>)
 8019cea:	f008 f927 	bl	8021f3c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8019cf2:	687b      	ldr	r3, [r7, #4]
 8019cf4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8019cf6:	687d      	ldr	r5, [r7, #4]
 8019cf8:	687b      	ldr	r3, [r7, #4]
 8019cfa:	3304      	adds	r3, #4
 8019cfc:	687a      	ldr	r2, [r7, #4]
 8019cfe:	8ad2      	ldrh	r2, [r2, #22]
 8019d00:	6879      	ldr	r1, [r7, #4]
 8019d02:	8b09      	ldrh	r1, [r1, #24]
 8019d04:	9102      	str	r1, [sp, #8]
 8019d06:	9201      	str	r2, [sp, #4]
 8019d08:	9300      	str	r3, [sp, #0]
 8019d0a:	462b      	mov	r3, r5
 8019d0c:	4622      	mov	r2, r4
 8019d0e:	4601      	mov	r1, r0
 8019d10:	6878      	ldr	r0, [r7, #4]
 8019d12:	f003 f84d 	bl	801cdb0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8019d16:	6878      	ldr	r0, [r7, #4]
 8019d18:	f001 fa86 	bl	801b228 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8019d1c:	4b47      	ldr	r3, [pc, #284]	; (8019e3c <tcp_close_shutdown+0x1b0>)
 8019d1e:	681b      	ldr	r3, [r3, #0]
 8019d20:	687a      	ldr	r2, [r7, #4]
 8019d22:	429a      	cmp	r2, r3
 8019d24:	d105      	bne.n	8019d32 <tcp_close_shutdown+0xa6>
 8019d26:	4b45      	ldr	r3, [pc, #276]	; (8019e3c <tcp_close_shutdown+0x1b0>)
 8019d28:	681b      	ldr	r3, [r3, #0]
 8019d2a:	68db      	ldr	r3, [r3, #12]
 8019d2c:	4a43      	ldr	r2, [pc, #268]	; (8019e3c <tcp_close_shutdown+0x1b0>)
 8019d2e:	6013      	str	r3, [r2, #0]
 8019d30:	e013      	b.n	8019d5a <tcp_close_shutdown+0xce>
 8019d32:	4b42      	ldr	r3, [pc, #264]	; (8019e3c <tcp_close_shutdown+0x1b0>)
 8019d34:	681b      	ldr	r3, [r3, #0]
 8019d36:	60fb      	str	r3, [r7, #12]
 8019d38:	e00c      	b.n	8019d54 <tcp_close_shutdown+0xc8>
 8019d3a:	68fb      	ldr	r3, [r7, #12]
 8019d3c:	68db      	ldr	r3, [r3, #12]
 8019d3e:	687a      	ldr	r2, [r7, #4]
 8019d40:	429a      	cmp	r2, r3
 8019d42:	d104      	bne.n	8019d4e <tcp_close_shutdown+0xc2>
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	68da      	ldr	r2, [r3, #12]
 8019d48:	68fb      	ldr	r3, [r7, #12]
 8019d4a:	60da      	str	r2, [r3, #12]
 8019d4c:	e005      	b.n	8019d5a <tcp_close_shutdown+0xce>
 8019d4e:	68fb      	ldr	r3, [r7, #12]
 8019d50:	68db      	ldr	r3, [r3, #12]
 8019d52:	60fb      	str	r3, [r7, #12]
 8019d54:	68fb      	ldr	r3, [r7, #12]
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	d1ef      	bne.n	8019d3a <tcp_close_shutdown+0xae>
 8019d5a:	687b      	ldr	r3, [r7, #4]
 8019d5c:	2200      	movs	r2, #0
 8019d5e:	60da      	str	r2, [r3, #12]
 8019d60:	4b37      	ldr	r3, [pc, #220]	; (8019e40 <tcp_close_shutdown+0x1b4>)
 8019d62:	2201      	movs	r2, #1
 8019d64:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8019d66:	4b37      	ldr	r3, [pc, #220]	; (8019e44 <tcp_close_shutdown+0x1b8>)
 8019d68:	681b      	ldr	r3, [r3, #0]
 8019d6a:	687a      	ldr	r2, [r7, #4]
 8019d6c:	429a      	cmp	r2, r3
 8019d6e:	d102      	bne.n	8019d76 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8019d70:	f001 fbb2 	bl	801b4d8 <tcp_trigger_input_pcb_close>
 8019d74:	e002      	b.n	8019d7c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8019d76:	6878      	ldr	r0, [r7, #4]
 8019d78:	f7ff fed6 	bl	8019b28 <tcp_free>
      }
      return ERR_OK;
 8019d7c:	2300      	movs	r3, #0
 8019d7e:	e050      	b.n	8019e22 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8019d80:	687b      	ldr	r3, [r7, #4]
 8019d82:	7d1b      	ldrb	r3, [r3, #20]
 8019d84:	2b02      	cmp	r3, #2
 8019d86:	d03b      	beq.n	8019e00 <tcp_close_shutdown+0x174>
 8019d88:	2b02      	cmp	r3, #2
 8019d8a:	dc44      	bgt.n	8019e16 <tcp_close_shutdown+0x18a>
 8019d8c:	2b00      	cmp	r3, #0
 8019d8e:	d002      	beq.n	8019d96 <tcp_close_shutdown+0x10a>
 8019d90:	2b01      	cmp	r3, #1
 8019d92:	d02a      	beq.n	8019dea <tcp_close_shutdown+0x15e>
 8019d94:	e03f      	b.n	8019e16 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	8adb      	ldrh	r3, [r3, #22]
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	d021      	beq.n	8019de2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8019d9e:	4b2a      	ldr	r3, [pc, #168]	; (8019e48 <tcp_close_shutdown+0x1bc>)
 8019da0:	681b      	ldr	r3, [r3, #0]
 8019da2:	687a      	ldr	r2, [r7, #4]
 8019da4:	429a      	cmp	r2, r3
 8019da6:	d105      	bne.n	8019db4 <tcp_close_shutdown+0x128>
 8019da8:	4b27      	ldr	r3, [pc, #156]	; (8019e48 <tcp_close_shutdown+0x1bc>)
 8019daa:	681b      	ldr	r3, [r3, #0]
 8019dac:	68db      	ldr	r3, [r3, #12]
 8019dae:	4a26      	ldr	r2, [pc, #152]	; (8019e48 <tcp_close_shutdown+0x1bc>)
 8019db0:	6013      	str	r3, [r2, #0]
 8019db2:	e013      	b.n	8019ddc <tcp_close_shutdown+0x150>
 8019db4:	4b24      	ldr	r3, [pc, #144]	; (8019e48 <tcp_close_shutdown+0x1bc>)
 8019db6:	681b      	ldr	r3, [r3, #0]
 8019db8:	60bb      	str	r3, [r7, #8]
 8019dba:	e00c      	b.n	8019dd6 <tcp_close_shutdown+0x14a>
 8019dbc:	68bb      	ldr	r3, [r7, #8]
 8019dbe:	68db      	ldr	r3, [r3, #12]
 8019dc0:	687a      	ldr	r2, [r7, #4]
 8019dc2:	429a      	cmp	r2, r3
 8019dc4:	d104      	bne.n	8019dd0 <tcp_close_shutdown+0x144>
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	68da      	ldr	r2, [r3, #12]
 8019dca:	68bb      	ldr	r3, [r7, #8]
 8019dcc:	60da      	str	r2, [r3, #12]
 8019dce:	e005      	b.n	8019ddc <tcp_close_shutdown+0x150>
 8019dd0:	68bb      	ldr	r3, [r7, #8]
 8019dd2:	68db      	ldr	r3, [r3, #12]
 8019dd4:	60bb      	str	r3, [r7, #8]
 8019dd6:	68bb      	ldr	r3, [r7, #8]
 8019dd8:	2b00      	cmp	r3, #0
 8019dda:	d1ef      	bne.n	8019dbc <tcp_close_shutdown+0x130>
 8019ddc:	687b      	ldr	r3, [r7, #4]
 8019dde:	2200      	movs	r2, #0
 8019de0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8019de2:	6878      	ldr	r0, [r7, #4]
 8019de4:	f7ff fea0 	bl	8019b28 <tcp_free>
      break;
 8019de8:	e01a      	b.n	8019e20 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8019dea:	6878      	ldr	r0, [r7, #4]
 8019dec:	f7ff ff14 	bl	8019c18 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8019df0:	6879      	ldr	r1, [r7, #4]
 8019df2:	4816      	ldr	r0, [pc, #88]	; (8019e4c <tcp_close_shutdown+0x1c0>)
 8019df4:	f001 fa68 	bl	801b2c8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8019df8:	6878      	ldr	r0, [r7, #4]
 8019dfa:	f7ff feb1 	bl	8019b60 <tcp_free_listen>
      break;
 8019dfe:	e00f      	b.n	8019e20 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8019e00:	6879      	ldr	r1, [r7, #4]
 8019e02:	480e      	ldr	r0, [pc, #56]	; (8019e3c <tcp_close_shutdown+0x1b0>)
 8019e04:	f001 fa60 	bl	801b2c8 <tcp_pcb_remove>
 8019e08:	4b0d      	ldr	r3, [pc, #52]	; (8019e40 <tcp_close_shutdown+0x1b4>)
 8019e0a:	2201      	movs	r2, #1
 8019e0c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8019e0e:	6878      	ldr	r0, [r7, #4]
 8019e10:	f7ff fe8a 	bl	8019b28 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8019e14:	e004      	b.n	8019e20 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8019e16:	6878      	ldr	r0, [r7, #4]
 8019e18:	f000 f81a 	bl	8019e50 <tcp_close_shutdown_fin>
 8019e1c:	4603      	mov	r3, r0
 8019e1e:	e000      	b.n	8019e22 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8019e20:	2300      	movs	r3, #0
}
 8019e22:	4618      	mov	r0, r3
 8019e24:	3710      	adds	r7, #16
 8019e26:	46bd      	mov	sp, r7
 8019e28:	bdb0      	pop	{r4, r5, r7, pc}
 8019e2a:	bf00      	nop
 8019e2c:	080248c0 	.word	0x080248c0
 8019e30:	08024994 	.word	0x08024994
 8019e34:	08024904 	.word	0x08024904
 8019e38:	080249b4 	.word	0x080249b4
 8019e3c:	2401a184 	.word	0x2401a184
 8019e40:	2401a18c 	.word	0x2401a18c
 8019e44:	2401a190 	.word	0x2401a190
 8019e48:	2401a188 	.word	0x2401a188
 8019e4c:	2401a180 	.word	0x2401a180

08019e50 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8019e50:	b580      	push	{r7, lr}
 8019e52:	b084      	sub	sp, #16
 8019e54:	af00      	add	r7, sp, #0
 8019e56:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	d106      	bne.n	8019e6c <tcp_close_shutdown_fin+0x1c>
 8019e5e:	4b2e      	ldr	r3, [pc, #184]	; (8019f18 <tcp_close_shutdown_fin+0xc8>)
 8019e60:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8019e64:	492d      	ldr	r1, [pc, #180]	; (8019f1c <tcp_close_shutdown_fin+0xcc>)
 8019e66:	482e      	ldr	r0, [pc, #184]	; (8019f20 <tcp_close_shutdown_fin+0xd0>)
 8019e68:	f008 f868 	bl	8021f3c <iprintf>

  switch (pcb->state) {
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	7d1b      	ldrb	r3, [r3, #20]
 8019e70:	2b07      	cmp	r3, #7
 8019e72:	d020      	beq.n	8019eb6 <tcp_close_shutdown_fin+0x66>
 8019e74:	2b07      	cmp	r3, #7
 8019e76:	dc2b      	bgt.n	8019ed0 <tcp_close_shutdown_fin+0x80>
 8019e78:	2b03      	cmp	r3, #3
 8019e7a:	d002      	beq.n	8019e82 <tcp_close_shutdown_fin+0x32>
 8019e7c:	2b04      	cmp	r3, #4
 8019e7e:	d00d      	beq.n	8019e9c <tcp_close_shutdown_fin+0x4c>
 8019e80:	e026      	b.n	8019ed0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8019e82:	6878      	ldr	r0, [r7, #4]
 8019e84:	f002 f992 	bl	801c1ac <tcp_send_fin>
 8019e88:	4603      	mov	r3, r0
 8019e8a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8019e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019e90:	2b00      	cmp	r3, #0
 8019e92:	d11f      	bne.n	8019ed4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8019e94:	687b      	ldr	r3, [r7, #4]
 8019e96:	2205      	movs	r2, #5
 8019e98:	751a      	strb	r2, [r3, #20]
      }
      break;
 8019e9a:	e01b      	b.n	8019ed4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8019e9c:	6878      	ldr	r0, [r7, #4]
 8019e9e:	f002 f985 	bl	801c1ac <tcp_send_fin>
 8019ea2:	4603      	mov	r3, r0
 8019ea4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8019ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	d114      	bne.n	8019ed8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	2205      	movs	r2, #5
 8019eb2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8019eb4:	e010      	b.n	8019ed8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8019eb6:	6878      	ldr	r0, [r7, #4]
 8019eb8:	f002 f978 	bl	801c1ac <tcp_send_fin>
 8019ebc:	4603      	mov	r3, r0
 8019ebe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8019ec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019ec4:	2b00      	cmp	r3, #0
 8019ec6:	d109      	bne.n	8019edc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	2209      	movs	r2, #9
 8019ecc:	751a      	strb	r2, [r3, #20]
      }
      break;
 8019ece:	e005      	b.n	8019edc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8019ed0:	2300      	movs	r3, #0
 8019ed2:	e01c      	b.n	8019f0e <tcp_close_shutdown_fin+0xbe>
      break;
 8019ed4:	bf00      	nop
 8019ed6:	e002      	b.n	8019ede <tcp_close_shutdown_fin+0x8e>
      break;
 8019ed8:	bf00      	nop
 8019eda:	e000      	b.n	8019ede <tcp_close_shutdown_fin+0x8e>
      break;
 8019edc:	bf00      	nop
  }

  if (err == ERR_OK) {
 8019ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019ee2:	2b00      	cmp	r3, #0
 8019ee4:	d103      	bne.n	8019eee <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8019ee6:	6878      	ldr	r0, [r7, #4]
 8019ee8:	f002 fa9e 	bl	801c428 <tcp_output>
 8019eec:	e00d      	b.n	8019f0a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8019eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ef6:	d108      	bne.n	8019f0a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	8b5b      	ldrh	r3, [r3, #26]
 8019efc:	f043 0308 	orr.w	r3, r3, #8
 8019f00:	b29a      	uxth	r2, r3
 8019f02:	687b      	ldr	r3, [r7, #4]
 8019f04:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8019f06:	2300      	movs	r3, #0
 8019f08:	e001      	b.n	8019f0e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8019f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019f0e:	4618      	mov	r0, r3
 8019f10:	3710      	adds	r7, #16
 8019f12:	46bd      	mov	sp, r7
 8019f14:	bd80      	pop	{r7, pc}
 8019f16:	bf00      	nop
 8019f18:	080248c0 	.word	0x080248c0
 8019f1c:	08024970 	.word	0x08024970
 8019f20:	08024904 	.word	0x08024904

08019f24 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8019f24:	b580      	push	{r7, lr}
 8019f26:	b082      	sub	sp, #8
 8019f28:	af00      	add	r7, sp, #0
 8019f2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	d109      	bne.n	8019f46 <tcp_close+0x22>
 8019f32:	4b0f      	ldr	r3, [pc, #60]	; (8019f70 <tcp_close+0x4c>)
 8019f34:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8019f38:	490e      	ldr	r1, [pc, #56]	; (8019f74 <tcp_close+0x50>)
 8019f3a:	480f      	ldr	r0, [pc, #60]	; (8019f78 <tcp_close+0x54>)
 8019f3c:	f007 fffe 	bl	8021f3c <iprintf>
 8019f40:	f06f 030f 	mvn.w	r3, #15
 8019f44:	e00f      	b.n	8019f66 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	7d1b      	ldrb	r3, [r3, #20]
 8019f4a:	2b01      	cmp	r3, #1
 8019f4c:	d006      	beq.n	8019f5c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	8b5b      	ldrh	r3, [r3, #26]
 8019f52:	f043 0310 	orr.w	r3, r3, #16
 8019f56:	b29a      	uxth	r2, r3
 8019f58:	687b      	ldr	r3, [r7, #4]
 8019f5a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8019f5c:	2101      	movs	r1, #1
 8019f5e:	6878      	ldr	r0, [r7, #4]
 8019f60:	f7ff fe94 	bl	8019c8c <tcp_close_shutdown>
 8019f64:	4603      	mov	r3, r0
}
 8019f66:	4618      	mov	r0, r3
 8019f68:	3708      	adds	r7, #8
 8019f6a:	46bd      	mov	sp, r7
 8019f6c:	bd80      	pop	{r7, pc}
 8019f6e:	bf00      	nop
 8019f70:	080248c0 	.word	0x080248c0
 8019f74:	080249d0 	.word	0x080249d0
 8019f78:	08024904 	.word	0x08024904

08019f7c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8019f7c:	b580      	push	{r7, lr}
 8019f7e:	b08e      	sub	sp, #56	; 0x38
 8019f80:	af04      	add	r7, sp, #16
 8019f82:	6078      	str	r0, [r7, #4]
 8019f84:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	2b00      	cmp	r3, #0
 8019f8a:	d107      	bne.n	8019f9c <tcp_abandon+0x20>
 8019f8c:	4b52      	ldr	r3, [pc, #328]	; (801a0d8 <tcp_abandon+0x15c>)
 8019f8e:	f240 223d 	movw	r2, #573	; 0x23d
 8019f92:	4952      	ldr	r1, [pc, #328]	; (801a0dc <tcp_abandon+0x160>)
 8019f94:	4852      	ldr	r0, [pc, #328]	; (801a0e0 <tcp_abandon+0x164>)
 8019f96:	f007 ffd1 	bl	8021f3c <iprintf>
 8019f9a:	e099      	b.n	801a0d0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8019f9c:	687b      	ldr	r3, [r7, #4]
 8019f9e:	7d1b      	ldrb	r3, [r3, #20]
 8019fa0:	2b01      	cmp	r3, #1
 8019fa2:	d106      	bne.n	8019fb2 <tcp_abandon+0x36>
 8019fa4:	4b4c      	ldr	r3, [pc, #304]	; (801a0d8 <tcp_abandon+0x15c>)
 8019fa6:	f44f 7210 	mov.w	r2, #576	; 0x240
 8019faa:	494e      	ldr	r1, [pc, #312]	; (801a0e4 <tcp_abandon+0x168>)
 8019fac:	484c      	ldr	r0, [pc, #304]	; (801a0e0 <tcp_abandon+0x164>)
 8019fae:	f007 ffc5 	bl	8021f3c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	7d1b      	ldrb	r3, [r3, #20]
 8019fb6:	2b0a      	cmp	r3, #10
 8019fb8:	d107      	bne.n	8019fca <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8019fba:	6879      	ldr	r1, [r7, #4]
 8019fbc:	484a      	ldr	r0, [pc, #296]	; (801a0e8 <tcp_abandon+0x16c>)
 8019fbe:	f001 f983 	bl	801b2c8 <tcp_pcb_remove>
    tcp_free(pcb);
 8019fc2:	6878      	ldr	r0, [r7, #4]
 8019fc4:	f7ff fdb0 	bl	8019b28 <tcp_free>
 8019fc8:	e082      	b.n	801a0d0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8019fca:	2300      	movs	r3, #0
 8019fcc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8019fce:	2300      	movs	r3, #0
 8019fd0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8019fd2:	687b      	ldr	r3, [r7, #4]
 8019fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019fd6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fdc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019fe4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	691b      	ldr	r3, [r3, #16]
 8019fea:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8019fec:	687b      	ldr	r3, [r7, #4]
 8019fee:	7d1b      	ldrb	r3, [r3, #20]
 8019ff0:	2b00      	cmp	r3, #0
 8019ff2:	d126      	bne.n	801a042 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	8adb      	ldrh	r3, [r3, #22]
 8019ff8:	2b00      	cmp	r3, #0
 8019ffa:	d02e      	beq.n	801a05a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8019ffc:	4b3b      	ldr	r3, [pc, #236]	; (801a0ec <tcp_abandon+0x170>)
 8019ffe:	681b      	ldr	r3, [r3, #0]
 801a000:	687a      	ldr	r2, [r7, #4]
 801a002:	429a      	cmp	r2, r3
 801a004:	d105      	bne.n	801a012 <tcp_abandon+0x96>
 801a006:	4b39      	ldr	r3, [pc, #228]	; (801a0ec <tcp_abandon+0x170>)
 801a008:	681b      	ldr	r3, [r3, #0]
 801a00a:	68db      	ldr	r3, [r3, #12]
 801a00c:	4a37      	ldr	r2, [pc, #220]	; (801a0ec <tcp_abandon+0x170>)
 801a00e:	6013      	str	r3, [r2, #0]
 801a010:	e013      	b.n	801a03a <tcp_abandon+0xbe>
 801a012:	4b36      	ldr	r3, [pc, #216]	; (801a0ec <tcp_abandon+0x170>)
 801a014:	681b      	ldr	r3, [r3, #0]
 801a016:	61fb      	str	r3, [r7, #28]
 801a018:	e00c      	b.n	801a034 <tcp_abandon+0xb8>
 801a01a:	69fb      	ldr	r3, [r7, #28]
 801a01c:	68db      	ldr	r3, [r3, #12]
 801a01e:	687a      	ldr	r2, [r7, #4]
 801a020:	429a      	cmp	r2, r3
 801a022:	d104      	bne.n	801a02e <tcp_abandon+0xb2>
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	68da      	ldr	r2, [r3, #12]
 801a028:	69fb      	ldr	r3, [r7, #28]
 801a02a:	60da      	str	r2, [r3, #12]
 801a02c:	e005      	b.n	801a03a <tcp_abandon+0xbe>
 801a02e:	69fb      	ldr	r3, [r7, #28]
 801a030:	68db      	ldr	r3, [r3, #12]
 801a032:	61fb      	str	r3, [r7, #28]
 801a034:	69fb      	ldr	r3, [r7, #28]
 801a036:	2b00      	cmp	r3, #0
 801a038:	d1ef      	bne.n	801a01a <tcp_abandon+0x9e>
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	2200      	movs	r2, #0
 801a03e:	60da      	str	r2, [r3, #12]
 801a040:	e00b      	b.n	801a05a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801a042:	683b      	ldr	r3, [r7, #0]
 801a044:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	8adb      	ldrh	r3, [r3, #22]
 801a04a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801a04c:	6879      	ldr	r1, [r7, #4]
 801a04e:	4828      	ldr	r0, [pc, #160]	; (801a0f0 <tcp_abandon+0x174>)
 801a050:	f001 f93a 	bl	801b2c8 <tcp_pcb_remove>
 801a054:	4b27      	ldr	r3, [pc, #156]	; (801a0f4 <tcp_abandon+0x178>)
 801a056:	2201      	movs	r2, #1
 801a058:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801a05a:	687b      	ldr	r3, [r7, #4]
 801a05c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a05e:	2b00      	cmp	r3, #0
 801a060:	d004      	beq.n	801a06c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a066:	4618      	mov	r0, r3
 801a068:	f000 fe7a 	bl	801ad60 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a070:	2b00      	cmp	r3, #0
 801a072:	d004      	beq.n	801a07e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801a074:	687b      	ldr	r3, [r7, #4]
 801a076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a078:	4618      	mov	r0, r3
 801a07a:	f000 fe71 	bl	801ad60 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a082:	2b00      	cmp	r3, #0
 801a084:	d004      	beq.n	801a090 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a08a:	4618      	mov	r0, r3
 801a08c:	f000 fe68 	bl	801ad60 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801a090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a092:	2b00      	cmp	r3, #0
 801a094:	d00e      	beq.n	801a0b4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801a096:	6879      	ldr	r1, [r7, #4]
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	3304      	adds	r3, #4
 801a09c:	687a      	ldr	r2, [r7, #4]
 801a09e:	8b12      	ldrh	r2, [r2, #24]
 801a0a0:	9202      	str	r2, [sp, #8]
 801a0a2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801a0a4:	9201      	str	r2, [sp, #4]
 801a0a6:	9300      	str	r3, [sp, #0]
 801a0a8:	460b      	mov	r3, r1
 801a0aa:	697a      	ldr	r2, [r7, #20]
 801a0ac:	69b9      	ldr	r1, [r7, #24]
 801a0ae:	6878      	ldr	r0, [r7, #4]
 801a0b0:	f002 fe7e 	bl	801cdb0 <tcp_rst>
    }
    last_state = pcb->state;
 801a0b4:	687b      	ldr	r3, [r7, #4]
 801a0b6:	7d1b      	ldrb	r3, [r3, #20]
 801a0b8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801a0ba:	6878      	ldr	r0, [r7, #4]
 801a0bc:	f7ff fd34 	bl	8019b28 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801a0c0:	693b      	ldr	r3, [r7, #16]
 801a0c2:	2b00      	cmp	r3, #0
 801a0c4:	d004      	beq.n	801a0d0 <tcp_abandon+0x154>
 801a0c6:	693b      	ldr	r3, [r7, #16]
 801a0c8:	f06f 010c 	mvn.w	r1, #12
 801a0cc:	68f8      	ldr	r0, [r7, #12]
 801a0ce:	4798      	blx	r3
  }
}
 801a0d0:	3728      	adds	r7, #40	; 0x28
 801a0d2:	46bd      	mov	sp, r7
 801a0d4:	bd80      	pop	{r7, pc}
 801a0d6:	bf00      	nop
 801a0d8:	080248c0 	.word	0x080248c0
 801a0dc:	08024a04 	.word	0x08024a04
 801a0e0:	08024904 	.word	0x08024904
 801a0e4:	08024a20 	.word	0x08024a20
 801a0e8:	2401a178 	.word	0x2401a178
 801a0ec:	2401a188 	.word	0x2401a188
 801a0f0:	2401a184 	.word	0x2401a184
 801a0f4:	2401a18c 	.word	0x2401a18c

0801a0f8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801a0f8:	b580      	push	{r7, lr}
 801a0fa:	b082      	sub	sp, #8
 801a0fc:	af00      	add	r7, sp, #0
 801a0fe:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801a100:	2101      	movs	r1, #1
 801a102:	6878      	ldr	r0, [r7, #4]
 801a104:	f7ff ff3a 	bl	8019f7c <tcp_abandon>
}
 801a108:	bf00      	nop
 801a10a:	3708      	adds	r7, #8
 801a10c:	46bd      	mov	sp, r7
 801a10e:	bd80      	pop	{r7, pc}

0801a110 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801a110:	b580      	push	{r7, lr}
 801a112:	b084      	sub	sp, #16
 801a114:	af00      	add	r7, sp, #0
 801a116:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801a118:	687b      	ldr	r3, [r7, #4]
 801a11a:	2b00      	cmp	r3, #0
 801a11c:	d106      	bne.n	801a12c <tcp_update_rcv_ann_wnd+0x1c>
 801a11e:	4b25      	ldr	r3, [pc, #148]	; (801a1b4 <tcp_update_rcv_ann_wnd+0xa4>)
 801a120:	f240 32a6 	movw	r2, #934	; 0x3a6
 801a124:	4924      	ldr	r1, [pc, #144]	; (801a1b8 <tcp_update_rcv_ann_wnd+0xa8>)
 801a126:	4825      	ldr	r0, [pc, #148]	; (801a1bc <tcp_update_rcv_ann_wnd+0xac>)
 801a128:	f007 ff08 	bl	8021f3c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801a12c:	687b      	ldr	r3, [r7, #4]
 801a12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a130:	687a      	ldr	r2, [r7, #4]
 801a132:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 801a134:	4413      	add	r3, r2
 801a136:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a13c:	687a      	ldr	r2, [r7, #4]
 801a13e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801a140:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 801a144:	bf28      	it	cs
 801a146:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801a14a:	b292      	uxth	r2, r2
 801a14c:	4413      	add	r3, r2
 801a14e:	68fa      	ldr	r2, [r7, #12]
 801a150:	1ad3      	subs	r3, r2, r3
 801a152:	2b00      	cmp	r3, #0
 801a154:	db08      	blt.n	801a168 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801a156:	687b      	ldr	r3, [r7, #4]
 801a158:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a162:	68fa      	ldr	r2, [r7, #12]
 801a164:	1ad3      	subs	r3, r2, r3
 801a166:	e020      	b.n	801a1aa <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a170:	1ad3      	subs	r3, r2, r3
 801a172:	2b00      	cmp	r3, #0
 801a174:	dd03      	ble.n	801a17e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801a176:	687b      	ldr	r3, [r7, #4]
 801a178:	2200      	movs	r2, #0
 801a17a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801a17c:	e014      	b.n	801a1a8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a186:	1ad3      	subs	r3, r2, r3
 801a188:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801a18a:	68bb      	ldr	r3, [r7, #8]
 801a18c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a190:	d306      	bcc.n	801a1a0 <tcp_update_rcv_ann_wnd+0x90>
 801a192:	4b08      	ldr	r3, [pc, #32]	; (801a1b4 <tcp_update_rcv_ann_wnd+0xa4>)
 801a194:	f240 32b6 	movw	r2, #950	; 0x3b6
 801a198:	4909      	ldr	r1, [pc, #36]	; (801a1c0 <tcp_update_rcv_ann_wnd+0xb0>)
 801a19a:	4808      	ldr	r0, [pc, #32]	; (801a1bc <tcp_update_rcv_ann_wnd+0xac>)
 801a19c:	f007 fece 	bl	8021f3c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801a1a0:	68bb      	ldr	r3, [r7, #8]
 801a1a2:	b29a      	uxth	r2, r3
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 801a1a8:	2300      	movs	r3, #0
  }
}
 801a1aa:	4618      	mov	r0, r3
 801a1ac:	3710      	adds	r7, #16
 801a1ae:	46bd      	mov	sp, r7
 801a1b0:	bd80      	pop	{r7, pc}
 801a1b2:	bf00      	nop
 801a1b4:	080248c0 	.word	0x080248c0
 801a1b8:	08024b1c 	.word	0x08024b1c
 801a1bc:	08024904 	.word	0x08024904
 801a1c0:	08024b40 	.word	0x08024b40

0801a1c4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801a1c4:	b580      	push	{r7, lr}
 801a1c6:	b084      	sub	sp, #16
 801a1c8:	af00      	add	r7, sp, #0
 801a1ca:	6078      	str	r0, [r7, #4]
 801a1cc:	460b      	mov	r3, r1
 801a1ce:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	2b00      	cmp	r3, #0
 801a1d4:	d107      	bne.n	801a1e6 <tcp_recved+0x22>
 801a1d6:	4b1f      	ldr	r3, [pc, #124]	; (801a254 <tcp_recved+0x90>)
 801a1d8:	f240 32cf 	movw	r2, #975	; 0x3cf
 801a1dc:	491e      	ldr	r1, [pc, #120]	; (801a258 <tcp_recved+0x94>)
 801a1de:	481f      	ldr	r0, [pc, #124]	; (801a25c <tcp_recved+0x98>)
 801a1e0:	f007 feac 	bl	8021f3c <iprintf>
 801a1e4:	e032      	b.n	801a24c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	7d1b      	ldrb	r3, [r3, #20]
 801a1ea:	2b01      	cmp	r3, #1
 801a1ec:	d106      	bne.n	801a1fc <tcp_recved+0x38>
 801a1ee:	4b19      	ldr	r3, [pc, #100]	; (801a254 <tcp_recved+0x90>)
 801a1f0:	f240 32d2 	movw	r2, #978	; 0x3d2
 801a1f4:	491a      	ldr	r1, [pc, #104]	; (801a260 <tcp_recved+0x9c>)
 801a1f6:	4819      	ldr	r0, [pc, #100]	; (801a25c <tcp_recved+0x98>)
 801a1f8:	f007 fea0 	bl	8021f3c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801a1fc:	687b      	ldr	r3, [r7, #4]
 801a1fe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a200:	887b      	ldrh	r3, [r7, #2]
 801a202:	4413      	add	r3, r2
 801a204:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801a206:	89fb      	ldrh	r3, [r7, #14]
 801a208:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801a20c:	d804      	bhi.n	801a218 <tcp_recved+0x54>
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a212:	89fa      	ldrh	r2, [r7, #14]
 801a214:	429a      	cmp	r2, r3
 801a216:	d204      	bcs.n	801a222 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801a218:	687b      	ldr	r3, [r7, #4]
 801a21a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801a21e:	851a      	strh	r2, [r3, #40]	; 0x28
 801a220:	e002      	b.n	801a228 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	89fa      	ldrh	r2, [r7, #14]
 801a226:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801a228:	6878      	ldr	r0, [r7, #4]
 801a22a:	f7ff ff71 	bl	801a110 <tcp_update_rcv_ann_wnd>
 801a22e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801a230:	68bb      	ldr	r3, [r7, #8]
 801a232:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801a236:	d309      	bcc.n	801a24c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	8b5b      	ldrh	r3, [r3, #26]
 801a23c:	f043 0302 	orr.w	r3, r3, #2
 801a240:	b29a      	uxth	r2, r3
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801a246:	6878      	ldr	r0, [r7, #4]
 801a248:	f002 f8ee 	bl	801c428 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801a24c:	3710      	adds	r7, #16
 801a24e:	46bd      	mov	sp, r7
 801a250:	bd80      	pop	{r7, pc}
 801a252:	bf00      	nop
 801a254:	080248c0 	.word	0x080248c0
 801a258:	08024b5c 	.word	0x08024b5c
 801a25c:	08024904 	.word	0x08024904
 801a260:	08024b74 	.word	0x08024b74

0801a264 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801a264:	b480      	push	{r7}
 801a266:	b083      	sub	sp, #12
 801a268:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801a26a:	2300      	movs	r3, #0
 801a26c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801a26e:	4b1e      	ldr	r3, [pc, #120]	; (801a2e8 <tcp_new_port+0x84>)
 801a270:	881b      	ldrh	r3, [r3, #0]
 801a272:	3301      	adds	r3, #1
 801a274:	b29a      	uxth	r2, r3
 801a276:	4b1c      	ldr	r3, [pc, #112]	; (801a2e8 <tcp_new_port+0x84>)
 801a278:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801a27a:	4b1b      	ldr	r3, [pc, #108]	; (801a2e8 <tcp_new_port+0x84>)
 801a27c:	881b      	ldrh	r3, [r3, #0]
 801a27e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a282:	4293      	cmp	r3, r2
 801a284:	d103      	bne.n	801a28e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801a286:	4b18      	ldr	r3, [pc, #96]	; (801a2e8 <tcp_new_port+0x84>)
 801a288:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801a28c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801a28e:	2300      	movs	r3, #0
 801a290:	71fb      	strb	r3, [r7, #7]
 801a292:	e01e      	b.n	801a2d2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801a294:	79fb      	ldrb	r3, [r7, #7]
 801a296:	4a15      	ldr	r2, [pc, #84]	; (801a2ec <tcp_new_port+0x88>)
 801a298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a29c:	681b      	ldr	r3, [r3, #0]
 801a29e:	603b      	str	r3, [r7, #0]
 801a2a0:	e011      	b.n	801a2c6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801a2a2:	683b      	ldr	r3, [r7, #0]
 801a2a4:	8ada      	ldrh	r2, [r3, #22]
 801a2a6:	4b10      	ldr	r3, [pc, #64]	; (801a2e8 <tcp_new_port+0x84>)
 801a2a8:	881b      	ldrh	r3, [r3, #0]
 801a2aa:	429a      	cmp	r2, r3
 801a2ac:	d108      	bne.n	801a2c0 <tcp_new_port+0x5c>
        n++;
 801a2ae:	88bb      	ldrh	r3, [r7, #4]
 801a2b0:	3301      	adds	r3, #1
 801a2b2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801a2b4:	88bb      	ldrh	r3, [r7, #4]
 801a2b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801a2ba:	d3d8      	bcc.n	801a26e <tcp_new_port+0xa>
          return 0;
 801a2bc:	2300      	movs	r3, #0
 801a2be:	e00d      	b.n	801a2dc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801a2c0:	683b      	ldr	r3, [r7, #0]
 801a2c2:	68db      	ldr	r3, [r3, #12]
 801a2c4:	603b      	str	r3, [r7, #0]
 801a2c6:	683b      	ldr	r3, [r7, #0]
 801a2c8:	2b00      	cmp	r3, #0
 801a2ca:	d1ea      	bne.n	801a2a2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801a2cc:	79fb      	ldrb	r3, [r7, #7]
 801a2ce:	3301      	adds	r3, #1
 801a2d0:	71fb      	strb	r3, [r7, #7]
 801a2d2:	79fb      	ldrb	r3, [r7, #7]
 801a2d4:	2b03      	cmp	r3, #3
 801a2d6:	d9dd      	bls.n	801a294 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801a2d8:	4b03      	ldr	r3, [pc, #12]	; (801a2e8 <tcp_new_port+0x84>)
 801a2da:	881b      	ldrh	r3, [r3, #0]
}
 801a2dc:	4618      	mov	r0, r3
 801a2de:	370c      	adds	r7, #12
 801a2e0:	46bd      	mov	sp, r7
 801a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2e6:	4770      	bx	lr
 801a2e8:	240000bc 	.word	0x240000bc
 801a2ec:	08025ee8 	.word	0x08025ee8

0801a2f0 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 801a2f0:	b580      	push	{r7, lr}
 801a2f2:	b08a      	sub	sp, #40	; 0x28
 801a2f4:	af00      	add	r7, sp, #0
 801a2f6:	60f8      	str	r0, [r7, #12]
 801a2f8:	60b9      	str	r1, [r7, #8]
 801a2fa:	603b      	str	r3, [r7, #0]
 801a2fc:	4613      	mov	r3, r2
 801a2fe:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 801a300:	2300      	movs	r3, #0
 801a302:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801a304:	68fb      	ldr	r3, [r7, #12]
 801a306:	2b00      	cmp	r3, #0
 801a308:	d109      	bne.n	801a31e <tcp_connect+0x2e>
 801a30a:	4b7d      	ldr	r3, [pc, #500]	; (801a500 <tcp_connect+0x210>)
 801a30c:	f240 4235 	movw	r2, #1077	; 0x435
 801a310:	497c      	ldr	r1, [pc, #496]	; (801a504 <tcp_connect+0x214>)
 801a312:	487d      	ldr	r0, [pc, #500]	; (801a508 <tcp_connect+0x218>)
 801a314:	f007 fe12 	bl	8021f3c <iprintf>
 801a318:	f06f 030f 	mvn.w	r3, #15
 801a31c:	e0ec      	b.n	801a4f8 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801a31e:	68bb      	ldr	r3, [r7, #8]
 801a320:	2b00      	cmp	r3, #0
 801a322:	d109      	bne.n	801a338 <tcp_connect+0x48>
 801a324:	4b76      	ldr	r3, [pc, #472]	; (801a500 <tcp_connect+0x210>)
 801a326:	f240 4236 	movw	r2, #1078	; 0x436
 801a32a:	4978      	ldr	r1, [pc, #480]	; (801a50c <tcp_connect+0x21c>)
 801a32c:	4876      	ldr	r0, [pc, #472]	; (801a508 <tcp_connect+0x218>)
 801a32e:	f007 fe05 	bl	8021f3c <iprintf>
 801a332:	f06f 030f 	mvn.w	r3, #15
 801a336:	e0df      	b.n	801a4f8 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801a338:	68fb      	ldr	r3, [r7, #12]
 801a33a:	7d1b      	ldrb	r3, [r3, #20]
 801a33c:	2b00      	cmp	r3, #0
 801a33e:	d009      	beq.n	801a354 <tcp_connect+0x64>
 801a340:	4b6f      	ldr	r3, [pc, #444]	; (801a500 <tcp_connect+0x210>)
 801a342:	f44f 6287 	mov.w	r2, #1080	; 0x438
 801a346:	4972      	ldr	r1, [pc, #456]	; (801a510 <tcp_connect+0x220>)
 801a348:	486f      	ldr	r0, [pc, #444]	; (801a508 <tcp_connect+0x218>)
 801a34a:	f007 fdf7 	bl	8021f3c <iprintf>
 801a34e:	f06f 0309 	mvn.w	r3, #9
 801a352:	e0d1      	b.n	801a4f8 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801a354:	68bb      	ldr	r3, [r7, #8]
 801a356:	2b00      	cmp	r3, #0
 801a358:	d002      	beq.n	801a360 <tcp_connect+0x70>
 801a35a:	68bb      	ldr	r3, [r7, #8]
 801a35c:	681b      	ldr	r3, [r3, #0]
 801a35e:	e000      	b.n	801a362 <tcp_connect+0x72>
 801a360:	2300      	movs	r3, #0
 801a362:	68fa      	ldr	r2, [r7, #12]
 801a364:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 801a366:	68fb      	ldr	r3, [r7, #12]
 801a368:	88fa      	ldrh	r2, [r7, #6]
 801a36a:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801a36c:	68fb      	ldr	r3, [r7, #12]
 801a36e:	7a1b      	ldrb	r3, [r3, #8]
 801a370:	2b00      	cmp	r3, #0
 801a372:	d006      	beq.n	801a382 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 801a374:	68fb      	ldr	r3, [r7, #12]
 801a376:	7a1b      	ldrb	r3, [r3, #8]
 801a378:	4618      	mov	r0, r3
 801a37a:	f7fe fea5 	bl	80190c8 <netif_get_by_index>
 801a37e:	6278      	str	r0, [r7, #36]	; 0x24
 801a380:	e005      	b.n	801a38e <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801a382:	68fb      	ldr	r3, [r7, #12]
 801a384:	3304      	adds	r3, #4
 801a386:	4618      	mov	r0, r3
 801a388:	f002 ff88 	bl	801d29c <ip4_route>
 801a38c:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 801a38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a390:	2b00      	cmp	r3, #0
 801a392:	d102      	bne.n	801a39a <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 801a394:	f06f 0303 	mvn.w	r3, #3
 801a398:	e0ae      	b.n	801a4f8 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 801a39a:	68fb      	ldr	r3, [r7, #12]
 801a39c:	2b00      	cmp	r3, #0
 801a39e:	d003      	beq.n	801a3a8 <tcp_connect+0xb8>
 801a3a0:	68fb      	ldr	r3, [r7, #12]
 801a3a2:	681b      	ldr	r3, [r3, #0]
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	d111      	bne.n	801a3cc <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 801a3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3aa:	2b00      	cmp	r3, #0
 801a3ac:	d002      	beq.n	801a3b4 <tcp_connect+0xc4>
 801a3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3b0:	3304      	adds	r3, #4
 801a3b2:	e000      	b.n	801a3b6 <tcp_connect+0xc6>
 801a3b4:	2300      	movs	r3, #0
 801a3b6:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 801a3b8:	69fb      	ldr	r3, [r7, #28]
 801a3ba:	2b00      	cmp	r3, #0
 801a3bc:	d102      	bne.n	801a3c4 <tcp_connect+0xd4>
      return ERR_RTE;
 801a3be:	f06f 0303 	mvn.w	r3, #3
 801a3c2:	e099      	b.n	801a4f8 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801a3c4:	69fb      	ldr	r3, [r7, #28]
 801a3c6:	681a      	ldr	r2, [r3, #0]
 801a3c8:	68fb      	ldr	r3, [r7, #12]
 801a3ca:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 801a3cc:	68fb      	ldr	r3, [r7, #12]
 801a3ce:	8adb      	ldrh	r3, [r3, #22]
 801a3d0:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 801a3d2:	68fb      	ldr	r3, [r7, #12]
 801a3d4:	8adb      	ldrh	r3, [r3, #22]
 801a3d6:	2b00      	cmp	r3, #0
 801a3d8:	d10c      	bne.n	801a3f4 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 801a3da:	f7ff ff43 	bl	801a264 <tcp_new_port>
 801a3de:	4603      	mov	r3, r0
 801a3e0:	461a      	mov	r2, r3
 801a3e2:	68fb      	ldr	r3, [r7, #12]
 801a3e4:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 801a3e6:	68fb      	ldr	r3, [r7, #12]
 801a3e8:	8adb      	ldrh	r3, [r3, #22]
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	d102      	bne.n	801a3f4 <tcp_connect+0x104>
      return ERR_BUF;
 801a3ee:	f06f 0301 	mvn.w	r3, #1
 801a3f2:	e081      	b.n	801a4f8 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 801a3f4:	68f8      	ldr	r0, [r7, #12]
 801a3f6:	f000 fffb 	bl	801b3f0 <tcp_next_iss>
 801a3fa:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 801a3fc:	68fb      	ldr	r3, [r7, #12]
 801a3fe:	2200      	movs	r2, #0
 801a400:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 801a402:	68fb      	ldr	r3, [r7, #12]
 801a404:	697a      	ldr	r2, [r7, #20]
 801a406:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 801a408:	697b      	ldr	r3, [r7, #20]
 801a40a:	1e5a      	subs	r2, r3, #1
 801a40c:	68fb      	ldr	r3, [r7, #12]
 801a40e:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 801a410:	697b      	ldr	r3, [r7, #20]
 801a412:	1e5a      	subs	r2, r3, #1
 801a414:	68fb      	ldr	r3, [r7, #12]
 801a416:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 801a418:	697b      	ldr	r3, [r7, #20]
 801a41a:	1e5a      	subs	r2, r3, #1
 801a41c:	68fb      	ldr	r3, [r7, #12]
 801a41e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801a420:	68fb      	ldr	r3, [r7, #12]
 801a422:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801a426:	855a      	strh	r2, [r3, #42]	; 0x2a
 801a428:	68fb      	ldr	r3, [r7, #12]
 801a42a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801a42c:	68fb      	ldr	r3, [r7, #12]
 801a42e:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801a430:	68fb      	ldr	r3, [r7, #12]
 801a432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a434:	68fb      	ldr	r3, [r7, #12]
 801a436:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 801a438:	68fb      	ldr	r3, [r7, #12]
 801a43a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801a43e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 801a442:	68fb      	ldr	r3, [r7, #12]
 801a444:	f44f 7206 	mov.w	r2, #536	; 0x218
 801a448:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801a44a:	68fb      	ldr	r3, [r7, #12]
 801a44c:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 801a44e:	68fb      	ldr	r3, [r7, #12]
 801a450:	3304      	adds	r3, #4
 801a452:	461a      	mov	r2, r3
 801a454:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a456:	f000 fff1 	bl	801b43c <tcp_eff_send_mss_netif>
 801a45a:	4603      	mov	r3, r0
 801a45c:	461a      	mov	r2, r3
 801a45e:	68fb      	ldr	r3, [r7, #12]
 801a460:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 801a462:	68fb      	ldr	r3, [r7, #12]
 801a464:	2201      	movs	r2, #1
 801a466:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 801a46a:	68fb      	ldr	r3, [r7, #12]
 801a46c:	683a      	ldr	r2, [r7, #0]
 801a46e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801a472:	2102      	movs	r1, #2
 801a474:	68f8      	ldr	r0, [r7, #12]
 801a476:	f001 fee9 	bl	801c24c <tcp_enqueue_flags>
 801a47a:	4603      	mov	r3, r0
 801a47c:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 801a47e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a482:	2b00      	cmp	r3, #0
 801a484:	d136      	bne.n	801a4f4 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 801a486:	68fb      	ldr	r3, [r7, #12]
 801a488:	2202      	movs	r2, #2
 801a48a:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 801a48c:	8b7b      	ldrh	r3, [r7, #26]
 801a48e:	2b00      	cmp	r3, #0
 801a490:	d021      	beq.n	801a4d6 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801a492:	4b20      	ldr	r3, [pc, #128]	; (801a514 <tcp_connect+0x224>)
 801a494:	681b      	ldr	r3, [r3, #0]
 801a496:	68fa      	ldr	r2, [r7, #12]
 801a498:	429a      	cmp	r2, r3
 801a49a:	d105      	bne.n	801a4a8 <tcp_connect+0x1b8>
 801a49c:	4b1d      	ldr	r3, [pc, #116]	; (801a514 <tcp_connect+0x224>)
 801a49e:	681b      	ldr	r3, [r3, #0]
 801a4a0:	68db      	ldr	r3, [r3, #12]
 801a4a2:	4a1c      	ldr	r2, [pc, #112]	; (801a514 <tcp_connect+0x224>)
 801a4a4:	6013      	str	r3, [r2, #0]
 801a4a6:	e013      	b.n	801a4d0 <tcp_connect+0x1e0>
 801a4a8:	4b1a      	ldr	r3, [pc, #104]	; (801a514 <tcp_connect+0x224>)
 801a4aa:	681b      	ldr	r3, [r3, #0]
 801a4ac:	623b      	str	r3, [r7, #32]
 801a4ae:	e00c      	b.n	801a4ca <tcp_connect+0x1da>
 801a4b0:	6a3b      	ldr	r3, [r7, #32]
 801a4b2:	68db      	ldr	r3, [r3, #12]
 801a4b4:	68fa      	ldr	r2, [r7, #12]
 801a4b6:	429a      	cmp	r2, r3
 801a4b8:	d104      	bne.n	801a4c4 <tcp_connect+0x1d4>
 801a4ba:	68fb      	ldr	r3, [r7, #12]
 801a4bc:	68da      	ldr	r2, [r3, #12]
 801a4be:	6a3b      	ldr	r3, [r7, #32]
 801a4c0:	60da      	str	r2, [r3, #12]
 801a4c2:	e005      	b.n	801a4d0 <tcp_connect+0x1e0>
 801a4c4:	6a3b      	ldr	r3, [r7, #32]
 801a4c6:	68db      	ldr	r3, [r3, #12]
 801a4c8:	623b      	str	r3, [r7, #32]
 801a4ca:	6a3b      	ldr	r3, [r7, #32]
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	d1ef      	bne.n	801a4b0 <tcp_connect+0x1c0>
 801a4d0:	68fb      	ldr	r3, [r7, #12]
 801a4d2:	2200      	movs	r2, #0
 801a4d4:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 801a4d6:	4b10      	ldr	r3, [pc, #64]	; (801a518 <tcp_connect+0x228>)
 801a4d8:	681a      	ldr	r2, [r3, #0]
 801a4da:	68fb      	ldr	r3, [r7, #12]
 801a4dc:	60da      	str	r2, [r3, #12]
 801a4de:	4a0e      	ldr	r2, [pc, #56]	; (801a518 <tcp_connect+0x228>)
 801a4e0:	68fb      	ldr	r3, [r7, #12]
 801a4e2:	6013      	str	r3, [r2, #0]
 801a4e4:	f002 fe26 	bl	801d134 <tcp_timer_needed>
 801a4e8:	4b0c      	ldr	r3, [pc, #48]	; (801a51c <tcp_connect+0x22c>)
 801a4ea:	2201      	movs	r2, #1
 801a4ec:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 801a4ee:	68f8      	ldr	r0, [r7, #12]
 801a4f0:	f001 ff9a 	bl	801c428 <tcp_output>
  }
  return ret;
 801a4f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801a4f8:	4618      	mov	r0, r3
 801a4fa:	3728      	adds	r7, #40	; 0x28
 801a4fc:	46bd      	mov	sp, r7
 801a4fe:	bd80      	pop	{r7, pc}
 801a500:	080248c0 	.word	0x080248c0
 801a504:	08024b9c 	.word	0x08024b9c
 801a508:	08024904 	.word	0x08024904
 801a50c:	08024bb8 	.word	0x08024bb8
 801a510:	08024bd4 	.word	0x08024bd4
 801a514:	2401a188 	.word	0x2401a188
 801a518:	2401a184 	.word	0x2401a184
 801a51c:	2401a18c 	.word	0x2401a18c

0801a520 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801a520:	b5b0      	push	{r4, r5, r7, lr}
 801a522:	b090      	sub	sp, #64	; 0x40
 801a524:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801a526:	2300      	movs	r3, #0
 801a528:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 801a52c:	4b94      	ldr	r3, [pc, #592]	; (801a780 <tcp_slowtmr+0x260>)
 801a52e:	681b      	ldr	r3, [r3, #0]
 801a530:	3301      	adds	r3, #1
 801a532:	4a93      	ldr	r2, [pc, #588]	; (801a780 <tcp_slowtmr+0x260>)
 801a534:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801a536:	4b93      	ldr	r3, [pc, #588]	; (801a784 <tcp_slowtmr+0x264>)
 801a538:	781b      	ldrb	r3, [r3, #0]
 801a53a:	3301      	adds	r3, #1
 801a53c:	b2da      	uxtb	r2, r3
 801a53e:	4b91      	ldr	r3, [pc, #580]	; (801a784 <tcp_slowtmr+0x264>)
 801a540:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801a542:	2300      	movs	r3, #0
 801a544:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801a546:	4b90      	ldr	r3, [pc, #576]	; (801a788 <tcp_slowtmr+0x268>)
 801a548:	681b      	ldr	r3, [r3, #0]
 801a54a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801a54c:	e29d      	b.n	801aa8a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801a54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a550:	7d1b      	ldrb	r3, [r3, #20]
 801a552:	2b00      	cmp	r3, #0
 801a554:	d106      	bne.n	801a564 <tcp_slowtmr+0x44>
 801a556:	4b8d      	ldr	r3, [pc, #564]	; (801a78c <tcp_slowtmr+0x26c>)
 801a558:	f240 42be 	movw	r2, #1214	; 0x4be
 801a55c:	498c      	ldr	r1, [pc, #560]	; (801a790 <tcp_slowtmr+0x270>)
 801a55e:	488d      	ldr	r0, [pc, #564]	; (801a794 <tcp_slowtmr+0x274>)
 801a560:	f007 fcec 	bl	8021f3c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801a564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a566:	7d1b      	ldrb	r3, [r3, #20]
 801a568:	2b01      	cmp	r3, #1
 801a56a:	d106      	bne.n	801a57a <tcp_slowtmr+0x5a>
 801a56c:	4b87      	ldr	r3, [pc, #540]	; (801a78c <tcp_slowtmr+0x26c>)
 801a56e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801a572:	4989      	ldr	r1, [pc, #548]	; (801a798 <tcp_slowtmr+0x278>)
 801a574:	4887      	ldr	r0, [pc, #540]	; (801a794 <tcp_slowtmr+0x274>)
 801a576:	f007 fce1 	bl	8021f3c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801a57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a57c:	7d1b      	ldrb	r3, [r3, #20]
 801a57e:	2b0a      	cmp	r3, #10
 801a580:	d106      	bne.n	801a590 <tcp_slowtmr+0x70>
 801a582:	4b82      	ldr	r3, [pc, #520]	; (801a78c <tcp_slowtmr+0x26c>)
 801a584:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801a588:	4984      	ldr	r1, [pc, #528]	; (801a79c <tcp_slowtmr+0x27c>)
 801a58a:	4882      	ldr	r0, [pc, #520]	; (801a794 <tcp_slowtmr+0x274>)
 801a58c:	f007 fcd6 	bl	8021f3c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801a590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a592:	7f9a      	ldrb	r2, [r3, #30]
 801a594:	4b7b      	ldr	r3, [pc, #492]	; (801a784 <tcp_slowtmr+0x264>)
 801a596:	781b      	ldrb	r3, [r3, #0]
 801a598:	429a      	cmp	r2, r3
 801a59a:	d105      	bne.n	801a5a8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 801a59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a59e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801a5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5a2:	68db      	ldr	r3, [r3, #12]
 801a5a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 801a5a6:	e270      	b.n	801aa8a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 801a5a8:	4b76      	ldr	r3, [pc, #472]	; (801a784 <tcp_slowtmr+0x264>)
 801a5aa:	781a      	ldrb	r2, [r3, #0]
 801a5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5ae:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 801a5b0:	2300      	movs	r3, #0
 801a5b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801a5b6:	2300      	movs	r3, #0
 801a5b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801a5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5be:	7d1b      	ldrb	r3, [r3, #20]
 801a5c0:	2b02      	cmp	r3, #2
 801a5c2:	d10a      	bne.n	801a5da <tcp_slowtmr+0xba>
 801a5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a5ca:	2b05      	cmp	r3, #5
 801a5cc:	d905      	bls.n	801a5da <tcp_slowtmr+0xba>
      ++pcb_remove;
 801a5ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a5d2:	3301      	adds	r3, #1
 801a5d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a5d8:	e11e      	b.n	801a818 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801a5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a5e0:	2b0b      	cmp	r3, #11
 801a5e2:	d905      	bls.n	801a5f0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 801a5e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a5e8:	3301      	adds	r3, #1
 801a5ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a5ee:	e113      	b.n	801a818 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 801a5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5f2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801a5f6:	2b00      	cmp	r3, #0
 801a5f8:	d075      	beq.n	801a6e6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801a5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	d006      	beq.n	801a610 <tcp_slowtmr+0xf0>
 801a602:	4b62      	ldr	r3, [pc, #392]	; (801a78c <tcp_slowtmr+0x26c>)
 801a604:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801a608:	4965      	ldr	r1, [pc, #404]	; (801a7a0 <tcp_slowtmr+0x280>)
 801a60a:	4862      	ldr	r0, [pc, #392]	; (801a794 <tcp_slowtmr+0x274>)
 801a60c:	f007 fc96 	bl	8021f3c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801a610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a614:	2b00      	cmp	r3, #0
 801a616:	d106      	bne.n	801a626 <tcp_slowtmr+0x106>
 801a618:	4b5c      	ldr	r3, [pc, #368]	; (801a78c <tcp_slowtmr+0x26c>)
 801a61a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801a61e:	4961      	ldr	r1, [pc, #388]	; (801a7a4 <tcp_slowtmr+0x284>)
 801a620:	485c      	ldr	r0, [pc, #368]	; (801a794 <tcp_slowtmr+0x274>)
 801a622:	f007 fc8b 	bl	8021f3c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801a626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a628:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801a62c:	2b0b      	cmp	r3, #11
 801a62e:	d905      	bls.n	801a63c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 801a630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a634:	3301      	adds	r3, #1
 801a636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a63a:	e0ed      	b.n	801a818 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801a63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a63e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801a642:	3b01      	subs	r3, #1
 801a644:	4a58      	ldr	r2, [pc, #352]	; (801a7a8 <tcp_slowtmr+0x288>)
 801a646:	5cd3      	ldrb	r3, [r2, r3]
 801a648:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801a64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a64c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801a650:	7c7a      	ldrb	r2, [r7, #17]
 801a652:	429a      	cmp	r2, r3
 801a654:	d907      	bls.n	801a666 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801a656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a658:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801a65c:	3301      	adds	r3, #1
 801a65e:	b2da      	uxtb	r2, r3
 801a660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a662:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801a666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a668:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801a66c:	7c7a      	ldrb	r2, [r7, #17]
 801a66e:	429a      	cmp	r2, r3
 801a670:	f200 80d2 	bhi.w	801a818 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 801a674:	2301      	movs	r3, #1
 801a676:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 801a678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a67a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a67e:	2b00      	cmp	r3, #0
 801a680:	d108      	bne.n	801a694 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801a682:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a684:	f002 fc88 	bl	801cf98 <tcp_zero_window_probe>
 801a688:	4603      	mov	r3, r0
 801a68a:	2b00      	cmp	r3, #0
 801a68c:	d014      	beq.n	801a6b8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801a68e:	2300      	movs	r3, #0
 801a690:	623b      	str	r3, [r7, #32]
 801a692:	e011      	b.n	801a6b8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801a694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a696:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a69a:	4619      	mov	r1, r3
 801a69c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a69e:	f001 fc3d 	bl	801bf1c <tcp_split_unsent_seg>
 801a6a2:	4603      	mov	r3, r0
 801a6a4:	2b00      	cmp	r3, #0
 801a6a6:	d107      	bne.n	801a6b8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 801a6a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a6aa:	f001 febd 	bl	801c428 <tcp_output>
 801a6ae:	4603      	mov	r3, r0
 801a6b0:	2b00      	cmp	r3, #0
 801a6b2:	d101      	bne.n	801a6b8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 801a6b4:	2300      	movs	r3, #0
 801a6b6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 801a6b8:	6a3b      	ldr	r3, [r7, #32]
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	f000 80ac 	beq.w	801a818 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 801a6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6c2:	2200      	movs	r2, #0
 801a6c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801a6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6ca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801a6ce:	2b06      	cmp	r3, #6
 801a6d0:	f200 80a2 	bhi.w	801a818 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 801a6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6d6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801a6da:	3301      	adds	r3, #1
 801a6dc:	b2da      	uxtb	r2, r3
 801a6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6e0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 801a6e4:	e098      	b.n	801a818 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801a6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6e8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a6ec:	2b00      	cmp	r3, #0
 801a6ee:	db0f      	blt.n	801a710 <tcp_slowtmr+0x1f0>
 801a6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6f2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a6f6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a6fa:	4293      	cmp	r3, r2
 801a6fc:	d008      	beq.n	801a710 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801a6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a700:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a704:	b29b      	uxth	r3, r3
 801a706:	3301      	adds	r3, #1
 801a708:	b29b      	uxth	r3, r3
 801a70a:	b21a      	sxth	r2, r3
 801a70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a70e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 801a710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a712:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801a716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a718:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801a71c:	429a      	cmp	r2, r3
 801a71e:	db7b      	blt.n	801a818 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801a720:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a722:	f002 f973 	bl	801ca0c <tcp_rexmit_rto_prepare>
 801a726:	4603      	mov	r3, r0
 801a728:	2b00      	cmp	r3, #0
 801a72a:	d007      	beq.n	801a73c <tcp_slowtmr+0x21c>
 801a72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a72e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a730:	2b00      	cmp	r3, #0
 801a732:	d171      	bne.n	801a818 <tcp_slowtmr+0x2f8>
 801a734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a738:	2b00      	cmp	r3, #0
 801a73a:	d06d      	beq.n	801a818 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801a73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a73e:	7d1b      	ldrb	r3, [r3, #20]
 801a740:	2b02      	cmp	r3, #2
 801a742:	d03a      	beq.n	801a7ba <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801a744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a746:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a74a:	2b0c      	cmp	r3, #12
 801a74c:	bf28      	it	cs
 801a74e:	230c      	movcs	r3, #12
 801a750:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801a752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a754:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801a758:	10db      	asrs	r3, r3, #3
 801a75a:	b21b      	sxth	r3, r3
 801a75c:	461a      	mov	r2, r3
 801a75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a760:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801a764:	4413      	add	r3, r2
 801a766:	7efa      	ldrb	r2, [r7, #27]
 801a768:	4910      	ldr	r1, [pc, #64]	; (801a7ac <tcp_slowtmr+0x28c>)
 801a76a:	5c8a      	ldrb	r2, [r1, r2]
 801a76c:	4093      	lsls	r3, r2
 801a76e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801a770:	697b      	ldr	r3, [r7, #20]
 801a772:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801a776:	4293      	cmp	r3, r2
 801a778:	dc1a      	bgt.n	801a7b0 <tcp_slowtmr+0x290>
 801a77a:	697b      	ldr	r3, [r7, #20]
 801a77c:	b21a      	sxth	r2, r3
 801a77e:	e019      	b.n	801a7b4 <tcp_slowtmr+0x294>
 801a780:	2401a17c 	.word	0x2401a17c
 801a784:	24013fe1 	.word	0x24013fe1
 801a788:	2401a184 	.word	0x2401a184
 801a78c:	080248c0 	.word	0x080248c0
 801a790:	08024c04 	.word	0x08024c04
 801a794:	08024904 	.word	0x08024904
 801a798:	08024c30 	.word	0x08024c30
 801a79c:	08024c5c 	.word	0x08024c5c
 801a7a0:	08024c8c 	.word	0x08024c8c
 801a7a4:	08024cc0 	.word	0x08024cc0
 801a7a8:	08025ee0 	.word	0x08025ee0
 801a7ac:	08025ed0 	.word	0x08025ed0
 801a7b0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801a7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7bc:	2200      	movs	r2, #0
 801a7be:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801a7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a7cc:	4293      	cmp	r3, r2
 801a7ce:	bf28      	it	cs
 801a7d0:	4613      	movcs	r3, r2
 801a7d2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801a7d4:	8a7b      	ldrh	r3, [r7, #18]
 801a7d6:	085b      	lsrs	r3, r3, #1
 801a7d8:	b29a      	uxth	r2, r3
 801a7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801a7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7e2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801a7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a7ea:	005b      	lsls	r3, r3, #1
 801a7ec:	b29b      	uxth	r3, r3
 801a7ee:	429a      	cmp	r2, r3
 801a7f0:	d206      	bcs.n	801a800 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801a7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a7f6:	005b      	lsls	r3, r3, #1
 801a7f8:	b29a      	uxth	r2, r3
 801a7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801a800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a802:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801a804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a806:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801a80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a80c:	2200      	movs	r2, #0
 801a80e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801a812:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a814:	f002 f96a 	bl	801caec <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801a818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a81a:	7d1b      	ldrb	r3, [r3, #20]
 801a81c:	2b06      	cmp	r3, #6
 801a81e:	d111      	bne.n	801a844 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801a820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a822:	8b5b      	ldrh	r3, [r3, #26]
 801a824:	f003 0310 	and.w	r3, r3, #16
 801a828:	2b00      	cmp	r3, #0
 801a82a:	d00b      	beq.n	801a844 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a82c:	4b9c      	ldr	r3, [pc, #624]	; (801aaa0 <tcp_slowtmr+0x580>)
 801a82e:	681a      	ldr	r2, [r3, #0]
 801a830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a832:	6a1b      	ldr	r3, [r3, #32]
 801a834:	1ad3      	subs	r3, r2, r3
 801a836:	2b28      	cmp	r3, #40	; 0x28
 801a838:	d904      	bls.n	801a844 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801a83a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a83e:	3301      	adds	r3, #1
 801a840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801a844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a846:	7a5b      	ldrb	r3, [r3, #9]
 801a848:	f003 0308 	and.w	r3, r3, #8
 801a84c:	2b00      	cmp	r3, #0
 801a84e:	d04a      	beq.n	801a8e6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 801a850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a852:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801a854:	2b04      	cmp	r3, #4
 801a856:	d003      	beq.n	801a860 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801a858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a85a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801a85c:	2b07      	cmp	r3, #7
 801a85e:	d142      	bne.n	801a8e6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a860:	4b8f      	ldr	r3, [pc, #572]	; (801aaa0 <tcp_slowtmr+0x580>)
 801a862:	681a      	ldr	r2, [r3, #0]
 801a864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a866:	6a1b      	ldr	r3, [r3, #32]
 801a868:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801a86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a86c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801a870:	4b8c      	ldr	r3, [pc, #560]	; (801aaa4 <tcp_slowtmr+0x584>)
 801a872:	440b      	add	r3, r1
 801a874:	498c      	ldr	r1, [pc, #560]	; (801aaa8 <tcp_slowtmr+0x588>)
 801a876:	fba1 1303 	umull	r1, r3, r1, r3
 801a87a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a87c:	429a      	cmp	r2, r3
 801a87e:	d90a      	bls.n	801a896 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801a880:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a884:	3301      	adds	r3, #1
 801a886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801a88a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a88e:	3301      	adds	r3, #1
 801a890:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801a894:	e027      	b.n	801a8e6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a896:	4b82      	ldr	r3, [pc, #520]	; (801aaa0 <tcp_slowtmr+0x580>)
 801a898:	681a      	ldr	r2, [r3, #0]
 801a89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a89c:	6a1b      	ldr	r3, [r3, #32]
 801a89e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801a8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8a2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801a8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8a8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801a8ac:	4618      	mov	r0, r3
 801a8ae:	4b7f      	ldr	r3, [pc, #508]	; (801aaac <tcp_slowtmr+0x58c>)
 801a8b0:	fb00 f303 	mul.w	r3, r0, r3
 801a8b4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801a8b6:	497c      	ldr	r1, [pc, #496]	; (801aaa8 <tcp_slowtmr+0x588>)
 801a8b8:	fba1 1303 	umull	r1, r3, r1, r3
 801a8bc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a8be:	429a      	cmp	r2, r3
 801a8c0:	d911      	bls.n	801a8e6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 801a8c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a8c4:	f002 fb28 	bl	801cf18 <tcp_keepalive>
 801a8c8:	4603      	mov	r3, r0
 801a8ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801a8ce:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801a8d2:	2b00      	cmp	r3, #0
 801a8d4:	d107      	bne.n	801a8e6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 801a8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8d8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801a8dc:	3301      	adds	r3, #1
 801a8de:	b2da      	uxtb	r2, r3
 801a8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8e2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801a8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a8ea:	2b00      	cmp	r3, #0
 801a8ec:	d011      	beq.n	801a912 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801a8ee:	4b6c      	ldr	r3, [pc, #432]	; (801aaa0 <tcp_slowtmr+0x580>)
 801a8f0:	681a      	ldr	r2, [r3, #0]
 801a8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8f4:	6a1b      	ldr	r3, [r3, #32]
 801a8f6:	1ad2      	subs	r2, r2, r3
 801a8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8fa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801a8fe:	4619      	mov	r1, r3
 801a900:	460b      	mov	r3, r1
 801a902:	005b      	lsls	r3, r3, #1
 801a904:	440b      	add	r3, r1
 801a906:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801a908:	429a      	cmp	r2, r3
 801a90a:	d302      	bcc.n	801a912 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801a90c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a90e:	f000 fdcf 	bl	801b4b0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801a912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a914:	7d1b      	ldrb	r3, [r3, #20]
 801a916:	2b03      	cmp	r3, #3
 801a918:	d10b      	bne.n	801a932 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a91a:	4b61      	ldr	r3, [pc, #388]	; (801aaa0 <tcp_slowtmr+0x580>)
 801a91c:	681a      	ldr	r2, [r3, #0]
 801a91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a920:	6a1b      	ldr	r3, [r3, #32]
 801a922:	1ad3      	subs	r3, r2, r3
 801a924:	2b28      	cmp	r3, #40	; 0x28
 801a926:	d904      	bls.n	801a932 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801a928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a92c:	3301      	adds	r3, #1
 801a92e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801a932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a934:	7d1b      	ldrb	r3, [r3, #20]
 801a936:	2b09      	cmp	r3, #9
 801a938:	d10b      	bne.n	801a952 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801a93a:	4b59      	ldr	r3, [pc, #356]	; (801aaa0 <tcp_slowtmr+0x580>)
 801a93c:	681a      	ldr	r2, [r3, #0]
 801a93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a940:	6a1b      	ldr	r3, [r3, #32]
 801a942:	1ad3      	subs	r3, r2, r3
 801a944:	2bf0      	cmp	r3, #240	; 0xf0
 801a946:	d904      	bls.n	801a952 <tcp_slowtmr+0x432>
        ++pcb_remove;
 801a948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a94c:	3301      	adds	r3, #1
 801a94e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801a952:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a956:	2b00      	cmp	r3, #0
 801a958:	d060      	beq.n	801aa1c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801a95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a95c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a960:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801a962:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a964:	f000 fc60 	bl	801b228 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801a968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a96a:	2b00      	cmp	r3, #0
 801a96c:	d010      	beq.n	801a990 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801a96e:	4b50      	ldr	r3, [pc, #320]	; (801aab0 <tcp_slowtmr+0x590>)
 801a970:	681b      	ldr	r3, [r3, #0]
 801a972:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a974:	429a      	cmp	r2, r3
 801a976:	d106      	bne.n	801a986 <tcp_slowtmr+0x466>
 801a978:	4b4e      	ldr	r3, [pc, #312]	; (801aab4 <tcp_slowtmr+0x594>)
 801a97a:	f240 526d 	movw	r2, #1389	; 0x56d
 801a97e:	494e      	ldr	r1, [pc, #312]	; (801aab8 <tcp_slowtmr+0x598>)
 801a980:	484e      	ldr	r0, [pc, #312]	; (801aabc <tcp_slowtmr+0x59c>)
 801a982:	f007 fadb 	bl	8021f3c <iprintf>
        prev->next = pcb->next;
 801a986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a988:	68da      	ldr	r2, [r3, #12]
 801a98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a98c:	60da      	str	r2, [r3, #12]
 801a98e:	e00f      	b.n	801a9b0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801a990:	4b47      	ldr	r3, [pc, #284]	; (801aab0 <tcp_slowtmr+0x590>)
 801a992:	681b      	ldr	r3, [r3, #0]
 801a994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a996:	429a      	cmp	r2, r3
 801a998:	d006      	beq.n	801a9a8 <tcp_slowtmr+0x488>
 801a99a:	4b46      	ldr	r3, [pc, #280]	; (801aab4 <tcp_slowtmr+0x594>)
 801a99c:	f240 5271 	movw	r2, #1393	; 0x571
 801a9a0:	4947      	ldr	r1, [pc, #284]	; (801aac0 <tcp_slowtmr+0x5a0>)
 801a9a2:	4846      	ldr	r0, [pc, #280]	; (801aabc <tcp_slowtmr+0x59c>)
 801a9a4:	f007 faca 	bl	8021f3c <iprintf>
        tcp_active_pcbs = pcb->next;
 801a9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9aa:	68db      	ldr	r3, [r3, #12]
 801a9ac:	4a40      	ldr	r2, [pc, #256]	; (801aab0 <tcp_slowtmr+0x590>)
 801a9ae:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801a9b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a9b4:	2b00      	cmp	r3, #0
 801a9b6:	d013      	beq.n	801a9e0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801a9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9ba:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801a9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9be:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801a9c0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801a9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9c4:	3304      	adds	r3, #4
 801a9c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a9c8:	8ad2      	ldrh	r2, [r2, #22]
 801a9ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a9cc:	8b09      	ldrh	r1, [r1, #24]
 801a9ce:	9102      	str	r1, [sp, #8]
 801a9d0:	9201      	str	r2, [sp, #4]
 801a9d2:	9300      	str	r3, [sp, #0]
 801a9d4:	462b      	mov	r3, r5
 801a9d6:	4622      	mov	r2, r4
 801a9d8:	4601      	mov	r1, r0
 801a9da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a9dc:	f002 f9e8 	bl	801cdb0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801a9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9e2:	691b      	ldr	r3, [r3, #16]
 801a9e4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801a9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9e8:	7d1b      	ldrb	r3, [r3, #20]
 801a9ea:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801a9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9ee:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801a9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9f2:	68db      	ldr	r3, [r3, #12]
 801a9f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801a9f6:	6838      	ldr	r0, [r7, #0]
 801a9f8:	f7ff f896 	bl	8019b28 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801a9fc:	4b31      	ldr	r3, [pc, #196]	; (801aac4 <tcp_slowtmr+0x5a4>)
 801a9fe:	2200      	movs	r2, #0
 801aa00:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801aa02:	68fb      	ldr	r3, [r7, #12]
 801aa04:	2b00      	cmp	r3, #0
 801aa06:	d004      	beq.n	801aa12 <tcp_slowtmr+0x4f2>
 801aa08:	68fb      	ldr	r3, [r7, #12]
 801aa0a:	f06f 010c 	mvn.w	r1, #12
 801aa0e:	68b8      	ldr	r0, [r7, #8]
 801aa10:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801aa12:	4b2c      	ldr	r3, [pc, #176]	; (801aac4 <tcp_slowtmr+0x5a4>)
 801aa14:	781b      	ldrb	r3, [r3, #0]
 801aa16:	2b00      	cmp	r3, #0
 801aa18:	d037      	beq.n	801aa8a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 801aa1a:	e592      	b.n	801a542 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801aa1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa1e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801aa20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa22:	68db      	ldr	r3, [r3, #12]
 801aa24:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801aa26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa28:	7f1b      	ldrb	r3, [r3, #28]
 801aa2a:	3301      	adds	r3, #1
 801aa2c:	b2da      	uxtb	r2, r3
 801aa2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa30:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801aa32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa34:	7f1a      	ldrb	r2, [r3, #28]
 801aa36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa38:	7f5b      	ldrb	r3, [r3, #29]
 801aa3a:	429a      	cmp	r2, r3
 801aa3c:	d325      	bcc.n	801aa8a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801aa3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa40:	2200      	movs	r2, #0
 801aa42:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801aa44:	4b1f      	ldr	r3, [pc, #124]	; (801aac4 <tcp_slowtmr+0x5a4>)
 801aa46:	2200      	movs	r2, #0
 801aa48:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801aa4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801aa50:	2b00      	cmp	r3, #0
 801aa52:	d00b      	beq.n	801aa6c <tcp_slowtmr+0x54c>
 801aa54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801aa5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801aa5c:	6912      	ldr	r2, [r2, #16]
 801aa5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801aa60:	4610      	mov	r0, r2
 801aa62:	4798      	blx	r3
 801aa64:	4603      	mov	r3, r0
 801aa66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801aa6a:	e002      	b.n	801aa72 <tcp_slowtmr+0x552>
 801aa6c:	2300      	movs	r3, #0
 801aa6e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801aa72:	4b14      	ldr	r3, [pc, #80]	; (801aac4 <tcp_slowtmr+0x5a4>)
 801aa74:	781b      	ldrb	r3, [r3, #0]
 801aa76:	2b00      	cmp	r3, #0
 801aa78:	d000      	beq.n	801aa7c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801aa7a:	e562      	b.n	801a542 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801aa7c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801aa80:	2b00      	cmp	r3, #0
 801aa82:	d102      	bne.n	801aa8a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 801aa84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801aa86:	f001 fccf 	bl	801c428 <tcp_output>
  while (pcb != NULL) {
 801aa8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa8c:	2b00      	cmp	r3, #0
 801aa8e:	f47f ad5e 	bne.w	801a54e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801aa92:	2300      	movs	r3, #0
 801aa94:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801aa96:	4b0c      	ldr	r3, [pc, #48]	; (801aac8 <tcp_slowtmr+0x5a8>)
 801aa98:	681b      	ldr	r3, [r3, #0]
 801aa9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801aa9c:	e069      	b.n	801ab72 <tcp_slowtmr+0x652>
 801aa9e:	bf00      	nop
 801aaa0:	2401a17c 	.word	0x2401a17c
 801aaa4:	000a4cb8 	.word	0x000a4cb8
 801aaa8:	10624dd3 	.word	0x10624dd3
 801aaac:	000124f8 	.word	0x000124f8
 801aab0:	2401a184 	.word	0x2401a184
 801aab4:	080248c0 	.word	0x080248c0
 801aab8:	08024cf8 	.word	0x08024cf8
 801aabc:	08024904 	.word	0x08024904
 801aac0:	08024d24 	.word	0x08024d24
 801aac4:	2401a18c 	.word	0x2401a18c
 801aac8:	2401a178 	.word	0x2401a178
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801aacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aace:	7d1b      	ldrb	r3, [r3, #20]
 801aad0:	2b0a      	cmp	r3, #10
 801aad2:	d006      	beq.n	801aae2 <tcp_slowtmr+0x5c2>
 801aad4:	4b2b      	ldr	r3, [pc, #172]	; (801ab84 <tcp_slowtmr+0x664>)
 801aad6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801aada:	492b      	ldr	r1, [pc, #172]	; (801ab88 <tcp_slowtmr+0x668>)
 801aadc:	482b      	ldr	r0, [pc, #172]	; (801ab8c <tcp_slowtmr+0x66c>)
 801aade:	f007 fa2d 	bl	8021f3c <iprintf>
    pcb_remove = 0;
 801aae2:	2300      	movs	r3, #0
 801aae4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801aae8:	4b29      	ldr	r3, [pc, #164]	; (801ab90 <tcp_slowtmr+0x670>)
 801aaea:	681a      	ldr	r2, [r3, #0]
 801aaec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aaee:	6a1b      	ldr	r3, [r3, #32]
 801aaf0:	1ad3      	subs	r3, r2, r3
 801aaf2:	2bf0      	cmp	r3, #240	; 0xf0
 801aaf4:	d904      	bls.n	801ab00 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801aaf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801aafa:	3301      	adds	r3, #1
 801aafc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801ab00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ab04:	2b00      	cmp	r3, #0
 801ab06:	d02f      	beq.n	801ab68 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801ab08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ab0a:	f000 fb8d 	bl	801b228 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801ab0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab10:	2b00      	cmp	r3, #0
 801ab12:	d010      	beq.n	801ab36 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801ab14:	4b1f      	ldr	r3, [pc, #124]	; (801ab94 <tcp_slowtmr+0x674>)
 801ab16:	681b      	ldr	r3, [r3, #0]
 801ab18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ab1a:	429a      	cmp	r2, r3
 801ab1c:	d106      	bne.n	801ab2c <tcp_slowtmr+0x60c>
 801ab1e:	4b19      	ldr	r3, [pc, #100]	; (801ab84 <tcp_slowtmr+0x664>)
 801ab20:	f240 52af 	movw	r2, #1455	; 0x5af
 801ab24:	491c      	ldr	r1, [pc, #112]	; (801ab98 <tcp_slowtmr+0x678>)
 801ab26:	4819      	ldr	r0, [pc, #100]	; (801ab8c <tcp_slowtmr+0x66c>)
 801ab28:	f007 fa08 	bl	8021f3c <iprintf>
        prev->next = pcb->next;
 801ab2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab2e:	68da      	ldr	r2, [r3, #12]
 801ab30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab32:	60da      	str	r2, [r3, #12]
 801ab34:	e00f      	b.n	801ab56 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801ab36:	4b17      	ldr	r3, [pc, #92]	; (801ab94 <tcp_slowtmr+0x674>)
 801ab38:	681b      	ldr	r3, [r3, #0]
 801ab3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ab3c:	429a      	cmp	r2, r3
 801ab3e:	d006      	beq.n	801ab4e <tcp_slowtmr+0x62e>
 801ab40:	4b10      	ldr	r3, [pc, #64]	; (801ab84 <tcp_slowtmr+0x664>)
 801ab42:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801ab46:	4915      	ldr	r1, [pc, #84]	; (801ab9c <tcp_slowtmr+0x67c>)
 801ab48:	4810      	ldr	r0, [pc, #64]	; (801ab8c <tcp_slowtmr+0x66c>)
 801ab4a:	f007 f9f7 	bl	8021f3c <iprintf>
        tcp_tw_pcbs = pcb->next;
 801ab4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab50:	68db      	ldr	r3, [r3, #12]
 801ab52:	4a10      	ldr	r2, [pc, #64]	; (801ab94 <tcp_slowtmr+0x674>)
 801ab54:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801ab56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab58:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801ab5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab5c:	68db      	ldr	r3, [r3, #12]
 801ab5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801ab60:	69f8      	ldr	r0, [r7, #28]
 801ab62:	f7fe ffe1 	bl	8019b28 <tcp_free>
 801ab66:	e004      	b.n	801ab72 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801ab68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab6a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801ab6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab6e:	68db      	ldr	r3, [r3, #12]
 801ab70:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801ab72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab74:	2b00      	cmp	r3, #0
 801ab76:	d1a9      	bne.n	801aacc <tcp_slowtmr+0x5ac>
    }
  }
}
 801ab78:	bf00      	nop
 801ab7a:	bf00      	nop
 801ab7c:	3730      	adds	r7, #48	; 0x30
 801ab7e:	46bd      	mov	sp, r7
 801ab80:	bdb0      	pop	{r4, r5, r7, pc}
 801ab82:	bf00      	nop
 801ab84:	080248c0 	.word	0x080248c0
 801ab88:	08024d50 	.word	0x08024d50
 801ab8c:	08024904 	.word	0x08024904
 801ab90:	2401a17c 	.word	0x2401a17c
 801ab94:	2401a178 	.word	0x2401a178
 801ab98:	08024d80 	.word	0x08024d80
 801ab9c:	08024da8 	.word	0x08024da8

0801aba0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801aba0:	b580      	push	{r7, lr}
 801aba2:	b082      	sub	sp, #8
 801aba4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801aba6:	4b2d      	ldr	r3, [pc, #180]	; (801ac5c <tcp_fasttmr+0xbc>)
 801aba8:	781b      	ldrb	r3, [r3, #0]
 801abaa:	3301      	adds	r3, #1
 801abac:	b2da      	uxtb	r2, r3
 801abae:	4b2b      	ldr	r3, [pc, #172]	; (801ac5c <tcp_fasttmr+0xbc>)
 801abb0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801abb2:	4b2b      	ldr	r3, [pc, #172]	; (801ac60 <tcp_fasttmr+0xc0>)
 801abb4:	681b      	ldr	r3, [r3, #0]
 801abb6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801abb8:	e048      	b.n	801ac4c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801abba:	687b      	ldr	r3, [r7, #4]
 801abbc:	7f9a      	ldrb	r2, [r3, #30]
 801abbe:	4b27      	ldr	r3, [pc, #156]	; (801ac5c <tcp_fasttmr+0xbc>)
 801abc0:	781b      	ldrb	r3, [r3, #0]
 801abc2:	429a      	cmp	r2, r3
 801abc4:	d03f      	beq.n	801ac46 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801abc6:	4b25      	ldr	r3, [pc, #148]	; (801ac5c <tcp_fasttmr+0xbc>)
 801abc8:	781a      	ldrb	r2, [r3, #0]
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801abce:	687b      	ldr	r3, [r7, #4]
 801abd0:	8b5b      	ldrh	r3, [r3, #26]
 801abd2:	f003 0301 	and.w	r3, r3, #1
 801abd6:	2b00      	cmp	r3, #0
 801abd8:	d010      	beq.n	801abfc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801abda:	687b      	ldr	r3, [r7, #4]
 801abdc:	8b5b      	ldrh	r3, [r3, #26]
 801abde:	f043 0302 	orr.w	r3, r3, #2
 801abe2:	b29a      	uxth	r2, r3
 801abe4:	687b      	ldr	r3, [r7, #4]
 801abe6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801abe8:	6878      	ldr	r0, [r7, #4]
 801abea:	f001 fc1d 	bl	801c428 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	8b5b      	ldrh	r3, [r3, #26]
 801abf2:	f023 0303 	bic.w	r3, r3, #3
 801abf6:	b29a      	uxth	r2, r3
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801abfc:	687b      	ldr	r3, [r7, #4]
 801abfe:	8b5b      	ldrh	r3, [r3, #26]
 801ac00:	f003 0308 	and.w	r3, r3, #8
 801ac04:	2b00      	cmp	r3, #0
 801ac06:	d009      	beq.n	801ac1c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	8b5b      	ldrh	r3, [r3, #26]
 801ac0c:	f023 0308 	bic.w	r3, r3, #8
 801ac10:	b29a      	uxth	r2, r3
 801ac12:	687b      	ldr	r3, [r7, #4]
 801ac14:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801ac16:	6878      	ldr	r0, [r7, #4]
 801ac18:	f7ff f91a 	bl	8019e50 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	68db      	ldr	r3, [r3, #12]
 801ac20:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801ac22:	687b      	ldr	r3, [r7, #4]
 801ac24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ac26:	2b00      	cmp	r3, #0
 801ac28:	d00a      	beq.n	801ac40 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801ac2a:	4b0e      	ldr	r3, [pc, #56]	; (801ac64 <tcp_fasttmr+0xc4>)
 801ac2c:	2200      	movs	r2, #0
 801ac2e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801ac30:	6878      	ldr	r0, [r7, #4]
 801ac32:	f000 f819 	bl	801ac68 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801ac36:	4b0b      	ldr	r3, [pc, #44]	; (801ac64 <tcp_fasttmr+0xc4>)
 801ac38:	781b      	ldrb	r3, [r3, #0]
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	d000      	beq.n	801ac40 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801ac3e:	e7b8      	b.n	801abb2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801ac40:	683b      	ldr	r3, [r7, #0]
 801ac42:	607b      	str	r3, [r7, #4]
 801ac44:	e002      	b.n	801ac4c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	68db      	ldr	r3, [r3, #12]
 801ac4a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	2b00      	cmp	r3, #0
 801ac50:	d1b3      	bne.n	801abba <tcp_fasttmr+0x1a>
    }
  }
}
 801ac52:	bf00      	nop
 801ac54:	bf00      	nop
 801ac56:	3708      	adds	r7, #8
 801ac58:	46bd      	mov	sp, r7
 801ac5a:	bd80      	pop	{r7, pc}
 801ac5c:	24013fe1 	.word	0x24013fe1
 801ac60:	2401a184 	.word	0x2401a184
 801ac64:	2401a18c 	.word	0x2401a18c

0801ac68 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801ac68:	b590      	push	{r4, r7, lr}
 801ac6a:	b085      	sub	sp, #20
 801ac6c:	af00      	add	r7, sp, #0
 801ac6e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	2b00      	cmp	r3, #0
 801ac74:	d109      	bne.n	801ac8a <tcp_process_refused_data+0x22>
 801ac76:	4b37      	ldr	r3, [pc, #220]	; (801ad54 <tcp_process_refused_data+0xec>)
 801ac78:	f240 6209 	movw	r2, #1545	; 0x609
 801ac7c:	4936      	ldr	r1, [pc, #216]	; (801ad58 <tcp_process_refused_data+0xf0>)
 801ac7e:	4837      	ldr	r0, [pc, #220]	; (801ad5c <tcp_process_refused_data+0xf4>)
 801ac80:	f007 f95c 	bl	8021f3c <iprintf>
 801ac84:	f06f 030f 	mvn.w	r3, #15
 801ac88:	e060      	b.n	801ad4c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801ac8a:	687b      	ldr	r3, [r7, #4]
 801ac8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ac8e:	7b5b      	ldrb	r3, [r3, #13]
 801ac90:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801ac92:	687b      	ldr	r3, [r7, #4]
 801ac94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ac96:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	2200      	movs	r2, #0
 801ac9c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801ac9e:	687b      	ldr	r3, [r7, #4]
 801aca0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801aca4:	2b00      	cmp	r3, #0
 801aca6:	d00b      	beq.n	801acc0 <tcp_process_refused_data+0x58>
 801aca8:	687b      	ldr	r3, [r7, #4]
 801acaa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	6918      	ldr	r0, [r3, #16]
 801acb2:	2300      	movs	r3, #0
 801acb4:	68ba      	ldr	r2, [r7, #8]
 801acb6:	6879      	ldr	r1, [r7, #4]
 801acb8:	47a0      	blx	r4
 801acba:	4603      	mov	r3, r0
 801acbc:	73fb      	strb	r3, [r7, #15]
 801acbe:	e007      	b.n	801acd0 <tcp_process_refused_data+0x68>
 801acc0:	2300      	movs	r3, #0
 801acc2:	68ba      	ldr	r2, [r7, #8]
 801acc4:	6879      	ldr	r1, [r7, #4]
 801acc6:	2000      	movs	r0, #0
 801acc8:	f000 f878 	bl	801adbc <tcp_recv_null>
 801accc:	4603      	mov	r3, r0
 801acce:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801acd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801acd4:	2b00      	cmp	r3, #0
 801acd6:	d12a      	bne.n	801ad2e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801acd8:	7bbb      	ldrb	r3, [r7, #14]
 801acda:	f003 0320 	and.w	r3, r3, #32
 801acde:	2b00      	cmp	r3, #0
 801ace0:	d033      	beq.n	801ad4a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ace6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801acea:	d005      	beq.n	801acf8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801acec:	687b      	ldr	r3, [r7, #4]
 801acee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801acf0:	3301      	adds	r3, #1
 801acf2:	b29a      	uxth	r2, r3
 801acf4:	687b      	ldr	r3, [r7, #4]
 801acf6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801acfe:	2b00      	cmp	r3, #0
 801ad00:	d00b      	beq.n	801ad1a <tcp_process_refused_data+0xb2>
 801ad02:	687b      	ldr	r3, [r7, #4]
 801ad04:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801ad08:	687b      	ldr	r3, [r7, #4]
 801ad0a:	6918      	ldr	r0, [r3, #16]
 801ad0c:	2300      	movs	r3, #0
 801ad0e:	2200      	movs	r2, #0
 801ad10:	6879      	ldr	r1, [r7, #4]
 801ad12:	47a0      	blx	r4
 801ad14:	4603      	mov	r3, r0
 801ad16:	73fb      	strb	r3, [r7, #15]
 801ad18:	e001      	b.n	801ad1e <tcp_process_refused_data+0xb6>
 801ad1a:	2300      	movs	r3, #0
 801ad1c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801ad1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ad22:	f113 0f0d 	cmn.w	r3, #13
 801ad26:	d110      	bne.n	801ad4a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801ad28:	f06f 030c 	mvn.w	r3, #12
 801ad2c:	e00e      	b.n	801ad4c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801ad2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ad32:	f113 0f0d 	cmn.w	r3, #13
 801ad36:	d102      	bne.n	801ad3e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801ad38:	f06f 030c 	mvn.w	r3, #12
 801ad3c:	e006      	b.n	801ad4c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801ad3e:	687b      	ldr	r3, [r7, #4]
 801ad40:	68ba      	ldr	r2, [r7, #8]
 801ad42:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801ad44:	f06f 0304 	mvn.w	r3, #4
 801ad48:	e000      	b.n	801ad4c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801ad4a:	2300      	movs	r3, #0
}
 801ad4c:	4618      	mov	r0, r3
 801ad4e:	3714      	adds	r7, #20
 801ad50:	46bd      	mov	sp, r7
 801ad52:	bd90      	pop	{r4, r7, pc}
 801ad54:	080248c0 	.word	0x080248c0
 801ad58:	08024dd0 	.word	0x08024dd0
 801ad5c:	08024904 	.word	0x08024904

0801ad60 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801ad60:	b580      	push	{r7, lr}
 801ad62:	b084      	sub	sp, #16
 801ad64:	af00      	add	r7, sp, #0
 801ad66:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801ad68:	e007      	b.n	801ad7a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801ad6a:	687b      	ldr	r3, [r7, #4]
 801ad6c:	681b      	ldr	r3, [r3, #0]
 801ad6e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801ad70:	6878      	ldr	r0, [r7, #4]
 801ad72:	f000 f80a 	bl	801ad8a <tcp_seg_free>
    seg = next;
 801ad76:	68fb      	ldr	r3, [r7, #12]
 801ad78:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801ad7a:	687b      	ldr	r3, [r7, #4]
 801ad7c:	2b00      	cmp	r3, #0
 801ad7e:	d1f4      	bne.n	801ad6a <tcp_segs_free+0xa>
  }
}
 801ad80:	bf00      	nop
 801ad82:	bf00      	nop
 801ad84:	3710      	adds	r7, #16
 801ad86:	46bd      	mov	sp, r7
 801ad88:	bd80      	pop	{r7, pc}

0801ad8a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801ad8a:	b580      	push	{r7, lr}
 801ad8c:	b082      	sub	sp, #8
 801ad8e:	af00      	add	r7, sp, #0
 801ad90:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801ad92:	687b      	ldr	r3, [r7, #4]
 801ad94:	2b00      	cmp	r3, #0
 801ad96:	d00c      	beq.n	801adb2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	685b      	ldr	r3, [r3, #4]
 801ad9c:	2b00      	cmp	r3, #0
 801ad9e:	d004      	beq.n	801adaa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	685b      	ldr	r3, [r3, #4]
 801ada4:	4618      	mov	r0, r3
 801ada6:	f7fe fc97 	bl	80196d8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801adaa:	6879      	ldr	r1, [r7, #4]
 801adac:	2003      	movs	r0, #3
 801adae:	f7fe f961 	bl	8019074 <memp_free>
  }
}
 801adb2:	bf00      	nop
 801adb4:	3708      	adds	r7, #8
 801adb6:	46bd      	mov	sp, r7
 801adb8:	bd80      	pop	{r7, pc}
	...

0801adbc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801adbc:	b580      	push	{r7, lr}
 801adbe:	b084      	sub	sp, #16
 801adc0:	af00      	add	r7, sp, #0
 801adc2:	60f8      	str	r0, [r7, #12]
 801adc4:	60b9      	str	r1, [r7, #8]
 801adc6:	607a      	str	r2, [r7, #4]
 801adc8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801adca:	68bb      	ldr	r3, [r7, #8]
 801adcc:	2b00      	cmp	r3, #0
 801adce:	d109      	bne.n	801ade4 <tcp_recv_null+0x28>
 801add0:	4b12      	ldr	r3, [pc, #72]	; (801ae1c <tcp_recv_null+0x60>)
 801add2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801add6:	4912      	ldr	r1, [pc, #72]	; (801ae20 <tcp_recv_null+0x64>)
 801add8:	4812      	ldr	r0, [pc, #72]	; (801ae24 <tcp_recv_null+0x68>)
 801adda:	f007 f8af 	bl	8021f3c <iprintf>
 801adde:	f06f 030f 	mvn.w	r3, #15
 801ade2:	e016      	b.n	801ae12 <tcp_recv_null+0x56>

  if (p != NULL) {
 801ade4:	687b      	ldr	r3, [r7, #4]
 801ade6:	2b00      	cmp	r3, #0
 801ade8:	d009      	beq.n	801adfe <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801adea:	687b      	ldr	r3, [r7, #4]
 801adec:	891b      	ldrh	r3, [r3, #8]
 801adee:	4619      	mov	r1, r3
 801adf0:	68b8      	ldr	r0, [r7, #8]
 801adf2:	f7ff f9e7 	bl	801a1c4 <tcp_recved>
    pbuf_free(p);
 801adf6:	6878      	ldr	r0, [r7, #4]
 801adf8:	f7fe fc6e 	bl	80196d8 <pbuf_free>
 801adfc:	e008      	b.n	801ae10 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801adfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ae02:	2b00      	cmp	r3, #0
 801ae04:	d104      	bne.n	801ae10 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801ae06:	68b8      	ldr	r0, [r7, #8]
 801ae08:	f7ff f88c 	bl	8019f24 <tcp_close>
 801ae0c:	4603      	mov	r3, r0
 801ae0e:	e000      	b.n	801ae12 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801ae10:	2300      	movs	r3, #0
}
 801ae12:	4618      	mov	r0, r3
 801ae14:	3710      	adds	r7, #16
 801ae16:	46bd      	mov	sp, r7
 801ae18:	bd80      	pop	{r7, pc}
 801ae1a:	bf00      	nop
 801ae1c:	080248c0 	.word	0x080248c0
 801ae20:	08024e30 	.word	0x08024e30
 801ae24:	08024904 	.word	0x08024904

0801ae28 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801ae28:	b580      	push	{r7, lr}
 801ae2a:	b086      	sub	sp, #24
 801ae2c:	af00      	add	r7, sp, #0
 801ae2e:	4603      	mov	r3, r0
 801ae30:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801ae32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ae36:	2b00      	cmp	r3, #0
 801ae38:	db01      	blt.n	801ae3e <tcp_kill_prio+0x16>
 801ae3a:	79fb      	ldrb	r3, [r7, #7]
 801ae3c:	e000      	b.n	801ae40 <tcp_kill_prio+0x18>
 801ae3e:	237f      	movs	r3, #127	; 0x7f
 801ae40:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801ae42:	7afb      	ldrb	r3, [r7, #11]
 801ae44:	2b00      	cmp	r3, #0
 801ae46:	d034      	beq.n	801aeb2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801ae48:	7afb      	ldrb	r3, [r7, #11]
 801ae4a:	3b01      	subs	r3, #1
 801ae4c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801ae4e:	2300      	movs	r3, #0
 801ae50:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801ae52:	2300      	movs	r3, #0
 801ae54:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ae56:	4b19      	ldr	r3, [pc, #100]	; (801aebc <tcp_kill_prio+0x94>)
 801ae58:	681b      	ldr	r3, [r3, #0]
 801ae5a:	617b      	str	r3, [r7, #20]
 801ae5c:	e01f      	b.n	801ae9e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801ae5e:	697b      	ldr	r3, [r7, #20]
 801ae60:	7d5b      	ldrb	r3, [r3, #21]
 801ae62:	7afa      	ldrb	r2, [r7, #11]
 801ae64:	429a      	cmp	r2, r3
 801ae66:	d80c      	bhi.n	801ae82 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801ae68:	697b      	ldr	r3, [r7, #20]
 801ae6a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801ae6c:	7afa      	ldrb	r2, [r7, #11]
 801ae6e:	429a      	cmp	r2, r3
 801ae70:	d112      	bne.n	801ae98 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801ae72:	4b13      	ldr	r3, [pc, #76]	; (801aec0 <tcp_kill_prio+0x98>)
 801ae74:	681a      	ldr	r2, [r3, #0]
 801ae76:	697b      	ldr	r3, [r7, #20]
 801ae78:	6a1b      	ldr	r3, [r3, #32]
 801ae7a:	1ad3      	subs	r3, r2, r3
 801ae7c:	68fa      	ldr	r2, [r7, #12]
 801ae7e:	429a      	cmp	r2, r3
 801ae80:	d80a      	bhi.n	801ae98 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801ae82:	4b0f      	ldr	r3, [pc, #60]	; (801aec0 <tcp_kill_prio+0x98>)
 801ae84:	681a      	ldr	r2, [r3, #0]
 801ae86:	697b      	ldr	r3, [r7, #20]
 801ae88:	6a1b      	ldr	r3, [r3, #32]
 801ae8a:	1ad3      	subs	r3, r2, r3
 801ae8c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801ae8e:	697b      	ldr	r3, [r7, #20]
 801ae90:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801ae92:	697b      	ldr	r3, [r7, #20]
 801ae94:	7d5b      	ldrb	r3, [r3, #21]
 801ae96:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ae98:	697b      	ldr	r3, [r7, #20]
 801ae9a:	68db      	ldr	r3, [r3, #12]
 801ae9c:	617b      	str	r3, [r7, #20]
 801ae9e:	697b      	ldr	r3, [r7, #20]
 801aea0:	2b00      	cmp	r3, #0
 801aea2:	d1dc      	bne.n	801ae5e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801aea4:	693b      	ldr	r3, [r7, #16]
 801aea6:	2b00      	cmp	r3, #0
 801aea8:	d004      	beq.n	801aeb4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801aeaa:	6938      	ldr	r0, [r7, #16]
 801aeac:	f7ff f924 	bl	801a0f8 <tcp_abort>
 801aeb0:	e000      	b.n	801aeb4 <tcp_kill_prio+0x8c>
    return;
 801aeb2:	bf00      	nop
  }
}
 801aeb4:	3718      	adds	r7, #24
 801aeb6:	46bd      	mov	sp, r7
 801aeb8:	bd80      	pop	{r7, pc}
 801aeba:	bf00      	nop
 801aebc:	2401a184 	.word	0x2401a184
 801aec0:	2401a17c 	.word	0x2401a17c

0801aec4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801aec4:	b580      	push	{r7, lr}
 801aec6:	b086      	sub	sp, #24
 801aec8:	af00      	add	r7, sp, #0
 801aeca:	4603      	mov	r3, r0
 801aecc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801aece:	79fb      	ldrb	r3, [r7, #7]
 801aed0:	2b08      	cmp	r3, #8
 801aed2:	d009      	beq.n	801aee8 <tcp_kill_state+0x24>
 801aed4:	79fb      	ldrb	r3, [r7, #7]
 801aed6:	2b09      	cmp	r3, #9
 801aed8:	d006      	beq.n	801aee8 <tcp_kill_state+0x24>
 801aeda:	4b1a      	ldr	r3, [pc, #104]	; (801af44 <tcp_kill_state+0x80>)
 801aedc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801aee0:	4919      	ldr	r1, [pc, #100]	; (801af48 <tcp_kill_state+0x84>)
 801aee2:	481a      	ldr	r0, [pc, #104]	; (801af4c <tcp_kill_state+0x88>)
 801aee4:	f007 f82a 	bl	8021f3c <iprintf>

  inactivity = 0;
 801aee8:	2300      	movs	r3, #0
 801aeea:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801aeec:	2300      	movs	r3, #0
 801aeee:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801aef0:	4b17      	ldr	r3, [pc, #92]	; (801af50 <tcp_kill_state+0x8c>)
 801aef2:	681b      	ldr	r3, [r3, #0]
 801aef4:	617b      	str	r3, [r7, #20]
 801aef6:	e017      	b.n	801af28 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801aef8:	697b      	ldr	r3, [r7, #20]
 801aefa:	7d1b      	ldrb	r3, [r3, #20]
 801aefc:	79fa      	ldrb	r2, [r7, #7]
 801aefe:	429a      	cmp	r2, r3
 801af00:	d10f      	bne.n	801af22 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801af02:	4b14      	ldr	r3, [pc, #80]	; (801af54 <tcp_kill_state+0x90>)
 801af04:	681a      	ldr	r2, [r3, #0]
 801af06:	697b      	ldr	r3, [r7, #20]
 801af08:	6a1b      	ldr	r3, [r3, #32]
 801af0a:	1ad3      	subs	r3, r2, r3
 801af0c:	68fa      	ldr	r2, [r7, #12]
 801af0e:	429a      	cmp	r2, r3
 801af10:	d807      	bhi.n	801af22 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801af12:	4b10      	ldr	r3, [pc, #64]	; (801af54 <tcp_kill_state+0x90>)
 801af14:	681a      	ldr	r2, [r3, #0]
 801af16:	697b      	ldr	r3, [r7, #20]
 801af18:	6a1b      	ldr	r3, [r3, #32]
 801af1a:	1ad3      	subs	r3, r2, r3
 801af1c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801af1e:	697b      	ldr	r3, [r7, #20]
 801af20:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801af22:	697b      	ldr	r3, [r7, #20]
 801af24:	68db      	ldr	r3, [r3, #12]
 801af26:	617b      	str	r3, [r7, #20]
 801af28:	697b      	ldr	r3, [r7, #20]
 801af2a:	2b00      	cmp	r3, #0
 801af2c:	d1e4      	bne.n	801aef8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801af2e:	693b      	ldr	r3, [r7, #16]
 801af30:	2b00      	cmp	r3, #0
 801af32:	d003      	beq.n	801af3c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801af34:	2100      	movs	r1, #0
 801af36:	6938      	ldr	r0, [r7, #16]
 801af38:	f7ff f820 	bl	8019f7c <tcp_abandon>
  }
}
 801af3c:	bf00      	nop
 801af3e:	3718      	adds	r7, #24
 801af40:	46bd      	mov	sp, r7
 801af42:	bd80      	pop	{r7, pc}
 801af44:	080248c0 	.word	0x080248c0
 801af48:	08024e4c 	.word	0x08024e4c
 801af4c:	08024904 	.word	0x08024904
 801af50:	2401a184 	.word	0x2401a184
 801af54:	2401a17c 	.word	0x2401a17c

0801af58 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801af58:	b580      	push	{r7, lr}
 801af5a:	b084      	sub	sp, #16
 801af5c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801af5e:	2300      	movs	r3, #0
 801af60:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801af62:	2300      	movs	r3, #0
 801af64:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801af66:	4b12      	ldr	r3, [pc, #72]	; (801afb0 <tcp_kill_timewait+0x58>)
 801af68:	681b      	ldr	r3, [r3, #0]
 801af6a:	60fb      	str	r3, [r7, #12]
 801af6c:	e012      	b.n	801af94 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801af6e:	4b11      	ldr	r3, [pc, #68]	; (801afb4 <tcp_kill_timewait+0x5c>)
 801af70:	681a      	ldr	r2, [r3, #0]
 801af72:	68fb      	ldr	r3, [r7, #12]
 801af74:	6a1b      	ldr	r3, [r3, #32]
 801af76:	1ad3      	subs	r3, r2, r3
 801af78:	687a      	ldr	r2, [r7, #4]
 801af7a:	429a      	cmp	r2, r3
 801af7c:	d807      	bhi.n	801af8e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801af7e:	4b0d      	ldr	r3, [pc, #52]	; (801afb4 <tcp_kill_timewait+0x5c>)
 801af80:	681a      	ldr	r2, [r3, #0]
 801af82:	68fb      	ldr	r3, [r7, #12]
 801af84:	6a1b      	ldr	r3, [r3, #32]
 801af86:	1ad3      	subs	r3, r2, r3
 801af88:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801af8a:	68fb      	ldr	r3, [r7, #12]
 801af8c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801af8e:	68fb      	ldr	r3, [r7, #12]
 801af90:	68db      	ldr	r3, [r3, #12]
 801af92:	60fb      	str	r3, [r7, #12]
 801af94:	68fb      	ldr	r3, [r7, #12]
 801af96:	2b00      	cmp	r3, #0
 801af98:	d1e9      	bne.n	801af6e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801af9a:	68bb      	ldr	r3, [r7, #8]
 801af9c:	2b00      	cmp	r3, #0
 801af9e:	d002      	beq.n	801afa6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801afa0:	68b8      	ldr	r0, [r7, #8]
 801afa2:	f7ff f8a9 	bl	801a0f8 <tcp_abort>
  }
}
 801afa6:	bf00      	nop
 801afa8:	3710      	adds	r7, #16
 801afaa:	46bd      	mov	sp, r7
 801afac:	bd80      	pop	{r7, pc}
 801afae:	bf00      	nop
 801afb0:	2401a178 	.word	0x2401a178
 801afb4:	2401a17c 	.word	0x2401a17c

0801afb8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801afb8:	b580      	push	{r7, lr}
 801afba:	b082      	sub	sp, #8
 801afbc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801afbe:	4b10      	ldr	r3, [pc, #64]	; (801b000 <tcp_handle_closepend+0x48>)
 801afc0:	681b      	ldr	r3, [r3, #0]
 801afc2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801afc4:	e014      	b.n	801aff0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801afc6:	687b      	ldr	r3, [r7, #4]
 801afc8:	68db      	ldr	r3, [r3, #12]
 801afca:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801afcc:	687b      	ldr	r3, [r7, #4]
 801afce:	8b5b      	ldrh	r3, [r3, #26]
 801afd0:	f003 0308 	and.w	r3, r3, #8
 801afd4:	2b00      	cmp	r3, #0
 801afd6:	d009      	beq.n	801afec <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801afd8:	687b      	ldr	r3, [r7, #4]
 801afda:	8b5b      	ldrh	r3, [r3, #26]
 801afdc:	f023 0308 	bic.w	r3, r3, #8
 801afe0:	b29a      	uxth	r2, r3
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801afe6:	6878      	ldr	r0, [r7, #4]
 801afe8:	f7fe ff32 	bl	8019e50 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801afec:	683b      	ldr	r3, [r7, #0]
 801afee:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801aff0:	687b      	ldr	r3, [r7, #4]
 801aff2:	2b00      	cmp	r3, #0
 801aff4:	d1e7      	bne.n	801afc6 <tcp_handle_closepend+0xe>
  }
}
 801aff6:	bf00      	nop
 801aff8:	bf00      	nop
 801affa:	3708      	adds	r7, #8
 801affc:	46bd      	mov	sp, r7
 801affe:	bd80      	pop	{r7, pc}
 801b000:	2401a184 	.word	0x2401a184

0801b004 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801b004:	b580      	push	{r7, lr}
 801b006:	b084      	sub	sp, #16
 801b008:	af00      	add	r7, sp, #0
 801b00a:	4603      	mov	r3, r0
 801b00c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801b00e:	2001      	movs	r0, #1
 801b010:	f7fd ffde 	bl	8018fd0 <memp_malloc>
 801b014:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801b016:	68fb      	ldr	r3, [r7, #12]
 801b018:	2b00      	cmp	r3, #0
 801b01a:	d126      	bne.n	801b06a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801b01c:	f7ff ffcc 	bl	801afb8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801b020:	f7ff ff9a 	bl	801af58 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801b024:	2001      	movs	r0, #1
 801b026:	f7fd ffd3 	bl	8018fd0 <memp_malloc>
 801b02a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801b02c:	68fb      	ldr	r3, [r7, #12]
 801b02e:	2b00      	cmp	r3, #0
 801b030:	d11b      	bne.n	801b06a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801b032:	2009      	movs	r0, #9
 801b034:	f7ff ff46 	bl	801aec4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801b038:	2001      	movs	r0, #1
 801b03a:	f7fd ffc9 	bl	8018fd0 <memp_malloc>
 801b03e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801b040:	68fb      	ldr	r3, [r7, #12]
 801b042:	2b00      	cmp	r3, #0
 801b044:	d111      	bne.n	801b06a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801b046:	2008      	movs	r0, #8
 801b048:	f7ff ff3c 	bl	801aec4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801b04c:	2001      	movs	r0, #1
 801b04e:	f7fd ffbf 	bl	8018fd0 <memp_malloc>
 801b052:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801b054:	68fb      	ldr	r3, [r7, #12]
 801b056:	2b00      	cmp	r3, #0
 801b058:	d107      	bne.n	801b06a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801b05a:	79fb      	ldrb	r3, [r7, #7]
 801b05c:	4618      	mov	r0, r3
 801b05e:	f7ff fee3 	bl	801ae28 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801b062:	2001      	movs	r0, #1
 801b064:	f7fd ffb4 	bl	8018fd0 <memp_malloc>
 801b068:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801b06a:	68fb      	ldr	r3, [r7, #12]
 801b06c:	2b00      	cmp	r3, #0
 801b06e:	d03f      	beq.n	801b0f0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801b070:	229c      	movs	r2, #156	; 0x9c
 801b072:	2100      	movs	r1, #0
 801b074:	68f8      	ldr	r0, [r7, #12]
 801b076:	f006 f8c7 	bl	8021208 <memset>
    pcb->prio = prio;
 801b07a:	68fb      	ldr	r3, [r7, #12]
 801b07c:	79fa      	ldrb	r2, [r7, #7]
 801b07e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801b080:	68fb      	ldr	r3, [r7, #12]
 801b082:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801b086:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801b08a:	68fb      	ldr	r3, [r7, #12]
 801b08c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801b090:	855a      	strh	r2, [r3, #42]	; 0x2a
 801b092:	68fb      	ldr	r3, [r7, #12]
 801b094:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801b096:	68fb      	ldr	r3, [r7, #12]
 801b098:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801b09a:	68fb      	ldr	r3, [r7, #12]
 801b09c:	22ff      	movs	r2, #255	; 0xff
 801b09e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801b0a0:	68fb      	ldr	r3, [r7, #12]
 801b0a2:	f44f 7206 	mov.w	r2, #536	; 0x218
 801b0a6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801b0a8:	68fb      	ldr	r3, [r7, #12]
 801b0aa:	2206      	movs	r2, #6
 801b0ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801b0b0:	68fb      	ldr	r3, [r7, #12]
 801b0b2:	2206      	movs	r2, #6
 801b0b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801b0b6:	68fb      	ldr	r3, [r7, #12]
 801b0b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b0bc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801b0be:	68fb      	ldr	r3, [r7, #12]
 801b0c0:	2201      	movs	r2, #1
 801b0c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801b0c6:	4b0d      	ldr	r3, [pc, #52]	; (801b0fc <tcp_alloc+0xf8>)
 801b0c8:	681a      	ldr	r2, [r3, #0]
 801b0ca:	68fb      	ldr	r3, [r7, #12]
 801b0cc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801b0ce:	4b0c      	ldr	r3, [pc, #48]	; (801b100 <tcp_alloc+0xfc>)
 801b0d0:	781a      	ldrb	r2, [r3, #0]
 801b0d2:	68fb      	ldr	r3, [r7, #12]
 801b0d4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801b0d6:	68fb      	ldr	r3, [r7, #12]
 801b0d8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801b0dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801b0e0:	68fb      	ldr	r3, [r7, #12]
 801b0e2:	4a08      	ldr	r2, [pc, #32]	; (801b104 <tcp_alloc+0x100>)
 801b0e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801b0e8:	68fb      	ldr	r3, [r7, #12]
 801b0ea:	4a07      	ldr	r2, [pc, #28]	; (801b108 <tcp_alloc+0x104>)
 801b0ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801b0f0:	68fb      	ldr	r3, [r7, #12]
}
 801b0f2:	4618      	mov	r0, r3
 801b0f4:	3710      	adds	r7, #16
 801b0f6:	46bd      	mov	sp, r7
 801b0f8:	bd80      	pop	{r7, pc}
 801b0fa:	bf00      	nop
 801b0fc:	2401a17c 	.word	0x2401a17c
 801b100:	24013fe1 	.word	0x24013fe1
 801b104:	0801adbd 	.word	0x0801adbd
 801b108:	006ddd00 	.word	0x006ddd00

0801b10c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 801b10c:	b580      	push	{r7, lr}
 801b10e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 801b110:	2040      	movs	r0, #64	; 0x40
 801b112:	f7ff ff77 	bl	801b004 <tcp_alloc>
 801b116:	4603      	mov	r3, r0
}
 801b118:	4618      	mov	r0, r3
 801b11a:	bd80      	pop	{r7, pc}

0801b11c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801b11c:	b480      	push	{r7}
 801b11e:	b083      	sub	sp, #12
 801b120:	af00      	add	r7, sp, #0
 801b122:	6078      	str	r0, [r7, #4]
 801b124:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801b126:	687b      	ldr	r3, [r7, #4]
 801b128:	2b00      	cmp	r3, #0
 801b12a:	d002      	beq.n	801b132 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801b12c:	687b      	ldr	r3, [r7, #4]
 801b12e:	683a      	ldr	r2, [r7, #0]
 801b130:	611a      	str	r2, [r3, #16]
  }
}
 801b132:	bf00      	nop
 801b134:	370c      	adds	r7, #12
 801b136:	46bd      	mov	sp, r7
 801b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b13c:	4770      	bx	lr
	...

0801b140 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801b140:	b580      	push	{r7, lr}
 801b142:	b082      	sub	sp, #8
 801b144:	af00      	add	r7, sp, #0
 801b146:	6078      	str	r0, [r7, #4]
 801b148:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801b14a:	687b      	ldr	r3, [r7, #4]
 801b14c:	2b00      	cmp	r3, #0
 801b14e:	d00e      	beq.n	801b16e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	7d1b      	ldrb	r3, [r3, #20]
 801b154:	2b01      	cmp	r3, #1
 801b156:	d106      	bne.n	801b166 <tcp_recv+0x26>
 801b158:	4b07      	ldr	r3, [pc, #28]	; (801b178 <tcp_recv+0x38>)
 801b15a:	f240 72df 	movw	r2, #2015	; 0x7df
 801b15e:	4907      	ldr	r1, [pc, #28]	; (801b17c <tcp_recv+0x3c>)
 801b160:	4807      	ldr	r0, [pc, #28]	; (801b180 <tcp_recv+0x40>)
 801b162:	f006 feeb 	bl	8021f3c <iprintf>
    pcb->recv = recv;
 801b166:	687b      	ldr	r3, [r7, #4]
 801b168:	683a      	ldr	r2, [r7, #0]
 801b16a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801b16e:	bf00      	nop
 801b170:	3708      	adds	r7, #8
 801b172:	46bd      	mov	sp, r7
 801b174:	bd80      	pop	{r7, pc}
 801b176:	bf00      	nop
 801b178:	080248c0 	.word	0x080248c0
 801b17c:	08024e5c 	.word	0x08024e5c
 801b180:	08024904 	.word	0x08024904

0801b184 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801b184:	b580      	push	{r7, lr}
 801b186:	b082      	sub	sp, #8
 801b188:	af00      	add	r7, sp, #0
 801b18a:	6078      	str	r0, [r7, #4]
 801b18c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801b18e:	687b      	ldr	r3, [r7, #4]
 801b190:	2b00      	cmp	r3, #0
 801b192:	d00e      	beq.n	801b1b2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801b194:	687b      	ldr	r3, [r7, #4]
 801b196:	7d1b      	ldrb	r3, [r3, #20]
 801b198:	2b01      	cmp	r3, #1
 801b19a:	d106      	bne.n	801b1aa <tcp_sent+0x26>
 801b19c:	4b07      	ldr	r3, [pc, #28]	; (801b1bc <tcp_sent+0x38>)
 801b19e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801b1a2:	4907      	ldr	r1, [pc, #28]	; (801b1c0 <tcp_sent+0x3c>)
 801b1a4:	4807      	ldr	r0, [pc, #28]	; (801b1c4 <tcp_sent+0x40>)
 801b1a6:	f006 fec9 	bl	8021f3c <iprintf>
    pcb->sent = sent;
 801b1aa:	687b      	ldr	r3, [r7, #4]
 801b1ac:	683a      	ldr	r2, [r7, #0]
 801b1ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801b1b2:	bf00      	nop
 801b1b4:	3708      	adds	r7, #8
 801b1b6:	46bd      	mov	sp, r7
 801b1b8:	bd80      	pop	{r7, pc}
 801b1ba:	bf00      	nop
 801b1bc:	080248c0 	.word	0x080248c0
 801b1c0:	08024e84 	.word	0x08024e84
 801b1c4:	08024904 	.word	0x08024904

0801b1c8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801b1c8:	b580      	push	{r7, lr}
 801b1ca:	b084      	sub	sp, #16
 801b1cc:	af00      	add	r7, sp, #0
 801b1ce:	60f8      	str	r0, [r7, #12]
 801b1d0:	60b9      	str	r1, [r7, #8]
 801b1d2:	4613      	mov	r3, r2
 801b1d4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801b1d6:	68fb      	ldr	r3, [r7, #12]
 801b1d8:	2b00      	cmp	r3, #0
 801b1da:	d107      	bne.n	801b1ec <tcp_poll+0x24>
 801b1dc:	4b0e      	ldr	r3, [pc, #56]	; (801b218 <tcp_poll+0x50>)
 801b1de:	f640 023d 	movw	r2, #2109	; 0x83d
 801b1e2:	490e      	ldr	r1, [pc, #56]	; (801b21c <tcp_poll+0x54>)
 801b1e4:	480e      	ldr	r0, [pc, #56]	; (801b220 <tcp_poll+0x58>)
 801b1e6:	f006 fea9 	bl	8021f3c <iprintf>
 801b1ea:	e011      	b.n	801b210 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801b1ec:	68fb      	ldr	r3, [r7, #12]
 801b1ee:	7d1b      	ldrb	r3, [r3, #20]
 801b1f0:	2b01      	cmp	r3, #1
 801b1f2:	d106      	bne.n	801b202 <tcp_poll+0x3a>
 801b1f4:	4b08      	ldr	r3, [pc, #32]	; (801b218 <tcp_poll+0x50>)
 801b1f6:	f640 023e 	movw	r2, #2110	; 0x83e
 801b1fa:	490a      	ldr	r1, [pc, #40]	; (801b224 <tcp_poll+0x5c>)
 801b1fc:	4808      	ldr	r0, [pc, #32]	; (801b220 <tcp_poll+0x58>)
 801b1fe:	f006 fe9d 	bl	8021f3c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801b202:	68fb      	ldr	r3, [r7, #12]
 801b204:	68ba      	ldr	r2, [r7, #8]
 801b206:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801b20a:	68fb      	ldr	r3, [r7, #12]
 801b20c:	79fa      	ldrb	r2, [r7, #7]
 801b20e:	775a      	strb	r2, [r3, #29]
}
 801b210:	3710      	adds	r7, #16
 801b212:	46bd      	mov	sp, r7
 801b214:	bd80      	pop	{r7, pc}
 801b216:	bf00      	nop
 801b218:	080248c0 	.word	0x080248c0
 801b21c:	08024ed4 	.word	0x08024ed4
 801b220:	08024904 	.word	0x08024904
 801b224:	08024eec 	.word	0x08024eec

0801b228 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801b228:	b580      	push	{r7, lr}
 801b22a:	b082      	sub	sp, #8
 801b22c:	af00      	add	r7, sp, #0
 801b22e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801b230:	687b      	ldr	r3, [r7, #4]
 801b232:	2b00      	cmp	r3, #0
 801b234:	d107      	bne.n	801b246 <tcp_pcb_purge+0x1e>
 801b236:	4b21      	ldr	r3, [pc, #132]	; (801b2bc <tcp_pcb_purge+0x94>)
 801b238:	f640 0251 	movw	r2, #2129	; 0x851
 801b23c:	4920      	ldr	r1, [pc, #128]	; (801b2c0 <tcp_pcb_purge+0x98>)
 801b23e:	4821      	ldr	r0, [pc, #132]	; (801b2c4 <tcp_pcb_purge+0x9c>)
 801b240:	f006 fe7c 	bl	8021f3c <iprintf>
 801b244:	e037      	b.n	801b2b6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	7d1b      	ldrb	r3, [r3, #20]
 801b24a:	2b00      	cmp	r3, #0
 801b24c:	d033      	beq.n	801b2b6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801b24e:	687b      	ldr	r3, [r7, #4]
 801b250:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801b252:	2b0a      	cmp	r3, #10
 801b254:	d02f      	beq.n	801b2b6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801b256:	687b      	ldr	r3, [r7, #4]
 801b258:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801b25a:	2b01      	cmp	r3, #1
 801b25c:	d02b      	beq.n	801b2b6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801b25e:	687b      	ldr	r3, [r7, #4]
 801b260:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b262:	2b00      	cmp	r3, #0
 801b264:	d007      	beq.n	801b276 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b26a:	4618      	mov	r0, r3
 801b26c:	f7fe fa34 	bl	80196d8 <pbuf_free>
      pcb->refused_data = NULL;
 801b270:	687b      	ldr	r3, [r7, #4]
 801b272:	2200      	movs	r2, #0
 801b274:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b27a:	2b00      	cmp	r3, #0
 801b27c:	d002      	beq.n	801b284 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801b27e:	6878      	ldr	r0, [r7, #4]
 801b280:	f000 f916 	bl	801b4b0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801b284:	687b      	ldr	r3, [r7, #4]
 801b286:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b28a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b290:	4618      	mov	r0, r3
 801b292:	f7ff fd65 	bl	801ad60 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b29a:	4618      	mov	r0, r3
 801b29c:	f7ff fd60 	bl	801ad60 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801b2a0:	687b      	ldr	r3, [r7, #4]
 801b2a2:	2200      	movs	r2, #0
 801b2a4:	66da      	str	r2, [r3, #108]	; 0x6c
 801b2a6:	687b      	ldr	r3, [r7, #4]
 801b2a8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801b2aa:	687b      	ldr	r3, [r7, #4]
 801b2ac:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801b2ae:	687b      	ldr	r3, [r7, #4]
 801b2b0:	2200      	movs	r2, #0
 801b2b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801b2b6:	3708      	adds	r7, #8
 801b2b8:	46bd      	mov	sp, r7
 801b2ba:	bd80      	pop	{r7, pc}
 801b2bc:	080248c0 	.word	0x080248c0
 801b2c0:	08024f0c 	.word	0x08024f0c
 801b2c4:	08024904 	.word	0x08024904

0801b2c8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801b2c8:	b580      	push	{r7, lr}
 801b2ca:	b084      	sub	sp, #16
 801b2cc:	af00      	add	r7, sp, #0
 801b2ce:	6078      	str	r0, [r7, #4]
 801b2d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801b2d2:	683b      	ldr	r3, [r7, #0]
 801b2d4:	2b00      	cmp	r3, #0
 801b2d6:	d106      	bne.n	801b2e6 <tcp_pcb_remove+0x1e>
 801b2d8:	4b3e      	ldr	r3, [pc, #248]	; (801b3d4 <tcp_pcb_remove+0x10c>)
 801b2da:	f640 0283 	movw	r2, #2179	; 0x883
 801b2de:	493e      	ldr	r1, [pc, #248]	; (801b3d8 <tcp_pcb_remove+0x110>)
 801b2e0:	483e      	ldr	r0, [pc, #248]	; (801b3dc <tcp_pcb_remove+0x114>)
 801b2e2:	f006 fe2b 	bl	8021f3c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801b2e6:	687b      	ldr	r3, [r7, #4]
 801b2e8:	2b00      	cmp	r3, #0
 801b2ea:	d106      	bne.n	801b2fa <tcp_pcb_remove+0x32>
 801b2ec:	4b39      	ldr	r3, [pc, #228]	; (801b3d4 <tcp_pcb_remove+0x10c>)
 801b2ee:	f640 0284 	movw	r2, #2180	; 0x884
 801b2f2:	493b      	ldr	r1, [pc, #236]	; (801b3e0 <tcp_pcb_remove+0x118>)
 801b2f4:	4839      	ldr	r0, [pc, #228]	; (801b3dc <tcp_pcb_remove+0x114>)
 801b2f6:	f006 fe21 	bl	8021f3c <iprintf>

  TCP_RMV(pcblist, pcb);
 801b2fa:	687b      	ldr	r3, [r7, #4]
 801b2fc:	681b      	ldr	r3, [r3, #0]
 801b2fe:	683a      	ldr	r2, [r7, #0]
 801b300:	429a      	cmp	r2, r3
 801b302:	d105      	bne.n	801b310 <tcp_pcb_remove+0x48>
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	681b      	ldr	r3, [r3, #0]
 801b308:	68da      	ldr	r2, [r3, #12]
 801b30a:	687b      	ldr	r3, [r7, #4]
 801b30c:	601a      	str	r2, [r3, #0]
 801b30e:	e013      	b.n	801b338 <tcp_pcb_remove+0x70>
 801b310:	687b      	ldr	r3, [r7, #4]
 801b312:	681b      	ldr	r3, [r3, #0]
 801b314:	60fb      	str	r3, [r7, #12]
 801b316:	e00c      	b.n	801b332 <tcp_pcb_remove+0x6a>
 801b318:	68fb      	ldr	r3, [r7, #12]
 801b31a:	68db      	ldr	r3, [r3, #12]
 801b31c:	683a      	ldr	r2, [r7, #0]
 801b31e:	429a      	cmp	r2, r3
 801b320:	d104      	bne.n	801b32c <tcp_pcb_remove+0x64>
 801b322:	683b      	ldr	r3, [r7, #0]
 801b324:	68da      	ldr	r2, [r3, #12]
 801b326:	68fb      	ldr	r3, [r7, #12]
 801b328:	60da      	str	r2, [r3, #12]
 801b32a:	e005      	b.n	801b338 <tcp_pcb_remove+0x70>
 801b32c:	68fb      	ldr	r3, [r7, #12]
 801b32e:	68db      	ldr	r3, [r3, #12]
 801b330:	60fb      	str	r3, [r7, #12]
 801b332:	68fb      	ldr	r3, [r7, #12]
 801b334:	2b00      	cmp	r3, #0
 801b336:	d1ef      	bne.n	801b318 <tcp_pcb_remove+0x50>
 801b338:	683b      	ldr	r3, [r7, #0]
 801b33a:	2200      	movs	r2, #0
 801b33c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801b33e:	6838      	ldr	r0, [r7, #0]
 801b340:	f7ff ff72 	bl	801b228 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801b344:	683b      	ldr	r3, [r7, #0]
 801b346:	7d1b      	ldrb	r3, [r3, #20]
 801b348:	2b0a      	cmp	r3, #10
 801b34a:	d013      	beq.n	801b374 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801b34c:	683b      	ldr	r3, [r7, #0]
 801b34e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801b350:	2b01      	cmp	r3, #1
 801b352:	d00f      	beq.n	801b374 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801b354:	683b      	ldr	r3, [r7, #0]
 801b356:	8b5b      	ldrh	r3, [r3, #26]
 801b358:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801b35c:	2b00      	cmp	r3, #0
 801b35e:	d009      	beq.n	801b374 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801b360:	683b      	ldr	r3, [r7, #0]
 801b362:	8b5b      	ldrh	r3, [r3, #26]
 801b364:	f043 0302 	orr.w	r3, r3, #2
 801b368:	b29a      	uxth	r2, r3
 801b36a:	683b      	ldr	r3, [r7, #0]
 801b36c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801b36e:	6838      	ldr	r0, [r7, #0]
 801b370:	f001 f85a 	bl	801c428 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801b374:	683b      	ldr	r3, [r7, #0]
 801b376:	7d1b      	ldrb	r3, [r3, #20]
 801b378:	2b01      	cmp	r3, #1
 801b37a:	d020      	beq.n	801b3be <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801b37c:	683b      	ldr	r3, [r7, #0]
 801b37e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b380:	2b00      	cmp	r3, #0
 801b382:	d006      	beq.n	801b392 <tcp_pcb_remove+0xca>
 801b384:	4b13      	ldr	r3, [pc, #76]	; (801b3d4 <tcp_pcb_remove+0x10c>)
 801b386:	f640 0293 	movw	r2, #2195	; 0x893
 801b38a:	4916      	ldr	r1, [pc, #88]	; (801b3e4 <tcp_pcb_remove+0x11c>)
 801b38c:	4813      	ldr	r0, [pc, #76]	; (801b3dc <tcp_pcb_remove+0x114>)
 801b38e:	f006 fdd5 	bl	8021f3c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801b392:	683b      	ldr	r3, [r7, #0]
 801b394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b396:	2b00      	cmp	r3, #0
 801b398:	d006      	beq.n	801b3a8 <tcp_pcb_remove+0xe0>
 801b39a:	4b0e      	ldr	r3, [pc, #56]	; (801b3d4 <tcp_pcb_remove+0x10c>)
 801b39c:	f640 0294 	movw	r2, #2196	; 0x894
 801b3a0:	4911      	ldr	r1, [pc, #68]	; (801b3e8 <tcp_pcb_remove+0x120>)
 801b3a2:	480e      	ldr	r0, [pc, #56]	; (801b3dc <tcp_pcb_remove+0x114>)
 801b3a4:	f006 fdca 	bl	8021f3c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801b3a8:	683b      	ldr	r3, [r7, #0]
 801b3aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b3ac:	2b00      	cmp	r3, #0
 801b3ae:	d006      	beq.n	801b3be <tcp_pcb_remove+0xf6>
 801b3b0:	4b08      	ldr	r3, [pc, #32]	; (801b3d4 <tcp_pcb_remove+0x10c>)
 801b3b2:	f640 0296 	movw	r2, #2198	; 0x896
 801b3b6:	490d      	ldr	r1, [pc, #52]	; (801b3ec <tcp_pcb_remove+0x124>)
 801b3b8:	4808      	ldr	r0, [pc, #32]	; (801b3dc <tcp_pcb_remove+0x114>)
 801b3ba:	f006 fdbf 	bl	8021f3c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801b3be:	683b      	ldr	r3, [r7, #0]
 801b3c0:	2200      	movs	r2, #0
 801b3c2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801b3c4:	683b      	ldr	r3, [r7, #0]
 801b3c6:	2200      	movs	r2, #0
 801b3c8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801b3ca:	bf00      	nop
 801b3cc:	3710      	adds	r7, #16
 801b3ce:	46bd      	mov	sp, r7
 801b3d0:	bd80      	pop	{r7, pc}
 801b3d2:	bf00      	nop
 801b3d4:	080248c0 	.word	0x080248c0
 801b3d8:	08024f28 	.word	0x08024f28
 801b3dc:	08024904 	.word	0x08024904
 801b3e0:	08024f44 	.word	0x08024f44
 801b3e4:	08024f64 	.word	0x08024f64
 801b3e8:	08024f7c 	.word	0x08024f7c
 801b3ec:	08024f98 	.word	0x08024f98

0801b3f0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801b3f0:	b580      	push	{r7, lr}
 801b3f2:	b082      	sub	sp, #8
 801b3f4:	af00      	add	r7, sp, #0
 801b3f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801b3f8:	687b      	ldr	r3, [r7, #4]
 801b3fa:	2b00      	cmp	r3, #0
 801b3fc:	d106      	bne.n	801b40c <tcp_next_iss+0x1c>
 801b3fe:	4b0a      	ldr	r3, [pc, #40]	; (801b428 <tcp_next_iss+0x38>)
 801b400:	f640 02af 	movw	r2, #2223	; 0x8af
 801b404:	4909      	ldr	r1, [pc, #36]	; (801b42c <tcp_next_iss+0x3c>)
 801b406:	480a      	ldr	r0, [pc, #40]	; (801b430 <tcp_next_iss+0x40>)
 801b408:	f006 fd98 	bl	8021f3c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801b40c:	4b09      	ldr	r3, [pc, #36]	; (801b434 <tcp_next_iss+0x44>)
 801b40e:	681a      	ldr	r2, [r3, #0]
 801b410:	4b09      	ldr	r3, [pc, #36]	; (801b438 <tcp_next_iss+0x48>)
 801b412:	681b      	ldr	r3, [r3, #0]
 801b414:	4413      	add	r3, r2
 801b416:	4a07      	ldr	r2, [pc, #28]	; (801b434 <tcp_next_iss+0x44>)
 801b418:	6013      	str	r3, [r2, #0]
  return iss;
 801b41a:	4b06      	ldr	r3, [pc, #24]	; (801b434 <tcp_next_iss+0x44>)
 801b41c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801b41e:	4618      	mov	r0, r3
 801b420:	3708      	adds	r7, #8
 801b422:	46bd      	mov	sp, r7
 801b424:	bd80      	pop	{r7, pc}
 801b426:	bf00      	nop
 801b428:	080248c0 	.word	0x080248c0
 801b42c:	08024fb0 	.word	0x08024fb0
 801b430:	08024904 	.word	0x08024904
 801b434:	240000c0 	.word	0x240000c0
 801b438:	2401a17c 	.word	0x2401a17c

0801b43c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801b43c:	b580      	push	{r7, lr}
 801b43e:	b086      	sub	sp, #24
 801b440:	af00      	add	r7, sp, #0
 801b442:	4603      	mov	r3, r0
 801b444:	60b9      	str	r1, [r7, #8]
 801b446:	607a      	str	r2, [r7, #4]
 801b448:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	2b00      	cmp	r3, #0
 801b44e:	d106      	bne.n	801b45e <tcp_eff_send_mss_netif+0x22>
 801b450:	4b14      	ldr	r3, [pc, #80]	; (801b4a4 <tcp_eff_send_mss_netif+0x68>)
 801b452:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801b456:	4914      	ldr	r1, [pc, #80]	; (801b4a8 <tcp_eff_send_mss_netif+0x6c>)
 801b458:	4814      	ldr	r0, [pc, #80]	; (801b4ac <tcp_eff_send_mss_netif+0x70>)
 801b45a:	f006 fd6f 	bl	8021f3c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801b45e:	68bb      	ldr	r3, [r7, #8]
 801b460:	2b00      	cmp	r3, #0
 801b462:	d101      	bne.n	801b468 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801b464:	89fb      	ldrh	r3, [r7, #14]
 801b466:	e019      	b.n	801b49c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801b468:	68bb      	ldr	r3, [r7, #8]
 801b46a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801b46c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801b46e:	8afb      	ldrh	r3, [r7, #22]
 801b470:	2b00      	cmp	r3, #0
 801b472:	d012      	beq.n	801b49a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801b474:	2328      	movs	r3, #40	; 0x28
 801b476:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801b478:	8afa      	ldrh	r2, [r7, #22]
 801b47a:	8abb      	ldrh	r3, [r7, #20]
 801b47c:	429a      	cmp	r2, r3
 801b47e:	d904      	bls.n	801b48a <tcp_eff_send_mss_netif+0x4e>
 801b480:	8afa      	ldrh	r2, [r7, #22]
 801b482:	8abb      	ldrh	r3, [r7, #20]
 801b484:	1ad3      	subs	r3, r2, r3
 801b486:	b29b      	uxth	r3, r3
 801b488:	e000      	b.n	801b48c <tcp_eff_send_mss_netif+0x50>
 801b48a:	2300      	movs	r3, #0
 801b48c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801b48e:	8a7a      	ldrh	r2, [r7, #18]
 801b490:	89fb      	ldrh	r3, [r7, #14]
 801b492:	4293      	cmp	r3, r2
 801b494:	bf28      	it	cs
 801b496:	4613      	movcs	r3, r2
 801b498:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801b49a:	89fb      	ldrh	r3, [r7, #14]
}
 801b49c:	4618      	mov	r0, r3
 801b49e:	3718      	adds	r7, #24
 801b4a0:	46bd      	mov	sp, r7
 801b4a2:	bd80      	pop	{r7, pc}
 801b4a4:	080248c0 	.word	0x080248c0
 801b4a8:	08024fcc 	.word	0x08024fcc
 801b4ac:	08024904 	.word	0x08024904

0801b4b0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801b4b0:	b580      	push	{r7, lr}
 801b4b2:	b082      	sub	sp, #8
 801b4b4:	af00      	add	r7, sp, #0
 801b4b6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801b4b8:	687b      	ldr	r3, [r7, #4]
 801b4ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b4bc:	2b00      	cmp	r3, #0
 801b4be:	d007      	beq.n	801b4d0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801b4c0:	687b      	ldr	r3, [r7, #4]
 801b4c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b4c4:	4618      	mov	r0, r3
 801b4c6:	f7ff fc4b 	bl	801ad60 <tcp_segs_free>
    pcb->ooseq = NULL;
 801b4ca:	687b      	ldr	r3, [r7, #4]
 801b4cc:	2200      	movs	r2, #0
 801b4ce:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801b4d0:	bf00      	nop
 801b4d2:	3708      	adds	r7, #8
 801b4d4:	46bd      	mov	sp, r7
 801b4d6:	bd80      	pop	{r7, pc}

0801b4d8 <tcp_trigger_input_pcb_close>:
  }
}

void
tcp_trigger_input_pcb_close(void)
{
 801b4d8:	b480      	push	{r7}
 801b4da:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801b4dc:	4b05      	ldr	r3, [pc, #20]	; (801b4f4 <tcp_trigger_input_pcb_close+0x1c>)
 801b4de:	781b      	ldrb	r3, [r3, #0]
 801b4e0:	f043 0310 	orr.w	r3, r3, #16
 801b4e4:	b2da      	uxtb	r2, r3
 801b4e6:	4b03      	ldr	r3, [pc, #12]	; (801b4f4 <tcp_trigger_input_pcb_close+0x1c>)
 801b4e8:	701a      	strb	r2, [r3, #0]
}
 801b4ea:	bf00      	nop
 801b4ec:	46bd      	mov	sp, r7
 801b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4f2:	4770      	bx	lr
 801b4f4:	24013fe2 	.word	0x24013fe2

0801b4f8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801b4f8:	b580      	push	{r7, lr}
 801b4fa:	b084      	sub	sp, #16
 801b4fc:	af00      	add	r7, sp, #0
 801b4fe:	60f8      	str	r0, [r7, #12]
 801b500:	60b9      	str	r1, [r7, #8]
 801b502:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801b504:	68fb      	ldr	r3, [r7, #12]
 801b506:	2b00      	cmp	r3, #0
 801b508:	d00a      	beq.n	801b520 <tcp_route+0x28>
 801b50a:	68fb      	ldr	r3, [r7, #12]
 801b50c:	7a1b      	ldrb	r3, [r3, #8]
 801b50e:	2b00      	cmp	r3, #0
 801b510:	d006      	beq.n	801b520 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801b512:	68fb      	ldr	r3, [r7, #12]
 801b514:	7a1b      	ldrb	r3, [r3, #8]
 801b516:	4618      	mov	r0, r3
 801b518:	f7fd fdd6 	bl	80190c8 <netif_get_by_index>
 801b51c:	4603      	mov	r3, r0
 801b51e:	e003      	b.n	801b528 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801b520:	6878      	ldr	r0, [r7, #4]
 801b522:	f001 febb 	bl	801d29c <ip4_route>
 801b526:	4603      	mov	r3, r0
  }
}
 801b528:	4618      	mov	r0, r3
 801b52a:	3710      	adds	r7, #16
 801b52c:	46bd      	mov	sp, r7
 801b52e:	bd80      	pop	{r7, pc}

0801b530 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801b530:	b590      	push	{r4, r7, lr}
 801b532:	b087      	sub	sp, #28
 801b534:	af00      	add	r7, sp, #0
 801b536:	60f8      	str	r0, [r7, #12]
 801b538:	60b9      	str	r1, [r7, #8]
 801b53a:	603b      	str	r3, [r7, #0]
 801b53c:	4613      	mov	r3, r2
 801b53e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801b540:	68fb      	ldr	r3, [r7, #12]
 801b542:	2b00      	cmp	r3, #0
 801b544:	d105      	bne.n	801b552 <tcp_create_segment+0x22>
 801b546:	4b44      	ldr	r3, [pc, #272]	; (801b658 <tcp_create_segment+0x128>)
 801b548:	22a3      	movs	r2, #163	; 0xa3
 801b54a:	4944      	ldr	r1, [pc, #272]	; (801b65c <tcp_create_segment+0x12c>)
 801b54c:	4844      	ldr	r0, [pc, #272]	; (801b660 <tcp_create_segment+0x130>)
 801b54e:	f006 fcf5 	bl	8021f3c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801b552:	68bb      	ldr	r3, [r7, #8]
 801b554:	2b00      	cmp	r3, #0
 801b556:	d105      	bne.n	801b564 <tcp_create_segment+0x34>
 801b558:	4b3f      	ldr	r3, [pc, #252]	; (801b658 <tcp_create_segment+0x128>)
 801b55a:	22a4      	movs	r2, #164	; 0xa4
 801b55c:	4941      	ldr	r1, [pc, #260]	; (801b664 <tcp_create_segment+0x134>)
 801b55e:	4840      	ldr	r0, [pc, #256]	; (801b660 <tcp_create_segment+0x130>)
 801b560:	f006 fcec 	bl	8021f3c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801b564:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801b568:	009b      	lsls	r3, r3, #2
 801b56a:	b2db      	uxtb	r3, r3
 801b56c:	f003 0304 	and.w	r3, r3, #4
 801b570:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801b572:	2003      	movs	r0, #3
 801b574:	f7fd fd2c 	bl	8018fd0 <memp_malloc>
 801b578:	6138      	str	r0, [r7, #16]
 801b57a:	693b      	ldr	r3, [r7, #16]
 801b57c:	2b00      	cmp	r3, #0
 801b57e:	d104      	bne.n	801b58a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801b580:	68b8      	ldr	r0, [r7, #8]
 801b582:	f7fe f8a9 	bl	80196d8 <pbuf_free>
    return NULL;
 801b586:	2300      	movs	r3, #0
 801b588:	e061      	b.n	801b64e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801b58a:	693b      	ldr	r3, [r7, #16]
 801b58c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801b590:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801b592:	693b      	ldr	r3, [r7, #16]
 801b594:	2200      	movs	r2, #0
 801b596:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801b598:	693b      	ldr	r3, [r7, #16]
 801b59a:	68ba      	ldr	r2, [r7, #8]
 801b59c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801b59e:	68bb      	ldr	r3, [r7, #8]
 801b5a0:	891a      	ldrh	r2, [r3, #8]
 801b5a2:	7dfb      	ldrb	r3, [r7, #23]
 801b5a4:	b29b      	uxth	r3, r3
 801b5a6:	429a      	cmp	r2, r3
 801b5a8:	d205      	bcs.n	801b5b6 <tcp_create_segment+0x86>
 801b5aa:	4b2b      	ldr	r3, [pc, #172]	; (801b658 <tcp_create_segment+0x128>)
 801b5ac:	22b0      	movs	r2, #176	; 0xb0
 801b5ae:	492e      	ldr	r1, [pc, #184]	; (801b668 <tcp_create_segment+0x138>)
 801b5b0:	482b      	ldr	r0, [pc, #172]	; (801b660 <tcp_create_segment+0x130>)
 801b5b2:	f006 fcc3 	bl	8021f3c <iprintf>
  seg->len = p->tot_len - optlen;
 801b5b6:	68bb      	ldr	r3, [r7, #8]
 801b5b8:	891a      	ldrh	r2, [r3, #8]
 801b5ba:	7dfb      	ldrb	r3, [r7, #23]
 801b5bc:	b29b      	uxth	r3, r3
 801b5be:	1ad3      	subs	r3, r2, r3
 801b5c0:	b29a      	uxth	r2, r3
 801b5c2:	693b      	ldr	r3, [r7, #16]
 801b5c4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801b5c6:	2114      	movs	r1, #20
 801b5c8:	68b8      	ldr	r0, [r7, #8]
 801b5ca:	f7fe f875 	bl	80196b8 <pbuf_add_header>
 801b5ce:	4603      	mov	r3, r0
 801b5d0:	2b00      	cmp	r3, #0
 801b5d2:	d004      	beq.n	801b5de <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801b5d4:	6938      	ldr	r0, [r7, #16]
 801b5d6:	f7ff fbd8 	bl	801ad8a <tcp_seg_free>
    return NULL;
 801b5da:	2300      	movs	r3, #0
 801b5dc:	e037      	b.n	801b64e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801b5de:	693b      	ldr	r3, [r7, #16]
 801b5e0:	685b      	ldr	r3, [r3, #4]
 801b5e2:	685a      	ldr	r2, [r3, #4]
 801b5e4:	693b      	ldr	r3, [r7, #16]
 801b5e6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801b5e8:	68fb      	ldr	r3, [r7, #12]
 801b5ea:	8ada      	ldrh	r2, [r3, #22]
 801b5ec:	693b      	ldr	r3, [r7, #16]
 801b5ee:	68dc      	ldr	r4, [r3, #12]
 801b5f0:	4610      	mov	r0, r2
 801b5f2:	f7fd f8eb 	bl	80187cc <lwip_htons>
 801b5f6:	4603      	mov	r3, r0
 801b5f8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801b5fa:	68fb      	ldr	r3, [r7, #12]
 801b5fc:	8b1a      	ldrh	r2, [r3, #24]
 801b5fe:	693b      	ldr	r3, [r7, #16]
 801b600:	68dc      	ldr	r4, [r3, #12]
 801b602:	4610      	mov	r0, r2
 801b604:	f7fd f8e2 	bl	80187cc <lwip_htons>
 801b608:	4603      	mov	r3, r0
 801b60a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801b60c:	693b      	ldr	r3, [r7, #16]
 801b60e:	68dc      	ldr	r4, [r3, #12]
 801b610:	6838      	ldr	r0, [r7, #0]
 801b612:	f7fd f8f0 	bl	80187f6 <lwip_htonl>
 801b616:	4603      	mov	r3, r0
 801b618:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801b61a:	7dfb      	ldrb	r3, [r7, #23]
 801b61c:	089b      	lsrs	r3, r3, #2
 801b61e:	b2db      	uxtb	r3, r3
 801b620:	b29b      	uxth	r3, r3
 801b622:	3305      	adds	r3, #5
 801b624:	b29b      	uxth	r3, r3
 801b626:	031b      	lsls	r3, r3, #12
 801b628:	b29a      	uxth	r2, r3
 801b62a:	79fb      	ldrb	r3, [r7, #7]
 801b62c:	b29b      	uxth	r3, r3
 801b62e:	4313      	orrs	r3, r2
 801b630:	b29a      	uxth	r2, r3
 801b632:	693b      	ldr	r3, [r7, #16]
 801b634:	68dc      	ldr	r4, [r3, #12]
 801b636:	4610      	mov	r0, r2
 801b638:	f7fd f8c8 	bl	80187cc <lwip_htons>
 801b63c:	4603      	mov	r3, r0
 801b63e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801b640:	693b      	ldr	r3, [r7, #16]
 801b642:	68db      	ldr	r3, [r3, #12]
 801b644:	2200      	movs	r2, #0
 801b646:	749a      	strb	r2, [r3, #18]
 801b648:	2200      	movs	r2, #0
 801b64a:	74da      	strb	r2, [r3, #19]
  return seg;
 801b64c:	693b      	ldr	r3, [r7, #16]
}
 801b64e:	4618      	mov	r0, r3
 801b650:	371c      	adds	r7, #28
 801b652:	46bd      	mov	sp, r7
 801b654:	bd90      	pop	{r4, r7, pc}
 801b656:	bf00      	nop
 801b658:	08025028 	.word	0x08025028
 801b65c:	0802505c 	.word	0x0802505c
 801b660:	0802507c 	.word	0x0802507c
 801b664:	080250a4 	.word	0x080250a4
 801b668:	080250c8 	.word	0x080250c8

0801b66c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801b66c:	b580      	push	{r7, lr}
 801b66e:	b086      	sub	sp, #24
 801b670:	af00      	add	r7, sp, #0
 801b672:	607b      	str	r3, [r7, #4]
 801b674:	4603      	mov	r3, r0
 801b676:	73fb      	strb	r3, [r7, #15]
 801b678:	460b      	mov	r3, r1
 801b67a:	81bb      	strh	r3, [r7, #12]
 801b67c:	4613      	mov	r3, r2
 801b67e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801b680:	89bb      	ldrh	r3, [r7, #12]
 801b682:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801b684:	687b      	ldr	r3, [r7, #4]
 801b686:	2b00      	cmp	r3, #0
 801b688:	d105      	bne.n	801b696 <tcp_pbuf_prealloc+0x2a>
 801b68a:	4b30      	ldr	r3, [pc, #192]	; (801b74c <tcp_pbuf_prealloc+0xe0>)
 801b68c:	22e8      	movs	r2, #232	; 0xe8
 801b68e:	4930      	ldr	r1, [pc, #192]	; (801b750 <tcp_pbuf_prealloc+0xe4>)
 801b690:	4830      	ldr	r0, [pc, #192]	; (801b754 <tcp_pbuf_prealloc+0xe8>)
 801b692:	f006 fc53 	bl	8021f3c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801b696:	6a3b      	ldr	r3, [r7, #32]
 801b698:	2b00      	cmp	r3, #0
 801b69a:	d105      	bne.n	801b6a8 <tcp_pbuf_prealloc+0x3c>
 801b69c:	4b2b      	ldr	r3, [pc, #172]	; (801b74c <tcp_pbuf_prealloc+0xe0>)
 801b69e:	22e9      	movs	r2, #233	; 0xe9
 801b6a0:	492d      	ldr	r1, [pc, #180]	; (801b758 <tcp_pbuf_prealloc+0xec>)
 801b6a2:	482c      	ldr	r0, [pc, #176]	; (801b754 <tcp_pbuf_prealloc+0xe8>)
 801b6a4:	f006 fc4a 	bl	8021f3c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801b6a8:	89ba      	ldrh	r2, [r7, #12]
 801b6aa:	897b      	ldrh	r3, [r7, #10]
 801b6ac:	429a      	cmp	r2, r3
 801b6ae:	d221      	bcs.n	801b6f4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801b6b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801b6b4:	f003 0302 	and.w	r3, r3, #2
 801b6b8:	2b00      	cmp	r3, #0
 801b6ba:	d111      	bne.n	801b6e0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801b6bc:	6a3b      	ldr	r3, [r7, #32]
 801b6be:	8b5b      	ldrh	r3, [r3, #26]
 801b6c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801b6c4:	2b00      	cmp	r3, #0
 801b6c6:	d115      	bne.n	801b6f4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801b6c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801b6cc:	2b00      	cmp	r3, #0
 801b6ce:	d007      	beq.n	801b6e0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801b6d0:	6a3b      	ldr	r3, [r7, #32]
 801b6d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801b6d4:	2b00      	cmp	r3, #0
 801b6d6:	d103      	bne.n	801b6e0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801b6d8:	6a3b      	ldr	r3, [r7, #32]
 801b6da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801b6dc:	2b00      	cmp	r3, #0
 801b6de:	d009      	beq.n	801b6f4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801b6e0:	89bb      	ldrh	r3, [r7, #12]
 801b6e2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801b6e6:	f023 0203 	bic.w	r2, r3, #3
 801b6ea:	897b      	ldrh	r3, [r7, #10]
 801b6ec:	4293      	cmp	r3, r2
 801b6ee:	bf28      	it	cs
 801b6f0:	4613      	movcs	r3, r2
 801b6f2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801b6f4:	8af9      	ldrh	r1, [r7, #22]
 801b6f6:	7bfb      	ldrb	r3, [r7, #15]
 801b6f8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b6fc:	4618      	mov	r0, r3
 801b6fe:	f7fd fd8d 	bl	801921c <pbuf_alloc>
 801b702:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b704:	693b      	ldr	r3, [r7, #16]
 801b706:	2b00      	cmp	r3, #0
 801b708:	d101      	bne.n	801b70e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801b70a:	2300      	movs	r3, #0
 801b70c:	e019      	b.n	801b742 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801b70e:	693b      	ldr	r3, [r7, #16]
 801b710:	681b      	ldr	r3, [r3, #0]
 801b712:	2b00      	cmp	r3, #0
 801b714:	d006      	beq.n	801b724 <tcp_pbuf_prealloc+0xb8>
 801b716:	4b0d      	ldr	r3, [pc, #52]	; (801b74c <tcp_pbuf_prealloc+0xe0>)
 801b718:	f240 120b 	movw	r2, #267	; 0x10b
 801b71c:	490f      	ldr	r1, [pc, #60]	; (801b75c <tcp_pbuf_prealloc+0xf0>)
 801b71e:	480d      	ldr	r0, [pc, #52]	; (801b754 <tcp_pbuf_prealloc+0xe8>)
 801b720:	f006 fc0c 	bl	8021f3c <iprintf>
  *oversize = p->len - length;
 801b724:	693b      	ldr	r3, [r7, #16]
 801b726:	895a      	ldrh	r2, [r3, #10]
 801b728:	89bb      	ldrh	r3, [r7, #12]
 801b72a:	1ad3      	subs	r3, r2, r3
 801b72c:	b29a      	uxth	r2, r3
 801b72e:	687b      	ldr	r3, [r7, #4]
 801b730:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801b732:	693b      	ldr	r3, [r7, #16]
 801b734:	89ba      	ldrh	r2, [r7, #12]
 801b736:	811a      	strh	r2, [r3, #8]
 801b738:	693b      	ldr	r3, [r7, #16]
 801b73a:	891a      	ldrh	r2, [r3, #8]
 801b73c:	693b      	ldr	r3, [r7, #16]
 801b73e:	815a      	strh	r2, [r3, #10]
  return p;
 801b740:	693b      	ldr	r3, [r7, #16]
}
 801b742:	4618      	mov	r0, r3
 801b744:	3718      	adds	r7, #24
 801b746:	46bd      	mov	sp, r7
 801b748:	bd80      	pop	{r7, pc}
 801b74a:	bf00      	nop
 801b74c:	08025028 	.word	0x08025028
 801b750:	080250e0 	.word	0x080250e0
 801b754:	0802507c 	.word	0x0802507c
 801b758:	08025104 	.word	0x08025104
 801b75c:	08025124 	.word	0x08025124

0801b760 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801b760:	b580      	push	{r7, lr}
 801b762:	b082      	sub	sp, #8
 801b764:	af00      	add	r7, sp, #0
 801b766:	6078      	str	r0, [r7, #4]
 801b768:	460b      	mov	r3, r1
 801b76a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	2b00      	cmp	r3, #0
 801b770:	d106      	bne.n	801b780 <tcp_write_checks+0x20>
 801b772:	4b33      	ldr	r3, [pc, #204]	; (801b840 <tcp_write_checks+0xe0>)
 801b774:	f240 1233 	movw	r2, #307	; 0x133
 801b778:	4932      	ldr	r1, [pc, #200]	; (801b844 <tcp_write_checks+0xe4>)
 801b77a:	4833      	ldr	r0, [pc, #204]	; (801b848 <tcp_write_checks+0xe8>)
 801b77c:	f006 fbde 	bl	8021f3c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	7d1b      	ldrb	r3, [r3, #20]
 801b784:	2b04      	cmp	r3, #4
 801b786:	d00e      	beq.n	801b7a6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801b788:	687b      	ldr	r3, [r7, #4]
 801b78a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801b78c:	2b07      	cmp	r3, #7
 801b78e:	d00a      	beq.n	801b7a6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801b790:	687b      	ldr	r3, [r7, #4]
 801b792:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801b794:	2b02      	cmp	r3, #2
 801b796:	d006      	beq.n	801b7a6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801b79c:	2b03      	cmp	r3, #3
 801b79e:	d002      	beq.n	801b7a6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801b7a0:	f06f 030a 	mvn.w	r3, #10
 801b7a4:	e048      	b.n	801b838 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801b7a6:	887b      	ldrh	r3, [r7, #2]
 801b7a8:	2b00      	cmp	r3, #0
 801b7aa:	d101      	bne.n	801b7b0 <tcp_write_checks+0x50>
    return ERR_OK;
 801b7ac:	2300      	movs	r3, #0
 801b7ae:	e043      	b.n	801b838 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801b7b0:	687b      	ldr	r3, [r7, #4]
 801b7b2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801b7b6:	887a      	ldrh	r2, [r7, #2]
 801b7b8:	429a      	cmp	r2, r3
 801b7ba:	d909      	bls.n	801b7d0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b7bc:	687b      	ldr	r3, [r7, #4]
 801b7be:	8b5b      	ldrh	r3, [r3, #26]
 801b7c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b7c4:	b29a      	uxth	r2, r3
 801b7c6:	687b      	ldr	r3, [r7, #4]
 801b7c8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801b7ca:	f04f 33ff 	mov.w	r3, #4294967295
 801b7ce:	e033      	b.n	801b838 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801b7d0:	687b      	ldr	r3, [r7, #4]
 801b7d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b7d6:	2b08      	cmp	r3, #8
 801b7d8:	d909      	bls.n	801b7ee <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b7da:	687b      	ldr	r3, [r7, #4]
 801b7dc:	8b5b      	ldrh	r3, [r3, #26]
 801b7de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b7e2:	b29a      	uxth	r2, r3
 801b7e4:	687b      	ldr	r3, [r7, #4]
 801b7e6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801b7e8:	f04f 33ff 	mov.w	r3, #4294967295
 801b7ec:	e024      	b.n	801b838 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801b7ee:	687b      	ldr	r3, [r7, #4]
 801b7f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b7f4:	2b00      	cmp	r3, #0
 801b7f6:	d00f      	beq.n	801b818 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801b7f8:	687b      	ldr	r3, [r7, #4]
 801b7fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b7fc:	2b00      	cmp	r3, #0
 801b7fe:	d11a      	bne.n	801b836 <tcp_write_checks+0xd6>
 801b800:	687b      	ldr	r3, [r7, #4]
 801b802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b804:	2b00      	cmp	r3, #0
 801b806:	d116      	bne.n	801b836 <tcp_write_checks+0xd6>
 801b808:	4b0d      	ldr	r3, [pc, #52]	; (801b840 <tcp_write_checks+0xe0>)
 801b80a:	f240 1255 	movw	r2, #341	; 0x155
 801b80e:	490f      	ldr	r1, [pc, #60]	; (801b84c <tcp_write_checks+0xec>)
 801b810:	480d      	ldr	r0, [pc, #52]	; (801b848 <tcp_write_checks+0xe8>)
 801b812:	f006 fb93 	bl	8021f3c <iprintf>
 801b816:	e00e      	b.n	801b836 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801b818:	687b      	ldr	r3, [r7, #4]
 801b81a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b81c:	2b00      	cmp	r3, #0
 801b81e:	d103      	bne.n	801b828 <tcp_write_checks+0xc8>
 801b820:	687b      	ldr	r3, [r7, #4]
 801b822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b824:	2b00      	cmp	r3, #0
 801b826:	d006      	beq.n	801b836 <tcp_write_checks+0xd6>
 801b828:	4b05      	ldr	r3, [pc, #20]	; (801b840 <tcp_write_checks+0xe0>)
 801b82a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801b82e:	4908      	ldr	r1, [pc, #32]	; (801b850 <tcp_write_checks+0xf0>)
 801b830:	4805      	ldr	r0, [pc, #20]	; (801b848 <tcp_write_checks+0xe8>)
 801b832:	f006 fb83 	bl	8021f3c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801b836:	2300      	movs	r3, #0
}
 801b838:	4618      	mov	r0, r3
 801b83a:	3708      	adds	r7, #8
 801b83c:	46bd      	mov	sp, r7
 801b83e:	bd80      	pop	{r7, pc}
 801b840:	08025028 	.word	0x08025028
 801b844:	08025138 	.word	0x08025138
 801b848:	0802507c 	.word	0x0802507c
 801b84c:	08025158 	.word	0x08025158
 801b850:	08025194 	.word	0x08025194

0801b854 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801b854:	b590      	push	{r4, r7, lr}
 801b856:	b09b      	sub	sp, #108	; 0x6c
 801b858:	af04      	add	r7, sp, #16
 801b85a:	60f8      	str	r0, [r7, #12]
 801b85c:	60b9      	str	r1, [r7, #8]
 801b85e:	4611      	mov	r1, r2
 801b860:	461a      	mov	r2, r3
 801b862:	460b      	mov	r3, r1
 801b864:	80fb      	strh	r3, [r7, #6]
 801b866:	4613      	mov	r3, r2
 801b868:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801b86a:	2300      	movs	r3, #0
 801b86c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801b86e:	2300      	movs	r3, #0
 801b870:	653b      	str	r3, [r7, #80]	; 0x50
 801b872:	2300      	movs	r3, #0
 801b874:	64fb      	str	r3, [r7, #76]	; 0x4c
 801b876:	2300      	movs	r3, #0
 801b878:	64bb      	str	r3, [r7, #72]	; 0x48
 801b87a:	2300      	movs	r3, #0
 801b87c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801b87e:	2300      	movs	r3, #0
 801b880:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801b884:	2300      	movs	r3, #0
 801b886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801b88a:	2300      	movs	r3, #0
 801b88c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801b88e:	2300      	movs	r3, #0
 801b890:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801b892:	2300      	movs	r3, #0
 801b894:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801b896:	68fb      	ldr	r3, [r7, #12]
 801b898:	2b00      	cmp	r3, #0
 801b89a:	d109      	bne.n	801b8b0 <tcp_write+0x5c>
 801b89c:	4ba4      	ldr	r3, [pc, #656]	; (801bb30 <tcp_write+0x2dc>)
 801b89e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801b8a2:	49a4      	ldr	r1, [pc, #656]	; (801bb34 <tcp_write+0x2e0>)
 801b8a4:	48a4      	ldr	r0, [pc, #656]	; (801bb38 <tcp_write+0x2e4>)
 801b8a6:	f006 fb49 	bl	8021f3c <iprintf>
 801b8aa:	f06f 030f 	mvn.w	r3, #15
 801b8ae:	e32a      	b.n	801bf06 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801b8b0:	68fb      	ldr	r3, [r7, #12]
 801b8b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801b8b6:	085b      	lsrs	r3, r3, #1
 801b8b8:	b29a      	uxth	r2, r3
 801b8ba:	68fb      	ldr	r3, [r7, #12]
 801b8bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b8be:	4293      	cmp	r3, r2
 801b8c0:	bf28      	it	cs
 801b8c2:	4613      	movcs	r3, r2
 801b8c4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801b8c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b8c8:	2b00      	cmp	r3, #0
 801b8ca:	d102      	bne.n	801b8d2 <tcp_write+0x7e>
 801b8cc:	68fb      	ldr	r3, [r7, #12]
 801b8ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b8d0:	e000      	b.n	801b8d4 <tcp_write+0x80>
 801b8d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b8d4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801b8d6:	68bb      	ldr	r3, [r7, #8]
 801b8d8:	2b00      	cmp	r3, #0
 801b8da:	d109      	bne.n	801b8f0 <tcp_write+0x9c>
 801b8dc:	4b94      	ldr	r3, [pc, #592]	; (801bb30 <tcp_write+0x2dc>)
 801b8de:	f240 12ad 	movw	r2, #429	; 0x1ad
 801b8e2:	4996      	ldr	r1, [pc, #600]	; (801bb3c <tcp_write+0x2e8>)
 801b8e4:	4894      	ldr	r0, [pc, #592]	; (801bb38 <tcp_write+0x2e4>)
 801b8e6:	f006 fb29 	bl	8021f3c <iprintf>
 801b8ea:	f06f 030f 	mvn.w	r3, #15
 801b8ee:	e30a      	b.n	801bf06 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801b8f0:	88fb      	ldrh	r3, [r7, #6]
 801b8f2:	4619      	mov	r1, r3
 801b8f4:	68f8      	ldr	r0, [r7, #12]
 801b8f6:	f7ff ff33 	bl	801b760 <tcp_write_checks>
 801b8fa:	4603      	mov	r3, r0
 801b8fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801b900:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801b904:	2b00      	cmp	r3, #0
 801b906:	d002      	beq.n	801b90e <tcp_write+0xba>
    return err;
 801b908:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801b90c:	e2fb      	b.n	801bf06 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801b90e:	68fb      	ldr	r3, [r7, #12]
 801b910:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b914:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b918:	2300      	movs	r3, #0
 801b91a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801b91e:	68fb      	ldr	r3, [r7, #12]
 801b920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b922:	2b00      	cmp	r3, #0
 801b924:	f000 80f6 	beq.w	801bb14 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801b928:	68fb      	ldr	r3, [r7, #12]
 801b92a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b92c:	653b      	str	r3, [r7, #80]	; 0x50
 801b92e:	e002      	b.n	801b936 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801b930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b932:	681b      	ldr	r3, [r3, #0]
 801b934:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801b936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b938:	681b      	ldr	r3, [r3, #0]
 801b93a:	2b00      	cmp	r3, #0
 801b93c:	d1f8      	bne.n	801b930 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801b93e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b940:	7a9b      	ldrb	r3, [r3, #10]
 801b942:	009b      	lsls	r3, r3, #2
 801b944:	b29b      	uxth	r3, r3
 801b946:	f003 0304 	and.w	r3, r3, #4
 801b94a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801b94c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b94e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b950:	891b      	ldrh	r3, [r3, #8]
 801b952:	4619      	mov	r1, r3
 801b954:	8c3b      	ldrh	r3, [r7, #32]
 801b956:	440b      	add	r3, r1
 801b958:	429a      	cmp	r2, r3
 801b95a:	da06      	bge.n	801b96a <tcp_write+0x116>
 801b95c:	4b74      	ldr	r3, [pc, #464]	; (801bb30 <tcp_write+0x2dc>)
 801b95e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801b962:	4977      	ldr	r1, [pc, #476]	; (801bb40 <tcp_write+0x2ec>)
 801b964:	4874      	ldr	r0, [pc, #464]	; (801bb38 <tcp_write+0x2e4>)
 801b966:	f006 fae9 	bl	8021f3c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801b96a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b96c:	891a      	ldrh	r2, [r3, #8]
 801b96e:	8c3b      	ldrh	r3, [r7, #32]
 801b970:	4413      	add	r3, r2
 801b972:	b29b      	uxth	r3, r3
 801b974:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b976:	1ad3      	subs	r3, r2, r3
 801b978:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801b97a:	68fb      	ldr	r3, [r7, #12]
 801b97c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801b980:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801b982:	8a7b      	ldrh	r3, [r7, #18]
 801b984:	2b00      	cmp	r3, #0
 801b986:	d026      	beq.n	801b9d6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801b988:	8a7b      	ldrh	r3, [r7, #18]
 801b98a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b98c:	429a      	cmp	r2, r3
 801b98e:	d206      	bcs.n	801b99e <tcp_write+0x14a>
 801b990:	4b67      	ldr	r3, [pc, #412]	; (801bb30 <tcp_write+0x2dc>)
 801b992:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801b996:	496b      	ldr	r1, [pc, #428]	; (801bb44 <tcp_write+0x2f0>)
 801b998:	4867      	ldr	r0, [pc, #412]	; (801bb38 <tcp_write+0x2e4>)
 801b99a:	f006 facf 	bl	8021f3c <iprintf>
      seg = last_unsent;
 801b99e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b9a0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801b9a2:	8a7b      	ldrh	r3, [r7, #18]
 801b9a4:	88fa      	ldrh	r2, [r7, #6]
 801b9a6:	4293      	cmp	r3, r2
 801b9a8:	bf28      	it	cs
 801b9aa:	4613      	movcs	r3, r2
 801b9ac:	b29b      	uxth	r3, r3
 801b9ae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b9b0:	4293      	cmp	r3, r2
 801b9b2:	bf28      	it	cs
 801b9b4:	4613      	movcs	r3, r2
 801b9b6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801b9b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b9bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b9be:	4413      	add	r3, r2
 801b9c0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801b9c4:	8a7a      	ldrh	r2, [r7, #18]
 801b9c6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b9c8:	1ad3      	subs	r3, r2, r3
 801b9ca:	b29b      	uxth	r3, r3
 801b9cc:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801b9ce:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b9d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b9d2:	1ad3      	subs	r3, r2, r3
 801b9d4:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801b9d6:	8a7b      	ldrh	r3, [r7, #18]
 801b9d8:	2b00      	cmp	r3, #0
 801b9da:	d00b      	beq.n	801b9f4 <tcp_write+0x1a0>
 801b9dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b9e0:	88fb      	ldrh	r3, [r7, #6]
 801b9e2:	429a      	cmp	r2, r3
 801b9e4:	d006      	beq.n	801b9f4 <tcp_write+0x1a0>
 801b9e6:	4b52      	ldr	r3, [pc, #328]	; (801bb30 <tcp_write+0x2dc>)
 801b9e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 801b9ec:	4956      	ldr	r1, [pc, #344]	; (801bb48 <tcp_write+0x2f4>)
 801b9ee:	4852      	ldr	r0, [pc, #328]	; (801bb38 <tcp_write+0x2e4>)
 801b9f0:	f006 faa4 	bl	8021f3c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801b9f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b9f8:	88fb      	ldrh	r3, [r7, #6]
 801b9fa:	429a      	cmp	r2, r3
 801b9fc:	f080 8167 	bcs.w	801bcce <tcp_write+0x47a>
 801ba00:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ba02:	2b00      	cmp	r3, #0
 801ba04:	f000 8163 	beq.w	801bcce <tcp_write+0x47a>
 801ba08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ba0a:	891b      	ldrh	r3, [r3, #8]
 801ba0c:	2b00      	cmp	r3, #0
 801ba0e:	f000 815e 	beq.w	801bcce <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801ba12:	88fa      	ldrh	r2, [r7, #6]
 801ba14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ba18:	1ad2      	subs	r2, r2, r3
 801ba1a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ba1c:	4293      	cmp	r3, r2
 801ba1e:	bfa8      	it	ge
 801ba20:	4613      	movge	r3, r2
 801ba22:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801ba24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ba26:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801ba28:	797b      	ldrb	r3, [r7, #5]
 801ba2a:	f003 0301 	and.w	r3, r3, #1
 801ba2e:	2b00      	cmp	r3, #0
 801ba30:	d027      	beq.n	801ba82 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801ba32:	f107 0012 	add.w	r0, r7, #18
 801ba36:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ba38:	8bf9      	ldrh	r1, [r7, #30]
 801ba3a:	2301      	movs	r3, #1
 801ba3c:	9302      	str	r3, [sp, #8]
 801ba3e:	797b      	ldrb	r3, [r7, #5]
 801ba40:	9301      	str	r3, [sp, #4]
 801ba42:	68fb      	ldr	r3, [r7, #12]
 801ba44:	9300      	str	r3, [sp, #0]
 801ba46:	4603      	mov	r3, r0
 801ba48:	2000      	movs	r0, #0
 801ba4a:	f7ff fe0f 	bl	801b66c <tcp_pbuf_prealloc>
 801ba4e:	6578      	str	r0, [r7, #84]	; 0x54
 801ba50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ba52:	2b00      	cmp	r3, #0
 801ba54:	f000 8225 	beq.w	801bea2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801ba58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ba5a:	6858      	ldr	r0, [r3, #4]
 801ba5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ba60:	68ba      	ldr	r2, [r7, #8]
 801ba62:	4413      	add	r3, r2
 801ba64:	8bfa      	ldrh	r2, [r7, #30]
 801ba66:	4619      	mov	r1, r3
 801ba68:	f005 fba6 	bl	80211b8 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801ba6c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801ba6e:	f7fd fec1 	bl	80197f4 <pbuf_clen>
 801ba72:	4603      	mov	r3, r0
 801ba74:	461a      	mov	r2, r3
 801ba76:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801ba7a:	4413      	add	r3, r2
 801ba7c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801ba80:	e041      	b.n	801bb06 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801ba82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ba84:	685b      	ldr	r3, [r3, #4]
 801ba86:	637b      	str	r3, [r7, #52]	; 0x34
 801ba88:	e002      	b.n	801ba90 <tcp_write+0x23c>
 801ba8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ba8c:	681b      	ldr	r3, [r3, #0]
 801ba8e:	637b      	str	r3, [r7, #52]	; 0x34
 801ba90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ba92:	681b      	ldr	r3, [r3, #0]
 801ba94:	2b00      	cmp	r3, #0
 801ba96:	d1f8      	bne.n	801ba8a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801ba98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ba9a:	7b1b      	ldrb	r3, [r3, #12]
 801ba9c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801baa0:	2b00      	cmp	r3, #0
 801baa2:	d115      	bne.n	801bad0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801baa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801baa6:	685b      	ldr	r3, [r3, #4]
 801baa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801baaa:	8952      	ldrh	r2, [r2, #10]
 801baac:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801baae:	68ba      	ldr	r2, [r7, #8]
 801bab0:	429a      	cmp	r2, r3
 801bab2:	d10d      	bne.n	801bad0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801bab4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801bab8:	2b00      	cmp	r3, #0
 801baba:	d006      	beq.n	801baca <tcp_write+0x276>
 801babc:	4b1c      	ldr	r3, [pc, #112]	; (801bb30 <tcp_write+0x2dc>)
 801babe:	f240 2231 	movw	r2, #561	; 0x231
 801bac2:	4922      	ldr	r1, [pc, #136]	; (801bb4c <tcp_write+0x2f8>)
 801bac4:	481c      	ldr	r0, [pc, #112]	; (801bb38 <tcp_write+0x2e4>)
 801bac6:	f006 fa39 	bl	8021f3c <iprintf>
          extendlen = seglen;
 801baca:	8bfb      	ldrh	r3, [r7, #30]
 801bacc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801bace:	e01a      	b.n	801bb06 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801bad0:	8bfb      	ldrh	r3, [r7, #30]
 801bad2:	2201      	movs	r2, #1
 801bad4:	4619      	mov	r1, r3
 801bad6:	2000      	movs	r0, #0
 801bad8:	f7fd fba0 	bl	801921c <pbuf_alloc>
 801badc:	6578      	str	r0, [r7, #84]	; 0x54
 801bade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bae0:	2b00      	cmp	r3, #0
 801bae2:	f000 81e0 	beq.w	801bea6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801bae6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801baea:	68ba      	ldr	r2, [r7, #8]
 801baec:	441a      	add	r2, r3
 801baee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801baf0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801baf2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801baf4:	f7fd fe7e 	bl	80197f4 <pbuf_clen>
 801baf8:	4603      	mov	r3, r0
 801bafa:	461a      	mov	r2, r3
 801bafc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801bb00:	4413      	add	r3, r2
 801bb02:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801bb06:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801bb0a:	8bfb      	ldrh	r3, [r7, #30]
 801bb0c:	4413      	add	r3, r2
 801bb0e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801bb12:	e0dc      	b.n	801bcce <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801bb14:	68fb      	ldr	r3, [r7, #12]
 801bb16:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801bb1a:	2b00      	cmp	r3, #0
 801bb1c:	f000 80d7 	beq.w	801bcce <tcp_write+0x47a>
 801bb20:	4b03      	ldr	r3, [pc, #12]	; (801bb30 <tcp_write+0x2dc>)
 801bb22:	f240 224a 	movw	r2, #586	; 0x24a
 801bb26:	490a      	ldr	r1, [pc, #40]	; (801bb50 <tcp_write+0x2fc>)
 801bb28:	4803      	ldr	r0, [pc, #12]	; (801bb38 <tcp_write+0x2e4>)
 801bb2a:	f006 fa07 	bl	8021f3c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801bb2e:	e0ce      	b.n	801bcce <tcp_write+0x47a>
 801bb30:	08025028 	.word	0x08025028
 801bb34:	080251c8 	.word	0x080251c8
 801bb38:	0802507c 	.word	0x0802507c
 801bb3c:	080251e0 	.word	0x080251e0
 801bb40:	08025214 	.word	0x08025214
 801bb44:	0802522c 	.word	0x0802522c
 801bb48:	0802524c 	.word	0x0802524c
 801bb4c:	0802526c 	.word	0x0802526c
 801bb50:	08025298 	.word	0x08025298
    struct pbuf *p;
    u16_t left = len - pos;
 801bb54:	88fa      	ldrh	r2, [r7, #6]
 801bb56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801bb5a:	1ad3      	subs	r3, r2, r3
 801bb5c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801bb5e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801bb62:	b29b      	uxth	r3, r3
 801bb64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801bb66:	1ad3      	subs	r3, r2, r3
 801bb68:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801bb6a:	8b7a      	ldrh	r2, [r7, #26]
 801bb6c:	8bbb      	ldrh	r3, [r7, #28]
 801bb6e:	4293      	cmp	r3, r2
 801bb70:	bf28      	it	cs
 801bb72:	4613      	movcs	r3, r2
 801bb74:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801bb76:	797b      	ldrb	r3, [r7, #5]
 801bb78:	f003 0301 	and.w	r3, r3, #1
 801bb7c:	2b00      	cmp	r3, #0
 801bb7e:	d036      	beq.n	801bbee <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801bb80:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801bb84:	b29a      	uxth	r2, r3
 801bb86:	8b3b      	ldrh	r3, [r7, #24]
 801bb88:	4413      	add	r3, r2
 801bb8a:	b299      	uxth	r1, r3
 801bb8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bb8e:	2b00      	cmp	r3, #0
 801bb90:	bf0c      	ite	eq
 801bb92:	2301      	moveq	r3, #1
 801bb94:	2300      	movne	r3, #0
 801bb96:	b2db      	uxtb	r3, r3
 801bb98:	f107 0012 	add.w	r0, r7, #18
 801bb9c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801bb9e:	9302      	str	r3, [sp, #8]
 801bba0:	797b      	ldrb	r3, [r7, #5]
 801bba2:	9301      	str	r3, [sp, #4]
 801bba4:	68fb      	ldr	r3, [r7, #12]
 801bba6:	9300      	str	r3, [sp, #0]
 801bba8:	4603      	mov	r3, r0
 801bbaa:	2036      	movs	r0, #54	; 0x36
 801bbac:	f7ff fd5e 	bl	801b66c <tcp_pbuf_prealloc>
 801bbb0:	6338      	str	r0, [r7, #48]	; 0x30
 801bbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bbb4:	2b00      	cmp	r3, #0
 801bbb6:	f000 8178 	beq.w	801beaa <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801bbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bbbc:	895b      	ldrh	r3, [r3, #10]
 801bbbe:	8b3a      	ldrh	r2, [r7, #24]
 801bbc0:	429a      	cmp	r2, r3
 801bbc2:	d906      	bls.n	801bbd2 <tcp_write+0x37e>
 801bbc4:	4b8c      	ldr	r3, [pc, #560]	; (801bdf8 <tcp_write+0x5a4>)
 801bbc6:	f240 2266 	movw	r2, #614	; 0x266
 801bbca:	498c      	ldr	r1, [pc, #560]	; (801bdfc <tcp_write+0x5a8>)
 801bbcc:	488c      	ldr	r0, [pc, #560]	; (801be00 <tcp_write+0x5ac>)
 801bbce:	f006 f9b5 	bl	8021f3c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801bbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bbd4:	685a      	ldr	r2, [r3, #4]
 801bbd6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801bbda:	18d0      	adds	r0, r2, r3
 801bbdc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801bbe0:	68ba      	ldr	r2, [r7, #8]
 801bbe2:	4413      	add	r3, r2
 801bbe4:	8b3a      	ldrh	r2, [r7, #24]
 801bbe6:	4619      	mov	r1, r3
 801bbe8:	f005 fae6 	bl	80211b8 <memcpy>
 801bbec:	e02f      	b.n	801bc4e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801bbee:	8a7b      	ldrh	r3, [r7, #18]
 801bbf0:	2b00      	cmp	r3, #0
 801bbf2:	d006      	beq.n	801bc02 <tcp_write+0x3ae>
 801bbf4:	4b80      	ldr	r3, [pc, #512]	; (801bdf8 <tcp_write+0x5a4>)
 801bbf6:	f240 2271 	movw	r2, #625	; 0x271
 801bbfa:	4982      	ldr	r1, [pc, #520]	; (801be04 <tcp_write+0x5b0>)
 801bbfc:	4880      	ldr	r0, [pc, #512]	; (801be00 <tcp_write+0x5ac>)
 801bbfe:	f006 f99d 	bl	8021f3c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801bc02:	8b3b      	ldrh	r3, [r7, #24]
 801bc04:	2201      	movs	r2, #1
 801bc06:	4619      	mov	r1, r3
 801bc08:	2036      	movs	r0, #54	; 0x36
 801bc0a:	f7fd fb07 	bl	801921c <pbuf_alloc>
 801bc0e:	6178      	str	r0, [r7, #20]
 801bc10:	697b      	ldr	r3, [r7, #20]
 801bc12:	2b00      	cmp	r3, #0
 801bc14:	f000 814b 	beq.w	801beae <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801bc18:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801bc1c:	68ba      	ldr	r2, [r7, #8]
 801bc1e:	441a      	add	r2, r3
 801bc20:	697b      	ldr	r3, [r7, #20]
 801bc22:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801bc24:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801bc28:	b29b      	uxth	r3, r3
 801bc2a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bc2e:	4619      	mov	r1, r3
 801bc30:	2036      	movs	r0, #54	; 0x36
 801bc32:	f7fd faf3 	bl	801921c <pbuf_alloc>
 801bc36:	6338      	str	r0, [r7, #48]	; 0x30
 801bc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bc3a:	2b00      	cmp	r3, #0
 801bc3c:	d103      	bne.n	801bc46 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801bc3e:	6978      	ldr	r0, [r7, #20]
 801bc40:	f7fd fd4a 	bl	80196d8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801bc44:	e136      	b.n	801beb4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801bc46:	6979      	ldr	r1, [r7, #20]
 801bc48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801bc4a:	f7fd fe13 	bl	8019874 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801bc4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801bc50:	f7fd fdd0 	bl	80197f4 <pbuf_clen>
 801bc54:	4603      	mov	r3, r0
 801bc56:	461a      	mov	r2, r3
 801bc58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801bc5c:	4413      	add	r3, r2
 801bc5e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801bc62:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801bc66:	2b09      	cmp	r3, #9
 801bc68:	d903      	bls.n	801bc72 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801bc6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801bc6c:	f7fd fd34 	bl	80196d8 <pbuf_free>
      goto memerr;
 801bc70:	e120      	b.n	801beb4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801bc72:	68fb      	ldr	r3, [r7, #12]
 801bc74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801bc76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801bc7a:	441a      	add	r2, r3
 801bc7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bc80:	9300      	str	r3, [sp, #0]
 801bc82:	4613      	mov	r3, r2
 801bc84:	2200      	movs	r2, #0
 801bc86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801bc88:	68f8      	ldr	r0, [r7, #12]
 801bc8a:	f7ff fc51 	bl	801b530 <tcp_create_segment>
 801bc8e:	64f8      	str	r0, [r7, #76]	; 0x4c
 801bc90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bc92:	2b00      	cmp	r3, #0
 801bc94:	f000 810d 	beq.w	801beb2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801bc98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bc9a:	2b00      	cmp	r3, #0
 801bc9c:	d102      	bne.n	801bca4 <tcp_write+0x450>
      queue = seg;
 801bc9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bca0:	647b      	str	r3, [r7, #68]	; 0x44
 801bca2:	e00c      	b.n	801bcbe <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801bca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bca6:	2b00      	cmp	r3, #0
 801bca8:	d106      	bne.n	801bcb8 <tcp_write+0x464>
 801bcaa:	4b53      	ldr	r3, [pc, #332]	; (801bdf8 <tcp_write+0x5a4>)
 801bcac:	f240 22ab 	movw	r2, #683	; 0x2ab
 801bcb0:	4955      	ldr	r1, [pc, #340]	; (801be08 <tcp_write+0x5b4>)
 801bcb2:	4853      	ldr	r0, [pc, #332]	; (801be00 <tcp_write+0x5ac>)
 801bcb4:	f006 f942 	bl	8021f3c <iprintf>
      prev_seg->next = seg;
 801bcb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bcba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801bcbc:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801bcbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bcc0:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801bcc2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801bcc6:	8b3b      	ldrh	r3, [r7, #24]
 801bcc8:	4413      	add	r3, r2
 801bcca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801bcce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801bcd2:	88fb      	ldrh	r3, [r7, #6]
 801bcd4:	429a      	cmp	r2, r3
 801bcd6:	f4ff af3d 	bcc.w	801bb54 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801bcda:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801bcdc:	2b00      	cmp	r3, #0
 801bcde:	d02c      	beq.n	801bd3a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801bce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bce2:	685b      	ldr	r3, [r3, #4]
 801bce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bce6:	e01e      	b.n	801bd26 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801bce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bcea:	891a      	ldrh	r2, [r3, #8]
 801bcec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801bcee:	4413      	add	r3, r2
 801bcf0:	b29a      	uxth	r2, r3
 801bcf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bcf4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801bcf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bcf8:	681b      	ldr	r3, [r3, #0]
 801bcfa:	2b00      	cmp	r3, #0
 801bcfc:	d110      	bne.n	801bd20 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801bcfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd00:	685b      	ldr	r3, [r3, #4]
 801bd02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bd04:	8952      	ldrh	r2, [r2, #10]
 801bd06:	4413      	add	r3, r2
 801bd08:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801bd0a:	68b9      	ldr	r1, [r7, #8]
 801bd0c:	4618      	mov	r0, r3
 801bd0e:	f005 fa53 	bl	80211b8 <memcpy>
        p->len += oversize_used;
 801bd12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd14:	895a      	ldrh	r2, [r3, #10]
 801bd16:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801bd18:	4413      	add	r3, r2
 801bd1a:	b29a      	uxth	r2, r3
 801bd1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd1e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801bd20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd22:	681b      	ldr	r3, [r3, #0]
 801bd24:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bd26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd28:	2b00      	cmp	r3, #0
 801bd2a:	d1dd      	bne.n	801bce8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801bd2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bd2e:	891a      	ldrh	r2, [r3, #8]
 801bd30:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801bd32:	4413      	add	r3, r2
 801bd34:	b29a      	uxth	r2, r3
 801bd36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bd38:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801bd3a:	8a7a      	ldrh	r2, [r7, #18]
 801bd3c:	68fb      	ldr	r3, [r7, #12]
 801bd3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801bd42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bd44:	2b00      	cmp	r3, #0
 801bd46:	d018      	beq.n	801bd7a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801bd48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bd4a:	2b00      	cmp	r3, #0
 801bd4c:	d106      	bne.n	801bd5c <tcp_write+0x508>
 801bd4e:	4b2a      	ldr	r3, [pc, #168]	; (801bdf8 <tcp_write+0x5a4>)
 801bd50:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801bd54:	492d      	ldr	r1, [pc, #180]	; (801be0c <tcp_write+0x5b8>)
 801bd56:	482a      	ldr	r0, [pc, #168]	; (801be00 <tcp_write+0x5ac>)
 801bd58:	f006 f8f0 	bl	8021f3c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801bd5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bd5e:	685b      	ldr	r3, [r3, #4]
 801bd60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801bd62:	4618      	mov	r0, r3
 801bd64:	f7fd fd86 	bl	8019874 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801bd68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bd6a:	891a      	ldrh	r2, [r3, #8]
 801bd6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bd6e:	891b      	ldrh	r3, [r3, #8]
 801bd70:	4413      	add	r3, r2
 801bd72:	b29a      	uxth	r2, r3
 801bd74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bd76:	811a      	strh	r2, [r3, #8]
 801bd78:	e037      	b.n	801bdea <tcp_write+0x596>
  } else if (extendlen > 0) {
 801bd7a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bd7c:	2b00      	cmp	r3, #0
 801bd7e:	d034      	beq.n	801bdea <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801bd80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bd82:	2b00      	cmp	r3, #0
 801bd84:	d003      	beq.n	801bd8e <tcp_write+0x53a>
 801bd86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bd88:	685b      	ldr	r3, [r3, #4]
 801bd8a:	2b00      	cmp	r3, #0
 801bd8c:	d106      	bne.n	801bd9c <tcp_write+0x548>
 801bd8e:	4b1a      	ldr	r3, [pc, #104]	; (801bdf8 <tcp_write+0x5a4>)
 801bd90:	f240 22e6 	movw	r2, #742	; 0x2e6
 801bd94:	491e      	ldr	r1, [pc, #120]	; (801be10 <tcp_write+0x5bc>)
 801bd96:	481a      	ldr	r0, [pc, #104]	; (801be00 <tcp_write+0x5ac>)
 801bd98:	f006 f8d0 	bl	8021f3c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801bd9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bd9e:	685b      	ldr	r3, [r3, #4]
 801bda0:	62bb      	str	r3, [r7, #40]	; 0x28
 801bda2:	e009      	b.n	801bdb8 <tcp_write+0x564>
      p->tot_len += extendlen;
 801bda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bda6:	891a      	ldrh	r2, [r3, #8]
 801bda8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bdaa:	4413      	add	r3, r2
 801bdac:	b29a      	uxth	r2, r3
 801bdae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bdb0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801bdb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bdb4:	681b      	ldr	r3, [r3, #0]
 801bdb6:	62bb      	str	r3, [r7, #40]	; 0x28
 801bdb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bdba:	681b      	ldr	r3, [r3, #0]
 801bdbc:	2b00      	cmp	r3, #0
 801bdbe:	d1f1      	bne.n	801bda4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801bdc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bdc2:	891a      	ldrh	r2, [r3, #8]
 801bdc4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bdc6:	4413      	add	r3, r2
 801bdc8:	b29a      	uxth	r2, r3
 801bdca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bdcc:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801bdce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bdd0:	895a      	ldrh	r2, [r3, #10]
 801bdd2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bdd4:	4413      	add	r3, r2
 801bdd6:	b29a      	uxth	r2, r3
 801bdd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bdda:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801bddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bdde:	891a      	ldrh	r2, [r3, #8]
 801bde0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bde2:	4413      	add	r3, r2
 801bde4:	b29a      	uxth	r2, r3
 801bde6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bde8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801bdea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bdec:	2b00      	cmp	r3, #0
 801bdee:	d111      	bne.n	801be14 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801bdf0:	68fb      	ldr	r3, [r7, #12]
 801bdf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801bdf4:	66da      	str	r2, [r3, #108]	; 0x6c
 801bdf6:	e010      	b.n	801be1a <tcp_write+0x5c6>
 801bdf8:	08025028 	.word	0x08025028
 801bdfc:	080252c8 	.word	0x080252c8
 801be00:	0802507c 	.word	0x0802507c
 801be04:	08025308 	.word	0x08025308
 801be08:	08025318 	.word	0x08025318
 801be0c:	0802532c 	.word	0x0802532c
 801be10:	08025364 	.word	0x08025364
  } else {
    last_unsent->next = queue;
 801be14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801be16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801be18:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801be1a:	68fb      	ldr	r3, [r7, #12]
 801be1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801be1e:	88fb      	ldrh	r3, [r7, #6]
 801be20:	441a      	add	r2, r3
 801be22:	68fb      	ldr	r3, [r7, #12]
 801be24:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801be26:	68fb      	ldr	r3, [r7, #12]
 801be28:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801be2c:	88fb      	ldrh	r3, [r7, #6]
 801be2e:	1ad3      	subs	r3, r2, r3
 801be30:	b29a      	uxth	r2, r3
 801be32:	68fb      	ldr	r3, [r7, #12]
 801be34:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801be38:	68fb      	ldr	r3, [r7, #12]
 801be3a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801be3e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801be42:	68fb      	ldr	r3, [r7, #12]
 801be44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801be48:	2b00      	cmp	r3, #0
 801be4a:	d00e      	beq.n	801be6a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801be4c:	68fb      	ldr	r3, [r7, #12]
 801be4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be50:	2b00      	cmp	r3, #0
 801be52:	d10a      	bne.n	801be6a <tcp_write+0x616>
 801be54:	68fb      	ldr	r3, [r7, #12]
 801be56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801be58:	2b00      	cmp	r3, #0
 801be5a:	d106      	bne.n	801be6a <tcp_write+0x616>
 801be5c:	4b2c      	ldr	r3, [pc, #176]	; (801bf10 <tcp_write+0x6bc>)
 801be5e:	f240 3212 	movw	r2, #786	; 0x312
 801be62:	492c      	ldr	r1, [pc, #176]	; (801bf14 <tcp_write+0x6c0>)
 801be64:	482c      	ldr	r0, [pc, #176]	; (801bf18 <tcp_write+0x6c4>)
 801be66:	f006 f869 	bl	8021f3c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801be6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801be6c:	2b00      	cmp	r3, #0
 801be6e:	d016      	beq.n	801be9e <tcp_write+0x64a>
 801be70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801be72:	68db      	ldr	r3, [r3, #12]
 801be74:	2b00      	cmp	r3, #0
 801be76:	d012      	beq.n	801be9e <tcp_write+0x64a>
 801be78:	797b      	ldrb	r3, [r7, #5]
 801be7a:	f003 0302 	and.w	r3, r3, #2
 801be7e:	2b00      	cmp	r3, #0
 801be80:	d10d      	bne.n	801be9e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801be82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801be84:	68db      	ldr	r3, [r3, #12]
 801be86:	899b      	ldrh	r3, [r3, #12]
 801be88:	b29c      	uxth	r4, r3
 801be8a:	2008      	movs	r0, #8
 801be8c:	f7fc fc9e 	bl	80187cc <lwip_htons>
 801be90:	4603      	mov	r3, r0
 801be92:	461a      	mov	r2, r3
 801be94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801be96:	68db      	ldr	r3, [r3, #12]
 801be98:	4322      	orrs	r2, r4
 801be9a:	b292      	uxth	r2, r2
 801be9c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801be9e:	2300      	movs	r3, #0
 801bea0:	e031      	b.n	801bf06 <tcp_write+0x6b2>
          goto memerr;
 801bea2:	bf00      	nop
 801bea4:	e006      	b.n	801beb4 <tcp_write+0x660>
            goto memerr;
 801bea6:	bf00      	nop
 801bea8:	e004      	b.n	801beb4 <tcp_write+0x660>
        goto memerr;
 801beaa:	bf00      	nop
 801beac:	e002      	b.n	801beb4 <tcp_write+0x660>
        goto memerr;
 801beae:	bf00      	nop
 801beb0:	e000      	b.n	801beb4 <tcp_write+0x660>
      goto memerr;
 801beb2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801beb4:	68fb      	ldr	r3, [r7, #12]
 801beb6:	8b5b      	ldrh	r3, [r3, #26]
 801beb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bebc:	b29a      	uxth	r2, r3
 801bebe:	68fb      	ldr	r3, [r7, #12]
 801bec0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801bec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bec4:	2b00      	cmp	r3, #0
 801bec6:	d002      	beq.n	801bece <tcp_write+0x67a>
    pbuf_free(concat_p);
 801bec8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801beca:	f7fd fc05 	bl	80196d8 <pbuf_free>
  }
  if (queue != NULL) {
 801bece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bed0:	2b00      	cmp	r3, #0
 801bed2:	d002      	beq.n	801beda <tcp_write+0x686>
    tcp_segs_free(queue);
 801bed4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801bed6:	f7fe ff43 	bl	801ad60 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801beda:	68fb      	ldr	r3, [r7, #12]
 801bedc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801bee0:	2b00      	cmp	r3, #0
 801bee2:	d00e      	beq.n	801bf02 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801bee4:	68fb      	ldr	r3, [r7, #12]
 801bee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bee8:	2b00      	cmp	r3, #0
 801beea:	d10a      	bne.n	801bf02 <tcp_write+0x6ae>
 801beec:	68fb      	ldr	r3, [r7, #12]
 801beee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bef0:	2b00      	cmp	r3, #0
 801bef2:	d106      	bne.n	801bf02 <tcp_write+0x6ae>
 801bef4:	4b06      	ldr	r3, [pc, #24]	; (801bf10 <tcp_write+0x6bc>)
 801bef6:	f240 3227 	movw	r2, #807	; 0x327
 801befa:	4906      	ldr	r1, [pc, #24]	; (801bf14 <tcp_write+0x6c0>)
 801befc:	4806      	ldr	r0, [pc, #24]	; (801bf18 <tcp_write+0x6c4>)
 801befe:	f006 f81d 	bl	8021f3c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801bf02:	f04f 33ff 	mov.w	r3, #4294967295
}
 801bf06:	4618      	mov	r0, r3
 801bf08:	375c      	adds	r7, #92	; 0x5c
 801bf0a:	46bd      	mov	sp, r7
 801bf0c:	bd90      	pop	{r4, r7, pc}
 801bf0e:	bf00      	nop
 801bf10:	08025028 	.word	0x08025028
 801bf14:	0802539c 	.word	0x0802539c
 801bf18:	0802507c 	.word	0x0802507c

0801bf1c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801bf1c:	b590      	push	{r4, r7, lr}
 801bf1e:	b08b      	sub	sp, #44	; 0x2c
 801bf20:	af02      	add	r7, sp, #8
 801bf22:	6078      	str	r0, [r7, #4]
 801bf24:	460b      	mov	r3, r1
 801bf26:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801bf28:	2300      	movs	r3, #0
 801bf2a:	61fb      	str	r3, [r7, #28]
 801bf2c:	2300      	movs	r3, #0
 801bf2e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801bf30:	2300      	movs	r3, #0
 801bf32:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801bf34:	687b      	ldr	r3, [r7, #4]
 801bf36:	2b00      	cmp	r3, #0
 801bf38:	d106      	bne.n	801bf48 <tcp_split_unsent_seg+0x2c>
 801bf3a:	4b95      	ldr	r3, [pc, #596]	; (801c190 <tcp_split_unsent_seg+0x274>)
 801bf3c:	f240 324b 	movw	r2, #843	; 0x34b
 801bf40:	4994      	ldr	r1, [pc, #592]	; (801c194 <tcp_split_unsent_seg+0x278>)
 801bf42:	4895      	ldr	r0, [pc, #596]	; (801c198 <tcp_split_unsent_seg+0x27c>)
 801bf44:	f005 fffa 	bl	8021f3c <iprintf>

  useg = pcb->unsent;
 801bf48:	687b      	ldr	r3, [r7, #4]
 801bf4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bf4c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801bf4e:	697b      	ldr	r3, [r7, #20]
 801bf50:	2b00      	cmp	r3, #0
 801bf52:	d102      	bne.n	801bf5a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801bf54:	f04f 33ff 	mov.w	r3, #4294967295
 801bf58:	e116      	b.n	801c188 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801bf5a:	887b      	ldrh	r3, [r7, #2]
 801bf5c:	2b00      	cmp	r3, #0
 801bf5e:	d109      	bne.n	801bf74 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801bf60:	4b8b      	ldr	r3, [pc, #556]	; (801c190 <tcp_split_unsent_seg+0x274>)
 801bf62:	f240 3253 	movw	r2, #851	; 0x353
 801bf66:	498d      	ldr	r1, [pc, #564]	; (801c19c <tcp_split_unsent_seg+0x280>)
 801bf68:	488b      	ldr	r0, [pc, #556]	; (801c198 <tcp_split_unsent_seg+0x27c>)
 801bf6a:	f005 ffe7 	bl	8021f3c <iprintf>
    return ERR_VAL;
 801bf6e:	f06f 0305 	mvn.w	r3, #5
 801bf72:	e109      	b.n	801c188 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801bf74:	697b      	ldr	r3, [r7, #20]
 801bf76:	891b      	ldrh	r3, [r3, #8]
 801bf78:	887a      	ldrh	r2, [r7, #2]
 801bf7a:	429a      	cmp	r2, r3
 801bf7c:	d301      	bcc.n	801bf82 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801bf7e:	2300      	movs	r3, #0
 801bf80:	e102      	b.n	801c188 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801bf82:	687b      	ldr	r3, [r7, #4]
 801bf84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bf86:	887a      	ldrh	r2, [r7, #2]
 801bf88:	429a      	cmp	r2, r3
 801bf8a:	d906      	bls.n	801bf9a <tcp_split_unsent_seg+0x7e>
 801bf8c:	4b80      	ldr	r3, [pc, #512]	; (801c190 <tcp_split_unsent_seg+0x274>)
 801bf8e:	f240 325b 	movw	r2, #859	; 0x35b
 801bf92:	4983      	ldr	r1, [pc, #524]	; (801c1a0 <tcp_split_unsent_seg+0x284>)
 801bf94:	4880      	ldr	r0, [pc, #512]	; (801c198 <tcp_split_unsent_seg+0x27c>)
 801bf96:	f005 ffd1 	bl	8021f3c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801bf9a:	697b      	ldr	r3, [r7, #20]
 801bf9c:	891b      	ldrh	r3, [r3, #8]
 801bf9e:	2b00      	cmp	r3, #0
 801bfa0:	d106      	bne.n	801bfb0 <tcp_split_unsent_seg+0x94>
 801bfa2:	4b7b      	ldr	r3, [pc, #492]	; (801c190 <tcp_split_unsent_seg+0x274>)
 801bfa4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801bfa8:	497e      	ldr	r1, [pc, #504]	; (801c1a4 <tcp_split_unsent_seg+0x288>)
 801bfaa:	487b      	ldr	r0, [pc, #492]	; (801c198 <tcp_split_unsent_seg+0x27c>)
 801bfac:	f005 ffc6 	bl	8021f3c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801bfb0:	697b      	ldr	r3, [r7, #20]
 801bfb2:	7a9b      	ldrb	r3, [r3, #10]
 801bfb4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801bfb6:	7bfb      	ldrb	r3, [r7, #15]
 801bfb8:	009b      	lsls	r3, r3, #2
 801bfba:	b2db      	uxtb	r3, r3
 801bfbc:	f003 0304 	and.w	r3, r3, #4
 801bfc0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801bfc2:	697b      	ldr	r3, [r7, #20]
 801bfc4:	891a      	ldrh	r2, [r3, #8]
 801bfc6:	887b      	ldrh	r3, [r7, #2]
 801bfc8:	1ad3      	subs	r3, r2, r3
 801bfca:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801bfcc:	7bbb      	ldrb	r3, [r7, #14]
 801bfce:	b29a      	uxth	r2, r3
 801bfd0:	89bb      	ldrh	r3, [r7, #12]
 801bfd2:	4413      	add	r3, r2
 801bfd4:	b29b      	uxth	r3, r3
 801bfd6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bfda:	4619      	mov	r1, r3
 801bfdc:	2036      	movs	r0, #54	; 0x36
 801bfde:	f7fd f91d 	bl	801921c <pbuf_alloc>
 801bfe2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801bfe4:	693b      	ldr	r3, [r7, #16]
 801bfe6:	2b00      	cmp	r3, #0
 801bfe8:	f000 80b7 	beq.w	801c15a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801bfec:	697b      	ldr	r3, [r7, #20]
 801bfee:	685b      	ldr	r3, [r3, #4]
 801bff0:	891a      	ldrh	r2, [r3, #8]
 801bff2:	697b      	ldr	r3, [r7, #20]
 801bff4:	891b      	ldrh	r3, [r3, #8]
 801bff6:	1ad3      	subs	r3, r2, r3
 801bff8:	b29a      	uxth	r2, r3
 801bffa:	887b      	ldrh	r3, [r7, #2]
 801bffc:	4413      	add	r3, r2
 801bffe:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801c000:	697b      	ldr	r3, [r7, #20]
 801c002:	6858      	ldr	r0, [r3, #4]
 801c004:	693b      	ldr	r3, [r7, #16]
 801c006:	685a      	ldr	r2, [r3, #4]
 801c008:	7bbb      	ldrb	r3, [r7, #14]
 801c00a:	18d1      	adds	r1, r2, r3
 801c00c:	897b      	ldrh	r3, [r7, #10]
 801c00e:	89ba      	ldrh	r2, [r7, #12]
 801c010:	f7fd fc86 	bl	8019920 <pbuf_copy_partial>
 801c014:	4603      	mov	r3, r0
 801c016:	461a      	mov	r2, r3
 801c018:	89bb      	ldrh	r3, [r7, #12]
 801c01a:	4293      	cmp	r3, r2
 801c01c:	f040 809f 	bne.w	801c15e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801c020:	697b      	ldr	r3, [r7, #20]
 801c022:	68db      	ldr	r3, [r3, #12]
 801c024:	899b      	ldrh	r3, [r3, #12]
 801c026:	b29b      	uxth	r3, r3
 801c028:	4618      	mov	r0, r3
 801c02a:	f7fc fbcf 	bl	80187cc <lwip_htons>
 801c02e:	4603      	mov	r3, r0
 801c030:	b2db      	uxtb	r3, r3
 801c032:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c036:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801c038:	2300      	movs	r3, #0
 801c03a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801c03c:	7efb      	ldrb	r3, [r7, #27]
 801c03e:	f003 0308 	and.w	r3, r3, #8
 801c042:	2b00      	cmp	r3, #0
 801c044:	d007      	beq.n	801c056 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801c046:	7efb      	ldrb	r3, [r7, #27]
 801c048:	f023 0308 	bic.w	r3, r3, #8
 801c04c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801c04e:	7ebb      	ldrb	r3, [r7, #26]
 801c050:	f043 0308 	orr.w	r3, r3, #8
 801c054:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801c056:	7efb      	ldrb	r3, [r7, #27]
 801c058:	f003 0301 	and.w	r3, r3, #1
 801c05c:	2b00      	cmp	r3, #0
 801c05e:	d007      	beq.n	801c070 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801c060:	7efb      	ldrb	r3, [r7, #27]
 801c062:	f023 0301 	bic.w	r3, r3, #1
 801c066:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801c068:	7ebb      	ldrb	r3, [r7, #26]
 801c06a:	f043 0301 	orr.w	r3, r3, #1
 801c06e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801c070:	697b      	ldr	r3, [r7, #20]
 801c072:	68db      	ldr	r3, [r3, #12]
 801c074:	685b      	ldr	r3, [r3, #4]
 801c076:	4618      	mov	r0, r3
 801c078:	f7fc fbbd 	bl	80187f6 <lwip_htonl>
 801c07c:	4602      	mov	r2, r0
 801c07e:	887b      	ldrh	r3, [r7, #2]
 801c080:	18d1      	adds	r1, r2, r3
 801c082:	7eba      	ldrb	r2, [r7, #26]
 801c084:	7bfb      	ldrb	r3, [r7, #15]
 801c086:	9300      	str	r3, [sp, #0]
 801c088:	460b      	mov	r3, r1
 801c08a:	6939      	ldr	r1, [r7, #16]
 801c08c:	6878      	ldr	r0, [r7, #4]
 801c08e:	f7ff fa4f 	bl	801b530 <tcp_create_segment>
 801c092:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801c094:	69fb      	ldr	r3, [r7, #28]
 801c096:	2b00      	cmp	r3, #0
 801c098:	d063      	beq.n	801c162 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801c09a:	697b      	ldr	r3, [r7, #20]
 801c09c:	685b      	ldr	r3, [r3, #4]
 801c09e:	4618      	mov	r0, r3
 801c0a0:	f7fd fba8 	bl	80197f4 <pbuf_clen>
 801c0a4:	4603      	mov	r3, r0
 801c0a6:	461a      	mov	r2, r3
 801c0a8:	687b      	ldr	r3, [r7, #4]
 801c0aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c0ae:	1a9b      	subs	r3, r3, r2
 801c0b0:	b29a      	uxth	r2, r3
 801c0b2:	687b      	ldr	r3, [r7, #4]
 801c0b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801c0b8:	697b      	ldr	r3, [r7, #20]
 801c0ba:	6858      	ldr	r0, [r3, #4]
 801c0bc:	697b      	ldr	r3, [r7, #20]
 801c0be:	685b      	ldr	r3, [r3, #4]
 801c0c0:	891a      	ldrh	r2, [r3, #8]
 801c0c2:	89bb      	ldrh	r3, [r7, #12]
 801c0c4:	1ad3      	subs	r3, r2, r3
 801c0c6:	b29b      	uxth	r3, r3
 801c0c8:	4619      	mov	r1, r3
 801c0ca:	f7fd fa05 	bl	80194d8 <pbuf_realloc>
  useg->len -= remainder;
 801c0ce:	697b      	ldr	r3, [r7, #20]
 801c0d0:	891a      	ldrh	r2, [r3, #8]
 801c0d2:	89bb      	ldrh	r3, [r7, #12]
 801c0d4:	1ad3      	subs	r3, r2, r3
 801c0d6:	b29a      	uxth	r2, r3
 801c0d8:	697b      	ldr	r3, [r7, #20]
 801c0da:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801c0dc:	697b      	ldr	r3, [r7, #20]
 801c0de:	68db      	ldr	r3, [r3, #12]
 801c0e0:	899b      	ldrh	r3, [r3, #12]
 801c0e2:	b29c      	uxth	r4, r3
 801c0e4:	7efb      	ldrb	r3, [r7, #27]
 801c0e6:	b29b      	uxth	r3, r3
 801c0e8:	4618      	mov	r0, r3
 801c0ea:	f7fc fb6f 	bl	80187cc <lwip_htons>
 801c0ee:	4603      	mov	r3, r0
 801c0f0:	461a      	mov	r2, r3
 801c0f2:	697b      	ldr	r3, [r7, #20]
 801c0f4:	68db      	ldr	r3, [r3, #12]
 801c0f6:	4322      	orrs	r2, r4
 801c0f8:	b292      	uxth	r2, r2
 801c0fa:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801c0fc:	697b      	ldr	r3, [r7, #20]
 801c0fe:	685b      	ldr	r3, [r3, #4]
 801c100:	4618      	mov	r0, r3
 801c102:	f7fd fb77 	bl	80197f4 <pbuf_clen>
 801c106:	4603      	mov	r3, r0
 801c108:	461a      	mov	r2, r3
 801c10a:	687b      	ldr	r3, [r7, #4]
 801c10c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c110:	4413      	add	r3, r2
 801c112:	b29a      	uxth	r2, r3
 801c114:	687b      	ldr	r3, [r7, #4]
 801c116:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801c11a:	69fb      	ldr	r3, [r7, #28]
 801c11c:	685b      	ldr	r3, [r3, #4]
 801c11e:	4618      	mov	r0, r3
 801c120:	f7fd fb68 	bl	80197f4 <pbuf_clen>
 801c124:	4603      	mov	r3, r0
 801c126:	461a      	mov	r2, r3
 801c128:	687b      	ldr	r3, [r7, #4]
 801c12a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c12e:	4413      	add	r3, r2
 801c130:	b29a      	uxth	r2, r3
 801c132:	687b      	ldr	r3, [r7, #4]
 801c134:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801c138:	697b      	ldr	r3, [r7, #20]
 801c13a:	681a      	ldr	r2, [r3, #0]
 801c13c:	69fb      	ldr	r3, [r7, #28]
 801c13e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801c140:	697b      	ldr	r3, [r7, #20]
 801c142:	69fa      	ldr	r2, [r7, #28]
 801c144:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801c146:	69fb      	ldr	r3, [r7, #28]
 801c148:	681b      	ldr	r3, [r3, #0]
 801c14a:	2b00      	cmp	r3, #0
 801c14c:	d103      	bne.n	801c156 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801c14e:	687b      	ldr	r3, [r7, #4]
 801c150:	2200      	movs	r2, #0
 801c152:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801c156:	2300      	movs	r3, #0
 801c158:	e016      	b.n	801c188 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801c15a:	bf00      	nop
 801c15c:	e002      	b.n	801c164 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801c15e:	bf00      	nop
 801c160:	e000      	b.n	801c164 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801c162:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801c164:	69fb      	ldr	r3, [r7, #28]
 801c166:	2b00      	cmp	r3, #0
 801c168:	d006      	beq.n	801c178 <tcp_split_unsent_seg+0x25c>
 801c16a:	4b09      	ldr	r3, [pc, #36]	; (801c190 <tcp_split_unsent_seg+0x274>)
 801c16c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801c170:	490d      	ldr	r1, [pc, #52]	; (801c1a8 <tcp_split_unsent_seg+0x28c>)
 801c172:	4809      	ldr	r0, [pc, #36]	; (801c198 <tcp_split_unsent_seg+0x27c>)
 801c174:	f005 fee2 	bl	8021f3c <iprintf>
  if (p != NULL) {
 801c178:	693b      	ldr	r3, [r7, #16]
 801c17a:	2b00      	cmp	r3, #0
 801c17c:	d002      	beq.n	801c184 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801c17e:	6938      	ldr	r0, [r7, #16]
 801c180:	f7fd faaa 	bl	80196d8 <pbuf_free>
  }

  return ERR_MEM;
 801c184:	f04f 33ff 	mov.w	r3, #4294967295
}
 801c188:	4618      	mov	r0, r3
 801c18a:	3724      	adds	r7, #36	; 0x24
 801c18c:	46bd      	mov	sp, r7
 801c18e:	bd90      	pop	{r4, r7, pc}
 801c190:	08025028 	.word	0x08025028
 801c194:	080253bc 	.word	0x080253bc
 801c198:	0802507c 	.word	0x0802507c
 801c19c:	080253e0 	.word	0x080253e0
 801c1a0:	08025404 	.word	0x08025404
 801c1a4:	08025414 	.word	0x08025414
 801c1a8:	08025424 	.word	0x08025424

0801c1ac <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801c1ac:	b590      	push	{r4, r7, lr}
 801c1ae:	b085      	sub	sp, #20
 801c1b0:	af00      	add	r7, sp, #0
 801c1b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801c1b4:	687b      	ldr	r3, [r7, #4]
 801c1b6:	2b00      	cmp	r3, #0
 801c1b8:	d106      	bne.n	801c1c8 <tcp_send_fin+0x1c>
 801c1ba:	4b21      	ldr	r3, [pc, #132]	; (801c240 <tcp_send_fin+0x94>)
 801c1bc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801c1c0:	4920      	ldr	r1, [pc, #128]	; (801c244 <tcp_send_fin+0x98>)
 801c1c2:	4821      	ldr	r0, [pc, #132]	; (801c248 <tcp_send_fin+0x9c>)
 801c1c4:	f005 feba 	bl	8021f3c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801c1c8:	687b      	ldr	r3, [r7, #4]
 801c1ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c1cc:	2b00      	cmp	r3, #0
 801c1ce:	d02e      	beq.n	801c22e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801c1d0:	687b      	ldr	r3, [r7, #4]
 801c1d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c1d4:	60fb      	str	r3, [r7, #12]
 801c1d6:	e002      	b.n	801c1de <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801c1d8:	68fb      	ldr	r3, [r7, #12]
 801c1da:	681b      	ldr	r3, [r3, #0]
 801c1dc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801c1de:	68fb      	ldr	r3, [r7, #12]
 801c1e0:	681b      	ldr	r3, [r3, #0]
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	d1f8      	bne.n	801c1d8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801c1e6:	68fb      	ldr	r3, [r7, #12]
 801c1e8:	68db      	ldr	r3, [r3, #12]
 801c1ea:	899b      	ldrh	r3, [r3, #12]
 801c1ec:	b29b      	uxth	r3, r3
 801c1ee:	4618      	mov	r0, r3
 801c1f0:	f7fc faec 	bl	80187cc <lwip_htons>
 801c1f4:	4603      	mov	r3, r0
 801c1f6:	b2db      	uxtb	r3, r3
 801c1f8:	f003 0307 	and.w	r3, r3, #7
 801c1fc:	2b00      	cmp	r3, #0
 801c1fe:	d116      	bne.n	801c22e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801c200:	68fb      	ldr	r3, [r7, #12]
 801c202:	68db      	ldr	r3, [r3, #12]
 801c204:	899b      	ldrh	r3, [r3, #12]
 801c206:	b29c      	uxth	r4, r3
 801c208:	2001      	movs	r0, #1
 801c20a:	f7fc fadf 	bl	80187cc <lwip_htons>
 801c20e:	4603      	mov	r3, r0
 801c210:	461a      	mov	r2, r3
 801c212:	68fb      	ldr	r3, [r7, #12]
 801c214:	68db      	ldr	r3, [r3, #12]
 801c216:	4322      	orrs	r2, r4
 801c218:	b292      	uxth	r2, r2
 801c21a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801c21c:	687b      	ldr	r3, [r7, #4]
 801c21e:	8b5b      	ldrh	r3, [r3, #26]
 801c220:	f043 0320 	orr.w	r3, r3, #32
 801c224:	b29a      	uxth	r2, r3
 801c226:	687b      	ldr	r3, [r7, #4]
 801c228:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801c22a:	2300      	movs	r3, #0
 801c22c:	e004      	b.n	801c238 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801c22e:	2101      	movs	r1, #1
 801c230:	6878      	ldr	r0, [r7, #4]
 801c232:	f000 f80b 	bl	801c24c <tcp_enqueue_flags>
 801c236:	4603      	mov	r3, r0
}
 801c238:	4618      	mov	r0, r3
 801c23a:	3714      	adds	r7, #20
 801c23c:	46bd      	mov	sp, r7
 801c23e:	bd90      	pop	{r4, r7, pc}
 801c240:	08025028 	.word	0x08025028
 801c244:	08025430 	.word	0x08025430
 801c248:	0802507c 	.word	0x0802507c

0801c24c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801c24c:	b580      	push	{r7, lr}
 801c24e:	b08a      	sub	sp, #40	; 0x28
 801c250:	af02      	add	r7, sp, #8
 801c252:	6078      	str	r0, [r7, #4]
 801c254:	460b      	mov	r3, r1
 801c256:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801c258:	2300      	movs	r3, #0
 801c25a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801c25c:	2300      	movs	r3, #0
 801c25e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801c260:	78fb      	ldrb	r3, [r7, #3]
 801c262:	f003 0303 	and.w	r3, r3, #3
 801c266:	2b00      	cmp	r3, #0
 801c268:	d106      	bne.n	801c278 <tcp_enqueue_flags+0x2c>
 801c26a:	4b67      	ldr	r3, [pc, #412]	; (801c408 <tcp_enqueue_flags+0x1bc>)
 801c26c:	f240 4211 	movw	r2, #1041	; 0x411
 801c270:	4966      	ldr	r1, [pc, #408]	; (801c40c <tcp_enqueue_flags+0x1c0>)
 801c272:	4867      	ldr	r0, [pc, #412]	; (801c410 <tcp_enqueue_flags+0x1c4>)
 801c274:	f005 fe62 	bl	8021f3c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801c278:	687b      	ldr	r3, [r7, #4]
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d106      	bne.n	801c28c <tcp_enqueue_flags+0x40>
 801c27e:	4b62      	ldr	r3, [pc, #392]	; (801c408 <tcp_enqueue_flags+0x1bc>)
 801c280:	f240 4213 	movw	r2, #1043	; 0x413
 801c284:	4963      	ldr	r1, [pc, #396]	; (801c414 <tcp_enqueue_flags+0x1c8>)
 801c286:	4862      	ldr	r0, [pc, #392]	; (801c410 <tcp_enqueue_flags+0x1c4>)
 801c288:	f005 fe58 	bl	8021f3c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801c28c:	78fb      	ldrb	r3, [r7, #3]
 801c28e:	f003 0302 	and.w	r3, r3, #2
 801c292:	2b00      	cmp	r3, #0
 801c294:	d001      	beq.n	801c29a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801c296:	2301      	movs	r3, #1
 801c298:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801c29a:	7ffb      	ldrb	r3, [r7, #31]
 801c29c:	009b      	lsls	r3, r3, #2
 801c29e:	b2db      	uxtb	r3, r3
 801c2a0:	f003 0304 	and.w	r3, r3, #4
 801c2a4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801c2a6:	7dfb      	ldrb	r3, [r7, #23]
 801c2a8:	b29b      	uxth	r3, r3
 801c2aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c2ae:	4619      	mov	r1, r3
 801c2b0:	2036      	movs	r0, #54	; 0x36
 801c2b2:	f7fc ffb3 	bl	801921c <pbuf_alloc>
 801c2b6:	6138      	str	r0, [r7, #16]
 801c2b8:	693b      	ldr	r3, [r7, #16]
 801c2ba:	2b00      	cmp	r3, #0
 801c2bc:	d109      	bne.n	801c2d2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c2be:	687b      	ldr	r3, [r7, #4]
 801c2c0:	8b5b      	ldrh	r3, [r3, #26]
 801c2c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c2c6:	b29a      	uxth	r2, r3
 801c2c8:	687b      	ldr	r3, [r7, #4]
 801c2ca:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801c2cc:	f04f 33ff 	mov.w	r3, #4294967295
 801c2d0:	e095      	b.n	801c3fe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801c2d2:	693b      	ldr	r3, [r7, #16]
 801c2d4:	895a      	ldrh	r2, [r3, #10]
 801c2d6:	7dfb      	ldrb	r3, [r7, #23]
 801c2d8:	b29b      	uxth	r3, r3
 801c2da:	429a      	cmp	r2, r3
 801c2dc:	d206      	bcs.n	801c2ec <tcp_enqueue_flags+0xa0>
 801c2de:	4b4a      	ldr	r3, [pc, #296]	; (801c408 <tcp_enqueue_flags+0x1bc>)
 801c2e0:	f240 4239 	movw	r2, #1081	; 0x439
 801c2e4:	494c      	ldr	r1, [pc, #304]	; (801c418 <tcp_enqueue_flags+0x1cc>)
 801c2e6:	484a      	ldr	r0, [pc, #296]	; (801c410 <tcp_enqueue_flags+0x1c4>)
 801c2e8:	f005 fe28 	bl	8021f3c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801c2ec:	687b      	ldr	r3, [r7, #4]
 801c2ee:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801c2f0:	78fa      	ldrb	r2, [r7, #3]
 801c2f2:	7ffb      	ldrb	r3, [r7, #31]
 801c2f4:	9300      	str	r3, [sp, #0]
 801c2f6:	460b      	mov	r3, r1
 801c2f8:	6939      	ldr	r1, [r7, #16]
 801c2fa:	6878      	ldr	r0, [r7, #4]
 801c2fc:	f7ff f918 	bl	801b530 <tcp_create_segment>
 801c300:	60f8      	str	r0, [r7, #12]
 801c302:	68fb      	ldr	r3, [r7, #12]
 801c304:	2b00      	cmp	r3, #0
 801c306:	d109      	bne.n	801c31c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c308:	687b      	ldr	r3, [r7, #4]
 801c30a:	8b5b      	ldrh	r3, [r3, #26]
 801c30c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c310:	b29a      	uxth	r2, r3
 801c312:	687b      	ldr	r3, [r7, #4]
 801c314:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801c316:	f04f 33ff 	mov.w	r3, #4294967295
 801c31a:	e070      	b.n	801c3fe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801c31c:	68fb      	ldr	r3, [r7, #12]
 801c31e:	68db      	ldr	r3, [r3, #12]
 801c320:	f003 0303 	and.w	r3, r3, #3
 801c324:	2b00      	cmp	r3, #0
 801c326:	d006      	beq.n	801c336 <tcp_enqueue_flags+0xea>
 801c328:	4b37      	ldr	r3, [pc, #220]	; (801c408 <tcp_enqueue_flags+0x1bc>)
 801c32a:	f240 4242 	movw	r2, #1090	; 0x442
 801c32e:	493b      	ldr	r1, [pc, #236]	; (801c41c <tcp_enqueue_flags+0x1d0>)
 801c330:	4837      	ldr	r0, [pc, #220]	; (801c410 <tcp_enqueue_flags+0x1c4>)
 801c332:	f005 fe03 	bl	8021f3c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801c336:	68fb      	ldr	r3, [r7, #12]
 801c338:	891b      	ldrh	r3, [r3, #8]
 801c33a:	2b00      	cmp	r3, #0
 801c33c:	d006      	beq.n	801c34c <tcp_enqueue_flags+0x100>
 801c33e:	4b32      	ldr	r3, [pc, #200]	; (801c408 <tcp_enqueue_flags+0x1bc>)
 801c340:	f240 4243 	movw	r2, #1091	; 0x443
 801c344:	4936      	ldr	r1, [pc, #216]	; (801c420 <tcp_enqueue_flags+0x1d4>)
 801c346:	4832      	ldr	r0, [pc, #200]	; (801c410 <tcp_enqueue_flags+0x1c4>)
 801c348:	f005 fdf8 	bl	8021f3c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801c34c:	687b      	ldr	r3, [r7, #4]
 801c34e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c350:	2b00      	cmp	r3, #0
 801c352:	d103      	bne.n	801c35c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801c354:	687b      	ldr	r3, [r7, #4]
 801c356:	68fa      	ldr	r2, [r7, #12]
 801c358:	66da      	str	r2, [r3, #108]	; 0x6c
 801c35a:	e00d      	b.n	801c378 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801c35c:	687b      	ldr	r3, [r7, #4]
 801c35e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c360:	61bb      	str	r3, [r7, #24]
 801c362:	e002      	b.n	801c36a <tcp_enqueue_flags+0x11e>
 801c364:	69bb      	ldr	r3, [r7, #24]
 801c366:	681b      	ldr	r3, [r3, #0]
 801c368:	61bb      	str	r3, [r7, #24]
 801c36a:	69bb      	ldr	r3, [r7, #24]
 801c36c:	681b      	ldr	r3, [r3, #0]
 801c36e:	2b00      	cmp	r3, #0
 801c370:	d1f8      	bne.n	801c364 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801c372:	69bb      	ldr	r3, [r7, #24]
 801c374:	68fa      	ldr	r2, [r7, #12]
 801c376:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801c378:	687b      	ldr	r3, [r7, #4]
 801c37a:	2200      	movs	r2, #0
 801c37c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801c380:	78fb      	ldrb	r3, [r7, #3]
 801c382:	f003 0302 	and.w	r3, r3, #2
 801c386:	2b00      	cmp	r3, #0
 801c388:	d104      	bne.n	801c394 <tcp_enqueue_flags+0x148>
 801c38a:	78fb      	ldrb	r3, [r7, #3]
 801c38c:	f003 0301 	and.w	r3, r3, #1
 801c390:	2b00      	cmp	r3, #0
 801c392:	d004      	beq.n	801c39e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801c394:	687b      	ldr	r3, [r7, #4]
 801c396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c398:	1c5a      	adds	r2, r3, #1
 801c39a:	687b      	ldr	r3, [r7, #4]
 801c39c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801c39e:	78fb      	ldrb	r3, [r7, #3]
 801c3a0:	f003 0301 	and.w	r3, r3, #1
 801c3a4:	2b00      	cmp	r3, #0
 801c3a6:	d006      	beq.n	801c3b6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801c3a8:	687b      	ldr	r3, [r7, #4]
 801c3aa:	8b5b      	ldrh	r3, [r3, #26]
 801c3ac:	f043 0320 	orr.w	r3, r3, #32
 801c3b0:	b29a      	uxth	r2, r3
 801c3b2:	687b      	ldr	r3, [r7, #4]
 801c3b4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801c3b6:	68fb      	ldr	r3, [r7, #12]
 801c3b8:	685b      	ldr	r3, [r3, #4]
 801c3ba:	4618      	mov	r0, r3
 801c3bc:	f7fd fa1a 	bl	80197f4 <pbuf_clen>
 801c3c0:	4603      	mov	r3, r0
 801c3c2:	461a      	mov	r2, r3
 801c3c4:	687b      	ldr	r3, [r7, #4]
 801c3c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c3ca:	4413      	add	r3, r2
 801c3cc:	b29a      	uxth	r2, r3
 801c3ce:	687b      	ldr	r3, [r7, #4]
 801c3d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801c3d4:	687b      	ldr	r3, [r7, #4]
 801c3d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c3da:	2b00      	cmp	r3, #0
 801c3dc:	d00e      	beq.n	801c3fc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801c3de:	687b      	ldr	r3, [r7, #4]
 801c3e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c3e2:	2b00      	cmp	r3, #0
 801c3e4:	d10a      	bne.n	801c3fc <tcp_enqueue_flags+0x1b0>
 801c3e6:	687b      	ldr	r3, [r7, #4]
 801c3e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c3ea:	2b00      	cmp	r3, #0
 801c3ec:	d106      	bne.n	801c3fc <tcp_enqueue_flags+0x1b0>
 801c3ee:	4b06      	ldr	r3, [pc, #24]	; (801c408 <tcp_enqueue_flags+0x1bc>)
 801c3f0:	f240 4265 	movw	r2, #1125	; 0x465
 801c3f4:	490b      	ldr	r1, [pc, #44]	; (801c424 <tcp_enqueue_flags+0x1d8>)
 801c3f6:	4806      	ldr	r0, [pc, #24]	; (801c410 <tcp_enqueue_flags+0x1c4>)
 801c3f8:	f005 fda0 	bl	8021f3c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801c3fc:	2300      	movs	r3, #0
}
 801c3fe:	4618      	mov	r0, r3
 801c400:	3720      	adds	r7, #32
 801c402:	46bd      	mov	sp, r7
 801c404:	bd80      	pop	{r7, pc}
 801c406:	bf00      	nop
 801c408:	08025028 	.word	0x08025028
 801c40c:	0802544c 	.word	0x0802544c
 801c410:	0802507c 	.word	0x0802507c
 801c414:	080254a4 	.word	0x080254a4
 801c418:	080254c4 	.word	0x080254c4
 801c41c:	08025500 	.word	0x08025500
 801c420:	08025518 	.word	0x08025518
 801c424:	08025544 	.word	0x08025544

0801c428 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801c428:	b5b0      	push	{r4, r5, r7, lr}
 801c42a:	b08a      	sub	sp, #40	; 0x28
 801c42c:	af00      	add	r7, sp, #0
 801c42e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801c430:	687b      	ldr	r3, [r7, #4]
 801c432:	2b00      	cmp	r3, #0
 801c434:	d106      	bne.n	801c444 <tcp_output+0x1c>
 801c436:	4b8a      	ldr	r3, [pc, #552]	; (801c660 <tcp_output+0x238>)
 801c438:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801c43c:	4989      	ldr	r1, [pc, #548]	; (801c664 <tcp_output+0x23c>)
 801c43e:	488a      	ldr	r0, [pc, #552]	; (801c668 <tcp_output+0x240>)
 801c440:	f005 fd7c 	bl	8021f3c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801c444:	687b      	ldr	r3, [r7, #4]
 801c446:	7d1b      	ldrb	r3, [r3, #20]
 801c448:	2b01      	cmp	r3, #1
 801c44a:	d106      	bne.n	801c45a <tcp_output+0x32>
 801c44c:	4b84      	ldr	r3, [pc, #528]	; (801c660 <tcp_output+0x238>)
 801c44e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801c452:	4986      	ldr	r1, [pc, #536]	; (801c66c <tcp_output+0x244>)
 801c454:	4884      	ldr	r0, [pc, #528]	; (801c668 <tcp_output+0x240>)
 801c456:	f005 fd71 	bl	8021f3c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801c45a:	4b85      	ldr	r3, [pc, #532]	; (801c670 <tcp_output+0x248>)
 801c45c:	681b      	ldr	r3, [r3, #0]
 801c45e:	687a      	ldr	r2, [r7, #4]
 801c460:	429a      	cmp	r2, r3
 801c462:	d101      	bne.n	801c468 <tcp_output+0x40>
    return ERR_OK;
 801c464:	2300      	movs	r3, #0
 801c466:	e1ce      	b.n	801c806 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801c468:	687b      	ldr	r3, [r7, #4]
 801c46a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c46e:	687b      	ldr	r3, [r7, #4]
 801c470:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c474:	4293      	cmp	r3, r2
 801c476:	bf28      	it	cs
 801c478:	4613      	movcs	r3, r2
 801c47a:	b29b      	uxth	r3, r3
 801c47c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801c47e:	687b      	ldr	r3, [r7, #4]
 801c480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c482:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801c484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c486:	2b00      	cmp	r3, #0
 801c488:	d10b      	bne.n	801c4a2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801c48a:	687b      	ldr	r3, [r7, #4]
 801c48c:	8b5b      	ldrh	r3, [r3, #26]
 801c48e:	f003 0302 	and.w	r3, r3, #2
 801c492:	2b00      	cmp	r3, #0
 801c494:	f000 81aa 	beq.w	801c7ec <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801c498:	6878      	ldr	r0, [r7, #4]
 801c49a:	f000 fcdb 	bl	801ce54 <tcp_send_empty_ack>
 801c49e:	4603      	mov	r3, r0
 801c4a0:	e1b1      	b.n	801c806 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801c4a2:	6879      	ldr	r1, [r7, #4]
 801c4a4:	687b      	ldr	r3, [r7, #4]
 801c4a6:	3304      	adds	r3, #4
 801c4a8:	461a      	mov	r2, r3
 801c4aa:	6878      	ldr	r0, [r7, #4]
 801c4ac:	f7ff f824 	bl	801b4f8 <tcp_route>
 801c4b0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801c4b2:	697b      	ldr	r3, [r7, #20]
 801c4b4:	2b00      	cmp	r3, #0
 801c4b6:	d102      	bne.n	801c4be <tcp_output+0x96>
    return ERR_RTE;
 801c4b8:	f06f 0303 	mvn.w	r3, #3
 801c4bc:	e1a3      	b.n	801c806 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801c4be:	687b      	ldr	r3, [r7, #4]
 801c4c0:	2b00      	cmp	r3, #0
 801c4c2:	d003      	beq.n	801c4cc <tcp_output+0xa4>
 801c4c4:	687b      	ldr	r3, [r7, #4]
 801c4c6:	681b      	ldr	r3, [r3, #0]
 801c4c8:	2b00      	cmp	r3, #0
 801c4ca:	d111      	bne.n	801c4f0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801c4cc:	697b      	ldr	r3, [r7, #20]
 801c4ce:	2b00      	cmp	r3, #0
 801c4d0:	d002      	beq.n	801c4d8 <tcp_output+0xb0>
 801c4d2:	697b      	ldr	r3, [r7, #20]
 801c4d4:	3304      	adds	r3, #4
 801c4d6:	e000      	b.n	801c4da <tcp_output+0xb2>
 801c4d8:	2300      	movs	r3, #0
 801c4da:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801c4dc:	693b      	ldr	r3, [r7, #16]
 801c4de:	2b00      	cmp	r3, #0
 801c4e0:	d102      	bne.n	801c4e8 <tcp_output+0xc0>
      return ERR_RTE;
 801c4e2:	f06f 0303 	mvn.w	r3, #3
 801c4e6:	e18e      	b.n	801c806 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801c4e8:	693b      	ldr	r3, [r7, #16]
 801c4ea:	681a      	ldr	r2, [r3, #0]
 801c4ec:	687b      	ldr	r3, [r7, #4]
 801c4ee:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801c4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4f2:	68db      	ldr	r3, [r3, #12]
 801c4f4:	685b      	ldr	r3, [r3, #4]
 801c4f6:	4618      	mov	r0, r3
 801c4f8:	f7fc f97d 	bl	80187f6 <lwip_htonl>
 801c4fc:	4602      	mov	r2, r0
 801c4fe:	687b      	ldr	r3, [r7, #4]
 801c500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c502:	1ad3      	subs	r3, r2, r3
 801c504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c506:	8912      	ldrh	r2, [r2, #8]
 801c508:	4413      	add	r3, r2
 801c50a:	69ba      	ldr	r2, [r7, #24]
 801c50c:	429a      	cmp	r2, r3
 801c50e:	d227      	bcs.n	801c560 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801c510:	687b      	ldr	r3, [r7, #4]
 801c512:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c516:	461a      	mov	r2, r3
 801c518:	69bb      	ldr	r3, [r7, #24]
 801c51a:	4293      	cmp	r3, r2
 801c51c:	d114      	bne.n	801c548 <tcp_output+0x120>
 801c51e:	687b      	ldr	r3, [r7, #4]
 801c520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c522:	2b00      	cmp	r3, #0
 801c524:	d110      	bne.n	801c548 <tcp_output+0x120>
 801c526:	687b      	ldr	r3, [r7, #4]
 801c528:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801c52c:	2b00      	cmp	r3, #0
 801c52e:	d10b      	bne.n	801c548 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801c530:	687b      	ldr	r3, [r7, #4]
 801c532:	2200      	movs	r2, #0
 801c534:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801c538:	687b      	ldr	r3, [r7, #4]
 801c53a:	2201      	movs	r2, #1
 801c53c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801c540:	687b      	ldr	r3, [r7, #4]
 801c542:	2200      	movs	r2, #0
 801c544:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801c548:	687b      	ldr	r3, [r7, #4]
 801c54a:	8b5b      	ldrh	r3, [r3, #26]
 801c54c:	f003 0302 	and.w	r3, r3, #2
 801c550:	2b00      	cmp	r3, #0
 801c552:	f000 814d 	beq.w	801c7f0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801c556:	6878      	ldr	r0, [r7, #4]
 801c558:	f000 fc7c 	bl	801ce54 <tcp_send_empty_ack>
 801c55c:	4603      	mov	r3, r0
 801c55e:	e152      	b.n	801c806 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801c560:	687b      	ldr	r3, [r7, #4]
 801c562:	2200      	movs	r2, #0
 801c564:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801c568:	687b      	ldr	r3, [r7, #4]
 801c56a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c56c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801c56e:	6a3b      	ldr	r3, [r7, #32]
 801c570:	2b00      	cmp	r3, #0
 801c572:	f000 811c 	beq.w	801c7ae <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801c576:	e002      	b.n	801c57e <tcp_output+0x156>
 801c578:	6a3b      	ldr	r3, [r7, #32]
 801c57a:	681b      	ldr	r3, [r3, #0]
 801c57c:	623b      	str	r3, [r7, #32]
 801c57e:	6a3b      	ldr	r3, [r7, #32]
 801c580:	681b      	ldr	r3, [r3, #0]
 801c582:	2b00      	cmp	r3, #0
 801c584:	d1f8      	bne.n	801c578 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801c586:	e112      	b.n	801c7ae <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801c588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c58a:	68db      	ldr	r3, [r3, #12]
 801c58c:	899b      	ldrh	r3, [r3, #12]
 801c58e:	b29b      	uxth	r3, r3
 801c590:	4618      	mov	r0, r3
 801c592:	f7fc f91b 	bl	80187cc <lwip_htons>
 801c596:	4603      	mov	r3, r0
 801c598:	b2db      	uxtb	r3, r3
 801c59a:	f003 0304 	and.w	r3, r3, #4
 801c59e:	2b00      	cmp	r3, #0
 801c5a0:	d006      	beq.n	801c5b0 <tcp_output+0x188>
 801c5a2:	4b2f      	ldr	r3, [pc, #188]	; (801c660 <tcp_output+0x238>)
 801c5a4:	f240 5236 	movw	r2, #1334	; 0x536
 801c5a8:	4932      	ldr	r1, [pc, #200]	; (801c674 <tcp_output+0x24c>)
 801c5aa:	482f      	ldr	r0, [pc, #188]	; (801c668 <tcp_output+0x240>)
 801c5ac:	f005 fcc6 	bl	8021f3c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801c5b0:	687b      	ldr	r3, [r7, #4]
 801c5b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c5b4:	2b00      	cmp	r3, #0
 801c5b6:	d01f      	beq.n	801c5f8 <tcp_output+0x1d0>
 801c5b8:	687b      	ldr	r3, [r7, #4]
 801c5ba:	8b5b      	ldrh	r3, [r3, #26]
 801c5bc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801c5c0:	2b00      	cmp	r3, #0
 801c5c2:	d119      	bne.n	801c5f8 <tcp_output+0x1d0>
 801c5c4:	687b      	ldr	r3, [r7, #4]
 801c5c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c5c8:	2b00      	cmp	r3, #0
 801c5ca:	d00b      	beq.n	801c5e4 <tcp_output+0x1bc>
 801c5cc:	687b      	ldr	r3, [r7, #4]
 801c5ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c5d0:	681b      	ldr	r3, [r3, #0]
 801c5d2:	2b00      	cmp	r3, #0
 801c5d4:	d110      	bne.n	801c5f8 <tcp_output+0x1d0>
 801c5d6:	687b      	ldr	r3, [r7, #4]
 801c5d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c5da:	891a      	ldrh	r2, [r3, #8]
 801c5dc:	687b      	ldr	r3, [r7, #4]
 801c5de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c5e0:	429a      	cmp	r2, r3
 801c5e2:	d209      	bcs.n	801c5f8 <tcp_output+0x1d0>
 801c5e4:	687b      	ldr	r3, [r7, #4]
 801c5e6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801c5ea:	2b00      	cmp	r3, #0
 801c5ec:	d004      	beq.n	801c5f8 <tcp_output+0x1d0>
 801c5ee:	687b      	ldr	r3, [r7, #4]
 801c5f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c5f4:	2b08      	cmp	r3, #8
 801c5f6:	d901      	bls.n	801c5fc <tcp_output+0x1d4>
 801c5f8:	2301      	movs	r3, #1
 801c5fa:	e000      	b.n	801c5fe <tcp_output+0x1d6>
 801c5fc:	2300      	movs	r3, #0
 801c5fe:	2b00      	cmp	r3, #0
 801c600:	d106      	bne.n	801c610 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801c602:	687b      	ldr	r3, [r7, #4]
 801c604:	8b5b      	ldrh	r3, [r3, #26]
 801c606:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801c60a:	2b00      	cmp	r3, #0
 801c60c:	f000 80e4 	beq.w	801c7d8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801c610:	687b      	ldr	r3, [r7, #4]
 801c612:	7d1b      	ldrb	r3, [r3, #20]
 801c614:	2b02      	cmp	r3, #2
 801c616:	d00d      	beq.n	801c634 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801c618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c61a:	68db      	ldr	r3, [r3, #12]
 801c61c:	899b      	ldrh	r3, [r3, #12]
 801c61e:	b29c      	uxth	r4, r3
 801c620:	2010      	movs	r0, #16
 801c622:	f7fc f8d3 	bl	80187cc <lwip_htons>
 801c626:	4603      	mov	r3, r0
 801c628:	461a      	mov	r2, r3
 801c62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c62c:	68db      	ldr	r3, [r3, #12]
 801c62e:	4322      	orrs	r2, r4
 801c630:	b292      	uxth	r2, r2
 801c632:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801c634:	697a      	ldr	r2, [r7, #20]
 801c636:	6879      	ldr	r1, [r7, #4]
 801c638:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c63a:	f000 f909 	bl	801c850 <tcp_output_segment>
 801c63e:	4603      	mov	r3, r0
 801c640:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801c642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c646:	2b00      	cmp	r3, #0
 801c648:	d016      	beq.n	801c678 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c64a:	687b      	ldr	r3, [r7, #4]
 801c64c:	8b5b      	ldrh	r3, [r3, #26]
 801c64e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c652:	b29a      	uxth	r2, r3
 801c654:	687b      	ldr	r3, [r7, #4]
 801c656:	835a      	strh	r2, [r3, #26]
      return err;
 801c658:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c65c:	e0d3      	b.n	801c806 <tcp_output+0x3de>
 801c65e:	bf00      	nop
 801c660:	08025028 	.word	0x08025028
 801c664:	0802556c 	.word	0x0802556c
 801c668:	0802507c 	.word	0x0802507c
 801c66c:	08025584 	.word	0x08025584
 801c670:	2401a190 	.word	0x2401a190
 801c674:	080255ac 	.word	0x080255ac
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801c678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c67a:	681a      	ldr	r2, [r3, #0]
 801c67c:	687b      	ldr	r3, [r7, #4]
 801c67e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801c680:	687b      	ldr	r3, [r7, #4]
 801c682:	7d1b      	ldrb	r3, [r3, #20]
 801c684:	2b02      	cmp	r3, #2
 801c686:	d006      	beq.n	801c696 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c688:	687b      	ldr	r3, [r7, #4]
 801c68a:	8b5b      	ldrh	r3, [r3, #26]
 801c68c:	f023 0303 	bic.w	r3, r3, #3
 801c690:	b29a      	uxth	r2, r3
 801c692:	687b      	ldr	r3, [r7, #4]
 801c694:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801c696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c698:	68db      	ldr	r3, [r3, #12]
 801c69a:	685b      	ldr	r3, [r3, #4]
 801c69c:	4618      	mov	r0, r3
 801c69e:	f7fc f8aa 	bl	80187f6 <lwip_htonl>
 801c6a2:	4604      	mov	r4, r0
 801c6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6a6:	891b      	ldrh	r3, [r3, #8]
 801c6a8:	461d      	mov	r5, r3
 801c6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6ac:	68db      	ldr	r3, [r3, #12]
 801c6ae:	899b      	ldrh	r3, [r3, #12]
 801c6b0:	b29b      	uxth	r3, r3
 801c6b2:	4618      	mov	r0, r3
 801c6b4:	f7fc f88a 	bl	80187cc <lwip_htons>
 801c6b8:	4603      	mov	r3, r0
 801c6ba:	b2db      	uxtb	r3, r3
 801c6bc:	f003 0303 	and.w	r3, r3, #3
 801c6c0:	2b00      	cmp	r3, #0
 801c6c2:	d001      	beq.n	801c6c8 <tcp_output+0x2a0>
 801c6c4:	2301      	movs	r3, #1
 801c6c6:	e000      	b.n	801c6ca <tcp_output+0x2a2>
 801c6c8:	2300      	movs	r3, #0
 801c6ca:	442b      	add	r3, r5
 801c6cc:	4423      	add	r3, r4
 801c6ce:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801c6d0:	687b      	ldr	r3, [r7, #4]
 801c6d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c6d4:	68bb      	ldr	r3, [r7, #8]
 801c6d6:	1ad3      	subs	r3, r2, r3
 801c6d8:	2b00      	cmp	r3, #0
 801c6da:	da02      	bge.n	801c6e2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801c6dc:	687b      	ldr	r3, [r7, #4]
 801c6de:	68ba      	ldr	r2, [r7, #8]
 801c6e0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801c6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6e4:	891b      	ldrh	r3, [r3, #8]
 801c6e6:	461c      	mov	r4, r3
 801c6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6ea:	68db      	ldr	r3, [r3, #12]
 801c6ec:	899b      	ldrh	r3, [r3, #12]
 801c6ee:	b29b      	uxth	r3, r3
 801c6f0:	4618      	mov	r0, r3
 801c6f2:	f7fc f86b 	bl	80187cc <lwip_htons>
 801c6f6:	4603      	mov	r3, r0
 801c6f8:	b2db      	uxtb	r3, r3
 801c6fa:	f003 0303 	and.w	r3, r3, #3
 801c6fe:	2b00      	cmp	r3, #0
 801c700:	d001      	beq.n	801c706 <tcp_output+0x2de>
 801c702:	2301      	movs	r3, #1
 801c704:	e000      	b.n	801c708 <tcp_output+0x2e0>
 801c706:	2300      	movs	r3, #0
 801c708:	4423      	add	r3, r4
 801c70a:	2b00      	cmp	r3, #0
 801c70c:	d049      	beq.n	801c7a2 <tcp_output+0x37a>
      seg->next = NULL;
 801c70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c710:	2200      	movs	r2, #0
 801c712:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801c714:	687b      	ldr	r3, [r7, #4]
 801c716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c718:	2b00      	cmp	r3, #0
 801c71a:	d105      	bne.n	801c728 <tcp_output+0x300>
        pcb->unacked = seg;
 801c71c:	687b      	ldr	r3, [r7, #4]
 801c71e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c720:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801c722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c724:	623b      	str	r3, [r7, #32]
 801c726:	e03f      	b.n	801c7a8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801c728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c72a:	68db      	ldr	r3, [r3, #12]
 801c72c:	685b      	ldr	r3, [r3, #4]
 801c72e:	4618      	mov	r0, r3
 801c730:	f7fc f861 	bl	80187f6 <lwip_htonl>
 801c734:	4604      	mov	r4, r0
 801c736:	6a3b      	ldr	r3, [r7, #32]
 801c738:	68db      	ldr	r3, [r3, #12]
 801c73a:	685b      	ldr	r3, [r3, #4]
 801c73c:	4618      	mov	r0, r3
 801c73e:	f7fc f85a 	bl	80187f6 <lwip_htonl>
 801c742:	4603      	mov	r3, r0
 801c744:	1ae3      	subs	r3, r4, r3
 801c746:	2b00      	cmp	r3, #0
 801c748:	da24      	bge.n	801c794 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801c74a:	687b      	ldr	r3, [r7, #4]
 801c74c:	3370      	adds	r3, #112	; 0x70
 801c74e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801c750:	e002      	b.n	801c758 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801c752:	69fb      	ldr	r3, [r7, #28]
 801c754:	681b      	ldr	r3, [r3, #0]
 801c756:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801c758:	69fb      	ldr	r3, [r7, #28]
 801c75a:	681b      	ldr	r3, [r3, #0]
 801c75c:	2b00      	cmp	r3, #0
 801c75e:	d011      	beq.n	801c784 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801c760:	69fb      	ldr	r3, [r7, #28]
 801c762:	681b      	ldr	r3, [r3, #0]
 801c764:	68db      	ldr	r3, [r3, #12]
 801c766:	685b      	ldr	r3, [r3, #4]
 801c768:	4618      	mov	r0, r3
 801c76a:	f7fc f844 	bl	80187f6 <lwip_htonl>
 801c76e:	4604      	mov	r4, r0
 801c770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c772:	68db      	ldr	r3, [r3, #12]
 801c774:	685b      	ldr	r3, [r3, #4]
 801c776:	4618      	mov	r0, r3
 801c778:	f7fc f83d 	bl	80187f6 <lwip_htonl>
 801c77c:	4603      	mov	r3, r0
 801c77e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801c780:	2b00      	cmp	r3, #0
 801c782:	dbe6      	blt.n	801c752 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801c784:	69fb      	ldr	r3, [r7, #28]
 801c786:	681a      	ldr	r2, [r3, #0]
 801c788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c78a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801c78c:	69fb      	ldr	r3, [r7, #28]
 801c78e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c790:	601a      	str	r2, [r3, #0]
 801c792:	e009      	b.n	801c7a8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801c794:	6a3b      	ldr	r3, [r7, #32]
 801c796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c798:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801c79a:	6a3b      	ldr	r3, [r7, #32]
 801c79c:	681b      	ldr	r3, [r3, #0]
 801c79e:	623b      	str	r3, [r7, #32]
 801c7a0:	e002      	b.n	801c7a8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801c7a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c7a4:	f7fe faf1 	bl	801ad8a <tcp_seg_free>
    }
    seg = pcb->unsent;
 801c7a8:	687b      	ldr	r3, [r7, #4]
 801c7aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c7ac:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801c7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7b0:	2b00      	cmp	r3, #0
 801c7b2:	d012      	beq.n	801c7da <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801c7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7b6:	68db      	ldr	r3, [r3, #12]
 801c7b8:	685b      	ldr	r3, [r3, #4]
 801c7ba:	4618      	mov	r0, r3
 801c7bc:	f7fc f81b 	bl	80187f6 <lwip_htonl>
 801c7c0:	4602      	mov	r2, r0
 801c7c2:	687b      	ldr	r3, [r7, #4]
 801c7c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c7c6:	1ad3      	subs	r3, r2, r3
 801c7c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c7ca:	8912      	ldrh	r2, [r2, #8]
 801c7cc:	4413      	add	r3, r2
  while (seg != NULL &&
 801c7ce:	69ba      	ldr	r2, [r7, #24]
 801c7d0:	429a      	cmp	r2, r3
 801c7d2:	f4bf aed9 	bcs.w	801c588 <tcp_output+0x160>
 801c7d6:	e000      	b.n	801c7da <tcp_output+0x3b2>
      break;
 801c7d8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801c7da:	687b      	ldr	r3, [r7, #4]
 801c7dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c7de:	2b00      	cmp	r3, #0
 801c7e0:	d108      	bne.n	801c7f4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801c7e2:	687b      	ldr	r3, [r7, #4]
 801c7e4:	2200      	movs	r2, #0
 801c7e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801c7ea:	e004      	b.n	801c7f6 <tcp_output+0x3ce>
    goto output_done;
 801c7ec:	bf00      	nop
 801c7ee:	e002      	b.n	801c7f6 <tcp_output+0x3ce>
    goto output_done;
 801c7f0:	bf00      	nop
 801c7f2:	e000      	b.n	801c7f6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801c7f4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801c7f6:	687b      	ldr	r3, [r7, #4]
 801c7f8:	8b5b      	ldrh	r3, [r3, #26]
 801c7fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801c7fe:	b29a      	uxth	r2, r3
 801c800:	687b      	ldr	r3, [r7, #4]
 801c802:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801c804:	2300      	movs	r3, #0
}
 801c806:	4618      	mov	r0, r3
 801c808:	3728      	adds	r7, #40	; 0x28
 801c80a:	46bd      	mov	sp, r7
 801c80c:	bdb0      	pop	{r4, r5, r7, pc}
 801c80e:	bf00      	nop

0801c810 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801c810:	b580      	push	{r7, lr}
 801c812:	b082      	sub	sp, #8
 801c814:	af00      	add	r7, sp, #0
 801c816:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801c818:	687b      	ldr	r3, [r7, #4]
 801c81a:	2b00      	cmp	r3, #0
 801c81c:	d106      	bne.n	801c82c <tcp_output_segment_busy+0x1c>
 801c81e:	4b09      	ldr	r3, [pc, #36]	; (801c844 <tcp_output_segment_busy+0x34>)
 801c820:	f240 529a 	movw	r2, #1434	; 0x59a
 801c824:	4908      	ldr	r1, [pc, #32]	; (801c848 <tcp_output_segment_busy+0x38>)
 801c826:	4809      	ldr	r0, [pc, #36]	; (801c84c <tcp_output_segment_busy+0x3c>)
 801c828:	f005 fb88 	bl	8021f3c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801c82c:	687b      	ldr	r3, [r7, #4]
 801c82e:	685b      	ldr	r3, [r3, #4]
 801c830:	7b9b      	ldrb	r3, [r3, #14]
 801c832:	2b01      	cmp	r3, #1
 801c834:	d001      	beq.n	801c83a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801c836:	2301      	movs	r3, #1
 801c838:	e000      	b.n	801c83c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801c83a:	2300      	movs	r3, #0
}
 801c83c:	4618      	mov	r0, r3
 801c83e:	3708      	adds	r7, #8
 801c840:	46bd      	mov	sp, r7
 801c842:	bd80      	pop	{r7, pc}
 801c844:	08025028 	.word	0x08025028
 801c848:	080255c4 	.word	0x080255c4
 801c84c:	0802507c 	.word	0x0802507c

0801c850 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801c850:	b5b0      	push	{r4, r5, r7, lr}
 801c852:	b08c      	sub	sp, #48	; 0x30
 801c854:	af04      	add	r7, sp, #16
 801c856:	60f8      	str	r0, [r7, #12]
 801c858:	60b9      	str	r1, [r7, #8]
 801c85a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801c85c:	68fb      	ldr	r3, [r7, #12]
 801c85e:	2b00      	cmp	r3, #0
 801c860:	d106      	bne.n	801c870 <tcp_output_segment+0x20>
 801c862:	4b63      	ldr	r3, [pc, #396]	; (801c9f0 <tcp_output_segment+0x1a0>)
 801c864:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801c868:	4962      	ldr	r1, [pc, #392]	; (801c9f4 <tcp_output_segment+0x1a4>)
 801c86a:	4863      	ldr	r0, [pc, #396]	; (801c9f8 <tcp_output_segment+0x1a8>)
 801c86c:	f005 fb66 	bl	8021f3c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801c870:	68bb      	ldr	r3, [r7, #8]
 801c872:	2b00      	cmp	r3, #0
 801c874:	d106      	bne.n	801c884 <tcp_output_segment+0x34>
 801c876:	4b5e      	ldr	r3, [pc, #376]	; (801c9f0 <tcp_output_segment+0x1a0>)
 801c878:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801c87c:	495f      	ldr	r1, [pc, #380]	; (801c9fc <tcp_output_segment+0x1ac>)
 801c87e:	485e      	ldr	r0, [pc, #376]	; (801c9f8 <tcp_output_segment+0x1a8>)
 801c880:	f005 fb5c 	bl	8021f3c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801c884:	687b      	ldr	r3, [r7, #4]
 801c886:	2b00      	cmp	r3, #0
 801c888:	d106      	bne.n	801c898 <tcp_output_segment+0x48>
 801c88a:	4b59      	ldr	r3, [pc, #356]	; (801c9f0 <tcp_output_segment+0x1a0>)
 801c88c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801c890:	495b      	ldr	r1, [pc, #364]	; (801ca00 <tcp_output_segment+0x1b0>)
 801c892:	4859      	ldr	r0, [pc, #356]	; (801c9f8 <tcp_output_segment+0x1a8>)
 801c894:	f005 fb52 	bl	8021f3c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801c898:	68f8      	ldr	r0, [r7, #12]
 801c89a:	f7ff ffb9 	bl	801c810 <tcp_output_segment_busy>
 801c89e:	4603      	mov	r3, r0
 801c8a0:	2b00      	cmp	r3, #0
 801c8a2:	d001      	beq.n	801c8a8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801c8a4:	2300      	movs	r3, #0
 801c8a6:	e09f      	b.n	801c9e8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801c8a8:	68bb      	ldr	r3, [r7, #8]
 801c8aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c8ac:	68fb      	ldr	r3, [r7, #12]
 801c8ae:	68dc      	ldr	r4, [r3, #12]
 801c8b0:	4610      	mov	r0, r2
 801c8b2:	f7fb ffa0 	bl	80187f6 <lwip_htonl>
 801c8b6:	4603      	mov	r3, r0
 801c8b8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801c8ba:	68bb      	ldr	r3, [r7, #8]
 801c8bc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801c8be:	68fb      	ldr	r3, [r7, #12]
 801c8c0:	68dc      	ldr	r4, [r3, #12]
 801c8c2:	4610      	mov	r0, r2
 801c8c4:	f7fb ff82 	bl	80187cc <lwip_htons>
 801c8c8:	4603      	mov	r3, r0
 801c8ca:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801c8cc:	68bb      	ldr	r3, [r7, #8]
 801c8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c8d0:	68ba      	ldr	r2, [r7, #8]
 801c8d2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801c8d4:	441a      	add	r2, r3
 801c8d6:	68bb      	ldr	r3, [r7, #8]
 801c8d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801c8da:	68fb      	ldr	r3, [r7, #12]
 801c8dc:	68db      	ldr	r3, [r3, #12]
 801c8de:	3314      	adds	r3, #20
 801c8e0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801c8e2:	68fb      	ldr	r3, [r7, #12]
 801c8e4:	7a9b      	ldrb	r3, [r3, #10]
 801c8e6:	f003 0301 	and.w	r3, r3, #1
 801c8ea:	2b00      	cmp	r3, #0
 801c8ec:	d015      	beq.n	801c91a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801c8ee:	68bb      	ldr	r3, [r7, #8]
 801c8f0:	3304      	adds	r3, #4
 801c8f2:	461a      	mov	r2, r3
 801c8f4:	6879      	ldr	r1, [r7, #4]
 801c8f6:	f44f 7006 	mov.w	r0, #536	; 0x218
 801c8fa:	f7fe fd9f 	bl	801b43c <tcp_eff_send_mss_netif>
 801c8fe:	4603      	mov	r3, r0
 801c900:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801c902:	8b7b      	ldrh	r3, [r7, #26]
 801c904:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801c908:	4618      	mov	r0, r3
 801c90a:	f7fb ff74 	bl	80187f6 <lwip_htonl>
 801c90e:	4602      	mov	r2, r0
 801c910:	69fb      	ldr	r3, [r7, #28]
 801c912:	601a      	str	r2, [r3, #0]
    opts += 1;
 801c914:	69fb      	ldr	r3, [r7, #28]
 801c916:	3304      	adds	r3, #4
 801c918:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801c91a:	68bb      	ldr	r3, [r7, #8]
 801c91c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801c920:	2b00      	cmp	r3, #0
 801c922:	da02      	bge.n	801c92a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801c924:	68bb      	ldr	r3, [r7, #8]
 801c926:	2200      	movs	r2, #0
 801c928:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801c92a:	68bb      	ldr	r3, [r7, #8]
 801c92c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c92e:	2b00      	cmp	r3, #0
 801c930:	d10c      	bne.n	801c94c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801c932:	4b34      	ldr	r3, [pc, #208]	; (801ca04 <tcp_output_segment+0x1b4>)
 801c934:	681a      	ldr	r2, [r3, #0]
 801c936:	68bb      	ldr	r3, [r7, #8]
 801c938:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801c93a:	68fb      	ldr	r3, [r7, #12]
 801c93c:	68db      	ldr	r3, [r3, #12]
 801c93e:	685b      	ldr	r3, [r3, #4]
 801c940:	4618      	mov	r0, r3
 801c942:	f7fb ff58 	bl	80187f6 <lwip_htonl>
 801c946:	4602      	mov	r2, r0
 801c948:	68bb      	ldr	r3, [r7, #8]
 801c94a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801c94c:	68fb      	ldr	r3, [r7, #12]
 801c94e:	68da      	ldr	r2, [r3, #12]
 801c950:	68fb      	ldr	r3, [r7, #12]
 801c952:	685b      	ldr	r3, [r3, #4]
 801c954:	685b      	ldr	r3, [r3, #4]
 801c956:	1ad3      	subs	r3, r2, r3
 801c958:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801c95a:	68fb      	ldr	r3, [r7, #12]
 801c95c:	685b      	ldr	r3, [r3, #4]
 801c95e:	8959      	ldrh	r1, [r3, #10]
 801c960:	68fb      	ldr	r3, [r7, #12]
 801c962:	685b      	ldr	r3, [r3, #4]
 801c964:	8b3a      	ldrh	r2, [r7, #24]
 801c966:	1a8a      	subs	r2, r1, r2
 801c968:	b292      	uxth	r2, r2
 801c96a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801c96c:	68fb      	ldr	r3, [r7, #12]
 801c96e:	685b      	ldr	r3, [r3, #4]
 801c970:	8919      	ldrh	r1, [r3, #8]
 801c972:	68fb      	ldr	r3, [r7, #12]
 801c974:	685b      	ldr	r3, [r3, #4]
 801c976:	8b3a      	ldrh	r2, [r7, #24]
 801c978:	1a8a      	subs	r2, r1, r2
 801c97a:	b292      	uxth	r2, r2
 801c97c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801c97e:	68fb      	ldr	r3, [r7, #12]
 801c980:	685b      	ldr	r3, [r3, #4]
 801c982:	68fa      	ldr	r2, [r7, #12]
 801c984:	68d2      	ldr	r2, [r2, #12]
 801c986:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801c988:	68fb      	ldr	r3, [r7, #12]
 801c98a:	68db      	ldr	r3, [r3, #12]
 801c98c:	2200      	movs	r2, #0
 801c98e:	741a      	strb	r2, [r3, #16]
 801c990:	2200      	movs	r2, #0
 801c992:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801c994:	68fb      	ldr	r3, [r7, #12]
 801c996:	68db      	ldr	r3, [r3, #12]
 801c998:	f103 0214 	add.w	r2, r3, #20
 801c99c:	68fb      	ldr	r3, [r7, #12]
 801c99e:	7a9b      	ldrb	r3, [r3, #10]
 801c9a0:	009b      	lsls	r3, r3, #2
 801c9a2:	f003 0304 	and.w	r3, r3, #4
 801c9a6:	4413      	add	r3, r2
 801c9a8:	69fa      	ldr	r2, [r7, #28]
 801c9aa:	429a      	cmp	r2, r3
 801c9ac:	d006      	beq.n	801c9bc <tcp_output_segment+0x16c>
 801c9ae:	4b10      	ldr	r3, [pc, #64]	; (801c9f0 <tcp_output_segment+0x1a0>)
 801c9b0:	f240 621c 	movw	r2, #1564	; 0x61c
 801c9b4:	4914      	ldr	r1, [pc, #80]	; (801ca08 <tcp_output_segment+0x1b8>)
 801c9b6:	4810      	ldr	r0, [pc, #64]	; (801c9f8 <tcp_output_segment+0x1a8>)
 801c9b8:	f005 fac0 	bl	8021f3c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801c9bc:	68fb      	ldr	r3, [r7, #12]
 801c9be:	6858      	ldr	r0, [r3, #4]
 801c9c0:	68b9      	ldr	r1, [r7, #8]
 801c9c2:	68bb      	ldr	r3, [r7, #8]
 801c9c4:	1d1c      	adds	r4, r3, #4
 801c9c6:	68bb      	ldr	r3, [r7, #8]
 801c9c8:	7add      	ldrb	r5, [r3, #11]
 801c9ca:	68bb      	ldr	r3, [r7, #8]
 801c9cc:	7a9b      	ldrb	r3, [r3, #10]
 801c9ce:	687a      	ldr	r2, [r7, #4]
 801c9d0:	9202      	str	r2, [sp, #8]
 801c9d2:	2206      	movs	r2, #6
 801c9d4:	9201      	str	r2, [sp, #4]
 801c9d6:	9300      	str	r3, [sp, #0]
 801c9d8:	462b      	mov	r3, r5
 801c9da:	4622      	mov	r2, r4
 801c9dc:	f000 fcce 	bl	801d37c <ip4_output_if>
 801c9e0:	4603      	mov	r3, r0
 801c9e2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801c9e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801c9e8:	4618      	mov	r0, r3
 801c9ea:	3720      	adds	r7, #32
 801c9ec:	46bd      	mov	sp, r7
 801c9ee:	bdb0      	pop	{r4, r5, r7, pc}
 801c9f0:	08025028 	.word	0x08025028
 801c9f4:	080255ec 	.word	0x080255ec
 801c9f8:	0802507c 	.word	0x0802507c
 801c9fc:	0802560c 	.word	0x0802560c
 801ca00:	0802562c 	.word	0x0802562c
 801ca04:	2401a17c 	.word	0x2401a17c
 801ca08:	08025650 	.word	0x08025650

0801ca0c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801ca0c:	b5b0      	push	{r4, r5, r7, lr}
 801ca0e:	b084      	sub	sp, #16
 801ca10:	af00      	add	r7, sp, #0
 801ca12:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801ca14:	687b      	ldr	r3, [r7, #4]
 801ca16:	2b00      	cmp	r3, #0
 801ca18:	d106      	bne.n	801ca28 <tcp_rexmit_rto_prepare+0x1c>
 801ca1a:	4b31      	ldr	r3, [pc, #196]	; (801cae0 <tcp_rexmit_rto_prepare+0xd4>)
 801ca1c:	f240 6263 	movw	r2, #1635	; 0x663
 801ca20:	4930      	ldr	r1, [pc, #192]	; (801cae4 <tcp_rexmit_rto_prepare+0xd8>)
 801ca22:	4831      	ldr	r0, [pc, #196]	; (801cae8 <tcp_rexmit_rto_prepare+0xdc>)
 801ca24:	f005 fa8a 	bl	8021f3c <iprintf>

  if (pcb->unacked == NULL) {
 801ca28:	687b      	ldr	r3, [r7, #4]
 801ca2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ca2c:	2b00      	cmp	r3, #0
 801ca2e:	d102      	bne.n	801ca36 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801ca30:	f06f 0305 	mvn.w	r3, #5
 801ca34:	e050      	b.n	801cad8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801ca36:	687b      	ldr	r3, [r7, #4]
 801ca38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ca3a:	60fb      	str	r3, [r7, #12]
 801ca3c:	e00b      	b.n	801ca56 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801ca3e:	68f8      	ldr	r0, [r7, #12]
 801ca40:	f7ff fee6 	bl	801c810 <tcp_output_segment_busy>
 801ca44:	4603      	mov	r3, r0
 801ca46:	2b00      	cmp	r3, #0
 801ca48:	d002      	beq.n	801ca50 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801ca4a:	f06f 0305 	mvn.w	r3, #5
 801ca4e:	e043      	b.n	801cad8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801ca50:	68fb      	ldr	r3, [r7, #12]
 801ca52:	681b      	ldr	r3, [r3, #0]
 801ca54:	60fb      	str	r3, [r7, #12]
 801ca56:	68fb      	ldr	r3, [r7, #12]
 801ca58:	681b      	ldr	r3, [r3, #0]
 801ca5a:	2b00      	cmp	r3, #0
 801ca5c:	d1ef      	bne.n	801ca3e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801ca5e:	68f8      	ldr	r0, [r7, #12]
 801ca60:	f7ff fed6 	bl	801c810 <tcp_output_segment_busy>
 801ca64:	4603      	mov	r3, r0
 801ca66:	2b00      	cmp	r3, #0
 801ca68:	d002      	beq.n	801ca70 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801ca6a:	f06f 0305 	mvn.w	r3, #5
 801ca6e:	e033      	b.n	801cad8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801ca70:	687b      	ldr	r3, [r7, #4]
 801ca72:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801ca74:	68fb      	ldr	r3, [r7, #12]
 801ca76:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801ca78:	687b      	ldr	r3, [r7, #4]
 801ca7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801ca7c:	687b      	ldr	r3, [r7, #4]
 801ca7e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801ca80:	687b      	ldr	r3, [r7, #4]
 801ca82:	2200      	movs	r2, #0
 801ca84:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801ca86:	687b      	ldr	r3, [r7, #4]
 801ca88:	8b5b      	ldrh	r3, [r3, #26]
 801ca8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801ca8e:	b29a      	uxth	r2, r3
 801ca90:	687b      	ldr	r3, [r7, #4]
 801ca92:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ca94:	68fb      	ldr	r3, [r7, #12]
 801ca96:	68db      	ldr	r3, [r3, #12]
 801ca98:	685b      	ldr	r3, [r3, #4]
 801ca9a:	4618      	mov	r0, r3
 801ca9c:	f7fb feab 	bl	80187f6 <lwip_htonl>
 801caa0:	4604      	mov	r4, r0
 801caa2:	68fb      	ldr	r3, [r7, #12]
 801caa4:	891b      	ldrh	r3, [r3, #8]
 801caa6:	461d      	mov	r5, r3
 801caa8:	68fb      	ldr	r3, [r7, #12]
 801caaa:	68db      	ldr	r3, [r3, #12]
 801caac:	899b      	ldrh	r3, [r3, #12]
 801caae:	b29b      	uxth	r3, r3
 801cab0:	4618      	mov	r0, r3
 801cab2:	f7fb fe8b 	bl	80187cc <lwip_htons>
 801cab6:	4603      	mov	r3, r0
 801cab8:	b2db      	uxtb	r3, r3
 801caba:	f003 0303 	and.w	r3, r3, #3
 801cabe:	2b00      	cmp	r3, #0
 801cac0:	d001      	beq.n	801cac6 <tcp_rexmit_rto_prepare+0xba>
 801cac2:	2301      	movs	r3, #1
 801cac4:	e000      	b.n	801cac8 <tcp_rexmit_rto_prepare+0xbc>
 801cac6:	2300      	movs	r3, #0
 801cac8:	442b      	add	r3, r5
 801caca:	18e2      	adds	r2, r4, r3
 801cacc:	687b      	ldr	r3, [r7, #4]
 801cace:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801cad0:	687b      	ldr	r3, [r7, #4]
 801cad2:	2200      	movs	r2, #0
 801cad4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801cad6:	2300      	movs	r3, #0
}
 801cad8:	4618      	mov	r0, r3
 801cada:	3710      	adds	r7, #16
 801cadc:	46bd      	mov	sp, r7
 801cade:	bdb0      	pop	{r4, r5, r7, pc}
 801cae0:	08025028 	.word	0x08025028
 801cae4:	08025664 	.word	0x08025664
 801cae8:	0802507c 	.word	0x0802507c

0801caec <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801caec:	b580      	push	{r7, lr}
 801caee:	b082      	sub	sp, #8
 801caf0:	af00      	add	r7, sp, #0
 801caf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801caf4:	687b      	ldr	r3, [r7, #4]
 801caf6:	2b00      	cmp	r3, #0
 801caf8:	d106      	bne.n	801cb08 <tcp_rexmit_rto_commit+0x1c>
 801cafa:	4b0d      	ldr	r3, [pc, #52]	; (801cb30 <tcp_rexmit_rto_commit+0x44>)
 801cafc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801cb00:	490c      	ldr	r1, [pc, #48]	; (801cb34 <tcp_rexmit_rto_commit+0x48>)
 801cb02:	480d      	ldr	r0, [pc, #52]	; (801cb38 <tcp_rexmit_rto_commit+0x4c>)
 801cb04:	f005 fa1a 	bl	8021f3c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801cb08:	687b      	ldr	r3, [r7, #4]
 801cb0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801cb0e:	2bff      	cmp	r3, #255	; 0xff
 801cb10:	d007      	beq.n	801cb22 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801cb12:	687b      	ldr	r3, [r7, #4]
 801cb14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801cb18:	3301      	adds	r3, #1
 801cb1a:	b2da      	uxtb	r2, r3
 801cb1c:	687b      	ldr	r3, [r7, #4]
 801cb1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801cb22:	6878      	ldr	r0, [r7, #4]
 801cb24:	f7ff fc80 	bl	801c428 <tcp_output>
}
 801cb28:	bf00      	nop
 801cb2a:	3708      	adds	r7, #8
 801cb2c:	46bd      	mov	sp, r7
 801cb2e:	bd80      	pop	{r7, pc}
 801cb30:	08025028 	.word	0x08025028
 801cb34:	08025688 	.word	0x08025688
 801cb38:	0802507c 	.word	0x0802507c

0801cb3c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801cb3c:	b580      	push	{r7, lr}
 801cb3e:	b086      	sub	sp, #24
 801cb40:	af00      	add	r7, sp, #0
 801cb42:	60f8      	str	r0, [r7, #12]
 801cb44:	607b      	str	r3, [r7, #4]
 801cb46:	460b      	mov	r3, r1
 801cb48:	817b      	strh	r3, [r7, #10]
 801cb4a:	4613      	mov	r3, r2
 801cb4c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801cb4e:	897a      	ldrh	r2, [r7, #10]
 801cb50:	893b      	ldrh	r3, [r7, #8]
 801cb52:	4413      	add	r3, r2
 801cb54:	b29b      	uxth	r3, r3
 801cb56:	3314      	adds	r3, #20
 801cb58:	b29b      	uxth	r3, r3
 801cb5a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801cb5e:	4619      	mov	r1, r3
 801cb60:	2022      	movs	r0, #34	; 0x22
 801cb62:	f7fc fb5b 	bl	801921c <pbuf_alloc>
 801cb66:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801cb68:	697b      	ldr	r3, [r7, #20]
 801cb6a:	2b00      	cmp	r3, #0
 801cb6c:	d04d      	beq.n	801cc0a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801cb6e:	897b      	ldrh	r3, [r7, #10]
 801cb70:	3313      	adds	r3, #19
 801cb72:	697a      	ldr	r2, [r7, #20]
 801cb74:	8952      	ldrh	r2, [r2, #10]
 801cb76:	4293      	cmp	r3, r2
 801cb78:	db06      	blt.n	801cb88 <tcp_output_alloc_header_common+0x4c>
 801cb7a:	4b26      	ldr	r3, [pc, #152]	; (801cc14 <tcp_output_alloc_header_common+0xd8>)
 801cb7c:	f240 7223 	movw	r2, #1827	; 0x723
 801cb80:	4925      	ldr	r1, [pc, #148]	; (801cc18 <tcp_output_alloc_header_common+0xdc>)
 801cb82:	4826      	ldr	r0, [pc, #152]	; (801cc1c <tcp_output_alloc_header_common+0xe0>)
 801cb84:	f005 f9da 	bl	8021f3c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801cb88:	697b      	ldr	r3, [r7, #20]
 801cb8a:	685b      	ldr	r3, [r3, #4]
 801cb8c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801cb8e:	8c3b      	ldrh	r3, [r7, #32]
 801cb90:	4618      	mov	r0, r3
 801cb92:	f7fb fe1b 	bl	80187cc <lwip_htons>
 801cb96:	4603      	mov	r3, r0
 801cb98:	461a      	mov	r2, r3
 801cb9a:	693b      	ldr	r3, [r7, #16]
 801cb9c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801cb9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801cba0:	4618      	mov	r0, r3
 801cba2:	f7fb fe13 	bl	80187cc <lwip_htons>
 801cba6:	4603      	mov	r3, r0
 801cba8:	461a      	mov	r2, r3
 801cbaa:	693b      	ldr	r3, [r7, #16]
 801cbac:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801cbae:	693b      	ldr	r3, [r7, #16]
 801cbb0:	687a      	ldr	r2, [r7, #4]
 801cbb2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801cbb4:	68f8      	ldr	r0, [r7, #12]
 801cbb6:	f7fb fe1e 	bl	80187f6 <lwip_htonl>
 801cbba:	4602      	mov	r2, r0
 801cbbc:	693b      	ldr	r3, [r7, #16]
 801cbbe:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801cbc0:	897b      	ldrh	r3, [r7, #10]
 801cbc2:	089b      	lsrs	r3, r3, #2
 801cbc4:	b29b      	uxth	r3, r3
 801cbc6:	3305      	adds	r3, #5
 801cbc8:	b29b      	uxth	r3, r3
 801cbca:	031b      	lsls	r3, r3, #12
 801cbcc:	b29a      	uxth	r2, r3
 801cbce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801cbd2:	b29b      	uxth	r3, r3
 801cbd4:	4313      	orrs	r3, r2
 801cbd6:	b29b      	uxth	r3, r3
 801cbd8:	4618      	mov	r0, r3
 801cbda:	f7fb fdf7 	bl	80187cc <lwip_htons>
 801cbde:	4603      	mov	r3, r0
 801cbe0:	461a      	mov	r2, r3
 801cbe2:	693b      	ldr	r3, [r7, #16]
 801cbe4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801cbe6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801cbe8:	4618      	mov	r0, r3
 801cbea:	f7fb fdef 	bl	80187cc <lwip_htons>
 801cbee:	4603      	mov	r3, r0
 801cbf0:	461a      	mov	r2, r3
 801cbf2:	693b      	ldr	r3, [r7, #16]
 801cbf4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801cbf6:	693b      	ldr	r3, [r7, #16]
 801cbf8:	2200      	movs	r2, #0
 801cbfa:	741a      	strb	r2, [r3, #16]
 801cbfc:	2200      	movs	r2, #0
 801cbfe:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801cc00:	693b      	ldr	r3, [r7, #16]
 801cc02:	2200      	movs	r2, #0
 801cc04:	749a      	strb	r2, [r3, #18]
 801cc06:	2200      	movs	r2, #0
 801cc08:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801cc0a:	697b      	ldr	r3, [r7, #20]
}
 801cc0c:	4618      	mov	r0, r3
 801cc0e:	3718      	adds	r7, #24
 801cc10:	46bd      	mov	sp, r7
 801cc12:	bd80      	pop	{r7, pc}
 801cc14:	08025028 	.word	0x08025028
 801cc18:	08025700 	.word	0x08025700
 801cc1c:	0802507c 	.word	0x0802507c

0801cc20 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801cc20:	b5b0      	push	{r4, r5, r7, lr}
 801cc22:	b08a      	sub	sp, #40	; 0x28
 801cc24:	af04      	add	r7, sp, #16
 801cc26:	60f8      	str	r0, [r7, #12]
 801cc28:	607b      	str	r3, [r7, #4]
 801cc2a:	460b      	mov	r3, r1
 801cc2c:	817b      	strh	r3, [r7, #10]
 801cc2e:	4613      	mov	r3, r2
 801cc30:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801cc32:	68fb      	ldr	r3, [r7, #12]
 801cc34:	2b00      	cmp	r3, #0
 801cc36:	d106      	bne.n	801cc46 <tcp_output_alloc_header+0x26>
 801cc38:	4b15      	ldr	r3, [pc, #84]	; (801cc90 <tcp_output_alloc_header+0x70>)
 801cc3a:	f240 7242 	movw	r2, #1858	; 0x742
 801cc3e:	4915      	ldr	r1, [pc, #84]	; (801cc94 <tcp_output_alloc_header+0x74>)
 801cc40:	4815      	ldr	r0, [pc, #84]	; (801cc98 <tcp_output_alloc_header+0x78>)
 801cc42:	f005 f97b 	bl	8021f3c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801cc46:	68fb      	ldr	r3, [r7, #12]
 801cc48:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801cc4a:	68fb      	ldr	r3, [r7, #12]
 801cc4c:	8adb      	ldrh	r3, [r3, #22]
 801cc4e:	68fa      	ldr	r2, [r7, #12]
 801cc50:	8b12      	ldrh	r2, [r2, #24]
 801cc52:	68f9      	ldr	r1, [r7, #12]
 801cc54:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801cc56:	893d      	ldrh	r5, [r7, #8]
 801cc58:	897c      	ldrh	r4, [r7, #10]
 801cc5a:	9103      	str	r1, [sp, #12]
 801cc5c:	2110      	movs	r1, #16
 801cc5e:	9102      	str	r1, [sp, #8]
 801cc60:	9201      	str	r2, [sp, #4]
 801cc62:	9300      	str	r3, [sp, #0]
 801cc64:	687b      	ldr	r3, [r7, #4]
 801cc66:	462a      	mov	r2, r5
 801cc68:	4621      	mov	r1, r4
 801cc6a:	f7ff ff67 	bl	801cb3c <tcp_output_alloc_header_common>
 801cc6e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801cc70:	697b      	ldr	r3, [r7, #20]
 801cc72:	2b00      	cmp	r3, #0
 801cc74:	d006      	beq.n	801cc84 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801cc76:	68fb      	ldr	r3, [r7, #12]
 801cc78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cc7a:	68fa      	ldr	r2, [r7, #12]
 801cc7c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801cc7e:	441a      	add	r2, r3
 801cc80:	68fb      	ldr	r3, [r7, #12]
 801cc82:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801cc84:	697b      	ldr	r3, [r7, #20]
}
 801cc86:	4618      	mov	r0, r3
 801cc88:	3718      	adds	r7, #24
 801cc8a:	46bd      	mov	sp, r7
 801cc8c:	bdb0      	pop	{r4, r5, r7, pc}
 801cc8e:	bf00      	nop
 801cc90:	08025028 	.word	0x08025028
 801cc94:	08025730 	.word	0x08025730
 801cc98:	0802507c 	.word	0x0802507c

0801cc9c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801cc9c:	b580      	push	{r7, lr}
 801cc9e:	b088      	sub	sp, #32
 801cca0:	af00      	add	r7, sp, #0
 801cca2:	60f8      	str	r0, [r7, #12]
 801cca4:	60b9      	str	r1, [r7, #8]
 801cca6:	4611      	mov	r1, r2
 801cca8:	461a      	mov	r2, r3
 801ccaa:	460b      	mov	r3, r1
 801ccac:	71fb      	strb	r3, [r7, #7]
 801ccae:	4613      	mov	r3, r2
 801ccb0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801ccb2:	2300      	movs	r3, #0
 801ccb4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801ccb6:	68bb      	ldr	r3, [r7, #8]
 801ccb8:	2b00      	cmp	r3, #0
 801ccba:	d106      	bne.n	801ccca <tcp_output_fill_options+0x2e>
 801ccbc:	4b13      	ldr	r3, [pc, #76]	; (801cd0c <tcp_output_fill_options+0x70>)
 801ccbe:	f240 7256 	movw	r2, #1878	; 0x756
 801ccc2:	4913      	ldr	r1, [pc, #76]	; (801cd10 <tcp_output_fill_options+0x74>)
 801ccc4:	4813      	ldr	r0, [pc, #76]	; (801cd14 <tcp_output_fill_options+0x78>)
 801ccc6:	f005 f939 	bl	8021f3c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801ccca:	68bb      	ldr	r3, [r7, #8]
 801cccc:	685b      	ldr	r3, [r3, #4]
 801ccce:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801ccd0:	69bb      	ldr	r3, [r7, #24]
 801ccd2:	3314      	adds	r3, #20
 801ccd4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801ccd6:	69bb      	ldr	r3, [r7, #24]
 801ccd8:	f103 0214 	add.w	r2, r3, #20
 801ccdc:	8bfb      	ldrh	r3, [r7, #30]
 801ccde:	009b      	lsls	r3, r3, #2
 801cce0:	4619      	mov	r1, r3
 801cce2:	79fb      	ldrb	r3, [r7, #7]
 801cce4:	009b      	lsls	r3, r3, #2
 801cce6:	f003 0304 	and.w	r3, r3, #4
 801ccea:	440b      	add	r3, r1
 801ccec:	4413      	add	r3, r2
 801ccee:	697a      	ldr	r2, [r7, #20]
 801ccf0:	429a      	cmp	r2, r3
 801ccf2:	d006      	beq.n	801cd02 <tcp_output_fill_options+0x66>
 801ccf4:	4b05      	ldr	r3, [pc, #20]	; (801cd0c <tcp_output_fill_options+0x70>)
 801ccf6:	f240 7275 	movw	r2, #1909	; 0x775
 801ccfa:	4907      	ldr	r1, [pc, #28]	; (801cd18 <tcp_output_fill_options+0x7c>)
 801ccfc:	4805      	ldr	r0, [pc, #20]	; (801cd14 <tcp_output_fill_options+0x78>)
 801ccfe:	f005 f91d 	bl	8021f3c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801cd02:	bf00      	nop
 801cd04:	3720      	adds	r7, #32
 801cd06:	46bd      	mov	sp, r7
 801cd08:	bd80      	pop	{r7, pc}
 801cd0a:	bf00      	nop
 801cd0c:	08025028 	.word	0x08025028
 801cd10:	08025758 	.word	0x08025758
 801cd14:	0802507c 	.word	0x0802507c
 801cd18:	08025650 	.word	0x08025650

0801cd1c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801cd1c:	b580      	push	{r7, lr}
 801cd1e:	b08a      	sub	sp, #40	; 0x28
 801cd20:	af04      	add	r7, sp, #16
 801cd22:	60f8      	str	r0, [r7, #12]
 801cd24:	60b9      	str	r1, [r7, #8]
 801cd26:	607a      	str	r2, [r7, #4]
 801cd28:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801cd2a:	68bb      	ldr	r3, [r7, #8]
 801cd2c:	2b00      	cmp	r3, #0
 801cd2e:	d106      	bne.n	801cd3e <tcp_output_control_segment+0x22>
 801cd30:	4b1c      	ldr	r3, [pc, #112]	; (801cda4 <tcp_output_control_segment+0x88>)
 801cd32:	f240 7287 	movw	r2, #1927	; 0x787
 801cd36:	491c      	ldr	r1, [pc, #112]	; (801cda8 <tcp_output_control_segment+0x8c>)
 801cd38:	481c      	ldr	r0, [pc, #112]	; (801cdac <tcp_output_control_segment+0x90>)
 801cd3a:	f005 f8ff 	bl	8021f3c <iprintf>

  netif = tcp_route(pcb, src, dst);
 801cd3e:	683a      	ldr	r2, [r7, #0]
 801cd40:	6879      	ldr	r1, [r7, #4]
 801cd42:	68f8      	ldr	r0, [r7, #12]
 801cd44:	f7fe fbd8 	bl	801b4f8 <tcp_route>
 801cd48:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801cd4a:	693b      	ldr	r3, [r7, #16]
 801cd4c:	2b00      	cmp	r3, #0
 801cd4e:	d102      	bne.n	801cd56 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801cd50:	23fc      	movs	r3, #252	; 0xfc
 801cd52:	75fb      	strb	r3, [r7, #23]
 801cd54:	e01c      	b.n	801cd90 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801cd56:	68fb      	ldr	r3, [r7, #12]
 801cd58:	2b00      	cmp	r3, #0
 801cd5a:	d006      	beq.n	801cd6a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801cd5c:	68fb      	ldr	r3, [r7, #12]
 801cd5e:	7adb      	ldrb	r3, [r3, #11]
 801cd60:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801cd62:	68fb      	ldr	r3, [r7, #12]
 801cd64:	7a9b      	ldrb	r3, [r3, #10]
 801cd66:	757b      	strb	r3, [r7, #21]
 801cd68:	e003      	b.n	801cd72 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801cd6a:	23ff      	movs	r3, #255	; 0xff
 801cd6c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801cd6e:	2300      	movs	r3, #0
 801cd70:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801cd72:	7dba      	ldrb	r2, [r7, #22]
 801cd74:	693b      	ldr	r3, [r7, #16]
 801cd76:	9302      	str	r3, [sp, #8]
 801cd78:	2306      	movs	r3, #6
 801cd7a:	9301      	str	r3, [sp, #4]
 801cd7c:	7d7b      	ldrb	r3, [r7, #21]
 801cd7e:	9300      	str	r3, [sp, #0]
 801cd80:	4613      	mov	r3, r2
 801cd82:	683a      	ldr	r2, [r7, #0]
 801cd84:	6879      	ldr	r1, [r7, #4]
 801cd86:	68b8      	ldr	r0, [r7, #8]
 801cd88:	f000 faf8 	bl	801d37c <ip4_output_if>
 801cd8c:	4603      	mov	r3, r0
 801cd8e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801cd90:	68b8      	ldr	r0, [r7, #8]
 801cd92:	f7fc fca1 	bl	80196d8 <pbuf_free>
  return err;
 801cd96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801cd9a:	4618      	mov	r0, r3
 801cd9c:	3718      	adds	r7, #24
 801cd9e:	46bd      	mov	sp, r7
 801cda0:	bd80      	pop	{r7, pc}
 801cda2:	bf00      	nop
 801cda4:	08025028 	.word	0x08025028
 801cda8:	08025780 	.word	0x08025780
 801cdac:	0802507c 	.word	0x0802507c

0801cdb0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801cdb0:	b590      	push	{r4, r7, lr}
 801cdb2:	b08b      	sub	sp, #44	; 0x2c
 801cdb4:	af04      	add	r7, sp, #16
 801cdb6:	60f8      	str	r0, [r7, #12]
 801cdb8:	60b9      	str	r1, [r7, #8]
 801cdba:	607a      	str	r2, [r7, #4]
 801cdbc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801cdbe:	683b      	ldr	r3, [r7, #0]
 801cdc0:	2b00      	cmp	r3, #0
 801cdc2:	d106      	bne.n	801cdd2 <tcp_rst+0x22>
 801cdc4:	4b1f      	ldr	r3, [pc, #124]	; (801ce44 <tcp_rst+0x94>)
 801cdc6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801cdca:	491f      	ldr	r1, [pc, #124]	; (801ce48 <tcp_rst+0x98>)
 801cdcc:	481f      	ldr	r0, [pc, #124]	; (801ce4c <tcp_rst+0x9c>)
 801cdce:	f005 f8b5 	bl	8021f3c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801cdd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cdd4:	2b00      	cmp	r3, #0
 801cdd6:	d106      	bne.n	801cde6 <tcp_rst+0x36>
 801cdd8:	4b1a      	ldr	r3, [pc, #104]	; (801ce44 <tcp_rst+0x94>)
 801cdda:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801cdde:	491c      	ldr	r1, [pc, #112]	; (801ce50 <tcp_rst+0xa0>)
 801cde0:	481a      	ldr	r0, [pc, #104]	; (801ce4c <tcp_rst+0x9c>)
 801cde2:	f005 f8ab 	bl	8021f3c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801cde6:	2300      	movs	r3, #0
 801cde8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801cdea:	f246 0308 	movw	r3, #24584	; 0x6008
 801cdee:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801cdf0:	7dfb      	ldrb	r3, [r7, #23]
 801cdf2:	b29c      	uxth	r4, r3
 801cdf4:	68b8      	ldr	r0, [r7, #8]
 801cdf6:	f7fb fcfe 	bl	80187f6 <lwip_htonl>
 801cdfa:	4602      	mov	r2, r0
 801cdfc:	8abb      	ldrh	r3, [r7, #20]
 801cdfe:	9303      	str	r3, [sp, #12]
 801ce00:	2314      	movs	r3, #20
 801ce02:	9302      	str	r3, [sp, #8]
 801ce04:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801ce06:	9301      	str	r3, [sp, #4]
 801ce08:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801ce0a:	9300      	str	r3, [sp, #0]
 801ce0c:	4613      	mov	r3, r2
 801ce0e:	2200      	movs	r2, #0
 801ce10:	4621      	mov	r1, r4
 801ce12:	6878      	ldr	r0, [r7, #4]
 801ce14:	f7ff fe92 	bl	801cb3c <tcp_output_alloc_header_common>
 801ce18:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801ce1a:	693b      	ldr	r3, [r7, #16]
 801ce1c:	2b00      	cmp	r3, #0
 801ce1e:	d00c      	beq.n	801ce3a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801ce20:	7dfb      	ldrb	r3, [r7, #23]
 801ce22:	2200      	movs	r2, #0
 801ce24:	6939      	ldr	r1, [r7, #16]
 801ce26:	68f8      	ldr	r0, [r7, #12]
 801ce28:	f7ff ff38 	bl	801cc9c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801ce2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce2e:	683a      	ldr	r2, [r7, #0]
 801ce30:	6939      	ldr	r1, [r7, #16]
 801ce32:	68f8      	ldr	r0, [r7, #12]
 801ce34:	f7ff ff72 	bl	801cd1c <tcp_output_control_segment>
 801ce38:	e000      	b.n	801ce3c <tcp_rst+0x8c>
    return;
 801ce3a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801ce3c:	371c      	adds	r7, #28
 801ce3e:	46bd      	mov	sp, r7
 801ce40:	bd90      	pop	{r4, r7, pc}
 801ce42:	bf00      	nop
 801ce44:	08025028 	.word	0x08025028
 801ce48:	080257ac 	.word	0x080257ac
 801ce4c:	0802507c 	.word	0x0802507c
 801ce50:	080257c8 	.word	0x080257c8

0801ce54 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801ce54:	b590      	push	{r4, r7, lr}
 801ce56:	b087      	sub	sp, #28
 801ce58:	af00      	add	r7, sp, #0
 801ce5a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801ce5c:	2300      	movs	r3, #0
 801ce5e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801ce60:	2300      	movs	r3, #0
 801ce62:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801ce64:	687b      	ldr	r3, [r7, #4]
 801ce66:	2b00      	cmp	r3, #0
 801ce68:	d106      	bne.n	801ce78 <tcp_send_empty_ack+0x24>
 801ce6a:	4b28      	ldr	r3, [pc, #160]	; (801cf0c <tcp_send_empty_ack+0xb8>)
 801ce6c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801ce70:	4927      	ldr	r1, [pc, #156]	; (801cf10 <tcp_send_empty_ack+0xbc>)
 801ce72:	4828      	ldr	r0, [pc, #160]	; (801cf14 <tcp_send_empty_ack+0xc0>)
 801ce74:	f005 f862 	bl	8021f3c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801ce78:	7dfb      	ldrb	r3, [r7, #23]
 801ce7a:	009b      	lsls	r3, r3, #2
 801ce7c:	b2db      	uxtb	r3, r3
 801ce7e:	f003 0304 	and.w	r3, r3, #4
 801ce82:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801ce84:	7d7b      	ldrb	r3, [r7, #21]
 801ce86:	b29c      	uxth	r4, r3
 801ce88:	687b      	ldr	r3, [r7, #4]
 801ce8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ce8c:	4618      	mov	r0, r3
 801ce8e:	f7fb fcb2 	bl	80187f6 <lwip_htonl>
 801ce92:	4603      	mov	r3, r0
 801ce94:	2200      	movs	r2, #0
 801ce96:	4621      	mov	r1, r4
 801ce98:	6878      	ldr	r0, [r7, #4]
 801ce9a:	f7ff fec1 	bl	801cc20 <tcp_output_alloc_header>
 801ce9e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801cea0:	693b      	ldr	r3, [r7, #16]
 801cea2:	2b00      	cmp	r3, #0
 801cea4:	d109      	bne.n	801ceba <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801cea6:	687b      	ldr	r3, [r7, #4]
 801cea8:	8b5b      	ldrh	r3, [r3, #26]
 801ceaa:	f043 0303 	orr.w	r3, r3, #3
 801ceae:	b29a      	uxth	r2, r3
 801ceb0:	687b      	ldr	r3, [r7, #4]
 801ceb2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801ceb4:	f06f 0301 	mvn.w	r3, #1
 801ceb8:	e023      	b.n	801cf02 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801ceba:	7dbb      	ldrb	r3, [r7, #22]
 801cebc:	7dfa      	ldrb	r2, [r7, #23]
 801cebe:	6939      	ldr	r1, [r7, #16]
 801cec0:	6878      	ldr	r0, [r7, #4]
 801cec2:	f7ff feeb 	bl	801cc9c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801cec6:	687a      	ldr	r2, [r7, #4]
 801cec8:	687b      	ldr	r3, [r7, #4]
 801ceca:	3304      	adds	r3, #4
 801cecc:	6939      	ldr	r1, [r7, #16]
 801cece:	6878      	ldr	r0, [r7, #4]
 801ced0:	f7ff ff24 	bl	801cd1c <tcp_output_control_segment>
 801ced4:	4603      	mov	r3, r0
 801ced6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801ced8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cedc:	2b00      	cmp	r3, #0
 801cede:	d007      	beq.n	801cef0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801cee0:	687b      	ldr	r3, [r7, #4]
 801cee2:	8b5b      	ldrh	r3, [r3, #26]
 801cee4:	f043 0303 	orr.w	r3, r3, #3
 801cee8:	b29a      	uxth	r2, r3
 801ceea:	687b      	ldr	r3, [r7, #4]
 801ceec:	835a      	strh	r2, [r3, #26]
 801ceee:	e006      	b.n	801cefe <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801cef0:	687b      	ldr	r3, [r7, #4]
 801cef2:	8b5b      	ldrh	r3, [r3, #26]
 801cef4:	f023 0303 	bic.w	r3, r3, #3
 801cef8:	b29a      	uxth	r2, r3
 801cefa:	687b      	ldr	r3, [r7, #4]
 801cefc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801cefe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801cf02:	4618      	mov	r0, r3
 801cf04:	371c      	adds	r7, #28
 801cf06:	46bd      	mov	sp, r7
 801cf08:	bd90      	pop	{r4, r7, pc}
 801cf0a:	bf00      	nop
 801cf0c:	08025028 	.word	0x08025028
 801cf10:	080257e4 	.word	0x080257e4
 801cf14:	0802507c 	.word	0x0802507c

0801cf18 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801cf18:	b590      	push	{r4, r7, lr}
 801cf1a:	b087      	sub	sp, #28
 801cf1c:	af00      	add	r7, sp, #0
 801cf1e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801cf20:	2300      	movs	r3, #0
 801cf22:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801cf24:	687b      	ldr	r3, [r7, #4]
 801cf26:	2b00      	cmp	r3, #0
 801cf28:	d106      	bne.n	801cf38 <tcp_keepalive+0x20>
 801cf2a:	4b18      	ldr	r3, [pc, #96]	; (801cf8c <tcp_keepalive+0x74>)
 801cf2c:	f640 0224 	movw	r2, #2084	; 0x824
 801cf30:	4917      	ldr	r1, [pc, #92]	; (801cf90 <tcp_keepalive+0x78>)
 801cf32:	4818      	ldr	r0, [pc, #96]	; (801cf94 <tcp_keepalive+0x7c>)
 801cf34:	f005 f802 	bl	8021f3c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801cf38:	7dfb      	ldrb	r3, [r7, #23]
 801cf3a:	b29c      	uxth	r4, r3
 801cf3c:	687b      	ldr	r3, [r7, #4]
 801cf3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cf40:	3b01      	subs	r3, #1
 801cf42:	4618      	mov	r0, r3
 801cf44:	f7fb fc57 	bl	80187f6 <lwip_htonl>
 801cf48:	4603      	mov	r3, r0
 801cf4a:	2200      	movs	r2, #0
 801cf4c:	4621      	mov	r1, r4
 801cf4e:	6878      	ldr	r0, [r7, #4]
 801cf50:	f7ff fe66 	bl	801cc20 <tcp_output_alloc_header>
 801cf54:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801cf56:	693b      	ldr	r3, [r7, #16]
 801cf58:	2b00      	cmp	r3, #0
 801cf5a:	d102      	bne.n	801cf62 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801cf5c:	f04f 33ff 	mov.w	r3, #4294967295
 801cf60:	e010      	b.n	801cf84 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801cf62:	7dfb      	ldrb	r3, [r7, #23]
 801cf64:	2200      	movs	r2, #0
 801cf66:	6939      	ldr	r1, [r7, #16]
 801cf68:	6878      	ldr	r0, [r7, #4]
 801cf6a:	f7ff fe97 	bl	801cc9c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801cf6e:	687a      	ldr	r2, [r7, #4]
 801cf70:	687b      	ldr	r3, [r7, #4]
 801cf72:	3304      	adds	r3, #4
 801cf74:	6939      	ldr	r1, [r7, #16]
 801cf76:	6878      	ldr	r0, [r7, #4]
 801cf78:	f7ff fed0 	bl	801cd1c <tcp_output_control_segment>
 801cf7c:	4603      	mov	r3, r0
 801cf7e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801cf80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801cf84:	4618      	mov	r0, r3
 801cf86:	371c      	adds	r7, #28
 801cf88:	46bd      	mov	sp, r7
 801cf8a:	bd90      	pop	{r4, r7, pc}
 801cf8c:	08025028 	.word	0x08025028
 801cf90:	08025804 	.word	0x08025804
 801cf94:	0802507c 	.word	0x0802507c

0801cf98 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801cf98:	b590      	push	{r4, r7, lr}
 801cf9a:	b08b      	sub	sp, #44	; 0x2c
 801cf9c:	af00      	add	r7, sp, #0
 801cf9e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801cfa0:	2300      	movs	r3, #0
 801cfa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801cfa6:	687b      	ldr	r3, [r7, #4]
 801cfa8:	2b00      	cmp	r3, #0
 801cfaa:	d106      	bne.n	801cfba <tcp_zero_window_probe+0x22>
 801cfac:	4b4c      	ldr	r3, [pc, #304]	; (801d0e0 <tcp_zero_window_probe+0x148>)
 801cfae:	f640 024f 	movw	r2, #2127	; 0x84f
 801cfb2:	494c      	ldr	r1, [pc, #304]	; (801d0e4 <tcp_zero_window_probe+0x14c>)
 801cfb4:	484c      	ldr	r0, [pc, #304]	; (801d0e8 <tcp_zero_window_probe+0x150>)
 801cfb6:	f004 ffc1 	bl	8021f3c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801cfba:	687b      	ldr	r3, [r7, #4]
 801cfbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cfbe:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801cfc0:	6a3b      	ldr	r3, [r7, #32]
 801cfc2:	2b00      	cmp	r3, #0
 801cfc4:	d101      	bne.n	801cfca <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801cfc6:	2300      	movs	r3, #0
 801cfc8:	e086      	b.n	801d0d8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801cfca:	687b      	ldr	r3, [r7, #4]
 801cfcc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801cfd0:	2bff      	cmp	r3, #255	; 0xff
 801cfd2:	d007      	beq.n	801cfe4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801cfd4:	687b      	ldr	r3, [r7, #4]
 801cfd6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801cfda:	3301      	adds	r3, #1
 801cfdc:	b2da      	uxtb	r2, r3
 801cfde:	687b      	ldr	r3, [r7, #4]
 801cfe0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801cfe4:	6a3b      	ldr	r3, [r7, #32]
 801cfe6:	68db      	ldr	r3, [r3, #12]
 801cfe8:	899b      	ldrh	r3, [r3, #12]
 801cfea:	b29b      	uxth	r3, r3
 801cfec:	4618      	mov	r0, r3
 801cfee:	f7fb fbed 	bl	80187cc <lwip_htons>
 801cff2:	4603      	mov	r3, r0
 801cff4:	b2db      	uxtb	r3, r3
 801cff6:	f003 0301 	and.w	r3, r3, #1
 801cffa:	2b00      	cmp	r3, #0
 801cffc:	d005      	beq.n	801d00a <tcp_zero_window_probe+0x72>
 801cffe:	6a3b      	ldr	r3, [r7, #32]
 801d000:	891b      	ldrh	r3, [r3, #8]
 801d002:	2b00      	cmp	r3, #0
 801d004:	d101      	bne.n	801d00a <tcp_zero_window_probe+0x72>
 801d006:	2301      	movs	r3, #1
 801d008:	e000      	b.n	801d00c <tcp_zero_window_probe+0x74>
 801d00a:	2300      	movs	r3, #0
 801d00c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801d00e:	7ffb      	ldrb	r3, [r7, #31]
 801d010:	2b00      	cmp	r3, #0
 801d012:	bf0c      	ite	eq
 801d014:	2301      	moveq	r3, #1
 801d016:	2300      	movne	r3, #0
 801d018:	b2db      	uxtb	r3, r3
 801d01a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801d01c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d020:	b299      	uxth	r1, r3
 801d022:	6a3b      	ldr	r3, [r7, #32]
 801d024:	68db      	ldr	r3, [r3, #12]
 801d026:	685b      	ldr	r3, [r3, #4]
 801d028:	8bba      	ldrh	r2, [r7, #28]
 801d02a:	6878      	ldr	r0, [r7, #4]
 801d02c:	f7ff fdf8 	bl	801cc20 <tcp_output_alloc_header>
 801d030:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801d032:	69bb      	ldr	r3, [r7, #24]
 801d034:	2b00      	cmp	r3, #0
 801d036:	d102      	bne.n	801d03e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801d038:	f04f 33ff 	mov.w	r3, #4294967295
 801d03c:	e04c      	b.n	801d0d8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801d03e:	69bb      	ldr	r3, [r7, #24]
 801d040:	685b      	ldr	r3, [r3, #4]
 801d042:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801d044:	7ffb      	ldrb	r3, [r7, #31]
 801d046:	2b00      	cmp	r3, #0
 801d048:	d011      	beq.n	801d06e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801d04a:	697b      	ldr	r3, [r7, #20]
 801d04c:	899b      	ldrh	r3, [r3, #12]
 801d04e:	b29b      	uxth	r3, r3
 801d050:	b21b      	sxth	r3, r3
 801d052:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801d056:	b21c      	sxth	r4, r3
 801d058:	2011      	movs	r0, #17
 801d05a:	f7fb fbb7 	bl	80187cc <lwip_htons>
 801d05e:	4603      	mov	r3, r0
 801d060:	b21b      	sxth	r3, r3
 801d062:	4323      	orrs	r3, r4
 801d064:	b21b      	sxth	r3, r3
 801d066:	b29a      	uxth	r2, r3
 801d068:	697b      	ldr	r3, [r7, #20]
 801d06a:	819a      	strh	r2, [r3, #12]
 801d06c:	e010      	b.n	801d090 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801d06e:	69bb      	ldr	r3, [r7, #24]
 801d070:	685b      	ldr	r3, [r3, #4]
 801d072:	3314      	adds	r3, #20
 801d074:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801d076:	6a3b      	ldr	r3, [r7, #32]
 801d078:	6858      	ldr	r0, [r3, #4]
 801d07a:	6a3b      	ldr	r3, [r7, #32]
 801d07c:	685b      	ldr	r3, [r3, #4]
 801d07e:	891a      	ldrh	r2, [r3, #8]
 801d080:	6a3b      	ldr	r3, [r7, #32]
 801d082:	891b      	ldrh	r3, [r3, #8]
 801d084:	1ad3      	subs	r3, r2, r3
 801d086:	b29b      	uxth	r3, r3
 801d088:	2201      	movs	r2, #1
 801d08a:	6939      	ldr	r1, [r7, #16]
 801d08c:	f7fc fc48 	bl	8019920 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801d090:	6a3b      	ldr	r3, [r7, #32]
 801d092:	68db      	ldr	r3, [r3, #12]
 801d094:	685b      	ldr	r3, [r3, #4]
 801d096:	4618      	mov	r0, r3
 801d098:	f7fb fbad 	bl	80187f6 <lwip_htonl>
 801d09c:	4603      	mov	r3, r0
 801d09e:	3301      	adds	r3, #1
 801d0a0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801d0a2:	687b      	ldr	r3, [r7, #4]
 801d0a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d0a6:	68fb      	ldr	r3, [r7, #12]
 801d0a8:	1ad3      	subs	r3, r2, r3
 801d0aa:	2b00      	cmp	r3, #0
 801d0ac:	da02      	bge.n	801d0b4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801d0ae:	687b      	ldr	r3, [r7, #4]
 801d0b0:	68fa      	ldr	r2, [r7, #12]
 801d0b2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801d0b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d0b8:	2200      	movs	r2, #0
 801d0ba:	69b9      	ldr	r1, [r7, #24]
 801d0bc:	6878      	ldr	r0, [r7, #4]
 801d0be:	f7ff fded 	bl	801cc9c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801d0c2:	687a      	ldr	r2, [r7, #4]
 801d0c4:	687b      	ldr	r3, [r7, #4]
 801d0c6:	3304      	adds	r3, #4
 801d0c8:	69b9      	ldr	r1, [r7, #24]
 801d0ca:	6878      	ldr	r0, [r7, #4]
 801d0cc:	f7ff fe26 	bl	801cd1c <tcp_output_control_segment>
 801d0d0:	4603      	mov	r3, r0
 801d0d2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801d0d4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801d0d8:	4618      	mov	r0, r3
 801d0da:	372c      	adds	r7, #44	; 0x2c
 801d0dc:	46bd      	mov	sp, r7
 801d0de:	bd90      	pop	{r4, r7, pc}
 801d0e0:	08025028 	.word	0x08025028
 801d0e4:	08025820 	.word	0x08025820
 801d0e8:	0802507c 	.word	0x0802507c

0801d0ec <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801d0ec:	b580      	push	{r7, lr}
 801d0ee:	b082      	sub	sp, #8
 801d0f0:	af00      	add	r7, sp, #0
 801d0f2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801d0f4:	f7fc fd50 	bl	8019b98 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801d0f8:	4b0a      	ldr	r3, [pc, #40]	; (801d124 <tcpip_tcp_timer+0x38>)
 801d0fa:	681b      	ldr	r3, [r3, #0]
 801d0fc:	2b00      	cmp	r3, #0
 801d0fe:	d103      	bne.n	801d108 <tcpip_tcp_timer+0x1c>
 801d100:	4b09      	ldr	r3, [pc, #36]	; (801d128 <tcpip_tcp_timer+0x3c>)
 801d102:	681b      	ldr	r3, [r3, #0]
 801d104:	2b00      	cmp	r3, #0
 801d106:	d005      	beq.n	801d114 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801d108:	2200      	movs	r2, #0
 801d10a:	4908      	ldr	r1, [pc, #32]	; (801d12c <tcpip_tcp_timer+0x40>)
 801d10c:	20fa      	movs	r0, #250	; 0xfa
 801d10e:	f000 f89f 	bl	801d250 <sys_timeout>
 801d112:	e003      	b.n	801d11c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801d114:	4b06      	ldr	r3, [pc, #24]	; (801d130 <tcpip_tcp_timer+0x44>)
 801d116:	2200      	movs	r2, #0
 801d118:	601a      	str	r2, [r3, #0]
  }
}
 801d11a:	bf00      	nop
 801d11c:	bf00      	nop
 801d11e:	3708      	adds	r7, #8
 801d120:	46bd      	mov	sp, r7
 801d122:	bd80      	pop	{r7, pc}
 801d124:	2401a184 	.word	0x2401a184
 801d128:	2401a178 	.word	0x2401a178
 801d12c:	0801d0ed 	.word	0x0801d0ed
 801d130:	24013fe8 	.word	0x24013fe8

0801d134 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801d134:	b580      	push	{r7, lr}
 801d136:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801d138:	4b0a      	ldr	r3, [pc, #40]	; (801d164 <tcp_timer_needed+0x30>)
 801d13a:	681b      	ldr	r3, [r3, #0]
 801d13c:	2b00      	cmp	r3, #0
 801d13e:	d10f      	bne.n	801d160 <tcp_timer_needed+0x2c>
 801d140:	4b09      	ldr	r3, [pc, #36]	; (801d168 <tcp_timer_needed+0x34>)
 801d142:	681b      	ldr	r3, [r3, #0]
 801d144:	2b00      	cmp	r3, #0
 801d146:	d103      	bne.n	801d150 <tcp_timer_needed+0x1c>
 801d148:	4b08      	ldr	r3, [pc, #32]	; (801d16c <tcp_timer_needed+0x38>)
 801d14a:	681b      	ldr	r3, [r3, #0]
 801d14c:	2b00      	cmp	r3, #0
 801d14e:	d007      	beq.n	801d160 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801d150:	4b04      	ldr	r3, [pc, #16]	; (801d164 <tcp_timer_needed+0x30>)
 801d152:	2201      	movs	r2, #1
 801d154:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801d156:	2200      	movs	r2, #0
 801d158:	4905      	ldr	r1, [pc, #20]	; (801d170 <tcp_timer_needed+0x3c>)
 801d15a:	20fa      	movs	r0, #250	; 0xfa
 801d15c:	f000 f878 	bl	801d250 <sys_timeout>
  }
}
 801d160:	bf00      	nop
 801d162:	bd80      	pop	{r7, pc}
 801d164:	24013fe8 	.word	0x24013fe8
 801d168:	2401a184 	.word	0x2401a184
 801d16c:	2401a178 	.word	0x2401a178
 801d170:	0801d0ed 	.word	0x0801d0ed

0801d174 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801d174:	b580      	push	{r7, lr}
 801d176:	b086      	sub	sp, #24
 801d178:	af00      	add	r7, sp, #0
 801d17a:	60f8      	str	r0, [r7, #12]
 801d17c:	60b9      	str	r1, [r7, #8]
 801d17e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801d180:	200a      	movs	r0, #10
 801d182:	f7fb ff25 	bl	8018fd0 <memp_malloc>
 801d186:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801d188:	693b      	ldr	r3, [r7, #16]
 801d18a:	2b00      	cmp	r3, #0
 801d18c:	d109      	bne.n	801d1a2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801d18e:	693b      	ldr	r3, [r7, #16]
 801d190:	2b00      	cmp	r3, #0
 801d192:	d151      	bne.n	801d238 <sys_timeout_abs+0xc4>
 801d194:	4b2a      	ldr	r3, [pc, #168]	; (801d240 <sys_timeout_abs+0xcc>)
 801d196:	22be      	movs	r2, #190	; 0xbe
 801d198:	492a      	ldr	r1, [pc, #168]	; (801d244 <sys_timeout_abs+0xd0>)
 801d19a:	482b      	ldr	r0, [pc, #172]	; (801d248 <sys_timeout_abs+0xd4>)
 801d19c:	f004 fece 	bl	8021f3c <iprintf>
    return;
 801d1a0:	e04a      	b.n	801d238 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801d1a2:	693b      	ldr	r3, [r7, #16]
 801d1a4:	2200      	movs	r2, #0
 801d1a6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801d1a8:	693b      	ldr	r3, [r7, #16]
 801d1aa:	68ba      	ldr	r2, [r7, #8]
 801d1ac:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801d1ae:	693b      	ldr	r3, [r7, #16]
 801d1b0:	687a      	ldr	r2, [r7, #4]
 801d1b2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801d1b4:	693b      	ldr	r3, [r7, #16]
 801d1b6:	68fa      	ldr	r2, [r7, #12]
 801d1b8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801d1ba:	4b24      	ldr	r3, [pc, #144]	; (801d24c <sys_timeout_abs+0xd8>)
 801d1bc:	681b      	ldr	r3, [r3, #0]
 801d1be:	2b00      	cmp	r3, #0
 801d1c0:	d103      	bne.n	801d1ca <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801d1c2:	4a22      	ldr	r2, [pc, #136]	; (801d24c <sys_timeout_abs+0xd8>)
 801d1c4:	693b      	ldr	r3, [r7, #16]
 801d1c6:	6013      	str	r3, [r2, #0]
    return;
 801d1c8:	e037      	b.n	801d23a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801d1ca:	693b      	ldr	r3, [r7, #16]
 801d1cc:	685a      	ldr	r2, [r3, #4]
 801d1ce:	4b1f      	ldr	r3, [pc, #124]	; (801d24c <sys_timeout_abs+0xd8>)
 801d1d0:	681b      	ldr	r3, [r3, #0]
 801d1d2:	685b      	ldr	r3, [r3, #4]
 801d1d4:	1ad3      	subs	r3, r2, r3
 801d1d6:	0fdb      	lsrs	r3, r3, #31
 801d1d8:	f003 0301 	and.w	r3, r3, #1
 801d1dc:	b2db      	uxtb	r3, r3
 801d1de:	2b00      	cmp	r3, #0
 801d1e0:	d007      	beq.n	801d1f2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801d1e2:	4b1a      	ldr	r3, [pc, #104]	; (801d24c <sys_timeout_abs+0xd8>)
 801d1e4:	681a      	ldr	r2, [r3, #0]
 801d1e6:	693b      	ldr	r3, [r7, #16]
 801d1e8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801d1ea:	4a18      	ldr	r2, [pc, #96]	; (801d24c <sys_timeout_abs+0xd8>)
 801d1ec:	693b      	ldr	r3, [r7, #16]
 801d1ee:	6013      	str	r3, [r2, #0]
 801d1f0:	e023      	b.n	801d23a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801d1f2:	4b16      	ldr	r3, [pc, #88]	; (801d24c <sys_timeout_abs+0xd8>)
 801d1f4:	681b      	ldr	r3, [r3, #0]
 801d1f6:	617b      	str	r3, [r7, #20]
 801d1f8:	e01a      	b.n	801d230 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801d1fa:	697b      	ldr	r3, [r7, #20]
 801d1fc:	681b      	ldr	r3, [r3, #0]
 801d1fe:	2b00      	cmp	r3, #0
 801d200:	d00b      	beq.n	801d21a <sys_timeout_abs+0xa6>
 801d202:	693b      	ldr	r3, [r7, #16]
 801d204:	685a      	ldr	r2, [r3, #4]
 801d206:	697b      	ldr	r3, [r7, #20]
 801d208:	681b      	ldr	r3, [r3, #0]
 801d20a:	685b      	ldr	r3, [r3, #4]
 801d20c:	1ad3      	subs	r3, r2, r3
 801d20e:	0fdb      	lsrs	r3, r3, #31
 801d210:	f003 0301 	and.w	r3, r3, #1
 801d214:	b2db      	uxtb	r3, r3
 801d216:	2b00      	cmp	r3, #0
 801d218:	d007      	beq.n	801d22a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801d21a:	697b      	ldr	r3, [r7, #20]
 801d21c:	681a      	ldr	r2, [r3, #0]
 801d21e:	693b      	ldr	r3, [r7, #16]
 801d220:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801d222:	697b      	ldr	r3, [r7, #20]
 801d224:	693a      	ldr	r2, [r7, #16]
 801d226:	601a      	str	r2, [r3, #0]
        break;
 801d228:	e007      	b.n	801d23a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801d22a:	697b      	ldr	r3, [r7, #20]
 801d22c:	681b      	ldr	r3, [r3, #0]
 801d22e:	617b      	str	r3, [r7, #20]
 801d230:	697b      	ldr	r3, [r7, #20]
 801d232:	2b00      	cmp	r3, #0
 801d234:	d1e1      	bne.n	801d1fa <sys_timeout_abs+0x86>
 801d236:	e000      	b.n	801d23a <sys_timeout_abs+0xc6>
    return;
 801d238:	bf00      	nop
      }
    }
  }
}
 801d23a:	3718      	adds	r7, #24
 801d23c:	46bd      	mov	sp, r7
 801d23e:	bd80      	pop	{r7, pc}
 801d240:	08025844 	.word	0x08025844
 801d244:	08025878 	.word	0x08025878
 801d248:	080258b8 	.word	0x080258b8
 801d24c:	24013fe4 	.word	0x24013fe4

0801d250 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801d250:	b580      	push	{r7, lr}
 801d252:	b086      	sub	sp, #24
 801d254:	af00      	add	r7, sp, #0
 801d256:	60f8      	str	r0, [r7, #12]
 801d258:	60b9      	str	r1, [r7, #8]
 801d25a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801d25c:	68fb      	ldr	r3, [r7, #12]
 801d25e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d262:	d306      	bcc.n	801d272 <sys_timeout+0x22>
 801d264:	4b0a      	ldr	r3, [pc, #40]	; (801d290 <sys_timeout+0x40>)
 801d266:	f240 1229 	movw	r2, #297	; 0x129
 801d26a:	490a      	ldr	r1, [pc, #40]	; (801d294 <sys_timeout+0x44>)
 801d26c:	480a      	ldr	r0, [pc, #40]	; (801d298 <sys_timeout+0x48>)
 801d26e:	f004 fe65 	bl	8021f3c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801d272:	f7f2 fefb 	bl	801006c <sys_now>
 801d276:	4602      	mov	r2, r0
 801d278:	68fb      	ldr	r3, [r7, #12]
 801d27a:	4413      	add	r3, r2
 801d27c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801d27e:	687a      	ldr	r2, [r7, #4]
 801d280:	68b9      	ldr	r1, [r7, #8]
 801d282:	6978      	ldr	r0, [r7, #20]
 801d284:	f7ff ff76 	bl	801d174 <sys_timeout_abs>
#endif
}
 801d288:	bf00      	nop
 801d28a:	3718      	adds	r7, #24
 801d28c:	46bd      	mov	sp, r7
 801d28e:	bd80      	pop	{r7, pc}
 801d290:	08025844 	.word	0x08025844
 801d294:	080258e0 	.word	0x080258e0
 801d298:	080258b8 	.word	0x080258b8

0801d29c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801d29c:	b480      	push	{r7}
 801d29e:	b085      	sub	sp, #20
 801d2a0:	af00      	add	r7, sp, #0
 801d2a2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801d2a4:	4b33      	ldr	r3, [pc, #204]	; (801d374 <ip4_route+0xd8>)
 801d2a6:	681b      	ldr	r3, [r3, #0]
 801d2a8:	60fb      	str	r3, [r7, #12]
 801d2aa:	e036      	b.n	801d31a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801d2ac:	68fb      	ldr	r3, [r7, #12]
 801d2ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801d2b2:	f003 0301 	and.w	r3, r3, #1
 801d2b6:	b2db      	uxtb	r3, r3
 801d2b8:	2b00      	cmp	r3, #0
 801d2ba:	d02b      	beq.n	801d314 <ip4_route+0x78>
 801d2bc:	68fb      	ldr	r3, [r7, #12]
 801d2be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801d2c2:	089b      	lsrs	r3, r3, #2
 801d2c4:	f003 0301 	and.w	r3, r3, #1
 801d2c8:	b2db      	uxtb	r3, r3
 801d2ca:	2b00      	cmp	r3, #0
 801d2cc:	d022      	beq.n	801d314 <ip4_route+0x78>
 801d2ce:	68fb      	ldr	r3, [r7, #12]
 801d2d0:	3304      	adds	r3, #4
 801d2d2:	681b      	ldr	r3, [r3, #0]
 801d2d4:	2b00      	cmp	r3, #0
 801d2d6:	d01d      	beq.n	801d314 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801d2d8:	687b      	ldr	r3, [r7, #4]
 801d2da:	681a      	ldr	r2, [r3, #0]
 801d2dc:	68fb      	ldr	r3, [r7, #12]
 801d2de:	3304      	adds	r3, #4
 801d2e0:	681b      	ldr	r3, [r3, #0]
 801d2e2:	405a      	eors	r2, r3
 801d2e4:	68fb      	ldr	r3, [r7, #12]
 801d2e6:	3308      	adds	r3, #8
 801d2e8:	681b      	ldr	r3, [r3, #0]
 801d2ea:	4013      	ands	r3, r2
 801d2ec:	2b00      	cmp	r3, #0
 801d2ee:	d101      	bne.n	801d2f4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801d2f0:	68fb      	ldr	r3, [r7, #12]
 801d2f2:	e038      	b.n	801d366 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801d2f4:	68fb      	ldr	r3, [r7, #12]
 801d2f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801d2fa:	f003 0302 	and.w	r3, r3, #2
 801d2fe:	2b00      	cmp	r3, #0
 801d300:	d108      	bne.n	801d314 <ip4_route+0x78>
 801d302:	687b      	ldr	r3, [r7, #4]
 801d304:	681a      	ldr	r2, [r3, #0]
 801d306:	68fb      	ldr	r3, [r7, #12]
 801d308:	330c      	adds	r3, #12
 801d30a:	681b      	ldr	r3, [r3, #0]
 801d30c:	429a      	cmp	r2, r3
 801d30e:	d101      	bne.n	801d314 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801d310:	68fb      	ldr	r3, [r7, #12]
 801d312:	e028      	b.n	801d366 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801d314:	68fb      	ldr	r3, [r7, #12]
 801d316:	681b      	ldr	r3, [r3, #0]
 801d318:	60fb      	str	r3, [r7, #12]
 801d31a:	68fb      	ldr	r3, [r7, #12]
 801d31c:	2b00      	cmp	r3, #0
 801d31e:	d1c5      	bne.n	801d2ac <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801d320:	4b15      	ldr	r3, [pc, #84]	; (801d378 <ip4_route+0xdc>)
 801d322:	681b      	ldr	r3, [r3, #0]
 801d324:	2b00      	cmp	r3, #0
 801d326:	d01a      	beq.n	801d35e <ip4_route+0xc2>
 801d328:	4b13      	ldr	r3, [pc, #76]	; (801d378 <ip4_route+0xdc>)
 801d32a:	681b      	ldr	r3, [r3, #0]
 801d32c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801d330:	f003 0301 	and.w	r3, r3, #1
 801d334:	2b00      	cmp	r3, #0
 801d336:	d012      	beq.n	801d35e <ip4_route+0xc2>
 801d338:	4b0f      	ldr	r3, [pc, #60]	; (801d378 <ip4_route+0xdc>)
 801d33a:	681b      	ldr	r3, [r3, #0]
 801d33c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801d340:	f003 0304 	and.w	r3, r3, #4
 801d344:	2b00      	cmp	r3, #0
 801d346:	d00a      	beq.n	801d35e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801d348:	4b0b      	ldr	r3, [pc, #44]	; (801d378 <ip4_route+0xdc>)
 801d34a:	681b      	ldr	r3, [r3, #0]
 801d34c:	3304      	adds	r3, #4
 801d34e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801d350:	2b00      	cmp	r3, #0
 801d352:	d004      	beq.n	801d35e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801d354:	687b      	ldr	r3, [r7, #4]
 801d356:	681b      	ldr	r3, [r3, #0]
 801d358:	b2db      	uxtb	r3, r3
 801d35a:	2b7f      	cmp	r3, #127	; 0x7f
 801d35c:	d101      	bne.n	801d362 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801d35e:	2300      	movs	r3, #0
 801d360:	e001      	b.n	801d366 <ip4_route+0xca>
  }

  return netif_default;
 801d362:	4b05      	ldr	r3, [pc, #20]	; (801d378 <ip4_route+0xdc>)
 801d364:	681b      	ldr	r3, [r3, #0]
}
 801d366:	4618      	mov	r0, r3
 801d368:	3714      	adds	r7, #20
 801d36a:	46bd      	mov	sp, r7
 801d36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d370:	4770      	bx	lr
 801d372:	bf00      	nop
 801d374:	2401a170 	.word	0x2401a170
 801d378:	2401a16c 	.word	0x2401a16c

0801d37c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801d37c:	b580      	push	{r7, lr}
 801d37e:	b08a      	sub	sp, #40	; 0x28
 801d380:	af04      	add	r7, sp, #16
 801d382:	60f8      	str	r0, [r7, #12]
 801d384:	60b9      	str	r1, [r7, #8]
 801d386:	607a      	str	r2, [r7, #4]
 801d388:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801d38a:	68bb      	ldr	r3, [r7, #8]
 801d38c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801d38e:	687b      	ldr	r3, [r7, #4]
 801d390:	2b00      	cmp	r3, #0
 801d392:	d009      	beq.n	801d3a8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801d394:	68bb      	ldr	r3, [r7, #8]
 801d396:	2b00      	cmp	r3, #0
 801d398:	d003      	beq.n	801d3a2 <ip4_output_if+0x26>
 801d39a:	68bb      	ldr	r3, [r7, #8]
 801d39c:	681b      	ldr	r3, [r3, #0]
 801d39e:	2b00      	cmp	r3, #0
 801d3a0:	d102      	bne.n	801d3a8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801d3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d3a4:	3304      	adds	r3, #4
 801d3a6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801d3a8:	78fa      	ldrb	r2, [r7, #3]
 801d3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d3ac:	9302      	str	r3, [sp, #8]
 801d3ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801d3b2:	9301      	str	r3, [sp, #4]
 801d3b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 801d3b8:	9300      	str	r3, [sp, #0]
 801d3ba:	4613      	mov	r3, r2
 801d3bc:	687a      	ldr	r2, [r7, #4]
 801d3be:	6979      	ldr	r1, [r7, #20]
 801d3c0:	68f8      	ldr	r0, [r7, #12]
 801d3c2:	f000 f805 	bl	801d3d0 <ip4_output_if_src>
 801d3c6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801d3c8:	4618      	mov	r0, r3
 801d3ca:	3718      	adds	r7, #24
 801d3cc:	46bd      	mov	sp, r7
 801d3ce:	bd80      	pop	{r7, pc}

0801d3d0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801d3d0:	b580      	push	{r7, lr}
 801d3d2:	b088      	sub	sp, #32
 801d3d4:	af00      	add	r7, sp, #0
 801d3d6:	60f8      	str	r0, [r7, #12]
 801d3d8:	60b9      	str	r1, [r7, #8]
 801d3da:	607a      	str	r2, [r7, #4]
 801d3dc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801d3de:	68fb      	ldr	r3, [r7, #12]
 801d3e0:	7b9b      	ldrb	r3, [r3, #14]
 801d3e2:	2b01      	cmp	r3, #1
 801d3e4:	d006      	beq.n	801d3f4 <ip4_output_if_src+0x24>
 801d3e6:	4b4b      	ldr	r3, [pc, #300]	; (801d514 <ip4_output_if_src+0x144>)
 801d3e8:	f44f 7255 	mov.w	r2, #852	; 0x354
 801d3ec:	494a      	ldr	r1, [pc, #296]	; (801d518 <ip4_output_if_src+0x148>)
 801d3ee:	484b      	ldr	r0, [pc, #300]	; (801d51c <ip4_output_if_src+0x14c>)
 801d3f0:	f004 fda4 	bl	8021f3c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801d3f4:	687b      	ldr	r3, [r7, #4]
 801d3f6:	2b00      	cmp	r3, #0
 801d3f8:	d060      	beq.n	801d4bc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801d3fa:	2314      	movs	r3, #20
 801d3fc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801d3fe:	2114      	movs	r1, #20
 801d400:	68f8      	ldr	r0, [r7, #12]
 801d402:	f7fc f959 	bl	80196b8 <pbuf_add_header>
 801d406:	4603      	mov	r3, r0
 801d408:	2b00      	cmp	r3, #0
 801d40a:	d002      	beq.n	801d412 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801d40c:	f06f 0301 	mvn.w	r3, #1
 801d410:	e07c      	b.n	801d50c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801d412:	68fb      	ldr	r3, [r7, #12]
 801d414:	685b      	ldr	r3, [r3, #4]
 801d416:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801d418:	68fb      	ldr	r3, [r7, #12]
 801d41a:	895b      	ldrh	r3, [r3, #10]
 801d41c:	2b13      	cmp	r3, #19
 801d41e:	d806      	bhi.n	801d42e <ip4_output_if_src+0x5e>
 801d420:	4b3c      	ldr	r3, [pc, #240]	; (801d514 <ip4_output_if_src+0x144>)
 801d422:	f44f 7262 	mov.w	r2, #904	; 0x388
 801d426:	493e      	ldr	r1, [pc, #248]	; (801d520 <ip4_output_if_src+0x150>)
 801d428:	483c      	ldr	r0, [pc, #240]	; (801d51c <ip4_output_if_src+0x14c>)
 801d42a:	f004 fd87 	bl	8021f3c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801d42e:	69fb      	ldr	r3, [r7, #28]
 801d430:	78fa      	ldrb	r2, [r7, #3]
 801d432:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801d434:	69fb      	ldr	r3, [r7, #28]
 801d436:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801d43a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801d43c:	687b      	ldr	r3, [r7, #4]
 801d43e:	681a      	ldr	r2, [r3, #0]
 801d440:	69fb      	ldr	r3, [r7, #28]
 801d442:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801d444:	8b7b      	ldrh	r3, [r7, #26]
 801d446:	089b      	lsrs	r3, r3, #2
 801d448:	b29b      	uxth	r3, r3
 801d44a:	b2db      	uxtb	r3, r3
 801d44c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d450:	b2da      	uxtb	r2, r3
 801d452:	69fb      	ldr	r3, [r7, #28]
 801d454:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801d456:	69fb      	ldr	r3, [r7, #28]
 801d458:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801d45c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801d45e:	68fb      	ldr	r3, [r7, #12]
 801d460:	891b      	ldrh	r3, [r3, #8]
 801d462:	4618      	mov	r0, r3
 801d464:	f7fb f9b2 	bl	80187cc <lwip_htons>
 801d468:	4603      	mov	r3, r0
 801d46a:	461a      	mov	r2, r3
 801d46c:	69fb      	ldr	r3, [r7, #28]
 801d46e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801d470:	69fb      	ldr	r3, [r7, #28]
 801d472:	2200      	movs	r2, #0
 801d474:	719a      	strb	r2, [r3, #6]
 801d476:	2200      	movs	r2, #0
 801d478:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801d47a:	4b2a      	ldr	r3, [pc, #168]	; (801d524 <ip4_output_if_src+0x154>)
 801d47c:	881b      	ldrh	r3, [r3, #0]
 801d47e:	4618      	mov	r0, r3
 801d480:	f7fb f9a4 	bl	80187cc <lwip_htons>
 801d484:	4603      	mov	r3, r0
 801d486:	461a      	mov	r2, r3
 801d488:	69fb      	ldr	r3, [r7, #28]
 801d48a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801d48c:	4b25      	ldr	r3, [pc, #148]	; (801d524 <ip4_output_if_src+0x154>)
 801d48e:	881b      	ldrh	r3, [r3, #0]
 801d490:	3301      	adds	r3, #1
 801d492:	b29a      	uxth	r2, r3
 801d494:	4b23      	ldr	r3, [pc, #140]	; (801d524 <ip4_output_if_src+0x154>)
 801d496:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801d498:	68bb      	ldr	r3, [r7, #8]
 801d49a:	2b00      	cmp	r3, #0
 801d49c:	d104      	bne.n	801d4a8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801d49e:	4b22      	ldr	r3, [pc, #136]	; (801d528 <ip4_output_if_src+0x158>)
 801d4a0:	681a      	ldr	r2, [r3, #0]
 801d4a2:	69fb      	ldr	r3, [r7, #28]
 801d4a4:	60da      	str	r2, [r3, #12]
 801d4a6:	e003      	b.n	801d4b0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801d4a8:	68bb      	ldr	r3, [r7, #8]
 801d4aa:	681a      	ldr	r2, [r3, #0]
 801d4ac:	69fb      	ldr	r3, [r7, #28]
 801d4ae:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801d4b0:	69fb      	ldr	r3, [r7, #28]
 801d4b2:	2200      	movs	r2, #0
 801d4b4:	729a      	strb	r2, [r3, #10]
 801d4b6:	2200      	movs	r2, #0
 801d4b8:	72da      	strb	r2, [r3, #11]
 801d4ba:	e00f      	b.n	801d4dc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801d4bc:	68fb      	ldr	r3, [r7, #12]
 801d4be:	895b      	ldrh	r3, [r3, #10]
 801d4c0:	2b13      	cmp	r3, #19
 801d4c2:	d802      	bhi.n	801d4ca <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801d4c4:	f06f 0301 	mvn.w	r3, #1
 801d4c8:	e020      	b.n	801d50c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801d4ca:	68fb      	ldr	r3, [r7, #12]
 801d4cc:	685b      	ldr	r3, [r3, #4]
 801d4ce:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801d4d0:	69fb      	ldr	r3, [r7, #28]
 801d4d2:	691b      	ldr	r3, [r3, #16]
 801d4d4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801d4d6:	f107 0314 	add.w	r3, r7, #20
 801d4da:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801d4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d4de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d4e0:	2b00      	cmp	r3, #0
 801d4e2:	d00c      	beq.n	801d4fe <ip4_output_if_src+0x12e>
 801d4e4:	68fb      	ldr	r3, [r7, #12]
 801d4e6:	891a      	ldrh	r2, [r3, #8]
 801d4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d4ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d4ec:	429a      	cmp	r2, r3
 801d4ee:	d906      	bls.n	801d4fe <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801d4f0:	687a      	ldr	r2, [r7, #4]
 801d4f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801d4f4:	68f8      	ldr	r0, [r7, #12]
 801d4f6:	f000 f871 	bl	801d5dc <ip4_frag>
 801d4fa:	4603      	mov	r3, r0
 801d4fc:	e006      	b.n	801d50c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801d4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d500:	695b      	ldr	r3, [r3, #20]
 801d502:	687a      	ldr	r2, [r7, #4]
 801d504:	68f9      	ldr	r1, [r7, #12]
 801d506:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d508:	4798      	blx	r3
 801d50a:	4603      	mov	r3, r0
}
 801d50c:	4618      	mov	r0, r3
 801d50e:	3720      	adds	r7, #32
 801d510:	46bd      	mov	sp, r7
 801d512:	bd80      	pop	{r7, pc}
 801d514:	0802592c 	.word	0x0802592c
 801d518:	08025960 	.word	0x08025960
 801d51c:	0802596c 	.word	0x0802596c
 801d520:	08025994 	.word	0x08025994
 801d524:	24013fec 	.word	0x24013fec
 801d528:	08025ef8 	.word	0x08025ef8

0801d52c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801d52c:	b580      	push	{r7, lr}
 801d52e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801d530:	2005      	movs	r0, #5
 801d532:	f7fb fd4d 	bl	8018fd0 <memp_malloc>
 801d536:	4603      	mov	r3, r0
}
 801d538:	4618      	mov	r0, r3
 801d53a:	bd80      	pop	{r7, pc}

0801d53c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801d53c:	b580      	push	{r7, lr}
 801d53e:	b082      	sub	sp, #8
 801d540:	af00      	add	r7, sp, #0
 801d542:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801d544:	687b      	ldr	r3, [r7, #4]
 801d546:	2b00      	cmp	r3, #0
 801d548:	d106      	bne.n	801d558 <ip_frag_free_pbuf_custom_ref+0x1c>
 801d54a:	4b07      	ldr	r3, [pc, #28]	; (801d568 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801d54c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801d550:	4906      	ldr	r1, [pc, #24]	; (801d56c <ip_frag_free_pbuf_custom_ref+0x30>)
 801d552:	4807      	ldr	r0, [pc, #28]	; (801d570 <ip_frag_free_pbuf_custom_ref+0x34>)
 801d554:	f004 fcf2 	bl	8021f3c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801d558:	6879      	ldr	r1, [r7, #4]
 801d55a:	2005      	movs	r0, #5
 801d55c:	f7fb fd8a 	bl	8019074 <memp_free>
}
 801d560:	bf00      	nop
 801d562:	3708      	adds	r7, #8
 801d564:	46bd      	mov	sp, r7
 801d566:	bd80      	pop	{r7, pc}
 801d568:	080259c4 	.word	0x080259c4
 801d56c:	08025b7c 	.word	0x08025b7c
 801d570:	08025a0c 	.word	0x08025a0c

0801d574 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801d574:	b580      	push	{r7, lr}
 801d576:	b084      	sub	sp, #16
 801d578:	af00      	add	r7, sp, #0
 801d57a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801d57c:	687b      	ldr	r3, [r7, #4]
 801d57e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801d580:	68fb      	ldr	r3, [r7, #12]
 801d582:	2b00      	cmp	r3, #0
 801d584:	d106      	bne.n	801d594 <ipfrag_free_pbuf_custom+0x20>
 801d586:	4b11      	ldr	r3, [pc, #68]	; (801d5cc <ipfrag_free_pbuf_custom+0x58>)
 801d588:	f240 22ce 	movw	r2, #718	; 0x2ce
 801d58c:	4910      	ldr	r1, [pc, #64]	; (801d5d0 <ipfrag_free_pbuf_custom+0x5c>)
 801d58e:	4811      	ldr	r0, [pc, #68]	; (801d5d4 <ipfrag_free_pbuf_custom+0x60>)
 801d590:	f004 fcd4 	bl	8021f3c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801d594:	68fa      	ldr	r2, [r7, #12]
 801d596:	687b      	ldr	r3, [r7, #4]
 801d598:	429a      	cmp	r2, r3
 801d59a:	d006      	beq.n	801d5aa <ipfrag_free_pbuf_custom+0x36>
 801d59c:	4b0b      	ldr	r3, [pc, #44]	; (801d5cc <ipfrag_free_pbuf_custom+0x58>)
 801d59e:	f240 22cf 	movw	r2, #719	; 0x2cf
 801d5a2:	490d      	ldr	r1, [pc, #52]	; (801d5d8 <ipfrag_free_pbuf_custom+0x64>)
 801d5a4:	480b      	ldr	r0, [pc, #44]	; (801d5d4 <ipfrag_free_pbuf_custom+0x60>)
 801d5a6:	f004 fcc9 	bl	8021f3c <iprintf>
  if (pcr->original != NULL) {
 801d5aa:	68fb      	ldr	r3, [r7, #12]
 801d5ac:	695b      	ldr	r3, [r3, #20]
 801d5ae:	2b00      	cmp	r3, #0
 801d5b0:	d004      	beq.n	801d5bc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801d5b2:	68fb      	ldr	r3, [r7, #12]
 801d5b4:	695b      	ldr	r3, [r3, #20]
 801d5b6:	4618      	mov	r0, r3
 801d5b8:	f7fc f88e 	bl	80196d8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801d5bc:	68f8      	ldr	r0, [r7, #12]
 801d5be:	f7ff ffbd 	bl	801d53c <ip_frag_free_pbuf_custom_ref>
}
 801d5c2:	bf00      	nop
 801d5c4:	3710      	adds	r7, #16
 801d5c6:	46bd      	mov	sp, r7
 801d5c8:	bd80      	pop	{r7, pc}
 801d5ca:	bf00      	nop
 801d5cc:	080259c4 	.word	0x080259c4
 801d5d0:	08025b88 	.word	0x08025b88
 801d5d4:	08025a0c 	.word	0x08025a0c
 801d5d8:	08025b94 	.word	0x08025b94

0801d5dc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801d5dc:	b580      	push	{r7, lr}
 801d5de:	b094      	sub	sp, #80	; 0x50
 801d5e0:	af02      	add	r7, sp, #8
 801d5e2:	60f8      	str	r0, [r7, #12]
 801d5e4:	60b9      	str	r1, [r7, #8]
 801d5e6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801d5e8:	2300      	movs	r3, #0
 801d5ea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801d5ee:	68bb      	ldr	r3, [r7, #8]
 801d5f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d5f2:	3b14      	subs	r3, #20
 801d5f4:	2b00      	cmp	r3, #0
 801d5f6:	da00      	bge.n	801d5fa <ip4_frag+0x1e>
 801d5f8:	3307      	adds	r3, #7
 801d5fa:	10db      	asrs	r3, r3, #3
 801d5fc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801d5fe:	2314      	movs	r3, #20
 801d600:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801d602:	68fb      	ldr	r3, [r7, #12]
 801d604:	685b      	ldr	r3, [r3, #4]
 801d606:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801d608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d60a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801d60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d60e:	781b      	ldrb	r3, [r3, #0]
 801d610:	f003 030f 	and.w	r3, r3, #15
 801d614:	b2db      	uxtb	r3, r3
 801d616:	009b      	lsls	r3, r3, #2
 801d618:	b2db      	uxtb	r3, r3
 801d61a:	2b14      	cmp	r3, #20
 801d61c:	d002      	beq.n	801d624 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801d61e:	f06f 0305 	mvn.w	r3, #5
 801d622:	e110      	b.n	801d846 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801d624:	68fb      	ldr	r3, [r7, #12]
 801d626:	895b      	ldrh	r3, [r3, #10]
 801d628:	2b13      	cmp	r3, #19
 801d62a:	d809      	bhi.n	801d640 <ip4_frag+0x64>
 801d62c:	4b88      	ldr	r3, [pc, #544]	; (801d850 <ip4_frag+0x274>)
 801d62e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801d632:	4988      	ldr	r1, [pc, #544]	; (801d854 <ip4_frag+0x278>)
 801d634:	4888      	ldr	r0, [pc, #544]	; (801d858 <ip4_frag+0x27c>)
 801d636:	f004 fc81 	bl	8021f3c <iprintf>
 801d63a:	f06f 0305 	mvn.w	r3, #5
 801d63e:	e102      	b.n	801d846 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801d640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d642:	88db      	ldrh	r3, [r3, #6]
 801d644:	b29b      	uxth	r3, r3
 801d646:	4618      	mov	r0, r3
 801d648:	f7fb f8c0 	bl	80187cc <lwip_htons>
 801d64c:	4603      	mov	r3, r0
 801d64e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801d650:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d652:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d656:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801d65a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d65c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801d660:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801d662:	68fb      	ldr	r3, [r7, #12]
 801d664:	891b      	ldrh	r3, [r3, #8]
 801d666:	3b14      	subs	r3, #20
 801d668:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801d66c:	e0e1      	b.n	801d832 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801d66e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d670:	00db      	lsls	r3, r3, #3
 801d672:	b29b      	uxth	r3, r3
 801d674:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d678:	4293      	cmp	r3, r2
 801d67a:	bf28      	it	cs
 801d67c:	4613      	movcs	r3, r2
 801d67e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801d680:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d684:	2114      	movs	r1, #20
 801d686:	200e      	movs	r0, #14
 801d688:	f7fb fdc8 	bl	801921c <pbuf_alloc>
 801d68c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801d68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d690:	2b00      	cmp	r3, #0
 801d692:	f000 80d5 	beq.w	801d840 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801d696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d698:	895b      	ldrh	r3, [r3, #10]
 801d69a:	2b13      	cmp	r3, #19
 801d69c:	d806      	bhi.n	801d6ac <ip4_frag+0xd0>
 801d69e:	4b6c      	ldr	r3, [pc, #432]	; (801d850 <ip4_frag+0x274>)
 801d6a0:	f44f 7249 	mov.w	r2, #804	; 0x324
 801d6a4:	496d      	ldr	r1, [pc, #436]	; (801d85c <ip4_frag+0x280>)
 801d6a6:	486c      	ldr	r0, [pc, #432]	; (801d858 <ip4_frag+0x27c>)
 801d6a8:	f004 fc48 	bl	8021f3c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801d6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d6ae:	685b      	ldr	r3, [r3, #4]
 801d6b0:	2214      	movs	r2, #20
 801d6b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d6b4:	4618      	mov	r0, r3
 801d6b6:	f003 fd7f 	bl	80211b8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801d6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d6bc:	685b      	ldr	r3, [r3, #4]
 801d6be:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801d6c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801d6c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801d6c6:	e064      	b.n	801d792 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801d6c8:	68fb      	ldr	r3, [r7, #12]
 801d6ca:	895a      	ldrh	r2, [r3, #10]
 801d6cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d6ce:	1ad3      	subs	r3, r2, r3
 801d6d0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801d6d2:	68fb      	ldr	r3, [r7, #12]
 801d6d4:	895b      	ldrh	r3, [r3, #10]
 801d6d6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801d6d8:	429a      	cmp	r2, r3
 801d6da:	d906      	bls.n	801d6ea <ip4_frag+0x10e>
 801d6dc:	4b5c      	ldr	r3, [pc, #368]	; (801d850 <ip4_frag+0x274>)
 801d6de:	f240 322d 	movw	r2, #813	; 0x32d
 801d6e2:	495f      	ldr	r1, [pc, #380]	; (801d860 <ip4_frag+0x284>)
 801d6e4:	485c      	ldr	r0, [pc, #368]	; (801d858 <ip4_frag+0x27c>)
 801d6e6:	f004 fc29 	bl	8021f3c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801d6ea:	8bfa      	ldrh	r2, [r7, #30]
 801d6ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801d6f0:	4293      	cmp	r3, r2
 801d6f2:	bf28      	it	cs
 801d6f4:	4613      	movcs	r3, r2
 801d6f6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801d6fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801d6fe:	2b00      	cmp	r3, #0
 801d700:	d105      	bne.n	801d70e <ip4_frag+0x132>
        poff = 0;
 801d702:	2300      	movs	r3, #0
 801d704:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801d706:	68fb      	ldr	r3, [r7, #12]
 801d708:	681b      	ldr	r3, [r3, #0]
 801d70a:	60fb      	str	r3, [r7, #12]
        continue;
 801d70c:	e041      	b.n	801d792 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801d70e:	f7ff ff0d 	bl	801d52c <ip_frag_alloc_pbuf_custom_ref>
 801d712:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801d714:	69bb      	ldr	r3, [r7, #24]
 801d716:	2b00      	cmp	r3, #0
 801d718:	d103      	bne.n	801d722 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801d71a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d71c:	f7fb ffdc 	bl	80196d8 <pbuf_free>
        goto memerr;
 801d720:	e08f      	b.n	801d842 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801d722:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801d724:	68fb      	ldr	r3, [r7, #12]
 801d726:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801d728:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d72a:	4413      	add	r3, r2
 801d72c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801d730:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801d734:	9201      	str	r2, [sp, #4]
 801d736:	9300      	str	r3, [sp, #0]
 801d738:	4603      	mov	r3, r0
 801d73a:	2241      	movs	r2, #65	; 0x41
 801d73c:	2000      	movs	r0, #0
 801d73e:	f7fb fe97 	bl	8019470 <pbuf_alloced_custom>
 801d742:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801d744:	697b      	ldr	r3, [r7, #20]
 801d746:	2b00      	cmp	r3, #0
 801d748:	d106      	bne.n	801d758 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801d74a:	69b8      	ldr	r0, [r7, #24]
 801d74c:	f7ff fef6 	bl	801d53c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801d750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d752:	f7fb ffc1 	bl	80196d8 <pbuf_free>
        goto memerr;
 801d756:	e074      	b.n	801d842 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801d758:	68f8      	ldr	r0, [r7, #12]
 801d75a:	f7fc f863 	bl	8019824 <pbuf_ref>
      pcr->original = p;
 801d75e:	69bb      	ldr	r3, [r7, #24]
 801d760:	68fa      	ldr	r2, [r7, #12]
 801d762:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801d764:	69bb      	ldr	r3, [r7, #24]
 801d766:	4a3f      	ldr	r2, [pc, #252]	; (801d864 <ip4_frag+0x288>)
 801d768:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801d76a:	6979      	ldr	r1, [r7, #20]
 801d76c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d76e:	f7fc f881 	bl	8019874 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801d772:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801d776:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801d77a:	1ad3      	subs	r3, r2, r3
 801d77c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801d780:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801d784:	2b00      	cmp	r3, #0
 801d786:	d004      	beq.n	801d792 <ip4_frag+0x1b6>
        poff = 0;
 801d788:	2300      	movs	r3, #0
 801d78a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801d78c:	68fb      	ldr	r3, [r7, #12]
 801d78e:	681b      	ldr	r3, [r3, #0]
 801d790:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801d792:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801d796:	2b00      	cmp	r3, #0
 801d798:	d196      	bne.n	801d6c8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801d79a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801d79c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801d7a0:	4413      	add	r3, r2
 801d7a2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801d7a4:	68bb      	ldr	r3, [r7, #8]
 801d7a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d7a8:	f1a3 0213 	sub.w	r2, r3, #19
 801d7ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d7b0:	429a      	cmp	r2, r3
 801d7b2:	bfcc      	ite	gt
 801d7b4:	2301      	movgt	r3, #1
 801d7b6:	2300      	movle	r3, #0
 801d7b8:	b2db      	uxtb	r3, r3
 801d7ba:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801d7bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801d7c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d7c4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801d7c6:	6a3b      	ldr	r3, [r7, #32]
 801d7c8:	2b00      	cmp	r3, #0
 801d7ca:	d002      	beq.n	801d7d2 <ip4_frag+0x1f6>
 801d7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7ce:	2b00      	cmp	r3, #0
 801d7d0:	d003      	beq.n	801d7da <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801d7d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d7d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801d7d8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801d7da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d7dc:	4618      	mov	r0, r3
 801d7de:	f7fa fff5 	bl	80187cc <lwip_htons>
 801d7e2:	4603      	mov	r3, r0
 801d7e4:	461a      	mov	r2, r3
 801d7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7e8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801d7ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801d7ec:	3314      	adds	r3, #20
 801d7ee:	b29b      	uxth	r3, r3
 801d7f0:	4618      	mov	r0, r3
 801d7f2:	f7fa ffeb 	bl	80187cc <lwip_htons>
 801d7f6:	4603      	mov	r3, r0
 801d7f8:	461a      	mov	r2, r3
 801d7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7fc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801d7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d800:	2200      	movs	r2, #0
 801d802:	729a      	strb	r2, [r3, #10]
 801d804:	2200      	movs	r2, #0
 801d806:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801d808:	68bb      	ldr	r3, [r7, #8]
 801d80a:	695b      	ldr	r3, [r3, #20]
 801d80c:	687a      	ldr	r2, [r7, #4]
 801d80e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d810:	68b8      	ldr	r0, [r7, #8]
 801d812:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801d814:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d816:	f7fb ff5f 	bl	80196d8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801d81a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d81e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801d820:	1ad3      	subs	r3, r2, r3
 801d822:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801d826:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801d82a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d82c:	4413      	add	r3, r2
 801d82e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801d832:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d836:	2b00      	cmp	r3, #0
 801d838:	f47f af19 	bne.w	801d66e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801d83c:	2300      	movs	r3, #0
 801d83e:	e002      	b.n	801d846 <ip4_frag+0x26a>
      goto memerr;
 801d840:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801d842:	f04f 33ff 	mov.w	r3, #4294967295
}
 801d846:	4618      	mov	r0, r3
 801d848:	3748      	adds	r7, #72	; 0x48
 801d84a:	46bd      	mov	sp, r7
 801d84c:	bd80      	pop	{r7, pc}
 801d84e:	bf00      	nop
 801d850:	080259c4 	.word	0x080259c4
 801d854:	08025ba0 	.word	0x08025ba0
 801d858:	08025a0c 	.word	0x08025a0c
 801d85c:	08025bbc 	.word	0x08025bbc
 801d860:	08025bdc 	.word	0x08025bdc
 801d864:	0801d575 	.word	0x0801d575

0801d868 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801d868:	b580      	push	{r7, lr}
 801d86a:	b084      	sub	sp, #16
 801d86c:	af00      	add	r7, sp, #0
 801d86e:	6078      	str	r0, [r7, #4]
 801d870:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801d872:	687b      	ldr	r3, [r7, #4]
 801d874:	681b      	ldr	r3, [r3, #0]
 801d876:	6839      	ldr	r1, [r7, #0]
 801d878:	2200      	movs	r2, #0
 801d87a:	4618      	mov	r0, r3
 801d87c:	f7f7 fe56 	bl	801552c <osMessagePut>
 801d880:	4603      	mov	r3, r0
 801d882:	2b00      	cmp	r3, #0
 801d884:	d102      	bne.n	801d88c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801d886:	2300      	movs	r3, #0
 801d888:	73fb      	strb	r3, [r7, #15]
 801d88a:	e001      	b.n	801d890 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801d88c:	23ff      	movs	r3, #255	; 0xff
 801d88e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801d890:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d894:	4618      	mov	r0, r3
 801d896:	3710      	adds	r7, #16
 801d898:	46bd      	mov	sp, r7
 801d89a:	bd80      	pop	{r7, pc}

0801d89c <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801d89c:	b480      	push	{r7}
 801d89e:	b083      	sub	sp, #12
 801d8a0:	af00      	add	r7, sp, #0
 801d8a2:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801d8a4:	687b      	ldr	r3, [r7, #4]
 801d8a6:	681b      	ldr	r3, [r3, #0]
 801d8a8:	2b00      	cmp	r3, #0
 801d8aa:	d101      	bne.n	801d8b0 <sys_mbox_valid+0x14>
    return 0;
 801d8ac:	2300      	movs	r3, #0
 801d8ae:	e000      	b.n	801d8b2 <sys_mbox_valid+0x16>
  else
    return 1;
 801d8b0:	2301      	movs	r3, #1
}
 801d8b2:	4618      	mov	r0, r3
 801d8b4:	370c      	adds	r7, #12
 801d8b6:	46bd      	mov	sp, r7
 801d8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8bc:	4770      	bx	lr

0801d8be <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801d8be:	b580      	push	{r7, lr}
 801d8c0:	b082      	sub	sp, #8
 801d8c2:	af00      	add	r7, sp, #0
 801d8c4:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801d8c6:	687b      	ldr	r3, [r7, #4]
 801d8c8:	681b      	ldr	r3, [r3, #0]
 801d8ca:	f04f 31ff 	mov.w	r1, #4294967295
 801d8ce:	4618      	mov	r0, r3
 801d8d0:	f7f7 fd4a 	bl	8015368 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801d8d4:	bf00      	nop
 801d8d6:	3708      	adds	r7, #8
 801d8d8:	46bd      	mov	sp, r7
 801d8da:	bd80      	pop	{r7, pc}

0801d8dc <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801d8dc:	b580      	push	{r7, lr}
 801d8de:	b082      	sub	sp, #8
 801d8e0:	af00      	add	r7, sp, #0
 801d8e2:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801d8e4:	687b      	ldr	r3, [r7, #4]
 801d8e6:	681b      	ldr	r3, [r3, #0]
 801d8e8:	4618      	mov	r0, r3
 801d8ea:	f7f7 fd8b 	bl	8015404 <osMutexRelease>
}
 801d8ee:	bf00      	nop
 801d8f0:	3708      	adds	r7, #8
 801d8f2:	46bd      	mov	sp, r7
 801d8f4:	bd80      	pop	{r7, pc}
	...

0801d8f8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801d8f8:	b580      	push	{r7, lr}
 801d8fa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801d8fc:	4b04      	ldr	r3, [pc, #16]	; (801d910 <sys_arch_protect+0x18>)
 801d8fe:	681b      	ldr	r3, [r3, #0]
 801d900:	f04f 31ff 	mov.w	r1, #4294967295
 801d904:	4618      	mov	r0, r3
 801d906:	f7f7 fd2f 	bl	8015368 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801d90a:	2301      	movs	r3, #1
}
 801d90c:	4618      	mov	r0, r3
 801d90e:	bd80      	pop	{r7, pc}
 801d910:	2401a194 	.word	0x2401a194

0801d914 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801d914:	b580      	push	{r7, lr}
 801d916:	b082      	sub	sp, #8
 801d918:	af00      	add	r7, sp, #0
 801d91a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801d91c:	4b04      	ldr	r3, [pc, #16]	; (801d930 <sys_arch_unprotect+0x1c>)
 801d91e:	681b      	ldr	r3, [r3, #0]
 801d920:	4618      	mov	r0, r3
 801d922:	f7f7 fd6f 	bl	8015404 <osMutexRelease>
}
 801d926:	bf00      	nop
 801d928:	3708      	adds	r7, #8
 801d92a:	46bd      	mov	sp, r7
 801d92c:	bd80      	pop	{r7, pc}
 801d92e:	bf00      	nop
 801d930:	2401a194 	.word	0x2401a194

0801d934 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 801d934:	b580      	push	{r7, lr}
 801d936:	b082      	sub	sp, #8
 801d938:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 801d93a:	4b11      	ldr	r3, [pc, #68]	; (801d980 <MX_DMA_Init+0x4c>)
 801d93c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801d940:	4a0f      	ldr	r2, [pc, #60]	; (801d980 <MX_DMA_Init+0x4c>)
 801d942:	f043 0301 	orr.w	r3, r3, #1
 801d946:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801d94a:	4b0d      	ldr	r3, [pc, #52]	; (801d980 <MX_DMA_Init+0x4c>)
 801d94c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801d950:	f003 0301 	and.w	r3, r3, #1
 801d954:	607b      	str	r3, [r7, #4]
 801d956:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 801d958:	2200      	movs	r2, #0
 801d95a:	2100      	movs	r1, #0
 801d95c:	200b      	movs	r0, #11
 801d95e:	f7e3 fce7 	bl	8001330 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 801d962:	200b      	movs	r0, #11
 801d964:	f7e3 fcfe 	bl	8001364 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 801d968:	2200      	movs	r2, #0
 801d96a:	2100      	movs	r1, #0
 801d96c:	200c      	movs	r0, #12
 801d96e:	f7e3 fcdf 	bl	8001330 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 801d972:	200c      	movs	r0, #12
 801d974:	f7e3 fcf6 	bl	8001364 <HAL_NVIC_EnableIRQ>

}
 801d978:	bf00      	nop
 801d97a:	3708      	adds	r7, #8
 801d97c:	46bd      	mov	sp, r7
 801d97e:	bd80      	pop	{r7, pc}
 801d980:	58024400 	.word	0x58024400

0801d984 <MX_GPIO_Init>:
/** Configure pins
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 801d984:	b580      	push	{r7, lr}
 801d986:	b090      	sub	sp, #64	; 0x40
 801d988:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d98a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d98e:	2200      	movs	r2, #0
 801d990:	601a      	str	r2, [r3, #0]
 801d992:	605a      	str	r2, [r3, #4]
 801d994:	609a      	str	r2, [r3, #8]
 801d996:	60da      	str	r2, [r3, #12]
 801d998:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 801d99a:	4ba6      	ldr	r3, [pc, #664]	; (801dc34 <MX_GPIO_Init+0x2b0>)
 801d99c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801d9a0:	4aa4      	ldr	r2, [pc, #656]	; (801dc34 <MX_GPIO_Init+0x2b0>)
 801d9a2:	f043 0301 	orr.w	r3, r3, #1
 801d9a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801d9aa:	4ba2      	ldr	r3, [pc, #648]	; (801dc34 <MX_GPIO_Init+0x2b0>)
 801d9ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801d9b0:	f003 0301 	and.w	r3, r3, #1
 801d9b4:	62bb      	str	r3, [r7, #40]	; 0x28
 801d9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_RCC_GPIOB_CLK_ENABLE();
 801d9b8:	4b9e      	ldr	r3, [pc, #632]	; (801dc34 <MX_GPIO_Init+0x2b0>)
 801d9ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801d9be:	4a9d      	ldr	r2, [pc, #628]	; (801dc34 <MX_GPIO_Init+0x2b0>)
 801d9c0:	f043 0302 	orr.w	r3, r3, #2
 801d9c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801d9c8:	4b9a      	ldr	r3, [pc, #616]	; (801dc34 <MX_GPIO_Init+0x2b0>)
 801d9ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801d9ce:	f003 0302 	and.w	r3, r3, #2
 801d9d2:	627b      	str	r3, [r7, #36]	; 0x24
 801d9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_GPIOI_CLK_ENABLE();
 801d9d6:	4b97      	ldr	r3, [pc, #604]	; (801dc34 <MX_GPIO_Init+0x2b0>)
 801d9d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801d9dc:	4a95      	ldr	r2, [pc, #596]	; (801dc34 <MX_GPIO_Init+0x2b0>)
 801d9de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801d9e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801d9e6:	4b93      	ldr	r3, [pc, #588]	; (801dc34 <MX_GPIO_Init+0x2b0>)
 801d9e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801d9ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d9f0:	623b      	str	r3, [r7, #32]
 801d9f2:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 801d9f4:	4b8f      	ldr	r3, [pc, #572]	; (801dc34 <MX_GPIO_Init+0x2b0>)
 801d9f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801d9fa:	4a8e      	ldr	r2, [pc, #568]	; (801dc34 <MX_GPIO_Init+0x2b0>)
 801d9fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801da00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801da04:	4b8b      	ldr	r3, [pc, #556]	; (801dc34 <MX_GPIO_Init+0x2b0>)
 801da06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801da0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801da0e:	61fb      	str	r3, [r7, #28]
 801da10:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 801da12:	4b88      	ldr	r3, [pc, #544]	; (801dc34 <MX_GPIO_Init+0x2b0>)
 801da14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801da18:	4a86      	ldr	r2, [pc, #536]	; (801dc34 <MX_GPIO_Init+0x2b0>)
 801da1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801da1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801da22:	4b84      	ldr	r3, [pc, #528]	; (801dc34 <MX_GPIO_Init+0x2b0>)
 801da24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801da28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801da2c:	61bb      	str	r3, [r7, #24]
 801da2e:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 801da30:	4b80      	ldr	r3, [pc, #512]	; (801dc34 <MX_GPIO_Init+0x2b0>)
 801da32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801da36:	4a7f      	ldr	r2, [pc, #508]	; (801dc34 <MX_GPIO_Init+0x2b0>)
 801da38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801da3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801da40:	4b7c      	ldr	r3, [pc, #496]	; (801dc34 <MX_GPIO_Init+0x2b0>)
 801da42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801da46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801da4a:	617b      	str	r3, [r7, #20]
 801da4c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 801da4e:	4b79      	ldr	r3, [pc, #484]	; (801dc34 <MX_GPIO_Init+0x2b0>)
 801da50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801da54:	4a77      	ldr	r2, [pc, #476]	; (801dc34 <MX_GPIO_Init+0x2b0>)
 801da56:	f043 0320 	orr.w	r3, r3, #32
 801da5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801da5e:	4b75      	ldr	r3, [pc, #468]	; (801dc34 <MX_GPIO_Init+0x2b0>)
 801da60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801da64:	f003 0320 	and.w	r3, r3, #32
 801da68:	613b      	str	r3, [r7, #16]
 801da6a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 801da6c:	4b71      	ldr	r3, [pc, #452]	; (801dc34 <MX_GPIO_Init+0x2b0>)
 801da6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801da72:	4a70      	ldr	r2, [pc, #448]	; (801dc34 <MX_GPIO_Init+0x2b0>)
 801da74:	f043 0308 	orr.w	r3, r3, #8
 801da78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801da7c:	4b6d      	ldr	r3, [pc, #436]	; (801dc34 <MX_GPIO_Init+0x2b0>)
 801da7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801da82:	f003 0308 	and.w	r3, r3, #8
 801da86:	60fb      	str	r3, [r7, #12]
 801da88:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 801da8a:	4b6a      	ldr	r3, [pc, #424]	; (801dc34 <MX_GPIO_Init+0x2b0>)
 801da8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801da90:	4a68      	ldr	r2, [pc, #416]	; (801dc34 <MX_GPIO_Init+0x2b0>)
 801da92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801da96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801da9a:	4b66      	ldr	r3, [pc, #408]	; (801dc34 <MX_GPIO_Init+0x2b0>)
 801da9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801daa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801daa4:	60bb      	str	r3, [r7, #8]
 801daa6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 801daa8:	4b62      	ldr	r3, [pc, #392]	; (801dc34 <MX_GPIO_Init+0x2b0>)
 801daaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801daae:	4a61      	ldr	r2, [pc, #388]	; (801dc34 <MX_GPIO_Init+0x2b0>)
 801dab0:	f043 0304 	orr.w	r3, r3, #4
 801dab4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801dab8:	4b5e      	ldr	r3, [pc, #376]	; (801dc34 <MX_GPIO_Init+0x2b0>)
 801daba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801dabe:	f003 0304 	and.w	r3, r3, #4
 801dac2:	607b      	str	r3, [r7, #4]
 801dac4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 801dac6:	2200      	movs	r2, #0
 801dac8:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 801dacc:	485a      	ldr	r0, [pc, #360]	; (801dc38 <MX_GPIO_Init+0x2b4>)
 801dace:	f7e5 fadd 	bl	800308c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOK, GPIO_PIN_1, GPIO_PIN_RESET);
 801dad2:	2200      	movs	r2, #0
 801dad4:	2102      	movs	r1, #2
 801dad6:	4859      	ldr	r0, [pc, #356]	; (801dc3c <MX_GPIO_Init+0x2b8>)
 801dad8:	f7e5 fad8 	bl	800308c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_0, GPIO_PIN_RESET);
 801dadc:	2200      	movs	r2, #0
 801dade:	2101      	movs	r1, #1
 801dae0:	4857      	ldr	r0, [pc, #348]	; (801dc40 <MX_GPIO_Init+0x2bc>)
 801dae2:	f7e5 fad3 	bl	800308c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_3, GPIO_PIN_RESET);
 801dae6:	2200      	movs	r2, #0
 801dae8:	2108      	movs	r1, #8
 801daea:	4855      	ldr	r0, [pc, #340]	; (801dc40 <MX_GPIO_Init+0x2bc>)
 801daec:	f7e5 face 	bl	800308c <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_4, GPIO_PIN_RESET);
 801daf0:	2200      	movs	r2, #0
 801daf2:	f243 0110 	movw	r1, #12304	; 0x3010
 801daf6:	4853      	ldr	r0, [pc, #332]	; (801dc44 <MX_GPIO_Init+0x2c0>)
 801daf8:	f7e5 fac8 	bl	800308c <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 801dafc:	2200      	movs	r2, #0
 801dafe:	f44f 7100 	mov.w	r1, #512	; 0x200
 801db02:	4851      	ldr	r0, [pc, #324]	; (801dc48 <MX_GPIO_Init+0x2c4>)
 801db04:	f7e5 fac2 	bl	800308c <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_15, GPIO_PIN_RESET);
 801db08:	2200      	movs	r2, #0
 801db0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801db0e:	484f      	ldr	r0, [pc, #316]	; (801dc4c <MX_GPIO_Init+0x2c8>)
 801db10:	f7e5 fabc 	bl	800308c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PI5 PI6 PI12 PI13 PI14 */
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 801db14:	f247 0360 	movw	r3, #28768	; 0x7060
 801db18:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801db1a:	2301      	movs	r3, #1
 801db1c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801db1e:	2300      	movs	r3, #0
 801db20:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801db22:	2300      	movs	r3, #0
 801db24:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801db26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801db2a:	4619      	mov	r1, r3
 801db2c:	4842      	ldr	r0, [pc, #264]	; (801dc38 <MX_GPIO_Init+0x2b4>)
 801db2e:	f7e5 f8fd 	bl	8002d2c <HAL_GPIO_Init>

	/*Configure GPIO pin : PK1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 801db32:	2302      	movs	r3, #2
 801db34:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801db36:	2301      	movs	r3, #1
 801db38:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801db3a:	2300      	movs	r3, #0
 801db3c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801db3e:	2303      	movs	r3, #3
 801db40:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 801db42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801db46:	4619      	mov	r1, r3
 801db48:	483c      	ldr	r0, [pc, #240]	; (801dc3c <MX_GPIO_Init+0x2b8>)
 801db4a:	f7e5 f8ef 	bl	8002d2c <HAL_GPIO_Init>

	/*Configure GPIO pin : PJ0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 801db4e:	2301      	movs	r3, #1
 801db50:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801db52:	2301      	movs	r3, #1
 801db54:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801db56:	2300      	movs	r3, #0
 801db58:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801db5a:	2300      	movs	r3, #0
 801db5c:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 801db5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801db62:	4619      	mov	r1, r3
 801db64:	4836      	ldr	r0, [pc, #216]	; (801dc40 <MX_GPIO_Init+0x2bc>)
 801db66:	f7e5 f8e1 	bl	8002d2c <HAL_GPIO_Init>

	/*Configure GPIO pins : PD12 PD13 PD4 */
	GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_4;
 801db6a:	f243 0310 	movw	r3, #12304	; 0x3010
 801db6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801db70:	2301      	movs	r3, #1
 801db72:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801db74:	2300      	movs	r3, #0
 801db76:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801db78:	2300      	movs	r3, #0
 801db7a:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801db7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801db80:	4619      	mov	r1, r3
 801db82:	4830      	ldr	r0, [pc, #192]	; (801dc44 <MX_GPIO_Init+0x2c0>)
 801db84:	f7e5 f8d2 	bl	8002d2c <HAL_GPIO_Init>

	/*Configure GPIO pins : PJ3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 801db88:	2308      	movs	r3, #8
 801db8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801db8c:	2301      	movs	r3, #1
 801db8e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801db90:	2300      	movs	r3, #0
 801db92:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801db94:	2300      	movs	r3, #0
 801db96:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 801db98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801db9c:	4619      	mov	r1, r3
 801db9e:	4828      	ldr	r0, [pc, #160]	; (801dc40 <MX_GPIO_Init+0x2bc>)
 801dba0:	f7e5 f8c4 	bl	8002d2c <HAL_GPIO_Init>

	/*Configure GPIO pins : PK5 PK4 PK6 PK3 */
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3;
 801dba4:	2378      	movs	r3, #120	; 0x78
 801dba6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801dba8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 801dbac:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 801dbae:	2301      	movs	r3, #1
 801dbb0:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 801dbb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801dbb6:	4619      	mov	r1, r3
 801dbb8:	4820      	ldr	r0, [pc, #128]	; (801dc3c <MX_GPIO_Init+0x2b8>)
 801dbba:	f7e5 f8b7 	bl	8002d2c <HAL_GPIO_Init>

	/*Configure GPIO pins : PG9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 801dbbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 801dbc2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801dbc4:	2301      	movs	r3, #1
 801dbc6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801dbc8:	2300      	movs	r3, #0
 801dbca:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801dbcc:	2300      	movs	r3, #0
 801dbce:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801dbd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801dbd4:	4619      	mov	r1, r3
 801dbd6:	481c      	ldr	r0, [pc, #112]	; (801dc48 <MX_GPIO_Init+0x2c4>)
 801dbd8:	f7e5 f8a8 	bl	8002d2c <HAL_GPIO_Init>

	/*Configure GPIO pin : PH15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 801dbdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801dbe0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801dbe2:	2301      	movs	r3, #1
 801dbe4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801dbe6:	2300      	movs	r3, #0
 801dbe8:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801dbea:	2303      	movs	r3, #3
 801dbec:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801dbee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801dbf2:	4619      	mov	r1, r3
 801dbf4:	4815      	ldr	r0, [pc, #84]	; (801dc4c <MX_GPIO_Init+0x2c8>)
 801dbf6:	f7e5 f899 	bl	8002d2c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI3_IRQn, 6, 0);
 801dbfa:	2200      	movs	r2, #0
 801dbfc:	2106      	movs	r1, #6
 801dbfe:	2009      	movs	r0, #9
 801dc00:	f7e3 fb96 	bl	8001330 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 801dc04:	2009      	movs	r0, #9
 801dc06:	f7e3 fbad 	bl	8001364 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 6, 0);
 801dc0a:	2200      	movs	r2, #0
 801dc0c:	2106      	movs	r1, #6
 801dc0e:	200a      	movs	r0, #10
 801dc10:	f7e3 fb8e 	bl	8001330 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 801dc14:	200a      	movs	r0, #10
 801dc16:	f7e3 fba5 	bl	8001364 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 6, 0);
 801dc1a:	2200      	movs	r2, #0
 801dc1c:	2106      	movs	r1, #6
 801dc1e:	2017      	movs	r0, #23
 801dc20:	f7e3 fb86 	bl	8001330 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 801dc24:	2017      	movs	r0, #23
 801dc26:	f7e3 fb9d 	bl	8001364 <HAL_NVIC_EnableIRQ>
}
 801dc2a:	bf00      	nop
 801dc2c:	3740      	adds	r7, #64	; 0x40
 801dc2e:	46bd      	mov	sp, r7
 801dc30:	bd80      	pop	{r7, pc}
 801dc32:	bf00      	nop
 801dc34:	58024400 	.word	0x58024400
 801dc38:	58022000 	.word	0x58022000
 801dc3c:	58022800 	.word	0x58022800
 801dc40:	58022400 	.word	0x58022400
 801dc44:	58020c00 	.word	0x58020c00
 801dc48:	58021800 	.word	0x58021800
 801dc4c:	58021c00 	.word	0x58021c00

0801dc50 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C4_Init(void)
{
 801dc50:	b580      	push	{r7, lr}
 801dc52:	af00      	add	r7, sp, #0
	hi2c4.Instance = I2C4;
 801dc54:	4b1b      	ldr	r3, [pc, #108]	; (801dcc4 <MX_I2C4_Init+0x74>)
 801dc56:	4a1c      	ldr	r2, [pc, #112]	; (801dcc8 <MX_I2C4_Init+0x78>)
 801dc58:	601a      	str	r2, [r3, #0]
	hi2c4.Init.Timing = 0x10707DBC;
 801dc5a:	4b1a      	ldr	r3, [pc, #104]	; (801dcc4 <MX_I2C4_Init+0x74>)
 801dc5c:	4a1b      	ldr	r2, [pc, #108]	; (801dccc <MX_I2C4_Init+0x7c>)
 801dc5e:	605a      	str	r2, [r3, #4]
	hi2c4.Init.OwnAddress1 = 0;
 801dc60:	4b18      	ldr	r3, [pc, #96]	; (801dcc4 <MX_I2C4_Init+0x74>)
 801dc62:	2200      	movs	r2, #0
 801dc64:	609a      	str	r2, [r3, #8]
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801dc66:	4b17      	ldr	r3, [pc, #92]	; (801dcc4 <MX_I2C4_Init+0x74>)
 801dc68:	2201      	movs	r2, #1
 801dc6a:	60da      	str	r2, [r3, #12]
	hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801dc6c:	4b15      	ldr	r3, [pc, #84]	; (801dcc4 <MX_I2C4_Init+0x74>)
 801dc6e:	2200      	movs	r2, #0
 801dc70:	611a      	str	r2, [r3, #16]
	hi2c4.Init.OwnAddress2 = 0;
 801dc72:	4b14      	ldr	r3, [pc, #80]	; (801dcc4 <MX_I2C4_Init+0x74>)
 801dc74:	2200      	movs	r2, #0
 801dc76:	615a      	str	r2, [r3, #20]
	hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 801dc78:	4b12      	ldr	r3, [pc, #72]	; (801dcc4 <MX_I2C4_Init+0x74>)
 801dc7a:	2200      	movs	r2, #0
 801dc7c:	619a      	str	r2, [r3, #24]
	hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801dc7e:	4b11      	ldr	r3, [pc, #68]	; (801dcc4 <MX_I2C4_Init+0x74>)
 801dc80:	2200      	movs	r2, #0
 801dc82:	61da      	str	r2, [r3, #28]
	hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801dc84:	4b0f      	ldr	r3, [pc, #60]	; (801dcc4 <MX_I2C4_Init+0x74>)
 801dc86:	2200      	movs	r2, #0
 801dc88:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 801dc8a:	480e      	ldr	r0, [pc, #56]	; (801dcc4 <MX_I2C4_Init+0x74>)
 801dc8c:	f7e5 fa60 	bl	8003150 <HAL_I2C_Init>
 801dc90:	4603      	mov	r3, r0
 801dc92:	2b00      	cmp	r3, #0
 801dc94:	d001      	beq.n	801dc9a <MX_I2C4_Init+0x4a>
	{
		Error_Handler();
 801dc96:	f7e2 ff83 	bl	8000ba0 <Error_Handler>
	}
	/** Configure Analogue filter
	*/
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 801dc9a:	2100      	movs	r1, #0
 801dc9c:	4809      	ldr	r0, [pc, #36]	; (801dcc4 <MX_I2C4_Init+0x74>)
 801dc9e:	f7e5 fae7 	bl	8003270 <HAL_I2CEx_ConfigAnalogFilter>
 801dca2:	4603      	mov	r3, r0
 801dca4:	2b00      	cmp	r3, #0
 801dca6:	d001      	beq.n	801dcac <MX_I2C4_Init+0x5c>
	{
		Error_Handler();
 801dca8:	f7e2 ff7a 	bl	8000ba0 <Error_Handler>
	}
	/** Configure Digital filter
	*/
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 801dcac:	2100      	movs	r1, #0
 801dcae:	4805      	ldr	r0, [pc, #20]	; (801dcc4 <MX_I2C4_Init+0x74>)
 801dcb0:	f7e5 fb29 	bl	8003306 <HAL_I2CEx_ConfigDigitalFilter>
 801dcb4:	4603      	mov	r3, r0
 801dcb6:	2b00      	cmp	r3, #0
 801dcb8:	d001      	beq.n	801dcbe <MX_I2C4_Init+0x6e>
	{
		Error_Handler();
 801dcba:	f7e2 ff71 	bl	8000ba0 <Error_Handler>
	}
}
 801dcbe:	bf00      	nop
 801dcc0:	bd80      	pop	{r7, pc}
 801dcc2:	bf00      	nop
 801dcc4:	240151cc 	.word	0x240151cc
 801dcc8:	58001c00 	.word	0x58001c00
 801dccc:	10707dbc 	.word	0x10707dbc

0801dcd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 801dcd0:	b580      	push	{r7, lr}
 801dcd2:	b0bc      	sub	sp, #240	; 0xf0
 801dcd4:	af00      	add	r7, sp, #0
 801dcd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801dcd8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801dcdc:	2200      	movs	r2, #0
 801dcde:	601a      	str	r2, [r3, #0]
 801dce0:	605a      	str	r2, [r3, #4]
 801dce2:	609a      	str	r2, [r3, #8]
 801dce4:	60da      	str	r2, [r3, #12]
 801dce6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801dce8:	f107 031c 	add.w	r3, r7, #28
 801dcec:	22c0      	movs	r2, #192	; 0xc0
 801dcee:	2100      	movs	r1, #0
 801dcf0:	4618      	mov	r0, r3
 801dcf2:	f003 fa89 	bl	8021208 <memset>
  if(hi2c->Instance==I2C1)
 801dcf6:	687b      	ldr	r3, [r7, #4]
 801dcf8:	681b      	ldr	r3, [r3, #0]
 801dcfa:	4a4d      	ldr	r2, [pc, #308]	; (801de30 <HAL_I2C_MspInit+0x160>)
 801dcfc:	4293      	cmp	r3, r2
 801dcfe:	d142      	bne.n	801dd86 <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 801dd00:	2308      	movs	r3, #8
 801dd02:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 801dd04:	2300      	movs	r3, #0
 801dd06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801dd0a:	f107 031c 	add.w	r3, r7, #28
 801dd0e:	4618      	mov	r0, r3
 801dd10:	f7e8 f8ea 	bl	8005ee8 <HAL_RCCEx_PeriphCLKConfig>
 801dd14:	4603      	mov	r3, r0
 801dd16:	2b00      	cmp	r3, #0
 801dd18:	d001      	beq.n	801dd1e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 801dd1a:	f7e2 ff41 	bl	8000ba0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801dd1e:	4b45      	ldr	r3, [pc, #276]	; (801de34 <HAL_I2C_MspInit+0x164>)
 801dd20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801dd24:	4a43      	ldr	r2, [pc, #268]	; (801de34 <HAL_I2C_MspInit+0x164>)
 801dd26:	f043 0302 	orr.w	r3, r3, #2
 801dd2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801dd2e:	4b41      	ldr	r3, [pc, #260]	; (801de34 <HAL_I2C_MspInit+0x164>)
 801dd30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801dd34:	f003 0302 	and.w	r3, r3, #2
 801dd38:	61bb      	str	r3, [r7, #24]
 801dd3a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801dd3c:	23c0      	movs	r3, #192	; 0xc0
 801dd3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801dd42:	2312      	movs	r3, #18
 801dd44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801dd48:	2301      	movs	r3, #1
 801dd4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801dd4e:	2300      	movs	r3, #0
 801dd50:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801dd54:	2304      	movs	r3, #4
 801dd56:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801dd5a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801dd5e:	4619      	mov	r1, r3
 801dd60:	4835      	ldr	r0, [pc, #212]	; (801de38 <HAL_I2C_MspInit+0x168>)
 801dd62:	f7e4 ffe3 	bl	8002d2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 801dd66:	4b33      	ldr	r3, [pc, #204]	; (801de34 <HAL_I2C_MspInit+0x164>)
 801dd68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801dd6c:	4a31      	ldr	r2, [pc, #196]	; (801de34 <HAL_I2C_MspInit+0x164>)
 801dd6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801dd72:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 801dd76:	4b2f      	ldr	r3, [pc, #188]	; (801de34 <HAL_I2C_MspInit+0x164>)
 801dd78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801dd7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801dd80:	617b      	str	r3, [r7, #20]
 801dd82:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 801dd84:	e04f      	b.n	801de26 <HAL_I2C_MspInit+0x156>
  else if(hi2c->Instance==I2C4)
 801dd86:	687b      	ldr	r3, [r7, #4]
 801dd88:	681b      	ldr	r3, [r3, #0]
 801dd8a:	4a2c      	ldr	r2, [pc, #176]	; (801de3c <HAL_I2C_MspInit+0x16c>)
 801dd8c:	4293      	cmp	r3, r2
 801dd8e:	d14a      	bne.n	801de26 <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 801dd90:	2310      	movs	r3, #16
 801dd92:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 801dd94:	2300      	movs	r3, #0
 801dd96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801dd9a:	f107 031c 	add.w	r3, r7, #28
 801dd9e:	4618      	mov	r0, r3
 801dda0:	f7e8 f8a2 	bl	8005ee8 <HAL_RCCEx_PeriphCLKConfig>
 801dda4:	4603      	mov	r3, r0
 801dda6:	2b00      	cmp	r3, #0
 801dda8:	d001      	beq.n	801ddae <HAL_I2C_MspInit+0xde>
      Error_Handler();
 801ddaa:	f7e2 fef9 	bl	8000ba0 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 801ddae:	4b21      	ldr	r3, [pc, #132]	; (801de34 <HAL_I2C_MspInit+0x164>)
 801ddb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801ddb4:	4a1f      	ldr	r2, [pc, #124]	; (801de34 <HAL_I2C_MspInit+0x164>)
 801ddb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ddba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801ddbe:	4b1d      	ldr	r3, [pc, #116]	; (801de34 <HAL_I2C_MspInit+0x164>)
 801ddc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801ddc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ddc8:	613b      	str	r3, [r7, #16]
 801ddca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801ddcc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801ddd0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801ddd4:	2312      	movs	r3, #18
 801ddd6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801ddda:	2301      	movs	r3, #1
 801dddc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801dde0:	2300      	movs	r3, #0
 801dde2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 801dde6:	2304      	movs	r3, #4
 801dde8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801ddec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801ddf0:	4619      	mov	r1, r3
 801ddf2:	4813      	ldr	r0, [pc, #76]	; (801de40 <HAL_I2C_MspInit+0x170>)
 801ddf4:	f7e4 ff9a 	bl	8002d2c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 801ddf8:	4b0e      	ldr	r3, [pc, #56]	; (801de34 <HAL_I2C_MspInit+0x164>)
 801ddfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801ddfe:	4a0d      	ldr	r2, [pc, #52]	; (801de34 <HAL_I2C_MspInit+0x164>)
 801de00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801de04:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 801de08:	4b0a      	ldr	r3, [pc, #40]	; (801de34 <HAL_I2C_MspInit+0x164>)
 801de0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801de0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801de12:	60fb      	str	r3, [r7, #12]
 801de14:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 801de16:	2200      	movs	r2, #0
 801de18:	2105      	movs	r1, #5
 801de1a:	205f      	movs	r0, #95	; 0x5f
 801de1c:	f7e3 fa88 	bl	8001330 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 801de20:	205f      	movs	r0, #95	; 0x5f
 801de22:	f7e3 fa9f 	bl	8001364 <HAL_NVIC_EnableIRQ>
}
 801de26:	bf00      	nop
 801de28:	37f0      	adds	r7, #240	; 0xf0
 801de2a:	46bd      	mov	sp, r7
 801de2c:	bd80      	pop	{r7, pc}
 801de2e:	bf00      	nop
 801de30:	40005400 	.word	0x40005400
 801de34:	58024400 	.word	0x58024400
 801de38:	58020400 	.word	0x58020400
 801de3c:	58001c00 	.word	0x58001c00
 801de40:	58021c00 	.word	0x58021c00

0801de44 <HAL_QSPI_RxCpltCallback>:
 * @brief  Rx Transfer completed callbacks.
 * @param  hqspi: QSPI handle
 * @retval None
 */
void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 801de44:	b480      	push	{r7}
 801de46:	b083      	sub	sp, #12
 801de48:	af00      	add	r7, sp, #0
 801de4a:	6078      	str	r0, [r7, #4]
	rx_complete = 1;
 801de4c:	4b04      	ldr	r3, [pc, #16]	; (801de60 <HAL_QSPI_RxCpltCallback+0x1c>)
 801de4e:	2201      	movs	r2, #1
 801de50:	701a      	strb	r2, [r3, #0]
}
 801de52:	bf00      	nop
 801de54:	370c      	adds	r7, #12
 801de56:	46bd      	mov	sp, r7
 801de58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de5c:	4770      	bx	lr
 801de5e:	bf00      	nop
 801de60:	24013fee 	.word	0x24013fee

0801de64 <HAL_QSPI_TxCpltCallback>:
 * @brief  Rx Transfer completed callbacks.
 * @param  hqspi: QSPI handle
 * @retval None
 */
void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 801de64:	b480      	push	{r7}
 801de66:	b083      	sub	sp, #12
 801de68:	af00      	add	r7, sp, #0
 801de6a:	6078      	str	r0, [r7, #4]
	tx_complete = 1;
 801de6c:	4b04      	ldr	r3, [pc, #16]	; (801de80 <HAL_QSPI_TxCpltCallback+0x1c>)
 801de6e:	2201      	movs	r2, #1
 801de70:	701a      	strb	r2, [r3, #0]
}
 801de72:	bf00      	nop
 801de74:	370c      	adds	r7, #12
 801de76:	46bd      	mov	sp, r7
 801de78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de7c:	4770      	bx	lr
 801de7e:	bf00      	nop
 801de80:	24013fef 	.word	0x24013fef

0801de84 <HAL_QSPI_StatusMatchCallback>:
 * @brief  Status Match callback.
 * @param  hqspi: QSPI handle
 * @retval None
 */
void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 801de84:	b480      	push	{r7}
 801de86:	b083      	sub	sp, #12
 801de88:	af00      	add	r7, sp, #0
 801de8a:	6078      	str	r0, [r7, #4]
	status_matched = 1;
 801de8c:	4b04      	ldr	r3, [pc, #16]	; (801dea0 <HAL_QSPI_StatusMatchCallback+0x1c>)
 801de8e:	2201      	movs	r2, #1
 801de90:	701a      	strb	r2, [r3, #0]
}
 801de92:	bf00      	nop
 801de94:	370c      	adds	r7, #12
 801de96:	46bd      	mov	sp, r7
 801de98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de9c:	4770      	bx	lr
 801de9e:	bf00      	nop
 801dea0:	24013ff0 	.word	0x24013ff0

0801dea4 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callbacks.
  * @param  hqspi: QSPI handle
  * @retval None
  */
void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 801dea4:	b480      	push	{r7}
 801dea6:	b083      	sub	sp, #12
 801dea8:	af00      	add	r7, sp, #0
 801deaa:	6078      	str	r0, [r7, #4]
	command_complete = 1;
 801deac:	4b04      	ldr	r3, [pc, #16]	; (801dec0 <HAL_QSPI_CmdCpltCallback+0x1c>)
 801deae:	2201      	movs	r2, #1
 801deb0:	701a      	strb	r2, [r3, #0]
}
 801deb2:	bf00      	nop
 801deb4:	370c      	adds	r7, #12
 801deb6:	46bd      	mov	sp, r7
 801deb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801debc:	4770      	bx	lr
 801debe:	bf00      	nop
 801dec0:	24013ff1 	.word	0x24013ff1

0801dec4 <QUADSPI_IRQHandler>:

void QUADSPI_IRQHandler(void)
{
 801dec4:	b580      	push	{r7, lr}
 801dec6:	af00      	add	r7, sp, #0
  HAL_QSPI_IRQHandler(&hqspi);
 801dec8:	4802      	ldr	r0, [pc, #8]	; (801ded4 <QUADSPI_IRQHandler+0x10>)
 801deca:	f7e6 fdfb 	bl	8004ac4 <HAL_QSPI_IRQHandler>
}
 801dece:	bf00      	nop
 801ded0:	bd80      	pop	{r7, pc}
 801ded2:	bf00      	nop
 801ded4:	2401a19c 	.word	0x2401a19c

0801ded8 <HAL_RTC_AlarmAEventCallback>:
extern tsSetting setting;
char ftpFilename[50];
extern RTC_DateTypeDef sDateSys;

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 801ded8:	b580      	push	{r7, lr}
 801deda:	b086      	sub	sp, #24
 801dedc:	af04      	add	r7, sp, #16
 801dede:	6078      	str	r0, [r7, #4]
	//printf("Callback for set file name\r\n");
	//strcpy(&filePathConfig[0], "/public_html/DATA/");
	snprintf(ftpFilename, 50,"%s%d%d%d.txt", setting.stationName, sDateSys.Year, sDateSys.Month, sDateSys.Date);
 801dee0:	4b12      	ldr	r3, [pc, #72]	; (801df2c <HAL_RTC_AlarmAEventCallback+0x54>)
 801dee2:	78db      	ldrb	r3, [r3, #3]
 801dee4:	461a      	mov	r2, r3
 801dee6:	4b11      	ldr	r3, [pc, #68]	; (801df2c <HAL_RTC_AlarmAEventCallback+0x54>)
 801dee8:	785b      	ldrb	r3, [r3, #1]
 801deea:	4619      	mov	r1, r3
 801deec:	4b0f      	ldr	r3, [pc, #60]	; (801df2c <HAL_RTC_AlarmAEventCallback+0x54>)
 801deee:	789b      	ldrb	r3, [r3, #2]
 801def0:	9302      	str	r3, [sp, #8]
 801def2:	9101      	str	r1, [sp, #4]
 801def4:	9200      	str	r2, [sp, #0]
 801def6:	4b0e      	ldr	r3, [pc, #56]	; (801df30 <HAL_RTC_AlarmAEventCallback+0x58>)
 801def8:	4a0e      	ldr	r2, [pc, #56]	; (801df34 <HAL_RTC_AlarmAEventCallback+0x5c>)
 801defa:	2132      	movs	r1, #50	; 0x32
 801defc:	480e      	ldr	r0, [pc, #56]	; (801df38 <HAL_RTC_AlarmAEventCallback+0x60>)
 801defe:	f004 f8af 	bl	8022060 <sniprintf>
	//snprintf(filePathConfig, 50,"/%s/%d%/%d", sDateSys.Year, sDateSys.Month, sDateSys.Date);
	CreateNewDir(sDateSys.Year, sDateSys.Month, sDateSys.Date);
 801df02:	4b0a      	ldr	r3, [pc, #40]	; (801df2c <HAL_RTC_AlarmAEventCallback+0x54>)
 801df04:	78db      	ldrb	r3, [r3, #3]
 801df06:	4618      	mov	r0, r3
 801df08:	4b08      	ldr	r3, [pc, #32]	; (801df2c <HAL_RTC_AlarmAEventCallback+0x54>)
 801df0a:	785b      	ldrb	r3, [r3, #1]
 801df0c:	4619      	mov	r1, r3
 801df0e:	4b07      	ldr	r3, [pc, #28]	; (801df2c <HAL_RTC_AlarmAEventCallback+0x54>)
 801df10:	789b      	ldrb	r3, [r3, #2]
 801df12:	461a      	mov	r2, r3
 801df14:	f000 fa48 	bl	801e3a8 <CreateNewDir>
	strcpy((char*)ftp_set.file_name, ftpFilename);
 801df18:	4b08      	ldr	r3, [pc, #32]	; (801df3c <HAL_RTC_AlarmAEventCallback+0x64>)
 801df1a:	691b      	ldr	r3, [r3, #16]
 801df1c:	4906      	ldr	r1, [pc, #24]	; (801df38 <HAL_RTC_AlarmAEventCallback+0x60>)
 801df1e:	4618      	mov	r0, r3
 801df20:	f004 f935 	bl	802218e <strcpy>
}
 801df24:	bf00      	nop
 801df26:	3708      	adds	r7, #8
 801df28:	46bd      	mov	sp, r7
 801df2a:	bd80      	pop	{r7, pc}
 801df2c:	2401b238 	.word	0x2401b238
 801df30:	24016808 	.word	0x24016808
 801df34:	08025bec 	.word	0x08025bec
 801df38:	2401a20c 	.word	0x2401a20c
 801df3c:	2401b218 	.word	0x2401b218

0801df40 <HAL_RTCEx_AlarmBEventCallback>:

void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 801df40:	b480      	push	{r7}
 801df42:	b083      	sub	sp, #12
 801df44:	af00      	add	r7, sp, #0
 801df46:	6078      	str	r0, [r7, #4]
	//printf("Bat dau gui du lieu\r\n");
	//osTimerStart(periodicNetworkTimer, atoi(transmission.interval)*1000);
}
 801df48:	bf00      	nop
 801df4a:	370c      	adds	r7, #12
 801df4c:	46bd      	mov	sp, r7
 801df4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df52:	4770      	bx	lr

0801df54 <MX_RTC_Init>:

void MX_RTC_Init(void)
{
 801df54:	b580      	push	{r7, lr}
 801df56:	b090      	sub	sp, #64	; 0x40
 801df58:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime = {0};
 801df5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801df5e:	2200      	movs	r2, #0
 801df60:	601a      	str	r2, [r3, #0]
 801df62:	605a      	str	r2, [r3, #4]
 801df64:	609a      	str	r2, [r3, #8]
 801df66:	60da      	str	r2, [r3, #12]
 801df68:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 801df6a:	2300      	movs	r3, #0
 801df6c:	62bb      	str	r3, [r7, #40]	; 0x28
	RTC_AlarmTypeDef sAlarm = {0};
 801df6e:	463b      	mov	r3, r7
 801df70:	2228      	movs	r2, #40	; 0x28
 801df72:	2100      	movs	r1, #0
 801df74:	4618      	mov	r0, r3
 801df76:	f003 f947 	bl	8021208 <memset>

	/** Initialize RTC Only
	*/
	hrtc.Instance = RTC;
 801df7a:	4b49      	ldr	r3, [pc, #292]	; (801e0a0 <MX_RTC_Init+0x14c>)
 801df7c:	4a49      	ldr	r2, [pc, #292]	; (801e0a4 <MX_RTC_Init+0x150>)
 801df7e:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 801df80:	4b47      	ldr	r3, [pc, #284]	; (801e0a0 <MX_RTC_Init+0x14c>)
 801df82:	2200      	movs	r2, #0
 801df84:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 124;
 801df86:	4b46      	ldr	r3, [pc, #280]	; (801e0a0 <MX_RTC_Init+0x14c>)
 801df88:	227c      	movs	r2, #124	; 0x7c
 801df8a:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 7999;
 801df8c:	4b44      	ldr	r3, [pc, #272]	; (801e0a0 <MX_RTC_Init+0x14c>)
 801df8e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 801df92:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 801df94:	4b42      	ldr	r3, [pc, #264]	; (801e0a0 <MX_RTC_Init+0x14c>)
 801df96:	2200      	movs	r2, #0
 801df98:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 801df9a:	4b41      	ldr	r3, [pc, #260]	; (801e0a0 <MX_RTC_Init+0x14c>)
 801df9c:	2200      	movs	r2, #0
 801df9e:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 801dfa0:	4b3f      	ldr	r3, [pc, #252]	; (801e0a0 <MX_RTC_Init+0x14c>)
 801dfa2:	2200      	movs	r2, #0
 801dfa4:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 801dfa6:	4b3e      	ldr	r3, [pc, #248]	; (801e0a0 <MX_RTC_Init+0x14c>)
 801dfa8:	2200      	movs	r2, #0
 801dfaa:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 801dfac:	483c      	ldr	r0, [pc, #240]	; (801e0a0 <MX_RTC_Init+0x14c>)
 801dfae:	f7ea f94f 	bl	8008250 <HAL_RTC_Init>
 801dfb2:	4603      	mov	r3, r0
 801dfb4:	2b00      	cmp	r3, #0
 801dfb6:	d001      	beq.n	801dfbc <MX_RTC_Init+0x68>
	{
		Error_Handler();
 801dfb8:	f7e2 fdf2 	bl	8000ba0 <Error_Handler>
	}

	/** Initialize RTC and set the Time and Date
	*/
	  sTime.Hours = 10;
 801dfbc:	230a      	movs	r3, #10
 801dfbe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	  sTime.Minutes = 0;
 801dfc2:	2300      	movs	r3, #0
 801dfc4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	  sTime.Seconds = 0;
 801dfc8:	2300      	movs	r3, #0
 801dfca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801dfce:	2300      	movs	r3, #0
 801dfd0:	63bb      	str	r3, [r7, #56]	; 0x38
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801dfd2:	2300      	movs	r3, #0
 801dfd4:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 801dfd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801dfda:	2201      	movs	r2, #1
 801dfdc:	4619      	mov	r1, r3
 801dfde:	4830      	ldr	r0, [pc, #192]	; (801e0a0 <MX_RTC_Init+0x14c>)
 801dfe0:	f7ea f9ae 	bl	8008340 <HAL_RTC_SetTime>
 801dfe4:	4603      	mov	r3, r0
 801dfe6:	2b00      	cmp	r3, #0
 801dfe8:	d001      	beq.n	801dfee <MX_RTC_Init+0x9a>
	  {
	    Error_Handler();
 801dfea:	f7e2 fdd9 	bl	8000ba0 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 801dfee:	2301      	movs	r3, #1
 801dff0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	  sDate.Month = RTC_MONTH_MARCH;
 801dff4:	2303      	movs	r3, #3
 801dff6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	  sDate.Date = 0x21;
 801dffa:	2321      	movs	r3, #33	; 0x21
 801dffc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	  sDate.Year = 0x23;
 801e000:	2323      	movs	r3, #35	; 0x23
 801e002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 801e006:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e00a:	2201      	movs	r2, #1
 801e00c:	4619      	mov	r1, r3
 801e00e:	4824      	ldr	r0, [pc, #144]	; (801e0a0 <MX_RTC_Init+0x14c>)
 801e010:	f7ea fa34 	bl	800847c <HAL_RTC_SetDate>
 801e014:	4603      	mov	r3, r0
 801e016:	2b00      	cmp	r3, #0
 801e018:	d001      	beq.n	801e01e <MX_RTC_Init+0xca>
	  {
	    Error_Handler();
 801e01a:	f7e2 fdc1 	bl	8000ba0 <Error_Handler>
	  }

	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 801e01e:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e022:	481f      	ldr	r0, [pc, #124]	; (801e0a0 <MX_RTC_Init+0x14c>)
 801e024:	f7ea fbfe 	bl	8008824 <HAL_RTC_DeactivateAlarm>

	/** Enable the Alarm A
	*/
	sAlarm.AlarmTime.Hours = 10;
 801e028:	230a      	movs	r3, #10
 801e02a:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 5;
 801e02c:	2305      	movs	r3, #5
 801e02e:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0;
 801e030:	2300      	movs	r3, #0
 801e032:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0;
 801e034:	2300      	movs	r3, #0
 801e036:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801e038:	2300      	movs	r3, #0
 801e03a:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801e03c:	2300      	movs	r3, #0
 801e03e:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 801e040:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801e044:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 801e046:	2300      	movs	r3, #0
 801e048:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 801e04a:	2300      	movs	r3, #0
 801e04c:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDay = 20;
 801e04e:	2314      	movs	r3, #20
 801e050:	f887 3020 	strb.w	r3, [r7, #32]
	sAlarm.Alarm = RTC_ALARM_A;
 801e054:	f44f 7380 	mov.w	r3, #256	; 0x100
 801e058:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 801e05a:	463b      	mov	r3, r7
 801e05c:	2201      	movs	r2, #1
 801e05e:	4619      	mov	r1, r3
 801e060:	480f      	ldr	r0, [pc, #60]	; (801e0a0 <MX_RTC_Init+0x14c>)
 801e062:	f7ea fa93 	bl	800858c <HAL_RTC_SetAlarm_IT>
 801e066:	4603      	mov	r3, r0
 801e068:	2b00      	cmp	r3, #0
 801e06a:	d001      	beq.n	801e070 <MX_RTC_Init+0x11c>
	{
		Error_Handler();
 801e06c:	f7e2 fd98 	bl	8000ba0 <Error_Handler>
	}

	/** Enable the Alarm B
	*/
	sAlarm.AlarmTime.Hours = 0x1;
 801e070:	2301      	movs	r3, #1
 801e072:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0x2;
 801e074:	2302      	movs	r3, #2
 801e076:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0x3;
 801e078:	2303      	movs	r3, #3
 801e07a:	70bb      	strb	r3, [r7, #2]
	sAlarm.Alarm = RTC_ALARM_B;
 801e07c:	f44f 7300 	mov.w	r3, #512	; 0x200
 801e080:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 801e082:	463b      	mov	r3, r7
 801e084:	2201      	movs	r2, #1
 801e086:	4619      	mov	r1, r3
 801e088:	4805      	ldr	r0, [pc, #20]	; (801e0a0 <MX_RTC_Init+0x14c>)
 801e08a:	f7ea fa7f 	bl	800858c <HAL_RTC_SetAlarm_IT>
 801e08e:	4603      	mov	r3, r0
 801e090:	2b00      	cmp	r3, #0
 801e092:	d001      	beq.n	801e098 <MX_RTC_Init+0x144>
	{
		Error_Handler();
 801e094:	f7e2 fd84 	bl	8000ba0 <Error_Handler>
	}
}
 801e098:	bf00      	nop
 801e09a:	3740      	adds	r7, #64	; 0x40
 801e09c:	46bd      	mov	sp, r7
 801e09e:	bd80      	pop	{r7, pc}
 801e0a0:	2401a1e8 	.word	0x2401a1e8
 801e0a4:	58004000 	.word	0x58004000

0801e0a8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 801e0a8:	b580      	push	{r7, lr}
 801e0aa:	b0b2      	sub	sp, #200	; 0xc8
 801e0ac:	af00      	add	r7, sp, #0
 801e0ae:	6078      	str	r0, [r7, #4]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801e0b0:	f107 0308 	add.w	r3, r7, #8
 801e0b4:	22c0      	movs	r2, #192	; 0xc0
 801e0b6:	2100      	movs	r1, #0
 801e0b8:	4618      	mov	r0, r3
 801e0ba:	f003 f8a5 	bl	8021208 <memset>
	if(hrtc->Instance==RTC)
 801e0be:	687b      	ldr	r3, [r7, #4]
 801e0c0:	681b      	ldr	r3, [r3, #0]
 801e0c2:	4a12      	ldr	r2, [pc, #72]	; (801e10c <HAL_RTC_MspInit+0x64>)
 801e0c4:	4293      	cmp	r3, r2
 801e0c6:	d11d      	bne.n	801e104 <HAL_RTC_MspInit+0x5c>
	{
		/** Initializes the peripherals clock
		*/
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 801e0c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801e0cc:	60bb      	str	r3, [r7, #8]
		PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 801e0ce:	4b10      	ldr	r3, [pc, #64]	; (801e110 <HAL_RTC_MspInit+0x68>)
 801e0d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801e0d4:	f107 0308 	add.w	r3, r7, #8
 801e0d8:	4618      	mov	r0, r3
 801e0da:	f7e7 ff05 	bl	8005ee8 <HAL_RCCEx_PeriphCLKConfig>
 801e0de:	4603      	mov	r3, r0
 801e0e0:	2b00      	cmp	r3, #0
 801e0e2:	d001      	beq.n	801e0e8 <HAL_RTC_MspInit+0x40>
		{
		  Error_Handler();
 801e0e4:	f7e2 fd5c 	bl	8000ba0 <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_RTC_ENABLE();
 801e0e8:	4b0a      	ldr	r3, [pc, #40]	; (801e114 <HAL_RTC_MspInit+0x6c>)
 801e0ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e0ec:	4a09      	ldr	r2, [pc, #36]	; (801e114 <HAL_RTC_MspInit+0x6c>)
 801e0ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801e0f2:	6713      	str	r3, [r2, #112]	; 0x70

		/* RTC interrupt Init */
		HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 801e0f4:	2200      	movs	r2, #0
 801e0f6:	2100      	movs	r1, #0
 801e0f8:	2029      	movs	r0, #41	; 0x29
 801e0fa:	f7e3 f919 	bl	8001330 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 801e0fe:	2029      	movs	r0, #41	; 0x29
 801e100:	f7e3 f930 	bl	8001364 <HAL_NVIC_EnableIRQ>
	}
}
 801e104:	bf00      	nop
 801e106:	37c8      	adds	r7, #200	; 0xc8
 801e108:	46bd      	mov	sp, r7
 801e10a:	bd80      	pop	{r7, pc}
 801e10c:	58004000 	.word	0x58004000
 801e110:	00019300 	.word	0x00019300
 801e114:	58024400 	.word	0x58024400

0801e118 <MX_SDMMC1_SD_Init>:

/* Capacity */
FATFS *pfs;

void MX_SDMMC1_SD_Init(void)
{
 801e118:	b580      	push	{r7, lr}
 801e11a:	af00      	add	r7, sp, #0
	hsd1.Instance = SDMMC1;
 801e11c:	4b0e      	ldr	r3, [pc, #56]	; (801e158 <MX_SDMMC1_SD_Init+0x40>)
 801e11e:	4a0f      	ldr	r2, [pc, #60]	; (801e15c <MX_SDMMC1_SD_Init+0x44>)
 801e120:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 801e122:	4b0d      	ldr	r3, [pc, #52]	; (801e158 <MX_SDMMC1_SD_Init+0x40>)
 801e124:	2200      	movs	r2, #0
 801e126:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 801e128:	4b0b      	ldr	r3, [pc, #44]	; (801e158 <MX_SDMMC1_SD_Init+0x40>)
 801e12a:	2200      	movs	r2, #0
 801e12c:	609a      	str	r2, [r3, #8]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 801e12e:	4b0a      	ldr	r3, [pc, #40]	; (801e158 <MX_SDMMC1_SD_Init+0x40>)
 801e130:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801e134:	60da      	str	r2, [r3, #12]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 801e136:	4b08      	ldr	r3, [pc, #32]	; (801e158 <MX_SDMMC1_SD_Init+0x40>)
 801e138:	2200      	movs	r2, #0
 801e13a:	611a      	str	r2, [r3, #16]
	hsd1.Init.ClockDiv = 4;
 801e13c:	4b06      	ldr	r3, [pc, #24]	; (801e158 <MX_SDMMC1_SD_Init+0x40>)
 801e13e:	2204      	movs	r2, #4
 801e140:	615a      	str	r2, [r3, #20]
	if (HAL_SD_Init(&hsd1) != HAL_OK)
 801e142:	4805      	ldr	r0, [pc, #20]	; (801e158 <MX_SDMMC1_SD_Init+0x40>)
 801e144:	f7ea fd0c 	bl	8008b60 <HAL_SD_Init>
 801e148:	4603      	mov	r3, r0
 801e14a:	2b00      	cmp	r3, #0
 801e14c:	d001      	beq.n	801e152 <MX_SDMMC1_SD_Init+0x3a>
	{
		Error_Handler();
 801e14e:	f7e2 fd27 	bl	8000ba0 <Error_Handler>
	}
}
 801e152:	bf00      	nop
 801e154:	bd80      	pop	{r7, pc}
 801e156:	bf00      	nop
 801e158:	2401a240 	.word	0x2401a240
 801e15c:	52007000 	.word	0x52007000

0801e160 <HAL_SD_MspInit>:
		Error_Handler();
	}
}

void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 801e160:	b580      	push	{r7, lr}
 801e162:	b0be      	sub	sp, #248	; 0xf8
 801e164:	af00      	add	r7, sp, #0
 801e166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801e168:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801e16c:	2200      	movs	r2, #0
 801e16e:	601a      	str	r2, [r3, #0]
 801e170:	605a      	str	r2, [r3, #4]
 801e172:	609a      	str	r2, [r3, #8]
 801e174:	60da      	str	r2, [r3, #12]
 801e176:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801e178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e17c:	22c0      	movs	r2, #192	; 0xc0
 801e17e:	2100      	movs	r1, #0
 801e180:	4618      	mov	r0, r3
 801e182:	f003 f841 	bl	8021208 <memset>
  if(hsd->Instance==SDMMC1)
 801e186:	687b      	ldr	r3, [r7, #4]
 801e188:	681b      	ldr	r3, [r3, #0]
 801e18a:	4a81      	ldr	r2, [pc, #516]	; (801e390 <HAL_SD_MspInit+0x230>)
 801e18c:	4293      	cmp	r3, r2
 801e18e:	f040 8086 	bne.w	801e29e <HAL_SD_MspInit+0x13e>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 801e192:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801e196:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 801e198:	2300      	movs	r3, #0
 801e19a:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801e19c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e1a0:	4618      	mov	r0, r3
 801e1a2:	f7e7 fea1 	bl	8005ee8 <HAL_RCCEx_PeriphCLKConfig>
 801e1a6:	4603      	mov	r3, r0
 801e1a8:	2b00      	cmp	r3, #0
 801e1aa:	d001      	beq.n	801e1b0 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 801e1ac:	f7e2 fcf8 	bl	8000ba0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 801e1b0:	4b78      	ldr	r3, [pc, #480]	; (801e394 <HAL_SD_MspInit+0x234>)
 801e1b2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 801e1b6:	4a77      	ldr	r2, [pc, #476]	; (801e394 <HAL_SD_MspInit+0x234>)
 801e1b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801e1bc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 801e1c0:	4b74      	ldr	r3, [pc, #464]	; (801e394 <HAL_SD_MspInit+0x234>)
 801e1c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 801e1c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801e1ca:	623b      	str	r3, [r7, #32]
 801e1cc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 801e1ce:	4b71      	ldr	r3, [pc, #452]	; (801e394 <HAL_SD_MspInit+0x234>)
 801e1d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801e1d4:	4a6f      	ldr	r2, [pc, #444]	; (801e394 <HAL_SD_MspInit+0x234>)
 801e1d6:	f043 0304 	orr.w	r3, r3, #4
 801e1da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801e1de:	4b6d      	ldr	r3, [pc, #436]	; (801e394 <HAL_SD_MspInit+0x234>)
 801e1e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801e1e4:	f003 0304 	and.w	r3, r3, #4
 801e1e8:	61fb      	str	r3, [r7, #28]
 801e1ea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801e1ec:	4b69      	ldr	r3, [pc, #420]	; (801e394 <HAL_SD_MspInit+0x234>)
 801e1ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801e1f2:	4a68      	ldr	r2, [pc, #416]	; (801e394 <HAL_SD_MspInit+0x234>)
 801e1f4:	f043 0308 	orr.w	r3, r3, #8
 801e1f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801e1fc:	4b65      	ldr	r3, [pc, #404]	; (801e394 <HAL_SD_MspInit+0x234>)
 801e1fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801e202:	f003 0308 	and.w	r3, r3, #8
 801e206:	61bb      	str	r3, [r7, #24]
 801e208:	69bb      	ldr	r3, [r7, #24]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 801e20a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 801e20e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801e212:	2302      	movs	r3, #2
 801e214:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801e218:	2301      	movs	r3, #1
 801e21a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801e21e:	2303      	movs	r3, #3
 801e220:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 801e224:	230c      	movs	r3, #12
 801e226:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801e22a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801e22e:	4619      	mov	r1, r3
 801e230:	4859      	ldr	r0, [pc, #356]	; (801e398 <HAL_SD_MspInit+0x238>)
 801e232:	f7e4 fd7b 	bl	8002d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 801e236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801e23a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801e23e:	2302      	movs	r3, #2
 801e240:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e244:	2300      	movs	r3, #0
 801e246:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801e24a:	2303      	movs	r3, #3
 801e24c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 801e250:	230c      	movs	r3, #12
 801e252:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801e256:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801e25a:	4619      	mov	r1, r3
 801e25c:	484e      	ldr	r0, [pc, #312]	; (801e398 <HAL_SD_MspInit+0x238>)
 801e25e:	f7e4 fd65 	bl	8002d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801e262:	2304      	movs	r3, #4
 801e264:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801e268:	2302      	movs	r3, #2
 801e26a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801e26e:	2301      	movs	r3, #1
 801e270:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801e274:	2303      	movs	r3, #3
 801e276:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 801e27a:	230c      	movs	r3, #12
 801e27c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801e280:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801e284:	4619      	mov	r1, r3
 801e286:	4845      	ldr	r0, [pc, #276]	; (801e39c <HAL_SD_MspInit+0x23c>)
 801e288:	f7e4 fd50 	bl	8002d2c <HAL_GPIO_Init>
    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 6, 0);
 801e28c:	2200      	movs	r2, #0
 801e28e:	2106      	movs	r1, #6
 801e290:	2031      	movs	r0, #49	; 0x31
 801e292:	f7e3 f84d 	bl	8001330 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 801e296:	2031      	movs	r0, #49	; 0x31
 801e298:	f7e3 f864 	bl	8001364 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 801e29c:	e073      	b.n	801e386 <HAL_SD_MspInit+0x226>
  else if(hsd->Instance==SDMMC2)
 801e29e:	687b      	ldr	r3, [r7, #4]
 801e2a0:	681b      	ldr	r3, [r3, #0]
 801e2a2:	4a3f      	ldr	r2, [pc, #252]	; (801e3a0 <HAL_SD_MspInit+0x240>)
 801e2a4:	4293      	cmp	r3, r2
 801e2a6:	d16e      	bne.n	801e386 <HAL_SD_MspInit+0x226>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 801e2a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801e2ac:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 801e2ae:	2300      	movs	r3, #0
 801e2b0:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801e2b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e2b6:	4618      	mov	r0, r3
 801e2b8:	f7e7 fe16 	bl	8005ee8 <HAL_RCCEx_PeriphCLKConfig>
 801e2bc:	4603      	mov	r3, r0
 801e2be:	2b00      	cmp	r3, #0
 801e2c0:	d001      	beq.n	801e2c6 <HAL_SD_MspInit+0x166>
      Error_Handler();
 801e2c2:	f7e2 fc6d 	bl	8000ba0 <Error_Handler>
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 801e2c6:	4b33      	ldr	r3, [pc, #204]	; (801e394 <HAL_SD_MspInit+0x234>)
 801e2c8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 801e2cc:	4a31      	ldr	r2, [pc, #196]	; (801e394 <HAL_SD_MspInit+0x234>)
 801e2ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801e2d2:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 801e2d6:	4b2f      	ldr	r3, [pc, #188]	; (801e394 <HAL_SD_MspInit+0x234>)
 801e2d8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 801e2dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801e2e0:	617b      	str	r3, [r7, #20]
 801e2e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801e2e4:	4b2b      	ldr	r3, [pc, #172]	; (801e394 <HAL_SD_MspInit+0x234>)
 801e2e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801e2ea:	4a2a      	ldr	r2, [pc, #168]	; (801e394 <HAL_SD_MspInit+0x234>)
 801e2ec:	f043 0302 	orr.w	r3, r3, #2
 801e2f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801e2f4:	4b27      	ldr	r3, [pc, #156]	; (801e394 <HAL_SD_MspInit+0x234>)
 801e2f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801e2fa:	f003 0302 	and.w	r3, r3, #2
 801e2fe:	613b      	str	r3, [r7, #16]
 801e300:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801e302:	4b24      	ldr	r3, [pc, #144]	; (801e394 <HAL_SD_MspInit+0x234>)
 801e304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801e308:	4a22      	ldr	r2, [pc, #136]	; (801e394 <HAL_SD_MspInit+0x234>)
 801e30a:	f043 0308 	orr.w	r3, r3, #8
 801e30e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801e312:	4b20      	ldr	r3, [pc, #128]	; (801e394 <HAL_SD_MspInit+0x234>)
 801e314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801e318:	f003 0308 	and.w	r3, r3, #8
 801e31c:	60fb      	str	r3, [r7, #12]
 801e31e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801e320:	23c0      	movs	r3, #192	; 0xc0
 801e322:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801e326:	2302      	movs	r3, #2
 801e328:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e32c:	2300      	movs	r3, #0
 801e32e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801e332:	2303      	movs	r3, #3
 801e334:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDIO2;
 801e338:	230b      	movs	r3, #11
 801e33a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801e33e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801e342:	4619      	mov	r1, r3
 801e344:	4815      	ldr	r0, [pc, #84]	; (801e39c <HAL_SD_MspInit+0x23c>)
 801e346:	f7e4 fcf1 	bl	8002d2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_14;
 801e34a:	f244 0308 	movw	r3, #16392	; 0x4008
 801e34e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801e352:	2302      	movs	r3, #2
 801e354:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e358:	2300      	movs	r3, #0
 801e35a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801e35e:	2303      	movs	r3, #3
 801e360:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 801e364:	2309      	movs	r3, #9
 801e366:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801e36a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801e36e:	4619      	mov	r1, r3
 801e370:	480c      	ldr	r0, [pc, #48]	; (801e3a4 <HAL_SD_MspInit+0x244>)
 801e372:	f7e4 fcdb 	bl	8002d2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 6, 0);
 801e376:	2200      	movs	r2, #0
 801e378:	2106      	movs	r1, #6
 801e37a:	207c      	movs	r0, #124	; 0x7c
 801e37c:	f7e2 ffd8 	bl	8001330 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 801e380:	207c      	movs	r0, #124	; 0x7c
 801e382:	f7e2 ffef 	bl	8001364 <HAL_NVIC_EnableIRQ>
}
 801e386:	bf00      	nop
 801e388:	37f8      	adds	r7, #248	; 0xf8
 801e38a:	46bd      	mov	sp, r7
 801e38c:	bd80      	pop	{r7, pc}
 801e38e:	bf00      	nop
 801e390:	52007000 	.word	0x52007000
 801e394:	58024400 	.word	0x58024400
 801e398:	58020800 	.word	0x58020800
 801e39c:	58020c00 	.word	0x58020c00
 801e3a0:	48022400 	.word	0x48022400
 801e3a4:	58020400 	.word	0x58020400

0801e3a8 <CreateNewDir>:
   	fresult = f_mount(&FatFs,"",0);
    return fresult;
}

void CreateNewDir(uint16_t year, uint8_t month, uint8_t day)
{
 801e3a8:	b580      	push	{r7, lr}
 801e3aa:	b084      	sub	sp, #16
 801e3ac:	af00      	add	r7, sp, #0
 801e3ae:	4603      	mov	r3, r0
 801e3b0:	80fb      	strh	r3, [r7, #6]
 801e3b2:	460b      	mov	r3, r1
 801e3b4:	717b      	strb	r3, [r7, #5]
 801e3b6:	4613      	mov	r3, r2
 801e3b8:	713b      	strb	r3, [r7, #4]
	TCHAR buffer[5];
	f_mount(&FatFs,"",1);
 801e3ba:	2201      	movs	r2, #1
 801e3bc:	492b      	ldr	r1, [pc, #172]	; (801e46c <CreateNewDir+0xc4>)
 801e3be:	482c      	ldr	r0, [pc, #176]	; (801e470 <CreateNewDir+0xc8>)
 801e3c0:	f7f6 fcca 	bl	8014d58 <f_mount>
	sprintf(buffer,"%d",year);
 801e3c4:	88fa      	ldrh	r2, [r7, #6]
 801e3c6:	f107 0308 	add.w	r3, r7, #8
 801e3ca:	492a      	ldr	r1, [pc, #168]	; (801e474 <CreateNewDir+0xcc>)
 801e3cc:	4618      	mov	r0, r3
 801e3ce:	f003 fe7b 	bl	80220c8 <siprintf>
	if(f_chdir(buffer) != FR_OK)
 801e3d2:	f107 0308 	add.w	r3, r7, #8
 801e3d6:	4618      	mov	r0, r3
 801e3d8:	f7f6 fd04 	bl	8014de4 <f_chdir>
 801e3dc:	4603      	mov	r3, r0
 801e3de:	2b00      	cmp	r3, #0
 801e3e0:	d009      	beq.n	801e3f6 <CreateNewDir+0x4e>
	{
		f_mkdir(buffer);
 801e3e2:	f107 0308 	add.w	r3, r7, #8
 801e3e6:	4618      	mov	r0, r3
 801e3e8:	f7f6 fd46 	bl	8014e78 <f_mkdir>
		f_chdir(buffer);
 801e3ec:	f107 0308 	add.w	r3, r7, #8
 801e3f0:	4618      	mov	r0, r3
 801e3f2:	f7f6 fcf7 	bl	8014de4 <f_chdir>
	}
	sprintf(buffer,"%d",month);
 801e3f6:	797a      	ldrb	r2, [r7, #5]
 801e3f8:	f107 0308 	add.w	r3, r7, #8
 801e3fc:	491d      	ldr	r1, [pc, #116]	; (801e474 <CreateNewDir+0xcc>)
 801e3fe:	4618      	mov	r0, r3
 801e400:	f003 fe62 	bl	80220c8 <siprintf>
	if(f_chdir(buffer) != FR_OK)
 801e404:	f107 0308 	add.w	r3, r7, #8
 801e408:	4618      	mov	r0, r3
 801e40a:	f7f6 fceb 	bl	8014de4 <f_chdir>
 801e40e:	4603      	mov	r3, r0
 801e410:	2b00      	cmp	r3, #0
 801e412:	d009      	beq.n	801e428 <CreateNewDir+0x80>
	{
		f_mkdir(buffer);
 801e414:	f107 0308 	add.w	r3, r7, #8
 801e418:	4618      	mov	r0, r3
 801e41a:	f7f6 fd2d 	bl	8014e78 <f_mkdir>
		f_chdir(buffer);
 801e41e:	f107 0308 	add.w	r3, r7, #8
 801e422:	4618      	mov	r0, r3
 801e424:	f7f6 fcde 	bl	8014de4 <f_chdir>
	}
	sprintf(buffer,"%d",day);
 801e428:	793a      	ldrb	r2, [r7, #4]
 801e42a:	f107 0308 	add.w	r3, r7, #8
 801e42e:	4911      	ldr	r1, [pc, #68]	; (801e474 <CreateNewDir+0xcc>)
 801e430:	4618      	mov	r0, r3
 801e432:	f003 fe49 	bl	80220c8 <siprintf>
	if(f_chdir(buffer) != FR_OK) {
 801e436:	f107 0308 	add.w	r3, r7, #8
 801e43a:	4618      	mov	r0, r3
 801e43c:	f7f6 fcd2 	bl	8014de4 <f_chdir>
 801e440:	4603      	mov	r3, r0
 801e442:	2b00      	cmp	r3, #0
 801e444:	d004      	beq.n	801e450 <CreateNewDir+0xa8>
		f_mkdir(buffer);
 801e446:	f107 0308 	add.w	r3, r7, #8
 801e44a:	4618      	mov	r0, r3
 801e44c:	f7f6 fd14 	bl	8014e78 <f_mkdir>
	}
	fresult = f_mount(&FatFs,"",0);
 801e450:	2200      	movs	r2, #0
 801e452:	4906      	ldr	r1, [pc, #24]	; (801e46c <CreateNewDir+0xc4>)
 801e454:	4806      	ldr	r0, [pc, #24]	; (801e470 <CreateNewDir+0xc8>)
 801e456:	f7f6 fc7f 	bl	8014d58 <f_mount>
 801e45a:	4603      	mov	r3, r0
 801e45c:	461a      	mov	r2, r3
 801e45e:	4b06      	ldr	r3, [pc, #24]	; (801e478 <CreateNewDir+0xd0>)
 801e460:	701a      	strb	r2, [r3, #0]
}
 801e462:	bf00      	nop
 801e464:	3710      	adds	r7, #16
 801e466:	46bd      	mov	sp, r7
 801e468:	bd80      	pop	{r7, pc}
 801e46a:	bf00      	nop
 801e46c:	08025bfc 	.word	0x08025bfc
 801e470:	2401a574 	.word	0x2401a574
 801e474:	08025c00 	.word	0x08025c00
 801e478:	2401a570 	.word	0x2401a570

0801e47c <MX_SPI4_Init>:
DMA_HandleTypeDef hdma_spi5_rx;
DMA_HandleTypeDef hdma_spi5_tx;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 801e47c:	b580      	push	{r7, lr}
 801e47e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI5 parameter configuration*/
  hspi4.Instance = SPI4;
 801e480:	4b1e      	ldr	r3, [pc, #120]	; (801e4fc <MX_SPI4_Init+0x80>)
 801e482:	4a1f      	ldr	r2, [pc, #124]	; (801e500 <MX_SPI4_Init+0x84>)
 801e484:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode              = SPI_MODE_MASTER;
 801e486:	4b1d      	ldr	r3, [pc, #116]	; (801e4fc <MX_SPI4_Init+0x80>)
 801e488:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 801e48c:	605a      	str	r2, [r3, #4]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 801e48e:	4b1b      	ldr	r3, [pc, #108]	; (801e4fc <MX_SPI4_Init+0x80>)
 801e490:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801e494:	61da      	str	r2, [r3, #28]
  hspi4.Init.Direction         = SPI_DIRECTION_2LINES;
 801e496:	4b19      	ldr	r3, [pc, #100]	; (801e4fc <MX_SPI4_Init+0x80>)
 801e498:	2200      	movs	r2, #0
 801e49a:	609a      	str	r2, [r3, #8]
  hspi4.Init.CLKPhase          = SPI_PHASE_2EDGE;
 801e49c:	4b17      	ldr	r3, [pc, #92]	; (801e4fc <MX_SPI4_Init+0x80>)
 801e49e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801e4a2:	615a      	str	r2, [r3, #20]
  hspi4.Init.CLKPolarity       = SPI_POLARITY_LOW;
 801e4a4:	4b15      	ldr	r3, [pc, #84]	; (801e4fc <MX_SPI4_Init+0x80>)
 801e4a6:	2200      	movs	r2, #0
 801e4a8:	611a      	str	r2, [r3, #16]
  hspi4.Init.DataSize          = SPI_DATASIZE_8BIT;
 801e4aa:	4b14      	ldr	r3, [pc, #80]	; (801e4fc <MX_SPI4_Init+0x80>)
 801e4ac:	2207      	movs	r2, #7
 801e4ae:	60da      	str	r2, [r3, #12]
  hspi4.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 801e4b0:	4b12      	ldr	r3, [pc, #72]	; (801e4fc <MX_SPI4_Init+0x80>)
 801e4b2:	2200      	movs	r2, #0
 801e4b4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode            = SPI_TIMODE_DISABLE;
 801e4b6:	4b11      	ldr	r3, [pc, #68]	; (801e4fc <MX_SPI4_Init+0x80>)
 801e4b8:	2200      	movs	r2, #0
 801e4ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 801e4bc:	4b0f      	ldr	r3, [pc, #60]	; (801e4fc <MX_SPI4_Init+0x80>)
 801e4be:	2200      	movs	r2, #0
 801e4c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial     = 7;
 801e4c2:	4b0e      	ldr	r3, [pc, #56]	; (801e4fc <MX_SPI4_Init+0x80>)
 801e4c4:	2207      	movs	r2, #7
 801e4c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength         = SPI_CRC_LENGTH_8BIT;
 801e4c8:	4b0c      	ldr	r3, [pc, #48]	; (801e4fc <MX_SPI4_Init+0x80>)
 801e4ca:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 801e4ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSS               = SPI_NSS_SOFT;
 801e4d0:	4b0a      	ldr	r3, [pc, #40]	; (801e4fc <MX_SPI4_Init+0x80>)
 801e4d2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 801e4d6:	619a      	str	r2, [r3, #24]
  hspi4.Init.NSSPMode          = SPI_NSS_PULSE_DISABLE;
 801e4d8:	4b08      	ldr	r3, [pc, #32]	; (801e4fc <MX_SPI4_Init+0x80>)
 801e4da:	2200      	movs	r2, #0
 801e4dc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 801e4de:	4b07      	ldr	r3, [pc, #28]	; (801e4fc <MX_SPI4_Init+0x80>)
 801e4e0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801e4e4:	655a      	str	r2, [r3, #84]	; 0x54
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 801e4e6:	4805      	ldr	r0, [pc, #20]	; (801e4fc <MX_SPI4_Init+0x80>)
 801e4e8:	f7ec f960 	bl	800a7ac <HAL_SPI_Init>
 801e4ec:	4603      	mov	r3, r0
 801e4ee:	2b00      	cmp	r3, #0
 801e4f0:	d001      	beq.n	801e4f6 <MX_SPI4_Init+0x7a>
  {
    Error_Handler();
 801e4f2:	f7e2 fb55 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 801e4f6:	bf00      	nop
 801e4f8:	bd80      	pop	{r7, pc}
 801e4fa:	bf00      	nop
 801e4fc:	2401a83c 	.word	0x2401a83c
 801e500:	40013400 	.word	0x40013400

0801e504 <MX_SPI5_Init>:

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 801e504:	b580      	push	{r7, lr}
 801e506:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 0 */
	  hspi5.Instance               = SPI5;
 801e508:	4b1d      	ldr	r3, [pc, #116]	; (801e580 <MX_SPI5_Init+0x7c>)
 801e50a:	4a1e      	ldr	r2, [pc, #120]	; (801e584 <MX_SPI5_Init+0x80>)
 801e50c:	601a      	str	r2, [r3, #0]
	  hspi5.Init.Mode 				= SPI_MODE_MASTER;
 801e50e:	4b1c      	ldr	r3, [pc, #112]	; (801e580 <MX_SPI5_Init+0x7c>)
 801e510:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 801e514:	605a      	str	r2, [r3, #4]
	  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 801e516:	4b1a      	ldr	r3, [pc, #104]	; (801e580 <MX_SPI5_Init+0x7c>)
 801e518:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 801e51c:	61da      	str	r2, [r3, #28]
	  hspi5.Init.Direction         = SPI_DIRECTION_2LINES;
 801e51e:	4b18      	ldr	r3, [pc, #96]	; (801e580 <MX_SPI5_Init+0x7c>)
 801e520:	2200      	movs	r2, #0
 801e522:	609a      	str	r2, [r3, #8]
	  hspi5.Init.CLKPhase          = SPI_PHASE_1EDGE;
 801e524:	4b16      	ldr	r3, [pc, #88]	; (801e580 <MX_SPI5_Init+0x7c>)
 801e526:	2200      	movs	r2, #0
 801e528:	615a      	str	r2, [r3, #20]
	  hspi5.Init.CLKPolarity       = SPI_POLARITY_LOW;
 801e52a:	4b15      	ldr	r3, [pc, #84]	; (801e580 <MX_SPI5_Init+0x7c>)
 801e52c:	2200      	movs	r2, #0
 801e52e:	611a      	str	r2, [r3, #16]
	  hspi5.Init.DataSize          = SPI_DATASIZE_8BIT;
 801e530:	4b13      	ldr	r3, [pc, #76]	; (801e580 <MX_SPI5_Init+0x7c>)
 801e532:	2207      	movs	r2, #7
 801e534:	60da      	str	r2, [r3, #12]
	  hspi5.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 801e536:	4b12      	ldr	r3, [pc, #72]	; (801e580 <MX_SPI5_Init+0x7c>)
 801e538:	2200      	movs	r2, #0
 801e53a:	621a      	str	r2, [r3, #32]
	  hspi5.Init.TIMode            = SPI_TIMODE_DISABLE;
 801e53c:	4b10      	ldr	r3, [pc, #64]	; (801e580 <MX_SPI5_Init+0x7c>)
 801e53e:	2200      	movs	r2, #0
 801e540:	625a      	str	r2, [r3, #36]	; 0x24
	  hspi5.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 801e542:	4b0f      	ldr	r3, [pc, #60]	; (801e580 <MX_SPI5_Init+0x7c>)
 801e544:	2200      	movs	r2, #0
 801e546:	629a      	str	r2, [r3, #40]	; 0x28
	  hspi5.Init.CRCPolynomial     = 7;
 801e548:	4b0d      	ldr	r3, [pc, #52]	; (801e580 <MX_SPI5_Init+0x7c>)
 801e54a:	2207      	movs	r2, #7
 801e54c:	62da      	str	r2, [r3, #44]	; 0x2c
	  hspi5.Init.CRCLength         = SPI_CRC_LENGTH_8BIT;
 801e54e:	4b0c      	ldr	r3, [pc, #48]	; (801e580 <MX_SPI5_Init+0x7c>)
 801e550:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 801e554:	631a      	str	r2, [r3, #48]	; 0x30
	  hspi5.Init.NSS               = SPI_NSS_HARD_OUTPUT;
 801e556:	4b0a      	ldr	r3, [pc, #40]	; (801e580 <MX_SPI5_Init+0x7c>)
 801e558:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 801e55c:	619a      	str	r2, [r3, #24]
	  hspi5.Init.NSSPMode          = SPI_NSS_PULSE_DISABLE;
 801e55e:	4b08      	ldr	r3, [pc, #32]	; (801e580 <MX_SPI5_Init+0x7c>)
 801e560:	2200      	movs	r2, #0
 801e562:	635a      	str	r2, [r3, #52]	; 0x34
	  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;  /* Recommended setting to avoid glitches */
 801e564:	4b06      	ldr	r3, [pc, #24]	; (801e580 <MX_SPI5_Init+0x7c>)
 801e566:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801e56a:	655a      	str	r2, [r3, #84]	; 0x54

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */

  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 801e56c:	4804      	ldr	r0, [pc, #16]	; (801e580 <MX_SPI5_Init+0x7c>)
 801e56e:	f7ec f91d 	bl	800a7ac <HAL_SPI_Init>
 801e572:	4603      	mov	r3, r0
 801e574:	2b00      	cmp	r3, #0
 801e576:	d001      	beq.n	801e57c <MX_SPI5_Init+0x78>
  {
    Error_Handler();
 801e578:	f7e2 fb12 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 801e57c:	bf00      	nop
 801e57e:	bd80      	pop	{r7, pc}
 801e580:	2401a8c4 	.word	0x2401a8c4
 801e584:	40015000 	.word	0x40015000

0801e588 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 801e588:	b580      	push	{r7, lr}
 801e58a:	b0bc      	sub	sp, #240	; 0xf0
 801e58c:	af00      	add	r7, sp, #0
 801e58e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801e590:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801e594:	2200      	movs	r2, #0
 801e596:	601a      	str	r2, [r3, #0]
 801e598:	605a      	str	r2, [r3, #4]
 801e59a:	609a      	str	r2, [r3, #8]
 801e59c:	60da      	str	r2, [r3, #12]
 801e59e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801e5a0:	f107 031c 	add.w	r3, r7, #28
 801e5a4:	22c0      	movs	r2, #192	; 0xc0
 801e5a6:	2100      	movs	r1, #0
 801e5a8:	4618      	mov	r0, r3
 801e5aa:	f002 fe2d 	bl	8021208 <memset>
  if(hspi->Instance==SPI5)
 801e5ae:	687b      	ldr	r3, [r7, #4]
 801e5b0:	681b      	ldr	r3, [r3, #0]
 801e5b2:	4a91      	ldr	r2, [pc, #580]	; (801e7f8 <HAL_SPI_MspInit+0x270>)
 801e5b4:	4293      	cmp	r3, r2
 801e5b6:	f040 80cb 	bne.w	801e750 <HAL_SPI_MspInit+0x1c8>
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 801e5ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801e5be:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 801e5c0:	2300      	movs	r3, #0
 801e5c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801e5c6:	f107 031c 	add.w	r3, r7, #28
 801e5ca:	4618      	mov	r0, r3
 801e5cc:	f7e7 fc8c 	bl	8005ee8 <HAL_RCCEx_PeriphCLKConfig>
 801e5d0:	4603      	mov	r3, r0
 801e5d2:	2b00      	cmp	r3, #0
 801e5d4:	d001      	beq.n	801e5da <HAL_SPI_MspInit+0x52>
    {
      Error_Handler();
 801e5d6:	f7e2 fae3 	bl	8000ba0 <Error_Handler>
    }

    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 801e5da:	4b88      	ldr	r3, [pc, #544]	; (801e7fc <HAL_SPI_MspInit+0x274>)
 801e5dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801e5e0:	4a86      	ldr	r2, [pc, #536]	; (801e7fc <HAL_SPI_MspInit+0x274>)
 801e5e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801e5e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 801e5ea:	4b84      	ldr	r3, [pc, #528]	; (801e7fc <HAL_SPI_MspInit+0x274>)
 801e5ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801e5f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801e5f4:	61bb      	str	r3, [r7, #24]
 801e5f6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 801e5f8:	4b80      	ldr	r3, [pc, #512]	; (801e7fc <HAL_SPI_MspInit+0x274>)
 801e5fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801e5fe:	4a7f      	ldr	r2, [pc, #508]	; (801e7fc <HAL_SPI_MspInit+0x274>)
 801e600:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801e604:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801e608:	4b7c      	ldr	r3, [pc, #496]	; (801e7fc <HAL_SPI_MspInit+0x274>)
 801e60a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801e60e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801e612:	617b      	str	r3, [r7, #20]
 801e614:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 801e616:	4b79      	ldr	r3, [pc, #484]	; (801e7fc <HAL_SPI_MspInit+0x274>)
 801e618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801e61c:	4a77      	ldr	r2, [pc, #476]	; (801e7fc <HAL_SPI_MspInit+0x274>)
 801e61e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801e622:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801e626:	4b75      	ldr	r3, [pc, #468]	; (801e7fc <HAL_SPI_MspInit+0x274>)
 801e628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801e62c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801e630:	613b      	str	r3, [r7, #16]
 801e632:	693b      	ldr	r3, [r7, #16]
    /**SPI5 GPIO Configuration
    PK0     ------> SPI5_SCK
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 801e634:	2301      	movs	r3, #1
 801e636:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801e63a:	2302      	movs	r3, #2
 801e63c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e640:	2300      	movs	r3, #0
 801e642:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801e646:	2300      	movs	r3, #0
 801e648:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 801e64c:	2305      	movs	r3, #5
 801e64e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 801e652:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801e656:	4619      	mov	r1, r3
 801e658:	4869      	ldr	r0, [pc, #420]	; (801e800 <HAL_SPI_MspInit+0x278>)
 801e65a:	f7e4 fb67 	bl	8002d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 801e65e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 801e662:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801e666:	2302      	movs	r3, #2
 801e668:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e66c:	2300      	movs	r3, #0
 801e66e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801e672:	2300      	movs	r3, #0
 801e674:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 801e678:	2305      	movs	r3, #5
 801e67a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 801e67e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801e682:	4619      	mov	r1, r3
 801e684:	485f      	ldr	r0, [pc, #380]	; (801e804 <HAL_SPI_MspInit+0x27c>)
 801e686:	f7e4 fb51 	bl	8002d2c <HAL_GPIO_Init>

    /* SPI5 DMA Init */
    /* SPI5_RX Init */
    hdma_spi5_rx.Instance = DMA1_Stream0;
 801e68a:	4b5f      	ldr	r3, [pc, #380]	; (801e808 <HAL_SPI_MspInit+0x280>)
 801e68c:	4a5f      	ldr	r2, [pc, #380]	; (801e80c <HAL_SPI_MspInit+0x284>)
 801e68e:	601a      	str	r2, [r3, #0]
    hdma_spi5_rx.Init.Request = DMA_REQUEST_SPI5_RX;
 801e690:	4b5d      	ldr	r3, [pc, #372]	; (801e808 <HAL_SPI_MspInit+0x280>)
 801e692:	2255      	movs	r2, #85	; 0x55
 801e694:	605a      	str	r2, [r3, #4]
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801e696:	4b5c      	ldr	r3, [pc, #368]	; (801e808 <HAL_SPI_MspInit+0x280>)
 801e698:	2200      	movs	r2, #0
 801e69a:	609a      	str	r2, [r3, #8]
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 801e69c:	4b5a      	ldr	r3, [pc, #360]	; (801e808 <HAL_SPI_MspInit+0x280>)
 801e69e:	2200      	movs	r2, #0
 801e6a0:	60da      	str	r2, [r3, #12]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 801e6a2:	4b59      	ldr	r3, [pc, #356]	; (801e808 <HAL_SPI_MspInit+0x280>)
 801e6a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801e6a8:	611a      	str	r2, [r3, #16]
    hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 801e6aa:	4b57      	ldr	r3, [pc, #348]	; (801e808 <HAL_SPI_MspInit+0x280>)
 801e6ac:	2200      	movs	r2, #0
 801e6ae:	615a      	str	r2, [r3, #20]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 801e6b0:	4b55      	ldr	r3, [pc, #340]	; (801e808 <HAL_SPI_MspInit+0x280>)
 801e6b2:	2200      	movs	r2, #0
 801e6b4:	619a      	str	r2, [r3, #24]
    hdma_spi5_rx.Init.Mode = DMA_NORMAL;
 801e6b6:	4b54      	ldr	r3, [pc, #336]	; (801e808 <HAL_SPI_MspInit+0x280>)
 801e6b8:	2200      	movs	r2, #0
 801e6ba:	61da      	str	r2, [r3, #28]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_LOW;
 801e6bc:	4b52      	ldr	r3, [pc, #328]	; (801e808 <HAL_SPI_MspInit+0x280>)
 801e6be:	2200      	movs	r2, #0
 801e6c0:	621a      	str	r2, [r3, #32]
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801e6c2:	4b51      	ldr	r3, [pc, #324]	; (801e808 <HAL_SPI_MspInit+0x280>)
 801e6c4:	2200      	movs	r2, #0
 801e6c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 801e6c8:	484f      	ldr	r0, [pc, #316]	; (801e808 <HAL_SPI_MspInit+0x280>)
 801e6ca:	f7e2 fee9 	bl	80014a0 <HAL_DMA_Init>
 801e6ce:	4603      	mov	r3, r0
 801e6d0:	2b00      	cmp	r3, #0
 801e6d2:	d001      	beq.n	801e6d8 <HAL_SPI_MspInit+0x150>
    {
      Error_Handler();
 801e6d4:	f7e2 fa64 	bl	8000ba0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi5_rx);
 801e6d8:	687b      	ldr	r3, [r7, #4]
 801e6da:	4a4b      	ldr	r2, [pc, #300]	; (801e808 <HAL_SPI_MspInit+0x280>)
 801e6dc:	67da      	str	r2, [r3, #124]	; 0x7c
 801e6de:	4a4a      	ldr	r2, [pc, #296]	; (801e808 <HAL_SPI_MspInit+0x280>)
 801e6e0:	687b      	ldr	r3, [r7, #4]
 801e6e2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI5_TX Init */
    hdma_spi5_tx.Instance = DMA1_Stream1;
 801e6e4:	4b4a      	ldr	r3, [pc, #296]	; (801e810 <HAL_SPI_MspInit+0x288>)
 801e6e6:	4a4b      	ldr	r2, [pc, #300]	; (801e814 <HAL_SPI_MspInit+0x28c>)
 801e6e8:	601a      	str	r2, [r3, #0]
    hdma_spi5_tx.Init.Request = DMA_REQUEST_SPI5_TX;
 801e6ea:	4b49      	ldr	r3, [pc, #292]	; (801e810 <HAL_SPI_MspInit+0x288>)
 801e6ec:	2256      	movs	r2, #86	; 0x56
 801e6ee:	605a      	str	r2, [r3, #4]
    hdma_spi5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801e6f0:	4b47      	ldr	r3, [pc, #284]	; (801e810 <HAL_SPI_MspInit+0x288>)
 801e6f2:	2240      	movs	r2, #64	; 0x40
 801e6f4:	609a      	str	r2, [r3, #8]
    hdma_spi5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 801e6f6:	4b46      	ldr	r3, [pc, #280]	; (801e810 <HAL_SPI_MspInit+0x288>)
 801e6f8:	2200      	movs	r2, #0
 801e6fa:	60da      	str	r2, [r3, #12]
    hdma_spi5_tx.Init.MemInc = DMA_MINC_ENABLE;
 801e6fc:	4b44      	ldr	r3, [pc, #272]	; (801e810 <HAL_SPI_MspInit+0x288>)
 801e6fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801e702:	611a      	str	r2, [r3, #16]
    hdma_spi5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 801e704:	4b42      	ldr	r3, [pc, #264]	; (801e810 <HAL_SPI_MspInit+0x288>)
 801e706:	2200      	movs	r2, #0
 801e708:	615a      	str	r2, [r3, #20]
    hdma_spi5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 801e70a:	4b41      	ldr	r3, [pc, #260]	; (801e810 <HAL_SPI_MspInit+0x288>)
 801e70c:	2200      	movs	r2, #0
 801e70e:	619a      	str	r2, [r3, #24]
    hdma_spi5_tx.Init.Mode = DMA_NORMAL;
 801e710:	4b3f      	ldr	r3, [pc, #252]	; (801e810 <HAL_SPI_MspInit+0x288>)
 801e712:	2200      	movs	r2, #0
 801e714:	61da      	str	r2, [r3, #28]
    hdma_spi5_tx.Init.Priority = DMA_PRIORITY_LOW;
 801e716:	4b3e      	ldr	r3, [pc, #248]	; (801e810 <HAL_SPI_MspInit+0x288>)
 801e718:	2200      	movs	r2, #0
 801e71a:	621a      	str	r2, [r3, #32]
    hdma_spi5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801e71c:	4b3c      	ldr	r3, [pc, #240]	; (801e810 <HAL_SPI_MspInit+0x288>)
 801e71e:	2200      	movs	r2, #0
 801e720:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_tx) != HAL_OK)
 801e722:	483b      	ldr	r0, [pc, #236]	; (801e810 <HAL_SPI_MspInit+0x288>)
 801e724:	f7e2 febc 	bl	80014a0 <HAL_DMA_Init>
 801e728:	4603      	mov	r3, r0
 801e72a:	2b00      	cmp	r3, #0
 801e72c:	d001      	beq.n	801e732 <HAL_SPI_MspInit+0x1aa>
    {
      Error_Handler();
 801e72e:	f7e2 fa37 	bl	8000ba0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi5_tx);
 801e732:	687b      	ldr	r3, [r7, #4]
 801e734:	4a36      	ldr	r2, [pc, #216]	; (801e810 <HAL_SPI_MspInit+0x288>)
 801e736:	679a      	str	r2, [r3, #120]	; 0x78
 801e738:	4a35      	ldr	r2, [pc, #212]	; (801e810 <HAL_SPI_MspInit+0x288>)
 801e73a:	687b      	ldr	r3, [r7, #4]
 801e73c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI5 interrupt Init */
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 801e73e:	2200      	movs	r2, #0
 801e740:	2100      	movs	r1, #0
 801e742:	2055      	movs	r0, #85	; 0x55
 801e744:	f7e2 fdf4 	bl	8001330 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 801e748:	2055      	movs	r0, #85	; 0x55
 801e74a:	f7e2 fe0b 	bl	8001364 <HAL_NVIC_EnableIRQ>
  	HAL_NVIC_EnableIRQ(SPI4_IRQn);
  	/* USER CODE BEGIN SPI4_MspInit 1 */

  	/* USER CODE END SPI4_MspInit 1 */
    }
}
 801e74e:	e04f      	b.n	801e7f0 <HAL_SPI_MspInit+0x268>
  else if (hspi->Instance==SPI4)
 801e750:	687b      	ldr	r3, [r7, #4]
 801e752:	681b      	ldr	r3, [r3, #0]
 801e754:	4a30      	ldr	r2, [pc, #192]	; (801e818 <HAL_SPI_MspInit+0x290>)
 801e756:	4293      	cmp	r3, r2
 801e758:	d14a      	bne.n	801e7f0 <HAL_SPI_MspInit+0x268>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 801e75a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801e75e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 801e760:	2300      	movs	r3, #0
 801e762:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801e766:	f107 031c 	add.w	r3, r7, #28
 801e76a:	4618      	mov	r0, r3
 801e76c:	f7e7 fbbc 	bl	8005ee8 <HAL_RCCEx_PeriphCLKConfig>
 801e770:	4603      	mov	r3, r0
 801e772:	2b00      	cmp	r3, #0
 801e774:	d001      	beq.n	801e77a <HAL_SPI_MspInit+0x1f2>
  	  Error_Handler();
 801e776:	f7e2 fa13 	bl	8000ba0 <Error_Handler>
  	__HAL_RCC_SPI4_CLK_ENABLE();
 801e77a:	4b20      	ldr	r3, [pc, #128]	; (801e7fc <HAL_SPI_MspInit+0x274>)
 801e77c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801e780:	4a1e      	ldr	r2, [pc, #120]	; (801e7fc <HAL_SPI_MspInit+0x274>)
 801e782:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801e786:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 801e78a:	4b1c      	ldr	r3, [pc, #112]	; (801e7fc <HAL_SPI_MspInit+0x274>)
 801e78c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801e790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801e794:	60fb      	str	r3, [r7, #12]
 801e796:	68fb      	ldr	r3, [r7, #12]
  	__HAL_RCC_GPIOE_CLK_ENABLE();
 801e798:	4b18      	ldr	r3, [pc, #96]	; (801e7fc <HAL_SPI_MspInit+0x274>)
 801e79a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801e79e:	4a17      	ldr	r2, [pc, #92]	; (801e7fc <HAL_SPI_MspInit+0x274>)
 801e7a0:	f043 0310 	orr.w	r3, r3, #16
 801e7a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801e7a8:	4b14      	ldr	r3, [pc, #80]	; (801e7fc <HAL_SPI_MspInit+0x274>)
 801e7aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801e7ae:	f003 0310 	and.w	r3, r3, #16
 801e7b2:	60bb      	str	r3, [r7, #8]
 801e7b4:	68bb      	ldr	r3, [r7, #8]
  	GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 801e7b6:	2364      	movs	r3, #100	; 0x64
 801e7b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801e7bc:	2302      	movs	r3, #2
 801e7be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e7c2:	2300      	movs	r3, #0
 801e7c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801e7c8:	2300      	movs	r3, #0
 801e7ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  	GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 801e7ce:	2305      	movs	r3, #5
 801e7d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801e7d4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801e7d8:	4619      	mov	r1, r3
 801e7da:	4810      	ldr	r0, [pc, #64]	; (801e81c <HAL_SPI_MspInit+0x294>)
 801e7dc:	f7e4 faa6 	bl	8002d2c <HAL_GPIO_Init>
  	HAL_NVIC_SetPriority(SPI4_IRQn, 6, 0);
 801e7e0:	2200      	movs	r2, #0
 801e7e2:	2106      	movs	r1, #6
 801e7e4:	2054      	movs	r0, #84	; 0x54
 801e7e6:	f7e2 fda3 	bl	8001330 <HAL_NVIC_SetPriority>
  	HAL_NVIC_EnableIRQ(SPI4_IRQn);
 801e7ea:	2054      	movs	r0, #84	; 0x54
 801e7ec:	f7e2 fdba 	bl	8001364 <HAL_NVIC_EnableIRQ>
}
 801e7f0:	bf00      	nop
 801e7f2:	37f0      	adds	r7, #240	; 0xf0
 801e7f4:	46bd      	mov	sp, r7
 801e7f6:	bd80      	pop	{r7, pc}
 801e7f8:	40015000 	.word	0x40015000
 801e7fc:	58024400 	.word	0x58024400
 801e800:	58022800 	.word	0x58022800
 801e804:	58022400 	.word	0x58022400
 801e808:	2401a94c 	.word	0x2401a94c
 801e80c:	40020010 	.word	0x40020010
 801e810:	2401a7c4 	.word	0x2401a7c4
 801e814:	40020028 	.word	0x40020028
 801e818:	40013400 	.word	0x40013400
 801e81c:	58021000 	.word	0x58021000

0801e820 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801e820:	b580      	push	{r7, lr}
 801e822:	b084      	sub	sp, #16
 801e824:	af02      	add	r7, sp, #8
 801e826:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6)
 801e828:	687b      	ldr	r3, [r7, #4]
 801e82a:	681b      	ldr	r3, [r3, #0]
 801e82c:	4a0c      	ldr	r2, [pc, #48]	; (801e860 <HAL_TIM_PeriodElapsedCallback+0x40>)
 801e82e:	4293      	cmp	r3, r2
 801e830:	d101      	bne.n	801e836 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 801e832:	f7e2 fc75 	bl	8001120 <HAL_IncTick>
	}

	if(htim->Instance == htim2.Instance)
 801e836:	687b      	ldr	r3, [r7, #4]
 801e838:	681a      	ldr	r2, [r3, #0]
 801e83a:	4b0a      	ldr	r3, [pc, #40]	; (801e864 <HAL_TIM_PeriodElapsedCallback+0x44>)
 801e83c:	681b      	ldr	r3, [r3, #0]
 801e83e:	429a      	cmp	r2, r3
 801e840:	d10a      	bne.n	801e858 <HAL_TIM_PeriodElapsedCallback+0x38>
	{
		get_time = 1;
 801e842:	4b09      	ldr	r3, [pc, #36]	; (801e868 <HAL_TIM_PeriodElapsedCallback+0x48>)
 801e844:	2201      	movs	r2, #1
 801e846:	701a      	strb	r2, [r3, #0]
		tcp_echoclient_connect(129,6,15,28,13);
 801e848:	230d      	movs	r3, #13
 801e84a:	9300      	str	r3, [sp, #0]
 801e84c:	231c      	movs	r3, #28
 801e84e:	220f      	movs	r2, #15
 801e850:	2106      	movs	r1, #6
 801e852:	2081      	movs	r0, #129	; 0x81
 801e854:	f001 fc4c 	bl	80200f0 <tcp_echoclient_connect>
	}
}
 801e858:	bf00      	nop
 801e85a:	3708      	adds	r7, #8
 801e85c:	46bd      	mov	sp, r7
 801e85e:	bd80      	pop	{r7, pc}
 801e860:	40001000 	.word	0x40001000
 801e864:	2401aaf4 	.word	0x2401aaf4
 801e868:	2401ab8c 	.word	0x2401ab8c

0801e86c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 801e86c:	b580      	push	{r7, lr}
 801e86e:	b088      	sub	sp, #32
 801e870:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801e872:	f107 0310 	add.w	r3, r7, #16
 801e876:	2200      	movs	r2, #0
 801e878:	601a      	str	r2, [r3, #0]
 801e87a:	605a      	str	r2, [r3, #4]
 801e87c:	609a      	str	r2, [r3, #8]
 801e87e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 801e880:	1d3b      	adds	r3, r7, #4
 801e882:	2200      	movs	r2, #0
 801e884:	601a      	str	r2, [r3, #0]
 801e886:	605a      	str	r2, [r3, #4]
 801e888:	609a      	str	r2, [r3, #8]

	htim2.Instance = TIM2;
 801e88a:	4b1e      	ldr	r3, [pc, #120]	; (801e904 <MX_TIM2_Init+0x98>)
 801e88c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801e890:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 40000-1;
 801e892:	4b1c      	ldr	r3, [pc, #112]	; (801e904 <MX_TIM2_Init+0x98>)
 801e894:	f649 423f 	movw	r2, #39999	; 0x9c3f
 801e898:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801e89a:	4b1a      	ldr	r3, [pc, #104]	; (801e904 <MX_TIM2_Init+0x98>)
 801e89c:	2200      	movs	r2, #0
 801e89e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 100000-1;
 801e8a0:	4b18      	ldr	r3, [pc, #96]	; (801e904 <MX_TIM2_Init+0x98>)
 801e8a2:	4a19      	ldr	r2, [pc, #100]	; (801e908 <MX_TIM2_Init+0x9c>)
 801e8a4:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801e8a6:	4b17      	ldr	r3, [pc, #92]	; (801e904 <MX_TIM2_Init+0x98>)
 801e8a8:	2200      	movs	r2, #0
 801e8aa:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801e8ac:	4b15      	ldr	r3, [pc, #84]	; (801e904 <MX_TIM2_Init+0x98>)
 801e8ae:	2200      	movs	r2, #0
 801e8b0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 801e8b2:	4814      	ldr	r0, [pc, #80]	; (801e904 <MX_TIM2_Init+0x98>)
 801e8b4:	f7ec fc55 	bl	800b162 <HAL_TIM_Base_Init>
 801e8b8:	4603      	mov	r3, r0
 801e8ba:	2b00      	cmp	r3, #0
 801e8bc:	d001      	beq.n	801e8c2 <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 801e8be:	f7e2 f96f 	bl	8000ba0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801e8c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801e8c6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 801e8c8:	f107 0310 	add.w	r3, r7, #16
 801e8cc:	4619      	mov	r1, r3
 801e8ce:	480d      	ldr	r0, [pc, #52]	; (801e904 <MX_TIM2_Init+0x98>)
 801e8d0:	f7ec fef4 	bl	800b6bc <HAL_TIM_ConfigClockSource>
 801e8d4:	4603      	mov	r3, r0
 801e8d6:	2b00      	cmp	r3, #0
 801e8d8:	d001      	beq.n	801e8de <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 801e8da:	f7e2 f961 	bl	8000ba0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801e8de:	2300      	movs	r3, #0
 801e8e0:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801e8e2:	2300      	movs	r3, #0
 801e8e4:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801e8e6:	1d3b      	adds	r3, r7, #4
 801e8e8:	4619      	mov	r1, r3
 801e8ea:	4806      	ldr	r0, [pc, #24]	; (801e904 <MX_TIM2_Init+0x98>)
 801e8ec:	f7ed f99e 	bl	800bc2c <HAL_TIMEx_MasterConfigSynchronization>
 801e8f0:	4603      	mov	r3, r0
 801e8f2:	2b00      	cmp	r3, #0
 801e8f4:	d001      	beq.n	801e8fa <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 801e8f6:	f7e2 f953 	bl	8000ba0 <Error_Handler>
	}
}
 801e8fa:	bf00      	nop
 801e8fc:	3720      	adds	r7, #32
 801e8fe:	46bd      	mov	sp, r7
 801e900:	bd80      	pop	{r7, pc}
 801e902:	bf00      	nop
 801e904:	2401aaf4 	.word	0x2401aaf4
 801e908:	0001869f 	.word	0x0001869f

0801e90c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 801e90c:	b580      	push	{r7, lr}
 801e90e:	b08c      	sub	sp, #48	; 0x30
 801e910:	af00      	add	r7, sp, #0
 801e912:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 801e914:	f107 031c 	add.w	r3, r7, #28
 801e918:	2200      	movs	r2, #0
 801e91a:	601a      	str	r2, [r3, #0]
 801e91c:	605a      	str	r2, [r3, #4]
 801e91e:	609a      	str	r2, [r3, #8]
 801e920:	60da      	str	r2, [r3, #12]
 801e922:	611a      	str	r2, [r3, #16]
	if(tim_baseHandle->Instance==TIM2)
 801e924:	687b      	ldr	r3, [r7, #4]
 801e926:	681b      	ldr	r3, [r3, #0]
 801e928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e92c:	d117      	bne.n	801e95e <HAL_TIM_Base_MspInit+0x52>
	{
		/* Peripheral clock enable */
		__HAL_RCC_TIM2_CLK_ENABLE();
 801e92e:	4b49      	ldr	r3, [pc, #292]	; (801ea54 <HAL_TIM_Base_MspInit+0x148>)
 801e930:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801e934:	4a47      	ldr	r2, [pc, #284]	; (801ea54 <HAL_TIM_Base_MspInit+0x148>)
 801e936:	f043 0301 	orr.w	r3, r3, #1
 801e93a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 801e93e:	4b45      	ldr	r3, [pc, #276]	; (801ea54 <HAL_TIM_Base_MspInit+0x148>)
 801e940:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801e944:	f003 0301 	and.w	r3, r3, #1
 801e948:	61bb      	str	r3, [r7, #24]
 801e94a:	69bb      	ldr	r3, [r7, #24]
		/* TIM2 interrupt Init */
		HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 801e94c:	2200      	movs	r2, #0
 801e94e:	2105      	movs	r1, #5
 801e950:	201c      	movs	r0, #28
 801e952:	f7e2 fced 	bl	8001330 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 801e956:	201c      	movs	r0, #28
 801e958:	f7e2 fd04 	bl	8001364 <HAL_NVIC_EnableIRQ>
//	HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
//	/* USER CODE BEGIN TIM8_MspInit 1 */
//
//	/* USER CODE END TIM8_MspInit 1 */
//	}
}
 801e95c:	e076      	b.n	801ea4c <HAL_TIM_Base_MspInit+0x140>
	else if(tim_baseHandle->Instance==TIM3)
 801e95e:	687b      	ldr	r3, [r7, #4]
 801e960:	681b      	ldr	r3, [r3, #0]
 801e962:	4a3d      	ldr	r2, [pc, #244]	; (801ea58 <HAL_TIM_Base_MspInit+0x14c>)
 801e964:	4293      	cmp	r3, r2
 801e966:	d155      	bne.n	801ea14 <HAL_TIM_Base_MspInit+0x108>
	__HAL_RCC_TIM3_CLK_ENABLE();
 801e968:	4b3a      	ldr	r3, [pc, #232]	; (801ea54 <HAL_TIM_Base_MspInit+0x148>)
 801e96a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801e96e:	4a39      	ldr	r2, [pc, #228]	; (801ea54 <HAL_TIM_Base_MspInit+0x148>)
 801e970:	f043 0302 	orr.w	r3, r3, #2
 801e974:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 801e978:	4b36      	ldr	r3, [pc, #216]	; (801ea54 <HAL_TIM_Base_MspInit+0x148>)
 801e97a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801e97e:	f003 0302 	and.w	r3, r3, #2
 801e982:	617b      	str	r3, [r7, #20]
 801e984:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 801e986:	4b33      	ldr	r3, [pc, #204]	; (801ea54 <HAL_TIM_Base_MspInit+0x148>)
 801e988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801e98c:	4a31      	ldr	r2, [pc, #196]	; (801ea54 <HAL_TIM_Base_MspInit+0x148>)
 801e98e:	f043 0302 	orr.w	r3, r3, #2
 801e992:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801e996:	4b2f      	ldr	r3, [pc, #188]	; (801ea54 <HAL_TIM_Base_MspInit+0x148>)
 801e998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801e99c:	f003 0302 	and.w	r3, r3, #2
 801e9a0:	613b      	str	r3, [r7, #16]
 801e9a2:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 801e9a4:	4b2b      	ldr	r3, [pc, #172]	; (801ea54 <HAL_TIM_Base_MspInit+0x148>)
 801e9a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801e9aa:	4a2a      	ldr	r2, [pc, #168]	; (801ea54 <HAL_TIM_Base_MspInit+0x148>)
 801e9ac:	f043 0301 	orr.w	r3, r3, #1
 801e9b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801e9b4:	4b27      	ldr	r3, [pc, #156]	; (801ea54 <HAL_TIM_Base_MspInit+0x148>)
 801e9b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801e9ba:	f003 0301 	and.w	r3, r3, #1
 801e9be:	60fb      	str	r3, [r7, #12]
 801e9c0:	68fb      	ldr	r3, [r7, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_1|GPIO_PIN_0;
 801e9c2:	2323      	movs	r3, #35	; 0x23
 801e9c4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801e9c6:	2302      	movs	r3, #2
 801e9c8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e9ca:	2300      	movs	r3, #0
 801e9cc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801e9ce:	2300      	movs	r3, #0
 801e9d0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 801e9d2:	2302      	movs	r3, #2
 801e9d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801e9d6:	f107 031c 	add.w	r3, r7, #28
 801e9da:	4619      	mov	r1, r3
 801e9dc:	481f      	ldr	r0, [pc, #124]	; (801ea5c <HAL_TIM_Base_MspInit+0x150>)
 801e9de:	f7e4 f9a5 	bl	8002d2c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 801e9e2:	2340      	movs	r3, #64	; 0x40
 801e9e4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801e9e6:	2302      	movs	r3, #2
 801e9e8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e9ea:	2300      	movs	r3, #0
 801e9ec:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801e9ee:	2300      	movs	r3, #0
 801e9f0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 801e9f2:	2302      	movs	r3, #2
 801e9f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801e9f6:	f107 031c 	add.w	r3, r7, #28
 801e9fa:	4619      	mov	r1, r3
 801e9fc:	4818      	ldr	r0, [pc, #96]	; (801ea60 <HAL_TIM_Base_MspInit+0x154>)
 801e9fe:	f7e4 f995 	bl	8002d2c <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 801ea02:	2200      	movs	r2, #0
 801ea04:	2100      	movs	r1, #0
 801ea06:	201d      	movs	r0, #29
 801ea08:	f7e2 fc92 	bl	8001330 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 801ea0c:	201d      	movs	r0, #29
 801ea0e:	f7e2 fca9 	bl	8001364 <HAL_NVIC_EnableIRQ>
}
 801ea12:	e01b      	b.n	801ea4c <HAL_TIM_Base_MspInit+0x140>
	else if(tim_baseHandle->Instance==TIM5)
 801ea14:	687b      	ldr	r3, [r7, #4]
 801ea16:	681b      	ldr	r3, [r3, #0]
 801ea18:	4a12      	ldr	r2, [pc, #72]	; (801ea64 <HAL_TIM_Base_MspInit+0x158>)
 801ea1a:	4293      	cmp	r3, r2
 801ea1c:	d116      	bne.n	801ea4c <HAL_TIM_Base_MspInit+0x140>
	__HAL_RCC_TIM5_CLK_ENABLE();
 801ea1e:	4b0d      	ldr	r3, [pc, #52]	; (801ea54 <HAL_TIM_Base_MspInit+0x148>)
 801ea20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801ea24:	4a0b      	ldr	r2, [pc, #44]	; (801ea54 <HAL_TIM_Base_MspInit+0x148>)
 801ea26:	f043 0308 	orr.w	r3, r3, #8
 801ea2a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 801ea2e:	4b09      	ldr	r3, [pc, #36]	; (801ea54 <HAL_TIM_Base_MspInit+0x148>)
 801ea30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801ea34:	f003 0308 	and.w	r3, r3, #8
 801ea38:	60bb      	str	r3, [r7, #8]
 801ea3a:	68bb      	ldr	r3, [r7, #8]
	HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 801ea3c:	2200      	movs	r2, #0
 801ea3e:	2100      	movs	r1, #0
 801ea40:	2032      	movs	r0, #50	; 0x32
 801ea42:	f7e2 fc75 	bl	8001330 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM5_IRQn);
 801ea46:	2032      	movs	r0, #50	; 0x32
 801ea48:	f7e2 fc8c 	bl	8001364 <HAL_NVIC_EnableIRQ>
}
 801ea4c:	bf00      	nop
 801ea4e:	3730      	adds	r7, #48	; 0x30
 801ea50:	46bd      	mov	sp, r7
 801ea52:	bd80      	pop	{r7, pc}
 801ea54:	58024400 	.word	0x58024400
 801ea58:	40000400 	.word	0x40000400
 801ea5c:	58020400 	.word	0x58020400
 801ea60:	58020000 	.word	0x58020000
 801ea64:	40000c00 	.word	0x40000c00

0801ea68 <__io_putchar>:
UART_HandleTypeDef huart6;

extern tsConfig_SerialSensor serialSettingList[6];

int __io_putchar(int ch)
{
 801ea68:	b580      	push	{r7, lr}
 801ea6a:	b084      	sub	sp, #16
 801ea6c:	af00      	add	r7, sp, #0
 801ea6e:	6078      	str	r0, [r7, #4]
	uint8_t c = ch;
 801ea70:	687b      	ldr	r3, [r7, #4]
 801ea72:	b2db      	uxtb	r3, r3
 801ea74:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, &c, 1, HAL_MAX_DELAY);
 801ea76:	f107 010f 	add.w	r1, r7, #15
 801ea7a:	f04f 33ff 	mov.w	r3, #4294967295
 801ea7e:	2201      	movs	r2, #1
 801ea80:	4803      	ldr	r0, [pc, #12]	; (801ea90 <__io_putchar+0x28>)
 801ea82:	f7ed f9cf 	bl	800be24 <HAL_UART_Transmit>
	return ch;
 801ea86:	687b      	ldr	r3, [r7, #4]
}
 801ea88:	4618      	mov	r0, r3
 801ea8a:	3710      	adds	r7, #16
 801ea8c:	46bd      	mov	sp, r7
 801ea8e:	bd80      	pop	{r7, pc}
 801ea90:	2401afcc 	.word	0x2401afcc

0801ea94 <MX_UART7_Init>:
  /* USER CODE END UART5_Init 2 */

}
/* UART7 init function */
void MX_UART7_Init(void)
{
 801ea94:	b580      	push	{r7, lr}
 801ea96:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 801ea98:	4b30      	ldr	r3, [pc, #192]	; (801eb5c <MX_UART7_Init+0xc8>)
 801ea9a:	4a31      	ldr	r2, [pc, #196]	; (801eb60 <MX_UART7_Init+0xcc>)
 801ea9c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1200;
 801ea9e:	4b2f      	ldr	r3, [pc, #188]	; (801eb5c <MX_UART7_Init+0xc8>)
 801eaa0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 801eaa4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 801eaa6:	4b2d      	ldr	r3, [pc, #180]	; (801eb5c <MX_UART7_Init+0xc8>)
 801eaa8:	2200      	movs	r2, #0
 801eaaa:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 801eaac:	4b2b      	ldr	r3, [pc, #172]	; (801eb5c <MX_UART7_Init+0xc8>)
 801eaae:	2200      	movs	r2, #0
 801eab0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_EVEN;
 801eab2:	4b2a      	ldr	r3, [pc, #168]	; (801eb5c <MX_UART7_Init+0xc8>)
 801eab4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801eab8:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 801eaba:	4b28      	ldr	r3, [pc, #160]	; (801eb5c <MX_UART7_Init+0xc8>)
 801eabc:	220c      	movs	r2, #12
 801eabe:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801eac0:	4b26      	ldr	r3, [pc, #152]	; (801eb5c <MX_UART7_Init+0xc8>)
 801eac2:	2200      	movs	r2, #0
 801eac4:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 801eac6:	4b25      	ldr	r3, [pc, #148]	; (801eb5c <MX_UART7_Init+0xc8>)
 801eac8:	2200      	movs	r2, #0
 801eaca:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801eacc:	4b23      	ldr	r3, [pc, #140]	; (801eb5c <MX_UART7_Init+0xc8>)
 801eace:	2200      	movs	r2, #0
 801ead0:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV16;
 801ead2:	4b22      	ldr	r3, [pc, #136]	; (801eb5c <MX_UART7_Init+0xc8>)
 801ead4:	2207      	movs	r2, #7
 801ead6:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT|UART_ADVFEATURE_RXINVERT_INIT
 801ead8:	4b20      	ldr	r3, [pc, #128]	; (801eb5c <MX_UART7_Init+0xc8>)
 801eada:	220b      	movs	r2, #11
 801eadc:	629a      	str	r2, [r3, #40]	; 0x28
          	  	  	  	  	  	  	  |UART_ADVFEATURE_SWAP_INIT;
  huart7.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 801eade:	4b1f      	ldr	r3, [pc, #124]	; (801eb5c <MX_UART7_Init+0xc8>)
 801eae0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801eae4:	62da      	str	r2, [r3, #44]	; 0x2c
  huart7.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 801eae6:	4b1d      	ldr	r3, [pc, #116]	; (801eb5c <MX_UART7_Init+0xc8>)
 801eae8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801eaec:	631a      	str	r2, [r3, #48]	; 0x30
  huart7.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 801eaee:	4b1b      	ldr	r3, [pc, #108]	; (801eb5c <MX_UART7_Init+0xc8>)
 801eaf0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801eaf4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart7) != HAL_OK)
 801eaf6:	4819      	ldr	r0, [pc, #100]	; (801eb5c <MX_UART7_Init+0xc8>)
 801eaf8:	f7ed f944 	bl	800bd84 <HAL_UART_Init>
 801eafc:	4603      	mov	r3, r0
 801eafe:	2b00      	cmp	r3, #0
 801eb00:	d001      	beq.n	801eb06 <MX_UART7_Init+0x72>
  {
    Error_Handler();
 801eb02:	f7e2 f84d 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 801eb06:	2100      	movs	r1, #0
 801eb08:	4814      	ldr	r0, [pc, #80]	; (801eb5c <MX_UART7_Init+0xc8>)
 801eb0a:	f7ee fdfb 	bl	800d704 <HAL_UARTEx_SetTxFifoThreshold>
 801eb0e:	4603      	mov	r3, r0
 801eb10:	2b00      	cmp	r3, #0
 801eb12:	d001      	beq.n	801eb18 <MX_UART7_Init+0x84>
  {
    Error_Handler();
 801eb14:	f7e2 f844 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 801eb18:	2100      	movs	r1, #0
 801eb1a:	4810      	ldr	r0, [pc, #64]	; (801eb5c <MX_UART7_Init+0xc8>)
 801eb1c:	f7ee fe30 	bl	800d780 <HAL_UARTEx_SetRxFifoThreshold>
 801eb20:	4603      	mov	r3, r0
 801eb22:	2b00      	cmp	r3, #0
 801eb24:	d001      	beq.n	801eb2a <MX_UART7_Init+0x96>
  {
    Error_Handler();
 801eb26:	f7e2 f83b 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 801eb2a:	480c      	ldr	r0, [pc, #48]	; (801eb5c <MX_UART7_Init+0xc8>)
 801eb2c:	f7ee fdb1 	bl	800d692 <HAL_UARTEx_DisableFifoMode>
 801eb30:	4603      	mov	r3, r0
 801eb32:	2b00      	cmp	r3, #0
 801eb34:	d001      	beq.n	801eb3a <MX_UART7_Init+0xa6>
  {
    Error_Handler();
 801eb36:	f7e2 f833 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */
  huart7.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 801eb3a:	4b08      	ldr	r3, [pc, #32]	; (801eb5c <MX_UART7_Init+0xc8>)
 801eb3c:	2200      	movs	r2, #0
 801eb3e:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart7) != HAL_OK)
 801eb40:	4806      	ldr	r0, [pc, #24]	; (801eb5c <MX_UART7_Init+0xc8>)
 801eb42:	f7ed f91f 	bl	800bd84 <HAL_UART_Init>
 801eb46:	4603      	mov	r3, r0
 801eb48:	2b00      	cmp	r3, #0
 801eb4a:	d005      	beq.n	801eb58 <MX_UART7_Init+0xc4>
  {
	  HAL_UART_Transmit(&huart3, "ERR\r\n", 5, 10);
 801eb4c:	230a      	movs	r3, #10
 801eb4e:	2205      	movs	r2, #5
 801eb50:	4904      	ldr	r1, [pc, #16]	; (801eb64 <MX_UART7_Init+0xd0>)
 801eb52:	4805      	ldr	r0, [pc, #20]	; (801eb68 <MX_UART7_Init+0xd4>)
 801eb54:	f7ed f966 	bl	800be24 <HAL_UART_Transmit>
  }
  /* USER CODE END UART7_Init 2 */

}
 801eb58:	bf00      	nop
 801eb5a:	bd80      	pop	{r7, pc}
 801eb5c:	2401ad8c 	.word	0x2401ad8c
 801eb60:	40007800 	.word	0x40007800
 801eb64:	08025c04 	.word	0x08025c04
 801eb68:	2401afcc 	.word	0x2401afcc

0801eb6c <MX_USART3_UART_Init>:

}
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 801eb6c:	b580      	push	{r7, lr}
 801eb6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 801eb70:	4b22      	ldr	r3, [pc, #136]	; (801ebfc <MX_USART3_UART_Init+0x90>)
 801eb72:	4a23      	ldr	r2, [pc, #140]	; (801ec00 <MX_USART3_UART_Init+0x94>)
 801eb74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 801eb76:	4b21      	ldr	r3, [pc, #132]	; (801ebfc <MX_USART3_UART_Init+0x90>)
 801eb78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 801eb7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 801eb7e:	4b1f      	ldr	r3, [pc, #124]	; (801ebfc <MX_USART3_UART_Init+0x90>)
 801eb80:	2200      	movs	r2, #0
 801eb82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 801eb84:	4b1d      	ldr	r3, [pc, #116]	; (801ebfc <MX_USART3_UART_Init+0x90>)
 801eb86:	2200      	movs	r2, #0
 801eb88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 801eb8a:	4b1c      	ldr	r3, [pc, #112]	; (801ebfc <MX_USART3_UART_Init+0x90>)
 801eb8c:	2200      	movs	r2, #0
 801eb8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 801eb90:	4b1a      	ldr	r3, [pc, #104]	; (801ebfc <MX_USART3_UART_Init+0x90>)
 801eb92:	220c      	movs	r2, #12
 801eb94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801eb96:	4b19      	ldr	r3, [pc, #100]	; (801ebfc <MX_USART3_UART_Init+0x90>)
 801eb98:	2200      	movs	r2, #0
 801eb9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 801eb9c:	4b17      	ldr	r3, [pc, #92]	; (801ebfc <MX_USART3_UART_Init+0x90>)
 801eb9e:	2200      	movs	r2, #0
 801eba0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801eba2:	4b16      	ldr	r3, [pc, #88]	; (801ebfc <MX_USART3_UART_Init+0x90>)
 801eba4:	2200      	movs	r2, #0
 801eba6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 801eba8:	4b14      	ldr	r3, [pc, #80]	; (801ebfc <MX_USART3_UART_Init+0x90>)
 801ebaa:	2200      	movs	r2, #0
 801ebac:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801ebae:	4b13      	ldr	r3, [pc, #76]	; (801ebfc <MX_USART3_UART_Init+0x90>)
 801ebb0:	2200      	movs	r2, #0
 801ebb2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 801ebb4:	4811      	ldr	r0, [pc, #68]	; (801ebfc <MX_USART3_UART_Init+0x90>)
 801ebb6:	f7ed f8e5 	bl	800bd84 <HAL_UART_Init>
 801ebba:	4603      	mov	r3, r0
 801ebbc:	2b00      	cmp	r3, #0
 801ebbe:	d001      	beq.n	801ebc4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 801ebc0:	f7e1 ffee 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 801ebc4:	2100      	movs	r1, #0
 801ebc6:	480d      	ldr	r0, [pc, #52]	; (801ebfc <MX_USART3_UART_Init+0x90>)
 801ebc8:	f7ee fd9c 	bl	800d704 <HAL_UARTEx_SetTxFifoThreshold>
 801ebcc:	4603      	mov	r3, r0
 801ebce:	2b00      	cmp	r3, #0
 801ebd0:	d001      	beq.n	801ebd6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 801ebd2:	f7e1 ffe5 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 801ebd6:	2100      	movs	r1, #0
 801ebd8:	4808      	ldr	r0, [pc, #32]	; (801ebfc <MX_USART3_UART_Init+0x90>)
 801ebda:	f7ee fdd1 	bl	800d780 <HAL_UARTEx_SetRxFifoThreshold>
 801ebde:	4603      	mov	r3, r0
 801ebe0:	2b00      	cmp	r3, #0
 801ebe2:	d001      	beq.n	801ebe8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 801ebe4:	f7e1 ffdc 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 801ebe8:	4804      	ldr	r0, [pc, #16]	; (801ebfc <MX_USART3_UART_Init+0x90>)
 801ebea:	f7ee fd52 	bl	800d692 <HAL_UARTEx_DisableFifoMode>
 801ebee:	4603      	mov	r3, r0
 801ebf0:	2b00      	cmp	r3, #0
 801ebf2:	d001      	beq.n	801ebf8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 801ebf4:	f7e1 ffd4 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 801ebf8:	bf00      	nop
 801ebfa:	bd80      	pop	{r7, pc}
 801ebfc:	2401afcc 	.word	0x2401afcc
 801ec00:	40004800 	.word	0x40004800

0801ec04 <HAL_UART_MspInit>:
  /* USER CODE END USART6_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 801ec04:	b580      	push	{r7, lr}
 801ec06:	b0c8      	sub	sp, #288	; 0x120
 801ec08:	af00      	add	r7, sp, #0
 801ec0a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801ec0e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801ec12:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801ec14:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 801ec18:	2200      	movs	r2, #0
 801ec1a:	601a      	str	r2, [r3, #0]
 801ec1c:	605a      	str	r2, [r3, #4]
 801ec1e:	609a      	str	r2, [r3, #8]
 801ec20:	60da      	str	r2, [r3, #12]
 801ec22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801ec24:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ec28:	22c0      	movs	r2, #192	; 0xc0
 801ec2a:	2100      	movs	r1, #0
 801ec2c:	4618      	mov	r0, r3
 801ec2e:	f002 faeb 	bl	8021208 <memset>
  if(huart->Instance==UART4)
 801ec32:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801ec36:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801ec3a:	681b      	ldr	r3, [r3, #0]
 801ec3c:	681b      	ldr	r3, [r3, #0]
 801ec3e:	4acd      	ldr	r2, [pc, #820]	; (801ef74 <HAL_UART_MspInit+0x370>)
 801ec40:	4293      	cmp	r3, r2
 801ec42:	d14b      	bne.n	801ecdc <HAL_UART_MspInit+0xd8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 801ec44:	2302      	movs	r3, #2
 801ec46:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 801ec48:	2300      	movs	r3, #0
 801ec4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801ec4e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ec52:	4618      	mov	r0, r3
 801ec54:	f7e7 f948 	bl	8005ee8 <HAL_RCCEx_PeriphCLKConfig>
 801ec58:	4603      	mov	r3, r0
 801ec5a:	2b00      	cmp	r3, #0
 801ec5c:	d001      	beq.n	801ec62 <HAL_UART_MspInit+0x5e>
    {
      Error_Handler();
 801ec5e:	f7e1 ff9f 	bl	8000ba0 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 801ec62:	4bc5      	ldr	r3, [pc, #788]	; (801ef78 <HAL_UART_MspInit+0x374>)
 801ec64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801ec68:	4ac3      	ldr	r2, [pc, #780]	; (801ef78 <HAL_UART_MspInit+0x374>)
 801ec6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801ec6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 801ec72:	4bc1      	ldr	r3, [pc, #772]	; (801ef78 <HAL_UART_MspInit+0x374>)
 801ec74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801ec78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801ec7c:	64bb      	str	r3, [r7, #72]	; 0x48
 801ec7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48

    __HAL_RCC_GPIOH_CLK_ENABLE();
 801ec80:	4bbd      	ldr	r3, [pc, #756]	; (801ef78 <HAL_UART_MspInit+0x374>)
 801ec82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801ec86:	4abc      	ldr	r2, [pc, #752]	; (801ef78 <HAL_UART_MspInit+0x374>)
 801ec88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ec8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801ec90:	4bb9      	ldr	r3, [pc, #740]	; (801ef78 <HAL_UART_MspInit+0x374>)
 801ec92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801ec96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ec9a:	647b      	str	r3, [r7, #68]	; 0x44
 801ec9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    /**UART4 GPIO Configuration
    PH14     ------> UART4_RX
    PH13     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 801ec9e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801eca2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801eca6:	2302      	movs	r3, #2
 801eca8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ecac:	2300      	movs	r3, #0
 801ecae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801ecb2:	2300      	movs	r3, #0
 801ecb4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 801ecb8:	2308      	movs	r3, #8
 801ecba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801ecbe:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 801ecc2:	4619      	mov	r1, r3
 801ecc4:	48ad      	ldr	r0, [pc, #692]	; (801ef7c <HAL_UART_MspInit+0x378>)
 801ecc6:	f7e4 f831 	bl	8002d2c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 7);
 801ecca:	2207      	movs	r2, #7
 801eccc:	2106      	movs	r1, #6
 801ecce:	2034      	movs	r0, #52	; 0x34
 801ecd0:	f7e2 fb2e 	bl	8001330 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 801ecd4:	2034      	movs	r0, #52	; 0x34
 801ecd6:	f7e2 fb45 	bl	8001364 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 801ecda:	e2b8      	b.n	801f24e <HAL_UART_MspInit+0x64a>
  else if(huart->Instance==UART5)
 801ecdc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801ece0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801ece4:	681b      	ldr	r3, [r3, #0]
 801ece6:	681b      	ldr	r3, [r3, #0]
 801ece8:	4aa5      	ldr	r2, [pc, #660]	; (801ef80 <HAL_UART_MspInit+0x37c>)
 801ecea:	4293      	cmp	r3, r2
 801ecec:	d14b      	bne.n	801ed86 <HAL_UART_MspInit+0x182>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 801ecee:	2302      	movs	r3, #2
 801ecf0:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 801ecf2:	2300      	movs	r3, #0
 801ecf4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801ecf8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ecfc:	4618      	mov	r0, r3
 801ecfe:	f7e7 f8f3 	bl	8005ee8 <HAL_RCCEx_PeriphCLKConfig>
 801ed02:	4603      	mov	r3, r0
 801ed04:	2b00      	cmp	r3, #0
 801ed06:	d001      	beq.n	801ed0c <HAL_UART_MspInit+0x108>
      Error_Handler();
 801ed08:	f7e1 ff4a 	bl	8000ba0 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 801ed0c:	4b9a      	ldr	r3, [pc, #616]	; (801ef78 <HAL_UART_MspInit+0x374>)
 801ed0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801ed12:	4a99      	ldr	r2, [pc, #612]	; (801ef78 <HAL_UART_MspInit+0x374>)
 801ed14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ed18:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 801ed1c:	4b96      	ldr	r3, [pc, #600]	; (801ef78 <HAL_UART_MspInit+0x374>)
 801ed1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801ed22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801ed26:	643b      	str	r3, [r7, #64]	; 0x40
 801ed28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801ed2a:	4b93      	ldr	r3, [pc, #588]	; (801ef78 <HAL_UART_MspInit+0x374>)
 801ed2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801ed30:	4a91      	ldr	r2, [pc, #580]	; (801ef78 <HAL_UART_MspInit+0x374>)
 801ed32:	f043 0302 	orr.w	r3, r3, #2
 801ed36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801ed3a:	4b8f      	ldr	r3, [pc, #572]	; (801ef78 <HAL_UART_MspInit+0x374>)
 801ed3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801ed40:	f003 0302 	and.w	r3, r3, #2
 801ed44:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ed46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 801ed48:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 801ed4c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ed50:	2302      	movs	r3, #2
 801ed52:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ed56:	2300      	movs	r3, #0
 801ed58:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801ed5c:	2300      	movs	r3, #0
 801ed5e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 801ed62:	230e      	movs	r3, #14
 801ed64:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801ed68:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 801ed6c:	4619      	mov	r1, r3
 801ed6e:	4885      	ldr	r0, [pc, #532]	; (801ef84 <HAL_UART_MspInit+0x380>)
 801ed70:	f7e3 ffdc 	bl	8002d2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 6, 6);
 801ed74:	2206      	movs	r2, #6
 801ed76:	2106      	movs	r1, #6
 801ed78:	2035      	movs	r0, #53	; 0x35
 801ed7a:	f7e2 fad9 	bl	8001330 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 801ed7e:	2035      	movs	r0, #53	; 0x35
 801ed80:	f7e2 faf0 	bl	8001364 <HAL_NVIC_EnableIRQ>
}
 801ed84:	e263      	b.n	801f24e <HAL_UART_MspInit+0x64a>
  else if(huart->Instance==UART7)
 801ed86:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801ed8a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801ed8e:	681b      	ldr	r3, [r3, #0]
 801ed90:	681b      	ldr	r3, [r3, #0]
 801ed92:	4a7d      	ldr	r2, [pc, #500]	; (801ef88 <HAL_UART_MspInit+0x384>)
 801ed94:	4293      	cmp	r3, r2
 801ed96:	d143      	bne.n	801ee20 <HAL_UART_MspInit+0x21c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 801ed98:	2302      	movs	r3, #2
 801ed9a:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 801ed9c:	2300      	movs	r3, #0
 801ed9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801eda2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801eda6:	4618      	mov	r0, r3
 801eda8:	f7e7 f89e 	bl	8005ee8 <HAL_RCCEx_PeriphCLKConfig>
 801edac:	4603      	mov	r3, r0
 801edae:	2b00      	cmp	r3, #0
 801edb0:	d001      	beq.n	801edb6 <HAL_UART_MspInit+0x1b2>
      Error_Handler();
 801edb2:	f7e1 fef5 	bl	8000ba0 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 801edb6:	4b70      	ldr	r3, [pc, #448]	; (801ef78 <HAL_UART_MspInit+0x374>)
 801edb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801edbc:	4a6e      	ldr	r2, [pc, #440]	; (801ef78 <HAL_UART_MspInit+0x374>)
 801edbe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801edc2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 801edc6:	4b6c      	ldr	r3, [pc, #432]	; (801ef78 <HAL_UART_MspInit+0x374>)
 801edc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801edcc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801edd0:	63bb      	str	r3, [r7, #56]	; 0x38
 801edd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801edd4:	4b68      	ldr	r3, [pc, #416]	; (801ef78 <HAL_UART_MspInit+0x374>)
 801edd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801edda:	4a67      	ldr	r2, [pc, #412]	; (801ef78 <HAL_UART_MspInit+0x374>)
 801eddc:	f043 0301 	orr.w	r3, r3, #1
 801ede0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801ede4:	4b64      	ldr	r3, [pc, #400]	; (801ef78 <HAL_UART_MspInit+0x374>)
 801ede6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801edea:	f003 0301 	and.w	r3, r3, #1
 801edee:	637b      	str	r3, [r7, #52]	; 0x34
 801edf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8;
 801edf2:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 801edf6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801edfa:	2302      	movs	r3, #2
 801edfc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ee00:	2300      	movs	r3, #0
 801ee02:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801ee06:	2300      	movs	r3, #0
 801ee08:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 801ee0c:	230b      	movs	r3, #11
 801ee0e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801ee12:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 801ee16:	4619      	mov	r1, r3
 801ee18:	485c      	ldr	r0, [pc, #368]	; (801ef8c <HAL_UART_MspInit+0x388>)
 801ee1a:	f7e3 ff87 	bl	8002d2c <HAL_GPIO_Init>
}
 801ee1e:	e216      	b.n	801f24e <HAL_UART_MspInit+0x64a>
  else if(huart->Instance==UART8)
 801ee20:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801ee24:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801ee28:	681b      	ldr	r3, [r3, #0]
 801ee2a:	681b      	ldr	r3, [r3, #0]
 801ee2c:	4a58      	ldr	r2, [pc, #352]	; (801ef90 <HAL_UART_MspInit+0x38c>)
 801ee2e:	4293      	cmp	r3, r2
 801ee30:	d14b      	bne.n	801eeca <HAL_UART_MspInit+0x2c6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 801ee32:	2302      	movs	r3, #2
 801ee34:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 801ee36:	2300      	movs	r3, #0
 801ee38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801ee3c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ee40:	4618      	mov	r0, r3
 801ee42:	f7e7 f851 	bl	8005ee8 <HAL_RCCEx_PeriphCLKConfig>
 801ee46:	4603      	mov	r3, r0
 801ee48:	2b00      	cmp	r3, #0
 801ee4a:	d001      	beq.n	801ee50 <HAL_UART_MspInit+0x24c>
      Error_Handler();
 801ee4c:	f7e1 fea8 	bl	8000ba0 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 801ee50:	4b49      	ldr	r3, [pc, #292]	; (801ef78 <HAL_UART_MspInit+0x374>)
 801ee52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801ee56:	4a48      	ldr	r2, [pc, #288]	; (801ef78 <HAL_UART_MspInit+0x374>)
 801ee58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801ee5c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 801ee60:	4b45      	ldr	r3, [pc, #276]	; (801ef78 <HAL_UART_MspInit+0x374>)
 801ee62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801ee66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801ee6a:	633b      	str	r3, [r7, #48]	; 0x30
 801ee6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 801ee6e:	4b42      	ldr	r3, [pc, #264]	; (801ef78 <HAL_UART_MspInit+0x374>)
 801ee70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801ee74:	4a40      	ldr	r2, [pc, #256]	; (801ef78 <HAL_UART_MspInit+0x374>)
 801ee76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801ee7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801ee7e:	4b3e      	ldr	r3, [pc, #248]	; (801ef78 <HAL_UART_MspInit+0x374>)
 801ee80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801ee84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801ee88:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ee8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 801ee8c:	f44f 7340 	mov.w	r3, #768	; 0x300
 801ee90:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ee94:	2302      	movs	r3, #2
 801ee96:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ee9a:	2300      	movs	r3, #0
 801ee9c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801eea0:	2300      	movs	r3, #0
 801eea2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 801eea6:	2308      	movs	r3, #8
 801eea8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 801eeac:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 801eeb0:	4619      	mov	r1, r3
 801eeb2:	4838      	ldr	r0, [pc, #224]	; (801ef94 <HAL_UART_MspInit+0x390>)
 801eeb4:	f7e3 ff3a 	bl	8002d2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 6, 4);
 801eeb8:	2204      	movs	r2, #4
 801eeba:	2106      	movs	r1, #6
 801eebc:	2053      	movs	r0, #83	; 0x53
 801eebe:	f7e2 fa37 	bl	8001330 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 801eec2:	2053      	movs	r0, #83	; 0x53
 801eec4:	f7e2 fa4e 	bl	8001364 <HAL_NVIC_EnableIRQ>
}
 801eec8:	e1c1      	b.n	801f24e <HAL_UART_MspInit+0x64a>
  else if(huart->Instance==USART1)
 801eeca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801eece:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801eed2:	681b      	ldr	r3, [r3, #0]
 801eed4:	681b      	ldr	r3, [r3, #0]
 801eed6:	4a30      	ldr	r2, [pc, #192]	; (801ef98 <HAL_UART_MspInit+0x394>)
 801eed8:	4293      	cmp	r3, r2
 801eeda:	d15f      	bne.n	801ef9c <HAL_UART_MspInit+0x398>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 801eedc:	2301      	movs	r3, #1
 801eede:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 801eee0:	2300      	movs	r3, #0
 801eee2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801eee6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801eeea:	4618      	mov	r0, r3
 801eeec:	f7e6 fffc 	bl	8005ee8 <HAL_RCCEx_PeriphCLKConfig>
 801eef0:	4603      	mov	r3, r0
 801eef2:	2b00      	cmp	r3, #0
 801eef4:	d001      	beq.n	801eefa <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 801eef6:	f7e1 fe53 	bl	8000ba0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 801eefa:	4b1f      	ldr	r3, [pc, #124]	; (801ef78 <HAL_UART_MspInit+0x374>)
 801eefc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801ef00:	4a1d      	ldr	r2, [pc, #116]	; (801ef78 <HAL_UART_MspInit+0x374>)
 801ef02:	f043 0310 	orr.w	r3, r3, #16
 801ef06:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 801ef0a:	4b1b      	ldr	r3, [pc, #108]	; (801ef78 <HAL_UART_MspInit+0x374>)
 801ef0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801ef10:	f003 0310 	and.w	r3, r3, #16
 801ef14:	62bb      	str	r3, [r7, #40]	; 0x28
 801ef16:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801ef18:	4b17      	ldr	r3, [pc, #92]	; (801ef78 <HAL_UART_MspInit+0x374>)
 801ef1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801ef1e:	4a16      	ldr	r2, [pc, #88]	; (801ef78 <HAL_UART_MspInit+0x374>)
 801ef20:	f043 0302 	orr.w	r3, r3, #2
 801ef24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801ef28:	4b13      	ldr	r3, [pc, #76]	; (801ef78 <HAL_UART_MspInit+0x374>)
 801ef2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801ef2e:	f003 0302 	and.w	r3, r3, #2
 801ef32:	627b      	str	r3, [r7, #36]	; 0x24
 801ef34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801ef36:	23c0      	movs	r3, #192	; 0xc0
 801ef38:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ef3c:	2302      	movs	r3, #2
 801ef3e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ef42:	2300      	movs	r3, #0
 801ef44:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801ef48:	2300      	movs	r3, #0
 801ef4a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801ef4e:	2307      	movs	r3, #7
 801ef50:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801ef54:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 801ef58:	4619      	mov	r1, r3
 801ef5a:	480a      	ldr	r0, [pc, #40]	; (801ef84 <HAL_UART_MspInit+0x380>)
 801ef5c:	f7e3 fee6 	bl	8002d2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 3);
 801ef60:	2203      	movs	r2, #3
 801ef62:	2106      	movs	r1, #6
 801ef64:	2025      	movs	r0, #37	; 0x25
 801ef66:	f7e2 f9e3 	bl	8001330 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 801ef6a:	2025      	movs	r0, #37	; 0x25
 801ef6c:	f7e2 f9fa 	bl	8001364 <HAL_NVIC_EnableIRQ>
}
 801ef70:	e16d      	b.n	801f24e <HAL_UART_MspInit+0x64a>
 801ef72:	bf00      	nop
 801ef74:	40004c00 	.word	0x40004c00
 801ef78:	58024400 	.word	0x58024400
 801ef7c:	58021c00 	.word	0x58021c00
 801ef80:	40005000 	.word	0x40005000
 801ef84:	58020400 	.word	0x58020400
 801ef88:	40007800 	.word	0x40007800
 801ef8c:	58020000 	.word	0x58020000
 801ef90:	40007c00 	.word	0x40007c00
 801ef94:	58022400 	.word	0x58022400
 801ef98:	40011000 	.word	0x40011000
  else if(huart->Instance==USART2)
 801ef9c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801efa0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801efa4:	681b      	ldr	r3, [r3, #0]
 801efa6:	681b      	ldr	r3, [r3, #0]
 801efa8:	4aab      	ldr	r2, [pc, #684]	; (801f258 <HAL_UART_MspInit+0x654>)
 801efaa:	4293      	cmp	r3, r2
 801efac:	f040 8087 	bne.w	801f0be <HAL_UART_MspInit+0x4ba>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 801efb0:	2302      	movs	r3, #2
 801efb2:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 801efb4:	2300      	movs	r3, #0
 801efb6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801efba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801efbe:	4618      	mov	r0, r3
 801efc0:	f7e6 ff92 	bl	8005ee8 <HAL_RCCEx_PeriphCLKConfig>
 801efc4:	4603      	mov	r3, r0
 801efc6:	2b00      	cmp	r3, #0
 801efc8:	d001      	beq.n	801efce <HAL_UART_MspInit+0x3ca>
      Error_Handler();
 801efca:	f7e1 fde9 	bl	8000ba0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 801efce:	4ba3      	ldr	r3, [pc, #652]	; (801f25c <HAL_UART_MspInit+0x658>)
 801efd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801efd4:	4aa1      	ldr	r2, [pc, #644]	; (801f25c <HAL_UART_MspInit+0x658>)
 801efd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801efda:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 801efde:	4b9f      	ldr	r3, [pc, #636]	; (801f25c <HAL_UART_MspInit+0x658>)
 801efe0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801efe4:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 801efe8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801efec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801eff0:	601a      	str	r2, [r3, #0]
 801eff2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801eff6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801effa:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801effc:	4b97      	ldr	r3, [pc, #604]	; (801f25c <HAL_UART_MspInit+0x658>)
 801effe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801f002:	4a96      	ldr	r2, [pc, #600]	; (801f25c <HAL_UART_MspInit+0x658>)
 801f004:	f043 0308 	orr.w	r3, r3, #8
 801f008:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801f00c:	4b93      	ldr	r3, [pc, #588]	; (801f25c <HAL_UART_MspInit+0x658>)
 801f00e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801f012:	f003 0208 	and.w	r2, r3, #8
 801f016:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801f01a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801f01e:	601a      	str	r2, [r3, #0]
 801f020:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801f024:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801f028:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801f02a:	4b8c      	ldr	r3, [pc, #560]	; (801f25c <HAL_UART_MspInit+0x658>)
 801f02c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801f030:	4a8a      	ldr	r2, [pc, #552]	; (801f25c <HAL_UART_MspInit+0x658>)
 801f032:	f043 0301 	orr.w	r3, r3, #1
 801f036:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801f03a:	4b88      	ldr	r3, [pc, #544]	; (801f25c <HAL_UART_MspInit+0x658>)
 801f03c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801f040:	f003 0201 	and.w	r2, r3, #1
 801f044:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801f048:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801f04c:	601a      	str	r2, [r3, #0]
 801f04e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801f052:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801f056:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 801f058:	2320      	movs	r3, #32
 801f05a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f05e:	2302      	movs	r3, #2
 801f060:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f064:	2300      	movs	r3, #0
 801f066:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801f06a:	2300      	movs	r3, #0
 801f06c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 801f070:	2307      	movs	r3, #7
 801f072:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801f076:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 801f07a:	4619      	mov	r1, r3
 801f07c:	4878      	ldr	r0, [pc, #480]	; (801f260 <HAL_UART_MspInit+0x65c>)
 801f07e:	f7e3 fe55 	bl	8002d2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 801f082:	2308      	movs	r3, #8
 801f084:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f088:	2302      	movs	r3, #2
 801f08a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f08e:	2300      	movs	r3, #0
 801f090:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801f094:	2300      	movs	r3, #0
 801f096:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 801f09a:	2307      	movs	r3, #7
 801f09c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801f0a0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 801f0a4:	4619      	mov	r1, r3
 801f0a6:	486f      	ldr	r0, [pc, #444]	; (801f264 <HAL_UART_MspInit+0x660>)
 801f0a8:	f7e3 fe40 	bl	8002d2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 2);
 801f0ac:	2202      	movs	r2, #2
 801f0ae:	2106      	movs	r1, #6
 801f0b0:	2026      	movs	r0, #38	; 0x26
 801f0b2:	f7e2 f93d 	bl	8001330 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 801f0b6:	2026      	movs	r0, #38	; 0x26
 801f0b8:	f7e2 f954 	bl	8001364 <HAL_NVIC_EnableIRQ>
}
 801f0bc:	e0c7      	b.n	801f24e <HAL_UART_MspInit+0x64a>
  else if(huart->Instance==USART3)
 801f0be:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801f0c2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801f0c6:	681b      	ldr	r3, [r3, #0]
 801f0c8:	681b      	ldr	r3, [r3, #0]
 801f0ca:	4a67      	ldr	r2, [pc, #412]	; (801f268 <HAL_UART_MspInit+0x664>)
 801f0cc:	4293      	cmp	r3, r2
 801f0ce:	d15b      	bne.n	801f188 <HAL_UART_MspInit+0x584>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 801f0d0:	2302      	movs	r3, #2
 801f0d2:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 801f0d4:	2300      	movs	r3, #0
 801f0d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801f0da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801f0de:	4618      	mov	r0, r3
 801f0e0:	f7e6 ff02 	bl	8005ee8 <HAL_RCCEx_PeriphCLKConfig>
 801f0e4:	4603      	mov	r3, r0
 801f0e6:	2b00      	cmp	r3, #0
 801f0e8:	d001      	beq.n	801f0ee <HAL_UART_MspInit+0x4ea>
      Error_Handler();
 801f0ea:	f7e1 fd59 	bl	8000ba0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 801f0ee:	4b5b      	ldr	r3, [pc, #364]	; (801f25c <HAL_UART_MspInit+0x658>)
 801f0f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801f0f4:	4a59      	ldr	r2, [pc, #356]	; (801f25c <HAL_UART_MspInit+0x658>)
 801f0f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801f0fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 801f0fe:	4b57      	ldr	r3, [pc, #348]	; (801f25c <HAL_UART_MspInit+0x658>)
 801f100:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801f104:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 801f108:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801f10c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801f110:	601a      	str	r2, [r3, #0]
 801f112:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801f116:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801f11a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801f11c:	4b4f      	ldr	r3, [pc, #316]	; (801f25c <HAL_UART_MspInit+0x658>)
 801f11e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801f122:	4a4e      	ldr	r2, [pc, #312]	; (801f25c <HAL_UART_MspInit+0x658>)
 801f124:	f043 0302 	orr.w	r3, r3, #2
 801f128:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801f12c:	4b4b      	ldr	r3, [pc, #300]	; (801f25c <HAL_UART_MspInit+0x658>)
 801f12e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801f132:	f003 0202 	and.w	r2, r3, #2
 801f136:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801f13a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801f13e:	601a      	str	r2, [r3, #0]
 801f140:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801f144:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801f148:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 801f14a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 801f14e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f152:	2302      	movs	r3, #2
 801f154:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f158:	2300      	movs	r3, #0
 801f15a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801f15e:	2300      	movs	r3, #0
 801f160:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 801f164:	2307      	movs	r3, #7
 801f166:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801f16a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 801f16e:	4619      	mov	r1, r3
 801f170:	483e      	ldr	r0, [pc, #248]	; (801f26c <HAL_UART_MspInit+0x668>)
 801f172:	f7e3 fddb 	bl	8002d2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 1);
 801f176:	2201      	movs	r2, #1
 801f178:	2105      	movs	r1, #5
 801f17a:	2027      	movs	r0, #39	; 0x27
 801f17c:	f7e2 f8d8 	bl	8001330 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 801f180:	2027      	movs	r0, #39	; 0x27
 801f182:	f7e2 f8ef 	bl	8001364 <HAL_NVIC_EnableIRQ>
}
 801f186:	e062      	b.n	801f24e <HAL_UART_MspInit+0x64a>
  else if(huart->Instance==USART6)
 801f188:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801f18c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801f190:	681b      	ldr	r3, [r3, #0]
 801f192:	681b      	ldr	r3, [r3, #0]
 801f194:	4a36      	ldr	r2, [pc, #216]	; (801f270 <HAL_UART_MspInit+0x66c>)
 801f196:	4293      	cmp	r3, r2
 801f198:	d159      	bne.n	801f24e <HAL_UART_MspInit+0x64a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 801f19a:	2301      	movs	r3, #1
 801f19c:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 801f19e:	2300      	movs	r3, #0
 801f1a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801f1a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801f1a8:	4618      	mov	r0, r3
 801f1aa:	f7e6 fe9d 	bl	8005ee8 <HAL_RCCEx_PeriphCLKConfig>
 801f1ae:	4603      	mov	r3, r0
 801f1b0:	2b00      	cmp	r3, #0
 801f1b2:	d001      	beq.n	801f1b8 <HAL_UART_MspInit+0x5b4>
      Error_Handler();
 801f1b4:	f7e1 fcf4 	bl	8000ba0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 801f1b8:	4b28      	ldr	r3, [pc, #160]	; (801f25c <HAL_UART_MspInit+0x658>)
 801f1ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801f1be:	4a27      	ldr	r2, [pc, #156]	; (801f25c <HAL_UART_MspInit+0x658>)
 801f1c0:	f043 0320 	orr.w	r3, r3, #32
 801f1c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 801f1c8:	4b24      	ldr	r3, [pc, #144]	; (801f25c <HAL_UART_MspInit+0x658>)
 801f1ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801f1ce:	f003 0220 	and.w	r2, r3, #32
 801f1d2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801f1d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801f1da:	601a      	str	r2, [r3, #0]
 801f1dc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801f1e0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801f1e4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801f1e6:	4b1d      	ldr	r3, [pc, #116]	; (801f25c <HAL_UART_MspInit+0x658>)
 801f1e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801f1ec:	4a1b      	ldr	r2, [pc, #108]	; (801f25c <HAL_UART_MspInit+0x658>)
 801f1ee:	f043 0304 	orr.w	r3, r3, #4
 801f1f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801f1f6:	4b19      	ldr	r3, [pc, #100]	; (801f25c <HAL_UART_MspInit+0x658>)
 801f1f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801f1fc:	f003 0204 	and.w	r2, r3, #4
 801f200:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801f204:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801f208:	601a      	str	r2, [r3, #0]
 801f20a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801f20e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801f212:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 801f214:	23c0      	movs	r3, #192	; 0xc0
 801f216:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f21a:	2302      	movs	r3, #2
 801f21c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f220:	2300      	movs	r3, #0
 801f222:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801f226:	2300      	movs	r3, #0
 801f228:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 801f22c:	2307      	movs	r3, #7
 801f22e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801f232:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 801f236:	4619      	mov	r1, r3
 801f238:	480e      	ldr	r0, [pc, #56]	; (801f274 <HAL_UART_MspInit+0x670>)
 801f23a:	f7e3 fd77 	bl	8002d2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 6, 1);
 801f23e:	2201      	movs	r2, #1
 801f240:	2106      	movs	r1, #6
 801f242:	2047      	movs	r0, #71	; 0x47
 801f244:	f7e2 f874 	bl	8001330 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 801f248:	2047      	movs	r0, #71	; 0x47
 801f24a:	f7e2 f88b 	bl	8001364 <HAL_NVIC_EnableIRQ>
}
 801f24e:	bf00      	nop
 801f250:	f507 7790 	add.w	r7, r7, #288	; 0x120
 801f254:	46bd      	mov	sp, r7
 801f256:	bd80      	pop	{r7, pc}
 801f258:	40004400 	.word	0x40004400
 801f25c:	58024400 	.word	0x58024400
 801f260:	58020c00 	.word	0x58020c00
 801f264:	58020000 	.word	0x58020000
 801f268:	40004800 	.word	0x40004800
 801f26c:	58020400 	.word	0x58020400
 801f270:	40011400 	.word	0x40011400
 801f274:	58020800 	.word	0x58020800

0801f278 <spi_wr_data>:
 *
 */
extern SPI_HandleTypeDef hspi4;

static void spi_wr_data(SPI_HandleTypeDef *hspi, uint8_t *tx_data, uint8_t *rx_data)
{
 801f278:	b580      	push	{r7, lr}
 801f27a:	b086      	sub	sp, #24
 801f27c:	af02      	add	r7, sp, #8
 801f27e:	60f8      	str	r0, [r7, #12]
 801f280:	60b9      	str	r1, [r7, #8]
 801f282:	607a      	str	r2, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi4, tx_data, rx_data, 1, 100);
 801f284:	2364      	movs	r3, #100	; 0x64
 801f286:	9300      	str	r3, [sp, #0]
 801f288:	2301      	movs	r3, #1
 801f28a:	687a      	ldr	r2, [r7, #4]
 801f28c:	68b9      	ldr	r1, [r7, #8]
 801f28e:	4803      	ldr	r0, [pc, #12]	; (801f29c <spi_wr_data+0x24>)
 801f290:	f7eb fb92 	bl	800a9b8 <HAL_SPI_TransmitReceive>
}
 801f294:	bf00      	nop
 801f296:	3710      	adds	r7, #16
 801f298:	46bd      	mov	sp, r7
 801f29a:	bd80      	pop	{r7, pc}
 801f29c:	2401a83c 	.word	0x2401a83c

0801f2a0 <regRead>:

uint8_t regRead(uint8_t regnum)
{
 801f2a0:	b580      	push	{r7, lr}
 801f2a2:	b084      	sub	sp, #16
 801f2a4:	af00      	add	r7, sp, #0
 801f2a6:	4603      	mov	r3, r0
 801f2a8:	71fb      	strb	r3, [r7, #7]
    uint8_t ulDataTx[1];
    uint8_t ulDataRx[1];

	ulDataTx[0] = 0x00;
 801f2aa:	2300      	movs	r3, #0
 801f2ac:	733b      	strb	r3, [r7, #12]
	ulDataRx[0] = 0x00;
 801f2ae:	2300      	movs	r3, #0
 801f2b0:	723b      	strb	r3, [r7, #8]

	ulDataTx[0] = REGRD_OPCODE_MASK + (regnum & 0x1f);
 801f2b2:	79fb      	ldrb	r3, [r7, #7]
 801f2b4:	f003 031f 	and.w	r3, r3, #31
 801f2b8:	b2db      	uxtb	r3, r3
 801f2ba:	3320      	adds	r3, #32
 801f2bc:	b2db      	uxtb	r3, r3
 801f2be:	733b      	strb	r3, [r7, #12]
	spi_wr_data(&hspi4, ulDataTx, ulDataRx);
 801f2c0:	f107 0208 	add.w	r2, r7, #8
 801f2c4:	f107 030c 	add.w	r3, r7, #12
 801f2c8:	4619      	mov	r1, r3
 801f2ca:	480f      	ldr	r0, [pc, #60]	; (801f308 <regRead+0x68>)
 801f2cc:	f7ff ffd4 	bl	801f278 <spi_wr_data>

	ulDataTx[0] = 0x00;
 801f2d0:	2300      	movs	r3, #0
 801f2d2:	733b      	strb	r3, [r7, #12]
	spi_wr_data(&hspi4, ulDataTx, ulDataRx);
 801f2d4:	f107 0208 	add.w	r2, r7, #8
 801f2d8:	f107 030c 	add.w	r3, r7, #12
 801f2dc:	4619      	mov	r1, r3
 801f2de:	480a      	ldr	r0, [pc, #40]	; (801f308 <regRead+0x68>)
 801f2e0:	f7ff ffca 	bl	801f278 <spi_wr_data>

	ulDataTx[0] = 0x00;
 801f2e4:	2300      	movs	r3, #0
 801f2e6:	733b      	strb	r3, [r7, #12]
	ulDataRx[0] = 0x00;
 801f2e8:	2300      	movs	r3, #0
 801f2ea:	723b      	strb	r3, [r7, #8]

	spi_wr_data(&hspi4, ulDataTx, ulDataRx);
 801f2ec:	f107 0208 	add.w	r2, r7, #8
 801f2f0:	f107 030c 	add.w	r3, r7, #12
 801f2f4:	4619      	mov	r1, r3
 801f2f6:	4804      	ldr	r0, [pc, #16]	; (801f308 <regRead+0x68>)
 801f2f8:	f7ff ffbe 	bl	801f278 <spi_wr_data>

	return ulDataRx[0];
 801f2fc:	7a3b      	ldrb	r3, [r7, #8]
}
 801f2fe:	4618      	mov	r0, r3
 801f300:	3710      	adds	r7, #16
 801f302:	46bd      	mov	sp, r7
 801f304:	bd80      	pop	{r7, pc}
 801f306:	bf00      	nop
 801f308:	2401a83c 	.word	0x2401a83c

0801f30c <WriteReg>:
 * \param regnum addr_mask 8-bit mask of the register to which we start writing
 * \param data to be written
 *
 */
void WriteReg(uint8_t regnum, uint8_t data)
{
 801f30c:	b580      	push	{r7, lr}
 801f30e:	b084      	sub	sp, #16
 801f310:	af00      	add	r7, sp, #0
 801f312:	4603      	mov	r3, r0
 801f314:	460a      	mov	r2, r1
 801f316:	71fb      	strb	r3, [r7, #7]
 801f318:	4613      	mov	r3, r2
 801f31a:	71bb      	strb	r3, [r7, #6]
	uint8_t ulDataTx[1],ulDataRx[1];
	ulDataRx[0] = 0;
 801f31c:	2300      	movs	r3, #0
 801f31e:	723b      	strb	r3, [r7, #8]
	ulDataTx[0] = 0;
 801f320:	2300      	movs	r3, #0
 801f322:	733b      	strb	r3, [r7, #12]

	ulDataTx[0] = REGWR_OPCODE_MASK + (regnum & 0x1f);   	// Register address
 801f324:	79fb      	ldrb	r3, [r7, #7]
 801f326:	f003 031f 	and.w	r3, r3, #31
 801f32a:	b2db      	uxtb	r3, r3
 801f32c:	3340      	adds	r3, #64	; 0x40
 801f32e:	b2db      	uxtb	r3, r3
 801f330:	733b      	strb	r3, [r7, #12]
	spi_wr_data(&hspi4, ulDataTx, ulDataRx);
 801f332:	f107 0208 	add.w	r2, r7, #8
 801f336:	f107 030c 	add.w	r3, r7, #12
 801f33a:	4619      	mov	r1, r3
 801f33c:	480d      	ldr	r0, [pc, #52]	; (801f374 <WriteReg+0x68>)
 801f33e:	f7ff ff9b 	bl	801f278 <spi_wr_data>

	ulDataTx[0] = 0x00;
 801f342:	2300      	movs	r3, #0
 801f344:	733b      	strb	r3, [r7, #12]
	spi_wr_data(&hspi4, ulDataTx, ulDataRx);             	// Lend data
 801f346:	f107 0208 	add.w	r2, r7, #8
 801f34a:	f107 030c 	add.w	r3, r7, #12
 801f34e:	4619      	mov	r1, r3
 801f350:	4808      	ldr	r0, [pc, #32]	; (801f374 <WriteReg+0x68>)
 801f352:	f7ff ff91 	bl	801f278 <spi_wr_data>

	ulDataTx[0] = data;
 801f356:	79bb      	ldrb	r3, [r7, #6]
 801f358:	733b      	strb	r3, [r7, #12]
	spi_wr_data(&hspi4, ulDataTx, ulDataRx);				// data
 801f35a:	f107 0208 	add.w	r2, r7, #8
 801f35e:	f107 030c 	add.w	r3, r7, #12
 801f362:	4619      	mov	r1, r3
 801f364:	4803      	ldr	r0, [pc, #12]	; (801f374 <WriteReg+0x68>)
 801f366:	f7ff ff87 	bl	801f278 <spi_wr_data>

}
 801f36a:	bf00      	nop
 801f36c:	3710      	adds	r7, #16
 801f36e:	46bd      	mov	sp, r7
 801f370:	bd80      	pop	{r7, pc}
 801f372:	bf00      	nop
 801f374:	2401a83c 	.word	0x2401a83c

0801f378 <sendCommand>:
 *
 * \param op_code is the command being issued
 *
 */
void sendCommand(uint8_t op_code)
{
 801f378:	b580      	push	{r7, lr}
 801f37a:	b084      	sub	sp, #16
 801f37c:	af00      	add	r7, sp, #0
 801f37e:	4603      	mov	r3, r0
 801f380:	71fb      	strb	r3, [r7, #7]
	uint8_t command[1];
	uint8_t tem[1];
	tem[0] = 0;
 801f382:	2300      	movs	r3, #0
 801f384:	723b      	strb	r3, [r7, #8]

	command[0] = op_code;
 801f386:	79fb      	ldrb	r3, [r7, #7]
 801f388:	733b      	strb	r3, [r7, #12]
	spi_wr_data(&hspi4, command, tem);
 801f38a:	f107 0208 	add.w	r2, r7, #8
 801f38e:	f107 030c 	add.w	r3, r7, #12
 801f392:	4619      	mov	r1, r3
 801f394:	4803      	ldr	r0, [pc, #12]	; (801f3a4 <sendCommand+0x2c>)
 801f396:	f7ff ff6f 	bl	801f278 <spi_wr_data>
}
 801f39a:	bf00      	nop
 801f39c:	3710      	adds	r7, #16
 801f39e:	46bd      	mov	sp, r7
 801f3a0:	bd80      	pop	{r7, pc}
 801f3a2:	bf00      	nop
 801f3a4:	2401a83c 	.word	0x2401a83c

0801f3a8 <dataRead>:
 *
 * Read the last conversion result
 *
 */
uint32_t dataRead()
{
 801f3a8:	b580      	push	{r7, lr}
 801f3aa:	b084      	sub	sp, #16
 801f3ac:	af00      	add	r7, sp, #0
	uint32_t result = 0;
 801f3ae:	2300      	movs	r3, #0
 801f3b0:	60fb      	str	r3, [r7, #12]
	uint8_t ulDataTx[1],ulDataRx[1];
	ulDataTx[0] = 0x00;
 801f3b2:	2300      	movs	r3, #0
 801f3b4:	723b      	strb	r3, [r7, #8]
	ulDataRx[0] = 0x00;
 801f3b6:	2300      	movs	r3, #0
 801f3b8:	713b      	strb	r3, [r7, #4]

	// according to datasheet chapter 9.5.4.2 Read Data by RDATA Command
	sendCommand(RDATA_OPCODE_MASK);
 801f3ba:	2012      	movs	r0, #18
 801f3bc:	f7ff ffdc 	bl	801f378 <sendCommand>

	ulDataTx[0] = 0x00;
 801f3c0:	2300      	movs	r3, #0
 801f3c2:	723b      	strb	r3, [r7, #8]
	ulDataRx[0] = 0x00;
 801f3c4:	2300      	movs	r3, #0
 801f3c6:	713b      	strb	r3, [r7, #4]
	// get the conversion data (3 bytes)
	spi_wr_data(&hspi4, ulDataTx, ulDataRx);
 801f3c8:	1d3a      	adds	r2, r7, #4
 801f3ca:	f107 0308 	add.w	r3, r7, #8
 801f3ce:	4619      	mov	r1, r3
 801f3d0:	4814      	ldr	r0, [pc, #80]	; (801f424 <dataRead+0x7c>)
 801f3d2:	f7ff ff51 	bl	801f278 <spi_wr_data>
	result = ulDataRx[0];
 801f3d6:	793b      	ldrb	r3, [r7, #4]
 801f3d8:	60fb      	str	r3, [r7, #12]


	ulDataTx[0] = 0x00;
 801f3da:	2300      	movs	r3, #0
 801f3dc:	723b      	strb	r3, [r7, #8]
	ulDataRx[0] = 0x00;
 801f3de:	2300      	movs	r3, #0
 801f3e0:	713b      	strb	r3, [r7, #4]
	spi_wr_data(&hspi4, ulDataTx, ulDataRx);
 801f3e2:	1d3a      	adds	r2, r7, #4
 801f3e4:	f107 0308 	add.w	r3, r7, #8
 801f3e8:	4619      	mov	r1, r3
 801f3ea:	480e      	ldr	r0, [pc, #56]	; (801f424 <dataRead+0x7c>)
 801f3ec:	f7ff ff44 	bl	801f278 <spi_wr_data>
	result = (result << 8) + ulDataRx[0];
 801f3f0:	68fb      	ldr	r3, [r7, #12]
 801f3f2:	021b      	lsls	r3, r3, #8
 801f3f4:	793a      	ldrb	r2, [r7, #4]
 801f3f6:	4413      	add	r3, r2
 801f3f8:	60fb      	str	r3, [r7, #12]

	ulDataTx[0] = 0x00;
 801f3fa:	2300      	movs	r3, #0
 801f3fc:	723b      	strb	r3, [r7, #8]
	ulDataRx[0] = 0x00;
 801f3fe:	2300      	movs	r3, #0
 801f400:	713b      	strb	r3, [r7, #4]
	spi_wr_data(&hspi4, ulDataTx, ulDataRx);
 801f402:	1d3a      	adds	r2, r7, #4
 801f404:	f107 0308 	add.w	r3, r7, #8
 801f408:	4619      	mov	r1, r3
 801f40a:	4806      	ldr	r0, [pc, #24]	; (801f424 <dataRead+0x7c>)
 801f40c:	f7ff ff34 	bl	801f278 <spi_wr_data>
	result = (result << 8) + ulDataRx[0];
 801f410:	68fb      	ldr	r3, [r7, #12]
 801f412:	021b      	lsls	r3, r3, #8
 801f414:	793a      	ldrb	r2, [r7, #4]
 801f416:	4413      	add	r3, r2
 801f418:	60fb      	str	r3, [r7, #12]

	return (result);
 801f41a:	68fb      	ldr	r3, [r7, #12]
}
 801f41c:	4618      	mov	r0, r3
 801f41e:	3710      	adds	r7, #16
 801f420:	46bd      	mov	sp, r7
 801f422:	bd80      	pop	{r7, pc}
 801f424:	2401a83c 	.word	0x2401a83c

0801f428 <InitDevice_ADC>:
 * return True if device is in correct hardware defaults and is connected
 *
 */

uint8_t InitDevice_ADC()
{
 801f428:	b580      	push	{r7, lr}
 801f42a:	b086      	sub	sp, #24
 801f42c:	af00      	add	r7, sp, #0
	osDelay(10);
 801f42e:	200a      	movs	r0, #10
 801f430:	f7f5 ff0e 	bl	8015250 <osDelay>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);		/*	PA11 ----> NCC	*/
 801f434:	2200      	movs	r2, #0
 801f436:	2110      	movs	r1, #16
 801f438:	482f      	ldr	r0, [pc, #188]	; (801f4f8 <InitDevice_ADC+0xd0>)
 801f43a:	f7e3 fe27 	bl	800308c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_9, GPIO_PIN_SET);			/*	PD12 ----> ADC_RESET	*/
 801f43e:	2201      	movs	r2, #1
 801f440:	f44f 7100 	mov.w	r1, #512	; 0x200
 801f444:	482d      	ldr	r0, [pc, #180]	; (801f4fc <InitDevice_ADC+0xd4>)
 801f446:	f7e3 fe21 	bl	800308c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_10, GPIO_PIN_RESET);		/*	PD13 ----> ADC_START	*/
 801f44a:	2200      	movs	r2, #0
 801f44c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801f450:	482a      	ldr	r0, [pc, #168]	; (801f4fc <InitDevice_ADC+0xd4>)
 801f452:	f7e3 fe1b 	bl	800308c <HAL_GPIO_WritePin>

	sendCommand(STOP_OPCODE_MASK);
 801f456:	200a      	movs	r0, #10
 801f458:	f7ff ff8e 	bl	801f378 <sendCommand>

	uint8_t registers[NUM_REGISTERS];

	/* Default register settings */
	registers[ID_ADDR_MASK] 		= 0x08;
 801f45c:	2308      	movs	r3, #8
 801f45e:	703b      	strb	r3, [r7, #0]
	registers[STATUS_ADDR_MASK]		= 0x00;
 801f460:	2300      	movs	r3, #0
 801f462:	707b      	strb	r3, [r7, #1]
	registers[INPMUX_ADDR_MASK]		= 0x4C; //Set MUX to AIN4 & AINCOM
 801f464:	234c      	movs	r3, #76	; 0x4c
 801f466:	70bb      	strb	r3, [r7, #2]
	registers[PGA_ADDR_MASK] 		= 0x00; //Disable PGA
 801f468:	2300      	movs	r3, #0
 801f46a:	70fb      	strb	r3, [r7, #3]
	registers[DATARATE_ADDR_MASK] 	= 0x14; //Set Datarate:disable G-Chop,internal CLK,Continous Conversion, Low-Latency Filter, Datarate:20SPS
 801f46c:	2314      	movs	r3, #20
 801f46e:	713b      	strb	r3, [r7, #4]
	registers[REF_ADDR_MASK] 		= 0x00; //disable Ref-Monitor, disable positive reference buffer,dis. neg RefBuf,select ref input pins,dis. inter
 801f470:	2300      	movs	r3, #0
 801f472:	717b      	strb	r3, [r7, #5]
	registers[IDACMAG_ADDR_MASK] 	= 0x00;
 801f474:	2300      	movs	r3, #0
 801f476:	71bb      	strb	r3, [r7, #6]
	registers[IDACMUX_ADDR_MASK] 	= 0xFF;	//Disconnected IDAC1 and IDAC2
 801f478:	23ff      	movs	r3, #255	; 0xff
 801f47a:	71fb      	strb	r3, [r7, #7]
	registers[VBIAS_ADDR_MASK] 		= 0x00;
 801f47c:	2300      	movs	r3, #0
 801f47e:	723b      	strb	r3, [r7, #8]
	registers[SYS_ADDR_MASK]		= 0x00;
 801f480:	2300      	movs	r3, #0
 801f482:	727b      	strb	r3, [r7, #9]
	registers[OFCAL0_ADDR_MASK] 	= 0x00;
 801f484:	2300      	movs	r3, #0
 801f486:	72bb      	strb	r3, [r7, #10]
	registers[OFCAL1_ADDR_MASK] 	= 0x00;
 801f488:	2300      	movs	r3, #0
 801f48a:	72fb      	strb	r3, [r7, #11]
	registers[OFCAL2_ADDR_MASK] 	= 0x00;
 801f48c:	2300      	movs	r3, #0
 801f48e:	733b      	strb	r3, [r7, #12]
	registers[FSCAL0_ADDR_MASK] 	= 0x00;
 801f490:	2300      	movs	r3, #0
 801f492:	737b      	strb	r3, [r7, #13]
	registers[FSCAL1_ADDR_MASK] 	= 0x00;
 801f494:	2300      	movs	r3, #0
 801f496:	73bb      	strb	r3, [r7, #14]
	registers[FSCAL2_ADDR_MASK] 	= 0x40;
 801f498:	2340      	movs	r3, #64	; 0x40
 801f49a:	73fb      	strb	r3, [r7, #15]
	registers[GPIODAT_ADDR_MASK] 	= 0xF0;
 801f49c:	23f0      	movs	r3, #240	; 0xf0
 801f49e:	743b      	strb	r3, [r7, #16]
	registers[GPIOCON_ADDR_MASK]	= 0x00;
 801f4a0:	2300      	movs	r3, #0
 801f4a2:	747b      	strb	r3, [r7, #17]
	osDelay(10);
 801f4a4:	200a      	movs	r0, #10
 801f4a6:	f7f5 fed3 	bl	8015250 <osDelay>

	if( regRead(0x1) == 0x80 )
 801f4aa:	2001      	movs	r0, #1
 801f4ac:	f7ff fef8 	bl	801f2a0 <regRead>
 801f4b0:	4603      	mov	r3, r0
 801f4b2:	2b80      	cmp	r3, #128	; 0x80
 801f4b4:	d103      	bne.n	801f4be <InitDevice_ADC+0x96>
	{
		WriteReg(0x1, 0);
 801f4b6:	2100      	movs	r1, #0
 801f4b8:	2001      	movs	r0, #1
 801f4ba:	f7ff ff27 	bl	801f30c <WriteReg>
	}

	for( int i = 0x02; i < 18 ; i++)
 801f4be:	2302      	movs	r3, #2
 801f4c0:	617b      	str	r3, [r7, #20]
 801f4c2:	e00b      	b.n	801f4dc <InitDevice_ADC+0xb4>
	{

		WriteReg(i, registers[i]);
 801f4c4:	697b      	ldr	r3, [r7, #20]
 801f4c6:	b2d8      	uxtb	r0, r3
 801f4c8:	463a      	mov	r2, r7
 801f4ca:	697b      	ldr	r3, [r7, #20]
 801f4cc:	4413      	add	r3, r2
 801f4ce:	781b      	ldrb	r3, [r3, #0]
 801f4d0:	4619      	mov	r1, r3
 801f4d2:	f7ff ff1b 	bl	801f30c <WriteReg>
	for( int i = 0x02; i < 18 ; i++)
 801f4d6:	697b      	ldr	r3, [r7, #20]
 801f4d8:	3301      	adds	r3, #1
 801f4da:	617b      	str	r3, [r7, #20]
 801f4dc:	697b      	ldr	r3, [r7, #20]
 801f4de:	2b11      	cmp	r3, #17
 801f4e0:	ddf0      	ble.n	801f4c4 <InitDevice_ADC+0x9c>
	}

	osDelay(10);
 801f4e2:	200a      	movs	r0, #10
 801f4e4:	f7f5 feb4 	bl	8015250 <osDelay>
	sendCommand(START_OPCODE_MASK);
 801f4e8:	2008      	movs	r0, #8
 801f4ea:	f7ff ff45 	bl	801f378 <sendCommand>
	return 1;
 801f4ee:	2301      	movs	r3, #1

}
 801f4f0:	4618      	mov	r0, r3
 801f4f2:	3718      	adds	r7, #24
 801f4f4:	46bd      	mov	sp, r7
 801f4f6:	bd80      	pop	{r7, pc}
 801f4f8:	58021000 	.word	0x58021000
 801f4fc:	58022000 	.word	0x58022000

0801f500 <Getdata_ADC>:

double Getdata_ADC(uint8_t chanel_an)
{
 801f500:	b580      	push	{r7, lr}
 801f502:	b086      	sub	sp, #24
 801f504:	af00      	add	r7, sp, #0
 801f506:	4603      	mov	r3, r0
 801f508:	71fb      	strb	r3, [r7, #7]
	uint32_t temp_an;
	double data_an;

	sendCommand(STOP_OPCODE_MASK);
 801f50a:	200a      	movs	r0, #10
 801f50c:	f7ff ff34 	bl	801f378 <sendCommand>
	WriteReg(INPMUX_ADDR_MASK, chanel_an);
 801f510:	79fb      	ldrb	r3, [r7, #7]
 801f512:	4619      	mov	r1, r3
 801f514:	2002      	movs	r0, #2
 801f516:	f7ff fef9 	bl	801f30c <WriteReg>
	sendCommand(START_OPCODE_MASK);
 801f51a:	2008      	movs	r0, #8
 801f51c:	f7ff ff2c 	bl	801f378 <sendCommand>
	osDelay(100);
 801f520:	2064      	movs	r0, #100	; 0x64
 801f522:	f7f5 fe95 	bl	8015250 <osDelay>

	temp_an = dataRead();
 801f526:	f7ff ff3f 	bl	801f3a8 <dataRead>
 801f52a:	6178      	str	r0, [r7, #20]

	//printf("temp_an = %lu\n\r", (unsigned long)temp_an);
	data_an = (double) temp_an/DEVIDER_DATA;
 801f52c:	697b      	ldr	r3, [r7, #20]
 801f52e:	ee07 3a90 	vmov	s15, r3
 801f532:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 801f536:	ed9f 5b08 	vldr	d5, [pc, #32]	; 801f558 <Getdata_ADC+0x58>
 801f53a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801f53e:	ed87 7b02 	vstr	d7, [r7, #8]
	return data_an;
 801f542:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801f546:	ec43 2b17 	vmov	d7, r2, r3
}
 801f54a:	eeb0 0b47 	vmov.f64	d0, d7
 801f54e:	3718      	adds	r7, #24
 801f550:	46bd      	mov	sp, r7
 801f552:	bd80      	pop	{r7, pc}
 801f554:	f3af 8000 	nop.w
 801f558:	00000000 	.word	0x00000000
 801f55c:	4139999a 	.word	0x4139999a

0801f560 <Analog_setup>:
/****************************************************************************/
/***    Implementation                          */
/****************************************************************************/

void Analog_setup()
{
 801f560:	b580      	push	{r7, lr}
 801f562:	af00      	add	r7, sp, #0
//		if(analogSettingList[i].status[0] == 'E')
//			osTimerStart(periodicTimerHandle[i], atoi(analogSettingList[i].interval)*1000);
//		else
//			osTimerStop(periodicTimerHandle[i]);
//	}
	printf("The value of num111 is\n\r");
 801f564:	4809      	ldr	r0, [pc, #36]	; (801f58c <Analog_setup+0x2c>)
 801f566:	f002 fce9 	bl	8021f3c <iprintf>
	osTimerStart(periodicTimerHandle[0], 5000);
 801f56a:	4b09      	ldr	r3, [pc, #36]	; (801f590 <Analog_setup+0x30>)
 801f56c:	681b      	ldr	r3, [r3, #0]
 801f56e:	f241 3188 	movw	r1, #5000	; 0x1388
 801f572:	4618      	mov	r0, r3
 801f574:	f7f5 feb4 	bl	80152e0 <osTimerStart>
	osTimerStart(periodicTimerHandle[1], 12000);
 801f578:	4b05      	ldr	r3, [pc, #20]	; (801f590 <Analog_setup+0x30>)
 801f57a:	685b      	ldr	r3, [r3, #4]
 801f57c:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 801f580:	4618      	mov	r0, r3
 801f582:	f7f5 fead 	bl	80152e0 <osTimerStart>
}
 801f586:	bf00      	nop
 801f588:	bd80      	pop	{r7, pc}
 801f58a:	bf00      	nop
 801f58c:	08025c0c 	.word	0x08025c0c
 801f590:	2401b0d8 	.word	0x2401b0d8

0801f594 <AnalogSensor_Task>:

	return dataAnalogUsed;
}

void AnalogSensor_Task(void const * argument)
{
 801f594:	b590      	push	{r4, r7, lr}
 801f596:	ed2d 8b02 	vpush	{d8}
 801f59a:	b0a3      	sub	sp, #140	; 0x8c
 801f59c:	af00      	add	r7, sp, #0
 801f59e:	6078      	str	r0, [r7, #4]
	float fdata = 0;
 801f5a0:	f04f 0300 	mov.w	r3, #0
 801f5a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	osEvent event;
	InitDevice_ADC();
 801f5a8:	f7ff ff3e 	bl	801f428 <InitDevice_ADC>

	osMessageQDef(myQueue03, 16, uint16_t);
 801f5ac:	4bce      	ldr	r3, [pc, #824]	; (801f8e8 <AnalogSensor_Task+0x354>)
 801f5ae:	f107 0468 	add.w	r4, r7, #104	; 0x68
 801f5b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f5b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	analogQueueHandle = osMessageCreate(osMessageQ(myQueue03), NULL);
 801f5b8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801f5bc:	2100      	movs	r1, #0
 801f5be:	4618      	mov	r0, r3
 801f5c0:	f7f5 ff8c 	bl	80154dc <osMessageCreate>
 801f5c4:	4603      	mov	r3, r0
 801f5c6:	4ac9      	ldr	r2, [pc, #804]	; (801f8ec <AnalogSensor_Task+0x358>)
 801f5c8:	6013      	str	r3, [r2, #0]

	osTimerDef(periodicTimer1, PTCallback1);
 801f5ca:	4bc9      	ldr	r3, [pc, #804]	; (801f8f0 <AnalogSensor_Task+0x35c>)
 801f5cc:	663b      	str	r3, [r7, #96]	; 0x60
 801f5ce:	2300      	movs	r3, #0
 801f5d0:	667b      	str	r3, [r7, #100]	; 0x64
	periodicTimerHandle[0] = osTimerCreate(osTimer(periodicTimer1), osTimerPeriodic, NULL);
 801f5d2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801f5d6:	2200      	movs	r2, #0
 801f5d8:	2101      	movs	r1, #1
 801f5da:	4618      	mov	r0, r3
 801f5dc:	f7f5 fe4c 	bl	8015278 <osTimerCreate>
 801f5e0:	4603      	mov	r3, r0
 801f5e2:	4ac4      	ldr	r2, [pc, #784]	; (801f8f4 <AnalogSensor_Task+0x360>)
 801f5e4:	6013      	str	r3, [r2, #0]

	osTimerDef(periodicTimer2, PTCallback2);
 801f5e6:	4bc4      	ldr	r3, [pc, #784]	; (801f8f8 <AnalogSensor_Task+0x364>)
 801f5e8:	65bb      	str	r3, [r7, #88]	; 0x58
 801f5ea:	2300      	movs	r3, #0
 801f5ec:	65fb      	str	r3, [r7, #92]	; 0x5c
	periodicTimerHandle[1] = osTimerCreate(osTimer(periodicTimer2), osTimerPeriodic, NULL);
 801f5ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801f5f2:	2200      	movs	r2, #0
 801f5f4:	2101      	movs	r1, #1
 801f5f6:	4618      	mov	r0, r3
 801f5f8:	f7f5 fe3e 	bl	8015278 <osTimerCreate>
 801f5fc:	4603      	mov	r3, r0
 801f5fe:	4abd      	ldr	r2, [pc, #756]	; (801f8f4 <AnalogSensor_Task+0x360>)
 801f600:	6053      	str	r3, [r2, #4]

	osTimerDef(periodicTimer3, PTCallback3);
 801f602:	4bbe      	ldr	r3, [pc, #760]	; (801f8fc <AnalogSensor_Task+0x368>)
 801f604:	653b      	str	r3, [r7, #80]	; 0x50
 801f606:	2300      	movs	r3, #0
 801f608:	657b      	str	r3, [r7, #84]	; 0x54
	periodicTimerHandle[2] = osTimerCreate(osTimer(periodicTimer3), osTimerPeriodic, NULL);
 801f60a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801f60e:	2200      	movs	r2, #0
 801f610:	2101      	movs	r1, #1
 801f612:	4618      	mov	r0, r3
 801f614:	f7f5 fe30 	bl	8015278 <osTimerCreate>
 801f618:	4603      	mov	r3, r0
 801f61a:	4ab6      	ldr	r2, [pc, #728]	; (801f8f4 <AnalogSensor_Task+0x360>)
 801f61c:	6093      	str	r3, [r2, #8]

	osTimerDef(periodicTimer4, PTCallback4);
 801f61e:	4bb8      	ldr	r3, [pc, #736]	; (801f900 <AnalogSensor_Task+0x36c>)
 801f620:	64bb      	str	r3, [r7, #72]	; 0x48
 801f622:	2300      	movs	r3, #0
 801f624:	64fb      	str	r3, [r7, #76]	; 0x4c
	periodicTimerHandle[3] = osTimerCreate(osTimer(periodicTimer4), osTimerPeriodic, NULL);
 801f626:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801f62a:	2200      	movs	r2, #0
 801f62c:	2101      	movs	r1, #1
 801f62e:	4618      	mov	r0, r3
 801f630:	f7f5 fe22 	bl	8015278 <osTimerCreate>
 801f634:	4603      	mov	r3, r0
 801f636:	4aaf      	ldr	r2, [pc, #700]	; (801f8f4 <AnalogSensor_Task+0x360>)
 801f638:	60d3      	str	r3, [r2, #12]

	osTimerDef(periodicTimer5, PTCallback5);
 801f63a:	4bb2      	ldr	r3, [pc, #712]	; (801f904 <AnalogSensor_Task+0x370>)
 801f63c:	643b      	str	r3, [r7, #64]	; 0x40
 801f63e:	2300      	movs	r3, #0
 801f640:	647b      	str	r3, [r7, #68]	; 0x44
	periodicTimerHandle[4] = osTimerCreate(osTimer(periodicTimer5), osTimerPeriodic, NULL);
 801f642:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801f646:	2200      	movs	r2, #0
 801f648:	2101      	movs	r1, #1
 801f64a:	4618      	mov	r0, r3
 801f64c:	f7f5 fe14 	bl	8015278 <osTimerCreate>
 801f650:	4603      	mov	r3, r0
 801f652:	4aa8      	ldr	r2, [pc, #672]	; (801f8f4 <AnalogSensor_Task+0x360>)
 801f654:	6113      	str	r3, [r2, #16]

	osTimerDef(periodicTimer6, PTCallback6);
 801f656:	4bac      	ldr	r3, [pc, #688]	; (801f908 <AnalogSensor_Task+0x374>)
 801f658:	63bb      	str	r3, [r7, #56]	; 0x38
 801f65a:	2300      	movs	r3, #0
 801f65c:	63fb      	str	r3, [r7, #60]	; 0x3c
	periodicTimerHandle[5] = osTimerCreate(osTimer(periodicTimer6), osTimerPeriodic, NULL);
 801f65e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801f662:	2200      	movs	r2, #0
 801f664:	2101      	movs	r1, #1
 801f666:	4618      	mov	r0, r3
 801f668:	f7f5 fe06 	bl	8015278 <osTimerCreate>
 801f66c:	4603      	mov	r3, r0
 801f66e:	4aa1      	ldr	r2, [pc, #644]	; (801f8f4 <AnalogSensor_Task+0x360>)
 801f670:	6153      	str	r3, [r2, #20]

	osTimerDef(periodicTimer7, PTCallback7);
 801f672:	4ba6      	ldr	r3, [pc, #664]	; (801f90c <AnalogSensor_Task+0x378>)
 801f674:	633b      	str	r3, [r7, #48]	; 0x30
 801f676:	2300      	movs	r3, #0
 801f678:	637b      	str	r3, [r7, #52]	; 0x34
	periodicTimerHandle[6] = osTimerCreate(osTimer(periodicTimer7), osTimerPeriodic, NULL);
 801f67a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f67e:	2200      	movs	r2, #0
 801f680:	2101      	movs	r1, #1
 801f682:	4618      	mov	r0, r3
 801f684:	f7f5 fdf8 	bl	8015278 <osTimerCreate>
 801f688:	4603      	mov	r3, r0
 801f68a:	4a9a      	ldr	r2, [pc, #616]	; (801f8f4 <AnalogSensor_Task+0x360>)
 801f68c:	6193      	str	r3, [r2, #24]

	osTimerDef(periodicTimer8, PTCallback8);
 801f68e:	4ba0      	ldr	r3, [pc, #640]	; (801f910 <AnalogSensor_Task+0x37c>)
 801f690:	62bb      	str	r3, [r7, #40]	; 0x28
 801f692:	2300      	movs	r3, #0
 801f694:	62fb      	str	r3, [r7, #44]	; 0x2c
	periodicTimerHandle[7] = osTimerCreate(osTimer(periodicTimer8), osTimerPeriodic, NULL);
 801f696:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f69a:	2200      	movs	r2, #0
 801f69c:	2101      	movs	r1, #1
 801f69e:	4618      	mov	r0, r3
 801f6a0:	f7f5 fdea 	bl	8015278 <osTimerCreate>
 801f6a4:	4603      	mov	r3, r0
 801f6a6:	4a93      	ldr	r2, [pc, #588]	; (801f8f4 <AnalogSensor_Task+0x360>)
 801f6a8:	61d3      	str	r3, [r2, #28]

	osTimerDef(periodicTimer9, PTCallback9);
 801f6aa:	4b9a      	ldr	r3, [pc, #616]	; (801f914 <AnalogSensor_Task+0x380>)
 801f6ac:	623b      	str	r3, [r7, #32]
 801f6ae:	2300      	movs	r3, #0
 801f6b0:	627b      	str	r3, [r7, #36]	; 0x24
	periodicTimerHandle[8] = osTimerCreate(osTimer(periodicTimer9), osTimerPeriodic, NULL);
 801f6b2:	f107 0320 	add.w	r3, r7, #32
 801f6b6:	2200      	movs	r2, #0
 801f6b8:	2101      	movs	r1, #1
 801f6ba:	4618      	mov	r0, r3
 801f6bc:	f7f5 fddc 	bl	8015278 <osTimerCreate>
 801f6c0:	4603      	mov	r3, r0
 801f6c2:	4a8c      	ldr	r2, [pc, #560]	; (801f8f4 <AnalogSensor_Task+0x360>)
 801f6c4:	6213      	str	r3, [r2, #32]

	osTimerDef(periodicTimer10, PTCallback10);
 801f6c6:	4b94      	ldr	r3, [pc, #592]	; (801f918 <AnalogSensor_Task+0x384>)
 801f6c8:	61bb      	str	r3, [r7, #24]
 801f6ca:	2300      	movs	r3, #0
 801f6cc:	61fb      	str	r3, [r7, #28]
	periodicTimerHandle[9] = osTimerCreate(osTimer(periodicTimer10), osTimerPeriodic, NULL);
 801f6ce:	f107 0318 	add.w	r3, r7, #24
 801f6d2:	2200      	movs	r2, #0
 801f6d4:	2101      	movs	r1, #1
 801f6d6:	4618      	mov	r0, r3
 801f6d8:	f7f5 fdce 	bl	8015278 <osTimerCreate>
 801f6dc:	4603      	mov	r3, r0
 801f6de:	4a85      	ldr	r2, [pc, #532]	; (801f8f4 <AnalogSensor_Task+0x360>)
 801f6e0:	6253      	str	r3, [r2, #36]	; 0x24

	osTimerDef(periodicTimer11, PTCallback11);
 801f6e2:	4b8e      	ldr	r3, [pc, #568]	; (801f91c <AnalogSensor_Task+0x388>)
 801f6e4:	613b      	str	r3, [r7, #16]
 801f6e6:	2300      	movs	r3, #0
 801f6e8:	617b      	str	r3, [r7, #20]
	periodicTimerHandle[10] = osTimerCreate(osTimer(periodicTimer11), osTimerPeriodic, NULL);
 801f6ea:	f107 0310 	add.w	r3, r7, #16
 801f6ee:	2200      	movs	r2, #0
 801f6f0:	2101      	movs	r1, #1
 801f6f2:	4618      	mov	r0, r3
 801f6f4:	f7f5 fdc0 	bl	8015278 <osTimerCreate>
 801f6f8:	4603      	mov	r3, r0
 801f6fa:	4a7e      	ldr	r2, [pc, #504]	; (801f8f4 <AnalogSensor_Task+0x360>)
 801f6fc:	6293      	str	r3, [r2, #40]	; 0x28

	osTimerDef(periodicTimer12, PTCallback12);
 801f6fe:	4b88      	ldr	r3, [pc, #544]	; (801f920 <AnalogSensor_Task+0x38c>)
 801f700:	60bb      	str	r3, [r7, #8]
 801f702:	2300      	movs	r3, #0
 801f704:	60fb      	str	r3, [r7, #12]
	periodicTimerHandle[11] = osTimerCreate(osTimer(periodicTimer12), osTimerPeriodic, NULL);
 801f706:	f107 0308 	add.w	r3, r7, #8
 801f70a:	2200      	movs	r2, #0
 801f70c:	2101      	movs	r1, #1
 801f70e:	4618      	mov	r0, r3
 801f710:	f7f5 fdb2 	bl	8015278 <osTimerCreate>
 801f714:	4603      	mov	r3, r0
 801f716:	4a77      	ldr	r2, [pc, #476]	; (801f8f4 <AnalogSensor_Task+0x360>)
 801f718:	62d3      	str	r3, [r2, #44]	; 0x2c

	Analog_setup();
 801f71a:	f7ff ff21 	bl	801f560 <Analog_setup>

	while(1)
	{
		event = osMessageGet(analogQueueHandle, 10);
 801f71e:	4b73      	ldr	r3, [pc, #460]	; (801f8ec <AnalogSensor_Task+0x358>)
 801f720:	6819      	ldr	r1, [r3, #0]
 801f722:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801f726:	220a      	movs	r2, #10
 801f728:	4618      	mov	r0, r3
 801f72a:	f7f5 ff3f 	bl	80155ac <osMessageGet>
		if( event.status == osEventMessage )
 801f72e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801f730:	2b10      	cmp	r3, #16
 801f732:	f040 81f8 	bne.w	801fb26 <AnalogSensor_Task+0x592>
		{
			switch(event.value.v)
 801f736:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801f738:	3b30      	subs	r3, #48	; 0x30
 801f73a:	2b0b      	cmp	r3, #11
 801f73c:	f200 81f5 	bhi.w	801fb2a <AnalogSensor_Task+0x596>
 801f740:	a201      	add	r2, pc, #4	; (adr r2, 801f748 <AnalogSensor_Task+0x1b4>)
 801f742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f746:	bf00      	nop
 801f748:	0801f779 	.word	0x0801f779
 801f74c:	0801f7cd 	.word	0x0801f7cd
 801f750:	0801f821 	.word	0x0801f821
 801f754:	0801f863 	.word	0x0801f863
 801f758:	0801f8a5 	.word	0x0801f8a5
 801f75c:	0801f959 	.word	0x0801f959
 801f760:	0801f99b 	.word	0x0801f99b
 801f764:	0801f9dd 	.word	0x0801f9dd
 801f768:	0801fa1f 	.word	0x0801fa1f
 801f76c:	0801fa61 	.word	0x0801fa61
 801f770:	0801faa3 	.word	0x0801faa3
 801f774:	0801fae5 	.word	0x0801fae5
			{
				case APP_E_ANALOG_CHANNEL_1:
					//printf("APP_E_ANALOG_CHANNEL_1\n\r");
					fdata = Getdata_ADC(CHANNEL_0_EN);
 801f778:	200c      	movs	r0, #12
 801f77a:	f7ff fec1 	bl	801f500 <Getdata_ADC>
 801f77e:	eeb0 7b40 	vmov.f64	d7, d0
 801f782:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f786:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
					printf("The value of num111 is %.2f\n\r", fdata);
 801f78a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801f78e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801f792:	ec53 2b17 	vmov	r2, r3, d7
 801f796:	4863      	ldr	r0, [pc, #396]	; (801f924 <AnalogSensor_Task+0x390>)
 801f798:	f002 fbd0 	bl	8021f3c <iprintf>
					/* Formula: Result = Vin*Slope + Offset */
					analogSettingList[0].value = (fdata*atoi(analogSettingList[0].slope)) + atoi(analogSettingList[0].offset);
 801f79c:	4862      	ldr	r0, [pc, #392]	; (801f928 <AnalogSensor_Task+0x394>)
 801f79e:	f001 fbcf 	bl	8020f40 <atoi>
 801f7a2:	ee07 0a90 	vmov	s15, r0
 801f7a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f7aa:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801f7ae:	ee27 8a27 	vmul.f32	s16, s14, s15
 801f7b2:	485e      	ldr	r0, [pc, #376]	; (801f92c <AnalogSensor_Task+0x398>)
 801f7b4:	f001 fbc4 	bl	8020f40 <atoi>
 801f7b8:	ee07 0a90 	vmov	s15, r0
 801f7bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f7c0:	ee78 7a27 	vadd.f32	s15, s16, s15
 801f7c4:	4b5a      	ldr	r3, [pc, #360]	; (801f930 <AnalogSensor_Task+0x39c>)
 801f7c6:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
					break;
 801f7ca:	e1af      	b.n	801fb2c <AnalogSensor_Task+0x598>
				case APP_E_ANALOG_CHANNEL_2:
					//printf("APP_E_ANALOG_CHANNEL_2\n\r");
					fdata = Getdata_ADC(CHANNEL_1_EN);
 801f7cc:	201c      	movs	r0, #28
 801f7ce:	f7ff fe97 	bl	801f500 <Getdata_ADC>
 801f7d2:	eeb0 7b40 	vmov.f64	d7, d0
 801f7d6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f7da:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
					printf("The value of num222 is %.2f\n\r", fdata);
 801f7de:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801f7e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801f7e6:	ec53 2b17 	vmov	r2, r3, d7
 801f7ea:	4852      	ldr	r0, [pc, #328]	; (801f934 <AnalogSensor_Task+0x3a0>)
 801f7ec:	f002 fba6 	bl	8021f3c <iprintf>
					analogSettingList[1].value = (fdata*atoi(analogSettingList[1].slope))+ atoi(analogSettingList[1].offset);
 801f7f0:	4851      	ldr	r0, [pc, #324]	; (801f938 <AnalogSensor_Task+0x3a4>)
 801f7f2:	f001 fba5 	bl	8020f40 <atoi>
 801f7f6:	ee07 0a90 	vmov	s15, r0
 801f7fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f7fe:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801f802:	ee27 8a27 	vmul.f32	s16, s14, s15
 801f806:	484d      	ldr	r0, [pc, #308]	; (801f93c <AnalogSensor_Task+0x3a8>)
 801f808:	f001 fb9a 	bl	8020f40 <atoi>
 801f80c:	ee07 0a90 	vmov	s15, r0
 801f810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f814:	ee78 7a27 	vadd.f32	s15, s16, s15
 801f818:	4b45      	ldr	r3, [pc, #276]	; (801f930 <AnalogSensor_Task+0x39c>)
 801f81a:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
					break;
 801f81e:	e185      	b.n	801fb2c <AnalogSensor_Task+0x598>
				case APP_E_ANALOG_CHANNEL_3:
					//printf("APP_E_ANALOG_CHANNEL_3\n\r");
					fdata = Getdata_ADC(CHANNEL_2_EN);
 801f820:	202c      	movs	r0, #44	; 0x2c
 801f822:	f7ff fe6d 	bl	801f500 <Getdata_ADC>
 801f826:	eeb0 7b40 	vmov.f64	d7, d0
 801f82a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f82e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
					analogSettingList[2].value = (fdata*atoi(analogSettingList[2].slope))+ atoi(analogSettingList[2].offset);
 801f832:	4843      	ldr	r0, [pc, #268]	; (801f940 <AnalogSensor_Task+0x3ac>)
 801f834:	f001 fb84 	bl	8020f40 <atoi>
 801f838:	ee07 0a90 	vmov	s15, r0
 801f83c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f840:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801f844:	ee27 8a27 	vmul.f32	s16, s14, s15
 801f848:	483e      	ldr	r0, [pc, #248]	; (801f944 <AnalogSensor_Task+0x3b0>)
 801f84a:	f001 fb79 	bl	8020f40 <atoi>
 801f84e:	ee07 0a90 	vmov	s15, r0
 801f852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f856:	ee78 7a27 	vadd.f32	s15, s16, s15
 801f85a:	4b35      	ldr	r3, [pc, #212]	; (801f930 <AnalogSensor_Task+0x39c>)
 801f85c:	edc3 7a3e 	vstr	s15, [r3, #248]	; 0xf8
					break;
 801f860:	e164      	b.n	801fb2c <AnalogSensor_Task+0x598>
				case APP_E_ANALOG_CHANNEL_4:
					//printf("APP_E_ANALOG_CHANNEL_4\n\r");
					fdata = Getdata_ADC(CHANNEL_3_EN);
 801f862:	203c      	movs	r0, #60	; 0x3c
 801f864:	f7ff fe4c 	bl	801f500 <Getdata_ADC>
 801f868:	eeb0 7b40 	vmov.f64	d7, d0
 801f86c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f870:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
					analogSettingList[3].value = (fdata*atoi(analogSettingList[3].slope))+ atoi(analogSettingList[3].offset);
 801f874:	4834      	ldr	r0, [pc, #208]	; (801f948 <AnalogSensor_Task+0x3b4>)
 801f876:	f001 fb63 	bl	8020f40 <atoi>
 801f87a:	ee07 0a90 	vmov	s15, r0
 801f87e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f882:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801f886:	ee27 8a27 	vmul.f32	s16, s14, s15
 801f88a:	4830      	ldr	r0, [pc, #192]	; (801f94c <AnalogSensor_Task+0x3b8>)
 801f88c:	f001 fb58 	bl	8020f40 <atoi>
 801f890:	ee07 0a90 	vmov	s15, r0
 801f894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f898:	ee78 7a27 	vadd.f32	s15, s16, s15
 801f89c:	4b24      	ldr	r3, [pc, #144]	; (801f930 <AnalogSensor_Task+0x39c>)
 801f89e:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
					break;
 801f8a2:	e143      	b.n	801fb2c <AnalogSensor_Task+0x598>
				case APP_E_ANALOG_CHANNEL_5:
					//printf("APP_E_ANALOG_CHANNEL_5\n\r");
					fdata = Getdata_ADC(CHANNEL_4_EN);
 801f8a4:	204c      	movs	r0, #76	; 0x4c
 801f8a6:	f7ff fe2b 	bl	801f500 <Getdata_ADC>
 801f8aa:	eeb0 7b40 	vmov.f64	d7, d0
 801f8ae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f8b2:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
					analogSettingList[4].value = (fdata*atoi(analogSettingList[4].slope))+ atoi(analogSettingList[4].offset);
 801f8b6:	4826      	ldr	r0, [pc, #152]	; (801f950 <AnalogSensor_Task+0x3bc>)
 801f8b8:	f001 fb42 	bl	8020f40 <atoi>
 801f8bc:	ee07 0a90 	vmov	s15, r0
 801f8c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f8c4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801f8c8:	ee27 8a27 	vmul.f32	s16, s14, s15
 801f8cc:	4821      	ldr	r0, [pc, #132]	; (801f954 <AnalogSensor_Task+0x3c0>)
 801f8ce:	f001 fb37 	bl	8020f40 <atoi>
 801f8d2:	ee07 0a90 	vmov	s15, r0
 801f8d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f8da:	ee78 7a27 	vadd.f32	s15, s16, s15
 801f8de:	4b14      	ldr	r3, [pc, #80]	; (801f930 <AnalogSensor_Task+0x39c>)
 801f8e0:	edc3 7a68 	vstr	s15, [r3, #416]	; 0x1a0
					break;
 801f8e4:	e122      	b.n	801fb2c <AnalogSensor_Task+0x598>
 801f8e6:	bf00      	nop
 801f8e8:	08025c70 	.word	0x08025c70
 801f8ec:	2401b05c 	.word	0x2401b05c
 801f8f0:	0801fb71 	.word	0x0801fb71
 801f8f4:	2401b0d8 	.word	0x2401b0d8
 801f8f8:	0801fb95 	.word	0x0801fb95
 801f8fc:	0801fbb9 	.word	0x0801fbb9
 801f900:	0801fbdd 	.word	0x0801fbdd
 801f904:	0801fc01 	.word	0x0801fc01
 801f908:	0801fc25 	.word	0x0801fc25
 801f90c:	0801fc49 	.word	0x0801fc49
 801f910:	0801fc6d 	.word	0x0801fc6d
 801f914:	0801fc91 	.word	0x0801fc91
 801f918:	0801fcb5 	.word	0x0801fcb5
 801f91c:	0801fcd9 	.word	0x0801fcd9
 801f920:	0801fcfd 	.word	0x0801fcfd
 801f924:	08025c30 	.word	0x08025c30
 801f928:	24016247 	.word	0x24016247
 801f92c:	2401624d 	.word	0x2401624d
 801f930:	24016220 	.word	0x24016220
 801f934:	08025c50 	.word	0x08025c50
 801f938:	2401629b 	.word	0x2401629b
 801f93c:	240162a1 	.word	0x240162a1
 801f940:	240162ef 	.word	0x240162ef
 801f944:	240162f5 	.word	0x240162f5
 801f948:	24016343 	.word	0x24016343
 801f94c:	24016349 	.word	0x24016349
 801f950:	24016397 	.word	0x24016397
 801f954:	2401639d 	.word	0x2401639d
				case APP_E_ANALOG_CHANNEL_6:
					//printf("APP_E_ANALOG_CHANNEL_6\n\r");
					fdata = Getdata_ADC(CHANNEL_5_EN);
 801f958:	205c      	movs	r0, #92	; 0x5c
 801f95a:	f7ff fdd1 	bl	801f500 <Getdata_ADC>
 801f95e:	eeb0 7b40 	vmov.f64	d7, d0
 801f962:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f966:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
					analogSettingList[5].value = (fdata*atoi(analogSettingList[5].slope))+ atoi(analogSettingList[5].offset);
 801f96a:	4872      	ldr	r0, [pc, #456]	; (801fb34 <AnalogSensor_Task+0x5a0>)
 801f96c:	f001 fae8 	bl	8020f40 <atoi>
 801f970:	ee07 0a90 	vmov	s15, r0
 801f974:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f978:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801f97c:	ee27 8a27 	vmul.f32	s16, s14, s15
 801f980:	486d      	ldr	r0, [pc, #436]	; (801fb38 <AnalogSensor_Task+0x5a4>)
 801f982:	f001 fadd 	bl	8020f40 <atoi>
 801f986:	ee07 0a90 	vmov	s15, r0
 801f98a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f98e:	ee78 7a27 	vadd.f32	s15, s16, s15
 801f992:	4b6a      	ldr	r3, [pc, #424]	; (801fb3c <AnalogSensor_Task+0x5a8>)
 801f994:	edc3 7a7d 	vstr	s15, [r3, #500]	; 0x1f4
					break;
 801f998:	e0c8      	b.n	801fb2c <AnalogSensor_Task+0x598>
				case APP_E_ANALOG_CHANNEL_7:
					//printf("APP_E_ANALOG_CHANNEL_7\n\r");
					fdata = Getdata_ADC(CHANNEL_6_EN);
 801f99a:	206c      	movs	r0, #108	; 0x6c
 801f99c:	f7ff fdb0 	bl	801f500 <Getdata_ADC>
 801f9a0:	eeb0 7b40 	vmov.f64	d7, d0
 801f9a4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f9a8:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
					analogSettingList[6].value = (fdata*atoi(analogSettingList[6].slope))+ atoi(analogSettingList[6].offset);
 801f9ac:	4864      	ldr	r0, [pc, #400]	; (801fb40 <AnalogSensor_Task+0x5ac>)
 801f9ae:	f001 fac7 	bl	8020f40 <atoi>
 801f9b2:	ee07 0a90 	vmov	s15, r0
 801f9b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f9ba:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801f9be:	ee27 8a27 	vmul.f32	s16, s14, s15
 801f9c2:	4860      	ldr	r0, [pc, #384]	; (801fb44 <AnalogSensor_Task+0x5b0>)
 801f9c4:	f001 fabc 	bl	8020f40 <atoi>
 801f9c8:	ee07 0a90 	vmov	s15, r0
 801f9cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f9d0:	ee78 7a27 	vadd.f32	s15, s16, s15
 801f9d4:	4b59      	ldr	r3, [pc, #356]	; (801fb3c <AnalogSensor_Task+0x5a8>)
 801f9d6:	edc3 7a92 	vstr	s15, [r3, #584]	; 0x248
					break;
 801f9da:	e0a7      	b.n	801fb2c <AnalogSensor_Task+0x598>
				case APP_E_ANALOG_CHANNEL_8:
					//printf("APP_E_ANALOG_CHANNEL_8\n\r");
					fdata = Getdata_ADC(CHANNEL_7_EN);
 801f9dc:	207c      	movs	r0, #124	; 0x7c
 801f9de:	f7ff fd8f 	bl	801f500 <Getdata_ADC>
 801f9e2:	eeb0 7b40 	vmov.f64	d7, d0
 801f9e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f9ea:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
					analogSettingList[7].value = (fdata*atoi(analogSettingList[7].slope))+ atoi(analogSettingList[7].offset);
 801f9ee:	4856      	ldr	r0, [pc, #344]	; (801fb48 <AnalogSensor_Task+0x5b4>)
 801f9f0:	f001 faa6 	bl	8020f40 <atoi>
 801f9f4:	ee07 0a90 	vmov	s15, r0
 801f9f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f9fc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801fa00:	ee27 8a27 	vmul.f32	s16, s14, s15
 801fa04:	4851      	ldr	r0, [pc, #324]	; (801fb4c <AnalogSensor_Task+0x5b8>)
 801fa06:	f001 fa9b 	bl	8020f40 <atoi>
 801fa0a:	ee07 0a90 	vmov	s15, r0
 801fa0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fa12:	ee78 7a27 	vadd.f32	s15, s16, s15
 801fa16:	4b49      	ldr	r3, [pc, #292]	; (801fb3c <AnalogSensor_Task+0x5a8>)
 801fa18:	edc3 7aa7 	vstr	s15, [r3, #668]	; 0x29c
					break;
 801fa1c:	e086      	b.n	801fb2c <AnalogSensor_Task+0x598>
				case APP_E_ANALOG_CHANNEL_9:
					//printf("APP_E_ANALOG_CHANNEL_9\n\r");
					fdata = Getdata_ADC(CHANNEL_8_EN);
 801fa1e:	208c      	movs	r0, #140	; 0x8c
 801fa20:	f7ff fd6e 	bl	801f500 <Getdata_ADC>
 801fa24:	eeb0 7b40 	vmov.f64	d7, d0
 801fa28:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801fa2c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
					analogSettingList[8].value = (fdata*atoi(analogSettingList[8].slope))+ atoi(analogSettingList[8].offset);
 801fa30:	4847      	ldr	r0, [pc, #284]	; (801fb50 <AnalogSensor_Task+0x5bc>)
 801fa32:	f001 fa85 	bl	8020f40 <atoi>
 801fa36:	ee07 0a90 	vmov	s15, r0
 801fa3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801fa3e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801fa42:	ee27 8a27 	vmul.f32	s16, s14, s15
 801fa46:	4843      	ldr	r0, [pc, #268]	; (801fb54 <AnalogSensor_Task+0x5c0>)
 801fa48:	f001 fa7a 	bl	8020f40 <atoi>
 801fa4c:	ee07 0a90 	vmov	s15, r0
 801fa50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fa54:	ee78 7a27 	vadd.f32	s15, s16, s15
 801fa58:	4b38      	ldr	r3, [pc, #224]	; (801fb3c <AnalogSensor_Task+0x5a8>)
 801fa5a:	edc3 7abc 	vstr	s15, [r3, #752]	; 0x2f0
					break;
 801fa5e:	e065      	b.n	801fb2c <AnalogSensor_Task+0x598>
				case APP_E_ANALOG_CHANNEL_10:
					//printf("APP_E_ANALOG_CHANNEL_10\n\r");
					fdata = Getdata_ADC(CHANNEL_9_EN);
 801fa60:	209c      	movs	r0, #156	; 0x9c
 801fa62:	f7ff fd4d 	bl	801f500 <Getdata_ADC>
 801fa66:	eeb0 7b40 	vmov.f64	d7, d0
 801fa6a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801fa6e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
					analogSettingList[9].value = (fdata*atoi(analogSettingList[9].slope))+ atoi(analogSettingList[9].offset);
 801fa72:	4839      	ldr	r0, [pc, #228]	; (801fb58 <AnalogSensor_Task+0x5c4>)
 801fa74:	f001 fa64 	bl	8020f40 <atoi>
 801fa78:	ee07 0a90 	vmov	s15, r0
 801fa7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801fa80:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801fa84:	ee27 8a27 	vmul.f32	s16, s14, s15
 801fa88:	4834      	ldr	r0, [pc, #208]	; (801fb5c <AnalogSensor_Task+0x5c8>)
 801fa8a:	f001 fa59 	bl	8020f40 <atoi>
 801fa8e:	ee07 0a90 	vmov	s15, r0
 801fa92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fa96:	ee78 7a27 	vadd.f32	s15, s16, s15
 801fa9a:	4b28      	ldr	r3, [pc, #160]	; (801fb3c <AnalogSensor_Task+0x5a8>)
 801fa9c:	edc3 7ad1 	vstr	s15, [r3, #836]	; 0x344
					break;
 801faa0:	e044      	b.n	801fb2c <AnalogSensor_Task+0x598>
				case APP_E_ANALOG_CHANNEL_11:
					//printf("APP_E_ANALOG_CHANNEL_11\n\r");
					fdata = Getdata_ADC(CHANNEL_10_EN);
 801faa2:	20ac      	movs	r0, #172	; 0xac
 801faa4:	f7ff fd2c 	bl	801f500 <Getdata_ADC>
 801faa8:	eeb0 7b40 	vmov.f64	d7, d0
 801faac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801fab0:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
					analogSettingList[10].value = (fdata*atoi(analogSettingList[10].slope))+ atoi(analogSettingList[10].offset);
 801fab4:	482a      	ldr	r0, [pc, #168]	; (801fb60 <AnalogSensor_Task+0x5cc>)
 801fab6:	f001 fa43 	bl	8020f40 <atoi>
 801faba:	ee07 0a90 	vmov	s15, r0
 801fabe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801fac2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801fac6:	ee27 8a27 	vmul.f32	s16, s14, s15
 801faca:	4826      	ldr	r0, [pc, #152]	; (801fb64 <AnalogSensor_Task+0x5d0>)
 801facc:	f001 fa38 	bl	8020f40 <atoi>
 801fad0:	ee07 0a90 	vmov	s15, r0
 801fad4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fad8:	ee78 7a27 	vadd.f32	s15, s16, s15
 801fadc:	4b17      	ldr	r3, [pc, #92]	; (801fb3c <AnalogSensor_Task+0x5a8>)
 801fade:	edc3 7ae6 	vstr	s15, [r3, #920]	; 0x398
					break;
 801fae2:	e023      	b.n	801fb2c <AnalogSensor_Task+0x598>
				case APP_E_ANALOG_CHANNEL_12:
					//printf("APP_E_ANALOG_CHANNEL_12\n\r");
					fdata = Getdata_ADC(CHANNEL_11_EN);
 801fae4:	20bc      	movs	r0, #188	; 0xbc
 801fae6:	f7ff fd0b 	bl	801f500 <Getdata_ADC>
 801faea:	eeb0 7b40 	vmov.f64	d7, d0
 801faee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801faf2:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
					analogSettingList[11].value = (fdata*atoi(analogSettingList[11].slope))+ atoi(analogSettingList[11].offset);
 801faf6:	481c      	ldr	r0, [pc, #112]	; (801fb68 <AnalogSensor_Task+0x5d4>)
 801faf8:	f001 fa22 	bl	8020f40 <atoi>
 801fafc:	ee07 0a90 	vmov	s15, r0
 801fb00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801fb04:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801fb08:	ee27 8a27 	vmul.f32	s16, s14, s15
 801fb0c:	4817      	ldr	r0, [pc, #92]	; (801fb6c <AnalogSensor_Task+0x5d8>)
 801fb0e:	f001 fa17 	bl	8020f40 <atoi>
 801fb12:	ee07 0a90 	vmov	s15, r0
 801fb16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fb1a:	ee78 7a27 	vadd.f32	s15, s16, s15
 801fb1e:	4b07      	ldr	r3, [pc, #28]	; (801fb3c <AnalogSensor_Task+0x5a8>)
 801fb20:	edc3 7afb 	vstr	s15, [r3, #1004]	; 0x3ec
					//printf("data = %lu\n\r", (unsigned long)data);
					break;
 801fb24:	e002      	b.n	801fb2c <AnalogSensor_Task+0x598>
				default:
					break;
			}
		}
 801fb26:	bf00      	nop
 801fb28:	e000      	b.n	801fb2c <AnalogSensor_Task+0x598>
					break;
 801fb2a:	bf00      	nop
		osDelay(1);
 801fb2c:	2001      	movs	r0, #1
 801fb2e:	f7f5 fb8f 	bl	8015250 <osDelay>
		event = osMessageGet(analogQueueHandle, 10);
 801fb32:	e5f4      	b.n	801f71e <AnalogSensor_Task+0x18a>
 801fb34:	240163eb 	.word	0x240163eb
 801fb38:	240163f1 	.word	0x240163f1
 801fb3c:	24016220 	.word	0x24016220
 801fb40:	2401643f 	.word	0x2401643f
 801fb44:	24016445 	.word	0x24016445
 801fb48:	24016493 	.word	0x24016493
 801fb4c:	24016499 	.word	0x24016499
 801fb50:	240164e7 	.word	0x240164e7
 801fb54:	240164ed 	.word	0x240164ed
 801fb58:	2401653b 	.word	0x2401653b
 801fb5c:	24016541 	.word	0x24016541
 801fb60:	2401658f 	.word	0x2401658f
 801fb64:	24016595 	.word	0x24016595
 801fb68:	240165e3 	.word	0x240165e3
 801fb6c:	240165e9 	.word	0x240165e9

0801fb70 <PTCallback1>:
	}
}

/* PTCallback function */
void PTCallback1(void const * argument)
{
 801fb70:	b580      	push	{r7, lr}
 801fb72:	b082      	sub	sp, #8
 801fb74:	af00      	add	r7, sp, #0
 801fb76:	6078      	str	r0, [r7, #4]
	osMessagePut(analogQueueHandle, APP_E_ANALOG_CHANNEL_1, 0);
 801fb78:	4b05      	ldr	r3, [pc, #20]	; (801fb90 <PTCallback1+0x20>)
 801fb7a:	681b      	ldr	r3, [r3, #0]
 801fb7c:	2200      	movs	r2, #0
 801fb7e:	2130      	movs	r1, #48	; 0x30
 801fb80:	4618      	mov	r0, r3
 801fb82:	f7f5 fcd3 	bl	801552c <osMessagePut>
}
 801fb86:	bf00      	nop
 801fb88:	3708      	adds	r7, #8
 801fb8a:	46bd      	mov	sp, r7
 801fb8c:	bd80      	pop	{r7, pc}
 801fb8e:	bf00      	nop
 801fb90:	2401b05c 	.word	0x2401b05c

0801fb94 <PTCallback2>:

void PTCallback2(void const * argument)
{
 801fb94:	b580      	push	{r7, lr}
 801fb96:	b082      	sub	sp, #8
 801fb98:	af00      	add	r7, sp, #0
 801fb9a:	6078      	str	r0, [r7, #4]
	osMessagePut(analogQueueHandle, APP_E_ANALOG_CHANNEL_2, 0);
 801fb9c:	4b05      	ldr	r3, [pc, #20]	; (801fbb4 <PTCallback2+0x20>)
 801fb9e:	681b      	ldr	r3, [r3, #0]
 801fba0:	2200      	movs	r2, #0
 801fba2:	2131      	movs	r1, #49	; 0x31
 801fba4:	4618      	mov	r0, r3
 801fba6:	f7f5 fcc1 	bl	801552c <osMessagePut>
}
 801fbaa:	bf00      	nop
 801fbac:	3708      	adds	r7, #8
 801fbae:	46bd      	mov	sp, r7
 801fbb0:	bd80      	pop	{r7, pc}
 801fbb2:	bf00      	nop
 801fbb4:	2401b05c 	.word	0x2401b05c

0801fbb8 <PTCallback3>:

void PTCallback3(void const * argument)
{
 801fbb8:	b580      	push	{r7, lr}
 801fbba:	b082      	sub	sp, #8
 801fbbc:	af00      	add	r7, sp, #0
 801fbbe:	6078      	str	r0, [r7, #4]
	osMessagePut(analogQueueHandle, APP_E_ANALOG_CHANNEL_3, 0);
 801fbc0:	4b05      	ldr	r3, [pc, #20]	; (801fbd8 <PTCallback3+0x20>)
 801fbc2:	681b      	ldr	r3, [r3, #0]
 801fbc4:	2200      	movs	r2, #0
 801fbc6:	2132      	movs	r1, #50	; 0x32
 801fbc8:	4618      	mov	r0, r3
 801fbca:	f7f5 fcaf 	bl	801552c <osMessagePut>
}
 801fbce:	bf00      	nop
 801fbd0:	3708      	adds	r7, #8
 801fbd2:	46bd      	mov	sp, r7
 801fbd4:	bd80      	pop	{r7, pc}
 801fbd6:	bf00      	nop
 801fbd8:	2401b05c 	.word	0x2401b05c

0801fbdc <PTCallback4>:

void PTCallback4(void const * argument)
{
 801fbdc:	b580      	push	{r7, lr}
 801fbde:	b082      	sub	sp, #8
 801fbe0:	af00      	add	r7, sp, #0
 801fbe2:	6078      	str	r0, [r7, #4]
	osMessagePut(analogQueueHandle, APP_E_ANALOG_CHANNEL_4, 0);
 801fbe4:	4b05      	ldr	r3, [pc, #20]	; (801fbfc <PTCallback4+0x20>)
 801fbe6:	681b      	ldr	r3, [r3, #0]
 801fbe8:	2200      	movs	r2, #0
 801fbea:	2133      	movs	r1, #51	; 0x33
 801fbec:	4618      	mov	r0, r3
 801fbee:	f7f5 fc9d 	bl	801552c <osMessagePut>
}
 801fbf2:	bf00      	nop
 801fbf4:	3708      	adds	r7, #8
 801fbf6:	46bd      	mov	sp, r7
 801fbf8:	bd80      	pop	{r7, pc}
 801fbfa:	bf00      	nop
 801fbfc:	2401b05c 	.word	0x2401b05c

0801fc00 <PTCallback5>:

void PTCallback5(void const * argument)
{
 801fc00:	b580      	push	{r7, lr}
 801fc02:	b082      	sub	sp, #8
 801fc04:	af00      	add	r7, sp, #0
 801fc06:	6078      	str	r0, [r7, #4]
	osMessagePut(analogQueueHandle, APP_E_ANALOG_CHANNEL_5, 0);
 801fc08:	4b05      	ldr	r3, [pc, #20]	; (801fc20 <PTCallback5+0x20>)
 801fc0a:	681b      	ldr	r3, [r3, #0]
 801fc0c:	2200      	movs	r2, #0
 801fc0e:	2134      	movs	r1, #52	; 0x34
 801fc10:	4618      	mov	r0, r3
 801fc12:	f7f5 fc8b 	bl	801552c <osMessagePut>
}
 801fc16:	bf00      	nop
 801fc18:	3708      	adds	r7, #8
 801fc1a:	46bd      	mov	sp, r7
 801fc1c:	bd80      	pop	{r7, pc}
 801fc1e:	bf00      	nop
 801fc20:	2401b05c 	.word	0x2401b05c

0801fc24 <PTCallback6>:

void PTCallback6(void const * argument)
{
 801fc24:	b580      	push	{r7, lr}
 801fc26:	b082      	sub	sp, #8
 801fc28:	af00      	add	r7, sp, #0
 801fc2a:	6078      	str	r0, [r7, #4]
	osMessagePut(analogQueueHandle, APP_E_ANALOG_CHANNEL_6, 0);
 801fc2c:	4b05      	ldr	r3, [pc, #20]	; (801fc44 <PTCallback6+0x20>)
 801fc2e:	681b      	ldr	r3, [r3, #0]
 801fc30:	2200      	movs	r2, #0
 801fc32:	2135      	movs	r1, #53	; 0x35
 801fc34:	4618      	mov	r0, r3
 801fc36:	f7f5 fc79 	bl	801552c <osMessagePut>
}
 801fc3a:	bf00      	nop
 801fc3c:	3708      	adds	r7, #8
 801fc3e:	46bd      	mov	sp, r7
 801fc40:	bd80      	pop	{r7, pc}
 801fc42:	bf00      	nop
 801fc44:	2401b05c 	.word	0x2401b05c

0801fc48 <PTCallback7>:

void PTCallback7(void const * argument)
{
 801fc48:	b580      	push	{r7, lr}
 801fc4a:	b082      	sub	sp, #8
 801fc4c:	af00      	add	r7, sp, #0
 801fc4e:	6078      	str	r0, [r7, #4]
	osMessagePut(analogQueueHandle, APP_E_ANALOG_CHANNEL_7, 0);
 801fc50:	4b05      	ldr	r3, [pc, #20]	; (801fc68 <PTCallback7+0x20>)
 801fc52:	681b      	ldr	r3, [r3, #0]
 801fc54:	2200      	movs	r2, #0
 801fc56:	2136      	movs	r1, #54	; 0x36
 801fc58:	4618      	mov	r0, r3
 801fc5a:	f7f5 fc67 	bl	801552c <osMessagePut>
}
 801fc5e:	bf00      	nop
 801fc60:	3708      	adds	r7, #8
 801fc62:	46bd      	mov	sp, r7
 801fc64:	bd80      	pop	{r7, pc}
 801fc66:	bf00      	nop
 801fc68:	2401b05c 	.word	0x2401b05c

0801fc6c <PTCallback8>:

void PTCallback8(void const * argument)
{
 801fc6c:	b580      	push	{r7, lr}
 801fc6e:	b082      	sub	sp, #8
 801fc70:	af00      	add	r7, sp, #0
 801fc72:	6078      	str	r0, [r7, #4]
	osMessagePut(analogQueueHandle, APP_E_ANALOG_CHANNEL_8, 0);
 801fc74:	4b05      	ldr	r3, [pc, #20]	; (801fc8c <PTCallback8+0x20>)
 801fc76:	681b      	ldr	r3, [r3, #0]
 801fc78:	2200      	movs	r2, #0
 801fc7a:	2137      	movs	r1, #55	; 0x37
 801fc7c:	4618      	mov	r0, r3
 801fc7e:	f7f5 fc55 	bl	801552c <osMessagePut>
}
 801fc82:	bf00      	nop
 801fc84:	3708      	adds	r7, #8
 801fc86:	46bd      	mov	sp, r7
 801fc88:	bd80      	pop	{r7, pc}
 801fc8a:	bf00      	nop
 801fc8c:	2401b05c 	.word	0x2401b05c

0801fc90 <PTCallback9>:

void PTCallback9(void const * argument)
{
 801fc90:	b580      	push	{r7, lr}
 801fc92:	b082      	sub	sp, #8
 801fc94:	af00      	add	r7, sp, #0
 801fc96:	6078      	str	r0, [r7, #4]
	osMessagePut(analogQueueHandle, APP_E_ANALOG_CHANNEL_9, 0);
 801fc98:	4b05      	ldr	r3, [pc, #20]	; (801fcb0 <PTCallback9+0x20>)
 801fc9a:	681b      	ldr	r3, [r3, #0]
 801fc9c:	2200      	movs	r2, #0
 801fc9e:	2138      	movs	r1, #56	; 0x38
 801fca0:	4618      	mov	r0, r3
 801fca2:	f7f5 fc43 	bl	801552c <osMessagePut>
}
 801fca6:	bf00      	nop
 801fca8:	3708      	adds	r7, #8
 801fcaa:	46bd      	mov	sp, r7
 801fcac:	bd80      	pop	{r7, pc}
 801fcae:	bf00      	nop
 801fcb0:	2401b05c 	.word	0x2401b05c

0801fcb4 <PTCallback10>:

void PTCallback10(void const * argument)
{
 801fcb4:	b580      	push	{r7, lr}
 801fcb6:	b082      	sub	sp, #8
 801fcb8:	af00      	add	r7, sp, #0
 801fcba:	6078      	str	r0, [r7, #4]
	osMessagePut(analogQueueHandle, APP_E_ANALOG_CHANNEL_10, 0);
 801fcbc:	4b05      	ldr	r3, [pc, #20]	; (801fcd4 <PTCallback10+0x20>)
 801fcbe:	681b      	ldr	r3, [r3, #0]
 801fcc0:	2200      	movs	r2, #0
 801fcc2:	2139      	movs	r1, #57	; 0x39
 801fcc4:	4618      	mov	r0, r3
 801fcc6:	f7f5 fc31 	bl	801552c <osMessagePut>
}
 801fcca:	bf00      	nop
 801fccc:	3708      	adds	r7, #8
 801fcce:	46bd      	mov	sp, r7
 801fcd0:	bd80      	pop	{r7, pc}
 801fcd2:	bf00      	nop
 801fcd4:	2401b05c 	.word	0x2401b05c

0801fcd8 <PTCallback11>:

void PTCallback11(void const * argument)
{
 801fcd8:	b580      	push	{r7, lr}
 801fcda:	b082      	sub	sp, #8
 801fcdc:	af00      	add	r7, sp, #0
 801fcde:	6078      	str	r0, [r7, #4]
	osMessagePut(analogQueueHandle, APP_E_ANALOG_CHANNEL_11, 0);
 801fce0:	4b05      	ldr	r3, [pc, #20]	; (801fcf8 <PTCallback11+0x20>)
 801fce2:	681b      	ldr	r3, [r3, #0]
 801fce4:	2200      	movs	r2, #0
 801fce6:	213a      	movs	r1, #58	; 0x3a
 801fce8:	4618      	mov	r0, r3
 801fcea:	f7f5 fc1f 	bl	801552c <osMessagePut>
}
 801fcee:	bf00      	nop
 801fcf0:	3708      	adds	r7, #8
 801fcf2:	46bd      	mov	sp, r7
 801fcf4:	bd80      	pop	{r7, pc}
 801fcf6:	bf00      	nop
 801fcf8:	2401b05c 	.word	0x2401b05c

0801fcfc <PTCallback12>:

void PTCallback12(void const * argument)
{
 801fcfc:	b580      	push	{r7, lr}
 801fcfe:	b082      	sub	sp, #8
 801fd00:	af00      	add	r7, sp, #0
 801fd02:	6078      	str	r0, [r7, #4]
	osMessagePut(analogQueueHandle, APP_E_ANALOG_CHANNEL_12, 0);
 801fd04:	4b05      	ldr	r3, [pc, #20]	; (801fd1c <PTCallback12+0x20>)
 801fd06:	681b      	ldr	r3, [r3, #0]
 801fd08:	2200      	movs	r2, #0
 801fd0a:	213b      	movs	r1, #59	; 0x3b
 801fd0c:	4618      	mov	r0, r3
 801fd0e:	f7f5 fc0d 	bl	801552c <osMessagePut>
}
 801fd12:	bf00      	nop
 801fd14:	3708      	adds	r7, #8
 801fd16:	46bd      	mov	sp, r7
 801fd18:	bd80      	pop	{r7, pc}
 801fd1a:	bf00      	nop
 801fd1c:	2401b05c 	.word	0x2401b05c

0801fd20 <HAL_TIM_IC_CaptureCallback>:
		osDelay(1);
	}
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801fd20:	b580      	push	{r7, lr}
 801fd22:	b082      	sub	sp, #8
 801fd24:	af00      	add	r7, sp, #0
 801fd26:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 801fd28:	687b      	ldr	r3, [r7, #4]
 801fd2a:	7f1b      	ldrb	r3, [r3, #28]
 801fd2c:	2b01      	cmp	r3, #1
 801fd2e:	d153      	bne.n	801fdd8 <HAL_TIM_IC_CaptureCallback+0xb8>
	{
		if(digitalSettingList[0].mode[0] == 'F')
 801fd30:	4b8f      	ldr	r3, [pc, #572]	; (801ff70 <HAL_TIM_IC_CaptureCallback+0x250>)
 801fd32:	7e9b      	ldrb	r3, [r3, #26]
 801fd34:	2b46      	cmp	r3, #70	; 0x46
 801fd36:	d149      	bne.n	801fdcc <HAL_TIM_IC_CaptureCallback+0xac>
		{

			if (flag_ch1 == 0)
 801fd38:	4b8e      	ldr	r3, [pc, #568]	; (801ff74 <HAL_TIM_IC_CaptureCallback+0x254>)
 801fd3a:	681b      	ldr	r3, [r3, #0]
 801fd3c:	2b00      	cmp	r3, #0
 801fd3e:	d10a      	bne.n	801fd56 <HAL_TIM_IC_CaptureCallback+0x36>
			{
				ch1_val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 801fd40:	2100      	movs	r1, #0
 801fd42:	6878      	ldr	r0, [r7, #4]
 801fd44:	f7eb fdb2 	bl	800b8ac <HAL_TIM_ReadCapturedValue>
 801fd48:	4603      	mov	r3, r0
 801fd4a:	4a8b      	ldr	r2, [pc, #556]	; (801ff78 <HAL_TIM_IC_CaptureCallback+0x258>)
 801fd4c:	6013      	str	r3, [r2, #0]
				flag_ch1 = 1;
 801fd4e:	4b89      	ldr	r3, [pc, #548]	; (801ff74 <HAL_TIM_IC_CaptureCallback+0x254>)
 801fd50:	2201      	movs	r2, #1
 801fd52:	601a      	str	r2, [r3, #0]
		else
		{
			counter_ch4++;
		}
	}
}
 801fd54:	e17c      	b.n	8020050 <HAL_TIM_IC_CaptureCallback+0x330>
				ch1_val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 801fd56:	2100      	movs	r1, #0
 801fd58:	6878      	ldr	r0, [r7, #4]
 801fd5a:	f7eb fda7 	bl	800b8ac <HAL_TIM_ReadCapturedValue>
 801fd5e:	4603      	mov	r3, r0
 801fd60:	4a86      	ldr	r2, [pc, #536]	; (801ff7c <HAL_TIM_IC_CaptureCallback+0x25c>)
 801fd62:	6013      	str	r3, [r2, #0]
				if (ch1_val2 > ch1_val1)
 801fd64:	4b85      	ldr	r3, [pc, #532]	; (801ff7c <HAL_TIM_IC_CaptureCallback+0x25c>)
 801fd66:	681a      	ldr	r2, [r3, #0]
 801fd68:	4b83      	ldr	r3, [pc, #524]	; (801ff78 <HAL_TIM_IC_CaptureCallback+0x258>)
 801fd6a:	681b      	ldr	r3, [r3, #0]
 801fd6c:	429a      	cmp	r2, r3
 801fd6e:	d907      	bls.n	801fd80 <HAL_TIM_IC_CaptureCallback+0x60>
					difference_ch1 = ch1_val2 - ch1_val1;
 801fd70:	4b82      	ldr	r3, [pc, #520]	; (801ff7c <HAL_TIM_IC_CaptureCallback+0x25c>)
 801fd72:	681a      	ldr	r2, [r3, #0]
 801fd74:	4b80      	ldr	r3, [pc, #512]	; (801ff78 <HAL_TIM_IC_CaptureCallback+0x258>)
 801fd76:	681b      	ldr	r3, [r3, #0]
 801fd78:	1ad3      	subs	r3, r2, r3
 801fd7a:	4a81      	ldr	r2, [pc, #516]	; (801ff80 <HAL_TIM_IC_CaptureCallback+0x260>)
 801fd7c:	6013      	str	r3, [r2, #0]
 801fd7e:	e00d      	b.n	801fd9c <HAL_TIM_IC_CaptureCallback+0x7c>
				else if (ch1_val1 > ch1_val2)
 801fd80:	4b7d      	ldr	r3, [pc, #500]	; (801ff78 <HAL_TIM_IC_CaptureCallback+0x258>)
 801fd82:	681a      	ldr	r2, [r3, #0]
 801fd84:	4b7d      	ldr	r3, [pc, #500]	; (801ff7c <HAL_TIM_IC_CaptureCallback+0x25c>)
 801fd86:	681b      	ldr	r3, [r3, #0]
 801fd88:	429a      	cmp	r2, r3
 801fd8a:	d907      	bls.n	801fd9c <HAL_TIM_IC_CaptureCallback+0x7c>
					difference_ch1 = (0xffffffff - ch1_val1) + ch1_val2;
 801fd8c:	4b7b      	ldr	r3, [pc, #492]	; (801ff7c <HAL_TIM_IC_CaptureCallback+0x25c>)
 801fd8e:	681a      	ldr	r2, [r3, #0]
 801fd90:	4b79      	ldr	r3, [pc, #484]	; (801ff78 <HAL_TIM_IC_CaptureCallback+0x258>)
 801fd92:	681b      	ldr	r3, [r3, #0]
 801fd94:	1ad3      	subs	r3, r2, r3
 801fd96:	3b01      	subs	r3, #1
 801fd98:	4a79      	ldr	r2, [pc, #484]	; (801ff80 <HAL_TIM_IC_CaptureCallback+0x260>)
 801fd9a:	6013      	str	r3, [r2, #0]
				frequency_ch1 = TIMCLOCK/(PRESCALAR)/difference_ch1;
 801fd9c:	4b78      	ldr	r3, [pc, #480]	; (801ff80 <HAL_TIM_IC_CaptureCallback+0x260>)
 801fd9e:	681b      	ldr	r3, [r3, #0]
 801fda0:	4a78      	ldr	r2, [pc, #480]	; (801ff84 <HAL_TIM_IC_CaptureCallback+0x264>)
 801fda2:	fbb2 f3f3 	udiv	r3, r2, r3
 801fda6:	ee07 3a90 	vmov	s15, r3
 801fdaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801fdae:	4b76      	ldr	r3, [pc, #472]	; (801ff88 <HAL_TIM_IC_CaptureCallback+0x268>)
 801fdb0:	edc3 7a00 	vstr	s15, [r3]
				dataDigital[0] = frequency_ch1;
 801fdb4:	4b74      	ldr	r3, [pc, #464]	; (801ff88 <HAL_TIM_IC_CaptureCallback+0x268>)
 801fdb6:	681b      	ldr	r3, [r3, #0]
 801fdb8:	4a74      	ldr	r2, [pc, #464]	; (801ff8c <HAL_TIM_IC_CaptureCallback+0x26c>)
 801fdba:	6013      	str	r3, [r2, #0]
				HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);
 801fdbc:	2100      	movs	r1, #0
 801fdbe:	4874      	ldr	r0, [pc, #464]	; (801ff90 <HAL_TIM_IC_CaptureCallback+0x270>)
 801fdc0:	f7eb fa9e 	bl	800b300 <HAL_TIM_IC_Stop_IT>
				flag_ch1 = 0;
 801fdc4:	4b6b      	ldr	r3, [pc, #428]	; (801ff74 <HAL_TIM_IC_CaptureCallback+0x254>)
 801fdc6:	2200      	movs	r2, #0
 801fdc8:	601a      	str	r2, [r3, #0]
}
 801fdca:	e141      	b.n	8020050 <HAL_TIM_IC_CaptureCallback+0x330>
			counter_ch1++;
 801fdcc:	4b71      	ldr	r3, [pc, #452]	; (801ff94 <HAL_TIM_IC_CaptureCallback+0x274>)
 801fdce:	681b      	ldr	r3, [r3, #0]
 801fdd0:	3301      	adds	r3, #1
 801fdd2:	4a70      	ldr	r2, [pc, #448]	; (801ff94 <HAL_TIM_IC_CaptureCallback+0x274>)
 801fdd4:	6013      	str	r3, [r2, #0]
}
 801fdd6:	e13b      	b.n	8020050 <HAL_TIM_IC_CaptureCallback+0x330>
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 801fdd8:	687b      	ldr	r3, [r7, #4]
 801fdda:	7f1b      	ldrb	r3, [r3, #28]
 801fddc:	2b02      	cmp	r3, #2
 801fdde:	d154      	bne.n	801fe8a <HAL_TIM_IC_CaptureCallback+0x16a>
		if(digitalSettingList[1].mode[0] == 'F')
 801fde0:	4b63      	ldr	r3, [pc, #396]	; (801ff70 <HAL_TIM_IC_CaptureCallback+0x250>)
 801fde2:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 801fde6:	2b46      	cmp	r3, #70	; 0x46
 801fde8:	d149      	bne.n	801fe7e <HAL_TIM_IC_CaptureCallback+0x15e>
			if (flag_ch2 == 0)
 801fdea:	4b6b      	ldr	r3, [pc, #428]	; (801ff98 <HAL_TIM_IC_CaptureCallback+0x278>)
 801fdec:	681b      	ldr	r3, [r3, #0]
 801fdee:	2b00      	cmp	r3, #0
 801fdf0:	d10a      	bne.n	801fe08 <HAL_TIM_IC_CaptureCallback+0xe8>
				ch2_val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 801fdf2:	2104      	movs	r1, #4
 801fdf4:	6878      	ldr	r0, [r7, #4]
 801fdf6:	f7eb fd59 	bl	800b8ac <HAL_TIM_ReadCapturedValue>
 801fdfa:	4603      	mov	r3, r0
 801fdfc:	4a67      	ldr	r2, [pc, #412]	; (801ff9c <HAL_TIM_IC_CaptureCallback+0x27c>)
 801fdfe:	6013      	str	r3, [r2, #0]
				flag_ch2 = 1;
 801fe00:	4b65      	ldr	r3, [pc, #404]	; (801ff98 <HAL_TIM_IC_CaptureCallback+0x278>)
 801fe02:	2201      	movs	r2, #1
 801fe04:	601a      	str	r2, [r3, #0]
}
 801fe06:	e123      	b.n	8020050 <HAL_TIM_IC_CaptureCallback+0x330>
				ch2_val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 801fe08:	2104      	movs	r1, #4
 801fe0a:	6878      	ldr	r0, [r7, #4]
 801fe0c:	f7eb fd4e 	bl	800b8ac <HAL_TIM_ReadCapturedValue>
 801fe10:	4603      	mov	r3, r0
 801fe12:	4a63      	ldr	r2, [pc, #396]	; (801ffa0 <HAL_TIM_IC_CaptureCallback+0x280>)
 801fe14:	6013      	str	r3, [r2, #0]
				if (ch2_val2 > ch2_val1)
 801fe16:	4b62      	ldr	r3, [pc, #392]	; (801ffa0 <HAL_TIM_IC_CaptureCallback+0x280>)
 801fe18:	681a      	ldr	r2, [r3, #0]
 801fe1a:	4b60      	ldr	r3, [pc, #384]	; (801ff9c <HAL_TIM_IC_CaptureCallback+0x27c>)
 801fe1c:	681b      	ldr	r3, [r3, #0]
 801fe1e:	429a      	cmp	r2, r3
 801fe20:	d907      	bls.n	801fe32 <HAL_TIM_IC_CaptureCallback+0x112>
					difference_ch2 = ch2_val2 - ch2_val1;
 801fe22:	4b5f      	ldr	r3, [pc, #380]	; (801ffa0 <HAL_TIM_IC_CaptureCallback+0x280>)
 801fe24:	681a      	ldr	r2, [r3, #0]
 801fe26:	4b5d      	ldr	r3, [pc, #372]	; (801ff9c <HAL_TIM_IC_CaptureCallback+0x27c>)
 801fe28:	681b      	ldr	r3, [r3, #0]
 801fe2a:	1ad3      	subs	r3, r2, r3
 801fe2c:	4a5d      	ldr	r2, [pc, #372]	; (801ffa4 <HAL_TIM_IC_CaptureCallback+0x284>)
 801fe2e:	6013      	str	r3, [r2, #0]
 801fe30:	e00d      	b.n	801fe4e <HAL_TIM_IC_CaptureCallback+0x12e>
				else if (ch2_val1 > ch2_val2)
 801fe32:	4b5a      	ldr	r3, [pc, #360]	; (801ff9c <HAL_TIM_IC_CaptureCallback+0x27c>)
 801fe34:	681a      	ldr	r2, [r3, #0]
 801fe36:	4b5a      	ldr	r3, [pc, #360]	; (801ffa0 <HAL_TIM_IC_CaptureCallback+0x280>)
 801fe38:	681b      	ldr	r3, [r3, #0]
 801fe3a:	429a      	cmp	r2, r3
 801fe3c:	d907      	bls.n	801fe4e <HAL_TIM_IC_CaptureCallback+0x12e>
					difference_ch2 = (0xffffffff - ch2_val1) + ch2_val2;
 801fe3e:	4b58      	ldr	r3, [pc, #352]	; (801ffa0 <HAL_TIM_IC_CaptureCallback+0x280>)
 801fe40:	681a      	ldr	r2, [r3, #0]
 801fe42:	4b56      	ldr	r3, [pc, #344]	; (801ff9c <HAL_TIM_IC_CaptureCallback+0x27c>)
 801fe44:	681b      	ldr	r3, [r3, #0]
 801fe46:	1ad3      	subs	r3, r2, r3
 801fe48:	3b01      	subs	r3, #1
 801fe4a:	4a56      	ldr	r2, [pc, #344]	; (801ffa4 <HAL_TIM_IC_CaptureCallback+0x284>)
 801fe4c:	6013      	str	r3, [r2, #0]
				frequency_ch2 = TIMCLOCK/(PRESCALAR)/difference_ch2;
 801fe4e:	4b55      	ldr	r3, [pc, #340]	; (801ffa4 <HAL_TIM_IC_CaptureCallback+0x284>)
 801fe50:	681b      	ldr	r3, [r3, #0]
 801fe52:	4a4c      	ldr	r2, [pc, #304]	; (801ff84 <HAL_TIM_IC_CaptureCallback+0x264>)
 801fe54:	fbb2 f3f3 	udiv	r3, r2, r3
 801fe58:	ee07 3a90 	vmov	s15, r3
 801fe5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801fe60:	4b51      	ldr	r3, [pc, #324]	; (801ffa8 <HAL_TIM_IC_CaptureCallback+0x288>)
 801fe62:	edc3 7a00 	vstr	s15, [r3]
				dataDigital[1] = frequency_ch2;
 801fe66:	4b50      	ldr	r3, [pc, #320]	; (801ffa8 <HAL_TIM_IC_CaptureCallback+0x288>)
 801fe68:	681b      	ldr	r3, [r3, #0]
 801fe6a:	4a48      	ldr	r2, [pc, #288]	; (801ff8c <HAL_TIM_IC_CaptureCallback+0x26c>)
 801fe6c:	6053      	str	r3, [r2, #4]
				HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_2);
 801fe6e:	2104      	movs	r1, #4
 801fe70:	4847      	ldr	r0, [pc, #284]	; (801ff90 <HAL_TIM_IC_CaptureCallback+0x270>)
 801fe72:	f7eb fa45 	bl	800b300 <HAL_TIM_IC_Stop_IT>
				flag_ch2 = 0;
 801fe76:	4b48      	ldr	r3, [pc, #288]	; (801ff98 <HAL_TIM_IC_CaptureCallback+0x278>)
 801fe78:	2200      	movs	r2, #0
 801fe7a:	601a      	str	r2, [r3, #0]
}
 801fe7c:	e0e8      	b.n	8020050 <HAL_TIM_IC_CaptureCallback+0x330>
			counter_ch2++;
 801fe7e:	4b4b      	ldr	r3, [pc, #300]	; (801ffac <HAL_TIM_IC_CaptureCallback+0x28c>)
 801fe80:	681b      	ldr	r3, [r3, #0]
 801fe82:	3301      	adds	r3, #1
 801fe84:	4a49      	ldr	r2, [pc, #292]	; (801ffac <HAL_TIM_IC_CaptureCallback+0x28c>)
 801fe86:	6013      	str	r3, [r2, #0]
}
 801fe88:	e0e2      	b.n	8020050 <HAL_TIM_IC_CaptureCallback+0x330>
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 801fe8a:	687b      	ldr	r3, [r7, #4]
 801fe8c:	7f1b      	ldrb	r3, [r3, #28]
 801fe8e:	2b04      	cmp	r3, #4
 801fe90:	d154      	bne.n	801ff3c <HAL_TIM_IC_CaptureCallback+0x21c>
		if(digitalSettingList[2].mode[0] == 'F')
 801fe92:	4b37      	ldr	r3, [pc, #220]	; (801ff70 <HAL_TIM_IC_CaptureCallback+0x250>)
 801fe94:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 801fe98:	2b46      	cmp	r3, #70	; 0x46
 801fe9a:	d149      	bne.n	801ff30 <HAL_TIM_IC_CaptureCallback+0x210>
			if (flag_ch3 == 0)
 801fe9c:	4b44      	ldr	r3, [pc, #272]	; (801ffb0 <HAL_TIM_IC_CaptureCallback+0x290>)
 801fe9e:	681b      	ldr	r3, [r3, #0]
 801fea0:	2b00      	cmp	r3, #0
 801fea2:	d10a      	bne.n	801feba <HAL_TIM_IC_CaptureCallback+0x19a>
				ch3_val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 801fea4:	2108      	movs	r1, #8
 801fea6:	6878      	ldr	r0, [r7, #4]
 801fea8:	f7eb fd00 	bl	800b8ac <HAL_TIM_ReadCapturedValue>
 801feac:	4603      	mov	r3, r0
 801feae:	4a41      	ldr	r2, [pc, #260]	; (801ffb4 <HAL_TIM_IC_CaptureCallback+0x294>)
 801feb0:	6013      	str	r3, [r2, #0]
				flag_ch3 = 1;
 801feb2:	4b3f      	ldr	r3, [pc, #252]	; (801ffb0 <HAL_TIM_IC_CaptureCallback+0x290>)
 801feb4:	2201      	movs	r2, #1
 801feb6:	601a      	str	r2, [r3, #0]
}
 801feb8:	e0ca      	b.n	8020050 <HAL_TIM_IC_CaptureCallback+0x330>
				ch3_val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 801feba:	2108      	movs	r1, #8
 801febc:	6878      	ldr	r0, [r7, #4]
 801febe:	f7eb fcf5 	bl	800b8ac <HAL_TIM_ReadCapturedValue>
 801fec2:	4603      	mov	r3, r0
 801fec4:	4a3c      	ldr	r2, [pc, #240]	; (801ffb8 <HAL_TIM_IC_CaptureCallback+0x298>)
 801fec6:	6013      	str	r3, [r2, #0]
				if (ch3_val2 > ch3_val1)
 801fec8:	4b3b      	ldr	r3, [pc, #236]	; (801ffb8 <HAL_TIM_IC_CaptureCallback+0x298>)
 801feca:	681a      	ldr	r2, [r3, #0]
 801fecc:	4b39      	ldr	r3, [pc, #228]	; (801ffb4 <HAL_TIM_IC_CaptureCallback+0x294>)
 801fece:	681b      	ldr	r3, [r3, #0]
 801fed0:	429a      	cmp	r2, r3
 801fed2:	d907      	bls.n	801fee4 <HAL_TIM_IC_CaptureCallback+0x1c4>
					difference_ch3 = ch3_val2 - ch3_val1;
 801fed4:	4b38      	ldr	r3, [pc, #224]	; (801ffb8 <HAL_TIM_IC_CaptureCallback+0x298>)
 801fed6:	681a      	ldr	r2, [r3, #0]
 801fed8:	4b36      	ldr	r3, [pc, #216]	; (801ffb4 <HAL_TIM_IC_CaptureCallback+0x294>)
 801feda:	681b      	ldr	r3, [r3, #0]
 801fedc:	1ad3      	subs	r3, r2, r3
 801fede:	4a37      	ldr	r2, [pc, #220]	; (801ffbc <HAL_TIM_IC_CaptureCallback+0x29c>)
 801fee0:	6013      	str	r3, [r2, #0]
 801fee2:	e00d      	b.n	801ff00 <HAL_TIM_IC_CaptureCallback+0x1e0>
				else if (ch3_val1 > ch3_val2)
 801fee4:	4b33      	ldr	r3, [pc, #204]	; (801ffb4 <HAL_TIM_IC_CaptureCallback+0x294>)
 801fee6:	681a      	ldr	r2, [r3, #0]
 801fee8:	4b33      	ldr	r3, [pc, #204]	; (801ffb8 <HAL_TIM_IC_CaptureCallback+0x298>)
 801feea:	681b      	ldr	r3, [r3, #0]
 801feec:	429a      	cmp	r2, r3
 801feee:	d907      	bls.n	801ff00 <HAL_TIM_IC_CaptureCallback+0x1e0>
					difference_ch3 = (0xffffffff - ch3_val1) + ch3_val2;
 801fef0:	4b31      	ldr	r3, [pc, #196]	; (801ffb8 <HAL_TIM_IC_CaptureCallback+0x298>)
 801fef2:	681a      	ldr	r2, [r3, #0]
 801fef4:	4b2f      	ldr	r3, [pc, #188]	; (801ffb4 <HAL_TIM_IC_CaptureCallback+0x294>)
 801fef6:	681b      	ldr	r3, [r3, #0]
 801fef8:	1ad3      	subs	r3, r2, r3
 801fefa:	3b01      	subs	r3, #1
 801fefc:	4a2f      	ldr	r2, [pc, #188]	; (801ffbc <HAL_TIM_IC_CaptureCallback+0x29c>)
 801fefe:	6013      	str	r3, [r2, #0]
				frequency_ch3 = TIMCLOCK/(PRESCALAR)/difference_ch3;
 801ff00:	4b2e      	ldr	r3, [pc, #184]	; (801ffbc <HAL_TIM_IC_CaptureCallback+0x29c>)
 801ff02:	681b      	ldr	r3, [r3, #0]
 801ff04:	4a1f      	ldr	r2, [pc, #124]	; (801ff84 <HAL_TIM_IC_CaptureCallback+0x264>)
 801ff06:	fbb2 f3f3 	udiv	r3, r2, r3
 801ff0a:	ee07 3a90 	vmov	s15, r3
 801ff0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ff12:	4b2b      	ldr	r3, [pc, #172]	; (801ffc0 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 801ff14:	edc3 7a00 	vstr	s15, [r3]
				dataDigital[2] = frequency_ch3;
 801ff18:	4b29      	ldr	r3, [pc, #164]	; (801ffc0 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 801ff1a:	681b      	ldr	r3, [r3, #0]
 801ff1c:	4a1b      	ldr	r2, [pc, #108]	; (801ff8c <HAL_TIM_IC_CaptureCallback+0x26c>)
 801ff1e:	6093      	str	r3, [r2, #8]
				HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_3);
 801ff20:	2108      	movs	r1, #8
 801ff22:	481b      	ldr	r0, [pc, #108]	; (801ff90 <HAL_TIM_IC_CaptureCallback+0x270>)
 801ff24:	f7eb f9ec 	bl	800b300 <HAL_TIM_IC_Stop_IT>
				flag_ch3 = 0;
 801ff28:	4b21      	ldr	r3, [pc, #132]	; (801ffb0 <HAL_TIM_IC_CaptureCallback+0x290>)
 801ff2a:	2200      	movs	r2, #0
 801ff2c:	601a      	str	r2, [r3, #0]
}
 801ff2e:	e08f      	b.n	8020050 <HAL_TIM_IC_CaptureCallback+0x330>
			counter_ch3++;
 801ff30:	4b24      	ldr	r3, [pc, #144]	; (801ffc4 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 801ff32:	681b      	ldr	r3, [r3, #0]
 801ff34:	3301      	adds	r3, #1
 801ff36:	4a23      	ldr	r2, [pc, #140]	; (801ffc4 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 801ff38:	6013      	str	r3, [r2, #0]
}
 801ff3a:	e089      	b.n	8020050 <HAL_TIM_IC_CaptureCallback+0x330>
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 801ff3c:	687b      	ldr	r3, [r7, #4]
 801ff3e:	7f1b      	ldrb	r3, [r3, #28]
 801ff40:	2b08      	cmp	r3, #8
 801ff42:	f040 8085 	bne.w	8020050 <HAL_TIM_IC_CaptureCallback+0x330>
		if(digitalSettingList[2].mode[3] == 'F')
 801ff46:	4b0a      	ldr	r3, [pc, #40]	; (801ff70 <HAL_TIM_IC_CaptureCallback+0x250>)
 801ff48:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 801ff4c:	2b46      	cmp	r3, #70	; 0x46
 801ff4e:	d17a      	bne.n	8020046 <HAL_TIM_IC_CaptureCallback+0x326>
			if (flag_ch4 == 0)
 801ff50:	4b1d      	ldr	r3, [pc, #116]	; (801ffc8 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 801ff52:	681b      	ldr	r3, [r3, #0]
 801ff54:	2b00      	cmp	r3, #0
 801ff56:	d13b      	bne.n	801ffd0 <HAL_TIM_IC_CaptureCallback+0x2b0>
				ch4_val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 801ff58:	210c      	movs	r1, #12
 801ff5a:	6878      	ldr	r0, [r7, #4]
 801ff5c:	f7eb fca6 	bl	800b8ac <HAL_TIM_ReadCapturedValue>
 801ff60:	4603      	mov	r3, r0
 801ff62:	4a1a      	ldr	r2, [pc, #104]	; (801ffcc <HAL_TIM_IC_CaptureCallback+0x2ac>)
 801ff64:	6013      	str	r3, [r2, #0]
				flag_ch4 = 1;
 801ff66:	4b18      	ldr	r3, [pc, #96]	; (801ffc8 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 801ff68:	2201      	movs	r2, #1
 801ff6a:	601a      	str	r2, [r3, #0]
}
 801ff6c:	e070      	b.n	8020050 <HAL_TIM_IC_CaptureCallback+0x330>
 801ff6e:	bf00      	nop
 801ff70:	24016610 	.word	0x24016610
 801ff74:	2401b1e0 	.word	0x2401b1e0
 801ff78:	2401b1c0 	.word	0x2401b1c0
 801ff7c:	2401b1cc 	.word	0x2401b1cc
 801ff80:	2401b200 	.word	0x2401b200
 801ff84:	000f4240 	.word	0x000f4240
 801ff88:	2401b1b8 	.word	0x2401b1b8
 801ff8c:	2401b1d0 	.word	0x2401b1d0
 801ff90:	2401ab40 	.word	0x2401ab40
 801ff94:	2401b114 	.word	0x2401b114
 801ff98:	2401b1e8 	.word	0x2401b1e8
 801ff9c:	2401b130 	.word	0x2401b130
 801ffa0:	2401b134 	.word	0x2401b134
 801ffa4:	2401b204 	.word	0x2401b204
 801ffa8:	2401b1bc 	.word	0x2401b1bc
 801ffac:	2401b110 	.word	0x2401b110
 801ffb0:	2401b1e4 	.word	0x2401b1e4
 801ffb4:	2401b118 	.word	0x2401b118
 801ffb8:	2401b12c 	.word	0x2401b12c
 801ffbc:	2401b1fc 	.word	0x2401b1fc
 801ffc0:	2401b1c4 	.word	0x2401b1c4
 801ffc4:	2401b10c 	.word	0x2401b10c
 801ffc8:	2401b1ec 	.word	0x2401b1ec
 801ffcc:	2401b1f0 	.word	0x2401b1f0
				ch4_val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 801ffd0:	210c      	movs	r1, #12
 801ffd2:	6878      	ldr	r0, [r7, #4]
 801ffd4:	f7eb fc6a 	bl	800b8ac <HAL_TIM_ReadCapturedValue>
 801ffd8:	4603      	mov	r3, r0
 801ffda:	4a1f      	ldr	r2, [pc, #124]	; (8020058 <HAL_TIM_IC_CaptureCallback+0x338>)
 801ffdc:	6013      	str	r3, [r2, #0]
				if (ch4_val2 > ch4_val1)
 801ffde:	4b1e      	ldr	r3, [pc, #120]	; (8020058 <HAL_TIM_IC_CaptureCallback+0x338>)
 801ffe0:	681a      	ldr	r2, [r3, #0]
 801ffe2:	4b1e      	ldr	r3, [pc, #120]	; (802005c <HAL_TIM_IC_CaptureCallback+0x33c>)
 801ffe4:	681b      	ldr	r3, [r3, #0]
 801ffe6:	429a      	cmp	r2, r3
 801ffe8:	d907      	bls.n	801fffa <HAL_TIM_IC_CaptureCallback+0x2da>
					difference_ch4 = ch4_val2 - ch4_val1;
 801ffea:	4b1b      	ldr	r3, [pc, #108]	; (8020058 <HAL_TIM_IC_CaptureCallback+0x338>)
 801ffec:	681a      	ldr	r2, [r3, #0]
 801ffee:	4b1b      	ldr	r3, [pc, #108]	; (802005c <HAL_TIM_IC_CaptureCallback+0x33c>)
 801fff0:	681b      	ldr	r3, [r3, #0]
 801fff2:	1ad3      	subs	r3, r2, r3
 801fff4:	4a1a      	ldr	r2, [pc, #104]	; (8020060 <HAL_TIM_IC_CaptureCallback+0x340>)
 801fff6:	6013      	str	r3, [r2, #0]
 801fff8:	e00d      	b.n	8020016 <HAL_TIM_IC_CaptureCallback+0x2f6>
				else if (ch4_val1 > ch4_val2)
 801fffa:	4b18      	ldr	r3, [pc, #96]	; (802005c <HAL_TIM_IC_CaptureCallback+0x33c>)
 801fffc:	681a      	ldr	r2, [r3, #0]
 801fffe:	4b16      	ldr	r3, [pc, #88]	; (8020058 <HAL_TIM_IC_CaptureCallback+0x338>)
 8020000:	681b      	ldr	r3, [r3, #0]
 8020002:	429a      	cmp	r2, r3
 8020004:	d907      	bls.n	8020016 <HAL_TIM_IC_CaptureCallback+0x2f6>
					difference_ch4 = (0xffffffff - ch4_val1) + ch4_val2;
 8020006:	4b14      	ldr	r3, [pc, #80]	; (8020058 <HAL_TIM_IC_CaptureCallback+0x338>)
 8020008:	681a      	ldr	r2, [r3, #0]
 802000a:	4b14      	ldr	r3, [pc, #80]	; (802005c <HAL_TIM_IC_CaptureCallback+0x33c>)
 802000c:	681b      	ldr	r3, [r3, #0]
 802000e:	1ad3      	subs	r3, r2, r3
 8020010:	3b01      	subs	r3, #1
 8020012:	4a13      	ldr	r2, [pc, #76]	; (8020060 <HAL_TIM_IC_CaptureCallback+0x340>)
 8020014:	6013      	str	r3, [r2, #0]
				frequency_ch4 = TIMCLOCK/(PRESCALAR)/difference_ch4;
 8020016:	4b12      	ldr	r3, [pc, #72]	; (8020060 <HAL_TIM_IC_CaptureCallback+0x340>)
 8020018:	681b      	ldr	r3, [r3, #0]
 802001a:	4a12      	ldr	r2, [pc, #72]	; (8020064 <HAL_TIM_IC_CaptureCallback+0x344>)
 802001c:	fbb2 f3f3 	udiv	r3, r2, r3
 8020020:	ee07 3a90 	vmov	s15, r3
 8020024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020028:	4b0f      	ldr	r3, [pc, #60]	; (8020068 <HAL_TIM_IC_CaptureCallback+0x348>)
 802002a:	edc3 7a00 	vstr	s15, [r3]
				dataDigital[3] = frequency_ch4;
 802002e:	4b0e      	ldr	r3, [pc, #56]	; (8020068 <HAL_TIM_IC_CaptureCallback+0x348>)
 8020030:	681b      	ldr	r3, [r3, #0]
 8020032:	4a0e      	ldr	r2, [pc, #56]	; (802006c <HAL_TIM_IC_CaptureCallback+0x34c>)
 8020034:	60d3      	str	r3, [r2, #12]
				HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_4);
 8020036:	210c      	movs	r1, #12
 8020038:	480d      	ldr	r0, [pc, #52]	; (8020070 <HAL_TIM_IC_CaptureCallback+0x350>)
 802003a:	f7eb f961 	bl	800b300 <HAL_TIM_IC_Stop_IT>
				flag_ch4 = 0;
 802003e:	4b0d      	ldr	r3, [pc, #52]	; (8020074 <HAL_TIM_IC_CaptureCallback+0x354>)
 8020040:	2200      	movs	r2, #0
 8020042:	601a      	str	r2, [r3, #0]
}
 8020044:	e004      	b.n	8020050 <HAL_TIM_IC_CaptureCallback+0x330>
			counter_ch4++;
 8020046:	4b0c      	ldr	r3, [pc, #48]	; (8020078 <HAL_TIM_IC_CaptureCallback+0x358>)
 8020048:	681b      	ldr	r3, [r3, #0]
 802004a:	3301      	adds	r3, #1
 802004c:	4a0a      	ldr	r2, [pc, #40]	; (8020078 <HAL_TIM_IC_CaptureCallback+0x358>)
 802004e:	6013      	str	r3, [r2, #0]
}
 8020050:	bf00      	nop
 8020052:	3708      	adds	r7, #8
 8020054:	46bd      	mov	sp, r7
 8020056:	bd80      	pop	{r7, pc}
 8020058:	2401b1f4 	.word	0x2401b1f4
 802005c:	2401b1f0 	.word	0x2401b1f0
 8020060:	2401b1f8 	.word	0x2401b1f8
 8020064:	000f4240 	.word	0x000f4240
 8020068:	2401b1c8 	.word	0x2401b1c8
 802006c:	2401b1d0 	.word	0x2401b1d0
 8020070:	2401ab40 	.word	0x2401ab40
 8020074:	2401b1ec 	.word	0x2401b1ec
 8020078:	2401b108 	.word	0x2401b108

0802007c <HAL_GPIO_EXTI_Callback>:
            break;
    }
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 802007c:	b580      	push	{r7, lr}
 802007e:	b082      	sub	sp, #8
 8020080:	af00      	add	r7, sp, #0
 8020082:	4603      	mov	r3, r0
 8020084:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin)
 8020086:	88fb      	ldrh	r3, [r7, #6]
 8020088:	2b40      	cmp	r3, #64	; 0x40
 802008a:	d022      	beq.n	80200d2 <HAL_GPIO_EXTI_Callback+0x56>
 802008c:	2b40      	cmp	r3, #64	; 0x40
 802008e:	dc28      	bgt.n	80200e2 <HAL_GPIO_EXTI_Callback+0x66>
 8020090:	2b20      	cmp	r3, #32
 8020092:	d016      	beq.n	80200c2 <HAL_GPIO_EXTI_Callback+0x46>
 8020094:	2b20      	cmp	r3, #32
 8020096:	dc24      	bgt.n	80200e2 <HAL_GPIO_EXTI_Callback+0x66>
 8020098:	2b08      	cmp	r3, #8
 802009a:	d002      	beq.n	80200a2 <HAL_GPIO_EXTI_Callback+0x26>
 802009c:	2b10      	cmp	r3, #16
 802009e:	d008      	beq.n	80200b2 <HAL_GPIO_EXTI_Callback+0x36>
            break;
        case GPIO_PIN_6:
            osMessagePut(GPIOQueueHandle, APP_E_EVENT_BUTTON_ENTER, 0);
            break;
        default:
            break;
 80200a0:	e01f      	b.n	80200e2 <HAL_GPIO_EXTI_Callback+0x66>
            osMessagePut(GPIOQueueHandle, APP_E_EVENT_BUTTON_DOWN, 0);
 80200a2:	4b12      	ldr	r3, [pc, #72]	; (80200ec <HAL_GPIO_EXTI_Callback+0x70>)
 80200a4:	681b      	ldr	r3, [r3, #0]
 80200a6:	2200      	movs	r2, #0
 80200a8:	2102      	movs	r1, #2
 80200aa:	4618      	mov	r0, r3
 80200ac:	f7f5 fa3e 	bl	801552c <osMessagePut>
            break;
 80200b0:	e018      	b.n	80200e4 <HAL_GPIO_EXTI_Callback+0x68>
            osMessagePut(GPIOQueueHandle, APP_E_EVENT_BUTTON_CANCEL, 0);
 80200b2:	4b0e      	ldr	r3, [pc, #56]	; (80200ec <HAL_GPIO_EXTI_Callback+0x70>)
 80200b4:	681b      	ldr	r3, [r3, #0]
 80200b6:	2200      	movs	r2, #0
 80200b8:	2104      	movs	r1, #4
 80200ba:	4618      	mov	r0, r3
 80200bc:	f7f5 fa36 	bl	801552c <osMessagePut>
            break;
 80200c0:	e010      	b.n	80200e4 <HAL_GPIO_EXTI_Callback+0x68>
            osMessagePut(GPIOQueueHandle, APP_E_EVENT_BUTTON_UP, 0);
 80200c2:	4b0a      	ldr	r3, [pc, #40]	; (80200ec <HAL_GPIO_EXTI_Callback+0x70>)
 80200c4:	681b      	ldr	r3, [r3, #0]
 80200c6:	2200      	movs	r2, #0
 80200c8:	2101      	movs	r1, #1
 80200ca:	4618      	mov	r0, r3
 80200cc:	f7f5 fa2e 	bl	801552c <osMessagePut>
            break;
 80200d0:	e008      	b.n	80200e4 <HAL_GPIO_EXTI_Callback+0x68>
            osMessagePut(GPIOQueueHandle, APP_E_EVENT_BUTTON_ENTER, 0);
 80200d2:	4b06      	ldr	r3, [pc, #24]	; (80200ec <HAL_GPIO_EXTI_Callback+0x70>)
 80200d4:	681b      	ldr	r3, [r3, #0]
 80200d6:	2200      	movs	r2, #0
 80200d8:	2103      	movs	r1, #3
 80200da:	4618      	mov	r0, r3
 80200dc:	f7f5 fa26 	bl	801552c <osMessagePut>
            break;
 80200e0:	e000      	b.n	80200e4 <HAL_GPIO_EXTI_Callback+0x68>
            break;
 80200e2:	bf00      	nop
    }
}
 80200e4:	bf00      	nop
 80200e6:	3708      	adds	r7, #8
 80200e8:	46bd      	mov	sp, r7
 80200ea:	bd80      	pop	{r7, pc}
 80200ec:	2401b210 	.word	0x2401b210

080200f0 <tcp_echoclient_connect>:
  * @brief  Connects to the TCP echo server
  * @param  None
  * @retval None
  */
void tcp_echoclient_connect(uint8_t ip_Adress0, uint8_t ip_Adress1, uint8_t ip_Adress2, uint8_t ip_Adress3, uint32_t port)
{
 80200f0:	b590      	push	{r4, r7, lr}
 80200f2:	b085      	sub	sp, #20
 80200f4:	af00      	add	r7, sp, #0
 80200f6:	4604      	mov	r4, r0
 80200f8:	4608      	mov	r0, r1
 80200fa:	4611      	mov	r1, r2
 80200fc:	461a      	mov	r2, r3
 80200fe:	4623      	mov	r3, r4
 8020100:	71fb      	strb	r3, [r7, #7]
 8020102:	4603      	mov	r3, r0
 8020104:	71bb      	strb	r3, [r7, #6]
 8020106:	460b      	mov	r3, r1
 8020108:	717b      	strb	r3, [r7, #5]
 802010a:	4613      	mov	r3, r2
 802010c:	713b      	strb	r3, [r7, #4]
	ip_addr_t DestIPaddr;

	/* create new tcp pcb */
	echoclient_pcb = tcp_new();
 802010e:	f7fa fffd 	bl	801b10c <tcp_new>
 8020112:	4603      	mov	r3, r0
 8020114:	4a26      	ldr	r2, [pc, #152]	; (80201b0 <tcp_echoclient_connect+0xc0>)
 8020116:	6013      	str	r3, [r2, #0]

	if (echoclient_pcb != NULL)
 8020118:	4b25      	ldr	r3, [pc, #148]	; (80201b0 <tcp_echoclient_connect+0xc0>)
 802011a:	681b      	ldr	r3, [r3, #0]
 802011c:	2b00      	cmp	r3, #0
 802011e:	d03d      	beq.n	802019c <tcp_echoclient_connect+0xac>
	{
		IP4_ADDR(&DestIPaddr, ip_Adress0, ip_Adress1, ip_Adress2, ip_Adress3);
 8020120:	79fb      	ldrb	r3, [r7, #7]
 8020122:	061a      	lsls	r2, r3, #24
 8020124:	79bb      	ldrb	r3, [r7, #6]
 8020126:	041b      	lsls	r3, r3, #16
 8020128:	431a      	orrs	r2, r3
 802012a:	797b      	ldrb	r3, [r7, #5]
 802012c:	021b      	lsls	r3, r3, #8
 802012e:	431a      	orrs	r2, r3
 8020130:	793b      	ldrb	r3, [r7, #4]
 8020132:	4313      	orrs	r3, r2
 8020134:	061a      	lsls	r2, r3, #24
 8020136:	79fb      	ldrb	r3, [r7, #7]
 8020138:	0619      	lsls	r1, r3, #24
 802013a:	79bb      	ldrb	r3, [r7, #6]
 802013c:	041b      	lsls	r3, r3, #16
 802013e:	4319      	orrs	r1, r3
 8020140:	797b      	ldrb	r3, [r7, #5]
 8020142:	021b      	lsls	r3, r3, #8
 8020144:	4319      	orrs	r1, r3
 8020146:	793b      	ldrb	r3, [r7, #4]
 8020148:	430b      	orrs	r3, r1
 802014a:	021b      	lsls	r3, r3, #8
 802014c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8020150:	431a      	orrs	r2, r3
 8020152:	79fb      	ldrb	r3, [r7, #7]
 8020154:	0619      	lsls	r1, r3, #24
 8020156:	79bb      	ldrb	r3, [r7, #6]
 8020158:	041b      	lsls	r3, r3, #16
 802015a:	4319      	orrs	r1, r3
 802015c:	797b      	ldrb	r3, [r7, #5]
 802015e:	021b      	lsls	r3, r3, #8
 8020160:	4319      	orrs	r1, r3
 8020162:	793b      	ldrb	r3, [r7, #4]
 8020164:	430b      	orrs	r3, r1
 8020166:	0a1b      	lsrs	r3, r3, #8
 8020168:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802016c:	431a      	orrs	r2, r3
 802016e:	79fb      	ldrb	r3, [r7, #7]
 8020170:	0619      	lsls	r1, r3, #24
 8020172:	79bb      	ldrb	r3, [r7, #6]
 8020174:	041b      	lsls	r3, r3, #16
 8020176:	4319      	orrs	r1, r3
 8020178:	797b      	ldrb	r3, [r7, #5]
 802017a:	021b      	lsls	r3, r3, #8
 802017c:	4319      	orrs	r1, r3
 802017e:	793b      	ldrb	r3, [r7, #4]
 8020180:	430b      	orrs	r3, r1
 8020182:	0e1b      	lsrs	r3, r3, #24
 8020184:	4313      	orrs	r3, r2
 8020186:	60fb      	str	r3, [r7, #12]
		/* connect to destination address/port */
		tcp_connect(echoclient_pcb, &DestIPaddr, port, tcp_echoclient_connected);
 8020188:	4b09      	ldr	r3, [pc, #36]	; (80201b0 <tcp_echoclient_connect+0xc0>)
 802018a:	6818      	ldr	r0, [r3, #0]
 802018c:	6a3b      	ldr	r3, [r7, #32]
 802018e:	b29a      	uxth	r2, r3
 8020190:	f107 010c 	add.w	r1, r7, #12
 8020194:	4b07      	ldr	r3, [pc, #28]	; (80201b4 <tcp_echoclient_connect+0xc4>)
 8020196:	f7fa f8ab 	bl	801a2f0 <tcp_connect>
	memp_free(MEMP_TCP_PCB, echoclient_pcb);
#ifdef SERIAL_DEBUG
	printf("\n\r can not create tcp pcb");
#endif
	}
}
 802019a:	e005      	b.n	80201a8 <tcp_echoclient_connect+0xb8>
	memp_free(MEMP_TCP_PCB, echoclient_pcb);
 802019c:	4b04      	ldr	r3, [pc, #16]	; (80201b0 <tcp_echoclient_connect+0xc0>)
 802019e:	681b      	ldr	r3, [r3, #0]
 80201a0:	4619      	mov	r1, r3
 80201a2:	2001      	movs	r0, #1
 80201a4:	f7f8 ff66 	bl	8019074 <memp_free>
}
 80201a8:	bf00      	nop
 80201aa:	3714      	adds	r7, #20
 80201ac:	46bd      	mov	sp, r7
 80201ae:	bd90      	pop	{r4, r7, pc}
 80201b0:	2401b364 	.word	0x2401b364
 80201b4:	080201b9 	.word	0x080201b9

080201b8 <tcp_echoclient_connected>:
  * @param tpcb: pointer on the connection contol block
  * @param err: when connection correctly established err should be ERR_OK
  * @retval err_t: returned error
  */
static err_t tcp_echoclient_connected(void *arg, struct tcp_pcb *tpcb, err_t err)
{
 80201b8:	b590      	push	{r4, r7, lr}
 80201ba:	b087      	sub	sp, #28
 80201bc:	af00      	add	r7, sp, #0
 80201be:	60f8      	str	r0, [r7, #12]
 80201c0:	60b9      	str	r1, [r7, #8]
 80201c2:	4613      	mov	r3, r2
 80201c4:	71fb      	strb	r3, [r7, #7]
  struct echoclient *es = NULL;
 80201c6:	2300      	movs	r3, #0
 80201c8:	613b      	str	r3, [r7, #16]
  err_t ret_err;
  if (err == ERR_OK)
 80201ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80201ce:	2b00      	cmp	r3, #0
 80201d0:	d14a      	bne.n	8020268 <tcp_echoclient_connected+0xb0>
  {
    /* allocate structure es to maintain tcp connection informations */
    es = (struct echoclient *)mem_malloc(sizeof(struct echoclient));
 80201d2:	200c      	movs	r0, #12
 80201d4:	f7f8 fdc4 	bl	8018d60 <mem_malloc>
 80201d8:	6138      	str	r0, [r7, #16]

    if (es != NULL)
 80201da:	693b      	ldr	r3, [r7, #16]
 80201dc:	2b00      	cmp	r3, #0
 80201de:	d049      	beq.n	8020274 <tcp_echoclient_connected+0xbc>
    {
      es->state = ES_CONNECTED;
 80201e0:	693b      	ldr	r3, [r7, #16]
 80201e2:	2201      	movs	r2, #1
 80201e4:	701a      	strb	r2, [r3, #0]
      es->pcb = tpcb;
 80201e6:	693b      	ldr	r3, [r7, #16]
 80201e8:	68ba      	ldr	r2, [r7, #8]
 80201ea:	605a      	str	r2, [r3, #4]

      /* allocate pbuf */
      es->p_tx = pbuf_alloc(PBUF_TRANSPORT, strlen((char*)data) , PBUF_POOL);
 80201ec:	4824      	ldr	r0, [pc, #144]	; (8020280 <tcp_echoclient_connected+0xc8>)
 80201ee:	f7e0 f877 	bl	80002e0 <strlen>
 80201f2:	4603      	mov	r3, r0
 80201f4:	b29b      	uxth	r3, r3
 80201f6:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80201fa:	4619      	mov	r1, r3
 80201fc:	2036      	movs	r0, #54	; 0x36
 80201fe:	f7f9 f80d 	bl	801921c <pbuf_alloc>
 8020202:	4602      	mov	r2, r0
 8020204:	693b      	ldr	r3, [r7, #16]
 8020206:	609a      	str	r2, [r3, #8]

      if (es->p_tx)
 8020208:	693b      	ldr	r3, [r7, #16]
 802020a:	689b      	ldr	r3, [r3, #8]
 802020c:	2b00      	cmp	r3, #0
 802020e:	d031      	beq.n	8020274 <tcp_echoclient_connected+0xbc>
      {
        /* copy data to pbuf */
        pbuf_take(es->p_tx, (char*)data, strlen((char*)data));
 8020210:	693b      	ldr	r3, [r7, #16]
 8020212:	689c      	ldr	r4, [r3, #8]
 8020214:	481a      	ldr	r0, [pc, #104]	; (8020280 <tcp_echoclient_connected+0xc8>)
 8020216:	f7e0 f863 	bl	80002e0 <strlen>
 802021a:	4603      	mov	r3, r0
 802021c:	b29b      	uxth	r3, r3
 802021e:	461a      	mov	r2, r3
 8020220:	4917      	ldr	r1, [pc, #92]	; (8020280 <tcp_echoclient_connected+0xc8>)
 8020222:	4620      	mov	r0, r4
 8020224:	f7f9 fbee 	bl	8019a04 <pbuf_take>

        /* pass newly allocated es structure as argument to tpcb */
        tcp_arg(tpcb, es);
 8020228:	6939      	ldr	r1, [r7, #16]
 802022a:	68b8      	ldr	r0, [r7, #8]
 802022c:	f7fa ff76 	bl	801b11c <tcp_arg>

        /* initialize LwIP tcp_recv callback function */
        tcp_recv(tpcb, tcp_echoclient_recv);
 8020230:	4914      	ldr	r1, [pc, #80]	; (8020284 <tcp_echoclient_connected+0xcc>)
 8020232:	68b8      	ldr	r0, [r7, #8]
 8020234:	f7fa ff84 	bl	801b140 <tcp_recv>

        /* initialize LwIP tcp_sent callback function */
        tcp_sent(tpcb, tcp_echoclient_sent);
 8020238:	4913      	ldr	r1, [pc, #76]	; (8020288 <tcp_echoclient_connected+0xd0>)
 802023a:	68b8      	ldr	r0, [r7, #8]
 802023c:	f7fa ffa2 	bl	801b184 <tcp_sent>

        /* initialize LwIP tcp_poll callback function */
        tcp_poll(tpcb, tcp_echoclient_poll, 1);
 8020240:	2201      	movs	r2, #1
 8020242:	4912      	ldr	r1, [pc, #72]	; (802028c <tcp_echoclient_connected+0xd4>)
 8020244:	68b8      	ldr	r0, [r7, #8]
 8020246:	f7fa ffbf 	bl	801b1c8 <tcp_poll>

        /* send data */
        if(!get_time){
 802024a:	4b11      	ldr	r3, [pc, #68]	; (8020290 <tcp_echoclient_connected+0xd8>)
 802024c:	781b      	ldrb	r3, [r3, #0]
 802024e:	2b00      	cmp	r3, #0
 8020250:	d107      	bne.n	8020262 <tcp_echoclient_connected+0xaa>
            tcp_echoclient_send(tpcb,es);
 8020252:	6939      	ldr	r1, [r7, #16]
 8020254:	68b8      	ldr	r0, [r7, #8]
 8020256:	f000 f88b 	bl	8020370 <tcp_echoclient_send>
            tcp_echoclient_connection_close(tpcb, es);
 802025a:	6939      	ldr	r1, [r7, #16]
 802025c:	68b8      	ldr	r0, [r7, #8]
 802025e:	f000 f90c 	bl	802047a <tcp_echoclient_connection_close>
        }
        ret_err = ERR_OK;
 8020262:	2300      	movs	r3, #0
 8020264:	75fb      	strb	r3, [r7, #23]
 8020266:	e005      	b.n	8020274 <tcp_echoclient_connected+0xbc>
    }
    }
	else
	{
		/* close connection */
		tcp_echoclient_connection_close(tpcb, es);
 8020268:	6939      	ldr	r1, [r7, #16]
 802026a:	68b8      	ldr	r0, [r7, #8]
 802026c:	f000 f905 	bl	802047a <tcp_echoclient_connection_close>
		ret_err = ERR_MEM;
 8020270:	23ff      	movs	r3, #255	; 0xff
 8020272:	75fb      	strb	r3, [r7, #23]
	}
	return ret_err;
 8020274:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8020278:	4618      	mov	r0, r3
 802027a:	371c      	adds	r7, #28
 802027c:	46bd      	mov	sp, r7
 802027e:	bd90      	pop	{r4, r7, pc}
 8020280:	2401a9c4 	.word	0x2401a9c4
 8020284:	08020295 	.word	0x08020295
 8020288:	0802044f 	.word	0x0802044f
 802028c:	080203fd 	.word	0x080203fd
 8020290:	2401ab8c 	.word	0x2401ab8c

08020294 <tcp_echoclient_recv>:
  * @param tpcb: tcp connection control block
  * @param err: receive error code
  * @retval err_t: retuned error
  */
static err_t tcp_echoclient_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8020294:	b580      	push	{r7, lr}
 8020296:	b086      	sub	sp, #24
 8020298:	af00      	add	r7, sp, #0
 802029a:	60f8      	str	r0, [r7, #12]
 802029c:	60b9      	str	r1, [r7, #8]
 802029e:	607a      	str	r2, [r7, #4]
 80202a0:	70fb      	strb	r3, [r7, #3]
  struct echoclient *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 80202a2:	68fb      	ldr	r3, [r7, #12]
 80202a4:	2b00      	cmp	r3, #0
 80202a6:	d105      	bne.n	80202b4 <tcp_echoclient_recv+0x20>
 80202a8:	4b2c      	ldr	r3, [pc, #176]	; (802035c <tcp_echoclient_recv+0xc8>)
 80202aa:	22a5      	movs	r2, #165	; 0xa5
 80202ac:	492c      	ldr	r1, [pc, #176]	; (8020360 <tcp_echoclient_recv+0xcc>)
 80202ae:	482d      	ldr	r0, [pc, #180]	; (8020364 <tcp_echoclient_recv+0xd0>)
 80202b0:	f001 fe44 	bl	8021f3c <iprintf>

  es = (struct echoclient *)arg;
 80202b4:	68fb      	ldr	r3, [r7, #12]
 80202b6:	613b      	str	r3, [r7, #16]

  /* if we receive an empty tcp frame from server => close connection */
  if (p == NULL)
 80202b8:	687b      	ldr	r3, [r7, #4]
 80202ba:	2b00      	cmp	r3, #0
 80202bc:	d10d      	bne.n	80202da <tcp_echoclient_recv+0x46>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 80202be:	693b      	ldr	r3, [r7, #16]
 80202c0:	2203      	movs	r2, #3
 80202c2:	701a      	strb	r2, [r3, #0]
    if(es->p_tx == NULL)
 80202c4:	693b      	ldr	r3, [r7, #16]
 80202c6:	689b      	ldr	r3, [r3, #8]
 80202c8:	2b00      	cmp	r3, #0
 80202ca:	d103      	bne.n	80202d4 <tcp_echoclient_recv+0x40>
    {
       /* we're done sending, close connection */
       tcp_echoclient_connection_close(tpcb, es);
 80202cc:	6939      	ldr	r1, [r7, #16]
 80202ce:	68b8      	ldr	r0, [r7, #8]
 80202d0:	f000 f8d3 	bl	802047a <tcp_echoclient_connection_close>
    else
    {
      /* send remaining data*/
      //tcp_echoclient_send(tpcb, es);
    }
    ret_err = ERR_OK;
 80202d4:	2300      	movs	r3, #0
 80202d6:	75fb      	strb	r3, [r7, #23]
 80202d8:	e03a      	b.n	8020350 <tcp_echoclient_recv+0xbc>
  }
  /* else : a non empty frame was received from echo server but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 80202da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80202de:	2b00      	cmp	r3, #0
 80202e0:	d008      	beq.n	80202f4 <tcp_echoclient_recv+0x60>
  {
    /* free received pbuf*/
    if (p != NULL)
 80202e2:	687b      	ldr	r3, [r7, #4]
 80202e4:	2b00      	cmp	r3, #0
 80202e6:	d002      	beq.n	80202ee <tcp_echoclient_recv+0x5a>
    {
      pbuf_free(p);
 80202e8:	6878      	ldr	r0, [r7, #4]
 80202ea:	f7f9 f9f5 	bl	80196d8 <pbuf_free>
    }
    ret_err = err;
 80202ee:	78fb      	ldrb	r3, [r7, #3]
 80202f0:	75fb      	strb	r3, [r7, #23]
 80202f2:	e02d      	b.n	8020350 <tcp_echoclient_recv+0xbc>
  }
  else if(es->state == ES_CONNECTED)
 80202f4:	693b      	ldr	r3, [r7, #16]
 80202f6:	781b      	ldrb	r3, [r3, #0]
 80202f8:	2b01      	cmp	r3, #1
 80202fa:	d11e      	bne.n	802033a <tcp_echoclient_recv+0xa6>
  {
    /* Acknowledge data reception */
    tcp_recved(tpcb, p->tot_len);
 80202fc:	687b      	ldr	r3, [r7, #4]
 80202fe:	891b      	ldrh	r3, [r3, #8]
 8020300:	4619      	mov	r1, r3
 8020302:	68b8      	ldr	r0, [r7, #8]
 8020304:	f7f9 ff5e 	bl	801a1c4 <tcp_recved>
    memcpy(&recev_buf, p->payload, p->len);
 8020308:	687b      	ldr	r3, [r7, #4]
 802030a:	6859      	ldr	r1, [r3, #4]
 802030c:	687b      	ldr	r3, [r7, #4]
 802030e:	895b      	ldrh	r3, [r3, #10]
 8020310:	461a      	mov	r2, r3
 8020312:	4815      	ldr	r0, [pc, #84]	; (8020368 <tcp_echoclient_recv+0xd4>)
 8020314:	f000 ff50 	bl	80211b8 <memcpy>
    osMessagePut(NetworkQueueHandle, APP_E_NETWORK_CLIENT_REV_DATA, 0);
 8020318:	4b14      	ldr	r3, [pc, #80]	; (802036c <tcp_echoclient_recv+0xd8>)
 802031a:	681b      	ldr	r3, [r3, #0]
 802031c:	2200      	movs	r2, #0
 802031e:	2112      	movs	r1, #18
 8020320:	4618      	mov	r0, r3
 8020322:	f7f5 f903 	bl	801552c <osMessagePut>
    pbuf_free(p);
 8020326:	6878      	ldr	r0, [r7, #4]
 8020328:	f7f9 f9d6 	bl	80196d8 <pbuf_free>
    tcp_echoclient_connection_close(tpcb, es);
 802032c:	6939      	ldr	r1, [r7, #16]
 802032e:	68b8      	ldr	r0, [r7, #8]
 8020330:	f000 f8a3 	bl	802047a <tcp_echoclient_connection_close>
    ret_err = ERR_OK;
 8020334:	2300      	movs	r3, #0
 8020336:	75fb      	strb	r3, [r7, #23]
 8020338:	e00a      	b.n	8020350 <tcp_echoclient_recv+0xbc>

  /* data received when connection already closed */
  else
  {
    /* Acknowledge data reception */
    tcp_recved(tpcb, p->tot_len);
 802033a:	687b      	ldr	r3, [r7, #4]
 802033c:	891b      	ldrh	r3, [r3, #8]
 802033e:	4619      	mov	r1, r3
 8020340:	68b8      	ldr	r0, [r7, #8]
 8020342:	f7f9 ff3f 	bl	801a1c4 <tcp_recved>

    /* free pbuf and do nothing */
    pbuf_free(p);
 8020346:	6878      	ldr	r0, [r7, #4]
 8020348:	f7f9 f9c6 	bl	80196d8 <pbuf_free>
    ret_err = ERR_OK;
 802034c:	2300      	movs	r3, #0
 802034e:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8020350:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8020354:	4618      	mov	r0, r3
 8020356:	3718      	adds	r7, #24
 8020358:	46bd      	mov	sp, r7
 802035a:	bd80      	pop	{r7, pc}
 802035c:	08025c80 	.word	0x08025c80
 8020360:	08025ca4 	.word	0x08025ca4
 8020364:	08025cb0 	.word	0x08025cb0
 8020368:	2401aa28 	.word	0x2401aa28
 802036c:	2401b340 	.word	0x2401b340

08020370 <tcp_echoclient_send>:
  * @param  es: pointer on structure of type echoclient containing info on data
  *             to be sent
  * @retval None
  */
static void tcp_echoclient_send(struct tcp_pcb *tpcb, struct echoclient * es)
{
 8020370:	b580      	push	{r7, lr}
 8020372:	b084      	sub	sp, #16
 8020374:	af00      	add	r7, sp, #0
 8020376:	6078      	str	r0, [r7, #4]
 8020378:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 802037a:	2300      	movs	r3, #0
 802037c:	73fb      	strb	r3, [r7, #15]

  while ((wr_err == ERR_OK) &&
 802037e:	e029      	b.n	80203d4 <tcp_echoclient_send+0x64>
         (es->p_tx != NULL) &&
         (es->p_tx->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p_tx;
 8020380:	683b      	ldr	r3, [r7, #0]
 8020382:	689b      	ldr	r3, [r3, #8]
 8020384:	60bb      	str	r3, [r7, #8]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8020386:	68bb      	ldr	r3, [r7, #8]
 8020388:	6859      	ldr	r1, [r3, #4]
 802038a:	68bb      	ldr	r3, [r7, #8]
 802038c:	895a      	ldrh	r2, [r3, #10]
 802038e:	2301      	movs	r3, #1
 8020390:	6878      	ldr	r0, [r7, #4]
 8020392:	f7fb fa5f 	bl	801b854 <tcp_write>
 8020396:	4603      	mov	r3, r0
 8020398:	73fb      	strb	r3, [r7, #15]

    if (wr_err == ERR_OK)
 802039a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802039e:	2b00      	cmp	r3, #0
 80203a0:	d110      	bne.n	80203c4 <tcp_echoclient_send+0x54>
    {
      /* continue with next pbuf in chain (if any) */
      es->p_tx = ptr->next;
 80203a2:	68bb      	ldr	r3, [r7, #8]
 80203a4:	681a      	ldr	r2, [r3, #0]
 80203a6:	683b      	ldr	r3, [r7, #0]
 80203a8:	609a      	str	r2, [r3, #8]

      if(es->p_tx != NULL)
 80203aa:	683b      	ldr	r3, [r7, #0]
 80203ac:	689b      	ldr	r3, [r3, #8]
 80203ae:	2b00      	cmp	r3, #0
 80203b0:	d004      	beq.n	80203bc <tcp_echoclient_send+0x4c>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p_tx);
 80203b2:	683b      	ldr	r3, [r7, #0]
 80203b4:	689b      	ldr	r3, [r3, #8]
 80203b6:	4618      	mov	r0, r3
 80203b8:	f7f9 fa34 	bl	8019824 <pbuf_ref>
      }

      /* free pbuf: will free pbufs up to es->p (because es->p has a reference count > 0) */
      pbuf_free(ptr);
 80203bc:	68b8      	ldr	r0, [r7, #8]
 80203be:	f7f9 f98b 	bl	80196d8 <pbuf_free>
 80203c2:	e007      	b.n	80203d4 <tcp_echoclient_send+0x64>
   }
   else if(wr_err == ERR_MEM)
 80203c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80203c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80203cc:	d102      	bne.n	80203d4 <tcp_echoclient_send+0x64>
   {
      /* we are low on memory, try later, defer to poll */
     es->p_tx = ptr;
 80203ce:	683b      	ldr	r3, [r7, #0]
 80203d0:	68ba      	ldr	r2, [r7, #8]
 80203d2:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 80203d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80203d8:	2b00      	cmp	r3, #0
 80203da:	d10b      	bne.n	80203f4 <tcp_echoclient_send+0x84>
         (es->p_tx != NULL) &&
 80203dc:	683b      	ldr	r3, [r7, #0]
 80203de:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 80203e0:	2b00      	cmp	r3, #0
 80203e2:	d007      	beq.n	80203f4 <tcp_echoclient_send+0x84>
         (es->p_tx->len <= tcp_sndbuf(tpcb)))
 80203e4:	683b      	ldr	r3, [r7, #0]
 80203e6:	689b      	ldr	r3, [r3, #8]
 80203e8:	895a      	ldrh	r2, [r3, #10]
 80203ea:	687b      	ldr	r3, [r7, #4]
 80203ec:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p_tx != NULL) &&
 80203f0:	429a      	cmp	r2, r3
 80203f2:	d9c5      	bls.n	8020380 <tcp_echoclient_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 80203f4:	bf00      	nop
 80203f6:	3710      	adds	r7, #16
 80203f8:	46bd      	mov	sp, r7
 80203fa:	bd80      	pop	{r7, pc}

080203fc <tcp_echoclient_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: tcp connection control block
  * @retval err_t: error code
  */
static err_t tcp_echoclient_poll(void *arg, struct tcp_pcb *tpcb)
{
 80203fc:	b580      	push	{r7, lr}
 80203fe:	b084      	sub	sp, #16
 8020400:	af00      	add	r7, sp, #0
 8020402:	6078      	str	r0, [r7, #4]
 8020404:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct echoclient *es;

  es = (struct echoclient*)arg;
 8020406:	687b      	ldr	r3, [r7, #4]
 8020408:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 802040a:	68bb      	ldr	r3, [r7, #8]
 802040c:	2b00      	cmp	r3, #0
 802040e:	d013      	beq.n	8020438 <tcp_echoclient_poll+0x3c>
  {
    if (es->p_tx != NULL)
 8020410:	68bb      	ldr	r3, [r7, #8]
 8020412:	689b      	ldr	r3, [r3, #8]
 8020414:	2b00      	cmp	r3, #0
 8020416:	d004      	beq.n	8020422 <tcp_echoclient_poll+0x26>
    {
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_echoclient_send(tpcb, es);
 8020418:	68b9      	ldr	r1, [r7, #8]
 802041a:	6838      	ldr	r0, [r7, #0]
 802041c:	f7ff ffa8 	bl	8020370 <tcp_echoclient_send>
 8020420:	e007      	b.n	8020432 <tcp_echoclient_poll+0x36>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8020422:	68bb      	ldr	r3, [r7, #8]
 8020424:	781b      	ldrb	r3, [r3, #0]
 8020426:	2b03      	cmp	r3, #3
 8020428:	d103      	bne.n	8020432 <tcp_echoclient_poll+0x36>
      {
        /* close tcp connection */
        tcp_echoclient_connection_close(tpcb, es);
 802042a:	68b9      	ldr	r1, [r7, #8]
 802042c:	6838      	ldr	r0, [r7, #0]
 802042e:	f000 f824 	bl	802047a <tcp_echoclient_connection_close>
      }
    }
    ret_err = ERR_OK;
 8020432:	2300      	movs	r3, #0
 8020434:	73fb      	strb	r3, [r7, #15]
 8020436:	e004      	b.n	8020442 <tcp_echoclient_poll+0x46>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8020438:	6838      	ldr	r0, [r7, #0]
 802043a:	f7f9 fe5d 	bl	801a0f8 <tcp_abort>
    ret_err = ERR_ABRT;
 802043e:	23f3      	movs	r3, #243	; 0xf3
 8020440:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8020442:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8020446:	4618      	mov	r0, r3
 8020448:	3710      	adds	r7, #16
 802044a:	46bd      	mov	sp, r7
 802044c:	bd80      	pop	{r7, pc}

0802044e <tcp_echoclient_sent>:
  * @param  tcp_pcb: tcp connection control block
  * @param  len: length of data sent
  * @retval err_t: returned error code
  */
static err_t tcp_echoclient_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 802044e:	b580      	push	{r7, lr}
 8020450:	b086      	sub	sp, #24
 8020452:	af00      	add	r7, sp, #0
 8020454:	60f8      	str	r0, [r7, #12]
 8020456:	60b9      	str	r1, [r7, #8]
 8020458:	4613      	mov	r3, r2
 802045a:	80fb      	strh	r3, [r7, #6]
  struct echoclient *es;

  LWIP_UNUSED_ARG(len);

  es = (struct echoclient *)arg;
 802045c:	68fb      	ldr	r3, [r7, #12]
 802045e:	617b      	str	r3, [r7, #20]

  if(es->p_tx != NULL)
 8020460:	697b      	ldr	r3, [r7, #20]
 8020462:	689b      	ldr	r3, [r3, #8]
 8020464:	2b00      	cmp	r3, #0
 8020466:	d003      	beq.n	8020470 <tcp_echoclient_sent+0x22>
  {
    /* still got pbufs to send */
    tcp_echoclient_send(tpcb, es);
 8020468:	6979      	ldr	r1, [r7, #20]
 802046a:	68b8      	ldr	r0, [r7, #8]
 802046c:	f7ff ff80 	bl	8020370 <tcp_echoclient_send>
  }

  return ERR_OK;
 8020470:	2300      	movs	r3, #0
}
 8020472:	4618      	mov	r0, r3
 8020474:	3718      	adds	r7, #24
 8020476:	46bd      	mov	sp, r7
 8020478:	bd80      	pop	{r7, pc}

0802047a <tcp_echoclient_connection_close>:
  * @param tpcb: tcp connection control block
  * @param es: pointer on echoclient structure
  * @retval None
  */
static void tcp_echoclient_connection_close(struct tcp_pcb *tpcb, struct echoclient * es )
{
 802047a:	b580      	push	{r7, lr}
 802047c:	b082      	sub	sp, #8
 802047e:	af00      	add	r7, sp, #0
 8020480:	6078      	str	r0, [r7, #4]
 8020482:	6039      	str	r1, [r7, #0]
  /* remove callbacks */
  tcp_recv(tpcb, NULL);
 8020484:	2100      	movs	r1, #0
 8020486:	6878      	ldr	r0, [r7, #4]
 8020488:	f7fa fe5a 	bl	801b140 <tcp_recv>
  tcp_sent(tpcb, NULL);
 802048c:	2100      	movs	r1, #0
 802048e:	6878      	ldr	r0, [r7, #4]
 8020490:	f7fa fe78 	bl	801b184 <tcp_sent>
  tcp_poll(tpcb, NULL,0);
 8020494:	2200      	movs	r2, #0
 8020496:	2100      	movs	r1, #0
 8020498:	6878      	ldr	r0, [r7, #4]
 802049a:	f7fa fe95 	bl	801b1c8 <tcp_poll>

  if (es != NULL)
 802049e:	683b      	ldr	r3, [r7, #0]
 80204a0:	2b00      	cmp	r3, #0
 80204a2:	d002      	beq.n	80204aa <tcp_echoclient_connection_close+0x30>
  {
    mem_free(es);
 80204a4:	6838      	ldr	r0, [r7, #0]
 80204a6:	f7f8 fac1 	bl	8018a2c <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 80204aa:	6878      	ldr	r0, [r7, #4]
 80204ac:	f7f9 fd3a 	bl	8019f24 <tcp_close>
}
 80204b0:	bf00      	nop
 80204b2:	3708      	adds	r7, #8
 80204b4:	46bd      	mov	sp, r7
 80204b6:	bd80      	pop	{r7, pc}

080204b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80204b8:	b580      	push	{r7, lr}
 80204ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80204bc:	2200      	movs	r2, #0
 80204be:	4913      	ldr	r1, [pc, #76]	; (802050c <MX_USB_DEVICE_Init+0x54>)
 80204c0:	4813      	ldr	r0, [pc, #76]	; (8020510 <MX_USB_DEVICE_Init+0x58>)
 80204c2:	f7f1 fd90 	bl	8011fe6 <USBD_Init>
 80204c6:	4603      	mov	r3, r0
 80204c8:	2b00      	cmp	r3, #0
 80204ca:	d001      	beq.n	80204d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80204cc:	f7e0 fb68 	bl	8000ba0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80204d0:	4910      	ldr	r1, [pc, #64]	; (8020514 <MX_USB_DEVICE_Init+0x5c>)
 80204d2:	480f      	ldr	r0, [pc, #60]	; (8020510 <MX_USB_DEVICE_Init+0x58>)
 80204d4:	f7f1 fdb7 	bl	8012046 <USBD_RegisterClass>
 80204d8:	4603      	mov	r3, r0
 80204da:	2b00      	cmp	r3, #0
 80204dc:	d001      	beq.n	80204e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80204de:	f7e0 fb5f 	bl	8000ba0 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80204e2:	490d      	ldr	r1, [pc, #52]	; (8020518 <MX_USB_DEVICE_Init+0x60>)
 80204e4:	480a      	ldr	r0, [pc, #40]	; (8020510 <MX_USB_DEVICE_Init+0x58>)
 80204e6:	f7f0 f861 	bl	80105ac <USBD_MSC_RegisterStorage>
 80204ea:	4603      	mov	r3, r0
 80204ec:	2b00      	cmp	r3, #0
 80204ee:	d001      	beq.n	80204f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80204f0:	f7e0 fb56 	bl	8000ba0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80204f4:	4806      	ldr	r0, [pc, #24]	; (8020510 <MX_USB_DEVICE_Init+0x58>)
 80204f6:	f7f1 fddc 	bl	80120b2 <USBD_Start>
 80204fa:	4603      	mov	r3, r0
 80204fc:	2b00      	cmp	r3, #0
 80204fe:	d001      	beq.n	8020504 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8020500:	f7e0 fb4e 	bl	8000ba0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8020504:	f7e4 face 	bl	8004aa4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8020508:	bf00      	nop
 802050a:	bd80      	pop	{r7, pc}
 802050c:	240000c4 	.word	0x240000c4
 8020510:	2401b368 	.word	0x2401b368
 8020514:	24000010 	.word	0x24000010
 8020518:	24000114 	.word	0x24000114

0802051c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802051c:	b480      	push	{r7}
 802051e:	b083      	sub	sp, #12
 8020520:	af00      	add	r7, sp, #0
 8020522:	4603      	mov	r3, r0
 8020524:	6039      	str	r1, [r7, #0]
 8020526:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8020528:	683b      	ldr	r3, [r7, #0]
 802052a:	2212      	movs	r2, #18
 802052c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 802052e:	4b03      	ldr	r3, [pc, #12]	; (802053c <USBD_FS_DeviceDescriptor+0x20>)
}
 8020530:	4618      	mov	r0, r3
 8020532:	370c      	adds	r7, #12
 8020534:	46bd      	mov	sp, r7
 8020536:	f85d 7b04 	ldr.w	r7, [sp], #4
 802053a:	4770      	bx	lr
 802053c:	240000e0 	.word	0x240000e0

08020540 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8020540:	b480      	push	{r7}
 8020542:	b083      	sub	sp, #12
 8020544:	af00      	add	r7, sp, #0
 8020546:	4603      	mov	r3, r0
 8020548:	6039      	str	r1, [r7, #0]
 802054a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 802054c:	683b      	ldr	r3, [r7, #0]
 802054e:	2204      	movs	r2, #4
 8020550:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8020552:	4b03      	ldr	r3, [pc, #12]	; (8020560 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8020554:	4618      	mov	r0, r3
 8020556:	370c      	adds	r7, #12
 8020558:	46bd      	mov	sp, r7
 802055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802055e:	4770      	bx	lr
 8020560:	240000f4 	.word	0x240000f4

08020564 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8020564:	b580      	push	{r7, lr}
 8020566:	b082      	sub	sp, #8
 8020568:	af00      	add	r7, sp, #0
 802056a:	4603      	mov	r3, r0
 802056c:	6039      	str	r1, [r7, #0]
 802056e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8020570:	79fb      	ldrb	r3, [r7, #7]
 8020572:	2b00      	cmp	r3, #0
 8020574:	d105      	bne.n	8020582 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8020576:	683a      	ldr	r2, [r7, #0]
 8020578:	4907      	ldr	r1, [pc, #28]	; (8020598 <USBD_FS_ProductStrDescriptor+0x34>)
 802057a:	4808      	ldr	r0, [pc, #32]	; (802059c <USBD_FS_ProductStrDescriptor+0x38>)
 802057c:	f7f2 ff46 	bl	801340c <USBD_GetString>
 8020580:	e004      	b.n	802058c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8020582:	683a      	ldr	r2, [r7, #0]
 8020584:	4904      	ldr	r1, [pc, #16]	; (8020598 <USBD_FS_ProductStrDescriptor+0x34>)
 8020586:	4805      	ldr	r0, [pc, #20]	; (802059c <USBD_FS_ProductStrDescriptor+0x38>)
 8020588:	f7f2 ff40 	bl	801340c <USBD_GetString>
  }
  return USBD_StrDesc;
 802058c:	4b02      	ldr	r3, [pc, #8]	; (8020598 <USBD_FS_ProductStrDescriptor+0x34>)
}
 802058e:	4618      	mov	r0, r3
 8020590:	3708      	adds	r7, #8
 8020592:	46bd      	mov	sp, r7
 8020594:	bd80      	pop	{r7, pc}
 8020596:	bf00      	nop
 8020598:	2401b644 	.word	0x2401b644
 802059c:	08025cd8 	.word	0x08025cd8

080205a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80205a0:	b580      	push	{r7, lr}
 80205a2:	b082      	sub	sp, #8
 80205a4:	af00      	add	r7, sp, #0
 80205a6:	4603      	mov	r3, r0
 80205a8:	6039      	str	r1, [r7, #0]
 80205aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80205ac:	683a      	ldr	r2, [r7, #0]
 80205ae:	4904      	ldr	r1, [pc, #16]	; (80205c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80205b0:	4804      	ldr	r0, [pc, #16]	; (80205c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80205b2:	f7f2 ff2b 	bl	801340c <USBD_GetString>
  return USBD_StrDesc;
 80205b6:	4b02      	ldr	r3, [pc, #8]	; (80205c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80205b8:	4618      	mov	r0, r3
 80205ba:	3708      	adds	r7, #8
 80205bc:	46bd      	mov	sp, r7
 80205be:	bd80      	pop	{r7, pc}
 80205c0:	2401b644 	.word	0x2401b644
 80205c4:	08025cec 	.word	0x08025cec

080205c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80205c8:	b580      	push	{r7, lr}
 80205ca:	b082      	sub	sp, #8
 80205cc:	af00      	add	r7, sp, #0
 80205ce:	4603      	mov	r3, r0
 80205d0:	6039      	str	r1, [r7, #0]
 80205d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80205d4:	683b      	ldr	r3, [r7, #0]
 80205d6:	221a      	movs	r2, #26
 80205d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80205da:	f000 f843 	bl	8020664 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80205de:	4b02      	ldr	r3, [pc, #8]	; (80205e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80205e0:	4618      	mov	r0, r3
 80205e2:	3708      	adds	r7, #8
 80205e4:	46bd      	mov	sp, r7
 80205e6:	bd80      	pop	{r7, pc}
 80205e8:	240000f8 	.word	0x240000f8

080205ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80205ec:	b580      	push	{r7, lr}
 80205ee:	b082      	sub	sp, #8
 80205f0:	af00      	add	r7, sp, #0
 80205f2:	4603      	mov	r3, r0
 80205f4:	6039      	str	r1, [r7, #0]
 80205f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80205f8:	79fb      	ldrb	r3, [r7, #7]
 80205fa:	2b00      	cmp	r3, #0
 80205fc:	d105      	bne.n	802060a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80205fe:	683a      	ldr	r2, [r7, #0]
 8020600:	4907      	ldr	r1, [pc, #28]	; (8020620 <USBD_FS_ConfigStrDescriptor+0x34>)
 8020602:	4808      	ldr	r0, [pc, #32]	; (8020624 <USBD_FS_ConfigStrDescriptor+0x38>)
 8020604:	f7f2 ff02 	bl	801340c <USBD_GetString>
 8020608:	e004      	b.n	8020614 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802060a:	683a      	ldr	r2, [r7, #0]
 802060c:	4904      	ldr	r1, [pc, #16]	; (8020620 <USBD_FS_ConfigStrDescriptor+0x34>)
 802060e:	4805      	ldr	r0, [pc, #20]	; (8020624 <USBD_FS_ConfigStrDescriptor+0x38>)
 8020610:	f7f2 fefc 	bl	801340c <USBD_GetString>
  }
  return USBD_StrDesc;
 8020614:	4b02      	ldr	r3, [pc, #8]	; (8020620 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8020616:	4618      	mov	r0, r3
 8020618:	3708      	adds	r7, #8
 802061a:	46bd      	mov	sp, r7
 802061c:	bd80      	pop	{r7, pc}
 802061e:	bf00      	nop
 8020620:	2401b644 	.word	0x2401b644
 8020624:	08025d00 	.word	0x08025d00

08020628 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8020628:	b580      	push	{r7, lr}
 802062a:	b082      	sub	sp, #8
 802062c:	af00      	add	r7, sp, #0
 802062e:	4603      	mov	r3, r0
 8020630:	6039      	str	r1, [r7, #0]
 8020632:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8020634:	79fb      	ldrb	r3, [r7, #7]
 8020636:	2b00      	cmp	r3, #0
 8020638:	d105      	bne.n	8020646 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 802063a:	683a      	ldr	r2, [r7, #0]
 802063c:	4907      	ldr	r1, [pc, #28]	; (802065c <USBD_FS_InterfaceStrDescriptor+0x34>)
 802063e:	4808      	ldr	r0, [pc, #32]	; (8020660 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8020640:	f7f2 fee4 	bl	801340c <USBD_GetString>
 8020644:	e004      	b.n	8020650 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8020646:	683a      	ldr	r2, [r7, #0]
 8020648:	4904      	ldr	r1, [pc, #16]	; (802065c <USBD_FS_InterfaceStrDescriptor+0x34>)
 802064a:	4805      	ldr	r0, [pc, #20]	; (8020660 <USBD_FS_InterfaceStrDescriptor+0x38>)
 802064c:	f7f2 fede 	bl	801340c <USBD_GetString>
  }
  return USBD_StrDesc;
 8020650:	4b02      	ldr	r3, [pc, #8]	; (802065c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8020652:	4618      	mov	r0, r3
 8020654:	3708      	adds	r7, #8
 8020656:	46bd      	mov	sp, r7
 8020658:	bd80      	pop	{r7, pc}
 802065a:	bf00      	nop
 802065c:	2401b644 	.word	0x2401b644
 8020660:	08025d0c 	.word	0x08025d0c

08020664 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8020664:	b580      	push	{r7, lr}
 8020666:	b084      	sub	sp, #16
 8020668:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 802066a:	4b0f      	ldr	r3, [pc, #60]	; (80206a8 <Get_SerialNum+0x44>)
 802066c:	681b      	ldr	r3, [r3, #0]
 802066e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8020670:	4b0e      	ldr	r3, [pc, #56]	; (80206ac <Get_SerialNum+0x48>)
 8020672:	681b      	ldr	r3, [r3, #0]
 8020674:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8020676:	4b0e      	ldr	r3, [pc, #56]	; (80206b0 <Get_SerialNum+0x4c>)
 8020678:	681b      	ldr	r3, [r3, #0]
 802067a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 802067c:	68fa      	ldr	r2, [r7, #12]
 802067e:	687b      	ldr	r3, [r7, #4]
 8020680:	4413      	add	r3, r2
 8020682:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8020684:	68fb      	ldr	r3, [r7, #12]
 8020686:	2b00      	cmp	r3, #0
 8020688:	d009      	beq.n	802069e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 802068a:	2208      	movs	r2, #8
 802068c:	4909      	ldr	r1, [pc, #36]	; (80206b4 <Get_SerialNum+0x50>)
 802068e:	68f8      	ldr	r0, [r7, #12]
 8020690:	f000 f814 	bl	80206bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8020694:	2204      	movs	r2, #4
 8020696:	4908      	ldr	r1, [pc, #32]	; (80206b8 <Get_SerialNum+0x54>)
 8020698:	68b8      	ldr	r0, [r7, #8]
 802069a:	f000 f80f 	bl	80206bc <IntToUnicode>
  }
}
 802069e:	bf00      	nop
 80206a0:	3710      	adds	r7, #16
 80206a2:	46bd      	mov	sp, r7
 80206a4:	bd80      	pop	{r7, pc}
 80206a6:	bf00      	nop
 80206a8:	1ff1e800 	.word	0x1ff1e800
 80206ac:	1ff1e804 	.word	0x1ff1e804
 80206b0:	1ff1e808 	.word	0x1ff1e808
 80206b4:	240000fa 	.word	0x240000fa
 80206b8:	2400010a 	.word	0x2400010a

080206bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80206bc:	b480      	push	{r7}
 80206be:	b087      	sub	sp, #28
 80206c0:	af00      	add	r7, sp, #0
 80206c2:	60f8      	str	r0, [r7, #12]
 80206c4:	60b9      	str	r1, [r7, #8]
 80206c6:	4613      	mov	r3, r2
 80206c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80206ca:	2300      	movs	r3, #0
 80206cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80206ce:	2300      	movs	r3, #0
 80206d0:	75fb      	strb	r3, [r7, #23]
 80206d2:	e027      	b.n	8020724 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80206d4:	68fb      	ldr	r3, [r7, #12]
 80206d6:	0f1b      	lsrs	r3, r3, #28
 80206d8:	2b09      	cmp	r3, #9
 80206da:	d80b      	bhi.n	80206f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80206dc:	68fb      	ldr	r3, [r7, #12]
 80206de:	0f1b      	lsrs	r3, r3, #28
 80206e0:	b2da      	uxtb	r2, r3
 80206e2:	7dfb      	ldrb	r3, [r7, #23]
 80206e4:	005b      	lsls	r3, r3, #1
 80206e6:	4619      	mov	r1, r3
 80206e8:	68bb      	ldr	r3, [r7, #8]
 80206ea:	440b      	add	r3, r1
 80206ec:	3230      	adds	r2, #48	; 0x30
 80206ee:	b2d2      	uxtb	r2, r2
 80206f0:	701a      	strb	r2, [r3, #0]
 80206f2:	e00a      	b.n	802070a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80206f4:	68fb      	ldr	r3, [r7, #12]
 80206f6:	0f1b      	lsrs	r3, r3, #28
 80206f8:	b2da      	uxtb	r2, r3
 80206fa:	7dfb      	ldrb	r3, [r7, #23]
 80206fc:	005b      	lsls	r3, r3, #1
 80206fe:	4619      	mov	r1, r3
 8020700:	68bb      	ldr	r3, [r7, #8]
 8020702:	440b      	add	r3, r1
 8020704:	3237      	adds	r2, #55	; 0x37
 8020706:	b2d2      	uxtb	r2, r2
 8020708:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 802070a:	68fb      	ldr	r3, [r7, #12]
 802070c:	011b      	lsls	r3, r3, #4
 802070e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8020710:	7dfb      	ldrb	r3, [r7, #23]
 8020712:	005b      	lsls	r3, r3, #1
 8020714:	3301      	adds	r3, #1
 8020716:	68ba      	ldr	r2, [r7, #8]
 8020718:	4413      	add	r3, r2
 802071a:	2200      	movs	r2, #0
 802071c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 802071e:	7dfb      	ldrb	r3, [r7, #23]
 8020720:	3301      	adds	r3, #1
 8020722:	75fb      	strb	r3, [r7, #23]
 8020724:	7dfa      	ldrb	r2, [r7, #23]
 8020726:	79fb      	ldrb	r3, [r7, #7]
 8020728:	429a      	cmp	r2, r3
 802072a:	d3d3      	bcc.n	80206d4 <IntToUnicode+0x18>
  }
}
 802072c:	bf00      	nop
 802072e:	bf00      	nop
 8020730:	371c      	adds	r7, #28
 8020732:	46bd      	mov	sp, r7
 8020734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020738:	4770      	bx	lr

0802073a <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 802073a:	b480      	push	{r7}
 802073c:	b083      	sub	sp, #12
 802073e:	af00      	add	r7, sp, #0
 8020740:	4603      	mov	r3, r0
 8020742:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 8020744:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8020746:	4618      	mov	r0, r3
 8020748:	370c      	adds	r7, #12
 802074a:	46bd      	mov	sp, r7
 802074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020750:	4770      	bx	lr
	...

08020754 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8020754:	b580      	push	{r7, lr}
 8020756:	b08e      	sub	sp, #56	; 0x38
 8020758:	af00      	add	r7, sp, #0
 802075a:	4603      	mov	r3, r0
 802075c:	60b9      	str	r1, [r7, #8]
 802075e:	607a      	str	r2, [r7, #4]
 8020760:	73fb      	strb	r3, [r7, #15]
//
//  *block_num  = STORAGE_BLK_NBR;
//  *block_size = STORAGE_BLK_SIZ;

	  HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 8020762:	23ff      	movs	r3, #255	; 0xff
 8020764:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd1, &info);
 8020768:	f107 0310 	add.w	r3, r7, #16
 802076c:	4619      	mov	r1, r3
 802076e:	480a      	ldr	r0, [pc, #40]	; (8020798 <STORAGE_GetCapacity_FS+0x44>)
 8020770:	f7e9 fa4c 	bl	8009c0c <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 8020774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020776:	1e5a      	subs	r2, r3, #1
 8020778:	68bb      	ldr	r3, [r7, #8]
 802077a:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 802077c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802077e:	b29a      	uxth	r2, r3
 8020780:	687b      	ldr	r3, [r7, #4]
 8020782:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 8020784:	2300      	movs	r3, #0
 8020786:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 802078a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  return (USBD_OK);
  /* USER CODE END 3 */
}
 802078e:	4618      	mov	r0, r3
 8020790:	3738      	adds	r7, #56	; 0x38
 8020792:	46bd      	mov	sp, r7
 8020794:	bd80      	pop	{r7, pc}
 8020796:	bf00      	nop
 8020798:	2401a240 	.word	0x2401a240

0802079c <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 802079c:	b480      	push	{r7}
 802079e:	b083      	sub	sp, #12
 80207a0:	af00      	add	r7, sp, #0
 80207a2:	4603      	mov	r3, r0
 80207a4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 80207a6:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80207a8:	4618      	mov	r0, r3
 80207aa:	370c      	adds	r7, #12
 80207ac:	46bd      	mov	sp, r7
 80207ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207b2:	4770      	bx	lr

080207b4 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80207b4:	b480      	push	{r7}
 80207b6:	b083      	sub	sp, #12
 80207b8:	af00      	add	r7, sp, #0
 80207ba:	4603      	mov	r3, r0
 80207bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 80207be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80207c0:	4618      	mov	r0, r3
 80207c2:	370c      	adds	r7, #12
 80207c4:	46bd      	mov	sp, r7
 80207c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207ca:	4770      	bx	lr

080207cc <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80207cc:	b580      	push	{r7, lr}
 80207ce:	b088      	sub	sp, #32
 80207d0:	af02      	add	r7, sp, #8
 80207d2:	60b9      	str	r1, [r7, #8]
 80207d4:	607a      	str	r2, [r7, #4]
 80207d6:	461a      	mov	r2, r3
 80207d8:	4603      	mov	r3, r0
 80207da:	73fb      	strb	r3, [r7, #15]
 80207dc:	4613      	mov	r3, r2
 80207de:	81bb      	strh	r3, [r7, #12]
//  UNUSED(buf);
//  UNUSED(blk_addr);
//  UNUSED(blk_len);
  //memcpy(buf, &buffer[blk_addr*STORAGE_BLK_SIZ], blk_len*STORAGE_BLK_SIZ);

  int8_t ret = -1;
 80207e0:	23ff      	movs	r3, #255	; 0xff
 80207e2:	75fb      	strb	r3, [r7, #23]

 HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 80207e4:	89bb      	ldrh	r3, [r7, #12]
 80207e6:	f04f 32ff 	mov.w	r2, #4294967295
 80207ea:	9200      	str	r2, [sp, #0]
 80207ec:	687a      	ldr	r2, [r7, #4]
 80207ee:	68b9      	ldr	r1, [r7, #8]
 80207f0:	4808      	ldr	r0, [pc, #32]	; (8020814 <STORAGE_Read_FS+0x48>)
 80207f2:	f7e8 facf 	bl	8008d94 <HAL_SD_ReadBlocks>

 /* Wait until SD card is ready to use for new operation */
 while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 80207f6:	bf00      	nop
 80207f8:	4806      	ldr	r0, [pc, #24]	; (8020814 <STORAGE_Read_FS+0x48>)
 80207fa:	f7e9 fb45 	bl	8009e88 <HAL_SD_GetCardState>
 80207fe:	4603      	mov	r3, r0
 8020800:	2b04      	cmp	r3, #4
 8020802:	d1f9      	bne.n	80207f8 <STORAGE_Read_FS+0x2c>
 ret = 0;
 8020804:	2300      	movs	r3, #0
 8020806:	75fb      	strb	r3, [r7, #23]
 return ret;
 8020808:	f997 3017 	ldrsb.w	r3, [r7, #23]
  //return (USBD_OK);
  /* USER CODE END 6 */
}
 802080c:	4618      	mov	r0, r3
 802080e:	3718      	adds	r7, #24
 8020810:	46bd      	mov	sp, r7
 8020812:	bd80      	pop	{r7, pc}
 8020814:	2401a240 	.word	0x2401a240

08020818 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8020818:	b580      	push	{r7, lr}
 802081a:	b088      	sub	sp, #32
 802081c:	af02      	add	r7, sp, #8
 802081e:	60b9      	str	r1, [r7, #8]
 8020820:	607a      	str	r2, [r7, #4]
 8020822:	461a      	mov	r2, r3
 8020824:	4603      	mov	r3, r0
 8020826:	73fb      	strb	r3, [r7, #15]
 8020828:	4613      	mov	r3, r2
 802082a:	81bb      	strh	r3, [r7, #12]
//  UNUSED(buf);
//  UNUSED(blk_addr);
//  UNUSED(blk_len);
//  memcpy(&buffer[blk_addr*STORAGE_BLK_SIZ], buf, blk_len*STORAGE_BLK_SIZ);
//  return (USBD_OK);
	  int8_t ret = -1;
 802082c:	23ff      	movs	r3, #255	; 0xff
 802082e:	75fb      	strb	r3, [r7, #23]

	   HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8020830:	89bb      	ldrh	r3, [r7, #12]
 8020832:	f04f 32ff 	mov.w	r2, #4294967295
 8020836:	9200      	str	r2, [sp, #0]
 8020838:	687a      	ldr	r2, [r7, #4]
 802083a:	68b9      	ldr	r1, [r7, #8]
 802083c:	4808      	ldr	r0, [pc, #32]	; (8020860 <STORAGE_Write_FS+0x48>)
 802083e:	f7e8 fc33 	bl	80090a8 <HAL_SD_WriteBlocks>


	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8020842:	bf00      	nop
 8020844:	4806      	ldr	r0, [pc, #24]	; (8020860 <STORAGE_Write_FS+0x48>)
 8020846:	f7e9 fb1f 	bl	8009e88 <HAL_SD_GetCardState>
 802084a:	4603      	mov	r3, r0
 802084c:	2b04      	cmp	r3, #4
 802084e:	d1f9      	bne.n	8020844 <STORAGE_Write_FS+0x2c>
	  ret = 0;
 8020850:	2300      	movs	r3, #0
 8020852:	75fb      	strb	r3, [r7, #23]
	  return ret;
 8020854:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 8020858:	4618      	mov	r0, r3
 802085a:	3718      	adds	r7, #24
 802085c:	46bd      	mov	sp, r7
 802085e:	bd80      	pop	{r7, pc}
 8020860:	2401a240 	.word	0x2401a240

08020864 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8020864:	b480      	push	{r7}
 8020866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8020868:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 802086a:	4618      	mov	r0, r3
 802086c:	46bd      	mov	sp, r7
 802086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020872:	4770      	bx	lr

08020874 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8020874:	b580      	push	{r7, lr}
 8020876:	b0ba      	sub	sp, #232	; 0xe8
 8020878:	af00      	add	r7, sp, #0
 802087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802087c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8020880:	2200      	movs	r2, #0
 8020882:	601a      	str	r2, [r3, #0]
 8020884:	605a      	str	r2, [r3, #4]
 8020886:	609a      	str	r2, [r3, #8]
 8020888:	60da      	str	r2, [r3, #12]
 802088a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 802088c:	f107 0314 	add.w	r3, r7, #20
 8020890:	22c0      	movs	r2, #192	; 0xc0
 8020892:	2100      	movs	r1, #0
 8020894:	4618      	mov	r0, r3
 8020896:	f000 fcb7 	bl	8021208 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 802089a:	687b      	ldr	r3, [r7, #4]
 802089c:	681b      	ldr	r3, [r3, #0]
 802089e:	4a33      	ldr	r2, [pc, #204]	; (802096c <HAL_PCD_MspInit+0xf8>)
 80208a0:	4293      	cmp	r3, r2
 80208a2:	d15e      	bne.n	8020962 <HAL_PCD_MspInit+0xee>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80208a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80208a8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80208aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80208ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80208b2:	f107 0314 	add.w	r3, r7, #20
 80208b6:	4618      	mov	r0, r3
 80208b8:	f7e5 fb16 	bl	8005ee8 <HAL_RCCEx_PeriphCLKConfig>
 80208bc:	4603      	mov	r3, r0
 80208be:	2b00      	cmp	r3, #0
 80208c0:	d001      	beq.n	80208c6 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80208c2:	f7e0 f96d 	bl	8000ba0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80208c6:	f7e4 f8ed 	bl	8004aa4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80208ca:	4b29      	ldr	r3, [pc, #164]	; (8020970 <HAL_PCD_MspInit+0xfc>)
 80208cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80208d0:	4a27      	ldr	r2, [pc, #156]	; (8020970 <HAL_PCD_MspInit+0xfc>)
 80208d2:	f043 0301 	orr.w	r3, r3, #1
 80208d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80208da:	4b25      	ldr	r3, [pc, #148]	; (8020970 <HAL_PCD_MspInit+0xfc>)
 80208dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80208e0:	f003 0301 	and.w	r3, r3, #1
 80208e4:	613b      	str	r3, [r7, #16]
 80208e6:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 80208e8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80208ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80208f0:	2302      	movs	r3, #2
 80208f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80208f6:	2300      	movs	r3, #0
 80208f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80208fc:	2300      	movs	r3, #0
 80208fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8020902:	230a      	movs	r3, #10
 8020904:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020908:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 802090c:	4619      	mov	r1, r3
 802090e:	4819      	ldr	r0, [pc, #100]	; (8020974 <HAL_PCD_MspInit+0x100>)
 8020910:	f7e2 fa0c 	bl	8002d2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8020914:	4b16      	ldr	r3, [pc, #88]	; (8020970 <HAL_PCD_MspInit+0xfc>)
 8020916:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 802091a:	4a15      	ldr	r2, [pc, #84]	; (8020970 <HAL_PCD_MspInit+0xfc>)
 802091c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8020920:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8020924:	4b12      	ldr	r3, [pc, #72]	; (8020970 <HAL_PCD_MspInit+0xfc>)
 8020926:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 802092a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802092e:	60fb      	str	r3, [r7, #12]
 8020930:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 8020932:	2200      	movs	r2, #0
 8020934:	2100      	movs	r1, #0
 8020936:	2062      	movs	r0, #98	; 0x62
 8020938:	f7e0 fcfa 	bl	8001330 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 802093c:	2062      	movs	r0, #98	; 0x62
 802093e:	f7e0 fd11 	bl	8001364 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_EP1_IN_IRQn, 0, 0);
 8020942:	2200      	movs	r2, #0
 8020944:	2100      	movs	r1, #0
 8020946:	2063      	movs	r0, #99	; 0x63
 8020948:	f7e0 fcf2 	bl	8001330 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_IN_IRQn);
 802094c:	2063      	movs	r0, #99	; 0x63
 802094e:	f7e0 fd09 	bl	8001364 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8020952:	2200      	movs	r2, #0
 8020954:	2100      	movs	r1, #0
 8020956:	2065      	movs	r0, #101	; 0x65
 8020958:	f7e0 fcea 	bl	8001330 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 802095c:	2065      	movs	r0, #101	; 0x65
 802095e:	f7e0 fd01 	bl	8001364 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8020962:	bf00      	nop
 8020964:	37e8      	adds	r7, #232	; 0xe8
 8020966:	46bd      	mov	sp, r7
 8020968:	bd80      	pop	{r7, pc}
 802096a:	bf00      	nop
 802096c:	40080000 	.word	0x40080000
 8020970:	58024400 	.word	0x58024400
 8020974:	58020000 	.word	0x58020000

08020978 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020978:	b580      	push	{r7, lr}
 802097a:	b082      	sub	sp, #8
 802097c:	af00      	add	r7, sp, #0
 802097e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8020980:	687b      	ldr	r3, [r7, #4]
 8020982:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8020986:	687b      	ldr	r3, [r7, #4]
 8020988:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 802098c:	4619      	mov	r1, r3
 802098e:	4610      	mov	r0, r2
 8020990:	f7f1 fbdc 	bl	801214c <USBD_LL_SetupStage>
}
 8020994:	bf00      	nop
 8020996:	3708      	adds	r7, #8
 8020998:	46bd      	mov	sp, r7
 802099a:	bd80      	pop	{r7, pc}

0802099c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802099c:	b580      	push	{r7, lr}
 802099e:	b082      	sub	sp, #8
 80209a0:	af00      	add	r7, sp, #0
 80209a2:	6078      	str	r0, [r7, #4]
 80209a4:	460b      	mov	r3, r1
 80209a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80209a8:	687b      	ldr	r3, [r7, #4]
 80209aa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80209ae:	78fa      	ldrb	r2, [r7, #3]
 80209b0:	6879      	ldr	r1, [r7, #4]
 80209b2:	4613      	mov	r3, r2
 80209b4:	00db      	lsls	r3, r3, #3
 80209b6:	4413      	add	r3, r2
 80209b8:	009b      	lsls	r3, r3, #2
 80209ba:	440b      	add	r3, r1
 80209bc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80209c0:	681a      	ldr	r2, [r3, #0]
 80209c2:	78fb      	ldrb	r3, [r7, #3]
 80209c4:	4619      	mov	r1, r3
 80209c6:	f7f1 fc16 	bl	80121f6 <USBD_LL_DataOutStage>
}
 80209ca:	bf00      	nop
 80209cc:	3708      	adds	r7, #8
 80209ce:	46bd      	mov	sp, r7
 80209d0:	bd80      	pop	{r7, pc}

080209d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80209d2:	b580      	push	{r7, lr}
 80209d4:	b082      	sub	sp, #8
 80209d6:	af00      	add	r7, sp, #0
 80209d8:	6078      	str	r0, [r7, #4]
 80209da:	460b      	mov	r3, r1
 80209dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80209de:	687b      	ldr	r3, [r7, #4]
 80209e0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80209e4:	78fa      	ldrb	r2, [r7, #3]
 80209e6:	6879      	ldr	r1, [r7, #4]
 80209e8:	4613      	mov	r3, r2
 80209ea:	00db      	lsls	r3, r3, #3
 80209ec:	4413      	add	r3, r2
 80209ee:	009b      	lsls	r3, r3, #2
 80209f0:	440b      	add	r3, r1
 80209f2:	334c      	adds	r3, #76	; 0x4c
 80209f4:	681a      	ldr	r2, [r3, #0]
 80209f6:	78fb      	ldrb	r3, [r7, #3]
 80209f8:	4619      	mov	r1, r3
 80209fa:	f7f1 fcaf 	bl	801235c <USBD_LL_DataInStage>
}
 80209fe:	bf00      	nop
 8020a00:	3708      	adds	r7, #8
 8020a02:	46bd      	mov	sp, r7
 8020a04:	bd80      	pop	{r7, pc}

08020a06 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020a06:	b580      	push	{r7, lr}
 8020a08:	b082      	sub	sp, #8
 8020a0a:	af00      	add	r7, sp, #0
 8020a0c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8020a0e:	687b      	ldr	r3, [r7, #4]
 8020a10:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8020a14:	4618      	mov	r0, r3
 8020a16:	f7f1 fde3 	bl	80125e0 <USBD_LL_SOF>
}
 8020a1a:	bf00      	nop
 8020a1c:	3708      	adds	r7, #8
 8020a1e:	46bd      	mov	sp, r7
 8020a20:	bd80      	pop	{r7, pc}

08020a22 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020a22:	b580      	push	{r7, lr}
 8020a24:	b084      	sub	sp, #16
 8020a26:	af00      	add	r7, sp, #0
 8020a28:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8020a2a:	2301      	movs	r3, #1
 8020a2c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8020a2e:	687b      	ldr	r3, [r7, #4]
 8020a30:	68db      	ldr	r3, [r3, #12]
 8020a32:	2b00      	cmp	r3, #0
 8020a34:	d102      	bne.n	8020a3c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8020a36:	2300      	movs	r3, #0
 8020a38:	73fb      	strb	r3, [r7, #15]
 8020a3a:	e008      	b.n	8020a4e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8020a3c:	687b      	ldr	r3, [r7, #4]
 8020a3e:	68db      	ldr	r3, [r3, #12]
 8020a40:	2b02      	cmp	r3, #2
 8020a42:	d102      	bne.n	8020a4a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8020a44:	2301      	movs	r3, #1
 8020a46:	73fb      	strb	r3, [r7, #15]
 8020a48:	e001      	b.n	8020a4e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8020a4a:	f7e0 f8a9 	bl	8000ba0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8020a4e:	687b      	ldr	r3, [r7, #4]
 8020a50:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8020a54:	7bfa      	ldrb	r2, [r7, #15]
 8020a56:	4611      	mov	r1, r2
 8020a58:	4618      	mov	r0, r3
 8020a5a:	f7f1 fd83 	bl	8012564 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8020a5e:	687b      	ldr	r3, [r7, #4]
 8020a60:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8020a64:	4618      	mov	r0, r3
 8020a66:	f7f1 fd2b 	bl	80124c0 <USBD_LL_Reset>
}
 8020a6a:	bf00      	nop
 8020a6c:	3710      	adds	r7, #16
 8020a6e:	46bd      	mov	sp, r7
 8020a70:	bd80      	pop	{r7, pc}
	...

08020a74 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020a74:	b580      	push	{r7, lr}
 8020a76:	b082      	sub	sp, #8
 8020a78:	af00      	add	r7, sp, #0
 8020a7a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8020a7c:	687b      	ldr	r3, [r7, #4]
 8020a7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8020a82:	4618      	mov	r0, r3
 8020a84:	f7f1 fd7e 	bl	8012584 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8020a88:	687b      	ldr	r3, [r7, #4]
 8020a8a:	681b      	ldr	r3, [r3, #0]
 8020a8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8020a90:	681b      	ldr	r3, [r3, #0]
 8020a92:	687a      	ldr	r2, [r7, #4]
 8020a94:	6812      	ldr	r2, [r2, #0]
 8020a96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8020a9a:	f043 0301 	orr.w	r3, r3, #1
 8020a9e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8020aa0:	687b      	ldr	r3, [r7, #4]
 8020aa2:	6a1b      	ldr	r3, [r3, #32]
 8020aa4:	2b00      	cmp	r3, #0
 8020aa6:	d005      	beq.n	8020ab4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8020aa8:	4b04      	ldr	r3, [pc, #16]	; (8020abc <HAL_PCD_SuspendCallback+0x48>)
 8020aaa:	691b      	ldr	r3, [r3, #16]
 8020aac:	4a03      	ldr	r2, [pc, #12]	; (8020abc <HAL_PCD_SuspendCallback+0x48>)
 8020aae:	f043 0306 	orr.w	r3, r3, #6
 8020ab2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8020ab4:	bf00      	nop
 8020ab6:	3708      	adds	r7, #8
 8020ab8:	46bd      	mov	sp, r7
 8020aba:	bd80      	pop	{r7, pc}
 8020abc:	e000ed00 	.word	0xe000ed00

08020ac0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020ac0:	b580      	push	{r7, lr}
 8020ac2:	b082      	sub	sp, #8
 8020ac4:	af00      	add	r7, sp, #0
 8020ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8020ac8:	687b      	ldr	r3, [r7, #4]
 8020aca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8020ace:	4618      	mov	r0, r3
 8020ad0:	f7f1 fd6e 	bl	80125b0 <USBD_LL_Resume>
}
 8020ad4:	bf00      	nop
 8020ad6:	3708      	adds	r7, #8
 8020ad8:	46bd      	mov	sp, r7
 8020ada:	bd80      	pop	{r7, pc}

08020adc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020adc:	b580      	push	{r7, lr}
 8020ade:	b082      	sub	sp, #8
 8020ae0:	af00      	add	r7, sp, #0
 8020ae2:	6078      	str	r0, [r7, #4]
 8020ae4:	460b      	mov	r3, r1
 8020ae6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8020ae8:	687b      	ldr	r3, [r7, #4]
 8020aea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8020aee:	78fa      	ldrb	r2, [r7, #3]
 8020af0:	4611      	mov	r1, r2
 8020af2:	4618      	mov	r0, r3
 8020af4:	f7f1 fdc6 	bl	8012684 <USBD_LL_IsoOUTIncomplete>
}
 8020af8:	bf00      	nop
 8020afa:	3708      	adds	r7, #8
 8020afc:	46bd      	mov	sp, r7
 8020afe:	bd80      	pop	{r7, pc}

08020b00 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020b00:	b580      	push	{r7, lr}
 8020b02:	b082      	sub	sp, #8
 8020b04:	af00      	add	r7, sp, #0
 8020b06:	6078      	str	r0, [r7, #4]
 8020b08:	460b      	mov	r3, r1
 8020b0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8020b0c:	687b      	ldr	r3, [r7, #4]
 8020b0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8020b12:	78fa      	ldrb	r2, [r7, #3]
 8020b14:	4611      	mov	r1, r2
 8020b16:	4618      	mov	r0, r3
 8020b18:	f7f1 fd82 	bl	8012620 <USBD_LL_IsoINIncomplete>
}
 8020b1c:	bf00      	nop
 8020b1e:	3708      	adds	r7, #8
 8020b20:	46bd      	mov	sp, r7
 8020b22:	bd80      	pop	{r7, pc}

08020b24 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020b24:	b580      	push	{r7, lr}
 8020b26:	b082      	sub	sp, #8
 8020b28:	af00      	add	r7, sp, #0
 8020b2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8020b2c:	687b      	ldr	r3, [r7, #4]
 8020b2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8020b32:	4618      	mov	r0, r3
 8020b34:	f7f1 fdd8 	bl	80126e8 <USBD_LL_DevConnected>
}
 8020b38:	bf00      	nop
 8020b3a:	3708      	adds	r7, #8
 8020b3c:	46bd      	mov	sp, r7
 8020b3e:	bd80      	pop	{r7, pc}

08020b40 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020b40:	b580      	push	{r7, lr}
 8020b42:	b082      	sub	sp, #8
 8020b44:	af00      	add	r7, sp, #0
 8020b46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8020b48:	687b      	ldr	r3, [r7, #4]
 8020b4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8020b4e:	4618      	mov	r0, r3
 8020b50:	f7f1 fdd5 	bl	80126fe <USBD_LL_DevDisconnected>
}
 8020b54:	bf00      	nop
 8020b56:	3708      	adds	r7, #8
 8020b58:	46bd      	mov	sp, r7
 8020b5a:	bd80      	pop	{r7, pc}

08020b5c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8020b5c:	b580      	push	{r7, lr}
 8020b5e:	b082      	sub	sp, #8
 8020b60:	af00      	add	r7, sp, #0
 8020b62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8020b64:	687b      	ldr	r3, [r7, #4]
 8020b66:	781b      	ldrb	r3, [r3, #0]
 8020b68:	2b00      	cmp	r3, #0
 8020b6a:	d13e      	bne.n	8020bea <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8020b6c:	4a21      	ldr	r2, [pc, #132]	; (8020bf4 <USBD_LL_Init+0x98>)
 8020b6e:	687b      	ldr	r3, [r7, #4]
 8020b70:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8020b74:	687b      	ldr	r3, [r7, #4]
 8020b76:	4a1f      	ldr	r2, [pc, #124]	; (8020bf4 <USBD_LL_Init+0x98>)
 8020b78:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8020b7c:	4b1d      	ldr	r3, [pc, #116]	; (8020bf4 <USBD_LL_Init+0x98>)
 8020b7e:	4a1e      	ldr	r2, [pc, #120]	; (8020bf8 <USBD_LL_Init+0x9c>)
 8020b80:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8020b82:	4b1c      	ldr	r3, [pc, #112]	; (8020bf4 <USBD_LL_Init+0x98>)
 8020b84:	2209      	movs	r2, #9
 8020b86:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8020b88:	4b1a      	ldr	r3, [pc, #104]	; (8020bf4 <USBD_LL_Init+0x98>)
 8020b8a:	2202      	movs	r2, #2
 8020b8c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8020b8e:	4b19      	ldr	r3, [pc, #100]	; (8020bf4 <USBD_LL_Init+0x98>)
 8020b90:	2200      	movs	r2, #0
 8020b92:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8020b94:	4b17      	ldr	r3, [pc, #92]	; (8020bf4 <USBD_LL_Init+0x98>)
 8020b96:	2202      	movs	r2, #2
 8020b98:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8020b9a:	4b16      	ldr	r3, [pc, #88]	; (8020bf4 <USBD_LL_Init+0x98>)
 8020b9c:	2200      	movs	r2, #0
 8020b9e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8020ba0:	4b14      	ldr	r3, [pc, #80]	; (8020bf4 <USBD_LL_Init+0x98>)
 8020ba2:	2200      	movs	r2, #0
 8020ba4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8020ba6:	4b13      	ldr	r3, [pc, #76]	; (8020bf4 <USBD_LL_Init+0x98>)
 8020ba8:	2200      	movs	r2, #0
 8020baa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8020bac:	4b11      	ldr	r3, [pc, #68]	; (8020bf4 <USBD_LL_Init+0x98>)
 8020bae:	2200      	movs	r2, #0
 8020bb0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8020bb2:	4b10      	ldr	r3, [pc, #64]	; (8020bf4 <USBD_LL_Init+0x98>)
 8020bb4:	2200      	movs	r2, #0
 8020bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8020bb8:	4b0e      	ldr	r3, [pc, #56]	; (8020bf4 <USBD_LL_Init+0x98>)
 8020bba:	2200      	movs	r2, #0
 8020bbc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8020bbe:	480d      	ldr	r0, [pc, #52]	; (8020bf4 <USBD_LL_Init+0x98>)
 8020bc0:	f7e2 fc14 	bl	80033ec <HAL_PCD_Init>
 8020bc4:	4603      	mov	r3, r0
 8020bc6:	2b00      	cmp	r3, #0
 8020bc8:	d001      	beq.n	8020bce <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8020bca:	f7df ffe9 	bl	8000ba0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8020bce:	2180      	movs	r1, #128	; 0x80
 8020bd0:	4808      	ldr	r0, [pc, #32]	; (8020bf4 <USBD_LL_Init+0x98>)
 8020bd2:	f7e3 fecc 	bl	800496e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8020bd6:	2240      	movs	r2, #64	; 0x40
 8020bd8:	2100      	movs	r1, #0
 8020bda:	4806      	ldr	r0, [pc, #24]	; (8020bf4 <USBD_LL_Init+0x98>)
 8020bdc:	f7e3 fe80 	bl	80048e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8020be0:	2280      	movs	r2, #128	; 0x80
 8020be2:	2101      	movs	r1, #1
 8020be4:	4803      	ldr	r0, [pc, #12]	; (8020bf4 <USBD_LL_Init+0x98>)
 8020be6:	f7e3 fe7b 	bl	80048e0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8020bea:	2300      	movs	r3, #0
}
 8020bec:	4618      	mov	r0, r3
 8020bee:	3708      	adds	r7, #8
 8020bf0:	46bd      	mov	sp, r7
 8020bf2:	bd80      	pop	{r7, pc}
 8020bf4:	2401b844 	.word	0x2401b844
 8020bf8:	40080000 	.word	0x40080000

08020bfc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8020bfc:	b580      	push	{r7, lr}
 8020bfe:	b084      	sub	sp, #16
 8020c00:	af00      	add	r7, sp, #0
 8020c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020c04:	2300      	movs	r3, #0
 8020c06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020c08:	2300      	movs	r3, #0
 8020c0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8020c0c:	687b      	ldr	r3, [r7, #4]
 8020c0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8020c12:	4618      	mov	r0, r3
 8020c14:	f7e2 fd0e 	bl	8003634 <HAL_PCD_Start>
 8020c18:	4603      	mov	r3, r0
 8020c1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020c1c:	7bfb      	ldrb	r3, [r7, #15]
 8020c1e:	4618      	mov	r0, r3
 8020c20:	f000 f962 	bl	8020ee8 <USBD_Get_USB_Status>
 8020c24:	4603      	mov	r3, r0
 8020c26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020c28:	7bbb      	ldrb	r3, [r7, #14]
}
 8020c2a:	4618      	mov	r0, r3
 8020c2c:	3710      	adds	r7, #16
 8020c2e:	46bd      	mov	sp, r7
 8020c30:	bd80      	pop	{r7, pc}

08020c32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8020c32:	b580      	push	{r7, lr}
 8020c34:	b084      	sub	sp, #16
 8020c36:	af00      	add	r7, sp, #0
 8020c38:	6078      	str	r0, [r7, #4]
 8020c3a:	4608      	mov	r0, r1
 8020c3c:	4611      	mov	r1, r2
 8020c3e:	461a      	mov	r2, r3
 8020c40:	4603      	mov	r3, r0
 8020c42:	70fb      	strb	r3, [r7, #3]
 8020c44:	460b      	mov	r3, r1
 8020c46:	70bb      	strb	r3, [r7, #2]
 8020c48:	4613      	mov	r3, r2
 8020c4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020c4c:	2300      	movs	r3, #0
 8020c4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020c50:	2300      	movs	r3, #0
 8020c52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8020c54:	687b      	ldr	r3, [r7, #4]
 8020c56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8020c5a:	78bb      	ldrb	r3, [r7, #2]
 8020c5c:	883a      	ldrh	r2, [r7, #0]
 8020c5e:	78f9      	ldrb	r1, [r7, #3]
 8020c60:	f7e3 fa0c 	bl	800407c <HAL_PCD_EP_Open>
 8020c64:	4603      	mov	r3, r0
 8020c66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020c68:	7bfb      	ldrb	r3, [r7, #15]
 8020c6a:	4618      	mov	r0, r3
 8020c6c:	f000 f93c 	bl	8020ee8 <USBD_Get_USB_Status>
 8020c70:	4603      	mov	r3, r0
 8020c72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020c74:	7bbb      	ldrb	r3, [r7, #14]
}
 8020c76:	4618      	mov	r0, r3
 8020c78:	3710      	adds	r7, #16
 8020c7a:	46bd      	mov	sp, r7
 8020c7c:	bd80      	pop	{r7, pc}

08020c7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020c7e:	b580      	push	{r7, lr}
 8020c80:	b084      	sub	sp, #16
 8020c82:	af00      	add	r7, sp, #0
 8020c84:	6078      	str	r0, [r7, #4]
 8020c86:	460b      	mov	r3, r1
 8020c88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020c8a:	2300      	movs	r3, #0
 8020c8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020c8e:	2300      	movs	r3, #0
 8020c90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8020c92:	687b      	ldr	r3, [r7, #4]
 8020c94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8020c98:	78fa      	ldrb	r2, [r7, #3]
 8020c9a:	4611      	mov	r1, r2
 8020c9c:	4618      	mov	r0, r3
 8020c9e:	f7e3 fa55 	bl	800414c <HAL_PCD_EP_Close>
 8020ca2:	4603      	mov	r3, r0
 8020ca4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020ca6:	7bfb      	ldrb	r3, [r7, #15]
 8020ca8:	4618      	mov	r0, r3
 8020caa:	f000 f91d 	bl	8020ee8 <USBD_Get_USB_Status>
 8020cae:	4603      	mov	r3, r0
 8020cb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020cb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8020cb4:	4618      	mov	r0, r3
 8020cb6:	3710      	adds	r7, #16
 8020cb8:	46bd      	mov	sp, r7
 8020cba:	bd80      	pop	{r7, pc}

08020cbc <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020cbc:	b580      	push	{r7, lr}
 8020cbe:	b084      	sub	sp, #16
 8020cc0:	af00      	add	r7, sp, #0
 8020cc2:	6078      	str	r0, [r7, #4]
 8020cc4:	460b      	mov	r3, r1
 8020cc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020cc8:	2300      	movs	r3, #0
 8020cca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020ccc:	2300      	movs	r3, #0
 8020cce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8020cd0:	687b      	ldr	r3, [r7, #4]
 8020cd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8020cd6:	78fa      	ldrb	r2, [r7, #3]
 8020cd8:	4611      	mov	r1, r2
 8020cda:	4618      	mov	r0, r3
 8020cdc:	f7e3 fc18 	bl	8004510 <HAL_PCD_EP_Flush>
 8020ce0:	4603      	mov	r3, r0
 8020ce2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020ce4:	7bfb      	ldrb	r3, [r7, #15]
 8020ce6:	4618      	mov	r0, r3
 8020ce8:	f000 f8fe 	bl	8020ee8 <USBD_Get_USB_Status>
 8020cec:	4603      	mov	r3, r0
 8020cee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020cf0:	7bbb      	ldrb	r3, [r7, #14]
}
 8020cf2:	4618      	mov	r0, r3
 8020cf4:	3710      	adds	r7, #16
 8020cf6:	46bd      	mov	sp, r7
 8020cf8:	bd80      	pop	{r7, pc}

08020cfa <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020cfa:	b580      	push	{r7, lr}
 8020cfc:	b084      	sub	sp, #16
 8020cfe:	af00      	add	r7, sp, #0
 8020d00:	6078      	str	r0, [r7, #4]
 8020d02:	460b      	mov	r3, r1
 8020d04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020d06:	2300      	movs	r3, #0
 8020d08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020d0a:	2300      	movs	r3, #0
 8020d0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8020d0e:	687b      	ldr	r3, [r7, #4]
 8020d10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8020d14:	78fa      	ldrb	r2, [r7, #3]
 8020d16:	4611      	mov	r1, r2
 8020d18:	4618      	mov	r0, r3
 8020d1a:	f7e3 fb0e 	bl	800433a <HAL_PCD_EP_SetStall>
 8020d1e:	4603      	mov	r3, r0
 8020d20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020d22:	7bfb      	ldrb	r3, [r7, #15]
 8020d24:	4618      	mov	r0, r3
 8020d26:	f000 f8df 	bl	8020ee8 <USBD_Get_USB_Status>
 8020d2a:	4603      	mov	r3, r0
 8020d2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020d2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8020d30:	4618      	mov	r0, r3
 8020d32:	3710      	adds	r7, #16
 8020d34:	46bd      	mov	sp, r7
 8020d36:	bd80      	pop	{r7, pc}

08020d38 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020d38:	b580      	push	{r7, lr}
 8020d3a:	b084      	sub	sp, #16
 8020d3c:	af00      	add	r7, sp, #0
 8020d3e:	6078      	str	r0, [r7, #4]
 8020d40:	460b      	mov	r3, r1
 8020d42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020d44:	2300      	movs	r3, #0
 8020d46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020d48:	2300      	movs	r3, #0
 8020d4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8020d4c:	687b      	ldr	r3, [r7, #4]
 8020d4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8020d52:	78fa      	ldrb	r2, [r7, #3]
 8020d54:	4611      	mov	r1, r2
 8020d56:	4618      	mov	r0, r3
 8020d58:	f7e3 fb53 	bl	8004402 <HAL_PCD_EP_ClrStall>
 8020d5c:	4603      	mov	r3, r0
 8020d5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020d60:	7bfb      	ldrb	r3, [r7, #15]
 8020d62:	4618      	mov	r0, r3
 8020d64:	f000 f8c0 	bl	8020ee8 <USBD_Get_USB_Status>
 8020d68:	4603      	mov	r3, r0
 8020d6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020d6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8020d6e:	4618      	mov	r0, r3
 8020d70:	3710      	adds	r7, #16
 8020d72:	46bd      	mov	sp, r7
 8020d74:	bd80      	pop	{r7, pc}

08020d76 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020d76:	b480      	push	{r7}
 8020d78:	b085      	sub	sp, #20
 8020d7a:	af00      	add	r7, sp, #0
 8020d7c:	6078      	str	r0, [r7, #4]
 8020d7e:	460b      	mov	r3, r1
 8020d80:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8020d82:	687b      	ldr	r3, [r7, #4]
 8020d84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8020d88:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8020d8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8020d8e:	2b00      	cmp	r3, #0
 8020d90:	da0b      	bge.n	8020daa <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8020d92:	78fb      	ldrb	r3, [r7, #3]
 8020d94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8020d98:	68f9      	ldr	r1, [r7, #12]
 8020d9a:	4613      	mov	r3, r2
 8020d9c:	00db      	lsls	r3, r3, #3
 8020d9e:	4413      	add	r3, r2
 8020da0:	009b      	lsls	r3, r3, #2
 8020da2:	440b      	add	r3, r1
 8020da4:	333e      	adds	r3, #62	; 0x3e
 8020da6:	781b      	ldrb	r3, [r3, #0]
 8020da8:	e00b      	b.n	8020dc2 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8020daa:	78fb      	ldrb	r3, [r7, #3]
 8020dac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8020db0:	68f9      	ldr	r1, [r7, #12]
 8020db2:	4613      	mov	r3, r2
 8020db4:	00db      	lsls	r3, r3, #3
 8020db6:	4413      	add	r3, r2
 8020db8:	009b      	lsls	r3, r3, #2
 8020dba:	440b      	add	r3, r1
 8020dbc:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8020dc0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8020dc2:	4618      	mov	r0, r3
 8020dc4:	3714      	adds	r7, #20
 8020dc6:	46bd      	mov	sp, r7
 8020dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020dcc:	4770      	bx	lr

08020dce <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8020dce:	b580      	push	{r7, lr}
 8020dd0:	b084      	sub	sp, #16
 8020dd2:	af00      	add	r7, sp, #0
 8020dd4:	6078      	str	r0, [r7, #4]
 8020dd6:	460b      	mov	r3, r1
 8020dd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020dda:	2300      	movs	r3, #0
 8020ddc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020dde:	2300      	movs	r3, #0
 8020de0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8020de2:	687b      	ldr	r3, [r7, #4]
 8020de4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8020de8:	78fa      	ldrb	r2, [r7, #3]
 8020dea:	4611      	mov	r1, r2
 8020dec:	4618      	mov	r0, r3
 8020dee:	f7e3 f920 	bl	8004032 <HAL_PCD_SetAddress>
 8020df2:	4603      	mov	r3, r0
 8020df4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020df6:	7bfb      	ldrb	r3, [r7, #15]
 8020df8:	4618      	mov	r0, r3
 8020dfa:	f000 f875 	bl	8020ee8 <USBD_Get_USB_Status>
 8020dfe:	4603      	mov	r3, r0
 8020e00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020e02:	7bbb      	ldrb	r3, [r7, #14]
}
 8020e04:	4618      	mov	r0, r3
 8020e06:	3710      	adds	r7, #16
 8020e08:	46bd      	mov	sp, r7
 8020e0a:	bd80      	pop	{r7, pc}

08020e0c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8020e0c:	b580      	push	{r7, lr}
 8020e0e:	b086      	sub	sp, #24
 8020e10:	af00      	add	r7, sp, #0
 8020e12:	60f8      	str	r0, [r7, #12]
 8020e14:	607a      	str	r2, [r7, #4]
 8020e16:	603b      	str	r3, [r7, #0]
 8020e18:	460b      	mov	r3, r1
 8020e1a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020e1c:	2300      	movs	r3, #0
 8020e1e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020e20:	2300      	movs	r3, #0
 8020e22:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8020e24:	68fb      	ldr	r3, [r7, #12]
 8020e26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8020e2a:	7af9      	ldrb	r1, [r7, #11]
 8020e2c:	683b      	ldr	r3, [r7, #0]
 8020e2e:	687a      	ldr	r2, [r7, #4]
 8020e30:	f7e3 fa39 	bl	80042a6 <HAL_PCD_EP_Transmit>
 8020e34:	4603      	mov	r3, r0
 8020e36:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020e38:	7dfb      	ldrb	r3, [r7, #23]
 8020e3a:	4618      	mov	r0, r3
 8020e3c:	f000 f854 	bl	8020ee8 <USBD_Get_USB_Status>
 8020e40:	4603      	mov	r3, r0
 8020e42:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8020e44:	7dbb      	ldrb	r3, [r7, #22]
}
 8020e46:	4618      	mov	r0, r3
 8020e48:	3718      	adds	r7, #24
 8020e4a:	46bd      	mov	sp, r7
 8020e4c:	bd80      	pop	{r7, pc}

08020e4e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8020e4e:	b580      	push	{r7, lr}
 8020e50:	b086      	sub	sp, #24
 8020e52:	af00      	add	r7, sp, #0
 8020e54:	60f8      	str	r0, [r7, #12]
 8020e56:	607a      	str	r2, [r7, #4]
 8020e58:	603b      	str	r3, [r7, #0]
 8020e5a:	460b      	mov	r3, r1
 8020e5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020e5e:	2300      	movs	r3, #0
 8020e60:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020e62:	2300      	movs	r3, #0
 8020e64:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8020e66:	68fb      	ldr	r3, [r7, #12]
 8020e68:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8020e6c:	7af9      	ldrb	r1, [r7, #11]
 8020e6e:	683b      	ldr	r3, [r7, #0]
 8020e70:	687a      	ldr	r2, [r7, #4]
 8020e72:	f7e3 f9b5 	bl	80041e0 <HAL_PCD_EP_Receive>
 8020e76:	4603      	mov	r3, r0
 8020e78:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020e7a:	7dfb      	ldrb	r3, [r7, #23]
 8020e7c:	4618      	mov	r0, r3
 8020e7e:	f000 f833 	bl	8020ee8 <USBD_Get_USB_Status>
 8020e82:	4603      	mov	r3, r0
 8020e84:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8020e86:	7dbb      	ldrb	r3, [r7, #22]
}
 8020e88:	4618      	mov	r0, r3
 8020e8a:	3718      	adds	r7, #24
 8020e8c:	46bd      	mov	sp, r7
 8020e8e:	bd80      	pop	{r7, pc}

08020e90 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020e90:	b580      	push	{r7, lr}
 8020e92:	b082      	sub	sp, #8
 8020e94:	af00      	add	r7, sp, #0
 8020e96:	6078      	str	r0, [r7, #4]
 8020e98:	460b      	mov	r3, r1
 8020e9a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8020e9c:	687b      	ldr	r3, [r7, #4]
 8020e9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8020ea2:	78fa      	ldrb	r2, [r7, #3]
 8020ea4:	4611      	mov	r1, r2
 8020ea6:	4618      	mov	r0, r3
 8020ea8:	f7e3 f9e5 	bl	8004276 <HAL_PCD_EP_GetRxCount>
 8020eac:	4603      	mov	r3, r0
}
 8020eae:	4618      	mov	r0, r3
 8020eb0:	3708      	adds	r7, #8
 8020eb2:	46bd      	mov	sp, r7
 8020eb4:	bd80      	pop	{r7, pc}
	...

08020eb8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8020eb8:	b480      	push	{r7}
 8020eba:	b083      	sub	sp, #12
 8020ebc:	af00      	add	r7, sp, #0
 8020ebe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8020ec0:	4b03      	ldr	r3, [pc, #12]	; (8020ed0 <USBD_static_malloc+0x18>)
}
 8020ec2:	4618      	mov	r0, r3
 8020ec4:	370c      	adds	r7, #12
 8020ec6:	46bd      	mov	sp, r7
 8020ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ecc:	4770      	bx	lr
 8020ece:	bf00      	nop
 8020ed0:	24013ff4 	.word	0x24013ff4

08020ed4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8020ed4:	b480      	push	{r7}
 8020ed6:	b083      	sub	sp, #12
 8020ed8:	af00      	add	r7, sp, #0
 8020eda:	6078      	str	r0, [r7, #4]

}
 8020edc:	bf00      	nop
 8020ede:	370c      	adds	r7, #12
 8020ee0:	46bd      	mov	sp, r7
 8020ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ee6:	4770      	bx	lr

08020ee8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8020ee8:	b480      	push	{r7}
 8020eea:	b085      	sub	sp, #20
 8020eec:	af00      	add	r7, sp, #0
 8020eee:	4603      	mov	r3, r0
 8020ef0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020ef2:	2300      	movs	r3, #0
 8020ef4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8020ef6:	79fb      	ldrb	r3, [r7, #7]
 8020ef8:	2b03      	cmp	r3, #3
 8020efa:	d817      	bhi.n	8020f2c <USBD_Get_USB_Status+0x44>
 8020efc:	a201      	add	r2, pc, #4	; (adr r2, 8020f04 <USBD_Get_USB_Status+0x1c>)
 8020efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020f02:	bf00      	nop
 8020f04:	08020f15 	.word	0x08020f15
 8020f08:	08020f1b 	.word	0x08020f1b
 8020f0c:	08020f21 	.word	0x08020f21
 8020f10:	08020f27 	.word	0x08020f27
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8020f14:	2300      	movs	r3, #0
 8020f16:	73fb      	strb	r3, [r7, #15]
    break;
 8020f18:	e00b      	b.n	8020f32 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8020f1a:	2303      	movs	r3, #3
 8020f1c:	73fb      	strb	r3, [r7, #15]
    break;
 8020f1e:	e008      	b.n	8020f32 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8020f20:	2301      	movs	r3, #1
 8020f22:	73fb      	strb	r3, [r7, #15]
    break;
 8020f24:	e005      	b.n	8020f32 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8020f26:	2303      	movs	r3, #3
 8020f28:	73fb      	strb	r3, [r7, #15]
    break;
 8020f2a:	e002      	b.n	8020f32 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8020f2c:	2303      	movs	r3, #3
 8020f2e:	73fb      	strb	r3, [r7, #15]
    break;
 8020f30:	bf00      	nop
  }
  return usb_status;
 8020f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8020f34:	4618      	mov	r0, r3
 8020f36:	3714      	adds	r7, #20
 8020f38:	46bd      	mov	sp, r7
 8020f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f3e:	4770      	bx	lr

08020f40 <atoi>:
 8020f40:	220a      	movs	r2, #10
 8020f42:	2100      	movs	r1, #0
 8020f44:	f001 b9ae 	b.w	80222a4 <strtol>

08020f48 <std>:
 8020f48:	2300      	movs	r3, #0
 8020f4a:	b510      	push	{r4, lr}
 8020f4c:	4604      	mov	r4, r0
 8020f4e:	e9c0 3300 	strd	r3, r3, [r0]
 8020f52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020f56:	6083      	str	r3, [r0, #8]
 8020f58:	8181      	strh	r1, [r0, #12]
 8020f5a:	6643      	str	r3, [r0, #100]	; 0x64
 8020f5c:	81c2      	strh	r2, [r0, #14]
 8020f5e:	6183      	str	r3, [r0, #24]
 8020f60:	4619      	mov	r1, r3
 8020f62:	2208      	movs	r2, #8
 8020f64:	305c      	adds	r0, #92	; 0x5c
 8020f66:	f000 f94f 	bl	8021208 <memset>
 8020f6a:	4b05      	ldr	r3, [pc, #20]	; (8020f80 <std+0x38>)
 8020f6c:	6263      	str	r3, [r4, #36]	; 0x24
 8020f6e:	4b05      	ldr	r3, [pc, #20]	; (8020f84 <std+0x3c>)
 8020f70:	62a3      	str	r3, [r4, #40]	; 0x28
 8020f72:	4b05      	ldr	r3, [pc, #20]	; (8020f88 <std+0x40>)
 8020f74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8020f76:	4b05      	ldr	r3, [pc, #20]	; (8020f8c <std+0x44>)
 8020f78:	6224      	str	r4, [r4, #32]
 8020f7a:	6323      	str	r3, [r4, #48]	; 0x30
 8020f7c:	bd10      	pop	{r4, pc}
 8020f7e:	bf00      	nop
 8020f80:	08022109 	.word	0x08022109
 8020f84:	0802212b 	.word	0x0802212b
 8020f88:	08022163 	.word	0x08022163
 8020f8c:	08022187 	.word	0x08022187

08020f90 <_cleanup_r>:
 8020f90:	4901      	ldr	r1, [pc, #4]	; (8020f98 <_cleanup_r+0x8>)
 8020f92:	f000 b8c1 	b.w	8021118 <_fwalk_reent>
 8020f96:	bf00      	nop
 8020f98:	080231c5 	.word	0x080231c5

08020f9c <__sfmoreglue>:
 8020f9c:	b570      	push	{r4, r5, r6, lr}
 8020f9e:	2268      	movs	r2, #104	; 0x68
 8020fa0:	1e4d      	subs	r5, r1, #1
 8020fa2:	4355      	muls	r5, r2
 8020fa4:	460e      	mov	r6, r1
 8020fa6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8020faa:	f000 f9b7 	bl	802131c <_malloc_r>
 8020fae:	4604      	mov	r4, r0
 8020fb0:	b140      	cbz	r0, 8020fc4 <__sfmoreglue+0x28>
 8020fb2:	2100      	movs	r1, #0
 8020fb4:	e9c0 1600 	strd	r1, r6, [r0]
 8020fb8:	300c      	adds	r0, #12
 8020fba:	60a0      	str	r0, [r4, #8]
 8020fbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8020fc0:	f000 f922 	bl	8021208 <memset>
 8020fc4:	4620      	mov	r0, r4
 8020fc6:	bd70      	pop	{r4, r5, r6, pc}

08020fc8 <__sfp_lock_acquire>:
 8020fc8:	4801      	ldr	r0, [pc, #4]	; (8020fd0 <__sfp_lock_acquire+0x8>)
 8020fca:	f000 b8ea 	b.w	80211a2 <__retarget_lock_acquire_recursive>
 8020fce:	bf00      	nop
 8020fd0:	2401426d 	.word	0x2401426d

08020fd4 <__sfp_lock_release>:
 8020fd4:	4801      	ldr	r0, [pc, #4]	; (8020fdc <__sfp_lock_release+0x8>)
 8020fd6:	f000 b8e5 	b.w	80211a4 <__retarget_lock_release_recursive>
 8020fda:	bf00      	nop
 8020fdc:	2401426d 	.word	0x2401426d

08020fe0 <__sinit_lock_acquire>:
 8020fe0:	4801      	ldr	r0, [pc, #4]	; (8020fe8 <__sinit_lock_acquire+0x8>)
 8020fe2:	f000 b8de 	b.w	80211a2 <__retarget_lock_acquire_recursive>
 8020fe6:	bf00      	nop
 8020fe8:	2401426e 	.word	0x2401426e

08020fec <__sinit_lock_release>:
 8020fec:	4801      	ldr	r0, [pc, #4]	; (8020ff4 <__sinit_lock_release+0x8>)
 8020fee:	f000 b8d9 	b.w	80211a4 <__retarget_lock_release_recursive>
 8020ff2:	bf00      	nop
 8020ff4:	2401426e 	.word	0x2401426e

08020ff8 <__sinit>:
 8020ff8:	b510      	push	{r4, lr}
 8020ffa:	4604      	mov	r4, r0
 8020ffc:	f7ff fff0 	bl	8020fe0 <__sinit_lock_acquire>
 8021000:	69a3      	ldr	r3, [r4, #24]
 8021002:	b11b      	cbz	r3, 802100c <__sinit+0x14>
 8021004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021008:	f7ff bff0 	b.w	8020fec <__sinit_lock_release>
 802100c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8021010:	6523      	str	r3, [r4, #80]	; 0x50
 8021012:	4b13      	ldr	r3, [pc, #76]	; (8021060 <__sinit+0x68>)
 8021014:	4a13      	ldr	r2, [pc, #76]	; (8021064 <__sinit+0x6c>)
 8021016:	681b      	ldr	r3, [r3, #0]
 8021018:	62a2      	str	r2, [r4, #40]	; 0x28
 802101a:	42a3      	cmp	r3, r4
 802101c:	bf04      	itt	eq
 802101e:	2301      	moveq	r3, #1
 8021020:	61a3      	streq	r3, [r4, #24]
 8021022:	4620      	mov	r0, r4
 8021024:	f000 f820 	bl	8021068 <__sfp>
 8021028:	6060      	str	r0, [r4, #4]
 802102a:	4620      	mov	r0, r4
 802102c:	f000 f81c 	bl	8021068 <__sfp>
 8021030:	60a0      	str	r0, [r4, #8]
 8021032:	4620      	mov	r0, r4
 8021034:	f000 f818 	bl	8021068 <__sfp>
 8021038:	2200      	movs	r2, #0
 802103a:	60e0      	str	r0, [r4, #12]
 802103c:	2104      	movs	r1, #4
 802103e:	6860      	ldr	r0, [r4, #4]
 8021040:	f7ff ff82 	bl	8020f48 <std>
 8021044:	68a0      	ldr	r0, [r4, #8]
 8021046:	2201      	movs	r2, #1
 8021048:	2109      	movs	r1, #9
 802104a:	f7ff ff7d 	bl	8020f48 <std>
 802104e:	68e0      	ldr	r0, [r4, #12]
 8021050:	2202      	movs	r2, #2
 8021052:	2112      	movs	r1, #18
 8021054:	f7ff ff78 	bl	8020f48 <std>
 8021058:	2301      	movs	r3, #1
 802105a:	61a3      	str	r3, [r4, #24]
 802105c:	e7d2      	b.n	8021004 <__sinit+0xc>
 802105e:	bf00      	nop
 8021060:	08026084 	.word	0x08026084
 8021064:	08020f91 	.word	0x08020f91

08021068 <__sfp>:
 8021068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802106a:	4607      	mov	r7, r0
 802106c:	f7ff ffac 	bl	8020fc8 <__sfp_lock_acquire>
 8021070:	4b1e      	ldr	r3, [pc, #120]	; (80210ec <__sfp+0x84>)
 8021072:	681e      	ldr	r6, [r3, #0]
 8021074:	69b3      	ldr	r3, [r6, #24]
 8021076:	b913      	cbnz	r3, 802107e <__sfp+0x16>
 8021078:	4630      	mov	r0, r6
 802107a:	f7ff ffbd 	bl	8020ff8 <__sinit>
 802107e:	3648      	adds	r6, #72	; 0x48
 8021080:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8021084:	3b01      	subs	r3, #1
 8021086:	d503      	bpl.n	8021090 <__sfp+0x28>
 8021088:	6833      	ldr	r3, [r6, #0]
 802108a:	b30b      	cbz	r3, 80210d0 <__sfp+0x68>
 802108c:	6836      	ldr	r6, [r6, #0]
 802108e:	e7f7      	b.n	8021080 <__sfp+0x18>
 8021090:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8021094:	b9d5      	cbnz	r5, 80210cc <__sfp+0x64>
 8021096:	4b16      	ldr	r3, [pc, #88]	; (80210f0 <__sfp+0x88>)
 8021098:	60e3      	str	r3, [r4, #12]
 802109a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802109e:	6665      	str	r5, [r4, #100]	; 0x64
 80210a0:	f000 f87e 	bl	80211a0 <__retarget_lock_init_recursive>
 80210a4:	f7ff ff96 	bl	8020fd4 <__sfp_lock_release>
 80210a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80210ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80210b0:	6025      	str	r5, [r4, #0]
 80210b2:	61a5      	str	r5, [r4, #24]
 80210b4:	2208      	movs	r2, #8
 80210b6:	4629      	mov	r1, r5
 80210b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80210bc:	f000 f8a4 	bl	8021208 <memset>
 80210c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80210c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80210c8:	4620      	mov	r0, r4
 80210ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80210cc:	3468      	adds	r4, #104	; 0x68
 80210ce:	e7d9      	b.n	8021084 <__sfp+0x1c>
 80210d0:	2104      	movs	r1, #4
 80210d2:	4638      	mov	r0, r7
 80210d4:	f7ff ff62 	bl	8020f9c <__sfmoreglue>
 80210d8:	4604      	mov	r4, r0
 80210da:	6030      	str	r0, [r6, #0]
 80210dc:	2800      	cmp	r0, #0
 80210de:	d1d5      	bne.n	802108c <__sfp+0x24>
 80210e0:	f7ff ff78 	bl	8020fd4 <__sfp_lock_release>
 80210e4:	230c      	movs	r3, #12
 80210e6:	603b      	str	r3, [r7, #0]
 80210e8:	e7ee      	b.n	80210c8 <__sfp+0x60>
 80210ea:	bf00      	nop
 80210ec:	08026084 	.word	0x08026084
 80210f0:	ffff0001 	.word	0xffff0001

080210f4 <fiprintf>:
 80210f4:	b40e      	push	{r1, r2, r3}
 80210f6:	b503      	push	{r0, r1, lr}
 80210f8:	4601      	mov	r1, r0
 80210fa:	ab03      	add	r3, sp, #12
 80210fc:	4805      	ldr	r0, [pc, #20]	; (8021114 <fiprintf+0x20>)
 80210fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8021102:	6800      	ldr	r0, [r0, #0]
 8021104:	9301      	str	r3, [sp, #4]
 8021106:	f000 f9a7 	bl	8021458 <_vfiprintf_r>
 802110a:	b002      	add	sp, #8
 802110c:	f85d eb04 	ldr.w	lr, [sp], #4
 8021110:	b003      	add	sp, #12
 8021112:	4770      	bx	lr
 8021114:	24000134 	.word	0x24000134

08021118 <_fwalk_reent>:
 8021118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802111c:	4606      	mov	r6, r0
 802111e:	4688      	mov	r8, r1
 8021120:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8021124:	2700      	movs	r7, #0
 8021126:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802112a:	f1b9 0901 	subs.w	r9, r9, #1
 802112e:	d505      	bpl.n	802113c <_fwalk_reent+0x24>
 8021130:	6824      	ldr	r4, [r4, #0]
 8021132:	2c00      	cmp	r4, #0
 8021134:	d1f7      	bne.n	8021126 <_fwalk_reent+0xe>
 8021136:	4638      	mov	r0, r7
 8021138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802113c:	89ab      	ldrh	r3, [r5, #12]
 802113e:	2b01      	cmp	r3, #1
 8021140:	d907      	bls.n	8021152 <_fwalk_reent+0x3a>
 8021142:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021146:	3301      	adds	r3, #1
 8021148:	d003      	beq.n	8021152 <_fwalk_reent+0x3a>
 802114a:	4629      	mov	r1, r5
 802114c:	4630      	mov	r0, r6
 802114e:	47c0      	blx	r8
 8021150:	4307      	orrs	r7, r0
 8021152:	3568      	adds	r5, #104	; 0x68
 8021154:	e7e9      	b.n	802112a <_fwalk_reent+0x12>
	...

08021158 <__libc_init_array>:
 8021158:	b570      	push	{r4, r5, r6, lr}
 802115a:	4d0d      	ldr	r5, [pc, #52]	; (8021190 <__libc_init_array+0x38>)
 802115c:	4c0d      	ldr	r4, [pc, #52]	; (8021194 <__libc_init_array+0x3c>)
 802115e:	1b64      	subs	r4, r4, r5
 8021160:	10a4      	asrs	r4, r4, #2
 8021162:	2600      	movs	r6, #0
 8021164:	42a6      	cmp	r6, r4
 8021166:	d109      	bne.n	802117c <__libc_init_array+0x24>
 8021168:	4d0b      	ldr	r5, [pc, #44]	; (8021198 <__libc_init_array+0x40>)
 802116a:	4c0c      	ldr	r4, [pc, #48]	; (802119c <__libc_init_array+0x44>)
 802116c:	f002 fea4 	bl	8023eb8 <_init>
 8021170:	1b64      	subs	r4, r4, r5
 8021172:	10a4      	asrs	r4, r4, #2
 8021174:	2600      	movs	r6, #0
 8021176:	42a6      	cmp	r6, r4
 8021178:	d105      	bne.n	8021186 <__libc_init_array+0x2e>
 802117a:	bd70      	pop	{r4, r5, r6, pc}
 802117c:	f855 3b04 	ldr.w	r3, [r5], #4
 8021180:	4798      	blx	r3
 8021182:	3601      	adds	r6, #1
 8021184:	e7ee      	b.n	8021164 <__libc_init_array+0xc>
 8021186:	f855 3b04 	ldr.w	r3, [r5], #4
 802118a:	4798      	blx	r3
 802118c:	3601      	adds	r6, #1
 802118e:	e7f2      	b.n	8021176 <__libc_init_array+0x1e>
 8021190:	08026308 	.word	0x08026308
 8021194:	08026308 	.word	0x08026308
 8021198:	08026308 	.word	0x08026308
 802119c:	0802630c 	.word	0x0802630c

080211a0 <__retarget_lock_init_recursive>:
 80211a0:	4770      	bx	lr

080211a2 <__retarget_lock_acquire_recursive>:
 80211a2:	4770      	bx	lr

080211a4 <__retarget_lock_release_recursive>:
 80211a4:	4770      	bx	lr
	...

080211a8 <malloc>:
 80211a8:	4b02      	ldr	r3, [pc, #8]	; (80211b4 <malloc+0xc>)
 80211aa:	4601      	mov	r1, r0
 80211ac:	6818      	ldr	r0, [r3, #0]
 80211ae:	f000 b8b5 	b.w	802131c <_malloc_r>
 80211b2:	bf00      	nop
 80211b4:	24000134 	.word	0x24000134

080211b8 <memcpy>:
 80211b8:	440a      	add	r2, r1
 80211ba:	4291      	cmp	r1, r2
 80211bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80211c0:	d100      	bne.n	80211c4 <memcpy+0xc>
 80211c2:	4770      	bx	lr
 80211c4:	b510      	push	{r4, lr}
 80211c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80211ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80211ce:	4291      	cmp	r1, r2
 80211d0:	d1f9      	bne.n	80211c6 <memcpy+0xe>
 80211d2:	bd10      	pop	{r4, pc}

080211d4 <memmove>:
 80211d4:	4288      	cmp	r0, r1
 80211d6:	b510      	push	{r4, lr}
 80211d8:	eb01 0402 	add.w	r4, r1, r2
 80211dc:	d902      	bls.n	80211e4 <memmove+0x10>
 80211de:	4284      	cmp	r4, r0
 80211e0:	4623      	mov	r3, r4
 80211e2:	d807      	bhi.n	80211f4 <memmove+0x20>
 80211e4:	1e43      	subs	r3, r0, #1
 80211e6:	42a1      	cmp	r1, r4
 80211e8:	d008      	beq.n	80211fc <memmove+0x28>
 80211ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80211ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80211f2:	e7f8      	b.n	80211e6 <memmove+0x12>
 80211f4:	4402      	add	r2, r0
 80211f6:	4601      	mov	r1, r0
 80211f8:	428a      	cmp	r2, r1
 80211fa:	d100      	bne.n	80211fe <memmove+0x2a>
 80211fc:	bd10      	pop	{r4, pc}
 80211fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8021202:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8021206:	e7f7      	b.n	80211f8 <memmove+0x24>

08021208 <memset>:
 8021208:	4402      	add	r2, r0
 802120a:	4603      	mov	r3, r0
 802120c:	4293      	cmp	r3, r2
 802120e:	d100      	bne.n	8021212 <memset+0xa>
 8021210:	4770      	bx	lr
 8021212:	f803 1b01 	strb.w	r1, [r3], #1
 8021216:	e7f9      	b.n	802120c <memset+0x4>

08021218 <_calloc_r>:
 8021218:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802121a:	fba1 2402 	umull	r2, r4, r1, r2
 802121e:	b94c      	cbnz	r4, 8021234 <_calloc_r+0x1c>
 8021220:	4611      	mov	r1, r2
 8021222:	9201      	str	r2, [sp, #4]
 8021224:	f000 f87a 	bl	802131c <_malloc_r>
 8021228:	9a01      	ldr	r2, [sp, #4]
 802122a:	4605      	mov	r5, r0
 802122c:	b930      	cbnz	r0, 802123c <_calloc_r+0x24>
 802122e:	4628      	mov	r0, r5
 8021230:	b003      	add	sp, #12
 8021232:	bd30      	pop	{r4, r5, pc}
 8021234:	220c      	movs	r2, #12
 8021236:	6002      	str	r2, [r0, #0]
 8021238:	2500      	movs	r5, #0
 802123a:	e7f8      	b.n	802122e <_calloc_r+0x16>
 802123c:	4621      	mov	r1, r4
 802123e:	f7ff ffe3 	bl	8021208 <memset>
 8021242:	e7f4      	b.n	802122e <_calloc_r+0x16>

08021244 <_free_r>:
 8021244:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021246:	2900      	cmp	r1, #0
 8021248:	d044      	beq.n	80212d4 <_free_r+0x90>
 802124a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802124e:	9001      	str	r0, [sp, #4]
 8021250:	2b00      	cmp	r3, #0
 8021252:	f1a1 0404 	sub.w	r4, r1, #4
 8021256:	bfb8      	it	lt
 8021258:	18e4      	addlt	r4, r4, r3
 802125a:	f002 f86b 	bl	8023334 <__malloc_lock>
 802125e:	4a1e      	ldr	r2, [pc, #120]	; (80212d8 <_free_r+0x94>)
 8021260:	9801      	ldr	r0, [sp, #4]
 8021262:	6813      	ldr	r3, [r2, #0]
 8021264:	b933      	cbnz	r3, 8021274 <_free_r+0x30>
 8021266:	6063      	str	r3, [r4, #4]
 8021268:	6014      	str	r4, [r2, #0]
 802126a:	b003      	add	sp, #12
 802126c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021270:	f002 b866 	b.w	8023340 <__malloc_unlock>
 8021274:	42a3      	cmp	r3, r4
 8021276:	d908      	bls.n	802128a <_free_r+0x46>
 8021278:	6825      	ldr	r5, [r4, #0]
 802127a:	1961      	adds	r1, r4, r5
 802127c:	428b      	cmp	r3, r1
 802127e:	bf01      	itttt	eq
 8021280:	6819      	ldreq	r1, [r3, #0]
 8021282:	685b      	ldreq	r3, [r3, #4]
 8021284:	1949      	addeq	r1, r1, r5
 8021286:	6021      	streq	r1, [r4, #0]
 8021288:	e7ed      	b.n	8021266 <_free_r+0x22>
 802128a:	461a      	mov	r2, r3
 802128c:	685b      	ldr	r3, [r3, #4]
 802128e:	b10b      	cbz	r3, 8021294 <_free_r+0x50>
 8021290:	42a3      	cmp	r3, r4
 8021292:	d9fa      	bls.n	802128a <_free_r+0x46>
 8021294:	6811      	ldr	r1, [r2, #0]
 8021296:	1855      	adds	r5, r2, r1
 8021298:	42a5      	cmp	r5, r4
 802129a:	d10b      	bne.n	80212b4 <_free_r+0x70>
 802129c:	6824      	ldr	r4, [r4, #0]
 802129e:	4421      	add	r1, r4
 80212a0:	1854      	adds	r4, r2, r1
 80212a2:	42a3      	cmp	r3, r4
 80212a4:	6011      	str	r1, [r2, #0]
 80212a6:	d1e0      	bne.n	802126a <_free_r+0x26>
 80212a8:	681c      	ldr	r4, [r3, #0]
 80212aa:	685b      	ldr	r3, [r3, #4]
 80212ac:	6053      	str	r3, [r2, #4]
 80212ae:	4421      	add	r1, r4
 80212b0:	6011      	str	r1, [r2, #0]
 80212b2:	e7da      	b.n	802126a <_free_r+0x26>
 80212b4:	d902      	bls.n	80212bc <_free_r+0x78>
 80212b6:	230c      	movs	r3, #12
 80212b8:	6003      	str	r3, [r0, #0]
 80212ba:	e7d6      	b.n	802126a <_free_r+0x26>
 80212bc:	6825      	ldr	r5, [r4, #0]
 80212be:	1961      	adds	r1, r4, r5
 80212c0:	428b      	cmp	r3, r1
 80212c2:	bf04      	itt	eq
 80212c4:	6819      	ldreq	r1, [r3, #0]
 80212c6:	685b      	ldreq	r3, [r3, #4]
 80212c8:	6063      	str	r3, [r4, #4]
 80212ca:	bf04      	itt	eq
 80212cc:	1949      	addeq	r1, r1, r5
 80212ce:	6021      	streq	r1, [r4, #0]
 80212d0:	6054      	str	r4, [r2, #4]
 80212d2:	e7ca      	b.n	802126a <_free_r+0x26>
 80212d4:	b003      	add	sp, #12
 80212d6:	bd30      	pop	{r4, r5, pc}
 80212d8:	24014270 	.word	0x24014270

080212dc <sbrk_aligned>:
 80212dc:	b570      	push	{r4, r5, r6, lr}
 80212de:	4e0e      	ldr	r6, [pc, #56]	; (8021318 <sbrk_aligned+0x3c>)
 80212e0:	460c      	mov	r4, r1
 80212e2:	6831      	ldr	r1, [r6, #0]
 80212e4:	4605      	mov	r5, r0
 80212e6:	b911      	cbnz	r1, 80212ee <sbrk_aligned+0x12>
 80212e8:	f000 feaa 	bl	8022040 <_sbrk_r>
 80212ec:	6030      	str	r0, [r6, #0]
 80212ee:	4621      	mov	r1, r4
 80212f0:	4628      	mov	r0, r5
 80212f2:	f000 fea5 	bl	8022040 <_sbrk_r>
 80212f6:	1c43      	adds	r3, r0, #1
 80212f8:	d00a      	beq.n	8021310 <sbrk_aligned+0x34>
 80212fa:	1cc4      	adds	r4, r0, #3
 80212fc:	f024 0403 	bic.w	r4, r4, #3
 8021300:	42a0      	cmp	r0, r4
 8021302:	d007      	beq.n	8021314 <sbrk_aligned+0x38>
 8021304:	1a21      	subs	r1, r4, r0
 8021306:	4628      	mov	r0, r5
 8021308:	f000 fe9a 	bl	8022040 <_sbrk_r>
 802130c:	3001      	adds	r0, #1
 802130e:	d101      	bne.n	8021314 <sbrk_aligned+0x38>
 8021310:	f04f 34ff 	mov.w	r4, #4294967295
 8021314:	4620      	mov	r0, r4
 8021316:	bd70      	pop	{r4, r5, r6, pc}
 8021318:	24014274 	.word	0x24014274

0802131c <_malloc_r>:
 802131c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021320:	1ccd      	adds	r5, r1, #3
 8021322:	f025 0503 	bic.w	r5, r5, #3
 8021326:	3508      	adds	r5, #8
 8021328:	2d0c      	cmp	r5, #12
 802132a:	bf38      	it	cc
 802132c:	250c      	movcc	r5, #12
 802132e:	2d00      	cmp	r5, #0
 8021330:	4607      	mov	r7, r0
 8021332:	db01      	blt.n	8021338 <_malloc_r+0x1c>
 8021334:	42a9      	cmp	r1, r5
 8021336:	d905      	bls.n	8021344 <_malloc_r+0x28>
 8021338:	230c      	movs	r3, #12
 802133a:	603b      	str	r3, [r7, #0]
 802133c:	2600      	movs	r6, #0
 802133e:	4630      	mov	r0, r6
 8021340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021344:	4e2e      	ldr	r6, [pc, #184]	; (8021400 <_malloc_r+0xe4>)
 8021346:	f001 fff5 	bl	8023334 <__malloc_lock>
 802134a:	6833      	ldr	r3, [r6, #0]
 802134c:	461c      	mov	r4, r3
 802134e:	bb34      	cbnz	r4, 802139e <_malloc_r+0x82>
 8021350:	4629      	mov	r1, r5
 8021352:	4638      	mov	r0, r7
 8021354:	f7ff ffc2 	bl	80212dc <sbrk_aligned>
 8021358:	1c43      	adds	r3, r0, #1
 802135a:	4604      	mov	r4, r0
 802135c:	d14d      	bne.n	80213fa <_malloc_r+0xde>
 802135e:	6834      	ldr	r4, [r6, #0]
 8021360:	4626      	mov	r6, r4
 8021362:	2e00      	cmp	r6, #0
 8021364:	d140      	bne.n	80213e8 <_malloc_r+0xcc>
 8021366:	6823      	ldr	r3, [r4, #0]
 8021368:	4631      	mov	r1, r6
 802136a:	4638      	mov	r0, r7
 802136c:	eb04 0803 	add.w	r8, r4, r3
 8021370:	f000 fe66 	bl	8022040 <_sbrk_r>
 8021374:	4580      	cmp	r8, r0
 8021376:	d13a      	bne.n	80213ee <_malloc_r+0xd2>
 8021378:	6821      	ldr	r1, [r4, #0]
 802137a:	3503      	adds	r5, #3
 802137c:	1a6d      	subs	r5, r5, r1
 802137e:	f025 0503 	bic.w	r5, r5, #3
 8021382:	3508      	adds	r5, #8
 8021384:	2d0c      	cmp	r5, #12
 8021386:	bf38      	it	cc
 8021388:	250c      	movcc	r5, #12
 802138a:	4629      	mov	r1, r5
 802138c:	4638      	mov	r0, r7
 802138e:	f7ff ffa5 	bl	80212dc <sbrk_aligned>
 8021392:	3001      	adds	r0, #1
 8021394:	d02b      	beq.n	80213ee <_malloc_r+0xd2>
 8021396:	6823      	ldr	r3, [r4, #0]
 8021398:	442b      	add	r3, r5
 802139a:	6023      	str	r3, [r4, #0]
 802139c:	e00e      	b.n	80213bc <_malloc_r+0xa0>
 802139e:	6822      	ldr	r2, [r4, #0]
 80213a0:	1b52      	subs	r2, r2, r5
 80213a2:	d41e      	bmi.n	80213e2 <_malloc_r+0xc6>
 80213a4:	2a0b      	cmp	r2, #11
 80213a6:	d916      	bls.n	80213d6 <_malloc_r+0xba>
 80213a8:	1961      	adds	r1, r4, r5
 80213aa:	42a3      	cmp	r3, r4
 80213ac:	6025      	str	r5, [r4, #0]
 80213ae:	bf18      	it	ne
 80213b0:	6059      	strne	r1, [r3, #4]
 80213b2:	6863      	ldr	r3, [r4, #4]
 80213b4:	bf08      	it	eq
 80213b6:	6031      	streq	r1, [r6, #0]
 80213b8:	5162      	str	r2, [r4, r5]
 80213ba:	604b      	str	r3, [r1, #4]
 80213bc:	4638      	mov	r0, r7
 80213be:	f104 060b 	add.w	r6, r4, #11
 80213c2:	f001 ffbd 	bl	8023340 <__malloc_unlock>
 80213c6:	f026 0607 	bic.w	r6, r6, #7
 80213ca:	1d23      	adds	r3, r4, #4
 80213cc:	1af2      	subs	r2, r6, r3
 80213ce:	d0b6      	beq.n	802133e <_malloc_r+0x22>
 80213d0:	1b9b      	subs	r3, r3, r6
 80213d2:	50a3      	str	r3, [r4, r2]
 80213d4:	e7b3      	b.n	802133e <_malloc_r+0x22>
 80213d6:	6862      	ldr	r2, [r4, #4]
 80213d8:	42a3      	cmp	r3, r4
 80213da:	bf0c      	ite	eq
 80213dc:	6032      	streq	r2, [r6, #0]
 80213de:	605a      	strne	r2, [r3, #4]
 80213e0:	e7ec      	b.n	80213bc <_malloc_r+0xa0>
 80213e2:	4623      	mov	r3, r4
 80213e4:	6864      	ldr	r4, [r4, #4]
 80213e6:	e7b2      	b.n	802134e <_malloc_r+0x32>
 80213e8:	4634      	mov	r4, r6
 80213ea:	6876      	ldr	r6, [r6, #4]
 80213ec:	e7b9      	b.n	8021362 <_malloc_r+0x46>
 80213ee:	230c      	movs	r3, #12
 80213f0:	603b      	str	r3, [r7, #0]
 80213f2:	4638      	mov	r0, r7
 80213f4:	f001 ffa4 	bl	8023340 <__malloc_unlock>
 80213f8:	e7a1      	b.n	802133e <_malloc_r+0x22>
 80213fa:	6025      	str	r5, [r4, #0]
 80213fc:	e7de      	b.n	80213bc <_malloc_r+0xa0>
 80213fe:	bf00      	nop
 8021400:	24014270 	.word	0x24014270

08021404 <__sfputc_r>:
 8021404:	6893      	ldr	r3, [r2, #8]
 8021406:	3b01      	subs	r3, #1
 8021408:	2b00      	cmp	r3, #0
 802140a:	b410      	push	{r4}
 802140c:	6093      	str	r3, [r2, #8]
 802140e:	da08      	bge.n	8021422 <__sfputc_r+0x1e>
 8021410:	6994      	ldr	r4, [r2, #24]
 8021412:	42a3      	cmp	r3, r4
 8021414:	db01      	blt.n	802141a <__sfputc_r+0x16>
 8021416:	290a      	cmp	r1, #10
 8021418:	d103      	bne.n	8021422 <__sfputc_r+0x1e>
 802141a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802141e:	f000 bf4b 	b.w	80222b8 <__swbuf_r>
 8021422:	6813      	ldr	r3, [r2, #0]
 8021424:	1c58      	adds	r0, r3, #1
 8021426:	6010      	str	r0, [r2, #0]
 8021428:	7019      	strb	r1, [r3, #0]
 802142a:	4608      	mov	r0, r1
 802142c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021430:	4770      	bx	lr

08021432 <__sfputs_r>:
 8021432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021434:	4606      	mov	r6, r0
 8021436:	460f      	mov	r7, r1
 8021438:	4614      	mov	r4, r2
 802143a:	18d5      	adds	r5, r2, r3
 802143c:	42ac      	cmp	r4, r5
 802143e:	d101      	bne.n	8021444 <__sfputs_r+0x12>
 8021440:	2000      	movs	r0, #0
 8021442:	e007      	b.n	8021454 <__sfputs_r+0x22>
 8021444:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021448:	463a      	mov	r2, r7
 802144a:	4630      	mov	r0, r6
 802144c:	f7ff ffda 	bl	8021404 <__sfputc_r>
 8021450:	1c43      	adds	r3, r0, #1
 8021452:	d1f3      	bne.n	802143c <__sfputs_r+0xa>
 8021454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021458 <_vfiprintf_r>:
 8021458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802145c:	460d      	mov	r5, r1
 802145e:	b09d      	sub	sp, #116	; 0x74
 8021460:	4614      	mov	r4, r2
 8021462:	4698      	mov	r8, r3
 8021464:	4606      	mov	r6, r0
 8021466:	b118      	cbz	r0, 8021470 <_vfiprintf_r+0x18>
 8021468:	6983      	ldr	r3, [r0, #24]
 802146a:	b90b      	cbnz	r3, 8021470 <_vfiprintf_r+0x18>
 802146c:	f7ff fdc4 	bl	8020ff8 <__sinit>
 8021470:	4b89      	ldr	r3, [pc, #548]	; (8021698 <_vfiprintf_r+0x240>)
 8021472:	429d      	cmp	r5, r3
 8021474:	d11b      	bne.n	80214ae <_vfiprintf_r+0x56>
 8021476:	6875      	ldr	r5, [r6, #4]
 8021478:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802147a:	07d9      	lsls	r1, r3, #31
 802147c:	d405      	bmi.n	802148a <_vfiprintf_r+0x32>
 802147e:	89ab      	ldrh	r3, [r5, #12]
 8021480:	059a      	lsls	r2, r3, #22
 8021482:	d402      	bmi.n	802148a <_vfiprintf_r+0x32>
 8021484:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021486:	f7ff fe8c 	bl	80211a2 <__retarget_lock_acquire_recursive>
 802148a:	89ab      	ldrh	r3, [r5, #12]
 802148c:	071b      	lsls	r3, r3, #28
 802148e:	d501      	bpl.n	8021494 <_vfiprintf_r+0x3c>
 8021490:	692b      	ldr	r3, [r5, #16]
 8021492:	b9eb      	cbnz	r3, 80214d0 <_vfiprintf_r+0x78>
 8021494:	4629      	mov	r1, r5
 8021496:	4630      	mov	r0, r6
 8021498:	f000 ff72 	bl	8022380 <__swsetup_r>
 802149c:	b1c0      	cbz	r0, 80214d0 <_vfiprintf_r+0x78>
 802149e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80214a0:	07dc      	lsls	r4, r3, #31
 80214a2:	d50e      	bpl.n	80214c2 <_vfiprintf_r+0x6a>
 80214a4:	f04f 30ff 	mov.w	r0, #4294967295
 80214a8:	b01d      	add	sp, #116	; 0x74
 80214aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80214ae:	4b7b      	ldr	r3, [pc, #492]	; (802169c <_vfiprintf_r+0x244>)
 80214b0:	429d      	cmp	r5, r3
 80214b2:	d101      	bne.n	80214b8 <_vfiprintf_r+0x60>
 80214b4:	68b5      	ldr	r5, [r6, #8]
 80214b6:	e7df      	b.n	8021478 <_vfiprintf_r+0x20>
 80214b8:	4b79      	ldr	r3, [pc, #484]	; (80216a0 <_vfiprintf_r+0x248>)
 80214ba:	429d      	cmp	r5, r3
 80214bc:	bf08      	it	eq
 80214be:	68f5      	ldreq	r5, [r6, #12]
 80214c0:	e7da      	b.n	8021478 <_vfiprintf_r+0x20>
 80214c2:	89ab      	ldrh	r3, [r5, #12]
 80214c4:	0598      	lsls	r0, r3, #22
 80214c6:	d4ed      	bmi.n	80214a4 <_vfiprintf_r+0x4c>
 80214c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80214ca:	f7ff fe6b 	bl	80211a4 <__retarget_lock_release_recursive>
 80214ce:	e7e9      	b.n	80214a4 <_vfiprintf_r+0x4c>
 80214d0:	2300      	movs	r3, #0
 80214d2:	9309      	str	r3, [sp, #36]	; 0x24
 80214d4:	2320      	movs	r3, #32
 80214d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80214da:	f8cd 800c 	str.w	r8, [sp, #12]
 80214de:	2330      	movs	r3, #48	; 0x30
 80214e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80216a4 <_vfiprintf_r+0x24c>
 80214e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80214e8:	f04f 0901 	mov.w	r9, #1
 80214ec:	4623      	mov	r3, r4
 80214ee:	469a      	mov	sl, r3
 80214f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80214f4:	b10a      	cbz	r2, 80214fa <_vfiprintf_r+0xa2>
 80214f6:	2a25      	cmp	r2, #37	; 0x25
 80214f8:	d1f9      	bne.n	80214ee <_vfiprintf_r+0x96>
 80214fa:	ebba 0b04 	subs.w	fp, sl, r4
 80214fe:	d00b      	beq.n	8021518 <_vfiprintf_r+0xc0>
 8021500:	465b      	mov	r3, fp
 8021502:	4622      	mov	r2, r4
 8021504:	4629      	mov	r1, r5
 8021506:	4630      	mov	r0, r6
 8021508:	f7ff ff93 	bl	8021432 <__sfputs_r>
 802150c:	3001      	adds	r0, #1
 802150e:	f000 80aa 	beq.w	8021666 <_vfiprintf_r+0x20e>
 8021512:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021514:	445a      	add	r2, fp
 8021516:	9209      	str	r2, [sp, #36]	; 0x24
 8021518:	f89a 3000 	ldrb.w	r3, [sl]
 802151c:	2b00      	cmp	r3, #0
 802151e:	f000 80a2 	beq.w	8021666 <_vfiprintf_r+0x20e>
 8021522:	2300      	movs	r3, #0
 8021524:	f04f 32ff 	mov.w	r2, #4294967295
 8021528:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802152c:	f10a 0a01 	add.w	sl, sl, #1
 8021530:	9304      	str	r3, [sp, #16]
 8021532:	9307      	str	r3, [sp, #28]
 8021534:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021538:	931a      	str	r3, [sp, #104]	; 0x68
 802153a:	4654      	mov	r4, sl
 802153c:	2205      	movs	r2, #5
 802153e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021542:	4858      	ldr	r0, [pc, #352]	; (80216a4 <_vfiprintf_r+0x24c>)
 8021544:	f7de fed4 	bl	80002f0 <memchr>
 8021548:	9a04      	ldr	r2, [sp, #16]
 802154a:	b9d8      	cbnz	r0, 8021584 <_vfiprintf_r+0x12c>
 802154c:	06d1      	lsls	r1, r2, #27
 802154e:	bf44      	itt	mi
 8021550:	2320      	movmi	r3, #32
 8021552:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021556:	0713      	lsls	r3, r2, #28
 8021558:	bf44      	itt	mi
 802155a:	232b      	movmi	r3, #43	; 0x2b
 802155c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021560:	f89a 3000 	ldrb.w	r3, [sl]
 8021564:	2b2a      	cmp	r3, #42	; 0x2a
 8021566:	d015      	beq.n	8021594 <_vfiprintf_r+0x13c>
 8021568:	9a07      	ldr	r2, [sp, #28]
 802156a:	4654      	mov	r4, sl
 802156c:	2000      	movs	r0, #0
 802156e:	f04f 0c0a 	mov.w	ip, #10
 8021572:	4621      	mov	r1, r4
 8021574:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021578:	3b30      	subs	r3, #48	; 0x30
 802157a:	2b09      	cmp	r3, #9
 802157c:	d94e      	bls.n	802161c <_vfiprintf_r+0x1c4>
 802157e:	b1b0      	cbz	r0, 80215ae <_vfiprintf_r+0x156>
 8021580:	9207      	str	r2, [sp, #28]
 8021582:	e014      	b.n	80215ae <_vfiprintf_r+0x156>
 8021584:	eba0 0308 	sub.w	r3, r0, r8
 8021588:	fa09 f303 	lsl.w	r3, r9, r3
 802158c:	4313      	orrs	r3, r2
 802158e:	9304      	str	r3, [sp, #16]
 8021590:	46a2      	mov	sl, r4
 8021592:	e7d2      	b.n	802153a <_vfiprintf_r+0xe2>
 8021594:	9b03      	ldr	r3, [sp, #12]
 8021596:	1d19      	adds	r1, r3, #4
 8021598:	681b      	ldr	r3, [r3, #0]
 802159a:	9103      	str	r1, [sp, #12]
 802159c:	2b00      	cmp	r3, #0
 802159e:	bfbb      	ittet	lt
 80215a0:	425b      	neglt	r3, r3
 80215a2:	f042 0202 	orrlt.w	r2, r2, #2
 80215a6:	9307      	strge	r3, [sp, #28]
 80215a8:	9307      	strlt	r3, [sp, #28]
 80215aa:	bfb8      	it	lt
 80215ac:	9204      	strlt	r2, [sp, #16]
 80215ae:	7823      	ldrb	r3, [r4, #0]
 80215b0:	2b2e      	cmp	r3, #46	; 0x2e
 80215b2:	d10c      	bne.n	80215ce <_vfiprintf_r+0x176>
 80215b4:	7863      	ldrb	r3, [r4, #1]
 80215b6:	2b2a      	cmp	r3, #42	; 0x2a
 80215b8:	d135      	bne.n	8021626 <_vfiprintf_r+0x1ce>
 80215ba:	9b03      	ldr	r3, [sp, #12]
 80215bc:	1d1a      	adds	r2, r3, #4
 80215be:	681b      	ldr	r3, [r3, #0]
 80215c0:	9203      	str	r2, [sp, #12]
 80215c2:	2b00      	cmp	r3, #0
 80215c4:	bfb8      	it	lt
 80215c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80215ca:	3402      	adds	r4, #2
 80215cc:	9305      	str	r3, [sp, #20]
 80215ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80216b4 <_vfiprintf_r+0x25c>
 80215d2:	7821      	ldrb	r1, [r4, #0]
 80215d4:	2203      	movs	r2, #3
 80215d6:	4650      	mov	r0, sl
 80215d8:	f7de fe8a 	bl	80002f0 <memchr>
 80215dc:	b140      	cbz	r0, 80215f0 <_vfiprintf_r+0x198>
 80215de:	2340      	movs	r3, #64	; 0x40
 80215e0:	eba0 000a 	sub.w	r0, r0, sl
 80215e4:	fa03 f000 	lsl.w	r0, r3, r0
 80215e8:	9b04      	ldr	r3, [sp, #16]
 80215ea:	4303      	orrs	r3, r0
 80215ec:	3401      	adds	r4, #1
 80215ee:	9304      	str	r3, [sp, #16]
 80215f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80215f4:	482c      	ldr	r0, [pc, #176]	; (80216a8 <_vfiprintf_r+0x250>)
 80215f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80215fa:	2206      	movs	r2, #6
 80215fc:	f7de fe78 	bl	80002f0 <memchr>
 8021600:	2800      	cmp	r0, #0
 8021602:	d03f      	beq.n	8021684 <_vfiprintf_r+0x22c>
 8021604:	4b29      	ldr	r3, [pc, #164]	; (80216ac <_vfiprintf_r+0x254>)
 8021606:	bb1b      	cbnz	r3, 8021650 <_vfiprintf_r+0x1f8>
 8021608:	9b03      	ldr	r3, [sp, #12]
 802160a:	3307      	adds	r3, #7
 802160c:	f023 0307 	bic.w	r3, r3, #7
 8021610:	3308      	adds	r3, #8
 8021612:	9303      	str	r3, [sp, #12]
 8021614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021616:	443b      	add	r3, r7
 8021618:	9309      	str	r3, [sp, #36]	; 0x24
 802161a:	e767      	b.n	80214ec <_vfiprintf_r+0x94>
 802161c:	fb0c 3202 	mla	r2, ip, r2, r3
 8021620:	460c      	mov	r4, r1
 8021622:	2001      	movs	r0, #1
 8021624:	e7a5      	b.n	8021572 <_vfiprintf_r+0x11a>
 8021626:	2300      	movs	r3, #0
 8021628:	3401      	adds	r4, #1
 802162a:	9305      	str	r3, [sp, #20]
 802162c:	4619      	mov	r1, r3
 802162e:	f04f 0c0a 	mov.w	ip, #10
 8021632:	4620      	mov	r0, r4
 8021634:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021638:	3a30      	subs	r2, #48	; 0x30
 802163a:	2a09      	cmp	r2, #9
 802163c:	d903      	bls.n	8021646 <_vfiprintf_r+0x1ee>
 802163e:	2b00      	cmp	r3, #0
 8021640:	d0c5      	beq.n	80215ce <_vfiprintf_r+0x176>
 8021642:	9105      	str	r1, [sp, #20]
 8021644:	e7c3      	b.n	80215ce <_vfiprintf_r+0x176>
 8021646:	fb0c 2101 	mla	r1, ip, r1, r2
 802164a:	4604      	mov	r4, r0
 802164c:	2301      	movs	r3, #1
 802164e:	e7f0      	b.n	8021632 <_vfiprintf_r+0x1da>
 8021650:	ab03      	add	r3, sp, #12
 8021652:	9300      	str	r3, [sp, #0]
 8021654:	462a      	mov	r2, r5
 8021656:	4b16      	ldr	r3, [pc, #88]	; (80216b0 <_vfiprintf_r+0x258>)
 8021658:	a904      	add	r1, sp, #16
 802165a:	4630      	mov	r0, r6
 802165c:	f000 f8bc 	bl	80217d8 <_printf_float>
 8021660:	4607      	mov	r7, r0
 8021662:	1c78      	adds	r0, r7, #1
 8021664:	d1d6      	bne.n	8021614 <_vfiprintf_r+0x1bc>
 8021666:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021668:	07d9      	lsls	r1, r3, #31
 802166a:	d405      	bmi.n	8021678 <_vfiprintf_r+0x220>
 802166c:	89ab      	ldrh	r3, [r5, #12]
 802166e:	059a      	lsls	r2, r3, #22
 8021670:	d402      	bmi.n	8021678 <_vfiprintf_r+0x220>
 8021672:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021674:	f7ff fd96 	bl	80211a4 <__retarget_lock_release_recursive>
 8021678:	89ab      	ldrh	r3, [r5, #12]
 802167a:	065b      	lsls	r3, r3, #25
 802167c:	f53f af12 	bmi.w	80214a4 <_vfiprintf_r+0x4c>
 8021680:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021682:	e711      	b.n	80214a8 <_vfiprintf_r+0x50>
 8021684:	ab03      	add	r3, sp, #12
 8021686:	9300      	str	r3, [sp, #0]
 8021688:	462a      	mov	r2, r5
 802168a:	4b09      	ldr	r3, [pc, #36]	; (80216b0 <_vfiprintf_r+0x258>)
 802168c:	a904      	add	r1, sp, #16
 802168e:	4630      	mov	r0, r6
 8021690:	f000 fb2e 	bl	8021cf0 <_printf_i>
 8021694:	e7e4      	b.n	8021660 <_vfiprintf_r+0x208>
 8021696:	bf00      	nop
 8021698:	08026044 	.word	0x08026044
 802169c:	08026064 	.word	0x08026064
 80216a0:	08026024 	.word	0x08026024
 80216a4:	08026088 	.word	0x08026088
 80216a8:	08026092 	.word	0x08026092
 80216ac:	080217d9 	.word	0x080217d9
 80216b0:	08021433 	.word	0x08021433
 80216b4:	0802608e 	.word	0x0802608e

080216b8 <__cvt>:
 80216b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80216ba:	ed2d 8b02 	vpush	{d8}
 80216be:	eeb0 8b40 	vmov.f64	d8, d0
 80216c2:	b085      	sub	sp, #20
 80216c4:	4617      	mov	r7, r2
 80216c6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80216c8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80216ca:	ee18 2a90 	vmov	r2, s17
 80216ce:	f025 0520 	bic.w	r5, r5, #32
 80216d2:	2a00      	cmp	r2, #0
 80216d4:	bfb6      	itet	lt
 80216d6:	222d      	movlt	r2, #45	; 0x2d
 80216d8:	2200      	movge	r2, #0
 80216da:	eeb1 8b40 	vneglt.f64	d8, d0
 80216de:	2d46      	cmp	r5, #70	; 0x46
 80216e0:	460c      	mov	r4, r1
 80216e2:	701a      	strb	r2, [r3, #0]
 80216e4:	d004      	beq.n	80216f0 <__cvt+0x38>
 80216e6:	2d45      	cmp	r5, #69	; 0x45
 80216e8:	d100      	bne.n	80216ec <__cvt+0x34>
 80216ea:	3401      	adds	r4, #1
 80216ec:	2102      	movs	r1, #2
 80216ee:	e000      	b.n	80216f2 <__cvt+0x3a>
 80216f0:	2103      	movs	r1, #3
 80216f2:	ab03      	add	r3, sp, #12
 80216f4:	9301      	str	r3, [sp, #4]
 80216f6:	ab02      	add	r3, sp, #8
 80216f8:	9300      	str	r3, [sp, #0]
 80216fa:	4622      	mov	r2, r4
 80216fc:	4633      	mov	r3, r6
 80216fe:	eeb0 0b48 	vmov.f64	d0, d8
 8021702:	f000 ff65 	bl	80225d0 <_dtoa_r>
 8021706:	2d47      	cmp	r5, #71	; 0x47
 8021708:	d101      	bne.n	802170e <__cvt+0x56>
 802170a:	07fb      	lsls	r3, r7, #31
 802170c:	d51a      	bpl.n	8021744 <__cvt+0x8c>
 802170e:	2d46      	cmp	r5, #70	; 0x46
 8021710:	eb00 0204 	add.w	r2, r0, r4
 8021714:	d10c      	bne.n	8021730 <__cvt+0x78>
 8021716:	7803      	ldrb	r3, [r0, #0]
 8021718:	2b30      	cmp	r3, #48	; 0x30
 802171a:	d107      	bne.n	802172c <__cvt+0x74>
 802171c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8021720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021724:	bf1c      	itt	ne
 8021726:	f1c4 0401 	rsbne	r4, r4, #1
 802172a:	6034      	strne	r4, [r6, #0]
 802172c:	6833      	ldr	r3, [r6, #0]
 802172e:	441a      	add	r2, r3
 8021730:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8021734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021738:	bf08      	it	eq
 802173a:	9203      	streq	r2, [sp, #12]
 802173c:	2130      	movs	r1, #48	; 0x30
 802173e:	9b03      	ldr	r3, [sp, #12]
 8021740:	4293      	cmp	r3, r2
 8021742:	d307      	bcc.n	8021754 <__cvt+0x9c>
 8021744:	9b03      	ldr	r3, [sp, #12]
 8021746:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021748:	1a1b      	subs	r3, r3, r0
 802174a:	6013      	str	r3, [r2, #0]
 802174c:	b005      	add	sp, #20
 802174e:	ecbd 8b02 	vpop	{d8}
 8021752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021754:	1c5c      	adds	r4, r3, #1
 8021756:	9403      	str	r4, [sp, #12]
 8021758:	7019      	strb	r1, [r3, #0]
 802175a:	e7f0      	b.n	802173e <__cvt+0x86>

0802175c <__exponent>:
 802175c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802175e:	4603      	mov	r3, r0
 8021760:	2900      	cmp	r1, #0
 8021762:	bfb8      	it	lt
 8021764:	4249      	neglt	r1, r1
 8021766:	f803 2b02 	strb.w	r2, [r3], #2
 802176a:	bfb4      	ite	lt
 802176c:	222d      	movlt	r2, #45	; 0x2d
 802176e:	222b      	movge	r2, #43	; 0x2b
 8021770:	2909      	cmp	r1, #9
 8021772:	7042      	strb	r2, [r0, #1]
 8021774:	dd2a      	ble.n	80217cc <__exponent+0x70>
 8021776:	f10d 0407 	add.w	r4, sp, #7
 802177a:	46a4      	mov	ip, r4
 802177c:	270a      	movs	r7, #10
 802177e:	46a6      	mov	lr, r4
 8021780:	460a      	mov	r2, r1
 8021782:	fb91 f6f7 	sdiv	r6, r1, r7
 8021786:	fb07 1516 	mls	r5, r7, r6, r1
 802178a:	3530      	adds	r5, #48	; 0x30
 802178c:	2a63      	cmp	r2, #99	; 0x63
 802178e:	f104 34ff 	add.w	r4, r4, #4294967295
 8021792:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8021796:	4631      	mov	r1, r6
 8021798:	dcf1      	bgt.n	802177e <__exponent+0x22>
 802179a:	3130      	adds	r1, #48	; 0x30
 802179c:	f1ae 0502 	sub.w	r5, lr, #2
 80217a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80217a4:	1c44      	adds	r4, r0, #1
 80217a6:	4629      	mov	r1, r5
 80217a8:	4561      	cmp	r1, ip
 80217aa:	d30a      	bcc.n	80217c2 <__exponent+0x66>
 80217ac:	f10d 0209 	add.w	r2, sp, #9
 80217b0:	eba2 020e 	sub.w	r2, r2, lr
 80217b4:	4565      	cmp	r5, ip
 80217b6:	bf88      	it	hi
 80217b8:	2200      	movhi	r2, #0
 80217ba:	4413      	add	r3, r2
 80217bc:	1a18      	subs	r0, r3, r0
 80217be:	b003      	add	sp, #12
 80217c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80217c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80217c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80217ca:	e7ed      	b.n	80217a8 <__exponent+0x4c>
 80217cc:	2330      	movs	r3, #48	; 0x30
 80217ce:	3130      	adds	r1, #48	; 0x30
 80217d0:	7083      	strb	r3, [r0, #2]
 80217d2:	70c1      	strb	r1, [r0, #3]
 80217d4:	1d03      	adds	r3, r0, #4
 80217d6:	e7f1      	b.n	80217bc <__exponent+0x60>

080217d8 <_printf_float>:
 80217d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80217dc:	b08b      	sub	sp, #44	; 0x2c
 80217de:	460c      	mov	r4, r1
 80217e0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80217e4:	4616      	mov	r6, r2
 80217e6:	461f      	mov	r7, r3
 80217e8:	4605      	mov	r5, r0
 80217ea:	f001 fd27 	bl	802323c <_localeconv_r>
 80217ee:	f8d0 b000 	ldr.w	fp, [r0]
 80217f2:	4658      	mov	r0, fp
 80217f4:	f7de fd74 	bl	80002e0 <strlen>
 80217f8:	2300      	movs	r3, #0
 80217fa:	9308      	str	r3, [sp, #32]
 80217fc:	f8d8 3000 	ldr.w	r3, [r8]
 8021800:	f894 9018 	ldrb.w	r9, [r4, #24]
 8021804:	6822      	ldr	r2, [r4, #0]
 8021806:	3307      	adds	r3, #7
 8021808:	f023 0307 	bic.w	r3, r3, #7
 802180c:	f103 0108 	add.w	r1, r3, #8
 8021810:	f8c8 1000 	str.w	r1, [r8]
 8021814:	4682      	mov	sl, r0
 8021816:	e9d3 0100 	ldrd	r0, r1, [r3]
 802181a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 802181e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8021a80 <_printf_float+0x2a8>
 8021822:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8021826:	eeb0 6bc0 	vabs.f64	d6, d0
 802182a:	eeb4 6b47 	vcmp.f64	d6, d7
 802182e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021832:	dd24      	ble.n	802187e <_printf_float+0xa6>
 8021834:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8021838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802183c:	d502      	bpl.n	8021844 <_printf_float+0x6c>
 802183e:	232d      	movs	r3, #45	; 0x2d
 8021840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021844:	4b90      	ldr	r3, [pc, #576]	; (8021a88 <_printf_float+0x2b0>)
 8021846:	4891      	ldr	r0, [pc, #580]	; (8021a8c <_printf_float+0x2b4>)
 8021848:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 802184c:	bf94      	ite	ls
 802184e:	4698      	movls	r8, r3
 8021850:	4680      	movhi	r8, r0
 8021852:	2303      	movs	r3, #3
 8021854:	6123      	str	r3, [r4, #16]
 8021856:	f022 0204 	bic.w	r2, r2, #4
 802185a:	2300      	movs	r3, #0
 802185c:	6022      	str	r2, [r4, #0]
 802185e:	9304      	str	r3, [sp, #16]
 8021860:	9700      	str	r7, [sp, #0]
 8021862:	4633      	mov	r3, r6
 8021864:	aa09      	add	r2, sp, #36	; 0x24
 8021866:	4621      	mov	r1, r4
 8021868:	4628      	mov	r0, r5
 802186a:	f000 f9d3 	bl	8021c14 <_printf_common>
 802186e:	3001      	adds	r0, #1
 8021870:	f040 808a 	bne.w	8021988 <_printf_float+0x1b0>
 8021874:	f04f 30ff 	mov.w	r0, #4294967295
 8021878:	b00b      	add	sp, #44	; 0x2c
 802187a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802187e:	eeb4 0b40 	vcmp.f64	d0, d0
 8021882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021886:	d709      	bvc.n	802189c <_printf_float+0xc4>
 8021888:	ee10 3a90 	vmov	r3, s1
 802188c:	2b00      	cmp	r3, #0
 802188e:	bfbc      	itt	lt
 8021890:	232d      	movlt	r3, #45	; 0x2d
 8021892:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8021896:	487e      	ldr	r0, [pc, #504]	; (8021a90 <_printf_float+0x2b8>)
 8021898:	4b7e      	ldr	r3, [pc, #504]	; (8021a94 <_printf_float+0x2bc>)
 802189a:	e7d5      	b.n	8021848 <_printf_float+0x70>
 802189c:	6863      	ldr	r3, [r4, #4]
 802189e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80218a2:	9104      	str	r1, [sp, #16]
 80218a4:	1c59      	adds	r1, r3, #1
 80218a6:	d13c      	bne.n	8021922 <_printf_float+0x14a>
 80218a8:	2306      	movs	r3, #6
 80218aa:	6063      	str	r3, [r4, #4]
 80218ac:	2300      	movs	r3, #0
 80218ae:	9303      	str	r3, [sp, #12]
 80218b0:	ab08      	add	r3, sp, #32
 80218b2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80218b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80218ba:	ab07      	add	r3, sp, #28
 80218bc:	6861      	ldr	r1, [r4, #4]
 80218be:	9300      	str	r3, [sp, #0]
 80218c0:	6022      	str	r2, [r4, #0]
 80218c2:	f10d 031b 	add.w	r3, sp, #27
 80218c6:	4628      	mov	r0, r5
 80218c8:	f7ff fef6 	bl	80216b8 <__cvt>
 80218cc:	9b04      	ldr	r3, [sp, #16]
 80218ce:	9907      	ldr	r1, [sp, #28]
 80218d0:	2b47      	cmp	r3, #71	; 0x47
 80218d2:	4680      	mov	r8, r0
 80218d4:	d108      	bne.n	80218e8 <_printf_float+0x110>
 80218d6:	1cc8      	adds	r0, r1, #3
 80218d8:	db02      	blt.n	80218e0 <_printf_float+0x108>
 80218da:	6863      	ldr	r3, [r4, #4]
 80218dc:	4299      	cmp	r1, r3
 80218de:	dd41      	ble.n	8021964 <_printf_float+0x18c>
 80218e0:	f1a9 0902 	sub.w	r9, r9, #2
 80218e4:	fa5f f989 	uxtb.w	r9, r9
 80218e8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80218ec:	d820      	bhi.n	8021930 <_printf_float+0x158>
 80218ee:	3901      	subs	r1, #1
 80218f0:	464a      	mov	r2, r9
 80218f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80218f6:	9107      	str	r1, [sp, #28]
 80218f8:	f7ff ff30 	bl	802175c <__exponent>
 80218fc:	9a08      	ldr	r2, [sp, #32]
 80218fe:	9004      	str	r0, [sp, #16]
 8021900:	1813      	adds	r3, r2, r0
 8021902:	2a01      	cmp	r2, #1
 8021904:	6123      	str	r3, [r4, #16]
 8021906:	dc02      	bgt.n	802190e <_printf_float+0x136>
 8021908:	6822      	ldr	r2, [r4, #0]
 802190a:	07d2      	lsls	r2, r2, #31
 802190c:	d501      	bpl.n	8021912 <_printf_float+0x13a>
 802190e:	3301      	adds	r3, #1
 8021910:	6123      	str	r3, [r4, #16]
 8021912:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8021916:	2b00      	cmp	r3, #0
 8021918:	d0a2      	beq.n	8021860 <_printf_float+0x88>
 802191a:	232d      	movs	r3, #45	; 0x2d
 802191c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021920:	e79e      	b.n	8021860 <_printf_float+0x88>
 8021922:	9904      	ldr	r1, [sp, #16]
 8021924:	2947      	cmp	r1, #71	; 0x47
 8021926:	d1c1      	bne.n	80218ac <_printf_float+0xd4>
 8021928:	2b00      	cmp	r3, #0
 802192a:	d1bf      	bne.n	80218ac <_printf_float+0xd4>
 802192c:	2301      	movs	r3, #1
 802192e:	e7bc      	b.n	80218aa <_printf_float+0xd2>
 8021930:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8021934:	d118      	bne.n	8021968 <_printf_float+0x190>
 8021936:	2900      	cmp	r1, #0
 8021938:	6863      	ldr	r3, [r4, #4]
 802193a:	dd0b      	ble.n	8021954 <_printf_float+0x17c>
 802193c:	6121      	str	r1, [r4, #16]
 802193e:	b913      	cbnz	r3, 8021946 <_printf_float+0x16e>
 8021940:	6822      	ldr	r2, [r4, #0]
 8021942:	07d0      	lsls	r0, r2, #31
 8021944:	d502      	bpl.n	802194c <_printf_float+0x174>
 8021946:	3301      	adds	r3, #1
 8021948:	440b      	add	r3, r1
 802194a:	6123      	str	r3, [r4, #16]
 802194c:	2300      	movs	r3, #0
 802194e:	65a1      	str	r1, [r4, #88]	; 0x58
 8021950:	9304      	str	r3, [sp, #16]
 8021952:	e7de      	b.n	8021912 <_printf_float+0x13a>
 8021954:	b913      	cbnz	r3, 802195c <_printf_float+0x184>
 8021956:	6822      	ldr	r2, [r4, #0]
 8021958:	07d2      	lsls	r2, r2, #31
 802195a:	d501      	bpl.n	8021960 <_printf_float+0x188>
 802195c:	3302      	adds	r3, #2
 802195e:	e7f4      	b.n	802194a <_printf_float+0x172>
 8021960:	2301      	movs	r3, #1
 8021962:	e7f2      	b.n	802194a <_printf_float+0x172>
 8021964:	f04f 0967 	mov.w	r9, #103	; 0x67
 8021968:	9b08      	ldr	r3, [sp, #32]
 802196a:	4299      	cmp	r1, r3
 802196c:	db05      	blt.n	802197a <_printf_float+0x1a2>
 802196e:	6823      	ldr	r3, [r4, #0]
 8021970:	6121      	str	r1, [r4, #16]
 8021972:	07d8      	lsls	r0, r3, #31
 8021974:	d5ea      	bpl.n	802194c <_printf_float+0x174>
 8021976:	1c4b      	adds	r3, r1, #1
 8021978:	e7e7      	b.n	802194a <_printf_float+0x172>
 802197a:	2900      	cmp	r1, #0
 802197c:	bfd4      	ite	le
 802197e:	f1c1 0202 	rsble	r2, r1, #2
 8021982:	2201      	movgt	r2, #1
 8021984:	4413      	add	r3, r2
 8021986:	e7e0      	b.n	802194a <_printf_float+0x172>
 8021988:	6823      	ldr	r3, [r4, #0]
 802198a:	055a      	lsls	r2, r3, #21
 802198c:	d407      	bmi.n	802199e <_printf_float+0x1c6>
 802198e:	6923      	ldr	r3, [r4, #16]
 8021990:	4642      	mov	r2, r8
 8021992:	4631      	mov	r1, r6
 8021994:	4628      	mov	r0, r5
 8021996:	47b8      	blx	r7
 8021998:	3001      	adds	r0, #1
 802199a:	d12a      	bne.n	80219f2 <_printf_float+0x21a>
 802199c:	e76a      	b.n	8021874 <_printf_float+0x9c>
 802199e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80219a2:	f240 80e2 	bls.w	8021b6a <_printf_float+0x392>
 80219a6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80219aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80219ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80219b2:	d133      	bne.n	8021a1c <_printf_float+0x244>
 80219b4:	4a38      	ldr	r2, [pc, #224]	; (8021a98 <_printf_float+0x2c0>)
 80219b6:	2301      	movs	r3, #1
 80219b8:	4631      	mov	r1, r6
 80219ba:	4628      	mov	r0, r5
 80219bc:	47b8      	blx	r7
 80219be:	3001      	adds	r0, #1
 80219c0:	f43f af58 	beq.w	8021874 <_printf_float+0x9c>
 80219c4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80219c8:	429a      	cmp	r2, r3
 80219ca:	db02      	blt.n	80219d2 <_printf_float+0x1fa>
 80219cc:	6823      	ldr	r3, [r4, #0]
 80219ce:	07d8      	lsls	r0, r3, #31
 80219d0:	d50f      	bpl.n	80219f2 <_printf_float+0x21a>
 80219d2:	4653      	mov	r3, sl
 80219d4:	465a      	mov	r2, fp
 80219d6:	4631      	mov	r1, r6
 80219d8:	4628      	mov	r0, r5
 80219da:	47b8      	blx	r7
 80219dc:	3001      	adds	r0, #1
 80219de:	f43f af49 	beq.w	8021874 <_printf_float+0x9c>
 80219e2:	f04f 0800 	mov.w	r8, #0
 80219e6:	f104 091a 	add.w	r9, r4, #26
 80219ea:	9b08      	ldr	r3, [sp, #32]
 80219ec:	3b01      	subs	r3, #1
 80219ee:	4543      	cmp	r3, r8
 80219f0:	dc09      	bgt.n	8021a06 <_printf_float+0x22e>
 80219f2:	6823      	ldr	r3, [r4, #0]
 80219f4:	079b      	lsls	r3, r3, #30
 80219f6:	f100 8108 	bmi.w	8021c0a <_printf_float+0x432>
 80219fa:	68e0      	ldr	r0, [r4, #12]
 80219fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80219fe:	4298      	cmp	r0, r3
 8021a00:	bfb8      	it	lt
 8021a02:	4618      	movlt	r0, r3
 8021a04:	e738      	b.n	8021878 <_printf_float+0xa0>
 8021a06:	2301      	movs	r3, #1
 8021a08:	464a      	mov	r2, r9
 8021a0a:	4631      	mov	r1, r6
 8021a0c:	4628      	mov	r0, r5
 8021a0e:	47b8      	blx	r7
 8021a10:	3001      	adds	r0, #1
 8021a12:	f43f af2f 	beq.w	8021874 <_printf_float+0x9c>
 8021a16:	f108 0801 	add.w	r8, r8, #1
 8021a1a:	e7e6      	b.n	80219ea <_printf_float+0x212>
 8021a1c:	9b07      	ldr	r3, [sp, #28]
 8021a1e:	2b00      	cmp	r3, #0
 8021a20:	dc3c      	bgt.n	8021a9c <_printf_float+0x2c4>
 8021a22:	4a1d      	ldr	r2, [pc, #116]	; (8021a98 <_printf_float+0x2c0>)
 8021a24:	2301      	movs	r3, #1
 8021a26:	4631      	mov	r1, r6
 8021a28:	4628      	mov	r0, r5
 8021a2a:	47b8      	blx	r7
 8021a2c:	3001      	adds	r0, #1
 8021a2e:	f43f af21 	beq.w	8021874 <_printf_float+0x9c>
 8021a32:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8021a36:	4313      	orrs	r3, r2
 8021a38:	d102      	bne.n	8021a40 <_printf_float+0x268>
 8021a3a:	6823      	ldr	r3, [r4, #0]
 8021a3c:	07d9      	lsls	r1, r3, #31
 8021a3e:	d5d8      	bpl.n	80219f2 <_printf_float+0x21a>
 8021a40:	4653      	mov	r3, sl
 8021a42:	465a      	mov	r2, fp
 8021a44:	4631      	mov	r1, r6
 8021a46:	4628      	mov	r0, r5
 8021a48:	47b8      	blx	r7
 8021a4a:	3001      	adds	r0, #1
 8021a4c:	f43f af12 	beq.w	8021874 <_printf_float+0x9c>
 8021a50:	f04f 0900 	mov.w	r9, #0
 8021a54:	f104 0a1a 	add.w	sl, r4, #26
 8021a58:	9b07      	ldr	r3, [sp, #28]
 8021a5a:	425b      	negs	r3, r3
 8021a5c:	454b      	cmp	r3, r9
 8021a5e:	dc01      	bgt.n	8021a64 <_printf_float+0x28c>
 8021a60:	9b08      	ldr	r3, [sp, #32]
 8021a62:	e795      	b.n	8021990 <_printf_float+0x1b8>
 8021a64:	2301      	movs	r3, #1
 8021a66:	4652      	mov	r2, sl
 8021a68:	4631      	mov	r1, r6
 8021a6a:	4628      	mov	r0, r5
 8021a6c:	47b8      	blx	r7
 8021a6e:	3001      	adds	r0, #1
 8021a70:	f43f af00 	beq.w	8021874 <_printf_float+0x9c>
 8021a74:	f109 0901 	add.w	r9, r9, #1
 8021a78:	e7ee      	b.n	8021a58 <_printf_float+0x280>
 8021a7a:	bf00      	nop
 8021a7c:	f3af 8000 	nop.w
 8021a80:	ffffffff 	.word	0xffffffff
 8021a84:	7fefffff 	.word	0x7fefffff
 8021a88:	08026099 	.word	0x08026099
 8021a8c:	0802609d 	.word	0x0802609d
 8021a90:	080260a5 	.word	0x080260a5
 8021a94:	080260a1 	.word	0x080260a1
 8021a98:	080260a9 	.word	0x080260a9
 8021a9c:	9a08      	ldr	r2, [sp, #32]
 8021a9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8021aa0:	429a      	cmp	r2, r3
 8021aa2:	bfa8      	it	ge
 8021aa4:	461a      	movge	r2, r3
 8021aa6:	2a00      	cmp	r2, #0
 8021aa8:	4691      	mov	r9, r2
 8021aaa:	dc38      	bgt.n	8021b1e <_printf_float+0x346>
 8021aac:	2300      	movs	r3, #0
 8021aae:	9305      	str	r3, [sp, #20]
 8021ab0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8021ab4:	f104 021a 	add.w	r2, r4, #26
 8021ab8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8021aba:	9905      	ldr	r1, [sp, #20]
 8021abc:	9304      	str	r3, [sp, #16]
 8021abe:	eba3 0309 	sub.w	r3, r3, r9
 8021ac2:	428b      	cmp	r3, r1
 8021ac4:	dc33      	bgt.n	8021b2e <_printf_float+0x356>
 8021ac6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8021aca:	429a      	cmp	r2, r3
 8021acc:	db3c      	blt.n	8021b48 <_printf_float+0x370>
 8021ace:	6823      	ldr	r3, [r4, #0]
 8021ad0:	07da      	lsls	r2, r3, #31
 8021ad2:	d439      	bmi.n	8021b48 <_printf_float+0x370>
 8021ad4:	9b08      	ldr	r3, [sp, #32]
 8021ad6:	9a04      	ldr	r2, [sp, #16]
 8021ad8:	9907      	ldr	r1, [sp, #28]
 8021ada:	1a9a      	subs	r2, r3, r2
 8021adc:	eba3 0901 	sub.w	r9, r3, r1
 8021ae0:	4591      	cmp	r9, r2
 8021ae2:	bfa8      	it	ge
 8021ae4:	4691      	movge	r9, r2
 8021ae6:	f1b9 0f00 	cmp.w	r9, #0
 8021aea:	dc35      	bgt.n	8021b58 <_printf_float+0x380>
 8021aec:	f04f 0800 	mov.w	r8, #0
 8021af0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8021af4:	f104 0a1a 	add.w	sl, r4, #26
 8021af8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8021afc:	1a9b      	subs	r3, r3, r2
 8021afe:	eba3 0309 	sub.w	r3, r3, r9
 8021b02:	4543      	cmp	r3, r8
 8021b04:	f77f af75 	ble.w	80219f2 <_printf_float+0x21a>
 8021b08:	2301      	movs	r3, #1
 8021b0a:	4652      	mov	r2, sl
 8021b0c:	4631      	mov	r1, r6
 8021b0e:	4628      	mov	r0, r5
 8021b10:	47b8      	blx	r7
 8021b12:	3001      	adds	r0, #1
 8021b14:	f43f aeae 	beq.w	8021874 <_printf_float+0x9c>
 8021b18:	f108 0801 	add.w	r8, r8, #1
 8021b1c:	e7ec      	b.n	8021af8 <_printf_float+0x320>
 8021b1e:	4613      	mov	r3, r2
 8021b20:	4631      	mov	r1, r6
 8021b22:	4642      	mov	r2, r8
 8021b24:	4628      	mov	r0, r5
 8021b26:	47b8      	blx	r7
 8021b28:	3001      	adds	r0, #1
 8021b2a:	d1bf      	bne.n	8021aac <_printf_float+0x2d4>
 8021b2c:	e6a2      	b.n	8021874 <_printf_float+0x9c>
 8021b2e:	2301      	movs	r3, #1
 8021b30:	4631      	mov	r1, r6
 8021b32:	4628      	mov	r0, r5
 8021b34:	9204      	str	r2, [sp, #16]
 8021b36:	47b8      	blx	r7
 8021b38:	3001      	adds	r0, #1
 8021b3a:	f43f ae9b 	beq.w	8021874 <_printf_float+0x9c>
 8021b3e:	9b05      	ldr	r3, [sp, #20]
 8021b40:	9a04      	ldr	r2, [sp, #16]
 8021b42:	3301      	adds	r3, #1
 8021b44:	9305      	str	r3, [sp, #20]
 8021b46:	e7b7      	b.n	8021ab8 <_printf_float+0x2e0>
 8021b48:	4653      	mov	r3, sl
 8021b4a:	465a      	mov	r2, fp
 8021b4c:	4631      	mov	r1, r6
 8021b4e:	4628      	mov	r0, r5
 8021b50:	47b8      	blx	r7
 8021b52:	3001      	adds	r0, #1
 8021b54:	d1be      	bne.n	8021ad4 <_printf_float+0x2fc>
 8021b56:	e68d      	b.n	8021874 <_printf_float+0x9c>
 8021b58:	9a04      	ldr	r2, [sp, #16]
 8021b5a:	464b      	mov	r3, r9
 8021b5c:	4442      	add	r2, r8
 8021b5e:	4631      	mov	r1, r6
 8021b60:	4628      	mov	r0, r5
 8021b62:	47b8      	blx	r7
 8021b64:	3001      	adds	r0, #1
 8021b66:	d1c1      	bne.n	8021aec <_printf_float+0x314>
 8021b68:	e684      	b.n	8021874 <_printf_float+0x9c>
 8021b6a:	9a08      	ldr	r2, [sp, #32]
 8021b6c:	2a01      	cmp	r2, #1
 8021b6e:	dc01      	bgt.n	8021b74 <_printf_float+0x39c>
 8021b70:	07db      	lsls	r3, r3, #31
 8021b72:	d537      	bpl.n	8021be4 <_printf_float+0x40c>
 8021b74:	2301      	movs	r3, #1
 8021b76:	4642      	mov	r2, r8
 8021b78:	4631      	mov	r1, r6
 8021b7a:	4628      	mov	r0, r5
 8021b7c:	47b8      	blx	r7
 8021b7e:	3001      	adds	r0, #1
 8021b80:	f43f ae78 	beq.w	8021874 <_printf_float+0x9c>
 8021b84:	4653      	mov	r3, sl
 8021b86:	465a      	mov	r2, fp
 8021b88:	4631      	mov	r1, r6
 8021b8a:	4628      	mov	r0, r5
 8021b8c:	47b8      	blx	r7
 8021b8e:	3001      	adds	r0, #1
 8021b90:	f43f ae70 	beq.w	8021874 <_printf_float+0x9c>
 8021b94:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8021b98:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8021b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021ba0:	d01b      	beq.n	8021bda <_printf_float+0x402>
 8021ba2:	9b08      	ldr	r3, [sp, #32]
 8021ba4:	f108 0201 	add.w	r2, r8, #1
 8021ba8:	3b01      	subs	r3, #1
 8021baa:	4631      	mov	r1, r6
 8021bac:	4628      	mov	r0, r5
 8021bae:	47b8      	blx	r7
 8021bb0:	3001      	adds	r0, #1
 8021bb2:	d10e      	bne.n	8021bd2 <_printf_float+0x3fa>
 8021bb4:	e65e      	b.n	8021874 <_printf_float+0x9c>
 8021bb6:	2301      	movs	r3, #1
 8021bb8:	464a      	mov	r2, r9
 8021bba:	4631      	mov	r1, r6
 8021bbc:	4628      	mov	r0, r5
 8021bbe:	47b8      	blx	r7
 8021bc0:	3001      	adds	r0, #1
 8021bc2:	f43f ae57 	beq.w	8021874 <_printf_float+0x9c>
 8021bc6:	f108 0801 	add.w	r8, r8, #1
 8021bca:	9b08      	ldr	r3, [sp, #32]
 8021bcc:	3b01      	subs	r3, #1
 8021bce:	4543      	cmp	r3, r8
 8021bd0:	dcf1      	bgt.n	8021bb6 <_printf_float+0x3de>
 8021bd2:	9b04      	ldr	r3, [sp, #16]
 8021bd4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8021bd8:	e6db      	b.n	8021992 <_printf_float+0x1ba>
 8021bda:	f04f 0800 	mov.w	r8, #0
 8021bde:	f104 091a 	add.w	r9, r4, #26
 8021be2:	e7f2      	b.n	8021bca <_printf_float+0x3f2>
 8021be4:	2301      	movs	r3, #1
 8021be6:	4642      	mov	r2, r8
 8021be8:	e7df      	b.n	8021baa <_printf_float+0x3d2>
 8021bea:	2301      	movs	r3, #1
 8021bec:	464a      	mov	r2, r9
 8021bee:	4631      	mov	r1, r6
 8021bf0:	4628      	mov	r0, r5
 8021bf2:	47b8      	blx	r7
 8021bf4:	3001      	adds	r0, #1
 8021bf6:	f43f ae3d 	beq.w	8021874 <_printf_float+0x9c>
 8021bfa:	f108 0801 	add.w	r8, r8, #1
 8021bfe:	68e3      	ldr	r3, [r4, #12]
 8021c00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021c02:	1a5b      	subs	r3, r3, r1
 8021c04:	4543      	cmp	r3, r8
 8021c06:	dcf0      	bgt.n	8021bea <_printf_float+0x412>
 8021c08:	e6f7      	b.n	80219fa <_printf_float+0x222>
 8021c0a:	f04f 0800 	mov.w	r8, #0
 8021c0e:	f104 0919 	add.w	r9, r4, #25
 8021c12:	e7f4      	b.n	8021bfe <_printf_float+0x426>

08021c14 <_printf_common>:
 8021c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021c18:	4616      	mov	r6, r2
 8021c1a:	4699      	mov	r9, r3
 8021c1c:	688a      	ldr	r2, [r1, #8]
 8021c1e:	690b      	ldr	r3, [r1, #16]
 8021c20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8021c24:	4293      	cmp	r3, r2
 8021c26:	bfb8      	it	lt
 8021c28:	4613      	movlt	r3, r2
 8021c2a:	6033      	str	r3, [r6, #0]
 8021c2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8021c30:	4607      	mov	r7, r0
 8021c32:	460c      	mov	r4, r1
 8021c34:	b10a      	cbz	r2, 8021c3a <_printf_common+0x26>
 8021c36:	3301      	adds	r3, #1
 8021c38:	6033      	str	r3, [r6, #0]
 8021c3a:	6823      	ldr	r3, [r4, #0]
 8021c3c:	0699      	lsls	r1, r3, #26
 8021c3e:	bf42      	ittt	mi
 8021c40:	6833      	ldrmi	r3, [r6, #0]
 8021c42:	3302      	addmi	r3, #2
 8021c44:	6033      	strmi	r3, [r6, #0]
 8021c46:	6825      	ldr	r5, [r4, #0]
 8021c48:	f015 0506 	ands.w	r5, r5, #6
 8021c4c:	d106      	bne.n	8021c5c <_printf_common+0x48>
 8021c4e:	f104 0a19 	add.w	sl, r4, #25
 8021c52:	68e3      	ldr	r3, [r4, #12]
 8021c54:	6832      	ldr	r2, [r6, #0]
 8021c56:	1a9b      	subs	r3, r3, r2
 8021c58:	42ab      	cmp	r3, r5
 8021c5a:	dc26      	bgt.n	8021caa <_printf_common+0x96>
 8021c5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8021c60:	1e13      	subs	r3, r2, #0
 8021c62:	6822      	ldr	r2, [r4, #0]
 8021c64:	bf18      	it	ne
 8021c66:	2301      	movne	r3, #1
 8021c68:	0692      	lsls	r2, r2, #26
 8021c6a:	d42b      	bmi.n	8021cc4 <_printf_common+0xb0>
 8021c6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8021c70:	4649      	mov	r1, r9
 8021c72:	4638      	mov	r0, r7
 8021c74:	47c0      	blx	r8
 8021c76:	3001      	adds	r0, #1
 8021c78:	d01e      	beq.n	8021cb8 <_printf_common+0xa4>
 8021c7a:	6823      	ldr	r3, [r4, #0]
 8021c7c:	68e5      	ldr	r5, [r4, #12]
 8021c7e:	6832      	ldr	r2, [r6, #0]
 8021c80:	f003 0306 	and.w	r3, r3, #6
 8021c84:	2b04      	cmp	r3, #4
 8021c86:	bf08      	it	eq
 8021c88:	1aad      	subeq	r5, r5, r2
 8021c8a:	68a3      	ldr	r3, [r4, #8]
 8021c8c:	6922      	ldr	r2, [r4, #16]
 8021c8e:	bf0c      	ite	eq
 8021c90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021c94:	2500      	movne	r5, #0
 8021c96:	4293      	cmp	r3, r2
 8021c98:	bfc4      	itt	gt
 8021c9a:	1a9b      	subgt	r3, r3, r2
 8021c9c:	18ed      	addgt	r5, r5, r3
 8021c9e:	2600      	movs	r6, #0
 8021ca0:	341a      	adds	r4, #26
 8021ca2:	42b5      	cmp	r5, r6
 8021ca4:	d11a      	bne.n	8021cdc <_printf_common+0xc8>
 8021ca6:	2000      	movs	r0, #0
 8021ca8:	e008      	b.n	8021cbc <_printf_common+0xa8>
 8021caa:	2301      	movs	r3, #1
 8021cac:	4652      	mov	r2, sl
 8021cae:	4649      	mov	r1, r9
 8021cb0:	4638      	mov	r0, r7
 8021cb2:	47c0      	blx	r8
 8021cb4:	3001      	adds	r0, #1
 8021cb6:	d103      	bne.n	8021cc0 <_printf_common+0xac>
 8021cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8021cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021cc0:	3501      	adds	r5, #1
 8021cc2:	e7c6      	b.n	8021c52 <_printf_common+0x3e>
 8021cc4:	18e1      	adds	r1, r4, r3
 8021cc6:	1c5a      	adds	r2, r3, #1
 8021cc8:	2030      	movs	r0, #48	; 0x30
 8021cca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8021cce:	4422      	add	r2, r4
 8021cd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8021cd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8021cd8:	3302      	adds	r3, #2
 8021cda:	e7c7      	b.n	8021c6c <_printf_common+0x58>
 8021cdc:	2301      	movs	r3, #1
 8021cde:	4622      	mov	r2, r4
 8021ce0:	4649      	mov	r1, r9
 8021ce2:	4638      	mov	r0, r7
 8021ce4:	47c0      	blx	r8
 8021ce6:	3001      	adds	r0, #1
 8021ce8:	d0e6      	beq.n	8021cb8 <_printf_common+0xa4>
 8021cea:	3601      	adds	r6, #1
 8021cec:	e7d9      	b.n	8021ca2 <_printf_common+0x8e>
	...

08021cf0 <_printf_i>:
 8021cf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021cf4:	7e0f      	ldrb	r7, [r1, #24]
 8021cf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021cf8:	2f78      	cmp	r7, #120	; 0x78
 8021cfa:	4691      	mov	r9, r2
 8021cfc:	4680      	mov	r8, r0
 8021cfe:	460c      	mov	r4, r1
 8021d00:	469a      	mov	sl, r3
 8021d02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8021d06:	d807      	bhi.n	8021d18 <_printf_i+0x28>
 8021d08:	2f62      	cmp	r7, #98	; 0x62
 8021d0a:	d80a      	bhi.n	8021d22 <_printf_i+0x32>
 8021d0c:	2f00      	cmp	r7, #0
 8021d0e:	f000 80d8 	beq.w	8021ec2 <_printf_i+0x1d2>
 8021d12:	2f58      	cmp	r7, #88	; 0x58
 8021d14:	f000 80a3 	beq.w	8021e5e <_printf_i+0x16e>
 8021d18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8021d1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8021d20:	e03a      	b.n	8021d98 <_printf_i+0xa8>
 8021d22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8021d26:	2b15      	cmp	r3, #21
 8021d28:	d8f6      	bhi.n	8021d18 <_printf_i+0x28>
 8021d2a:	a101      	add	r1, pc, #4	; (adr r1, 8021d30 <_printf_i+0x40>)
 8021d2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8021d30:	08021d89 	.word	0x08021d89
 8021d34:	08021d9d 	.word	0x08021d9d
 8021d38:	08021d19 	.word	0x08021d19
 8021d3c:	08021d19 	.word	0x08021d19
 8021d40:	08021d19 	.word	0x08021d19
 8021d44:	08021d19 	.word	0x08021d19
 8021d48:	08021d9d 	.word	0x08021d9d
 8021d4c:	08021d19 	.word	0x08021d19
 8021d50:	08021d19 	.word	0x08021d19
 8021d54:	08021d19 	.word	0x08021d19
 8021d58:	08021d19 	.word	0x08021d19
 8021d5c:	08021ea9 	.word	0x08021ea9
 8021d60:	08021dcd 	.word	0x08021dcd
 8021d64:	08021e8b 	.word	0x08021e8b
 8021d68:	08021d19 	.word	0x08021d19
 8021d6c:	08021d19 	.word	0x08021d19
 8021d70:	08021ecb 	.word	0x08021ecb
 8021d74:	08021d19 	.word	0x08021d19
 8021d78:	08021dcd 	.word	0x08021dcd
 8021d7c:	08021d19 	.word	0x08021d19
 8021d80:	08021d19 	.word	0x08021d19
 8021d84:	08021e93 	.word	0x08021e93
 8021d88:	682b      	ldr	r3, [r5, #0]
 8021d8a:	1d1a      	adds	r2, r3, #4
 8021d8c:	681b      	ldr	r3, [r3, #0]
 8021d8e:	602a      	str	r2, [r5, #0]
 8021d90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8021d94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8021d98:	2301      	movs	r3, #1
 8021d9a:	e0a3      	b.n	8021ee4 <_printf_i+0x1f4>
 8021d9c:	6820      	ldr	r0, [r4, #0]
 8021d9e:	6829      	ldr	r1, [r5, #0]
 8021da0:	0606      	lsls	r6, r0, #24
 8021da2:	f101 0304 	add.w	r3, r1, #4
 8021da6:	d50a      	bpl.n	8021dbe <_printf_i+0xce>
 8021da8:	680e      	ldr	r6, [r1, #0]
 8021daa:	602b      	str	r3, [r5, #0]
 8021dac:	2e00      	cmp	r6, #0
 8021dae:	da03      	bge.n	8021db8 <_printf_i+0xc8>
 8021db0:	232d      	movs	r3, #45	; 0x2d
 8021db2:	4276      	negs	r6, r6
 8021db4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021db8:	485e      	ldr	r0, [pc, #376]	; (8021f34 <_printf_i+0x244>)
 8021dba:	230a      	movs	r3, #10
 8021dbc:	e019      	b.n	8021df2 <_printf_i+0x102>
 8021dbe:	680e      	ldr	r6, [r1, #0]
 8021dc0:	602b      	str	r3, [r5, #0]
 8021dc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8021dc6:	bf18      	it	ne
 8021dc8:	b236      	sxthne	r6, r6
 8021dca:	e7ef      	b.n	8021dac <_printf_i+0xbc>
 8021dcc:	682b      	ldr	r3, [r5, #0]
 8021dce:	6820      	ldr	r0, [r4, #0]
 8021dd0:	1d19      	adds	r1, r3, #4
 8021dd2:	6029      	str	r1, [r5, #0]
 8021dd4:	0601      	lsls	r1, r0, #24
 8021dd6:	d501      	bpl.n	8021ddc <_printf_i+0xec>
 8021dd8:	681e      	ldr	r6, [r3, #0]
 8021dda:	e002      	b.n	8021de2 <_printf_i+0xf2>
 8021ddc:	0646      	lsls	r6, r0, #25
 8021dde:	d5fb      	bpl.n	8021dd8 <_printf_i+0xe8>
 8021de0:	881e      	ldrh	r6, [r3, #0]
 8021de2:	4854      	ldr	r0, [pc, #336]	; (8021f34 <_printf_i+0x244>)
 8021de4:	2f6f      	cmp	r7, #111	; 0x6f
 8021de6:	bf0c      	ite	eq
 8021de8:	2308      	moveq	r3, #8
 8021dea:	230a      	movne	r3, #10
 8021dec:	2100      	movs	r1, #0
 8021dee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8021df2:	6865      	ldr	r5, [r4, #4]
 8021df4:	60a5      	str	r5, [r4, #8]
 8021df6:	2d00      	cmp	r5, #0
 8021df8:	bfa2      	ittt	ge
 8021dfa:	6821      	ldrge	r1, [r4, #0]
 8021dfc:	f021 0104 	bicge.w	r1, r1, #4
 8021e00:	6021      	strge	r1, [r4, #0]
 8021e02:	b90e      	cbnz	r6, 8021e08 <_printf_i+0x118>
 8021e04:	2d00      	cmp	r5, #0
 8021e06:	d04d      	beq.n	8021ea4 <_printf_i+0x1b4>
 8021e08:	4615      	mov	r5, r2
 8021e0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8021e0e:	fb03 6711 	mls	r7, r3, r1, r6
 8021e12:	5dc7      	ldrb	r7, [r0, r7]
 8021e14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8021e18:	4637      	mov	r7, r6
 8021e1a:	42bb      	cmp	r3, r7
 8021e1c:	460e      	mov	r6, r1
 8021e1e:	d9f4      	bls.n	8021e0a <_printf_i+0x11a>
 8021e20:	2b08      	cmp	r3, #8
 8021e22:	d10b      	bne.n	8021e3c <_printf_i+0x14c>
 8021e24:	6823      	ldr	r3, [r4, #0]
 8021e26:	07de      	lsls	r6, r3, #31
 8021e28:	d508      	bpl.n	8021e3c <_printf_i+0x14c>
 8021e2a:	6923      	ldr	r3, [r4, #16]
 8021e2c:	6861      	ldr	r1, [r4, #4]
 8021e2e:	4299      	cmp	r1, r3
 8021e30:	bfde      	ittt	le
 8021e32:	2330      	movle	r3, #48	; 0x30
 8021e34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8021e38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8021e3c:	1b52      	subs	r2, r2, r5
 8021e3e:	6122      	str	r2, [r4, #16]
 8021e40:	f8cd a000 	str.w	sl, [sp]
 8021e44:	464b      	mov	r3, r9
 8021e46:	aa03      	add	r2, sp, #12
 8021e48:	4621      	mov	r1, r4
 8021e4a:	4640      	mov	r0, r8
 8021e4c:	f7ff fee2 	bl	8021c14 <_printf_common>
 8021e50:	3001      	adds	r0, #1
 8021e52:	d14c      	bne.n	8021eee <_printf_i+0x1fe>
 8021e54:	f04f 30ff 	mov.w	r0, #4294967295
 8021e58:	b004      	add	sp, #16
 8021e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021e5e:	4835      	ldr	r0, [pc, #212]	; (8021f34 <_printf_i+0x244>)
 8021e60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8021e64:	6829      	ldr	r1, [r5, #0]
 8021e66:	6823      	ldr	r3, [r4, #0]
 8021e68:	f851 6b04 	ldr.w	r6, [r1], #4
 8021e6c:	6029      	str	r1, [r5, #0]
 8021e6e:	061d      	lsls	r5, r3, #24
 8021e70:	d514      	bpl.n	8021e9c <_printf_i+0x1ac>
 8021e72:	07df      	lsls	r7, r3, #31
 8021e74:	bf44      	itt	mi
 8021e76:	f043 0320 	orrmi.w	r3, r3, #32
 8021e7a:	6023      	strmi	r3, [r4, #0]
 8021e7c:	b91e      	cbnz	r6, 8021e86 <_printf_i+0x196>
 8021e7e:	6823      	ldr	r3, [r4, #0]
 8021e80:	f023 0320 	bic.w	r3, r3, #32
 8021e84:	6023      	str	r3, [r4, #0]
 8021e86:	2310      	movs	r3, #16
 8021e88:	e7b0      	b.n	8021dec <_printf_i+0xfc>
 8021e8a:	6823      	ldr	r3, [r4, #0]
 8021e8c:	f043 0320 	orr.w	r3, r3, #32
 8021e90:	6023      	str	r3, [r4, #0]
 8021e92:	2378      	movs	r3, #120	; 0x78
 8021e94:	4828      	ldr	r0, [pc, #160]	; (8021f38 <_printf_i+0x248>)
 8021e96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8021e9a:	e7e3      	b.n	8021e64 <_printf_i+0x174>
 8021e9c:	0659      	lsls	r1, r3, #25
 8021e9e:	bf48      	it	mi
 8021ea0:	b2b6      	uxthmi	r6, r6
 8021ea2:	e7e6      	b.n	8021e72 <_printf_i+0x182>
 8021ea4:	4615      	mov	r5, r2
 8021ea6:	e7bb      	b.n	8021e20 <_printf_i+0x130>
 8021ea8:	682b      	ldr	r3, [r5, #0]
 8021eaa:	6826      	ldr	r6, [r4, #0]
 8021eac:	6961      	ldr	r1, [r4, #20]
 8021eae:	1d18      	adds	r0, r3, #4
 8021eb0:	6028      	str	r0, [r5, #0]
 8021eb2:	0635      	lsls	r5, r6, #24
 8021eb4:	681b      	ldr	r3, [r3, #0]
 8021eb6:	d501      	bpl.n	8021ebc <_printf_i+0x1cc>
 8021eb8:	6019      	str	r1, [r3, #0]
 8021eba:	e002      	b.n	8021ec2 <_printf_i+0x1d2>
 8021ebc:	0670      	lsls	r0, r6, #25
 8021ebe:	d5fb      	bpl.n	8021eb8 <_printf_i+0x1c8>
 8021ec0:	8019      	strh	r1, [r3, #0]
 8021ec2:	2300      	movs	r3, #0
 8021ec4:	6123      	str	r3, [r4, #16]
 8021ec6:	4615      	mov	r5, r2
 8021ec8:	e7ba      	b.n	8021e40 <_printf_i+0x150>
 8021eca:	682b      	ldr	r3, [r5, #0]
 8021ecc:	1d1a      	adds	r2, r3, #4
 8021ece:	602a      	str	r2, [r5, #0]
 8021ed0:	681d      	ldr	r5, [r3, #0]
 8021ed2:	6862      	ldr	r2, [r4, #4]
 8021ed4:	2100      	movs	r1, #0
 8021ed6:	4628      	mov	r0, r5
 8021ed8:	f7de fa0a 	bl	80002f0 <memchr>
 8021edc:	b108      	cbz	r0, 8021ee2 <_printf_i+0x1f2>
 8021ede:	1b40      	subs	r0, r0, r5
 8021ee0:	6060      	str	r0, [r4, #4]
 8021ee2:	6863      	ldr	r3, [r4, #4]
 8021ee4:	6123      	str	r3, [r4, #16]
 8021ee6:	2300      	movs	r3, #0
 8021ee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021eec:	e7a8      	b.n	8021e40 <_printf_i+0x150>
 8021eee:	6923      	ldr	r3, [r4, #16]
 8021ef0:	462a      	mov	r2, r5
 8021ef2:	4649      	mov	r1, r9
 8021ef4:	4640      	mov	r0, r8
 8021ef6:	47d0      	blx	sl
 8021ef8:	3001      	adds	r0, #1
 8021efa:	d0ab      	beq.n	8021e54 <_printf_i+0x164>
 8021efc:	6823      	ldr	r3, [r4, #0]
 8021efe:	079b      	lsls	r3, r3, #30
 8021f00:	d413      	bmi.n	8021f2a <_printf_i+0x23a>
 8021f02:	68e0      	ldr	r0, [r4, #12]
 8021f04:	9b03      	ldr	r3, [sp, #12]
 8021f06:	4298      	cmp	r0, r3
 8021f08:	bfb8      	it	lt
 8021f0a:	4618      	movlt	r0, r3
 8021f0c:	e7a4      	b.n	8021e58 <_printf_i+0x168>
 8021f0e:	2301      	movs	r3, #1
 8021f10:	4632      	mov	r2, r6
 8021f12:	4649      	mov	r1, r9
 8021f14:	4640      	mov	r0, r8
 8021f16:	47d0      	blx	sl
 8021f18:	3001      	adds	r0, #1
 8021f1a:	d09b      	beq.n	8021e54 <_printf_i+0x164>
 8021f1c:	3501      	adds	r5, #1
 8021f1e:	68e3      	ldr	r3, [r4, #12]
 8021f20:	9903      	ldr	r1, [sp, #12]
 8021f22:	1a5b      	subs	r3, r3, r1
 8021f24:	42ab      	cmp	r3, r5
 8021f26:	dcf2      	bgt.n	8021f0e <_printf_i+0x21e>
 8021f28:	e7eb      	b.n	8021f02 <_printf_i+0x212>
 8021f2a:	2500      	movs	r5, #0
 8021f2c:	f104 0619 	add.w	r6, r4, #25
 8021f30:	e7f5      	b.n	8021f1e <_printf_i+0x22e>
 8021f32:	bf00      	nop
 8021f34:	080260ab 	.word	0x080260ab
 8021f38:	080260bc 	.word	0x080260bc

08021f3c <iprintf>:
 8021f3c:	b40f      	push	{r0, r1, r2, r3}
 8021f3e:	4b0a      	ldr	r3, [pc, #40]	; (8021f68 <iprintf+0x2c>)
 8021f40:	b513      	push	{r0, r1, r4, lr}
 8021f42:	681c      	ldr	r4, [r3, #0]
 8021f44:	b124      	cbz	r4, 8021f50 <iprintf+0x14>
 8021f46:	69a3      	ldr	r3, [r4, #24]
 8021f48:	b913      	cbnz	r3, 8021f50 <iprintf+0x14>
 8021f4a:	4620      	mov	r0, r4
 8021f4c:	f7ff f854 	bl	8020ff8 <__sinit>
 8021f50:	ab05      	add	r3, sp, #20
 8021f52:	9a04      	ldr	r2, [sp, #16]
 8021f54:	68a1      	ldr	r1, [r4, #8]
 8021f56:	9301      	str	r3, [sp, #4]
 8021f58:	4620      	mov	r0, r4
 8021f5a:	f7ff fa7d 	bl	8021458 <_vfiprintf_r>
 8021f5e:	b002      	add	sp, #8
 8021f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021f64:	b004      	add	sp, #16
 8021f66:	4770      	bx	lr
 8021f68:	24000134 	.word	0x24000134

08021f6c <cleanup_glue>:
 8021f6c:	b538      	push	{r3, r4, r5, lr}
 8021f6e:	460c      	mov	r4, r1
 8021f70:	6809      	ldr	r1, [r1, #0]
 8021f72:	4605      	mov	r5, r0
 8021f74:	b109      	cbz	r1, 8021f7a <cleanup_glue+0xe>
 8021f76:	f7ff fff9 	bl	8021f6c <cleanup_glue>
 8021f7a:	4621      	mov	r1, r4
 8021f7c:	4628      	mov	r0, r5
 8021f7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021f82:	f7ff b95f 	b.w	8021244 <_free_r>
	...

08021f88 <_reclaim_reent>:
 8021f88:	4b2c      	ldr	r3, [pc, #176]	; (802203c <_reclaim_reent+0xb4>)
 8021f8a:	681b      	ldr	r3, [r3, #0]
 8021f8c:	4283      	cmp	r3, r0
 8021f8e:	b570      	push	{r4, r5, r6, lr}
 8021f90:	4604      	mov	r4, r0
 8021f92:	d051      	beq.n	8022038 <_reclaim_reent+0xb0>
 8021f94:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8021f96:	b143      	cbz	r3, 8021faa <_reclaim_reent+0x22>
 8021f98:	68db      	ldr	r3, [r3, #12]
 8021f9a:	2b00      	cmp	r3, #0
 8021f9c:	d14a      	bne.n	8022034 <_reclaim_reent+0xac>
 8021f9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021fa0:	6819      	ldr	r1, [r3, #0]
 8021fa2:	b111      	cbz	r1, 8021faa <_reclaim_reent+0x22>
 8021fa4:	4620      	mov	r0, r4
 8021fa6:	f7ff f94d 	bl	8021244 <_free_r>
 8021faa:	6961      	ldr	r1, [r4, #20]
 8021fac:	b111      	cbz	r1, 8021fb4 <_reclaim_reent+0x2c>
 8021fae:	4620      	mov	r0, r4
 8021fb0:	f7ff f948 	bl	8021244 <_free_r>
 8021fb4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8021fb6:	b111      	cbz	r1, 8021fbe <_reclaim_reent+0x36>
 8021fb8:	4620      	mov	r0, r4
 8021fba:	f7ff f943 	bl	8021244 <_free_r>
 8021fbe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8021fc0:	b111      	cbz	r1, 8021fc8 <_reclaim_reent+0x40>
 8021fc2:	4620      	mov	r0, r4
 8021fc4:	f7ff f93e 	bl	8021244 <_free_r>
 8021fc8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8021fca:	b111      	cbz	r1, 8021fd2 <_reclaim_reent+0x4a>
 8021fcc:	4620      	mov	r0, r4
 8021fce:	f7ff f939 	bl	8021244 <_free_r>
 8021fd2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8021fd4:	b111      	cbz	r1, 8021fdc <_reclaim_reent+0x54>
 8021fd6:	4620      	mov	r0, r4
 8021fd8:	f7ff f934 	bl	8021244 <_free_r>
 8021fdc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8021fde:	b111      	cbz	r1, 8021fe6 <_reclaim_reent+0x5e>
 8021fe0:	4620      	mov	r0, r4
 8021fe2:	f7ff f92f 	bl	8021244 <_free_r>
 8021fe6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8021fe8:	b111      	cbz	r1, 8021ff0 <_reclaim_reent+0x68>
 8021fea:	4620      	mov	r0, r4
 8021fec:	f7ff f92a 	bl	8021244 <_free_r>
 8021ff0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021ff2:	b111      	cbz	r1, 8021ffa <_reclaim_reent+0x72>
 8021ff4:	4620      	mov	r0, r4
 8021ff6:	f7ff f925 	bl	8021244 <_free_r>
 8021ffa:	69a3      	ldr	r3, [r4, #24]
 8021ffc:	b1e3      	cbz	r3, 8022038 <_reclaim_reent+0xb0>
 8021ffe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8022000:	4620      	mov	r0, r4
 8022002:	4798      	blx	r3
 8022004:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8022006:	b1b9      	cbz	r1, 8022038 <_reclaim_reent+0xb0>
 8022008:	4620      	mov	r0, r4
 802200a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802200e:	f7ff bfad 	b.w	8021f6c <cleanup_glue>
 8022012:	5949      	ldr	r1, [r1, r5]
 8022014:	b941      	cbnz	r1, 8022028 <_reclaim_reent+0xa0>
 8022016:	3504      	adds	r5, #4
 8022018:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802201a:	2d80      	cmp	r5, #128	; 0x80
 802201c:	68d9      	ldr	r1, [r3, #12]
 802201e:	d1f8      	bne.n	8022012 <_reclaim_reent+0x8a>
 8022020:	4620      	mov	r0, r4
 8022022:	f7ff f90f 	bl	8021244 <_free_r>
 8022026:	e7ba      	b.n	8021f9e <_reclaim_reent+0x16>
 8022028:	680e      	ldr	r6, [r1, #0]
 802202a:	4620      	mov	r0, r4
 802202c:	f7ff f90a 	bl	8021244 <_free_r>
 8022030:	4631      	mov	r1, r6
 8022032:	e7ef      	b.n	8022014 <_reclaim_reent+0x8c>
 8022034:	2500      	movs	r5, #0
 8022036:	e7ef      	b.n	8022018 <_reclaim_reent+0x90>
 8022038:	bd70      	pop	{r4, r5, r6, pc}
 802203a:	bf00      	nop
 802203c:	24000134 	.word	0x24000134

08022040 <_sbrk_r>:
 8022040:	b538      	push	{r3, r4, r5, lr}
 8022042:	4d06      	ldr	r5, [pc, #24]	; (802205c <_sbrk_r+0x1c>)
 8022044:	2300      	movs	r3, #0
 8022046:	4604      	mov	r4, r0
 8022048:	4608      	mov	r0, r1
 802204a:	602b      	str	r3, [r5, #0]
 802204c:	f7de ffca 	bl	8000fe4 <_sbrk>
 8022050:	1c43      	adds	r3, r0, #1
 8022052:	d102      	bne.n	802205a <_sbrk_r+0x1a>
 8022054:	682b      	ldr	r3, [r5, #0]
 8022056:	b103      	cbz	r3, 802205a <_sbrk_r+0x1a>
 8022058:	6023      	str	r3, [r4, #0]
 802205a:	bd38      	pop	{r3, r4, r5, pc}
 802205c:	24014278 	.word	0x24014278

08022060 <sniprintf>:
 8022060:	b40c      	push	{r2, r3}
 8022062:	b530      	push	{r4, r5, lr}
 8022064:	4b17      	ldr	r3, [pc, #92]	; (80220c4 <sniprintf+0x64>)
 8022066:	1e0c      	subs	r4, r1, #0
 8022068:	681d      	ldr	r5, [r3, #0]
 802206a:	b09d      	sub	sp, #116	; 0x74
 802206c:	da08      	bge.n	8022080 <sniprintf+0x20>
 802206e:	238b      	movs	r3, #139	; 0x8b
 8022070:	602b      	str	r3, [r5, #0]
 8022072:	f04f 30ff 	mov.w	r0, #4294967295
 8022076:	b01d      	add	sp, #116	; 0x74
 8022078:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802207c:	b002      	add	sp, #8
 802207e:	4770      	bx	lr
 8022080:	f44f 7302 	mov.w	r3, #520	; 0x208
 8022084:	f8ad 3014 	strh.w	r3, [sp, #20]
 8022088:	bf14      	ite	ne
 802208a:	f104 33ff 	addne.w	r3, r4, #4294967295
 802208e:	4623      	moveq	r3, r4
 8022090:	9304      	str	r3, [sp, #16]
 8022092:	9307      	str	r3, [sp, #28]
 8022094:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022098:	9002      	str	r0, [sp, #8]
 802209a:	9006      	str	r0, [sp, #24]
 802209c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80220a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80220a2:	ab21      	add	r3, sp, #132	; 0x84
 80220a4:	a902      	add	r1, sp, #8
 80220a6:	4628      	mov	r0, r5
 80220a8:	9301      	str	r3, [sp, #4]
 80220aa:	f001 fd5d 	bl	8023b68 <_svfiprintf_r>
 80220ae:	1c43      	adds	r3, r0, #1
 80220b0:	bfbc      	itt	lt
 80220b2:	238b      	movlt	r3, #139	; 0x8b
 80220b4:	602b      	strlt	r3, [r5, #0]
 80220b6:	2c00      	cmp	r4, #0
 80220b8:	d0dd      	beq.n	8022076 <sniprintf+0x16>
 80220ba:	9b02      	ldr	r3, [sp, #8]
 80220bc:	2200      	movs	r2, #0
 80220be:	701a      	strb	r2, [r3, #0]
 80220c0:	e7d9      	b.n	8022076 <sniprintf+0x16>
 80220c2:	bf00      	nop
 80220c4:	24000134 	.word	0x24000134

080220c8 <siprintf>:
 80220c8:	b40e      	push	{r1, r2, r3}
 80220ca:	b500      	push	{lr}
 80220cc:	b09c      	sub	sp, #112	; 0x70
 80220ce:	ab1d      	add	r3, sp, #116	; 0x74
 80220d0:	9002      	str	r0, [sp, #8]
 80220d2:	9006      	str	r0, [sp, #24]
 80220d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80220d8:	4809      	ldr	r0, [pc, #36]	; (8022100 <siprintf+0x38>)
 80220da:	9107      	str	r1, [sp, #28]
 80220dc:	9104      	str	r1, [sp, #16]
 80220de:	4909      	ldr	r1, [pc, #36]	; (8022104 <siprintf+0x3c>)
 80220e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80220e4:	9105      	str	r1, [sp, #20]
 80220e6:	6800      	ldr	r0, [r0, #0]
 80220e8:	9301      	str	r3, [sp, #4]
 80220ea:	a902      	add	r1, sp, #8
 80220ec:	f001 fd3c 	bl	8023b68 <_svfiprintf_r>
 80220f0:	9b02      	ldr	r3, [sp, #8]
 80220f2:	2200      	movs	r2, #0
 80220f4:	701a      	strb	r2, [r3, #0]
 80220f6:	b01c      	add	sp, #112	; 0x70
 80220f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80220fc:	b003      	add	sp, #12
 80220fe:	4770      	bx	lr
 8022100:	24000134 	.word	0x24000134
 8022104:	ffff0208 	.word	0xffff0208

08022108 <__sread>:
 8022108:	b510      	push	{r4, lr}
 802210a:	460c      	mov	r4, r1
 802210c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022110:	f001 fe2a 	bl	8023d68 <_read_r>
 8022114:	2800      	cmp	r0, #0
 8022116:	bfab      	itete	ge
 8022118:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802211a:	89a3      	ldrhlt	r3, [r4, #12]
 802211c:	181b      	addge	r3, r3, r0
 802211e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8022122:	bfac      	ite	ge
 8022124:	6563      	strge	r3, [r4, #84]	; 0x54
 8022126:	81a3      	strhlt	r3, [r4, #12]
 8022128:	bd10      	pop	{r4, pc}

0802212a <__swrite>:
 802212a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802212e:	461f      	mov	r7, r3
 8022130:	898b      	ldrh	r3, [r1, #12]
 8022132:	05db      	lsls	r3, r3, #23
 8022134:	4605      	mov	r5, r0
 8022136:	460c      	mov	r4, r1
 8022138:	4616      	mov	r6, r2
 802213a:	d505      	bpl.n	8022148 <__swrite+0x1e>
 802213c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022140:	2302      	movs	r3, #2
 8022142:	2200      	movs	r2, #0
 8022144:	f001 f87e 	bl	8023244 <_lseek_r>
 8022148:	89a3      	ldrh	r3, [r4, #12]
 802214a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802214e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8022152:	81a3      	strh	r3, [r4, #12]
 8022154:	4632      	mov	r2, r6
 8022156:	463b      	mov	r3, r7
 8022158:	4628      	mov	r0, r5
 802215a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802215e:	f000 b8fd 	b.w	802235c <_write_r>

08022162 <__sseek>:
 8022162:	b510      	push	{r4, lr}
 8022164:	460c      	mov	r4, r1
 8022166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802216a:	f001 f86b 	bl	8023244 <_lseek_r>
 802216e:	1c43      	adds	r3, r0, #1
 8022170:	89a3      	ldrh	r3, [r4, #12]
 8022172:	bf15      	itete	ne
 8022174:	6560      	strne	r0, [r4, #84]	; 0x54
 8022176:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802217a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802217e:	81a3      	strheq	r3, [r4, #12]
 8022180:	bf18      	it	ne
 8022182:	81a3      	strhne	r3, [r4, #12]
 8022184:	bd10      	pop	{r4, pc}

08022186 <__sclose>:
 8022186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802218a:	f000 b985 	b.w	8022498 <_close_r>

0802218e <strcpy>:
 802218e:	4603      	mov	r3, r0
 8022190:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022194:	f803 2b01 	strb.w	r2, [r3], #1
 8022198:	2a00      	cmp	r2, #0
 802219a:	d1f9      	bne.n	8022190 <strcpy+0x2>
 802219c:	4770      	bx	lr
	...

080221a0 <_strtol_l.constprop.0>:
 80221a0:	2b01      	cmp	r3, #1
 80221a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80221a6:	d001      	beq.n	80221ac <_strtol_l.constprop.0+0xc>
 80221a8:	2b24      	cmp	r3, #36	; 0x24
 80221aa:	d906      	bls.n	80221ba <_strtol_l.constprop.0+0x1a>
 80221ac:	f000 ff7e 	bl	80230ac <__errno>
 80221b0:	2316      	movs	r3, #22
 80221b2:	6003      	str	r3, [r0, #0]
 80221b4:	2000      	movs	r0, #0
 80221b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80221ba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80222a0 <_strtol_l.constprop.0+0x100>
 80221be:	460d      	mov	r5, r1
 80221c0:	462e      	mov	r6, r5
 80221c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80221c6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80221ca:	f017 0708 	ands.w	r7, r7, #8
 80221ce:	d1f7      	bne.n	80221c0 <_strtol_l.constprop.0+0x20>
 80221d0:	2c2d      	cmp	r4, #45	; 0x2d
 80221d2:	d132      	bne.n	802223a <_strtol_l.constprop.0+0x9a>
 80221d4:	782c      	ldrb	r4, [r5, #0]
 80221d6:	2701      	movs	r7, #1
 80221d8:	1cb5      	adds	r5, r6, #2
 80221da:	2b00      	cmp	r3, #0
 80221dc:	d05b      	beq.n	8022296 <_strtol_l.constprop.0+0xf6>
 80221de:	2b10      	cmp	r3, #16
 80221e0:	d109      	bne.n	80221f6 <_strtol_l.constprop.0+0x56>
 80221e2:	2c30      	cmp	r4, #48	; 0x30
 80221e4:	d107      	bne.n	80221f6 <_strtol_l.constprop.0+0x56>
 80221e6:	782c      	ldrb	r4, [r5, #0]
 80221e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80221ec:	2c58      	cmp	r4, #88	; 0x58
 80221ee:	d14d      	bne.n	802228c <_strtol_l.constprop.0+0xec>
 80221f0:	786c      	ldrb	r4, [r5, #1]
 80221f2:	2310      	movs	r3, #16
 80221f4:	3502      	adds	r5, #2
 80221f6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80221fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80221fe:	f04f 0c00 	mov.w	ip, #0
 8022202:	fbb8 f9f3 	udiv	r9, r8, r3
 8022206:	4666      	mov	r6, ip
 8022208:	fb03 8a19 	mls	sl, r3, r9, r8
 802220c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8022210:	f1be 0f09 	cmp.w	lr, #9
 8022214:	d816      	bhi.n	8022244 <_strtol_l.constprop.0+0xa4>
 8022216:	4674      	mov	r4, lr
 8022218:	42a3      	cmp	r3, r4
 802221a:	dd24      	ble.n	8022266 <_strtol_l.constprop.0+0xc6>
 802221c:	f1bc 0f00 	cmp.w	ip, #0
 8022220:	db1e      	blt.n	8022260 <_strtol_l.constprop.0+0xc0>
 8022222:	45b1      	cmp	r9, r6
 8022224:	d31c      	bcc.n	8022260 <_strtol_l.constprop.0+0xc0>
 8022226:	d101      	bne.n	802222c <_strtol_l.constprop.0+0x8c>
 8022228:	45a2      	cmp	sl, r4
 802222a:	db19      	blt.n	8022260 <_strtol_l.constprop.0+0xc0>
 802222c:	fb06 4603 	mla	r6, r6, r3, r4
 8022230:	f04f 0c01 	mov.w	ip, #1
 8022234:	f815 4b01 	ldrb.w	r4, [r5], #1
 8022238:	e7e8      	b.n	802220c <_strtol_l.constprop.0+0x6c>
 802223a:	2c2b      	cmp	r4, #43	; 0x2b
 802223c:	bf04      	itt	eq
 802223e:	782c      	ldrbeq	r4, [r5, #0]
 8022240:	1cb5      	addeq	r5, r6, #2
 8022242:	e7ca      	b.n	80221da <_strtol_l.constprop.0+0x3a>
 8022244:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8022248:	f1be 0f19 	cmp.w	lr, #25
 802224c:	d801      	bhi.n	8022252 <_strtol_l.constprop.0+0xb2>
 802224e:	3c37      	subs	r4, #55	; 0x37
 8022250:	e7e2      	b.n	8022218 <_strtol_l.constprop.0+0x78>
 8022252:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8022256:	f1be 0f19 	cmp.w	lr, #25
 802225a:	d804      	bhi.n	8022266 <_strtol_l.constprop.0+0xc6>
 802225c:	3c57      	subs	r4, #87	; 0x57
 802225e:	e7db      	b.n	8022218 <_strtol_l.constprop.0+0x78>
 8022260:	f04f 3cff 	mov.w	ip, #4294967295
 8022264:	e7e6      	b.n	8022234 <_strtol_l.constprop.0+0x94>
 8022266:	f1bc 0f00 	cmp.w	ip, #0
 802226a:	da05      	bge.n	8022278 <_strtol_l.constprop.0+0xd8>
 802226c:	2322      	movs	r3, #34	; 0x22
 802226e:	6003      	str	r3, [r0, #0]
 8022270:	4646      	mov	r6, r8
 8022272:	b942      	cbnz	r2, 8022286 <_strtol_l.constprop.0+0xe6>
 8022274:	4630      	mov	r0, r6
 8022276:	e79e      	b.n	80221b6 <_strtol_l.constprop.0+0x16>
 8022278:	b107      	cbz	r7, 802227c <_strtol_l.constprop.0+0xdc>
 802227a:	4276      	negs	r6, r6
 802227c:	2a00      	cmp	r2, #0
 802227e:	d0f9      	beq.n	8022274 <_strtol_l.constprop.0+0xd4>
 8022280:	f1bc 0f00 	cmp.w	ip, #0
 8022284:	d000      	beq.n	8022288 <_strtol_l.constprop.0+0xe8>
 8022286:	1e69      	subs	r1, r5, #1
 8022288:	6011      	str	r1, [r2, #0]
 802228a:	e7f3      	b.n	8022274 <_strtol_l.constprop.0+0xd4>
 802228c:	2430      	movs	r4, #48	; 0x30
 802228e:	2b00      	cmp	r3, #0
 8022290:	d1b1      	bne.n	80221f6 <_strtol_l.constprop.0+0x56>
 8022292:	2308      	movs	r3, #8
 8022294:	e7af      	b.n	80221f6 <_strtol_l.constprop.0+0x56>
 8022296:	2c30      	cmp	r4, #48	; 0x30
 8022298:	d0a5      	beq.n	80221e6 <_strtol_l.constprop.0+0x46>
 802229a:	230a      	movs	r3, #10
 802229c:	e7ab      	b.n	80221f6 <_strtol_l.constprop.0+0x56>
 802229e:	bf00      	nop
 80222a0:	08025f21 	.word	0x08025f21

080222a4 <strtol>:
 80222a4:	4613      	mov	r3, r2
 80222a6:	460a      	mov	r2, r1
 80222a8:	4601      	mov	r1, r0
 80222aa:	4802      	ldr	r0, [pc, #8]	; (80222b4 <strtol+0x10>)
 80222ac:	6800      	ldr	r0, [r0, #0]
 80222ae:	f7ff bf77 	b.w	80221a0 <_strtol_l.constprop.0>
 80222b2:	bf00      	nop
 80222b4:	24000134 	.word	0x24000134

080222b8 <__swbuf_r>:
 80222b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80222ba:	460e      	mov	r6, r1
 80222bc:	4614      	mov	r4, r2
 80222be:	4605      	mov	r5, r0
 80222c0:	b118      	cbz	r0, 80222ca <__swbuf_r+0x12>
 80222c2:	6983      	ldr	r3, [r0, #24]
 80222c4:	b90b      	cbnz	r3, 80222ca <__swbuf_r+0x12>
 80222c6:	f7fe fe97 	bl	8020ff8 <__sinit>
 80222ca:	4b21      	ldr	r3, [pc, #132]	; (8022350 <__swbuf_r+0x98>)
 80222cc:	429c      	cmp	r4, r3
 80222ce:	d12b      	bne.n	8022328 <__swbuf_r+0x70>
 80222d0:	686c      	ldr	r4, [r5, #4]
 80222d2:	69a3      	ldr	r3, [r4, #24]
 80222d4:	60a3      	str	r3, [r4, #8]
 80222d6:	89a3      	ldrh	r3, [r4, #12]
 80222d8:	071a      	lsls	r2, r3, #28
 80222da:	d52f      	bpl.n	802233c <__swbuf_r+0x84>
 80222dc:	6923      	ldr	r3, [r4, #16]
 80222de:	b36b      	cbz	r3, 802233c <__swbuf_r+0x84>
 80222e0:	6923      	ldr	r3, [r4, #16]
 80222e2:	6820      	ldr	r0, [r4, #0]
 80222e4:	1ac0      	subs	r0, r0, r3
 80222e6:	6963      	ldr	r3, [r4, #20]
 80222e8:	b2f6      	uxtb	r6, r6
 80222ea:	4283      	cmp	r3, r0
 80222ec:	4637      	mov	r7, r6
 80222ee:	dc04      	bgt.n	80222fa <__swbuf_r+0x42>
 80222f0:	4621      	mov	r1, r4
 80222f2:	4628      	mov	r0, r5
 80222f4:	f000 ff66 	bl	80231c4 <_fflush_r>
 80222f8:	bb30      	cbnz	r0, 8022348 <__swbuf_r+0x90>
 80222fa:	68a3      	ldr	r3, [r4, #8]
 80222fc:	3b01      	subs	r3, #1
 80222fe:	60a3      	str	r3, [r4, #8]
 8022300:	6823      	ldr	r3, [r4, #0]
 8022302:	1c5a      	adds	r2, r3, #1
 8022304:	6022      	str	r2, [r4, #0]
 8022306:	701e      	strb	r6, [r3, #0]
 8022308:	6963      	ldr	r3, [r4, #20]
 802230a:	3001      	adds	r0, #1
 802230c:	4283      	cmp	r3, r0
 802230e:	d004      	beq.n	802231a <__swbuf_r+0x62>
 8022310:	89a3      	ldrh	r3, [r4, #12]
 8022312:	07db      	lsls	r3, r3, #31
 8022314:	d506      	bpl.n	8022324 <__swbuf_r+0x6c>
 8022316:	2e0a      	cmp	r6, #10
 8022318:	d104      	bne.n	8022324 <__swbuf_r+0x6c>
 802231a:	4621      	mov	r1, r4
 802231c:	4628      	mov	r0, r5
 802231e:	f000 ff51 	bl	80231c4 <_fflush_r>
 8022322:	b988      	cbnz	r0, 8022348 <__swbuf_r+0x90>
 8022324:	4638      	mov	r0, r7
 8022326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022328:	4b0a      	ldr	r3, [pc, #40]	; (8022354 <__swbuf_r+0x9c>)
 802232a:	429c      	cmp	r4, r3
 802232c:	d101      	bne.n	8022332 <__swbuf_r+0x7a>
 802232e:	68ac      	ldr	r4, [r5, #8]
 8022330:	e7cf      	b.n	80222d2 <__swbuf_r+0x1a>
 8022332:	4b09      	ldr	r3, [pc, #36]	; (8022358 <__swbuf_r+0xa0>)
 8022334:	429c      	cmp	r4, r3
 8022336:	bf08      	it	eq
 8022338:	68ec      	ldreq	r4, [r5, #12]
 802233a:	e7ca      	b.n	80222d2 <__swbuf_r+0x1a>
 802233c:	4621      	mov	r1, r4
 802233e:	4628      	mov	r0, r5
 8022340:	f000 f81e 	bl	8022380 <__swsetup_r>
 8022344:	2800      	cmp	r0, #0
 8022346:	d0cb      	beq.n	80222e0 <__swbuf_r+0x28>
 8022348:	f04f 37ff 	mov.w	r7, #4294967295
 802234c:	e7ea      	b.n	8022324 <__swbuf_r+0x6c>
 802234e:	bf00      	nop
 8022350:	08026044 	.word	0x08026044
 8022354:	08026064 	.word	0x08026064
 8022358:	08026024 	.word	0x08026024

0802235c <_write_r>:
 802235c:	b538      	push	{r3, r4, r5, lr}
 802235e:	4d07      	ldr	r5, [pc, #28]	; (802237c <_write_r+0x20>)
 8022360:	4604      	mov	r4, r0
 8022362:	4608      	mov	r0, r1
 8022364:	4611      	mov	r1, r2
 8022366:	2200      	movs	r2, #0
 8022368:	602a      	str	r2, [r5, #0]
 802236a:	461a      	mov	r2, r3
 802236c:	f7de fde9 	bl	8000f42 <_write>
 8022370:	1c43      	adds	r3, r0, #1
 8022372:	d102      	bne.n	802237a <_write_r+0x1e>
 8022374:	682b      	ldr	r3, [r5, #0]
 8022376:	b103      	cbz	r3, 802237a <_write_r+0x1e>
 8022378:	6023      	str	r3, [r4, #0]
 802237a:	bd38      	pop	{r3, r4, r5, pc}
 802237c:	24014278 	.word	0x24014278

08022380 <__swsetup_r>:
 8022380:	4b32      	ldr	r3, [pc, #200]	; (802244c <__swsetup_r+0xcc>)
 8022382:	b570      	push	{r4, r5, r6, lr}
 8022384:	681d      	ldr	r5, [r3, #0]
 8022386:	4606      	mov	r6, r0
 8022388:	460c      	mov	r4, r1
 802238a:	b125      	cbz	r5, 8022396 <__swsetup_r+0x16>
 802238c:	69ab      	ldr	r3, [r5, #24]
 802238e:	b913      	cbnz	r3, 8022396 <__swsetup_r+0x16>
 8022390:	4628      	mov	r0, r5
 8022392:	f7fe fe31 	bl	8020ff8 <__sinit>
 8022396:	4b2e      	ldr	r3, [pc, #184]	; (8022450 <__swsetup_r+0xd0>)
 8022398:	429c      	cmp	r4, r3
 802239a:	d10f      	bne.n	80223bc <__swsetup_r+0x3c>
 802239c:	686c      	ldr	r4, [r5, #4]
 802239e:	89a3      	ldrh	r3, [r4, #12]
 80223a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80223a4:	0719      	lsls	r1, r3, #28
 80223a6:	d42c      	bmi.n	8022402 <__swsetup_r+0x82>
 80223a8:	06dd      	lsls	r5, r3, #27
 80223aa:	d411      	bmi.n	80223d0 <__swsetup_r+0x50>
 80223ac:	2309      	movs	r3, #9
 80223ae:	6033      	str	r3, [r6, #0]
 80223b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80223b4:	81a3      	strh	r3, [r4, #12]
 80223b6:	f04f 30ff 	mov.w	r0, #4294967295
 80223ba:	e03e      	b.n	802243a <__swsetup_r+0xba>
 80223bc:	4b25      	ldr	r3, [pc, #148]	; (8022454 <__swsetup_r+0xd4>)
 80223be:	429c      	cmp	r4, r3
 80223c0:	d101      	bne.n	80223c6 <__swsetup_r+0x46>
 80223c2:	68ac      	ldr	r4, [r5, #8]
 80223c4:	e7eb      	b.n	802239e <__swsetup_r+0x1e>
 80223c6:	4b24      	ldr	r3, [pc, #144]	; (8022458 <__swsetup_r+0xd8>)
 80223c8:	429c      	cmp	r4, r3
 80223ca:	bf08      	it	eq
 80223cc:	68ec      	ldreq	r4, [r5, #12]
 80223ce:	e7e6      	b.n	802239e <__swsetup_r+0x1e>
 80223d0:	0758      	lsls	r0, r3, #29
 80223d2:	d512      	bpl.n	80223fa <__swsetup_r+0x7a>
 80223d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80223d6:	b141      	cbz	r1, 80223ea <__swsetup_r+0x6a>
 80223d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80223dc:	4299      	cmp	r1, r3
 80223de:	d002      	beq.n	80223e6 <__swsetup_r+0x66>
 80223e0:	4630      	mov	r0, r6
 80223e2:	f7fe ff2f 	bl	8021244 <_free_r>
 80223e6:	2300      	movs	r3, #0
 80223e8:	6363      	str	r3, [r4, #52]	; 0x34
 80223ea:	89a3      	ldrh	r3, [r4, #12]
 80223ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80223f0:	81a3      	strh	r3, [r4, #12]
 80223f2:	2300      	movs	r3, #0
 80223f4:	6063      	str	r3, [r4, #4]
 80223f6:	6923      	ldr	r3, [r4, #16]
 80223f8:	6023      	str	r3, [r4, #0]
 80223fa:	89a3      	ldrh	r3, [r4, #12]
 80223fc:	f043 0308 	orr.w	r3, r3, #8
 8022400:	81a3      	strh	r3, [r4, #12]
 8022402:	6923      	ldr	r3, [r4, #16]
 8022404:	b94b      	cbnz	r3, 802241a <__swsetup_r+0x9a>
 8022406:	89a3      	ldrh	r3, [r4, #12]
 8022408:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802240c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022410:	d003      	beq.n	802241a <__swsetup_r+0x9a>
 8022412:	4621      	mov	r1, r4
 8022414:	4630      	mov	r0, r6
 8022416:	f000 ff4d 	bl	80232b4 <__smakebuf_r>
 802241a:	89a0      	ldrh	r0, [r4, #12]
 802241c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022420:	f010 0301 	ands.w	r3, r0, #1
 8022424:	d00a      	beq.n	802243c <__swsetup_r+0xbc>
 8022426:	2300      	movs	r3, #0
 8022428:	60a3      	str	r3, [r4, #8]
 802242a:	6963      	ldr	r3, [r4, #20]
 802242c:	425b      	negs	r3, r3
 802242e:	61a3      	str	r3, [r4, #24]
 8022430:	6923      	ldr	r3, [r4, #16]
 8022432:	b943      	cbnz	r3, 8022446 <__swsetup_r+0xc6>
 8022434:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8022438:	d1ba      	bne.n	80223b0 <__swsetup_r+0x30>
 802243a:	bd70      	pop	{r4, r5, r6, pc}
 802243c:	0781      	lsls	r1, r0, #30
 802243e:	bf58      	it	pl
 8022440:	6963      	ldrpl	r3, [r4, #20]
 8022442:	60a3      	str	r3, [r4, #8]
 8022444:	e7f4      	b.n	8022430 <__swsetup_r+0xb0>
 8022446:	2000      	movs	r0, #0
 8022448:	e7f7      	b.n	802243a <__swsetup_r+0xba>
 802244a:	bf00      	nop
 802244c:	24000134 	.word	0x24000134
 8022450:	08026044 	.word	0x08026044
 8022454:	08026064 	.word	0x08026064
 8022458:	08026024 	.word	0x08026024

0802245c <__assert_func>:
 802245c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802245e:	4614      	mov	r4, r2
 8022460:	461a      	mov	r2, r3
 8022462:	4b09      	ldr	r3, [pc, #36]	; (8022488 <__assert_func+0x2c>)
 8022464:	681b      	ldr	r3, [r3, #0]
 8022466:	4605      	mov	r5, r0
 8022468:	68d8      	ldr	r0, [r3, #12]
 802246a:	b14c      	cbz	r4, 8022480 <__assert_func+0x24>
 802246c:	4b07      	ldr	r3, [pc, #28]	; (802248c <__assert_func+0x30>)
 802246e:	9100      	str	r1, [sp, #0]
 8022470:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022474:	4906      	ldr	r1, [pc, #24]	; (8022490 <__assert_func+0x34>)
 8022476:	462b      	mov	r3, r5
 8022478:	f7fe fe3c 	bl	80210f4 <fiprintf>
 802247c:	f001 fc86 	bl	8023d8c <abort>
 8022480:	4b04      	ldr	r3, [pc, #16]	; (8022494 <__assert_func+0x38>)
 8022482:	461c      	mov	r4, r3
 8022484:	e7f3      	b.n	802246e <__assert_func+0x12>
 8022486:	bf00      	nop
 8022488:	24000134 	.word	0x24000134
 802248c:	080260cd 	.word	0x080260cd
 8022490:	080260da 	.word	0x080260da
 8022494:	08026108 	.word	0x08026108

08022498 <_close_r>:
 8022498:	b538      	push	{r3, r4, r5, lr}
 802249a:	4d06      	ldr	r5, [pc, #24]	; (80224b4 <_close_r+0x1c>)
 802249c:	2300      	movs	r3, #0
 802249e:	4604      	mov	r4, r0
 80224a0:	4608      	mov	r0, r1
 80224a2:	602b      	str	r3, [r5, #0]
 80224a4:	f7de fd69 	bl	8000f7a <_close>
 80224a8:	1c43      	adds	r3, r0, #1
 80224aa:	d102      	bne.n	80224b2 <_close_r+0x1a>
 80224ac:	682b      	ldr	r3, [r5, #0]
 80224ae:	b103      	cbz	r3, 80224b2 <_close_r+0x1a>
 80224b0:	6023      	str	r3, [r4, #0]
 80224b2:	bd38      	pop	{r3, r4, r5, pc}
 80224b4:	24014278 	.word	0x24014278

080224b8 <quorem>:
 80224b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224bc:	6903      	ldr	r3, [r0, #16]
 80224be:	690c      	ldr	r4, [r1, #16]
 80224c0:	42a3      	cmp	r3, r4
 80224c2:	4607      	mov	r7, r0
 80224c4:	f2c0 8081 	blt.w	80225ca <quorem+0x112>
 80224c8:	3c01      	subs	r4, #1
 80224ca:	f101 0814 	add.w	r8, r1, #20
 80224ce:	f100 0514 	add.w	r5, r0, #20
 80224d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80224d6:	9301      	str	r3, [sp, #4]
 80224d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80224dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80224e0:	3301      	adds	r3, #1
 80224e2:	429a      	cmp	r2, r3
 80224e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80224e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80224ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80224f0:	d331      	bcc.n	8022556 <quorem+0x9e>
 80224f2:	f04f 0e00 	mov.w	lr, #0
 80224f6:	4640      	mov	r0, r8
 80224f8:	46ac      	mov	ip, r5
 80224fa:	46f2      	mov	sl, lr
 80224fc:	f850 2b04 	ldr.w	r2, [r0], #4
 8022500:	b293      	uxth	r3, r2
 8022502:	fb06 e303 	mla	r3, r6, r3, lr
 8022506:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 802250a:	b29b      	uxth	r3, r3
 802250c:	ebaa 0303 	sub.w	r3, sl, r3
 8022510:	f8dc a000 	ldr.w	sl, [ip]
 8022514:	0c12      	lsrs	r2, r2, #16
 8022516:	fa13 f38a 	uxtah	r3, r3, sl
 802251a:	fb06 e202 	mla	r2, r6, r2, lr
 802251e:	9300      	str	r3, [sp, #0]
 8022520:	9b00      	ldr	r3, [sp, #0]
 8022522:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8022526:	b292      	uxth	r2, r2
 8022528:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 802252c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8022530:	f8bd 3000 	ldrh.w	r3, [sp]
 8022534:	4581      	cmp	r9, r0
 8022536:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802253a:	f84c 3b04 	str.w	r3, [ip], #4
 802253e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8022542:	d2db      	bcs.n	80224fc <quorem+0x44>
 8022544:	f855 300b 	ldr.w	r3, [r5, fp]
 8022548:	b92b      	cbnz	r3, 8022556 <quorem+0x9e>
 802254a:	9b01      	ldr	r3, [sp, #4]
 802254c:	3b04      	subs	r3, #4
 802254e:	429d      	cmp	r5, r3
 8022550:	461a      	mov	r2, r3
 8022552:	d32e      	bcc.n	80225b2 <quorem+0xfa>
 8022554:	613c      	str	r4, [r7, #16]
 8022556:	4638      	mov	r0, r7
 8022558:	f001 f97a 	bl	8023850 <__mcmp>
 802255c:	2800      	cmp	r0, #0
 802255e:	db24      	blt.n	80225aa <quorem+0xf2>
 8022560:	3601      	adds	r6, #1
 8022562:	4628      	mov	r0, r5
 8022564:	f04f 0c00 	mov.w	ip, #0
 8022568:	f858 2b04 	ldr.w	r2, [r8], #4
 802256c:	f8d0 e000 	ldr.w	lr, [r0]
 8022570:	b293      	uxth	r3, r2
 8022572:	ebac 0303 	sub.w	r3, ip, r3
 8022576:	0c12      	lsrs	r2, r2, #16
 8022578:	fa13 f38e 	uxtah	r3, r3, lr
 802257c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8022580:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8022584:	b29b      	uxth	r3, r3
 8022586:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802258a:	45c1      	cmp	r9, r8
 802258c:	f840 3b04 	str.w	r3, [r0], #4
 8022590:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8022594:	d2e8      	bcs.n	8022568 <quorem+0xb0>
 8022596:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802259a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802259e:	b922      	cbnz	r2, 80225aa <quorem+0xf2>
 80225a0:	3b04      	subs	r3, #4
 80225a2:	429d      	cmp	r5, r3
 80225a4:	461a      	mov	r2, r3
 80225a6:	d30a      	bcc.n	80225be <quorem+0x106>
 80225a8:	613c      	str	r4, [r7, #16]
 80225aa:	4630      	mov	r0, r6
 80225ac:	b003      	add	sp, #12
 80225ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225b2:	6812      	ldr	r2, [r2, #0]
 80225b4:	3b04      	subs	r3, #4
 80225b6:	2a00      	cmp	r2, #0
 80225b8:	d1cc      	bne.n	8022554 <quorem+0x9c>
 80225ba:	3c01      	subs	r4, #1
 80225bc:	e7c7      	b.n	802254e <quorem+0x96>
 80225be:	6812      	ldr	r2, [r2, #0]
 80225c0:	3b04      	subs	r3, #4
 80225c2:	2a00      	cmp	r2, #0
 80225c4:	d1f0      	bne.n	80225a8 <quorem+0xf0>
 80225c6:	3c01      	subs	r4, #1
 80225c8:	e7eb      	b.n	80225a2 <quorem+0xea>
 80225ca:	2000      	movs	r0, #0
 80225cc:	e7ee      	b.n	80225ac <quorem+0xf4>
	...

080225d0 <_dtoa_r>:
 80225d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225d4:	ed2d 8b02 	vpush	{d8}
 80225d8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80225da:	b091      	sub	sp, #68	; 0x44
 80225dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80225e0:	ec59 8b10 	vmov	r8, r9, d0
 80225e4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80225e6:	9106      	str	r1, [sp, #24]
 80225e8:	4606      	mov	r6, r0
 80225ea:	9208      	str	r2, [sp, #32]
 80225ec:	930c      	str	r3, [sp, #48]	; 0x30
 80225ee:	b975      	cbnz	r5, 802260e <_dtoa_r+0x3e>
 80225f0:	2010      	movs	r0, #16
 80225f2:	f7fe fdd9 	bl	80211a8 <malloc>
 80225f6:	4602      	mov	r2, r0
 80225f8:	6270      	str	r0, [r6, #36]	; 0x24
 80225fa:	b920      	cbnz	r0, 8022606 <_dtoa_r+0x36>
 80225fc:	4baa      	ldr	r3, [pc, #680]	; (80228a8 <_dtoa_r+0x2d8>)
 80225fe:	21ea      	movs	r1, #234	; 0xea
 8022600:	48aa      	ldr	r0, [pc, #680]	; (80228ac <_dtoa_r+0x2dc>)
 8022602:	f7ff ff2b 	bl	802245c <__assert_func>
 8022606:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802260a:	6005      	str	r5, [r0, #0]
 802260c:	60c5      	str	r5, [r0, #12]
 802260e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8022610:	6819      	ldr	r1, [r3, #0]
 8022612:	b151      	cbz	r1, 802262a <_dtoa_r+0x5a>
 8022614:	685a      	ldr	r2, [r3, #4]
 8022616:	604a      	str	r2, [r1, #4]
 8022618:	2301      	movs	r3, #1
 802261a:	4093      	lsls	r3, r2
 802261c:	608b      	str	r3, [r1, #8]
 802261e:	4630      	mov	r0, r6
 8022620:	f000 fed4 	bl	80233cc <_Bfree>
 8022624:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8022626:	2200      	movs	r2, #0
 8022628:	601a      	str	r2, [r3, #0]
 802262a:	f1b9 0300 	subs.w	r3, r9, #0
 802262e:	bfbb      	ittet	lt
 8022630:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8022634:	9303      	strlt	r3, [sp, #12]
 8022636:	2300      	movge	r3, #0
 8022638:	2201      	movlt	r2, #1
 802263a:	bfac      	ite	ge
 802263c:	6023      	strge	r3, [r4, #0]
 802263e:	6022      	strlt	r2, [r4, #0]
 8022640:	4b9b      	ldr	r3, [pc, #620]	; (80228b0 <_dtoa_r+0x2e0>)
 8022642:	9c03      	ldr	r4, [sp, #12]
 8022644:	43a3      	bics	r3, r4
 8022646:	d11c      	bne.n	8022682 <_dtoa_r+0xb2>
 8022648:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802264a:	f242 730f 	movw	r3, #9999	; 0x270f
 802264e:	6013      	str	r3, [r2, #0]
 8022650:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8022654:	ea53 0308 	orrs.w	r3, r3, r8
 8022658:	f000 84fd 	beq.w	8023056 <_dtoa_r+0xa86>
 802265c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802265e:	b963      	cbnz	r3, 802267a <_dtoa_r+0xaa>
 8022660:	4b94      	ldr	r3, [pc, #592]	; (80228b4 <_dtoa_r+0x2e4>)
 8022662:	e01f      	b.n	80226a4 <_dtoa_r+0xd4>
 8022664:	4b94      	ldr	r3, [pc, #592]	; (80228b8 <_dtoa_r+0x2e8>)
 8022666:	9301      	str	r3, [sp, #4]
 8022668:	3308      	adds	r3, #8
 802266a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802266c:	6013      	str	r3, [r2, #0]
 802266e:	9801      	ldr	r0, [sp, #4]
 8022670:	b011      	add	sp, #68	; 0x44
 8022672:	ecbd 8b02 	vpop	{d8}
 8022676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802267a:	4b8e      	ldr	r3, [pc, #568]	; (80228b4 <_dtoa_r+0x2e4>)
 802267c:	9301      	str	r3, [sp, #4]
 802267e:	3303      	adds	r3, #3
 8022680:	e7f3      	b.n	802266a <_dtoa_r+0x9a>
 8022682:	ed9d 8b02 	vldr	d8, [sp, #8]
 8022686:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802268a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802268e:	d10b      	bne.n	80226a8 <_dtoa_r+0xd8>
 8022690:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022692:	2301      	movs	r3, #1
 8022694:	6013      	str	r3, [r2, #0]
 8022696:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022698:	2b00      	cmp	r3, #0
 802269a:	f000 84d9 	beq.w	8023050 <_dtoa_r+0xa80>
 802269e:	4887      	ldr	r0, [pc, #540]	; (80228bc <_dtoa_r+0x2ec>)
 80226a0:	6018      	str	r0, [r3, #0]
 80226a2:	1e43      	subs	r3, r0, #1
 80226a4:	9301      	str	r3, [sp, #4]
 80226a6:	e7e2      	b.n	802266e <_dtoa_r+0x9e>
 80226a8:	a90f      	add	r1, sp, #60	; 0x3c
 80226aa:	aa0e      	add	r2, sp, #56	; 0x38
 80226ac:	4630      	mov	r0, r6
 80226ae:	eeb0 0b48 	vmov.f64	d0, d8
 80226b2:	f001 f973 	bl	802399c <__d2b>
 80226b6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80226ba:	4605      	mov	r5, r0
 80226bc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80226be:	2900      	cmp	r1, #0
 80226c0:	d046      	beq.n	8022750 <_dtoa_r+0x180>
 80226c2:	ee18 4a90 	vmov	r4, s17
 80226c6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80226ca:	ec53 2b18 	vmov	r2, r3, d8
 80226ce:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80226d2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80226d6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80226da:	2400      	movs	r4, #0
 80226dc:	ec43 2b16 	vmov	d6, r2, r3
 80226e0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80226e4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8022890 <_dtoa_r+0x2c0>
 80226e8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80226ec:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8022898 <_dtoa_r+0x2c8>
 80226f0:	eea7 6b05 	vfma.f64	d6, d7, d5
 80226f4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80228a0 <_dtoa_r+0x2d0>
 80226f8:	ee07 1a90 	vmov	s15, r1
 80226fc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8022700:	eeb0 7b46 	vmov.f64	d7, d6
 8022704:	eea4 7b05 	vfma.f64	d7, d4, d5
 8022708:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 802270c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8022710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022714:	ee16 ba90 	vmov	fp, s13
 8022718:	940a      	str	r4, [sp, #40]	; 0x28
 802271a:	d508      	bpl.n	802272e <_dtoa_r+0x15e>
 802271c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8022720:	eeb4 6b47 	vcmp.f64	d6, d7
 8022724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022728:	bf18      	it	ne
 802272a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 802272e:	f1bb 0f16 	cmp.w	fp, #22
 8022732:	d82f      	bhi.n	8022794 <_dtoa_r+0x1c4>
 8022734:	4b62      	ldr	r3, [pc, #392]	; (80228c0 <_dtoa_r+0x2f0>)
 8022736:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802273a:	ed93 7b00 	vldr	d7, [r3]
 802273e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8022742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022746:	d501      	bpl.n	802274c <_dtoa_r+0x17c>
 8022748:	f10b 3bff 	add.w	fp, fp, #4294967295
 802274c:	2300      	movs	r3, #0
 802274e:	e022      	b.n	8022796 <_dtoa_r+0x1c6>
 8022750:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022752:	4401      	add	r1, r0
 8022754:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8022758:	2b20      	cmp	r3, #32
 802275a:	bfc1      	itttt	gt
 802275c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8022760:	fa04 f303 	lslgt.w	r3, r4, r3
 8022764:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8022768:	fa28 f804 	lsrgt.w	r8, r8, r4
 802276c:	bfd6      	itet	le
 802276e:	f1c3 0320 	rsble	r3, r3, #32
 8022772:	ea43 0808 	orrgt.w	r8, r3, r8
 8022776:	fa08 f803 	lslle.w	r8, r8, r3
 802277a:	ee07 8a90 	vmov	s15, r8
 802277e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8022782:	3901      	subs	r1, #1
 8022784:	ee17 4a90 	vmov	r4, s15
 8022788:	ec53 2b17 	vmov	r2, r3, d7
 802278c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8022790:	2401      	movs	r4, #1
 8022792:	e7a3      	b.n	80226dc <_dtoa_r+0x10c>
 8022794:	2301      	movs	r3, #1
 8022796:	930b      	str	r3, [sp, #44]	; 0x2c
 8022798:	1a43      	subs	r3, r0, r1
 802279a:	1e5a      	subs	r2, r3, #1
 802279c:	bf45      	ittet	mi
 802279e:	f1c3 0301 	rsbmi	r3, r3, #1
 80227a2:	9304      	strmi	r3, [sp, #16]
 80227a4:	2300      	movpl	r3, #0
 80227a6:	2300      	movmi	r3, #0
 80227a8:	9205      	str	r2, [sp, #20]
 80227aa:	bf54      	ite	pl
 80227ac:	9304      	strpl	r3, [sp, #16]
 80227ae:	9305      	strmi	r3, [sp, #20]
 80227b0:	f1bb 0f00 	cmp.w	fp, #0
 80227b4:	db18      	blt.n	80227e8 <_dtoa_r+0x218>
 80227b6:	9b05      	ldr	r3, [sp, #20]
 80227b8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80227bc:	445b      	add	r3, fp
 80227be:	9305      	str	r3, [sp, #20]
 80227c0:	2300      	movs	r3, #0
 80227c2:	9a06      	ldr	r2, [sp, #24]
 80227c4:	2a09      	cmp	r2, #9
 80227c6:	d849      	bhi.n	802285c <_dtoa_r+0x28c>
 80227c8:	2a05      	cmp	r2, #5
 80227ca:	bfc4      	itt	gt
 80227cc:	3a04      	subgt	r2, #4
 80227ce:	9206      	strgt	r2, [sp, #24]
 80227d0:	9a06      	ldr	r2, [sp, #24]
 80227d2:	f1a2 0202 	sub.w	r2, r2, #2
 80227d6:	bfcc      	ite	gt
 80227d8:	2400      	movgt	r4, #0
 80227da:	2401      	movle	r4, #1
 80227dc:	2a03      	cmp	r2, #3
 80227de:	d848      	bhi.n	8022872 <_dtoa_r+0x2a2>
 80227e0:	e8df f002 	tbb	[pc, r2]
 80227e4:	3a2c2e0b 	.word	0x3a2c2e0b
 80227e8:	9b04      	ldr	r3, [sp, #16]
 80227ea:	2200      	movs	r2, #0
 80227ec:	eba3 030b 	sub.w	r3, r3, fp
 80227f0:	9304      	str	r3, [sp, #16]
 80227f2:	9209      	str	r2, [sp, #36]	; 0x24
 80227f4:	f1cb 0300 	rsb	r3, fp, #0
 80227f8:	e7e3      	b.n	80227c2 <_dtoa_r+0x1f2>
 80227fa:	2200      	movs	r2, #0
 80227fc:	9207      	str	r2, [sp, #28]
 80227fe:	9a08      	ldr	r2, [sp, #32]
 8022800:	2a00      	cmp	r2, #0
 8022802:	dc39      	bgt.n	8022878 <_dtoa_r+0x2a8>
 8022804:	f04f 0a01 	mov.w	sl, #1
 8022808:	46d1      	mov	r9, sl
 802280a:	4652      	mov	r2, sl
 802280c:	f8cd a020 	str.w	sl, [sp, #32]
 8022810:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8022812:	2100      	movs	r1, #0
 8022814:	6079      	str	r1, [r7, #4]
 8022816:	2004      	movs	r0, #4
 8022818:	f100 0c14 	add.w	ip, r0, #20
 802281c:	4594      	cmp	ip, r2
 802281e:	6879      	ldr	r1, [r7, #4]
 8022820:	d92f      	bls.n	8022882 <_dtoa_r+0x2b2>
 8022822:	4630      	mov	r0, r6
 8022824:	930d      	str	r3, [sp, #52]	; 0x34
 8022826:	f000 fd91 	bl	802334c <_Balloc>
 802282a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802282c:	9001      	str	r0, [sp, #4]
 802282e:	4602      	mov	r2, r0
 8022830:	2800      	cmp	r0, #0
 8022832:	d149      	bne.n	80228c8 <_dtoa_r+0x2f8>
 8022834:	4b23      	ldr	r3, [pc, #140]	; (80228c4 <_dtoa_r+0x2f4>)
 8022836:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 802283a:	e6e1      	b.n	8022600 <_dtoa_r+0x30>
 802283c:	2201      	movs	r2, #1
 802283e:	e7dd      	b.n	80227fc <_dtoa_r+0x22c>
 8022840:	2200      	movs	r2, #0
 8022842:	9207      	str	r2, [sp, #28]
 8022844:	9a08      	ldr	r2, [sp, #32]
 8022846:	eb0b 0a02 	add.w	sl, fp, r2
 802284a:	f10a 0901 	add.w	r9, sl, #1
 802284e:	464a      	mov	r2, r9
 8022850:	2a01      	cmp	r2, #1
 8022852:	bfb8      	it	lt
 8022854:	2201      	movlt	r2, #1
 8022856:	e7db      	b.n	8022810 <_dtoa_r+0x240>
 8022858:	2201      	movs	r2, #1
 802285a:	e7f2      	b.n	8022842 <_dtoa_r+0x272>
 802285c:	2401      	movs	r4, #1
 802285e:	2200      	movs	r2, #0
 8022860:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8022864:	f04f 3aff 	mov.w	sl, #4294967295
 8022868:	2100      	movs	r1, #0
 802286a:	46d1      	mov	r9, sl
 802286c:	2212      	movs	r2, #18
 802286e:	9108      	str	r1, [sp, #32]
 8022870:	e7ce      	b.n	8022810 <_dtoa_r+0x240>
 8022872:	2201      	movs	r2, #1
 8022874:	9207      	str	r2, [sp, #28]
 8022876:	e7f5      	b.n	8022864 <_dtoa_r+0x294>
 8022878:	f8dd a020 	ldr.w	sl, [sp, #32]
 802287c:	46d1      	mov	r9, sl
 802287e:	4652      	mov	r2, sl
 8022880:	e7c6      	b.n	8022810 <_dtoa_r+0x240>
 8022882:	3101      	adds	r1, #1
 8022884:	6079      	str	r1, [r7, #4]
 8022886:	0040      	lsls	r0, r0, #1
 8022888:	e7c6      	b.n	8022818 <_dtoa_r+0x248>
 802288a:	bf00      	nop
 802288c:	f3af 8000 	nop.w
 8022890:	636f4361 	.word	0x636f4361
 8022894:	3fd287a7 	.word	0x3fd287a7
 8022898:	8b60c8b3 	.word	0x8b60c8b3
 802289c:	3fc68a28 	.word	0x3fc68a28
 80228a0:	509f79fb 	.word	0x509f79fb
 80228a4:	3fd34413 	.word	0x3fd34413
 80228a8:	08026116 	.word	0x08026116
 80228ac:	0802612d 	.word	0x0802612d
 80228b0:	7ff00000 	.word	0x7ff00000
 80228b4:	08026112 	.word	0x08026112
 80228b8:	08026109 	.word	0x08026109
 80228bc:	080260aa 	.word	0x080260aa
 80228c0:	08026220 	.word	0x08026220
 80228c4:	08026188 	.word	0x08026188
 80228c8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80228ca:	9901      	ldr	r1, [sp, #4]
 80228cc:	6011      	str	r1, [r2, #0]
 80228ce:	f1b9 0f0e 	cmp.w	r9, #14
 80228d2:	d86c      	bhi.n	80229ae <_dtoa_r+0x3de>
 80228d4:	2c00      	cmp	r4, #0
 80228d6:	d06a      	beq.n	80229ae <_dtoa_r+0x3de>
 80228d8:	f1bb 0f00 	cmp.w	fp, #0
 80228dc:	f340 80a0 	ble.w	8022a20 <_dtoa_r+0x450>
 80228e0:	49c1      	ldr	r1, [pc, #772]	; (8022be8 <_dtoa_r+0x618>)
 80228e2:	f00b 020f 	and.w	r2, fp, #15
 80228e6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80228ea:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80228ee:	ed92 7b00 	vldr	d7, [r2]
 80228f2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80228f6:	f000 8087 	beq.w	8022a08 <_dtoa_r+0x438>
 80228fa:	4abc      	ldr	r2, [pc, #752]	; (8022bec <_dtoa_r+0x61c>)
 80228fc:	ed92 6b08 	vldr	d6, [r2, #32]
 8022900:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8022904:	ed8d 6b02 	vstr	d6, [sp, #8]
 8022908:	f001 010f 	and.w	r1, r1, #15
 802290c:	2203      	movs	r2, #3
 802290e:	48b7      	ldr	r0, [pc, #732]	; (8022bec <_dtoa_r+0x61c>)
 8022910:	2900      	cmp	r1, #0
 8022912:	d17b      	bne.n	8022a0c <_dtoa_r+0x43c>
 8022914:	ed9d 6b02 	vldr	d6, [sp, #8]
 8022918:	ee86 7b07 	vdiv.f64	d7, d6, d7
 802291c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8022920:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022922:	2900      	cmp	r1, #0
 8022924:	f000 80a2 	beq.w	8022a6c <_dtoa_r+0x49c>
 8022928:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 802292c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8022930:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8022934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022938:	f140 8098 	bpl.w	8022a6c <_dtoa_r+0x49c>
 802293c:	f1b9 0f00 	cmp.w	r9, #0
 8022940:	f000 8094 	beq.w	8022a6c <_dtoa_r+0x49c>
 8022944:	f1ba 0f00 	cmp.w	sl, #0
 8022948:	dd2f      	ble.n	80229aa <_dtoa_r+0x3da>
 802294a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 802294e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022952:	ed8d 7b02 	vstr	d7, [sp, #8]
 8022956:	f10b 37ff 	add.w	r7, fp, #4294967295
 802295a:	3201      	adds	r2, #1
 802295c:	4650      	mov	r0, sl
 802295e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8022962:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8022966:	ee07 2a90 	vmov	s15, r2
 802296a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802296e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8022972:	ee15 4a90 	vmov	r4, s11
 8022976:	ec52 1b15 	vmov	r1, r2, d5
 802297a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 802297e:	2800      	cmp	r0, #0
 8022980:	d177      	bne.n	8022a72 <_dtoa_r+0x4a2>
 8022982:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8022986:	ee36 6b47 	vsub.f64	d6, d6, d7
 802298a:	ec42 1b17 	vmov	d7, r1, r2
 802298e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8022992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022996:	f300 8263 	bgt.w	8022e60 <_dtoa_r+0x890>
 802299a:	eeb1 7b47 	vneg.f64	d7, d7
 802299e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80229a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80229a6:	f100 8258 	bmi.w	8022e5a <_dtoa_r+0x88a>
 80229aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80229ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80229b0:	2a00      	cmp	r2, #0
 80229b2:	f2c0 811d 	blt.w	8022bf0 <_dtoa_r+0x620>
 80229b6:	f1bb 0f0e 	cmp.w	fp, #14
 80229ba:	f300 8119 	bgt.w	8022bf0 <_dtoa_r+0x620>
 80229be:	4b8a      	ldr	r3, [pc, #552]	; (8022be8 <_dtoa_r+0x618>)
 80229c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80229c4:	ed93 6b00 	vldr	d6, [r3]
 80229c8:	9b08      	ldr	r3, [sp, #32]
 80229ca:	2b00      	cmp	r3, #0
 80229cc:	f280 80b7 	bge.w	8022b3e <_dtoa_r+0x56e>
 80229d0:	f1b9 0f00 	cmp.w	r9, #0
 80229d4:	f300 80b3 	bgt.w	8022b3e <_dtoa_r+0x56e>
 80229d8:	f040 823f 	bne.w	8022e5a <_dtoa_r+0x88a>
 80229dc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80229e0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80229e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80229e8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80229ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80229f0:	464c      	mov	r4, r9
 80229f2:	464f      	mov	r7, r9
 80229f4:	f280 8215 	bge.w	8022e22 <_dtoa_r+0x852>
 80229f8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80229fc:	2331      	movs	r3, #49	; 0x31
 80229fe:	f808 3b01 	strb.w	r3, [r8], #1
 8022a02:	f10b 0b01 	add.w	fp, fp, #1
 8022a06:	e211      	b.n	8022e2c <_dtoa_r+0x85c>
 8022a08:	2202      	movs	r2, #2
 8022a0a:	e780      	b.n	802290e <_dtoa_r+0x33e>
 8022a0c:	07cc      	lsls	r4, r1, #31
 8022a0e:	d504      	bpl.n	8022a1a <_dtoa_r+0x44a>
 8022a10:	ed90 6b00 	vldr	d6, [r0]
 8022a14:	3201      	adds	r2, #1
 8022a16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022a1a:	1049      	asrs	r1, r1, #1
 8022a1c:	3008      	adds	r0, #8
 8022a1e:	e777      	b.n	8022910 <_dtoa_r+0x340>
 8022a20:	d022      	beq.n	8022a68 <_dtoa_r+0x498>
 8022a22:	f1cb 0100 	rsb	r1, fp, #0
 8022a26:	4a70      	ldr	r2, [pc, #448]	; (8022be8 <_dtoa_r+0x618>)
 8022a28:	f001 000f 	and.w	r0, r1, #15
 8022a2c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8022a30:	ed92 7b00 	vldr	d7, [r2]
 8022a34:	ee28 7b07 	vmul.f64	d7, d8, d7
 8022a38:	ed8d 7b02 	vstr	d7, [sp, #8]
 8022a3c:	486b      	ldr	r0, [pc, #428]	; (8022bec <_dtoa_r+0x61c>)
 8022a3e:	1109      	asrs	r1, r1, #4
 8022a40:	2400      	movs	r4, #0
 8022a42:	2202      	movs	r2, #2
 8022a44:	b929      	cbnz	r1, 8022a52 <_dtoa_r+0x482>
 8022a46:	2c00      	cmp	r4, #0
 8022a48:	f43f af6a 	beq.w	8022920 <_dtoa_r+0x350>
 8022a4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8022a50:	e766      	b.n	8022920 <_dtoa_r+0x350>
 8022a52:	07cf      	lsls	r7, r1, #31
 8022a54:	d505      	bpl.n	8022a62 <_dtoa_r+0x492>
 8022a56:	ed90 6b00 	vldr	d6, [r0]
 8022a5a:	3201      	adds	r2, #1
 8022a5c:	2401      	movs	r4, #1
 8022a5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022a62:	1049      	asrs	r1, r1, #1
 8022a64:	3008      	adds	r0, #8
 8022a66:	e7ed      	b.n	8022a44 <_dtoa_r+0x474>
 8022a68:	2202      	movs	r2, #2
 8022a6a:	e759      	b.n	8022920 <_dtoa_r+0x350>
 8022a6c:	465f      	mov	r7, fp
 8022a6e:	4648      	mov	r0, r9
 8022a70:	e775      	b.n	802295e <_dtoa_r+0x38e>
 8022a72:	ec42 1b17 	vmov	d7, r1, r2
 8022a76:	4a5c      	ldr	r2, [pc, #368]	; (8022be8 <_dtoa_r+0x618>)
 8022a78:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8022a7c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8022a80:	9a01      	ldr	r2, [sp, #4]
 8022a82:	1814      	adds	r4, r2, r0
 8022a84:	9a07      	ldr	r2, [sp, #28]
 8022a86:	b352      	cbz	r2, 8022ade <_dtoa_r+0x50e>
 8022a88:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8022a8c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8022a90:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8022a94:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8022a98:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8022a9c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8022aa0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8022aa4:	ee14 2a90 	vmov	r2, s9
 8022aa8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8022aac:	3230      	adds	r2, #48	; 0x30
 8022aae:	ee36 6b45 	vsub.f64	d6, d6, d5
 8022ab2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8022ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022aba:	f808 2b01 	strb.w	r2, [r8], #1
 8022abe:	d439      	bmi.n	8022b34 <_dtoa_r+0x564>
 8022ac0:	ee32 5b46 	vsub.f64	d5, d2, d6
 8022ac4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8022ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022acc:	d472      	bmi.n	8022bb4 <_dtoa_r+0x5e4>
 8022ace:	45a0      	cmp	r8, r4
 8022ad0:	f43f af6b 	beq.w	80229aa <_dtoa_r+0x3da>
 8022ad4:	ee27 7b03 	vmul.f64	d7, d7, d3
 8022ad8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8022adc:	e7e0      	b.n	8022aa0 <_dtoa_r+0x4d0>
 8022ade:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8022ae2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8022ae6:	4621      	mov	r1, r4
 8022ae8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8022aec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8022af0:	ee14 2a90 	vmov	r2, s9
 8022af4:	3230      	adds	r2, #48	; 0x30
 8022af6:	f808 2b01 	strb.w	r2, [r8], #1
 8022afa:	45a0      	cmp	r8, r4
 8022afc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8022b00:	ee36 6b45 	vsub.f64	d6, d6, d5
 8022b04:	d118      	bne.n	8022b38 <_dtoa_r+0x568>
 8022b06:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8022b0a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8022b0e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8022b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022b16:	dc4d      	bgt.n	8022bb4 <_dtoa_r+0x5e4>
 8022b18:	ee35 7b47 	vsub.f64	d7, d5, d7
 8022b1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8022b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022b24:	f57f af41 	bpl.w	80229aa <_dtoa_r+0x3da>
 8022b28:	4688      	mov	r8, r1
 8022b2a:	3901      	subs	r1, #1
 8022b2c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8022b30:	2b30      	cmp	r3, #48	; 0x30
 8022b32:	d0f9      	beq.n	8022b28 <_dtoa_r+0x558>
 8022b34:	46bb      	mov	fp, r7
 8022b36:	e02a      	b.n	8022b8e <_dtoa_r+0x5be>
 8022b38:	ee26 6b03 	vmul.f64	d6, d6, d3
 8022b3c:	e7d6      	b.n	8022aec <_dtoa_r+0x51c>
 8022b3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8022b42:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8022b46:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8022b4a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8022b4e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8022b52:	ee15 3a10 	vmov	r3, s10
 8022b56:	3330      	adds	r3, #48	; 0x30
 8022b58:	f808 3b01 	strb.w	r3, [r8], #1
 8022b5c:	9b01      	ldr	r3, [sp, #4]
 8022b5e:	eba8 0303 	sub.w	r3, r8, r3
 8022b62:	4599      	cmp	r9, r3
 8022b64:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8022b68:	eea3 7b46 	vfms.f64	d7, d3, d6
 8022b6c:	d133      	bne.n	8022bd6 <_dtoa_r+0x606>
 8022b6e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8022b72:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8022b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022b7a:	dc1a      	bgt.n	8022bb2 <_dtoa_r+0x5e2>
 8022b7c:	eeb4 7b46 	vcmp.f64	d7, d6
 8022b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022b84:	d103      	bne.n	8022b8e <_dtoa_r+0x5be>
 8022b86:	ee15 3a10 	vmov	r3, s10
 8022b8a:	07d9      	lsls	r1, r3, #31
 8022b8c:	d411      	bmi.n	8022bb2 <_dtoa_r+0x5e2>
 8022b8e:	4629      	mov	r1, r5
 8022b90:	4630      	mov	r0, r6
 8022b92:	f000 fc1b 	bl	80233cc <_Bfree>
 8022b96:	2300      	movs	r3, #0
 8022b98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022b9a:	f888 3000 	strb.w	r3, [r8]
 8022b9e:	f10b 0301 	add.w	r3, fp, #1
 8022ba2:	6013      	str	r3, [r2, #0]
 8022ba4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022ba6:	2b00      	cmp	r3, #0
 8022ba8:	f43f ad61 	beq.w	802266e <_dtoa_r+0x9e>
 8022bac:	f8c3 8000 	str.w	r8, [r3]
 8022bb0:	e55d      	b.n	802266e <_dtoa_r+0x9e>
 8022bb2:	465f      	mov	r7, fp
 8022bb4:	4643      	mov	r3, r8
 8022bb6:	4698      	mov	r8, r3
 8022bb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8022bbc:	2a39      	cmp	r2, #57	; 0x39
 8022bbe:	d106      	bne.n	8022bce <_dtoa_r+0x5fe>
 8022bc0:	9a01      	ldr	r2, [sp, #4]
 8022bc2:	429a      	cmp	r2, r3
 8022bc4:	d1f7      	bne.n	8022bb6 <_dtoa_r+0x5e6>
 8022bc6:	9901      	ldr	r1, [sp, #4]
 8022bc8:	2230      	movs	r2, #48	; 0x30
 8022bca:	3701      	adds	r7, #1
 8022bcc:	700a      	strb	r2, [r1, #0]
 8022bce:	781a      	ldrb	r2, [r3, #0]
 8022bd0:	3201      	adds	r2, #1
 8022bd2:	701a      	strb	r2, [r3, #0]
 8022bd4:	e7ae      	b.n	8022b34 <_dtoa_r+0x564>
 8022bd6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8022bda:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8022bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022be2:	d1b2      	bne.n	8022b4a <_dtoa_r+0x57a>
 8022be4:	e7d3      	b.n	8022b8e <_dtoa_r+0x5be>
 8022be6:	bf00      	nop
 8022be8:	08026220 	.word	0x08026220
 8022bec:	080261f8 	.word	0x080261f8
 8022bf0:	9907      	ldr	r1, [sp, #28]
 8022bf2:	2900      	cmp	r1, #0
 8022bf4:	f000 80d0 	beq.w	8022d98 <_dtoa_r+0x7c8>
 8022bf8:	9906      	ldr	r1, [sp, #24]
 8022bfa:	2901      	cmp	r1, #1
 8022bfc:	f300 80b4 	bgt.w	8022d68 <_dtoa_r+0x798>
 8022c00:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022c02:	2900      	cmp	r1, #0
 8022c04:	f000 80ac 	beq.w	8022d60 <_dtoa_r+0x790>
 8022c08:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8022c0c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8022c10:	461c      	mov	r4, r3
 8022c12:	930a      	str	r3, [sp, #40]	; 0x28
 8022c14:	9b04      	ldr	r3, [sp, #16]
 8022c16:	4413      	add	r3, r2
 8022c18:	9304      	str	r3, [sp, #16]
 8022c1a:	9b05      	ldr	r3, [sp, #20]
 8022c1c:	2101      	movs	r1, #1
 8022c1e:	4413      	add	r3, r2
 8022c20:	4630      	mov	r0, r6
 8022c22:	9305      	str	r3, [sp, #20]
 8022c24:	f000 fc8a 	bl	802353c <__i2b>
 8022c28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022c2a:	4607      	mov	r7, r0
 8022c2c:	f1b8 0f00 	cmp.w	r8, #0
 8022c30:	dd0d      	ble.n	8022c4e <_dtoa_r+0x67e>
 8022c32:	9a05      	ldr	r2, [sp, #20]
 8022c34:	2a00      	cmp	r2, #0
 8022c36:	dd0a      	ble.n	8022c4e <_dtoa_r+0x67e>
 8022c38:	4542      	cmp	r2, r8
 8022c3a:	9904      	ldr	r1, [sp, #16]
 8022c3c:	bfa8      	it	ge
 8022c3e:	4642      	movge	r2, r8
 8022c40:	1a89      	subs	r1, r1, r2
 8022c42:	9104      	str	r1, [sp, #16]
 8022c44:	9905      	ldr	r1, [sp, #20]
 8022c46:	eba8 0802 	sub.w	r8, r8, r2
 8022c4a:	1a8a      	subs	r2, r1, r2
 8022c4c:	9205      	str	r2, [sp, #20]
 8022c4e:	b303      	cbz	r3, 8022c92 <_dtoa_r+0x6c2>
 8022c50:	9a07      	ldr	r2, [sp, #28]
 8022c52:	2a00      	cmp	r2, #0
 8022c54:	f000 80a5 	beq.w	8022da2 <_dtoa_r+0x7d2>
 8022c58:	2c00      	cmp	r4, #0
 8022c5a:	dd13      	ble.n	8022c84 <_dtoa_r+0x6b4>
 8022c5c:	4639      	mov	r1, r7
 8022c5e:	4622      	mov	r2, r4
 8022c60:	4630      	mov	r0, r6
 8022c62:	930d      	str	r3, [sp, #52]	; 0x34
 8022c64:	f000 fd2a 	bl	80236bc <__pow5mult>
 8022c68:	462a      	mov	r2, r5
 8022c6a:	4601      	mov	r1, r0
 8022c6c:	4607      	mov	r7, r0
 8022c6e:	4630      	mov	r0, r6
 8022c70:	f000 fc7a 	bl	8023568 <__multiply>
 8022c74:	4629      	mov	r1, r5
 8022c76:	900a      	str	r0, [sp, #40]	; 0x28
 8022c78:	4630      	mov	r0, r6
 8022c7a:	f000 fba7 	bl	80233cc <_Bfree>
 8022c7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022c80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022c82:	4615      	mov	r5, r2
 8022c84:	1b1a      	subs	r2, r3, r4
 8022c86:	d004      	beq.n	8022c92 <_dtoa_r+0x6c2>
 8022c88:	4629      	mov	r1, r5
 8022c8a:	4630      	mov	r0, r6
 8022c8c:	f000 fd16 	bl	80236bc <__pow5mult>
 8022c90:	4605      	mov	r5, r0
 8022c92:	2101      	movs	r1, #1
 8022c94:	4630      	mov	r0, r6
 8022c96:	f000 fc51 	bl	802353c <__i2b>
 8022c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022c9c:	2b00      	cmp	r3, #0
 8022c9e:	4604      	mov	r4, r0
 8022ca0:	f340 8081 	ble.w	8022da6 <_dtoa_r+0x7d6>
 8022ca4:	461a      	mov	r2, r3
 8022ca6:	4601      	mov	r1, r0
 8022ca8:	4630      	mov	r0, r6
 8022caa:	f000 fd07 	bl	80236bc <__pow5mult>
 8022cae:	9b06      	ldr	r3, [sp, #24]
 8022cb0:	2b01      	cmp	r3, #1
 8022cb2:	4604      	mov	r4, r0
 8022cb4:	dd7a      	ble.n	8022dac <_dtoa_r+0x7dc>
 8022cb6:	2300      	movs	r3, #0
 8022cb8:	930a      	str	r3, [sp, #40]	; 0x28
 8022cba:	6922      	ldr	r2, [r4, #16]
 8022cbc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8022cc0:	6910      	ldr	r0, [r2, #16]
 8022cc2:	f000 fbeb 	bl	802349c <__hi0bits>
 8022cc6:	f1c0 0020 	rsb	r0, r0, #32
 8022cca:	9b05      	ldr	r3, [sp, #20]
 8022ccc:	4418      	add	r0, r3
 8022cce:	f010 001f 	ands.w	r0, r0, #31
 8022cd2:	f000 808c 	beq.w	8022dee <_dtoa_r+0x81e>
 8022cd6:	f1c0 0220 	rsb	r2, r0, #32
 8022cda:	2a04      	cmp	r2, #4
 8022cdc:	f340 8085 	ble.w	8022dea <_dtoa_r+0x81a>
 8022ce0:	f1c0 001c 	rsb	r0, r0, #28
 8022ce4:	9b04      	ldr	r3, [sp, #16]
 8022ce6:	4403      	add	r3, r0
 8022ce8:	9304      	str	r3, [sp, #16]
 8022cea:	9b05      	ldr	r3, [sp, #20]
 8022cec:	4403      	add	r3, r0
 8022cee:	4480      	add	r8, r0
 8022cf0:	9305      	str	r3, [sp, #20]
 8022cf2:	9b04      	ldr	r3, [sp, #16]
 8022cf4:	2b00      	cmp	r3, #0
 8022cf6:	dd05      	ble.n	8022d04 <_dtoa_r+0x734>
 8022cf8:	4629      	mov	r1, r5
 8022cfa:	461a      	mov	r2, r3
 8022cfc:	4630      	mov	r0, r6
 8022cfe:	f000 fd37 	bl	8023770 <__lshift>
 8022d02:	4605      	mov	r5, r0
 8022d04:	9b05      	ldr	r3, [sp, #20]
 8022d06:	2b00      	cmp	r3, #0
 8022d08:	dd05      	ble.n	8022d16 <_dtoa_r+0x746>
 8022d0a:	4621      	mov	r1, r4
 8022d0c:	461a      	mov	r2, r3
 8022d0e:	4630      	mov	r0, r6
 8022d10:	f000 fd2e 	bl	8023770 <__lshift>
 8022d14:	4604      	mov	r4, r0
 8022d16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022d18:	2b00      	cmp	r3, #0
 8022d1a:	d06a      	beq.n	8022df2 <_dtoa_r+0x822>
 8022d1c:	4621      	mov	r1, r4
 8022d1e:	4628      	mov	r0, r5
 8022d20:	f000 fd96 	bl	8023850 <__mcmp>
 8022d24:	2800      	cmp	r0, #0
 8022d26:	da64      	bge.n	8022df2 <_dtoa_r+0x822>
 8022d28:	2300      	movs	r3, #0
 8022d2a:	4629      	mov	r1, r5
 8022d2c:	220a      	movs	r2, #10
 8022d2e:	4630      	mov	r0, r6
 8022d30:	f000 fb6e 	bl	8023410 <__multadd>
 8022d34:	9b07      	ldr	r3, [sp, #28]
 8022d36:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022d3a:	4605      	mov	r5, r0
 8022d3c:	2b00      	cmp	r3, #0
 8022d3e:	f000 8191 	beq.w	8023064 <_dtoa_r+0xa94>
 8022d42:	4639      	mov	r1, r7
 8022d44:	2300      	movs	r3, #0
 8022d46:	220a      	movs	r2, #10
 8022d48:	4630      	mov	r0, r6
 8022d4a:	f000 fb61 	bl	8023410 <__multadd>
 8022d4e:	f1ba 0f00 	cmp.w	sl, #0
 8022d52:	4607      	mov	r7, r0
 8022d54:	f300 808d 	bgt.w	8022e72 <_dtoa_r+0x8a2>
 8022d58:	9b06      	ldr	r3, [sp, #24]
 8022d5a:	2b02      	cmp	r3, #2
 8022d5c:	dc50      	bgt.n	8022e00 <_dtoa_r+0x830>
 8022d5e:	e088      	b.n	8022e72 <_dtoa_r+0x8a2>
 8022d60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022d62:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8022d66:	e751      	b.n	8022c0c <_dtoa_r+0x63c>
 8022d68:	f109 34ff 	add.w	r4, r9, #4294967295
 8022d6c:	42a3      	cmp	r3, r4
 8022d6e:	bfbf      	itttt	lt
 8022d70:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8022d72:	1ae3      	sublt	r3, r4, r3
 8022d74:	18d2      	addlt	r2, r2, r3
 8022d76:	9209      	strlt	r2, [sp, #36]	; 0x24
 8022d78:	bfb6      	itet	lt
 8022d7a:	4623      	movlt	r3, r4
 8022d7c:	1b1c      	subge	r4, r3, r4
 8022d7e:	2400      	movlt	r4, #0
 8022d80:	f1b9 0f00 	cmp.w	r9, #0
 8022d84:	bfb5      	itete	lt
 8022d86:	9a04      	ldrlt	r2, [sp, #16]
 8022d88:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8022d8c:	eba2 0809 	sublt.w	r8, r2, r9
 8022d90:	464a      	movge	r2, r9
 8022d92:	bfb8      	it	lt
 8022d94:	2200      	movlt	r2, #0
 8022d96:	e73c      	b.n	8022c12 <_dtoa_r+0x642>
 8022d98:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8022d9c:	9f07      	ldr	r7, [sp, #28]
 8022d9e:	461c      	mov	r4, r3
 8022da0:	e744      	b.n	8022c2c <_dtoa_r+0x65c>
 8022da2:	461a      	mov	r2, r3
 8022da4:	e770      	b.n	8022c88 <_dtoa_r+0x6b8>
 8022da6:	9b06      	ldr	r3, [sp, #24]
 8022da8:	2b01      	cmp	r3, #1
 8022daa:	dc18      	bgt.n	8022dde <_dtoa_r+0x80e>
 8022dac:	9b02      	ldr	r3, [sp, #8]
 8022dae:	b9b3      	cbnz	r3, 8022dde <_dtoa_r+0x80e>
 8022db0:	9b03      	ldr	r3, [sp, #12]
 8022db2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8022db6:	b9a2      	cbnz	r2, 8022de2 <_dtoa_r+0x812>
 8022db8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8022dbc:	0d12      	lsrs	r2, r2, #20
 8022dbe:	0512      	lsls	r2, r2, #20
 8022dc0:	b18a      	cbz	r2, 8022de6 <_dtoa_r+0x816>
 8022dc2:	9b04      	ldr	r3, [sp, #16]
 8022dc4:	3301      	adds	r3, #1
 8022dc6:	9304      	str	r3, [sp, #16]
 8022dc8:	9b05      	ldr	r3, [sp, #20]
 8022dca:	3301      	adds	r3, #1
 8022dcc:	9305      	str	r3, [sp, #20]
 8022dce:	2301      	movs	r3, #1
 8022dd0:	930a      	str	r3, [sp, #40]	; 0x28
 8022dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022dd4:	2b00      	cmp	r3, #0
 8022dd6:	f47f af70 	bne.w	8022cba <_dtoa_r+0x6ea>
 8022dda:	2001      	movs	r0, #1
 8022ddc:	e775      	b.n	8022cca <_dtoa_r+0x6fa>
 8022dde:	2300      	movs	r3, #0
 8022de0:	e7f6      	b.n	8022dd0 <_dtoa_r+0x800>
 8022de2:	9b02      	ldr	r3, [sp, #8]
 8022de4:	e7f4      	b.n	8022dd0 <_dtoa_r+0x800>
 8022de6:	920a      	str	r2, [sp, #40]	; 0x28
 8022de8:	e7f3      	b.n	8022dd2 <_dtoa_r+0x802>
 8022dea:	d082      	beq.n	8022cf2 <_dtoa_r+0x722>
 8022dec:	4610      	mov	r0, r2
 8022dee:	301c      	adds	r0, #28
 8022df0:	e778      	b.n	8022ce4 <_dtoa_r+0x714>
 8022df2:	f1b9 0f00 	cmp.w	r9, #0
 8022df6:	dc37      	bgt.n	8022e68 <_dtoa_r+0x898>
 8022df8:	9b06      	ldr	r3, [sp, #24]
 8022dfa:	2b02      	cmp	r3, #2
 8022dfc:	dd34      	ble.n	8022e68 <_dtoa_r+0x898>
 8022dfe:	46ca      	mov	sl, r9
 8022e00:	f1ba 0f00 	cmp.w	sl, #0
 8022e04:	d10d      	bne.n	8022e22 <_dtoa_r+0x852>
 8022e06:	4621      	mov	r1, r4
 8022e08:	4653      	mov	r3, sl
 8022e0a:	2205      	movs	r2, #5
 8022e0c:	4630      	mov	r0, r6
 8022e0e:	f000 faff 	bl	8023410 <__multadd>
 8022e12:	4601      	mov	r1, r0
 8022e14:	4604      	mov	r4, r0
 8022e16:	4628      	mov	r0, r5
 8022e18:	f000 fd1a 	bl	8023850 <__mcmp>
 8022e1c:	2800      	cmp	r0, #0
 8022e1e:	f73f adeb 	bgt.w	80229f8 <_dtoa_r+0x428>
 8022e22:	9b08      	ldr	r3, [sp, #32]
 8022e24:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8022e28:	ea6f 0b03 	mvn.w	fp, r3
 8022e2c:	f04f 0900 	mov.w	r9, #0
 8022e30:	4621      	mov	r1, r4
 8022e32:	4630      	mov	r0, r6
 8022e34:	f000 faca 	bl	80233cc <_Bfree>
 8022e38:	2f00      	cmp	r7, #0
 8022e3a:	f43f aea8 	beq.w	8022b8e <_dtoa_r+0x5be>
 8022e3e:	f1b9 0f00 	cmp.w	r9, #0
 8022e42:	d005      	beq.n	8022e50 <_dtoa_r+0x880>
 8022e44:	45b9      	cmp	r9, r7
 8022e46:	d003      	beq.n	8022e50 <_dtoa_r+0x880>
 8022e48:	4649      	mov	r1, r9
 8022e4a:	4630      	mov	r0, r6
 8022e4c:	f000 fabe 	bl	80233cc <_Bfree>
 8022e50:	4639      	mov	r1, r7
 8022e52:	4630      	mov	r0, r6
 8022e54:	f000 faba 	bl	80233cc <_Bfree>
 8022e58:	e699      	b.n	8022b8e <_dtoa_r+0x5be>
 8022e5a:	2400      	movs	r4, #0
 8022e5c:	4627      	mov	r7, r4
 8022e5e:	e7e0      	b.n	8022e22 <_dtoa_r+0x852>
 8022e60:	46bb      	mov	fp, r7
 8022e62:	4604      	mov	r4, r0
 8022e64:	4607      	mov	r7, r0
 8022e66:	e5c7      	b.n	80229f8 <_dtoa_r+0x428>
 8022e68:	9b07      	ldr	r3, [sp, #28]
 8022e6a:	46ca      	mov	sl, r9
 8022e6c:	2b00      	cmp	r3, #0
 8022e6e:	f000 8100 	beq.w	8023072 <_dtoa_r+0xaa2>
 8022e72:	f1b8 0f00 	cmp.w	r8, #0
 8022e76:	dd05      	ble.n	8022e84 <_dtoa_r+0x8b4>
 8022e78:	4639      	mov	r1, r7
 8022e7a:	4642      	mov	r2, r8
 8022e7c:	4630      	mov	r0, r6
 8022e7e:	f000 fc77 	bl	8023770 <__lshift>
 8022e82:	4607      	mov	r7, r0
 8022e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022e86:	2b00      	cmp	r3, #0
 8022e88:	d05d      	beq.n	8022f46 <_dtoa_r+0x976>
 8022e8a:	6879      	ldr	r1, [r7, #4]
 8022e8c:	4630      	mov	r0, r6
 8022e8e:	f000 fa5d 	bl	802334c <_Balloc>
 8022e92:	4680      	mov	r8, r0
 8022e94:	b928      	cbnz	r0, 8022ea2 <_dtoa_r+0x8d2>
 8022e96:	4b82      	ldr	r3, [pc, #520]	; (80230a0 <_dtoa_r+0xad0>)
 8022e98:	4602      	mov	r2, r0
 8022e9a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8022e9e:	f7ff bbaf 	b.w	8022600 <_dtoa_r+0x30>
 8022ea2:	693a      	ldr	r2, [r7, #16]
 8022ea4:	3202      	adds	r2, #2
 8022ea6:	0092      	lsls	r2, r2, #2
 8022ea8:	f107 010c 	add.w	r1, r7, #12
 8022eac:	300c      	adds	r0, #12
 8022eae:	f7fe f983 	bl	80211b8 <memcpy>
 8022eb2:	2201      	movs	r2, #1
 8022eb4:	4641      	mov	r1, r8
 8022eb6:	4630      	mov	r0, r6
 8022eb8:	f000 fc5a 	bl	8023770 <__lshift>
 8022ebc:	9b01      	ldr	r3, [sp, #4]
 8022ebe:	3301      	adds	r3, #1
 8022ec0:	9304      	str	r3, [sp, #16]
 8022ec2:	9b01      	ldr	r3, [sp, #4]
 8022ec4:	4453      	add	r3, sl
 8022ec6:	9308      	str	r3, [sp, #32]
 8022ec8:	9b02      	ldr	r3, [sp, #8]
 8022eca:	f003 0301 	and.w	r3, r3, #1
 8022ece:	46b9      	mov	r9, r7
 8022ed0:	9307      	str	r3, [sp, #28]
 8022ed2:	4607      	mov	r7, r0
 8022ed4:	9b04      	ldr	r3, [sp, #16]
 8022ed6:	4621      	mov	r1, r4
 8022ed8:	3b01      	subs	r3, #1
 8022eda:	4628      	mov	r0, r5
 8022edc:	9302      	str	r3, [sp, #8]
 8022ede:	f7ff faeb 	bl	80224b8 <quorem>
 8022ee2:	4603      	mov	r3, r0
 8022ee4:	3330      	adds	r3, #48	; 0x30
 8022ee6:	9005      	str	r0, [sp, #20]
 8022ee8:	4649      	mov	r1, r9
 8022eea:	4628      	mov	r0, r5
 8022eec:	9309      	str	r3, [sp, #36]	; 0x24
 8022eee:	f000 fcaf 	bl	8023850 <__mcmp>
 8022ef2:	463a      	mov	r2, r7
 8022ef4:	4682      	mov	sl, r0
 8022ef6:	4621      	mov	r1, r4
 8022ef8:	4630      	mov	r0, r6
 8022efa:	f000 fcc5 	bl	8023888 <__mdiff>
 8022efe:	68c2      	ldr	r2, [r0, #12]
 8022f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022f02:	4680      	mov	r8, r0
 8022f04:	bb0a      	cbnz	r2, 8022f4a <_dtoa_r+0x97a>
 8022f06:	4601      	mov	r1, r0
 8022f08:	4628      	mov	r0, r5
 8022f0a:	f000 fca1 	bl	8023850 <__mcmp>
 8022f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022f10:	4602      	mov	r2, r0
 8022f12:	4641      	mov	r1, r8
 8022f14:	4630      	mov	r0, r6
 8022f16:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8022f1a:	f000 fa57 	bl	80233cc <_Bfree>
 8022f1e:	9b06      	ldr	r3, [sp, #24]
 8022f20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022f22:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8022f26:	ea43 0102 	orr.w	r1, r3, r2
 8022f2a:	9b07      	ldr	r3, [sp, #28]
 8022f2c:	430b      	orrs	r3, r1
 8022f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022f30:	d10d      	bne.n	8022f4e <_dtoa_r+0x97e>
 8022f32:	2b39      	cmp	r3, #57	; 0x39
 8022f34:	d029      	beq.n	8022f8a <_dtoa_r+0x9ba>
 8022f36:	f1ba 0f00 	cmp.w	sl, #0
 8022f3a:	dd01      	ble.n	8022f40 <_dtoa_r+0x970>
 8022f3c:	9b05      	ldr	r3, [sp, #20]
 8022f3e:	3331      	adds	r3, #49	; 0x31
 8022f40:	9a02      	ldr	r2, [sp, #8]
 8022f42:	7013      	strb	r3, [r2, #0]
 8022f44:	e774      	b.n	8022e30 <_dtoa_r+0x860>
 8022f46:	4638      	mov	r0, r7
 8022f48:	e7b8      	b.n	8022ebc <_dtoa_r+0x8ec>
 8022f4a:	2201      	movs	r2, #1
 8022f4c:	e7e1      	b.n	8022f12 <_dtoa_r+0x942>
 8022f4e:	f1ba 0f00 	cmp.w	sl, #0
 8022f52:	db06      	blt.n	8022f62 <_dtoa_r+0x992>
 8022f54:	9906      	ldr	r1, [sp, #24]
 8022f56:	ea41 0a0a 	orr.w	sl, r1, sl
 8022f5a:	9907      	ldr	r1, [sp, #28]
 8022f5c:	ea5a 0101 	orrs.w	r1, sl, r1
 8022f60:	d120      	bne.n	8022fa4 <_dtoa_r+0x9d4>
 8022f62:	2a00      	cmp	r2, #0
 8022f64:	ddec      	ble.n	8022f40 <_dtoa_r+0x970>
 8022f66:	4629      	mov	r1, r5
 8022f68:	2201      	movs	r2, #1
 8022f6a:	4630      	mov	r0, r6
 8022f6c:	9304      	str	r3, [sp, #16]
 8022f6e:	f000 fbff 	bl	8023770 <__lshift>
 8022f72:	4621      	mov	r1, r4
 8022f74:	4605      	mov	r5, r0
 8022f76:	f000 fc6b 	bl	8023850 <__mcmp>
 8022f7a:	2800      	cmp	r0, #0
 8022f7c:	9b04      	ldr	r3, [sp, #16]
 8022f7e:	dc02      	bgt.n	8022f86 <_dtoa_r+0x9b6>
 8022f80:	d1de      	bne.n	8022f40 <_dtoa_r+0x970>
 8022f82:	07da      	lsls	r2, r3, #31
 8022f84:	d5dc      	bpl.n	8022f40 <_dtoa_r+0x970>
 8022f86:	2b39      	cmp	r3, #57	; 0x39
 8022f88:	d1d8      	bne.n	8022f3c <_dtoa_r+0x96c>
 8022f8a:	9a02      	ldr	r2, [sp, #8]
 8022f8c:	2339      	movs	r3, #57	; 0x39
 8022f8e:	7013      	strb	r3, [r2, #0]
 8022f90:	4643      	mov	r3, r8
 8022f92:	4698      	mov	r8, r3
 8022f94:	3b01      	subs	r3, #1
 8022f96:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8022f9a:	2a39      	cmp	r2, #57	; 0x39
 8022f9c:	d051      	beq.n	8023042 <_dtoa_r+0xa72>
 8022f9e:	3201      	adds	r2, #1
 8022fa0:	701a      	strb	r2, [r3, #0]
 8022fa2:	e745      	b.n	8022e30 <_dtoa_r+0x860>
 8022fa4:	2a00      	cmp	r2, #0
 8022fa6:	dd03      	ble.n	8022fb0 <_dtoa_r+0x9e0>
 8022fa8:	2b39      	cmp	r3, #57	; 0x39
 8022faa:	d0ee      	beq.n	8022f8a <_dtoa_r+0x9ba>
 8022fac:	3301      	adds	r3, #1
 8022fae:	e7c7      	b.n	8022f40 <_dtoa_r+0x970>
 8022fb0:	9a04      	ldr	r2, [sp, #16]
 8022fb2:	9908      	ldr	r1, [sp, #32]
 8022fb4:	f802 3c01 	strb.w	r3, [r2, #-1]
 8022fb8:	428a      	cmp	r2, r1
 8022fba:	d02b      	beq.n	8023014 <_dtoa_r+0xa44>
 8022fbc:	4629      	mov	r1, r5
 8022fbe:	2300      	movs	r3, #0
 8022fc0:	220a      	movs	r2, #10
 8022fc2:	4630      	mov	r0, r6
 8022fc4:	f000 fa24 	bl	8023410 <__multadd>
 8022fc8:	45b9      	cmp	r9, r7
 8022fca:	4605      	mov	r5, r0
 8022fcc:	f04f 0300 	mov.w	r3, #0
 8022fd0:	f04f 020a 	mov.w	r2, #10
 8022fd4:	4649      	mov	r1, r9
 8022fd6:	4630      	mov	r0, r6
 8022fd8:	d107      	bne.n	8022fea <_dtoa_r+0xa1a>
 8022fda:	f000 fa19 	bl	8023410 <__multadd>
 8022fde:	4681      	mov	r9, r0
 8022fe0:	4607      	mov	r7, r0
 8022fe2:	9b04      	ldr	r3, [sp, #16]
 8022fe4:	3301      	adds	r3, #1
 8022fe6:	9304      	str	r3, [sp, #16]
 8022fe8:	e774      	b.n	8022ed4 <_dtoa_r+0x904>
 8022fea:	f000 fa11 	bl	8023410 <__multadd>
 8022fee:	4639      	mov	r1, r7
 8022ff0:	4681      	mov	r9, r0
 8022ff2:	2300      	movs	r3, #0
 8022ff4:	220a      	movs	r2, #10
 8022ff6:	4630      	mov	r0, r6
 8022ff8:	f000 fa0a 	bl	8023410 <__multadd>
 8022ffc:	4607      	mov	r7, r0
 8022ffe:	e7f0      	b.n	8022fe2 <_dtoa_r+0xa12>
 8023000:	f1ba 0f00 	cmp.w	sl, #0
 8023004:	9a01      	ldr	r2, [sp, #4]
 8023006:	bfcc      	ite	gt
 8023008:	46d0      	movgt	r8, sl
 802300a:	f04f 0801 	movle.w	r8, #1
 802300e:	4490      	add	r8, r2
 8023010:	f04f 0900 	mov.w	r9, #0
 8023014:	4629      	mov	r1, r5
 8023016:	2201      	movs	r2, #1
 8023018:	4630      	mov	r0, r6
 802301a:	9302      	str	r3, [sp, #8]
 802301c:	f000 fba8 	bl	8023770 <__lshift>
 8023020:	4621      	mov	r1, r4
 8023022:	4605      	mov	r5, r0
 8023024:	f000 fc14 	bl	8023850 <__mcmp>
 8023028:	2800      	cmp	r0, #0
 802302a:	dcb1      	bgt.n	8022f90 <_dtoa_r+0x9c0>
 802302c:	d102      	bne.n	8023034 <_dtoa_r+0xa64>
 802302e:	9b02      	ldr	r3, [sp, #8]
 8023030:	07db      	lsls	r3, r3, #31
 8023032:	d4ad      	bmi.n	8022f90 <_dtoa_r+0x9c0>
 8023034:	4643      	mov	r3, r8
 8023036:	4698      	mov	r8, r3
 8023038:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802303c:	2a30      	cmp	r2, #48	; 0x30
 802303e:	d0fa      	beq.n	8023036 <_dtoa_r+0xa66>
 8023040:	e6f6      	b.n	8022e30 <_dtoa_r+0x860>
 8023042:	9a01      	ldr	r2, [sp, #4]
 8023044:	429a      	cmp	r2, r3
 8023046:	d1a4      	bne.n	8022f92 <_dtoa_r+0x9c2>
 8023048:	f10b 0b01 	add.w	fp, fp, #1
 802304c:	2331      	movs	r3, #49	; 0x31
 802304e:	e778      	b.n	8022f42 <_dtoa_r+0x972>
 8023050:	4b14      	ldr	r3, [pc, #80]	; (80230a4 <_dtoa_r+0xad4>)
 8023052:	f7ff bb27 	b.w	80226a4 <_dtoa_r+0xd4>
 8023056:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023058:	2b00      	cmp	r3, #0
 802305a:	f47f ab03 	bne.w	8022664 <_dtoa_r+0x94>
 802305e:	4b12      	ldr	r3, [pc, #72]	; (80230a8 <_dtoa_r+0xad8>)
 8023060:	f7ff bb20 	b.w	80226a4 <_dtoa_r+0xd4>
 8023064:	f1ba 0f00 	cmp.w	sl, #0
 8023068:	dc03      	bgt.n	8023072 <_dtoa_r+0xaa2>
 802306a:	9b06      	ldr	r3, [sp, #24]
 802306c:	2b02      	cmp	r3, #2
 802306e:	f73f aec7 	bgt.w	8022e00 <_dtoa_r+0x830>
 8023072:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8023076:	4621      	mov	r1, r4
 8023078:	4628      	mov	r0, r5
 802307a:	f7ff fa1d 	bl	80224b8 <quorem>
 802307e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8023082:	f808 3b01 	strb.w	r3, [r8], #1
 8023086:	9a01      	ldr	r2, [sp, #4]
 8023088:	eba8 0202 	sub.w	r2, r8, r2
 802308c:	4592      	cmp	sl, r2
 802308e:	ddb7      	ble.n	8023000 <_dtoa_r+0xa30>
 8023090:	4629      	mov	r1, r5
 8023092:	2300      	movs	r3, #0
 8023094:	220a      	movs	r2, #10
 8023096:	4630      	mov	r0, r6
 8023098:	f000 f9ba 	bl	8023410 <__multadd>
 802309c:	4605      	mov	r5, r0
 802309e:	e7ea      	b.n	8023076 <_dtoa_r+0xaa6>
 80230a0:	08026188 	.word	0x08026188
 80230a4:	080260a9 	.word	0x080260a9
 80230a8:	08026109 	.word	0x08026109

080230ac <__errno>:
 80230ac:	4b01      	ldr	r3, [pc, #4]	; (80230b4 <__errno+0x8>)
 80230ae:	6818      	ldr	r0, [r3, #0]
 80230b0:	4770      	bx	lr
 80230b2:	bf00      	nop
 80230b4:	24000134 	.word	0x24000134

080230b8 <__sflush_r>:
 80230b8:	898a      	ldrh	r2, [r1, #12]
 80230ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80230be:	4605      	mov	r5, r0
 80230c0:	0710      	lsls	r0, r2, #28
 80230c2:	460c      	mov	r4, r1
 80230c4:	d458      	bmi.n	8023178 <__sflush_r+0xc0>
 80230c6:	684b      	ldr	r3, [r1, #4]
 80230c8:	2b00      	cmp	r3, #0
 80230ca:	dc05      	bgt.n	80230d8 <__sflush_r+0x20>
 80230cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80230ce:	2b00      	cmp	r3, #0
 80230d0:	dc02      	bgt.n	80230d8 <__sflush_r+0x20>
 80230d2:	2000      	movs	r0, #0
 80230d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80230d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80230da:	2e00      	cmp	r6, #0
 80230dc:	d0f9      	beq.n	80230d2 <__sflush_r+0x1a>
 80230de:	2300      	movs	r3, #0
 80230e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80230e4:	682f      	ldr	r7, [r5, #0]
 80230e6:	602b      	str	r3, [r5, #0]
 80230e8:	d032      	beq.n	8023150 <__sflush_r+0x98>
 80230ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80230ec:	89a3      	ldrh	r3, [r4, #12]
 80230ee:	075a      	lsls	r2, r3, #29
 80230f0:	d505      	bpl.n	80230fe <__sflush_r+0x46>
 80230f2:	6863      	ldr	r3, [r4, #4]
 80230f4:	1ac0      	subs	r0, r0, r3
 80230f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80230f8:	b10b      	cbz	r3, 80230fe <__sflush_r+0x46>
 80230fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80230fc:	1ac0      	subs	r0, r0, r3
 80230fe:	2300      	movs	r3, #0
 8023100:	4602      	mov	r2, r0
 8023102:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023104:	6a21      	ldr	r1, [r4, #32]
 8023106:	4628      	mov	r0, r5
 8023108:	47b0      	blx	r6
 802310a:	1c43      	adds	r3, r0, #1
 802310c:	89a3      	ldrh	r3, [r4, #12]
 802310e:	d106      	bne.n	802311e <__sflush_r+0x66>
 8023110:	6829      	ldr	r1, [r5, #0]
 8023112:	291d      	cmp	r1, #29
 8023114:	d82c      	bhi.n	8023170 <__sflush_r+0xb8>
 8023116:	4a2a      	ldr	r2, [pc, #168]	; (80231c0 <__sflush_r+0x108>)
 8023118:	40ca      	lsrs	r2, r1
 802311a:	07d6      	lsls	r6, r2, #31
 802311c:	d528      	bpl.n	8023170 <__sflush_r+0xb8>
 802311e:	2200      	movs	r2, #0
 8023120:	6062      	str	r2, [r4, #4]
 8023122:	04d9      	lsls	r1, r3, #19
 8023124:	6922      	ldr	r2, [r4, #16]
 8023126:	6022      	str	r2, [r4, #0]
 8023128:	d504      	bpl.n	8023134 <__sflush_r+0x7c>
 802312a:	1c42      	adds	r2, r0, #1
 802312c:	d101      	bne.n	8023132 <__sflush_r+0x7a>
 802312e:	682b      	ldr	r3, [r5, #0]
 8023130:	b903      	cbnz	r3, 8023134 <__sflush_r+0x7c>
 8023132:	6560      	str	r0, [r4, #84]	; 0x54
 8023134:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023136:	602f      	str	r7, [r5, #0]
 8023138:	2900      	cmp	r1, #0
 802313a:	d0ca      	beq.n	80230d2 <__sflush_r+0x1a>
 802313c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023140:	4299      	cmp	r1, r3
 8023142:	d002      	beq.n	802314a <__sflush_r+0x92>
 8023144:	4628      	mov	r0, r5
 8023146:	f7fe f87d 	bl	8021244 <_free_r>
 802314a:	2000      	movs	r0, #0
 802314c:	6360      	str	r0, [r4, #52]	; 0x34
 802314e:	e7c1      	b.n	80230d4 <__sflush_r+0x1c>
 8023150:	6a21      	ldr	r1, [r4, #32]
 8023152:	2301      	movs	r3, #1
 8023154:	4628      	mov	r0, r5
 8023156:	47b0      	blx	r6
 8023158:	1c41      	adds	r1, r0, #1
 802315a:	d1c7      	bne.n	80230ec <__sflush_r+0x34>
 802315c:	682b      	ldr	r3, [r5, #0]
 802315e:	2b00      	cmp	r3, #0
 8023160:	d0c4      	beq.n	80230ec <__sflush_r+0x34>
 8023162:	2b1d      	cmp	r3, #29
 8023164:	d001      	beq.n	802316a <__sflush_r+0xb2>
 8023166:	2b16      	cmp	r3, #22
 8023168:	d101      	bne.n	802316e <__sflush_r+0xb6>
 802316a:	602f      	str	r7, [r5, #0]
 802316c:	e7b1      	b.n	80230d2 <__sflush_r+0x1a>
 802316e:	89a3      	ldrh	r3, [r4, #12]
 8023170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023174:	81a3      	strh	r3, [r4, #12]
 8023176:	e7ad      	b.n	80230d4 <__sflush_r+0x1c>
 8023178:	690f      	ldr	r7, [r1, #16]
 802317a:	2f00      	cmp	r7, #0
 802317c:	d0a9      	beq.n	80230d2 <__sflush_r+0x1a>
 802317e:	0793      	lsls	r3, r2, #30
 8023180:	680e      	ldr	r6, [r1, #0]
 8023182:	bf08      	it	eq
 8023184:	694b      	ldreq	r3, [r1, #20]
 8023186:	600f      	str	r7, [r1, #0]
 8023188:	bf18      	it	ne
 802318a:	2300      	movne	r3, #0
 802318c:	eba6 0807 	sub.w	r8, r6, r7
 8023190:	608b      	str	r3, [r1, #8]
 8023192:	f1b8 0f00 	cmp.w	r8, #0
 8023196:	dd9c      	ble.n	80230d2 <__sflush_r+0x1a>
 8023198:	6a21      	ldr	r1, [r4, #32]
 802319a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802319c:	4643      	mov	r3, r8
 802319e:	463a      	mov	r2, r7
 80231a0:	4628      	mov	r0, r5
 80231a2:	47b0      	blx	r6
 80231a4:	2800      	cmp	r0, #0
 80231a6:	dc06      	bgt.n	80231b6 <__sflush_r+0xfe>
 80231a8:	89a3      	ldrh	r3, [r4, #12]
 80231aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80231ae:	81a3      	strh	r3, [r4, #12]
 80231b0:	f04f 30ff 	mov.w	r0, #4294967295
 80231b4:	e78e      	b.n	80230d4 <__sflush_r+0x1c>
 80231b6:	4407      	add	r7, r0
 80231b8:	eba8 0800 	sub.w	r8, r8, r0
 80231bc:	e7e9      	b.n	8023192 <__sflush_r+0xda>
 80231be:	bf00      	nop
 80231c0:	20400001 	.word	0x20400001

080231c4 <_fflush_r>:
 80231c4:	b538      	push	{r3, r4, r5, lr}
 80231c6:	690b      	ldr	r3, [r1, #16]
 80231c8:	4605      	mov	r5, r0
 80231ca:	460c      	mov	r4, r1
 80231cc:	b913      	cbnz	r3, 80231d4 <_fflush_r+0x10>
 80231ce:	2500      	movs	r5, #0
 80231d0:	4628      	mov	r0, r5
 80231d2:	bd38      	pop	{r3, r4, r5, pc}
 80231d4:	b118      	cbz	r0, 80231de <_fflush_r+0x1a>
 80231d6:	6983      	ldr	r3, [r0, #24]
 80231d8:	b90b      	cbnz	r3, 80231de <_fflush_r+0x1a>
 80231da:	f7fd ff0d 	bl	8020ff8 <__sinit>
 80231de:	4b14      	ldr	r3, [pc, #80]	; (8023230 <_fflush_r+0x6c>)
 80231e0:	429c      	cmp	r4, r3
 80231e2:	d11b      	bne.n	802321c <_fflush_r+0x58>
 80231e4:	686c      	ldr	r4, [r5, #4]
 80231e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80231ea:	2b00      	cmp	r3, #0
 80231ec:	d0ef      	beq.n	80231ce <_fflush_r+0xa>
 80231ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80231f0:	07d0      	lsls	r0, r2, #31
 80231f2:	d404      	bmi.n	80231fe <_fflush_r+0x3a>
 80231f4:	0599      	lsls	r1, r3, #22
 80231f6:	d402      	bmi.n	80231fe <_fflush_r+0x3a>
 80231f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80231fa:	f7fd ffd2 	bl	80211a2 <__retarget_lock_acquire_recursive>
 80231fe:	4628      	mov	r0, r5
 8023200:	4621      	mov	r1, r4
 8023202:	f7ff ff59 	bl	80230b8 <__sflush_r>
 8023206:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023208:	07da      	lsls	r2, r3, #31
 802320a:	4605      	mov	r5, r0
 802320c:	d4e0      	bmi.n	80231d0 <_fflush_r+0xc>
 802320e:	89a3      	ldrh	r3, [r4, #12]
 8023210:	059b      	lsls	r3, r3, #22
 8023212:	d4dd      	bmi.n	80231d0 <_fflush_r+0xc>
 8023214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023216:	f7fd ffc5 	bl	80211a4 <__retarget_lock_release_recursive>
 802321a:	e7d9      	b.n	80231d0 <_fflush_r+0xc>
 802321c:	4b05      	ldr	r3, [pc, #20]	; (8023234 <_fflush_r+0x70>)
 802321e:	429c      	cmp	r4, r3
 8023220:	d101      	bne.n	8023226 <_fflush_r+0x62>
 8023222:	68ac      	ldr	r4, [r5, #8]
 8023224:	e7df      	b.n	80231e6 <_fflush_r+0x22>
 8023226:	4b04      	ldr	r3, [pc, #16]	; (8023238 <_fflush_r+0x74>)
 8023228:	429c      	cmp	r4, r3
 802322a:	bf08      	it	eq
 802322c:	68ec      	ldreq	r4, [r5, #12]
 802322e:	e7da      	b.n	80231e6 <_fflush_r+0x22>
 8023230:	08026044 	.word	0x08026044
 8023234:	08026064 	.word	0x08026064
 8023238:	08026024 	.word	0x08026024

0802323c <_localeconv_r>:
 802323c:	4800      	ldr	r0, [pc, #0]	; (8023240 <_localeconv_r+0x4>)
 802323e:	4770      	bx	lr
 8023240:	24000288 	.word	0x24000288

08023244 <_lseek_r>:
 8023244:	b538      	push	{r3, r4, r5, lr}
 8023246:	4d07      	ldr	r5, [pc, #28]	; (8023264 <_lseek_r+0x20>)
 8023248:	4604      	mov	r4, r0
 802324a:	4608      	mov	r0, r1
 802324c:	4611      	mov	r1, r2
 802324e:	2200      	movs	r2, #0
 8023250:	602a      	str	r2, [r5, #0]
 8023252:	461a      	mov	r2, r3
 8023254:	f7dd feb8 	bl	8000fc8 <_lseek>
 8023258:	1c43      	adds	r3, r0, #1
 802325a:	d102      	bne.n	8023262 <_lseek_r+0x1e>
 802325c:	682b      	ldr	r3, [r5, #0]
 802325e:	b103      	cbz	r3, 8023262 <_lseek_r+0x1e>
 8023260:	6023      	str	r3, [r4, #0]
 8023262:	bd38      	pop	{r3, r4, r5, pc}
 8023264:	24014278 	.word	0x24014278

08023268 <__swhatbuf_r>:
 8023268:	b570      	push	{r4, r5, r6, lr}
 802326a:	460e      	mov	r6, r1
 802326c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023270:	2900      	cmp	r1, #0
 8023272:	b096      	sub	sp, #88	; 0x58
 8023274:	4614      	mov	r4, r2
 8023276:	461d      	mov	r5, r3
 8023278:	da08      	bge.n	802328c <__swhatbuf_r+0x24>
 802327a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802327e:	2200      	movs	r2, #0
 8023280:	602a      	str	r2, [r5, #0]
 8023282:	061a      	lsls	r2, r3, #24
 8023284:	d410      	bmi.n	80232a8 <__swhatbuf_r+0x40>
 8023286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802328a:	e00e      	b.n	80232aa <__swhatbuf_r+0x42>
 802328c:	466a      	mov	r2, sp
 802328e:	f000 fd85 	bl	8023d9c <_fstat_r>
 8023292:	2800      	cmp	r0, #0
 8023294:	dbf1      	blt.n	802327a <__swhatbuf_r+0x12>
 8023296:	9a01      	ldr	r2, [sp, #4]
 8023298:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802329c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80232a0:	425a      	negs	r2, r3
 80232a2:	415a      	adcs	r2, r3
 80232a4:	602a      	str	r2, [r5, #0]
 80232a6:	e7ee      	b.n	8023286 <__swhatbuf_r+0x1e>
 80232a8:	2340      	movs	r3, #64	; 0x40
 80232aa:	2000      	movs	r0, #0
 80232ac:	6023      	str	r3, [r4, #0]
 80232ae:	b016      	add	sp, #88	; 0x58
 80232b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080232b4 <__smakebuf_r>:
 80232b4:	898b      	ldrh	r3, [r1, #12]
 80232b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80232b8:	079d      	lsls	r5, r3, #30
 80232ba:	4606      	mov	r6, r0
 80232bc:	460c      	mov	r4, r1
 80232be:	d507      	bpl.n	80232d0 <__smakebuf_r+0x1c>
 80232c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80232c4:	6023      	str	r3, [r4, #0]
 80232c6:	6123      	str	r3, [r4, #16]
 80232c8:	2301      	movs	r3, #1
 80232ca:	6163      	str	r3, [r4, #20]
 80232cc:	b002      	add	sp, #8
 80232ce:	bd70      	pop	{r4, r5, r6, pc}
 80232d0:	ab01      	add	r3, sp, #4
 80232d2:	466a      	mov	r2, sp
 80232d4:	f7ff ffc8 	bl	8023268 <__swhatbuf_r>
 80232d8:	9900      	ldr	r1, [sp, #0]
 80232da:	4605      	mov	r5, r0
 80232dc:	4630      	mov	r0, r6
 80232de:	f7fe f81d 	bl	802131c <_malloc_r>
 80232e2:	b948      	cbnz	r0, 80232f8 <__smakebuf_r+0x44>
 80232e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80232e8:	059a      	lsls	r2, r3, #22
 80232ea:	d4ef      	bmi.n	80232cc <__smakebuf_r+0x18>
 80232ec:	f023 0303 	bic.w	r3, r3, #3
 80232f0:	f043 0302 	orr.w	r3, r3, #2
 80232f4:	81a3      	strh	r3, [r4, #12]
 80232f6:	e7e3      	b.n	80232c0 <__smakebuf_r+0xc>
 80232f8:	4b0d      	ldr	r3, [pc, #52]	; (8023330 <__smakebuf_r+0x7c>)
 80232fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80232fc:	89a3      	ldrh	r3, [r4, #12]
 80232fe:	6020      	str	r0, [r4, #0]
 8023300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023304:	81a3      	strh	r3, [r4, #12]
 8023306:	9b00      	ldr	r3, [sp, #0]
 8023308:	6163      	str	r3, [r4, #20]
 802330a:	9b01      	ldr	r3, [sp, #4]
 802330c:	6120      	str	r0, [r4, #16]
 802330e:	b15b      	cbz	r3, 8023328 <__smakebuf_r+0x74>
 8023310:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023314:	4630      	mov	r0, r6
 8023316:	f000 fd53 	bl	8023dc0 <_isatty_r>
 802331a:	b128      	cbz	r0, 8023328 <__smakebuf_r+0x74>
 802331c:	89a3      	ldrh	r3, [r4, #12]
 802331e:	f023 0303 	bic.w	r3, r3, #3
 8023322:	f043 0301 	orr.w	r3, r3, #1
 8023326:	81a3      	strh	r3, [r4, #12]
 8023328:	89a0      	ldrh	r0, [r4, #12]
 802332a:	4305      	orrs	r5, r0
 802332c:	81a5      	strh	r5, [r4, #12]
 802332e:	e7cd      	b.n	80232cc <__smakebuf_r+0x18>
 8023330:	08020f91 	.word	0x08020f91

08023334 <__malloc_lock>:
 8023334:	4801      	ldr	r0, [pc, #4]	; (802333c <__malloc_lock+0x8>)
 8023336:	f7fd bf34 	b.w	80211a2 <__retarget_lock_acquire_recursive>
 802333a:	bf00      	nop
 802333c:	2401426c 	.word	0x2401426c

08023340 <__malloc_unlock>:
 8023340:	4801      	ldr	r0, [pc, #4]	; (8023348 <__malloc_unlock+0x8>)
 8023342:	f7fd bf2f 	b.w	80211a4 <__retarget_lock_release_recursive>
 8023346:	bf00      	nop
 8023348:	2401426c 	.word	0x2401426c

0802334c <_Balloc>:
 802334c:	b570      	push	{r4, r5, r6, lr}
 802334e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8023350:	4604      	mov	r4, r0
 8023352:	460d      	mov	r5, r1
 8023354:	b976      	cbnz	r6, 8023374 <_Balloc+0x28>
 8023356:	2010      	movs	r0, #16
 8023358:	f7fd ff26 	bl	80211a8 <malloc>
 802335c:	4602      	mov	r2, r0
 802335e:	6260      	str	r0, [r4, #36]	; 0x24
 8023360:	b920      	cbnz	r0, 802336c <_Balloc+0x20>
 8023362:	4b18      	ldr	r3, [pc, #96]	; (80233c4 <_Balloc+0x78>)
 8023364:	4818      	ldr	r0, [pc, #96]	; (80233c8 <_Balloc+0x7c>)
 8023366:	2166      	movs	r1, #102	; 0x66
 8023368:	f7ff f878 	bl	802245c <__assert_func>
 802336c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8023370:	6006      	str	r6, [r0, #0]
 8023372:	60c6      	str	r6, [r0, #12]
 8023374:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8023376:	68f3      	ldr	r3, [r6, #12]
 8023378:	b183      	cbz	r3, 802339c <_Balloc+0x50>
 802337a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802337c:	68db      	ldr	r3, [r3, #12]
 802337e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8023382:	b9b8      	cbnz	r0, 80233b4 <_Balloc+0x68>
 8023384:	2101      	movs	r1, #1
 8023386:	fa01 f605 	lsl.w	r6, r1, r5
 802338a:	1d72      	adds	r2, r6, #5
 802338c:	0092      	lsls	r2, r2, #2
 802338e:	4620      	mov	r0, r4
 8023390:	f7fd ff42 	bl	8021218 <_calloc_r>
 8023394:	b160      	cbz	r0, 80233b0 <_Balloc+0x64>
 8023396:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802339a:	e00e      	b.n	80233ba <_Balloc+0x6e>
 802339c:	2221      	movs	r2, #33	; 0x21
 802339e:	2104      	movs	r1, #4
 80233a0:	4620      	mov	r0, r4
 80233a2:	f7fd ff39 	bl	8021218 <_calloc_r>
 80233a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80233a8:	60f0      	str	r0, [r6, #12]
 80233aa:	68db      	ldr	r3, [r3, #12]
 80233ac:	2b00      	cmp	r3, #0
 80233ae:	d1e4      	bne.n	802337a <_Balloc+0x2e>
 80233b0:	2000      	movs	r0, #0
 80233b2:	bd70      	pop	{r4, r5, r6, pc}
 80233b4:	6802      	ldr	r2, [r0, #0]
 80233b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80233ba:	2300      	movs	r3, #0
 80233bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80233c0:	e7f7      	b.n	80233b2 <_Balloc+0x66>
 80233c2:	bf00      	nop
 80233c4:	08026116 	.word	0x08026116
 80233c8:	08026199 	.word	0x08026199

080233cc <_Bfree>:
 80233cc:	b570      	push	{r4, r5, r6, lr}
 80233ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80233d0:	4605      	mov	r5, r0
 80233d2:	460c      	mov	r4, r1
 80233d4:	b976      	cbnz	r6, 80233f4 <_Bfree+0x28>
 80233d6:	2010      	movs	r0, #16
 80233d8:	f7fd fee6 	bl	80211a8 <malloc>
 80233dc:	4602      	mov	r2, r0
 80233de:	6268      	str	r0, [r5, #36]	; 0x24
 80233e0:	b920      	cbnz	r0, 80233ec <_Bfree+0x20>
 80233e2:	4b09      	ldr	r3, [pc, #36]	; (8023408 <_Bfree+0x3c>)
 80233e4:	4809      	ldr	r0, [pc, #36]	; (802340c <_Bfree+0x40>)
 80233e6:	218a      	movs	r1, #138	; 0x8a
 80233e8:	f7ff f838 	bl	802245c <__assert_func>
 80233ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80233f0:	6006      	str	r6, [r0, #0]
 80233f2:	60c6      	str	r6, [r0, #12]
 80233f4:	b13c      	cbz	r4, 8023406 <_Bfree+0x3a>
 80233f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80233f8:	6862      	ldr	r2, [r4, #4]
 80233fa:	68db      	ldr	r3, [r3, #12]
 80233fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8023400:	6021      	str	r1, [r4, #0]
 8023402:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8023406:	bd70      	pop	{r4, r5, r6, pc}
 8023408:	08026116 	.word	0x08026116
 802340c:	08026199 	.word	0x08026199

08023410 <__multadd>:
 8023410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023414:	690d      	ldr	r5, [r1, #16]
 8023416:	4607      	mov	r7, r0
 8023418:	460c      	mov	r4, r1
 802341a:	461e      	mov	r6, r3
 802341c:	f101 0c14 	add.w	ip, r1, #20
 8023420:	2000      	movs	r0, #0
 8023422:	f8dc 3000 	ldr.w	r3, [ip]
 8023426:	b299      	uxth	r1, r3
 8023428:	fb02 6101 	mla	r1, r2, r1, r6
 802342c:	0c1e      	lsrs	r6, r3, #16
 802342e:	0c0b      	lsrs	r3, r1, #16
 8023430:	fb02 3306 	mla	r3, r2, r6, r3
 8023434:	b289      	uxth	r1, r1
 8023436:	3001      	adds	r0, #1
 8023438:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802343c:	4285      	cmp	r5, r0
 802343e:	f84c 1b04 	str.w	r1, [ip], #4
 8023442:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8023446:	dcec      	bgt.n	8023422 <__multadd+0x12>
 8023448:	b30e      	cbz	r6, 802348e <__multadd+0x7e>
 802344a:	68a3      	ldr	r3, [r4, #8]
 802344c:	42ab      	cmp	r3, r5
 802344e:	dc19      	bgt.n	8023484 <__multadd+0x74>
 8023450:	6861      	ldr	r1, [r4, #4]
 8023452:	4638      	mov	r0, r7
 8023454:	3101      	adds	r1, #1
 8023456:	f7ff ff79 	bl	802334c <_Balloc>
 802345a:	4680      	mov	r8, r0
 802345c:	b928      	cbnz	r0, 802346a <__multadd+0x5a>
 802345e:	4602      	mov	r2, r0
 8023460:	4b0c      	ldr	r3, [pc, #48]	; (8023494 <__multadd+0x84>)
 8023462:	480d      	ldr	r0, [pc, #52]	; (8023498 <__multadd+0x88>)
 8023464:	21b5      	movs	r1, #181	; 0xb5
 8023466:	f7fe fff9 	bl	802245c <__assert_func>
 802346a:	6922      	ldr	r2, [r4, #16]
 802346c:	3202      	adds	r2, #2
 802346e:	f104 010c 	add.w	r1, r4, #12
 8023472:	0092      	lsls	r2, r2, #2
 8023474:	300c      	adds	r0, #12
 8023476:	f7fd fe9f 	bl	80211b8 <memcpy>
 802347a:	4621      	mov	r1, r4
 802347c:	4638      	mov	r0, r7
 802347e:	f7ff ffa5 	bl	80233cc <_Bfree>
 8023482:	4644      	mov	r4, r8
 8023484:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8023488:	3501      	adds	r5, #1
 802348a:	615e      	str	r6, [r3, #20]
 802348c:	6125      	str	r5, [r4, #16]
 802348e:	4620      	mov	r0, r4
 8023490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023494:	08026188 	.word	0x08026188
 8023498:	08026199 	.word	0x08026199

0802349c <__hi0bits>:
 802349c:	0c03      	lsrs	r3, r0, #16
 802349e:	041b      	lsls	r3, r3, #16
 80234a0:	b9d3      	cbnz	r3, 80234d8 <__hi0bits+0x3c>
 80234a2:	0400      	lsls	r0, r0, #16
 80234a4:	2310      	movs	r3, #16
 80234a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80234aa:	bf04      	itt	eq
 80234ac:	0200      	lsleq	r0, r0, #8
 80234ae:	3308      	addeq	r3, #8
 80234b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80234b4:	bf04      	itt	eq
 80234b6:	0100      	lsleq	r0, r0, #4
 80234b8:	3304      	addeq	r3, #4
 80234ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80234be:	bf04      	itt	eq
 80234c0:	0080      	lsleq	r0, r0, #2
 80234c2:	3302      	addeq	r3, #2
 80234c4:	2800      	cmp	r0, #0
 80234c6:	db05      	blt.n	80234d4 <__hi0bits+0x38>
 80234c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80234cc:	f103 0301 	add.w	r3, r3, #1
 80234d0:	bf08      	it	eq
 80234d2:	2320      	moveq	r3, #32
 80234d4:	4618      	mov	r0, r3
 80234d6:	4770      	bx	lr
 80234d8:	2300      	movs	r3, #0
 80234da:	e7e4      	b.n	80234a6 <__hi0bits+0xa>

080234dc <__lo0bits>:
 80234dc:	6803      	ldr	r3, [r0, #0]
 80234de:	f013 0207 	ands.w	r2, r3, #7
 80234e2:	4601      	mov	r1, r0
 80234e4:	d00b      	beq.n	80234fe <__lo0bits+0x22>
 80234e6:	07da      	lsls	r2, r3, #31
 80234e8:	d423      	bmi.n	8023532 <__lo0bits+0x56>
 80234ea:	0798      	lsls	r0, r3, #30
 80234ec:	bf49      	itett	mi
 80234ee:	085b      	lsrmi	r3, r3, #1
 80234f0:	089b      	lsrpl	r3, r3, #2
 80234f2:	2001      	movmi	r0, #1
 80234f4:	600b      	strmi	r3, [r1, #0]
 80234f6:	bf5c      	itt	pl
 80234f8:	600b      	strpl	r3, [r1, #0]
 80234fa:	2002      	movpl	r0, #2
 80234fc:	4770      	bx	lr
 80234fe:	b298      	uxth	r0, r3
 8023500:	b9a8      	cbnz	r0, 802352e <__lo0bits+0x52>
 8023502:	0c1b      	lsrs	r3, r3, #16
 8023504:	2010      	movs	r0, #16
 8023506:	b2da      	uxtb	r2, r3
 8023508:	b90a      	cbnz	r2, 802350e <__lo0bits+0x32>
 802350a:	3008      	adds	r0, #8
 802350c:	0a1b      	lsrs	r3, r3, #8
 802350e:	071a      	lsls	r2, r3, #28
 8023510:	bf04      	itt	eq
 8023512:	091b      	lsreq	r3, r3, #4
 8023514:	3004      	addeq	r0, #4
 8023516:	079a      	lsls	r2, r3, #30
 8023518:	bf04      	itt	eq
 802351a:	089b      	lsreq	r3, r3, #2
 802351c:	3002      	addeq	r0, #2
 802351e:	07da      	lsls	r2, r3, #31
 8023520:	d403      	bmi.n	802352a <__lo0bits+0x4e>
 8023522:	085b      	lsrs	r3, r3, #1
 8023524:	f100 0001 	add.w	r0, r0, #1
 8023528:	d005      	beq.n	8023536 <__lo0bits+0x5a>
 802352a:	600b      	str	r3, [r1, #0]
 802352c:	4770      	bx	lr
 802352e:	4610      	mov	r0, r2
 8023530:	e7e9      	b.n	8023506 <__lo0bits+0x2a>
 8023532:	2000      	movs	r0, #0
 8023534:	4770      	bx	lr
 8023536:	2020      	movs	r0, #32
 8023538:	4770      	bx	lr
	...

0802353c <__i2b>:
 802353c:	b510      	push	{r4, lr}
 802353e:	460c      	mov	r4, r1
 8023540:	2101      	movs	r1, #1
 8023542:	f7ff ff03 	bl	802334c <_Balloc>
 8023546:	4602      	mov	r2, r0
 8023548:	b928      	cbnz	r0, 8023556 <__i2b+0x1a>
 802354a:	4b05      	ldr	r3, [pc, #20]	; (8023560 <__i2b+0x24>)
 802354c:	4805      	ldr	r0, [pc, #20]	; (8023564 <__i2b+0x28>)
 802354e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8023552:	f7fe ff83 	bl	802245c <__assert_func>
 8023556:	2301      	movs	r3, #1
 8023558:	6144      	str	r4, [r0, #20]
 802355a:	6103      	str	r3, [r0, #16]
 802355c:	bd10      	pop	{r4, pc}
 802355e:	bf00      	nop
 8023560:	08026188 	.word	0x08026188
 8023564:	08026199 	.word	0x08026199

08023568 <__multiply>:
 8023568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802356c:	4691      	mov	r9, r2
 802356e:	690a      	ldr	r2, [r1, #16]
 8023570:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8023574:	429a      	cmp	r2, r3
 8023576:	bfb8      	it	lt
 8023578:	460b      	movlt	r3, r1
 802357a:	460c      	mov	r4, r1
 802357c:	bfbc      	itt	lt
 802357e:	464c      	movlt	r4, r9
 8023580:	4699      	movlt	r9, r3
 8023582:	6927      	ldr	r7, [r4, #16]
 8023584:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8023588:	68a3      	ldr	r3, [r4, #8]
 802358a:	6861      	ldr	r1, [r4, #4]
 802358c:	eb07 060a 	add.w	r6, r7, sl
 8023590:	42b3      	cmp	r3, r6
 8023592:	b085      	sub	sp, #20
 8023594:	bfb8      	it	lt
 8023596:	3101      	addlt	r1, #1
 8023598:	f7ff fed8 	bl	802334c <_Balloc>
 802359c:	b930      	cbnz	r0, 80235ac <__multiply+0x44>
 802359e:	4602      	mov	r2, r0
 80235a0:	4b44      	ldr	r3, [pc, #272]	; (80236b4 <__multiply+0x14c>)
 80235a2:	4845      	ldr	r0, [pc, #276]	; (80236b8 <__multiply+0x150>)
 80235a4:	f240 115d 	movw	r1, #349	; 0x15d
 80235a8:	f7fe ff58 	bl	802245c <__assert_func>
 80235ac:	f100 0514 	add.w	r5, r0, #20
 80235b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80235b4:	462b      	mov	r3, r5
 80235b6:	2200      	movs	r2, #0
 80235b8:	4543      	cmp	r3, r8
 80235ba:	d321      	bcc.n	8023600 <__multiply+0x98>
 80235bc:	f104 0314 	add.w	r3, r4, #20
 80235c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80235c4:	f109 0314 	add.w	r3, r9, #20
 80235c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80235cc:	9202      	str	r2, [sp, #8]
 80235ce:	1b3a      	subs	r2, r7, r4
 80235d0:	3a15      	subs	r2, #21
 80235d2:	f022 0203 	bic.w	r2, r2, #3
 80235d6:	3204      	adds	r2, #4
 80235d8:	f104 0115 	add.w	r1, r4, #21
 80235dc:	428f      	cmp	r7, r1
 80235de:	bf38      	it	cc
 80235e0:	2204      	movcc	r2, #4
 80235e2:	9201      	str	r2, [sp, #4]
 80235e4:	9a02      	ldr	r2, [sp, #8]
 80235e6:	9303      	str	r3, [sp, #12]
 80235e8:	429a      	cmp	r2, r3
 80235ea:	d80c      	bhi.n	8023606 <__multiply+0x9e>
 80235ec:	2e00      	cmp	r6, #0
 80235ee:	dd03      	ble.n	80235f8 <__multiply+0x90>
 80235f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80235f4:	2b00      	cmp	r3, #0
 80235f6:	d05a      	beq.n	80236ae <__multiply+0x146>
 80235f8:	6106      	str	r6, [r0, #16]
 80235fa:	b005      	add	sp, #20
 80235fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023600:	f843 2b04 	str.w	r2, [r3], #4
 8023604:	e7d8      	b.n	80235b8 <__multiply+0x50>
 8023606:	f8b3 a000 	ldrh.w	sl, [r3]
 802360a:	f1ba 0f00 	cmp.w	sl, #0
 802360e:	d024      	beq.n	802365a <__multiply+0xf2>
 8023610:	f104 0e14 	add.w	lr, r4, #20
 8023614:	46a9      	mov	r9, r5
 8023616:	f04f 0c00 	mov.w	ip, #0
 802361a:	f85e 2b04 	ldr.w	r2, [lr], #4
 802361e:	f8d9 1000 	ldr.w	r1, [r9]
 8023622:	fa1f fb82 	uxth.w	fp, r2
 8023626:	b289      	uxth	r1, r1
 8023628:	fb0a 110b 	mla	r1, sl, fp, r1
 802362c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8023630:	f8d9 2000 	ldr.w	r2, [r9]
 8023634:	4461      	add	r1, ip
 8023636:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802363a:	fb0a c20b 	mla	r2, sl, fp, ip
 802363e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8023642:	b289      	uxth	r1, r1
 8023644:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8023648:	4577      	cmp	r7, lr
 802364a:	f849 1b04 	str.w	r1, [r9], #4
 802364e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8023652:	d8e2      	bhi.n	802361a <__multiply+0xb2>
 8023654:	9a01      	ldr	r2, [sp, #4]
 8023656:	f845 c002 	str.w	ip, [r5, r2]
 802365a:	9a03      	ldr	r2, [sp, #12]
 802365c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8023660:	3304      	adds	r3, #4
 8023662:	f1b9 0f00 	cmp.w	r9, #0
 8023666:	d020      	beq.n	80236aa <__multiply+0x142>
 8023668:	6829      	ldr	r1, [r5, #0]
 802366a:	f104 0c14 	add.w	ip, r4, #20
 802366e:	46ae      	mov	lr, r5
 8023670:	f04f 0a00 	mov.w	sl, #0
 8023674:	f8bc b000 	ldrh.w	fp, [ip]
 8023678:	f8be 2002 	ldrh.w	r2, [lr, #2]
 802367c:	fb09 220b 	mla	r2, r9, fp, r2
 8023680:	4492      	add	sl, r2
 8023682:	b289      	uxth	r1, r1
 8023684:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8023688:	f84e 1b04 	str.w	r1, [lr], #4
 802368c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8023690:	f8be 1000 	ldrh.w	r1, [lr]
 8023694:	0c12      	lsrs	r2, r2, #16
 8023696:	fb09 1102 	mla	r1, r9, r2, r1
 802369a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 802369e:	4567      	cmp	r7, ip
 80236a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80236a4:	d8e6      	bhi.n	8023674 <__multiply+0x10c>
 80236a6:	9a01      	ldr	r2, [sp, #4]
 80236a8:	50a9      	str	r1, [r5, r2]
 80236aa:	3504      	adds	r5, #4
 80236ac:	e79a      	b.n	80235e4 <__multiply+0x7c>
 80236ae:	3e01      	subs	r6, #1
 80236b0:	e79c      	b.n	80235ec <__multiply+0x84>
 80236b2:	bf00      	nop
 80236b4:	08026188 	.word	0x08026188
 80236b8:	08026199 	.word	0x08026199

080236bc <__pow5mult>:
 80236bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80236c0:	4615      	mov	r5, r2
 80236c2:	f012 0203 	ands.w	r2, r2, #3
 80236c6:	4606      	mov	r6, r0
 80236c8:	460f      	mov	r7, r1
 80236ca:	d007      	beq.n	80236dc <__pow5mult+0x20>
 80236cc:	4c25      	ldr	r4, [pc, #148]	; (8023764 <__pow5mult+0xa8>)
 80236ce:	3a01      	subs	r2, #1
 80236d0:	2300      	movs	r3, #0
 80236d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80236d6:	f7ff fe9b 	bl	8023410 <__multadd>
 80236da:	4607      	mov	r7, r0
 80236dc:	10ad      	asrs	r5, r5, #2
 80236de:	d03d      	beq.n	802375c <__pow5mult+0xa0>
 80236e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80236e2:	b97c      	cbnz	r4, 8023704 <__pow5mult+0x48>
 80236e4:	2010      	movs	r0, #16
 80236e6:	f7fd fd5f 	bl	80211a8 <malloc>
 80236ea:	4602      	mov	r2, r0
 80236ec:	6270      	str	r0, [r6, #36]	; 0x24
 80236ee:	b928      	cbnz	r0, 80236fc <__pow5mult+0x40>
 80236f0:	4b1d      	ldr	r3, [pc, #116]	; (8023768 <__pow5mult+0xac>)
 80236f2:	481e      	ldr	r0, [pc, #120]	; (802376c <__pow5mult+0xb0>)
 80236f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80236f8:	f7fe feb0 	bl	802245c <__assert_func>
 80236fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8023700:	6004      	str	r4, [r0, #0]
 8023702:	60c4      	str	r4, [r0, #12]
 8023704:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8023708:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802370c:	b94c      	cbnz	r4, 8023722 <__pow5mult+0x66>
 802370e:	f240 2171 	movw	r1, #625	; 0x271
 8023712:	4630      	mov	r0, r6
 8023714:	f7ff ff12 	bl	802353c <__i2b>
 8023718:	2300      	movs	r3, #0
 802371a:	f8c8 0008 	str.w	r0, [r8, #8]
 802371e:	4604      	mov	r4, r0
 8023720:	6003      	str	r3, [r0, #0]
 8023722:	f04f 0900 	mov.w	r9, #0
 8023726:	07eb      	lsls	r3, r5, #31
 8023728:	d50a      	bpl.n	8023740 <__pow5mult+0x84>
 802372a:	4639      	mov	r1, r7
 802372c:	4622      	mov	r2, r4
 802372e:	4630      	mov	r0, r6
 8023730:	f7ff ff1a 	bl	8023568 <__multiply>
 8023734:	4639      	mov	r1, r7
 8023736:	4680      	mov	r8, r0
 8023738:	4630      	mov	r0, r6
 802373a:	f7ff fe47 	bl	80233cc <_Bfree>
 802373e:	4647      	mov	r7, r8
 8023740:	106d      	asrs	r5, r5, #1
 8023742:	d00b      	beq.n	802375c <__pow5mult+0xa0>
 8023744:	6820      	ldr	r0, [r4, #0]
 8023746:	b938      	cbnz	r0, 8023758 <__pow5mult+0x9c>
 8023748:	4622      	mov	r2, r4
 802374a:	4621      	mov	r1, r4
 802374c:	4630      	mov	r0, r6
 802374e:	f7ff ff0b 	bl	8023568 <__multiply>
 8023752:	6020      	str	r0, [r4, #0]
 8023754:	f8c0 9000 	str.w	r9, [r0]
 8023758:	4604      	mov	r4, r0
 802375a:	e7e4      	b.n	8023726 <__pow5mult+0x6a>
 802375c:	4638      	mov	r0, r7
 802375e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023762:	bf00      	nop
 8023764:	080262e8 	.word	0x080262e8
 8023768:	08026116 	.word	0x08026116
 802376c:	08026199 	.word	0x08026199

08023770 <__lshift>:
 8023770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023774:	460c      	mov	r4, r1
 8023776:	6849      	ldr	r1, [r1, #4]
 8023778:	6923      	ldr	r3, [r4, #16]
 802377a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802377e:	68a3      	ldr	r3, [r4, #8]
 8023780:	4607      	mov	r7, r0
 8023782:	4691      	mov	r9, r2
 8023784:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8023788:	f108 0601 	add.w	r6, r8, #1
 802378c:	42b3      	cmp	r3, r6
 802378e:	db0b      	blt.n	80237a8 <__lshift+0x38>
 8023790:	4638      	mov	r0, r7
 8023792:	f7ff fddb 	bl	802334c <_Balloc>
 8023796:	4605      	mov	r5, r0
 8023798:	b948      	cbnz	r0, 80237ae <__lshift+0x3e>
 802379a:	4602      	mov	r2, r0
 802379c:	4b2a      	ldr	r3, [pc, #168]	; (8023848 <__lshift+0xd8>)
 802379e:	482b      	ldr	r0, [pc, #172]	; (802384c <__lshift+0xdc>)
 80237a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80237a4:	f7fe fe5a 	bl	802245c <__assert_func>
 80237a8:	3101      	adds	r1, #1
 80237aa:	005b      	lsls	r3, r3, #1
 80237ac:	e7ee      	b.n	802378c <__lshift+0x1c>
 80237ae:	2300      	movs	r3, #0
 80237b0:	f100 0114 	add.w	r1, r0, #20
 80237b4:	f100 0210 	add.w	r2, r0, #16
 80237b8:	4618      	mov	r0, r3
 80237ba:	4553      	cmp	r3, sl
 80237bc:	db37      	blt.n	802382e <__lshift+0xbe>
 80237be:	6920      	ldr	r0, [r4, #16]
 80237c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80237c4:	f104 0314 	add.w	r3, r4, #20
 80237c8:	f019 091f 	ands.w	r9, r9, #31
 80237cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80237d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80237d4:	d02f      	beq.n	8023836 <__lshift+0xc6>
 80237d6:	f1c9 0e20 	rsb	lr, r9, #32
 80237da:	468a      	mov	sl, r1
 80237dc:	f04f 0c00 	mov.w	ip, #0
 80237e0:	681a      	ldr	r2, [r3, #0]
 80237e2:	fa02 f209 	lsl.w	r2, r2, r9
 80237e6:	ea42 020c 	orr.w	r2, r2, ip
 80237ea:	f84a 2b04 	str.w	r2, [sl], #4
 80237ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80237f2:	4298      	cmp	r0, r3
 80237f4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80237f8:	d8f2      	bhi.n	80237e0 <__lshift+0x70>
 80237fa:	1b03      	subs	r3, r0, r4
 80237fc:	3b15      	subs	r3, #21
 80237fe:	f023 0303 	bic.w	r3, r3, #3
 8023802:	3304      	adds	r3, #4
 8023804:	f104 0215 	add.w	r2, r4, #21
 8023808:	4290      	cmp	r0, r2
 802380a:	bf38      	it	cc
 802380c:	2304      	movcc	r3, #4
 802380e:	f841 c003 	str.w	ip, [r1, r3]
 8023812:	f1bc 0f00 	cmp.w	ip, #0
 8023816:	d001      	beq.n	802381c <__lshift+0xac>
 8023818:	f108 0602 	add.w	r6, r8, #2
 802381c:	3e01      	subs	r6, #1
 802381e:	4638      	mov	r0, r7
 8023820:	612e      	str	r6, [r5, #16]
 8023822:	4621      	mov	r1, r4
 8023824:	f7ff fdd2 	bl	80233cc <_Bfree>
 8023828:	4628      	mov	r0, r5
 802382a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802382e:	f842 0f04 	str.w	r0, [r2, #4]!
 8023832:	3301      	adds	r3, #1
 8023834:	e7c1      	b.n	80237ba <__lshift+0x4a>
 8023836:	3904      	subs	r1, #4
 8023838:	f853 2b04 	ldr.w	r2, [r3], #4
 802383c:	f841 2f04 	str.w	r2, [r1, #4]!
 8023840:	4298      	cmp	r0, r3
 8023842:	d8f9      	bhi.n	8023838 <__lshift+0xc8>
 8023844:	e7ea      	b.n	802381c <__lshift+0xac>
 8023846:	bf00      	nop
 8023848:	08026188 	.word	0x08026188
 802384c:	08026199 	.word	0x08026199

08023850 <__mcmp>:
 8023850:	b530      	push	{r4, r5, lr}
 8023852:	6902      	ldr	r2, [r0, #16]
 8023854:	690c      	ldr	r4, [r1, #16]
 8023856:	1b12      	subs	r2, r2, r4
 8023858:	d10e      	bne.n	8023878 <__mcmp+0x28>
 802385a:	f100 0314 	add.w	r3, r0, #20
 802385e:	3114      	adds	r1, #20
 8023860:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8023864:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8023868:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802386c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8023870:	42a5      	cmp	r5, r4
 8023872:	d003      	beq.n	802387c <__mcmp+0x2c>
 8023874:	d305      	bcc.n	8023882 <__mcmp+0x32>
 8023876:	2201      	movs	r2, #1
 8023878:	4610      	mov	r0, r2
 802387a:	bd30      	pop	{r4, r5, pc}
 802387c:	4283      	cmp	r3, r0
 802387e:	d3f3      	bcc.n	8023868 <__mcmp+0x18>
 8023880:	e7fa      	b.n	8023878 <__mcmp+0x28>
 8023882:	f04f 32ff 	mov.w	r2, #4294967295
 8023886:	e7f7      	b.n	8023878 <__mcmp+0x28>

08023888 <__mdiff>:
 8023888:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802388c:	460c      	mov	r4, r1
 802388e:	4606      	mov	r6, r0
 8023890:	4611      	mov	r1, r2
 8023892:	4620      	mov	r0, r4
 8023894:	4690      	mov	r8, r2
 8023896:	f7ff ffdb 	bl	8023850 <__mcmp>
 802389a:	1e05      	subs	r5, r0, #0
 802389c:	d110      	bne.n	80238c0 <__mdiff+0x38>
 802389e:	4629      	mov	r1, r5
 80238a0:	4630      	mov	r0, r6
 80238a2:	f7ff fd53 	bl	802334c <_Balloc>
 80238a6:	b930      	cbnz	r0, 80238b6 <__mdiff+0x2e>
 80238a8:	4b3a      	ldr	r3, [pc, #232]	; (8023994 <__mdiff+0x10c>)
 80238aa:	4602      	mov	r2, r0
 80238ac:	f240 2132 	movw	r1, #562	; 0x232
 80238b0:	4839      	ldr	r0, [pc, #228]	; (8023998 <__mdiff+0x110>)
 80238b2:	f7fe fdd3 	bl	802245c <__assert_func>
 80238b6:	2301      	movs	r3, #1
 80238b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80238bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80238c0:	bfa4      	itt	ge
 80238c2:	4643      	movge	r3, r8
 80238c4:	46a0      	movge	r8, r4
 80238c6:	4630      	mov	r0, r6
 80238c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80238cc:	bfa6      	itte	ge
 80238ce:	461c      	movge	r4, r3
 80238d0:	2500      	movge	r5, #0
 80238d2:	2501      	movlt	r5, #1
 80238d4:	f7ff fd3a 	bl	802334c <_Balloc>
 80238d8:	b920      	cbnz	r0, 80238e4 <__mdiff+0x5c>
 80238da:	4b2e      	ldr	r3, [pc, #184]	; (8023994 <__mdiff+0x10c>)
 80238dc:	4602      	mov	r2, r0
 80238de:	f44f 7110 	mov.w	r1, #576	; 0x240
 80238e2:	e7e5      	b.n	80238b0 <__mdiff+0x28>
 80238e4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80238e8:	6926      	ldr	r6, [r4, #16]
 80238ea:	60c5      	str	r5, [r0, #12]
 80238ec:	f104 0914 	add.w	r9, r4, #20
 80238f0:	f108 0514 	add.w	r5, r8, #20
 80238f4:	f100 0e14 	add.w	lr, r0, #20
 80238f8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80238fc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8023900:	f108 0210 	add.w	r2, r8, #16
 8023904:	46f2      	mov	sl, lr
 8023906:	2100      	movs	r1, #0
 8023908:	f859 3b04 	ldr.w	r3, [r9], #4
 802390c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8023910:	fa1f f883 	uxth.w	r8, r3
 8023914:	fa11 f18b 	uxtah	r1, r1, fp
 8023918:	0c1b      	lsrs	r3, r3, #16
 802391a:	eba1 0808 	sub.w	r8, r1, r8
 802391e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8023922:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8023926:	fa1f f888 	uxth.w	r8, r8
 802392a:	1419      	asrs	r1, r3, #16
 802392c:	454e      	cmp	r6, r9
 802392e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8023932:	f84a 3b04 	str.w	r3, [sl], #4
 8023936:	d8e7      	bhi.n	8023908 <__mdiff+0x80>
 8023938:	1b33      	subs	r3, r6, r4
 802393a:	3b15      	subs	r3, #21
 802393c:	f023 0303 	bic.w	r3, r3, #3
 8023940:	3304      	adds	r3, #4
 8023942:	3415      	adds	r4, #21
 8023944:	42a6      	cmp	r6, r4
 8023946:	bf38      	it	cc
 8023948:	2304      	movcc	r3, #4
 802394a:	441d      	add	r5, r3
 802394c:	4473      	add	r3, lr
 802394e:	469e      	mov	lr, r3
 8023950:	462e      	mov	r6, r5
 8023952:	4566      	cmp	r6, ip
 8023954:	d30e      	bcc.n	8023974 <__mdiff+0xec>
 8023956:	f10c 0203 	add.w	r2, ip, #3
 802395a:	1b52      	subs	r2, r2, r5
 802395c:	f022 0203 	bic.w	r2, r2, #3
 8023960:	3d03      	subs	r5, #3
 8023962:	45ac      	cmp	ip, r5
 8023964:	bf38      	it	cc
 8023966:	2200      	movcc	r2, #0
 8023968:	441a      	add	r2, r3
 802396a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802396e:	b17b      	cbz	r3, 8023990 <__mdiff+0x108>
 8023970:	6107      	str	r7, [r0, #16]
 8023972:	e7a3      	b.n	80238bc <__mdiff+0x34>
 8023974:	f856 8b04 	ldr.w	r8, [r6], #4
 8023978:	fa11 f288 	uxtah	r2, r1, r8
 802397c:	1414      	asrs	r4, r2, #16
 802397e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8023982:	b292      	uxth	r2, r2
 8023984:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8023988:	f84e 2b04 	str.w	r2, [lr], #4
 802398c:	1421      	asrs	r1, r4, #16
 802398e:	e7e0      	b.n	8023952 <__mdiff+0xca>
 8023990:	3f01      	subs	r7, #1
 8023992:	e7ea      	b.n	802396a <__mdiff+0xe2>
 8023994:	08026188 	.word	0x08026188
 8023998:	08026199 	.word	0x08026199

0802399c <__d2b>:
 802399c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80239a0:	4689      	mov	r9, r1
 80239a2:	2101      	movs	r1, #1
 80239a4:	ec57 6b10 	vmov	r6, r7, d0
 80239a8:	4690      	mov	r8, r2
 80239aa:	f7ff fccf 	bl	802334c <_Balloc>
 80239ae:	4604      	mov	r4, r0
 80239b0:	b930      	cbnz	r0, 80239c0 <__d2b+0x24>
 80239b2:	4602      	mov	r2, r0
 80239b4:	4b25      	ldr	r3, [pc, #148]	; (8023a4c <__d2b+0xb0>)
 80239b6:	4826      	ldr	r0, [pc, #152]	; (8023a50 <__d2b+0xb4>)
 80239b8:	f240 310a 	movw	r1, #778	; 0x30a
 80239bc:	f7fe fd4e 	bl	802245c <__assert_func>
 80239c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80239c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80239c8:	bb35      	cbnz	r5, 8023a18 <__d2b+0x7c>
 80239ca:	2e00      	cmp	r6, #0
 80239cc:	9301      	str	r3, [sp, #4]
 80239ce:	d028      	beq.n	8023a22 <__d2b+0x86>
 80239d0:	4668      	mov	r0, sp
 80239d2:	9600      	str	r6, [sp, #0]
 80239d4:	f7ff fd82 	bl	80234dc <__lo0bits>
 80239d8:	9900      	ldr	r1, [sp, #0]
 80239da:	b300      	cbz	r0, 8023a1e <__d2b+0x82>
 80239dc:	9a01      	ldr	r2, [sp, #4]
 80239de:	f1c0 0320 	rsb	r3, r0, #32
 80239e2:	fa02 f303 	lsl.w	r3, r2, r3
 80239e6:	430b      	orrs	r3, r1
 80239e8:	40c2      	lsrs	r2, r0
 80239ea:	6163      	str	r3, [r4, #20]
 80239ec:	9201      	str	r2, [sp, #4]
 80239ee:	9b01      	ldr	r3, [sp, #4]
 80239f0:	61a3      	str	r3, [r4, #24]
 80239f2:	2b00      	cmp	r3, #0
 80239f4:	bf14      	ite	ne
 80239f6:	2202      	movne	r2, #2
 80239f8:	2201      	moveq	r2, #1
 80239fa:	6122      	str	r2, [r4, #16]
 80239fc:	b1d5      	cbz	r5, 8023a34 <__d2b+0x98>
 80239fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8023a02:	4405      	add	r5, r0
 8023a04:	f8c9 5000 	str.w	r5, [r9]
 8023a08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8023a0c:	f8c8 0000 	str.w	r0, [r8]
 8023a10:	4620      	mov	r0, r4
 8023a12:	b003      	add	sp, #12
 8023a14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023a18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8023a1c:	e7d5      	b.n	80239ca <__d2b+0x2e>
 8023a1e:	6161      	str	r1, [r4, #20]
 8023a20:	e7e5      	b.n	80239ee <__d2b+0x52>
 8023a22:	a801      	add	r0, sp, #4
 8023a24:	f7ff fd5a 	bl	80234dc <__lo0bits>
 8023a28:	9b01      	ldr	r3, [sp, #4]
 8023a2a:	6163      	str	r3, [r4, #20]
 8023a2c:	2201      	movs	r2, #1
 8023a2e:	6122      	str	r2, [r4, #16]
 8023a30:	3020      	adds	r0, #32
 8023a32:	e7e3      	b.n	80239fc <__d2b+0x60>
 8023a34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8023a38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8023a3c:	f8c9 0000 	str.w	r0, [r9]
 8023a40:	6918      	ldr	r0, [r3, #16]
 8023a42:	f7ff fd2b 	bl	802349c <__hi0bits>
 8023a46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8023a4a:	e7df      	b.n	8023a0c <__d2b+0x70>
 8023a4c:	08026188 	.word	0x08026188
 8023a50:	08026199 	.word	0x08026199

08023a54 <_realloc_r>:
 8023a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023a58:	4680      	mov	r8, r0
 8023a5a:	4614      	mov	r4, r2
 8023a5c:	460e      	mov	r6, r1
 8023a5e:	b921      	cbnz	r1, 8023a6a <_realloc_r+0x16>
 8023a60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023a64:	4611      	mov	r1, r2
 8023a66:	f7fd bc59 	b.w	802131c <_malloc_r>
 8023a6a:	b92a      	cbnz	r2, 8023a78 <_realloc_r+0x24>
 8023a6c:	f7fd fbea 	bl	8021244 <_free_r>
 8023a70:	4625      	mov	r5, r4
 8023a72:	4628      	mov	r0, r5
 8023a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023a78:	f000 f9c4 	bl	8023e04 <_malloc_usable_size_r>
 8023a7c:	4284      	cmp	r4, r0
 8023a7e:	4607      	mov	r7, r0
 8023a80:	d802      	bhi.n	8023a88 <_realloc_r+0x34>
 8023a82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8023a86:	d812      	bhi.n	8023aae <_realloc_r+0x5a>
 8023a88:	4621      	mov	r1, r4
 8023a8a:	4640      	mov	r0, r8
 8023a8c:	f7fd fc46 	bl	802131c <_malloc_r>
 8023a90:	4605      	mov	r5, r0
 8023a92:	2800      	cmp	r0, #0
 8023a94:	d0ed      	beq.n	8023a72 <_realloc_r+0x1e>
 8023a96:	42bc      	cmp	r4, r7
 8023a98:	4622      	mov	r2, r4
 8023a9a:	4631      	mov	r1, r6
 8023a9c:	bf28      	it	cs
 8023a9e:	463a      	movcs	r2, r7
 8023aa0:	f7fd fb8a 	bl	80211b8 <memcpy>
 8023aa4:	4631      	mov	r1, r6
 8023aa6:	4640      	mov	r0, r8
 8023aa8:	f7fd fbcc 	bl	8021244 <_free_r>
 8023aac:	e7e1      	b.n	8023a72 <_realloc_r+0x1e>
 8023aae:	4635      	mov	r5, r6
 8023ab0:	e7df      	b.n	8023a72 <_realloc_r+0x1e>

08023ab2 <__ssputs_r>:
 8023ab2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023ab6:	688e      	ldr	r6, [r1, #8]
 8023ab8:	429e      	cmp	r6, r3
 8023aba:	4682      	mov	sl, r0
 8023abc:	460c      	mov	r4, r1
 8023abe:	4690      	mov	r8, r2
 8023ac0:	461f      	mov	r7, r3
 8023ac2:	d838      	bhi.n	8023b36 <__ssputs_r+0x84>
 8023ac4:	898a      	ldrh	r2, [r1, #12]
 8023ac6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8023aca:	d032      	beq.n	8023b32 <__ssputs_r+0x80>
 8023acc:	6825      	ldr	r5, [r4, #0]
 8023ace:	6909      	ldr	r1, [r1, #16]
 8023ad0:	eba5 0901 	sub.w	r9, r5, r1
 8023ad4:	6965      	ldr	r5, [r4, #20]
 8023ad6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023ada:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8023ade:	3301      	adds	r3, #1
 8023ae0:	444b      	add	r3, r9
 8023ae2:	106d      	asrs	r5, r5, #1
 8023ae4:	429d      	cmp	r5, r3
 8023ae6:	bf38      	it	cc
 8023ae8:	461d      	movcc	r5, r3
 8023aea:	0553      	lsls	r3, r2, #21
 8023aec:	d531      	bpl.n	8023b52 <__ssputs_r+0xa0>
 8023aee:	4629      	mov	r1, r5
 8023af0:	f7fd fc14 	bl	802131c <_malloc_r>
 8023af4:	4606      	mov	r6, r0
 8023af6:	b950      	cbnz	r0, 8023b0e <__ssputs_r+0x5c>
 8023af8:	230c      	movs	r3, #12
 8023afa:	f8ca 3000 	str.w	r3, [sl]
 8023afe:	89a3      	ldrh	r3, [r4, #12]
 8023b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023b04:	81a3      	strh	r3, [r4, #12]
 8023b06:	f04f 30ff 	mov.w	r0, #4294967295
 8023b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023b0e:	6921      	ldr	r1, [r4, #16]
 8023b10:	464a      	mov	r2, r9
 8023b12:	f7fd fb51 	bl	80211b8 <memcpy>
 8023b16:	89a3      	ldrh	r3, [r4, #12]
 8023b18:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8023b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023b20:	81a3      	strh	r3, [r4, #12]
 8023b22:	6126      	str	r6, [r4, #16]
 8023b24:	6165      	str	r5, [r4, #20]
 8023b26:	444e      	add	r6, r9
 8023b28:	eba5 0509 	sub.w	r5, r5, r9
 8023b2c:	6026      	str	r6, [r4, #0]
 8023b2e:	60a5      	str	r5, [r4, #8]
 8023b30:	463e      	mov	r6, r7
 8023b32:	42be      	cmp	r6, r7
 8023b34:	d900      	bls.n	8023b38 <__ssputs_r+0x86>
 8023b36:	463e      	mov	r6, r7
 8023b38:	6820      	ldr	r0, [r4, #0]
 8023b3a:	4632      	mov	r2, r6
 8023b3c:	4641      	mov	r1, r8
 8023b3e:	f7fd fb49 	bl	80211d4 <memmove>
 8023b42:	68a3      	ldr	r3, [r4, #8]
 8023b44:	1b9b      	subs	r3, r3, r6
 8023b46:	60a3      	str	r3, [r4, #8]
 8023b48:	6823      	ldr	r3, [r4, #0]
 8023b4a:	4433      	add	r3, r6
 8023b4c:	6023      	str	r3, [r4, #0]
 8023b4e:	2000      	movs	r0, #0
 8023b50:	e7db      	b.n	8023b0a <__ssputs_r+0x58>
 8023b52:	462a      	mov	r2, r5
 8023b54:	f7ff ff7e 	bl	8023a54 <_realloc_r>
 8023b58:	4606      	mov	r6, r0
 8023b5a:	2800      	cmp	r0, #0
 8023b5c:	d1e1      	bne.n	8023b22 <__ssputs_r+0x70>
 8023b5e:	6921      	ldr	r1, [r4, #16]
 8023b60:	4650      	mov	r0, sl
 8023b62:	f7fd fb6f 	bl	8021244 <_free_r>
 8023b66:	e7c7      	b.n	8023af8 <__ssputs_r+0x46>

08023b68 <_svfiprintf_r>:
 8023b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b6c:	4698      	mov	r8, r3
 8023b6e:	898b      	ldrh	r3, [r1, #12]
 8023b70:	061b      	lsls	r3, r3, #24
 8023b72:	b09d      	sub	sp, #116	; 0x74
 8023b74:	4607      	mov	r7, r0
 8023b76:	460d      	mov	r5, r1
 8023b78:	4614      	mov	r4, r2
 8023b7a:	d50e      	bpl.n	8023b9a <_svfiprintf_r+0x32>
 8023b7c:	690b      	ldr	r3, [r1, #16]
 8023b7e:	b963      	cbnz	r3, 8023b9a <_svfiprintf_r+0x32>
 8023b80:	2140      	movs	r1, #64	; 0x40
 8023b82:	f7fd fbcb 	bl	802131c <_malloc_r>
 8023b86:	6028      	str	r0, [r5, #0]
 8023b88:	6128      	str	r0, [r5, #16]
 8023b8a:	b920      	cbnz	r0, 8023b96 <_svfiprintf_r+0x2e>
 8023b8c:	230c      	movs	r3, #12
 8023b8e:	603b      	str	r3, [r7, #0]
 8023b90:	f04f 30ff 	mov.w	r0, #4294967295
 8023b94:	e0d1      	b.n	8023d3a <_svfiprintf_r+0x1d2>
 8023b96:	2340      	movs	r3, #64	; 0x40
 8023b98:	616b      	str	r3, [r5, #20]
 8023b9a:	2300      	movs	r3, #0
 8023b9c:	9309      	str	r3, [sp, #36]	; 0x24
 8023b9e:	2320      	movs	r3, #32
 8023ba0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023ba4:	f8cd 800c 	str.w	r8, [sp, #12]
 8023ba8:	2330      	movs	r3, #48	; 0x30
 8023baa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8023d54 <_svfiprintf_r+0x1ec>
 8023bae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023bb2:	f04f 0901 	mov.w	r9, #1
 8023bb6:	4623      	mov	r3, r4
 8023bb8:	469a      	mov	sl, r3
 8023bba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023bbe:	b10a      	cbz	r2, 8023bc4 <_svfiprintf_r+0x5c>
 8023bc0:	2a25      	cmp	r2, #37	; 0x25
 8023bc2:	d1f9      	bne.n	8023bb8 <_svfiprintf_r+0x50>
 8023bc4:	ebba 0b04 	subs.w	fp, sl, r4
 8023bc8:	d00b      	beq.n	8023be2 <_svfiprintf_r+0x7a>
 8023bca:	465b      	mov	r3, fp
 8023bcc:	4622      	mov	r2, r4
 8023bce:	4629      	mov	r1, r5
 8023bd0:	4638      	mov	r0, r7
 8023bd2:	f7ff ff6e 	bl	8023ab2 <__ssputs_r>
 8023bd6:	3001      	adds	r0, #1
 8023bd8:	f000 80aa 	beq.w	8023d30 <_svfiprintf_r+0x1c8>
 8023bdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023bde:	445a      	add	r2, fp
 8023be0:	9209      	str	r2, [sp, #36]	; 0x24
 8023be2:	f89a 3000 	ldrb.w	r3, [sl]
 8023be6:	2b00      	cmp	r3, #0
 8023be8:	f000 80a2 	beq.w	8023d30 <_svfiprintf_r+0x1c8>
 8023bec:	2300      	movs	r3, #0
 8023bee:	f04f 32ff 	mov.w	r2, #4294967295
 8023bf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023bf6:	f10a 0a01 	add.w	sl, sl, #1
 8023bfa:	9304      	str	r3, [sp, #16]
 8023bfc:	9307      	str	r3, [sp, #28]
 8023bfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023c02:	931a      	str	r3, [sp, #104]	; 0x68
 8023c04:	4654      	mov	r4, sl
 8023c06:	2205      	movs	r2, #5
 8023c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023c0c:	4851      	ldr	r0, [pc, #324]	; (8023d54 <_svfiprintf_r+0x1ec>)
 8023c0e:	f7dc fb6f 	bl	80002f0 <memchr>
 8023c12:	9a04      	ldr	r2, [sp, #16]
 8023c14:	b9d8      	cbnz	r0, 8023c4e <_svfiprintf_r+0xe6>
 8023c16:	06d0      	lsls	r0, r2, #27
 8023c18:	bf44      	itt	mi
 8023c1a:	2320      	movmi	r3, #32
 8023c1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023c20:	0711      	lsls	r1, r2, #28
 8023c22:	bf44      	itt	mi
 8023c24:	232b      	movmi	r3, #43	; 0x2b
 8023c26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023c2a:	f89a 3000 	ldrb.w	r3, [sl]
 8023c2e:	2b2a      	cmp	r3, #42	; 0x2a
 8023c30:	d015      	beq.n	8023c5e <_svfiprintf_r+0xf6>
 8023c32:	9a07      	ldr	r2, [sp, #28]
 8023c34:	4654      	mov	r4, sl
 8023c36:	2000      	movs	r0, #0
 8023c38:	f04f 0c0a 	mov.w	ip, #10
 8023c3c:	4621      	mov	r1, r4
 8023c3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023c42:	3b30      	subs	r3, #48	; 0x30
 8023c44:	2b09      	cmp	r3, #9
 8023c46:	d94e      	bls.n	8023ce6 <_svfiprintf_r+0x17e>
 8023c48:	b1b0      	cbz	r0, 8023c78 <_svfiprintf_r+0x110>
 8023c4a:	9207      	str	r2, [sp, #28]
 8023c4c:	e014      	b.n	8023c78 <_svfiprintf_r+0x110>
 8023c4e:	eba0 0308 	sub.w	r3, r0, r8
 8023c52:	fa09 f303 	lsl.w	r3, r9, r3
 8023c56:	4313      	orrs	r3, r2
 8023c58:	9304      	str	r3, [sp, #16]
 8023c5a:	46a2      	mov	sl, r4
 8023c5c:	e7d2      	b.n	8023c04 <_svfiprintf_r+0x9c>
 8023c5e:	9b03      	ldr	r3, [sp, #12]
 8023c60:	1d19      	adds	r1, r3, #4
 8023c62:	681b      	ldr	r3, [r3, #0]
 8023c64:	9103      	str	r1, [sp, #12]
 8023c66:	2b00      	cmp	r3, #0
 8023c68:	bfbb      	ittet	lt
 8023c6a:	425b      	neglt	r3, r3
 8023c6c:	f042 0202 	orrlt.w	r2, r2, #2
 8023c70:	9307      	strge	r3, [sp, #28]
 8023c72:	9307      	strlt	r3, [sp, #28]
 8023c74:	bfb8      	it	lt
 8023c76:	9204      	strlt	r2, [sp, #16]
 8023c78:	7823      	ldrb	r3, [r4, #0]
 8023c7a:	2b2e      	cmp	r3, #46	; 0x2e
 8023c7c:	d10c      	bne.n	8023c98 <_svfiprintf_r+0x130>
 8023c7e:	7863      	ldrb	r3, [r4, #1]
 8023c80:	2b2a      	cmp	r3, #42	; 0x2a
 8023c82:	d135      	bne.n	8023cf0 <_svfiprintf_r+0x188>
 8023c84:	9b03      	ldr	r3, [sp, #12]
 8023c86:	1d1a      	adds	r2, r3, #4
 8023c88:	681b      	ldr	r3, [r3, #0]
 8023c8a:	9203      	str	r2, [sp, #12]
 8023c8c:	2b00      	cmp	r3, #0
 8023c8e:	bfb8      	it	lt
 8023c90:	f04f 33ff 	movlt.w	r3, #4294967295
 8023c94:	3402      	adds	r4, #2
 8023c96:	9305      	str	r3, [sp, #20]
 8023c98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8023d64 <_svfiprintf_r+0x1fc>
 8023c9c:	7821      	ldrb	r1, [r4, #0]
 8023c9e:	2203      	movs	r2, #3
 8023ca0:	4650      	mov	r0, sl
 8023ca2:	f7dc fb25 	bl	80002f0 <memchr>
 8023ca6:	b140      	cbz	r0, 8023cba <_svfiprintf_r+0x152>
 8023ca8:	2340      	movs	r3, #64	; 0x40
 8023caa:	eba0 000a 	sub.w	r0, r0, sl
 8023cae:	fa03 f000 	lsl.w	r0, r3, r0
 8023cb2:	9b04      	ldr	r3, [sp, #16]
 8023cb4:	4303      	orrs	r3, r0
 8023cb6:	3401      	adds	r4, #1
 8023cb8:	9304      	str	r3, [sp, #16]
 8023cba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023cbe:	4826      	ldr	r0, [pc, #152]	; (8023d58 <_svfiprintf_r+0x1f0>)
 8023cc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023cc4:	2206      	movs	r2, #6
 8023cc6:	f7dc fb13 	bl	80002f0 <memchr>
 8023cca:	2800      	cmp	r0, #0
 8023ccc:	d038      	beq.n	8023d40 <_svfiprintf_r+0x1d8>
 8023cce:	4b23      	ldr	r3, [pc, #140]	; (8023d5c <_svfiprintf_r+0x1f4>)
 8023cd0:	bb1b      	cbnz	r3, 8023d1a <_svfiprintf_r+0x1b2>
 8023cd2:	9b03      	ldr	r3, [sp, #12]
 8023cd4:	3307      	adds	r3, #7
 8023cd6:	f023 0307 	bic.w	r3, r3, #7
 8023cda:	3308      	adds	r3, #8
 8023cdc:	9303      	str	r3, [sp, #12]
 8023cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023ce0:	4433      	add	r3, r6
 8023ce2:	9309      	str	r3, [sp, #36]	; 0x24
 8023ce4:	e767      	b.n	8023bb6 <_svfiprintf_r+0x4e>
 8023ce6:	fb0c 3202 	mla	r2, ip, r2, r3
 8023cea:	460c      	mov	r4, r1
 8023cec:	2001      	movs	r0, #1
 8023cee:	e7a5      	b.n	8023c3c <_svfiprintf_r+0xd4>
 8023cf0:	2300      	movs	r3, #0
 8023cf2:	3401      	adds	r4, #1
 8023cf4:	9305      	str	r3, [sp, #20]
 8023cf6:	4619      	mov	r1, r3
 8023cf8:	f04f 0c0a 	mov.w	ip, #10
 8023cfc:	4620      	mov	r0, r4
 8023cfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023d02:	3a30      	subs	r2, #48	; 0x30
 8023d04:	2a09      	cmp	r2, #9
 8023d06:	d903      	bls.n	8023d10 <_svfiprintf_r+0x1a8>
 8023d08:	2b00      	cmp	r3, #0
 8023d0a:	d0c5      	beq.n	8023c98 <_svfiprintf_r+0x130>
 8023d0c:	9105      	str	r1, [sp, #20]
 8023d0e:	e7c3      	b.n	8023c98 <_svfiprintf_r+0x130>
 8023d10:	fb0c 2101 	mla	r1, ip, r1, r2
 8023d14:	4604      	mov	r4, r0
 8023d16:	2301      	movs	r3, #1
 8023d18:	e7f0      	b.n	8023cfc <_svfiprintf_r+0x194>
 8023d1a:	ab03      	add	r3, sp, #12
 8023d1c:	9300      	str	r3, [sp, #0]
 8023d1e:	462a      	mov	r2, r5
 8023d20:	4b0f      	ldr	r3, [pc, #60]	; (8023d60 <_svfiprintf_r+0x1f8>)
 8023d22:	a904      	add	r1, sp, #16
 8023d24:	4638      	mov	r0, r7
 8023d26:	f7fd fd57 	bl	80217d8 <_printf_float>
 8023d2a:	1c42      	adds	r2, r0, #1
 8023d2c:	4606      	mov	r6, r0
 8023d2e:	d1d6      	bne.n	8023cde <_svfiprintf_r+0x176>
 8023d30:	89ab      	ldrh	r3, [r5, #12]
 8023d32:	065b      	lsls	r3, r3, #25
 8023d34:	f53f af2c 	bmi.w	8023b90 <_svfiprintf_r+0x28>
 8023d38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023d3a:	b01d      	add	sp, #116	; 0x74
 8023d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d40:	ab03      	add	r3, sp, #12
 8023d42:	9300      	str	r3, [sp, #0]
 8023d44:	462a      	mov	r2, r5
 8023d46:	4b06      	ldr	r3, [pc, #24]	; (8023d60 <_svfiprintf_r+0x1f8>)
 8023d48:	a904      	add	r1, sp, #16
 8023d4a:	4638      	mov	r0, r7
 8023d4c:	f7fd ffd0 	bl	8021cf0 <_printf_i>
 8023d50:	e7eb      	b.n	8023d2a <_svfiprintf_r+0x1c2>
 8023d52:	bf00      	nop
 8023d54:	08026088 	.word	0x08026088
 8023d58:	08026092 	.word	0x08026092
 8023d5c:	080217d9 	.word	0x080217d9
 8023d60:	08023ab3 	.word	0x08023ab3
 8023d64:	0802608e 	.word	0x0802608e

08023d68 <_read_r>:
 8023d68:	b538      	push	{r3, r4, r5, lr}
 8023d6a:	4d07      	ldr	r5, [pc, #28]	; (8023d88 <_read_r+0x20>)
 8023d6c:	4604      	mov	r4, r0
 8023d6e:	4608      	mov	r0, r1
 8023d70:	4611      	mov	r1, r2
 8023d72:	2200      	movs	r2, #0
 8023d74:	602a      	str	r2, [r5, #0]
 8023d76:	461a      	mov	r2, r3
 8023d78:	f7dd f8c6 	bl	8000f08 <_read>
 8023d7c:	1c43      	adds	r3, r0, #1
 8023d7e:	d102      	bne.n	8023d86 <_read_r+0x1e>
 8023d80:	682b      	ldr	r3, [r5, #0]
 8023d82:	b103      	cbz	r3, 8023d86 <_read_r+0x1e>
 8023d84:	6023      	str	r3, [r4, #0]
 8023d86:	bd38      	pop	{r3, r4, r5, pc}
 8023d88:	24014278 	.word	0x24014278

08023d8c <abort>:
 8023d8c:	b508      	push	{r3, lr}
 8023d8e:	2006      	movs	r0, #6
 8023d90:	f000 f868 	bl	8023e64 <raise>
 8023d94:	2001      	movs	r0, #1
 8023d96:	f7dd f8ad 	bl	8000ef4 <_exit>
	...

08023d9c <_fstat_r>:
 8023d9c:	b538      	push	{r3, r4, r5, lr}
 8023d9e:	4d07      	ldr	r5, [pc, #28]	; (8023dbc <_fstat_r+0x20>)
 8023da0:	2300      	movs	r3, #0
 8023da2:	4604      	mov	r4, r0
 8023da4:	4608      	mov	r0, r1
 8023da6:	4611      	mov	r1, r2
 8023da8:	602b      	str	r3, [r5, #0]
 8023daa:	f7dd f8f2 	bl	8000f92 <_fstat>
 8023dae:	1c43      	adds	r3, r0, #1
 8023db0:	d102      	bne.n	8023db8 <_fstat_r+0x1c>
 8023db2:	682b      	ldr	r3, [r5, #0]
 8023db4:	b103      	cbz	r3, 8023db8 <_fstat_r+0x1c>
 8023db6:	6023      	str	r3, [r4, #0]
 8023db8:	bd38      	pop	{r3, r4, r5, pc}
 8023dba:	bf00      	nop
 8023dbc:	24014278 	.word	0x24014278

08023dc0 <_isatty_r>:
 8023dc0:	b538      	push	{r3, r4, r5, lr}
 8023dc2:	4d06      	ldr	r5, [pc, #24]	; (8023ddc <_isatty_r+0x1c>)
 8023dc4:	2300      	movs	r3, #0
 8023dc6:	4604      	mov	r4, r0
 8023dc8:	4608      	mov	r0, r1
 8023dca:	602b      	str	r3, [r5, #0]
 8023dcc:	f7dd f8f1 	bl	8000fb2 <_isatty>
 8023dd0:	1c43      	adds	r3, r0, #1
 8023dd2:	d102      	bne.n	8023dda <_isatty_r+0x1a>
 8023dd4:	682b      	ldr	r3, [r5, #0]
 8023dd6:	b103      	cbz	r3, 8023dda <_isatty_r+0x1a>
 8023dd8:	6023      	str	r3, [r4, #0]
 8023dda:	bd38      	pop	{r3, r4, r5, pc}
 8023ddc:	24014278 	.word	0x24014278

08023de0 <__ascii_mbtowc>:
 8023de0:	b082      	sub	sp, #8
 8023de2:	b901      	cbnz	r1, 8023de6 <__ascii_mbtowc+0x6>
 8023de4:	a901      	add	r1, sp, #4
 8023de6:	b142      	cbz	r2, 8023dfa <__ascii_mbtowc+0x1a>
 8023de8:	b14b      	cbz	r3, 8023dfe <__ascii_mbtowc+0x1e>
 8023dea:	7813      	ldrb	r3, [r2, #0]
 8023dec:	600b      	str	r3, [r1, #0]
 8023dee:	7812      	ldrb	r2, [r2, #0]
 8023df0:	1e10      	subs	r0, r2, #0
 8023df2:	bf18      	it	ne
 8023df4:	2001      	movne	r0, #1
 8023df6:	b002      	add	sp, #8
 8023df8:	4770      	bx	lr
 8023dfa:	4610      	mov	r0, r2
 8023dfc:	e7fb      	b.n	8023df6 <__ascii_mbtowc+0x16>
 8023dfe:	f06f 0001 	mvn.w	r0, #1
 8023e02:	e7f8      	b.n	8023df6 <__ascii_mbtowc+0x16>

08023e04 <_malloc_usable_size_r>:
 8023e04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023e08:	1f18      	subs	r0, r3, #4
 8023e0a:	2b00      	cmp	r3, #0
 8023e0c:	bfbc      	itt	lt
 8023e0e:	580b      	ldrlt	r3, [r1, r0]
 8023e10:	18c0      	addlt	r0, r0, r3
 8023e12:	4770      	bx	lr

08023e14 <_raise_r>:
 8023e14:	291f      	cmp	r1, #31
 8023e16:	b538      	push	{r3, r4, r5, lr}
 8023e18:	4604      	mov	r4, r0
 8023e1a:	460d      	mov	r5, r1
 8023e1c:	d904      	bls.n	8023e28 <_raise_r+0x14>
 8023e1e:	2316      	movs	r3, #22
 8023e20:	6003      	str	r3, [r0, #0]
 8023e22:	f04f 30ff 	mov.w	r0, #4294967295
 8023e26:	bd38      	pop	{r3, r4, r5, pc}
 8023e28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8023e2a:	b112      	cbz	r2, 8023e32 <_raise_r+0x1e>
 8023e2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023e30:	b94b      	cbnz	r3, 8023e46 <_raise_r+0x32>
 8023e32:	4620      	mov	r0, r4
 8023e34:	f000 f830 	bl	8023e98 <_getpid_r>
 8023e38:	462a      	mov	r2, r5
 8023e3a:	4601      	mov	r1, r0
 8023e3c:	4620      	mov	r0, r4
 8023e3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023e42:	f000 b817 	b.w	8023e74 <_kill_r>
 8023e46:	2b01      	cmp	r3, #1
 8023e48:	d00a      	beq.n	8023e60 <_raise_r+0x4c>
 8023e4a:	1c59      	adds	r1, r3, #1
 8023e4c:	d103      	bne.n	8023e56 <_raise_r+0x42>
 8023e4e:	2316      	movs	r3, #22
 8023e50:	6003      	str	r3, [r0, #0]
 8023e52:	2001      	movs	r0, #1
 8023e54:	e7e7      	b.n	8023e26 <_raise_r+0x12>
 8023e56:	2400      	movs	r4, #0
 8023e58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023e5c:	4628      	mov	r0, r5
 8023e5e:	4798      	blx	r3
 8023e60:	2000      	movs	r0, #0
 8023e62:	e7e0      	b.n	8023e26 <_raise_r+0x12>

08023e64 <raise>:
 8023e64:	4b02      	ldr	r3, [pc, #8]	; (8023e70 <raise+0xc>)
 8023e66:	4601      	mov	r1, r0
 8023e68:	6818      	ldr	r0, [r3, #0]
 8023e6a:	f7ff bfd3 	b.w	8023e14 <_raise_r>
 8023e6e:	bf00      	nop
 8023e70:	24000134 	.word	0x24000134

08023e74 <_kill_r>:
 8023e74:	b538      	push	{r3, r4, r5, lr}
 8023e76:	4d07      	ldr	r5, [pc, #28]	; (8023e94 <_kill_r+0x20>)
 8023e78:	2300      	movs	r3, #0
 8023e7a:	4604      	mov	r4, r0
 8023e7c:	4608      	mov	r0, r1
 8023e7e:	4611      	mov	r1, r2
 8023e80:	602b      	str	r3, [r5, #0]
 8023e82:	f7dd f825 	bl	8000ed0 <_kill>
 8023e86:	1c43      	adds	r3, r0, #1
 8023e88:	d102      	bne.n	8023e90 <_kill_r+0x1c>
 8023e8a:	682b      	ldr	r3, [r5, #0]
 8023e8c:	b103      	cbz	r3, 8023e90 <_kill_r+0x1c>
 8023e8e:	6023      	str	r3, [r4, #0]
 8023e90:	bd38      	pop	{r3, r4, r5, pc}
 8023e92:	bf00      	nop
 8023e94:	24014278 	.word	0x24014278

08023e98 <_getpid_r>:
 8023e98:	f7dd b812 	b.w	8000ec0 <_getpid>

08023e9c <__ascii_wctomb>:
 8023e9c:	b149      	cbz	r1, 8023eb2 <__ascii_wctomb+0x16>
 8023e9e:	2aff      	cmp	r2, #255	; 0xff
 8023ea0:	bf85      	ittet	hi
 8023ea2:	238a      	movhi	r3, #138	; 0x8a
 8023ea4:	6003      	strhi	r3, [r0, #0]
 8023ea6:	700a      	strbls	r2, [r1, #0]
 8023ea8:	f04f 30ff 	movhi.w	r0, #4294967295
 8023eac:	bf98      	it	ls
 8023eae:	2001      	movls	r0, #1
 8023eb0:	4770      	bx	lr
 8023eb2:	4608      	mov	r0, r1
 8023eb4:	4770      	bx	lr
	...

08023eb8 <_init>:
 8023eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023eba:	bf00      	nop
 8023ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023ebe:	bc08      	pop	{r3}
 8023ec0:	469e      	mov	lr, r3
 8023ec2:	4770      	bx	lr

08023ec4 <_fini>:
 8023ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023ec6:	bf00      	nop
 8023ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023eca:	bc08      	pop	{r3}
 8023ecc:	469e      	mov	lr, r3
 8023ece:	4770      	bx	lr
